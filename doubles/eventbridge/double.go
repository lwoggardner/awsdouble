// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:12:47+11:00

// Package eventbridgedouble provides a TestDouble implementation of eventbridgeiface.EventBridgeAPI
package eventbridgedouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/eventbridge"
	"github.com/aws/aws-sdk-go/service/eventbridge/eventbridgeiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// EventBridgeDouble is TestDouble for eventbridgeiface.EventBridgeAPI
type EventBridgeDouble struct {
	eventbridgeiface.EventBridgeAPI
	*awsdouble.AWSTestDouble
}

// Constructor for EventBridgeDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *EventBridgeDouble {
	result := &EventBridgeDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*eventbridgeiface.EventBridgeAPI)(nil), configurators...)
	return result
}

func (d *EventBridgeDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *EventBridgeDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "ActivateEventSourceWithContext":
		return m.Fake(d.fakeActivateEventSourceWithContext)

	case "CreateEventBusWithContext":
		return m.Fake(d.fakeCreateEventBusWithContext)

	case "CreatePartnerEventSourceWithContext":
		return m.Fake(d.fakeCreatePartnerEventSourceWithContext)

	case "DeactivateEventSourceWithContext":
		return m.Fake(d.fakeDeactivateEventSourceWithContext)

	case "DeleteEventBusWithContext":
		return m.Fake(d.fakeDeleteEventBusWithContext)

	case "DeletePartnerEventSourceWithContext":
		return m.Fake(d.fakeDeletePartnerEventSourceWithContext)

	case "DeleteRuleWithContext":
		return m.Fake(d.fakeDeleteRuleWithContext)

	case "DescribeEventBusWithContext":
		return m.Fake(d.fakeDescribeEventBusWithContext)

	case "DescribeEventSourceWithContext":
		return m.Fake(d.fakeDescribeEventSourceWithContext)

	case "DescribePartnerEventSourceWithContext":
		return m.Fake(d.fakeDescribePartnerEventSourceWithContext)

	case "DescribeRuleWithContext":
		return m.Fake(d.fakeDescribeRuleWithContext)

	case "DisableRuleWithContext":
		return m.Fake(d.fakeDisableRuleWithContext)

	case "EnableRuleWithContext":
		return m.Fake(d.fakeEnableRuleWithContext)

	case "ListEventBusesWithContext":
		return m.Fake(d.fakeListEventBusesWithContext)

	case "ListEventSourcesWithContext":
		return m.Fake(d.fakeListEventSourcesWithContext)

	case "ListPartnerEventSourceAccountsWithContext":
		return m.Fake(d.fakeListPartnerEventSourceAccountsWithContext)

	case "ListPartnerEventSourcesWithContext":
		return m.Fake(d.fakeListPartnerEventSourcesWithContext)

	case "ListRuleNamesByTargetWithContext":
		return m.Fake(d.fakeListRuleNamesByTargetWithContext)

	case "ListRulesWithContext":
		return m.Fake(d.fakeListRulesWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "ListTargetsByRuleWithContext":
		return m.Fake(d.fakeListTargetsByRuleWithContext)

	case "PutEventsWithContext":
		return m.Fake(d.fakePutEventsWithContext)

	case "PutPartnerEventsWithContext":
		return m.Fake(d.fakePutPartnerEventsWithContext)

	case "PutPermissionWithContext":
		return m.Fake(d.fakePutPermissionWithContext)

	case "PutRuleWithContext":
		return m.Fake(d.fakePutRuleWithContext)

	case "PutTargetsWithContext":
		return m.Fake(d.fakePutTargetsWithContext)

	case "RemovePermissionWithContext":
		return m.Fake(d.fakeRemovePermissionWithContext)

	case "RemoveTargetsWithContext":
		return m.Fake(d.fakeRemoveTargetsWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "TestEventPatternWithContext":
		return m.Fake(d.fakeTestEventPatternWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	default:
		return nil
	}
}

func (d *EventBridgeDouble) ActivateEventSource(i0 *eventbridge.ActivateEventSourceInput) (r0 *eventbridge.ActivateEventSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ActivateEventSource", i0)
	r0, _ = returns[0].(*eventbridge.ActivateEventSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) ActivateEventSourceRequest(i0 *eventbridge.ActivateEventSourceInput) (r0 *request.Request, r1 *eventbridge.ActivateEventSourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ActivateEventSourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eventbridge.ActivateEventSourceOutput)
	return
}

func (d *EventBridgeDouble) ActivateEventSourceWithContext(i0 context.Context, i1 *eventbridge.ActivateEventSourceInput, i2 ...request.Option) (r0 *eventbridge.ActivateEventSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ActivateEventSourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eventbridge.ActivateEventSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) fakeActivateEventSourceWithContext(ctx context.Context, in *eventbridge.ActivateEventSourceInput, _ ...request.Option) (*eventbridge.ActivateEventSourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ActivateEventSource cancelled", ctx.Err())
	default:
		return d.ActivateEventSource(in)
	}
}

func (d *EventBridgeDouble) CreateEventBus(i0 *eventbridge.CreateEventBusInput) (r0 *eventbridge.CreateEventBusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEventBus", i0)
	r0, _ = returns[0].(*eventbridge.CreateEventBusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) CreateEventBusRequest(i0 *eventbridge.CreateEventBusInput) (r0 *request.Request, r1 *eventbridge.CreateEventBusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEventBusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eventbridge.CreateEventBusOutput)
	return
}

func (d *EventBridgeDouble) CreateEventBusWithContext(i0 context.Context, i1 *eventbridge.CreateEventBusInput, i2 ...request.Option) (r0 *eventbridge.CreateEventBusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEventBusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eventbridge.CreateEventBusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) fakeCreateEventBusWithContext(ctx context.Context, in *eventbridge.CreateEventBusInput, _ ...request.Option) (*eventbridge.CreateEventBusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateEventBus cancelled", ctx.Err())
	default:
		return d.CreateEventBus(in)
	}
}

func (d *EventBridgeDouble) CreatePartnerEventSource(i0 *eventbridge.CreatePartnerEventSourceInput) (r0 *eventbridge.CreatePartnerEventSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePartnerEventSource", i0)
	r0, _ = returns[0].(*eventbridge.CreatePartnerEventSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) CreatePartnerEventSourceRequest(i0 *eventbridge.CreatePartnerEventSourceInput) (r0 *request.Request, r1 *eventbridge.CreatePartnerEventSourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePartnerEventSourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eventbridge.CreatePartnerEventSourceOutput)
	return
}

func (d *EventBridgeDouble) CreatePartnerEventSourceWithContext(i0 context.Context, i1 *eventbridge.CreatePartnerEventSourceInput, i2 ...request.Option) (r0 *eventbridge.CreatePartnerEventSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePartnerEventSourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eventbridge.CreatePartnerEventSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) fakeCreatePartnerEventSourceWithContext(ctx context.Context, in *eventbridge.CreatePartnerEventSourceInput, _ ...request.Option) (*eventbridge.CreatePartnerEventSourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreatePartnerEventSource cancelled", ctx.Err())
	default:
		return d.CreatePartnerEventSource(in)
	}
}

func (d *EventBridgeDouble) DeactivateEventSource(i0 *eventbridge.DeactivateEventSourceInput) (r0 *eventbridge.DeactivateEventSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeactivateEventSource", i0)
	r0, _ = returns[0].(*eventbridge.DeactivateEventSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) DeactivateEventSourceRequest(i0 *eventbridge.DeactivateEventSourceInput) (r0 *request.Request, r1 *eventbridge.DeactivateEventSourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeactivateEventSourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eventbridge.DeactivateEventSourceOutput)
	return
}

func (d *EventBridgeDouble) DeactivateEventSourceWithContext(i0 context.Context, i1 *eventbridge.DeactivateEventSourceInput, i2 ...request.Option) (r0 *eventbridge.DeactivateEventSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeactivateEventSourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eventbridge.DeactivateEventSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) fakeDeactivateEventSourceWithContext(ctx context.Context, in *eventbridge.DeactivateEventSourceInput, _ ...request.Option) (*eventbridge.DeactivateEventSourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeactivateEventSource cancelled", ctx.Err())
	default:
		return d.DeactivateEventSource(in)
	}
}

func (d *EventBridgeDouble) DeleteEventBus(i0 *eventbridge.DeleteEventBusInput) (r0 *eventbridge.DeleteEventBusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEventBus", i0)
	r0, _ = returns[0].(*eventbridge.DeleteEventBusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) DeleteEventBusRequest(i0 *eventbridge.DeleteEventBusInput) (r0 *request.Request, r1 *eventbridge.DeleteEventBusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEventBusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eventbridge.DeleteEventBusOutput)
	return
}

func (d *EventBridgeDouble) DeleteEventBusWithContext(i0 context.Context, i1 *eventbridge.DeleteEventBusInput, i2 ...request.Option) (r0 *eventbridge.DeleteEventBusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEventBusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eventbridge.DeleteEventBusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) fakeDeleteEventBusWithContext(ctx context.Context, in *eventbridge.DeleteEventBusInput, _ ...request.Option) (*eventbridge.DeleteEventBusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteEventBus cancelled", ctx.Err())
	default:
		return d.DeleteEventBus(in)
	}
}

func (d *EventBridgeDouble) DeletePartnerEventSource(i0 *eventbridge.DeletePartnerEventSourceInput) (r0 *eventbridge.DeletePartnerEventSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePartnerEventSource", i0)
	r0, _ = returns[0].(*eventbridge.DeletePartnerEventSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) DeletePartnerEventSourceRequest(i0 *eventbridge.DeletePartnerEventSourceInput) (r0 *request.Request, r1 *eventbridge.DeletePartnerEventSourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePartnerEventSourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eventbridge.DeletePartnerEventSourceOutput)
	return
}

func (d *EventBridgeDouble) DeletePartnerEventSourceWithContext(i0 context.Context, i1 *eventbridge.DeletePartnerEventSourceInput, i2 ...request.Option) (r0 *eventbridge.DeletePartnerEventSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePartnerEventSourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eventbridge.DeletePartnerEventSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) fakeDeletePartnerEventSourceWithContext(ctx context.Context, in *eventbridge.DeletePartnerEventSourceInput, _ ...request.Option) (*eventbridge.DeletePartnerEventSourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeletePartnerEventSource cancelled", ctx.Err())
	default:
		return d.DeletePartnerEventSource(in)
	}
}

func (d *EventBridgeDouble) DeleteRule(i0 *eventbridge.DeleteRuleInput) (r0 *eventbridge.DeleteRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRule", i0)
	r0, _ = returns[0].(*eventbridge.DeleteRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) DeleteRuleRequest(i0 *eventbridge.DeleteRuleInput) (r0 *request.Request, r1 *eventbridge.DeleteRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eventbridge.DeleteRuleOutput)
	return
}

func (d *EventBridgeDouble) DeleteRuleWithContext(i0 context.Context, i1 *eventbridge.DeleteRuleInput, i2 ...request.Option) (r0 *eventbridge.DeleteRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eventbridge.DeleteRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) fakeDeleteRuleWithContext(ctx context.Context, in *eventbridge.DeleteRuleInput, _ ...request.Option) (*eventbridge.DeleteRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRule cancelled", ctx.Err())
	default:
		return d.DeleteRule(in)
	}
}

func (d *EventBridgeDouble) DescribeEventBus(i0 *eventbridge.DescribeEventBusInput) (r0 *eventbridge.DescribeEventBusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventBus", i0)
	r0, _ = returns[0].(*eventbridge.DescribeEventBusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) DescribeEventBusRequest(i0 *eventbridge.DescribeEventBusInput) (r0 *request.Request, r1 *eventbridge.DescribeEventBusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventBusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eventbridge.DescribeEventBusOutput)
	return
}

func (d *EventBridgeDouble) DescribeEventBusWithContext(i0 context.Context, i1 *eventbridge.DescribeEventBusInput, i2 ...request.Option) (r0 *eventbridge.DescribeEventBusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventBusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eventbridge.DescribeEventBusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) fakeDescribeEventBusWithContext(ctx context.Context, in *eventbridge.DescribeEventBusInput, _ ...request.Option) (*eventbridge.DescribeEventBusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEventBus cancelled", ctx.Err())
	default:
		return d.DescribeEventBus(in)
	}
}

func (d *EventBridgeDouble) DescribeEventSource(i0 *eventbridge.DescribeEventSourceInput) (r0 *eventbridge.DescribeEventSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventSource", i0)
	r0, _ = returns[0].(*eventbridge.DescribeEventSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) DescribeEventSourceRequest(i0 *eventbridge.DescribeEventSourceInput) (r0 *request.Request, r1 *eventbridge.DescribeEventSourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventSourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eventbridge.DescribeEventSourceOutput)
	return
}

func (d *EventBridgeDouble) DescribeEventSourceWithContext(i0 context.Context, i1 *eventbridge.DescribeEventSourceInput, i2 ...request.Option) (r0 *eventbridge.DescribeEventSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventSourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eventbridge.DescribeEventSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) fakeDescribeEventSourceWithContext(ctx context.Context, in *eventbridge.DescribeEventSourceInput, _ ...request.Option) (*eventbridge.DescribeEventSourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEventSource cancelled", ctx.Err())
	default:
		return d.DescribeEventSource(in)
	}
}

func (d *EventBridgeDouble) DescribePartnerEventSource(i0 *eventbridge.DescribePartnerEventSourceInput) (r0 *eventbridge.DescribePartnerEventSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePartnerEventSource", i0)
	r0, _ = returns[0].(*eventbridge.DescribePartnerEventSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) DescribePartnerEventSourceRequest(i0 *eventbridge.DescribePartnerEventSourceInput) (r0 *request.Request, r1 *eventbridge.DescribePartnerEventSourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePartnerEventSourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eventbridge.DescribePartnerEventSourceOutput)
	return
}

func (d *EventBridgeDouble) DescribePartnerEventSourceWithContext(i0 context.Context, i1 *eventbridge.DescribePartnerEventSourceInput, i2 ...request.Option) (r0 *eventbridge.DescribePartnerEventSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePartnerEventSourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eventbridge.DescribePartnerEventSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) fakeDescribePartnerEventSourceWithContext(ctx context.Context, in *eventbridge.DescribePartnerEventSourceInput, _ ...request.Option) (*eventbridge.DescribePartnerEventSourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribePartnerEventSource cancelled", ctx.Err())
	default:
		return d.DescribePartnerEventSource(in)
	}
}

func (d *EventBridgeDouble) DescribeRule(i0 *eventbridge.DescribeRuleInput) (r0 *eventbridge.DescribeRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRule", i0)
	r0, _ = returns[0].(*eventbridge.DescribeRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) DescribeRuleRequest(i0 *eventbridge.DescribeRuleInput) (r0 *request.Request, r1 *eventbridge.DescribeRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eventbridge.DescribeRuleOutput)
	return
}

func (d *EventBridgeDouble) DescribeRuleWithContext(i0 context.Context, i1 *eventbridge.DescribeRuleInput, i2 ...request.Option) (r0 *eventbridge.DescribeRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eventbridge.DescribeRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) fakeDescribeRuleWithContext(ctx context.Context, in *eventbridge.DescribeRuleInput, _ ...request.Option) (*eventbridge.DescribeRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeRule cancelled", ctx.Err())
	default:
		return d.DescribeRule(in)
	}
}

func (d *EventBridgeDouble) DisableRule(i0 *eventbridge.DisableRuleInput) (r0 *eventbridge.DisableRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableRule", i0)
	r0, _ = returns[0].(*eventbridge.DisableRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) DisableRuleRequest(i0 *eventbridge.DisableRuleInput) (r0 *request.Request, r1 *eventbridge.DisableRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eventbridge.DisableRuleOutput)
	return
}

func (d *EventBridgeDouble) DisableRuleWithContext(i0 context.Context, i1 *eventbridge.DisableRuleInput, i2 ...request.Option) (r0 *eventbridge.DisableRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eventbridge.DisableRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) fakeDisableRuleWithContext(ctx context.Context, in *eventbridge.DisableRuleInput, _ ...request.Option) (*eventbridge.DisableRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisableRule cancelled", ctx.Err())
	default:
		return d.DisableRule(in)
	}
}

func (d *EventBridgeDouble) EnableRule(i0 *eventbridge.EnableRuleInput) (r0 *eventbridge.EnableRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableRule", i0)
	r0, _ = returns[0].(*eventbridge.EnableRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) EnableRuleRequest(i0 *eventbridge.EnableRuleInput) (r0 *request.Request, r1 *eventbridge.EnableRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eventbridge.EnableRuleOutput)
	return
}

func (d *EventBridgeDouble) EnableRuleWithContext(i0 context.Context, i1 *eventbridge.EnableRuleInput, i2 ...request.Option) (r0 *eventbridge.EnableRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eventbridge.EnableRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) fakeEnableRuleWithContext(ctx context.Context, in *eventbridge.EnableRuleInput, _ ...request.Option) (*eventbridge.EnableRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "EnableRule cancelled", ctx.Err())
	default:
		return d.EnableRule(in)
	}
}

func (d *EventBridgeDouble) ListEventBuses(i0 *eventbridge.ListEventBusesInput) (r0 *eventbridge.ListEventBusesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEventBuses", i0)
	r0, _ = returns[0].(*eventbridge.ListEventBusesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) ListEventBusesRequest(i0 *eventbridge.ListEventBusesInput) (r0 *request.Request, r1 *eventbridge.ListEventBusesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEventBusesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eventbridge.ListEventBusesOutput)
	return
}

func (d *EventBridgeDouble) ListEventBusesWithContext(i0 context.Context, i1 *eventbridge.ListEventBusesInput, i2 ...request.Option) (r0 *eventbridge.ListEventBusesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEventBusesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eventbridge.ListEventBusesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) fakeListEventBusesWithContext(ctx context.Context, in *eventbridge.ListEventBusesInput, _ ...request.Option) (*eventbridge.ListEventBusesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListEventBuses cancelled", ctx.Err())
	default:
		return d.ListEventBuses(in)
	}
}

func (d *EventBridgeDouble) ListEventSources(i0 *eventbridge.ListEventSourcesInput) (r0 *eventbridge.ListEventSourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEventSources", i0)
	r0, _ = returns[0].(*eventbridge.ListEventSourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) ListEventSourcesRequest(i0 *eventbridge.ListEventSourcesInput) (r0 *request.Request, r1 *eventbridge.ListEventSourcesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEventSourcesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eventbridge.ListEventSourcesOutput)
	return
}

func (d *EventBridgeDouble) ListEventSourcesWithContext(i0 context.Context, i1 *eventbridge.ListEventSourcesInput, i2 ...request.Option) (r0 *eventbridge.ListEventSourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEventSourcesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eventbridge.ListEventSourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) fakeListEventSourcesWithContext(ctx context.Context, in *eventbridge.ListEventSourcesInput, _ ...request.Option) (*eventbridge.ListEventSourcesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListEventSources cancelled", ctx.Err())
	default:
		return d.ListEventSources(in)
	}
}

func (d *EventBridgeDouble) ListPartnerEventSourceAccounts(i0 *eventbridge.ListPartnerEventSourceAccountsInput) (r0 *eventbridge.ListPartnerEventSourceAccountsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPartnerEventSourceAccounts", i0)
	r0, _ = returns[0].(*eventbridge.ListPartnerEventSourceAccountsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) ListPartnerEventSourceAccountsRequest(i0 *eventbridge.ListPartnerEventSourceAccountsInput) (r0 *request.Request, r1 *eventbridge.ListPartnerEventSourceAccountsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPartnerEventSourceAccountsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eventbridge.ListPartnerEventSourceAccountsOutput)
	return
}

func (d *EventBridgeDouble) ListPartnerEventSourceAccountsWithContext(i0 context.Context, i1 *eventbridge.ListPartnerEventSourceAccountsInput, i2 ...request.Option) (r0 *eventbridge.ListPartnerEventSourceAccountsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPartnerEventSourceAccountsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eventbridge.ListPartnerEventSourceAccountsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) fakeListPartnerEventSourceAccountsWithContext(ctx context.Context, in *eventbridge.ListPartnerEventSourceAccountsInput, _ ...request.Option) (*eventbridge.ListPartnerEventSourceAccountsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListPartnerEventSourceAccounts cancelled", ctx.Err())
	default:
		return d.ListPartnerEventSourceAccounts(in)
	}
}

func (d *EventBridgeDouble) ListPartnerEventSources(i0 *eventbridge.ListPartnerEventSourcesInput) (r0 *eventbridge.ListPartnerEventSourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPartnerEventSources", i0)
	r0, _ = returns[0].(*eventbridge.ListPartnerEventSourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) ListPartnerEventSourcesRequest(i0 *eventbridge.ListPartnerEventSourcesInput) (r0 *request.Request, r1 *eventbridge.ListPartnerEventSourcesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPartnerEventSourcesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eventbridge.ListPartnerEventSourcesOutput)
	return
}

func (d *EventBridgeDouble) ListPartnerEventSourcesWithContext(i0 context.Context, i1 *eventbridge.ListPartnerEventSourcesInput, i2 ...request.Option) (r0 *eventbridge.ListPartnerEventSourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPartnerEventSourcesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eventbridge.ListPartnerEventSourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) fakeListPartnerEventSourcesWithContext(ctx context.Context, in *eventbridge.ListPartnerEventSourcesInput, _ ...request.Option) (*eventbridge.ListPartnerEventSourcesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListPartnerEventSources cancelled", ctx.Err())
	default:
		return d.ListPartnerEventSources(in)
	}
}

func (d *EventBridgeDouble) ListRuleNamesByTarget(i0 *eventbridge.ListRuleNamesByTargetInput) (r0 *eventbridge.ListRuleNamesByTargetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRuleNamesByTarget", i0)
	r0, _ = returns[0].(*eventbridge.ListRuleNamesByTargetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) ListRuleNamesByTargetRequest(i0 *eventbridge.ListRuleNamesByTargetInput) (r0 *request.Request, r1 *eventbridge.ListRuleNamesByTargetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRuleNamesByTargetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eventbridge.ListRuleNamesByTargetOutput)
	return
}

func (d *EventBridgeDouble) ListRuleNamesByTargetWithContext(i0 context.Context, i1 *eventbridge.ListRuleNamesByTargetInput, i2 ...request.Option) (r0 *eventbridge.ListRuleNamesByTargetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRuleNamesByTargetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eventbridge.ListRuleNamesByTargetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) fakeListRuleNamesByTargetWithContext(ctx context.Context, in *eventbridge.ListRuleNamesByTargetInput, _ ...request.Option) (*eventbridge.ListRuleNamesByTargetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListRuleNamesByTarget cancelled", ctx.Err())
	default:
		return d.ListRuleNamesByTarget(in)
	}
}

func (d *EventBridgeDouble) ListRules(i0 *eventbridge.ListRulesInput) (r0 *eventbridge.ListRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRules", i0)
	r0, _ = returns[0].(*eventbridge.ListRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) ListRulesRequest(i0 *eventbridge.ListRulesInput) (r0 *request.Request, r1 *eventbridge.ListRulesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRulesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eventbridge.ListRulesOutput)
	return
}

func (d *EventBridgeDouble) ListRulesWithContext(i0 context.Context, i1 *eventbridge.ListRulesInput, i2 ...request.Option) (r0 *eventbridge.ListRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRulesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eventbridge.ListRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) fakeListRulesWithContext(ctx context.Context, in *eventbridge.ListRulesInput, _ ...request.Option) (*eventbridge.ListRulesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListRules cancelled", ctx.Err())
	default:
		return d.ListRules(in)
	}
}

func (d *EventBridgeDouble) ListTagsForResource(i0 *eventbridge.ListTagsForResourceInput) (r0 *eventbridge.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*eventbridge.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) ListTagsForResourceRequest(i0 *eventbridge.ListTagsForResourceInput) (r0 *request.Request, r1 *eventbridge.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eventbridge.ListTagsForResourceOutput)
	return
}

func (d *EventBridgeDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *eventbridge.ListTagsForResourceInput, i2 ...request.Option) (r0 *eventbridge.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eventbridge.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *eventbridge.ListTagsForResourceInput, _ ...request.Option) (*eventbridge.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *EventBridgeDouble) ListTargetsByRule(i0 *eventbridge.ListTargetsByRuleInput) (r0 *eventbridge.ListTargetsByRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTargetsByRule", i0)
	r0, _ = returns[0].(*eventbridge.ListTargetsByRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) ListTargetsByRuleRequest(i0 *eventbridge.ListTargetsByRuleInput) (r0 *request.Request, r1 *eventbridge.ListTargetsByRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTargetsByRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eventbridge.ListTargetsByRuleOutput)
	return
}

func (d *EventBridgeDouble) ListTargetsByRuleWithContext(i0 context.Context, i1 *eventbridge.ListTargetsByRuleInput, i2 ...request.Option) (r0 *eventbridge.ListTargetsByRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTargetsByRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eventbridge.ListTargetsByRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) fakeListTargetsByRuleWithContext(ctx context.Context, in *eventbridge.ListTargetsByRuleInput, _ ...request.Option) (*eventbridge.ListTargetsByRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTargetsByRule cancelled", ctx.Err())
	default:
		return d.ListTargetsByRule(in)
	}
}

func (d *EventBridgeDouble) PutEvents(i0 *eventbridge.PutEventsInput) (r0 *eventbridge.PutEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutEvents", i0)
	r0, _ = returns[0].(*eventbridge.PutEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) PutEventsRequest(i0 *eventbridge.PutEventsInput) (r0 *request.Request, r1 *eventbridge.PutEventsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutEventsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eventbridge.PutEventsOutput)
	return
}

func (d *EventBridgeDouble) PutEventsWithContext(i0 context.Context, i1 *eventbridge.PutEventsInput, i2 ...request.Option) (r0 *eventbridge.PutEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutEventsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eventbridge.PutEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) fakePutEventsWithContext(ctx context.Context, in *eventbridge.PutEventsInput, _ ...request.Option) (*eventbridge.PutEventsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutEvents cancelled", ctx.Err())
	default:
		return d.PutEvents(in)
	}
}

func (d *EventBridgeDouble) PutPartnerEvents(i0 *eventbridge.PutPartnerEventsInput) (r0 *eventbridge.PutPartnerEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutPartnerEvents", i0)
	r0, _ = returns[0].(*eventbridge.PutPartnerEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) PutPartnerEventsRequest(i0 *eventbridge.PutPartnerEventsInput) (r0 *request.Request, r1 *eventbridge.PutPartnerEventsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutPartnerEventsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eventbridge.PutPartnerEventsOutput)
	return
}

func (d *EventBridgeDouble) PutPartnerEventsWithContext(i0 context.Context, i1 *eventbridge.PutPartnerEventsInput, i2 ...request.Option) (r0 *eventbridge.PutPartnerEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutPartnerEventsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eventbridge.PutPartnerEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) fakePutPartnerEventsWithContext(ctx context.Context, in *eventbridge.PutPartnerEventsInput, _ ...request.Option) (*eventbridge.PutPartnerEventsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutPartnerEvents cancelled", ctx.Err())
	default:
		return d.PutPartnerEvents(in)
	}
}

func (d *EventBridgeDouble) PutPermission(i0 *eventbridge.PutPermissionInput) (r0 *eventbridge.PutPermissionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutPermission", i0)
	r0, _ = returns[0].(*eventbridge.PutPermissionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) PutPermissionRequest(i0 *eventbridge.PutPermissionInput) (r0 *request.Request, r1 *eventbridge.PutPermissionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutPermissionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eventbridge.PutPermissionOutput)
	return
}

func (d *EventBridgeDouble) PutPermissionWithContext(i0 context.Context, i1 *eventbridge.PutPermissionInput, i2 ...request.Option) (r0 *eventbridge.PutPermissionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutPermissionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eventbridge.PutPermissionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) fakePutPermissionWithContext(ctx context.Context, in *eventbridge.PutPermissionInput, _ ...request.Option) (*eventbridge.PutPermissionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutPermission cancelled", ctx.Err())
	default:
		return d.PutPermission(in)
	}
}

func (d *EventBridgeDouble) PutRule(i0 *eventbridge.PutRuleInput) (r0 *eventbridge.PutRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRule", i0)
	r0, _ = returns[0].(*eventbridge.PutRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) PutRuleRequest(i0 *eventbridge.PutRuleInput) (r0 *request.Request, r1 *eventbridge.PutRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eventbridge.PutRuleOutput)
	return
}

func (d *EventBridgeDouble) PutRuleWithContext(i0 context.Context, i1 *eventbridge.PutRuleInput, i2 ...request.Option) (r0 *eventbridge.PutRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eventbridge.PutRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) fakePutRuleWithContext(ctx context.Context, in *eventbridge.PutRuleInput, _ ...request.Option) (*eventbridge.PutRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutRule cancelled", ctx.Err())
	default:
		return d.PutRule(in)
	}
}

func (d *EventBridgeDouble) PutTargets(i0 *eventbridge.PutTargetsInput) (r0 *eventbridge.PutTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutTargets", i0)
	r0, _ = returns[0].(*eventbridge.PutTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) PutTargetsRequest(i0 *eventbridge.PutTargetsInput) (r0 *request.Request, r1 *eventbridge.PutTargetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutTargetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eventbridge.PutTargetsOutput)
	return
}

func (d *EventBridgeDouble) PutTargetsWithContext(i0 context.Context, i1 *eventbridge.PutTargetsInput, i2 ...request.Option) (r0 *eventbridge.PutTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutTargetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eventbridge.PutTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) fakePutTargetsWithContext(ctx context.Context, in *eventbridge.PutTargetsInput, _ ...request.Option) (*eventbridge.PutTargetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutTargets cancelled", ctx.Err())
	default:
		return d.PutTargets(in)
	}
}

func (d *EventBridgeDouble) RemovePermission(i0 *eventbridge.RemovePermissionInput) (r0 *eventbridge.RemovePermissionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemovePermission", i0)
	r0, _ = returns[0].(*eventbridge.RemovePermissionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) RemovePermissionRequest(i0 *eventbridge.RemovePermissionInput) (r0 *request.Request, r1 *eventbridge.RemovePermissionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemovePermissionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eventbridge.RemovePermissionOutput)
	return
}

func (d *EventBridgeDouble) RemovePermissionWithContext(i0 context.Context, i1 *eventbridge.RemovePermissionInput, i2 ...request.Option) (r0 *eventbridge.RemovePermissionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemovePermissionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eventbridge.RemovePermissionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) fakeRemovePermissionWithContext(ctx context.Context, in *eventbridge.RemovePermissionInput, _ ...request.Option) (*eventbridge.RemovePermissionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemovePermission cancelled", ctx.Err())
	default:
		return d.RemovePermission(in)
	}
}

func (d *EventBridgeDouble) RemoveTargets(i0 *eventbridge.RemoveTargetsInput) (r0 *eventbridge.RemoveTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTargets", i0)
	r0, _ = returns[0].(*eventbridge.RemoveTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) RemoveTargetsRequest(i0 *eventbridge.RemoveTargetsInput) (r0 *request.Request, r1 *eventbridge.RemoveTargetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTargetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eventbridge.RemoveTargetsOutput)
	return
}

func (d *EventBridgeDouble) RemoveTargetsWithContext(i0 context.Context, i1 *eventbridge.RemoveTargetsInput, i2 ...request.Option) (r0 *eventbridge.RemoveTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTargetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eventbridge.RemoveTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) fakeRemoveTargetsWithContext(ctx context.Context, in *eventbridge.RemoveTargetsInput, _ ...request.Option) (*eventbridge.RemoveTargetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveTargets cancelled", ctx.Err())
	default:
		return d.RemoveTargets(in)
	}
}

func (d *EventBridgeDouble) TagResource(i0 *eventbridge.TagResourceInput) (r0 *eventbridge.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*eventbridge.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) TagResourceRequest(i0 *eventbridge.TagResourceInput) (r0 *request.Request, r1 *eventbridge.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eventbridge.TagResourceOutput)
	return
}

func (d *EventBridgeDouble) TagResourceWithContext(i0 context.Context, i1 *eventbridge.TagResourceInput, i2 ...request.Option) (r0 *eventbridge.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eventbridge.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) fakeTagResourceWithContext(ctx context.Context, in *eventbridge.TagResourceInput, _ ...request.Option) (*eventbridge.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *EventBridgeDouble) TestEventPattern(i0 *eventbridge.TestEventPatternInput) (r0 *eventbridge.TestEventPatternOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestEventPattern", i0)
	r0, _ = returns[0].(*eventbridge.TestEventPatternOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) TestEventPatternRequest(i0 *eventbridge.TestEventPatternInput) (r0 *request.Request, r1 *eventbridge.TestEventPatternOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestEventPatternRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eventbridge.TestEventPatternOutput)
	return
}

func (d *EventBridgeDouble) TestEventPatternWithContext(i0 context.Context, i1 *eventbridge.TestEventPatternInput, i2 ...request.Option) (r0 *eventbridge.TestEventPatternOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestEventPatternWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eventbridge.TestEventPatternOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) fakeTestEventPatternWithContext(ctx context.Context, in *eventbridge.TestEventPatternInput, _ ...request.Option) (*eventbridge.TestEventPatternOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TestEventPattern cancelled", ctx.Err())
	default:
		return d.TestEventPattern(in)
	}
}

func (d *EventBridgeDouble) UntagResource(i0 *eventbridge.UntagResourceInput) (r0 *eventbridge.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*eventbridge.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) UntagResourceRequest(i0 *eventbridge.UntagResourceInput) (r0 *request.Request, r1 *eventbridge.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eventbridge.UntagResourceOutput)
	return
}

func (d *EventBridgeDouble) UntagResourceWithContext(i0 context.Context, i1 *eventbridge.UntagResourceInput, i2 ...request.Option) (r0 *eventbridge.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eventbridge.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EventBridgeDouble) fakeUntagResourceWithContext(ctx context.Context, in *eventbridge.UntagResourceInput, _ ...request.Option) (*eventbridge.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}
