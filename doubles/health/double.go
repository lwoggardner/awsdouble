// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:13:05+11:00

// Package healthdouble provides a TestDouble implementation of healthiface.HealthAPI
package healthdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/health"
	"github.com/aws/aws-sdk-go/service/health/healthiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// HealthDouble is TestDouble for healthiface.HealthAPI
type HealthDouble struct {
	healthiface.HealthAPI
	*awsdouble.AWSTestDouble
}

// Constructor for HealthDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *HealthDouble {
	result := &HealthDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*healthiface.HealthAPI)(nil), configurators...)
	return result
}

func (d *HealthDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *HealthDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "DescribeAffectedAccountsForOrganizationPages":
		return m.Fake(d.fakeDescribeAffectedAccountsForOrganizationPages)

	case "DescribeAffectedAccountsForOrganizationPagesWithContext":
		return m.Fake(d.fakeDescribeAffectedAccountsForOrganizationPagesWithContext)

	case "DescribeAffectedAccountsForOrganizationWithContext":
		return m.Fake(d.fakeDescribeAffectedAccountsForOrganizationWithContext)

	case "DescribeAffectedEntitiesForOrganizationPages":
		return m.Fake(d.fakeDescribeAffectedEntitiesForOrganizationPages)

	case "DescribeAffectedEntitiesForOrganizationPagesWithContext":
		return m.Fake(d.fakeDescribeAffectedEntitiesForOrganizationPagesWithContext)

	case "DescribeAffectedEntitiesForOrganizationWithContext":
		return m.Fake(d.fakeDescribeAffectedEntitiesForOrganizationWithContext)

	case "DescribeAffectedEntitiesPages":
		return m.Fake(d.fakeDescribeAffectedEntitiesPages)

	case "DescribeAffectedEntitiesPagesWithContext":
		return m.Fake(d.fakeDescribeAffectedEntitiesPagesWithContext)

	case "DescribeAffectedEntitiesWithContext":
		return m.Fake(d.fakeDescribeAffectedEntitiesWithContext)

	case "DescribeEntityAggregatesWithContext":
		return m.Fake(d.fakeDescribeEntityAggregatesWithContext)

	case "DescribeEventAggregatesPages":
		return m.Fake(d.fakeDescribeEventAggregatesPages)

	case "DescribeEventAggregatesPagesWithContext":
		return m.Fake(d.fakeDescribeEventAggregatesPagesWithContext)

	case "DescribeEventAggregatesWithContext":
		return m.Fake(d.fakeDescribeEventAggregatesWithContext)

	case "DescribeEventDetailsForOrganizationWithContext":
		return m.Fake(d.fakeDescribeEventDetailsForOrganizationWithContext)

	case "DescribeEventDetailsWithContext":
		return m.Fake(d.fakeDescribeEventDetailsWithContext)

	case "DescribeEventTypesPages":
		return m.Fake(d.fakeDescribeEventTypesPages)

	case "DescribeEventTypesPagesWithContext":
		return m.Fake(d.fakeDescribeEventTypesPagesWithContext)

	case "DescribeEventTypesWithContext":
		return m.Fake(d.fakeDescribeEventTypesWithContext)

	case "DescribeEventsForOrganizationPages":
		return m.Fake(d.fakeDescribeEventsForOrganizationPages)

	case "DescribeEventsForOrganizationPagesWithContext":
		return m.Fake(d.fakeDescribeEventsForOrganizationPagesWithContext)

	case "DescribeEventsForOrganizationWithContext":
		return m.Fake(d.fakeDescribeEventsForOrganizationWithContext)

	case "DescribeEventsPages":
		return m.Fake(d.fakeDescribeEventsPages)

	case "DescribeEventsPagesWithContext":
		return m.Fake(d.fakeDescribeEventsPagesWithContext)

	case "DescribeEventsWithContext":
		return m.Fake(d.fakeDescribeEventsWithContext)

	case "DescribeHealthServiceStatusForOrganizationWithContext":
		return m.Fake(d.fakeDescribeHealthServiceStatusForOrganizationWithContext)

	case "DisableHealthServiceAccessForOrganizationWithContext":
		return m.Fake(d.fakeDisableHealthServiceAccessForOrganizationWithContext)

	case "EnableHealthServiceAccessForOrganizationWithContext":
		return m.Fake(d.fakeEnableHealthServiceAccessForOrganizationWithContext)

	default:
		return nil
	}
}

func (d *HealthDouble) DescribeAffectedAccountsForOrganization(i0 *health.DescribeAffectedAccountsForOrganizationInput) (r0 *health.DescribeAffectedAccountsForOrganizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAffectedAccountsForOrganization", i0)
	r0, _ = returns[0].(*health.DescribeAffectedAccountsForOrganizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *HealthDouble) DescribeAffectedAccountsForOrganizationPages(i0 *health.DescribeAffectedAccountsForOrganizationInput, i1 func(*health.DescribeAffectedAccountsForOrganizationOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAffectedAccountsForOrganizationPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *HealthDouble) fakeDescribeAffectedAccountsForOrganizationPages(in *health.DescribeAffectedAccountsForOrganizationInput, pager func(*health.DescribeAffectedAccountsForOrganizationOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeAffectedAccountsForOrganization", paginators, in, pager)
}

func (d *HealthDouble) DescribeAffectedAccountsForOrganizationPagesWithContext(i0 context.Context, i1 *health.DescribeAffectedAccountsForOrganizationInput, i2 func(*health.DescribeAffectedAccountsForOrganizationOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAffectedAccountsForOrganizationPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *HealthDouble) fakeDescribeAffectedAccountsForOrganizationPagesWithContext(ctx context.Context, in *health.DescribeAffectedAccountsForOrganizationInput, pager func(*health.DescribeAffectedAccountsForOrganizationOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeAffectedAccountsForOrganization", paginators, ctx, in, pager, options...)
}

func (d *HealthDouble) DescribeAffectedAccountsForOrganizationRequest(i0 *health.DescribeAffectedAccountsForOrganizationInput) (r0 *request.Request, r1 *health.DescribeAffectedAccountsForOrganizationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAffectedAccountsForOrganizationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*health.DescribeAffectedAccountsForOrganizationOutput)
	return
}

func (d *HealthDouble) DescribeAffectedAccountsForOrganizationWithContext(i0 context.Context, i1 *health.DescribeAffectedAccountsForOrganizationInput, i2 ...request.Option) (r0 *health.DescribeAffectedAccountsForOrganizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAffectedAccountsForOrganizationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*health.DescribeAffectedAccountsForOrganizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *HealthDouble) fakeDescribeAffectedAccountsForOrganizationWithContext(ctx context.Context, in *health.DescribeAffectedAccountsForOrganizationInput, _ ...request.Option) (*health.DescribeAffectedAccountsForOrganizationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAffectedAccountsForOrganization cancelled", ctx.Err())
	default:
		return d.DescribeAffectedAccountsForOrganization(in)
	}
}

func (d *HealthDouble) DescribeAffectedEntities(i0 *health.DescribeAffectedEntitiesInput) (r0 *health.DescribeAffectedEntitiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAffectedEntities", i0)
	r0, _ = returns[0].(*health.DescribeAffectedEntitiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *HealthDouble) DescribeAffectedEntitiesForOrganization(i0 *health.DescribeAffectedEntitiesForOrganizationInput) (r0 *health.DescribeAffectedEntitiesForOrganizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAffectedEntitiesForOrganization", i0)
	r0, _ = returns[0].(*health.DescribeAffectedEntitiesForOrganizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *HealthDouble) DescribeAffectedEntitiesForOrganizationPages(i0 *health.DescribeAffectedEntitiesForOrganizationInput, i1 func(*health.DescribeAffectedEntitiesForOrganizationOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAffectedEntitiesForOrganizationPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *HealthDouble) fakeDescribeAffectedEntitiesForOrganizationPages(in *health.DescribeAffectedEntitiesForOrganizationInput, pager func(*health.DescribeAffectedEntitiesForOrganizationOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeAffectedEntitiesForOrganization", paginators, in, pager)
}

func (d *HealthDouble) DescribeAffectedEntitiesForOrganizationPagesWithContext(i0 context.Context, i1 *health.DescribeAffectedEntitiesForOrganizationInput, i2 func(*health.DescribeAffectedEntitiesForOrganizationOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAffectedEntitiesForOrganizationPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *HealthDouble) fakeDescribeAffectedEntitiesForOrganizationPagesWithContext(ctx context.Context, in *health.DescribeAffectedEntitiesForOrganizationInput, pager func(*health.DescribeAffectedEntitiesForOrganizationOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeAffectedEntitiesForOrganization", paginators, ctx, in, pager, options...)
}

func (d *HealthDouble) DescribeAffectedEntitiesForOrganizationRequest(i0 *health.DescribeAffectedEntitiesForOrganizationInput) (r0 *request.Request, r1 *health.DescribeAffectedEntitiesForOrganizationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAffectedEntitiesForOrganizationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*health.DescribeAffectedEntitiesForOrganizationOutput)
	return
}

func (d *HealthDouble) DescribeAffectedEntitiesForOrganizationWithContext(i0 context.Context, i1 *health.DescribeAffectedEntitiesForOrganizationInput, i2 ...request.Option) (r0 *health.DescribeAffectedEntitiesForOrganizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAffectedEntitiesForOrganizationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*health.DescribeAffectedEntitiesForOrganizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *HealthDouble) fakeDescribeAffectedEntitiesForOrganizationWithContext(ctx context.Context, in *health.DescribeAffectedEntitiesForOrganizationInput, _ ...request.Option) (*health.DescribeAffectedEntitiesForOrganizationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAffectedEntitiesForOrganization cancelled", ctx.Err())
	default:
		return d.DescribeAffectedEntitiesForOrganization(in)
	}
}

func (d *HealthDouble) DescribeAffectedEntitiesPages(i0 *health.DescribeAffectedEntitiesInput, i1 func(*health.DescribeAffectedEntitiesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAffectedEntitiesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *HealthDouble) fakeDescribeAffectedEntitiesPages(in *health.DescribeAffectedEntitiesInput, pager func(*health.DescribeAffectedEntitiesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeAffectedEntities", paginators, in, pager)
}

func (d *HealthDouble) DescribeAffectedEntitiesPagesWithContext(i0 context.Context, i1 *health.DescribeAffectedEntitiesInput, i2 func(*health.DescribeAffectedEntitiesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAffectedEntitiesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *HealthDouble) fakeDescribeAffectedEntitiesPagesWithContext(ctx context.Context, in *health.DescribeAffectedEntitiesInput, pager func(*health.DescribeAffectedEntitiesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeAffectedEntities", paginators, ctx, in, pager, options...)
}

func (d *HealthDouble) DescribeAffectedEntitiesRequest(i0 *health.DescribeAffectedEntitiesInput) (r0 *request.Request, r1 *health.DescribeAffectedEntitiesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAffectedEntitiesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*health.DescribeAffectedEntitiesOutput)
	return
}

func (d *HealthDouble) DescribeAffectedEntitiesWithContext(i0 context.Context, i1 *health.DescribeAffectedEntitiesInput, i2 ...request.Option) (r0 *health.DescribeAffectedEntitiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAffectedEntitiesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*health.DescribeAffectedEntitiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *HealthDouble) fakeDescribeAffectedEntitiesWithContext(ctx context.Context, in *health.DescribeAffectedEntitiesInput, _ ...request.Option) (*health.DescribeAffectedEntitiesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAffectedEntities cancelled", ctx.Err())
	default:
		return d.DescribeAffectedEntities(in)
	}
}

func (d *HealthDouble) DescribeEntityAggregates(i0 *health.DescribeEntityAggregatesInput) (r0 *health.DescribeEntityAggregatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEntityAggregates", i0)
	r0, _ = returns[0].(*health.DescribeEntityAggregatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *HealthDouble) DescribeEntityAggregatesRequest(i0 *health.DescribeEntityAggregatesInput) (r0 *request.Request, r1 *health.DescribeEntityAggregatesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEntityAggregatesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*health.DescribeEntityAggregatesOutput)
	return
}

func (d *HealthDouble) DescribeEntityAggregatesWithContext(i0 context.Context, i1 *health.DescribeEntityAggregatesInput, i2 ...request.Option) (r0 *health.DescribeEntityAggregatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEntityAggregatesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*health.DescribeEntityAggregatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *HealthDouble) fakeDescribeEntityAggregatesWithContext(ctx context.Context, in *health.DescribeEntityAggregatesInput, _ ...request.Option) (*health.DescribeEntityAggregatesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEntityAggregates cancelled", ctx.Err())
	default:
		return d.DescribeEntityAggregates(in)
	}
}

func (d *HealthDouble) DescribeEventAggregates(i0 *health.DescribeEventAggregatesInput) (r0 *health.DescribeEventAggregatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventAggregates", i0)
	r0, _ = returns[0].(*health.DescribeEventAggregatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *HealthDouble) DescribeEventAggregatesPages(i0 *health.DescribeEventAggregatesInput, i1 func(*health.DescribeEventAggregatesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventAggregatesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *HealthDouble) fakeDescribeEventAggregatesPages(in *health.DescribeEventAggregatesInput, pager func(*health.DescribeEventAggregatesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeEventAggregates", paginators, in, pager)
}

func (d *HealthDouble) DescribeEventAggregatesPagesWithContext(i0 context.Context, i1 *health.DescribeEventAggregatesInput, i2 func(*health.DescribeEventAggregatesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventAggregatesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *HealthDouble) fakeDescribeEventAggregatesPagesWithContext(ctx context.Context, in *health.DescribeEventAggregatesInput, pager func(*health.DescribeEventAggregatesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeEventAggregates", paginators, ctx, in, pager, options...)
}

func (d *HealthDouble) DescribeEventAggregatesRequest(i0 *health.DescribeEventAggregatesInput) (r0 *request.Request, r1 *health.DescribeEventAggregatesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventAggregatesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*health.DescribeEventAggregatesOutput)
	return
}

func (d *HealthDouble) DescribeEventAggregatesWithContext(i0 context.Context, i1 *health.DescribeEventAggregatesInput, i2 ...request.Option) (r0 *health.DescribeEventAggregatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventAggregatesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*health.DescribeEventAggregatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *HealthDouble) fakeDescribeEventAggregatesWithContext(ctx context.Context, in *health.DescribeEventAggregatesInput, _ ...request.Option) (*health.DescribeEventAggregatesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEventAggregates cancelled", ctx.Err())
	default:
		return d.DescribeEventAggregates(in)
	}
}

func (d *HealthDouble) DescribeEventDetails(i0 *health.DescribeEventDetailsInput) (r0 *health.DescribeEventDetailsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventDetails", i0)
	r0, _ = returns[0].(*health.DescribeEventDetailsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *HealthDouble) DescribeEventDetailsForOrganization(i0 *health.DescribeEventDetailsForOrganizationInput) (r0 *health.DescribeEventDetailsForOrganizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventDetailsForOrganization", i0)
	r0, _ = returns[0].(*health.DescribeEventDetailsForOrganizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *HealthDouble) DescribeEventDetailsForOrganizationRequest(i0 *health.DescribeEventDetailsForOrganizationInput) (r0 *request.Request, r1 *health.DescribeEventDetailsForOrganizationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventDetailsForOrganizationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*health.DescribeEventDetailsForOrganizationOutput)
	return
}

func (d *HealthDouble) DescribeEventDetailsForOrganizationWithContext(i0 context.Context, i1 *health.DescribeEventDetailsForOrganizationInput, i2 ...request.Option) (r0 *health.DescribeEventDetailsForOrganizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventDetailsForOrganizationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*health.DescribeEventDetailsForOrganizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *HealthDouble) fakeDescribeEventDetailsForOrganizationWithContext(ctx context.Context, in *health.DescribeEventDetailsForOrganizationInput, _ ...request.Option) (*health.DescribeEventDetailsForOrganizationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEventDetailsForOrganization cancelled", ctx.Err())
	default:
		return d.DescribeEventDetailsForOrganization(in)
	}
}

func (d *HealthDouble) DescribeEventDetailsRequest(i0 *health.DescribeEventDetailsInput) (r0 *request.Request, r1 *health.DescribeEventDetailsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventDetailsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*health.DescribeEventDetailsOutput)
	return
}

func (d *HealthDouble) DescribeEventDetailsWithContext(i0 context.Context, i1 *health.DescribeEventDetailsInput, i2 ...request.Option) (r0 *health.DescribeEventDetailsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventDetailsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*health.DescribeEventDetailsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *HealthDouble) fakeDescribeEventDetailsWithContext(ctx context.Context, in *health.DescribeEventDetailsInput, _ ...request.Option) (*health.DescribeEventDetailsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEventDetails cancelled", ctx.Err())
	default:
		return d.DescribeEventDetails(in)
	}
}

func (d *HealthDouble) DescribeEventTypes(i0 *health.DescribeEventTypesInput) (r0 *health.DescribeEventTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventTypes", i0)
	r0, _ = returns[0].(*health.DescribeEventTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *HealthDouble) DescribeEventTypesPages(i0 *health.DescribeEventTypesInput, i1 func(*health.DescribeEventTypesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventTypesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *HealthDouble) fakeDescribeEventTypesPages(in *health.DescribeEventTypesInput, pager func(*health.DescribeEventTypesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeEventTypes", paginators, in, pager)
}

func (d *HealthDouble) DescribeEventTypesPagesWithContext(i0 context.Context, i1 *health.DescribeEventTypesInput, i2 func(*health.DescribeEventTypesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventTypesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *HealthDouble) fakeDescribeEventTypesPagesWithContext(ctx context.Context, in *health.DescribeEventTypesInput, pager func(*health.DescribeEventTypesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeEventTypes", paginators, ctx, in, pager, options...)
}

func (d *HealthDouble) DescribeEventTypesRequest(i0 *health.DescribeEventTypesInput) (r0 *request.Request, r1 *health.DescribeEventTypesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventTypesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*health.DescribeEventTypesOutput)
	return
}

func (d *HealthDouble) DescribeEventTypesWithContext(i0 context.Context, i1 *health.DescribeEventTypesInput, i2 ...request.Option) (r0 *health.DescribeEventTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventTypesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*health.DescribeEventTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *HealthDouble) fakeDescribeEventTypesWithContext(ctx context.Context, in *health.DescribeEventTypesInput, _ ...request.Option) (*health.DescribeEventTypesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEventTypes cancelled", ctx.Err())
	default:
		return d.DescribeEventTypes(in)
	}
}

func (d *HealthDouble) DescribeEvents(i0 *health.DescribeEventsInput) (r0 *health.DescribeEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEvents", i0)
	r0, _ = returns[0].(*health.DescribeEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *HealthDouble) DescribeEventsForOrganization(i0 *health.DescribeEventsForOrganizationInput) (r0 *health.DescribeEventsForOrganizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventsForOrganization", i0)
	r0, _ = returns[0].(*health.DescribeEventsForOrganizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *HealthDouble) DescribeEventsForOrganizationPages(i0 *health.DescribeEventsForOrganizationInput, i1 func(*health.DescribeEventsForOrganizationOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventsForOrganizationPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *HealthDouble) fakeDescribeEventsForOrganizationPages(in *health.DescribeEventsForOrganizationInput, pager func(*health.DescribeEventsForOrganizationOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeEventsForOrganization", paginators, in, pager)
}

func (d *HealthDouble) DescribeEventsForOrganizationPagesWithContext(i0 context.Context, i1 *health.DescribeEventsForOrganizationInput, i2 func(*health.DescribeEventsForOrganizationOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventsForOrganizationPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *HealthDouble) fakeDescribeEventsForOrganizationPagesWithContext(ctx context.Context, in *health.DescribeEventsForOrganizationInput, pager func(*health.DescribeEventsForOrganizationOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeEventsForOrganization", paginators, ctx, in, pager, options...)
}

func (d *HealthDouble) DescribeEventsForOrganizationRequest(i0 *health.DescribeEventsForOrganizationInput) (r0 *request.Request, r1 *health.DescribeEventsForOrganizationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventsForOrganizationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*health.DescribeEventsForOrganizationOutput)
	return
}

func (d *HealthDouble) DescribeEventsForOrganizationWithContext(i0 context.Context, i1 *health.DescribeEventsForOrganizationInput, i2 ...request.Option) (r0 *health.DescribeEventsForOrganizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventsForOrganizationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*health.DescribeEventsForOrganizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *HealthDouble) fakeDescribeEventsForOrganizationWithContext(ctx context.Context, in *health.DescribeEventsForOrganizationInput, _ ...request.Option) (*health.DescribeEventsForOrganizationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEventsForOrganization cancelled", ctx.Err())
	default:
		return d.DescribeEventsForOrganization(in)
	}
}

func (d *HealthDouble) DescribeEventsPages(i0 *health.DescribeEventsInput, i1 func(*health.DescribeEventsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *HealthDouble) fakeDescribeEventsPages(in *health.DescribeEventsInput, pager func(*health.DescribeEventsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeEvents", paginators, in, pager)
}

func (d *HealthDouble) DescribeEventsPagesWithContext(i0 context.Context, i1 *health.DescribeEventsInput, i2 func(*health.DescribeEventsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *HealthDouble) fakeDescribeEventsPagesWithContext(ctx context.Context, in *health.DescribeEventsInput, pager func(*health.DescribeEventsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeEvents", paginators, ctx, in, pager, options...)
}

func (d *HealthDouble) DescribeEventsRequest(i0 *health.DescribeEventsInput) (r0 *request.Request, r1 *health.DescribeEventsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*health.DescribeEventsOutput)
	return
}

func (d *HealthDouble) DescribeEventsWithContext(i0 context.Context, i1 *health.DescribeEventsInput, i2 ...request.Option) (r0 *health.DescribeEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*health.DescribeEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *HealthDouble) fakeDescribeEventsWithContext(ctx context.Context, in *health.DescribeEventsInput, _ ...request.Option) (*health.DescribeEventsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEvents cancelled", ctx.Err())
	default:
		return d.DescribeEvents(in)
	}
}

func (d *HealthDouble) DescribeHealthServiceStatusForOrganization(i0 *health.DescribeHealthServiceStatusForOrganizationInput) (r0 *health.DescribeHealthServiceStatusForOrganizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHealthServiceStatusForOrganization", i0)
	r0, _ = returns[0].(*health.DescribeHealthServiceStatusForOrganizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *HealthDouble) DescribeHealthServiceStatusForOrganizationRequest(i0 *health.DescribeHealthServiceStatusForOrganizationInput) (r0 *request.Request, r1 *health.DescribeHealthServiceStatusForOrganizationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHealthServiceStatusForOrganizationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*health.DescribeHealthServiceStatusForOrganizationOutput)
	return
}

func (d *HealthDouble) DescribeHealthServiceStatusForOrganizationWithContext(i0 context.Context, i1 *health.DescribeHealthServiceStatusForOrganizationInput, i2 ...request.Option) (r0 *health.DescribeHealthServiceStatusForOrganizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHealthServiceStatusForOrganizationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*health.DescribeHealthServiceStatusForOrganizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *HealthDouble) fakeDescribeHealthServiceStatusForOrganizationWithContext(ctx context.Context, in *health.DescribeHealthServiceStatusForOrganizationInput, _ ...request.Option) (*health.DescribeHealthServiceStatusForOrganizationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeHealthServiceStatusForOrganization cancelled", ctx.Err())
	default:
		return d.DescribeHealthServiceStatusForOrganization(in)
	}
}

func (d *HealthDouble) DisableHealthServiceAccessForOrganization(i0 *health.DisableHealthServiceAccessForOrganizationInput) (r0 *health.DisableHealthServiceAccessForOrganizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableHealthServiceAccessForOrganization", i0)
	r0, _ = returns[0].(*health.DisableHealthServiceAccessForOrganizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *HealthDouble) DisableHealthServiceAccessForOrganizationRequest(i0 *health.DisableHealthServiceAccessForOrganizationInput) (r0 *request.Request, r1 *health.DisableHealthServiceAccessForOrganizationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableHealthServiceAccessForOrganizationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*health.DisableHealthServiceAccessForOrganizationOutput)
	return
}

func (d *HealthDouble) DisableHealthServiceAccessForOrganizationWithContext(i0 context.Context, i1 *health.DisableHealthServiceAccessForOrganizationInput, i2 ...request.Option) (r0 *health.DisableHealthServiceAccessForOrganizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableHealthServiceAccessForOrganizationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*health.DisableHealthServiceAccessForOrganizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *HealthDouble) fakeDisableHealthServiceAccessForOrganizationWithContext(ctx context.Context, in *health.DisableHealthServiceAccessForOrganizationInput, _ ...request.Option) (*health.DisableHealthServiceAccessForOrganizationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisableHealthServiceAccessForOrganization cancelled", ctx.Err())
	default:
		return d.DisableHealthServiceAccessForOrganization(in)
	}
}

func (d *HealthDouble) EnableHealthServiceAccessForOrganization(i0 *health.EnableHealthServiceAccessForOrganizationInput) (r0 *health.EnableHealthServiceAccessForOrganizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableHealthServiceAccessForOrganization", i0)
	r0, _ = returns[0].(*health.EnableHealthServiceAccessForOrganizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *HealthDouble) EnableHealthServiceAccessForOrganizationRequest(i0 *health.EnableHealthServiceAccessForOrganizationInput) (r0 *request.Request, r1 *health.EnableHealthServiceAccessForOrganizationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableHealthServiceAccessForOrganizationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*health.EnableHealthServiceAccessForOrganizationOutput)
	return
}

func (d *HealthDouble) EnableHealthServiceAccessForOrganizationWithContext(i0 context.Context, i1 *health.EnableHealthServiceAccessForOrganizationInput, i2 ...request.Option) (r0 *health.EnableHealthServiceAccessForOrganizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableHealthServiceAccessForOrganizationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*health.EnableHealthServiceAccessForOrganizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *HealthDouble) fakeEnableHealthServiceAccessForOrganizationWithContext(ctx context.Context, in *health.EnableHealthServiceAccessForOrganizationInput, _ ...request.Option) (*health.EnableHealthServiceAccessForOrganizationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "EnableHealthServiceAccessForOrganization cancelled", ctx.Err())
	default:
		return d.EnableHealthServiceAccessForOrganization(in)
	}
}
