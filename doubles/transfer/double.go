// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:15:26+11:00

// Package transferdouble provides a TestDouble implementation of transferiface.TransferAPI
package transferdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/transfer"
	"github.com/aws/aws-sdk-go/service/transfer/transferiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// TransferDouble is TestDouble for transferiface.TransferAPI
type TransferDouble struct {
	transferiface.TransferAPI
	*awsdouble.AWSTestDouble
}

// Constructor for TransferDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *TransferDouble {
	result := &TransferDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*transferiface.TransferAPI)(nil), configurators...)
	return result
}

func (d *TransferDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *TransferDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CreateServerWithContext":
		return m.Fake(d.fakeCreateServerWithContext)

	case "CreateUserWithContext":
		return m.Fake(d.fakeCreateUserWithContext)

	case "DeleteServerWithContext":
		return m.Fake(d.fakeDeleteServerWithContext)

	case "DeleteSshPublicKeyWithContext":
		return m.Fake(d.fakeDeleteSshPublicKeyWithContext)

	case "DeleteUserWithContext":
		return m.Fake(d.fakeDeleteUserWithContext)

	case "DescribeServerWithContext":
		return m.Fake(d.fakeDescribeServerWithContext)

	case "DescribeUserWithContext":
		return m.Fake(d.fakeDescribeUserWithContext)

	case "ImportSshPublicKeyWithContext":
		return m.Fake(d.fakeImportSshPublicKeyWithContext)

	case "ListServersPages":
		return m.Fake(d.fakeListServersPages)

	case "ListServersPagesWithContext":
		return m.Fake(d.fakeListServersPagesWithContext)

	case "ListServersWithContext":
		return m.Fake(d.fakeListServersWithContext)

	case "ListTagsForResourcePages":
		return m.Fake(d.fakeListTagsForResourcePages)

	case "ListTagsForResourcePagesWithContext":
		return m.Fake(d.fakeListTagsForResourcePagesWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "ListUsersPages":
		return m.Fake(d.fakeListUsersPages)

	case "ListUsersPagesWithContext":
		return m.Fake(d.fakeListUsersPagesWithContext)

	case "ListUsersWithContext":
		return m.Fake(d.fakeListUsersWithContext)

	case "StartServerWithContext":
		return m.Fake(d.fakeStartServerWithContext)

	case "StopServerWithContext":
		return m.Fake(d.fakeStopServerWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "TestIdentityProviderWithContext":
		return m.Fake(d.fakeTestIdentityProviderWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateServerWithContext":
		return m.Fake(d.fakeUpdateServerWithContext)

	case "UpdateUserWithContext":
		return m.Fake(d.fakeUpdateUserWithContext)

	default:
		return nil
	}
}

func (d *TransferDouble) CreateServer(i0 *transfer.CreateServerInput) (r0 *transfer.CreateServerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateServer", i0)
	r0, _ = returns[0].(*transfer.CreateServerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TransferDouble) CreateServerRequest(i0 *transfer.CreateServerInput) (r0 *request.Request, r1 *transfer.CreateServerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateServerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*transfer.CreateServerOutput)
	return
}

func (d *TransferDouble) CreateServerWithContext(i0 context.Context, i1 *transfer.CreateServerInput, i2 ...request.Option) (r0 *transfer.CreateServerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateServerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*transfer.CreateServerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TransferDouble) fakeCreateServerWithContext(ctx context.Context, in *transfer.CreateServerInput, _ ...request.Option) (*transfer.CreateServerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateServer cancelled", ctx.Err())
	default:
		return d.CreateServer(in)
	}
}

func (d *TransferDouble) CreateUser(i0 *transfer.CreateUserInput) (r0 *transfer.CreateUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUser", i0)
	r0, _ = returns[0].(*transfer.CreateUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TransferDouble) CreateUserRequest(i0 *transfer.CreateUserInput) (r0 *request.Request, r1 *transfer.CreateUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*transfer.CreateUserOutput)
	return
}

func (d *TransferDouble) CreateUserWithContext(i0 context.Context, i1 *transfer.CreateUserInput, i2 ...request.Option) (r0 *transfer.CreateUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*transfer.CreateUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TransferDouble) fakeCreateUserWithContext(ctx context.Context, in *transfer.CreateUserInput, _ ...request.Option) (*transfer.CreateUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateUser cancelled", ctx.Err())
	default:
		return d.CreateUser(in)
	}
}

func (d *TransferDouble) DeleteServer(i0 *transfer.DeleteServerInput) (r0 *transfer.DeleteServerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteServer", i0)
	r0, _ = returns[0].(*transfer.DeleteServerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TransferDouble) DeleteServerRequest(i0 *transfer.DeleteServerInput) (r0 *request.Request, r1 *transfer.DeleteServerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteServerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*transfer.DeleteServerOutput)
	return
}

func (d *TransferDouble) DeleteServerWithContext(i0 context.Context, i1 *transfer.DeleteServerInput, i2 ...request.Option) (r0 *transfer.DeleteServerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteServerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*transfer.DeleteServerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TransferDouble) fakeDeleteServerWithContext(ctx context.Context, in *transfer.DeleteServerInput, _ ...request.Option) (*transfer.DeleteServerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteServer cancelled", ctx.Err())
	default:
		return d.DeleteServer(in)
	}
}

func (d *TransferDouble) DeleteSshPublicKey(i0 *transfer.DeleteSshPublicKeyInput) (r0 *transfer.DeleteSshPublicKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSshPublicKey", i0)
	r0, _ = returns[0].(*transfer.DeleteSshPublicKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TransferDouble) DeleteSshPublicKeyRequest(i0 *transfer.DeleteSshPublicKeyInput) (r0 *request.Request, r1 *transfer.DeleteSshPublicKeyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSshPublicKeyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*transfer.DeleteSshPublicKeyOutput)
	return
}

func (d *TransferDouble) DeleteSshPublicKeyWithContext(i0 context.Context, i1 *transfer.DeleteSshPublicKeyInput, i2 ...request.Option) (r0 *transfer.DeleteSshPublicKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSshPublicKeyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*transfer.DeleteSshPublicKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TransferDouble) fakeDeleteSshPublicKeyWithContext(ctx context.Context, in *transfer.DeleteSshPublicKeyInput, _ ...request.Option) (*transfer.DeleteSshPublicKeyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteSshPublicKey cancelled", ctx.Err())
	default:
		return d.DeleteSshPublicKey(in)
	}
}

func (d *TransferDouble) DeleteUser(i0 *transfer.DeleteUserInput) (r0 *transfer.DeleteUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUser", i0)
	r0, _ = returns[0].(*transfer.DeleteUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TransferDouble) DeleteUserRequest(i0 *transfer.DeleteUserInput) (r0 *request.Request, r1 *transfer.DeleteUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*transfer.DeleteUserOutput)
	return
}

func (d *TransferDouble) DeleteUserWithContext(i0 context.Context, i1 *transfer.DeleteUserInput, i2 ...request.Option) (r0 *transfer.DeleteUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*transfer.DeleteUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TransferDouble) fakeDeleteUserWithContext(ctx context.Context, in *transfer.DeleteUserInput, _ ...request.Option) (*transfer.DeleteUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteUser cancelled", ctx.Err())
	default:
		return d.DeleteUser(in)
	}
}

func (d *TransferDouble) DescribeServer(i0 *transfer.DescribeServerInput) (r0 *transfer.DescribeServerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeServer", i0)
	r0, _ = returns[0].(*transfer.DescribeServerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TransferDouble) DescribeServerRequest(i0 *transfer.DescribeServerInput) (r0 *request.Request, r1 *transfer.DescribeServerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeServerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*transfer.DescribeServerOutput)
	return
}

func (d *TransferDouble) DescribeServerWithContext(i0 context.Context, i1 *transfer.DescribeServerInput, i2 ...request.Option) (r0 *transfer.DescribeServerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeServerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*transfer.DescribeServerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TransferDouble) fakeDescribeServerWithContext(ctx context.Context, in *transfer.DescribeServerInput, _ ...request.Option) (*transfer.DescribeServerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeServer cancelled", ctx.Err())
	default:
		return d.DescribeServer(in)
	}
}

func (d *TransferDouble) DescribeUser(i0 *transfer.DescribeUserInput) (r0 *transfer.DescribeUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUser", i0)
	r0, _ = returns[0].(*transfer.DescribeUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TransferDouble) DescribeUserRequest(i0 *transfer.DescribeUserInput) (r0 *request.Request, r1 *transfer.DescribeUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*transfer.DescribeUserOutput)
	return
}

func (d *TransferDouble) DescribeUserWithContext(i0 context.Context, i1 *transfer.DescribeUserInput, i2 ...request.Option) (r0 *transfer.DescribeUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*transfer.DescribeUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TransferDouble) fakeDescribeUserWithContext(ctx context.Context, in *transfer.DescribeUserInput, _ ...request.Option) (*transfer.DescribeUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeUser cancelled", ctx.Err())
	default:
		return d.DescribeUser(in)
	}
}

func (d *TransferDouble) ImportSshPublicKey(i0 *transfer.ImportSshPublicKeyInput) (r0 *transfer.ImportSshPublicKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportSshPublicKey", i0)
	r0, _ = returns[0].(*transfer.ImportSshPublicKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TransferDouble) ImportSshPublicKeyRequest(i0 *transfer.ImportSshPublicKeyInput) (r0 *request.Request, r1 *transfer.ImportSshPublicKeyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportSshPublicKeyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*transfer.ImportSshPublicKeyOutput)
	return
}

func (d *TransferDouble) ImportSshPublicKeyWithContext(i0 context.Context, i1 *transfer.ImportSshPublicKeyInput, i2 ...request.Option) (r0 *transfer.ImportSshPublicKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportSshPublicKeyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*transfer.ImportSshPublicKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TransferDouble) fakeImportSshPublicKeyWithContext(ctx context.Context, in *transfer.ImportSshPublicKeyInput, _ ...request.Option) (*transfer.ImportSshPublicKeyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ImportSshPublicKey cancelled", ctx.Err())
	default:
		return d.ImportSshPublicKey(in)
	}
}

func (d *TransferDouble) ListServers(i0 *transfer.ListServersInput) (r0 *transfer.ListServersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListServers", i0)
	r0, _ = returns[0].(*transfer.ListServersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TransferDouble) ListServersPages(i0 *transfer.ListServersInput, i1 func(*transfer.ListServersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListServersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *TransferDouble) fakeListServersPages(in *transfer.ListServersInput, pager func(*transfer.ListServersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListServers", paginators, in, pager)
}

func (d *TransferDouble) ListServersPagesWithContext(i0 context.Context, i1 *transfer.ListServersInput, i2 func(*transfer.ListServersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListServersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *TransferDouble) fakeListServersPagesWithContext(ctx context.Context, in *transfer.ListServersInput, pager func(*transfer.ListServersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListServers", paginators, ctx, in, pager, options...)
}

func (d *TransferDouble) ListServersRequest(i0 *transfer.ListServersInput) (r0 *request.Request, r1 *transfer.ListServersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListServersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*transfer.ListServersOutput)
	return
}

func (d *TransferDouble) ListServersWithContext(i0 context.Context, i1 *transfer.ListServersInput, i2 ...request.Option) (r0 *transfer.ListServersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListServersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*transfer.ListServersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TransferDouble) fakeListServersWithContext(ctx context.Context, in *transfer.ListServersInput, _ ...request.Option) (*transfer.ListServersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListServers cancelled", ctx.Err())
	default:
		return d.ListServers(in)
	}
}

func (d *TransferDouble) ListTagsForResource(i0 *transfer.ListTagsForResourceInput) (r0 *transfer.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*transfer.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TransferDouble) ListTagsForResourcePages(i0 *transfer.ListTagsForResourceInput, i1 func(*transfer.ListTagsForResourceOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourcePages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *TransferDouble) fakeListTagsForResourcePages(in *transfer.ListTagsForResourceInput, pager func(*transfer.ListTagsForResourceOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTagsForResource", paginators, in, pager)
}

func (d *TransferDouble) ListTagsForResourcePagesWithContext(i0 context.Context, i1 *transfer.ListTagsForResourceInput, i2 func(*transfer.ListTagsForResourceOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourcePagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *TransferDouble) fakeListTagsForResourcePagesWithContext(ctx context.Context, in *transfer.ListTagsForResourceInput, pager func(*transfer.ListTagsForResourceOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTagsForResource", paginators, ctx, in, pager, options...)
}

func (d *TransferDouble) ListTagsForResourceRequest(i0 *transfer.ListTagsForResourceInput) (r0 *request.Request, r1 *transfer.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*transfer.ListTagsForResourceOutput)
	return
}

func (d *TransferDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *transfer.ListTagsForResourceInput, i2 ...request.Option) (r0 *transfer.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*transfer.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TransferDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *transfer.ListTagsForResourceInput, _ ...request.Option) (*transfer.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *TransferDouble) ListUsers(i0 *transfer.ListUsersInput) (r0 *transfer.ListUsersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUsers", i0)
	r0, _ = returns[0].(*transfer.ListUsersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TransferDouble) ListUsersPages(i0 *transfer.ListUsersInput, i1 func(*transfer.ListUsersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUsersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *TransferDouble) fakeListUsersPages(in *transfer.ListUsersInput, pager func(*transfer.ListUsersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListUsers", paginators, in, pager)
}

func (d *TransferDouble) ListUsersPagesWithContext(i0 context.Context, i1 *transfer.ListUsersInput, i2 func(*transfer.ListUsersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUsersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *TransferDouble) fakeListUsersPagesWithContext(ctx context.Context, in *transfer.ListUsersInput, pager func(*transfer.ListUsersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListUsers", paginators, ctx, in, pager, options...)
}

func (d *TransferDouble) ListUsersRequest(i0 *transfer.ListUsersInput) (r0 *request.Request, r1 *transfer.ListUsersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUsersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*transfer.ListUsersOutput)
	return
}

func (d *TransferDouble) ListUsersWithContext(i0 context.Context, i1 *transfer.ListUsersInput, i2 ...request.Option) (r0 *transfer.ListUsersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUsersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*transfer.ListUsersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TransferDouble) fakeListUsersWithContext(ctx context.Context, in *transfer.ListUsersInput, _ ...request.Option) (*transfer.ListUsersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListUsers cancelled", ctx.Err())
	default:
		return d.ListUsers(in)
	}
}

func (d *TransferDouble) StartServer(i0 *transfer.StartServerInput) (r0 *transfer.StartServerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartServer", i0)
	r0, _ = returns[0].(*transfer.StartServerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TransferDouble) StartServerRequest(i0 *transfer.StartServerInput) (r0 *request.Request, r1 *transfer.StartServerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartServerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*transfer.StartServerOutput)
	return
}

func (d *TransferDouble) StartServerWithContext(i0 context.Context, i1 *transfer.StartServerInput, i2 ...request.Option) (r0 *transfer.StartServerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartServerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*transfer.StartServerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TransferDouble) fakeStartServerWithContext(ctx context.Context, in *transfer.StartServerInput, _ ...request.Option) (*transfer.StartServerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartServer cancelled", ctx.Err())
	default:
		return d.StartServer(in)
	}
}

func (d *TransferDouble) StopServer(i0 *transfer.StopServerInput) (r0 *transfer.StopServerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopServer", i0)
	r0, _ = returns[0].(*transfer.StopServerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TransferDouble) StopServerRequest(i0 *transfer.StopServerInput) (r0 *request.Request, r1 *transfer.StopServerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopServerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*transfer.StopServerOutput)
	return
}

func (d *TransferDouble) StopServerWithContext(i0 context.Context, i1 *transfer.StopServerInput, i2 ...request.Option) (r0 *transfer.StopServerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopServerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*transfer.StopServerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TransferDouble) fakeStopServerWithContext(ctx context.Context, in *transfer.StopServerInput, _ ...request.Option) (*transfer.StopServerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopServer cancelled", ctx.Err())
	default:
		return d.StopServer(in)
	}
}

func (d *TransferDouble) TagResource(i0 *transfer.TagResourceInput) (r0 *transfer.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*transfer.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TransferDouble) TagResourceRequest(i0 *transfer.TagResourceInput) (r0 *request.Request, r1 *transfer.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*transfer.TagResourceOutput)
	return
}

func (d *TransferDouble) TagResourceWithContext(i0 context.Context, i1 *transfer.TagResourceInput, i2 ...request.Option) (r0 *transfer.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*transfer.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TransferDouble) fakeTagResourceWithContext(ctx context.Context, in *transfer.TagResourceInput, _ ...request.Option) (*transfer.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *TransferDouble) TestIdentityProvider(i0 *transfer.TestIdentityProviderInput) (r0 *transfer.TestIdentityProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestIdentityProvider", i0)
	r0, _ = returns[0].(*transfer.TestIdentityProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TransferDouble) TestIdentityProviderRequest(i0 *transfer.TestIdentityProviderInput) (r0 *request.Request, r1 *transfer.TestIdentityProviderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestIdentityProviderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*transfer.TestIdentityProviderOutput)
	return
}

func (d *TransferDouble) TestIdentityProviderWithContext(i0 context.Context, i1 *transfer.TestIdentityProviderInput, i2 ...request.Option) (r0 *transfer.TestIdentityProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestIdentityProviderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*transfer.TestIdentityProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TransferDouble) fakeTestIdentityProviderWithContext(ctx context.Context, in *transfer.TestIdentityProviderInput, _ ...request.Option) (*transfer.TestIdentityProviderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TestIdentityProvider cancelled", ctx.Err())
	default:
		return d.TestIdentityProvider(in)
	}
}

func (d *TransferDouble) UntagResource(i0 *transfer.UntagResourceInput) (r0 *transfer.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*transfer.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TransferDouble) UntagResourceRequest(i0 *transfer.UntagResourceInput) (r0 *request.Request, r1 *transfer.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*transfer.UntagResourceOutput)
	return
}

func (d *TransferDouble) UntagResourceWithContext(i0 context.Context, i1 *transfer.UntagResourceInput, i2 ...request.Option) (r0 *transfer.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*transfer.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TransferDouble) fakeUntagResourceWithContext(ctx context.Context, in *transfer.UntagResourceInput, _ ...request.Option) (*transfer.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *TransferDouble) UpdateServer(i0 *transfer.UpdateServerInput) (r0 *transfer.UpdateServerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateServer", i0)
	r0, _ = returns[0].(*transfer.UpdateServerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TransferDouble) UpdateServerRequest(i0 *transfer.UpdateServerInput) (r0 *request.Request, r1 *transfer.UpdateServerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateServerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*transfer.UpdateServerOutput)
	return
}

func (d *TransferDouble) UpdateServerWithContext(i0 context.Context, i1 *transfer.UpdateServerInput, i2 ...request.Option) (r0 *transfer.UpdateServerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateServerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*transfer.UpdateServerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TransferDouble) fakeUpdateServerWithContext(ctx context.Context, in *transfer.UpdateServerInput, _ ...request.Option) (*transfer.UpdateServerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateServer cancelled", ctx.Err())
	default:
		return d.UpdateServer(in)
	}
}

func (d *TransferDouble) UpdateUser(i0 *transfer.UpdateUserInput) (r0 *transfer.UpdateUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUser", i0)
	r0, _ = returns[0].(*transfer.UpdateUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TransferDouble) UpdateUserRequest(i0 *transfer.UpdateUserInput) (r0 *request.Request, r1 *transfer.UpdateUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*transfer.UpdateUserOutput)
	return
}

func (d *TransferDouble) UpdateUserWithContext(i0 context.Context, i1 *transfer.UpdateUserInput, i2 ...request.Option) (r0 *transfer.UpdateUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*transfer.UpdateUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TransferDouble) fakeUpdateUserWithContext(ctx context.Context, in *transfer.UpdateUserInput, _ ...request.Option) (*transfer.UpdateUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateUser cancelled", ctx.Err())
	default:
		return d.UpdateUser(in)
	}
}
