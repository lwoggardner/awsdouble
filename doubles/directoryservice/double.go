// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:12:21+11:00

// Package directoryservicedouble provides a TestDouble implementation of directoryserviceiface.DirectoryServiceAPI
package directoryservicedouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/directoryservice"
	"github.com/aws/aws-sdk-go/service/directoryservice/directoryserviceiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// DirectoryServiceDouble is TestDouble for directoryserviceiface.DirectoryServiceAPI
type DirectoryServiceDouble struct {
	directoryserviceiface.DirectoryServiceAPI
	*awsdouble.AWSTestDouble
}

// Constructor for DirectoryServiceDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *DirectoryServiceDouble {
	result := &DirectoryServiceDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*directoryserviceiface.DirectoryServiceAPI)(nil), configurators...)
	return result
}

func (d *DirectoryServiceDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *DirectoryServiceDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AcceptSharedDirectoryWithContext":
		return m.Fake(d.fakeAcceptSharedDirectoryWithContext)

	case "AddIpRoutesWithContext":
		return m.Fake(d.fakeAddIpRoutesWithContext)

	case "AddTagsToResourceWithContext":
		return m.Fake(d.fakeAddTagsToResourceWithContext)

	case "CancelSchemaExtensionWithContext":
		return m.Fake(d.fakeCancelSchemaExtensionWithContext)

	case "ConnectDirectoryWithContext":
		return m.Fake(d.fakeConnectDirectoryWithContext)

	case "CreateAliasWithContext":
		return m.Fake(d.fakeCreateAliasWithContext)

	case "CreateComputerWithContext":
		return m.Fake(d.fakeCreateComputerWithContext)

	case "CreateConditionalForwarderWithContext":
		return m.Fake(d.fakeCreateConditionalForwarderWithContext)

	case "CreateDirectoryWithContext":
		return m.Fake(d.fakeCreateDirectoryWithContext)

	case "CreateLogSubscriptionWithContext":
		return m.Fake(d.fakeCreateLogSubscriptionWithContext)

	case "CreateMicrosoftADWithContext":
		return m.Fake(d.fakeCreateMicrosoftADWithContext)

	case "CreateSnapshotWithContext":
		return m.Fake(d.fakeCreateSnapshotWithContext)

	case "CreateTrustWithContext":
		return m.Fake(d.fakeCreateTrustWithContext)

	case "DeleteConditionalForwarderWithContext":
		return m.Fake(d.fakeDeleteConditionalForwarderWithContext)

	case "DeleteDirectoryWithContext":
		return m.Fake(d.fakeDeleteDirectoryWithContext)

	case "DeleteLogSubscriptionWithContext":
		return m.Fake(d.fakeDeleteLogSubscriptionWithContext)

	case "DeleteSnapshotWithContext":
		return m.Fake(d.fakeDeleteSnapshotWithContext)

	case "DeleteTrustWithContext":
		return m.Fake(d.fakeDeleteTrustWithContext)

	case "DeregisterCertificateWithContext":
		return m.Fake(d.fakeDeregisterCertificateWithContext)

	case "DeregisterEventTopicWithContext":
		return m.Fake(d.fakeDeregisterEventTopicWithContext)

	case "DescribeCertificateWithContext":
		return m.Fake(d.fakeDescribeCertificateWithContext)

	case "DescribeConditionalForwardersWithContext":
		return m.Fake(d.fakeDescribeConditionalForwardersWithContext)

	case "DescribeDirectoriesWithContext":
		return m.Fake(d.fakeDescribeDirectoriesWithContext)

	case "DescribeDomainControllersPages":
		return m.Fake(d.fakeDescribeDomainControllersPages)

	case "DescribeDomainControllersPagesWithContext":
		return m.Fake(d.fakeDescribeDomainControllersPagesWithContext)

	case "DescribeDomainControllersWithContext":
		return m.Fake(d.fakeDescribeDomainControllersWithContext)

	case "DescribeEventTopicsWithContext":
		return m.Fake(d.fakeDescribeEventTopicsWithContext)

	case "DescribeLDAPSSettingsWithContext":
		return m.Fake(d.fakeDescribeLDAPSSettingsWithContext)

	case "DescribeSharedDirectoriesWithContext":
		return m.Fake(d.fakeDescribeSharedDirectoriesWithContext)

	case "DescribeSnapshotsWithContext":
		return m.Fake(d.fakeDescribeSnapshotsWithContext)

	case "DescribeTrustsWithContext":
		return m.Fake(d.fakeDescribeTrustsWithContext)

	case "DisableLDAPSWithContext":
		return m.Fake(d.fakeDisableLDAPSWithContext)

	case "DisableRadiusWithContext":
		return m.Fake(d.fakeDisableRadiusWithContext)

	case "DisableSsoWithContext":
		return m.Fake(d.fakeDisableSsoWithContext)

	case "EnableLDAPSWithContext":
		return m.Fake(d.fakeEnableLDAPSWithContext)

	case "EnableRadiusWithContext":
		return m.Fake(d.fakeEnableRadiusWithContext)

	case "EnableSsoWithContext":
		return m.Fake(d.fakeEnableSsoWithContext)

	case "GetDirectoryLimitsWithContext":
		return m.Fake(d.fakeGetDirectoryLimitsWithContext)

	case "GetSnapshotLimitsWithContext":
		return m.Fake(d.fakeGetSnapshotLimitsWithContext)

	case "ListCertificatesWithContext":
		return m.Fake(d.fakeListCertificatesWithContext)

	case "ListIpRoutesWithContext":
		return m.Fake(d.fakeListIpRoutesWithContext)

	case "ListLogSubscriptionsWithContext":
		return m.Fake(d.fakeListLogSubscriptionsWithContext)

	case "ListSchemaExtensionsWithContext":
		return m.Fake(d.fakeListSchemaExtensionsWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "RegisterCertificateWithContext":
		return m.Fake(d.fakeRegisterCertificateWithContext)

	case "RegisterEventTopicWithContext":
		return m.Fake(d.fakeRegisterEventTopicWithContext)

	case "RejectSharedDirectoryWithContext":
		return m.Fake(d.fakeRejectSharedDirectoryWithContext)

	case "RemoveIpRoutesWithContext":
		return m.Fake(d.fakeRemoveIpRoutesWithContext)

	case "RemoveTagsFromResourceWithContext":
		return m.Fake(d.fakeRemoveTagsFromResourceWithContext)

	case "ResetUserPasswordWithContext":
		return m.Fake(d.fakeResetUserPasswordWithContext)

	case "RestoreFromSnapshotWithContext":
		return m.Fake(d.fakeRestoreFromSnapshotWithContext)

	case "ShareDirectoryWithContext":
		return m.Fake(d.fakeShareDirectoryWithContext)

	case "StartSchemaExtensionWithContext":
		return m.Fake(d.fakeStartSchemaExtensionWithContext)

	case "UnshareDirectoryWithContext":
		return m.Fake(d.fakeUnshareDirectoryWithContext)

	case "UpdateConditionalForwarderWithContext":
		return m.Fake(d.fakeUpdateConditionalForwarderWithContext)

	case "UpdateNumberOfDomainControllersWithContext":
		return m.Fake(d.fakeUpdateNumberOfDomainControllersWithContext)

	case "UpdateRadiusWithContext":
		return m.Fake(d.fakeUpdateRadiusWithContext)

	case "UpdateTrustWithContext":
		return m.Fake(d.fakeUpdateTrustWithContext)

	case "VerifyTrustWithContext":
		return m.Fake(d.fakeVerifyTrustWithContext)

	default:
		return nil
	}
}

func (d *DirectoryServiceDouble) AcceptSharedDirectory(i0 *directoryservice.AcceptSharedDirectoryInput) (r0 *directoryservice.AcceptSharedDirectoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptSharedDirectory", i0)
	r0, _ = returns[0].(*directoryservice.AcceptSharedDirectoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) AcceptSharedDirectoryRequest(i0 *directoryservice.AcceptSharedDirectoryInput) (r0 *request.Request, r1 *directoryservice.AcceptSharedDirectoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptSharedDirectoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.AcceptSharedDirectoryOutput)
	return
}

func (d *DirectoryServiceDouble) AcceptSharedDirectoryWithContext(i0 context.Context, i1 *directoryservice.AcceptSharedDirectoryInput, i2 ...request.Option) (r0 *directoryservice.AcceptSharedDirectoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptSharedDirectoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.AcceptSharedDirectoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeAcceptSharedDirectoryWithContext(ctx context.Context, in *directoryservice.AcceptSharedDirectoryInput, _ ...request.Option) (*directoryservice.AcceptSharedDirectoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AcceptSharedDirectory cancelled", ctx.Err())
	default:
		return d.AcceptSharedDirectory(in)
	}
}

func (d *DirectoryServiceDouble) AddIpRoutes(i0 *directoryservice.AddIpRoutesInput) (r0 *directoryservice.AddIpRoutesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddIpRoutes", i0)
	r0, _ = returns[0].(*directoryservice.AddIpRoutesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) AddIpRoutesRequest(i0 *directoryservice.AddIpRoutesInput) (r0 *request.Request, r1 *directoryservice.AddIpRoutesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddIpRoutesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.AddIpRoutesOutput)
	return
}

func (d *DirectoryServiceDouble) AddIpRoutesWithContext(i0 context.Context, i1 *directoryservice.AddIpRoutesInput, i2 ...request.Option) (r0 *directoryservice.AddIpRoutesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddIpRoutesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.AddIpRoutesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeAddIpRoutesWithContext(ctx context.Context, in *directoryservice.AddIpRoutesInput, _ ...request.Option) (*directoryservice.AddIpRoutesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddIpRoutes cancelled", ctx.Err())
	default:
		return d.AddIpRoutes(in)
	}
}

func (d *DirectoryServiceDouble) AddTagsToResource(i0 *directoryservice.AddTagsToResourceInput) (r0 *directoryservice.AddTagsToResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToResource", i0)
	r0, _ = returns[0].(*directoryservice.AddTagsToResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) AddTagsToResourceRequest(i0 *directoryservice.AddTagsToResourceInput) (r0 *request.Request, r1 *directoryservice.AddTagsToResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.AddTagsToResourceOutput)
	return
}

func (d *DirectoryServiceDouble) AddTagsToResourceWithContext(i0 context.Context, i1 *directoryservice.AddTagsToResourceInput, i2 ...request.Option) (r0 *directoryservice.AddTagsToResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.AddTagsToResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeAddTagsToResourceWithContext(ctx context.Context, in *directoryservice.AddTagsToResourceInput, _ ...request.Option) (*directoryservice.AddTagsToResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddTagsToResource cancelled", ctx.Err())
	default:
		return d.AddTagsToResource(in)
	}
}

func (d *DirectoryServiceDouble) CancelSchemaExtension(i0 *directoryservice.CancelSchemaExtensionInput) (r0 *directoryservice.CancelSchemaExtensionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelSchemaExtension", i0)
	r0, _ = returns[0].(*directoryservice.CancelSchemaExtensionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) CancelSchemaExtensionRequest(i0 *directoryservice.CancelSchemaExtensionInput) (r0 *request.Request, r1 *directoryservice.CancelSchemaExtensionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelSchemaExtensionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.CancelSchemaExtensionOutput)
	return
}

func (d *DirectoryServiceDouble) CancelSchemaExtensionWithContext(i0 context.Context, i1 *directoryservice.CancelSchemaExtensionInput, i2 ...request.Option) (r0 *directoryservice.CancelSchemaExtensionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelSchemaExtensionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.CancelSchemaExtensionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeCancelSchemaExtensionWithContext(ctx context.Context, in *directoryservice.CancelSchemaExtensionInput, _ ...request.Option) (*directoryservice.CancelSchemaExtensionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelSchemaExtension cancelled", ctx.Err())
	default:
		return d.CancelSchemaExtension(in)
	}
}

func (d *DirectoryServiceDouble) ConnectDirectory(i0 *directoryservice.ConnectDirectoryInput) (r0 *directoryservice.ConnectDirectoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ConnectDirectory", i0)
	r0, _ = returns[0].(*directoryservice.ConnectDirectoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) ConnectDirectoryRequest(i0 *directoryservice.ConnectDirectoryInput) (r0 *request.Request, r1 *directoryservice.ConnectDirectoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ConnectDirectoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.ConnectDirectoryOutput)
	return
}

func (d *DirectoryServiceDouble) ConnectDirectoryWithContext(i0 context.Context, i1 *directoryservice.ConnectDirectoryInput, i2 ...request.Option) (r0 *directoryservice.ConnectDirectoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ConnectDirectoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.ConnectDirectoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeConnectDirectoryWithContext(ctx context.Context, in *directoryservice.ConnectDirectoryInput, _ ...request.Option) (*directoryservice.ConnectDirectoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ConnectDirectory cancelled", ctx.Err())
	default:
		return d.ConnectDirectory(in)
	}
}

func (d *DirectoryServiceDouble) CreateAlias(i0 *directoryservice.CreateAliasInput) (r0 *directoryservice.CreateAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAlias", i0)
	r0, _ = returns[0].(*directoryservice.CreateAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) CreateAliasRequest(i0 *directoryservice.CreateAliasInput) (r0 *request.Request, r1 *directoryservice.CreateAliasOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAliasRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.CreateAliasOutput)
	return
}

func (d *DirectoryServiceDouble) CreateAliasWithContext(i0 context.Context, i1 *directoryservice.CreateAliasInput, i2 ...request.Option) (r0 *directoryservice.CreateAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAliasWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.CreateAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeCreateAliasWithContext(ctx context.Context, in *directoryservice.CreateAliasInput, _ ...request.Option) (*directoryservice.CreateAliasOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateAlias cancelled", ctx.Err())
	default:
		return d.CreateAlias(in)
	}
}

func (d *DirectoryServiceDouble) CreateComputer(i0 *directoryservice.CreateComputerInput) (r0 *directoryservice.CreateComputerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateComputer", i0)
	r0, _ = returns[0].(*directoryservice.CreateComputerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) CreateComputerRequest(i0 *directoryservice.CreateComputerInput) (r0 *request.Request, r1 *directoryservice.CreateComputerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateComputerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.CreateComputerOutput)
	return
}

func (d *DirectoryServiceDouble) CreateComputerWithContext(i0 context.Context, i1 *directoryservice.CreateComputerInput, i2 ...request.Option) (r0 *directoryservice.CreateComputerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateComputerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.CreateComputerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeCreateComputerWithContext(ctx context.Context, in *directoryservice.CreateComputerInput, _ ...request.Option) (*directoryservice.CreateComputerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateComputer cancelled", ctx.Err())
	default:
		return d.CreateComputer(in)
	}
}

func (d *DirectoryServiceDouble) CreateConditionalForwarder(i0 *directoryservice.CreateConditionalForwarderInput) (r0 *directoryservice.CreateConditionalForwarderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateConditionalForwarder", i0)
	r0, _ = returns[0].(*directoryservice.CreateConditionalForwarderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) CreateConditionalForwarderRequest(i0 *directoryservice.CreateConditionalForwarderInput) (r0 *request.Request, r1 *directoryservice.CreateConditionalForwarderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateConditionalForwarderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.CreateConditionalForwarderOutput)
	return
}

func (d *DirectoryServiceDouble) CreateConditionalForwarderWithContext(i0 context.Context, i1 *directoryservice.CreateConditionalForwarderInput, i2 ...request.Option) (r0 *directoryservice.CreateConditionalForwarderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateConditionalForwarderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.CreateConditionalForwarderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeCreateConditionalForwarderWithContext(ctx context.Context, in *directoryservice.CreateConditionalForwarderInput, _ ...request.Option) (*directoryservice.CreateConditionalForwarderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateConditionalForwarder cancelled", ctx.Err())
	default:
		return d.CreateConditionalForwarder(in)
	}
}

func (d *DirectoryServiceDouble) CreateDirectory(i0 *directoryservice.CreateDirectoryInput) (r0 *directoryservice.CreateDirectoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDirectory", i0)
	r0, _ = returns[0].(*directoryservice.CreateDirectoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) CreateDirectoryRequest(i0 *directoryservice.CreateDirectoryInput) (r0 *request.Request, r1 *directoryservice.CreateDirectoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDirectoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.CreateDirectoryOutput)
	return
}

func (d *DirectoryServiceDouble) CreateDirectoryWithContext(i0 context.Context, i1 *directoryservice.CreateDirectoryInput, i2 ...request.Option) (r0 *directoryservice.CreateDirectoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDirectoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.CreateDirectoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeCreateDirectoryWithContext(ctx context.Context, in *directoryservice.CreateDirectoryInput, _ ...request.Option) (*directoryservice.CreateDirectoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDirectory cancelled", ctx.Err())
	default:
		return d.CreateDirectory(in)
	}
}

func (d *DirectoryServiceDouble) CreateLogSubscription(i0 *directoryservice.CreateLogSubscriptionInput) (r0 *directoryservice.CreateLogSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLogSubscription", i0)
	r0, _ = returns[0].(*directoryservice.CreateLogSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) CreateLogSubscriptionRequest(i0 *directoryservice.CreateLogSubscriptionInput) (r0 *request.Request, r1 *directoryservice.CreateLogSubscriptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLogSubscriptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.CreateLogSubscriptionOutput)
	return
}

func (d *DirectoryServiceDouble) CreateLogSubscriptionWithContext(i0 context.Context, i1 *directoryservice.CreateLogSubscriptionInput, i2 ...request.Option) (r0 *directoryservice.CreateLogSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLogSubscriptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.CreateLogSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeCreateLogSubscriptionWithContext(ctx context.Context, in *directoryservice.CreateLogSubscriptionInput, _ ...request.Option) (*directoryservice.CreateLogSubscriptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateLogSubscription cancelled", ctx.Err())
	default:
		return d.CreateLogSubscription(in)
	}
}

func (d *DirectoryServiceDouble) CreateMicrosoftAD(i0 *directoryservice.CreateMicrosoftADInput) (r0 *directoryservice.CreateMicrosoftADOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMicrosoftAD", i0)
	r0, _ = returns[0].(*directoryservice.CreateMicrosoftADOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) CreateMicrosoftADRequest(i0 *directoryservice.CreateMicrosoftADInput) (r0 *request.Request, r1 *directoryservice.CreateMicrosoftADOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMicrosoftADRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.CreateMicrosoftADOutput)
	return
}

func (d *DirectoryServiceDouble) CreateMicrosoftADWithContext(i0 context.Context, i1 *directoryservice.CreateMicrosoftADInput, i2 ...request.Option) (r0 *directoryservice.CreateMicrosoftADOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMicrosoftADWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.CreateMicrosoftADOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeCreateMicrosoftADWithContext(ctx context.Context, in *directoryservice.CreateMicrosoftADInput, _ ...request.Option) (*directoryservice.CreateMicrosoftADOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateMicrosoftAD cancelled", ctx.Err())
	default:
		return d.CreateMicrosoftAD(in)
	}
}

func (d *DirectoryServiceDouble) CreateSnapshot(i0 *directoryservice.CreateSnapshotInput) (r0 *directoryservice.CreateSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSnapshot", i0)
	r0, _ = returns[0].(*directoryservice.CreateSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) CreateSnapshotRequest(i0 *directoryservice.CreateSnapshotInput) (r0 *request.Request, r1 *directoryservice.CreateSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.CreateSnapshotOutput)
	return
}

func (d *DirectoryServiceDouble) CreateSnapshotWithContext(i0 context.Context, i1 *directoryservice.CreateSnapshotInput, i2 ...request.Option) (r0 *directoryservice.CreateSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.CreateSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeCreateSnapshotWithContext(ctx context.Context, in *directoryservice.CreateSnapshotInput, _ ...request.Option) (*directoryservice.CreateSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateSnapshot cancelled", ctx.Err())
	default:
		return d.CreateSnapshot(in)
	}
}

func (d *DirectoryServiceDouble) CreateTrust(i0 *directoryservice.CreateTrustInput) (r0 *directoryservice.CreateTrustOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTrust", i0)
	r0, _ = returns[0].(*directoryservice.CreateTrustOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) CreateTrustRequest(i0 *directoryservice.CreateTrustInput) (r0 *request.Request, r1 *directoryservice.CreateTrustOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTrustRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.CreateTrustOutput)
	return
}

func (d *DirectoryServiceDouble) CreateTrustWithContext(i0 context.Context, i1 *directoryservice.CreateTrustInput, i2 ...request.Option) (r0 *directoryservice.CreateTrustOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTrustWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.CreateTrustOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeCreateTrustWithContext(ctx context.Context, in *directoryservice.CreateTrustInput, _ ...request.Option) (*directoryservice.CreateTrustOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTrust cancelled", ctx.Err())
	default:
		return d.CreateTrust(in)
	}
}

func (d *DirectoryServiceDouble) DeleteConditionalForwarder(i0 *directoryservice.DeleteConditionalForwarderInput) (r0 *directoryservice.DeleteConditionalForwarderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteConditionalForwarder", i0)
	r0, _ = returns[0].(*directoryservice.DeleteConditionalForwarderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) DeleteConditionalForwarderRequest(i0 *directoryservice.DeleteConditionalForwarderInput) (r0 *request.Request, r1 *directoryservice.DeleteConditionalForwarderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteConditionalForwarderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.DeleteConditionalForwarderOutput)
	return
}

func (d *DirectoryServiceDouble) DeleteConditionalForwarderWithContext(i0 context.Context, i1 *directoryservice.DeleteConditionalForwarderInput, i2 ...request.Option) (r0 *directoryservice.DeleteConditionalForwarderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteConditionalForwarderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.DeleteConditionalForwarderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeDeleteConditionalForwarderWithContext(ctx context.Context, in *directoryservice.DeleteConditionalForwarderInput, _ ...request.Option) (*directoryservice.DeleteConditionalForwarderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteConditionalForwarder cancelled", ctx.Err())
	default:
		return d.DeleteConditionalForwarder(in)
	}
}

func (d *DirectoryServiceDouble) DeleteDirectory(i0 *directoryservice.DeleteDirectoryInput) (r0 *directoryservice.DeleteDirectoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDirectory", i0)
	r0, _ = returns[0].(*directoryservice.DeleteDirectoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) DeleteDirectoryRequest(i0 *directoryservice.DeleteDirectoryInput) (r0 *request.Request, r1 *directoryservice.DeleteDirectoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDirectoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.DeleteDirectoryOutput)
	return
}

func (d *DirectoryServiceDouble) DeleteDirectoryWithContext(i0 context.Context, i1 *directoryservice.DeleteDirectoryInput, i2 ...request.Option) (r0 *directoryservice.DeleteDirectoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDirectoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.DeleteDirectoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeDeleteDirectoryWithContext(ctx context.Context, in *directoryservice.DeleteDirectoryInput, _ ...request.Option) (*directoryservice.DeleteDirectoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDirectory cancelled", ctx.Err())
	default:
		return d.DeleteDirectory(in)
	}
}

func (d *DirectoryServiceDouble) DeleteLogSubscription(i0 *directoryservice.DeleteLogSubscriptionInput) (r0 *directoryservice.DeleteLogSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLogSubscription", i0)
	r0, _ = returns[0].(*directoryservice.DeleteLogSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) DeleteLogSubscriptionRequest(i0 *directoryservice.DeleteLogSubscriptionInput) (r0 *request.Request, r1 *directoryservice.DeleteLogSubscriptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLogSubscriptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.DeleteLogSubscriptionOutput)
	return
}

func (d *DirectoryServiceDouble) DeleteLogSubscriptionWithContext(i0 context.Context, i1 *directoryservice.DeleteLogSubscriptionInput, i2 ...request.Option) (r0 *directoryservice.DeleteLogSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLogSubscriptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.DeleteLogSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeDeleteLogSubscriptionWithContext(ctx context.Context, in *directoryservice.DeleteLogSubscriptionInput, _ ...request.Option) (*directoryservice.DeleteLogSubscriptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteLogSubscription cancelled", ctx.Err())
	default:
		return d.DeleteLogSubscription(in)
	}
}

func (d *DirectoryServiceDouble) DeleteSnapshot(i0 *directoryservice.DeleteSnapshotInput) (r0 *directoryservice.DeleteSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSnapshot", i0)
	r0, _ = returns[0].(*directoryservice.DeleteSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) DeleteSnapshotRequest(i0 *directoryservice.DeleteSnapshotInput) (r0 *request.Request, r1 *directoryservice.DeleteSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.DeleteSnapshotOutput)
	return
}

func (d *DirectoryServiceDouble) DeleteSnapshotWithContext(i0 context.Context, i1 *directoryservice.DeleteSnapshotInput, i2 ...request.Option) (r0 *directoryservice.DeleteSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.DeleteSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeDeleteSnapshotWithContext(ctx context.Context, in *directoryservice.DeleteSnapshotInput, _ ...request.Option) (*directoryservice.DeleteSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteSnapshot cancelled", ctx.Err())
	default:
		return d.DeleteSnapshot(in)
	}
}

func (d *DirectoryServiceDouble) DeleteTrust(i0 *directoryservice.DeleteTrustInput) (r0 *directoryservice.DeleteTrustOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTrust", i0)
	r0, _ = returns[0].(*directoryservice.DeleteTrustOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) DeleteTrustRequest(i0 *directoryservice.DeleteTrustInput) (r0 *request.Request, r1 *directoryservice.DeleteTrustOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTrustRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.DeleteTrustOutput)
	return
}

func (d *DirectoryServiceDouble) DeleteTrustWithContext(i0 context.Context, i1 *directoryservice.DeleteTrustInput, i2 ...request.Option) (r0 *directoryservice.DeleteTrustOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTrustWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.DeleteTrustOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeDeleteTrustWithContext(ctx context.Context, in *directoryservice.DeleteTrustInput, _ ...request.Option) (*directoryservice.DeleteTrustOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTrust cancelled", ctx.Err())
	default:
		return d.DeleteTrust(in)
	}
}

func (d *DirectoryServiceDouble) DeregisterCertificate(i0 *directoryservice.DeregisterCertificateInput) (r0 *directoryservice.DeregisterCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterCertificate", i0)
	r0, _ = returns[0].(*directoryservice.DeregisterCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) DeregisterCertificateRequest(i0 *directoryservice.DeregisterCertificateInput) (r0 *request.Request, r1 *directoryservice.DeregisterCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.DeregisterCertificateOutput)
	return
}

func (d *DirectoryServiceDouble) DeregisterCertificateWithContext(i0 context.Context, i1 *directoryservice.DeregisterCertificateInput, i2 ...request.Option) (r0 *directoryservice.DeregisterCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.DeregisterCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeDeregisterCertificateWithContext(ctx context.Context, in *directoryservice.DeregisterCertificateInput, _ ...request.Option) (*directoryservice.DeregisterCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeregisterCertificate cancelled", ctx.Err())
	default:
		return d.DeregisterCertificate(in)
	}
}

func (d *DirectoryServiceDouble) DeregisterEventTopic(i0 *directoryservice.DeregisterEventTopicInput) (r0 *directoryservice.DeregisterEventTopicOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterEventTopic", i0)
	r0, _ = returns[0].(*directoryservice.DeregisterEventTopicOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) DeregisterEventTopicRequest(i0 *directoryservice.DeregisterEventTopicInput) (r0 *request.Request, r1 *directoryservice.DeregisterEventTopicOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterEventTopicRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.DeregisterEventTopicOutput)
	return
}

func (d *DirectoryServiceDouble) DeregisterEventTopicWithContext(i0 context.Context, i1 *directoryservice.DeregisterEventTopicInput, i2 ...request.Option) (r0 *directoryservice.DeregisterEventTopicOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterEventTopicWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.DeregisterEventTopicOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeDeregisterEventTopicWithContext(ctx context.Context, in *directoryservice.DeregisterEventTopicInput, _ ...request.Option) (*directoryservice.DeregisterEventTopicOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeregisterEventTopic cancelled", ctx.Err())
	default:
		return d.DeregisterEventTopic(in)
	}
}

func (d *DirectoryServiceDouble) DescribeCertificate(i0 *directoryservice.DescribeCertificateInput) (r0 *directoryservice.DescribeCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCertificate", i0)
	r0, _ = returns[0].(*directoryservice.DescribeCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) DescribeCertificateRequest(i0 *directoryservice.DescribeCertificateInput) (r0 *request.Request, r1 *directoryservice.DescribeCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.DescribeCertificateOutput)
	return
}

func (d *DirectoryServiceDouble) DescribeCertificateWithContext(i0 context.Context, i1 *directoryservice.DescribeCertificateInput, i2 ...request.Option) (r0 *directoryservice.DescribeCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.DescribeCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeDescribeCertificateWithContext(ctx context.Context, in *directoryservice.DescribeCertificateInput, _ ...request.Option) (*directoryservice.DescribeCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeCertificate cancelled", ctx.Err())
	default:
		return d.DescribeCertificate(in)
	}
}

func (d *DirectoryServiceDouble) DescribeConditionalForwarders(i0 *directoryservice.DescribeConditionalForwardersInput) (r0 *directoryservice.DescribeConditionalForwardersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConditionalForwarders", i0)
	r0, _ = returns[0].(*directoryservice.DescribeConditionalForwardersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) DescribeConditionalForwardersRequest(i0 *directoryservice.DescribeConditionalForwardersInput) (r0 *request.Request, r1 *directoryservice.DescribeConditionalForwardersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConditionalForwardersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.DescribeConditionalForwardersOutput)
	return
}

func (d *DirectoryServiceDouble) DescribeConditionalForwardersWithContext(i0 context.Context, i1 *directoryservice.DescribeConditionalForwardersInput, i2 ...request.Option) (r0 *directoryservice.DescribeConditionalForwardersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConditionalForwardersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.DescribeConditionalForwardersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeDescribeConditionalForwardersWithContext(ctx context.Context, in *directoryservice.DescribeConditionalForwardersInput, _ ...request.Option) (*directoryservice.DescribeConditionalForwardersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeConditionalForwarders cancelled", ctx.Err())
	default:
		return d.DescribeConditionalForwarders(in)
	}
}

func (d *DirectoryServiceDouble) DescribeDirectories(i0 *directoryservice.DescribeDirectoriesInput) (r0 *directoryservice.DescribeDirectoriesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDirectories", i0)
	r0, _ = returns[0].(*directoryservice.DescribeDirectoriesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) DescribeDirectoriesRequest(i0 *directoryservice.DescribeDirectoriesInput) (r0 *request.Request, r1 *directoryservice.DescribeDirectoriesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDirectoriesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.DescribeDirectoriesOutput)
	return
}

func (d *DirectoryServiceDouble) DescribeDirectoriesWithContext(i0 context.Context, i1 *directoryservice.DescribeDirectoriesInput, i2 ...request.Option) (r0 *directoryservice.DescribeDirectoriesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDirectoriesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.DescribeDirectoriesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeDescribeDirectoriesWithContext(ctx context.Context, in *directoryservice.DescribeDirectoriesInput, _ ...request.Option) (*directoryservice.DescribeDirectoriesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDirectories cancelled", ctx.Err())
	default:
		return d.DescribeDirectories(in)
	}
}

func (d *DirectoryServiceDouble) DescribeDomainControllers(i0 *directoryservice.DescribeDomainControllersInput) (r0 *directoryservice.DescribeDomainControllersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDomainControllers", i0)
	r0, _ = returns[0].(*directoryservice.DescribeDomainControllersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) DescribeDomainControllersPages(i0 *directoryservice.DescribeDomainControllersInput, i1 func(*directoryservice.DescribeDomainControllersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDomainControllersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DirectoryServiceDouble) fakeDescribeDomainControllersPages(in *directoryservice.DescribeDomainControllersInput, pager func(*directoryservice.DescribeDomainControllersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeDomainControllers", paginators, in, pager)
}

func (d *DirectoryServiceDouble) DescribeDomainControllersPagesWithContext(i0 context.Context, i1 *directoryservice.DescribeDomainControllersInput, i2 func(*directoryservice.DescribeDomainControllersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDomainControllersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DirectoryServiceDouble) fakeDescribeDomainControllersPagesWithContext(ctx context.Context, in *directoryservice.DescribeDomainControllersInput, pager func(*directoryservice.DescribeDomainControllersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeDomainControllers", paginators, ctx, in, pager, options...)
}

func (d *DirectoryServiceDouble) DescribeDomainControllersRequest(i0 *directoryservice.DescribeDomainControllersInput) (r0 *request.Request, r1 *directoryservice.DescribeDomainControllersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDomainControllersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.DescribeDomainControllersOutput)
	return
}

func (d *DirectoryServiceDouble) DescribeDomainControllersWithContext(i0 context.Context, i1 *directoryservice.DescribeDomainControllersInput, i2 ...request.Option) (r0 *directoryservice.DescribeDomainControllersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDomainControllersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.DescribeDomainControllersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeDescribeDomainControllersWithContext(ctx context.Context, in *directoryservice.DescribeDomainControllersInput, _ ...request.Option) (*directoryservice.DescribeDomainControllersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDomainControllers cancelled", ctx.Err())
	default:
		return d.DescribeDomainControllers(in)
	}
}

func (d *DirectoryServiceDouble) DescribeEventTopics(i0 *directoryservice.DescribeEventTopicsInput) (r0 *directoryservice.DescribeEventTopicsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventTopics", i0)
	r0, _ = returns[0].(*directoryservice.DescribeEventTopicsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) DescribeEventTopicsRequest(i0 *directoryservice.DescribeEventTopicsInput) (r0 *request.Request, r1 *directoryservice.DescribeEventTopicsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventTopicsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.DescribeEventTopicsOutput)
	return
}

func (d *DirectoryServiceDouble) DescribeEventTopicsWithContext(i0 context.Context, i1 *directoryservice.DescribeEventTopicsInput, i2 ...request.Option) (r0 *directoryservice.DescribeEventTopicsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventTopicsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.DescribeEventTopicsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeDescribeEventTopicsWithContext(ctx context.Context, in *directoryservice.DescribeEventTopicsInput, _ ...request.Option) (*directoryservice.DescribeEventTopicsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEventTopics cancelled", ctx.Err())
	default:
		return d.DescribeEventTopics(in)
	}
}

func (d *DirectoryServiceDouble) DescribeLDAPSSettings(i0 *directoryservice.DescribeLDAPSSettingsInput) (r0 *directoryservice.DescribeLDAPSSettingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLDAPSSettings", i0)
	r0, _ = returns[0].(*directoryservice.DescribeLDAPSSettingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) DescribeLDAPSSettingsRequest(i0 *directoryservice.DescribeLDAPSSettingsInput) (r0 *request.Request, r1 *directoryservice.DescribeLDAPSSettingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLDAPSSettingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.DescribeLDAPSSettingsOutput)
	return
}

func (d *DirectoryServiceDouble) DescribeLDAPSSettingsWithContext(i0 context.Context, i1 *directoryservice.DescribeLDAPSSettingsInput, i2 ...request.Option) (r0 *directoryservice.DescribeLDAPSSettingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLDAPSSettingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.DescribeLDAPSSettingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeDescribeLDAPSSettingsWithContext(ctx context.Context, in *directoryservice.DescribeLDAPSSettingsInput, _ ...request.Option) (*directoryservice.DescribeLDAPSSettingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeLDAPSSettings cancelled", ctx.Err())
	default:
		return d.DescribeLDAPSSettings(in)
	}
}

func (d *DirectoryServiceDouble) DescribeSharedDirectories(i0 *directoryservice.DescribeSharedDirectoriesInput) (r0 *directoryservice.DescribeSharedDirectoriesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSharedDirectories", i0)
	r0, _ = returns[0].(*directoryservice.DescribeSharedDirectoriesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) DescribeSharedDirectoriesRequest(i0 *directoryservice.DescribeSharedDirectoriesInput) (r0 *request.Request, r1 *directoryservice.DescribeSharedDirectoriesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSharedDirectoriesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.DescribeSharedDirectoriesOutput)
	return
}

func (d *DirectoryServiceDouble) DescribeSharedDirectoriesWithContext(i0 context.Context, i1 *directoryservice.DescribeSharedDirectoriesInput, i2 ...request.Option) (r0 *directoryservice.DescribeSharedDirectoriesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSharedDirectoriesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.DescribeSharedDirectoriesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeDescribeSharedDirectoriesWithContext(ctx context.Context, in *directoryservice.DescribeSharedDirectoriesInput, _ ...request.Option) (*directoryservice.DescribeSharedDirectoriesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSharedDirectories cancelled", ctx.Err())
	default:
		return d.DescribeSharedDirectories(in)
	}
}

func (d *DirectoryServiceDouble) DescribeSnapshots(i0 *directoryservice.DescribeSnapshotsInput) (r0 *directoryservice.DescribeSnapshotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSnapshots", i0)
	r0, _ = returns[0].(*directoryservice.DescribeSnapshotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) DescribeSnapshotsRequest(i0 *directoryservice.DescribeSnapshotsInput) (r0 *request.Request, r1 *directoryservice.DescribeSnapshotsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSnapshotsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.DescribeSnapshotsOutput)
	return
}

func (d *DirectoryServiceDouble) DescribeSnapshotsWithContext(i0 context.Context, i1 *directoryservice.DescribeSnapshotsInput, i2 ...request.Option) (r0 *directoryservice.DescribeSnapshotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSnapshotsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.DescribeSnapshotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeDescribeSnapshotsWithContext(ctx context.Context, in *directoryservice.DescribeSnapshotsInput, _ ...request.Option) (*directoryservice.DescribeSnapshotsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSnapshots cancelled", ctx.Err())
	default:
		return d.DescribeSnapshots(in)
	}
}

func (d *DirectoryServiceDouble) DescribeTrusts(i0 *directoryservice.DescribeTrustsInput) (r0 *directoryservice.DescribeTrustsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTrusts", i0)
	r0, _ = returns[0].(*directoryservice.DescribeTrustsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) DescribeTrustsRequest(i0 *directoryservice.DescribeTrustsInput) (r0 *request.Request, r1 *directoryservice.DescribeTrustsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTrustsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.DescribeTrustsOutput)
	return
}

func (d *DirectoryServiceDouble) DescribeTrustsWithContext(i0 context.Context, i1 *directoryservice.DescribeTrustsInput, i2 ...request.Option) (r0 *directoryservice.DescribeTrustsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTrustsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.DescribeTrustsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeDescribeTrustsWithContext(ctx context.Context, in *directoryservice.DescribeTrustsInput, _ ...request.Option) (*directoryservice.DescribeTrustsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTrusts cancelled", ctx.Err())
	default:
		return d.DescribeTrusts(in)
	}
}

func (d *DirectoryServiceDouble) DisableLDAPS(i0 *directoryservice.DisableLDAPSInput) (r0 *directoryservice.DisableLDAPSOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableLDAPS", i0)
	r0, _ = returns[0].(*directoryservice.DisableLDAPSOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) DisableLDAPSRequest(i0 *directoryservice.DisableLDAPSInput) (r0 *request.Request, r1 *directoryservice.DisableLDAPSOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableLDAPSRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.DisableLDAPSOutput)
	return
}

func (d *DirectoryServiceDouble) DisableLDAPSWithContext(i0 context.Context, i1 *directoryservice.DisableLDAPSInput, i2 ...request.Option) (r0 *directoryservice.DisableLDAPSOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableLDAPSWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.DisableLDAPSOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeDisableLDAPSWithContext(ctx context.Context, in *directoryservice.DisableLDAPSInput, _ ...request.Option) (*directoryservice.DisableLDAPSOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisableLDAPS cancelled", ctx.Err())
	default:
		return d.DisableLDAPS(in)
	}
}

func (d *DirectoryServiceDouble) DisableRadius(i0 *directoryservice.DisableRadiusInput) (r0 *directoryservice.DisableRadiusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableRadius", i0)
	r0, _ = returns[0].(*directoryservice.DisableRadiusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) DisableRadiusRequest(i0 *directoryservice.DisableRadiusInput) (r0 *request.Request, r1 *directoryservice.DisableRadiusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableRadiusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.DisableRadiusOutput)
	return
}

func (d *DirectoryServiceDouble) DisableRadiusWithContext(i0 context.Context, i1 *directoryservice.DisableRadiusInput, i2 ...request.Option) (r0 *directoryservice.DisableRadiusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableRadiusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.DisableRadiusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeDisableRadiusWithContext(ctx context.Context, in *directoryservice.DisableRadiusInput, _ ...request.Option) (*directoryservice.DisableRadiusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisableRadius cancelled", ctx.Err())
	default:
		return d.DisableRadius(in)
	}
}

func (d *DirectoryServiceDouble) DisableSso(i0 *directoryservice.DisableSsoInput) (r0 *directoryservice.DisableSsoOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableSso", i0)
	r0, _ = returns[0].(*directoryservice.DisableSsoOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) DisableSsoRequest(i0 *directoryservice.DisableSsoInput) (r0 *request.Request, r1 *directoryservice.DisableSsoOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableSsoRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.DisableSsoOutput)
	return
}

func (d *DirectoryServiceDouble) DisableSsoWithContext(i0 context.Context, i1 *directoryservice.DisableSsoInput, i2 ...request.Option) (r0 *directoryservice.DisableSsoOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableSsoWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.DisableSsoOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeDisableSsoWithContext(ctx context.Context, in *directoryservice.DisableSsoInput, _ ...request.Option) (*directoryservice.DisableSsoOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisableSso cancelled", ctx.Err())
	default:
		return d.DisableSso(in)
	}
}

func (d *DirectoryServiceDouble) EnableLDAPS(i0 *directoryservice.EnableLDAPSInput) (r0 *directoryservice.EnableLDAPSOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableLDAPS", i0)
	r0, _ = returns[0].(*directoryservice.EnableLDAPSOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) EnableLDAPSRequest(i0 *directoryservice.EnableLDAPSInput) (r0 *request.Request, r1 *directoryservice.EnableLDAPSOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableLDAPSRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.EnableLDAPSOutput)
	return
}

func (d *DirectoryServiceDouble) EnableLDAPSWithContext(i0 context.Context, i1 *directoryservice.EnableLDAPSInput, i2 ...request.Option) (r0 *directoryservice.EnableLDAPSOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableLDAPSWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.EnableLDAPSOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeEnableLDAPSWithContext(ctx context.Context, in *directoryservice.EnableLDAPSInput, _ ...request.Option) (*directoryservice.EnableLDAPSOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "EnableLDAPS cancelled", ctx.Err())
	default:
		return d.EnableLDAPS(in)
	}
}

func (d *DirectoryServiceDouble) EnableRadius(i0 *directoryservice.EnableRadiusInput) (r0 *directoryservice.EnableRadiusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableRadius", i0)
	r0, _ = returns[0].(*directoryservice.EnableRadiusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) EnableRadiusRequest(i0 *directoryservice.EnableRadiusInput) (r0 *request.Request, r1 *directoryservice.EnableRadiusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableRadiusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.EnableRadiusOutput)
	return
}

func (d *DirectoryServiceDouble) EnableRadiusWithContext(i0 context.Context, i1 *directoryservice.EnableRadiusInput, i2 ...request.Option) (r0 *directoryservice.EnableRadiusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableRadiusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.EnableRadiusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeEnableRadiusWithContext(ctx context.Context, in *directoryservice.EnableRadiusInput, _ ...request.Option) (*directoryservice.EnableRadiusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "EnableRadius cancelled", ctx.Err())
	default:
		return d.EnableRadius(in)
	}
}

func (d *DirectoryServiceDouble) EnableSso(i0 *directoryservice.EnableSsoInput) (r0 *directoryservice.EnableSsoOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableSso", i0)
	r0, _ = returns[0].(*directoryservice.EnableSsoOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) EnableSsoRequest(i0 *directoryservice.EnableSsoInput) (r0 *request.Request, r1 *directoryservice.EnableSsoOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableSsoRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.EnableSsoOutput)
	return
}

func (d *DirectoryServiceDouble) EnableSsoWithContext(i0 context.Context, i1 *directoryservice.EnableSsoInput, i2 ...request.Option) (r0 *directoryservice.EnableSsoOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableSsoWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.EnableSsoOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeEnableSsoWithContext(ctx context.Context, in *directoryservice.EnableSsoInput, _ ...request.Option) (*directoryservice.EnableSsoOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "EnableSso cancelled", ctx.Err())
	default:
		return d.EnableSso(in)
	}
}

func (d *DirectoryServiceDouble) GetDirectoryLimits(i0 *directoryservice.GetDirectoryLimitsInput) (r0 *directoryservice.GetDirectoryLimitsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDirectoryLimits", i0)
	r0, _ = returns[0].(*directoryservice.GetDirectoryLimitsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) GetDirectoryLimitsRequest(i0 *directoryservice.GetDirectoryLimitsInput) (r0 *request.Request, r1 *directoryservice.GetDirectoryLimitsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDirectoryLimitsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.GetDirectoryLimitsOutput)
	return
}

func (d *DirectoryServiceDouble) GetDirectoryLimitsWithContext(i0 context.Context, i1 *directoryservice.GetDirectoryLimitsInput, i2 ...request.Option) (r0 *directoryservice.GetDirectoryLimitsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDirectoryLimitsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.GetDirectoryLimitsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeGetDirectoryLimitsWithContext(ctx context.Context, in *directoryservice.GetDirectoryLimitsInput, _ ...request.Option) (*directoryservice.GetDirectoryLimitsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDirectoryLimits cancelled", ctx.Err())
	default:
		return d.GetDirectoryLimits(in)
	}
}

func (d *DirectoryServiceDouble) GetSnapshotLimits(i0 *directoryservice.GetSnapshotLimitsInput) (r0 *directoryservice.GetSnapshotLimitsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSnapshotLimits", i0)
	r0, _ = returns[0].(*directoryservice.GetSnapshotLimitsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) GetSnapshotLimitsRequest(i0 *directoryservice.GetSnapshotLimitsInput) (r0 *request.Request, r1 *directoryservice.GetSnapshotLimitsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSnapshotLimitsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.GetSnapshotLimitsOutput)
	return
}

func (d *DirectoryServiceDouble) GetSnapshotLimitsWithContext(i0 context.Context, i1 *directoryservice.GetSnapshotLimitsInput, i2 ...request.Option) (r0 *directoryservice.GetSnapshotLimitsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSnapshotLimitsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.GetSnapshotLimitsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeGetSnapshotLimitsWithContext(ctx context.Context, in *directoryservice.GetSnapshotLimitsInput, _ ...request.Option) (*directoryservice.GetSnapshotLimitsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetSnapshotLimits cancelled", ctx.Err())
	default:
		return d.GetSnapshotLimits(in)
	}
}

func (d *DirectoryServiceDouble) ListCertificates(i0 *directoryservice.ListCertificatesInput) (r0 *directoryservice.ListCertificatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCertificates", i0)
	r0, _ = returns[0].(*directoryservice.ListCertificatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) ListCertificatesRequest(i0 *directoryservice.ListCertificatesInput) (r0 *request.Request, r1 *directoryservice.ListCertificatesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCertificatesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.ListCertificatesOutput)
	return
}

func (d *DirectoryServiceDouble) ListCertificatesWithContext(i0 context.Context, i1 *directoryservice.ListCertificatesInput, i2 ...request.Option) (r0 *directoryservice.ListCertificatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCertificatesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.ListCertificatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeListCertificatesWithContext(ctx context.Context, in *directoryservice.ListCertificatesInput, _ ...request.Option) (*directoryservice.ListCertificatesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListCertificates cancelled", ctx.Err())
	default:
		return d.ListCertificates(in)
	}
}

func (d *DirectoryServiceDouble) ListIpRoutes(i0 *directoryservice.ListIpRoutesInput) (r0 *directoryservice.ListIpRoutesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIpRoutes", i0)
	r0, _ = returns[0].(*directoryservice.ListIpRoutesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) ListIpRoutesRequest(i0 *directoryservice.ListIpRoutesInput) (r0 *request.Request, r1 *directoryservice.ListIpRoutesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIpRoutesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.ListIpRoutesOutput)
	return
}

func (d *DirectoryServiceDouble) ListIpRoutesWithContext(i0 context.Context, i1 *directoryservice.ListIpRoutesInput, i2 ...request.Option) (r0 *directoryservice.ListIpRoutesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIpRoutesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.ListIpRoutesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeListIpRoutesWithContext(ctx context.Context, in *directoryservice.ListIpRoutesInput, _ ...request.Option) (*directoryservice.ListIpRoutesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListIpRoutes cancelled", ctx.Err())
	default:
		return d.ListIpRoutes(in)
	}
}

func (d *DirectoryServiceDouble) ListLogSubscriptions(i0 *directoryservice.ListLogSubscriptionsInput) (r0 *directoryservice.ListLogSubscriptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLogSubscriptions", i0)
	r0, _ = returns[0].(*directoryservice.ListLogSubscriptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) ListLogSubscriptionsRequest(i0 *directoryservice.ListLogSubscriptionsInput) (r0 *request.Request, r1 *directoryservice.ListLogSubscriptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLogSubscriptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.ListLogSubscriptionsOutput)
	return
}

func (d *DirectoryServiceDouble) ListLogSubscriptionsWithContext(i0 context.Context, i1 *directoryservice.ListLogSubscriptionsInput, i2 ...request.Option) (r0 *directoryservice.ListLogSubscriptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLogSubscriptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.ListLogSubscriptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeListLogSubscriptionsWithContext(ctx context.Context, in *directoryservice.ListLogSubscriptionsInput, _ ...request.Option) (*directoryservice.ListLogSubscriptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListLogSubscriptions cancelled", ctx.Err())
	default:
		return d.ListLogSubscriptions(in)
	}
}

func (d *DirectoryServiceDouble) ListSchemaExtensions(i0 *directoryservice.ListSchemaExtensionsInput) (r0 *directoryservice.ListSchemaExtensionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSchemaExtensions", i0)
	r0, _ = returns[0].(*directoryservice.ListSchemaExtensionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) ListSchemaExtensionsRequest(i0 *directoryservice.ListSchemaExtensionsInput) (r0 *request.Request, r1 *directoryservice.ListSchemaExtensionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSchemaExtensionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.ListSchemaExtensionsOutput)
	return
}

func (d *DirectoryServiceDouble) ListSchemaExtensionsWithContext(i0 context.Context, i1 *directoryservice.ListSchemaExtensionsInput, i2 ...request.Option) (r0 *directoryservice.ListSchemaExtensionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSchemaExtensionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.ListSchemaExtensionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeListSchemaExtensionsWithContext(ctx context.Context, in *directoryservice.ListSchemaExtensionsInput, _ ...request.Option) (*directoryservice.ListSchemaExtensionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListSchemaExtensions cancelled", ctx.Err())
	default:
		return d.ListSchemaExtensions(in)
	}
}

func (d *DirectoryServiceDouble) ListTagsForResource(i0 *directoryservice.ListTagsForResourceInput) (r0 *directoryservice.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*directoryservice.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) ListTagsForResourceRequest(i0 *directoryservice.ListTagsForResourceInput) (r0 *request.Request, r1 *directoryservice.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.ListTagsForResourceOutput)
	return
}

func (d *DirectoryServiceDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *directoryservice.ListTagsForResourceInput, i2 ...request.Option) (r0 *directoryservice.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *directoryservice.ListTagsForResourceInput, _ ...request.Option) (*directoryservice.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *DirectoryServiceDouble) RegisterCertificate(i0 *directoryservice.RegisterCertificateInput) (r0 *directoryservice.RegisterCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterCertificate", i0)
	r0, _ = returns[0].(*directoryservice.RegisterCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) RegisterCertificateRequest(i0 *directoryservice.RegisterCertificateInput) (r0 *request.Request, r1 *directoryservice.RegisterCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.RegisterCertificateOutput)
	return
}

func (d *DirectoryServiceDouble) RegisterCertificateWithContext(i0 context.Context, i1 *directoryservice.RegisterCertificateInput, i2 ...request.Option) (r0 *directoryservice.RegisterCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.RegisterCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeRegisterCertificateWithContext(ctx context.Context, in *directoryservice.RegisterCertificateInput, _ ...request.Option) (*directoryservice.RegisterCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterCertificate cancelled", ctx.Err())
	default:
		return d.RegisterCertificate(in)
	}
}

func (d *DirectoryServiceDouble) RegisterEventTopic(i0 *directoryservice.RegisterEventTopicInput) (r0 *directoryservice.RegisterEventTopicOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterEventTopic", i0)
	r0, _ = returns[0].(*directoryservice.RegisterEventTopicOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) RegisterEventTopicRequest(i0 *directoryservice.RegisterEventTopicInput) (r0 *request.Request, r1 *directoryservice.RegisterEventTopicOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterEventTopicRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.RegisterEventTopicOutput)
	return
}

func (d *DirectoryServiceDouble) RegisterEventTopicWithContext(i0 context.Context, i1 *directoryservice.RegisterEventTopicInput, i2 ...request.Option) (r0 *directoryservice.RegisterEventTopicOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterEventTopicWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.RegisterEventTopicOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeRegisterEventTopicWithContext(ctx context.Context, in *directoryservice.RegisterEventTopicInput, _ ...request.Option) (*directoryservice.RegisterEventTopicOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterEventTopic cancelled", ctx.Err())
	default:
		return d.RegisterEventTopic(in)
	}
}

func (d *DirectoryServiceDouble) RejectSharedDirectory(i0 *directoryservice.RejectSharedDirectoryInput) (r0 *directoryservice.RejectSharedDirectoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RejectSharedDirectory", i0)
	r0, _ = returns[0].(*directoryservice.RejectSharedDirectoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) RejectSharedDirectoryRequest(i0 *directoryservice.RejectSharedDirectoryInput) (r0 *request.Request, r1 *directoryservice.RejectSharedDirectoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RejectSharedDirectoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.RejectSharedDirectoryOutput)
	return
}

func (d *DirectoryServiceDouble) RejectSharedDirectoryWithContext(i0 context.Context, i1 *directoryservice.RejectSharedDirectoryInput, i2 ...request.Option) (r0 *directoryservice.RejectSharedDirectoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RejectSharedDirectoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.RejectSharedDirectoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeRejectSharedDirectoryWithContext(ctx context.Context, in *directoryservice.RejectSharedDirectoryInput, _ ...request.Option) (*directoryservice.RejectSharedDirectoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RejectSharedDirectory cancelled", ctx.Err())
	default:
		return d.RejectSharedDirectory(in)
	}
}

func (d *DirectoryServiceDouble) RemoveIpRoutes(i0 *directoryservice.RemoveIpRoutesInput) (r0 *directoryservice.RemoveIpRoutesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveIpRoutes", i0)
	r0, _ = returns[0].(*directoryservice.RemoveIpRoutesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) RemoveIpRoutesRequest(i0 *directoryservice.RemoveIpRoutesInput) (r0 *request.Request, r1 *directoryservice.RemoveIpRoutesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveIpRoutesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.RemoveIpRoutesOutput)
	return
}

func (d *DirectoryServiceDouble) RemoveIpRoutesWithContext(i0 context.Context, i1 *directoryservice.RemoveIpRoutesInput, i2 ...request.Option) (r0 *directoryservice.RemoveIpRoutesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveIpRoutesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.RemoveIpRoutesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeRemoveIpRoutesWithContext(ctx context.Context, in *directoryservice.RemoveIpRoutesInput, _ ...request.Option) (*directoryservice.RemoveIpRoutesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveIpRoutes cancelled", ctx.Err())
	default:
		return d.RemoveIpRoutes(in)
	}
}

func (d *DirectoryServiceDouble) RemoveTagsFromResource(i0 *directoryservice.RemoveTagsFromResourceInput) (r0 *directoryservice.RemoveTagsFromResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromResource", i0)
	r0, _ = returns[0].(*directoryservice.RemoveTagsFromResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) RemoveTagsFromResourceRequest(i0 *directoryservice.RemoveTagsFromResourceInput) (r0 *request.Request, r1 *directoryservice.RemoveTagsFromResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.RemoveTagsFromResourceOutput)
	return
}

func (d *DirectoryServiceDouble) RemoveTagsFromResourceWithContext(i0 context.Context, i1 *directoryservice.RemoveTagsFromResourceInput, i2 ...request.Option) (r0 *directoryservice.RemoveTagsFromResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.RemoveTagsFromResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeRemoveTagsFromResourceWithContext(ctx context.Context, in *directoryservice.RemoveTagsFromResourceInput, _ ...request.Option) (*directoryservice.RemoveTagsFromResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveTagsFromResource cancelled", ctx.Err())
	default:
		return d.RemoveTagsFromResource(in)
	}
}

func (d *DirectoryServiceDouble) ResetUserPassword(i0 *directoryservice.ResetUserPasswordInput) (r0 *directoryservice.ResetUserPasswordOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetUserPassword", i0)
	r0, _ = returns[0].(*directoryservice.ResetUserPasswordOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) ResetUserPasswordRequest(i0 *directoryservice.ResetUserPasswordInput) (r0 *request.Request, r1 *directoryservice.ResetUserPasswordOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetUserPasswordRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.ResetUserPasswordOutput)
	return
}

func (d *DirectoryServiceDouble) ResetUserPasswordWithContext(i0 context.Context, i1 *directoryservice.ResetUserPasswordInput, i2 ...request.Option) (r0 *directoryservice.ResetUserPasswordOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetUserPasswordWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.ResetUserPasswordOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeResetUserPasswordWithContext(ctx context.Context, in *directoryservice.ResetUserPasswordInput, _ ...request.Option) (*directoryservice.ResetUserPasswordOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ResetUserPassword cancelled", ctx.Err())
	default:
		return d.ResetUserPassword(in)
	}
}

func (d *DirectoryServiceDouble) RestoreFromSnapshot(i0 *directoryservice.RestoreFromSnapshotInput) (r0 *directoryservice.RestoreFromSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreFromSnapshot", i0)
	r0, _ = returns[0].(*directoryservice.RestoreFromSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) RestoreFromSnapshotRequest(i0 *directoryservice.RestoreFromSnapshotInput) (r0 *request.Request, r1 *directoryservice.RestoreFromSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreFromSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.RestoreFromSnapshotOutput)
	return
}

func (d *DirectoryServiceDouble) RestoreFromSnapshotWithContext(i0 context.Context, i1 *directoryservice.RestoreFromSnapshotInput, i2 ...request.Option) (r0 *directoryservice.RestoreFromSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreFromSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.RestoreFromSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeRestoreFromSnapshotWithContext(ctx context.Context, in *directoryservice.RestoreFromSnapshotInput, _ ...request.Option) (*directoryservice.RestoreFromSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RestoreFromSnapshot cancelled", ctx.Err())
	default:
		return d.RestoreFromSnapshot(in)
	}
}

func (d *DirectoryServiceDouble) ShareDirectory(i0 *directoryservice.ShareDirectoryInput) (r0 *directoryservice.ShareDirectoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ShareDirectory", i0)
	r0, _ = returns[0].(*directoryservice.ShareDirectoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) ShareDirectoryRequest(i0 *directoryservice.ShareDirectoryInput) (r0 *request.Request, r1 *directoryservice.ShareDirectoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ShareDirectoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.ShareDirectoryOutput)
	return
}

func (d *DirectoryServiceDouble) ShareDirectoryWithContext(i0 context.Context, i1 *directoryservice.ShareDirectoryInput, i2 ...request.Option) (r0 *directoryservice.ShareDirectoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ShareDirectoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.ShareDirectoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeShareDirectoryWithContext(ctx context.Context, in *directoryservice.ShareDirectoryInput, _ ...request.Option) (*directoryservice.ShareDirectoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ShareDirectory cancelled", ctx.Err())
	default:
		return d.ShareDirectory(in)
	}
}

func (d *DirectoryServiceDouble) StartSchemaExtension(i0 *directoryservice.StartSchemaExtensionInput) (r0 *directoryservice.StartSchemaExtensionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartSchemaExtension", i0)
	r0, _ = returns[0].(*directoryservice.StartSchemaExtensionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) StartSchemaExtensionRequest(i0 *directoryservice.StartSchemaExtensionInput) (r0 *request.Request, r1 *directoryservice.StartSchemaExtensionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartSchemaExtensionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.StartSchemaExtensionOutput)
	return
}

func (d *DirectoryServiceDouble) StartSchemaExtensionWithContext(i0 context.Context, i1 *directoryservice.StartSchemaExtensionInput, i2 ...request.Option) (r0 *directoryservice.StartSchemaExtensionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartSchemaExtensionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.StartSchemaExtensionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeStartSchemaExtensionWithContext(ctx context.Context, in *directoryservice.StartSchemaExtensionInput, _ ...request.Option) (*directoryservice.StartSchemaExtensionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartSchemaExtension cancelled", ctx.Err())
	default:
		return d.StartSchemaExtension(in)
	}
}

func (d *DirectoryServiceDouble) UnshareDirectory(i0 *directoryservice.UnshareDirectoryInput) (r0 *directoryservice.UnshareDirectoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnshareDirectory", i0)
	r0, _ = returns[0].(*directoryservice.UnshareDirectoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) UnshareDirectoryRequest(i0 *directoryservice.UnshareDirectoryInput) (r0 *request.Request, r1 *directoryservice.UnshareDirectoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnshareDirectoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.UnshareDirectoryOutput)
	return
}

func (d *DirectoryServiceDouble) UnshareDirectoryWithContext(i0 context.Context, i1 *directoryservice.UnshareDirectoryInput, i2 ...request.Option) (r0 *directoryservice.UnshareDirectoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnshareDirectoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.UnshareDirectoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeUnshareDirectoryWithContext(ctx context.Context, in *directoryservice.UnshareDirectoryInput, _ ...request.Option) (*directoryservice.UnshareDirectoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UnshareDirectory cancelled", ctx.Err())
	default:
		return d.UnshareDirectory(in)
	}
}

func (d *DirectoryServiceDouble) UpdateConditionalForwarder(i0 *directoryservice.UpdateConditionalForwarderInput) (r0 *directoryservice.UpdateConditionalForwarderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateConditionalForwarder", i0)
	r0, _ = returns[0].(*directoryservice.UpdateConditionalForwarderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) UpdateConditionalForwarderRequest(i0 *directoryservice.UpdateConditionalForwarderInput) (r0 *request.Request, r1 *directoryservice.UpdateConditionalForwarderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateConditionalForwarderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.UpdateConditionalForwarderOutput)
	return
}

func (d *DirectoryServiceDouble) UpdateConditionalForwarderWithContext(i0 context.Context, i1 *directoryservice.UpdateConditionalForwarderInput, i2 ...request.Option) (r0 *directoryservice.UpdateConditionalForwarderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateConditionalForwarderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.UpdateConditionalForwarderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeUpdateConditionalForwarderWithContext(ctx context.Context, in *directoryservice.UpdateConditionalForwarderInput, _ ...request.Option) (*directoryservice.UpdateConditionalForwarderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateConditionalForwarder cancelled", ctx.Err())
	default:
		return d.UpdateConditionalForwarder(in)
	}
}

func (d *DirectoryServiceDouble) UpdateNumberOfDomainControllers(i0 *directoryservice.UpdateNumberOfDomainControllersInput) (r0 *directoryservice.UpdateNumberOfDomainControllersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateNumberOfDomainControllers", i0)
	r0, _ = returns[0].(*directoryservice.UpdateNumberOfDomainControllersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) UpdateNumberOfDomainControllersRequest(i0 *directoryservice.UpdateNumberOfDomainControllersInput) (r0 *request.Request, r1 *directoryservice.UpdateNumberOfDomainControllersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateNumberOfDomainControllersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.UpdateNumberOfDomainControllersOutput)
	return
}

func (d *DirectoryServiceDouble) UpdateNumberOfDomainControllersWithContext(i0 context.Context, i1 *directoryservice.UpdateNumberOfDomainControllersInput, i2 ...request.Option) (r0 *directoryservice.UpdateNumberOfDomainControllersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateNumberOfDomainControllersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.UpdateNumberOfDomainControllersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeUpdateNumberOfDomainControllersWithContext(ctx context.Context, in *directoryservice.UpdateNumberOfDomainControllersInput, _ ...request.Option) (*directoryservice.UpdateNumberOfDomainControllersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateNumberOfDomainControllers cancelled", ctx.Err())
	default:
		return d.UpdateNumberOfDomainControllers(in)
	}
}

func (d *DirectoryServiceDouble) UpdateRadius(i0 *directoryservice.UpdateRadiusInput) (r0 *directoryservice.UpdateRadiusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRadius", i0)
	r0, _ = returns[0].(*directoryservice.UpdateRadiusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) UpdateRadiusRequest(i0 *directoryservice.UpdateRadiusInput) (r0 *request.Request, r1 *directoryservice.UpdateRadiusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRadiusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.UpdateRadiusOutput)
	return
}

func (d *DirectoryServiceDouble) UpdateRadiusWithContext(i0 context.Context, i1 *directoryservice.UpdateRadiusInput, i2 ...request.Option) (r0 *directoryservice.UpdateRadiusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRadiusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.UpdateRadiusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeUpdateRadiusWithContext(ctx context.Context, in *directoryservice.UpdateRadiusInput, _ ...request.Option) (*directoryservice.UpdateRadiusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateRadius cancelled", ctx.Err())
	default:
		return d.UpdateRadius(in)
	}
}

func (d *DirectoryServiceDouble) UpdateTrust(i0 *directoryservice.UpdateTrustInput) (r0 *directoryservice.UpdateTrustOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTrust", i0)
	r0, _ = returns[0].(*directoryservice.UpdateTrustOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) UpdateTrustRequest(i0 *directoryservice.UpdateTrustInput) (r0 *request.Request, r1 *directoryservice.UpdateTrustOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTrustRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.UpdateTrustOutput)
	return
}

func (d *DirectoryServiceDouble) UpdateTrustWithContext(i0 context.Context, i1 *directoryservice.UpdateTrustInput, i2 ...request.Option) (r0 *directoryservice.UpdateTrustOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTrustWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.UpdateTrustOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeUpdateTrustWithContext(ctx context.Context, in *directoryservice.UpdateTrustInput, _ ...request.Option) (*directoryservice.UpdateTrustOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateTrust cancelled", ctx.Err())
	default:
		return d.UpdateTrust(in)
	}
}

func (d *DirectoryServiceDouble) VerifyTrust(i0 *directoryservice.VerifyTrustInput) (r0 *directoryservice.VerifyTrustOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("VerifyTrust", i0)
	r0, _ = returns[0].(*directoryservice.VerifyTrustOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) VerifyTrustRequest(i0 *directoryservice.VerifyTrustInput) (r0 *request.Request, r1 *directoryservice.VerifyTrustOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("VerifyTrustRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directoryservice.VerifyTrustOutput)
	return
}

func (d *DirectoryServiceDouble) VerifyTrustWithContext(i0 context.Context, i1 *directoryservice.VerifyTrustInput, i2 ...request.Option) (r0 *directoryservice.VerifyTrustOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("VerifyTrustWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directoryservice.VerifyTrustOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectoryServiceDouble) fakeVerifyTrustWithContext(ctx context.Context, in *directoryservice.VerifyTrustInput, _ ...request.Option) (*directoryservice.VerifyTrustOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "VerifyTrust cancelled", ctx.Err())
	default:
		return d.VerifyTrust(in)
	}
}
