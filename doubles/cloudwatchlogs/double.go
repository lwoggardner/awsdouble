// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:11:44+11:00

// Package cloudwatchlogsdouble provides a TestDouble implementation of cloudwatchlogsiface.CloudWatchLogsAPI
package cloudwatchlogsdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/cloudwatchlogs"
	"github.com/aws/aws-sdk-go/service/cloudwatchlogs/cloudwatchlogsiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// CloudWatchLogsDouble is TestDouble for cloudwatchlogsiface.CloudWatchLogsAPI
type CloudWatchLogsDouble struct {
	cloudwatchlogsiface.CloudWatchLogsAPI
	*awsdouble.AWSTestDouble
}

// Constructor for CloudWatchLogsDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *CloudWatchLogsDouble {
	result := &CloudWatchLogsDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*cloudwatchlogsiface.CloudWatchLogsAPI)(nil), configurators...)
	return result
}

func (d *CloudWatchLogsDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *CloudWatchLogsDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AssociateKmsKeyWithContext":
		return m.Fake(d.fakeAssociateKmsKeyWithContext)

	case "CancelExportTaskWithContext":
		return m.Fake(d.fakeCancelExportTaskWithContext)

	case "CreateExportTaskWithContext":
		return m.Fake(d.fakeCreateExportTaskWithContext)

	case "CreateLogGroupWithContext":
		return m.Fake(d.fakeCreateLogGroupWithContext)

	case "CreateLogStreamWithContext":
		return m.Fake(d.fakeCreateLogStreamWithContext)

	case "DeleteDestinationWithContext":
		return m.Fake(d.fakeDeleteDestinationWithContext)

	case "DeleteLogGroupWithContext":
		return m.Fake(d.fakeDeleteLogGroupWithContext)

	case "DeleteLogStreamWithContext":
		return m.Fake(d.fakeDeleteLogStreamWithContext)

	case "DeleteMetricFilterWithContext":
		return m.Fake(d.fakeDeleteMetricFilterWithContext)

	case "DeleteResourcePolicyWithContext":
		return m.Fake(d.fakeDeleteResourcePolicyWithContext)

	case "DeleteRetentionPolicyWithContext":
		return m.Fake(d.fakeDeleteRetentionPolicyWithContext)

	case "DeleteSubscriptionFilterWithContext":
		return m.Fake(d.fakeDeleteSubscriptionFilterWithContext)

	case "DescribeDestinationsPages":
		return m.Fake(d.fakeDescribeDestinationsPages)

	case "DescribeDestinationsPagesWithContext":
		return m.Fake(d.fakeDescribeDestinationsPagesWithContext)

	case "DescribeDestinationsWithContext":
		return m.Fake(d.fakeDescribeDestinationsWithContext)

	case "DescribeExportTasksWithContext":
		return m.Fake(d.fakeDescribeExportTasksWithContext)

	case "DescribeLogGroupsPages":
		return m.Fake(d.fakeDescribeLogGroupsPages)

	case "DescribeLogGroupsPagesWithContext":
		return m.Fake(d.fakeDescribeLogGroupsPagesWithContext)

	case "DescribeLogGroupsWithContext":
		return m.Fake(d.fakeDescribeLogGroupsWithContext)

	case "DescribeLogStreamsPages":
		return m.Fake(d.fakeDescribeLogStreamsPages)

	case "DescribeLogStreamsPagesWithContext":
		return m.Fake(d.fakeDescribeLogStreamsPagesWithContext)

	case "DescribeLogStreamsWithContext":
		return m.Fake(d.fakeDescribeLogStreamsWithContext)

	case "DescribeMetricFiltersPages":
		return m.Fake(d.fakeDescribeMetricFiltersPages)

	case "DescribeMetricFiltersPagesWithContext":
		return m.Fake(d.fakeDescribeMetricFiltersPagesWithContext)

	case "DescribeMetricFiltersWithContext":
		return m.Fake(d.fakeDescribeMetricFiltersWithContext)

	case "DescribeQueriesWithContext":
		return m.Fake(d.fakeDescribeQueriesWithContext)

	case "DescribeResourcePoliciesWithContext":
		return m.Fake(d.fakeDescribeResourcePoliciesWithContext)

	case "DescribeSubscriptionFiltersPages":
		return m.Fake(d.fakeDescribeSubscriptionFiltersPages)

	case "DescribeSubscriptionFiltersPagesWithContext":
		return m.Fake(d.fakeDescribeSubscriptionFiltersPagesWithContext)

	case "DescribeSubscriptionFiltersWithContext":
		return m.Fake(d.fakeDescribeSubscriptionFiltersWithContext)

	case "DisassociateKmsKeyWithContext":
		return m.Fake(d.fakeDisassociateKmsKeyWithContext)

	case "FilterLogEventsPages":
		return m.Fake(d.fakeFilterLogEventsPages)

	case "FilterLogEventsPagesWithContext":
		return m.Fake(d.fakeFilterLogEventsPagesWithContext)

	case "FilterLogEventsWithContext":
		return m.Fake(d.fakeFilterLogEventsWithContext)

	case "GetLogEventsPages":
		return m.Fake(d.fakeGetLogEventsPages)

	case "GetLogEventsPagesWithContext":
		return m.Fake(d.fakeGetLogEventsPagesWithContext)

	case "GetLogEventsWithContext":
		return m.Fake(d.fakeGetLogEventsWithContext)

	case "GetLogGroupFieldsWithContext":
		return m.Fake(d.fakeGetLogGroupFieldsWithContext)

	case "GetLogRecordWithContext":
		return m.Fake(d.fakeGetLogRecordWithContext)

	case "GetQueryResultsWithContext":
		return m.Fake(d.fakeGetQueryResultsWithContext)

	case "ListTagsLogGroupWithContext":
		return m.Fake(d.fakeListTagsLogGroupWithContext)

	case "PutDestinationPolicyWithContext":
		return m.Fake(d.fakePutDestinationPolicyWithContext)

	case "PutDestinationWithContext":
		return m.Fake(d.fakePutDestinationWithContext)

	case "PutLogEventsWithContext":
		return m.Fake(d.fakePutLogEventsWithContext)

	case "PutMetricFilterWithContext":
		return m.Fake(d.fakePutMetricFilterWithContext)

	case "PutResourcePolicyWithContext":
		return m.Fake(d.fakePutResourcePolicyWithContext)

	case "PutRetentionPolicyWithContext":
		return m.Fake(d.fakePutRetentionPolicyWithContext)

	case "PutSubscriptionFilterWithContext":
		return m.Fake(d.fakePutSubscriptionFilterWithContext)

	case "StartQueryWithContext":
		return m.Fake(d.fakeStartQueryWithContext)

	case "StopQueryWithContext":
		return m.Fake(d.fakeStopQueryWithContext)

	case "TagLogGroupWithContext":
		return m.Fake(d.fakeTagLogGroupWithContext)

	case "TestMetricFilterWithContext":
		return m.Fake(d.fakeTestMetricFilterWithContext)

	case "UntagLogGroupWithContext":
		return m.Fake(d.fakeUntagLogGroupWithContext)

	default:
		return nil
	}
}

func (d *CloudWatchLogsDouble) AssociateKmsKey(i0 *cloudwatchlogs.AssociateKmsKeyInput) (r0 *cloudwatchlogs.AssociateKmsKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateKmsKey", i0)
	r0, _ = returns[0].(*cloudwatchlogs.AssociateKmsKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) AssociateKmsKeyRequest(i0 *cloudwatchlogs.AssociateKmsKeyInput) (r0 *request.Request, r1 *cloudwatchlogs.AssociateKmsKeyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateKmsKeyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.AssociateKmsKeyOutput)
	return
}

func (d *CloudWatchLogsDouble) AssociateKmsKeyWithContext(i0 context.Context, i1 *cloudwatchlogs.AssociateKmsKeyInput, i2 ...request.Option) (r0 *cloudwatchlogs.AssociateKmsKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateKmsKeyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.AssociateKmsKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeAssociateKmsKeyWithContext(ctx context.Context, in *cloudwatchlogs.AssociateKmsKeyInput, _ ...request.Option) (*cloudwatchlogs.AssociateKmsKeyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateKmsKey cancelled", ctx.Err())
	default:
		return d.AssociateKmsKey(in)
	}
}

func (d *CloudWatchLogsDouble) CancelExportTask(i0 *cloudwatchlogs.CancelExportTaskInput) (r0 *cloudwatchlogs.CancelExportTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelExportTask", i0)
	r0, _ = returns[0].(*cloudwatchlogs.CancelExportTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) CancelExportTaskRequest(i0 *cloudwatchlogs.CancelExportTaskInput) (r0 *request.Request, r1 *cloudwatchlogs.CancelExportTaskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelExportTaskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.CancelExportTaskOutput)
	return
}

func (d *CloudWatchLogsDouble) CancelExportTaskWithContext(i0 context.Context, i1 *cloudwatchlogs.CancelExportTaskInput, i2 ...request.Option) (r0 *cloudwatchlogs.CancelExportTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelExportTaskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.CancelExportTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeCancelExportTaskWithContext(ctx context.Context, in *cloudwatchlogs.CancelExportTaskInput, _ ...request.Option) (*cloudwatchlogs.CancelExportTaskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelExportTask cancelled", ctx.Err())
	default:
		return d.CancelExportTask(in)
	}
}

func (d *CloudWatchLogsDouble) CreateExportTask(i0 *cloudwatchlogs.CreateExportTaskInput) (r0 *cloudwatchlogs.CreateExportTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateExportTask", i0)
	r0, _ = returns[0].(*cloudwatchlogs.CreateExportTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) CreateExportTaskRequest(i0 *cloudwatchlogs.CreateExportTaskInput) (r0 *request.Request, r1 *cloudwatchlogs.CreateExportTaskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateExportTaskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.CreateExportTaskOutput)
	return
}

func (d *CloudWatchLogsDouble) CreateExportTaskWithContext(i0 context.Context, i1 *cloudwatchlogs.CreateExportTaskInput, i2 ...request.Option) (r0 *cloudwatchlogs.CreateExportTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateExportTaskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.CreateExportTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeCreateExportTaskWithContext(ctx context.Context, in *cloudwatchlogs.CreateExportTaskInput, _ ...request.Option) (*cloudwatchlogs.CreateExportTaskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateExportTask cancelled", ctx.Err())
	default:
		return d.CreateExportTask(in)
	}
}

func (d *CloudWatchLogsDouble) CreateLogGroup(i0 *cloudwatchlogs.CreateLogGroupInput) (r0 *cloudwatchlogs.CreateLogGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLogGroup", i0)
	r0, _ = returns[0].(*cloudwatchlogs.CreateLogGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) CreateLogGroupRequest(i0 *cloudwatchlogs.CreateLogGroupInput) (r0 *request.Request, r1 *cloudwatchlogs.CreateLogGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLogGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.CreateLogGroupOutput)
	return
}

func (d *CloudWatchLogsDouble) CreateLogGroupWithContext(i0 context.Context, i1 *cloudwatchlogs.CreateLogGroupInput, i2 ...request.Option) (r0 *cloudwatchlogs.CreateLogGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLogGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.CreateLogGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeCreateLogGroupWithContext(ctx context.Context, in *cloudwatchlogs.CreateLogGroupInput, _ ...request.Option) (*cloudwatchlogs.CreateLogGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateLogGroup cancelled", ctx.Err())
	default:
		return d.CreateLogGroup(in)
	}
}

func (d *CloudWatchLogsDouble) CreateLogStream(i0 *cloudwatchlogs.CreateLogStreamInput) (r0 *cloudwatchlogs.CreateLogStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLogStream", i0)
	r0, _ = returns[0].(*cloudwatchlogs.CreateLogStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) CreateLogStreamRequest(i0 *cloudwatchlogs.CreateLogStreamInput) (r0 *request.Request, r1 *cloudwatchlogs.CreateLogStreamOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLogStreamRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.CreateLogStreamOutput)
	return
}

func (d *CloudWatchLogsDouble) CreateLogStreamWithContext(i0 context.Context, i1 *cloudwatchlogs.CreateLogStreamInput, i2 ...request.Option) (r0 *cloudwatchlogs.CreateLogStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLogStreamWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.CreateLogStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeCreateLogStreamWithContext(ctx context.Context, in *cloudwatchlogs.CreateLogStreamInput, _ ...request.Option) (*cloudwatchlogs.CreateLogStreamOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateLogStream cancelled", ctx.Err())
	default:
		return d.CreateLogStream(in)
	}
}

func (d *CloudWatchLogsDouble) DeleteDestination(i0 *cloudwatchlogs.DeleteDestinationInput) (r0 *cloudwatchlogs.DeleteDestinationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDestination", i0)
	r0, _ = returns[0].(*cloudwatchlogs.DeleteDestinationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) DeleteDestinationRequest(i0 *cloudwatchlogs.DeleteDestinationInput) (r0 *request.Request, r1 *cloudwatchlogs.DeleteDestinationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDestinationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.DeleteDestinationOutput)
	return
}

func (d *CloudWatchLogsDouble) DeleteDestinationWithContext(i0 context.Context, i1 *cloudwatchlogs.DeleteDestinationInput, i2 ...request.Option) (r0 *cloudwatchlogs.DeleteDestinationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDestinationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.DeleteDestinationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeDeleteDestinationWithContext(ctx context.Context, in *cloudwatchlogs.DeleteDestinationInput, _ ...request.Option) (*cloudwatchlogs.DeleteDestinationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDestination cancelled", ctx.Err())
	default:
		return d.DeleteDestination(in)
	}
}

func (d *CloudWatchLogsDouble) DeleteLogGroup(i0 *cloudwatchlogs.DeleteLogGroupInput) (r0 *cloudwatchlogs.DeleteLogGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLogGroup", i0)
	r0, _ = returns[0].(*cloudwatchlogs.DeleteLogGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) DeleteLogGroupRequest(i0 *cloudwatchlogs.DeleteLogGroupInput) (r0 *request.Request, r1 *cloudwatchlogs.DeleteLogGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLogGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.DeleteLogGroupOutput)
	return
}

func (d *CloudWatchLogsDouble) DeleteLogGroupWithContext(i0 context.Context, i1 *cloudwatchlogs.DeleteLogGroupInput, i2 ...request.Option) (r0 *cloudwatchlogs.DeleteLogGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLogGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.DeleteLogGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeDeleteLogGroupWithContext(ctx context.Context, in *cloudwatchlogs.DeleteLogGroupInput, _ ...request.Option) (*cloudwatchlogs.DeleteLogGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteLogGroup cancelled", ctx.Err())
	default:
		return d.DeleteLogGroup(in)
	}
}

func (d *CloudWatchLogsDouble) DeleteLogStream(i0 *cloudwatchlogs.DeleteLogStreamInput) (r0 *cloudwatchlogs.DeleteLogStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLogStream", i0)
	r0, _ = returns[0].(*cloudwatchlogs.DeleteLogStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) DeleteLogStreamRequest(i0 *cloudwatchlogs.DeleteLogStreamInput) (r0 *request.Request, r1 *cloudwatchlogs.DeleteLogStreamOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLogStreamRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.DeleteLogStreamOutput)
	return
}

func (d *CloudWatchLogsDouble) DeleteLogStreamWithContext(i0 context.Context, i1 *cloudwatchlogs.DeleteLogStreamInput, i2 ...request.Option) (r0 *cloudwatchlogs.DeleteLogStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLogStreamWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.DeleteLogStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeDeleteLogStreamWithContext(ctx context.Context, in *cloudwatchlogs.DeleteLogStreamInput, _ ...request.Option) (*cloudwatchlogs.DeleteLogStreamOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteLogStream cancelled", ctx.Err())
	default:
		return d.DeleteLogStream(in)
	}
}

func (d *CloudWatchLogsDouble) DeleteMetricFilter(i0 *cloudwatchlogs.DeleteMetricFilterInput) (r0 *cloudwatchlogs.DeleteMetricFilterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMetricFilter", i0)
	r0, _ = returns[0].(*cloudwatchlogs.DeleteMetricFilterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) DeleteMetricFilterRequest(i0 *cloudwatchlogs.DeleteMetricFilterInput) (r0 *request.Request, r1 *cloudwatchlogs.DeleteMetricFilterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMetricFilterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.DeleteMetricFilterOutput)
	return
}

func (d *CloudWatchLogsDouble) DeleteMetricFilterWithContext(i0 context.Context, i1 *cloudwatchlogs.DeleteMetricFilterInput, i2 ...request.Option) (r0 *cloudwatchlogs.DeleteMetricFilterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMetricFilterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.DeleteMetricFilterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeDeleteMetricFilterWithContext(ctx context.Context, in *cloudwatchlogs.DeleteMetricFilterInput, _ ...request.Option) (*cloudwatchlogs.DeleteMetricFilterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteMetricFilter cancelled", ctx.Err())
	default:
		return d.DeleteMetricFilter(in)
	}
}

func (d *CloudWatchLogsDouble) DeleteResourcePolicy(i0 *cloudwatchlogs.DeleteResourcePolicyInput) (r0 *cloudwatchlogs.DeleteResourcePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResourcePolicy", i0)
	r0, _ = returns[0].(*cloudwatchlogs.DeleteResourcePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) DeleteResourcePolicyRequest(i0 *cloudwatchlogs.DeleteResourcePolicyInput) (r0 *request.Request, r1 *cloudwatchlogs.DeleteResourcePolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResourcePolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.DeleteResourcePolicyOutput)
	return
}

func (d *CloudWatchLogsDouble) DeleteResourcePolicyWithContext(i0 context.Context, i1 *cloudwatchlogs.DeleteResourcePolicyInput, i2 ...request.Option) (r0 *cloudwatchlogs.DeleteResourcePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResourcePolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.DeleteResourcePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeDeleteResourcePolicyWithContext(ctx context.Context, in *cloudwatchlogs.DeleteResourcePolicyInput, _ ...request.Option) (*cloudwatchlogs.DeleteResourcePolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteResourcePolicy cancelled", ctx.Err())
	default:
		return d.DeleteResourcePolicy(in)
	}
}

func (d *CloudWatchLogsDouble) DeleteRetentionPolicy(i0 *cloudwatchlogs.DeleteRetentionPolicyInput) (r0 *cloudwatchlogs.DeleteRetentionPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRetentionPolicy", i0)
	r0, _ = returns[0].(*cloudwatchlogs.DeleteRetentionPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) DeleteRetentionPolicyRequest(i0 *cloudwatchlogs.DeleteRetentionPolicyInput) (r0 *request.Request, r1 *cloudwatchlogs.DeleteRetentionPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRetentionPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.DeleteRetentionPolicyOutput)
	return
}

func (d *CloudWatchLogsDouble) DeleteRetentionPolicyWithContext(i0 context.Context, i1 *cloudwatchlogs.DeleteRetentionPolicyInput, i2 ...request.Option) (r0 *cloudwatchlogs.DeleteRetentionPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRetentionPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.DeleteRetentionPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeDeleteRetentionPolicyWithContext(ctx context.Context, in *cloudwatchlogs.DeleteRetentionPolicyInput, _ ...request.Option) (*cloudwatchlogs.DeleteRetentionPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRetentionPolicy cancelled", ctx.Err())
	default:
		return d.DeleteRetentionPolicy(in)
	}
}

func (d *CloudWatchLogsDouble) DeleteSubscriptionFilter(i0 *cloudwatchlogs.DeleteSubscriptionFilterInput) (r0 *cloudwatchlogs.DeleteSubscriptionFilterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSubscriptionFilter", i0)
	r0, _ = returns[0].(*cloudwatchlogs.DeleteSubscriptionFilterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) DeleteSubscriptionFilterRequest(i0 *cloudwatchlogs.DeleteSubscriptionFilterInput) (r0 *request.Request, r1 *cloudwatchlogs.DeleteSubscriptionFilterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSubscriptionFilterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.DeleteSubscriptionFilterOutput)
	return
}

func (d *CloudWatchLogsDouble) DeleteSubscriptionFilterWithContext(i0 context.Context, i1 *cloudwatchlogs.DeleteSubscriptionFilterInput, i2 ...request.Option) (r0 *cloudwatchlogs.DeleteSubscriptionFilterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSubscriptionFilterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.DeleteSubscriptionFilterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeDeleteSubscriptionFilterWithContext(ctx context.Context, in *cloudwatchlogs.DeleteSubscriptionFilterInput, _ ...request.Option) (*cloudwatchlogs.DeleteSubscriptionFilterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteSubscriptionFilter cancelled", ctx.Err())
	default:
		return d.DeleteSubscriptionFilter(in)
	}
}

func (d *CloudWatchLogsDouble) DescribeDestinations(i0 *cloudwatchlogs.DescribeDestinationsInput) (r0 *cloudwatchlogs.DescribeDestinationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDestinations", i0)
	r0, _ = returns[0].(*cloudwatchlogs.DescribeDestinationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) DescribeDestinationsPages(i0 *cloudwatchlogs.DescribeDestinationsInput, i1 func(*cloudwatchlogs.DescribeDestinationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDestinationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeDescribeDestinationsPages(in *cloudwatchlogs.DescribeDestinationsInput, pager func(*cloudwatchlogs.DescribeDestinationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeDestinations", paginators, in, pager)
}

func (d *CloudWatchLogsDouble) DescribeDestinationsPagesWithContext(i0 context.Context, i1 *cloudwatchlogs.DescribeDestinationsInput, i2 func(*cloudwatchlogs.DescribeDestinationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDestinationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeDescribeDestinationsPagesWithContext(ctx context.Context, in *cloudwatchlogs.DescribeDestinationsInput, pager func(*cloudwatchlogs.DescribeDestinationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeDestinations", paginators, ctx, in, pager, options...)
}

func (d *CloudWatchLogsDouble) DescribeDestinationsRequest(i0 *cloudwatchlogs.DescribeDestinationsInput) (r0 *request.Request, r1 *cloudwatchlogs.DescribeDestinationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDestinationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.DescribeDestinationsOutput)
	return
}

func (d *CloudWatchLogsDouble) DescribeDestinationsWithContext(i0 context.Context, i1 *cloudwatchlogs.DescribeDestinationsInput, i2 ...request.Option) (r0 *cloudwatchlogs.DescribeDestinationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDestinationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.DescribeDestinationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeDescribeDestinationsWithContext(ctx context.Context, in *cloudwatchlogs.DescribeDestinationsInput, _ ...request.Option) (*cloudwatchlogs.DescribeDestinationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDestinations cancelled", ctx.Err())
	default:
		return d.DescribeDestinations(in)
	}
}

func (d *CloudWatchLogsDouble) DescribeExportTasks(i0 *cloudwatchlogs.DescribeExportTasksInput) (r0 *cloudwatchlogs.DescribeExportTasksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeExportTasks", i0)
	r0, _ = returns[0].(*cloudwatchlogs.DescribeExportTasksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) DescribeExportTasksRequest(i0 *cloudwatchlogs.DescribeExportTasksInput) (r0 *request.Request, r1 *cloudwatchlogs.DescribeExportTasksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeExportTasksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.DescribeExportTasksOutput)
	return
}

func (d *CloudWatchLogsDouble) DescribeExportTasksWithContext(i0 context.Context, i1 *cloudwatchlogs.DescribeExportTasksInput, i2 ...request.Option) (r0 *cloudwatchlogs.DescribeExportTasksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeExportTasksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.DescribeExportTasksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeDescribeExportTasksWithContext(ctx context.Context, in *cloudwatchlogs.DescribeExportTasksInput, _ ...request.Option) (*cloudwatchlogs.DescribeExportTasksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeExportTasks cancelled", ctx.Err())
	default:
		return d.DescribeExportTasks(in)
	}
}

func (d *CloudWatchLogsDouble) DescribeLogGroups(i0 *cloudwatchlogs.DescribeLogGroupsInput) (r0 *cloudwatchlogs.DescribeLogGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLogGroups", i0)
	r0, _ = returns[0].(*cloudwatchlogs.DescribeLogGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) DescribeLogGroupsPages(i0 *cloudwatchlogs.DescribeLogGroupsInput, i1 func(*cloudwatchlogs.DescribeLogGroupsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLogGroupsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeDescribeLogGroupsPages(in *cloudwatchlogs.DescribeLogGroupsInput, pager func(*cloudwatchlogs.DescribeLogGroupsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeLogGroups", paginators, in, pager)
}

func (d *CloudWatchLogsDouble) DescribeLogGroupsPagesWithContext(i0 context.Context, i1 *cloudwatchlogs.DescribeLogGroupsInput, i2 func(*cloudwatchlogs.DescribeLogGroupsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLogGroupsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeDescribeLogGroupsPagesWithContext(ctx context.Context, in *cloudwatchlogs.DescribeLogGroupsInput, pager func(*cloudwatchlogs.DescribeLogGroupsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeLogGroups", paginators, ctx, in, pager, options...)
}

func (d *CloudWatchLogsDouble) DescribeLogGroupsRequest(i0 *cloudwatchlogs.DescribeLogGroupsInput) (r0 *request.Request, r1 *cloudwatchlogs.DescribeLogGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLogGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.DescribeLogGroupsOutput)
	return
}

func (d *CloudWatchLogsDouble) DescribeLogGroupsWithContext(i0 context.Context, i1 *cloudwatchlogs.DescribeLogGroupsInput, i2 ...request.Option) (r0 *cloudwatchlogs.DescribeLogGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLogGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.DescribeLogGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeDescribeLogGroupsWithContext(ctx context.Context, in *cloudwatchlogs.DescribeLogGroupsInput, _ ...request.Option) (*cloudwatchlogs.DescribeLogGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeLogGroups cancelled", ctx.Err())
	default:
		return d.DescribeLogGroups(in)
	}
}

func (d *CloudWatchLogsDouble) DescribeLogStreams(i0 *cloudwatchlogs.DescribeLogStreamsInput) (r0 *cloudwatchlogs.DescribeLogStreamsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLogStreams", i0)
	r0, _ = returns[0].(*cloudwatchlogs.DescribeLogStreamsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) DescribeLogStreamsPages(i0 *cloudwatchlogs.DescribeLogStreamsInput, i1 func(*cloudwatchlogs.DescribeLogStreamsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLogStreamsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeDescribeLogStreamsPages(in *cloudwatchlogs.DescribeLogStreamsInput, pager func(*cloudwatchlogs.DescribeLogStreamsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeLogStreams", paginators, in, pager)
}

func (d *CloudWatchLogsDouble) DescribeLogStreamsPagesWithContext(i0 context.Context, i1 *cloudwatchlogs.DescribeLogStreamsInput, i2 func(*cloudwatchlogs.DescribeLogStreamsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLogStreamsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeDescribeLogStreamsPagesWithContext(ctx context.Context, in *cloudwatchlogs.DescribeLogStreamsInput, pager func(*cloudwatchlogs.DescribeLogStreamsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeLogStreams", paginators, ctx, in, pager, options...)
}

func (d *CloudWatchLogsDouble) DescribeLogStreamsRequest(i0 *cloudwatchlogs.DescribeLogStreamsInput) (r0 *request.Request, r1 *cloudwatchlogs.DescribeLogStreamsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLogStreamsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.DescribeLogStreamsOutput)
	return
}

func (d *CloudWatchLogsDouble) DescribeLogStreamsWithContext(i0 context.Context, i1 *cloudwatchlogs.DescribeLogStreamsInput, i2 ...request.Option) (r0 *cloudwatchlogs.DescribeLogStreamsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLogStreamsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.DescribeLogStreamsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeDescribeLogStreamsWithContext(ctx context.Context, in *cloudwatchlogs.DescribeLogStreamsInput, _ ...request.Option) (*cloudwatchlogs.DescribeLogStreamsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeLogStreams cancelled", ctx.Err())
	default:
		return d.DescribeLogStreams(in)
	}
}

func (d *CloudWatchLogsDouble) DescribeMetricFilters(i0 *cloudwatchlogs.DescribeMetricFiltersInput) (r0 *cloudwatchlogs.DescribeMetricFiltersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMetricFilters", i0)
	r0, _ = returns[0].(*cloudwatchlogs.DescribeMetricFiltersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) DescribeMetricFiltersPages(i0 *cloudwatchlogs.DescribeMetricFiltersInput, i1 func(*cloudwatchlogs.DescribeMetricFiltersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMetricFiltersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeDescribeMetricFiltersPages(in *cloudwatchlogs.DescribeMetricFiltersInput, pager func(*cloudwatchlogs.DescribeMetricFiltersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeMetricFilters", paginators, in, pager)
}

func (d *CloudWatchLogsDouble) DescribeMetricFiltersPagesWithContext(i0 context.Context, i1 *cloudwatchlogs.DescribeMetricFiltersInput, i2 func(*cloudwatchlogs.DescribeMetricFiltersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMetricFiltersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeDescribeMetricFiltersPagesWithContext(ctx context.Context, in *cloudwatchlogs.DescribeMetricFiltersInput, pager func(*cloudwatchlogs.DescribeMetricFiltersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeMetricFilters", paginators, ctx, in, pager, options...)
}

func (d *CloudWatchLogsDouble) DescribeMetricFiltersRequest(i0 *cloudwatchlogs.DescribeMetricFiltersInput) (r0 *request.Request, r1 *cloudwatchlogs.DescribeMetricFiltersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMetricFiltersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.DescribeMetricFiltersOutput)
	return
}

func (d *CloudWatchLogsDouble) DescribeMetricFiltersWithContext(i0 context.Context, i1 *cloudwatchlogs.DescribeMetricFiltersInput, i2 ...request.Option) (r0 *cloudwatchlogs.DescribeMetricFiltersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMetricFiltersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.DescribeMetricFiltersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeDescribeMetricFiltersWithContext(ctx context.Context, in *cloudwatchlogs.DescribeMetricFiltersInput, _ ...request.Option) (*cloudwatchlogs.DescribeMetricFiltersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeMetricFilters cancelled", ctx.Err())
	default:
		return d.DescribeMetricFilters(in)
	}
}

func (d *CloudWatchLogsDouble) DescribeQueries(i0 *cloudwatchlogs.DescribeQueriesInput) (r0 *cloudwatchlogs.DescribeQueriesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeQueries", i0)
	r0, _ = returns[0].(*cloudwatchlogs.DescribeQueriesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) DescribeQueriesRequest(i0 *cloudwatchlogs.DescribeQueriesInput) (r0 *request.Request, r1 *cloudwatchlogs.DescribeQueriesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeQueriesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.DescribeQueriesOutput)
	return
}

func (d *CloudWatchLogsDouble) DescribeQueriesWithContext(i0 context.Context, i1 *cloudwatchlogs.DescribeQueriesInput, i2 ...request.Option) (r0 *cloudwatchlogs.DescribeQueriesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeQueriesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.DescribeQueriesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeDescribeQueriesWithContext(ctx context.Context, in *cloudwatchlogs.DescribeQueriesInput, _ ...request.Option) (*cloudwatchlogs.DescribeQueriesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeQueries cancelled", ctx.Err())
	default:
		return d.DescribeQueries(in)
	}
}

func (d *CloudWatchLogsDouble) DescribeResourcePolicies(i0 *cloudwatchlogs.DescribeResourcePoliciesInput) (r0 *cloudwatchlogs.DescribeResourcePoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeResourcePolicies", i0)
	r0, _ = returns[0].(*cloudwatchlogs.DescribeResourcePoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) DescribeResourcePoliciesRequest(i0 *cloudwatchlogs.DescribeResourcePoliciesInput) (r0 *request.Request, r1 *cloudwatchlogs.DescribeResourcePoliciesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeResourcePoliciesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.DescribeResourcePoliciesOutput)
	return
}

func (d *CloudWatchLogsDouble) DescribeResourcePoliciesWithContext(i0 context.Context, i1 *cloudwatchlogs.DescribeResourcePoliciesInput, i2 ...request.Option) (r0 *cloudwatchlogs.DescribeResourcePoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeResourcePoliciesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.DescribeResourcePoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeDescribeResourcePoliciesWithContext(ctx context.Context, in *cloudwatchlogs.DescribeResourcePoliciesInput, _ ...request.Option) (*cloudwatchlogs.DescribeResourcePoliciesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeResourcePolicies cancelled", ctx.Err())
	default:
		return d.DescribeResourcePolicies(in)
	}
}

func (d *CloudWatchLogsDouble) DescribeSubscriptionFilters(i0 *cloudwatchlogs.DescribeSubscriptionFiltersInput) (r0 *cloudwatchlogs.DescribeSubscriptionFiltersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSubscriptionFilters", i0)
	r0, _ = returns[0].(*cloudwatchlogs.DescribeSubscriptionFiltersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) DescribeSubscriptionFiltersPages(i0 *cloudwatchlogs.DescribeSubscriptionFiltersInput, i1 func(*cloudwatchlogs.DescribeSubscriptionFiltersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSubscriptionFiltersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeDescribeSubscriptionFiltersPages(in *cloudwatchlogs.DescribeSubscriptionFiltersInput, pager func(*cloudwatchlogs.DescribeSubscriptionFiltersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeSubscriptionFilters", paginators, in, pager)
}

func (d *CloudWatchLogsDouble) DescribeSubscriptionFiltersPagesWithContext(i0 context.Context, i1 *cloudwatchlogs.DescribeSubscriptionFiltersInput, i2 func(*cloudwatchlogs.DescribeSubscriptionFiltersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSubscriptionFiltersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeDescribeSubscriptionFiltersPagesWithContext(ctx context.Context, in *cloudwatchlogs.DescribeSubscriptionFiltersInput, pager func(*cloudwatchlogs.DescribeSubscriptionFiltersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeSubscriptionFilters", paginators, ctx, in, pager, options...)
}

func (d *CloudWatchLogsDouble) DescribeSubscriptionFiltersRequest(i0 *cloudwatchlogs.DescribeSubscriptionFiltersInput) (r0 *request.Request, r1 *cloudwatchlogs.DescribeSubscriptionFiltersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSubscriptionFiltersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.DescribeSubscriptionFiltersOutput)
	return
}

func (d *CloudWatchLogsDouble) DescribeSubscriptionFiltersWithContext(i0 context.Context, i1 *cloudwatchlogs.DescribeSubscriptionFiltersInput, i2 ...request.Option) (r0 *cloudwatchlogs.DescribeSubscriptionFiltersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSubscriptionFiltersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.DescribeSubscriptionFiltersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeDescribeSubscriptionFiltersWithContext(ctx context.Context, in *cloudwatchlogs.DescribeSubscriptionFiltersInput, _ ...request.Option) (*cloudwatchlogs.DescribeSubscriptionFiltersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSubscriptionFilters cancelled", ctx.Err())
	default:
		return d.DescribeSubscriptionFilters(in)
	}
}

func (d *CloudWatchLogsDouble) DisassociateKmsKey(i0 *cloudwatchlogs.DisassociateKmsKeyInput) (r0 *cloudwatchlogs.DisassociateKmsKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateKmsKey", i0)
	r0, _ = returns[0].(*cloudwatchlogs.DisassociateKmsKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) DisassociateKmsKeyRequest(i0 *cloudwatchlogs.DisassociateKmsKeyInput) (r0 *request.Request, r1 *cloudwatchlogs.DisassociateKmsKeyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateKmsKeyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.DisassociateKmsKeyOutput)
	return
}

func (d *CloudWatchLogsDouble) DisassociateKmsKeyWithContext(i0 context.Context, i1 *cloudwatchlogs.DisassociateKmsKeyInput, i2 ...request.Option) (r0 *cloudwatchlogs.DisassociateKmsKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateKmsKeyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.DisassociateKmsKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeDisassociateKmsKeyWithContext(ctx context.Context, in *cloudwatchlogs.DisassociateKmsKeyInput, _ ...request.Option) (*cloudwatchlogs.DisassociateKmsKeyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateKmsKey cancelled", ctx.Err())
	default:
		return d.DisassociateKmsKey(in)
	}
}

func (d *CloudWatchLogsDouble) FilterLogEvents(i0 *cloudwatchlogs.FilterLogEventsInput) (r0 *cloudwatchlogs.FilterLogEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("FilterLogEvents", i0)
	r0, _ = returns[0].(*cloudwatchlogs.FilterLogEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) FilterLogEventsPages(i0 *cloudwatchlogs.FilterLogEventsInput, i1 func(*cloudwatchlogs.FilterLogEventsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("FilterLogEventsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeFilterLogEventsPages(in *cloudwatchlogs.FilterLogEventsInput, pager func(*cloudwatchlogs.FilterLogEventsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("FilterLogEvents", paginators, in, pager)
}

func (d *CloudWatchLogsDouble) FilterLogEventsPagesWithContext(i0 context.Context, i1 *cloudwatchlogs.FilterLogEventsInput, i2 func(*cloudwatchlogs.FilterLogEventsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("FilterLogEventsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeFilterLogEventsPagesWithContext(ctx context.Context, in *cloudwatchlogs.FilterLogEventsInput, pager func(*cloudwatchlogs.FilterLogEventsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("FilterLogEvents", paginators, ctx, in, pager, options...)
}

func (d *CloudWatchLogsDouble) FilterLogEventsRequest(i0 *cloudwatchlogs.FilterLogEventsInput) (r0 *request.Request, r1 *cloudwatchlogs.FilterLogEventsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("FilterLogEventsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.FilterLogEventsOutput)
	return
}

func (d *CloudWatchLogsDouble) FilterLogEventsWithContext(i0 context.Context, i1 *cloudwatchlogs.FilterLogEventsInput, i2 ...request.Option) (r0 *cloudwatchlogs.FilterLogEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("FilterLogEventsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.FilterLogEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeFilterLogEventsWithContext(ctx context.Context, in *cloudwatchlogs.FilterLogEventsInput, _ ...request.Option) (*cloudwatchlogs.FilterLogEventsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "FilterLogEvents cancelled", ctx.Err())
	default:
		return d.FilterLogEvents(in)
	}
}

func (d *CloudWatchLogsDouble) GetLogEvents(i0 *cloudwatchlogs.GetLogEventsInput) (r0 *cloudwatchlogs.GetLogEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLogEvents", i0)
	r0, _ = returns[0].(*cloudwatchlogs.GetLogEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) GetLogEventsPages(i0 *cloudwatchlogs.GetLogEventsInput, i1 func(*cloudwatchlogs.GetLogEventsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLogEventsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeGetLogEventsPages(in *cloudwatchlogs.GetLogEventsInput, pager func(*cloudwatchlogs.GetLogEventsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetLogEvents", paginators, in, pager)
}

func (d *CloudWatchLogsDouble) GetLogEventsPagesWithContext(i0 context.Context, i1 *cloudwatchlogs.GetLogEventsInput, i2 func(*cloudwatchlogs.GetLogEventsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLogEventsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeGetLogEventsPagesWithContext(ctx context.Context, in *cloudwatchlogs.GetLogEventsInput, pager func(*cloudwatchlogs.GetLogEventsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetLogEvents", paginators, ctx, in, pager, options...)
}

func (d *CloudWatchLogsDouble) GetLogEventsRequest(i0 *cloudwatchlogs.GetLogEventsInput) (r0 *request.Request, r1 *cloudwatchlogs.GetLogEventsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLogEventsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.GetLogEventsOutput)
	return
}

func (d *CloudWatchLogsDouble) GetLogEventsWithContext(i0 context.Context, i1 *cloudwatchlogs.GetLogEventsInput, i2 ...request.Option) (r0 *cloudwatchlogs.GetLogEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLogEventsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.GetLogEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeGetLogEventsWithContext(ctx context.Context, in *cloudwatchlogs.GetLogEventsInput, _ ...request.Option) (*cloudwatchlogs.GetLogEventsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetLogEvents cancelled", ctx.Err())
	default:
		return d.GetLogEvents(in)
	}
}

func (d *CloudWatchLogsDouble) GetLogGroupFields(i0 *cloudwatchlogs.GetLogGroupFieldsInput) (r0 *cloudwatchlogs.GetLogGroupFieldsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLogGroupFields", i0)
	r0, _ = returns[0].(*cloudwatchlogs.GetLogGroupFieldsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) GetLogGroupFieldsRequest(i0 *cloudwatchlogs.GetLogGroupFieldsInput) (r0 *request.Request, r1 *cloudwatchlogs.GetLogGroupFieldsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLogGroupFieldsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.GetLogGroupFieldsOutput)
	return
}

func (d *CloudWatchLogsDouble) GetLogGroupFieldsWithContext(i0 context.Context, i1 *cloudwatchlogs.GetLogGroupFieldsInput, i2 ...request.Option) (r0 *cloudwatchlogs.GetLogGroupFieldsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLogGroupFieldsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.GetLogGroupFieldsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeGetLogGroupFieldsWithContext(ctx context.Context, in *cloudwatchlogs.GetLogGroupFieldsInput, _ ...request.Option) (*cloudwatchlogs.GetLogGroupFieldsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetLogGroupFields cancelled", ctx.Err())
	default:
		return d.GetLogGroupFields(in)
	}
}

func (d *CloudWatchLogsDouble) GetLogRecord(i0 *cloudwatchlogs.GetLogRecordInput) (r0 *cloudwatchlogs.GetLogRecordOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLogRecord", i0)
	r0, _ = returns[0].(*cloudwatchlogs.GetLogRecordOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) GetLogRecordRequest(i0 *cloudwatchlogs.GetLogRecordInput) (r0 *request.Request, r1 *cloudwatchlogs.GetLogRecordOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLogRecordRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.GetLogRecordOutput)
	return
}

func (d *CloudWatchLogsDouble) GetLogRecordWithContext(i0 context.Context, i1 *cloudwatchlogs.GetLogRecordInput, i2 ...request.Option) (r0 *cloudwatchlogs.GetLogRecordOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLogRecordWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.GetLogRecordOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeGetLogRecordWithContext(ctx context.Context, in *cloudwatchlogs.GetLogRecordInput, _ ...request.Option) (*cloudwatchlogs.GetLogRecordOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetLogRecord cancelled", ctx.Err())
	default:
		return d.GetLogRecord(in)
	}
}

func (d *CloudWatchLogsDouble) GetQueryResults(i0 *cloudwatchlogs.GetQueryResultsInput) (r0 *cloudwatchlogs.GetQueryResultsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetQueryResults", i0)
	r0, _ = returns[0].(*cloudwatchlogs.GetQueryResultsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) GetQueryResultsRequest(i0 *cloudwatchlogs.GetQueryResultsInput) (r0 *request.Request, r1 *cloudwatchlogs.GetQueryResultsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetQueryResultsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.GetQueryResultsOutput)
	return
}

func (d *CloudWatchLogsDouble) GetQueryResultsWithContext(i0 context.Context, i1 *cloudwatchlogs.GetQueryResultsInput, i2 ...request.Option) (r0 *cloudwatchlogs.GetQueryResultsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetQueryResultsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.GetQueryResultsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeGetQueryResultsWithContext(ctx context.Context, in *cloudwatchlogs.GetQueryResultsInput, _ ...request.Option) (*cloudwatchlogs.GetQueryResultsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetQueryResults cancelled", ctx.Err())
	default:
		return d.GetQueryResults(in)
	}
}

func (d *CloudWatchLogsDouble) ListTagsLogGroup(i0 *cloudwatchlogs.ListTagsLogGroupInput) (r0 *cloudwatchlogs.ListTagsLogGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsLogGroup", i0)
	r0, _ = returns[0].(*cloudwatchlogs.ListTagsLogGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) ListTagsLogGroupRequest(i0 *cloudwatchlogs.ListTagsLogGroupInput) (r0 *request.Request, r1 *cloudwatchlogs.ListTagsLogGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsLogGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.ListTagsLogGroupOutput)
	return
}

func (d *CloudWatchLogsDouble) ListTagsLogGroupWithContext(i0 context.Context, i1 *cloudwatchlogs.ListTagsLogGroupInput, i2 ...request.Option) (r0 *cloudwatchlogs.ListTagsLogGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsLogGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.ListTagsLogGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeListTagsLogGroupWithContext(ctx context.Context, in *cloudwatchlogs.ListTagsLogGroupInput, _ ...request.Option) (*cloudwatchlogs.ListTagsLogGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsLogGroup cancelled", ctx.Err())
	default:
		return d.ListTagsLogGroup(in)
	}
}

func (d *CloudWatchLogsDouble) PutDestination(i0 *cloudwatchlogs.PutDestinationInput) (r0 *cloudwatchlogs.PutDestinationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutDestination", i0)
	r0, _ = returns[0].(*cloudwatchlogs.PutDestinationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) PutDestinationPolicy(i0 *cloudwatchlogs.PutDestinationPolicyInput) (r0 *cloudwatchlogs.PutDestinationPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutDestinationPolicy", i0)
	r0, _ = returns[0].(*cloudwatchlogs.PutDestinationPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) PutDestinationPolicyRequest(i0 *cloudwatchlogs.PutDestinationPolicyInput) (r0 *request.Request, r1 *cloudwatchlogs.PutDestinationPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutDestinationPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.PutDestinationPolicyOutput)
	return
}

func (d *CloudWatchLogsDouble) PutDestinationPolicyWithContext(i0 context.Context, i1 *cloudwatchlogs.PutDestinationPolicyInput, i2 ...request.Option) (r0 *cloudwatchlogs.PutDestinationPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutDestinationPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.PutDestinationPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakePutDestinationPolicyWithContext(ctx context.Context, in *cloudwatchlogs.PutDestinationPolicyInput, _ ...request.Option) (*cloudwatchlogs.PutDestinationPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutDestinationPolicy cancelled", ctx.Err())
	default:
		return d.PutDestinationPolicy(in)
	}
}

func (d *CloudWatchLogsDouble) PutDestinationRequest(i0 *cloudwatchlogs.PutDestinationInput) (r0 *request.Request, r1 *cloudwatchlogs.PutDestinationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutDestinationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.PutDestinationOutput)
	return
}

func (d *CloudWatchLogsDouble) PutDestinationWithContext(i0 context.Context, i1 *cloudwatchlogs.PutDestinationInput, i2 ...request.Option) (r0 *cloudwatchlogs.PutDestinationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutDestinationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.PutDestinationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakePutDestinationWithContext(ctx context.Context, in *cloudwatchlogs.PutDestinationInput, _ ...request.Option) (*cloudwatchlogs.PutDestinationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutDestination cancelled", ctx.Err())
	default:
		return d.PutDestination(in)
	}
}

func (d *CloudWatchLogsDouble) PutLogEvents(i0 *cloudwatchlogs.PutLogEventsInput) (r0 *cloudwatchlogs.PutLogEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutLogEvents", i0)
	r0, _ = returns[0].(*cloudwatchlogs.PutLogEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) PutLogEventsRequest(i0 *cloudwatchlogs.PutLogEventsInput) (r0 *request.Request, r1 *cloudwatchlogs.PutLogEventsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutLogEventsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.PutLogEventsOutput)
	return
}

func (d *CloudWatchLogsDouble) PutLogEventsWithContext(i0 context.Context, i1 *cloudwatchlogs.PutLogEventsInput, i2 ...request.Option) (r0 *cloudwatchlogs.PutLogEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutLogEventsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.PutLogEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakePutLogEventsWithContext(ctx context.Context, in *cloudwatchlogs.PutLogEventsInput, _ ...request.Option) (*cloudwatchlogs.PutLogEventsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutLogEvents cancelled", ctx.Err())
	default:
		return d.PutLogEvents(in)
	}
}

func (d *CloudWatchLogsDouble) PutMetricFilter(i0 *cloudwatchlogs.PutMetricFilterInput) (r0 *cloudwatchlogs.PutMetricFilterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutMetricFilter", i0)
	r0, _ = returns[0].(*cloudwatchlogs.PutMetricFilterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) PutMetricFilterRequest(i0 *cloudwatchlogs.PutMetricFilterInput) (r0 *request.Request, r1 *cloudwatchlogs.PutMetricFilterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutMetricFilterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.PutMetricFilterOutput)
	return
}

func (d *CloudWatchLogsDouble) PutMetricFilterWithContext(i0 context.Context, i1 *cloudwatchlogs.PutMetricFilterInput, i2 ...request.Option) (r0 *cloudwatchlogs.PutMetricFilterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutMetricFilterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.PutMetricFilterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakePutMetricFilterWithContext(ctx context.Context, in *cloudwatchlogs.PutMetricFilterInput, _ ...request.Option) (*cloudwatchlogs.PutMetricFilterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutMetricFilter cancelled", ctx.Err())
	default:
		return d.PutMetricFilter(in)
	}
}

func (d *CloudWatchLogsDouble) PutResourcePolicy(i0 *cloudwatchlogs.PutResourcePolicyInput) (r0 *cloudwatchlogs.PutResourcePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutResourcePolicy", i0)
	r0, _ = returns[0].(*cloudwatchlogs.PutResourcePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) PutResourcePolicyRequest(i0 *cloudwatchlogs.PutResourcePolicyInput) (r0 *request.Request, r1 *cloudwatchlogs.PutResourcePolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutResourcePolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.PutResourcePolicyOutput)
	return
}

func (d *CloudWatchLogsDouble) PutResourcePolicyWithContext(i0 context.Context, i1 *cloudwatchlogs.PutResourcePolicyInput, i2 ...request.Option) (r0 *cloudwatchlogs.PutResourcePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutResourcePolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.PutResourcePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakePutResourcePolicyWithContext(ctx context.Context, in *cloudwatchlogs.PutResourcePolicyInput, _ ...request.Option) (*cloudwatchlogs.PutResourcePolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutResourcePolicy cancelled", ctx.Err())
	default:
		return d.PutResourcePolicy(in)
	}
}

func (d *CloudWatchLogsDouble) PutRetentionPolicy(i0 *cloudwatchlogs.PutRetentionPolicyInput) (r0 *cloudwatchlogs.PutRetentionPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRetentionPolicy", i0)
	r0, _ = returns[0].(*cloudwatchlogs.PutRetentionPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) PutRetentionPolicyRequest(i0 *cloudwatchlogs.PutRetentionPolicyInput) (r0 *request.Request, r1 *cloudwatchlogs.PutRetentionPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRetentionPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.PutRetentionPolicyOutput)
	return
}

func (d *CloudWatchLogsDouble) PutRetentionPolicyWithContext(i0 context.Context, i1 *cloudwatchlogs.PutRetentionPolicyInput, i2 ...request.Option) (r0 *cloudwatchlogs.PutRetentionPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRetentionPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.PutRetentionPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakePutRetentionPolicyWithContext(ctx context.Context, in *cloudwatchlogs.PutRetentionPolicyInput, _ ...request.Option) (*cloudwatchlogs.PutRetentionPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutRetentionPolicy cancelled", ctx.Err())
	default:
		return d.PutRetentionPolicy(in)
	}
}

func (d *CloudWatchLogsDouble) PutSubscriptionFilter(i0 *cloudwatchlogs.PutSubscriptionFilterInput) (r0 *cloudwatchlogs.PutSubscriptionFilterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutSubscriptionFilter", i0)
	r0, _ = returns[0].(*cloudwatchlogs.PutSubscriptionFilterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) PutSubscriptionFilterRequest(i0 *cloudwatchlogs.PutSubscriptionFilterInput) (r0 *request.Request, r1 *cloudwatchlogs.PutSubscriptionFilterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutSubscriptionFilterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.PutSubscriptionFilterOutput)
	return
}

func (d *CloudWatchLogsDouble) PutSubscriptionFilterWithContext(i0 context.Context, i1 *cloudwatchlogs.PutSubscriptionFilterInput, i2 ...request.Option) (r0 *cloudwatchlogs.PutSubscriptionFilterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutSubscriptionFilterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.PutSubscriptionFilterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakePutSubscriptionFilterWithContext(ctx context.Context, in *cloudwatchlogs.PutSubscriptionFilterInput, _ ...request.Option) (*cloudwatchlogs.PutSubscriptionFilterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutSubscriptionFilter cancelled", ctx.Err())
	default:
		return d.PutSubscriptionFilter(in)
	}
}

func (d *CloudWatchLogsDouble) StartQuery(i0 *cloudwatchlogs.StartQueryInput) (r0 *cloudwatchlogs.StartQueryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartQuery", i0)
	r0, _ = returns[0].(*cloudwatchlogs.StartQueryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) StartQueryRequest(i0 *cloudwatchlogs.StartQueryInput) (r0 *request.Request, r1 *cloudwatchlogs.StartQueryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartQueryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.StartQueryOutput)
	return
}

func (d *CloudWatchLogsDouble) StartQueryWithContext(i0 context.Context, i1 *cloudwatchlogs.StartQueryInput, i2 ...request.Option) (r0 *cloudwatchlogs.StartQueryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartQueryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.StartQueryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeStartQueryWithContext(ctx context.Context, in *cloudwatchlogs.StartQueryInput, _ ...request.Option) (*cloudwatchlogs.StartQueryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartQuery cancelled", ctx.Err())
	default:
		return d.StartQuery(in)
	}
}

func (d *CloudWatchLogsDouble) StopQuery(i0 *cloudwatchlogs.StopQueryInput) (r0 *cloudwatchlogs.StopQueryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopQuery", i0)
	r0, _ = returns[0].(*cloudwatchlogs.StopQueryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) StopQueryRequest(i0 *cloudwatchlogs.StopQueryInput) (r0 *request.Request, r1 *cloudwatchlogs.StopQueryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopQueryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.StopQueryOutput)
	return
}

func (d *CloudWatchLogsDouble) StopQueryWithContext(i0 context.Context, i1 *cloudwatchlogs.StopQueryInput, i2 ...request.Option) (r0 *cloudwatchlogs.StopQueryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopQueryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.StopQueryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeStopQueryWithContext(ctx context.Context, in *cloudwatchlogs.StopQueryInput, _ ...request.Option) (*cloudwatchlogs.StopQueryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopQuery cancelled", ctx.Err())
	default:
		return d.StopQuery(in)
	}
}

func (d *CloudWatchLogsDouble) TagLogGroup(i0 *cloudwatchlogs.TagLogGroupInput) (r0 *cloudwatchlogs.TagLogGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagLogGroup", i0)
	r0, _ = returns[0].(*cloudwatchlogs.TagLogGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) TagLogGroupRequest(i0 *cloudwatchlogs.TagLogGroupInput) (r0 *request.Request, r1 *cloudwatchlogs.TagLogGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagLogGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.TagLogGroupOutput)
	return
}

func (d *CloudWatchLogsDouble) TagLogGroupWithContext(i0 context.Context, i1 *cloudwatchlogs.TagLogGroupInput, i2 ...request.Option) (r0 *cloudwatchlogs.TagLogGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagLogGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.TagLogGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeTagLogGroupWithContext(ctx context.Context, in *cloudwatchlogs.TagLogGroupInput, _ ...request.Option) (*cloudwatchlogs.TagLogGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagLogGroup cancelled", ctx.Err())
	default:
		return d.TagLogGroup(in)
	}
}

func (d *CloudWatchLogsDouble) TestMetricFilter(i0 *cloudwatchlogs.TestMetricFilterInput) (r0 *cloudwatchlogs.TestMetricFilterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestMetricFilter", i0)
	r0, _ = returns[0].(*cloudwatchlogs.TestMetricFilterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) TestMetricFilterRequest(i0 *cloudwatchlogs.TestMetricFilterInput) (r0 *request.Request, r1 *cloudwatchlogs.TestMetricFilterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestMetricFilterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.TestMetricFilterOutput)
	return
}

func (d *CloudWatchLogsDouble) TestMetricFilterWithContext(i0 context.Context, i1 *cloudwatchlogs.TestMetricFilterInput, i2 ...request.Option) (r0 *cloudwatchlogs.TestMetricFilterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestMetricFilterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.TestMetricFilterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeTestMetricFilterWithContext(ctx context.Context, in *cloudwatchlogs.TestMetricFilterInput, _ ...request.Option) (*cloudwatchlogs.TestMetricFilterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TestMetricFilter cancelled", ctx.Err())
	default:
		return d.TestMetricFilter(in)
	}
}

func (d *CloudWatchLogsDouble) UntagLogGroup(i0 *cloudwatchlogs.UntagLogGroupInput) (r0 *cloudwatchlogs.UntagLogGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagLogGroup", i0)
	r0, _ = returns[0].(*cloudwatchlogs.UntagLogGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) UntagLogGroupRequest(i0 *cloudwatchlogs.UntagLogGroupInput) (r0 *request.Request, r1 *cloudwatchlogs.UntagLogGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagLogGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchlogs.UntagLogGroupOutput)
	return
}

func (d *CloudWatchLogsDouble) UntagLogGroupWithContext(i0 context.Context, i1 *cloudwatchlogs.UntagLogGroupInput, i2 ...request.Option) (r0 *cloudwatchlogs.UntagLogGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagLogGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchlogs.UntagLogGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchLogsDouble) fakeUntagLogGroupWithContext(ctx context.Context, in *cloudwatchlogs.UntagLogGroupInput, _ ...request.Option) (*cloudwatchlogs.UntagLogGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagLogGroup cancelled", ctx.Err())
	default:
		return d.UntagLogGroup(in)
	}
}
