// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:15:33+11:00

// Package workdocsdouble provides a TestDouble implementation of workdocsiface.WorkDocsAPI
package workdocsdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/workdocs"
	"github.com/aws/aws-sdk-go/service/workdocs/workdocsiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// WorkDocsDouble is TestDouble for workdocsiface.WorkDocsAPI
type WorkDocsDouble struct {
	workdocsiface.WorkDocsAPI
	*awsdouble.AWSTestDouble
}

// Constructor for WorkDocsDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *WorkDocsDouble {
	result := &WorkDocsDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*workdocsiface.WorkDocsAPI)(nil), configurators...)
	return result
}

func (d *WorkDocsDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *WorkDocsDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AbortDocumentVersionUploadWithContext":
		return m.Fake(d.fakeAbortDocumentVersionUploadWithContext)

	case "ActivateUserWithContext":
		return m.Fake(d.fakeActivateUserWithContext)

	case "AddResourcePermissionsWithContext":
		return m.Fake(d.fakeAddResourcePermissionsWithContext)

	case "CreateCommentWithContext":
		return m.Fake(d.fakeCreateCommentWithContext)

	case "CreateCustomMetadataWithContext":
		return m.Fake(d.fakeCreateCustomMetadataWithContext)

	case "CreateFolderWithContext":
		return m.Fake(d.fakeCreateFolderWithContext)

	case "CreateLabelsWithContext":
		return m.Fake(d.fakeCreateLabelsWithContext)

	case "CreateNotificationSubscriptionWithContext":
		return m.Fake(d.fakeCreateNotificationSubscriptionWithContext)

	case "CreateUserWithContext":
		return m.Fake(d.fakeCreateUserWithContext)

	case "DeactivateUserWithContext":
		return m.Fake(d.fakeDeactivateUserWithContext)

	case "DeleteCommentWithContext":
		return m.Fake(d.fakeDeleteCommentWithContext)

	case "DeleteCustomMetadataWithContext":
		return m.Fake(d.fakeDeleteCustomMetadataWithContext)

	case "DeleteDocumentWithContext":
		return m.Fake(d.fakeDeleteDocumentWithContext)

	case "DeleteFolderContentsWithContext":
		return m.Fake(d.fakeDeleteFolderContentsWithContext)

	case "DeleteFolderWithContext":
		return m.Fake(d.fakeDeleteFolderWithContext)

	case "DeleteLabelsWithContext":
		return m.Fake(d.fakeDeleteLabelsWithContext)

	case "DeleteNotificationSubscriptionWithContext":
		return m.Fake(d.fakeDeleteNotificationSubscriptionWithContext)

	case "DeleteUserWithContext":
		return m.Fake(d.fakeDeleteUserWithContext)

	case "DescribeActivitiesWithContext":
		return m.Fake(d.fakeDescribeActivitiesWithContext)

	case "DescribeCommentsWithContext":
		return m.Fake(d.fakeDescribeCommentsWithContext)

	case "DescribeDocumentVersionsPages":
		return m.Fake(d.fakeDescribeDocumentVersionsPages)

	case "DescribeDocumentVersionsPagesWithContext":
		return m.Fake(d.fakeDescribeDocumentVersionsPagesWithContext)

	case "DescribeDocumentVersionsWithContext":
		return m.Fake(d.fakeDescribeDocumentVersionsWithContext)

	case "DescribeFolderContentsPages":
		return m.Fake(d.fakeDescribeFolderContentsPages)

	case "DescribeFolderContentsPagesWithContext":
		return m.Fake(d.fakeDescribeFolderContentsPagesWithContext)

	case "DescribeFolderContentsWithContext":
		return m.Fake(d.fakeDescribeFolderContentsWithContext)

	case "DescribeGroupsWithContext":
		return m.Fake(d.fakeDescribeGroupsWithContext)

	case "DescribeNotificationSubscriptionsWithContext":
		return m.Fake(d.fakeDescribeNotificationSubscriptionsWithContext)

	case "DescribeResourcePermissionsWithContext":
		return m.Fake(d.fakeDescribeResourcePermissionsWithContext)

	case "DescribeRootFoldersWithContext":
		return m.Fake(d.fakeDescribeRootFoldersWithContext)

	case "DescribeUsersPages":
		return m.Fake(d.fakeDescribeUsersPages)

	case "DescribeUsersPagesWithContext":
		return m.Fake(d.fakeDescribeUsersPagesWithContext)

	case "DescribeUsersWithContext":
		return m.Fake(d.fakeDescribeUsersWithContext)

	case "GetCurrentUserWithContext":
		return m.Fake(d.fakeGetCurrentUserWithContext)

	case "GetDocumentPathWithContext":
		return m.Fake(d.fakeGetDocumentPathWithContext)

	case "GetDocumentVersionWithContext":
		return m.Fake(d.fakeGetDocumentVersionWithContext)

	case "GetDocumentWithContext":
		return m.Fake(d.fakeGetDocumentWithContext)

	case "GetFolderPathWithContext":
		return m.Fake(d.fakeGetFolderPathWithContext)

	case "GetFolderWithContext":
		return m.Fake(d.fakeGetFolderWithContext)

	case "GetResourcesWithContext":
		return m.Fake(d.fakeGetResourcesWithContext)

	case "InitiateDocumentVersionUploadWithContext":
		return m.Fake(d.fakeInitiateDocumentVersionUploadWithContext)

	case "RemoveAllResourcePermissionsWithContext":
		return m.Fake(d.fakeRemoveAllResourcePermissionsWithContext)

	case "RemoveResourcePermissionWithContext":
		return m.Fake(d.fakeRemoveResourcePermissionWithContext)

	case "UpdateDocumentVersionWithContext":
		return m.Fake(d.fakeUpdateDocumentVersionWithContext)

	case "UpdateDocumentWithContext":
		return m.Fake(d.fakeUpdateDocumentWithContext)

	case "UpdateFolderWithContext":
		return m.Fake(d.fakeUpdateFolderWithContext)

	case "UpdateUserWithContext":
		return m.Fake(d.fakeUpdateUserWithContext)

	default:
		return nil
	}
}

func (d *WorkDocsDouble) AbortDocumentVersionUpload(i0 *workdocs.AbortDocumentVersionUploadInput) (r0 *workdocs.AbortDocumentVersionUploadOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AbortDocumentVersionUpload", i0)
	r0, _ = returns[0].(*workdocs.AbortDocumentVersionUploadOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) AbortDocumentVersionUploadRequest(i0 *workdocs.AbortDocumentVersionUploadInput) (r0 *request.Request, r1 *workdocs.AbortDocumentVersionUploadOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AbortDocumentVersionUploadRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.AbortDocumentVersionUploadOutput)
	return
}

func (d *WorkDocsDouble) AbortDocumentVersionUploadWithContext(i0 context.Context, i1 *workdocs.AbortDocumentVersionUploadInput, i2 ...request.Option) (r0 *workdocs.AbortDocumentVersionUploadOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AbortDocumentVersionUploadWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.AbortDocumentVersionUploadOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeAbortDocumentVersionUploadWithContext(ctx context.Context, in *workdocs.AbortDocumentVersionUploadInput, _ ...request.Option) (*workdocs.AbortDocumentVersionUploadOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AbortDocumentVersionUpload cancelled", ctx.Err())
	default:
		return d.AbortDocumentVersionUpload(in)
	}
}

func (d *WorkDocsDouble) ActivateUser(i0 *workdocs.ActivateUserInput) (r0 *workdocs.ActivateUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ActivateUser", i0)
	r0, _ = returns[0].(*workdocs.ActivateUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) ActivateUserRequest(i0 *workdocs.ActivateUserInput) (r0 *request.Request, r1 *workdocs.ActivateUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ActivateUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.ActivateUserOutput)
	return
}

func (d *WorkDocsDouble) ActivateUserWithContext(i0 context.Context, i1 *workdocs.ActivateUserInput, i2 ...request.Option) (r0 *workdocs.ActivateUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ActivateUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.ActivateUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeActivateUserWithContext(ctx context.Context, in *workdocs.ActivateUserInput, _ ...request.Option) (*workdocs.ActivateUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ActivateUser cancelled", ctx.Err())
	default:
		return d.ActivateUser(in)
	}
}

func (d *WorkDocsDouble) AddResourcePermissions(i0 *workdocs.AddResourcePermissionsInput) (r0 *workdocs.AddResourcePermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddResourcePermissions", i0)
	r0, _ = returns[0].(*workdocs.AddResourcePermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) AddResourcePermissionsRequest(i0 *workdocs.AddResourcePermissionsInput) (r0 *request.Request, r1 *workdocs.AddResourcePermissionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddResourcePermissionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.AddResourcePermissionsOutput)
	return
}

func (d *WorkDocsDouble) AddResourcePermissionsWithContext(i0 context.Context, i1 *workdocs.AddResourcePermissionsInput, i2 ...request.Option) (r0 *workdocs.AddResourcePermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddResourcePermissionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.AddResourcePermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeAddResourcePermissionsWithContext(ctx context.Context, in *workdocs.AddResourcePermissionsInput, _ ...request.Option) (*workdocs.AddResourcePermissionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddResourcePermissions cancelled", ctx.Err())
	default:
		return d.AddResourcePermissions(in)
	}
}

func (d *WorkDocsDouble) CreateComment(i0 *workdocs.CreateCommentInput) (r0 *workdocs.CreateCommentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateComment", i0)
	r0, _ = returns[0].(*workdocs.CreateCommentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) CreateCommentRequest(i0 *workdocs.CreateCommentInput) (r0 *request.Request, r1 *workdocs.CreateCommentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCommentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.CreateCommentOutput)
	return
}

func (d *WorkDocsDouble) CreateCommentWithContext(i0 context.Context, i1 *workdocs.CreateCommentInput, i2 ...request.Option) (r0 *workdocs.CreateCommentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCommentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.CreateCommentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeCreateCommentWithContext(ctx context.Context, in *workdocs.CreateCommentInput, _ ...request.Option) (*workdocs.CreateCommentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateComment cancelled", ctx.Err())
	default:
		return d.CreateComment(in)
	}
}

func (d *WorkDocsDouble) CreateCustomMetadata(i0 *workdocs.CreateCustomMetadataInput) (r0 *workdocs.CreateCustomMetadataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCustomMetadata", i0)
	r0, _ = returns[0].(*workdocs.CreateCustomMetadataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) CreateCustomMetadataRequest(i0 *workdocs.CreateCustomMetadataInput) (r0 *request.Request, r1 *workdocs.CreateCustomMetadataOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCustomMetadataRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.CreateCustomMetadataOutput)
	return
}

func (d *WorkDocsDouble) CreateCustomMetadataWithContext(i0 context.Context, i1 *workdocs.CreateCustomMetadataInput, i2 ...request.Option) (r0 *workdocs.CreateCustomMetadataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCustomMetadataWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.CreateCustomMetadataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeCreateCustomMetadataWithContext(ctx context.Context, in *workdocs.CreateCustomMetadataInput, _ ...request.Option) (*workdocs.CreateCustomMetadataOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateCustomMetadata cancelled", ctx.Err())
	default:
		return d.CreateCustomMetadata(in)
	}
}

func (d *WorkDocsDouble) CreateFolder(i0 *workdocs.CreateFolderInput) (r0 *workdocs.CreateFolderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFolder", i0)
	r0, _ = returns[0].(*workdocs.CreateFolderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) CreateFolderRequest(i0 *workdocs.CreateFolderInput) (r0 *request.Request, r1 *workdocs.CreateFolderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFolderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.CreateFolderOutput)
	return
}

func (d *WorkDocsDouble) CreateFolderWithContext(i0 context.Context, i1 *workdocs.CreateFolderInput, i2 ...request.Option) (r0 *workdocs.CreateFolderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFolderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.CreateFolderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeCreateFolderWithContext(ctx context.Context, in *workdocs.CreateFolderInput, _ ...request.Option) (*workdocs.CreateFolderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateFolder cancelled", ctx.Err())
	default:
		return d.CreateFolder(in)
	}
}

func (d *WorkDocsDouble) CreateLabels(i0 *workdocs.CreateLabelsInput) (r0 *workdocs.CreateLabelsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLabels", i0)
	r0, _ = returns[0].(*workdocs.CreateLabelsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) CreateLabelsRequest(i0 *workdocs.CreateLabelsInput) (r0 *request.Request, r1 *workdocs.CreateLabelsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLabelsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.CreateLabelsOutput)
	return
}

func (d *WorkDocsDouble) CreateLabelsWithContext(i0 context.Context, i1 *workdocs.CreateLabelsInput, i2 ...request.Option) (r0 *workdocs.CreateLabelsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLabelsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.CreateLabelsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeCreateLabelsWithContext(ctx context.Context, in *workdocs.CreateLabelsInput, _ ...request.Option) (*workdocs.CreateLabelsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateLabels cancelled", ctx.Err())
	default:
		return d.CreateLabels(in)
	}
}

func (d *WorkDocsDouble) CreateNotificationSubscription(i0 *workdocs.CreateNotificationSubscriptionInput) (r0 *workdocs.CreateNotificationSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNotificationSubscription", i0)
	r0, _ = returns[0].(*workdocs.CreateNotificationSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) CreateNotificationSubscriptionRequest(i0 *workdocs.CreateNotificationSubscriptionInput) (r0 *request.Request, r1 *workdocs.CreateNotificationSubscriptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNotificationSubscriptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.CreateNotificationSubscriptionOutput)
	return
}

func (d *WorkDocsDouble) CreateNotificationSubscriptionWithContext(i0 context.Context, i1 *workdocs.CreateNotificationSubscriptionInput, i2 ...request.Option) (r0 *workdocs.CreateNotificationSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNotificationSubscriptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.CreateNotificationSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeCreateNotificationSubscriptionWithContext(ctx context.Context, in *workdocs.CreateNotificationSubscriptionInput, _ ...request.Option) (*workdocs.CreateNotificationSubscriptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateNotificationSubscription cancelled", ctx.Err())
	default:
		return d.CreateNotificationSubscription(in)
	}
}

func (d *WorkDocsDouble) CreateUser(i0 *workdocs.CreateUserInput) (r0 *workdocs.CreateUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUser", i0)
	r0, _ = returns[0].(*workdocs.CreateUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) CreateUserRequest(i0 *workdocs.CreateUserInput) (r0 *request.Request, r1 *workdocs.CreateUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.CreateUserOutput)
	return
}

func (d *WorkDocsDouble) CreateUserWithContext(i0 context.Context, i1 *workdocs.CreateUserInput, i2 ...request.Option) (r0 *workdocs.CreateUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.CreateUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeCreateUserWithContext(ctx context.Context, in *workdocs.CreateUserInput, _ ...request.Option) (*workdocs.CreateUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateUser cancelled", ctx.Err())
	default:
		return d.CreateUser(in)
	}
}

func (d *WorkDocsDouble) DeactivateUser(i0 *workdocs.DeactivateUserInput) (r0 *workdocs.DeactivateUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeactivateUser", i0)
	r0, _ = returns[0].(*workdocs.DeactivateUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) DeactivateUserRequest(i0 *workdocs.DeactivateUserInput) (r0 *request.Request, r1 *workdocs.DeactivateUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeactivateUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.DeactivateUserOutput)
	return
}

func (d *WorkDocsDouble) DeactivateUserWithContext(i0 context.Context, i1 *workdocs.DeactivateUserInput, i2 ...request.Option) (r0 *workdocs.DeactivateUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeactivateUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.DeactivateUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeDeactivateUserWithContext(ctx context.Context, in *workdocs.DeactivateUserInput, _ ...request.Option) (*workdocs.DeactivateUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeactivateUser cancelled", ctx.Err())
	default:
		return d.DeactivateUser(in)
	}
}

func (d *WorkDocsDouble) DeleteComment(i0 *workdocs.DeleteCommentInput) (r0 *workdocs.DeleteCommentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteComment", i0)
	r0, _ = returns[0].(*workdocs.DeleteCommentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) DeleteCommentRequest(i0 *workdocs.DeleteCommentInput) (r0 *request.Request, r1 *workdocs.DeleteCommentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCommentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.DeleteCommentOutput)
	return
}

func (d *WorkDocsDouble) DeleteCommentWithContext(i0 context.Context, i1 *workdocs.DeleteCommentInput, i2 ...request.Option) (r0 *workdocs.DeleteCommentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCommentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.DeleteCommentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeDeleteCommentWithContext(ctx context.Context, in *workdocs.DeleteCommentInput, _ ...request.Option) (*workdocs.DeleteCommentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteComment cancelled", ctx.Err())
	default:
		return d.DeleteComment(in)
	}
}

func (d *WorkDocsDouble) DeleteCustomMetadata(i0 *workdocs.DeleteCustomMetadataInput) (r0 *workdocs.DeleteCustomMetadataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCustomMetadata", i0)
	r0, _ = returns[0].(*workdocs.DeleteCustomMetadataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) DeleteCustomMetadataRequest(i0 *workdocs.DeleteCustomMetadataInput) (r0 *request.Request, r1 *workdocs.DeleteCustomMetadataOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCustomMetadataRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.DeleteCustomMetadataOutput)
	return
}

func (d *WorkDocsDouble) DeleteCustomMetadataWithContext(i0 context.Context, i1 *workdocs.DeleteCustomMetadataInput, i2 ...request.Option) (r0 *workdocs.DeleteCustomMetadataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCustomMetadataWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.DeleteCustomMetadataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeDeleteCustomMetadataWithContext(ctx context.Context, in *workdocs.DeleteCustomMetadataInput, _ ...request.Option) (*workdocs.DeleteCustomMetadataOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteCustomMetadata cancelled", ctx.Err())
	default:
		return d.DeleteCustomMetadata(in)
	}
}

func (d *WorkDocsDouble) DeleteDocument(i0 *workdocs.DeleteDocumentInput) (r0 *workdocs.DeleteDocumentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDocument", i0)
	r0, _ = returns[0].(*workdocs.DeleteDocumentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) DeleteDocumentRequest(i0 *workdocs.DeleteDocumentInput) (r0 *request.Request, r1 *workdocs.DeleteDocumentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDocumentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.DeleteDocumentOutput)
	return
}

func (d *WorkDocsDouble) DeleteDocumentWithContext(i0 context.Context, i1 *workdocs.DeleteDocumentInput, i2 ...request.Option) (r0 *workdocs.DeleteDocumentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDocumentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.DeleteDocumentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeDeleteDocumentWithContext(ctx context.Context, in *workdocs.DeleteDocumentInput, _ ...request.Option) (*workdocs.DeleteDocumentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDocument cancelled", ctx.Err())
	default:
		return d.DeleteDocument(in)
	}
}

func (d *WorkDocsDouble) DeleteFolder(i0 *workdocs.DeleteFolderInput) (r0 *workdocs.DeleteFolderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFolder", i0)
	r0, _ = returns[0].(*workdocs.DeleteFolderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) DeleteFolderContents(i0 *workdocs.DeleteFolderContentsInput) (r0 *workdocs.DeleteFolderContentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFolderContents", i0)
	r0, _ = returns[0].(*workdocs.DeleteFolderContentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) DeleteFolderContentsRequest(i0 *workdocs.DeleteFolderContentsInput) (r0 *request.Request, r1 *workdocs.DeleteFolderContentsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFolderContentsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.DeleteFolderContentsOutput)
	return
}

func (d *WorkDocsDouble) DeleteFolderContentsWithContext(i0 context.Context, i1 *workdocs.DeleteFolderContentsInput, i2 ...request.Option) (r0 *workdocs.DeleteFolderContentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFolderContentsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.DeleteFolderContentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeDeleteFolderContentsWithContext(ctx context.Context, in *workdocs.DeleteFolderContentsInput, _ ...request.Option) (*workdocs.DeleteFolderContentsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteFolderContents cancelled", ctx.Err())
	default:
		return d.DeleteFolderContents(in)
	}
}

func (d *WorkDocsDouble) DeleteFolderRequest(i0 *workdocs.DeleteFolderInput) (r0 *request.Request, r1 *workdocs.DeleteFolderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFolderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.DeleteFolderOutput)
	return
}

func (d *WorkDocsDouble) DeleteFolderWithContext(i0 context.Context, i1 *workdocs.DeleteFolderInput, i2 ...request.Option) (r0 *workdocs.DeleteFolderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFolderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.DeleteFolderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeDeleteFolderWithContext(ctx context.Context, in *workdocs.DeleteFolderInput, _ ...request.Option) (*workdocs.DeleteFolderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteFolder cancelled", ctx.Err())
	default:
		return d.DeleteFolder(in)
	}
}

func (d *WorkDocsDouble) DeleteLabels(i0 *workdocs.DeleteLabelsInput) (r0 *workdocs.DeleteLabelsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLabels", i0)
	r0, _ = returns[0].(*workdocs.DeleteLabelsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) DeleteLabelsRequest(i0 *workdocs.DeleteLabelsInput) (r0 *request.Request, r1 *workdocs.DeleteLabelsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLabelsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.DeleteLabelsOutput)
	return
}

func (d *WorkDocsDouble) DeleteLabelsWithContext(i0 context.Context, i1 *workdocs.DeleteLabelsInput, i2 ...request.Option) (r0 *workdocs.DeleteLabelsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLabelsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.DeleteLabelsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeDeleteLabelsWithContext(ctx context.Context, in *workdocs.DeleteLabelsInput, _ ...request.Option) (*workdocs.DeleteLabelsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteLabels cancelled", ctx.Err())
	default:
		return d.DeleteLabels(in)
	}
}

func (d *WorkDocsDouble) DeleteNotificationSubscription(i0 *workdocs.DeleteNotificationSubscriptionInput) (r0 *workdocs.DeleteNotificationSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNotificationSubscription", i0)
	r0, _ = returns[0].(*workdocs.DeleteNotificationSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) DeleteNotificationSubscriptionRequest(i0 *workdocs.DeleteNotificationSubscriptionInput) (r0 *request.Request, r1 *workdocs.DeleteNotificationSubscriptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNotificationSubscriptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.DeleteNotificationSubscriptionOutput)
	return
}

func (d *WorkDocsDouble) DeleteNotificationSubscriptionWithContext(i0 context.Context, i1 *workdocs.DeleteNotificationSubscriptionInput, i2 ...request.Option) (r0 *workdocs.DeleteNotificationSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNotificationSubscriptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.DeleteNotificationSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeDeleteNotificationSubscriptionWithContext(ctx context.Context, in *workdocs.DeleteNotificationSubscriptionInput, _ ...request.Option) (*workdocs.DeleteNotificationSubscriptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteNotificationSubscription cancelled", ctx.Err())
	default:
		return d.DeleteNotificationSubscription(in)
	}
}

func (d *WorkDocsDouble) DeleteUser(i0 *workdocs.DeleteUserInput) (r0 *workdocs.DeleteUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUser", i0)
	r0, _ = returns[0].(*workdocs.DeleteUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) DeleteUserRequest(i0 *workdocs.DeleteUserInput) (r0 *request.Request, r1 *workdocs.DeleteUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.DeleteUserOutput)
	return
}

func (d *WorkDocsDouble) DeleteUserWithContext(i0 context.Context, i1 *workdocs.DeleteUserInput, i2 ...request.Option) (r0 *workdocs.DeleteUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.DeleteUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeDeleteUserWithContext(ctx context.Context, in *workdocs.DeleteUserInput, _ ...request.Option) (*workdocs.DeleteUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteUser cancelled", ctx.Err())
	default:
		return d.DeleteUser(in)
	}
}

func (d *WorkDocsDouble) DescribeActivities(i0 *workdocs.DescribeActivitiesInput) (r0 *workdocs.DescribeActivitiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeActivities", i0)
	r0, _ = returns[0].(*workdocs.DescribeActivitiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) DescribeActivitiesRequest(i0 *workdocs.DescribeActivitiesInput) (r0 *request.Request, r1 *workdocs.DescribeActivitiesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeActivitiesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.DescribeActivitiesOutput)
	return
}

func (d *WorkDocsDouble) DescribeActivitiesWithContext(i0 context.Context, i1 *workdocs.DescribeActivitiesInput, i2 ...request.Option) (r0 *workdocs.DescribeActivitiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeActivitiesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.DescribeActivitiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeDescribeActivitiesWithContext(ctx context.Context, in *workdocs.DescribeActivitiesInput, _ ...request.Option) (*workdocs.DescribeActivitiesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeActivities cancelled", ctx.Err())
	default:
		return d.DescribeActivities(in)
	}
}

func (d *WorkDocsDouble) DescribeComments(i0 *workdocs.DescribeCommentsInput) (r0 *workdocs.DescribeCommentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeComments", i0)
	r0, _ = returns[0].(*workdocs.DescribeCommentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) DescribeCommentsRequest(i0 *workdocs.DescribeCommentsInput) (r0 *request.Request, r1 *workdocs.DescribeCommentsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCommentsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.DescribeCommentsOutput)
	return
}

func (d *WorkDocsDouble) DescribeCommentsWithContext(i0 context.Context, i1 *workdocs.DescribeCommentsInput, i2 ...request.Option) (r0 *workdocs.DescribeCommentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCommentsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.DescribeCommentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeDescribeCommentsWithContext(ctx context.Context, in *workdocs.DescribeCommentsInput, _ ...request.Option) (*workdocs.DescribeCommentsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeComments cancelled", ctx.Err())
	default:
		return d.DescribeComments(in)
	}
}

func (d *WorkDocsDouble) DescribeDocumentVersions(i0 *workdocs.DescribeDocumentVersionsInput) (r0 *workdocs.DescribeDocumentVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDocumentVersions", i0)
	r0, _ = returns[0].(*workdocs.DescribeDocumentVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) DescribeDocumentVersionsPages(i0 *workdocs.DescribeDocumentVersionsInput, i1 func(*workdocs.DescribeDocumentVersionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDocumentVersionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkDocsDouble) fakeDescribeDocumentVersionsPages(in *workdocs.DescribeDocumentVersionsInput, pager func(*workdocs.DescribeDocumentVersionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeDocumentVersions", paginators, in, pager)
}

func (d *WorkDocsDouble) DescribeDocumentVersionsPagesWithContext(i0 context.Context, i1 *workdocs.DescribeDocumentVersionsInput, i2 func(*workdocs.DescribeDocumentVersionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDocumentVersionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkDocsDouble) fakeDescribeDocumentVersionsPagesWithContext(ctx context.Context, in *workdocs.DescribeDocumentVersionsInput, pager func(*workdocs.DescribeDocumentVersionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeDocumentVersions", paginators, ctx, in, pager, options...)
}

func (d *WorkDocsDouble) DescribeDocumentVersionsRequest(i0 *workdocs.DescribeDocumentVersionsInput) (r0 *request.Request, r1 *workdocs.DescribeDocumentVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDocumentVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.DescribeDocumentVersionsOutput)
	return
}

func (d *WorkDocsDouble) DescribeDocumentVersionsWithContext(i0 context.Context, i1 *workdocs.DescribeDocumentVersionsInput, i2 ...request.Option) (r0 *workdocs.DescribeDocumentVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDocumentVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.DescribeDocumentVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeDescribeDocumentVersionsWithContext(ctx context.Context, in *workdocs.DescribeDocumentVersionsInput, _ ...request.Option) (*workdocs.DescribeDocumentVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDocumentVersions cancelled", ctx.Err())
	default:
		return d.DescribeDocumentVersions(in)
	}
}

func (d *WorkDocsDouble) DescribeFolderContents(i0 *workdocs.DescribeFolderContentsInput) (r0 *workdocs.DescribeFolderContentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFolderContents", i0)
	r0, _ = returns[0].(*workdocs.DescribeFolderContentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) DescribeFolderContentsPages(i0 *workdocs.DescribeFolderContentsInput, i1 func(*workdocs.DescribeFolderContentsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFolderContentsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkDocsDouble) fakeDescribeFolderContentsPages(in *workdocs.DescribeFolderContentsInput, pager func(*workdocs.DescribeFolderContentsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeFolderContents", paginators, in, pager)
}

func (d *WorkDocsDouble) DescribeFolderContentsPagesWithContext(i0 context.Context, i1 *workdocs.DescribeFolderContentsInput, i2 func(*workdocs.DescribeFolderContentsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFolderContentsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkDocsDouble) fakeDescribeFolderContentsPagesWithContext(ctx context.Context, in *workdocs.DescribeFolderContentsInput, pager func(*workdocs.DescribeFolderContentsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeFolderContents", paginators, ctx, in, pager, options...)
}

func (d *WorkDocsDouble) DescribeFolderContentsRequest(i0 *workdocs.DescribeFolderContentsInput) (r0 *request.Request, r1 *workdocs.DescribeFolderContentsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFolderContentsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.DescribeFolderContentsOutput)
	return
}

func (d *WorkDocsDouble) DescribeFolderContentsWithContext(i0 context.Context, i1 *workdocs.DescribeFolderContentsInput, i2 ...request.Option) (r0 *workdocs.DescribeFolderContentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFolderContentsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.DescribeFolderContentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeDescribeFolderContentsWithContext(ctx context.Context, in *workdocs.DescribeFolderContentsInput, _ ...request.Option) (*workdocs.DescribeFolderContentsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeFolderContents cancelled", ctx.Err())
	default:
		return d.DescribeFolderContents(in)
	}
}

func (d *WorkDocsDouble) DescribeGroups(i0 *workdocs.DescribeGroupsInput) (r0 *workdocs.DescribeGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGroups", i0)
	r0, _ = returns[0].(*workdocs.DescribeGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) DescribeGroupsRequest(i0 *workdocs.DescribeGroupsInput) (r0 *request.Request, r1 *workdocs.DescribeGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.DescribeGroupsOutput)
	return
}

func (d *WorkDocsDouble) DescribeGroupsWithContext(i0 context.Context, i1 *workdocs.DescribeGroupsInput, i2 ...request.Option) (r0 *workdocs.DescribeGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.DescribeGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeDescribeGroupsWithContext(ctx context.Context, in *workdocs.DescribeGroupsInput, _ ...request.Option) (*workdocs.DescribeGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeGroups cancelled", ctx.Err())
	default:
		return d.DescribeGroups(in)
	}
}

func (d *WorkDocsDouble) DescribeNotificationSubscriptions(i0 *workdocs.DescribeNotificationSubscriptionsInput) (r0 *workdocs.DescribeNotificationSubscriptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNotificationSubscriptions", i0)
	r0, _ = returns[0].(*workdocs.DescribeNotificationSubscriptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) DescribeNotificationSubscriptionsRequest(i0 *workdocs.DescribeNotificationSubscriptionsInput) (r0 *request.Request, r1 *workdocs.DescribeNotificationSubscriptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNotificationSubscriptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.DescribeNotificationSubscriptionsOutput)
	return
}

func (d *WorkDocsDouble) DescribeNotificationSubscriptionsWithContext(i0 context.Context, i1 *workdocs.DescribeNotificationSubscriptionsInput, i2 ...request.Option) (r0 *workdocs.DescribeNotificationSubscriptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNotificationSubscriptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.DescribeNotificationSubscriptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeDescribeNotificationSubscriptionsWithContext(ctx context.Context, in *workdocs.DescribeNotificationSubscriptionsInput, _ ...request.Option) (*workdocs.DescribeNotificationSubscriptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeNotificationSubscriptions cancelled", ctx.Err())
	default:
		return d.DescribeNotificationSubscriptions(in)
	}
}

func (d *WorkDocsDouble) DescribeResourcePermissions(i0 *workdocs.DescribeResourcePermissionsInput) (r0 *workdocs.DescribeResourcePermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeResourcePermissions", i0)
	r0, _ = returns[0].(*workdocs.DescribeResourcePermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) DescribeResourcePermissionsRequest(i0 *workdocs.DescribeResourcePermissionsInput) (r0 *request.Request, r1 *workdocs.DescribeResourcePermissionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeResourcePermissionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.DescribeResourcePermissionsOutput)
	return
}

func (d *WorkDocsDouble) DescribeResourcePermissionsWithContext(i0 context.Context, i1 *workdocs.DescribeResourcePermissionsInput, i2 ...request.Option) (r0 *workdocs.DescribeResourcePermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeResourcePermissionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.DescribeResourcePermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeDescribeResourcePermissionsWithContext(ctx context.Context, in *workdocs.DescribeResourcePermissionsInput, _ ...request.Option) (*workdocs.DescribeResourcePermissionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeResourcePermissions cancelled", ctx.Err())
	default:
		return d.DescribeResourcePermissions(in)
	}
}

func (d *WorkDocsDouble) DescribeRootFolders(i0 *workdocs.DescribeRootFoldersInput) (r0 *workdocs.DescribeRootFoldersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRootFolders", i0)
	r0, _ = returns[0].(*workdocs.DescribeRootFoldersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) DescribeRootFoldersRequest(i0 *workdocs.DescribeRootFoldersInput) (r0 *request.Request, r1 *workdocs.DescribeRootFoldersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRootFoldersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.DescribeRootFoldersOutput)
	return
}

func (d *WorkDocsDouble) DescribeRootFoldersWithContext(i0 context.Context, i1 *workdocs.DescribeRootFoldersInput, i2 ...request.Option) (r0 *workdocs.DescribeRootFoldersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRootFoldersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.DescribeRootFoldersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeDescribeRootFoldersWithContext(ctx context.Context, in *workdocs.DescribeRootFoldersInput, _ ...request.Option) (*workdocs.DescribeRootFoldersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeRootFolders cancelled", ctx.Err())
	default:
		return d.DescribeRootFolders(in)
	}
}

func (d *WorkDocsDouble) DescribeUsers(i0 *workdocs.DescribeUsersInput) (r0 *workdocs.DescribeUsersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUsers", i0)
	r0, _ = returns[0].(*workdocs.DescribeUsersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) DescribeUsersPages(i0 *workdocs.DescribeUsersInput, i1 func(*workdocs.DescribeUsersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUsersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkDocsDouble) fakeDescribeUsersPages(in *workdocs.DescribeUsersInput, pager func(*workdocs.DescribeUsersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeUsers", paginators, in, pager)
}

func (d *WorkDocsDouble) DescribeUsersPagesWithContext(i0 context.Context, i1 *workdocs.DescribeUsersInput, i2 func(*workdocs.DescribeUsersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUsersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkDocsDouble) fakeDescribeUsersPagesWithContext(ctx context.Context, in *workdocs.DescribeUsersInput, pager func(*workdocs.DescribeUsersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeUsers", paginators, ctx, in, pager, options...)
}

func (d *WorkDocsDouble) DescribeUsersRequest(i0 *workdocs.DescribeUsersInput) (r0 *request.Request, r1 *workdocs.DescribeUsersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUsersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.DescribeUsersOutput)
	return
}

func (d *WorkDocsDouble) DescribeUsersWithContext(i0 context.Context, i1 *workdocs.DescribeUsersInput, i2 ...request.Option) (r0 *workdocs.DescribeUsersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUsersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.DescribeUsersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeDescribeUsersWithContext(ctx context.Context, in *workdocs.DescribeUsersInput, _ ...request.Option) (*workdocs.DescribeUsersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeUsers cancelled", ctx.Err())
	default:
		return d.DescribeUsers(in)
	}
}

func (d *WorkDocsDouble) GetCurrentUser(i0 *workdocs.GetCurrentUserInput) (r0 *workdocs.GetCurrentUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCurrentUser", i0)
	r0, _ = returns[0].(*workdocs.GetCurrentUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) GetCurrentUserRequest(i0 *workdocs.GetCurrentUserInput) (r0 *request.Request, r1 *workdocs.GetCurrentUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCurrentUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.GetCurrentUserOutput)
	return
}

func (d *WorkDocsDouble) GetCurrentUserWithContext(i0 context.Context, i1 *workdocs.GetCurrentUserInput, i2 ...request.Option) (r0 *workdocs.GetCurrentUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCurrentUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.GetCurrentUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeGetCurrentUserWithContext(ctx context.Context, in *workdocs.GetCurrentUserInput, _ ...request.Option) (*workdocs.GetCurrentUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetCurrentUser cancelled", ctx.Err())
	default:
		return d.GetCurrentUser(in)
	}
}

func (d *WorkDocsDouble) GetDocument(i0 *workdocs.GetDocumentInput) (r0 *workdocs.GetDocumentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDocument", i0)
	r0, _ = returns[0].(*workdocs.GetDocumentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) GetDocumentPath(i0 *workdocs.GetDocumentPathInput) (r0 *workdocs.GetDocumentPathOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDocumentPath", i0)
	r0, _ = returns[0].(*workdocs.GetDocumentPathOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) GetDocumentPathRequest(i0 *workdocs.GetDocumentPathInput) (r0 *request.Request, r1 *workdocs.GetDocumentPathOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDocumentPathRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.GetDocumentPathOutput)
	return
}

func (d *WorkDocsDouble) GetDocumentPathWithContext(i0 context.Context, i1 *workdocs.GetDocumentPathInput, i2 ...request.Option) (r0 *workdocs.GetDocumentPathOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDocumentPathWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.GetDocumentPathOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeGetDocumentPathWithContext(ctx context.Context, in *workdocs.GetDocumentPathInput, _ ...request.Option) (*workdocs.GetDocumentPathOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDocumentPath cancelled", ctx.Err())
	default:
		return d.GetDocumentPath(in)
	}
}

func (d *WorkDocsDouble) GetDocumentRequest(i0 *workdocs.GetDocumentInput) (r0 *request.Request, r1 *workdocs.GetDocumentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDocumentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.GetDocumentOutput)
	return
}

func (d *WorkDocsDouble) GetDocumentVersion(i0 *workdocs.GetDocumentVersionInput) (r0 *workdocs.GetDocumentVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDocumentVersion", i0)
	r0, _ = returns[0].(*workdocs.GetDocumentVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) GetDocumentVersionRequest(i0 *workdocs.GetDocumentVersionInput) (r0 *request.Request, r1 *workdocs.GetDocumentVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDocumentVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.GetDocumentVersionOutput)
	return
}

func (d *WorkDocsDouble) GetDocumentVersionWithContext(i0 context.Context, i1 *workdocs.GetDocumentVersionInput, i2 ...request.Option) (r0 *workdocs.GetDocumentVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDocumentVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.GetDocumentVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeGetDocumentVersionWithContext(ctx context.Context, in *workdocs.GetDocumentVersionInput, _ ...request.Option) (*workdocs.GetDocumentVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDocumentVersion cancelled", ctx.Err())
	default:
		return d.GetDocumentVersion(in)
	}
}

func (d *WorkDocsDouble) GetDocumentWithContext(i0 context.Context, i1 *workdocs.GetDocumentInput, i2 ...request.Option) (r0 *workdocs.GetDocumentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDocumentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.GetDocumentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeGetDocumentWithContext(ctx context.Context, in *workdocs.GetDocumentInput, _ ...request.Option) (*workdocs.GetDocumentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDocument cancelled", ctx.Err())
	default:
		return d.GetDocument(in)
	}
}

func (d *WorkDocsDouble) GetFolder(i0 *workdocs.GetFolderInput) (r0 *workdocs.GetFolderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFolder", i0)
	r0, _ = returns[0].(*workdocs.GetFolderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) GetFolderPath(i0 *workdocs.GetFolderPathInput) (r0 *workdocs.GetFolderPathOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFolderPath", i0)
	r0, _ = returns[0].(*workdocs.GetFolderPathOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) GetFolderPathRequest(i0 *workdocs.GetFolderPathInput) (r0 *request.Request, r1 *workdocs.GetFolderPathOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFolderPathRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.GetFolderPathOutput)
	return
}

func (d *WorkDocsDouble) GetFolderPathWithContext(i0 context.Context, i1 *workdocs.GetFolderPathInput, i2 ...request.Option) (r0 *workdocs.GetFolderPathOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFolderPathWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.GetFolderPathOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeGetFolderPathWithContext(ctx context.Context, in *workdocs.GetFolderPathInput, _ ...request.Option) (*workdocs.GetFolderPathOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetFolderPath cancelled", ctx.Err())
	default:
		return d.GetFolderPath(in)
	}
}

func (d *WorkDocsDouble) GetFolderRequest(i0 *workdocs.GetFolderInput) (r0 *request.Request, r1 *workdocs.GetFolderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFolderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.GetFolderOutput)
	return
}

func (d *WorkDocsDouble) GetFolderWithContext(i0 context.Context, i1 *workdocs.GetFolderInput, i2 ...request.Option) (r0 *workdocs.GetFolderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFolderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.GetFolderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeGetFolderWithContext(ctx context.Context, in *workdocs.GetFolderInput, _ ...request.Option) (*workdocs.GetFolderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetFolder cancelled", ctx.Err())
	default:
		return d.GetFolder(in)
	}
}

func (d *WorkDocsDouble) GetResources(i0 *workdocs.GetResourcesInput) (r0 *workdocs.GetResourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResources", i0)
	r0, _ = returns[0].(*workdocs.GetResourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) GetResourcesRequest(i0 *workdocs.GetResourcesInput) (r0 *request.Request, r1 *workdocs.GetResourcesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResourcesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.GetResourcesOutput)
	return
}

func (d *WorkDocsDouble) GetResourcesWithContext(i0 context.Context, i1 *workdocs.GetResourcesInput, i2 ...request.Option) (r0 *workdocs.GetResourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResourcesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.GetResourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeGetResourcesWithContext(ctx context.Context, in *workdocs.GetResourcesInput, _ ...request.Option) (*workdocs.GetResourcesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetResources cancelled", ctx.Err())
	default:
		return d.GetResources(in)
	}
}

func (d *WorkDocsDouble) InitiateDocumentVersionUpload(i0 *workdocs.InitiateDocumentVersionUploadInput) (r0 *workdocs.InitiateDocumentVersionUploadOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("InitiateDocumentVersionUpload", i0)
	r0, _ = returns[0].(*workdocs.InitiateDocumentVersionUploadOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) InitiateDocumentVersionUploadRequest(i0 *workdocs.InitiateDocumentVersionUploadInput) (r0 *request.Request, r1 *workdocs.InitiateDocumentVersionUploadOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("InitiateDocumentVersionUploadRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.InitiateDocumentVersionUploadOutput)
	return
}

func (d *WorkDocsDouble) InitiateDocumentVersionUploadWithContext(i0 context.Context, i1 *workdocs.InitiateDocumentVersionUploadInput, i2 ...request.Option) (r0 *workdocs.InitiateDocumentVersionUploadOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("InitiateDocumentVersionUploadWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.InitiateDocumentVersionUploadOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeInitiateDocumentVersionUploadWithContext(ctx context.Context, in *workdocs.InitiateDocumentVersionUploadInput, _ ...request.Option) (*workdocs.InitiateDocumentVersionUploadOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "InitiateDocumentVersionUpload cancelled", ctx.Err())
	default:
		return d.InitiateDocumentVersionUpload(in)
	}
}

func (d *WorkDocsDouble) RemoveAllResourcePermissions(i0 *workdocs.RemoveAllResourcePermissionsInput) (r0 *workdocs.RemoveAllResourcePermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveAllResourcePermissions", i0)
	r0, _ = returns[0].(*workdocs.RemoveAllResourcePermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) RemoveAllResourcePermissionsRequest(i0 *workdocs.RemoveAllResourcePermissionsInput) (r0 *request.Request, r1 *workdocs.RemoveAllResourcePermissionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveAllResourcePermissionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.RemoveAllResourcePermissionsOutput)
	return
}

func (d *WorkDocsDouble) RemoveAllResourcePermissionsWithContext(i0 context.Context, i1 *workdocs.RemoveAllResourcePermissionsInput, i2 ...request.Option) (r0 *workdocs.RemoveAllResourcePermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveAllResourcePermissionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.RemoveAllResourcePermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeRemoveAllResourcePermissionsWithContext(ctx context.Context, in *workdocs.RemoveAllResourcePermissionsInput, _ ...request.Option) (*workdocs.RemoveAllResourcePermissionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveAllResourcePermissions cancelled", ctx.Err())
	default:
		return d.RemoveAllResourcePermissions(in)
	}
}

func (d *WorkDocsDouble) RemoveResourcePermission(i0 *workdocs.RemoveResourcePermissionInput) (r0 *workdocs.RemoveResourcePermissionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveResourcePermission", i0)
	r0, _ = returns[0].(*workdocs.RemoveResourcePermissionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) RemoveResourcePermissionRequest(i0 *workdocs.RemoveResourcePermissionInput) (r0 *request.Request, r1 *workdocs.RemoveResourcePermissionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveResourcePermissionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.RemoveResourcePermissionOutput)
	return
}

func (d *WorkDocsDouble) RemoveResourcePermissionWithContext(i0 context.Context, i1 *workdocs.RemoveResourcePermissionInput, i2 ...request.Option) (r0 *workdocs.RemoveResourcePermissionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveResourcePermissionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.RemoveResourcePermissionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeRemoveResourcePermissionWithContext(ctx context.Context, in *workdocs.RemoveResourcePermissionInput, _ ...request.Option) (*workdocs.RemoveResourcePermissionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveResourcePermission cancelled", ctx.Err())
	default:
		return d.RemoveResourcePermission(in)
	}
}

func (d *WorkDocsDouble) UpdateDocument(i0 *workdocs.UpdateDocumentInput) (r0 *workdocs.UpdateDocumentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDocument", i0)
	r0, _ = returns[0].(*workdocs.UpdateDocumentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) UpdateDocumentRequest(i0 *workdocs.UpdateDocumentInput) (r0 *request.Request, r1 *workdocs.UpdateDocumentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDocumentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.UpdateDocumentOutput)
	return
}

func (d *WorkDocsDouble) UpdateDocumentVersion(i0 *workdocs.UpdateDocumentVersionInput) (r0 *workdocs.UpdateDocumentVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDocumentVersion", i0)
	r0, _ = returns[0].(*workdocs.UpdateDocumentVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) UpdateDocumentVersionRequest(i0 *workdocs.UpdateDocumentVersionInput) (r0 *request.Request, r1 *workdocs.UpdateDocumentVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDocumentVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.UpdateDocumentVersionOutput)
	return
}

func (d *WorkDocsDouble) UpdateDocumentVersionWithContext(i0 context.Context, i1 *workdocs.UpdateDocumentVersionInput, i2 ...request.Option) (r0 *workdocs.UpdateDocumentVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDocumentVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.UpdateDocumentVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeUpdateDocumentVersionWithContext(ctx context.Context, in *workdocs.UpdateDocumentVersionInput, _ ...request.Option) (*workdocs.UpdateDocumentVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDocumentVersion cancelled", ctx.Err())
	default:
		return d.UpdateDocumentVersion(in)
	}
}

func (d *WorkDocsDouble) UpdateDocumentWithContext(i0 context.Context, i1 *workdocs.UpdateDocumentInput, i2 ...request.Option) (r0 *workdocs.UpdateDocumentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDocumentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.UpdateDocumentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeUpdateDocumentWithContext(ctx context.Context, in *workdocs.UpdateDocumentInput, _ ...request.Option) (*workdocs.UpdateDocumentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDocument cancelled", ctx.Err())
	default:
		return d.UpdateDocument(in)
	}
}

func (d *WorkDocsDouble) UpdateFolder(i0 *workdocs.UpdateFolderInput) (r0 *workdocs.UpdateFolderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFolder", i0)
	r0, _ = returns[0].(*workdocs.UpdateFolderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) UpdateFolderRequest(i0 *workdocs.UpdateFolderInput) (r0 *request.Request, r1 *workdocs.UpdateFolderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFolderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.UpdateFolderOutput)
	return
}

func (d *WorkDocsDouble) UpdateFolderWithContext(i0 context.Context, i1 *workdocs.UpdateFolderInput, i2 ...request.Option) (r0 *workdocs.UpdateFolderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFolderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.UpdateFolderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeUpdateFolderWithContext(ctx context.Context, in *workdocs.UpdateFolderInput, _ ...request.Option) (*workdocs.UpdateFolderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateFolder cancelled", ctx.Err())
	default:
		return d.UpdateFolder(in)
	}
}

func (d *WorkDocsDouble) UpdateUser(i0 *workdocs.UpdateUserInput) (r0 *workdocs.UpdateUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUser", i0)
	r0, _ = returns[0].(*workdocs.UpdateUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) UpdateUserRequest(i0 *workdocs.UpdateUserInput) (r0 *request.Request, r1 *workdocs.UpdateUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workdocs.UpdateUserOutput)
	return
}

func (d *WorkDocsDouble) UpdateUserWithContext(i0 context.Context, i1 *workdocs.UpdateUserInput, i2 ...request.Option) (r0 *workdocs.UpdateUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workdocs.UpdateUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkDocsDouble) fakeUpdateUserWithContext(ctx context.Context, in *workdocs.UpdateUserInput, _ ...request.Option) (*workdocs.UpdateUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateUser cancelled", ctx.Err())
	default:
		return d.UpdateUser(in)
	}
}
