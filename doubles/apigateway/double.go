// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:11:07+11:00

// Package apigatewaydouble provides a TestDouble implementation of apigatewayiface.APIGatewayAPI
package apigatewaydouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/apigateway"
	"github.com/aws/aws-sdk-go/service/apigateway/apigatewayiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// APIGatewayDouble is TestDouble for apigatewayiface.APIGatewayAPI
type APIGatewayDouble struct {
	apigatewayiface.APIGatewayAPI
	*awsdouble.AWSTestDouble
}

// Constructor for APIGatewayDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *APIGatewayDouble {
	result := &APIGatewayDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*apigatewayiface.APIGatewayAPI)(nil), configurators...)
	return result
}

func (d *APIGatewayDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *APIGatewayDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CreateApiKeyWithContext":
		return m.Fake(d.fakeCreateApiKeyWithContext)

	case "CreateAuthorizerWithContext":
		return m.Fake(d.fakeCreateAuthorizerWithContext)

	case "CreateBasePathMappingWithContext":
		return m.Fake(d.fakeCreateBasePathMappingWithContext)

	case "CreateDeploymentWithContext":
		return m.Fake(d.fakeCreateDeploymentWithContext)

	case "CreateDocumentationPartWithContext":
		return m.Fake(d.fakeCreateDocumentationPartWithContext)

	case "CreateDocumentationVersionWithContext":
		return m.Fake(d.fakeCreateDocumentationVersionWithContext)

	case "CreateDomainNameWithContext":
		return m.Fake(d.fakeCreateDomainNameWithContext)

	case "CreateModelWithContext":
		return m.Fake(d.fakeCreateModelWithContext)

	case "CreateRequestValidatorWithContext":
		return m.Fake(d.fakeCreateRequestValidatorWithContext)

	case "CreateResourceWithContext":
		return m.Fake(d.fakeCreateResourceWithContext)

	case "CreateRestApiWithContext":
		return m.Fake(d.fakeCreateRestApiWithContext)

	case "CreateStageWithContext":
		return m.Fake(d.fakeCreateStageWithContext)

	case "CreateUsagePlanKeyWithContext":
		return m.Fake(d.fakeCreateUsagePlanKeyWithContext)

	case "CreateUsagePlanWithContext":
		return m.Fake(d.fakeCreateUsagePlanWithContext)

	case "CreateVpcLinkWithContext":
		return m.Fake(d.fakeCreateVpcLinkWithContext)

	case "DeleteApiKeyWithContext":
		return m.Fake(d.fakeDeleteApiKeyWithContext)

	case "DeleteAuthorizerWithContext":
		return m.Fake(d.fakeDeleteAuthorizerWithContext)

	case "DeleteBasePathMappingWithContext":
		return m.Fake(d.fakeDeleteBasePathMappingWithContext)

	case "DeleteClientCertificateWithContext":
		return m.Fake(d.fakeDeleteClientCertificateWithContext)

	case "DeleteDeploymentWithContext":
		return m.Fake(d.fakeDeleteDeploymentWithContext)

	case "DeleteDocumentationPartWithContext":
		return m.Fake(d.fakeDeleteDocumentationPartWithContext)

	case "DeleteDocumentationVersionWithContext":
		return m.Fake(d.fakeDeleteDocumentationVersionWithContext)

	case "DeleteDomainNameWithContext":
		return m.Fake(d.fakeDeleteDomainNameWithContext)

	case "DeleteGatewayResponseWithContext":
		return m.Fake(d.fakeDeleteGatewayResponseWithContext)

	case "DeleteIntegrationResponseWithContext":
		return m.Fake(d.fakeDeleteIntegrationResponseWithContext)

	case "DeleteIntegrationWithContext":
		return m.Fake(d.fakeDeleteIntegrationWithContext)

	case "DeleteMethodResponseWithContext":
		return m.Fake(d.fakeDeleteMethodResponseWithContext)

	case "DeleteMethodWithContext":
		return m.Fake(d.fakeDeleteMethodWithContext)

	case "DeleteModelWithContext":
		return m.Fake(d.fakeDeleteModelWithContext)

	case "DeleteRequestValidatorWithContext":
		return m.Fake(d.fakeDeleteRequestValidatorWithContext)

	case "DeleteResourceWithContext":
		return m.Fake(d.fakeDeleteResourceWithContext)

	case "DeleteRestApiWithContext":
		return m.Fake(d.fakeDeleteRestApiWithContext)

	case "DeleteStageWithContext":
		return m.Fake(d.fakeDeleteStageWithContext)

	case "DeleteUsagePlanKeyWithContext":
		return m.Fake(d.fakeDeleteUsagePlanKeyWithContext)

	case "DeleteUsagePlanWithContext":
		return m.Fake(d.fakeDeleteUsagePlanWithContext)

	case "DeleteVpcLinkWithContext":
		return m.Fake(d.fakeDeleteVpcLinkWithContext)

	case "FlushStageAuthorizersCacheWithContext":
		return m.Fake(d.fakeFlushStageAuthorizersCacheWithContext)

	case "FlushStageCacheWithContext":
		return m.Fake(d.fakeFlushStageCacheWithContext)

	case "GenerateClientCertificateWithContext":
		return m.Fake(d.fakeGenerateClientCertificateWithContext)

	case "GetAccountWithContext":
		return m.Fake(d.fakeGetAccountWithContext)

	case "GetApiKeyWithContext":
		return m.Fake(d.fakeGetApiKeyWithContext)

	case "GetApiKeysPages":
		return m.Fake(d.fakeGetApiKeysPages)

	case "GetApiKeysPagesWithContext":
		return m.Fake(d.fakeGetApiKeysPagesWithContext)

	case "GetApiKeysWithContext":
		return m.Fake(d.fakeGetApiKeysWithContext)

	case "GetAuthorizerWithContext":
		return m.Fake(d.fakeGetAuthorizerWithContext)

	case "GetAuthorizersWithContext":
		return m.Fake(d.fakeGetAuthorizersWithContext)

	case "GetBasePathMappingWithContext":
		return m.Fake(d.fakeGetBasePathMappingWithContext)

	case "GetBasePathMappingsPages":
		return m.Fake(d.fakeGetBasePathMappingsPages)

	case "GetBasePathMappingsPagesWithContext":
		return m.Fake(d.fakeGetBasePathMappingsPagesWithContext)

	case "GetBasePathMappingsWithContext":
		return m.Fake(d.fakeGetBasePathMappingsWithContext)

	case "GetClientCertificateWithContext":
		return m.Fake(d.fakeGetClientCertificateWithContext)

	case "GetClientCertificatesPages":
		return m.Fake(d.fakeGetClientCertificatesPages)

	case "GetClientCertificatesPagesWithContext":
		return m.Fake(d.fakeGetClientCertificatesPagesWithContext)

	case "GetClientCertificatesWithContext":
		return m.Fake(d.fakeGetClientCertificatesWithContext)

	case "GetDeploymentWithContext":
		return m.Fake(d.fakeGetDeploymentWithContext)

	case "GetDeploymentsPages":
		return m.Fake(d.fakeGetDeploymentsPages)

	case "GetDeploymentsPagesWithContext":
		return m.Fake(d.fakeGetDeploymentsPagesWithContext)

	case "GetDeploymentsWithContext":
		return m.Fake(d.fakeGetDeploymentsWithContext)

	case "GetDocumentationPartWithContext":
		return m.Fake(d.fakeGetDocumentationPartWithContext)

	case "GetDocumentationPartsWithContext":
		return m.Fake(d.fakeGetDocumentationPartsWithContext)

	case "GetDocumentationVersionWithContext":
		return m.Fake(d.fakeGetDocumentationVersionWithContext)

	case "GetDocumentationVersionsWithContext":
		return m.Fake(d.fakeGetDocumentationVersionsWithContext)

	case "GetDomainNameWithContext":
		return m.Fake(d.fakeGetDomainNameWithContext)

	case "GetDomainNamesPages":
		return m.Fake(d.fakeGetDomainNamesPages)

	case "GetDomainNamesPagesWithContext":
		return m.Fake(d.fakeGetDomainNamesPagesWithContext)

	case "GetDomainNamesWithContext":
		return m.Fake(d.fakeGetDomainNamesWithContext)

	case "GetExportWithContext":
		return m.Fake(d.fakeGetExportWithContext)

	case "GetGatewayResponseWithContext":
		return m.Fake(d.fakeGetGatewayResponseWithContext)

	case "GetGatewayResponsesWithContext":
		return m.Fake(d.fakeGetGatewayResponsesWithContext)

	case "GetIntegrationResponseWithContext":
		return m.Fake(d.fakeGetIntegrationResponseWithContext)

	case "GetIntegrationWithContext":
		return m.Fake(d.fakeGetIntegrationWithContext)

	case "GetMethodResponseWithContext":
		return m.Fake(d.fakeGetMethodResponseWithContext)

	case "GetMethodWithContext":
		return m.Fake(d.fakeGetMethodWithContext)

	case "GetModelTemplateWithContext":
		return m.Fake(d.fakeGetModelTemplateWithContext)

	case "GetModelWithContext":
		return m.Fake(d.fakeGetModelWithContext)

	case "GetModelsPages":
		return m.Fake(d.fakeGetModelsPages)

	case "GetModelsPagesWithContext":
		return m.Fake(d.fakeGetModelsPagesWithContext)

	case "GetModelsWithContext":
		return m.Fake(d.fakeGetModelsWithContext)

	case "GetRequestValidatorWithContext":
		return m.Fake(d.fakeGetRequestValidatorWithContext)

	case "GetRequestValidatorsWithContext":
		return m.Fake(d.fakeGetRequestValidatorsWithContext)

	case "GetResourceWithContext":
		return m.Fake(d.fakeGetResourceWithContext)

	case "GetResourcesPages":
		return m.Fake(d.fakeGetResourcesPages)

	case "GetResourcesPagesWithContext":
		return m.Fake(d.fakeGetResourcesPagesWithContext)

	case "GetResourcesWithContext":
		return m.Fake(d.fakeGetResourcesWithContext)

	case "GetRestApiWithContext":
		return m.Fake(d.fakeGetRestApiWithContext)

	case "GetRestApisPages":
		return m.Fake(d.fakeGetRestApisPages)

	case "GetRestApisPagesWithContext":
		return m.Fake(d.fakeGetRestApisPagesWithContext)

	case "GetRestApisWithContext":
		return m.Fake(d.fakeGetRestApisWithContext)

	case "GetSdkTypeWithContext":
		return m.Fake(d.fakeGetSdkTypeWithContext)

	case "GetSdkTypesWithContext":
		return m.Fake(d.fakeGetSdkTypesWithContext)

	case "GetSdkWithContext":
		return m.Fake(d.fakeGetSdkWithContext)

	case "GetStageWithContext":
		return m.Fake(d.fakeGetStageWithContext)

	case "GetStagesWithContext":
		return m.Fake(d.fakeGetStagesWithContext)

	case "GetTagsWithContext":
		return m.Fake(d.fakeGetTagsWithContext)

	case "GetUsagePages":
		return m.Fake(d.fakeGetUsagePages)

	case "GetUsagePagesWithContext":
		return m.Fake(d.fakeGetUsagePagesWithContext)

	case "GetUsagePlanKeyWithContext":
		return m.Fake(d.fakeGetUsagePlanKeyWithContext)

	case "GetUsagePlanKeysPages":
		return m.Fake(d.fakeGetUsagePlanKeysPages)

	case "GetUsagePlanKeysPagesWithContext":
		return m.Fake(d.fakeGetUsagePlanKeysPagesWithContext)

	case "GetUsagePlanKeysWithContext":
		return m.Fake(d.fakeGetUsagePlanKeysWithContext)

	case "GetUsagePlanWithContext":
		return m.Fake(d.fakeGetUsagePlanWithContext)

	case "GetUsagePlansPages":
		return m.Fake(d.fakeGetUsagePlansPages)

	case "GetUsagePlansPagesWithContext":
		return m.Fake(d.fakeGetUsagePlansPagesWithContext)

	case "GetUsagePlansWithContext":
		return m.Fake(d.fakeGetUsagePlansWithContext)

	case "GetUsageWithContext":
		return m.Fake(d.fakeGetUsageWithContext)

	case "GetVpcLinkWithContext":
		return m.Fake(d.fakeGetVpcLinkWithContext)

	case "GetVpcLinksPages":
		return m.Fake(d.fakeGetVpcLinksPages)

	case "GetVpcLinksPagesWithContext":
		return m.Fake(d.fakeGetVpcLinksPagesWithContext)

	case "GetVpcLinksWithContext":
		return m.Fake(d.fakeGetVpcLinksWithContext)

	case "ImportApiKeysWithContext":
		return m.Fake(d.fakeImportApiKeysWithContext)

	case "ImportDocumentationPartsWithContext":
		return m.Fake(d.fakeImportDocumentationPartsWithContext)

	case "ImportRestApiWithContext":
		return m.Fake(d.fakeImportRestApiWithContext)

	case "PutGatewayResponseWithContext":
		return m.Fake(d.fakePutGatewayResponseWithContext)

	case "PutIntegrationResponseWithContext":
		return m.Fake(d.fakePutIntegrationResponseWithContext)

	case "PutIntegrationWithContext":
		return m.Fake(d.fakePutIntegrationWithContext)

	case "PutMethodResponseWithContext":
		return m.Fake(d.fakePutMethodResponseWithContext)

	case "PutMethodWithContext":
		return m.Fake(d.fakePutMethodWithContext)

	case "PutRestApiWithContext":
		return m.Fake(d.fakePutRestApiWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "TestInvokeAuthorizerWithContext":
		return m.Fake(d.fakeTestInvokeAuthorizerWithContext)

	case "TestInvokeMethodWithContext":
		return m.Fake(d.fakeTestInvokeMethodWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateAccountWithContext":
		return m.Fake(d.fakeUpdateAccountWithContext)

	case "UpdateApiKeyWithContext":
		return m.Fake(d.fakeUpdateApiKeyWithContext)

	case "UpdateAuthorizerWithContext":
		return m.Fake(d.fakeUpdateAuthorizerWithContext)

	case "UpdateBasePathMappingWithContext":
		return m.Fake(d.fakeUpdateBasePathMappingWithContext)

	case "UpdateClientCertificateWithContext":
		return m.Fake(d.fakeUpdateClientCertificateWithContext)

	case "UpdateDeploymentWithContext":
		return m.Fake(d.fakeUpdateDeploymentWithContext)

	case "UpdateDocumentationPartWithContext":
		return m.Fake(d.fakeUpdateDocumentationPartWithContext)

	case "UpdateDocumentationVersionWithContext":
		return m.Fake(d.fakeUpdateDocumentationVersionWithContext)

	case "UpdateDomainNameWithContext":
		return m.Fake(d.fakeUpdateDomainNameWithContext)

	case "UpdateGatewayResponseWithContext":
		return m.Fake(d.fakeUpdateGatewayResponseWithContext)

	case "UpdateIntegrationResponseWithContext":
		return m.Fake(d.fakeUpdateIntegrationResponseWithContext)

	case "UpdateIntegrationWithContext":
		return m.Fake(d.fakeUpdateIntegrationWithContext)

	case "UpdateMethodResponseWithContext":
		return m.Fake(d.fakeUpdateMethodResponseWithContext)

	case "UpdateMethodWithContext":
		return m.Fake(d.fakeUpdateMethodWithContext)

	case "UpdateModelWithContext":
		return m.Fake(d.fakeUpdateModelWithContext)

	case "UpdateRequestValidatorWithContext":
		return m.Fake(d.fakeUpdateRequestValidatorWithContext)

	case "UpdateResourceWithContext":
		return m.Fake(d.fakeUpdateResourceWithContext)

	case "UpdateRestApiWithContext":
		return m.Fake(d.fakeUpdateRestApiWithContext)

	case "UpdateStageWithContext":
		return m.Fake(d.fakeUpdateStageWithContext)

	case "UpdateUsagePlanWithContext":
		return m.Fake(d.fakeUpdateUsagePlanWithContext)

	case "UpdateUsageWithContext":
		return m.Fake(d.fakeUpdateUsageWithContext)

	case "UpdateVpcLinkWithContext":
		return m.Fake(d.fakeUpdateVpcLinkWithContext)

	default:
		return nil
	}
}

func (d *APIGatewayDouble) CreateApiKey(i0 *apigateway.CreateApiKeyInput) (r0 *apigateway.ApiKey, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApiKey", i0)
	r0, _ = returns[0].(*apigateway.ApiKey)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) CreateApiKeyRequest(i0 *apigateway.CreateApiKeyInput) (r0 *request.Request, r1 *apigateway.ApiKey) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApiKeyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.ApiKey)
	return
}

func (d *APIGatewayDouble) CreateApiKeyWithContext(i0 context.Context, i1 *apigateway.CreateApiKeyInput, i2 ...request.Option) (r0 *apigateway.ApiKey, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApiKeyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.ApiKey)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeCreateApiKeyWithContext(ctx context.Context, in *apigateway.CreateApiKeyInput, _ ...request.Option) (*apigateway.ApiKey, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateApiKey cancelled", ctx.Err())
	default:
		return d.CreateApiKey(in)
	}
}

func (d *APIGatewayDouble) CreateAuthorizer(i0 *apigateway.CreateAuthorizerInput) (r0 *apigateway.Authorizer, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAuthorizer", i0)
	r0, _ = returns[0].(*apigateway.Authorizer)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) CreateAuthorizerRequest(i0 *apigateway.CreateAuthorizerInput) (r0 *request.Request, r1 *apigateway.Authorizer) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAuthorizerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.Authorizer)
	return
}

func (d *APIGatewayDouble) CreateAuthorizerWithContext(i0 context.Context, i1 *apigateway.CreateAuthorizerInput, i2 ...request.Option) (r0 *apigateway.Authorizer, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAuthorizerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.Authorizer)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeCreateAuthorizerWithContext(ctx context.Context, in *apigateway.CreateAuthorizerInput, _ ...request.Option) (*apigateway.Authorizer, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateAuthorizer cancelled", ctx.Err())
	default:
		return d.CreateAuthorizer(in)
	}
}

func (d *APIGatewayDouble) CreateBasePathMapping(i0 *apigateway.CreateBasePathMappingInput) (r0 *apigateway.BasePathMapping, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBasePathMapping", i0)
	r0, _ = returns[0].(*apigateway.BasePathMapping)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) CreateBasePathMappingRequest(i0 *apigateway.CreateBasePathMappingInput) (r0 *request.Request, r1 *apigateway.BasePathMapping) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBasePathMappingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.BasePathMapping)
	return
}

func (d *APIGatewayDouble) CreateBasePathMappingWithContext(i0 context.Context, i1 *apigateway.CreateBasePathMappingInput, i2 ...request.Option) (r0 *apigateway.BasePathMapping, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBasePathMappingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.BasePathMapping)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeCreateBasePathMappingWithContext(ctx context.Context, in *apigateway.CreateBasePathMappingInput, _ ...request.Option) (*apigateway.BasePathMapping, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateBasePathMapping cancelled", ctx.Err())
	default:
		return d.CreateBasePathMapping(in)
	}
}

func (d *APIGatewayDouble) CreateDeployment(i0 *apigateway.CreateDeploymentInput) (r0 *apigateway.Deployment, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDeployment", i0)
	r0, _ = returns[0].(*apigateway.Deployment)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) CreateDeploymentRequest(i0 *apigateway.CreateDeploymentInput) (r0 *request.Request, r1 *apigateway.Deployment) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDeploymentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.Deployment)
	return
}

func (d *APIGatewayDouble) CreateDeploymentWithContext(i0 context.Context, i1 *apigateway.CreateDeploymentInput, i2 ...request.Option) (r0 *apigateway.Deployment, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDeploymentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.Deployment)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeCreateDeploymentWithContext(ctx context.Context, in *apigateway.CreateDeploymentInput, _ ...request.Option) (*apigateway.Deployment, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDeployment cancelled", ctx.Err())
	default:
		return d.CreateDeployment(in)
	}
}

func (d *APIGatewayDouble) CreateDocumentationPart(i0 *apigateway.CreateDocumentationPartInput) (r0 *apigateway.DocumentationPart, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDocumentationPart", i0)
	r0, _ = returns[0].(*apigateway.DocumentationPart)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) CreateDocumentationPartRequest(i0 *apigateway.CreateDocumentationPartInput) (r0 *request.Request, r1 *apigateway.DocumentationPart) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDocumentationPartRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.DocumentationPart)
	return
}

func (d *APIGatewayDouble) CreateDocumentationPartWithContext(i0 context.Context, i1 *apigateway.CreateDocumentationPartInput, i2 ...request.Option) (r0 *apigateway.DocumentationPart, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDocumentationPartWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.DocumentationPart)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeCreateDocumentationPartWithContext(ctx context.Context, in *apigateway.CreateDocumentationPartInput, _ ...request.Option) (*apigateway.DocumentationPart, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDocumentationPart cancelled", ctx.Err())
	default:
		return d.CreateDocumentationPart(in)
	}
}

func (d *APIGatewayDouble) CreateDocumentationVersion(i0 *apigateway.CreateDocumentationVersionInput) (r0 *apigateway.DocumentationVersion, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDocumentationVersion", i0)
	r0, _ = returns[0].(*apigateway.DocumentationVersion)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) CreateDocumentationVersionRequest(i0 *apigateway.CreateDocumentationVersionInput) (r0 *request.Request, r1 *apigateway.DocumentationVersion) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDocumentationVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.DocumentationVersion)
	return
}

func (d *APIGatewayDouble) CreateDocumentationVersionWithContext(i0 context.Context, i1 *apigateway.CreateDocumentationVersionInput, i2 ...request.Option) (r0 *apigateway.DocumentationVersion, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDocumentationVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.DocumentationVersion)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeCreateDocumentationVersionWithContext(ctx context.Context, in *apigateway.CreateDocumentationVersionInput, _ ...request.Option) (*apigateway.DocumentationVersion, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDocumentationVersion cancelled", ctx.Err())
	default:
		return d.CreateDocumentationVersion(in)
	}
}

func (d *APIGatewayDouble) CreateDomainName(i0 *apigateway.CreateDomainNameInput) (r0 *apigateway.DomainName, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDomainName", i0)
	r0, _ = returns[0].(*apigateway.DomainName)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) CreateDomainNameRequest(i0 *apigateway.CreateDomainNameInput) (r0 *request.Request, r1 *apigateway.DomainName) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDomainNameRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.DomainName)
	return
}

func (d *APIGatewayDouble) CreateDomainNameWithContext(i0 context.Context, i1 *apigateway.CreateDomainNameInput, i2 ...request.Option) (r0 *apigateway.DomainName, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDomainNameWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.DomainName)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeCreateDomainNameWithContext(ctx context.Context, in *apigateway.CreateDomainNameInput, _ ...request.Option) (*apigateway.DomainName, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDomainName cancelled", ctx.Err())
	default:
		return d.CreateDomainName(in)
	}
}

func (d *APIGatewayDouble) CreateModel(i0 *apigateway.CreateModelInput) (r0 *apigateway.Model, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateModel", i0)
	r0, _ = returns[0].(*apigateway.Model)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) CreateModelRequest(i0 *apigateway.CreateModelInput) (r0 *request.Request, r1 *apigateway.Model) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateModelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.Model)
	return
}

func (d *APIGatewayDouble) CreateModelWithContext(i0 context.Context, i1 *apigateway.CreateModelInput, i2 ...request.Option) (r0 *apigateway.Model, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateModelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.Model)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeCreateModelWithContext(ctx context.Context, in *apigateway.CreateModelInput, _ ...request.Option) (*apigateway.Model, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateModel cancelled", ctx.Err())
	default:
		return d.CreateModel(in)
	}
}

func (d *APIGatewayDouble) CreateRequestValidator(i0 *apigateway.CreateRequestValidatorInput) (r0 *apigateway.UpdateRequestValidatorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRequestValidator", i0)
	r0, _ = returns[0].(*apigateway.UpdateRequestValidatorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) CreateRequestValidatorRequest(i0 *apigateway.CreateRequestValidatorInput) (r0 *request.Request, r1 *apigateway.UpdateRequestValidatorOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRequestValidatorRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.UpdateRequestValidatorOutput)
	return
}

func (d *APIGatewayDouble) CreateRequestValidatorWithContext(i0 context.Context, i1 *apigateway.CreateRequestValidatorInput, i2 ...request.Option) (r0 *apigateway.UpdateRequestValidatorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRequestValidatorWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.UpdateRequestValidatorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeCreateRequestValidatorWithContext(ctx context.Context, in *apigateway.CreateRequestValidatorInput, _ ...request.Option) (*apigateway.UpdateRequestValidatorOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateRequestValidator cancelled", ctx.Err())
	default:
		return d.CreateRequestValidator(in)
	}
}

func (d *APIGatewayDouble) CreateResource(i0 *apigateway.CreateResourceInput) (r0 *apigateway.Resource, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateResource", i0)
	r0, _ = returns[0].(*apigateway.Resource)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) CreateResourceRequest(i0 *apigateway.CreateResourceInput) (r0 *request.Request, r1 *apigateway.Resource) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.Resource)
	return
}

func (d *APIGatewayDouble) CreateResourceWithContext(i0 context.Context, i1 *apigateway.CreateResourceInput, i2 ...request.Option) (r0 *apigateway.Resource, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.Resource)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeCreateResourceWithContext(ctx context.Context, in *apigateway.CreateResourceInput, _ ...request.Option) (*apigateway.Resource, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateResource cancelled", ctx.Err())
	default:
		return d.CreateResource(in)
	}
}

func (d *APIGatewayDouble) CreateRestApi(i0 *apigateway.CreateRestApiInput) (r0 *apigateway.RestApi, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRestApi", i0)
	r0, _ = returns[0].(*apigateway.RestApi)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) CreateRestApiRequest(i0 *apigateway.CreateRestApiInput) (r0 *request.Request, r1 *apigateway.RestApi) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRestApiRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.RestApi)
	return
}

func (d *APIGatewayDouble) CreateRestApiWithContext(i0 context.Context, i1 *apigateway.CreateRestApiInput, i2 ...request.Option) (r0 *apigateway.RestApi, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRestApiWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.RestApi)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeCreateRestApiWithContext(ctx context.Context, in *apigateway.CreateRestApiInput, _ ...request.Option) (*apigateway.RestApi, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateRestApi cancelled", ctx.Err())
	default:
		return d.CreateRestApi(in)
	}
}

func (d *APIGatewayDouble) CreateStage(i0 *apigateway.CreateStageInput) (r0 *apigateway.Stage, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStage", i0)
	r0, _ = returns[0].(*apigateway.Stage)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) CreateStageRequest(i0 *apigateway.CreateStageInput) (r0 *request.Request, r1 *apigateway.Stage) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.Stage)
	return
}

func (d *APIGatewayDouble) CreateStageWithContext(i0 context.Context, i1 *apigateway.CreateStageInput, i2 ...request.Option) (r0 *apigateway.Stage, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.Stage)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeCreateStageWithContext(ctx context.Context, in *apigateway.CreateStageInput, _ ...request.Option) (*apigateway.Stage, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateStage cancelled", ctx.Err())
	default:
		return d.CreateStage(in)
	}
}

func (d *APIGatewayDouble) CreateUsagePlan(i0 *apigateway.CreateUsagePlanInput) (r0 *apigateway.UsagePlan, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUsagePlan", i0)
	r0, _ = returns[0].(*apigateway.UsagePlan)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) CreateUsagePlanKey(i0 *apigateway.CreateUsagePlanKeyInput) (r0 *apigateway.UsagePlanKey, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUsagePlanKey", i0)
	r0, _ = returns[0].(*apigateway.UsagePlanKey)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) CreateUsagePlanKeyRequest(i0 *apigateway.CreateUsagePlanKeyInput) (r0 *request.Request, r1 *apigateway.UsagePlanKey) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUsagePlanKeyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.UsagePlanKey)
	return
}

func (d *APIGatewayDouble) CreateUsagePlanKeyWithContext(i0 context.Context, i1 *apigateway.CreateUsagePlanKeyInput, i2 ...request.Option) (r0 *apigateway.UsagePlanKey, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUsagePlanKeyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.UsagePlanKey)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeCreateUsagePlanKeyWithContext(ctx context.Context, in *apigateway.CreateUsagePlanKeyInput, _ ...request.Option) (*apigateway.UsagePlanKey, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateUsagePlanKey cancelled", ctx.Err())
	default:
		return d.CreateUsagePlanKey(in)
	}
}

func (d *APIGatewayDouble) CreateUsagePlanRequest(i0 *apigateway.CreateUsagePlanInput) (r0 *request.Request, r1 *apigateway.UsagePlan) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUsagePlanRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.UsagePlan)
	return
}

func (d *APIGatewayDouble) CreateUsagePlanWithContext(i0 context.Context, i1 *apigateway.CreateUsagePlanInput, i2 ...request.Option) (r0 *apigateway.UsagePlan, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUsagePlanWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.UsagePlan)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeCreateUsagePlanWithContext(ctx context.Context, in *apigateway.CreateUsagePlanInput, _ ...request.Option) (*apigateway.UsagePlan, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateUsagePlan cancelled", ctx.Err())
	default:
		return d.CreateUsagePlan(in)
	}
}

func (d *APIGatewayDouble) CreateVpcLink(i0 *apigateway.CreateVpcLinkInput) (r0 *apigateway.UpdateVpcLinkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVpcLink", i0)
	r0, _ = returns[0].(*apigateway.UpdateVpcLinkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) CreateVpcLinkRequest(i0 *apigateway.CreateVpcLinkInput) (r0 *request.Request, r1 *apigateway.UpdateVpcLinkOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVpcLinkRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.UpdateVpcLinkOutput)
	return
}

func (d *APIGatewayDouble) CreateVpcLinkWithContext(i0 context.Context, i1 *apigateway.CreateVpcLinkInput, i2 ...request.Option) (r0 *apigateway.UpdateVpcLinkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVpcLinkWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.UpdateVpcLinkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeCreateVpcLinkWithContext(ctx context.Context, in *apigateway.CreateVpcLinkInput, _ ...request.Option) (*apigateway.UpdateVpcLinkOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateVpcLink cancelled", ctx.Err())
	default:
		return d.CreateVpcLink(in)
	}
}

func (d *APIGatewayDouble) DeleteApiKey(i0 *apigateway.DeleteApiKeyInput) (r0 *apigateway.DeleteApiKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApiKey", i0)
	r0, _ = returns[0].(*apigateway.DeleteApiKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) DeleteApiKeyRequest(i0 *apigateway.DeleteApiKeyInput) (r0 *request.Request, r1 *apigateway.DeleteApiKeyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApiKeyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.DeleteApiKeyOutput)
	return
}

func (d *APIGatewayDouble) DeleteApiKeyWithContext(i0 context.Context, i1 *apigateway.DeleteApiKeyInput, i2 ...request.Option) (r0 *apigateway.DeleteApiKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApiKeyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.DeleteApiKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeDeleteApiKeyWithContext(ctx context.Context, in *apigateway.DeleteApiKeyInput, _ ...request.Option) (*apigateway.DeleteApiKeyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteApiKey cancelled", ctx.Err())
	default:
		return d.DeleteApiKey(in)
	}
}

func (d *APIGatewayDouble) DeleteAuthorizer(i0 *apigateway.DeleteAuthorizerInput) (r0 *apigateway.DeleteAuthorizerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAuthorizer", i0)
	r0, _ = returns[0].(*apigateway.DeleteAuthorizerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) DeleteAuthorizerRequest(i0 *apigateway.DeleteAuthorizerInput) (r0 *request.Request, r1 *apigateway.DeleteAuthorizerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAuthorizerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.DeleteAuthorizerOutput)
	return
}

func (d *APIGatewayDouble) DeleteAuthorizerWithContext(i0 context.Context, i1 *apigateway.DeleteAuthorizerInput, i2 ...request.Option) (r0 *apigateway.DeleteAuthorizerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAuthorizerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.DeleteAuthorizerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeDeleteAuthorizerWithContext(ctx context.Context, in *apigateway.DeleteAuthorizerInput, _ ...request.Option) (*apigateway.DeleteAuthorizerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteAuthorizer cancelled", ctx.Err())
	default:
		return d.DeleteAuthorizer(in)
	}
}

func (d *APIGatewayDouble) DeleteBasePathMapping(i0 *apigateway.DeleteBasePathMappingInput) (r0 *apigateway.DeleteBasePathMappingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBasePathMapping", i0)
	r0, _ = returns[0].(*apigateway.DeleteBasePathMappingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) DeleteBasePathMappingRequest(i0 *apigateway.DeleteBasePathMappingInput) (r0 *request.Request, r1 *apigateway.DeleteBasePathMappingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBasePathMappingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.DeleteBasePathMappingOutput)
	return
}

func (d *APIGatewayDouble) DeleteBasePathMappingWithContext(i0 context.Context, i1 *apigateway.DeleteBasePathMappingInput, i2 ...request.Option) (r0 *apigateway.DeleteBasePathMappingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBasePathMappingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.DeleteBasePathMappingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeDeleteBasePathMappingWithContext(ctx context.Context, in *apigateway.DeleteBasePathMappingInput, _ ...request.Option) (*apigateway.DeleteBasePathMappingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteBasePathMapping cancelled", ctx.Err())
	default:
		return d.DeleteBasePathMapping(in)
	}
}

func (d *APIGatewayDouble) DeleteClientCertificate(i0 *apigateway.DeleteClientCertificateInput) (r0 *apigateway.DeleteClientCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteClientCertificate", i0)
	r0, _ = returns[0].(*apigateway.DeleteClientCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) DeleteClientCertificateRequest(i0 *apigateway.DeleteClientCertificateInput) (r0 *request.Request, r1 *apigateway.DeleteClientCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteClientCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.DeleteClientCertificateOutput)
	return
}

func (d *APIGatewayDouble) DeleteClientCertificateWithContext(i0 context.Context, i1 *apigateway.DeleteClientCertificateInput, i2 ...request.Option) (r0 *apigateway.DeleteClientCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteClientCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.DeleteClientCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeDeleteClientCertificateWithContext(ctx context.Context, in *apigateway.DeleteClientCertificateInput, _ ...request.Option) (*apigateway.DeleteClientCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteClientCertificate cancelled", ctx.Err())
	default:
		return d.DeleteClientCertificate(in)
	}
}

func (d *APIGatewayDouble) DeleteDeployment(i0 *apigateway.DeleteDeploymentInput) (r0 *apigateway.DeleteDeploymentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDeployment", i0)
	r0, _ = returns[0].(*apigateway.DeleteDeploymentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) DeleteDeploymentRequest(i0 *apigateway.DeleteDeploymentInput) (r0 *request.Request, r1 *apigateway.DeleteDeploymentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDeploymentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.DeleteDeploymentOutput)
	return
}

func (d *APIGatewayDouble) DeleteDeploymentWithContext(i0 context.Context, i1 *apigateway.DeleteDeploymentInput, i2 ...request.Option) (r0 *apigateway.DeleteDeploymentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDeploymentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.DeleteDeploymentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeDeleteDeploymentWithContext(ctx context.Context, in *apigateway.DeleteDeploymentInput, _ ...request.Option) (*apigateway.DeleteDeploymentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDeployment cancelled", ctx.Err())
	default:
		return d.DeleteDeployment(in)
	}
}

func (d *APIGatewayDouble) DeleteDocumentationPart(i0 *apigateway.DeleteDocumentationPartInput) (r0 *apigateway.DeleteDocumentationPartOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDocumentationPart", i0)
	r0, _ = returns[0].(*apigateway.DeleteDocumentationPartOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) DeleteDocumentationPartRequest(i0 *apigateway.DeleteDocumentationPartInput) (r0 *request.Request, r1 *apigateway.DeleteDocumentationPartOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDocumentationPartRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.DeleteDocumentationPartOutput)
	return
}

func (d *APIGatewayDouble) DeleteDocumentationPartWithContext(i0 context.Context, i1 *apigateway.DeleteDocumentationPartInput, i2 ...request.Option) (r0 *apigateway.DeleteDocumentationPartOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDocumentationPartWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.DeleteDocumentationPartOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeDeleteDocumentationPartWithContext(ctx context.Context, in *apigateway.DeleteDocumentationPartInput, _ ...request.Option) (*apigateway.DeleteDocumentationPartOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDocumentationPart cancelled", ctx.Err())
	default:
		return d.DeleteDocumentationPart(in)
	}
}

func (d *APIGatewayDouble) DeleteDocumentationVersion(i0 *apigateway.DeleteDocumentationVersionInput) (r0 *apigateway.DeleteDocumentationVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDocumentationVersion", i0)
	r0, _ = returns[0].(*apigateway.DeleteDocumentationVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) DeleteDocumentationVersionRequest(i0 *apigateway.DeleteDocumentationVersionInput) (r0 *request.Request, r1 *apigateway.DeleteDocumentationVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDocumentationVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.DeleteDocumentationVersionOutput)
	return
}

func (d *APIGatewayDouble) DeleteDocumentationVersionWithContext(i0 context.Context, i1 *apigateway.DeleteDocumentationVersionInput, i2 ...request.Option) (r0 *apigateway.DeleteDocumentationVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDocumentationVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.DeleteDocumentationVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeDeleteDocumentationVersionWithContext(ctx context.Context, in *apigateway.DeleteDocumentationVersionInput, _ ...request.Option) (*apigateway.DeleteDocumentationVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDocumentationVersion cancelled", ctx.Err())
	default:
		return d.DeleteDocumentationVersion(in)
	}
}

func (d *APIGatewayDouble) DeleteDomainName(i0 *apigateway.DeleteDomainNameInput) (r0 *apigateway.DeleteDomainNameOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDomainName", i0)
	r0, _ = returns[0].(*apigateway.DeleteDomainNameOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) DeleteDomainNameRequest(i0 *apigateway.DeleteDomainNameInput) (r0 *request.Request, r1 *apigateway.DeleteDomainNameOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDomainNameRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.DeleteDomainNameOutput)
	return
}

func (d *APIGatewayDouble) DeleteDomainNameWithContext(i0 context.Context, i1 *apigateway.DeleteDomainNameInput, i2 ...request.Option) (r0 *apigateway.DeleteDomainNameOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDomainNameWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.DeleteDomainNameOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeDeleteDomainNameWithContext(ctx context.Context, in *apigateway.DeleteDomainNameInput, _ ...request.Option) (*apigateway.DeleteDomainNameOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDomainName cancelled", ctx.Err())
	default:
		return d.DeleteDomainName(in)
	}
}

func (d *APIGatewayDouble) DeleteGatewayResponse(i0 *apigateway.DeleteGatewayResponseInput) (r0 *apigateway.DeleteGatewayResponseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGatewayResponse", i0)
	r0, _ = returns[0].(*apigateway.DeleteGatewayResponseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) DeleteGatewayResponseRequest(i0 *apigateway.DeleteGatewayResponseInput) (r0 *request.Request, r1 *apigateway.DeleteGatewayResponseOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGatewayResponseRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.DeleteGatewayResponseOutput)
	return
}

func (d *APIGatewayDouble) DeleteGatewayResponseWithContext(i0 context.Context, i1 *apigateway.DeleteGatewayResponseInput, i2 ...request.Option) (r0 *apigateway.DeleteGatewayResponseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGatewayResponseWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.DeleteGatewayResponseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeDeleteGatewayResponseWithContext(ctx context.Context, in *apigateway.DeleteGatewayResponseInput, _ ...request.Option) (*apigateway.DeleteGatewayResponseOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteGatewayResponse cancelled", ctx.Err())
	default:
		return d.DeleteGatewayResponse(in)
	}
}

func (d *APIGatewayDouble) DeleteIntegration(i0 *apigateway.DeleteIntegrationInput) (r0 *apigateway.DeleteIntegrationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIntegration", i0)
	r0, _ = returns[0].(*apigateway.DeleteIntegrationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) DeleteIntegrationRequest(i0 *apigateway.DeleteIntegrationInput) (r0 *request.Request, r1 *apigateway.DeleteIntegrationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIntegrationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.DeleteIntegrationOutput)
	return
}

func (d *APIGatewayDouble) DeleteIntegrationResponse(i0 *apigateway.DeleteIntegrationResponseInput) (r0 *apigateway.DeleteIntegrationResponseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIntegrationResponse", i0)
	r0, _ = returns[0].(*apigateway.DeleteIntegrationResponseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) DeleteIntegrationResponseRequest(i0 *apigateway.DeleteIntegrationResponseInput) (r0 *request.Request, r1 *apigateway.DeleteIntegrationResponseOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIntegrationResponseRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.DeleteIntegrationResponseOutput)
	return
}

func (d *APIGatewayDouble) DeleteIntegrationResponseWithContext(i0 context.Context, i1 *apigateway.DeleteIntegrationResponseInput, i2 ...request.Option) (r0 *apigateway.DeleteIntegrationResponseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIntegrationResponseWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.DeleteIntegrationResponseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeDeleteIntegrationResponseWithContext(ctx context.Context, in *apigateway.DeleteIntegrationResponseInput, _ ...request.Option) (*apigateway.DeleteIntegrationResponseOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteIntegrationResponse cancelled", ctx.Err())
	default:
		return d.DeleteIntegrationResponse(in)
	}
}

func (d *APIGatewayDouble) DeleteIntegrationWithContext(i0 context.Context, i1 *apigateway.DeleteIntegrationInput, i2 ...request.Option) (r0 *apigateway.DeleteIntegrationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIntegrationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.DeleteIntegrationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeDeleteIntegrationWithContext(ctx context.Context, in *apigateway.DeleteIntegrationInput, _ ...request.Option) (*apigateway.DeleteIntegrationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteIntegration cancelled", ctx.Err())
	default:
		return d.DeleteIntegration(in)
	}
}

func (d *APIGatewayDouble) DeleteMethod(i0 *apigateway.DeleteMethodInput) (r0 *apigateway.DeleteMethodOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMethod", i0)
	r0, _ = returns[0].(*apigateway.DeleteMethodOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) DeleteMethodRequest(i0 *apigateway.DeleteMethodInput) (r0 *request.Request, r1 *apigateway.DeleteMethodOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMethodRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.DeleteMethodOutput)
	return
}

func (d *APIGatewayDouble) DeleteMethodResponse(i0 *apigateway.DeleteMethodResponseInput) (r0 *apigateway.DeleteMethodResponseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMethodResponse", i0)
	r0, _ = returns[0].(*apigateway.DeleteMethodResponseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) DeleteMethodResponseRequest(i0 *apigateway.DeleteMethodResponseInput) (r0 *request.Request, r1 *apigateway.DeleteMethodResponseOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMethodResponseRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.DeleteMethodResponseOutput)
	return
}

func (d *APIGatewayDouble) DeleteMethodResponseWithContext(i0 context.Context, i1 *apigateway.DeleteMethodResponseInput, i2 ...request.Option) (r0 *apigateway.DeleteMethodResponseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMethodResponseWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.DeleteMethodResponseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeDeleteMethodResponseWithContext(ctx context.Context, in *apigateway.DeleteMethodResponseInput, _ ...request.Option) (*apigateway.DeleteMethodResponseOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteMethodResponse cancelled", ctx.Err())
	default:
		return d.DeleteMethodResponse(in)
	}
}

func (d *APIGatewayDouble) DeleteMethodWithContext(i0 context.Context, i1 *apigateway.DeleteMethodInput, i2 ...request.Option) (r0 *apigateway.DeleteMethodOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMethodWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.DeleteMethodOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeDeleteMethodWithContext(ctx context.Context, in *apigateway.DeleteMethodInput, _ ...request.Option) (*apigateway.DeleteMethodOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteMethod cancelled", ctx.Err())
	default:
		return d.DeleteMethod(in)
	}
}

func (d *APIGatewayDouble) DeleteModel(i0 *apigateway.DeleteModelInput) (r0 *apigateway.DeleteModelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteModel", i0)
	r0, _ = returns[0].(*apigateway.DeleteModelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) DeleteModelRequest(i0 *apigateway.DeleteModelInput) (r0 *request.Request, r1 *apigateway.DeleteModelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteModelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.DeleteModelOutput)
	return
}

func (d *APIGatewayDouble) DeleteModelWithContext(i0 context.Context, i1 *apigateway.DeleteModelInput, i2 ...request.Option) (r0 *apigateway.DeleteModelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteModelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.DeleteModelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeDeleteModelWithContext(ctx context.Context, in *apigateway.DeleteModelInput, _ ...request.Option) (*apigateway.DeleteModelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteModel cancelled", ctx.Err())
	default:
		return d.DeleteModel(in)
	}
}

func (d *APIGatewayDouble) DeleteRequestValidator(i0 *apigateway.DeleteRequestValidatorInput) (r0 *apigateway.DeleteRequestValidatorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRequestValidator", i0)
	r0, _ = returns[0].(*apigateway.DeleteRequestValidatorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) DeleteRequestValidatorRequest(i0 *apigateway.DeleteRequestValidatorInput) (r0 *request.Request, r1 *apigateway.DeleteRequestValidatorOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRequestValidatorRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.DeleteRequestValidatorOutput)
	return
}

func (d *APIGatewayDouble) DeleteRequestValidatorWithContext(i0 context.Context, i1 *apigateway.DeleteRequestValidatorInput, i2 ...request.Option) (r0 *apigateway.DeleteRequestValidatorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRequestValidatorWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.DeleteRequestValidatorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeDeleteRequestValidatorWithContext(ctx context.Context, in *apigateway.DeleteRequestValidatorInput, _ ...request.Option) (*apigateway.DeleteRequestValidatorOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRequestValidator cancelled", ctx.Err())
	default:
		return d.DeleteRequestValidator(in)
	}
}

func (d *APIGatewayDouble) DeleteResource(i0 *apigateway.DeleteResourceInput) (r0 *apigateway.DeleteResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResource", i0)
	r0, _ = returns[0].(*apigateway.DeleteResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) DeleteResourceRequest(i0 *apigateway.DeleteResourceInput) (r0 *request.Request, r1 *apigateway.DeleteResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.DeleteResourceOutput)
	return
}

func (d *APIGatewayDouble) DeleteResourceWithContext(i0 context.Context, i1 *apigateway.DeleteResourceInput, i2 ...request.Option) (r0 *apigateway.DeleteResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.DeleteResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeDeleteResourceWithContext(ctx context.Context, in *apigateway.DeleteResourceInput, _ ...request.Option) (*apigateway.DeleteResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteResource cancelled", ctx.Err())
	default:
		return d.DeleteResource(in)
	}
}

func (d *APIGatewayDouble) DeleteRestApi(i0 *apigateway.DeleteRestApiInput) (r0 *apigateway.DeleteRestApiOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRestApi", i0)
	r0, _ = returns[0].(*apigateway.DeleteRestApiOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) DeleteRestApiRequest(i0 *apigateway.DeleteRestApiInput) (r0 *request.Request, r1 *apigateway.DeleteRestApiOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRestApiRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.DeleteRestApiOutput)
	return
}

func (d *APIGatewayDouble) DeleteRestApiWithContext(i0 context.Context, i1 *apigateway.DeleteRestApiInput, i2 ...request.Option) (r0 *apigateway.DeleteRestApiOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRestApiWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.DeleteRestApiOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeDeleteRestApiWithContext(ctx context.Context, in *apigateway.DeleteRestApiInput, _ ...request.Option) (*apigateway.DeleteRestApiOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRestApi cancelled", ctx.Err())
	default:
		return d.DeleteRestApi(in)
	}
}

func (d *APIGatewayDouble) DeleteStage(i0 *apigateway.DeleteStageInput) (r0 *apigateway.DeleteStageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteStage", i0)
	r0, _ = returns[0].(*apigateway.DeleteStageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) DeleteStageRequest(i0 *apigateway.DeleteStageInput) (r0 *request.Request, r1 *apigateway.DeleteStageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteStageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.DeleteStageOutput)
	return
}

func (d *APIGatewayDouble) DeleteStageWithContext(i0 context.Context, i1 *apigateway.DeleteStageInput, i2 ...request.Option) (r0 *apigateway.DeleteStageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteStageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.DeleteStageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeDeleteStageWithContext(ctx context.Context, in *apigateway.DeleteStageInput, _ ...request.Option) (*apigateway.DeleteStageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteStage cancelled", ctx.Err())
	default:
		return d.DeleteStage(in)
	}
}

func (d *APIGatewayDouble) DeleteUsagePlan(i0 *apigateway.DeleteUsagePlanInput) (r0 *apigateway.DeleteUsagePlanOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUsagePlan", i0)
	r0, _ = returns[0].(*apigateway.DeleteUsagePlanOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) DeleteUsagePlanKey(i0 *apigateway.DeleteUsagePlanKeyInput) (r0 *apigateway.DeleteUsagePlanKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUsagePlanKey", i0)
	r0, _ = returns[0].(*apigateway.DeleteUsagePlanKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) DeleteUsagePlanKeyRequest(i0 *apigateway.DeleteUsagePlanKeyInput) (r0 *request.Request, r1 *apigateway.DeleteUsagePlanKeyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUsagePlanKeyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.DeleteUsagePlanKeyOutput)
	return
}

func (d *APIGatewayDouble) DeleteUsagePlanKeyWithContext(i0 context.Context, i1 *apigateway.DeleteUsagePlanKeyInput, i2 ...request.Option) (r0 *apigateway.DeleteUsagePlanKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUsagePlanKeyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.DeleteUsagePlanKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeDeleteUsagePlanKeyWithContext(ctx context.Context, in *apigateway.DeleteUsagePlanKeyInput, _ ...request.Option) (*apigateway.DeleteUsagePlanKeyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteUsagePlanKey cancelled", ctx.Err())
	default:
		return d.DeleteUsagePlanKey(in)
	}
}

func (d *APIGatewayDouble) DeleteUsagePlanRequest(i0 *apigateway.DeleteUsagePlanInput) (r0 *request.Request, r1 *apigateway.DeleteUsagePlanOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUsagePlanRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.DeleteUsagePlanOutput)
	return
}

func (d *APIGatewayDouble) DeleteUsagePlanWithContext(i0 context.Context, i1 *apigateway.DeleteUsagePlanInput, i2 ...request.Option) (r0 *apigateway.DeleteUsagePlanOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUsagePlanWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.DeleteUsagePlanOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeDeleteUsagePlanWithContext(ctx context.Context, in *apigateway.DeleteUsagePlanInput, _ ...request.Option) (*apigateway.DeleteUsagePlanOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteUsagePlan cancelled", ctx.Err())
	default:
		return d.DeleteUsagePlan(in)
	}
}

func (d *APIGatewayDouble) DeleteVpcLink(i0 *apigateway.DeleteVpcLinkInput) (r0 *apigateway.DeleteVpcLinkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVpcLink", i0)
	r0, _ = returns[0].(*apigateway.DeleteVpcLinkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) DeleteVpcLinkRequest(i0 *apigateway.DeleteVpcLinkInput) (r0 *request.Request, r1 *apigateway.DeleteVpcLinkOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVpcLinkRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.DeleteVpcLinkOutput)
	return
}

func (d *APIGatewayDouble) DeleteVpcLinkWithContext(i0 context.Context, i1 *apigateway.DeleteVpcLinkInput, i2 ...request.Option) (r0 *apigateway.DeleteVpcLinkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVpcLinkWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.DeleteVpcLinkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeDeleteVpcLinkWithContext(ctx context.Context, in *apigateway.DeleteVpcLinkInput, _ ...request.Option) (*apigateway.DeleteVpcLinkOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteVpcLink cancelled", ctx.Err())
	default:
		return d.DeleteVpcLink(in)
	}
}

func (d *APIGatewayDouble) FlushStageAuthorizersCache(i0 *apigateway.FlushStageAuthorizersCacheInput) (r0 *apigateway.FlushStageAuthorizersCacheOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("FlushStageAuthorizersCache", i0)
	r0, _ = returns[0].(*apigateway.FlushStageAuthorizersCacheOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) FlushStageAuthorizersCacheRequest(i0 *apigateway.FlushStageAuthorizersCacheInput) (r0 *request.Request, r1 *apigateway.FlushStageAuthorizersCacheOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("FlushStageAuthorizersCacheRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.FlushStageAuthorizersCacheOutput)
	return
}

func (d *APIGatewayDouble) FlushStageAuthorizersCacheWithContext(i0 context.Context, i1 *apigateway.FlushStageAuthorizersCacheInput, i2 ...request.Option) (r0 *apigateway.FlushStageAuthorizersCacheOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("FlushStageAuthorizersCacheWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.FlushStageAuthorizersCacheOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeFlushStageAuthorizersCacheWithContext(ctx context.Context, in *apigateway.FlushStageAuthorizersCacheInput, _ ...request.Option) (*apigateway.FlushStageAuthorizersCacheOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "FlushStageAuthorizersCache cancelled", ctx.Err())
	default:
		return d.FlushStageAuthorizersCache(in)
	}
}

func (d *APIGatewayDouble) FlushStageCache(i0 *apigateway.FlushStageCacheInput) (r0 *apigateway.FlushStageCacheOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("FlushStageCache", i0)
	r0, _ = returns[0].(*apigateway.FlushStageCacheOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) FlushStageCacheRequest(i0 *apigateway.FlushStageCacheInput) (r0 *request.Request, r1 *apigateway.FlushStageCacheOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("FlushStageCacheRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.FlushStageCacheOutput)
	return
}

func (d *APIGatewayDouble) FlushStageCacheWithContext(i0 context.Context, i1 *apigateway.FlushStageCacheInput, i2 ...request.Option) (r0 *apigateway.FlushStageCacheOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("FlushStageCacheWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.FlushStageCacheOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeFlushStageCacheWithContext(ctx context.Context, in *apigateway.FlushStageCacheInput, _ ...request.Option) (*apigateway.FlushStageCacheOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "FlushStageCache cancelled", ctx.Err())
	default:
		return d.FlushStageCache(in)
	}
}

func (d *APIGatewayDouble) GenerateClientCertificate(i0 *apigateway.GenerateClientCertificateInput) (r0 *apigateway.ClientCertificate, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateClientCertificate", i0)
	r0, _ = returns[0].(*apigateway.ClientCertificate)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GenerateClientCertificateRequest(i0 *apigateway.GenerateClientCertificateInput) (r0 *request.Request, r1 *apigateway.ClientCertificate) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateClientCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.ClientCertificate)
	return
}

func (d *APIGatewayDouble) GenerateClientCertificateWithContext(i0 context.Context, i1 *apigateway.GenerateClientCertificateInput, i2 ...request.Option) (r0 *apigateway.ClientCertificate, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateClientCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.ClientCertificate)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGenerateClientCertificateWithContext(ctx context.Context, in *apigateway.GenerateClientCertificateInput, _ ...request.Option) (*apigateway.ClientCertificate, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GenerateClientCertificate cancelled", ctx.Err())
	default:
		return d.GenerateClientCertificate(in)
	}
}

func (d *APIGatewayDouble) GetAccount(i0 *apigateway.GetAccountInput) (r0 *apigateway.Account, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAccount", i0)
	r0, _ = returns[0].(*apigateway.Account)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetAccountRequest(i0 *apigateway.GetAccountInput) (r0 *request.Request, r1 *apigateway.Account) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAccountRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.Account)
	return
}

func (d *APIGatewayDouble) GetAccountWithContext(i0 context.Context, i1 *apigateway.GetAccountInput, i2 ...request.Option) (r0 *apigateway.Account, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAccountWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.Account)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetAccountWithContext(ctx context.Context, in *apigateway.GetAccountInput, _ ...request.Option) (*apigateway.Account, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetAccount cancelled", ctx.Err())
	default:
		return d.GetAccount(in)
	}
}

func (d *APIGatewayDouble) GetApiKey(i0 *apigateway.GetApiKeyInput) (r0 *apigateway.ApiKey, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApiKey", i0)
	r0, _ = returns[0].(*apigateway.ApiKey)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetApiKeyRequest(i0 *apigateway.GetApiKeyInput) (r0 *request.Request, r1 *apigateway.ApiKey) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApiKeyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.ApiKey)
	return
}

func (d *APIGatewayDouble) GetApiKeyWithContext(i0 context.Context, i1 *apigateway.GetApiKeyInput, i2 ...request.Option) (r0 *apigateway.ApiKey, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApiKeyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.ApiKey)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetApiKeyWithContext(ctx context.Context, in *apigateway.GetApiKeyInput, _ ...request.Option) (*apigateway.ApiKey, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetApiKey cancelled", ctx.Err())
	default:
		return d.GetApiKey(in)
	}
}

func (d *APIGatewayDouble) GetApiKeys(i0 *apigateway.GetApiKeysInput) (r0 *apigateway.GetApiKeysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApiKeys", i0)
	r0, _ = returns[0].(*apigateway.GetApiKeysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetApiKeysPages(i0 *apigateway.GetApiKeysInput, i1 func(*apigateway.GetApiKeysOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApiKeysPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *APIGatewayDouble) fakeGetApiKeysPages(in *apigateway.GetApiKeysInput, pager func(*apigateway.GetApiKeysOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetApiKeys", paginators, in, pager)
}

func (d *APIGatewayDouble) GetApiKeysPagesWithContext(i0 context.Context, i1 *apigateway.GetApiKeysInput, i2 func(*apigateway.GetApiKeysOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApiKeysPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *APIGatewayDouble) fakeGetApiKeysPagesWithContext(ctx context.Context, in *apigateway.GetApiKeysInput, pager func(*apigateway.GetApiKeysOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetApiKeys", paginators, ctx, in, pager, options...)
}

func (d *APIGatewayDouble) GetApiKeysRequest(i0 *apigateway.GetApiKeysInput) (r0 *request.Request, r1 *apigateway.GetApiKeysOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApiKeysRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.GetApiKeysOutput)
	return
}

func (d *APIGatewayDouble) GetApiKeysWithContext(i0 context.Context, i1 *apigateway.GetApiKeysInput, i2 ...request.Option) (r0 *apigateway.GetApiKeysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApiKeysWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.GetApiKeysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetApiKeysWithContext(ctx context.Context, in *apigateway.GetApiKeysInput, _ ...request.Option) (*apigateway.GetApiKeysOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetApiKeys cancelled", ctx.Err())
	default:
		return d.GetApiKeys(in)
	}
}

func (d *APIGatewayDouble) GetAuthorizer(i0 *apigateway.GetAuthorizerInput) (r0 *apigateway.Authorizer, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAuthorizer", i0)
	r0, _ = returns[0].(*apigateway.Authorizer)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetAuthorizerRequest(i0 *apigateway.GetAuthorizerInput) (r0 *request.Request, r1 *apigateway.Authorizer) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAuthorizerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.Authorizer)
	return
}

func (d *APIGatewayDouble) GetAuthorizerWithContext(i0 context.Context, i1 *apigateway.GetAuthorizerInput, i2 ...request.Option) (r0 *apigateway.Authorizer, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAuthorizerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.Authorizer)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetAuthorizerWithContext(ctx context.Context, in *apigateway.GetAuthorizerInput, _ ...request.Option) (*apigateway.Authorizer, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetAuthorizer cancelled", ctx.Err())
	default:
		return d.GetAuthorizer(in)
	}
}

func (d *APIGatewayDouble) GetAuthorizers(i0 *apigateway.GetAuthorizersInput) (r0 *apigateway.GetAuthorizersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAuthorizers", i0)
	r0, _ = returns[0].(*apigateway.GetAuthorizersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetAuthorizersRequest(i0 *apigateway.GetAuthorizersInput) (r0 *request.Request, r1 *apigateway.GetAuthorizersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAuthorizersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.GetAuthorizersOutput)
	return
}

func (d *APIGatewayDouble) GetAuthorizersWithContext(i0 context.Context, i1 *apigateway.GetAuthorizersInput, i2 ...request.Option) (r0 *apigateway.GetAuthorizersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAuthorizersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.GetAuthorizersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetAuthorizersWithContext(ctx context.Context, in *apigateway.GetAuthorizersInput, _ ...request.Option) (*apigateway.GetAuthorizersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetAuthorizers cancelled", ctx.Err())
	default:
		return d.GetAuthorizers(in)
	}
}

func (d *APIGatewayDouble) GetBasePathMapping(i0 *apigateway.GetBasePathMappingInput) (r0 *apigateway.BasePathMapping, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBasePathMapping", i0)
	r0, _ = returns[0].(*apigateway.BasePathMapping)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetBasePathMappingRequest(i0 *apigateway.GetBasePathMappingInput) (r0 *request.Request, r1 *apigateway.BasePathMapping) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBasePathMappingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.BasePathMapping)
	return
}

func (d *APIGatewayDouble) GetBasePathMappingWithContext(i0 context.Context, i1 *apigateway.GetBasePathMappingInput, i2 ...request.Option) (r0 *apigateway.BasePathMapping, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBasePathMappingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.BasePathMapping)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetBasePathMappingWithContext(ctx context.Context, in *apigateway.GetBasePathMappingInput, _ ...request.Option) (*apigateway.BasePathMapping, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBasePathMapping cancelled", ctx.Err())
	default:
		return d.GetBasePathMapping(in)
	}
}

func (d *APIGatewayDouble) GetBasePathMappings(i0 *apigateway.GetBasePathMappingsInput) (r0 *apigateway.GetBasePathMappingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBasePathMappings", i0)
	r0, _ = returns[0].(*apigateway.GetBasePathMappingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetBasePathMappingsPages(i0 *apigateway.GetBasePathMappingsInput, i1 func(*apigateway.GetBasePathMappingsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBasePathMappingsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *APIGatewayDouble) fakeGetBasePathMappingsPages(in *apigateway.GetBasePathMappingsInput, pager func(*apigateway.GetBasePathMappingsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetBasePathMappings", paginators, in, pager)
}

func (d *APIGatewayDouble) GetBasePathMappingsPagesWithContext(i0 context.Context, i1 *apigateway.GetBasePathMappingsInput, i2 func(*apigateway.GetBasePathMappingsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBasePathMappingsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *APIGatewayDouble) fakeGetBasePathMappingsPagesWithContext(ctx context.Context, in *apigateway.GetBasePathMappingsInput, pager func(*apigateway.GetBasePathMappingsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetBasePathMappings", paginators, ctx, in, pager, options...)
}

func (d *APIGatewayDouble) GetBasePathMappingsRequest(i0 *apigateway.GetBasePathMappingsInput) (r0 *request.Request, r1 *apigateway.GetBasePathMappingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBasePathMappingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.GetBasePathMappingsOutput)
	return
}

func (d *APIGatewayDouble) GetBasePathMappingsWithContext(i0 context.Context, i1 *apigateway.GetBasePathMappingsInput, i2 ...request.Option) (r0 *apigateway.GetBasePathMappingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBasePathMappingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.GetBasePathMappingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetBasePathMappingsWithContext(ctx context.Context, in *apigateway.GetBasePathMappingsInput, _ ...request.Option) (*apigateway.GetBasePathMappingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBasePathMappings cancelled", ctx.Err())
	default:
		return d.GetBasePathMappings(in)
	}
}

func (d *APIGatewayDouble) GetClientCertificate(i0 *apigateway.GetClientCertificateInput) (r0 *apigateway.ClientCertificate, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetClientCertificate", i0)
	r0, _ = returns[0].(*apigateway.ClientCertificate)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetClientCertificateRequest(i0 *apigateway.GetClientCertificateInput) (r0 *request.Request, r1 *apigateway.ClientCertificate) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetClientCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.ClientCertificate)
	return
}

func (d *APIGatewayDouble) GetClientCertificateWithContext(i0 context.Context, i1 *apigateway.GetClientCertificateInput, i2 ...request.Option) (r0 *apigateway.ClientCertificate, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetClientCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.ClientCertificate)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetClientCertificateWithContext(ctx context.Context, in *apigateway.GetClientCertificateInput, _ ...request.Option) (*apigateway.ClientCertificate, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetClientCertificate cancelled", ctx.Err())
	default:
		return d.GetClientCertificate(in)
	}
}

func (d *APIGatewayDouble) GetClientCertificates(i0 *apigateway.GetClientCertificatesInput) (r0 *apigateway.GetClientCertificatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetClientCertificates", i0)
	r0, _ = returns[0].(*apigateway.GetClientCertificatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetClientCertificatesPages(i0 *apigateway.GetClientCertificatesInput, i1 func(*apigateway.GetClientCertificatesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetClientCertificatesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *APIGatewayDouble) fakeGetClientCertificatesPages(in *apigateway.GetClientCertificatesInput, pager func(*apigateway.GetClientCertificatesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetClientCertificates", paginators, in, pager)
}

func (d *APIGatewayDouble) GetClientCertificatesPagesWithContext(i0 context.Context, i1 *apigateway.GetClientCertificatesInput, i2 func(*apigateway.GetClientCertificatesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetClientCertificatesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *APIGatewayDouble) fakeGetClientCertificatesPagesWithContext(ctx context.Context, in *apigateway.GetClientCertificatesInput, pager func(*apigateway.GetClientCertificatesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetClientCertificates", paginators, ctx, in, pager, options...)
}

func (d *APIGatewayDouble) GetClientCertificatesRequest(i0 *apigateway.GetClientCertificatesInput) (r0 *request.Request, r1 *apigateway.GetClientCertificatesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetClientCertificatesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.GetClientCertificatesOutput)
	return
}

func (d *APIGatewayDouble) GetClientCertificatesWithContext(i0 context.Context, i1 *apigateway.GetClientCertificatesInput, i2 ...request.Option) (r0 *apigateway.GetClientCertificatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetClientCertificatesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.GetClientCertificatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetClientCertificatesWithContext(ctx context.Context, in *apigateway.GetClientCertificatesInput, _ ...request.Option) (*apigateway.GetClientCertificatesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetClientCertificates cancelled", ctx.Err())
	default:
		return d.GetClientCertificates(in)
	}
}

func (d *APIGatewayDouble) GetDeployment(i0 *apigateway.GetDeploymentInput) (r0 *apigateway.Deployment, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeployment", i0)
	r0, _ = returns[0].(*apigateway.Deployment)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetDeploymentRequest(i0 *apigateway.GetDeploymentInput) (r0 *request.Request, r1 *apigateway.Deployment) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeploymentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.Deployment)
	return
}

func (d *APIGatewayDouble) GetDeploymentWithContext(i0 context.Context, i1 *apigateway.GetDeploymentInput, i2 ...request.Option) (r0 *apigateway.Deployment, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeploymentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.Deployment)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetDeploymentWithContext(ctx context.Context, in *apigateway.GetDeploymentInput, _ ...request.Option) (*apigateway.Deployment, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDeployment cancelled", ctx.Err())
	default:
		return d.GetDeployment(in)
	}
}

func (d *APIGatewayDouble) GetDeployments(i0 *apigateway.GetDeploymentsInput) (r0 *apigateway.GetDeploymentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeployments", i0)
	r0, _ = returns[0].(*apigateway.GetDeploymentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetDeploymentsPages(i0 *apigateway.GetDeploymentsInput, i1 func(*apigateway.GetDeploymentsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeploymentsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *APIGatewayDouble) fakeGetDeploymentsPages(in *apigateway.GetDeploymentsInput, pager func(*apigateway.GetDeploymentsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetDeployments", paginators, in, pager)
}

func (d *APIGatewayDouble) GetDeploymentsPagesWithContext(i0 context.Context, i1 *apigateway.GetDeploymentsInput, i2 func(*apigateway.GetDeploymentsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeploymentsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *APIGatewayDouble) fakeGetDeploymentsPagesWithContext(ctx context.Context, in *apigateway.GetDeploymentsInput, pager func(*apigateway.GetDeploymentsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetDeployments", paginators, ctx, in, pager, options...)
}

func (d *APIGatewayDouble) GetDeploymentsRequest(i0 *apigateway.GetDeploymentsInput) (r0 *request.Request, r1 *apigateway.GetDeploymentsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeploymentsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.GetDeploymentsOutput)
	return
}

func (d *APIGatewayDouble) GetDeploymentsWithContext(i0 context.Context, i1 *apigateway.GetDeploymentsInput, i2 ...request.Option) (r0 *apigateway.GetDeploymentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeploymentsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.GetDeploymentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetDeploymentsWithContext(ctx context.Context, in *apigateway.GetDeploymentsInput, _ ...request.Option) (*apigateway.GetDeploymentsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDeployments cancelled", ctx.Err())
	default:
		return d.GetDeployments(in)
	}
}

func (d *APIGatewayDouble) GetDocumentationPart(i0 *apigateway.GetDocumentationPartInput) (r0 *apigateway.DocumentationPart, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDocumentationPart", i0)
	r0, _ = returns[0].(*apigateway.DocumentationPart)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetDocumentationPartRequest(i0 *apigateway.GetDocumentationPartInput) (r0 *request.Request, r1 *apigateway.DocumentationPart) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDocumentationPartRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.DocumentationPart)
	return
}

func (d *APIGatewayDouble) GetDocumentationPartWithContext(i0 context.Context, i1 *apigateway.GetDocumentationPartInput, i2 ...request.Option) (r0 *apigateway.DocumentationPart, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDocumentationPartWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.DocumentationPart)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetDocumentationPartWithContext(ctx context.Context, in *apigateway.GetDocumentationPartInput, _ ...request.Option) (*apigateway.DocumentationPart, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDocumentationPart cancelled", ctx.Err())
	default:
		return d.GetDocumentationPart(in)
	}
}

func (d *APIGatewayDouble) GetDocumentationParts(i0 *apigateway.GetDocumentationPartsInput) (r0 *apigateway.GetDocumentationPartsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDocumentationParts", i0)
	r0, _ = returns[0].(*apigateway.GetDocumentationPartsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetDocumentationPartsRequest(i0 *apigateway.GetDocumentationPartsInput) (r0 *request.Request, r1 *apigateway.GetDocumentationPartsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDocumentationPartsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.GetDocumentationPartsOutput)
	return
}

func (d *APIGatewayDouble) GetDocumentationPartsWithContext(i0 context.Context, i1 *apigateway.GetDocumentationPartsInput, i2 ...request.Option) (r0 *apigateway.GetDocumentationPartsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDocumentationPartsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.GetDocumentationPartsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetDocumentationPartsWithContext(ctx context.Context, in *apigateway.GetDocumentationPartsInput, _ ...request.Option) (*apigateway.GetDocumentationPartsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDocumentationParts cancelled", ctx.Err())
	default:
		return d.GetDocumentationParts(in)
	}
}

func (d *APIGatewayDouble) GetDocumentationVersion(i0 *apigateway.GetDocumentationVersionInput) (r0 *apigateway.DocumentationVersion, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDocumentationVersion", i0)
	r0, _ = returns[0].(*apigateway.DocumentationVersion)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetDocumentationVersionRequest(i0 *apigateway.GetDocumentationVersionInput) (r0 *request.Request, r1 *apigateway.DocumentationVersion) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDocumentationVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.DocumentationVersion)
	return
}

func (d *APIGatewayDouble) GetDocumentationVersionWithContext(i0 context.Context, i1 *apigateway.GetDocumentationVersionInput, i2 ...request.Option) (r0 *apigateway.DocumentationVersion, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDocumentationVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.DocumentationVersion)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetDocumentationVersionWithContext(ctx context.Context, in *apigateway.GetDocumentationVersionInput, _ ...request.Option) (*apigateway.DocumentationVersion, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDocumentationVersion cancelled", ctx.Err())
	default:
		return d.GetDocumentationVersion(in)
	}
}

func (d *APIGatewayDouble) GetDocumentationVersions(i0 *apigateway.GetDocumentationVersionsInput) (r0 *apigateway.GetDocumentationVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDocumentationVersions", i0)
	r0, _ = returns[0].(*apigateway.GetDocumentationVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetDocumentationVersionsRequest(i0 *apigateway.GetDocumentationVersionsInput) (r0 *request.Request, r1 *apigateway.GetDocumentationVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDocumentationVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.GetDocumentationVersionsOutput)
	return
}

func (d *APIGatewayDouble) GetDocumentationVersionsWithContext(i0 context.Context, i1 *apigateway.GetDocumentationVersionsInput, i2 ...request.Option) (r0 *apigateway.GetDocumentationVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDocumentationVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.GetDocumentationVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetDocumentationVersionsWithContext(ctx context.Context, in *apigateway.GetDocumentationVersionsInput, _ ...request.Option) (*apigateway.GetDocumentationVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDocumentationVersions cancelled", ctx.Err())
	default:
		return d.GetDocumentationVersions(in)
	}
}

func (d *APIGatewayDouble) GetDomainName(i0 *apigateway.GetDomainNameInput) (r0 *apigateway.DomainName, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDomainName", i0)
	r0, _ = returns[0].(*apigateway.DomainName)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetDomainNameRequest(i0 *apigateway.GetDomainNameInput) (r0 *request.Request, r1 *apigateway.DomainName) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDomainNameRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.DomainName)
	return
}

func (d *APIGatewayDouble) GetDomainNameWithContext(i0 context.Context, i1 *apigateway.GetDomainNameInput, i2 ...request.Option) (r0 *apigateway.DomainName, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDomainNameWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.DomainName)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetDomainNameWithContext(ctx context.Context, in *apigateway.GetDomainNameInput, _ ...request.Option) (*apigateway.DomainName, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDomainName cancelled", ctx.Err())
	default:
		return d.GetDomainName(in)
	}
}

func (d *APIGatewayDouble) GetDomainNames(i0 *apigateway.GetDomainNamesInput) (r0 *apigateway.GetDomainNamesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDomainNames", i0)
	r0, _ = returns[0].(*apigateway.GetDomainNamesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetDomainNamesPages(i0 *apigateway.GetDomainNamesInput, i1 func(*apigateway.GetDomainNamesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDomainNamesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *APIGatewayDouble) fakeGetDomainNamesPages(in *apigateway.GetDomainNamesInput, pager func(*apigateway.GetDomainNamesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetDomainNames", paginators, in, pager)
}

func (d *APIGatewayDouble) GetDomainNamesPagesWithContext(i0 context.Context, i1 *apigateway.GetDomainNamesInput, i2 func(*apigateway.GetDomainNamesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDomainNamesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *APIGatewayDouble) fakeGetDomainNamesPagesWithContext(ctx context.Context, in *apigateway.GetDomainNamesInput, pager func(*apigateway.GetDomainNamesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetDomainNames", paginators, ctx, in, pager, options...)
}

func (d *APIGatewayDouble) GetDomainNamesRequest(i0 *apigateway.GetDomainNamesInput) (r0 *request.Request, r1 *apigateway.GetDomainNamesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDomainNamesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.GetDomainNamesOutput)
	return
}

func (d *APIGatewayDouble) GetDomainNamesWithContext(i0 context.Context, i1 *apigateway.GetDomainNamesInput, i2 ...request.Option) (r0 *apigateway.GetDomainNamesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDomainNamesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.GetDomainNamesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetDomainNamesWithContext(ctx context.Context, in *apigateway.GetDomainNamesInput, _ ...request.Option) (*apigateway.GetDomainNamesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDomainNames cancelled", ctx.Err())
	default:
		return d.GetDomainNames(in)
	}
}

func (d *APIGatewayDouble) GetExport(i0 *apigateway.GetExportInput) (r0 *apigateway.GetExportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetExport", i0)
	r0, _ = returns[0].(*apigateway.GetExportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetExportRequest(i0 *apigateway.GetExportInput) (r0 *request.Request, r1 *apigateway.GetExportOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetExportRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.GetExportOutput)
	return
}

func (d *APIGatewayDouble) GetExportWithContext(i0 context.Context, i1 *apigateway.GetExportInput, i2 ...request.Option) (r0 *apigateway.GetExportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetExportWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.GetExportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetExportWithContext(ctx context.Context, in *apigateway.GetExportInput, _ ...request.Option) (*apigateway.GetExportOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetExport cancelled", ctx.Err())
	default:
		return d.GetExport(in)
	}
}

func (d *APIGatewayDouble) GetGatewayResponse(i0 *apigateway.GetGatewayResponseInput) (r0 *apigateway.UpdateGatewayResponseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGatewayResponse", i0)
	r0, _ = returns[0].(*apigateway.UpdateGatewayResponseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetGatewayResponseRequest(i0 *apigateway.GetGatewayResponseInput) (r0 *request.Request, r1 *apigateway.UpdateGatewayResponseOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGatewayResponseRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.UpdateGatewayResponseOutput)
	return
}

func (d *APIGatewayDouble) GetGatewayResponseWithContext(i0 context.Context, i1 *apigateway.GetGatewayResponseInput, i2 ...request.Option) (r0 *apigateway.UpdateGatewayResponseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGatewayResponseWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.UpdateGatewayResponseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetGatewayResponseWithContext(ctx context.Context, in *apigateway.GetGatewayResponseInput, _ ...request.Option) (*apigateway.UpdateGatewayResponseOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetGatewayResponse cancelled", ctx.Err())
	default:
		return d.GetGatewayResponse(in)
	}
}

func (d *APIGatewayDouble) GetGatewayResponses(i0 *apigateway.GetGatewayResponsesInput) (r0 *apigateway.GetGatewayResponsesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGatewayResponses", i0)
	r0, _ = returns[0].(*apigateway.GetGatewayResponsesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetGatewayResponsesRequest(i0 *apigateway.GetGatewayResponsesInput) (r0 *request.Request, r1 *apigateway.GetGatewayResponsesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGatewayResponsesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.GetGatewayResponsesOutput)
	return
}

func (d *APIGatewayDouble) GetGatewayResponsesWithContext(i0 context.Context, i1 *apigateway.GetGatewayResponsesInput, i2 ...request.Option) (r0 *apigateway.GetGatewayResponsesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGatewayResponsesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.GetGatewayResponsesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetGatewayResponsesWithContext(ctx context.Context, in *apigateway.GetGatewayResponsesInput, _ ...request.Option) (*apigateway.GetGatewayResponsesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetGatewayResponses cancelled", ctx.Err())
	default:
		return d.GetGatewayResponses(in)
	}
}

func (d *APIGatewayDouble) GetIntegration(i0 *apigateway.GetIntegrationInput) (r0 *apigateway.Integration, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIntegration", i0)
	r0, _ = returns[0].(*apigateway.Integration)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetIntegrationRequest(i0 *apigateway.GetIntegrationInput) (r0 *request.Request, r1 *apigateway.Integration) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIntegrationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.Integration)
	return
}

func (d *APIGatewayDouble) GetIntegrationResponse(i0 *apigateway.GetIntegrationResponseInput) (r0 *apigateway.IntegrationResponse, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIntegrationResponse", i0)
	r0, _ = returns[0].(*apigateway.IntegrationResponse)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetIntegrationResponseRequest(i0 *apigateway.GetIntegrationResponseInput) (r0 *request.Request, r1 *apigateway.IntegrationResponse) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIntegrationResponseRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.IntegrationResponse)
	return
}

func (d *APIGatewayDouble) GetIntegrationResponseWithContext(i0 context.Context, i1 *apigateway.GetIntegrationResponseInput, i2 ...request.Option) (r0 *apigateway.IntegrationResponse, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIntegrationResponseWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.IntegrationResponse)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetIntegrationResponseWithContext(ctx context.Context, in *apigateway.GetIntegrationResponseInput, _ ...request.Option) (*apigateway.IntegrationResponse, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetIntegrationResponse cancelled", ctx.Err())
	default:
		return d.GetIntegrationResponse(in)
	}
}

func (d *APIGatewayDouble) GetIntegrationWithContext(i0 context.Context, i1 *apigateway.GetIntegrationInput, i2 ...request.Option) (r0 *apigateway.Integration, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIntegrationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.Integration)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetIntegrationWithContext(ctx context.Context, in *apigateway.GetIntegrationInput, _ ...request.Option) (*apigateway.Integration, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetIntegration cancelled", ctx.Err())
	default:
		return d.GetIntegration(in)
	}
}

func (d *APIGatewayDouble) GetMethod(i0 *apigateway.GetMethodInput) (r0 *apigateway.Method, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMethod", i0)
	r0, _ = returns[0].(*apigateway.Method)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetMethodRequest(i0 *apigateway.GetMethodInput) (r0 *request.Request, r1 *apigateway.Method) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMethodRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.Method)
	return
}

func (d *APIGatewayDouble) GetMethodResponse(i0 *apigateway.GetMethodResponseInput) (r0 *apigateway.MethodResponse, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMethodResponse", i0)
	r0, _ = returns[0].(*apigateway.MethodResponse)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetMethodResponseRequest(i0 *apigateway.GetMethodResponseInput) (r0 *request.Request, r1 *apigateway.MethodResponse) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMethodResponseRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.MethodResponse)
	return
}

func (d *APIGatewayDouble) GetMethodResponseWithContext(i0 context.Context, i1 *apigateway.GetMethodResponseInput, i2 ...request.Option) (r0 *apigateway.MethodResponse, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMethodResponseWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.MethodResponse)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetMethodResponseWithContext(ctx context.Context, in *apigateway.GetMethodResponseInput, _ ...request.Option) (*apigateway.MethodResponse, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetMethodResponse cancelled", ctx.Err())
	default:
		return d.GetMethodResponse(in)
	}
}

func (d *APIGatewayDouble) GetMethodWithContext(i0 context.Context, i1 *apigateway.GetMethodInput, i2 ...request.Option) (r0 *apigateway.Method, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMethodWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.Method)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetMethodWithContext(ctx context.Context, in *apigateway.GetMethodInput, _ ...request.Option) (*apigateway.Method, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetMethod cancelled", ctx.Err())
	default:
		return d.GetMethod(in)
	}
}

func (d *APIGatewayDouble) GetModel(i0 *apigateway.GetModelInput) (r0 *apigateway.Model, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetModel", i0)
	r0, _ = returns[0].(*apigateway.Model)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetModelRequest(i0 *apigateway.GetModelInput) (r0 *request.Request, r1 *apigateway.Model) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetModelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.Model)
	return
}

func (d *APIGatewayDouble) GetModelTemplate(i0 *apigateway.GetModelTemplateInput) (r0 *apigateway.GetModelTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetModelTemplate", i0)
	r0, _ = returns[0].(*apigateway.GetModelTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetModelTemplateRequest(i0 *apigateway.GetModelTemplateInput) (r0 *request.Request, r1 *apigateway.GetModelTemplateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetModelTemplateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.GetModelTemplateOutput)
	return
}

func (d *APIGatewayDouble) GetModelTemplateWithContext(i0 context.Context, i1 *apigateway.GetModelTemplateInput, i2 ...request.Option) (r0 *apigateway.GetModelTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetModelTemplateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.GetModelTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetModelTemplateWithContext(ctx context.Context, in *apigateway.GetModelTemplateInput, _ ...request.Option) (*apigateway.GetModelTemplateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetModelTemplate cancelled", ctx.Err())
	default:
		return d.GetModelTemplate(in)
	}
}

func (d *APIGatewayDouble) GetModelWithContext(i0 context.Context, i1 *apigateway.GetModelInput, i2 ...request.Option) (r0 *apigateway.Model, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetModelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.Model)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetModelWithContext(ctx context.Context, in *apigateway.GetModelInput, _ ...request.Option) (*apigateway.Model, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetModel cancelled", ctx.Err())
	default:
		return d.GetModel(in)
	}
}

func (d *APIGatewayDouble) GetModels(i0 *apigateway.GetModelsInput) (r0 *apigateway.GetModelsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetModels", i0)
	r0, _ = returns[0].(*apigateway.GetModelsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetModelsPages(i0 *apigateway.GetModelsInput, i1 func(*apigateway.GetModelsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetModelsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *APIGatewayDouble) fakeGetModelsPages(in *apigateway.GetModelsInput, pager func(*apigateway.GetModelsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetModels", paginators, in, pager)
}

func (d *APIGatewayDouble) GetModelsPagesWithContext(i0 context.Context, i1 *apigateway.GetModelsInput, i2 func(*apigateway.GetModelsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetModelsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *APIGatewayDouble) fakeGetModelsPagesWithContext(ctx context.Context, in *apigateway.GetModelsInput, pager func(*apigateway.GetModelsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetModels", paginators, ctx, in, pager, options...)
}

func (d *APIGatewayDouble) GetModelsRequest(i0 *apigateway.GetModelsInput) (r0 *request.Request, r1 *apigateway.GetModelsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetModelsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.GetModelsOutput)
	return
}

func (d *APIGatewayDouble) GetModelsWithContext(i0 context.Context, i1 *apigateway.GetModelsInput, i2 ...request.Option) (r0 *apigateway.GetModelsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetModelsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.GetModelsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetModelsWithContext(ctx context.Context, in *apigateway.GetModelsInput, _ ...request.Option) (*apigateway.GetModelsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetModels cancelled", ctx.Err())
	default:
		return d.GetModels(in)
	}
}

func (d *APIGatewayDouble) GetRequestValidator(i0 *apigateway.GetRequestValidatorInput) (r0 *apigateway.UpdateRequestValidatorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRequestValidator", i0)
	r0, _ = returns[0].(*apigateway.UpdateRequestValidatorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetRequestValidatorRequest(i0 *apigateway.GetRequestValidatorInput) (r0 *request.Request, r1 *apigateway.UpdateRequestValidatorOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRequestValidatorRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.UpdateRequestValidatorOutput)
	return
}

func (d *APIGatewayDouble) GetRequestValidatorWithContext(i0 context.Context, i1 *apigateway.GetRequestValidatorInput, i2 ...request.Option) (r0 *apigateway.UpdateRequestValidatorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRequestValidatorWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.UpdateRequestValidatorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetRequestValidatorWithContext(ctx context.Context, in *apigateway.GetRequestValidatorInput, _ ...request.Option) (*apigateway.UpdateRequestValidatorOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRequestValidator cancelled", ctx.Err())
	default:
		return d.GetRequestValidator(in)
	}
}

func (d *APIGatewayDouble) GetRequestValidators(i0 *apigateway.GetRequestValidatorsInput) (r0 *apigateway.GetRequestValidatorsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRequestValidators", i0)
	r0, _ = returns[0].(*apigateway.GetRequestValidatorsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetRequestValidatorsRequest(i0 *apigateway.GetRequestValidatorsInput) (r0 *request.Request, r1 *apigateway.GetRequestValidatorsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRequestValidatorsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.GetRequestValidatorsOutput)
	return
}

func (d *APIGatewayDouble) GetRequestValidatorsWithContext(i0 context.Context, i1 *apigateway.GetRequestValidatorsInput, i2 ...request.Option) (r0 *apigateway.GetRequestValidatorsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRequestValidatorsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.GetRequestValidatorsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetRequestValidatorsWithContext(ctx context.Context, in *apigateway.GetRequestValidatorsInput, _ ...request.Option) (*apigateway.GetRequestValidatorsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRequestValidators cancelled", ctx.Err())
	default:
		return d.GetRequestValidators(in)
	}
}

func (d *APIGatewayDouble) GetResource(i0 *apigateway.GetResourceInput) (r0 *apigateway.Resource, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResource", i0)
	r0, _ = returns[0].(*apigateway.Resource)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetResourceRequest(i0 *apigateway.GetResourceInput) (r0 *request.Request, r1 *apigateway.Resource) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.Resource)
	return
}

func (d *APIGatewayDouble) GetResourceWithContext(i0 context.Context, i1 *apigateway.GetResourceInput, i2 ...request.Option) (r0 *apigateway.Resource, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.Resource)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetResourceWithContext(ctx context.Context, in *apigateway.GetResourceInput, _ ...request.Option) (*apigateway.Resource, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetResource cancelled", ctx.Err())
	default:
		return d.GetResource(in)
	}
}

func (d *APIGatewayDouble) GetResources(i0 *apigateway.GetResourcesInput) (r0 *apigateway.GetResourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResources", i0)
	r0, _ = returns[0].(*apigateway.GetResourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetResourcesPages(i0 *apigateway.GetResourcesInput, i1 func(*apigateway.GetResourcesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResourcesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *APIGatewayDouble) fakeGetResourcesPages(in *apigateway.GetResourcesInput, pager func(*apigateway.GetResourcesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetResources", paginators, in, pager)
}

func (d *APIGatewayDouble) GetResourcesPagesWithContext(i0 context.Context, i1 *apigateway.GetResourcesInput, i2 func(*apigateway.GetResourcesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResourcesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *APIGatewayDouble) fakeGetResourcesPagesWithContext(ctx context.Context, in *apigateway.GetResourcesInput, pager func(*apigateway.GetResourcesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetResources", paginators, ctx, in, pager, options...)
}

func (d *APIGatewayDouble) GetResourcesRequest(i0 *apigateway.GetResourcesInput) (r0 *request.Request, r1 *apigateway.GetResourcesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResourcesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.GetResourcesOutput)
	return
}

func (d *APIGatewayDouble) GetResourcesWithContext(i0 context.Context, i1 *apigateway.GetResourcesInput, i2 ...request.Option) (r0 *apigateway.GetResourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResourcesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.GetResourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetResourcesWithContext(ctx context.Context, in *apigateway.GetResourcesInput, _ ...request.Option) (*apigateway.GetResourcesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetResources cancelled", ctx.Err())
	default:
		return d.GetResources(in)
	}
}

func (d *APIGatewayDouble) GetRestApi(i0 *apigateway.GetRestApiInput) (r0 *apigateway.RestApi, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRestApi", i0)
	r0, _ = returns[0].(*apigateway.RestApi)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetRestApiRequest(i0 *apigateway.GetRestApiInput) (r0 *request.Request, r1 *apigateway.RestApi) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRestApiRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.RestApi)
	return
}

func (d *APIGatewayDouble) GetRestApiWithContext(i0 context.Context, i1 *apigateway.GetRestApiInput, i2 ...request.Option) (r0 *apigateway.RestApi, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRestApiWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.RestApi)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetRestApiWithContext(ctx context.Context, in *apigateway.GetRestApiInput, _ ...request.Option) (*apigateway.RestApi, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRestApi cancelled", ctx.Err())
	default:
		return d.GetRestApi(in)
	}
}

func (d *APIGatewayDouble) GetRestApis(i0 *apigateway.GetRestApisInput) (r0 *apigateway.GetRestApisOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRestApis", i0)
	r0, _ = returns[0].(*apigateway.GetRestApisOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetRestApisPages(i0 *apigateway.GetRestApisInput, i1 func(*apigateway.GetRestApisOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRestApisPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *APIGatewayDouble) fakeGetRestApisPages(in *apigateway.GetRestApisInput, pager func(*apigateway.GetRestApisOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetRestApis", paginators, in, pager)
}

func (d *APIGatewayDouble) GetRestApisPagesWithContext(i0 context.Context, i1 *apigateway.GetRestApisInput, i2 func(*apigateway.GetRestApisOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRestApisPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *APIGatewayDouble) fakeGetRestApisPagesWithContext(ctx context.Context, in *apigateway.GetRestApisInput, pager func(*apigateway.GetRestApisOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetRestApis", paginators, ctx, in, pager, options...)
}

func (d *APIGatewayDouble) GetRestApisRequest(i0 *apigateway.GetRestApisInput) (r0 *request.Request, r1 *apigateway.GetRestApisOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRestApisRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.GetRestApisOutput)
	return
}

func (d *APIGatewayDouble) GetRestApisWithContext(i0 context.Context, i1 *apigateway.GetRestApisInput, i2 ...request.Option) (r0 *apigateway.GetRestApisOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRestApisWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.GetRestApisOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetRestApisWithContext(ctx context.Context, in *apigateway.GetRestApisInput, _ ...request.Option) (*apigateway.GetRestApisOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRestApis cancelled", ctx.Err())
	default:
		return d.GetRestApis(in)
	}
}

func (d *APIGatewayDouble) GetSdk(i0 *apigateway.GetSdkInput) (r0 *apigateway.GetSdkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSdk", i0)
	r0, _ = returns[0].(*apigateway.GetSdkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetSdkRequest(i0 *apigateway.GetSdkInput) (r0 *request.Request, r1 *apigateway.GetSdkOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSdkRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.GetSdkOutput)
	return
}

func (d *APIGatewayDouble) GetSdkType(i0 *apigateway.GetSdkTypeInput) (r0 *apigateway.SdkType, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSdkType", i0)
	r0, _ = returns[0].(*apigateway.SdkType)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetSdkTypeRequest(i0 *apigateway.GetSdkTypeInput) (r0 *request.Request, r1 *apigateway.SdkType) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSdkTypeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.SdkType)
	return
}

func (d *APIGatewayDouble) GetSdkTypeWithContext(i0 context.Context, i1 *apigateway.GetSdkTypeInput, i2 ...request.Option) (r0 *apigateway.SdkType, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSdkTypeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.SdkType)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetSdkTypeWithContext(ctx context.Context, in *apigateway.GetSdkTypeInput, _ ...request.Option) (*apigateway.SdkType, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetSdkType cancelled", ctx.Err())
	default:
		return d.GetSdkType(in)
	}
}

func (d *APIGatewayDouble) GetSdkTypes(i0 *apigateway.GetSdkTypesInput) (r0 *apigateway.GetSdkTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSdkTypes", i0)
	r0, _ = returns[0].(*apigateway.GetSdkTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetSdkTypesRequest(i0 *apigateway.GetSdkTypesInput) (r0 *request.Request, r1 *apigateway.GetSdkTypesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSdkTypesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.GetSdkTypesOutput)
	return
}

func (d *APIGatewayDouble) GetSdkTypesWithContext(i0 context.Context, i1 *apigateway.GetSdkTypesInput, i2 ...request.Option) (r0 *apigateway.GetSdkTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSdkTypesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.GetSdkTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetSdkTypesWithContext(ctx context.Context, in *apigateway.GetSdkTypesInput, _ ...request.Option) (*apigateway.GetSdkTypesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetSdkTypes cancelled", ctx.Err())
	default:
		return d.GetSdkTypes(in)
	}
}

func (d *APIGatewayDouble) GetSdkWithContext(i0 context.Context, i1 *apigateway.GetSdkInput, i2 ...request.Option) (r0 *apigateway.GetSdkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSdkWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.GetSdkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetSdkWithContext(ctx context.Context, in *apigateway.GetSdkInput, _ ...request.Option) (*apigateway.GetSdkOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetSdk cancelled", ctx.Err())
	default:
		return d.GetSdk(in)
	}
}

func (d *APIGatewayDouble) GetStage(i0 *apigateway.GetStageInput) (r0 *apigateway.Stage, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetStage", i0)
	r0, _ = returns[0].(*apigateway.Stage)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetStageRequest(i0 *apigateway.GetStageInput) (r0 *request.Request, r1 *apigateway.Stage) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetStageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.Stage)
	return
}

func (d *APIGatewayDouble) GetStageWithContext(i0 context.Context, i1 *apigateway.GetStageInput, i2 ...request.Option) (r0 *apigateway.Stage, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetStageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.Stage)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetStageWithContext(ctx context.Context, in *apigateway.GetStageInput, _ ...request.Option) (*apigateway.Stage, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetStage cancelled", ctx.Err())
	default:
		return d.GetStage(in)
	}
}

func (d *APIGatewayDouble) GetStages(i0 *apigateway.GetStagesInput) (r0 *apigateway.GetStagesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetStages", i0)
	r0, _ = returns[0].(*apigateway.GetStagesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetStagesRequest(i0 *apigateway.GetStagesInput) (r0 *request.Request, r1 *apigateway.GetStagesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetStagesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.GetStagesOutput)
	return
}

func (d *APIGatewayDouble) GetStagesWithContext(i0 context.Context, i1 *apigateway.GetStagesInput, i2 ...request.Option) (r0 *apigateway.GetStagesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetStagesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.GetStagesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetStagesWithContext(ctx context.Context, in *apigateway.GetStagesInput, _ ...request.Option) (*apigateway.GetStagesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetStages cancelled", ctx.Err())
	default:
		return d.GetStages(in)
	}
}

func (d *APIGatewayDouble) GetTags(i0 *apigateway.GetTagsInput) (r0 *apigateway.GetTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTags", i0)
	r0, _ = returns[0].(*apigateway.GetTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetTagsRequest(i0 *apigateway.GetTagsInput) (r0 *request.Request, r1 *apigateway.GetTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.GetTagsOutput)
	return
}

func (d *APIGatewayDouble) GetTagsWithContext(i0 context.Context, i1 *apigateway.GetTagsInput, i2 ...request.Option) (r0 *apigateway.GetTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.GetTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetTagsWithContext(ctx context.Context, in *apigateway.GetTagsInput, _ ...request.Option) (*apigateway.GetTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetTags cancelled", ctx.Err())
	default:
		return d.GetTags(in)
	}
}

func (d *APIGatewayDouble) GetUsage(i0 *apigateway.GetUsageInput) (r0 *apigateway.Usage, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUsage", i0)
	r0, _ = returns[0].(*apigateway.Usage)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetUsagePages(i0 *apigateway.GetUsageInput, i1 func(*apigateway.Usage, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUsagePages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *APIGatewayDouble) fakeGetUsagePages(in *apigateway.GetUsageInput, pager func(*apigateway.Usage, bool) (shouldContinue bool)) error {
	return d.Paginate("GetUsage", paginators, in, pager)
}

func (d *APIGatewayDouble) GetUsagePagesWithContext(i0 context.Context, i1 *apigateway.GetUsageInput, i2 func(*apigateway.Usage, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUsagePagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *APIGatewayDouble) fakeGetUsagePagesWithContext(ctx context.Context, in *apigateway.GetUsageInput, pager func(*apigateway.Usage, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetUsage", paginators, ctx, in, pager, options...)
}

func (d *APIGatewayDouble) GetUsagePlan(i0 *apigateway.GetUsagePlanInput) (r0 *apigateway.UsagePlan, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUsagePlan", i0)
	r0, _ = returns[0].(*apigateway.UsagePlan)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetUsagePlanKey(i0 *apigateway.GetUsagePlanKeyInput) (r0 *apigateway.UsagePlanKey, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUsagePlanKey", i0)
	r0, _ = returns[0].(*apigateway.UsagePlanKey)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetUsagePlanKeyRequest(i0 *apigateway.GetUsagePlanKeyInput) (r0 *request.Request, r1 *apigateway.UsagePlanKey) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUsagePlanKeyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.UsagePlanKey)
	return
}

func (d *APIGatewayDouble) GetUsagePlanKeyWithContext(i0 context.Context, i1 *apigateway.GetUsagePlanKeyInput, i2 ...request.Option) (r0 *apigateway.UsagePlanKey, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUsagePlanKeyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.UsagePlanKey)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetUsagePlanKeyWithContext(ctx context.Context, in *apigateway.GetUsagePlanKeyInput, _ ...request.Option) (*apigateway.UsagePlanKey, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetUsagePlanKey cancelled", ctx.Err())
	default:
		return d.GetUsagePlanKey(in)
	}
}

func (d *APIGatewayDouble) GetUsagePlanKeys(i0 *apigateway.GetUsagePlanKeysInput) (r0 *apigateway.GetUsagePlanKeysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUsagePlanKeys", i0)
	r0, _ = returns[0].(*apigateway.GetUsagePlanKeysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetUsagePlanKeysPages(i0 *apigateway.GetUsagePlanKeysInput, i1 func(*apigateway.GetUsagePlanKeysOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUsagePlanKeysPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *APIGatewayDouble) fakeGetUsagePlanKeysPages(in *apigateway.GetUsagePlanKeysInput, pager func(*apigateway.GetUsagePlanKeysOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetUsagePlanKeys", paginators, in, pager)
}

func (d *APIGatewayDouble) GetUsagePlanKeysPagesWithContext(i0 context.Context, i1 *apigateway.GetUsagePlanKeysInput, i2 func(*apigateway.GetUsagePlanKeysOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUsagePlanKeysPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *APIGatewayDouble) fakeGetUsagePlanKeysPagesWithContext(ctx context.Context, in *apigateway.GetUsagePlanKeysInput, pager func(*apigateway.GetUsagePlanKeysOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetUsagePlanKeys", paginators, ctx, in, pager, options...)
}

func (d *APIGatewayDouble) GetUsagePlanKeysRequest(i0 *apigateway.GetUsagePlanKeysInput) (r0 *request.Request, r1 *apigateway.GetUsagePlanKeysOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUsagePlanKeysRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.GetUsagePlanKeysOutput)
	return
}

func (d *APIGatewayDouble) GetUsagePlanKeysWithContext(i0 context.Context, i1 *apigateway.GetUsagePlanKeysInput, i2 ...request.Option) (r0 *apigateway.GetUsagePlanKeysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUsagePlanKeysWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.GetUsagePlanKeysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetUsagePlanKeysWithContext(ctx context.Context, in *apigateway.GetUsagePlanKeysInput, _ ...request.Option) (*apigateway.GetUsagePlanKeysOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetUsagePlanKeys cancelled", ctx.Err())
	default:
		return d.GetUsagePlanKeys(in)
	}
}

func (d *APIGatewayDouble) GetUsagePlanRequest(i0 *apigateway.GetUsagePlanInput) (r0 *request.Request, r1 *apigateway.UsagePlan) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUsagePlanRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.UsagePlan)
	return
}

func (d *APIGatewayDouble) GetUsagePlanWithContext(i0 context.Context, i1 *apigateway.GetUsagePlanInput, i2 ...request.Option) (r0 *apigateway.UsagePlan, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUsagePlanWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.UsagePlan)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetUsagePlanWithContext(ctx context.Context, in *apigateway.GetUsagePlanInput, _ ...request.Option) (*apigateway.UsagePlan, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetUsagePlan cancelled", ctx.Err())
	default:
		return d.GetUsagePlan(in)
	}
}

func (d *APIGatewayDouble) GetUsagePlans(i0 *apigateway.GetUsagePlansInput) (r0 *apigateway.GetUsagePlansOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUsagePlans", i0)
	r0, _ = returns[0].(*apigateway.GetUsagePlansOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetUsagePlansPages(i0 *apigateway.GetUsagePlansInput, i1 func(*apigateway.GetUsagePlansOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUsagePlansPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *APIGatewayDouble) fakeGetUsagePlansPages(in *apigateway.GetUsagePlansInput, pager func(*apigateway.GetUsagePlansOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetUsagePlans", paginators, in, pager)
}

func (d *APIGatewayDouble) GetUsagePlansPagesWithContext(i0 context.Context, i1 *apigateway.GetUsagePlansInput, i2 func(*apigateway.GetUsagePlansOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUsagePlansPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *APIGatewayDouble) fakeGetUsagePlansPagesWithContext(ctx context.Context, in *apigateway.GetUsagePlansInput, pager func(*apigateway.GetUsagePlansOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetUsagePlans", paginators, ctx, in, pager, options...)
}

func (d *APIGatewayDouble) GetUsagePlansRequest(i0 *apigateway.GetUsagePlansInput) (r0 *request.Request, r1 *apigateway.GetUsagePlansOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUsagePlansRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.GetUsagePlansOutput)
	return
}

func (d *APIGatewayDouble) GetUsagePlansWithContext(i0 context.Context, i1 *apigateway.GetUsagePlansInput, i2 ...request.Option) (r0 *apigateway.GetUsagePlansOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUsagePlansWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.GetUsagePlansOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetUsagePlansWithContext(ctx context.Context, in *apigateway.GetUsagePlansInput, _ ...request.Option) (*apigateway.GetUsagePlansOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetUsagePlans cancelled", ctx.Err())
	default:
		return d.GetUsagePlans(in)
	}
}

func (d *APIGatewayDouble) GetUsageRequest(i0 *apigateway.GetUsageInput) (r0 *request.Request, r1 *apigateway.Usage) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUsageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.Usage)
	return
}

func (d *APIGatewayDouble) GetUsageWithContext(i0 context.Context, i1 *apigateway.GetUsageInput, i2 ...request.Option) (r0 *apigateway.Usage, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUsageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.Usage)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetUsageWithContext(ctx context.Context, in *apigateway.GetUsageInput, _ ...request.Option) (*apigateway.Usage, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetUsage cancelled", ctx.Err())
	default:
		return d.GetUsage(in)
	}
}

func (d *APIGatewayDouble) GetVpcLink(i0 *apigateway.GetVpcLinkInput) (r0 *apigateway.UpdateVpcLinkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetVpcLink", i0)
	r0, _ = returns[0].(*apigateway.UpdateVpcLinkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetVpcLinkRequest(i0 *apigateway.GetVpcLinkInput) (r0 *request.Request, r1 *apigateway.UpdateVpcLinkOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetVpcLinkRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.UpdateVpcLinkOutput)
	return
}

func (d *APIGatewayDouble) GetVpcLinkWithContext(i0 context.Context, i1 *apigateway.GetVpcLinkInput, i2 ...request.Option) (r0 *apigateway.UpdateVpcLinkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetVpcLinkWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.UpdateVpcLinkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetVpcLinkWithContext(ctx context.Context, in *apigateway.GetVpcLinkInput, _ ...request.Option) (*apigateway.UpdateVpcLinkOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetVpcLink cancelled", ctx.Err())
	default:
		return d.GetVpcLink(in)
	}
}

func (d *APIGatewayDouble) GetVpcLinks(i0 *apigateway.GetVpcLinksInput) (r0 *apigateway.GetVpcLinksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetVpcLinks", i0)
	r0, _ = returns[0].(*apigateway.GetVpcLinksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) GetVpcLinksPages(i0 *apigateway.GetVpcLinksInput, i1 func(*apigateway.GetVpcLinksOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetVpcLinksPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *APIGatewayDouble) fakeGetVpcLinksPages(in *apigateway.GetVpcLinksInput, pager func(*apigateway.GetVpcLinksOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetVpcLinks", paginators, in, pager)
}

func (d *APIGatewayDouble) GetVpcLinksPagesWithContext(i0 context.Context, i1 *apigateway.GetVpcLinksInput, i2 func(*apigateway.GetVpcLinksOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetVpcLinksPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *APIGatewayDouble) fakeGetVpcLinksPagesWithContext(ctx context.Context, in *apigateway.GetVpcLinksInput, pager func(*apigateway.GetVpcLinksOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetVpcLinks", paginators, ctx, in, pager, options...)
}

func (d *APIGatewayDouble) GetVpcLinksRequest(i0 *apigateway.GetVpcLinksInput) (r0 *request.Request, r1 *apigateway.GetVpcLinksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetVpcLinksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.GetVpcLinksOutput)
	return
}

func (d *APIGatewayDouble) GetVpcLinksWithContext(i0 context.Context, i1 *apigateway.GetVpcLinksInput, i2 ...request.Option) (r0 *apigateway.GetVpcLinksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetVpcLinksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.GetVpcLinksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeGetVpcLinksWithContext(ctx context.Context, in *apigateway.GetVpcLinksInput, _ ...request.Option) (*apigateway.GetVpcLinksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetVpcLinks cancelled", ctx.Err())
	default:
		return d.GetVpcLinks(in)
	}
}

func (d *APIGatewayDouble) ImportApiKeys(i0 *apigateway.ImportApiKeysInput) (r0 *apigateway.ImportApiKeysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportApiKeys", i0)
	r0, _ = returns[0].(*apigateway.ImportApiKeysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) ImportApiKeysRequest(i0 *apigateway.ImportApiKeysInput) (r0 *request.Request, r1 *apigateway.ImportApiKeysOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportApiKeysRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.ImportApiKeysOutput)
	return
}

func (d *APIGatewayDouble) ImportApiKeysWithContext(i0 context.Context, i1 *apigateway.ImportApiKeysInput, i2 ...request.Option) (r0 *apigateway.ImportApiKeysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportApiKeysWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.ImportApiKeysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeImportApiKeysWithContext(ctx context.Context, in *apigateway.ImportApiKeysInput, _ ...request.Option) (*apigateway.ImportApiKeysOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ImportApiKeys cancelled", ctx.Err())
	default:
		return d.ImportApiKeys(in)
	}
}

func (d *APIGatewayDouble) ImportDocumentationParts(i0 *apigateway.ImportDocumentationPartsInput) (r0 *apigateway.ImportDocumentationPartsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportDocumentationParts", i0)
	r0, _ = returns[0].(*apigateway.ImportDocumentationPartsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) ImportDocumentationPartsRequest(i0 *apigateway.ImportDocumentationPartsInput) (r0 *request.Request, r1 *apigateway.ImportDocumentationPartsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportDocumentationPartsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.ImportDocumentationPartsOutput)
	return
}

func (d *APIGatewayDouble) ImportDocumentationPartsWithContext(i0 context.Context, i1 *apigateway.ImportDocumentationPartsInput, i2 ...request.Option) (r0 *apigateway.ImportDocumentationPartsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportDocumentationPartsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.ImportDocumentationPartsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeImportDocumentationPartsWithContext(ctx context.Context, in *apigateway.ImportDocumentationPartsInput, _ ...request.Option) (*apigateway.ImportDocumentationPartsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ImportDocumentationParts cancelled", ctx.Err())
	default:
		return d.ImportDocumentationParts(in)
	}
}

func (d *APIGatewayDouble) ImportRestApi(i0 *apigateway.ImportRestApiInput) (r0 *apigateway.RestApi, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportRestApi", i0)
	r0, _ = returns[0].(*apigateway.RestApi)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) ImportRestApiRequest(i0 *apigateway.ImportRestApiInput) (r0 *request.Request, r1 *apigateway.RestApi) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportRestApiRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.RestApi)
	return
}

func (d *APIGatewayDouble) ImportRestApiWithContext(i0 context.Context, i1 *apigateway.ImportRestApiInput, i2 ...request.Option) (r0 *apigateway.RestApi, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportRestApiWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.RestApi)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeImportRestApiWithContext(ctx context.Context, in *apigateway.ImportRestApiInput, _ ...request.Option) (*apigateway.RestApi, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ImportRestApi cancelled", ctx.Err())
	default:
		return d.ImportRestApi(in)
	}
}

func (d *APIGatewayDouble) PutGatewayResponse(i0 *apigateway.PutGatewayResponseInput) (r0 *apigateway.UpdateGatewayResponseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutGatewayResponse", i0)
	r0, _ = returns[0].(*apigateway.UpdateGatewayResponseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) PutGatewayResponseRequest(i0 *apigateway.PutGatewayResponseInput) (r0 *request.Request, r1 *apigateway.UpdateGatewayResponseOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutGatewayResponseRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.UpdateGatewayResponseOutput)
	return
}

func (d *APIGatewayDouble) PutGatewayResponseWithContext(i0 context.Context, i1 *apigateway.PutGatewayResponseInput, i2 ...request.Option) (r0 *apigateway.UpdateGatewayResponseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutGatewayResponseWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.UpdateGatewayResponseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakePutGatewayResponseWithContext(ctx context.Context, in *apigateway.PutGatewayResponseInput, _ ...request.Option) (*apigateway.UpdateGatewayResponseOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutGatewayResponse cancelled", ctx.Err())
	default:
		return d.PutGatewayResponse(in)
	}
}

func (d *APIGatewayDouble) PutIntegration(i0 *apigateway.PutIntegrationInput) (r0 *apigateway.Integration, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutIntegration", i0)
	r0, _ = returns[0].(*apigateway.Integration)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) PutIntegrationRequest(i0 *apigateway.PutIntegrationInput) (r0 *request.Request, r1 *apigateway.Integration) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutIntegrationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.Integration)
	return
}

func (d *APIGatewayDouble) PutIntegrationResponse(i0 *apigateway.PutIntegrationResponseInput) (r0 *apigateway.IntegrationResponse, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutIntegrationResponse", i0)
	r0, _ = returns[0].(*apigateway.IntegrationResponse)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) PutIntegrationResponseRequest(i0 *apigateway.PutIntegrationResponseInput) (r0 *request.Request, r1 *apigateway.IntegrationResponse) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutIntegrationResponseRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.IntegrationResponse)
	return
}

func (d *APIGatewayDouble) PutIntegrationResponseWithContext(i0 context.Context, i1 *apigateway.PutIntegrationResponseInput, i2 ...request.Option) (r0 *apigateway.IntegrationResponse, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutIntegrationResponseWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.IntegrationResponse)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakePutIntegrationResponseWithContext(ctx context.Context, in *apigateway.PutIntegrationResponseInput, _ ...request.Option) (*apigateway.IntegrationResponse, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutIntegrationResponse cancelled", ctx.Err())
	default:
		return d.PutIntegrationResponse(in)
	}
}

func (d *APIGatewayDouble) PutIntegrationWithContext(i0 context.Context, i1 *apigateway.PutIntegrationInput, i2 ...request.Option) (r0 *apigateway.Integration, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutIntegrationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.Integration)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakePutIntegrationWithContext(ctx context.Context, in *apigateway.PutIntegrationInput, _ ...request.Option) (*apigateway.Integration, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutIntegration cancelled", ctx.Err())
	default:
		return d.PutIntegration(in)
	}
}

func (d *APIGatewayDouble) PutMethod(i0 *apigateway.PutMethodInput) (r0 *apigateway.Method, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutMethod", i0)
	r0, _ = returns[0].(*apigateway.Method)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) PutMethodRequest(i0 *apigateway.PutMethodInput) (r0 *request.Request, r1 *apigateway.Method) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutMethodRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.Method)
	return
}

func (d *APIGatewayDouble) PutMethodResponse(i0 *apigateway.PutMethodResponseInput) (r0 *apigateway.MethodResponse, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutMethodResponse", i0)
	r0, _ = returns[0].(*apigateway.MethodResponse)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) PutMethodResponseRequest(i0 *apigateway.PutMethodResponseInput) (r0 *request.Request, r1 *apigateway.MethodResponse) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutMethodResponseRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.MethodResponse)
	return
}

func (d *APIGatewayDouble) PutMethodResponseWithContext(i0 context.Context, i1 *apigateway.PutMethodResponseInput, i2 ...request.Option) (r0 *apigateway.MethodResponse, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutMethodResponseWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.MethodResponse)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakePutMethodResponseWithContext(ctx context.Context, in *apigateway.PutMethodResponseInput, _ ...request.Option) (*apigateway.MethodResponse, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutMethodResponse cancelled", ctx.Err())
	default:
		return d.PutMethodResponse(in)
	}
}

func (d *APIGatewayDouble) PutMethodWithContext(i0 context.Context, i1 *apigateway.PutMethodInput, i2 ...request.Option) (r0 *apigateway.Method, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutMethodWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.Method)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakePutMethodWithContext(ctx context.Context, in *apigateway.PutMethodInput, _ ...request.Option) (*apigateway.Method, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutMethod cancelled", ctx.Err())
	default:
		return d.PutMethod(in)
	}
}

func (d *APIGatewayDouble) PutRestApi(i0 *apigateway.PutRestApiInput) (r0 *apigateway.RestApi, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRestApi", i0)
	r0, _ = returns[0].(*apigateway.RestApi)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) PutRestApiRequest(i0 *apigateway.PutRestApiInput) (r0 *request.Request, r1 *apigateway.RestApi) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRestApiRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.RestApi)
	return
}

func (d *APIGatewayDouble) PutRestApiWithContext(i0 context.Context, i1 *apigateway.PutRestApiInput, i2 ...request.Option) (r0 *apigateway.RestApi, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRestApiWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.RestApi)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakePutRestApiWithContext(ctx context.Context, in *apigateway.PutRestApiInput, _ ...request.Option) (*apigateway.RestApi, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutRestApi cancelled", ctx.Err())
	default:
		return d.PutRestApi(in)
	}
}

func (d *APIGatewayDouble) TagResource(i0 *apigateway.TagResourceInput) (r0 *apigateway.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*apigateway.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) TagResourceRequest(i0 *apigateway.TagResourceInput) (r0 *request.Request, r1 *apigateway.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.TagResourceOutput)
	return
}

func (d *APIGatewayDouble) TagResourceWithContext(i0 context.Context, i1 *apigateway.TagResourceInput, i2 ...request.Option) (r0 *apigateway.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeTagResourceWithContext(ctx context.Context, in *apigateway.TagResourceInput, _ ...request.Option) (*apigateway.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *APIGatewayDouble) TestInvokeAuthorizer(i0 *apigateway.TestInvokeAuthorizerInput) (r0 *apigateway.TestInvokeAuthorizerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestInvokeAuthorizer", i0)
	r0, _ = returns[0].(*apigateway.TestInvokeAuthorizerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) TestInvokeAuthorizerRequest(i0 *apigateway.TestInvokeAuthorizerInput) (r0 *request.Request, r1 *apigateway.TestInvokeAuthorizerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestInvokeAuthorizerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.TestInvokeAuthorizerOutput)
	return
}

func (d *APIGatewayDouble) TestInvokeAuthorizerWithContext(i0 context.Context, i1 *apigateway.TestInvokeAuthorizerInput, i2 ...request.Option) (r0 *apigateway.TestInvokeAuthorizerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestInvokeAuthorizerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.TestInvokeAuthorizerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeTestInvokeAuthorizerWithContext(ctx context.Context, in *apigateway.TestInvokeAuthorizerInput, _ ...request.Option) (*apigateway.TestInvokeAuthorizerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TestInvokeAuthorizer cancelled", ctx.Err())
	default:
		return d.TestInvokeAuthorizer(in)
	}
}

func (d *APIGatewayDouble) TestInvokeMethod(i0 *apigateway.TestInvokeMethodInput) (r0 *apigateway.TestInvokeMethodOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestInvokeMethod", i0)
	r0, _ = returns[0].(*apigateway.TestInvokeMethodOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) TestInvokeMethodRequest(i0 *apigateway.TestInvokeMethodInput) (r0 *request.Request, r1 *apigateway.TestInvokeMethodOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestInvokeMethodRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.TestInvokeMethodOutput)
	return
}

func (d *APIGatewayDouble) TestInvokeMethodWithContext(i0 context.Context, i1 *apigateway.TestInvokeMethodInput, i2 ...request.Option) (r0 *apigateway.TestInvokeMethodOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestInvokeMethodWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.TestInvokeMethodOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeTestInvokeMethodWithContext(ctx context.Context, in *apigateway.TestInvokeMethodInput, _ ...request.Option) (*apigateway.TestInvokeMethodOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TestInvokeMethod cancelled", ctx.Err())
	default:
		return d.TestInvokeMethod(in)
	}
}

func (d *APIGatewayDouble) UntagResource(i0 *apigateway.UntagResourceInput) (r0 *apigateway.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*apigateway.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) UntagResourceRequest(i0 *apigateway.UntagResourceInput) (r0 *request.Request, r1 *apigateway.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.UntagResourceOutput)
	return
}

func (d *APIGatewayDouble) UntagResourceWithContext(i0 context.Context, i1 *apigateway.UntagResourceInput, i2 ...request.Option) (r0 *apigateway.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeUntagResourceWithContext(ctx context.Context, in *apigateway.UntagResourceInput, _ ...request.Option) (*apigateway.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *APIGatewayDouble) UpdateAccount(i0 *apigateway.UpdateAccountInput) (r0 *apigateway.Account, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAccount", i0)
	r0, _ = returns[0].(*apigateway.Account)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) UpdateAccountRequest(i0 *apigateway.UpdateAccountInput) (r0 *request.Request, r1 *apigateway.Account) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAccountRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.Account)
	return
}

func (d *APIGatewayDouble) UpdateAccountWithContext(i0 context.Context, i1 *apigateway.UpdateAccountInput, i2 ...request.Option) (r0 *apigateway.Account, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAccountWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.Account)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeUpdateAccountWithContext(ctx context.Context, in *apigateway.UpdateAccountInput, _ ...request.Option) (*apigateway.Account, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateAccount cancelled", ctx.Err())
	default:
		return d.UpdateAccount(in)
	}
}

func (d *APIGatewayDouble) UpdateApiKey(i0 *apigateway.UpdateApiKeyInput) (r0 *apigateway.ApiKey, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApiKey", i0)
	r0, _ = returns[0].(*apigateway.ApiKey)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) UpdateApiKeyRequest(i0 *apigateway.UpdateApiKeyInput) (r0 *request.Request, r1 *apigateway.ApiKey) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApiKeyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.ApiKey)
	return
}

func (d *APIGatewayDouble) UpdateApiKeyWithContext(i0 context.Context, i1 *apigateway.UpdateApiKeyInput, i2 ...request.Option) (r0 *apigateway.ApiKey, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApiKeyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.ApiKey)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeUpdateApiKeyWithContext(ctx context.Context, in *apigateway.UpdateApiKeyInput, _ ...request.Option) (*apigateway.ApiKey, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateApiKey cancelled", ctx.Err())
	default:
		return d.UpdateApiKey(in)
	}
}

func (d *APIGatewayDouble) UpdateAuthorizer(i0 *apigateway.UpdateAuthorizerInput) (r0 *apigateway.Authorizer, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAuthorizer", i0)
	r0, _ = returns[0].(*apigateway.Authorizer)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) UpdateAuthorizerRequest(i0 *apigateway.UpdateAuthorizerInput) (r0 *request.Request, r1 *apigateway.Authorizer) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAuthorizerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.Authorizer)
	return
}

func (d *APIGatewayDouble) UpdateAuthorizerWithContext(i0 context.Context, i1 *apigateway.UpdateAuthorizerInput, i2 ...request.Option) (r0 *apigateway.Authorizer, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAuthorizerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.Authorizer)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeUpdateAuthorizerWithContext(ctx context.Context, in *apigateway.UpdateAuthorizerInput, _ ...request.Option) (*apigateway.Authorizer, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateAuthorizer cancelled", ctx.Err())
	default:
		return d.UpdateAuthorizer(in)
	}
}

func (d *APIGatewayDouble) UpdateBasePathMapping(i0 *apigateway.UpdateBasePathMappingInput) (r0 *apigateway.BasePathMapping, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateBasePathMapping", i0)
	r0, _ = returns[0].(*apigateway.BasePathMapping)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) UpdateBasePathMappingRequest(i0 *apigateway.UpdateBasePathMappingInput) (r0 *request.Request, r1 *apigateway.BasePathMapping) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateBasePathMappingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.BasePathMapping)
	return
}

func (d *APIGatewayDouble) UpdateBasePathMappingWithContext(i0 context.Context, i1 *apigateway.UpdateBasePathMappingInput, i2 ...request.Option) (r0 *apigateway.BasePathMapping, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateBasePathMappingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.BasePathMapping)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeUpdateBasePathMappingWithContext(ctx context.Context, in *apigateway.UpdateBasePathMappingInput, _ ...request.Option) (*apigateway.BasePathMapping, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateBasePathMapping cancelled", ctx.Err())
	default:
		return d.UpdateBasePathMapping(in)
	}
}

func (d *APIGatewayDouble) UpdateClientCertificate(i0 *apigateway.UpdateClientCertificateInput) (r0 *apigateway.ClientCertificate, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateClientCertificate", i0)
	r0, _ = returns[0].(*apigateway.ClientCertificate)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) UpdateClientCertificateRequest(i0 *apigateway.UpdateClientCertificateInput) (r0 *request.Request, r1 *apigateway.ClientCertificate) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateClientCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.ClientCertificate)
	return
}

func (d *APIGatewayDouble) UpdateClientCertificateWithContext(i0 context.Context, i1 *apigateway.UpdateClientCertificateInput, i2 ...request.Option) (r0 *apigateway.ClientCertificate, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateClientCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.ClientCertificate)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeUpdateClientCertificateWithContext(ctx context.Context, in *apigateway.UpdateClientCertificateInput, _ ...request.Option) (*apigateway.ClientCertificate, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateClientCertificate cancelled", ctx.Err())
	default:
		return d.UpdateClientCertificate(in)
	}
}

func (d *APIGatewayDouble) UpdateDeployment(i0 *apigateway.UpdateDeploymentInput) (r0 *apigateway.Deployment, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDeployment", i0)
	r0, _ = returns[0].(*apigateway.Deployment)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) UpdateDeploymentRequest(i0 *apigateway.UpdateDeploymentInput) (r0 *request.Request, r1 *apigateway.Deployment) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDeploymentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.Deployment)
	return
}

func (d *APIGatewayDouble) UpdateDeploymentWithContext(i0 context.Context, i1 *apigateway.UpdateDeploymentInput, i2 ...request.Option) (r0 *apigateway.Deployment, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDeploymentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.Deployment)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeUpdateDeploymentWithContext(ctx context.Context, in *apigateway.UpdateDeploymentInput, _ ...request.Option) (*apigateway.Deployment, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDeployment cancelled", ctx.Err())
	default:
		return d.UpdateDeployment(in)
	}
}

func (d *APIGatewayDouble) UpdateDocumentationPart(i0 *apigateway.UpdateDocumentationPartInput) (r0 *apigateway.DocumentationPart, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDocumentationPart", i0)
	r0, _ = returns[0].(*apigateway.DocumentationPart)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) UpdateDocumentationPartRequest(i0 *apigateway.UpdateDocumentationPartInput) (r0 *request.Request, r1 *apigateway.DocumentationPart) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDocumentationPartRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.DocumentationPart)
	return
}

func (d *APIGatewayDouble) UpdateDocumentationPartWithContext(i0 context.Context, i1 *apigateway.UpdateDocumentationPartInput, i2 ...request.Option) (r0 *apigateway.DocumentationPart, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDocumentationPartWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.DocumentationPart)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeUpdateDocumentationPartWithContext(ctx context.Context, in *apigateway.UpdateDocumentationPartInput, _ ...request.Option) (*apigateway.DocumentationPart, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDocumentationPart cancelled", ctx.Err())
	default:
		return d.UpdateDocumentationPart(in)
	}
}

func (d *APIGatewayDouble) UpdateDocumentationVersion(i0 *apigateway.UpdateDocumentationVersionInput) (r0 *apigateway.DocumentationVersion, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDocumentationVersion", i0)
	r0, _ = returns[0].(*apigateway.DocumentationVersion)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) UpdateDocumentationVersionRequest(i0 *apigateway.UpdateDocumentationVersionInput) (r0 *request.Request, r1 *apigateway.DocumentationVersion) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDocumentationVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.DocumentationVersion)
	return
}

func (d *APIGatewayDouble) UpdateDocumentationVersionWithContext(i0 context.Context, i1 *apigateway.UpdateDocumentationVersionInput, i2 ...request.Option) (r0 *apigateway.DocumentationVersion, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDocumentationVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.DocumentationVersion)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeUpdateDocumentationVersionWithContext(ctx context.Context, in *apigateway.UpdateDocumentationVersionInput, _ ...request.Option) (*apigateway.DocumentationVersion, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDocumentationVersion cancelled", ctx.Err())
	default:
		return d.UpdateDocumentationVersion(in)
	}
}

func (d *APIGatewayDouble) UpdateDomainName(i0 *apigateway.UpdateDomainNameInput) (r0 *apigateway.DomainName, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDomainName", i0)
	r0, _ = returns[0].(*apigateway.DomainName)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) UpdateDomainNameRequest(i0 *apigateway.UpdateDomainNameInput) (r0 *request.Request, r1 *apigateway.DomainName) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDomainNameRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.DomainName)
	return
}

func (d *APIGatewayDouble) UpdateDomainNameWithContext(i0 context.Context, i1 *apigateway.UpdateDomainNameInput, i2 ...request.Option) (r0 *apigateway.DomainName, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDomainNameWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.DomainName)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeUpdateDomainNameWithContext(ctx context.Context, in *apigateway.UpdateDomainNameInput, _ ...request.Option) (*apigateway.DomainName, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDomainName cancelled", ctx.Err())
	default:
		return d.UpdateDomainName(in)
	}
}

func (d *APIGatewayDouble) UpdateGatewayResponse(i0 *apigateway.UpdateGatewayResponseInput) (r0 *apigateway.UpdateGatewayResponseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGatewayResponse", i0)
	r0, _ = returns[0].(*apigateway.UpdateGatewayResponseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) UpdateGatewayResponseRequest(i0 *apigateway.UpdateGatewayResponseInput) (r0 *request.Request, r1 *apigateway.UpdateGatewayResponseOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGatewayResponseRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.UpdateGatewayResponseOutput)
	return
}

func (d *APIGatewayDouble) UpdateGatewayResponseWithContext(i0 context.Context, i1 *apigateway.UpdateGatewayResponseInput, i2 ...request.Option) (r0 *apigateway.UpdateGatewayResponseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGatewayResponseWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.UpdateGatewayResponseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeUpdateGatewayResponseWithContext(ctx context.Context, in *apigateway.UpdateGatewayResponseInput, _ ...request.Option) (*apigateway.UpdateGatewayResponseOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateGatewayResponse cancelled", ctx.Err())
	default:
		return d.UpdateGatewayResponse(in)
	}
}

func (d *APIGatewayDouble) UpdateIntegration(i0 *apigateway.UpdateIntegrationInput) (r0 *apigateway.Integration, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateIntegration", i0)
	r0, _ = returns[0].(*apigateway.Integration)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) UpdateIntegrationRequest(i0 *apigateway.UpdateIntegrationInput) (r0 *request.Request, r1 *apigateway.Integration) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateIntegrationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.Integration)
	return
}

func (d *APIGatewayDouble) UpdateIntegrationResponse(i0 *apigateway.UpdateIntegrationResponseInput) (r0 *apigateway.IntegrationResponse, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateIntegrationResponse", i0)
	r0, _ = returns[0].(*apigateway.IntegrationResponse)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) UpdateIntegrationResponseRequest(i0 *apigateway.UpdateIntegrationResponseInput) (r0 *request.Request, r1 *apigateway.IntegrationResponse) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateIntegrationResponseRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.IntegrationResponse)
	return
}

func (d *APIGatewayDouble) UpdateIntegrationResponseWithContext(i0 context.Context, i1 *apigateway.UpdateIntegrationResponseInput, i2 ...request.Option) (r0 *apigateway.IntegrationResponse, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateIntegrationResponseWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.IntegrationResponse)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeUpdateIntegrationResponseWithContext(ctx context.Context, in *apigateway.UpdateIntegrationResponseInput, _ ...request.Option) (*apigateway.IntegrationResponse, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateIntegrationResponse cancelled", ctx.Err())
	default:
		return d.UpdateIntegrationResponse(in)
	}
}

func (d *APIGatewayDouble) UpdateIntegrationWithContext(i0 context.Context, i1 *apigateway.UpdateIntegrationInput, i2 ...request.Option) (r0 *apigateway.Integration, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateIntegrationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.Integration)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeUpdateIntegrationWithContext(ctx context.Context, in *apigateway.UpdateIntegrationInput, _ ...request.Option) (*apigateway.Integration, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateIntegration cancelled", ctx.Err())
	default:
		return d.UpdateIntegration(in)
	}
}

func (d *APIGatewayDouble) UpdateMethod(i0 *apigateway.UpdateMethodInput) (r0 *apigateway.Method, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMethod", i0)
	r0, _ = returns[0].(*apigateway.Method)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) UpdateMethodRequest(i0 *apigateway.UpdateMethodInput) (r0 *request.Request, r1 *apigateway.Method) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMethodRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.Method)
	return
}

func (d *APIGatewayDouble) UpdateMethodResponse(i0 *apigateway.UpdateMethodResponseInput) (r0 *apigateway.MethodResponse, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMethodResponse", i0)
	r0, _ = returns[0].(*apigateway.MethodResponse)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) UpdateMethodResponseRequest(i0 *apigateway.UpdateMethodResponseInput) (r0 *request.Request, r1 *apigateway.MethodResponse) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMethodResponseRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.MethodResponse)
	return
}

func (d *APIGatewayDouble) UpdateMethodResponseWithContext(i0 context.Context, i1 *apigateway.UpdateMethodResponseInput, i2 ...request.Option) (r0 *apigateway.MethodResponse, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMethodResponseWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.MethodResponse)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeUpdateMethodResponseWithContext(ctx context.Context, in *apigateway.UpdateMethodResponseInput, _ ...request.Option) (*apigateway.MethodResponse, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateMethodResponse cancelled", ctx.Err())
	default:
		return d.UpdateMethodResponse(in)
	}
}

func (d *APIGatewayDouble) UpdateMethodWithContext(i0 context.Context, i1 *apigateway.UpdateMethodInput, i2 ...request.Option) (r0 *apigateway.Method, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMethodWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.Method)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeUpdateMethodWithContext(ctx context.Context, in *apigateway.UpdateMethodInput, _ ...request.Option) (*apigateway.Method, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateMethod cancelled", ctx.Err())
	default:
		return d.UpdateMethod(in)
	}
}

func (d *APIGatewayDouble) UpdateModel(i0 *apigateway.UpdateModelInput) (r0 *apigateway.Model, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateModel", i0)
	r0, _ = returns[0].(*apigateway.Model)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) UpdateModelRequest(i0 *apigateway.UpdateModelInput) (r0 *request.Request, r1 *apigateway.Model) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateModelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.Model)
	return
}

func (d *APIGatewayDouble) UpdateModelWithContext(i0 context.Context, i1 *apigateway.UpdateModelInput, i2 ...request.Option) (r0 *apigateway.Model, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateModelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.Model)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeUpdateModelWithContext(ctx context.Context, in *apigateway.UpdateModelInput, _ ...request.Option) (*apigateway.Model, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateModel cancelled", ctx.Err())
	default:
		return d.UpdateModel(in)
	}
}

func (d *APIGatewayDouble) UpdateRequestValidator(i0 *apigateway.UpdateRequestValidatorInput) (r0 *apigateway.UpdateRequestValidatorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRequestValidator", i0)
	r0, _ = returns[0].(*apigateway.UpdateRequestValidatorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) UpdateRequestValidatorRequest(i0 *apigateway.UpdateRequestValidatorInput) (r0 *request.Request, r1 *apigateway.UpdateRequestValidatorOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRequestValidatorRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.UpdateRequestValidatorOutput)
	return
}

func (d *APIGatewayDouble) UpdateRequestValidatorWithContext(i0 context.Context, i1 *apigateway.UpdateRequestValidatorInput, i2 ...request.Option) (r0 *apigateway.UpdateRequestValidatorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRequestValidatorWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.UpdateRequestValidatorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeUpdateRequestValidatorWithContext(ctx context.Context, in *apigateway.UpdateRequestValidatorInput, _ ...request.Option) (*apigateway.UpdateRequestValidatorOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateRequestValidator cancelled", ctx.Err())
	default:
		return d.UpdateRequestValidator(in)
	}
}

func (d *APIGatewayDouble) UpdateResource(i0 *apigateway.UpdateResourceInput) (r0 *apigateway.Resource, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateResource", i0)
	r0, _ = returns[0].(*apigateway.Resource)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) UpdateResourceRequest(i0 *apigateway.UpdateResourceInput) (r0 *request.Request, r1 *apigateway.Resource) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.Resource)
	return
}

func (d *APIGatewayDouble) UpdateResourceWithContext(i0 context.Context, i1 *apigateway.UpdateResourceInput, i2 ...request.Option) (r0 *apigateway.Resource, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.Resource)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeUpdateResourceWithContext(ctx context.Context, in *apigateway.UpdateResourceInput, _ ...request.Option) (*apigateway.Resource, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateResource cancelled", ctx.Err())
	default:
		return d.UpdateResource(in)
	}
}

func (d *APIGatewayDouble) UpdateRestApi(i0 *apigateway.UpdateRestApiInput) (r0 *apigateway.RestApi, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRestApi", i0)
	r0, _ = returns[0].(*apigateway.RestApi)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) UpdateRestApiRequest(i0 *apigateway.UpdateRestApiInput) (r0 *request.Request, r1 *apigateway.RestApi) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRestApiRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.RestApi)
	return
}

func (d *APIGatewayDouble) UpdateRestApiWithContext(i0 context.Context, i1 *apigateway.UpdateRestApiInput, i2 ...request.Option) (r0 *apigateway.RestApi, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRestApiWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.RestApi)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeUpdateRestApiWithContext(ctx context.Context, in *apigateway.UpdateRestApiInput, _ ...request.Option) (*apigateway.RestApi, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateRestApi cancelled", ctx.Err())
	default:
		return d.UpdateRestApi(in)
	}
}

func (d *APIGatewayDouble) UpdateStage(i0 *apigateway.UpdateStageInput) (r0 *apigateway.Stage, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateStage", i0)
	r0, _ = returns[0].(*apigateway.Stage)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) UpdateStageRequest(i0 *apigateway.UpdateStageInput) (r0 *request.Request, r1 *apigateway.Stage) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateStageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.Stage)
	return
}

func (d *APIGatewayDouble) UpdateStageWithContext(i0 context.Context, i1 *apigateway.UpdateStageInput, i2 ...request.Option) (r0 *apigateway.Stage, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateStageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.Stage)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeUpdateStageWithContext(ctx context.Context, in *apigateway.UpdateStageInput, _ ...request.Option) (*apigateway.Stage, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateStage cancelled", ctx.Err())
	default:
		return d.UpdateStage(in)
	}
}

func (d *APIGatewayDouble) UpdateUsage(i0 *apigateway.UpdateUsageInput) (r0 *apigateway.Usage, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUsage", i0)
	r0, _ = returns[0].(*apigateway.Usage)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) UpdateUsagePlan(i0 *apigateway.UpdateUsagePlanInput) (r0 *apigateway.UsagePlan, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUsagePlan", i0)
	r0, _ = returns[0].(*apigateway.UsagePlan)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) UpdateUsagePlanRequest(i0 *apigateway.UpdateUsagePlanInput) (r0 *request.Request, r1 *apigateway.UsagePlan) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUsagePlanRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.UsagePlan)
	return
}

func (d *APIGatewayDouble) UpdateUsagePlanWithContext(i0 context.Context, i1 *apigateway.UpdateUsagePlanInput, i2 ...request.Option) (r0 *apigateway.UsagePlan, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUsagePlanWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.UsagePlan)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeUpdateUsagePlanWithContext(ctx context.Context, in *apigateway.UpdateUsagePlanInput, _ ...request.Option) (*apigateway.UsagePlan, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateUsagePlan cancelled", ctx.Err())
	default:
		return d.UpdateUsagePlan(in)
	}
}

func (d *APIGatewayDouble) UpdateUsageRequest(i0 *apigateway.UpdateUsageInput) (r0 *request.Request, r1 *apigateway.Usage) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUsageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.Usage)
	return
}

func (d *APIGatewayDouble) UpdateUsageWithContext(i0 context.Context, i1 *apigateway.UpdateUsageInput, i2 ...request.Option) (r0 *apigateway.Usage, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUsageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.Usage)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeUpdateUsageWithContext(ctx context.Context, in *apigateway.UpdateUsageInput, _ ...request.Option) (*apigateway.Usage, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateUsage cancelled", ctx.Err())
	default:
		return d.UpdateUsage(in)
	}
}

func (d *APIGatewayDouble) UpdateVpcLink(i0 *apigateway.UpdateVpcLinkInput) (r0 *apigateway.UpdateVpcLinkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateVpcLink", i0)
	r0, _ = returns[0].(*apigateway.UpdateVpcLinkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) UpdateVpcLinkRequest(i0 *apigateway.UpdateVpcLinkInput) (r0 *request.Request, r1 *apigateway.UpdateVpcLinkOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateVpcLinkRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigateway.UpdateVpcLinkOutput)
	return
}

func (d *APIGatewayDouble) UpdateVpcLinkWithContext(i0 context.Context, i1 *apigateway.UpdateVpcLinkInput, i2 ...request.Option) (r0 *apigateway.UpdateVpcLinkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateVpcLinkWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigateway.UpdateVpcLinkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *APIGatewayDouble) fakeUpdateVpcLinkWithContext(ctx context.Context, in *apigateway.UpdateVpcLinkInput, _ ...request.Option) (*apigateway.UpdateVpcLinkOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateVpcLink cancelled", ctx.Err())
	default:
		return d.UpdateVpcLink(in)
	}
}
