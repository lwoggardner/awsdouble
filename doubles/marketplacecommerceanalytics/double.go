// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:13:47+11:00

// Package marketplacecommerceanalyticsdouble provides a TestDouble implementation of marketplacecommerceanalyticsiface.MarketplaceCommerceAnalyticsAPI
package marketplacecommerceanalyticsdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/marketplacecommerceanalytics"
	"github.com/aws/aws-sdk-go/service/marketplacecommerceanalytics/marketplacecommerceanalyticsiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// MarketplaceCommerceAnalyticsDouble is TestDouble for marketplacecommerceanalyticsiface.MarketplaceCommerceAnalyticsAPI
type MarketplaceCommerceAnalyticsDouble struct {
	marketplacecommerceanalyticsiface.MarketplaceCommerceAnalyticsAPI
	*awsdouble.AWSTestDouble
}

// Constructor for MarketplaceCommerceAnalyticsDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *MarketplaceCommerceAnalyticsDouble {
	result := &MarketplaceCommerceAnalyticsDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*marketplacecommerceanalyticsiface.MarketplaceCommerceAnalyticsAPI)(nil), configurators...)
	return result
}

func (d *MarketplaceCommerceAnalyticsDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *MarketplaceCommerceAnalyticsDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "GenerateDataSetWithContext":
		return m.Fake(d.fakeGenerateDataSetWithContext)

	case "StartSupportDataExportWithContext":
		return m.Fake(d.fakeStartSupportDataExportWithContext)

	default:
		return nil
	}
}

func (d *MarketplaceCommerceAnalyticsDouble) GenerateDataSet(i0 *marketplacecommerceanalytics.GenerateDataSetInput) (r0 *marketplacecommerceanalytics.GenerateDataSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateDataSet", i0)
	r0, _ = returns[0].(*marketplacecommerceanalytics.GenerateDataSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MarketplaceCommerceAnalyticsDouble) GenerateDataSetRequest(i0 *marketplacecommerceanalytics.GenerateDataSetInput) (r0 *request.Request, r1 *marketplacecommerceanalytics.GenerateDataSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateDataSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*marketplacecommerceanalytics.GenerateDataSetOutput)
	return
}

func (d *MarketplaceCommerceAnalyticsDouble) GenerateDataSetWithContext(i0 context.Context, i1 *marketplacecommerceanalytics.GenerateDataSetInput, i2 ...request.Option) (r0 *marketplacecommerceanalytics.GenerateDataSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateDataSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*marketplacecommerceanalytics.GenerateDataSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MarketplaceCommerceAnalyticsDouble) fakeGenerateDataSetWithContext(ctx context.Context, in *marketplacecommerceanalytics.GenerateDataSetInput, _ ...request.Option) (*marketplacecommerceanalytics.GenerateDataSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GenerateDataSet cancelled", ctx.Err())
	default:
		return d.GenerateDataSet(in)
	}
}

func (d *MarketplaceCommerceAnalyticsDouble) StartSupportDataExport(i0 *marketplacecommerceanalytics.StartSupportDataExportInput) (r0 *marketplacecommerceanalytics.StartSupportDataExportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartSupportDataExport", i0)
	r0, _ = returns[0].(*marketplacecommerceanalytics.StartSupportDataExportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MarketplaceCommerceAnalyticsDouble) StartSupportDataExportRequest(i0 *marketplacecommerceanalytics.StartSupportDataExportInput) (r0 *request.Request, r1 *marketplacecommerceanalytics.StartSupportDataExportOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartSupportDataExportRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*marketplacecommerceanalytics.StartSupportDataExportOutput)
	return
}

func (d *MarketplaceCommerceAnalyticsDouble) StartSupportDataExportWithContext(i0 context.Context, i1 *marketplacecommerceanalytics.StartSupportDataExportInput, i2 ...request.Option) (r0 *marketplacecommerceanalytics.StartSupportDataExportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartSupportDataExportWithContext", i0, i1, i2)
	r0, _ = returns[0].(*marketplacecommerceanalytics.StartSupportDataExportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MarketplaceCommerceAnalyticsDouble) fakeStartSupportDataExportWithContext(ctx context.Context, in *marketplacecommerceanalytics.StartSupportDataExportInput, _ ...request.Option) (*marketplacecommerceanalytics.StartSupportDataExportOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartSupportDataExport cancelled", ctx.Err())
	default:
		return d.StartSupportDataExport(in)
	}
}
