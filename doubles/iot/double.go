// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:13:10+11:00

// Package iotdouble provides a TestDouble implementation of iotiface.IoTAPI
package iotdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/iot"
	"github.com/aws/aws-sdk-go/service/iot/iotiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// IoTDouble is TestDouble for iotiface.IoTAPI
type IoTDouble struct {
	iotiface.IoTAPI
	*awsdouble.AWSTestDouble
}

// Constructor for IoTDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *IoTDouble {
	result := &IoTDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*iotiface.IoTAPI)(nil), configurators...)
	return result
}

func (d *IoTDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *IoTDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AcceptCertificateTransferWithContext":
		return m.Fake(d.fakeAcceptCertificateTransferWithContext)

	case "AddThingToBillingGroupWithContext":
		return m.Fake(d.fakeAddThingToBillingGroupWithContext)

	case "AddThingToThingGroupWithContext":
		return m.Fake(d.fakeAddThingToThingGroupWithContext)

	case "AssociateTargetsWithJobWithContext":
		return m.Fake(d.fakeAssociateTargetsWithJobWithContext)

	case "AttachPolicyWithContext":
		return m.Fake(d.fakeAttachPolicyWithContext)

	case "AttachPrincipalPolicyWithContext":
		return m.Fake(d.fakeAttachPrincipalPolicyWithContext)

	case "AttachSecurityProfileWithContext":
		return m.Fake(d.fakeAttachSecurityProfileWithContext)

	case "AttachThingPrincipalWithContext":
		return m.Fake(d.fakeAttachThingPrincipalWithContext)

	case "CancelAuditMitigationActionsTaskWithContext":
		return m.Fake(d.fakeCancelAuditMitigationActionsTaskWithContext)

	case "CancelAuditTaskWithContext":
		return m.Fake(d.fakeCancelAuditTaskWithContext)

	case "CancelCertificateTransferWithContext":
		return m.Fake(d.fakeCancelCertificateTransferWithContext)

	case "CancelJobExecutionWithContext":
		return m.Fake(d.fakeCancelJobExecutionWithContext)

	case "CancelJobWithContext":
		return m.Fake(d.fakeCancelJobWithContext)

	case "ClearDefaultAuthorizerWithContext":
		return m.Fake(d.fakeClearDefaultAuthorizerWithContext)

	case "ConfirmTopicRuleDestinationWithContext":
		return m.Fake(d.fakeConfirmTopicRuleDestinationWithContext)

	case "CreateAuthorizerWithContext":
		return m.Fake(d.fakeCreateAuthorizerWithContext)

	case "CreateBillingGroupWithContext":
		return m.Fake(d.fakeCreateBillingGroupWithContext)

	case "CreateCertificateFromCsrWithContext":
		return m.Fake(d.fakeCreateCertificateFromCsrWithContext)

	case "CreateDomainConfigurationWithContext":
		return m.Fake(d.fakeCreateDomainConfigurationWithContext)

	case "CreateDynamicThingGroupWithContext":
		return m.Fake(d.fakeCreateDynamicThingGroupWithContext)

	case "CreateJobWithContext":
		return m.Fake(d.fakeCreateJobWithContext)

	case "CreateKeysAndCertificateWithContext":
		return m.Fake(d.fakeCreateKeysAndCertificateWithContext)

	case "CreateMitigationActionWithContext":
		return m.Fake(d.fakeCreateMitigationActionWithContext)

	case "CreateOTAUpdateWithContext":
		return m.Fake(d.fakeCreateOTAUpdateWithContext)

	case "CreatePolicyVersionWithContext":
		return m.Fake(d.fakeCreatePolicyVersionWithContext)

	case "CreatePolicyWithContext":
		return m.Fake(d.fakeCreatePolicyWithContext)

	case "CreateProvisioningClaimWithContext":
		return m.Fake(d.fakeCreateProvisioningClaimWithContext)

	case "CreateProvisioningTemplateVersionWithContext":
		return m.Fake(d.fakeCreateProvisioningTemplateVersionWithContext)

	case "CreateProvisioningTemplateWithContext":
		return m.Fake(d.fakeCreateProvisioningTemplateWithContext)

	case "CreateRoleAliasWithContext":
		return m.Fake(d.fakeCreateRoleAliasWithContext)

	case "CreateScheduledAuditWithContext":
		return m.Fake(d.fakeCreateScheduledAuditWithContext)

	case "CreateSecurityProfileWithContext":
		return m.Fake(d.fakeCreateSecurityProfileWithContext)

	case "CreateStreamWithContext":
		return m.Fake(d.fakeCreateStreamWithContext)

	case "CreateThingGroupWithContext":
		return m.Fake(d.fakeCreateThingGroupWithContext)

	case "CreateThingTypeWithContext":
		return m.Fake(d.fakeCreateThingTypeWithContext)

	case "CreateThingWithContext":
		return m.Fake(d.fakeCreateThingWithContext)

	case "CreateTopicRuleDestinationWithContext":
		return m.Fake(d.fakeCreateTopicRuleDestinationWithContext)

	case "CreateTopicRuleWithContext":
		return m.Fake(d.fakeCreateTopicRuleWithContext)

	case "DeleteAccountAuditConfigurationWithContext":
		return m.Fake(d.fakeDeleteAccountAuditConfigurationWithContext)

	case "DeleteAuthorizerWithContext":
		return m.Fake(d.fakeDeleteAuthorizerWithContext)

	case "DeleteBillingGroupWithContext":
		return m.Fake(d.fakeDeleteBillingGroupWithContext)

	case "DeleteCACertificateWithContext":
		return m.Fake(d.fakeDeleteCACertificateWithContext)

	case "DeleteCertificateWithContext":
		return m.Fake(d.fakeDeleteCertificateWithContext)

	case "DeleteDomainConfigurationWithContext":
		return m.Fake(d.fakeDeleteDomainConfigurationWithContext)

	case "DeleteDynamicThingGroupWithContext":
		return m.Fake(d.fakeDeleteDynamicThingGroupWithContext)

	case "DeleteJobExecutionWithContext":
		return m.Fake(d.fakeDeleteJobExecutionWithContext)

	case "DeleteJobWithContext":
		return m.Fake(d.fakeDeleteJobWithContext)

	case "DeleteMitigationActionWithContext":
		return m.Fake(d.fakeDeleteMitigationActionWithContext)

	case "DeleteOTAUpdateWithContext":
		return m.Fake(d.fakeDeleteOTAUpdateWithContext)

	case "DeletePolicyVersionWithContext":
		return m.Fake(d.fakeDeletePolicyVersionWithContext)

	case "DeletePolicyWithContext":
		return m.Fake(d.fakeDeletePolicyWithContext)

	case "DeleteProvisioningTemplateVersionWithContext":
		return m.Fake(d.fakeDeleteProvisioningTemplateVersionWithContext)

	case "DeleteProvisioningTemplateWithContext":
		return m.Fake(d.fakeDeleteProvisioningTemplateWithContext)

	case "DeleteRegistrationCodeWithContext":
		return m.Fake(d.fakeDeleteRegistrationCodeWithContext)

	case "DeleteRoleAliasWithContext":
		return m.Fake(d.fakeDeleteRoleAliasWithContext)

	case "DeleteScheduledAuditWithContext":
		return m.Fake(d.fakeDeleteScheduledAuditWithContext)

	case "DeleteSecurityProfileWithContext":
		return m.Fake(d.fakeDeleteSecurityProfileWithContext)

	case "DeleteStreamWithContext":
		return m.Fake(d.fakeDeleteStreamWithContext)

	case "DeleteThingGroupWithContext":
		return m.Fake(d.fakeDeleteThingGroupWithContext)

	case "DeleteThingTypeWithContext":
		return m.Fake(d.fakeDeleteThingTypeWithContext)

	case "DeleteThingWithContext":
		return m.Fake(d.fakeDeleteThingWithContext)

	case "DeleteTopicRuleDestinationWithContext":
		return m.Fake(d.fakeDeleteTopicRuleDestinationWithContext)

	case "DeleteTopicRuleWithContext":
		return m.Fake(d.fakeDeleteTopicRuleWithContext)

	case "DeleteV2LoggingLevelWithContext":
		return m.Fake(d.fakeDeleteV2LoggingLevelWithContext)

	case "DeprecateThingTypeWithContext":
		return m.Fake(d.fakeDeprecateThingTypeWithContext)

	case "DescribeAccountAuditConfigurationWithContext":
		return m.Fake(d.fakeDescribeAccountAuditConfigurationWithContext)

	case "DescribeAuditFindingWithContext":
		return m.Fake(d.fakeDescribeAuditFindingWithContext)

	case "DescribeAuditMitigationActionsTaskWithContext":
		return m.Fake(d.fakeDescribeAuditMitigationActionsTaskWithContext)

	case "DescribeAuditTaskWithContext":
		return m.Fake(d.fakeDescribeAuditTaskWithContext)

	case "DescribeAuthorizerWithContext":
		return m.Fake(d.fakeDescribeAuthorizerWithContext)

	case "DescribeBillingGroupWithContext":
		return m.Fake(d.fakeDescribeBillingGroupWithContext)

	case "DescribeCACertificateWithContext":
		return m.Fake(d.fakeDescribeCACertificateWithContext)

	case "DescribeCertificateWithContext":
		return m.Fake(d.fakeDescribeCertificateWithContext)

	case "DescribeDefaultAuthorizerWithContext":
		return m.Fake(d.fakeDescribeDefaultAuthorizerWithContext)

	case "DescribeDomainConfigurationWithContext":
		return m.Fake(d.fakeDescribeDomainConfigurationWithContext)

	case "DescribeEndpointWithContext":
		return m.Fake(d.fakeDescribeEndpointWithContext)

	case "DescribeEventConfigurationsWithContext":
		return m.Fake(d.fakeDescribeEventConfigurationsWithContext)

	case "DescribeIndexWithContext":
		return m.Fake(d.fakeDescribeIndexWithContext)

	case "DescribeJobExecutionWithContext":
		return m.Fake(d.fakeDescribeJobExecutionWithContext)

	case "DescribeJobWithContext":
		return m.Fake(d.fakeDescribeJobWithContext)

	case "DescribeMitigationActionWithContext":
		return m.Fake(d.fakeDescribeMitigationActionWithContext)

	case "DescribeProvisioningTemplateVersionWithContext":
		return m.Fake(d.fakeDescribeProvisioningTemplateVersionWithContext)

	case "DescribeProvisioningTemplateWithContext":
		return m.Fake(d.fakeDescribeProvisioningTemplateWithContext)

	case "DescribeRoleAliasWithContext":
		return m.Fake(d.fakeDescribeRoleAliasWithContext)

	case "DescribeScheduledAuditWithContext":
		return m.Fake(d.fakeDescribeScheduledAuditWithContext)

	case "DescribeSecurityProfileWithContext":
		return m.Fake(d.fakeDescribeSecurityProfileWithContext)

	case "DescribeStreamWithContext":
		return m.Fake(d.fakeDescribeStreamWithContext)

	case "DescribeThingGroupWithContext":
		return m.Fake(d.fakeDescribeThingGroupWithContext)

	case "DescribeThingRegistrationTaskWithContext":
		return m.Fake(d.fakeDescribeThingRegistrationTaskWithContext)

	case "DescribeThingTypeWithContext":
		return m.Fake(d.fakeDescribeThingTypeWithContext)

	case "DescribeThingWithContext":
		return m.Fake(d.fakeDescribeThingWithContext)

	case "DetachPolicyWithContext":
		return m.Fake(d.fakeDetachPolicyWithContext)

	case "DetachPrincipalPolicyWithContext":
		return m.Fake(d.fakeDetachPrincipalPolicyWithContext)

	case "DetachSecurityProfileWithContext":
		return m.Fake(d.fakeDetachSecurityProfileWithContext)

	case "DetachThingPrincipalWithContext":
		return m.Fake(d.fakeDetachThingPrincipalWithContext)

	case "DisableTopicRuleWithContext":
		return m.Fake(d.fakeDisableTopicRuleWithContext)

	case "EnableTopicRuleWithContext":
		return m.Fake(d.fakeEnableTopicRuleWithContext)

	case "GetCardinalityWithContext":
		return m.Fake(d.fakeGetCardinalityWithContext)

	case "GetEffectivePoliciesWithContext":
		return m.Fake(d.fakeGetEffectivePoliciesWithContext)

	case "GetIndexingConfigurationWithContext":
		return m.Fake(d.fakeGetIndexingConfigurationWithContext)

	case "GetJobDocumentWithContext":
		return m.Fake(d.fakeGetJobDocumentWithContext)

	case "GetLoggingOptionsWithContext":
		return m.Fake(d.fakeGetLoggingOptionsWithContext)

	case "GetOTAUpdateWithContext":
		return m.Fake(d.fakeGetOTAUpdateWithContext)

	case "GetPercentilesWithContext":
		return m.Fake(d.fakeGetPercentilesWithContext)

	case "GetPolicyVersionWithContext":
		return m.Fake(d.fakeGetPolicyVersionWithContext)

	case "GetPolicyWithContext":
		return m.Fake(d.fakeGetPolicyWithContext)

	case "GetRegistrationCodeWithContext":
		return m.Fake(d.fakeGetRegistrationCodeWithContext)

	case "GetStatisticsWithContext":
		return m.Fake(d.fakeGetStatisticsWithContext)

	case "GetTopicRuleDestinationWithContext":
		return m.Fake(d.fakeGetTopicRuleDestinationWithContext)

	case "GetTopicRuleWithContext":
		return m.Fake(d.fakeGetTopicRuleWithContext)

	case "GetV2LoggingOptionsWithContext":
		return m.Fake(d.fakeGetV2LoggingOptionsWithContext)

	case "ListActiveViolationsWithContext":
		return m.Fake(d.fakeListActiveViolationsWithContext)

	case "ListAttachedPoliciesWithContext":
		return m.Fake(d.fakeListAttachedPoliciesWithContext)

	case "ListAuditFindingsWithContext":
		return m.Fake(d.fakeListAuditFindingsWithContext)

	case "ListAuditMitigationActionsExecutionsWithContext":
		return m.Fake(d.fakeListAuditMitigationActionsExecutionsWithContext)

	case "ListAuditMitigationActionsTasksWithContext":
		return m.Fake(d.fakeListAuditMitigationActionsTasksWithContext)

	case "ListAuditTasksWithContext":
		return m.Fake(d.fakeListAuditTasksWithContext)

	case "ListAuthorizersWithContext":
		return m.Fake(d.fakeListAuthorizersWithContext)

	case "ListBillingGroupsWithContext":
		return m.Fake(d.fakeListBillingGroupsWithContext)

	case "ListCACertificatesWithContext":
		return m.Fake(d.fakeListCACertificatesWithContext)

	case "ListCertificatesByCAWithContext":
		return m.Fake(d.fakeListCertificatesByCAWithContext)

	case "ListCertificatesWithContext":
		return m.Fake(d.fakeListCertificatesWithContext)

	case "ListDomainConfigurationsWithContext":
		return m.Fake(d.fakeListDomainConfigurationsWithContext)

	case "ListIndicesWithContext":
		return m.Fake(d.fakeListIndicesWithContext)

	case "ListJobExecutionsForJobWithContext":
		return m.Fake(d.fakeListJobExecutionsForJobWithContext)

	case "ListJobExecutionsForThingWithContext":
		return m.Fake(d.fakeListJobExecutionsForThingWithContext)

	case "ListJobsWithContext":
		return m.Fake(d.fakeListJobsWithContext)

	case "ListMitigationActionsWithContext":
		return m.Fake(d.fakeListMitigationActionsWithContext)

	case "ListOTAUpdatesWithContext":
		return m.Fake(d.fakeListOTAUpdatesWithContext)

	case "ListOutgoingCertificatesWithContext":
		return m.Fake(d.fakeListOutgoingCertificatesWithContext)

	case "ListPoliciesWithContext":
		return m.Fake(d.fakeListPoliciesWithContext)

	case "ListPolicyPrincipalsWithContext":
		return m.Fake(d.fakeListPolicyPrincipalsWithContext)

	case "ListPolicyVersionsWithContext":
		return m.Fake(d.fakeListPolicyVersionsWithContext)

	case "ListPrincipalPoliciesWithContext":
		return m.Fake(d.fakeListPrincipalPoliciesWithContext)

	case "ListPrincipalThingsWithContext":
		return m.Fake(d.fakeListPrincipalThingsWithContext)

	case "ListProvisioningTemplateVersionsWithContext":
		return m.Fake(d.fakeListProvisioningTemplateVersionsWithContext)

	case "ListProvisioningTemplatesWithContext":
		return m.Fake(d.fakeListProvisioningTemplatesWithContext)

	case "ListRoleAliasesWithContext":
		return m.Fake(d.fakeListRoleAliasesWithContext)

	case "ListScheduledAuditsWithContext":
		return m.Fake(d.fakeListScheduledAuditsWithContext)

	case "ListSecurityProfilesForTargetWithContext":
		return m.Fake(d.fakeListSecurityProfilesForTargetWithContext)

	case "ListSecurityProfilesWithContext":
		return m.Fake(d.fakeListSecurityProfilesWithContext)

	case "ListStreamsWithContext":
		return m.Fake(d.fakeListStreamsWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "ListTargetsForPolicyWithContext":
		return m.Fake(d.fakeListTargetsForPolicyWithContext)

	case "ListTargetsForSecurityProfileWithContext":
		return m.Fake(d.fakeListTargetsForSecurityProfileWithContext)

	case "ListThingGroupsForThingWithContext":
		return m.Fake(d.fakeListThingGroupsForThingWithContext)

	case "ListThingGroupsWithContext":
		return m.Fake(d.fakeListThingGroupsWithContext)

	case "ListThingPrincipalsWithContext":
		return m.Fake(d.fakeListThingPrincipalsWithContext)

	case "ListThingRegistrationTaskReportsWithContext":
		return m.Fake(d.fakeListThingRegistrationTaskReportsWithContext)

	case "ListThingRegistrationTasksWithContext":
		return m.Fake(d.fakeListThingRegistrationTasksWithContext)

	case "ListThingTypesWithContext":
		return m.Fake(d.fakeListThingTypesWithContext)

	case "ListThingsInBillingGroupWithContext":
		return m.Fake(d.fakeListThingsInBillingGroupWithContext)

	case "ListThingsInThingGroupWithContext":
		return m.Fake(d.fakeListThingsInThingGroupWithContext)

	case "ListThingsWithContext":
		return m.Fake(d.fakeListThingsWithContext)

	case "ListTopicRuleDestinationsWithContext":
		return m.Fake(d.fakeListTopicRuleDestinationsWithContext)

	case "ListTopicRulesWithContext":
		return m.Fake(d.fakeListTopicRulesWithContext)

	case "ListV2LoggingLevelsWithContext":
		return m.Fake(d.fakeListV2LoggingLevelsWithContext)

	case "ListViolationEventsWithContext":
		return m.Fake(d.fakeListViolationEventsWithContext)

	case "RegisterCACertificateWithContext":
		return m.Fake(d.fakeRegisterCACertificateWithContext)

	case "RegisterCertificateWithContext":
		return m.Fake(d.fakeRegisterCertificateWithContext)

	case "RegisterThingWithContext":
		return m.Fake(d.fakeRegisterThingWithContext)

	case "RejectCertificateTransferWithContext":
		return m.Fake(d.fakeRejectCertificateTransferWithContext)

	case "RemoveThingFromBillingGroupWithContext":
		return m.Fake(d.fakeRemoveThingFromBillingGroupWithContext)

	case "RemoveThingFromThingGroupWithContext":
		return m.Fake(d.fakeRemoveThingFromThingGroupWithContext)

	case "ReplaceTopicRuleWithContext":
		return m.Fake(d.fakeReplaceTopicRuleWithContext)

	case "SearchIndexWithContext":
		return m.Fake(d.fakeSearchIndexWithContext)

	case "SetDefaultAuthorizerWithContext":
		return m.Fake(d.fakeSetDefaultAuthorizerWithContext)

	case "SetDefaultPolicyVersionWithContext":
		return m.Fake(d.fakeSetDefaultPolicyVersionWithContext)

	case "SetLoggingOptionsWithContext":
		return m.Fake(d.fakeSetLoggingOptionsWithContext)

	case "SetV2LoggingLevelWithContext":
		return m.Fake(d.fakeSetV2LoggingLevelWithContext)

	case "SetV2LoggingOptionsWithContext":
		return m.Fake(d.fakeSetV2LoggingOptionsWithContext)

	case "StartAuditMitigationActionsTaskWithContext":
		return m.Fake(d.fakeStartAuditMitigationActionsTaskWithContext)

	case "StartOnDemandAuditTaskWithContext":
		return m.Fake(d.fakeStartOnDemandAuditTaskWithContext)

	case "StartThingRegistrationTaskWithContext":
		return m.Fake(d.fakeStartThingRegistrationTaskWithContext)

	case "StopThingRegistrationTaskWithContext":
		return m.Fake(d.fakeStopThingRegistrationTaskWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "TestAuthorizationWithContext":
		return m.Fake(d.fakeTestAuthorizationWithContext)

	case "TestInvokeAuthorizerWithContext":
		return m.Fake(d.fakeTestInvokeAuthorizerWithContext)

	case "TransferCertificateWithContext":
		return m.Fake(d.fakeTransferCertificateWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateAccountAuditConfigurationWithContext":
		return m.Fake(d.fakeUpdateAccountAuditConfigurationWithContext)

	case "UpdateAuthorizerWithContext":
		return m.Fake(d.fakeUpdateAuthorizerWithContext)

	case "UpdateBillingGroupWithContext":
		return m.Fake(d.fakeUpdateBillingGroupWithContext)

	case "UpdateCACertificateWithContext":
		return m.Fake(d.fakeUpdateCACertificateWithContext)

	case "UpdateCertificateWithContext":
		return m.Fake(d.fakeUpdateCertificateWithContext)

	case "UpdateDomainConfigurationWithContext":
		return m.Fake(d.fakeUpdateDomainConfigurationWithContext)

	case "UpdateDynamicThingGroupWithContext":
		return m.Fake(d.fakeUpdateDynamicThingGroupWithContext)

	case "UpdateEventConfigurationsWithContext":
		return m.Fake(d.fakeUpdateEventConfigurationsWithContext)

	case "UpdateIndexingConfigurationWithContext":
		return m.Fake(d.fakeUpdateIndexingConfigurationWithContext)

	case "UpdateJobWithContext":
		return m.Fake(d.fakeUpdateJobWithContext)

	case "UpdateMitigationActionWithContext":
		return m.Fake(d.fakeUpdateMitigationActionWithContext)

	case "UpdateProvisioningTemplateWithContext":
		return m.Fake(d.fakeUpdateProvisioningTemplateWithContext)

	case "UpdateRoleAliasWithContext":
		return m.Fake(d.fakeUpdateRoleAliasWithContext)

	case "UpdateScheduledAuditWithContext":
		return m.Fake(d.fakeUpdateScheduledAuditWithContext)

	case "UpdateSecurityProfileWithContext":
		return m.Fake(d.fakeUpdateSecurityProfileWithContext)

	case "UpdateStreamWithContext":
		return m.Fake(d.fakeUpdateStreamWithContext)

	case "UpdateThingGroupWithContext":
		return m.Fake(d.fakeUpdateThingGroupWithContext)

	case "UpdateThingGroupsForThingWithContext":
		return m.Fake(d.fakeUpdateThingGroupsForThingWithContext)

	case "UpdateThingWithContext":
		return m.Fake(d.fakeUpdateThingWithContext)

	case "UpdateTopicRuleDestinationWithContext":
		return m.Fake(d.fakeUpdateTopicRuleDestinationWithContext)

	case "ValidateSecurityProfileBehaviorsWithContext":
		return m.Fake(d.fakeValidateSecurityProfileBehaviorsWithContext)

	default:
		return nil
	}
}

func (d *IoTDouble) AcceptCertificateTransfer(i0 *iot.AcceptCertificateTransferInput) (r0 *iot.AcceptCertificateTransferOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptCertificateTransfer", i0)
	r0, _ = returns[0].(*iot.AcceptCertificateTransferOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) AcceptCertificateTransferRequest(i0 *iot.AcceptCertificateTransferInput) (r0 *request.Request, r1 *iot.AcceptCertificateTransferOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptCertificateTransferRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.AcceptCertificateTransferOutput)
	return
}

func (d *IoTDouble) AcceptCertificateTransferWithContext(i0 context.Context, i1 *iot.AcceptCertificateTransferInput, i2 ...request.Option) (r0 *iot.AcceptCertificateTransferOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptCertificateTransferWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.AcceptCertificateTransferOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeAcceptCertificateTransferWithContext(ctx context.Context, in *iot.AcceptCertificateTransferInput, _ ...request.Option) (*iot.AcceptCertificateTransferOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AcceptCertificateTransfer cancelled", ctx.Err())
	default:
		return d.AcceptCertificateTransfer(in)
	}
}

func (d *IoTDouble) AddThingToBillingGroup(i0 *iot.AddThingToBillingGroupInput) (r0 *iot.AddThingToBillingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddThingToBillingGroup", i0)
	r0, _ = returns[0].(*iot.AddThingToBillingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) AddThingToBillingGroupRequest(i0 *iot.AddThingToBillingGroupInput) (r0 *request.Request, r1 *iot.AddThingToBillingGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddThingToBillingGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.AddThingToBillingGroupOutput)
	return
}

func (d *IoTDouble) AddThingToBillingGroupWithContext(i0 context.Context, i1 *iot.AddThingToBillingGroupInput, i2 ...request.Option) (r0 *iot.AddThingToBillingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddThingToBillingGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.AddThingToBillingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeAddThingToBillingGroupWithContext(ctx context.Context, in *iot.AddThingToBillingGroupInput, _ ...request.Option) (*iot.AddThingToBillingGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddThingToBillingGroup cancelled", ctx.Err())
	default:
		return d.AddThingToBillingGroup(in)
	}
}

func (d *IoTDouble) AddThingToThingGroup(i0 *iot.AddThingToThingGroupInput) (r0 *iot.AddThingToThingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddThingToThingGroup", i0)
	r0, _ = returns[0].(*iot.AddThingToThingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) AddThingToThingGroupRequest(i0 *iot.AddThingToThingGroupInput) (r0 *request.Request, r1 *iot.AddThingToThingGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddThingToThingGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.AddThingToThingGroupOutput)
	return
}

func (d *IoTDouble) AddThingToThingGroupWithContext(i0 context.Context, i1 *iot.AddThingToThingGroupInput, i2 ...request.Option) (r0 *iot.AddThingToThingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddThingToThingGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.AddThingToThingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeAddThingToThingGroupWithContext(ctx context.Context, in *iot.AddThingToThingGroupInput, _ ...request.Option) (*iot.AddThingToThingGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddThingToThingGroup cancelled", ctx.Err())
	default:
		return d.AddThingToThingGroup(in)
	}
}

func (d *IoTDouble) AssociateTargetsWithJob(i0 *iot.AssociateTargetsWithJobInput) (r0 *iot.AssociateTargetsWithJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateTargetsWithJob", i0)
	r0, _ = returns[0].(*iot.AssociateTargetsWithJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) AssociateTargetsWithJobRequest(i0 *iot.AssociateTargetsWithJobInput) (r0 *request.Request, r1 *iot.AssociateTargetsWithJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateTargetsWithJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.AssociateTargetsWithJobOutput)
	return
}

func (d *IoTDouble) AssociateTargetsWithJobWithContext(i0 context.Context, i1 *iot.AssociateTargetsWithJobInput, i2 ...request.Option) (r0 *iot.AssociateTargetsWithJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateTargetsWithJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.AssociateTargetsWithJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeAssociateTargetsWithJobWithContext(ctx context.Context, in *iot.AssociateTargetsWithJobInput, _ ...request.Option) (*iot.AssociateTargetsWithJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateTargetsWithJob cancelled", ctx.Err())
	default:
		return d.AssociateTargetsWithJob(in)
	}
}

func (d *IoTDouble) AttachPolicy(i0 *iot.AttachPolicyInput) (r0 *iot.AttachPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachPolicy", i0)
	r0, _ = returns[0].(*iot.AttachPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) AttachPolicyRequest(i0 *iot.AttachPolicyInput) (r0 *request.Request, r1 *iot.AttachPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.AttachPolicyOutput)
	return
}

func (d *IoTDouble) AttachPolicyWithContext(i0 context.Context, i1 *iot.AttachPolicyInput, i2 ...request.Option) (r0 *iot.AttachPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.AttachPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeAttachPolicyWithContext(ctx context.Context, in *iot.AttachPolicyInput, _ ...request.Option) (*iot.AttachPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AttachPolicy cancelled", ctx.Err())
	default:
		return d.AttachPolicy(in)
	}
}

func (d *IoTDouble) AttachPrincipalPolicy(i0 *iot.AttachPrincipalPolicyInput) (r0 *iot.AttachPrincipalPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachPrincipalPolicy", i0)
	r0, _ = returns[0].(*iot.AttachPrincipalPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) AttachPrincipalPolicyRequest(i0 *iot.AttachPrincipalPolicyInput) (r0 *request.Request, r1 *iot.AttachPrincipalPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachPrincipalPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.AttachPrincipalPolicyOutput)
	return
}

func (d *IoTDouble) AttachPrincipalPolicyWithContext(i0 context.Context, i1 *iot.AttachPrincipalPolicyInput, i2 ...request.Option) (r0 *iot.AttachPrincipalPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachPrincipalPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.AttachPrincipalPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeAttachPrincipalPolicyWithContext(ctx context.Context, in *iot.AttachPrincipalPolicyInput, _ ...request.Option) (*iot.AttachPrincipalPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AttachPrincipalPolicy cancelled", ctx.Err())
	default:
		return d.AttachPrincipalPolicy(in)
	}
}

func (d *IoTDouble) AttachSecurityProfile(i0 *iot.AttachSecurityProfileInput) (r0 *iot.AttachSecurityProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachSecurityProfile", i0)
	r0, _ = returns[0].(*iot.AttachSecurityProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) AttachSecurityProfileRequest(i0 *iot.AttachSecurityProfileInput) (r0 *request.Request, r1 *iot.AttachSecurityProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachSecurityProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.AttachSecurityProfileOutput)
	return
}

func (d *IoTDouble) AttachSecurityProfileWithContext(i0 context.Context, i1 *iot.AttachSecurityProfileInput, i2 ...request.Option) (r0 *iot.AttachSecurityProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachSecurityProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.AttachSecurityProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeAttachSecurityProfileWithContext(ctx context.Context, in *iot.AttachSecurityProfileInput, _ ...request.Option) (*iot.AttachSecurityProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AttachSecurityProfile cancelled", ctx.Err())
	default:
		return d.AttachSecurityProfile(in)
	}
}

func (d *IoTDouble) AttachThingPrincipal(i0 *iot.AttachThingPrincipalInput) (r0 *iot.AttachThingPrincipalOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachThingPrincipal", i0)
	r0, _ = returns[0].(*iot.AttachThingPrincipalOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) AttachThingPrincipalRequest(i0 *iot.AttachThingPrincipalInput) (r0 *request.Request, r1 *iot.AttachThingPrincipalOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachThingPrincipalRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.AttachThingPrincipalOutput)
	return
}

func (d *IoTDouble) AttachThingPrincipalWithContext(i0 context.Context, i1 *iot.AttachThingPrincipalInput, i2 ...request.Option) (r0 *iot.AttachThingPrincipalOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachThingPrincipalWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.AttachThingPrincipalOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeAttachThingPrincipalWithContext(ctx context.Context, in *iot.AttachThingPrincipalInput, _ ...request.Option) (*iot.AttachThingPrincipalOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AttachThingPrincipal cancelled", ctx.Err())
	default:
		return d.AttachThingPrincipal(in)
	}
}

func (d *IoTDouble) CancelAuditMitigationActionsTask(i0 *iot.CancelAuditMitigationActionsTaskInput) (r0 *iot.CancelAuditMitigationActionsTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelAuditMitigationActionsTask", i0)
	r0, _ = returns[0].(*iot.CancelAuditMitigationActionsTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) CancelAuditMitigationActionsTaskRequest(i0 *iot.CancelAuditMitigationActionsTaskInput) (r0 *request.Request, r1 *iot.CancelAuditMitigationActionsTaskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelAuditMitigationActionsTaskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.CancelAuditMitigationActionsTaskOutput)
	return
}

func (d *IoTDouble) CancelAuditMitigationActionsTaskWithContext(i0 context.Context, i1 *iot.CancelAuditMitigationActionsTaskInput, i2 ...request.Option) (r0 *iot.CancelAuditMitigationActionsTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelAuditMitigationActionsTaskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.CancelAuditMitigationActionsTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeCancelAuditMitigationActionsTaskWithContext(ctx context.Context, in *iot.CancelAuditMitigationActionsTaskInput, _ ...request.Option) (*iot.CancelAuditMitigationActionsTaskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelAuditMitigationActionsTask cancelled", ctx.Err())
	default:
		return d.CancelAuditMitigationActionsTask(in)
	}
}

func (d *IoTDouble) CancelAuditTask(i0 *iot.CancelAuditTaskInput) (r0 *iot.CancelAuditTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelAuditTask", i0)
	r0, _ = returns[0].(*iot.CancelAuditTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) CancelAuditTaskRequest(i0 *iot.CancelAuditTaskInput) (r0 *request.Request, r1 *iot.CancelAuditTaskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelAuditTaskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.CancelAuditTaskOutput)
	return
}

func (d *IoTDouble) CancelAuditTaskWithContext(i0 context.Context, i1 *iot.CancelAuditTaskInput, i2 ...request.Option) (r0 *iot.CancelAuditTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelAuditTaskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.CancelAuditTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeCancelAuditTaskWithContext(ctx context.Context, in *iot.CancelAuditTaskInput, _ ...request.Option) (*iot.CancelAuditTaskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelAuditTask cancelled", ctx.Err())
	default:
		return d.CancelAuditTask(in)
	}
}

func (d *IoTDouble) CancelCertificateTransfer(i0 *iot.CancelCertificateTransferInput) (r0 *iot.CancelCertificateTransferOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelCertificateTransfer", i0)
	r0, _ = returns[0].(*iot.CancelCertificateTransferOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) CancelCertificateTransferRequest(i0 *iot.CancelCertificateTransferInput) (r0 *request.Request, r1 *iot.CancelCertificateTransferOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelCertificateTransferRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.CancelCertificateTransferOutput)
	return
}

func (d *IoTDouble) CancelCertificateTransferWithContext(i0 context.Context, i1 *iot.CancelCertificateTransferInput, i2 ...request.Option) (r0 *iot.CancelCertificateTransferOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelCertificateTransferWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.CancelCertificateTransferOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeCancelCertificateTransferWithContext(ctx context.Context, in *iot.CancelCertificateTransferInput, _ ...request.Option) (*iot.CancelCertificateTransferOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelCertificateTransfer cancelled", ctx.Err())
	default:
		return d.CancelCertificateTransfer(in)
	}
}

func (d *IoTDouble) CancelJob(i0 *iot.CancelJobInput) (r0 *iot.CancelJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelJob", i0)
	r0, _ = returns[0].(*iot.CancelJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) CancelJobExecution(i0 *iot.CancelJobExecutionInput) (r0 *iot.CancelJobExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelJobExecution", i0)
	r0, _ = returns[0].(*iot.CancelJobExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) CancelJobExecutionRequest(i0 *iot.CancelJobExecutionInput) (r0 *request.Request, r1 *iot.CancelJobExecutionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelJobExecutionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.CancelJobExecutionOutput)
	return
}

func (d *IoTDouble) CancelJobExecutionWithContext(i0 context.Context, i1 *iot.CancelJobExecutionInput, i2 ...request.Option) (r0 *iot.CancelJobExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelJobExecutionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.CancelJobExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeCancelJobExecutionWithContext(ctx context.Context, in *iot.CancelJobExecutionInput, _ ...request.Option) (*iot.CancelJobExecutionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelJobExecution cancelled", ctx.Err())
	default:
		return d.CancelJobExecution(in)
	}
}

func (d *IoTDouble) CancelJobRequest(i0 *iot.CancelJobInput) (r0 *request.Request, r1 *iot.CancelJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.CancelJobOutput)
	return
}

func (d *IoTDouble) CancelJobWithContext(i0 context.Context, i1 *iot.CancelJobInput, i2 ...request.Option) (r0 *iot.CancelJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.CancelJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeCancelJobWithContext(ctx context.Context, in *iot.CancelJobInput, _ ...request.Option) (*iot.CancelJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelJob cancelled", ctx.Err())
	default:
		return d.CancelJob(in)
	}
}

func (d *IoTDouble) ClearDefaultAuthorizer(i0 *iot.ClearDefaultAuthorizerInput) (r0 *iot.ClearDefaultAuthorizerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ClearDefaultAuthorizer", i0)
	r0, _ = returns[0].(*iot.ClearDefaultAuthorizerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ClearDefaultAuthorizerRequest(i0 *iot.ClearDefaultAuthorizerInput) (r0 *request.Request, r1 *iot.ClearDefaultAuthorizerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ClearDefaultAuthorizerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ClearDefaultAuthorizerOutput)
	return
}

func (d *IoTDouble) ClearDefaultAuthorizerWithContext(i0 context.Context, i1 *iot.ClearDefaultAuthorizerInput, i2 ...request.Option) (r0 *iot.ClearDefaultAuthorizerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ClearDefaultAuthorizerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ClearDefaultAuthorizerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeClearDefaultAuthorizerWithContext(ctx context.Context, in *iot.ClearDefaultAuthorizerInput, _ ...request.Option) (*iot.ClearDefaultAuthorizerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ClearDefaultAuthorizer cancelled", ctx.Err())
	default:
		return d.ClearDefaultAuthorizer(in)
	}
}

func (d *IoTDouble) ConfirmTopicRuleDestination(i0 *iot.ConfirmTopicRuleDestinationInput) (r0 *iot.ConfirmTopicRuleDestinationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ConfirmTopicRuleDestination", i0)
	r0, _ = returns[0].(*iot.ConfirmTopicRuleDestinationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ConfirmTopicRuleDestinationRequest(i0 *iot.ConfirmTopicRuleDestinationInput) (r0 *request.Request, r1 *iot.ConfirmTopicRuleDestinationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ConfirmTopicRuleDestinationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ConfirmTopicRuleDestinationOutput)
	return
}

func (d *IoTDouble) ConfirmTopicRuleDestinationWithContext(i0 context.Context, i1 *iot.ConfirmTopicRuleDestinationInput, i2 ...request.Option) (r0 *iot.ConfirmTopicRuleDestinationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ConfirmTopicRuleDestinationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ConfirmTopicRuleDestinationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeConfirmTopicRuleDestinationWithContext(ctx context.Context, in *iot.ConfirmTopicRuleDestinationInput, _ ...request.Option) (*iot.ConfirmTopicRuleDestinationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ConfirmTopicRuleDestination cancelled", ctx.Err())
	default:
		return d.ConfirmTopicRuleDestination(in)
	}
}

func (d *IoTDouble) CreateAuthorizer(i0 *iot.CreateAuthorizerInput) (r0 *iot.CreateAuthorizerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAuthorizer", i0)
	r0, _ = returns[0].(*iot.CreateAuthorizerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) CreateAuthorizerRequest(i0 *iot.CreateAuthorizerInput) (r0 *request.Request, r1 *iot.CreateAuthorizerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAuthorizerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.CreateAuthorizerOutput)
	return
}

func (d *IoTDouble) CreateAuthorizerWithContext(i0 context.Context, i1 *iot.CreateAuthorizerInput, i2 ...request.Option) (r0 *iot.CreateAuthorizerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAuthorizerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.CreateAuthorizerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeCreateAuthorizerWithContext(ctx context.Context, in *iot.CreateAuthorizerInput, _ ...request.Option) (*iot.CreateAuthorizerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateAuthorizer cancelled", ctx.Err())
	default:
		return d.CreateAuthorizer(in)
	}
}

func (d *IoTDouble) CreateBillingGroup(i0 *iot.CreateBillingGroupInput) (r0 *iot.CreateBillingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBillingGroup", i0)
	r0, _ = returns[0].(*iot.CreateBillingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) CreateBillingGroupRequest(i0 *iot.CreateBillingGroupInput) (r0 *request.Request, r1 *iot.CreateBillingGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBillingGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.CreateBillingGroupOutput)
	return
}

func (d *IoTDouble) CreateBillingGroupWithContext(i0 context.Context, i1 *iot.CreateBillingGroupInput, i2 ...request.Option) (r0 *iot.CreateBillingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBillingGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.CreateBillingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeCreateBillingGroupWithContext(ctx context.Context, in *iot.CreateBillingGroupInput, _ ...request.Option) (*iot.CreateBillingGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateBillingGroup cancelled", ctx.Err())
	default:
		return d.CreateBillingGroup(in)
	}
}

func (d *IoTDouble) CreateCertificateFromCsr(i0 *iot.CreateCertificateFromCsrInput) (r0 *iot.CreateCertificateFromCsrOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCertificateFromCsr", i0)
	r0, _ = returns[0].(*iot.CreateCertificateFromCsrOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) CreateCertificateFromCsrRequest(i0 *iot.CreateCertificateFromCsrInput) (r0 *request.Request, r1 *iot.CreateCertificateFromCsrOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCertificateFromCsrRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.CreateCertificateFromCsrOutput)
	return
}

func (d *IoTDouble) CreateCertificateFromCsrWithContext(i0 context.Context, i1 *iot.CreateCertificateFromCsrInput, i2 ...request.Option) (r0 *iot.CreateCertificateFromCsrOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCertificateFromCsrWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.CreateCertificateFromCsrOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeCreateCertificateFromCsrWithContext(ctx context.Context, in *iot.CreateCertificateFromCsrInput, _ ...request.Option) (*iot.CreateCertificateFromCsrOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateCertificateFromCsr cancelled", ctx.Err())
	default:
		return d.CreateCertificateFromCsr(in)
	}
}

func (d *IoTDouble) CreateDomainConfiguration(i0 *iot.CreateDomainConfigurationInput) (r0 *iot.CreateDomainConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDomainConfiguration", i0)
	r0, _ = returns[0].(*iot.CreateDomainConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) CreateDomainConfigurationRequest(i0 *iot.CreateDomainConfigurationInput) (r0 *request.Request, r1 *iot.CreateDomainConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDomainConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.CreateDomainConfigurationOutput)
	return
}

func (d *IoTDouble) CreateDomainConfigurationWithContext(i0 context.Context, i1 *iot.CreateDomainConfigurationInput, i2 ...request.Option) (r0 *iot.CreateDomainConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDomainConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.CreateDomainConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeCreateDomainConfigurationWithContext(ctx context.Context, in *iot.CreateDomainConfigurationInput, _ ...request.Option) (*iot.CreateDomainConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDomainConfiguration cancelled", ctx.Err())
	default:
		return d.CreateDomainConfiguration(in)
	}
}

func (d *IoTDouble) CreateDynamicThingGroup(i0 *iot.CreateDynamicThingGroupInput) (r0 *iot.CreateDynamicThingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDynamicThingGroup", i0)
	r0, _ = returns[0].(*iot.CreateDynamicThingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) CreateDynamicThingGroupRequest(i0 *iot.CreateDynamicThingGroupInput) (r0 *request.Request, r1 *iot.CreateDynamicThingGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDynamicThingGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.CreateDynamicThingGroupOutput)
	return
}

func (d *IoTDouble) CreateDynamicThingGroupWithContext(i0 context.Context, i1 *iot.CreateDynamicThingGroupInput, i2 ...request.Option) (r0 *iot.CreateDynamicThingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDynamicThingGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.CreateDynamicThingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeCreateDynamicThingGroupWithContext(ctx context.Context, in *iot.CreateDynamicThingGroupInput, _ ...request.Option) (*iot.CreateDynamicThingGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDynamicThingGroup cancelled", ctx.Err())
	default:
		return d.CreateDynamicThingGroup(in)
	}
}

func (d *IoTDouble) CreateJob(i0 *iot.CreateJobInput) (r0 *iot.CreateJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateJob", i0)
	r0, _ = returns[0].(*iot.CreateJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) CreateJobRequest(i0 *iot.CreateJobInput) (r0 *request.Request, r1 *iot.CreateJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.CreateJobOutput)
	return
}

func (d *IoTDouble) CreateJobWithContext(i0 context.Context, i1 *iot.CreateJobInput, i2 ...request.Option) (r0 *iot.CreateJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.CreateJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeCreateJobWithContext(ctx context.Context, in *iot.CreateJobInput, _ ...request.Option) (*iot.CreateJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateJob cancelled", ctx.Err())
	default:
		return d.CreateJob(in)
	}
}

func (d *IoTDouble) CreateKeysAndCertificate(i0 *iot.CreateKeysAndCertificateInput) (r0 *iot.CreateKeysAndCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateKeysAndCertificate", i0)
	r0, _ = returns[0].(*iot.CreateKeysAndCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) CreateKeysAndCertificateRequest(i0 *iot.CreateKeysAndCertificateInput) (r0 *request.Request, r1 *iot.CreateKeysAndCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateKeysAndCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.CreateKeysAndCertificateOutput)
	return
}

func (d *IoTDouble) CreateKeysAndCertificateWithContext(i0 context.Context, i1 *iot.CreateKeysAndCertificateInput, i2 ...request.Option) (r0 *iot.CreateKeysAndCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateKeysAndCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.CreateKeysAndCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeCreateKeysAndCertificateWithContext(ctx context.Context, in *iot.CreateKeysAndCertificateInput, _ ...request.Option) (*iot.CreateKeysAndCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateKeysAndCertificate cancelled", ctx.Err())
	default:
		return d.CreateKeysAndCertificate(in)
	}
}

func (d *IoTDouble) CreateMitigationAction(i0 *iot.CreateMitigationActionInput) (r0 *iot.CreateMitigationActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMitigationAction", i0)
	r0, _ = returns[0].(*iot.CreateMitigationActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) CreateMitigationActionRequest(i0 *iot.CreateMitigationActionInput) (r0 *request.Request, r1 *iot.CreateMitigationActionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMitigationActionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.CreateMitigationActionOutput)
	return
}

func (d *IoTDouble) CreateMitigationActionWithContext(i0 context.Context, i1 *iot.CreateMitigationActionInput, i2 ...request.Option) (r0 *iot.CreateMitigationActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMitigationActionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.CreateMitigationActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeCreateMitigationActionWithContext(ctx context.Context, in *iot.CreateMitigationActionInput, _ ...request.Option) (*iot.CreateMitigationActionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateMitigationAction cancelled", ctx.Err())
	default:
		return d.CreateMitigationAction(in)
	}
}

func (d *IoTDouble) CreateOTAUpdate(i0 *iot.CreateOTAUpdateInput) (r0 *iot.CreateOTAUpdateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateOTAUpdate", i0)
	r0, _ = returns[0].(*iot.CreateOTAUpdateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) CreateOTAUpdateRequest(i0 *iot.CreateOTAUpdateInput) (r0 *request.Request, r1 *iot.CreateOTAUpdateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateOTAUpdateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.CreateOTAUpdateOutput)
	return
}

func (d *IoTDouble) CreateOTAUpdateWithContext(i0 context.Context, i1 *iot.CreateOTAUpdateInput, i2 ...request.Option) (r0 *iot.CreateOTAUpdateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateOTAUpdateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.CreateOTAUpdateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeCreateOTAUpdateWithContext(ctx context.Context, in *iot.CreateOTAUpdateInput, _ ...request.Option) (*iot.CreateOTAUpdateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateOTAUpdate cancelled", ctx.Err())
	default:
		return d.CreateOTAUpdate(in)
	}
}

func (d *IoTDouble) CreatePolicy(i0 *iot.CreatePolicyInput) (r0 *iot.CreatePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePolicy", i0)
	r0, _ = returns[0].(*iot.CreatePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) CreatePolicyRequest(i0 *iot.CreatePolicyInput) (r0 *request.Request, r1 *iot.CreatePolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.CreatePolicyOutput)
	return
}

func (d *IoTDouble) CreatePolicyVersion(i0 *iot.CreatePolicyVersionInput) (r0 *iot.CreatePolicyVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePolicyVersion", i0)
	r0, _ = returns[0].(*iot.CreatePolicyVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) CreatePolicyVersionRequest(i0 *iot.CreatePolicyVersionInput) (r0 *request.Request, r1 *iot.CreatePolicyVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePolicyVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.CreatePolicyVersionOutput)
	return
}

func (d *IoTDouble) CreatePolicyVersionWithContext(i0 context.Context, i1 *iot.CreatePolicyVersionInput, i2 ...request.Option) (r0 *iot.CreatePolicyVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePolicyVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.CreatePolicyVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeCreatePolicyVersionWithContext(ctx context.Context, in *iot.CreatePolicyVersionInput, _ ...request.Option) (*iot.CreatePolicyVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreatePolicyVersion cancelled", ctx.Err())
	default:
		return d.CreatePolicyVersion(in)
	}
}

func (d *IoTDouble) CreatePolicyWithContext(i0 context.Context, i1 *iot.CreatePolicyInput, i2 ...request.Option) (r0 *iot.CreatePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.CreatePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeCreatePolicyWithContext(ctx context.Context, in *iot.CreatePolicyInput, _ ...request.Option) (*iot.CreatePolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreatePolicy cancelled", ctx.Err())
	default:
		return d.CreatePolicy(in)
	}
}

func (d *IoTDouble) CreateProvisioningClaim(i0 *iot.CreateProvisioningClaimInput) (r0 *iot.CreateProvisioningClaimOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProvisioningClaim", i0)
	r0, _ = returns[0].(*iot.CreateProvisioningClaimOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) CreateProvisioningClaimRequest(i0 *iot.CreateProvisioningClaimInput) (r0 *request.Request, r1 *iot.CreateProvisioningClaimOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProvisioningClaimRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.CreateProvisioningClaimOutput)
	return
}

func (d *IoTDouble) CreateProvisioningClaimWithContext(i0 context.Context, i1 *iot.CreateProvisioningClaimInput, i2 ...request.Option) (r0 *iot.CreateProvisioningClaimOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProvisioningClaimWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.CreateProvisioningClaimOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeCreateProvisioningClaimWithContext(ctx context.Context, in *iot.CreateProvisioningClaimInput, _ ...request.Option) (*iot.CreateProvisioningClaimOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateProvisioningClaim cancelled", ctx.Err())
	default:
		return d.CreateProvisioningClaim(in)
	}
}

func (d *IoTDouble) CreateProvisioningTemplate(i0 *iot.CreateProvisioningTemplateInput) (r0 *iot.CreateProvisioningTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProvisioningTemplate", i0)
	r0, _ = returns[0].(*iot.CreateProvisioningTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) CreateProvisioningTemplateRequest(i0 *iot.CreateProvisioningTemplateInput) (r0 *request.Request, r1 *iot.CreateProvisioningTemplateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProvisioningTemplateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.CreateProvisioningTemplateOutput)
	return
}

func (d *IoTDouble) CreateProvisioningTemplateVersion(i0 *iot.CreateProvisioningTemplateVersionInput) (r0 *iot.CreateProvisioningTemplateVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProvisioningTemplateVersion", i0)
	r0, _ = returns[0].(*iot.CreateProvisioningTemplateVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) CreateProvisioningTemplateVersionRequest(i0 *iot.CreateProvisioningTemplateVersionInput) (r0 *request.Request, r1 *iot.CreateProvisioningTemplateVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProvisioningTemplateVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.CreateProvisioningTemplateVersionOutput)
	return
}

func (d *IoTDouble) CreateProvisioningTemplateVersionWithContext(i0 context.Context, i1 *iot.CreateProvisioningTemplateVersionInput, i2 ...request.Option) (r0 *iot.CreateProvisioningTemplateVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProvisioningTemplateVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.CreateProvisioningTemplateVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeCreateProvisioningTemplateVersionWithContext(ctx context.Context, in *iot.CreateProvisioningTemplateVersionInput, _ ...request.Option) (*iot.CreateProvisioningTemplateVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateProvisioningTemplateVersion cancelled", ctx.Err())
	default:
		return d.CreateProvisioningTemplateVersion(in)
	}
}

func (d *IoTDouble) CreateProvisioningTemplateWithContext(i0 context.Context, i1 *iot.CreateProvisioningTemplateInput, i2 ...request.Option) (r0 *iot.CreateProvisioningTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProvisioningTemplateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.CreateProvisioningTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeCreateProvisioningTemplateWithContext(ctx context.Context, in *iot.CreateProvisioningTemplateInput, _ ...request.Option) (*iot.CreateProvisioningTemplateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateProvisioningTemplate cancelled", ctx.Err())
	default:
		return d.CreateProvisioningTemplate(in)
	}
}

func (d *IoTDouble) CreateRoleAlias(i0 *iot.CreateRoleAliasInput) (r0 *iot.CreateRoleAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRoleAlias", i0)
	r0, _ = returns[0].(*iot.CreateRoleAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) CreateRoleAliasRequest(i0 *iot.CreateRoleAliasInput) (r0 *request.Request, r1 *iot.CreateRoleAliasOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRoleAliasRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.CreateRoleAliasOutput)
	return
}

func (d *IoTDouble) CreateRoleAliasWithContext(i0 context.Context, i1 *iot.CreateRoleAliasInput, i2 ...request.Option) (r0 *iot.CreateRoleAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRoleAliasWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.CreateRoleAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeCreateRoleAliasWithContext(ctx context.Context, in *iot.CreateRoleAliasInput, _ ...request.Option) (*iot.CreateRoleAliasOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateRoleAlias cancelled", ctx.Err())
	default:
		return d.CreateRoleAlias(in)
	}
}

func (d *IoTDouble) CreateScheduledAudit(i0 *iot.CreateScheduledAuditInput) (r0 *iot.CreateScheduledAuditOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateScheduledAudit", i0)
	r0, _ = returns[0].(*iot.CreateScheduledAuditOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) CreateScheduledAuditRequest(i0 *iot.CreateScheduledAuditInput) (r0 *request.Request, r1 *iot.CreateScheduledAuditOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateScheduledAuditRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.CreateScheduledAuditOutput)
	return
}

func (d *IoTDouble) CreateScheduledAuditWithContext(i0 context.Context, i1 *iot.CreateScheduledAuditInput, i2 ...request.Option) (r0 *iot.CreateScheduledAuditOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateScheduledAuditWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.CreateScheduledAuditOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeCreateScheduledAuditWithContext(ctx context.Context, in *iot.CreateScheduledAuditInput, _ ...request.Option) (*iot.CreateScheduledAuditOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateScheduledAudit cancelled", ctx.Err())
	default:
		return d.CreateScheduledAudit(in)
	}
}

func (d *IoTDouble) CreateSecurityProfile(i0 *iot.CreateSecurityProfileInput) (r0 *iot.CreateSecurityProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSecurityProfile", i0)
	r0, _ = returns[0].(*iot.CreateSecurityProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) CreateSecurityProfileRequest(i0 *iot.CreateSecurityProfileInput) (r0 *request.Request, r1 *iot.CreateSecurityProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSecurityProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.CreateSecurityProfileOutput)
	return
}

func (d *IoTDouble) CreateSecurityProfileWithContext(i0 context.Context, i1 *iot.CreateSecurityProfileInput, i2 ...request.Option) (r0 *iot.CreateSecurityProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSecurityProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.CreateSecurityProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeCreateSecurityProfileWithContext(ctx context.Context, in *iot.CreateSecurityProfileInput, _ ...request.Option) (*iot.CreateSecurityProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateSecurityProfile cancelled", ctx.Err())
	default:
		return d.CreateSecurityProfile(in)
	}
}

func (d *IoTDouble) CreateStream(i0 *iot.CreateStreamInput) (r0 *iot.CreateStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStream", i0)
	r0, _ = returns[0].(*iot.CreateStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) CreateStreamRequest(i0 *iot.CreateStreamInput) (r0 *request.Request, r1 *iot.CreateStreamOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStreamRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.CreateStreamOutput)
	return
}

func (d *IoTDouble) CreateStreamWithContext(i0 context.Context, i1 *iot.CreateStreamInput, i2 ...request.Option) (r0 *iot.CreateStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStreamWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.CreateStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeCreateStreamWithContext(ctx context.Context, in *iot.CreateStreamInput, _ ...request.Option) (*iot.CreateStreamOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateStream cancelled", ctx.Err())
	default:
		return d.CreateStream(in)
	}
}

func (d *IoTDouble) CreateThing(i0 *iot.CreateThingInput) (r0 *iot.CreateThingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateThing", i0)
	r0, _ = returns[0].(*iot.CreateThingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) CreateThingGroup(i0 *iot.CreateThingGroupInput) (r0 *iot.CreateThingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateThingGroup", i0)
	r0, _ = returns[0].(*iot.CreateThingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) CreateThingGroupRequest(i0 *iot.CreateThingGroupInput) (r0 *request.Request, r1 *iot.CreateThingGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateThingGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.CreateThingGroupOutput)
	return
}

func (d *IoTDouble) CreateThingGroupWithContext(i0 context.Context, i1 *iot.CreateThingGroupInput, i2 ...request.Option) (r0 *iot.CreateThingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateThingGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.CreateThingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeCreateThingGroupWithContext(ctx context.Context, in *iot.CreateThingGroupInput, _ ...request.Option) (*iot.CreateThingGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateThingGroup cancelled", ctx.Err())
	default:
		return d.CreateThingGroup(in)
	}
}

func (d *IoTDouble) CreateThingRequest(i0 *iot.CreateThingInput) (r0 *request.Request, r1 *iot.CreateThingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateThingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.CreateThingOutput)
	return
}

func (d *IoTDouble) CreateThingType(i0 *iot.CreateThingTypeInput) (r0 *iot.CreateThingTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateThingType", i0)
	r0, _ = returns[0].(*iot.CreateThingTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) CreateThingTypeRequest(i0 *iot.CreateThingTypeInput) (r0 *request.Request, r1 *iot.CreateThingTypeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateThingTypeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.CreateThingTypeOutput)
	return
}

func (d *IoTDouble) CreateThingTypeWithContext(i0 context.Context, i1 *iot.CreateThingTypeInput, i2 ...request.Option) (r0 *iot.CreateThingTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateThingTypeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.CreateThingTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeCreateThingTypeWithContext(ctx context.Context, in *iot.CreateThingTypeInput, _ ...request.Option) (*iot.CreateThingTypeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateThingType cancelled", ctx.Err())
	default:
		return d.CreateThingType(in)
	}
}

func (d *IoTDouble) CreateThingWithContext(i0 context.Context, i1 *iot.CreateThingInput, i2 ...request.Option) (r0 *iot.CreateThingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateThingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.CreateThingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeCreateThingWithContext(ctx context.Context, in *iot.CreateThingInput, _ ...request.Option) (*iot.CreateThingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateThing cancelled", ctx.Err())
	default:
		return d.CreateThing(in)
	}
}

func (d *IoTDouble) CreateTopicRule(i0 *iot.CreateTopicRuleInput) (r0 *iot.CreateTopicRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTopicRule", i0)
	r0, _ = returns[0].(*iot.CreateTopicRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) CreateTopicRuleDestination(i0 *iot.CreateTopicRuleDestinationInput) (r0 *iot.CreateTopicRuleDestinationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTopicRuleDestination", i0)
	r0, _ = returns[0].(*iot.CreateTopicRuleDestinationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) CreateTopicRuleDestinationRequest(i0 *iot.CreateTopicRuleDestinationInput) (r0 *request.Request, r1 *iot.CreateTopicRuleDestinationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTopicRuleDestinationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.CreateTopicRuleDestinationOutput)
	return
}

func (d *IoTDouble) CreateTopicRuleDestinationWithContext(i0 context.Context, i1 *iot.CreateTopicRuleDestinationInput, i2 ...request.Option) (r0 *iot.CreateTopicRuleDestinationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTopicRuleDestinationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.CreateTopicRuleDestinationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeCreateTopicRuleDestinationWithContext(ctx context.Context, in *iot.CreateTopicRuleDestinationInput, _ ...request.Option) (*iot.CreateTopicRuleDestinationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTopicRuleDestination cancelled", ctx.Err())
	default:
		return d.CreateTopicRuleDestination(in)
	}
}

func (d *IoTDouble) CreateTopicRuleRequest(i0 *iot.CreateTopicRuleInput) (r0 *request.Request, r1 *iot.CreateTopicRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTopicRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.CreateTopicRuleOutput)
	return
}

func (d *IoTDouble) CreateTopicRuleWithContext(i0 context.Context, i1 *iot.CreateTopicRuleInput, i2 ...request.Option) (r0 *iot.CreateTopicRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTopicRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.CreateTopicRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeCreateTopicRuleWithContext(ctx context.Context, in *iot.CreateTopicRuleInput, _ ...request.Option) (*iot.CreateTopicRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTopicRule cancelled", ctx.Err())
	default:
		return d.CreateTopicRule(in)
	}
}

func (d *IoTDouble) DeleteAccountAuditConfiguration(i0 *iot.DeleteAccountAuditConfigurationInput) (r0 *iot.DeleteAccountAuditConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAccountAuditConfiguration", i0)
	r0, _ = returns[0].(*iot.DeleteAccountAuditConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DeleteAccountAuditConfigurationRequest(i0 *iot.DeleteAccountAuditConfigurationInput) (r0 *request.Request, r1 *iot.DeleteAccountAuditConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAccountAuditConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DeleteAccountAuditConfigurationOutput)
	return
}

func (d *IoTDouble) DeleteAccountAuditConfigurationWithContext(i0 context.Context, i1 *iot.DeleteAccountAuditConfigurationInput, i2 ...request.Option) (r0 *iot.DeleteAccountAuditConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAccountAuditConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DeleteAccountAuditConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDeleteAccountAuditConfigurationWithContext(ctx context.Context, in *iot.DeleteAccountAuditConfigurationInput, _ ...request.Option) (*iot.DeleteAccountAuditConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteAccountAuditConfiguration cancelled", ctx.Err())
	default:
		return d.DeleteAccountAuditConfiguration(in)
	}
}

func (d *IoTDouble) DeleteAuthorizer(i0 *iot.DeleteAuthorizerInput) (r0 *iot.DeleteAuthorizerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAuthorizer", i0)
	r0, _ = returns[0].(*iot.DeleteAuthorizerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DeleteAuthorizerRequest(i0 *iot.DeleteAuthorizerInput) (r0 *request.Request, r1 *iot.DeleteAuthorizerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAuthorizerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DeleteAuthorizerOutput)
	return
}

func (d *IoTDouble) DeleteAuthorizerWithContext(i0 context.Context, i1 *iot.DeleteAuthorizerInput, i2 ...request.Option) (r0 *iot.DeleteAuthorizerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAuthorizerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DeleteAuthorizerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDeleteAuthorizerWithContext(ctx context.Context, in *iot.DeleteAuthorizerInput, _ ...request.Option) (*iot.DeleteAuthorizerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteAuthorizer cancelled", ctx.Err())
	default:
		return d.DeleteAuthorizer(in)
	}
}

func (d *IoTDouble) DeleteBillingGroup(i0 *iot.DeleteBillingGroupInput) (r0 *iot.DeleteBillingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBillingGroup", i0)
	r0, _ = returns[0].(*iot.DeleteBillingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DeleteBillingGroupRequest(i0 *iot.DeleteBillingGroupInput) (r0 *request.Request, r1 *iot.DeleteBillingGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBillingGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DeleteBillingGroupOutput)
	return
}

func (d *IoTDouble) DeleteBillingGroupWithContext(i0 context.Context, i1 *iot.DeleteBillingGroupInput, i2 ...request.Option) (r0 *iot.DeleteBillingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBillingGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DeleteBillingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDeleteBillingGroupWithContext(ctx context.Context, in *iot.DeleteBillingGroupInput, _ ...request.Option) (*iot.DeleteBillingGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteBillingGroup cancelled", ctx.Err())
	default:
		return d.DeleteBillingGroup(in)
	}
}

func (d *IoTDouble) DeleteCACertificate(i0 *iot.DeleteCACertificateInput) (r0 *iot.DeleteCACertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCACertificate", i0)
	r0, _ = returns[0].(*iot.DeleteCACertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DeleteCACertificateRequest(i0 *iot.DeleteCACertificateInput) (r0 *request.Request, r1 *iot.DeleteCACertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCACertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DeleteCACertificateOutput)
	return
}

func (d *IoTDouble) DeleteCACertificateWithContext(i0 context.Context, i1 *iot.DeleteCACertificateInput, i2 ...request.Option) (r0 *iot.DeleteCACertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCACertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DeleteCACertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDeleteCACertificateWithContext(ctx context.Context, in *iot.DeleteCACertificateInput, _ ...request.Option) (*iot.DeleteCACertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteCACertificate cancelled", ctx.Err())
	default:
		return d.DeleteCACertificate(in)
	}
}

func (d *IoTDouble) DeleteCertificate(i0 *iot.DeleteCertificateInput) (r0 *iot.DeleteCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCertificate", i0)
	r0, _ = returns[0].(*iot.DeleteCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DeleteCertificateRequest(i0 *iot.DeleteCertificateInput) (r0 *request.Request, r1 *iot.DeleteCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DeleteCertificateOutput)
	return
}

func (d *IoTDouble) DeleteCertificateWithContext(i0 context.Context, i1 *iot.DeleteCertificateInput, i2 ...request.Option) (r0 *iot.DeleteCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DeleteCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDeleteCertificateWithContext(ctx context.Context, in *iot.DeleteCertificateInput, _ ...request.Option) (*iot.DeleteCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteCertificate cancelled", ctx.Err())
	default:
		return d.DeleteCertificate(in)
	}
}

func (d *IoTDouble) DeleteDomainConfiguration(i0 *iot.DeleteDomainConfigurationInput) (r0 *iot.DeleteDomainConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDomainConfiguration", i0)
	r0, _ = returns[0].(*iot.DeleteDomainConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DeleteDomainConfigurationRequest(i0 *iot.DeleteDomainConfigurationInput) (r0 *request.Request, r1 *iot.DeleteDomainConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDomainConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DeleteDomainConfigurationOutput)
	return
}

func (d *IoTDouble) DeleteDomainConfigurationWithContext(i0 context.Context, i1 *iot.DeleteDomainConfigurationInput, i2 ...request.Option) (r0 *iot.DeleteDomainConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDomainConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DeleteDomainConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDeleteDomainConfigurationWithContext(ctx context.Context, in *iot.DeleteDomainConfigurationInput, _ ...request.Option) (*iot.DeleteDomainConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDomainConfiguration cancelled", ctx.Err())
	default:
		return d.DeleteDomainConfiguration(in)
	}
}

func (d *IoTDouble) DeleteDynamicThingGroup(i0 *iot.DeleteDynamicThingGroupInput) (r0 *iot.DeleteDynamicThingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDynamicThingGroup", i0)
	r0, _ = returns[0].(*iot.DeleteDynamicThingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DeleteDynamicThingGroupRequest(i0 *iot.DeleteDynamicThingGroupInput) (r0 *request.Request, r1 *iot.DeleteDynamicThingGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDynamicThingGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DeleteDynamicThingGroupOutput)
	return
}

func (d *IoTDouble) DeleteDynamicThingGroupWithContext(i0 context.Context, i1 *iot.DeleteDynamicThingGroupInput, i2 ...request.Option) (r0 *iot.DeleteDynamicThingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDynamicThingGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DeleteDynamicThingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDeleteDynamicThingGroupWithContext(ctx context.Context, in *iot.DeleteDynamicThingGroupInput, _ ...request.Option) (*iot.DeleteDynamicThingGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDynamicThingGroup cancelled", ctx.Err())
	default:
		return d.DeleteDynamicThingGroup(in)
	}
}

func (d *IoTDouble) DeleteJob(i0 *iot.DeleteJobInput) (r0 *iot.DeleteJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteJob", i0)
	r0, _ = returns[0].(*iot.DeleteJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DeleteJobExecution(i0 *iot.DeleteJobExecutionInput) (r0 *iot.DeleteJobExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteJobExecution", i0)
	r0, _ = returns[0].(*iot.DeleteJobExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DeleteJobExecutionRequest(i0 *iot.DeleteJobExecutionInput) (r0 *request.Request, r1 *iot.DeleteJobExecutionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteJobExecutionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DeleteJobExecutionOutput)
	return
}

func (d *IoTDouble) DeleteJobExecutionWithContext(i0 context.Context, i1 *iot.DeleteJobExecutionInput, i2 ...request.Option) (r0 *iot.DeleteJobExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteJobExecutionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DeleteJobExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDeleteJobExecutionWithContext(ctx context.Context, in *iot.DeleteJobExecutionInput, _ ...request.Option) (*iot.DeleteJobExecutionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteJobExecution cancelled", ctx.Err())
	default:
		return d.DeleteJobExecution(in)
	}
}

func (d *IoTDouble) DeleteJobRequest(i0 *iot.DeleteJobInput) (r0 *request.Request, r1 *iot.DeleteJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DeleteJobOutput)
	return
}

func (d *IoTDouble) DeleteJobWithContext(i0 context.Context, i1 *iot.DeleteJobInput, i2 ...request.Option) (r0 *iot.DeleteJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DeleteJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDeleteJobWithContext(ctx context.Context, in *iot.DeleteJobInput, _ ...request.Option) (*iot.DeleteJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteJob cancelled", ctx.Err())
	default:
		return d.DeleteJob(in)
	}
}

func (d *IoTDouble) DeleteMitigationAction(i0 *iot.DeleteMitigationActionInput) (r0 *iot.DeleteMitigationActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMitigationAction", i0)
	r0, _ = returns[0].(*iot.DeleteMitigationActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DeleteMitigationActionRequest(i0 *iot.DeleteMitigationActionInput) (r0 *request.Request, r1 *iot.DeleteMitigationActionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMitigationActionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DeleteMitigationActionOutput)
	return
}

func (d *IoTDouble) DeleteMitigationActionWithContext(i0 context.Context, i1 *iot.DeleteMitigationActionInput, i2 ...request.Option) (r0 *iot.DeleteMitigationActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMitigationActionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DeleteMitigationActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDeleteMitigationActionWithContext(ctx context.Context, in *iot.DeleteMitigationActionInput, _ ...request.Option) (*iot.DeleteMitigationActionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteMitigationAction cancelled", ctx.Err())
	default:
		return d.DeleteMitigationAction(in)
	}
}

func (d *IoTDouble) DeleteOTAUpdate(i0 *iot.DeleteOTAUpdateInput) (r0 *iot.DeleteOTAUpdateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteOTAUpdate", i0)
	r0, _ = returns[0].(*iot.DeleteOTAUpdateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DeleteOTAUpdateRequest(i0 *iot.DeleteOTAUpdateInput) (r0 *request.Request, r1 *iot.DeleteOTAUpdateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteOTAUpdateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DeleteOTAUpdateOutput)
	return
}

func (d *IoTDouble) DeleteOTAUpdateWithContext(i0 context.Context, i1 *iot.DeleteOTAUpdateInput, i2 ...request.Option) (r0 *iot.DeleteOTAUpdateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteOTAUpdateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DeleteOTAUpdateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDeleteOTAUpdateWithContext(ctx context.Context, in *iot.DeleteOTAUpdateInput, _ ...request.Option) (*iot.DeleteOTAUpdateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteOTAUpdate cancelled", ctx.Err())
	default:
		return d.DeleteOTAUpdate(in)
	}
}

func (d *IoTDouble) DeletePolicy(i0 *iot.DeletePolicyInput) (r0 *iot.DeletePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePolicy", i0)
	r0, _ = returns[0].(*iot.DeletePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DeletePolicyRequest(i0 *iot.DeletePolicyInput) (r0 *request.Request, r1 *iot.DeletePolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DeletePolicyOutput)
	return
}

func (d *IoTDouble) DeletePolicyVersion(i0 *iot.DeletePolicyVersionInput) (r0 *iot.DeletePolicyVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePolicyVersion", i0)
	r0, _ = returns[0].(*iot.DeletePolicyVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DeletePolicyVersionRequest(i0 *iot.DeletePolicyVersionInput) (r0 *request.Request, r1 *iot.DeletePolicyVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePolicyVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DeletePolicyVersionOutput)
	return
}

func (d *IoTDouble) DeletePolicyVersionWithContext(i0 context.Context, i1 *iot.DeletePolicyVersionInput, i2 ...request.Option) (r0 *iot.DeletePolicyVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePolicyVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DeletePolicyVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDeletePolicyVersionWithContext(ctx context.Context, in *iot.DeletePolicyVersionInput, _ ...request.Option) (*iot.DeletePolicyVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeletePolicyVersion cancelled", ctx.Err())
	default:
		return d.DeletePolicyVersion(in)
	}
}

func (d *IoTDouble) DeletePolicyWithContext(i0 context.Context, i1 *iot.DeletePolicyInput, i2 ...request.Option) (r0 *iot.DeletePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DeletePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDeletePolicyWithContext(ctx context.Context, in *iot.DeletePolicyInput, _ ...request.Option) (*iot.DeletePolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeletePolicy cancelled", ctx.Err())
	default:
		return d.DeletePolicy(in)
	}
}

func (d *IoTDouble) DeleteProvisioningTemplate(i0 *iot.DeleteProvisioningTemplateInput) (r0 *iot.DeleteProvisioningTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteProvisioningTemplate", i0)
	r0, _ = returns[0].(*iot.DeleteProvisioningTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DeleteProvisioningTemplateRequest(i0 *iot.DeleteProvisioningTemplateInput) (r0 *request.Request, r1 *iot.DeleteProvisioningTemplateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteProvisioningTemplateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DeleteProvisioningTemplateOutput)
	return
}

func (d *IoTDouble) DeleteProvisioningTemplateVersion(i0 *iot.DeleteProvisioningTemplateVersionInput) (r0 *iot.DeleteProvisioningTemplateVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteProvisioningTemplateVersion", i0)
	r0, _ = returns[0].(*iot.DeleteProvisioningTemplateVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DeleteProvisioningTemplateVersionRequest(i0 *iot.DeleteProvisioningTemplateVersionInput) (r0 *request.Request, r1 *iot.DeleteProvisioningTemplateVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteProvisioningTemplateVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DeleteProvisioningTemplateVersionOutput)
	return
}

func (d *IoTDouble) DeleteProvisioningTemplateVersionWithContext(i0 context.Context, i1 *iot.DeleteProvisioningTemplateVersionInput, i2 ...request.Option) (r0 *iot.DeleteProvisioningTemplateVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteProvisioningTemplateVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DeleteProvisioningTemplateVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDeleteProvisioningTemplateVersionWithContext(ctx context.Context, in *iot.DeleteProvisioningTemplateVersionInput, _ ...request.Option) (*iot.DeleteProvisioningTemplateVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteProvisioningTemplateVersion cancelled", ctx.Err())
	default:
		return d.DeleteProvisioningTemplateVersion(in)
	}
}

func (d *IoTDouble) DeleteProvisioningTemplateWithContext(i0 context.Context, i1 *iot.DeleteProvisioningTemplateInput, i2 ...request.Option) (r0 *iot.DeleteProvisioningTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteProvisioningTemplateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DeleteProvisioningTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDeleteProvisioningTemplateWithContext(ctx context.Context, in *iot.DeleteProvisioningTemplateInput, _ ...request.Option) (*iot.DeleteProvisioningTemplateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteProvisioningTemplate cancelled", ctx.Err())
	default:
		return d.DeleteProvisioningTemplate(in)
	}
}

func (d *IoTDouble) DeleteRegistrationCode(i0 *iot.DeleteRegistrationCodeInput) (r0 *iot.DeleteRegistrationCodeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRegistrationCode", i0)
	r0, _ = returns[0].(*iot.DeleteRegistrationCodeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DeleteRegistrationCodeRequest(i0 *iot.DeleteRegistrationCodeInput) (r0 *request.Request, r1 *iot.DeleteRegistrationCodeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRegistrationCodeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DeleteRegistrationCodeOutput)
	return
}

func (d *IoTDouble) DeleteRegistrationCodeWithContext(i0 context.Context, i1 *iot.DeleteRegistrationCodeInput, i2 ...request.Option) (r0 *iot.DeleteRegistrationCodeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRegistrationCodeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DeleteRegistrationCodeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDeleteRegistrationCodeWithContext(ctx context.Context, in *iot.DeleteRegistrationCodeInput, _ ...request.Option) (*iot.DeleteRegistrationCodeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRegistrationCode cancelled", ctx.Err())
	default:
		return d.DeleteRegistrationCode(in)
	}
}

func (d *IoTDouble) DeleteRoleAlias(i0 *iot.DeleteRoleAliasInput) (r0 *iot.DeleteRoleAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRoleAlias", i0)
	r0, _ = returns[0].(*iot.DeleteRoleAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DeleteRoleAliasRequest(i0 *iot.DeleteRoleAliasInput) (r0 *request.Request, r1 *iot.DeleteRoleAliasOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRoleAliasRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DeleteRoleAliasOutput)
	return
}

func (d *IoTDouble) DeleteRoleAliasWithContext(i0 context.Context, i1 *iot.DeleteRoleAliasInput, i2 ...request.Option) (r0 *iot.DeleteRoleAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRoleAliasWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DeleteRoleAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDeleteRoleAliasWithContext(ctx context.Context, in *iot.DeleteRoleAliasInput, _ ...request.Option) (*iot.DeleteRoleAliasOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRoleAlias cancelled", ctx.Err())
	default:
		return d.DeleteRoleAlias(in)
	}
}

func (d *IoTDouble) DeleteScheduledAudit(i0 *iot.DeleteScheduledAuditInput) (r0 *iot.DeleteScheduledAuditOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteScheduledAudit", i0)
	r0, _ = returns[0].(*iot.DeleteScheduledAuditOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DeleteScheduledAuditRequest(i0 *iot.DeleteScheduledAuditInput) (r0 *request.Request, r1 *iot.DeleteScheduledAuditOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteScheduledAuditRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DeleteScheduledAuditOutput)
	return
}

func (d *IoTDouble) DeleteScheduledAuditWithContext(i0 context.Context, i1 *iot.DeleteScheduledAuditInput, i2 ...request.Option) (r0 *iot.DeleteScheduledAuditOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteScheduledAuditWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DeleteScheduledAuditOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDeleteScheduledAuditWithContext(ctx context.Context, in *iot.DeleteScheduledAuditInput, _ ...request.Option) (*iot.DeleteScheduledAuditOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteScheduledAudit cancelled", ctx.Err())
	default:
		return d.DeleteScheduledAudit(in)
	}
}

func (d *IoTDouble) DeleteSecurityProfile(i0 *iot.DeleteSecurityProfileInput) (r0 *iot.DeleteSecurityProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSecurityProfile", i0)
	r0, _ = returns[0].(*iot.DeleteSecurityProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DeleteSecurityProfileRequest(i0 *iot.DeleteSecurityProfileInput) (r0 *request.Request, r1 *iot.DeleteSecurityProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSecurityProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DeleteSecurityProfileOutput)
	return
}

func (d *IoTDouble) DeleteSecurityProfileWithContext(i0 context.Context, i1 *iot.DeleteSecurityProfileInput, i2 ...request.Option) (r0 *iot.DeleteSecurityProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSecurityProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DeleteSecurityProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDeleteSecurityProfileWithContext(ctx context.Context, in *iot.DeleteSecurityProfileInput, _ ...request.Option) (*iot.DeleteSecurityProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteSecurityProfile cancelled", ctx.Err())
	default:
		return d.DeleteSecurityProfile(in)
	}
}

func (d *IoTDouble) DeleteStream(i0 *iot.DeleteStreamInput) (r0 *iot.DeleteStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteStream", i0)
	r0, _ = returns[0].(*iot.DeleteStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DeleteStreamRequest(i0 *iot.DeleteStreamInput) (r0 *request.Request, r1 *iot.DeleteStreamOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteStreamRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DeleteStreamOutput)
	return
}

func (d *IoTDouble) DeleteStreamWithContext(i0 context.Context, i1 *iot.DeleteStreamInput, i2 ...request.Option) (r0 *iot.DeleteStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteStreamWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DeleteStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDeleteStreamWithContext(ctx context.Context, in *iot.DeleteStreamInput, _ ...request.Option) (*iot.DeleteStreamOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteStream cancelled", ctx.Err())
	default:
		return d.DeleteStream(in)
	}
}

func (d *IoTDouble) DeleteThing(i0 *iot.DeleteThingInput) (r0 *iot.DeleteThingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteThing", i0)
	r0, _ = returns[0].(*iot.DeleteThingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DeleteThingGroup(i0 *iot.DeleteThingGroupInput) (r0 *iot.DeleteThingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteThingGroup", i0)
	r0, _ = returns[0].(*iot.DeleteThingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DeleteThingGroupRequest(i0 *iot.DeleteThingGroupInput) (r0 *request.Request, r1 *iot.DeleteThingGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteThingGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DeleteThingGroupOutput)
	return
}

func (d *IoTDouble) DeleteThingGroupWithContext(i0 context.Context, i1 *iot.DeleteThingGroupInput, i2 ...request.Option) (r0 *iot.DeleteThingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteThingGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DeleteThingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDeleteThingGroupWithContext(ctx context.Context, in *iot.DeleteThingGroupInput, _ ...request.Option) (*iot.DeleteThingGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteThingGroup cancelled", ctx.Err())
	default:
		return d.DeleteThingGroup(in)
	}
}

func (d *IoTDouble) DeleteThingRequest(i0 *iot.DeleteThingInput) (r0 *request.Request, r1 *iot.DeleteThingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteThingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DeleteThingOutput)
	return
}

func (d *IoTDouble) DeleteThingType(i0 *iot.DeleteThingTypeInput) (r0 *iot.DeleteThingTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteThingType", i0)
	r0, _ = returns[0].(*iot.DeleteThingTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DeleteThingTypeRequest(i0 *iot.DeleteThingTypeInput) (r0 *request.Request, r1 *iot.DeleteThingTypeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteThingTypeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DeleteThingTypeOutput)
	return
}

func (d *IoTDouble) DeleteThingTypeWithContext(i0 context.Context, i1 *iot.DeleteThingTypeInput, i2 ...request.Option) (r0 *iot.DeleteThingTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteThingTypeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DeleteThingTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDeleteThingTypeWithContext(ctx context.Context, in *iot.DeleteThingTypeInput, _ ...request.Option) (*iot.DeleteThingTypeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteThingType cancelled", ctx.Err())
	default:
		return d.DeleteThingType(in)
	}
}

func (d *IoTDouble) DeleteThingWithContext(i0 context.Context, i1 *iot.DeleteThingInput, i2 ...request.Option) (r0 *iot.DeleteThingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteThingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DeleteThingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDeleteThingWithContext(ctx context.Context, in *iot.DeleteThingInput, _ ...request.Option) (*iot.DeleteThingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteThing cancelled", ctx.Err())
	default:
		return d.DeleteThing(in)
	}
}

func (d *IoTDouble) DeleteTopicRule(i0 *iot.DeleteTopicRuleInput) (r0 *iot.DeleteTopicRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTopicRule", i0)
	r0, _ = returns[0].(*iot.DeleteTopicRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DeleteTopicRuleDestination(i0 *iot.DeleteTopicRuleDestinationInput) (r0 *iot.DeleteTopicRuleDestinationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTopicRuleDestination", i0)
	r0, _ = returns[0].(*iot.DeleteTopicRuleDestinationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DeleteTopicRuleDestinationRequest(i0 *iot.DeleteTopicRuleDestinationInput) (r0 *request.Request, r1 *iot.DeleteTopicRuleDestinationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTopicRuleDestinationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DeleteTopicRuleDestinationOutput)
	return
}

func (d *IoTDouble) DeleteTopicRuleDestinationWithContext(i0 context.Context, i1 *iot.DeleteTopicRuleDestinationInput, i2 ...request.Option) (r0 *iot.DeleteTopicRuleDestinationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTopicRuleDestinationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DeleteTopicRuleDestinationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDeleteTopicRuleDestinationWithContext(ctx context.Context, in *iot.DeleteTopicRuleDestinationInput, _ ...request.Option) (*iot.DeleteTopicRuleDestinationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTopicRuleDestination cancelled", ctx.Err())
	default:
		return d.DeleteTopicRuleDestination(in)
	}
}

func (d *IoTDouble) DeleteTopicRuleRequest(i0 *iot.DeleteTopicRuleInput) (r0 *request.Request, r1 *iot.DeleteTopicRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTopicRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DeleteTopicRuleOutput)
	return
}

func (d *IoTDouble) DeleteTopicRuleWithContext(i0 context.Context, i1 *iot.DeleteTopicRuleInput, i2 ...request.Option) (r0 *iot.DeleteTopicRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTopicRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DeleteTopicRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDeleteTopicRuleWithContext(ctx context.Context, in *iot.DeleteTopicRuleInput, _ ...request.Option) (*iot.DeleteTopicRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTopicRule cancelled", ctx.Err())
	default:
		return d.DeleteTopicRule(in)
	}
}

func (d *IoTDouble) DeleteV2LoggingLevel(i0 *iot.DeleteV2LoggingLevelInput) (r0 *iot.DeleteV2LoggingLevelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteV2LoggingLevel", i0)
	r0, _ = returns[0].(*iot.DeleteV2LoggingLevelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DeleteV2LoggingLevelRequest(i0 *iot.DeleteV2LoggingLevelInput) (r0 *request.Request, r1 *iot.DeleteV2LoggingLevelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteV2LoggingLevelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DeleteV2LoggingLevelOutput)
	return
}

func (d *IoTDouble) DeleteV2LoggingLevelWithContext(i0 context.Context, i1 *iot.DeleteV2LoggingLevelInput, i2 ...request.Option) (r0 *iot.DeleteV2LoggingLevelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteV2LoggingLevelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DeleteV2LoggingLevelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDeleteV2LoggingLevelWithContext(ctx context.Context, in *iot.DeleteV2LoggingLevelInput, _ ...request.Option) (*iot.DeleteV2LoggingLevelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteV2LoggingLevel cancelled", ctx.Err())
	default:
		return d.DeleteV2LoggingLevel(in)
	}
}

func (d *IoTDouble) DeprecateThingType(i0 *iot.DeprecateThingTypeInput) (r0 *iot.DeprecateThingTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeprecateThingType", i0)
	r0, _ = returns[0].(*iot.DeprecateThingTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DeprecateThingTypeRequest(i0 *iot.DeprecateThingTypeInput) (r0 *request.Request, r1 *iot.DeprecateThingTypeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeprecateThingTypeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DeprecateThingTypeOutput)
	return
}

func (d *IoTDouble) DeprecateThingTypeWithContext(i0 context.Context, i1 *iot.DeprecateThingTypeInput, i2 ...request.Option) (r0 *iot.DeprecateThingTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeprecateThingTypeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DeprecateThingTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDeprecateThingTypeWithContext(ctx context.Context, in *iot.DeprecateThingTypeInput, _ ...request.Option) (*iot.DeprecateThingTypeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeprecateThingType cancelled", ctx.Err())
	default:
		return d.DeprecateThingType(in)
	}
}

func (d *IoTDouble) DescribeAccountAuditConfiguration(i0 *iot.DescribeAccountAuditConfigurationInput) (r0 *iot.DescribeAccountAuditConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAccountAuditConfiguration", i0)
	r0, _ = returns[0].(*iot.DescribeAccountAuditConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DescribeAccountAuditConfigurationRequest(i0 *iot.DescribeAccountAuditConfigurationInput) (r0 *request.Request, r1 *iot.DescribeAccountAuditConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAccountAuditConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DescribeAccountAuditConfigurationOutput)
	return
}

func (d *IoTDouble) DescribeAccountAuditConfigurationWithContext(i0 context.Context, i1 *iot.DescribeAccountAuditConfigurationInput, i2 ...request.Option) (r0 *iot.DescribeAccountAuditConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAccountAuditConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DescribeAccountAuditConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDescribeAccountAuditConfigurationWithContext(ctx context.Context, in *iot.DescribeAccountAuditConfigurationInput, _ ...request.Option) (*iot.DescribeAccountAuditConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAccountAuditConfiguration cancelled", ctx.Err())
	default:
		return d.DescribeAccountAuditConfiguration(in)
	}
}

func (d *IoTDouble) DescribeAuditFinding(i0 *iot.DescribeAuditFindingInput) (r0 *iot.DescribeAuditFindingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAuditFinding", i0)
	r0, _ = returns[0].(*iot.DescribeAuditFindingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DescribeAuditFindingRequest(i0 *iot.DescribeAuditFindingInput) (r0 *request.Request, r1 *iot.DescribeAuditFindingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAuditFindingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DescribeAuditFindingOutput)
	return
}

func (d *IoTDouble) DescribeAuditFindingWithContext(i0 context.Context, i1 *iot.DescribeAuditFindingInput, i2 ...request.Option) (r0 *iot.DescribeAuditFindingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAuditFindingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DescribeAuditFindingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDescribeAuditFindingWithContext(ctx context.Context, in *iot.DescribeAuditFindingInput, _ ...request.Option) (*iot.DescribeAuditFindingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAuditFinding cancelled", ctx.Err())
	default:
		return d.DescribeAuditFinding(in)
	}
}

func (d *IoTDouble) DescribeAuditMitigationActionsTask(i0 *iot.DescribeAuditMitigationActionsTaskInput) (r0 *iot.DescribeAuditMitigationActionsTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAuditMitigationActionsTask", i0)
	r0, _ = returns[0].(*iot.DescribeAuditMitigationActionsTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DescribeAuditMitigationActionsTaskRequest(i0 *iot.DescribeAuditMitigationActionsTaskInput) (r0 *request.Request, r1 *iot.DescribeAuditMitigationActionsTaskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAuditMitigationActionsTaskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DescribeAuditMitigationActionsTaskOutput)
	return
}

func (d *IoTDouble) DescribeAuditMitigationActionsTaskWithContext(i0 context.Context, i1 *iot.DescribeAuditMitigationActionsTaskInput, i2 ...request.Option) (r0 *iot.DescribeAuditMitigationActionsTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAuditMitigationActionsTaskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DescribeAuditMitigationActionsTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDescribeAuditMitigationActionsTaskWithContext(ctx context.Context, in *iot.DescribeAuditMitigationActionsTaskInput, _ ...request.Option) (*iot.DescribeAuditMitigationActionsTaskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAuditMitigationActionsTask cancelled", ctx.Err())
	default:
		return d.DescribeAuditMitigationActionsTask(in)
	}
}

func (d *IoTDouble) DescribeAuditTask(i0 *iot.DescribeAuditTaskInput) (r0 *iot.DescribeAuditTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAuditTask", i0)
	r0, _ = returns[0].(*iot.DescribeAuditTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DescribeAuditTaskRequest(i0 *iot.DescribeAuditTaskInput) (r0 *request.Request, r1 *iot.DescribeAuditTaskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAuditTaskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DescribeAuditTaskOutput)
	return
}

func (d *IoTDouble) DescribeAuditTaskWithContext(i0 context.Context, i1 *iot.DescribeAuditTaskInput, i2 ...request.Option) (r0 *iot.DescribeAuditTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAuditTaskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DescribeAuditTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDescribeAuditTaskWithContext(ctx context.Context, in *iot.DescribeAuditTaskInput, _ ...request.Option) (*iot.DescribeAuditTaskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAuditTask cancelled", ctx.Err())
	default:
		return d.DescribeAuditTask(in)
	}
}

func (d *IoTDouble) DescribeAuthorizer(i0 *iot.DescribeAuthorizerInput) (r0 *iot.DescribeAuthorizerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAuthorizer", i0)
	r0, _ = returns[0].(*iot.DescribeAuthorizerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DescribeAuthorizerRequest(i0 *iot.DescribeAuthorizerInput) (r0 *request.Request, r1 *iot.DescribeAuthorizerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAuthorizerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DescribeAuthorizerOutput)
	return
}

func (d *IoTDouble) DescribeAuthorizerWithContext(i0 context.Context, i1 *iot.DescribeAuthorizerInput, i2 ...request.Option) (r0 *iot.DescribeAuthorizerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAuthorizerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DescribeAuthorizerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDescribeAuthorizerWithContext(ctx context.Context, in *iot.DescribeAuthorizerInput, _ ...request.Option) (*iot.DescribeAuthorizerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAuthorizer cancelled", ctx.Err())
	default:
		return d.DescribeAuthorizer(in)
	}
}

func (d *IoTDouble) DescribeBillingGroup(i0 *iot.DescribeBillingGroupInput) (r0 *iot.DescribeBillingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBillingGroup", i0)
	r0, _ = returns[0].(*iot.DescribeBillingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DescribeBillingGroupRequest(i0 *iot.DescribeBillingGroupInput) (r0 *request.Request, r1 *iot.DescribeBillingGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBillingGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DescribeBillingGroupOutput)
	return
}

func (d *IoTDouble) DescribeBillingGroupWithContext(i0 context.Context, i1 *iot.DescribeBillingGroupInput, i2 ...request.Option) (r0 *iot.DescribeBillingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBillingGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DescribeBillingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDescribeBillingGroupWithContext(ctx context.Context, in *iot.DescribeBillingGroupInput, _ ...request.Option) (*iot.DescribeBillingGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeBillingGroup cancelled", ctx.Err())
	default:
		return d.DescribeBillingGroup(in)
	}
}

func (d *IoTDouble) DescribeCACertificate(i0 *iot.DescribeCACertificateInput) (r0 *iot.DescribeCACertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCACertificate", i0)
	r0, _ = returns[0].(*iot.DescribeCACertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DescribeCACertificateRequest(i0 *iot.DescribeCACertificateInput) (r0 *request.Request, r1 *iot.DescribeCACertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCACertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DescribeCACertificateOutput)
	return
}

func (d *IoTDouble) DescribeCACertificateWithContext(i0 context.Context, i1 *iot.DescribeCACertificateInput, i2 ...request.Option) (r0 *iot.DescribeCACertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCACertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DescribeCACertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDescribeCACertificateWithContext(ctx context.Context, in *iot.DescribeCACertificateInput, _ ...request.Option) (*iot.DescribeCACertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeCACertificate cancelled", ctx.Err())
	default:
		return d.DescribeCACertificate(in)
	}
}

func (d *IoTDouble) DescribeCertificate(i0 *iot.DescribeCertificateInput) (r0 *iot.DescribeCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCertificate", i0)
	r0, _ = returns[0].(*iot.DescribeCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DescribeCertificateRequest(i0 *iot.DescribeCertificateInput) (r0 *request.Request, r1 *iot.DescribeCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DescribeCertificateOutput)
	return
}

func (d *IoTDouble) DescribeCertificateWithContext(i0 context.Context, i1 *iot.DescribeCertificateInput, i2 ...request.Option) (r0 *iot.DescribeCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DescribeCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDescribeCertificateWithContext(ctx context.Context, in *iot.DescribeCertificateInput, _ ...request.Option) (*iot.DescribeCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeCertificate cancelled", ctx.Err())
	default:
		return d.DescribeCertificate(in)
	}
}

func (d *IoTDouble) DescribeDefaultAuthorizer(i0 *iot.DescribeDefaultAuthorizerInput) (r0 *iot.DescribeDefaultAuthorizerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDefaultAuthorizer", i0)
	r0, _ = returns[0].(*iot.DescribeDefaultAuthorizerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DescribeDefaultAuthorizerRequest(i0 *iot.DescribeDefaultAuthorizerInput) (r0 *request.Request, r1 *iot.DescribeDefaultAuthorizerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDefaultAuthorizerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DescribeDefaultAuthorizerOutput)
	return
}

func (d *IoTDouble) DescribeDefaultAuthorizerWithContext(i0 context.Context, i1 *iot.DescribeDefaultAuthorizerInput, i2 ...request.Option) (r0 *iot.DescribeDefaultAuthorizerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDefaultAuthorizerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DescribeDefaultAuthorizerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDescribeDefaultAuthorizerWithContext(ctx context.Context, in *iot.DescribeDefaultAuthorizerInput, _ ...request.Option) (*iot.DescribeDefaultAuthorizerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDefaultAuthorizer cancelled", ctx.Err())
	default:
		return d.DescribeDefaultAuthorizer(in)
	}
}

func (d *IoTDouble) DescribeDomainConfiguration(i0 *iot.DescribeDomainConfigurationInput) (r0 *iot.DescribeDomainConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDomainConfiguration", i0)
	r0, _ = returns[0].(*iot.DescribeDomainConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DescribeDomainConfigurationRequest(i0 *iot.DescribeDomainConfigurationInput) (r0 *request.Request, r1 *iot.DescribeDomainConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDomainConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DescribeDomainConfigurationOutput)
	return
}

func (d *IoTDouble) DescribeDomainConfigurationWithContext(i0 context.Context, i1 *iot.DescribeDomainConfigurationInput, i2 ...request.Option) (r0 *iot.DescribeDomainConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDomainConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DescribeDomainConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDescribeDomainConfigurationWithContext(ctx context.Context, in *iot.DescribeDomainConfigurationInput, _ ...request.Option) (*iot.DescribeDomainConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDomainConfiguration cancelled", ctx.Err())
	default:
		return d.DescribeDomainConfiguration(in)
	}
}

func (d *IoTDouble) DescribeEndpoint(i0 *iot.DescribeEndpointInput) (r0 *iot.DescribeEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEndpoint", i0)
	r0, _ = returns[0].(*iot.DescribeEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DescribeEndpointRequest(i0 *iot.DescribeEndpointInput) (r0 *request.Request, r1 *iot.DescribeEndpointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEndpointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DescribeEndpointOutput)
	return
}

func (d *IoTDouble) DescribeEndpointWithContext(i0 context.Context, i1 *iot.DescribeEndpointInput, i2 ...request.Option) (r0 *iot.DescribeEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEndpointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DescribeEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDescribeEndpointWithContext(ctx context.Context, in *iot.DescribeEndpointInput, _ ...request.Option) (*iot.DescribeEndpointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEndpoint cancelled", ctx.Err())
	default:
		return d.DescribeEndpoint(in)
	}
}

func (d *IoTDouble) DescribeEventConfigurations(i0 *iot.DescribeEventConfigurationsInput) (r0 *iot.DescribeEventConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventConfigurations", i0)
	r0, _ = returns[0].(*iot.DescribeEventConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DescribeEventConfigurationsRequest(i0 *iot.DescribeEventConfigurationsInput) (r0 *request.Request, r1 *iot.DescribeEventConfigurationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventConfigurationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DescribeEventConfigurationsOutput)
	return
}

func (d *IoTDouble) DescribeEventConfigurationsWithContext(i0 context.Context, i1 *iot.DescribeEventConfigurationsInput, i2 ...request.Option) (r0 *iot.DescribeEventConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventConfigurationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DescribeEventConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDescribeEventConfigurationsWithContext(ctx context.Context, in *iot.DescribeEventConfigurationsInput, _ ...request.Option) (*iot.DescribeEventConfigurationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEventConfigurations cancelled", ctx.Err())
	default:
		return d.DescribeEventConfigurations(in)
	}
}

func (d *IoTDouble) DescribeIndex(i0 *iot.DescribeIndexInput) (r0 *iot.DescribeIndexOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIndex", i0)
	r0, _ = returns[0].(*iot.DescribeIndexOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DescribeIndexRequest(i0 *iot.DescribeIndexInput) (r0 *request.Request, r1 *iot.DescribeIndexOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIndexRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DescribeIndexOutput)
	return
}

func (d *IoTDouble) DescribeIndexWithContext(i0 context.Context, i1 *iot.DescribeIndexInput, i2 ...request.Option) (r0 *iot.DescribeIndexOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIndexWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DescribeIndexOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDescribeIndexWithContext(ctx context.Context, in *iot.DescribeIndexInput, _ ...request.Option) (*iot.DescribeIndexOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeIndex cancelled", ctx.Err())
	default:
		return d.DescribeIndex(in)
	}
}

func (d *IoTDouble) DescribeJob(i0 *iot.DescribeJobInput) (r0 *iot.DescribeJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeJob", i0)
	r0, _ = returns[0].(*iot.DescribeJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DescribeJobExecution(i0 *iot.DescribeJobExecutionInput) (r0 *iot.DescribeJobExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeJobExecution", i0)
	r0, _ = returns[0].(*iot.DescribeJobExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DescribeJobExecutionRequest(i0 *iot.DescribeJobExecutionInput) (r0 *request.Request, r1 *iot.DescribeJobExecutionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeJobExecutionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DescribeJobExecutionOutput)
	return
}

func (d *IoTDouble) DescribeJobExecutionWithContext(i0 context.Context, i1 *iot.DescribeJobExecutionInput, i2 ...request.Option) (r0 *iot.DescribeJobExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeJobExecutionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DescribeJobExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDescribeJobExecutionWithContext(ctx context.Context, in *iot.DescribeJobExecutionInput, _ ...request.Option) (*iot.DescribeJobExecutionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeJobExecution cancelled", ctx.Err())
	default:
		return d.DescribeJobExecution(in)
	}
}

func (d *IoTDouble) DescribeJobRequest(i0 *iot.DescribeJobInput) (r0 *request.Request, r1 *iot.DescribeJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DescribeJobOutput)
	return
}

func (d *IoTDouble) DescribeJobWithContext(i0 context.Context, i1 *iot.DescribeJobInput, i2 ...request.Option) (r0 *iot.DescribeJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DescribeJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDescribeJobWithContext(ctx context.Context, in *iot.DescribeJobInput, _ ...request.Option) (*iot.DescribeJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeJob cancelled", ctx.Err())
	default:
		return d.DescribeJob(in)
	}
}

func (d *IoTDouble) DescribeMitigationAction(i0 *iot.DescribeMitigationActionInput) (r0 *iot.DescribeMitigationActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMitigationAction", i0)
	r0, _ = returns[0].(*iot.DescribeMitigationActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DescribeMitigationActionRequest(i0 *iot.DescribeMitigationActionInput) (r0 *request.Request, r1 *iot.DescribeMitigationActionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMitigationActionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DescribeMitigationActionOutput)
	return
}

func (d *IoTDouble) DescribeMitigationActionWithContext(i0 context.Context, i1 *iot.DescribeMitigationActionInput, i2 ...request.Option) (r0 *iot.DescribeMitigationActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMitigationActionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DescribeMitigationActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDescribeMitigationActionWithContext(ctx context.Context, in *iot.DescribeMitigationActionInput, _ ...request.Option) (*iot.DescribeMitigationActionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeMitigationAction cancelled", ctx.Err())
	default:
		return d.DescribeMitigationAction(in)
	}
}

func (d *IoTDouble) DescribeProvisioningTemplate(i0 *iot.DescribeProvisioningTemplateInput) (r0 *iot.DescribeProvisioningTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProvisioningTemplate", i0)
	r0, _ = returns[0].(*iot.DescribeProvisioningTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DescribeProvisioningTemplateRequest(i0 *iot.DescribeProvisioningTemplateInput) (r0 *request.Request, r1 *iot.DescribeProvisioningTemplateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProvisioningTemplateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DescribeProvisioningTemplateOutput)
	return
}

func (d *IoTDouble) DescribeProvisioningTemplateVersion(i0 *iot.DescribeProvisioningTemplateVersionInput) (r0 *iot.DescribeProvisioningTemplateVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProvisioningTemplateVersion", i0)
	r0, _ = returns[0].(*iot.DescribeProvisioningTemplateVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DescribeProvisioningTemplateVersionRequest(i0 *iot.DescribeProvisioningTemplateVersionInput) (r0 *request.Request, r1 *iot.DescribeProvisioningTemplateVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProvisioningTemplateVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DescribeProvisioningTemplateVersionOutput)
	return
}

func (d *IoTDouble) DescribeProvisioningTemplateVersionWithContext(i0 context.Context, i1 *iot.DescribeProvisioningTemplateVersionInput, i2 ...request.Option) (r0 *iot.DescribeProvisioningTemplateVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProvisioningTemplateVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DescribeProvisioningTemplateVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDescribeProvisioningTemplateVersionWithContext(ctx context.Context, in *iot.DescribeProvisioningTemplateVersionInput, _ ...request.Option) (*iot.DescribeProvisioningTemplateVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeProvisioningTemplateVersion cancelled", ctx.Err())
	default:
		return d.DescribeProvisioningTemplateVersion(in)
	}
}

func (d *IoTDouble) DescribeProvisioningTemplateWithContext(i0 context.Context, i1 *iot.DescribeProvisioningTemplateInput, i2 ...request.Option) (r0 *iot.DescribeProvisioningTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProvisioningTemplateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DescribeProvisioningTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDescribeProvisioningTemplateWithContext(ctx context.Context, in *iot.DescribeProvisioningTemplateInput, _ ...request.Option) (*iot.DescribeProvisioningTemplateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeProvisioningTemplate cancelled", ctx.Err())
	default:
		return d.DescribeProvisioningTemplate(in)
	}
}

func (d *IoTDouble) DescribeRoleAlias(i0 *iot.DescribeRoleAliasInput) (r0 *iot.DescribeRoleAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRoleAlias", i0)
	r0, _ = returns[0].(*iot.DescribeRoleAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DescribeRoleAliasRequest(i0 *iot.DescribeRoleAliasInput) (r0 *request.Request, r1 *iot.DescribeRoleAliasOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRoleAliasRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DescribeRoleAliasOutput)
	return
}

func (d *IoTDouble) DescribeRoleAliasWithContext(i0 context.Context, i1 *iot.DescribeRoleAliasInput, i2 ...request.Option) (r0 *iot.DescribeRoleAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRoleAliasWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DescribeRoleAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDescribeRoleAliasWithContext(ctx context.Context, in *iot.DescribeRoleAliasInput, _ ...request.Option) (*iot.DescribeRoleAliasOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeRoleAlias cancelled", ctx.Err())
	default:
		return d.DescribeRoleAlias(in)
	}
}

func (d *IoTDouble) DescribeScheduledAudit(i0 *iot.DescribeScheduledAuditInput) (r0 *iot.DescribeScheduledAuditOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScheduledAudit", i0)
	r0, _ = returns[0].(*iot.DescribeScheduledAuditOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DescribeScheduledAuditRequest(i0 *iot.DescribeScheduledAuditInput) (r0 *request.Request, r1 *iot.DescribeScheduledAuditOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScheduledAuditRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DescribeScheduledAuditOutput)
	return
}

func (d *IoTDouble) DescribeScheduledAuditWithContext(i0 context.Context, i1 *iot.DescribeScheduledAuditInput, i2 ...request.Option) (r0 *iot.DescribeScheduledAuditOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScheduledAuditWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DescribeScheduledAuditOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDescribeScheduledAuditWithContext(ctx context.Context, in *iot.DescribeScheduledAuditInput, _ ...request.Option) (*iot.DescribeScheduledAuditOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeScheduledAudit cancelled", ctx.Err())
	default:
		return d.DescribeScheduledAudit(in)
	}
}

func (d *IoTDouble) DescribeSecurityProfile(i0 *iot.DescribeSecurityProfileInput) (r0 *iot.DescribeSecurityProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSecurityProfile", i0)
	r0, _ = returns[0].(*iot.DescribeSecurityProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DescribeSecurityProfileRequest(i0 *iot.DescribeSecurityProfileInput) (r0 *request.Request, r1 *iot.DescribeSecurityProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSecurityProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DescribeSecurityProfileOutput)
	return
}

func (d *IoTDouble) DescribeSecurityProfileWithContext(i0 context.Context, i1 *iot.DescribeSecurityProfileInput, i2 ...request.Option) (r0 *iot.DescribeSecurityProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSecurityProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DescribeSecurityProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDescribeSecurityProfileWithContext(ctx context.Context, in *iot.DescribeSecurityProfileInput, _ ...request.Option) (*iot.DescribeSecurityProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSecurityProfile cancelled", ctx.Err())
	default:
		return d.DescribeSecurityProfile(in)
	}
}

func (d *IoTDouble) DescribeStream(i0 *iot.DescribeStreamInput) (r0 *iot.DescribeStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStream", i0)
	r0, _ = returns[0].(*iot.DescribeStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DescribeStreamRequest(i0 *iot.DescribeStreamInput) (r0 *request.Request, r1 *iot.DescribeStreamOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStreamRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DescribeStreamOutput)
	return
}

func (d *IoTDouble) DescribeStreamWithContext(i0 context.Context, i1 *iot.DescribeStreamInput, i2 ...request.Option) (r0 *iot.DescribeStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStreamWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DescribeStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDescribeStreamWithContext(ctx context.Context, in *iot.DescribeStreamInput, _ ...request.Option) (*iot.DescribeStreamOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeStream cancelled", ctx.Err())
	default:
		return d.DescribeStream(in)
	}
}

func (d *IoTDouble) DescribeThing(i0 *iot.DescribeThingInput) (r0 *iot.DescribeThingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeThing", i0)
	r0, _ = returns[0].(*iot.DescribeThingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DescribeThingGroup(i0 *iot.DescribeThingGroupInput) (r0 *iot.DescribeThingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeThingGroup", i0)
	r0, _ = returns[0].(*iot.DescribeThingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DescribeThingGroupRequest(i0 *iot.DescribeThingGroupInput) (r0 *request.Request, r1 *iot.DescribeThingGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeThingGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DescribeThingGroupOutput)
	return
}

func (d *IoTDouble) DescribeThingGroupWithContext(i0 context.Context, i1 *iot.DescribeThingGroupInput, i2 ...request.Option) (r0 *iot.DescribeThingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeThingGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DescribeThingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDescribeThingGroupWithContext(ctx context.Context, in *iot.DescribeThingGroupInput, _ ...request.Option) (*iot.DescribeThingGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeThingGroup cancelled", ctx.Err())
	default:
		return d.DescribeThingGroup(in)
	}
}

func (d *IoTDouble) DescribeThingRegistrationTask(i0 *iot.DescribeThingRegistrationTaskInput) (r0 *iot.DescribeThingRegistrationTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeThingRegistrationTask", i0)
	r0, _ = returns[0].(*iot.DescribeThingRegistrationTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DescribeThingRegistrationTaskRequest(i0 *iot.DescribeThingRegistrationTaskInput) (r0 *request.Request, r1 *iot.DescribeThingRegistrationTaskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeThingRegistrationTaskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DescribeThingRegistrationTaskOutput)
	return
}

func (d *IoTDouble) DescribeThingRegistrationTaskWithContext(i0 context.Context, i1 *iot.DescribeThingRegistrationTaskInput, i2 ...request.Option) (r0 *iot.DescribeThingRegistrationTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeThingRegistrationTaskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DescribeThingRegistrationTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDescribeThingRegistrationTaskWithContext(ctx context.Context, in *iot.DescribeThingRegistrationTaskInput, _ ...request.Option) (*iot.DescribeThingRegistrationTaskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeThingRegistrationTask cancelled", ctx.Err())
	default:
		return d.DescribeThingRegistrationTask(in)
	}
}

func (d *IoTDouble) DescribeThingRequest(i0 *iot.DescribeThingInput) (r0 *request.Request, r1 *iot.DescribeThingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeThingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DescribeThingOutput)
	return
}

func (d *IoTDouble) DescribeThingType(i0 *iot.DescribeThingTypeInput) (r0 *iot.DescribeThingTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeThingType", i0)
	r0, _ = returns[0].(*iot.DescribeThingTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DescribeThingTypeRequest(i0 *iot.DescribeThingTypeInput) (r0 *request.Request, r1 *iot.DescribeThingTypeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeThingTypeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DescribeThingTypeOutput)
	return
}

func (d *IoTDouble) DescribeThingTypeWithContext(i0 context.Context, i1 *iot.DescribeThingTypeInput, i2 ...request.Option) (r0 *iot.DescribeThingTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeThingTypeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DescribeThingTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDescribeThingTypeWithContext(ctx context.Context, in *iot.DescribeThingTypeInput, _ ...request.Option) (*iot.DescribeThingTypeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeThingType cancelled", ctx.Err())
	default:
		return d.DescribeThingType(in)
	}
}

func (d *IoTDouble) DescribeThingWithContext(i0 context.Context, i1 *iot.DescribeThingInput, i2 ...request.Option) (r0 *iot.DescribeThingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeThingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DescribeThingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDescribeThingWithContext(ctx context.Context, in *iot.DescribeThingInput, _ ...request.Option) (*iot.DescribeThingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeThing cancelled", ctx.Err())
	default:
		return d.DescribeThing(in)
	}
}

func (d *IoTDouble) DetachPolicy(i0 *iot.DetachPolicyInput) (r0 *iot.DetachPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachPolicy", i0)
	r0, _ = returns[0].(*iot.DetachPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DetachPolicyRequest(i0 *iot.DetachPolicyInput) (r0 *request.Request, r1 *iot.DetachPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DetachPolicyOutput)
	return
}

func (d *IoTDouble) DetachPolicyWithContext(i0 context.Context, i1 *iot.DetachPolicyInput, i2 ...request.Option) (r0 *iot.DetachPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DetachPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDetachPolicyWithContext(ctx context.Context, in *iot.DetachPolicyInput, _ ...request.Option) (*iot.DetachPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DetachPolicy cancelled", ctx.Err())
	default:
		return d.DetachPolicy(in)
	}
}

func (d *IoTDouble) DetachPrincipalPolicy(i0 *iot.DetachPrincipalPolicyInput) (r0 *iot.DetachPrincipalPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachPrincipalPolicy", i0)
	r0, _ = returns[0].(*iot.DetachPrincipalPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DetachPrincipalPolicyRequest(i0 *iot.DetachPrincipalPolicyInput) (r0 *request.Request, r1 *iot.DetachPrincipalPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachPrincipalPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DetachPrincipalPolicyOutput)
	return
}

func (d *IoTDouble) DetachPrincipalPolicyWithContext(i0 context.Context, i1 *iot.DetachPrincipalPolicyInput, i2 ...request.Option) (r0 *iot.DetachPrincipalPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachPrincipalPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DetachPrincipalPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDetachPrincipalPolicyWithContext(ctx context.Context, in *iot.DetachPrincipalPolicyInput, _ ...request.Option) (*iot.DetachPrincipalPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DetachPrincipalPolicy cancelled", ctx.Err())
	default:
		return d.DetachPrincipalPolicy(in)
	}
}

func (d *IoTDouble) DetachSecurityProfile(i0 *iot.DetachSecurityProfileInput) (r0 *iot.DetachSecurityProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachSecurityProfile", i0)
	r0, _ = returns[0].(*iot.DetachSecurityProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DetachSecurityProfileRequest(i0 *iot.DetachSecurityProfileInput) (r0 *request.Request, r1 *iot.DetachSecurityProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachSecurityProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DetachSecurityProfileOutput)
	return
}

func (d *IoTDouble) DetachSecurityProfileWithContext(i0 context.Context, i1 *iot.DetachSecurityProfileInput, i2 ...request.Option) (r0 *iot.DetachSecurityProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachSecurityProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DetachSecurityProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDetachSecurityProfileWithContext(ctx context.Context, in *iot.DetachSecurityProfileInput, _ ...request.Option) (*iot.DetachSecurityProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DetachSecurityProfile cancelled", ctx.Err())
	default:
		return d.DetachSecurityProfile(in)
	}
}

func (d *IoTDouble) DetachThingPrincipal(i0 *iot.DetachThingPrincipalInput) (r0 *iot.DetachThingPrincipalOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachThingPrincipal", i0)
	r0, _ = returns[0].(*iot.DetachThingPrincipalOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DetachThingPrincipalRequest(i0 *iot.DetachThingPrincipalInput) (r0 *request.Request, r1 *iot.DetachThingPrincipalOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachThingPrincipalRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DetachThingPrincipalOutput)
	return
}

func (d *IoTDouble) DetachThingPrincipalWithContext(i0 context.Context, i1 *iot.DetachThingPrincipalInput, i2 ...request.Option) (r0 *iot.DetachThingPrincipalOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachThingPrincipalWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DetachThingPrincipalOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDetachThingPrincipalWithContext(ctx context.Context, in *iot.DetachThingPrincipalInput, _ ...request.Option) (*iot.DetachThingPrincipalOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DetachThingPrincipal cancelled", ctx.Err())
	default:
		return d.DetachThingPrincipal(in)
	}
}

func (d *IoTDouble) DisableTopicRule(i0 *iot.DisableTopicRuleInput) (r0 *iot.DisableTopicRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableTopicRule", i0)
	r0, _ = returns[0].(*iot.DisableTopicRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) DisableTopicRuleRequest(i0 *iot.DisableTopicRuleInput) (r0 *request.Request, r1 *iot.DisableTopicRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableTopicRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.DisableTopicRuleOutput)
	return
}

func (d *IoTDouble) DisableTopicRuleWithContext(i0 context.Context, i1 *iot.DisableTopicRuleInput, i2 ...request.Option) (r0 *iot.DisableTopicRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableTopicRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.DisableTopicRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeDisableTopicRuleWithContext(ctx context.Context, in *iot.DisableTopicRuleInput, _ ...request.Option) (*iot.DisableTopicRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisableTopicRule cancelled", ctx.Err())
	default:
		return d.DisableTopicRule(in)
	}
}

func (d *IoTDouble) EnableTopicRule(i0 *iot.EnableTopicRuleInput) (r0 *iot.EnableTopicRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableTopicRule", i0)
	r0, _ = returns[0].(*iot.EnableTopicRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) EnableTopicRuleRequest(i0 *iot.EnableTopicRuleInput) (r0 *request.Request, r1 *iot.EnableTopicRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableTopicRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.EnableTopicRuleOutput)
	return
}

func (d *IoTDouble) EnableTopicRuleWithContext(i0 context.Context, i1 *iot.EnableTopicRuleInput, i2 ...request.Option) (r0 *iot.EnableTopicRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableTopicRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.EnableTopicRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeEnableTopicRuleWithContext(ctx context.Context, in *iot.EnableTopicRuleInput, _ ...request.Option) (*iot.EnableTopicRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "EnableTopicRule cancelled", ctx.Err())
	default:
		return d.EnableTopicRule(in)
	}
}

func (d *IoTDouble) GetCardinality(i0 *iot.GetCardinalityInput) (r0 *iot.GetCardinalityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCardinality", i0)
	r0, _ = returns[0].(*iot.GetCardinalityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) GetCardinalityRequest(i0 *iot.GetCardinalityInput) (r0 *request.Request, r1 *iot.GetCardinalityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCardinalityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.GetCardinalityOutput)
	return
}

func (d *IoTDouble) GetCardinalityWithContext(i0 context.Context, i1 *iot.GetCardinalityInput, i2 ...request.Option) (r0 *iot.GetCardinalityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCardinalityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.GetCardinalityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeGetCardinalityWithContext(ctx context.Context, in *iot.GetCardinalityInput, _ ...request.Option) (*iot.GetCardinalityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetCardinality cancelled", ctx.Err())
	default:
		return d.GetCardinality(in)
	}
}

func (d *IoTDouble) GetEffectivePolicies(i0 *iot.GetEffectivePoliciesInput) (r0 *iot.GetEffectivePoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetEffectivePolicies", i0)
	r0, _ = returns[0].(*iot.GetEffectivePoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) GetEffectivePoliciesRequest(i0 *iot.GetEffectivePoliciesInput) (r0 *request.Request, r1 *iot.GetEffectivePoliciesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetEffectivePoliciesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.GetEffectivePoliciesOutput)
	return
}

func (d *IoTDouble) GetEffectivePoliciesWithContext(i0 context.Context, i1 *iot.GetEffectivePoliciesInput, i2 ...request.Option) (r0 *iot.GetEffectivePoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetEffectivePoliciesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.GetEffectivePoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeGetEffectivePoliciesWithContext(ctx context.Context, in *iot.GetEffectivePoliciesInput, _ ...request.Option) (*iot.GetEffectivePoliciesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetEffectivePolicies cancelled", ctx.Err())
	default:
		return d.GetEffectivePolicies(in)
	}
}

func (d *IoTDouble) GetIndexingConfiguration(i0 *iot.GetIndexingConfigurationInput) (r0 *iot.GetIndexingConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIndexingConfiguration", i0)
	r0, _ = returns[0].(*iot.GetIndexingConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) GetIndexingConfigurationRequest(i0 *iot.GetIndexingConfigurationInput) (r0 *request.Request, r1 *iot.GetIndexingConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIndexingConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.GetIndexingConfigurationOutput)
	return
}

func (d *IoTDouble) GetIndexingConfigurationWithContext(i0 context.Context, i1 *iot.GetIndexingConfigurationInput, i2 ...request.Option) (r0 *iot.GetIndexingConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIndexingConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.GetIndexingConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeGetIndexingConfigurationWithContext(ctx context.Context, in *iot.GetIndexingConfigurationInput, _ ...request.Option) (*iot.GetIndexingConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetIndexingConfiguration cancelled", ctx.Err())
	default:
		return d.GetIndexingConfiguration(in)
	}
}

func (d *IoTDouble) GetJobDocument(i0 *iot.GetJobDocumentInput) (r0 *iot.GetJobDocumentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobDocument", i0)
	r0, _ = returns[0].(*iot.GetJobDocumentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) GetJobDocumentRequest(i0 *iot.GetJobDocumentInput) (r0 *request.Request, r1 *iot.GetJobDocumentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobDocumentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.GetJobDocumentOutput)
	return
}

func (d *IoTDouble) GetJobDocumentWithContext(i0 context.Context, i1 *iot.GetJobDocumentInput, i2 ...request.Option) (r0 *iot.GetJobDocumentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobDocumentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.GetJobDocumentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeGetJobDocumentWithContext(ctx context.Context, in *iot.GetJobDocumentInput, _ ...request.Option) (*iot.GetJobDocumentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetJobDocument cancelled", ctx.Err())
	default:
		return d.GetJobDocument(in)
	}
}

func (d *IoTDouble) GetLoggingOptions(i0 *iot.GetLoggingOptionsInput) (r0 *iot.GetLoggingOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLoggingOptions", i0)
	r0, _ = returns[0].(*iot.GetLoggingOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) GetLoggingOptionsRequest(i0 *iot.GetLoggingOptionsInput) (r0 *request.Request, r1 *iot.GetLoggingOptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLoggingOptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.GetLoggingOptionsOutput)
	return
}

func (d *IoTDouble) GetLoggingOptionsWithContext(i0 context.Context, i1 *iot.GetLoggingOptionsInput, i2 ...request.Option) (r0 *iot.GetLoggingOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLoggingOptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.GetLoggingOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeGetLoggingOptionsWithContext(ctx context.Context, in *iot.GetLoggingOptionsInput, _ ...request.Option) (*iot.GetLoggingOptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetLoggingOptions cancelled", ctx.Err())
	default:
		return d.GetLoggingOptions(in)
	}
}

func (d *IoTDouble) GetOTAUpdate(i0 *iot.GetOTAUpdateInput) (r0 *iot.GetOTAUpdateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOTAUpdate", i0)
	r0, _ = returns[0].(*iot.GetOTAUpdateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) GetOTAUpdateRequest(i0 *iot.GetOTAUpdateInput) (r0 *request.Request, r1 *iot.GetOTAUpdateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOTAUpdateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.GetOTAUpdateOutput)
	return
}

func (d *IoTDouble) GetOTAUpdateWithContext(i0 context.Context, i1 *iot.GetOTAUpdateInput, i2 ...request.Option) (r0 *iot.GetOTAUpdateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOTAUpdateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.GetOTAUpdateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeGetOTAUpdateWithContext(ctx context.Context, in *iot.GetOTAUpdateInput, _ ...request.Option) (*iot.GetOTAUpdateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetOTAUpdate cancelled", ctx.Err())
	default:
		return d.GetOTAUpdate(in)
	}
}

func (d *IoTDouble) GetPercentiles(i0 *iot.GetPercentilesInput) (r0 *iot.GetPercentilesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPercentiles", i0)
	r0, _ = returns[0].(*iot.GetPercentilesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) GetPercentilesRequest(i0 *iot.GetPercentilesInput) (r0 *request.Request, r1 *iot.GetPercentilesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPercentilesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.GetPercentilesOutput)
	return
}

func (d *IoTDouble) GetPercentilesWithContext(i0 context.Context, i1 *iot.GetPercentilesInput, i2 ...request.Option) (r0 *iot.GetPercentilesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPercentilesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.GetPercentilesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeGetPercentilesWithContext(ctx context.Context, in *iot.GetPercentilesInput, _ ...request.Option) (*iot.GetPercentilesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetPercentiles cancelled", ctx.Err())
	default:
		return d.GetPercentiles(in)
	}
}

func (d *IoTDouble) GetPolicy(i0 *iot.GetPolicyInput) (r0 *iot.GetPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPolicy", i0)
	r0, _ = returns[0].(*iot.GetPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) GetPolicyRequest(i0 *iot.GetPolicyInput) (r0 *request.Request, r1 *iot.GetPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.GetPolicyOutput)
	return
}

func (d *IoTDouble) GetPolicyVersion(i0 *iot.GetPolicyVersionInput) (r0 *iot.GetPolicyVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPolicyVersion", i0)
	r0, _ = returns[0].(*iot.GetPolicyVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) GetPolicyVersionRequest(i0 *iot.GetPolicyVersionInput) (r0 *request.Request, r1 *iot.GetPolicyVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPolicyVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.GetPolicyVersionOutput)
	return
}

func (d *IoTDouble) GetPolicyVersionWithContext(i0 context.Context, i1 *iot.GetPolicyVersionInput, i2 ...request.Option) (r0 *iot.GetPolicyVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPolicyVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.GetPolicyVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeGetPolicyVersionWithContext(ctx context.Context, in *iot.GetPolicyVersionInput, _ ...request.Option) (*iot.GetPolicyVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetPolicyVersion cancelled", ctx.Err())
	default:
		return d.GetPolicyVersion(in)
	}
}

func (d *IoTDouble) GetPolicyWithContext(i0 context.Context, i1 *iot.GetPolicyInput, i2 ...request.Option) (r0 *iot.GetPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.GetPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeGetPolicyWithContext(ctx context.Context, in *iot.GetPolicyInput, _ ...request.Option) (*iot.GetPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetPolicy cancelled", ctx.Err())
	default:
		return d.GetPolicy(in)
	}
}

func (d *IoTDouble) GetRegistrationCode(i0 *iot.GetRegistrationCodeInput) (r0 *iot.GetRegistrationCodeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRegistrationCode", i0)
	r0, _ = returns[0].(*iot.GetRegistrationCodeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) GetRegistrationCodeRequest(i0 *iot.GetRegistrationCodeInput) (r0 *request.Request, r1 *iot.GetRegistrationCodeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRegistrationCodeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.GetRegistrationCodeOutput)
	return
}

func (d *IoTDouble) GetRegistrationCodeWithContext(i0 context.Context, i1 *iot.GetRegistrationCodeInput, i2 ...request.Option) (r0 *iot.GetRegistrationCodeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRegistrationCodeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.GetRegistrationCodeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeGetRegistrationCodeWithContext(ctx context.Context, in *iot.GetRegistrationCodeInput, _ ...request.Option) (*iot.GetRegistrationCodeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRegistrationCode cancelled", ctx.Err())
	default:
		return d.GetRegistrationCode(in)
	}
}

func (d *IoTDouble) GetStatistics(i0 *iot.GetStatisticsInput) (r0 *iot.GetStatisticsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetStatistics", i0)
	r0, _ = returns[0].(*iot.GetStatisticsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) GetStatisticsRequest(i0 *iot.GetStatisticsInput) (r0 *request.Request, r1 *iot.GetStatisticsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetStatisticsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.GetStatisticsOutput)
	return
}

func (d *IoTDouble) GetStatisticsWithContext(i0 context.Context, i1 *iot.GetStatisticsInput, i2 ...request.Option) (r0 *iot.GetStatisticsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetStatisticsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.GetStatisticsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeGetStatisticsWithContext(ctx context.Context, in *iot.GetStatisticsInput, _ ...request.Option) (*iot.GetStatisticsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetStatistics cancelled", ctx.Err())
	default:
		return d.GetStatistics(in)
	}
}

func (d *IoTDouble) GetTopicRule(i0 *iot.GetTopicRuleInput) (r0 *iot.GetTopicRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTopicRule", i0)
	r0, _ = returns[0].(*iot.GetTopicRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) GetTopicRuleDestination(i0 *iot.GetTopicRuleDestinationInput) (r0 *iot.GetTopicRuleDestinationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTopicRuleDestination", i0)
	r0, _ = returns[0].(*iot.GetTopicRuleDestinationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) GetTopicRuleDestinationRequest(i0 *iot.GetTopicRuleDestinationInput) (r0 *request.Request, r1 *iot.GetTopicRuleDestinationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTopicRuleDestinationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.GetTopicRuleDestinationOutput)
	return
}

func (d *IoTDouble) GetTopicRuleDestinationWithContext(i0 context.Context, i1 *iot.GetTopicRuleDestinationInput, i2 ...request.Option) (r0 *iot.GetTopicRuleDestinationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTopicRuleDestinationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.GetTopicRuleDestinationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeGetTopicRuleDestinationWithContext(ctx context.Context, in *iot.GetTopicRuleDestinationInput, _ ...request.Option) (*iot.GetTopicRuleDestinationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetTopicRuleDestination cancelled", ctx.Err())
	default:
		return d.GetTopicRuleDestination(in)
	}
}

func (d *IoTDouble) GetTopicRuleRequest(i0 *iot.GetTopicRuleInput) (r0 *request.Request, r1 *iot.GetTopicRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTopicRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.GetTopicRuleOutput)
	return
}

func (d *IoTDouble) GetTopicRuleWithContext(i0 context.Context, i1 *iot.GetTopicRuleInput, i2 ...request.Option) (r0 *iot.GetTopicRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTopicRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.GetTopicRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeGetTopicRuleWithContext(ctx context.Context, in *iot.GetTopicRuleInput, _ ...request.Option) (*iot.GetTopicRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetTopicRule cancelled", ctx.Err())
	default:
		return d.GetTopicRule(in)
	}
}

func (d *IoTDouble) GetV2LoggingOptions(i0 *iot.GetV2LoggingOptionsInput) (r0 *iot.GetV2LoggingOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetV2LoggingOptions", i0)
	r0, _ = returns[0].(*iot.GetV2LoggingOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) GetV2LoggingOptionsRequest(i0 *iot.GetV2LoggingOptionsInput) (r0 *request.Request, r1 *iot.GetV2LoggingOptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetV2LoggingOptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.GetV2LoggingOptionsOutput)
	return
}

func (d *IoTDouble) GetV2LoggingOptionsWithContext(i0 context.Context, i1 *iot.GetV2LoggingOptionsInput, i2 ...request.Option) (r0 *iot.GetV2LoggingOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetV2LoggingOptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.GetV2LoggingOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeGetV2LoggingOptionsWithContext(ctx context.Context, in *iot.GetV2LoggingOptionsInput, _ ...request.Option) (*iot.GetV2LoggingOptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetV2LoggingOptions cancelled", ctx.Err())
	default:
		return d.GetV2LoggingOptions(in)
	}
}

func (d *IoTDouble) ListActiveViolations(i0 *iot.ListActiveViolationsInput) (r0 *iot.ListActiveViolationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListActiveViolations", i0)
	r0, _ = returns[0].(*iot.ListActiveViolationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListActiveViolationsRequest(i0 *iot.ListActiveViolationsInput) (r0 *request.Request, r1 *iot.ListActiveViolationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListActiveViolationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListActiveViolationsOutput)
	return
}

func (d *IoTDouble) ListActiveViolationsWithContext(i0 context.Context, i1 *iot.ListActiveViolationsInput, i2 ...request.Option) (r0 *iot.ListActiveViolationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListActiveViolationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListActiveViolationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListActiveViolationsWithContext(ctx context.Context, in *iot.ListActiveViolationsInput, _ ...request.Option) (*iot.ListActiveViolationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListActiveViolations cancelled", ctx.Err())
	default:
		return d.ListActiveViolations(in)
	}
}

func (d *IoTDouble) ListAttachedPolicies(i0 *iot.ListAttachedPoliciesInput) (r0 *iot.ListAttachedPoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAttachedPolicies", i0)
	r0, _ = returns[0].(*iot.ListAttachedPoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListAttachedPoliciesRequest(i0 *iot.ListAttachedPoliciesInput) (r0 *request.Request, r1 *iot.ListAttachedPoliciesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAttachedPoliciesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListAttachedPoliciesOutput)
	return
}

func (d *IoTDouble) ListAttachedPoliciesWithContext(i0 context.Context, i1 *iot.ListAttachedPoliciesInput, i2 ...request.Option) (r0 *iot.ListAttachedPoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAttachedPoliciesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListAttachedPoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListAttachedPoliciesWithContext(ctx context.Context, in *iot.ListAttachedPoliciesInput, _ ...request.Option) (*iot.ListAttachedPoliciesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAttachedPolicies cancelled", ctx.Err())
	default:
		return d.ListAttachedPolicies(in)
	}
}

func (d *IoTDouble) ListAuditFindings(i0 *iot.ListAuditFindingsInput) (r0 *iot.ListAuditFindingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAuditFindings", i0)
	r0, _ = returns[0].(*iot.ListAuditFindingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListAuditFindingsRequest(i0 *iot.ListAuditFindingsInput) (r0 *request.Request, r1 *iot.ListAuditFindingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAuditFindingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListAuditFindingsOutput)
	return
}

func (d *IoTDouble) ListAuditFindingsWithContext(i0 context.Context, i1 *iot.ListAuditFindingsInput, i2 ...request.Option) (r0 *iot.ListAuditFindingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAuditFindingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListAuditFindingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListAuditFindingsWithContext(ctx context.Context, in *iot.ListAuditFindingsInput, _ ...request.Option) (*iot.ListAuditFindingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAuditFindings cancelled", ctx.Err())
	default:
		return d.ListAuditFindings(in)
	}
}

func (d *IoTDouble) ListAuditMitigationActionsExecutions(i0 *iot.ListAuditMitigationActionsExecutionsInput) (r0 *iot.ListAuditMitigationActionsExecutionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAuditMitigationActionsExecutions", i0)
	r0, _ = returns[0].(*iot.ListAuditMitigationActionsExecutionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListAuditMitigationActionsExecutionsRequest(i0 *iot.ListAuditMitigationActionsExecutionsInput) (r0 *request.Request, r1 *iot.ListAuditMitigationActionsExecutionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAuditMitigationActionsExecutionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListAuditMitigationActionsExecutionsOutput)
	return
}

func (d *IoTDouble) ListAuditMitigationActionsExecutionsWithContext(i0 context.Context, i1 *iot.ListAuditMitigationActionsExecutionsInput, i2 ...request.Option) (r0 *iot.ListAuditMitigationActionsExecutionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAuditMitigationActionsExecutionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListAuditMitigationActionsExecutionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListAuditMitigationActionsExecutionsWithContext(ctx context.Context, in *iot.ListAuditMitigationActionsExecutionsInput, _ ...request.Option) (*iot.ListAuditMitigationActionsExecutionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAuditMitigationActionsExecutions cancelled", ctx.Err())
	default:
		return d.ListAuditMitigationActionsExecutions(in)
	}
}

func (d *IoTDouble) ListAuditMitigationActionsTasks(i0 *iot.ListAuditMitigationActionsTasksInput) (r0 *iot.ListAuditMitigationActionsTasksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAuditMitigationActionsTasks", i0)
	r0, _ = returns[0].(*iot.ListAuditMitigationActionsTasksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListAuditMitigationActionsTasksRequest(i0 *iot.ListAuditMitigationActionsTasksInput) (r0 *request.Request, r1 *iot.ListAuditMitigationActionsTasksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAuditMitigationActionsTasksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListAuditMitigationActionsTasksOutput)
	return
}

func (d *IoTDouble) ListAuditMitigationActionsTasksWithContext(i0 context.Context, i1 *iot.ListAuditMitigationActionsTasksInput, i2 ...request.Option) (r0 *iot.ListAuditMitigationActionsTasksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAuditMitigationActionsTasksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListAuditMitigationActionsTasksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListAuditMitigationActionsTasksWithContext(ctx context.Context, in *iot.ListAuditMitigationActionsTasksInput, _ ...request.Option) (*iot.ListAuditMitigationActionsTasksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAuditMitigationActionsTasks cancelled", ctx.Err())
	default:
		return d.ListAuditMitigationActionsTasks(in)
	}
}

func (d *IoTDouble) ListAuditTasks(i0 *iot.ListAuditTasksInput) (r0 *iot.ListAuditTasksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAuditTasks", i0)
	r0, _ = returns[0].(*iot.ListAuditTasksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListAuditTasksRequest(i0 *iot.ListAuditTasksInput) (r0 *request.Request, r1 *iot.ListAuditTasksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAuditTasksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListAuditTasksOutput)
	return
}

func (d *IoTDouble) ListAuditTasksWithContext(i0 context.Context, i1 *iot.ListAuditTasksInput, i2 ...request.Option) (r0 *iot.ListAuditTasksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAuditTasksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListAuditTasksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListAuditTasksWithContext(ctx context.Context, in *iot.ListAuditTasksInput, _ ...request.Option) (*iot.ListAuditTasksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAuditTasks cancelled", ctx.Err())
	default:
		return d.ListAuditTasks(in)
	}
}

func (d *IoTDouble) ListAuthorizers(i0 *iot.ListAuthorizersInput) (r0 *iot.ListAuthorizersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAuthorizers", i0)
	r0, _ = returns[0].(*iot.ListAuthorizersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListAuthorizersRequest(i0 *iot.ListAuthorizersInput) (r0 *request.Request, r1 *iot.ListAuthorizersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAuthorizersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListAuthorizersOutput)
	return
}

func (d *IoTDouble) ListAuthorizersWithContext(i0 context.Context, i1 *iot.ListAuthorizersInput, i2 ...request.Option) (r0 *iot.ListAuthorizersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAuthorizersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListAuthorizersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListAuthorizersWithContext(ctx context.Context, in *iot.ListAuthorizersInput, _ ...request.Option) (*iot.ListAuthorizersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAuthorizers cancelled", ctx.Err())
	default:
		return d.ListAuthorizers(in)
	}
}

func (d *IoTDouble) ListBillingGroups(i0 *iot.ListBillingGroupsInput) (r0 *iot.ListBillingGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBillingGroups", i0)
	r0, _ = returns[0].(*iot.ListBillingGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListBillingGroupsRequest(i0 *iot.ListBillingGroupsInput) (r0 *request.Request, r1 *iot.ListBillingGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBillingGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListBillingGroupsOutput)
	return
}

func (d *IoTDouble) ListBillingGroupsWithContext(i0 context.Context, i1 *iot.ListBillingGroupsInput, i2 ...request.Option) (r0 *iot.ListBillingGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBillingGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListBillingGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListBillingGroupsWithContext(ctx context.Context, in *iot.ListBillingGroupsInput, _ ...request.Option) (*iot.ListBillingGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListBillingGroups cancelled", ctx.Err())
	default:
		return d.ListBillingGroups(in)
	}
}

func (d *IoTDouble) ListCACertificates(i0 *iot.ListCACertificatesInput) (r0 *iot.ListCACertificatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCACertificates", i0)
	r0, _ = returns[0].(*iot.ListCACertificatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListCACertificatesRequest(i0 *iot.ListCACertificatesInput) (r0 *request.Request, r1 *iot.ListCACertificatesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCACertificatesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListCACertificatesOutput)
	return
}

func (d *IoTDouble) ListCACertificatesWithContext(i0 context.Context, i1 *iot.ListCACertificatesInput, i2 ...request.Option) (r0 *iot.ListCACertificatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCACertificatesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListCACertificatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListCACertificatesWithContext(ctx context.Context, in *iot.ListCACertificatesInput, _ ...request.Option) (*iot.ListCACertificatesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListCACertificates cancelled", ctx.Err())
	default:
		return d.ListCACertificates(in)
	}
}

func (d *IoTDouble) ListCertificates(i0 *iot.ListCertificatesInput) (r0 *iot.ListCertificatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCertificates", i0)
	r0, _ = returns[0].(*iot.ListCertificatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListCertificatesByCA(i0 *iot.ListCertificatesByCAInput) (r0 *iot.ListCertificatesByCAOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCertificatesByCA", i0)
	r0, _ = returns[0].(*iot.ListCertificatesByCAOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListCertificatesByCARequest(i0 *iot.ListCertificatesByCAInput) (r0 *request.Request, r1 *iot.ListCertificatesByCAOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCertificatesByCARequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListCertificatesByCAOutput)
	return
}

func (d *IoTDouble) ListCertificatesByCAWithContext(i0 context.Context, i1 *iot.ListCertificatesByCAInput, i2 ...request.Option) (r0 *iot.ListCertificatesByCAOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCertificatesByCAWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListCertificatesByCAOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListCertificatesByCAWithContext(ctx context.Context, in *iot.ListCertificatesByCAInput, _ ...request.Option) (*iot.ListCertificatesByCAOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListCertificatesByCA cancelled", ctx.Err())
	default:
		return d.ListCertificatesByCA(in)
	}
}

func (d *IoTDouble) ListCertificatesRequest(i0 *iot.ListCertificatesInput) (r0 *request.Request, r1 *iot.ListCertificatesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCertificatesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListCertificatesOutput)
	return
}

func (d *IoTDouble) ListCertificatesWithContext(i0 context.Context, i1 *iot.ListCertificatesInput, i2 ...request.Option) (r0 *iot.ListCertificatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCertificatesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListCertificatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListCertificatesWithContext(ctx context.Context, in *iot.ListCertificatesInput, _ ...request.Option) (*iot.ListCertificatesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListCertificates cancelled", ctx.Err())
	default:
		return d.ListCertificates(in)
	}
}

func (d *IoTDouble) ListDomainConfigurations(i0 *iot.ListDomainConfigurationsInput) (r0 *iot.ListDomainConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDomainConfigurations", i0)
	r0, _ = returns[0].(*iot.ListDomainConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListDomainConfigurationsRequest(i0 *iot.ListDomainConfigurationsInput) (r0 *request.Request, r1 *iot.ListDomainConfigurationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDomainConfigurationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListDomainConfigurationsOutput)
	return
}

func (d *IoTDouble) ListDomainConfigurationsWithContext(i0 context.Context, i1 *iot.ListDomainConfigurationsInput, i2 ...request.Option) (r0 *iot.ListDomainConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDomainConfigurationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListDomainConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListDomainConfigurationsWithContext(ctx context.Context, in *iot.ListDomainConfigurationsInput, _ ...request.Option) (*iot.ListDomainConfigurationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDomainConfigurations cancelled", ctx.Err())
	default:
		return d.ListDomainConfigurations(in)
	}
}

func (d *IoTDouble) ListIndices(i0 *iot.ListIndicesInput) (r0 *iot.ListIndicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIndices", i0)
	r0, _ = returns[0].(*iot.ListIndicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListIndicesRequest(i0 *iot.ListIndicesInput) (r0 *request.Request, r1 *iot.ListIndicesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIndicesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListIndicesOutput)
	return
}

func (d *IoTDouble) ListIndicesWithContext(i0 context.Context, i1 *iot.ListIndicesInput, i2 ...request.Option) (r0 *iot.ListIndicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIndicesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListIndicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListIndicesWithContext(ctx context.Context, in *iot.ListIndicesInput, _ ...request.Option) (*iot.ListIndicesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListIndices cancelled", ctx.Err())
	default:
		return d.ListIndices(in)
	}
}

func (d *IoTDouble) ListJobExecutionsForJob(i0 *iot.ListJobExecutionsForJobInput) (r0 *iot.ListJobExecutionsForJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobExecutionsForJob", i0)
	r0, _ = returns[0].(*iot.ListJobExecutionsForJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListJobExecutionsForJobRequest(i0 *iot.ListJobExecutionsForJobInput) (r0 *request.Request, r1 *iot.ListJobExecutionsForJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobExecutionsForJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListJobExecutionsForJobOutput)
	return
}

func (d *IoTDouble) ListJobExecutionsForJobWithContext(i0 context.Context, i1 *iot.ListJobExecutionsForJobInput, i2 ...request.Option) (r0 *iot.ListJobExecutionsForJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobExecutionsForJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListJobExecutionsForJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListJobExecutionsForJobWithContext(ctx context.Context, in *iot.ListJobExecutionsForJobInput, _ ...request.Option) (*iot.ListJobExecutionsForJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListJobExecutionsForJob cancelled", ctx.Err())
	default:
		return d.ListJobExecutionsForJob(in)
	}
}

func (d *IoTDouble) ListJobExecutionsForThing(i0 *iot.ListJobExecutionsForThingInput) (r0 *iot.ListJobExecutionsForThingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobExecutionsForThing", i0)
	r0, _ = returns[0].(*iot.ListJobExecutionsForThingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListJobExecutionsForThingRequest(i0 *iot.ListJobExecutionsForThingInput) (r0 *request.Request, r1 *iot.ListJobExecutionsForThingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobExecutionsForThingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListJobExecutionsForThingOutput)
	return
}

func (d *IoTDouble) ListJobExecutionsForThingWithContext(i0 context.Context, i1 *iot.ListJobExecutionsForThingInput, i2 ...request.Option) (r0 *iot.ListJobExecutionsForThingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobExecutionsForThingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListJobExecutionsForThingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListJobExecutionsForThingWithContext(ctx context.Context, in *iot.ListJobExecutionsForThingInput, _ ...request.Option) (*iot.ListJobExecutionsForThingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListJobExecutionsForThing cancelled", ctx.Err())
	default:
		return d.ListJobExecutionsForThing(in)
	}
}

func (d *IoTDouble) ListJobs(i0 *iot.ListJobsInput) (r0 *iot.ListJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobs", i0)
	r0, _ = returns[0].(*iot.ListJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListJobsRequest(i0 *iot.ListJobsInput) (r0 *request.Request, r1 *iot.ListJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListJobsOutput)
	return
}

func (d *IoTDouble) ListJobsWithContext(i0 context.Context, i1 *iot.ListJobsInput, i2 ...request.Option) (r0 *iot.ListJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListJobsWithContext(ctx context.Context, in *iot.ListJobsInput, _ ...request.Option) (*iot.ListJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListJobs cancelled", ctx.Err())
	default:
		return d.ListJobs(in)
	}
}

func (d *IoTDouble) ListMitigationActions(i0 *iot.ListMitigationActionsInput) (r0 *iot.ListMitigationActionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMitigationActions", i0)
	r0, _ = returns[0].(*iot.ListMitigationActionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListMitigationActionsRequest(i0 *iot.ListMitigationActionsInput) (r0 *request.Request, r1 *iot.ListMitigationActionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMitigationActionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListMitigationActionsOutput)
	return
}

func (d *IoTDouble) ListMitigationActionsWithContext(i0 context.Context, i1 *iot.ListMitigationActionsInput, i2 ...request.Option) (r0 *iot.ListMitigationActionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMitigationActionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListMitigationActionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListMitigationActionsWithContext(ctx context.Context, in *iot.ListMitigationActionsInput, _ ...request.Option) (*iot.ListMitigationActionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListMitigationActions cancelled", ctx.Err())
	default:
		return d.ListMitigationActions(in)
	}
}

func (d *IoTDouble) ListOTAUpdates(i0 *iot.ListOTAUpdatesInput) (r0 *iot.ListOTAUpdatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOTAUpdates", i0)
	r0, _ = returns[0].(*iot.ListOTAUpdatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListOTAUpdatesRequest(i0 *iot.ListOTAUpdatesInput) (r0 *request.Request, r1 *iot.ListOTAUpdatesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOTAUpdatesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListOTAUpdatesOutput)
	return
}

func (d *IoTDouble) ListOTAUpdatesWithContext(i0 context.Context, i1 *iot.ListOTAUpdatesInput, i2 ...request.Option) (r0 *iot.ListOTAUpdatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOTAUpdatesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListOTAUpdatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListOTAUpdatesWithContext(ctx context.Context, in *iot.ListOTAUpdatesInput, _ ...request.Option) (*iot.ListOTAUpdatesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListOTAUpdates cancelled", ctx.Err())
	default:
		return d.ListOTAUpdates(in)
	}
}

func (d *IoTDouble) ListOutgoingCertificates(i0 *iot.ListOutgoingCertificatesInput) (r0 *iot.ListOutgoingCertificatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOutgoingCertificates", i0)
	r0, _ = returns[0].(*iot.ListOutgoingCertificatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListOutgoingCertificatesRequest(i0 *iot.ListOutgoingCertificatesInput) (r0 *request.Request, r1 *iot.ListOutgoingCertificatesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOutgoingCertificatesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListOutgoingCertificatesOutput)
	return
}

func (d *IoTDouble) ListOutgoingCertificatesWithContext(i0 context.Context, i1 *iot.ListOutgoingCertificatesInput, i2 ...request.Option) (r0 *iot.ListOutgoingCertificatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOutgoingCertificatesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListOutgoingCertificatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListOutgoingCertificatesWithContext(ctx context.Context, in *iot.ListOutgoingCertificatesInput, _ ...request.Option) (*iot.ListOutgoingCertificatesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListOutgoingCertificates cancelled", ctx.Err())
	default:
		return d.ListOutgoingCertificates(in)
	}
}

func (d *IoTDouble) ListPolicies(i0 *iot.ListPoliciesInput) (r0 *iot.ListPoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPolicies", i0)
	r0, _ = returns[0].(*iot.ListPoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListPoliciesRequest(i0 *iot.ListPoliciesInput) (r0 *request.Request, r1 *iot.ListPoliciesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPoliciesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListPoliciesOutput)
	return
}

func (d *IoTDouble) ListPoliciesWithContext(i0 context.Context, i1 *iot.ListPoliciesInput, i2 ...request.Option) (r0 *iot.ListPoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPoliciesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListPoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListPoliciesWithContext(ctx context.Context, in *iot.ListPoliciesInput, _ ...request.Option) (*iot.ListPoliciesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListPolicies cancelled", ctx.Err())
	default:
		return d.ListPolicies(in)
	}
}

func (d *IoTDouble) ListPolicyPrincipals(i0 *iot.ListPolicyPrincipalsInput) (r0 *iot.ListPolicyPrincipalsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPolicyPrincipals", i0)
	r0, _ = returns[0].(*iot.ListPolicyPrincipalsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListPolicyPrincipalsRequest(i0 *iot.ListPolicyPrincipalsInput) (r0 *request.Request, r1 *iot.ListPolicyPrincipalsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPolicyPrincipalsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListPolicyPrincipalsOutput)
	return
}

func (d *IoTDouble) ListPolicyPrincipalsWithContext(i0 context.Context, i1 *iot.ListPolicyPrincipalsInput, i2 ...request.Option) (r0 *iot.ListPolicyPrincipalsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPolicyPrincipalsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListPolicyPrincipalsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListPolicyPrincipalsWithContext(ctx context.Context, in *iot.ListPolicyPrincipalsInput, _ ...request.Option) (*iot.ListPolicyPrincipalsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListPolicyPrincipals cancelled", ctx.Err())
	default:
		return d.ListPolicyPrincipals(in)
	}
}

func (d *IoTDouble) ListPolicyVersions(i0 *iot.ListPolicyVersionsInput) (r0 *iot.ListPolicyVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPolicyVersions", i0)
	r0, _ = returns[0].(*iot.ListPolicyVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListPolicyVersionsRequest(i0 *iot.ListPolicyVersionsInput) (r0 *request.Request, r1 *iot.ListPolicyVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPolicyVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListPolicyVersionsOutput)
	return
}

func (d *IoTDouble) ListPolicyVersionsWithContext(i0 context.Context, i1 *iot.ListPolicyVersionsInput, i2 ...request.Option) (r0 *iot.ListPolicyVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPolicyVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListPolicyVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListPolicyVersionsWithContext(ctx context.Context, in *iot.ListPolicyVersionsInput, _ ...request.Option) (*iot.ListPolicyVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListPolicyVersions cancelled", ctx.Err())
	default:
		return d.ListPolicyVersions(in)
	}
}

func (d *IoTDouble) ListPrincipalPolicies(i0 *iot.ListPrincipalPoliciesInput) (r0 *iot.ListPrincipalPoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPrincipalPolicies", i0)
	r0, _ = returns[0].(*iot.ListPrincipalPoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListPrincipalPoliciesRequest(i0 *iot.ListPrincipalPoliciesInput) (r0 *request.Request, r1 *iot.ListPrincipalPoliciesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPrincipalPoliciesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListPrincipalPoliciesOutput)
	return
}

func (d *IoTDouble) ListPrincipalPoliciesWithContext(i0 context.Context, i1 *iot.ListPrincipalPoliciesInput, i2 ...request.Option) (r0 *iot.ListPrincipalPoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPrincipalPoliciesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListPrincipalPoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListPrincipalPoliciesWithContext(ctx context.Context, in *iot.ListPrincipalPoliciesInput, _ ...request.Option) (*iot.ListPrincipalPoliciesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListPrincipalPolicies cancelled", ctx.Err())
	default:
		return d.ListPrincipalPolicies(in)
	}
}

func (d *IoTDouble) ListPrincipalThings(i0 *iot.ListPrincipalThingsInput) (r0 *iot.ListPrincipalThingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPrincipalThings", i0)
	r0, _ = returns[0].(*iot.ListPrincipalThingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListPrincipalThingsRequest(i0 *iot.ListPrincipalThingsInput) (r0 *request.Request, r1 *iot.ListPrincipalThingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPrincipalThingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListPrincipalThingsOutput)
	return
}

func (d *IoTDouble) ListPrincipalThingsWithContext(i0 context.Context, i1 *iot.ListPrincipalThingsInput, i2 ...request.Option) (r0 *iot.ListPrincipalThingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPrincipalThingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListPrincipalThingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListPrincipalThingsWithContext(ctx context.Context, in *iot.ListPrincipalThingsInput, _ ...request.Option) (*iot.ListPrincipalThingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListPrincipalThings cancelled", ctx.Err())
	default:
		return d.ListPrincipalThings(in)
	}
}

func (d *IoTDouble) ListProvisioningTemplateVersions(i0 *iot.ListProvisioningTemplateVersionsInput) (r0 *iot.ListProvisioningTemplateVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProvisioningTemplateVersions", i0)
	r0, _ = returns[0].(*iot.ListProvisioningTemplateVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListProvisioningTemplateVersionsRequest(i0 *iot.ListProvisioningTemplateVersionsInput) (r0 *request.Request, r1 *iot.ListProvisioningTemplateVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProvisioningTemplateVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListProvisioningTemplateVersionsOutput)
	return
}

func (d *IoTDouble) ListProvisioningTemplateVersionsWithContext(i0 context.Context, i1 *iot.ListProvisioningTemplateVersionsInput, i2 ...request.Option) (r0 *iot.ListProvisioningTemplateVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProvisioningTemplateVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListProvisioningTemplateVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListProvisioningTemplateVersionsWithContext(ctx context.Context, in *iot.ListProvisioningTemplateVersionsInput, _ ...request.Option) (*iot.ListProvisioningTemplateVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListProvisioningTemplateVersions cancelled", ctx.Err())
	default:
		return d.ListProvisioningTemplateVersions(in)
	}
}

func (d *IoTDouble) ListProvisioningTemplates(i0 *iot.ListProvisioningTemplatesInput) (r0 *iot.ListProvisioningTemplatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProvisioningTemplates", i0)
	r0, _ = returns[0].(*iot.ListProvisioningTemplatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListProvisioningTemplatesRequest(i0 *iot.ListProvisioningTemplatesInput) (r0 *request.Request, r1 *iot.ListProvisioningTemplatesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProvisioningTemplatesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListProvisioningTemplatesOutput)
	return
}

func (d *IoTDouble) ListProvisioningTemplatesWithContext(i0 context.Context, i1 *iot.ListProvisioningTemplatesInput, i2 ...request.Option) (r0 *iot.ListProvisioningTemplatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProvisioningTemplatesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListProvisioningTemplatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListProvisioningTemplatesWithContext(ctx context.Context, in *iot.ListProvisioningTemplatesInput, _ ...request.Option) (*iot.ListProvisioningTemplatesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListProvisioningTemplates cancelled", ctx.Err())
	default:
		return d.ListProvisioningTemplates(in)
	}
}

func (d *IoTDouble) ListRoleAliases(i0 *iot.ListRoleAliasesInput) (r0 *iot.ListRoleAliasesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRoleAliases", i0)
	r0, _ = returns[0].(*iot.ListRoleAliasesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListRoleAliasesRequest(i0 *iot.ListRoleAliasesInput) (r0 *request.Request, r1 *iot.ListRoleAliasesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRoleAliasesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListRoleAliasesOutput)
	return
}

func (d *IoTDouble) ListRoleAliasesWithContext(i0 context.Context, i1 *iot.ListRoleAliasesInput, i2 ...request.Option) (r0 *iot.ListRoleAliasesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRoleAliasesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListRoleAliasesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListRoleAliasesWithContext(ctx context.Context, in *iot.ListRoleAliasesInput, _ ...request.Option) (*iot.ListRoleAliasesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListRoleAliases cancelled", ctx.Err())
	default:
		return d.ListRoleAliases(in)
	}
}

func (d *IoTDouble) ListScheduledAudits(i0 *iot.ListScheduledAuditsInput) (r0 *iot.ListScheduledAuditsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListScheduledAudits", i0)
	r0, _ = returns[0].(*iot.ListScheduledAuditsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListScheduledAuditsRequest(i0 *iot.ListScheduledAuditsInput) (r0 *request.Request, r1 *iot.ListScheduledAuditsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListScheduledAuditsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListScheduledAuditsOutput)
	return
}

func (d *IoTDouble) ListScheduledAuditsWithContext(i0 context.Context, i1 *iot.ListScheduledAuditsInput, i2 ...request.Option) (r0 *iot.ListScheduledAuditsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListScheduledAuditsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListScheduledAuditsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListScheduledAuditsWithContext(ctx context.Context, in *iot.ListScheduledAuditsInput, _ ...request.Option) (*iot.ListScheduledAuditsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListScheduledAudits cancelled", ctx.Err())
	default:
		return d.ListScheduledAudits(in)
	}
}

func (d *IoTDouble) ListSecurityProfiles(i0 *iot.ListSecurityProfilesInput) (r0 *iot.ListSecurityProfilesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSecurityProfiles", i0)
	r0, _ = returns[0].(*iot.ListSecurityProfilesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListSecurityProfilesForTarget(i0 *iot.ListSecurityProfilesForTargetInput) (r0 *iot.ListSecurityProfilesForTargetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSecurityProfilesForTarget", i0)
	r0, _ = returns[0].(*iot.ListSecurityProfilesForTargetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListSecurityProfilesForTargetRequest(i0 *iot.ListSecurityProfilesForTargetInput) (r0 *request.Request, r1 *iot.ListSecurityProfilesForTargetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSecurityProfilesForTargetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListSecurityProfilesForTargetOutput)
	return
}

func (d *IoTDouble) ListSecurityProfilesForTargetWithContext(i0 context.Context, i1 *iot.ListSecurityProfilesForTargetInput, i2 ...request.Option) (r0 *iot.ListSecurityProfilesForTargetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSecurityProfilesForTargetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListSecurityProfilesForTargetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListSecurityProfilesForTargetWithContext(ctx context.Context, in *iot.ListSecurityProfilesForTargetInput, _ ...request.Option) (*iot.ListSecurityProfilesForTargetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListSecurityProfilesForTarget cancelled", ctx.Err())
	default:
		return d.ListSecurityProfilesForTarget(in)
	}
}

func (d *IoTDouble) ListSecurityProfilesRequest(i0 *iot.ListSecurityProfilesInput) (r0 *request.Request, r1 *iot.ListSecurityProfilesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSecurityProfilesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListSecurityProfilesOutput)
	return
}

func (d *IoTDouble) ListSecurityProfilesWithContext(i0 context.Context, i1 *iot.ListSecurityProfilesInput, i2 ...request.Option) (r0 *iot.ListSecurityProfilesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSecurityProfilesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListSecurityProfilesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListSecurityProfilesWithContext(ctx context.Context, in *iot.ListSecurityProfilesInput, _ ...request.Option) (*iot.ListSecurityProfilesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListSecurityProfiles cancelled", ctx.Err())
	default:
		return d.ListSecurityProfiles(in)
	}
}

func (d *IoTDouble) ListStreams(i0 *iot.ListStreamsInput) (r0 *iot.ListStreamsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStreams", i0)
	r0, _ = returns[0].(*iot.ListStreamsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListStreamsRequest(i0 *iot.ListStreamsInput) (r0 *request.Request, r1 *iot.ListStreamsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStreamsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListStreamsOutput)
	return
}

func (d *IoTDouble) ListStreamsWithContext(i0 context.Context, i1 *iot.ListStreamsInput, i2 ...request.Option) (r0 *iot.ListStreamsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStreamsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListStreamsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListStreamsWithContext(ctx context.Context, in *iot.ListStreamsInput, _ ...request.Option) (*iot.ListStreamsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListStreams cancelled", ctx.Err())
	default:
		return d.ListStreams(in)
	}
}

func (d *IoTDouble) ListTagsForResource(i0 *iot.ListTagsForResourceInput) (r0 *iot.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*iot.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListTagsForResourceRequest(i0 *iot.ListTagsForResourceInput) (r0 *request.Request, r1 *iot.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListTagsForResourceOutput)
	return
}

func (d *IoTDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *iot.ListTagsForResourceInput, i2 ...request.Option) (r0 *iot.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *iot.ListTagsForResourceInput, _ ...request.Option) (*iot.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *IoTDouble) ListTargetsForPolicy(i0 *iot.ListTargetsForPolicyInput) (r0 *iot.ListTargetsForPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTargetsForPolicy", i0)
	r0, _ = returns[0].(*iot.ListTargetsForPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListTargetsForPolicyRequest(i0 *iot.ListTargetsForPolicyInput) (r0 *request.Request, r1 *iot.ListTargetsForPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTargetsForPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListTargetsForPolicyOutput)
	return
}

func (d *IoTDouble) ListTargetsForPolicyWithContext(i0 context.Context, i1 *iot.ListTargetsForPolicyInput, i2 ...request.Option) (r0 *iot.ListTargetsForPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTargetsForPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListTargetsForPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListTargetsForPolicyWithContext(ctx context.Context, in *iot.ListTargetsForPolicyInput, _ ...request.Option) (*iot.ListTargetsForPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTargetsForPolicy cancelled", ctx.Err())
	default:
		return d.ListTargetsForPolicy(in)
	}
}

func (d *IoTDouble) ListTargetsForSecurityProfile(i0 *iot.ListTargetsForSecurityProfileInput) (r0 *iot.ListTargetsForSecurityProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTargetsForSecurityProfile", i0)
	r0, _ = returns[0].(*iot.ListTargetsForSecurityProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListTargetsForSecurityProfileRequest(i0 *iot.ListTargetsForSecurityProfileInput) (r0 *request.Request, r1 *iot.ListTargetsForSecurityProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTargetsForSecurityProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListTargetsForSecurityProfileOutput)
	return
}

func (d *IoTDouble) ListTargetsForSecurityProfileWithContext(i0 context.Context, i1 *iot.ListTargetsForSecurityProfileInput, i2 ...request.Option) (r0 *iot.ListTargetsForSecurityProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTargetsForSecurityProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListTargetsForSecurityProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListTargetsForSecurityProfileWithContext(ctx context.Context, in *iot.ListTargetsForSecurityProfileInput, _ ...request.Option) (*iot.ListTargetsForSecurityProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTargetsForSecurityProfile cancelled", ctx.Err())
	default:
		return d.ListTargetsForSecurityProfile(in)
	}
}

func (d *IoTDouble) ListThingGroups(i0 *iot.ListThingGroupsInput) (r0 *iot.ListThingGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListThingGroups", i0)
	r0, _ = returns[0].(*iot.ListThingGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListThingGroupsForThing(i0 *iot.ListThingGroupsForThingInput) (r0 *iot.ListThingGroupsForThingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListThingGroupsForThing", i0)
	r0, _ = returns[0].(*iot.ListThingGroupsForThingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListThingGroupsForThingRequest(i0 *iot.ListThingGroupsForThingInput) (r0 *request.Request, r1 *iot.ListThingGroupsForThingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListThingGroupsForThingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListThingGroupsForThingOutput)
	return
}

func (d *IoTDouble) ListThingGroupsForThingWithContext(i0 context.Context, i1 *iot.ListThingGroupsForThingInput, i2 ...request.Option) (r0 *iot.ListThingGroupsForThingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListThingGroupsForThingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListThingGroupsForThingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListThingGroupsForThingWithContext(ctx context.Context, in *iot.ListThingGroupsForThingInput, _ ...request.Option) (*iot.ListThingGroupsForThingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListThingGroupsForThing cancelled", ctx.Err())
	default:
		return d.ListThingGroupsForThing(in)
	}
}

func (d *IoTDouble) ListThingGroupsRequest(i0 *iot.ListThingGroupsInput) (r0 *request.Request, r1 *iot.ListThingGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListThingGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListThingGroupsOutput)
	return
}

func (d *IoTDouble) ListThingGroupsWithContext(i0 context.Context, i1 *iot.ListThingGroupsInput, i2 ...request.Option) (r0 *iot.ListThingGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListThingGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListThingGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListThingGroupsWithContext(ctx context.Context, in *iot.ListThingGroupsInput, _ ...request.Option) (*iot.ListThingGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListThingGroups cancelled", ctx.Err())
	default:
		return d.ListThingGroups(in)
	}
}

func (d *IoTDouble) ListThingPrincipals(i0 *iot.ListThingPrincipalsInput) (r0 *iot.ListThingPrincipalsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListThingPrincipals", i0)
	r0, _ = returns[0].(*iot.ListThingPrincipalsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListThingPrincipalsRequest(i0 *iot.ListThingPrincipalsInput) (r0 *request.Request, r1 *iot.ListThingPrincipalsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListThingPrincipalsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListThingPrincipalsOutput)
	return
}

func (d *IoTDouble) ListThingPrincipalsWithContext(i0 context.Context, i1 *iot.ListThingPrincipalsInput, i2 ...request.Option) (r0 *iot.ListThingPrincipalsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListThingPrincipalsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListThingPrincipalsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListThingPrincipalsWithContext(ctx context.Context, in *iot.ListThingPrincipalsInput, _ ...request.Option) (*iot.ListThingPrincipalsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListThingPrincipals cancelled", ctx.Err())
	default:
		return d.ListThingPrincipals(in)
	}
}

func (d *IoTDouble) ListThingRegistrationTaskReports(i0 *iot.ListThingRegistrationTaskReportsInput) (r0 *iot.ListThingRegistrationTaskReportsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListThingRegistrationTaskReports", i0)
	r0, _ = returns[0].(*iot.ListThingRegistrationTaskReportsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListThingRegistrationTaskReportsRequest(i0 *iot.ListThingRegistrationTaskReportsInput) (r0 *request.Request, r1 *iot.ListThingRegistrationTaskReportsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListThingRegistrationTaskReportsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListThingRegistrationTaskReportsOutput)
	return
}

func (d *IoTDouble) ListThingRegistrationTaskReportsWithContext(i0 context.Context, i1 *iot.ListThingRegistrationTaskReportsInput, i2 ...request.Option) (r0 *iot.ListThingRegistrationTaskReportsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListThingRegistrationTaskReportsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListThingRegistrationTaskReportsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListThingRegistrationTaskReportsWithContext(ctx context.Context, in *iot.ListThingRegistrationTaskReportsInput, _ ...request.Option) (*iot.ListThingRegistrationTaskReportsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListThingRegistrationTaskReports cancelled", ctx.Err())
	default:
		return d.ListThingRegistrationTaskReports(in)
	}
}

func (d *IoTDouble) ListThingRegistrationTasks(i0 *iot.ListThingRegistrationTasksInput) (r0 *iot.ListThingRegistrationTasksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListThingRegistrationTasks", i0)
	r0, _ = returns[0].(*iot.ListThingRegistrationTasksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListThingRegistrationTasksRequest(i0 *iot.ListThingRegistrationTasksInput) (r0 *request.Request, r1 *iot.ListThingRegistrationTasksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListThingRegistrationTasksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListThingRegistrationTasksOutput)
	return
}

func (d *IoTDouble) ListThingRegistrationTasksWithContext(i0 context.Context, i1 *iot.ListThingRegistrationTasksInput, i2 ...request.Option) (r0 *iot.ListThingRegistrationTasksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListThingRegistrationTasksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListThingRegistrationTasksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListThingRegistrationTasksWithContext(ctx context.Context, in *iot.ListThingRegistrationTasksInput, _ ...request.Option) (*iot.ListThingRegistrationTasksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListThingRegistrationTasks cancelled", ctx.Err())
	default:
		return d.ListThingRegistrationTasks(in)
	}
}

func (d *IoTDouble) ListThingTypes(i0 *iot.ListThingTypesInput) (r0 *iot.ListThingTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListThingTypes", i0)
	r0, _ = returns[0].(*iot.ListThingTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListThingTypesRequest(i0 *iot.ListThingTypesInput) (r0 *request.Request, r1 *iot.ListThingTypesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListThingTypesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListThingTypesOutput)
	return
}

func (d *IoTDouble) ListThingTypesWithContext(i0 context.Context, i1 *iot.ListThingTypesInput, i2 ...request.Option) (r0 *iot.ListThingTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListThingTypesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListThingTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListThingTypesWithContext(ctx context.Context, in *iot.ListThingTypesInput, _ ...request.Option) (*iot.ListThingTypesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListThingTypes cancelled", ctx.Err())
	default:
		return d.ListThingTypes(in)
	}
}

func (d *IoTDouble) ListThings(i0 *iot.ListThingsInput) (r0 *iot.ListThingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListThings", i0)
	r0, _ = returns[0].(*iot.ListThingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListThingsInBillingGroup(i0 *iot.ListThingsInBillingGroupInput) (r0 *iot.ListThingsInBillingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListThingsInBillingGroup", i0)
	r0, _ = returns[0].(*iot.ListThingsInBillingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListThingsInBillingGroupRequest(i0 *iot.ListThingsInBillingGroupInput) (r0 *request.Request, r1 *iot.ListThingsInBillingGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListThingsInBillingGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListThingsInBillingGroupOutput)
	return
}

func (d *IoTDouble) ListThingsInBillingGroupWithContext(i0 context.Context, i1 *iot.ListThingsInBillingGroupInput, i2 ...request.Option) (r0 *iot.ListThingsInBillingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListThingsInBillingGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListThingsInBillingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListThingsInBillingGroupWithContext(ctx context.Context, in *iot.ListThingsInBillingGroupInput, _ ...request.Option) (*iot.ListThingsInBillingGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListThingsInBillingGroup cancelled", ctx.Err())
	default:
		return d.ListThingsInBillingGroup(in)
	}
}

func (d *IoTDouble) ListThingsInThingGroup(i0 *iot.ListThingsInThingGroupInput) (r0 *iot.ListThingsInThingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListThingsInThingGroup", i0)
	r0, _ = returns[0].(*iot.ListThingsInThingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListThingsInThingGroupRequest(i0 *iot.ListThingsInThingGroupInput) (r0 *request.Request, r1 *iot.ListThingsInThingGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListThingsInThingGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListThingsInThingGroupOutput)
	return
}

func (d *IoTDouble) ListThingsInThingGroupWithContext(i0 context.Context, i1 *iot.ListThingsInThingGroupInput, i2 ...request.Option) (r0 *iot.ListThingsInThingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListThingsInThingGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListThingsInThingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListThingsInThingGroupWithContext(ctx context.Context, in *iot.ListThingsInThingGroupInput, _ ...request.Option) (*iot.ListThingsInThingGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListThingsInThingGroup cancelled", ctx.Err())
	default:
		return d.ListThingsInThingGroup(in)
	}
}

func (d *IoTDouble) ListThingsRequest(i0 *iot.ListThingsInput) (r0 *request.Request, r1 *iot.ListThingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListThingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListThingsOutput)
	return
}

func (d *IoTDouble) ListThingsWithContext(i0 context.Context, i1 *iot.ListThingsInput, i2 ...request.Option) (r0 *iot.ListThingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListThingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListThingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListThingsWithContext(ctx context.Context, in *iot.ListThingsInput, _ ...request.Option) (*iot.ListThingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListThings cancelled", ctx.Err())
	default:
		return d.ListThings(in)
	}
}

func (d *IoTDouble) ListTopicRuleDestinations(i0 *iot.ListTopicRuleDestinationsInput) (r0 *iot.ListTopicRuleDestinationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTopicRuleDestinations", i0)
	r0, _ = returns[0].(*iot.ListTopicRuleDestinationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListTopicRuleDestinationsRequest(i0 *iot.ListTopicRuleDestinationsInput) (r0 *request.Request, r1 *iot.ListTopicRuleDestinationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTopicRuleDestinationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListTopicRuleDestinationsOutput)
	return
}

func (d *IoTDouble) ListTopicRuleDestinationsWithContext(i0 context.Context, i1 *iot.ListTopicRuleDestinationsInput, i2 ...request.Option) (r0 *iot.ListTopicRuleDestinationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTopicRuleDestinationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListTopicRuleDestinationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListTopicRuleDestinationsWithContext(ctx context.Context, in *iot.ListTopicRuleDestinationsInput, _ ...request.Option) (*iot.ListTopicRuleDestinationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTopicRuleDestinations cancelled", ctx.Err())
	default:
		return d.ListTopicRuleDestinations(in)
	}
}

func (d *IoTDouble) ListTopicRules(i0 *iot.ListTopicRulesInput) (r0 *iot.ListTopicRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTopicRules", i0)
	r0, _ = returns[0].(*iot.ListTopicRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListTopicRulesRequest(i0 *iot.ListTopicRulesInput) (r0 *request.Request, r1 *iot.ListTopicRulesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTopicRulesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListTopicRulesOutput)
	return
}

func (d *IoTDouble) ListTopicRulesWithContext(i0 context.Context, i1 *iot.ListTopicRulesInput, i2 ...request.Option) (r0 *iot.ListTopicRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTopicRulesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListTopicRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListTopicRulesWithContext(ctx context.Context, in *iot.ListTopicRulesInput, _ ...request.Option) (*iot.ListTopicRulesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTopicRules cancelled", ctx.Err())
	default:
		return d.ListTopicRules(in)
	}
}

func (d *IoTDouble) ListV2LoggingLevels(i0 *iot.ListV2LoggingLevelsInput) (r0 *iot.ListV2LoggingLevelsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListV2LoggingLevels", i0)
	r0, _ = returns[0].(*iot.ListV2LoggingLevelsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListV2LoggingLevelsRequest(i0 *iot.ListV2LoggingLevelsInput) (r0 *request.Request, r1 *iot.ListV2LoggingLevelsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListV2LoggingLevelsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListV2LoggingLevelsOutput)
	return
}

func (d *IoTDouble) ListV2LoggingLevelsWithContext(i0 context.Context, i1 *iot.ListV2LoggingLevelsInput, i2 ...request.Option) (r0 *iot.ListV2LoggingLevelsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListV2LoggingLevelsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListV2LoggingLevelsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListV2LoggingLevelsWithContext(ctx context.Context, in *iot.ListV2LoggingLevelsInput, _ ...request.Option) (*iot.ListV2LoggingLevelsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListV2LoggingLevels cancelled", ctx.Err())
	default:
		return d.ListV2LoggingLevels(in)
	}
}

func (d *IoTDouble) ListViolationEvents(i0 *iot.ListViolationEventsInput) (r0 *iot.ListViolationEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListViolationEvents", i0)
	r0, _ = returns[0].(*iot.ListViolationEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ListViolationEventsRequest(i0 *iot.ListViolationEventsInput) (r0 *request.Request, r1 *iot.ListViolationEventsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListViolationEventsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ListViolationEventsOutput)
	return
}

func (d *IoTDouble) ListViolationEventsWithContext(i0 context.Context, i1 *iot.ListViolationEventsInput, i2 ...request.Option) (r0 *iot.ListViolationEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListViolationEventsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ListViolationEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeListViolationEventsWithContext(ctx context.Context, in *iot.ListViolationEventsInput, _ ...request.Option) (*iot.ListViolationEventsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListViolationEvents cancelled", ctx.Err())
	default:
		return d.ListViolationEvents(in)
	}
}

func (d *IoTDouble) RegisterCACertificate(i0 *iot.RegisterCACertificateInput) (r0 *iot.RegisterCACertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterCACertificate", i0)
	r0, _ = returns[0].(*iot.RegisterCACertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) RegisterCACertificateRequest(i0 *iot.RegisterCACertificateInput) (r0 *request.Request, r1 *iot.RegisterCACertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterCACertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.RegisterCACertificateOutput)
	return
}

func (d *IoTDouble) RegisterCACertificateWithContext(i0 context.Context, i1 *iot.RegisterCACertificateInput, i2 ...request.Option) (r0 *iot.RegisterCACertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterCACertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.RegisterCACertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeRegisterCACertificateWithContext(ctx context.Context, in *iot.RegisterCACertificateInput, _ ...request.Option) (*iot.RegisterCACertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterCACertificate cancelled", ctx.Err())
	default:
		return d.RegisterCACertificate(in)
	}
}

func (d *IoTDouble) RegisterCertificate(i0 *iot.RegisterCertificateInput) (r0 *iot.RegisterCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterCertificate", i0)
	r0, _ = returns[0].(*iot.RegisterCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) RegisterCertificateRequest(i0 *iot.RegisterCertificateInput) (r0 *request.Request, r1 *iot.RegisterCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.RegisterCertificateOutput)
	return
}

func (d *IoTDouble) RegisterCertificateWithContext(i0 context.Context, i1 *iot.RegisterCertificateInput, i2 ...request.Option) (r0 *iot.RegisterCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.RegisterCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeRegisterCertificateWithContext(ctx context.Context, in *iot.RegisterCertificateInput, _ ...request.Option) (*iot.RegisterCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterCertificate cancelled", ctx.Err())
	default:
		return d.RegisterCertificate(in)
	}
}

func (d *IoTDouble) RegisterThing(i0 *iot.RegisterThingInput) (r0 *iot.RegisterThingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterThing", i0)
	r0, _ = returns[0].(*iot.RegisterThingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) RegisterThingRequest(i0 *iot.RegisterThingInput) (r0 *request.Request, r1 *iot.RegisterThingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterThingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.RegisterThingOutput)
	return
}

func (d *IoTDouble) RegisterThingWithContext(i0 context.Context, i1 *iot.RegisterThingInput, i2 ...request.Option) (r0 *iot.RegisterThingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterThingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.RegisterThingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeRegisterThingWithContext(ctx context.Context, in *iot.RegisterThingInput, _ ...request.Option) (*iot.RegisterThingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterThing cancelled", ctx.Err())
	default:
		return d.RegisterThing(in)
	}
}

func (d *IoTDouble) RejectCertificateTransfer(i0 *iot.RejectCertificateTransferInput) (r0 *iot.RejectCertificateTransferOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RejectCertificateTransfer", i0)
	r0, _ = returns[0].(*iot.RejectCertificateTransferOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) RejectCertificateTransferRequest(i0 *iot.RejectCertificateTransferInput) (r0 *request.Request, r1 *iot.RejectCertificateTransferOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RejectCertificateTransferRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.RejectCertificateTransferOutput)
	return
}

func (d *IoTDouble) RejectCertificateTransferWithContext(i0 context.Context, i1 *iot.RejectCertificateTransferInput, i2 ...request.Option) (r0 *iot.RejectCertificateTransferOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RejectCertificateTransferWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.RejectCertificateTransferOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeRejectCertificateTransferWithContext(ctx context.Context, in *iot.RejectCertificateTransferInput, _ ...request.Option) (*iot.RejectCertificateTransferOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RejectCertificateTransfer cancelled", ctx.Err())
	default:
		return d.RejectCertificateTransfer(in)
	}
}

func (d *IoTDouble) RemoveThingFromBillingGroup(i0 *iot.RemoveThingFromBillingGroupInput) (r0 *iot.RemoveThingFromBillingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveThingFromBillingGroup", i0)
	r0, _ = returns[0].(*iot.RemoveThingFromBillingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) RemoveThingFromBillingGroupRequest(i0 *iot.RemoveThingFromBillingGroupInput) (r0 *request.Request, r1 *iot.RemoveThingFromBillingGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveThingFromBillingGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.RemoveThingFromBillingGroupOutput)
	return
}

func (d *IoTDouble) RemoveThingFromBillingGroupWithContext(i0 context.Context, i1 *iot.RemoveThingFromBillingGroupInput, i2 ...request.Option) (r0 *iot.RemoveThingFromBillingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveThingFromBillingGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.RemoveThingFromBillingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeRemoveThingFromBillingGroupWithContext(ctx context.Context, in *iot.RemoveThingFromBillingGroupInput, _ ...request.Option) (*iot.RemoveThingFromBillingGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveThingFromBillingGroup cancelled", ctx.Err())
	default:
		return d.RemoveThingFromBillingGroup(in)
	}
}

func (d *IoTDouble) RemoveThingFromThingGroup(i0 *iot.RemoveThingFromThingGroupInput) (r0 *iot.RemoveThingFromThingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveThingFromThingGroup", i0)
	r0, _ = returns[0].(*iot.RemoveThingFromThingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) RemoveThingFromThingGroupRequest(i0 *iot.RemoveThingFromThingGroupInput) (r0 *request.Request, r1 *iot.RemoveThingFromThingGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveThingFromThingGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.RemoveThingFromThingGroupOutput)
	return
}

func (d *IoTDouble) RemoveThingFromThingGroupWithContext(i0 context.Context, i1 *iot.RemoveThingFromThingGroupInput, i2 ...request.Option) (r0 *iot.RemoveThingFromThingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveThingFromThingGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.RemoveThingFromThingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeRemoveThingFromThingGroupWithContext(ctx context.Context, in *iot.RemoveThingFromThingGroupInput, _ ...request.Option) (*iot.RemoveThingFromThingGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveThingFromThingGroup cancelled", ctx.Err())
	default:
		return d.RemoveThingFromThingGroup(in)
	}
}

func (d *IoTDouble) ReplaceTopicRule(i0 *iot.ReplaceTopicRuleInput) (r0 *iot.ReplaceTopicRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReplaceTopicRule", i0)
	r0, _ = returns[0].(*iot.ReplaceTopicRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ReplaceTopicRuleRequest(i0 *iot.ReplaceTopicRuleInput) (r0 *request.Request, r1 *iot.ReplaceTopicRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReplaceTopicRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ReplaceTopicRuleOutput)
	return
}

func (d *IoTDouble) ReplaceTopicRuleWithContext(i0 context.Context, i1 *iot.ReplaceTopicRuleInput, i2 ...request.Option) (r0 *iot.ReplaceTopicRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReplaceTopicRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ReplaceTopicRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeReplaceTopicRuleWithContext(ctx context.Context, in *iot.ReplaceTopicRuleInput, _ ...request.Option) (*iot.ReplaceTopicRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ReplaceTopicRule cancelled", ctx.Err())
	default:
		return d.ReplaceTopicRule(in)
	}
}

func (d *IoTDouble) SearchIndex(i0 *iot.SearchIndexInput) (r0 *iot.SearchIndexOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchIndex", i0)
	r0, _ = returns[0].(*iot.SearchIndexOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) SearchIndexRequest(i0 *iot.SearchIndexInput) (r0 *request.Request, r1 *iot.SearchIndexOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchIndexRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.SearchIndexOutput)
	return
}

func (d *IoTDouble) SearchIndexWithContext(i0 context.Context, i1 *iot.SearchIndexInput, i2 ...request.Option) (r0 *iot.SearchIndexOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchIndexWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.SearchIndexOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeSearchIndexWithContext(ctx context.Context, in *iot.SearchIndexInput, _ ...request.Option) (*iot.SearchIndexOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SearchIndex cancelled", ctx.Err())
	default:
		return d.SearchIndex(in)
	}
}

func (d *IoTDouble) SetDefaultAuthorizer(i0 *iot.SetDefaultAuthorizerInput) (r0 *iot.SetDefaultAuthorizerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetDefaultAuthorizer", i0)
	r0, _ = returns[0].(*iot.SetDefaultAuthorizerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) SetDefaultAuthorizerRequest(i0 *iot.SetDefaultAuthorizerInput) (r0 *request.Request, r1 *iot.SetDefaultAuthorizerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetDefaultAuthorizerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.SetDefaultAuthorizerOutput)
	return
}

func (d *IoTDouble) SetDefaultAuthorizerWithContext(i0 context.Context, i1 *iot.SetDefaultAuthorizerInput, i2 ...request.Option) (r0 *iot.SetDefaultAuthorizerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetDefaultAuthorizerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.SetDefaultAuthorizerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeSetDefaultAuthorizerWithContext(ctx context.Context, in *iot.SetDefaultAuthorizerInput, _ ...request.Option) (*iot.SetDefaultAuthorizerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetDefaultAuthorizer cancelled", ctx.Err())
	default:
		return d.SetDefaultAuthorizer(in)
	}
}

func (d *IoTDouble) SetDefaultPolicyVersion(i0 *iot.SetDefaultPolicyVersionInput) (r0 *iot.SetDefaultPolicyVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetDefaultPolicyVersion", i0)
	r0, _ = returns[0].(*iot.SetDefaultPolicyVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) SetDefaultPolicyVersionRequest(i0 *iot.SetDefaultPolicyVersionInput) (r0 *request.Request, r1 *iot.SetDefaultPolicyVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetDefaultPolicyVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.SetDefaultPolicyVersionOutput)
	return
}

func (d *IoTDouble) SetDefaultPolicyVersionWithContext(i0 context.Context, i1 *iot.SetDefaultPolicyVersionInput, i2 ...request.Option) (r0 *iot.SetDefaultPolicyVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetDefaultPolicyVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.SetDefaultPolicyVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeSetDefaultPolicyVersionWithContext(ctx context.Context, in *iot.SetDefaultPolicyVersionInput, _ ...request.Option) (*iot.SetDefaultPolicyVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetDefaultPolicyVersion cancelled", ctx.Err())
	default:
		return d.SetDefaultPolicyVersion(in)
	}
}

func (d *IoTDouble) SetLoggingOptions(i0 *iot.SetLoggingOptionsInput) (r0 *iot.SetLoggingOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetLoggingOptions", i0)
	r0, _ = returns[0].(*iot.SetLoggingOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) SetLoggingOptionsRequest(i0 *iot.SetLoggingOptionsInput) (r0 *request.Request, r1 *iot.SetLoggingOptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetLoggingOptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.SetLoggingOptionsOutput)
	return
}

func (d *IoTDouble) SetLoggingOptionsWithContext(i0 context.Context, i1 *iot.SetLoggingOptionsInput, i2 ...request.Option) (r0 *iot.SetLoggingOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetLoggingOptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.SetLoggingOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeSetLoggingOptionsWithContext(ctx context.Context, in *iot.SetLoggingOptionsInput, _ ...request.Option) (*iot.SetLoggingOptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetLoggingOptions cancelled", ctx.Err())
	default:
		return d.SetLoggingOptions(in)
	}
}

func (d *IoTDouble) SetV2LoggingLevel(i0 *iot.SetV2LoggingLevelInput) (r0 *iot.SetV2LoggingLevelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetV2LoggingLevel", i0)
	r0, _ = returns[0].(*iot.SetV2LoggingLevelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) SetV2LoggingLevelRequest(i0 *iot.SetV2LoggingLevelInput) (r0 *request.Request, r1 *iot.SetV2LoggingLevelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetV2LoggingLevelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.SetV2LoggingLevelOutput)
	return
}

func (d *IoTDouble) SetV2LoggingLevelWithContext(i0 context.Context, i1 *iot.SetV2LoggingLevelInput, i2 ...request.Option) (r0 *iot.SetV2LoggingLevelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetV2LoggingLevelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.SetV2LoggingLevelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeSetV2LoggingLevelWithContext(ctx context.Context, in *iot.SetV2LoggingLevelInput, _ ...request.Option) (*iot.SetV2LoggingLevelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetV2LoggingLevel cancelled", ctx.Err())
	default:
		return d.SetV2LoggingLevel(in)
	}
}

func (d *IoTDouble) SetV2LoggingOptions(i0 *iot.SetV2LoggingOptionsInput) (r0 *iot.SetV2LoggingOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetV2LoggingOptions", i0)
	r0, _ = returns[0].(*iot.SetV2LoggingOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) SetV2LoggingOptionsRequest(i0 *iot.SetV2LoggingOptionsInput) (r0 *request.Request, r1 *iot.SetV2LoggingOptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetV2LoggingOptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.SetV2LoggingOptionsOutput)
	return
}

func (d *IoTDouble) SetV2LoggingOptionsWithContext(i0 context.Context, i1 *iot.SetV2LoggingOptionsInput, i2 ...request.Option) (r0 *iot.SetV2LoggingOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetV2LoggingOptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.SetV2LoggingOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeSetV2LoggingOptionsWithContext(ctx context.Context, in *iot.SetV2LoggingOptionsInput, _ ...request.Option) (*iot.SetV2LoggingOptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetV2LoggingOptions cancelled", ctx.Err())
	default:
		return d.SetV2LoggingOptions(in)
	}
}

func (d *IoTDouble) StartAuditMitigationActionsTask(i0 *iot.StartAuditMitigationActionsTaskInput) (r0 *iot.StartAuditMitigationActionsTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartAuditMitigationActionsTask", i0)
	r0, _ = returns[0].(*iot.StartAuditMitigationActionsTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) StartAuditMitigationActionsTaskRequest(i0 *iot.StartAuditMitigationActionsTaskInput) (r0 *request.Request, r1 *iot.StartAuditMitigationActionsTaskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartAuditMitigationActionsTaskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.StartAuditMitigationActionsTaskOutput)
	return
}

func (d *IoTDouble) StartAuditMitigationActionsTaskWithContext(i0 context.Context, i1 *iot.StartAuditMitigationActionsTaskInput, i2 ...request.Option) (r0 *iot.StartAuditMitigationActionsTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartAuditMitigationActionsTaskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.StartAuditMitigationActionsTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeStartAuditMitigationActionsTaskWithContext(ctx context.Context, in *iot.StartAuditMitigationActionsTaskInput, _ ...request.Option) (*iot.StartAuditMitigationActionsTaskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartAuditMitigationActionsTask cancelled", ctx.Err())
	default:
		return d.StartAuditMitigationActionsTask(in)
	}
}

func (d *IoTDouble) StartOnDemandAuditTask(i0 *iot.StartOnDemandAuditTaskInput) (r0 *iot.StartOnDemandAuditTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartOnDemandAuditTask", i0)
	r0, _ = returns[0].(*iot.StartOnDemandAuditTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) StartOnDemandAuditTaskRequest(i0 *iot.StartOnDemandAuditTaskInput) (r0 *request.Request, r1 *iot.StartOnDemandAuditTaskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartOnDemandAuditTaskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.StartOnDemandAuditTaskOutput)
	return
}

func (d *IoTDouble) StartOnDemandAuditTaskWithContext(i0 context.Context, i1 *iot.StartOnDemandAuditTaskInput, i2 ...request.Option) (r0 *iot.StartOnDemandAuditTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartOnDemandAuditTaskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.StartOnDemandAuditTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeStartOnDemandAuditTaskWithContext(ctx context.Context, in *iot.StartOnDemandAuditTaskInput, _ ...request.Option) (*iot.StartOnDemandAuditTaskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartOnDemandAuditTask cancelled", ctx.Err())
	default:
		return d.StartOnDemandAuditTask(in)
	}
}

func (d *IoTDouble) StartThingRegistrationTask(i0 *iot.StartThingRegistrationTaskInput) (r0 *iot.StartThingRegistrationTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartThingRegistrationTask", i0)
	r0, _ = returns[0].(*iot.StartThingRegistrationTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) StartThingRegistrationTaskRequest(i0 *iot.StartThingRegistrationTaskInput) (r0 *request.Request, r1 *iot.StartThingRegistrationTaskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartThingRegistrationTaskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.StartThingRegistrationTaskOutput)
	return
}

func (d *IoTDouble) StartThingRegistrationTaskWithContext(i0 context.Context, i1 *iot.StartThingRegistrationTaskInput, i2 ...request.Option) (r0 *iot.StartThingRegistrationTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartThingRegistrationTaskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.StartThingRegistrationTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeStartThingRegistrationTaskWithContext(ctx context.Context, in *iot.StartThingRegistrationTaskInput, _ ...request.Option) (*iot.StartThingRegistrationTaskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartThingRegistrationTask cancelled", ctx.Err())
	default:
		return d.StartThingRegistrationTask(in)
	}
}

func (d *IoTDouble) StopThingRegistrationTask(i0 *iot.StopThingRegistrationTaskInput) (r0 *iot.StopThingRegistrationTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopThingRegistrationTask", i0)
	r0, _ = returns[0].(*iot.StopThingRegistrationTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) StopThingRegistrationTaskRequest(i0 *iot.StopThingRegistrationTaskInput) (r0 *request.Request, r1 *iot.StopThingRegistrationTaskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopThingRegistrationTaskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.StopThingRegistrationTaskOutput)
	return
}

func (d *IoTDouble) StopThingRegistrationTaskWithContext(i0 context.Context, i1 *iot.StopThingRegistrationTaskInput, i2 ...request.Option) (r0 *iot.StopThingRegistrationTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopThingRegistrationTaskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.StopThingRegistrationTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeStopThingRegistrationTaskWithContext(ctx context.Context, in *iot.StopThingRegistrationTaskInput, _ ...request.Option) (*iot.StopThingRegistrationTaskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopThingRegistrationTask cancelled", ctx.Err())
	default:
		return d.StopThingRegistrationTask(in)
	}
}

func (d *IoTDouble) TagResource(i0 *iot.TagResourceInput) (r0 *iot.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*iot.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) TagResourceRequest(i0 *iot.TagResourceInput) (r0 *request.Request, r1 *iot.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.TagResourceOutput)
	return
}

func (d *IoTDouble) TagResourceWithContext(i0 context.Context, i1 *iot.TagResourceInput, i2 ...request.Option) (r0 *iot.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeTagResourceWithContext(ctx context.Context, in *iot.TagResourceInput, _ ...request.Option) (*iot.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *IoTDouble) TestAuthorization(i0 *iot.TestAuthorizationInput) (r0 *iot.TestAuthorizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestAuthorization", i0)
	r0, _ = returns[0].(*iot.TestAuthorizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) TestAuthorizationRequest(i0 *iot.TestAuthorizationInput) (r0 *request.Request, r1 *iot.TestAuthorizationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestAuthorizationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.TestAuthorizationOutput)
	return
}

func (d *IoTDouble) TestAuthorizationWithContext(i0 context.Context, i1 *iot.TestAuthorizationInput, i2 ...request.Option) (r0 *iot.TestAuthorizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestAuthorizationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.TestAuthorizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeTestAuthorizationWithContext(ctx context.Context, in *iot.TestAuthorizationInput, _ ...request.Option) (*iot.TestAuthorizationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TestAuthorization cancelled", ctx.Err())
	default:
		return d.TestAuthorization(in)
	}
}

func (d *IoTDouble) TestInvokeAuthorizer(i0 *iot.TestInvokeAuthorizerInput) (r0 *iot.TestInvokeAuthorizerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestInvokeAuthorizer", i0)
	r0, _ = returns[0].(*iot.TestInvokeAuthorizerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) TestInvokeAuthorizerRequest(i0 *iot.TestInvokeAuthorizerInput) (r0 *request.Request, r1 *iot.TestInvokeAuthorizerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestInvokeAuthorizerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.TestInvokeAuthorizerOutput)
	return
}

func (d *IoTDouble) TestInvokeAuthorizerWithContext(i0 context.Context, i1 *iot.TestInvokeAuthorizerInput, i2 ...request.Option) (r0 *iot.TestInvokeAuthorizerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestInvokeAuthorizerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.TestInvokeAuthorizerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeTestInvokeAuthorizerWithContext(ctx context.Context, in *iot.TestInvokeAuthorizerInput, _ ...request.Option) (*iot.TestInvokeAuthorizerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TestInvokeAuthorizer cancelled", ctx.Err())
	default:
		return d.TestInvokeAuthorizer(in)
	}
}

func (d *IoTDouble) TransferCertificate(i0 *iot.TransferCertificateInput) (r0 *iot.TransferCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TransferCertificate", i0)
	r0, _ = returns[0].(*iot.TransferCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) TransferCertificateRequest(i0 *iot.TransferCertificateInput) (r0 *request.Request, r1 *iot.TransferCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TransferCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.TransferCertificateOutput)
	return
}

func (d *IoTDouble) TransferCertificateWithContext(i0 context.Context, i1 *iot.TransferCertificateInput, i2 ...request.Option) (r0 *iot.TransferCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TransferCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.TransferCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeTransferCertificateWithContext(ctx context.Context, in *iot.TransferCertificateInput, _ ...request.Option) (*iot.TransferCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TransferCertificate cancelled", ctx.Err())
	default:
		return d.TransferCertificate(in)
	}
}

func (d *IoTDouble) UntagResource(i0 *iot.UntagResourceInput) (r0 *iot.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*iot.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) UntagResourceRequest(i0 *iot.UntagResourceInput) (r0 *request.Request, r1 *iot.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.UntagResourceOutput)
	return
}

func (d *IoTDouble) UntagResourceWithContext(i0 context.Context, i1 *iot.UntagResourceInput, i2 ...request.Option) (r0 *iot.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeUntagResourceWithContext(ctx context.Context, in *iot.UntagResourceInput, _ ...request.Option) (*iot.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *IoTDouble) UpdateAccountAuditConfiguration(i0 *iot.UpdateAccountAuditConfigurationInput) (r0 *iot.UpdateAccountAuditConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAccountAuditConfiguration", i0)
	r0, _ = returns[0].(*iot.UpdateAccountAuditConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) UpdateAccountAuditConfigurationRequest(i0 *iot.UpdateAccountAuditConfigurationInput) (r0 *request.Request, r1 *iot.UpdateAccountAuditConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAccountAuditConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.UpdateAccountAuditConfigurationOutput)
	return
}

func (d *IoTDouble) UpdateAccountAuditConfigurationWithContext(i0 context.Context, i1 *iot.UpdateAccountAuditConfigurationInput, i2 ...request.Option) (r0 *iot.UpdateAccountAuditConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAccountAuditConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.UpdateAccountAuditConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeUpdateAccountAuditConfigurationWithContext(ctx context.Context, in *iot.UpdateAccountAuditConfigurationInput, _ ...request.Option) (*iot.UpdateAccountAuditConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateAccountAuditConfiguration cancelled", ctx.Err())
	default:
		return d.UpdateAccountAuditConfiguration(in)
	}
}

func (d *IoTDouble) UpdateAuthorizer(i0 *iot.UpdateAuthorizerInput) (r0 *iot.UpdateAuthorizerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAuthorizer", i0)
	r0, _ = returns[0].(*iot.UpdateAuthorizerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) UpdateAuthorizerRequest(i0 *iot.UpdateAuthorizerInput) (r0 *request.Request, r1 *iot.UpdateAuthorizerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAuthorizerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.UpdateAuthorizerOutput)
	return
}

func (d *IoTDouble) UpdateAuthorizerWithContext(i0 context.Context, i1 *iot.UpdateAuthorizerInput, i2 ...request.Option) (r0 *iot.UpdateAuthorizerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAuthorizerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.UpdateAuthorizerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeUpdateAuthorizerWithContext(ctx context.Context, in *iot.UpdateAuthorizerInput, _ ...request.Option) (*iot.UpdateAuthorizerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateAuthorizer cancelled", ctx.Err())
	default:
		return d.UpdateAuthorizer(in)
	}
}

func (d *IoTDouble) UpdateBillingGroup(i0 *iot.UpdateBillingGroupInput) (r0 *iot.UpdateBillingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateBillingGroup", i0)
	r0, _ = returns[0].(*iot.UpdateBillingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) UpdateBillingGroupRequest(i0 *iot.UpdateBillingGroupInput) (r0 *request.Request, r1 *iot.UpdateBillingGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateBillingGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.UpdateBillingGroupOutput)
	return
}

func (d *IoTDouble) UpdateBillingGroupWithContext(i0 context.Context, i1 *iot.UpdateBillingGroupInput, i2 ...request.Option) (r0 *iot.UpdateBillingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateBillingGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.UpdateBillingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeUpdateBillingGroupWithContext(ctx context.Context, in *iot.UpdateBillingGroupInput, _ ...request.Option) (*iot.UpdateBillingGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateBillingGroup cancelled", ctx.Err())
	default:
		return d.UpdateBillingGroup(in)
	}
}

func (d *IoTDouble) UpdateCACertificate(i0 *iot.UpdateCACertificateInput) (r0 *iot.UpdateCACertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCACertificate", i0)
	r0, _ = returns[0].(*iot.UpdateCACertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) UpdateCACertificateRequest(i0 *iot.UpdateCACertificateInput) (r0 *request.Request, r1 *iot.UpdateCACertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCACertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.UpdateCACertificateOutput)
	return
}

func (d *IoTDouble) UpdateCACertificateWithContext(i0 context.Context, i1 *iot.UpdateCACertificateInput, i2 ...request.Option) (r0 *iot.UpdateCACertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCACertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.UpdateCACertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeUpdateCACertificateWithContext(ctx context.Context, in *iot.UpdateCACertificateInput, _ ...request.Option) (*iot.UpdateCACertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateCACertificate cancelled", ctx.Err())
	default:
		return d.UpdateCACertificate(in)
	}
}

func (d *IoTDouble) UpdateCertificate(i0 *iot.UpdateCertificateInput) (r0 *iot.UpdateCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCertificate", i0)
	r0, _ = returns[0].(*iot.UpdateCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) UpdateCertificateRequest(i0 *iot.UpdateCertificateInput) (r0 *request.Request, r1 *iot.UpdateCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.UpdateCertificateOutput)
	return
}

func (d *IoTDouble) UpdateCertificateWithContext(i0 context.Context, i1 *iot.UpdateCertificateInput, i2 ...request.Option) (r0 *iot.UpdateCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.UpdateCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeUpdateCertificateWithContext(ctx context.Context, in *iot.UpdateCertificateInput, _ ...request.Option) (*iot.UpdateCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateCertificate cancelled", ctx.Err())
	default:
		return d.UpdateCertificate(in)
	}
}

func (d *IoTDouble) UpdateDomainConfiguration(i0 *iot.UpdateDomainConfigurationInput) (r0 *iot.UpdateDomainConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDomainConfiguration", i0)
	r0, _ = returns[0].(*iot.UpdateDomainConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) UpdateDomainConfigurationRequest(i0 *iot.UpdateDomainConfigurationInput) (r0 *request.Request, r1 *iot.UpdateDomainConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDomainConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.UpdateDomainConfigurationOutput)
	return
}

func (d *IoTDouble) UpdateDomainConfigurationWithContext(i0 context.Context, i1 *iot.UpdateDomainConfigurationInput, i2 ...request.Option) (r0 *iot.UpdateDomainConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDomainConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.UpdateDomainConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeUpdateDomainConfigurationWithContext(ctx context.Context, in *iot.UpdateDomainConfigurationInput, _ ...request.Option) (*iot.UpdateDomainConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDomainConfiguration cancelled", ctx.Err())
	default:
		return d.UpdateDomainConfiguration(in)
	}
}

func (d *IoTDouble) UpdateDynamicThingGroup(i0 *iot.UpdateDynamicThingGroupInput) (r0 *iot.UpdateDynamicThingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDynamicThingGroup", i0)
	r0, _ = returns[0].(*iot.UpdateDynamicThingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) UpdateDynamicThingGroupRequest(i0 *iot.UpdateDynamicThingGroupInput) (r0 *request.Request, r1 *iot.UpdateDynamicThingGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDynamicThingGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.UpdateDynamicThingGroupOutput)
	return
}

func (d *IoTDouble) UpdateDynamicThingGroupWithContext(i0 context.Context, i1 *iot.UpdateDynamicThingGroupInput, i2 ...request.Option) (r0 *iot.UpdateDynamicThingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDynamicThingGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.UpdateDynamicThingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeUpdateDynamicThingGroupWithContext(ctx context.Context, in *iot.UpdateDynamicThingGroupInput, _ ...request.Option) (*iot.UpdateDynamicThingGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDynamicThingGroup cancelled", ctx.Err())
	default:
		return d.UpdateDynamicThingGroup(in)
	}
}

func (d *IoTDouble) UpdateEventConfigurations(i0 *iot.UpdateEventConfigurationsInput) (r0 *iot.UpdateEventConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateEventConfigurations", i0)
	r0, _ = returns[0].(*iot.UpdateEventConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) UpdateEventConfigurationsRequest(i0 *iot.UpdateEventConfigurationsInput) (r0 *request.Request, r1 *iot.UpdateEventConfigurationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateEventConfigurationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.UpdateEventConfigurationsOutput)
	return
}

func (d *IoTDouble) UpdateEventConfigurationsWithContext(i0 context.Context, i1 *iot.UpdateEventConfigurationsInput, i2 ...request.Option) (r0 *iot.UpdateEventConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateEventConfigurationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.UpdateEventConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeUpdateEventConfigurationsWithContext(ctx context.Context, in *iot.UpdateEventConfigurationsInput, _ ...request.Option) (*iot.UpdateEventConfigurationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateEventConfigurations cancelled", ctx.Err())
	default:
		return d.UpdateEventConfigurations(in)
	}
}

func (d *IoTDouble) UpdateIndexingConfiguration(i0 *iot.UpdateIndexingConfigurationInput) (r0 *iot.UpdateIndexingConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateIndexingConfiguration", i0)
	r0, _ = returns[0].(*iot.UpdateIndexingConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) UpdateIndexingConfigurationRequest(i0 *iot.UpdateIndexingConfigurationInput) (r0 *request.Request, r1 *iot.UpdateIndexingConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateIndexingConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.UpdateIndexingConfigurationOutput)
	return
}

func (d *IoTDouble) UpdateIndexingConfigurationWithContext(i0 context.Context, i1 *iot.UpdateIndexingConfigurationInput, i2 ...request.Option) (r0 *iot.UpdateIndexingConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateIndexingConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.UpdateIndexingConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeUpdateIndexingConfigurationWithContext(ctx context.Context, in *iot.UpdateIndexingConfigurationInput, _ ...request.Option) (*iot.UpdateIndexingConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateIndexingConfiguration cancelled", ctx.Err())
	default:
		return d.UpdateIndexingConfiguration(in)
	}
}

func (d *IoTDouble) UpdateJob(i0 *iot.UpdateJobInput) (r0 *iot.UpdateJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateJob", i0)
	r0, _ = returns[0].(*iot.UpdateJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) UpdateJobRequest(i0 *iot.UpdateJobInput) (r0 *request.Request, r1 *iot.UpdateJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.UpdateJobOutput)
	return
}

func (d *IoTDouble) UpdateJobWithContext(i0 context.Context, i1 *iot.UpdateJobInput, i2 ...request.Option) (r0 *iot.UpdateJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.UpdateJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeUpdateJobWithContext(ctx context.Context, in *iot.UpdateJobInput, _ ...request.Option) (*iot.UpdateJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateJob cancelled", ctx.Err())
	default:
		return d.UpdateJob(in)
	}
}

func (d *IoTDouble) UpdateMitigationAction(i0 *iot.UpdateMitigationActionInput) (r0 *iot.UpdateMitigationActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMitigationAction", i0)
	r0, _ = returns[0].(*iot.UpdateMitigationActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) UpdateMitigationActionRequest(i0 *iot.UpdateMitigationActionInput) (r0 *request.Request, r1 *iot.UpdateMitigationActionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMitigationActionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.UpdateMitigationActionOutput)
	return
}

func (d *IoTDouble) UpdateMitigationActionWithContext(i0 context.Context, i1 *iot.UpdateMitigationActionInput, i2 ...request.Option) (r0 *iot.UpdateMitigationActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMitigationActionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.UpdateMitigationActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeUpdateMitigationActionWithContext(ctx context.Context, in *iot.UpdateMitigationActionInput, _ ...request.Option) (*iot.UpdateMitigationActionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateMitigationAction cancelled", ctx.Err())
	default:
		return d.UpdateMitigationAction(in)
	}
}

func (d *IoTDouble) UpdateProvisioningTemplate(i0 *iot.UpdateProvisioningTemplateInput) (r0 *iot.UpdateProvisioningTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateProvisioningTemplate", i0)
	r0, _ = returns[0].(*iot.UpdateProvisioningTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) UpdateProvisioningTemplateRequest(i0 *iot.UpdateProvisioningTemplateInput) (r0 *request.Request, r1 *iot.UpdateProvisioningTemplateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateProvisioningTemplateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.UpdateProvisioningTemplateOutput)
	return
}

func (d *IoTDouble) UpdateProvisioningTemplateWithContext(i0 context.Context, i1 *iot.UpdateProvisioningTemplateInput, i2 ...request.Option) (r0 *iot.UpdateProvisioningTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateProvisioningTemplateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.UpdateProvisioningTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeUpdateProvisioningTemplateWithContext(ctx context.Context, in *iot.UpdateProvisioningTemplateInput, _ ...request.Option) (*iot.UpdateProvisioningTemplateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateProvisioningTemplate cancelled", ctx.Err())
	default:
		return d.UpdateProvisioningTemplate(in)
	}
}

func (d *IoTDouble) UpdateRoleAlias(i0 *iot.UpdateRoleAliasInput) (r0 *iot.UpdateRoleAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRoleAlias", i0)
	r0, _ = returns[0].(*iot.UpdateRoleAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) UpdateRoleAliasRequest(i0 *iot.UpdateRoleAliasInput) (r0 *request.Request, r1 *iot.UpdateRoleAliasOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRoleAliasRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.UpdateRoleAliasOutput)
	return
}

func (d *IoTDouble) UpdateRoleAliasWithContext(i0 context.Context, i1 *iot.UpdateRoleAliasInput, i2 ...request.Option) (r0 *iot.UpdateRoleAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRoleAliasWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.UpdateRoleAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeUpdateRoleAliasWithContext(ctx context.Context, in *iot.UpdateRoleAliasInput, _ ...request.Option) (*iot.UpdateRoleAliasOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateRoleAlias cancelled", ctx.Err())
	default:
		return d.UpdateRoleAlias(in)
	}
}

func (d *IoTDouble) UpdateScheduledAudit(i0 *iot.UpdateScheduledAuditInput) (r0 *iot.UpdateScheduledAuditOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateScheduledAudit", i0)
	r0, _ = returns[0].(*iot.UpdateScheduledAuditOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) UpdateScheduledAuditRequest(i0 *iot.UpdateScheduledAuditInput) (r0 *request.Request, r1 *iot.UpdateScheduledAuditOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateScheduledAuditRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.UpdateScheduledAuditOutput)
	return
}

func (d *IoTDouble) UpdateScheduledAuditWithContext(i0 context.Context, i1 *iot.UpdateScheduledAuditInput, i2 ...request.Option) (r0 *iot.UpdateScheduledAuditOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateScheduledAuditWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.UpdateScheduledAuditOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeUpdateScheduledAuditWithContext(ctx context.Context, in *iot.UpdateScheduledAuditInput, _ ...request.Option) (*iot.UpdateScheduledAuditOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateScheduledAudit cancelled", ctx.Err())
	default:
		return d.UpdateScheduledAudit(in)
	}
}

func (d *IoTDouble) UpdateSecurityProfile(i0 *iot.UpdateSecurityProfileInput) (r0 *iot.UpdateSecurityProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSecurityProfile", i0)
	r0, _ = returns[0].(*iot.UpdateSecurityProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) UpdateSecurityProfileRequest(i0 *iot.UpdateSecurityProfileInput) (r0 *request.Request, r1 *iot.UpdateSecurityProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSecurityProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.UpdateSecurityProfileOutput)
	return
}

func (d *IoTDouble) UpdateSecurityProfileWithContext(i0 context.Context, i1 *iot.UpdateSecurityProfileInput, i2 ...request.Option) (r0 *iot.UpdateSecurityProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSecurityProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.UpdateSecurityProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeUpdateSecurityProfileWithContext(ctx context.Context, in *iot.UpdateSecurityProfileInput, _ ...request.Option) (*iot.UpdateSecurityProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateSecurityProfile cancelled", ctx.Err())
	default:
		return d.UpdateSecurityProfile(in)
	}
}

func (d *IoTDouble) UpdateStream(i0 *iot.UpdateStreamInput) (r0 *iot.UpdateStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateStream", i0)
	r0, _ = returns[0].(*iot.UpdateStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) UpdateStreamRequest(i0 *iot.UpdateStreamInput) (r0 *request.Request, r1 *iot.UpdateStreamOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateStreamRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.UpdateStreamOutput)
	return
}

func (d *IoTDouble) UpdateStreamWithContext(i0 context.Context, i1 *iot.UpdateStreamInput, i2 ...request.Option) (r0 *iot.UpdateStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateStreamWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.UpdateStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeUpdateStreamWithContext(ctx context.Context, in *iot.UpdateStreamInput, _ ...request.Option) (*iot.UpdateStreamOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateStream cancelled", ctx.Err())
	default:
		return d.UpdateStream(in)
	}
}

func (d *IoTDouble) UpdateThing(i0 *iot.UpdateThingInput) (r0 *iot.UpdateThingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateThing", i0)
	r0, _ = returns[0].(*iot.UpdateThingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) UpdateThingGroup(i0 *iot.UpdateThingGroupInput) (r0 *iot.UpdateThingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateThingGroup", i0)
	r0, _ = returns[0].(*iot.UpdateThingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) UpdateThingGroupRequest(i0 *iot.UpdateThingGroupInput) (r0 *request.Request, r1 *iot.UpdateThingGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateThingGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.UpdateThingGroupOutput)
	return
}

func (d *IoTDouble) UpdateThingGroupWithContext(i0 context.Context, i1 *iot.UpdateThingGroupInput, i2 ...request.Option) (r0 *iot.UpdateThingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateThingGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.UpdateThingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeUpdateThingGroupWithContext(ctx context.Context, in *iot.UpdateThingGroupInput, _ ...request.Option) (*iot.UpdateThingGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateThingGroup cancelled", ctx.Err())
	default:
		return d.UpdateThingGroup(in)
	}
}

func (d *IoTDouble) UpdateThingGroupsForThing(i0 *iot.UpdateThingGroupsForThingInput) (r0 *iot.UpdateThingGroupsForThingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateThingGroupsForThing", i0)
	r0, _ = returns[0].(*iot.UpdateThingGroupsForThingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) UpdateThingGroupsForThingRequest(i0 *iot.UpdateThingGroupsForThingInput) (r0 *request.Request, r1 *iot.UpdateThingGroupsForThingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateThingGroupsForThingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.UpdateThingGroupsForThingOutput)
	return
}

func (d *IoTDouble) UpdateThingGroupsForThingWithContext(i0 context.Context, i1 *iot.UpdateThingGroupsForThingInput, i2 ...request.Option) (r0 *iot.UpdateThingGroupsForThingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateThingGroupsForThingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.UpdateThingGroupsForThingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeUpdateThingGroupsForThingWithContext(ctx context.Context, in *iot.UpdateThingGroupsForThingInput, _ ...request.Option) (*iot.UpdateThingGroupsForThingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateThingGroupsForThing cancelled", ctx.Err())
	default:
		return d.UpdateThingGroupsForThing(in)
	}
}

func (d *IoTDouble) UpdateThingRequest(i0 *iot.UpdateThingInput) (r0 *request.Request, r1 *iot.UpdateThingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateThingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.UpdateThingOutput)
	return
}

func (d *IoTDouble) UpdateThingWithContext(i0 context.Context, i1 *iot.UpdateThingInput, i2 ...request.Option) (r0 *iot.UpdateThingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateThingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.UpdateThingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeUpdateThingWithContext(ctx context.Context, in *iot.UpdateThingInput, _ ...request.Option) (*iot.UpdateThingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateThing cancelled", ctx.Err())
	default:
		return d.UpdateThing(in)
	}
}

func (d *IoTDouble) UpdateTopicRuleDestination(i0 *iot.UpdateTopicRuleDestinationInput) (r0 *iot.UpdateTopicRuleDestinationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTopicRuleDestination", i0)
	r0, _ = returns[0].(*iot.UpdateTopicRuleDestinationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) UpdateTopicRuleDestinationRequest(i0 *iot.UpdateTopicRuleDestinationInput) (r0 *request.Request, r1 *iot.UpdateTopicRuleDestinationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTopicRuleDestinationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.UpdateTopicRuleDestinationOutput)
	return
}

func (d *IoTDouble) UpdateTopicRuleDestinationWithContext(i0 context.Context, i1 *iot.UpdateTopicRuleDestinationInput, i2 ...request.Option) (r0 *iot.UpdateTopicRuleDestinationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTopicRuleDestinationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.UpdateTopicRuleDestinationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeUpdateTopicRuleDestinationWithContext(ctx context.Context, in *iot.UpdateTopicRuleDestinationInput, _ ...request.Option) (*iot.UpdateTopicRuleDestinationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateTopicRuleDestination cancelled", ctx.Err())
	default:
		return d.UpdateTopicRuleDestination(in)
	}
}

func (d *IoTDouble) ValidateSecurityProfileBehaviors(i0 *iot.ValidateSecurityProfileBehaviorsInput) (r0 *iot.ValidateSecurityProfileBehaviorsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ValidateSecurityProfileBehaviors", i0)
	r0, _ = returns[0].(*iot.ValidateSecurityProfileBehaviorsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) ValidateSecurityProfileBehaviorsRequest(i0 *iot.ValidateSecurityProfileBehaviorsInput) (r0 *request.Request, r1 *iot.ValidateSecurityProfileBehaviorsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ValidateSecurityProfileBehaviorsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot.ValidateSecurityProfileBehaviorsOutput)
	return
}

func (d *IoTDouble) ValidateSecurityProfileBehaviorsWithContext(i0 context.Context, i1 *iot.ValidateSecurityProfileBehaviorsInput, i2 ...request.Option) (r0 *iot.ValidateSecurityProfileBehaviorsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ValidateSecurityProfileBehaviorsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot.ValidateSecurityProfileBehaviorsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTDouble) fakeValidateSecurityProfileBehaviorsWithContext(ctx context.Context, in *iot.ValidateSecurityProfileBehaviorsInput, _ ...request.Option) (*iot.ValidateSecurityProfileBehaviorsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ValidateSecurityProfileBehaviors cancelled", ctx.Err())
	default:
		return d.ValidateSecurityProfileBehaviors(in)
	}
}
