// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:14:11+11:00

// Package opsworksdouble provides a TestDouble implementation of opsworksiface.OpsWorksAPI
package opsworksdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/opsworks"
	"github.com/aws/aws-sdk-go/service/opsworks/opsworksiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// OpsWorksDouble is TestDouble for opsworksiface.OpsWorksAPI
type OpsWorksDouble struct {
	opsworksiface.OpsWorksAPI
	*awsdouble.AWSTestDouble
}

// Constructor for OpsWorksDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *OpsWorksDouble {
	result := &OpsWorksDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*opsworksiface.OpsWorksAPI)(nil), configurators...)
	return result
}

func (d *OpsWorksDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *OpsWorksDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AssignInstanceWithContext":
		return m.Fake(d.fakeAssignInstanceWithContext)

	case "AssignVolumeWithContext":
		return m.Fake(d.fakeAssignVolumeWithContext)

	case "AssociateElasticIpWithContext":
		return m.Fake(d.fakeAssociateElasticIpWithContext)

	case "AttachElasticLoadBalancerWithContext":
		return m.Fake(d.fakeAttachElasticLoadBalancerWithContext)

	case "CloneStackWithContext":
		return m.Fake(d.fakeCloneStackWithContext)

	case "CreateAppWithContext":
		return m.Fake(d.fakeCreateAppWithContext)

	case "CreateDeploymentWithContext":
		return m.Fake(d.fakeCreateDeploymentWithContext)

	case "CreateInstanceWithContext":
		return m.Fake(d.fakeCreateInstanceWithContext)

	case "CreateLayerWithContext":
		return m.Fake(d.fakeCreateLayerWithContext)

	case "CreateStackWithContext":
		return m.Fake(d.fakeCreateStackWithContext)

	case "CreateUserProfileWithContext":
		return m.Fake(d.fakeCreateUserProfileWithContext)

	case "DeleteAppWithContext":
		return m.Fake(d.fakeDeleteAppWithContext)

	case "DeleteInstanceWithContext":
		return m.Fake(d.fakeDeleteInstanceWithContext)

	case "DeleteLayerWithContext":
		return m.Fake(d.fakeDeleteLayerWithContext)

	case "DeleteStackWithContext":
		return m.Fake(d.fakeDeleteStackWithContext)

	case "DeleteUserProfileWithContext":
		return m.Fake(d.fakeDeleteUserProfileWithContext)

	case "DeregisterEcsClusterWithContext":
		return m.Fake(d.fakeDeregisterEcsClusterWithContext)

	case "DeregisterElasticIpWithContext":
		return m.Fake(d.fakeDeregisterElasticIpWithContext)

	case "DeregisterInstanceWithContext":
		return m.Fake(d.fakeDeregisterInstanceWithContext)

	case "DeregisterRdsDbInstanceWithContext":
		return m.Fake(d.fakeDeregisterRdsDbInstanceWithContext)

	case "DeregisterVolumeWithContext":
		return m.Fake(d.fakeDeregisterVolumeWithContext)

	case "DescribeAgentVersionsWithContext":
		return m.Fake(d.fakeDescribeAgentVersionsWithContext)

	case "DescribeAppsWithContext":
		return m.Fake(d.fakeDescribeAppsWithContext)

	case "DescribeCommandsWithContext":
		return m.Fake(d.fakeDescribeCommandsWithContext)

	case "DescribeDeploymentsWithContext":
		return m.Fake(d.fakeDescribeDeploymentsWithContext)

	case "DescribeEcsClustersPages":
		return m.Fake(d.fakeDescribeEcsClustersPages)

	case "DescribeEcsClustersPagesWithContext":
		return m.Fake(d.fakeDescribeEcsClustersPagesWithContext)

	case "DescribeEcsClustersWithContext":
		return m.Fake(d.fakeDescribeEcsClustersWithContext)

	case "DescribeElasticIpsWithContext":
		return m.Fake(d.fakeDescribeElasticIpsWithContext)

	case "DescribeElasticLoadBalancersWithContext":
		return m.Fake(d.fakeDescribeElasticLoadBalancersWithContext)

	case "DescribeInstancesWithContext":
		return m.Fake(d.fakeDescribeInstancesWithContext)

	case "DescribeLayersWithContext":
		return m.Fake(d.fakeDescribeLayersWithContext)

	case "DescribeLoadBasedAutoScalingWithContext":
		return m.Fake(d.fakeDescribeLoadBasedAutoScalingWithContext)

	case "DescribeMyUserProfileWithContext":
		return m.Fake(d.fakeDescribeMyUserProfileWithContext)

	case "DescribeOperatingSystemsWithContext":
		return m.Fake(d.fakeDescribeOperatingSystemsWithContext)

	case "DescribePermissionsWithContext":
		return m.Fake(d.fakeDescribePermissionsWithContext)

	case "DescribeRaidArraysWithContext":
		return m.Fake(d.fakeDescribeRaidArraysWithContext)

	case "DescribeRdsDbInstancesWithContext":
		return m.Fake(d.fakeDescribeRdsDbInstancesWithContext)

	case "DescribeServiceErrorsWithContext":
		return m.Fake(d.fakeDescribeServiceErrorsWithContext)

	case "DescribeStackProvisioningParametersWithContext":
		return m.Fake(d.fakeDescribeStackProvisioningParametersWithContext)

	case "DescribeStackSummaryWithContext":
		return m.Fake(d.fakeDescribeStackSummaryWithContext)

	case "DescribeStacksWithContext":
		return m.Fake(d.fakeDescribeStacksWithContext)

	case "DescribeTimeBasedAutoScalingWithContext":
		return m.Fake(d.fakeDescribeTimeBasedAutoScalingWithContext)

	case "DescribeUserProfilesWithContext":
		return m.Fake(d.fakeDescribeUserProfilesWithContext)

	case "DescribeVolumesWithContext":
		return m.Fake(d.fakeDescribeVolumesWithContext)

	case "DetachElasticLoadBalancerWithContext":
		return m.Fake(d.fakeDetachElasticLoadBalancerWithContext)

	case "DisassociateElasticIpWithContext":
		return m.Fake(d.fakeDisassociateElasticIpWithContext)

	case "GetHostnameSuggestionWithContext":
		return m.Fake(d.fakeGetHostnameSuggestionWithContext)

	case "GrantAccessWithContext":
		return m.Fake(d.fakeGrantAccessWithContext)

	case "ListTagsWithContext":
		return m.Fake(d.fakeListTagsWithContext)

	case "RebootInstanceWithContext":
		return m.Fake(d.fakeRebootInstanceWithContext)

	case "RegisterEcsClusterWithContext":
		return m.Fake(d.fakeRegisterEcsClusterWithContext)

	case "RegisterElasticIpWithContext":
		return m.Fake(d.fakeRegisterElasticIpWithContext)

	case "RegisterInstanceWithContext":
		return m.Fake(d.fakeRegisterInstanceWithContext)

	case "RegisterRdsDbInstanceWithContext":
		return m.Fake(d.fakeRegisterRdsDbInstanceWithContext)

	case "RegisterVolumeWithContext":
		return m.Fake(d.fakeRegisterVolumeWithContext)

	case "SetLoadBasedAutoScalingWithContext":
		return m.Fake(d.fakeSetLoadBasedAutoScalingWithContext)

	case "SetPermissionWithContext":
		return m.Fake(d.fakeSetPermissionWithContext)

	case "SetTimeBasedAutoScalingWithContext":
		return m.Fake(d.fakeSetTimeBasedAutoScalingWithContext)

	case "StartInstanceWithContext":
		return m.Fake(d.fakeStartInstanceWithContext)

	case "StartStackWithContext":
		return m.Fake(d.fakeStartStackWithContext)

	case "StopInstanceWithContext":
		return m.Fake(d.fakeStopInstanceWithContext)

	case "StopStackWithContext":
		return m.Fake(d.fakeStopStackWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UnassignInstanceWithContext":
		return m.Fake(d.fakeUnassignInstanceWithContext)

	case "UnassignVolumeWithContext":
		return m.Fake(d.fakeUnassignVolumeWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateAppWithContext":
		return m.Fake(d.fakeUpdateAppWithContext)

	case "UpdateElasticIpWithContext":
		return m.Fake(d.fakeUpdateElasticIpWithContext)

	case "UpdateInstanceWithContext":
		return m.Fake(d.fakeUpdateInstanceWithContext)

	case "UpdateLayerWithContext":
		return m.Fake(d.fakeUpdateLayerWithContext)

	case "UpdateMyUserProfileWithContext":
		return m.Fake(d.fakeUpdateMyUserProfileWithContext)

	case "UpdateRdsDbInstanceWithContext":
		return m.Fake(d.fakeUpdateRdsDbInstanceWithContext)

	case "UpdateStackWithContext":
		return m.Fake(d.fakeUpdateStackWithContext)

	case "UpdateUserProfileWithContext":
		return m.Fake(d.fakeUpdateUserProfileWithContext)

	case "UpdateVolumeWithContext":
		return m.Fake(d.fakeUpdateVolumeWithContext)

	case "WaitUntilAppExists":
		return m.Fake(d.fakeWaitUntilAppExists)

	case "WaitUntilAppExistsWithContext":
		return m.Fake(d.fakeWaitUntilAppExistsWithContext)

	case "WaitUntilDeploymentSuccessful":
		return m.Fake(d.fakeWaitUntilDeploymentSuccessful)

	case "WaitUntilDeploymentSuccessfulWithContext":
		return m.Fake(d.fakeWaitUntilDeploymentSuccessfulWithContext)

	case "WaitUntilInstanceOnline":
		return m.Fake(d.fakeWaitUntilInstanceOnline)

	case "WaitUntilInstanceOnlineWithContext":
		return m.Fake(d.fakeWaitUntilInstanceOnlineWithContext)

	case "WaitUntilInstanceRegistered":
		return m.Fake(d.fakeWaitUntilInstanceRegistered)

	case "WaitUntilInstanceRegisteredWithContext":
		return m.Fake(d.fakeWaitUntilInstanceRegisteredWithContext)

	case "WaitUntilInstanceStopped":
		return m.Fake(d.fakeWaitUntilInstanceStopped)

	case "WaitUntilInstanceStoppedWithContext":
		return m.Fake(d.fakeWaitUntilInstanceStoppedWithContext)

	case "WaitUntilInstanceTerminated":
		return m.Fake(d.fakeWaitUntilInstanceTerminated)

	case "WaitUntilInstanceTerminatedWithContext":
		return m.Fake(d.fakeWaitUntilInstanceTerminatedWithContext)

	default:
		return nil
	}
}

func (d *OpsWorksDouble) AssignInstance(i0 *opsworks.AssignInstanceInput) (r0 *opsworks.AssignInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssignInstance", i0)
	r0, _ = returns[0].(*opsworks.AssignInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) AssignInstanceRequest(i0 *opsworks.AssignInstanceInput) (r0 *request.Request, r1 *opsworks.AssignInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssignInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.AssignInstanceOutput)
	return
}

func (d *OpsWorksDouble) AssignInstanceWithContext(i0 context.Context, i1 *opsworks.AssignInstanceInput, i2 ...request.Option) (r0 *opsworks.AssignInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssignInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.AssignInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeAssignInstanceWithContext(ctx context.Context, in *opsworks.AssignInstanceInput, _ ...request.Option) (*opsworks.AssignInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssignInstance cancelled", ctx.Err())
	default:
		return d.AssignInstance(in)
	}
}

func (d *OpsWorksDouble) AssignVolume(i0 *opsworks.AssignVolumeInput) (r0 *opsworks.AssignVolumeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssignVolume", i0)
	r0, _ = returns[0].(*opsworks.AssignVolumeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) AssignVolumeRequest(i0 *opsworks.AssignVolumeInput) (r0 *request.Request, r1 *opsworks.AssignVolumeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssignVolumeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.AssignVolumeOutput)
	return
}

func (d *OpsWorksDouble) AssignVolumeWithContext(i0 context.Context, i1 *opsworks.AssignVolumeInput, i2 ...request.Option) (r0 *opsworks.AssignVolumeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssignVolumeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.AssignVolumeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeAssignVolumeWithContext(ctx context.Context, in *opsworks.AssignVolumeInput, _ ...request.Option) (*opsworks.AssignVolumeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssignVolume cancelled", ctx.Err())
	default:
		return d.AssignVolume(in)
	}
}

func (d *OpsWorksDouble) AssociateElasticIp(i0 *opsworks.AssociateElasticIpInput) (r0 *opsworks.AssociateElasticIpOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateElasticIp", i0)
	r0, _ = returns[0].(*opsworks.AssociateElasticIpOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) AssociateElasticIpRequest(i0 *opsworks.AssociateElasticIpInput) (r0 *request.Request, r1 *opsworks.AssociateElasticIpOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateElasticIpRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.AssociateElasticIpOutput)
	return
}

func (d *OpsWorksDouble) AssociateElasticIpWithContext(i0 context.Context, i1 *opsworks.AssociateElasticIpInput, i2 ...request.Option) (r0 *opsworks.AssociateElasticIpOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateElasticIpWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.AssociateElasticIpOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeAssociateElasticIpWithContext(ctx context.Context, in *opsworks.AssociateElasticIpInput, _ ...request.Option) (*opsworks.AssociateElasticIpOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateElasticIp cancelled", ctx.Err())
	default:
		return d.AssociateElasticIp(in)
	}
}

func (d *OpsWorksDouble) AttachElasticLoadBalancer(i0 *opsworks.AttachElasticLoadBalancerInput) (r0 *opsworks.AttachElasticLoadBalancerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachElasticLoadBalancer", i0)
	r0, _ = returns[0].(*opsworks.AttachElasticLoadBalancerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) AttachElasticLoadBalancerRequest(i0 *opsworks.AttachElasticLoadBalancerInput) (r0 *request.Request, r1 *opsworks.AttachElasticLoadBalancerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachElasticLoadBalancerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.AttachElasticLoadBalancerOutput)
	return
}

func (d *OpsWorksDouble) AttachElasticLoadBalancerWithContext(i0 context.Context, i1 *opsworks.AttachElasticLoadBalancerInput, i2 ...request.Option) (r0 *opsworks.AttachElasticLoadBalancerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachElasticLoadBalancerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.AttachElasticLoadBalancerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeAttachElasticLoadBalancerWithContext(ctx context.Context, in *opsworks.AttachElasticLoadBalancerInput, _ ...request.Option) (*opsworks.AttachElasticLoadBalancerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AttachElasticLoadBalancer cancelled", ctx.Err())
	default:
		return d.AttachElasticLoadBalancer(in)
	}
}

func (d *OpsWorksDouble) CloneStack(i0 *opsworks.CloneStackInput) (r0 *opsworks.CloneStackOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CloneStack", i0)
	r0, _ = returns[0].(*opsworks.CloneStackOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) CloneStackRequest(i0 *opsworks.CloneStackInput) (r0 *request.Request, r1 *opsworks.CloneStackOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CloneStackRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.CloneStackOutput)
	return
}

func (d *OpsWorksDouble) CloneStackWithContext(i0 context.Context, i1 *opsworks.CloneStackInput, i2 ...request.Option) (r0 *opsworks.CloneStackOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CloneStackWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.CloneStackOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeCloneStackWithContext(ctx context.Context, in *opsworks.CloneStackInput, _ ...request.Option) (*opsworks.CloneStackOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CloneStack cancelled", ctx.Err())
	default:
		return d.CloneStack(in)
	}
}

func (d *OpsWorksDouble) CreateApp(i0 *opsworks.CreateAppInput) (r0 *opsworks.CreateAppOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApp", i0)
	r0, _ = returns[0].(*opsworks.CreateAppOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) CreateAppRequest(i0 *opsworks.CreateAppInput) (r0 *request.Request, r1 *opsworks.CreateAppOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAppRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.CreateAppOutput)
	return
}

func (d *OpsWorksDouble) CreateAppWithContext(i0 context.Context, i1 *opsworks.CreateAppInput, i2 ...request.Option) (r0 *opsworks.CreateAppOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAppWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.CreateAppOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeCreateAppWithContext(ctx context.Context, in *opsworks.CreateAppInput, _ ...request.Option) (*opsworks.CreateAppOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateApp cancelled", ctx.Err())
	default:
		return d.CreateApp(in)
	}
}

func (d *OpsWorksDouble) CreateDeployment(i0 *opsworks.CreateDeploymentInput) (r0 *opsworks.CreateDeploymentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDeployment", i0)
	r0, _ = returns[0].(*opsworks.CreateDeploymentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) CreateDeploymentRequest(i0 *opsworks.CreateDeploymentInput) (r0 *request.Request, r1 *opsworks.CreateDeploymentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDeploymentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.CreateDeploymentOutput)
	return
}

func (d *OpsWorksDouble) CreateDeploymentWithContext(i0 context.Context, i1 *opsworks.CreateDeploymentInput, i2 ...request.Option) (r0 *opsworks.CreateDeploymentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDeploymentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.CreateDeploymentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeCreateDeploymentWithContext(ctx context.Context, in *opsworks.CreateDeploymentInput, _ ...request.Option) (*opsworks.CreateDeploymentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDeployment cancelled", ctx.Err())
	default:
		return d.CreateDeployment(in)
	}
}

func (d *OpsWorksDouble) CreateInstance(i0 *opsworks.CreateInstanceInput) (r0 *opsworks.CreateInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInstance", i0)
	r0, _ = returns[0].(*opsworks.CreateInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) CreateInstanceRequest(i0 *opsworks.CreateInstanceInput) (r0 *request.Request, r1 *opsworks.CreateInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.CreateInstanceOutput)
	return
}

func (d *OpsWorksDouble) CreateInstanceWithContext(i0 context.Context, i1 *opsworks.CreateInstanceInput, i2 ...request.Option) (r0 *opsworks.CreateInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.CreateInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeCreateInstanceWithContext(ctx context.Context, in *opsworks.CreateInstanceInput, _ ...request.Option) (*opsworks.CreateInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateInstance cancelled", ctx.Err())
	default:
		return d.CreateInstance(in)
	}
}

func (d *OpsWorksDouble) CreateLayer(i0 *opsworks.CreateLayerInput) (r0 *opsworks.CreateLayerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLayer", i0)
	r0, _ = returns[0].(*opsworks.CreateLayerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) CreateLayerRequest(i0 *opsworks.CreateLayerInput) (r0 *request.Request, r1 *opsworks.CreateLayerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLayerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.CreateLayerOutput)
	return
}

func (d *OpsWorksDouble) CreateLayerWithContext(i0 context.Context, i1 *opsworks.CreateLayerInput, i2 ...request.Option) (r0 *opsworks.CreateLayerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLayerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.CreateLayerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeCreateLayerWithContext(ctx context.Context, in *opsworks.CreateLayerInput, _ ...request.Option) (*opsworks.CreateLayerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateLayer cancelled", ctx.Err())
	default:
		return d.CreateLayer(in)
	}
}

func (d *OpsWorksDouble) CreateStack(i0 *opsworks.CreateStackInput) (r0 *opsworks.CreateStackOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStack", i0)
	r0, _ = returns[0].(*opsworks.CreateStackOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) CreateStackRequest(i0 *opsworks.CreateStackInput) (r0 *request.Request, r1 *opsworks.CreateStackOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStackRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.CreateStackOutput)
	return
}

func (d *OpsWorksDouble) CreateStackWithContext(i0 context.Context, i1 *opsworks.CreateStackInput, i2 ...request.Option) (r0 *opsworks.CreateStackOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStackWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.CreateStackOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeCreateStackWithContext(ctx context.Context, in *opsworks.CreateStackInput, _ ...request.Option) (*opsworks.CreateStackOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateStack cancelled", ctx.Err())
	default:
		return d.CreateStack(in)
	}
}

func (d *OpsWorksDouble) CreateUserProfile(i0 *opsworks.CreateUserProfileInput) (r0 *opsworks.CreateUserProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserProfile", i0)
	r0, _ = returns[0].(*opsworks.CreateUserProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) CreateUserProfileRequest(i0 *opsworks.CreateUserProfileInput) (r0 *request.Request, r1 *opsworks.CreateUserProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.CreateUserProfileOutput)
	return
}

func (d *OpsWorksDouble) CreateUserProfileWithContext(i0 context.Context, i1 *opsworks.CreateUserProfileInput, i2 ...request.Option) (r0 *opsworks.CreateUserProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.CreateUserProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeCreateUserProfileWithContext(ctx context.Context, in *opsworks.CreateUserProfileInput, _ ...request.Option) (*opsworks.CreateUserProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateUserProfile cancelled", ctx.Err())
	default:
		return d.CreateUserProfile(in)
	}
}

func (d *OpsWorksDouble) DeleteApp(i0 *opsworks.DeleteAppInput) (r0 *opsworks.DeleteAppOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApp", i0)
	r0, _ = returns[0].(*opsworks.DeleteAppOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) DeleteAppRequest(i0 *opsworks.DeleteAppInput) (r0 *request.Request, r1 *opsworks.DeleteAppOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAppRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.DeleteAppOutput)
	return
}

func (d *OpsWorksDouble) DeleteAppWithContext(i0 context.Context, i1 *opsworks.DeleteAppInput, i2 ...request.Option) (r0 *opsworks.DeleteAppOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAppWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.DeleteAppOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeDeleteAppWithContext(ctx context.Context, in *opsworks.DeleteAppInput, _ ...request.Option) (*opsworks.DeleteAppOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteApp cancelled", ctx.Err())
	default:
		return d.DeleteApp(in)
	}
}

func (d *OpsWorksDouble) DeleteInstance(i0 *opsworks.DeleteInstanceInput) (r0 *opsworks.DeleteInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInstance", i0)
	r0, _ = returns[0].(*opsworks.DeleteInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) DeleteInstanceRequest(i0 *opsworks.DeleteInstanceInput) (r0 *request.Request, r1 *opsworks.DeleteInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.DeleteInstanceOutput)
	return
}

func (d *OpsWorksDouble) DeleteInstanceWithContext(i0 context.Context, i1 *opsworks.DeleteInstanceInput, i2 ...request.Option) (r0 *opsworks.DeleteInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.DeleteInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeDeleteInstanceWithContext(ctx context.Context, in *opsworks.DeleteInstanceInput, _ ...request.Option) (*opsworks.DeleteInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteInstance cancelled", ctx.Err())
	default:
		return d.DeleteInstance(in)
	}
}

func (d *OpsWorksDouble) DeleteLayer(i0 *opsworks.DeleteLayerInput) (r0 *opsworks.DeleteLayerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLayer", i0)
	r0, _ = returns[0].(*opsworks.DeleteLayerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) DeleteLayerRequest(i0 *opsworks.DeleteLayerInput) (r0 *request.Request, r1 *opsworks.DeleteLayerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLayerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.DeleteLayerOutput)
	return
}

func (d *OpsWorksDouble) DeleteLayerWithContext(i0 context.Context, i1 *opsworks.DeleteLayerInput, i2 ...request.Option) (r0 *opsworks.DeleteLayerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLayerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.DeleteLayerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeDeleteLayerWithContext(ctx context.Context, in *opsworks.DeleteLayerInput, _ ...request.Option) (*opsworks.DeleteLayerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteLayer cancelled", ctx.Err())
	default:
		return d.DeleteLayer(in)
	}
}

func (d *OpsWorksDouble) DeleteStack(i0 *opsworks.DeleteStackInput) (r0 *opsworks.DeleteStackOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteStack", i0)
	r0, _ = returns[0].(*opsworks.DeleteStackOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) DeleteStackRequest(i0 *opsworks.DeleteStackInput) (r0 *request.Request, r1 *opsworks.DeleteStackOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteStackRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.DeleteStackOutput)
	return
}

func (d *OpsWorksDouble) DeleteStackWithContext(i0 context.Context, i1 *opsworks.DeleteStackInput, i2 ...request.Option) (r0 *opsworks.DeleteStackOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteStackWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.DeleteStackOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeDeleteStackWithContext(ctx context.Context, in *opsworks.DeleteStackInput, _ ...request.Option) (*opsworks.DeleteStackOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteStack cancelled", ctx.Err())
	default:
		return d.DeleteStack(in)
	}
}

func (d *OpsWorksDouble) DeleteUserProfile(i0 *opsworks.DeleteUserProfileInput) (r0 *opsworks.DeleteUserProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserProfile", i0)
	r0, _ = returns[0].(*opsworks.DeleteUserProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) DeleteUserProfileRequest(i0 *opsworks.DeleteUserProfileInput) (r0 *request.Request, r1 *opsworks.DeleteUserProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.DeleteUserProfileOutput)
	return
}

func (d *OpsWorksDouble) DeleteUserProfileWithContext(i0 context.Context, i1 *opsworks.DeleteUserProfileInput, i2 ...request.Option) (r0 *opsworks.DeleteUserProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.DeleteUserProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeDeleteUserProfileWithContext(ctx context.Context, in *opsworks.DeleteUserProfileInput, _ ...request.Option) (*opsworks.DeleteUserProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteUserProfile cancelled", ctx.Err())
	default:
		return d.DeleteUserProfile(in)
	}
}

func (d *OpsWorksDouble) DeregisterEcsCluster(i0 *opsworks.DeregisterEcsClusterInput) (r0 *opsworks.DeregisterEcsClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterEcsCluster", i0)
	r0, _ = returns[0].(*opsworks.DeregisterEcsClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) DeregisterEcsClusterRequest(i0 *opsworks.DeregisterEcsClusterInput) (r0 *request.Request, r1 *opsworks.DeregisterEcsClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterEcsClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.DeregisterEcsClusterOutput)
	return
}

func (d *OpsWorksDouble) DeregisterEcsClusterWithContext(i0 context.Context, i1 *opsworks.DeregisterEcsClusterInput, i2 ...request.Option) (r0 *opsworks.DeregisterEcsClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterEcsClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.DeregisterEcsClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeDeregisterEcsClusterWithContext(ctx context.Context, in *opsworks.DeregisterEcsClusterInput, _ ...request.Option) (*opsworks.DeregisterEcsClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeregisterEcsCluster cancelled", ctx.Err())
	default:
		return d.DeregisterEcsCluster(in)
	}
}

func (d *OpsWorksDouble) DeregisterElasticIp(i0 *opsworks.DeregisterElasticIpInput) (r0 *opsworks.DeregisterElasticIpOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterElasticIp", i0)
	r0, _ = returns[0].(*opsworks.DeregisterElasticIpOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) DeregisterElasticIpRequest(i0 *opsworks.DeregisterElasticIpInput) (r0 *request.Request, r1 *opsworks.DeregisterElasticIpOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterElasticIpRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.DeregisterElasticIpOutput)
	return
}

func (d *OpsWorksDouble) DeregisterElasticIpWithContext(i0 context.Context, i1 *opsworks.DeregisterElasticIpInput, i2 ...request.Option) (r0 *opsworks.DeregisterElasticIpOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterElasticIpWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.DeregisterElasticIpOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeDeregisterElasticIpWithContext(ctx context.Context, in *opsworks.DeregisterElasticIpInput, _ ...request.Option) (*opsworks.DeregisterElasticIpOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeregisterElasticIp cancelled", ctx.Err())
	default:
		return d.DeregisterElasticIp(in)
	}
}

func (d *OpsWorksDouble) DeregisterInstance(i0 *opsworks.DeregisterInstanceInput) (r0 *opsworks.DeregisterInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterInstance", i0)
	r0, _ = returns[0].(*opsworks.DeregisterInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) DeregisterInstanceRequest(i0 *opsworks.DeregisterInstanceInput) (r0 *request.Request, r1 *opsworks.DeregisterInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.DeregisterInstanceOutput)
	return
}

func (d *OpsWorksDouble) DeregisterInstanceWithContext(i0 context.Context, i1 *opsworks.DeregisterInstanceInput, i2 ...request.Option) (r0 *opsworks.DeregisterInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.DeregisterInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeDeregisterInstanceWithContext(ctx context.Context, in *opsworks.DeregisterInstanceInput, _ ...request.Option) (*opsworks.DeregisterInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeregisterInstance cancelled", ctx.Err())
	default:
		return d.DeregisterInstance(in)
	}
}

func (d *OpsWorksDouble) DeregisterRdsDbInstance(i0 *opsworks.DeregisterRdsDbInstanceInput) (r0 *opsworks.DeregisterRdsDbInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterRdsDbInstance", i0)
	r0, _ = returns[0].(*opsworks.DeregisterRdsDbInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) DeregisterRdsDbInstanceRequest(i0 *opsworks.DeregisterRdsDbInstanceInput) (r0 *request.Request, r1 *opsworks.DeregisterRdsDbInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterRdsDbInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.DeregisterRdsDbInstanceOutput)
	return
}

func (d *OpsWorksDouble) DeregisterRdsDbInstanceWithContext(i0 context.Context, i1 *opsworks.DeregisterRdsDbInstanceInput, i2 ...request.Option) (r0 *opsworks.DeregisterRdsDbInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterRdsDbInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.DeregisterRdsDbInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeDeregisterRdsDbInstanceWithContext(ctx context.Context, in *opsworks.DeregisterRdsDbInstanceInput, _ ...request.Option) (*opsworks.DeregisterRdsDbInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeregisterRdsDbInstance cancelled", ctx.Err())
	default:
		return d.DeregisterRdsDbInstance(in)
	}
}

func (d *OpsWorksDouble) DeregisterVolume(i0 *opsworks.DeregisterVolumeInput) (r0 *opsworks.DeregisterVolumeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterVolume", i0)
	r0, _ = returns[0].(*opsworks.DeregisterVolumeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) DeregisterVolumeRequest(i0 *opsworks.DeregisterVolumeInput) (r0 *request.Request, r1 *opsworks.DeregisterVolumeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterVolumeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.DeregisterVolumeOutput)
	return
}

func (d *OpsWorksDouble) DeregisterVolumeWithContext(i0 context.Context, i1 *opsworks.DeregisterVolumeInput, i2 ...request.Option) (r0 *opsworks.DeregisterVolumeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterVolumeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.DeregisterVolumeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeDeregisterVolumeWithContext(ctx context.Context, in *opsworks.DeregisterVolumeInput, _ ...request.Option) (*opsworks.DeregisterVolumeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeregisterVolume cancelled", ctx.Err())
	default:
		return d.DeregisterVolume(in)
	}
}

func (d *OpsWorksDouble) DescribeAgentVersions(i0 *opsworks.DescribeAgentVersionsInput) (r0 *opsworks.DescribeAgentVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAgentVersions", i0)
	r0, _ = returns[0].(*opsworks.DescribeAgentVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) DescribeAgentVersionsRequest(i0 *opsworks.DescribeAgentVersionsInput) (r0 *request.Request, r1 *opsworks.DescribeAgentVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAgentVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.DescribeAgentVersionsOutput)
	return
}

func (d *OpsWorksDouble) DescribeAgentVersionsWithContext(i0 context.Context, i1 *opsworks.DescribeAgentVersionsInput, i2 ...request.Option) (r0 *opsworks.DescribeAgentVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAgentVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.DescribeAgentVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeDescribeAgentVersionsWithContext(ctx context.Context, in *opsworks.DescribeAgentVersionsInput, _ ...request.Option) (*opsworks.DescribeAgentVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAgentVersions cancelled", ctx.Err())
	default:
		return d.DescribeAgentVersions(in)
	}
}

func (d *OpsWorksDouble) DescribeApps(i0 *opsworks.DescribeAppsInput) (r0 *opsworks.DescribeAppsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeApps", i0)
	r0, _ = returns[0].(*opsworks.DescribeAppsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) DescribeAppsRequest(i0 *opsworks.DescribeAppsInput) (r0 *request.Request, r1 *opsworks.DescribeAppsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAppsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.DescribeAppsOutput)
	return
}

func (d *OpsWorksDouble) DescribeAppsWithContext(i0 context.Context, i1 *opsworks.DescribeAppsInput, i2 ...request.Option) (r0 *opsworks.DescribeAppsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAppsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.DescribeAppsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeDescribeAppsWithContext(ctx context.Context, in *opsworks.DescribeAppsInput, _ ...request.Option) (*opsworks.DescribeAppsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeApps cancelled", ctx.Err())
	default:
		return d.DescribeApps(in)
	}
}

func (d *OpsWorksDouble) DescribeCommands(i0 *opsworks.DescribeCommandsInput) (r0 *opsworks.DescribeCommandsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCommands", i0)
	r0, _ = returns[0].(*opsworks.DescribeCommandsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) DescribeCommandsRequest(i0 *opsworks.DescribeCommandsInput) (r0 *request.Request, r1 *opsworks.DescribeCommandsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCommandsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.DescribeCommandsOutput)
	return
}

func (d *OpsWorksDouble) DescribeCommandsWithContext(i0 context.Context, i1 *opsworks.DescribeCommandsInput, i2 ...request.Option) (r0 *opsworks.DescribeCommandsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCommandsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.DescribeCommandsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeDescribeCommandsWithContext(ctx context.Context, in *opsworks.DescribeCommandsInput, _ ...request.Option) (*opsworks.DescribeCommandsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeCommands cancelled", ctx.Err())
	default:
		return d.DescribeCommands(in)
	}
}

func (d *OpsWorksDouble) DescribeDeployments(i0 *opsworks.DescribeDeploymentsInput) (r0 *opsworks.DescribeDeploymentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDeployments", i0)
	r0, _ = returns[0].(*opsworks.DescribeDeploymentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) DescribeDeploymentsRequest(i0 *opsworks.DescribeDeploymentsInput) (r0 *request.Request, r1 *opsworks.DescribeDeploymentsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDeploymentsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.DescribeDeploymentsOutput)
	return
}

func (d *OpsWorksDouble) DescribeDeploymentsWithContext(i0 context.Context, i1 *opsworks.DescribeDeploymentsInput, i2 ...request.Option) (r0 *opsworks.DescribeDeploymentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDeploymentsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.DescribeDeploymentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeDescribeDeploymentsWithContext(ctx context.Context, in *opsworks.DescribeDeploymentsInput, _ ...request.Option) (*opsworks.DescribeDeploymentsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDeployments cancelled", ctx.Err())
	default:
		return d.DescribeDeployments(in)
	}
}

func (d *OpsWorksDouble) DescribeEcsClusters(i0 *opsworks.DescribeEcsClustersInput) (r0 *opsworks.DescribeEcsClustersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEcsClusters", i0)
	r0, _ = returns[0].(*opsworks.DescribeEcsClustersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) DescribeEcsClustersPages(i0 *opsworks.DescribeEcsClustersInput, i1 func(*opsworks.DescribeEcsClustersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEcsClustersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *OpsWorksDouble) fakeDescribeEcsClustersPages(in *opsworks.DescribeEcsClustersInput, pager func(*opsworks.DescribeEcsClustersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeEcsClusters", paginators, in, pager)
}

func (d *OpsWorksDouble) DescribeEcsClustersPagesWithContext(i0 context.Context, i1 *opsworks.DescribeEcsClustersInput, i2 func(*opsworks.DescribeEcsClustersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEcsClustersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *OpsWorksDouble) fakeDescribeEcsClustersPagesWithContext(ctx context.Context, in *opsworks.DescribeEcsClustersInput, pager func(*opsworks.DescribeEcsClustersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeEcsClusters", paginators, ctx, in, pager, options...)
}

func (d *OpsWorksDouble) DescribeEcsClustersRequest(i0 *opsworks.DescribeEcsClustersInput) (r0 *request.Request, r1 *opsworks.DescribeEcsClustersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEcsClustersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.DescribeEcsClustersOutput)
	return
}

func (d *OpsWorksDouble) DescribeEcsClustersWithContext(i0 context.Context, i1 *opsworks.DescribeEcsClustersInput, i2 ...request.Option) (r0 *opsworks.DescribeEcsClustersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEcsClustersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.DescribeEcsClustersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeDescribeEcsClustersWithContext(ctx context.Context, in *opsworks.DescribeEcsClustersInput, _ ...request.Option) (*opsworks.DescribeEcsClustersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEcsClusters cancelled", ctx.Err())
	default:
		return d.DescribeEcsClusters(in)
	}
}

func (d *OpsWorksDouble) DescribeElasticIps(i0 *opsworks.DescribeElasticIpsInput) (r0 *opsworks.DescribeElasticIpsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeElasticIps", i0)
	r0, _ = returns[0].(*opsworks.DescribeElasticIpsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) DescribeElasticIpsRequest(i0 *opsworks.DescribeElasticIpsInput) (r0 *request.Request, r1 *opsworks.DescribeElasticIpsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeElasticIpsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.DescribeElasticIpsOutput)
	return
}

func (d *OpsWorksDouble) DescribeElasticIpsWithContext(i0 context.Context, i1 *opsworks.DescribeElasticIpsInput, i2 ...request.Option) (r0 *opsworks.DescribeElasticIpsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeElasticIpsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.DescribeElasticIpsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeDescribeElasticIpsWithContext(ctx context.Context, in *opsworks.DescribeElasticIpsInput, _ ...request.Option) (*opsworks.DescribeElasticIpsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeElasticIps cancelled", ctx.Err())
	default:
		return d.DescribeElasticIps(in)
	}
}

func (d *OpsWorksDouble) DescribeElasticLoadBalancers(i0 *opsworks.DescribeElasticLoadBalancersInput) (r0 *opsworks.DescribeElasticLoadBalancersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeElasticLoadBalancers", i0)
	r0, _ = returns[0].(*opsworks.DescribeElasticLoadBalancersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) DescribeElasticLoadBalancersRequest(i0 *opsworks.DescribeElasticLoadBalancersInput) (r0 *request.Request, r1 *opsworks.DescribeElasticLoadBalancersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeElasticLoadBalancersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.DescribeElasticLoadBalancersOutput)
	return
}

func (d *OpsWorksDouble) DescribeElasticLoadBalancersWithContext(i0 context.Context, i1 *opsworks.DescribeElasticLoadBalancersInput, i2 ...request.Option) (r0 *opsworks.DescribeElasticLoadBalancersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeElasticLoadBalancersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.DescribeElasticLoadBalancersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeDescribeElasticLoadBalancersWithContext(ctx context.Context, in *opsworks.DescribeElasticLoadBalancersInput, _ ...request.Option) (*opsworks.DescribeElasticLoadBalancersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeElasticLoadBalancers cancelled", ctx.Err())
	default:
		return d.DescribeElasticLoadBalancers(in)
	}
}

func (d *OpsWorksDouble) DescribeInstances(i0 *opsworks.DescribeInstancesInput) (r0 *opsworks.DescribeInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstances", i0)
	r0, _ = returns[0].(*opsworks.DescribeInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) DescribeInstancesRequest(i0 *opsworks.DescribeInstancesInput) (r0 *request.Request, r1 *opsworks.DescribeInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.DescribeInstancesOutput)
	return
}

func (d *OpsWorksDouble) DescribeInstancesWithContext(i0 context.Context, i1 *opsworks.DescribeInstancesInput, i2 ...request.Option) (r0 *opsworks.DescribeInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.DescribeInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeDescribeInstancesWithContext(ctx context.Context, in *opsworks.DescribeInstancesInput, _ ...request.Option) (*opsworks.DescribeInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeInstances cancelled", ctx.Err())
	default:
		return d.DescribeInstances(in)
	}
}

func (d *OpsWorksDouble) DescribeLayers(i0 *opsworks.DescribeLayersInput) (r0 *opsworks.DescribeLayersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLayers", i0)
	r0, _ = returns[0].(*opsworks.DescribeLayersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) DescribeLayersRequest(i0 *opsworks.DescribeLayersInput) (r0 *request.Request, r1 *opsworks.DescribeLayersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLayersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.DescribeLayersOutput)
	return
}

func (d *OpsWorksDouble) DescribeLayersWithContext(i0 context.Context, i1 *opsworks.DescribeLayersInput, i2 ...request.Option) (r0 *opsworks.DescribeLayersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLayersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.DescribeLayersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeDescribeLayersWithContext(ctx context.Context, in *opsworks.DescribeLayersInput, _ ...request.Option) (*opsworks.DescribeLayersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeLayers cancelled", ctx.Err())
	default:
		return d.DescribeLayers(in)
	}
}

func (d *OpsWorksDouble) DescribeLoadBasedAutoScaling(i0 *opsworks.DescribeLoadBasedAutoScalingInput) (r0 *opsworks.DescribeLoadBasedAutoScalingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoadBasedAutoScaling", i0)
	r0, _ = returns[0].(*opsworks.DescribeLoadBasedAutoScalingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) DescribeLoadBasedAutoScalingRequest(i0 *opsworks.DescribeLoadBasedAutoScalingInput) (r0 *request.Request, r1 *opsworks.DescribeLoadBasedAutoScalingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoadBasedAutoScalingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.DescribeLoadBasedAutoScalingOutput)
	return
}

func (d *OpsWorksDouble) DescribeLoadBasedAutoScalingWithContext(i0 context.Context, i1 *opsworks.DescribeLoadBasedAutoScalingInput, i2 ...request.Option) (r0 *opsworks.DescribeLoadBasedAutoScalingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoadBasedAutoScalingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.DescribeLoadBasedAutoScalingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeDescribeLoadBasedAutoScalingWithContext(ctx context.Context, in *opsworks.DescribeLoadBasedAutoScalingInput, _ ...request.Option) (*opsworks.DescribeLoadBasedAutoScalingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeLoadBasedAutoScaling cancelled", ctx.Err())
	default:
		return d.DescribeLoadBasedAutoScaling(in)
	}
}

func (d *OpsWorksDouble) DescribeMyUserProfile(i0 *opsworks.DescribeMyUserProfileInput) (r0 *opsworks.DescribeMyUserProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMyUserProfile", i0)
	r0, _ = returns[0].(*opsworks.DescribeMyUserProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) DescribeMyUserProfileRequest(i0 *opsworks.DescribeMyUserProfileInput) (r0 *request.Request, r1 *opsworks.DescribeMyUserProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMyUserProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.DescribeMyUserProfileOutput)
	return
}

func (d *OpsWorksDouble) DescribeMyUserProfileWithContext(i0 context.Context, i1 *opsworks.DescribeMyUserProfileInput, i2 ...request.Option) (r0 *opsworks.DescribeMyUserProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMyUserProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.DescribeMyUserProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeDescribeMyUserProfileWithContext(ctx context.Context, in *opsworks.DescribeMyUserProfileInput, _ ...request.Option) (*opsworks.DescribeMyUserProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeMyUserProfile cancelled", ctx.Err())
	default:
		return d.DescribeMyUserProfile(in)
	}
}

func (d *OpsWorksDouble) DescribeOperatingSystems(i0 *opsworks.DescribeOperatingSystemsInput) (r0 *opsworks.DescribeOperatingSystemsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOperatingSystems", i0)
	r0, _ = returns[0].(*opsworks.DescribeOperatingSystemsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) DescribeOperatingSystemsRequest(i0 *opsworks.DescribeOperatingSystemsInput) (r0 *request.Request, r1 *opsworks.DescribeOperatingSystemsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOperatingSystemsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.DescribeOperatingSystemsOutput)
	return
}

func (d *OpsWorksDouble) DescribeOperatingSystemsWithContext(i0 context.Context, i1 *opsworks.DescribeOperatingSystemsInput, i2 ...request.Option) (r0 *opsworks.DescribeOperatingSystemsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOperatingSystemsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.DescribeOperatingSystemsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeDescribeOperatingSystemsWithContext(ctx context.Context, in *opsworks.DescribeOperatingSystemsInput, _ ...request.Option) (*opsworks.DescribeOperatingSystemsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeOperatingSystems cancelled", ctx.Err())
	default:
		return d.DescribeOperatingSystems(in)
	}
}

func (d *OpsWorksDouble) DescribePermissions(i0 *opsworks.DescribePermissionsInput) (r0 *opsworks.DescribePermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePermissions", i0)
	r0, _ = returns[0].(*opsworks.DescribePermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) DescribePermissionsRequest(i0 *opsworks.DescribePermissionsInput) (r0 *request.Request, r1 *opsworks.DescribePermissionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePermissionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.DescribePermissionsOutput)
	return
}

func (d *OpsWorksDouble) DescribePermissionsWithContext(i0 context.Context, i1 *opsworks.DescribePermissionsInput, i2 ...request.Option) (r0 *opsworks.DescribePermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePermissionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.DescribePermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeDescribePermissionsWithContext(ctx context.Context, in *opsworks.DescribePermissionsInput, _ ...request.Option) (*opsworks.DescribePermissionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribePermissions cancelled", ctx.Err())
	default:
		return d.DescribePermissions(in)
	}
}

func (d *OpsWorksDouble) DescribeRaidArrays(i0 *opsworks.DescribeRaidArraysInput) (r0 *opsworks.DescribeRaidArraysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRaidArrays", i0)
	r0, _ = returns[0].(*opsworks.DescribeRaidArraysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) DescribeRaidArraysRequest(i0 *opsworks.DescribeRaidArraysInput) (r0 *request.Request, r1 *opsworks.DescribeRaidArraysOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRaidArraysRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.DescribeRaidArraysOutput)
	return
}

func (d *OpsWorksDouble) DescribeRaidArraysWithContext(i0 context.Context, i1 *opsworks.DescribeRaidArraysInput, i2 ...request.Option) (r0 *opsworks.DescribeRaidArraysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRaidArraysWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.DescribeRaidArraysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeDescribeRaidArraysWithContext(ctx context.Context, in *opsworks.DescribeRaidArraysInput, _ ...request.Option) (*opsworks.DescribeRaidArraysOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeRaidArrays cancelled", ctx.Err())
	default:
		return d.DescribeRaidArrays(in)
	}
}

func (d *OpsWorksDouble) DescribeRdsDbInstances(i0 *opsworks.DescribeRdsDbInstancesInput) (r0 *opsworks.DescribeRdsDbInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRdsDbInstances", i0)
	r0, _ = returns[0].(*opsworks.DescribeRdsDbInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) DescribeRdsDbInstancesRequest(i0 *opsworks.DescribeRdsDbInstancesInput) (r0 *request.Request, r1 *opsworks.DescribeRdsDbInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRdsDbInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.DescribeRdsDbInstancesOutput)
	return
}

func (d *OpsWorksDouble) DescribeRdsDbInstancesWithContext(i0 context.Context, i1 *opsworks.DescribeRdsDbInstancesInput, i2 ...request.Option) (r0 *opsworks.DescribeRdsDbInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRdsDbInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.DescribeRdsDbInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeDescribeRdsDbInstancesWithContext(ctx context.Context, in *opsworks.DescribeRdsDbInstancesInput, _ ...request.Option) (*opsworks.DescribeRdsDbInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeRdsDbInstances cancelled", ctx.Err())
	default:
		return d.DescribeRdsDbInstances(in)
	}
}

func (d *OpsWorksDouble) DescribeServiceErrors(i0 *opsworks.DescribeServiceErrorsInput) (r0 *opsworks.DescribeServiceErrorsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeServiceErrors", i0)
	r0, _ = returns[0].(*opsworks.DescribeServiceErrorsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) DescribeServiceErrorsRequest(i0 *opsworks.DescribeServiceErrorsInput) (r0 *request.Request, r1 *opsworks.DescribeServiceErrorsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeServiceErrorsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.DescribeServiceErrorsOutput)
	return
}

func (d *OpsWorksDouble) DescribeServiceErrorsWithContext(i0 context.Context, i1 *opsworks.DescribeServiceErrorsInput, i2 ...request.Option) (r0 *opsworks.DescribeServiceErrorsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeServiceErrorsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.DescribeServiceErrorsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeDescribeServiceErrorsWithContext(ctx context.Context, in *opsworks.DescribeServiceErrorsInput, _ ...request.Option) (*opsworks.DescribeServiceErrorsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeServiceErrors cancelled", ctx.Err())
	default:
		return d.DescribeServiceErrors(in)
	}
}

func (d *OpsWorksDouble) DescribeStackProvisioningParameters(i0 *opsworks.DescribeStackProvisioningParametersInput) (r0 *opsworks.DescribeStackProvisioningParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStackProvisioningParameters", i0)
	r0, _ = returns[0].(*opsworks.DescribeStackProvisioningParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) DescribeStackProvisioningParametersRequest(i0 *opsworks.DescribeStackProvisioningParametersInput) (r0 *request.Request, r1 *opsworks.DescribeStackProvisioningParametersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStackProvisioningParametersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.DescribeStackProvisioningParametersOutput)
	return
}

func (d *OpsWorksDouble) DescribeStackProvisioningParametersWithContext(i0 context.Context, i1 *opsworks.DescribeStackProvisioningParametersInput, i2 ...request.Option) (r0 *opsworks.DescribeStackProvisioningParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStackProvisioningParametersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.DescribeStackProvisioningParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeDescribeStackProvisioningParametersWithContext(ctx context.Context, in *opsworks.DescribeStackProvisioningParametersInput, _ ...request.Option) (*opsworks.DescribeStackProvisioningParametersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeStackProvisioningParameters cancelled", ctx.Err())
	default:
		return d.DescribeStackProvisioningParameters(in)
	}
}

func (d *OpsWorksDouble) DescribeStackSummary(i0 *opsworks.DescribeStackSummaryInput) (r0 *opsworks.DescribeStackSummaryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStackSummary", i0)
	r0, _ = returns[0].(*opsworks.DescribeStackSummaryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) DescribeStackSummaryRequest(i0 *opsworks.DescribeStackSummaryInput) (r0 *request.Request, r1 *opsworks.DescribeStackSummaryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStackSummaryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.DescribeStackSummaryOutput)
	return
}

func (d *OpsWorksDouble) DescribeStackSummaryWithContext(i0 context.Context, i1 *opsworks.DescribeStackSummaryInput, i2 ...request.Option) (r0 *opsworks.DescribeStackSummaryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStackSummaryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.DescribeStackSummaryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeDescribeStackSummaryWithContext(ctx context.Context, in *opsworks.DescribeStackSummaryInput, _ ...request.Option) (*opsworks.DescribeStackSummaryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeStackSummary cancelled", ctx.Err())
	default:
		return d.DescribeStackSummary(in)
	}
}

func (d *OpsWorksDouble) DescribeStacks(i0 *opsworks.DescribeStacksInput) (r0 *opsworks.DescribeStacksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStacks", i0)
	r0, _ = returns[0].(*opsworks.DescribeStacksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) DescribeStacksRequest(i0 *opsworks.DescribeStacksInput) (r0 *request.Request, r1 *opsworks.DescribeStacksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStacksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.DescribeStacksOutput)
	return
}

func (d *OpsWorksDouble) DescribeStacksWithContext(i0 context.Context, i1 *opsworks.DescribeStacksInput, i2 ...request.Option) (r0 *opsworks.DescribeStacksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStacksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.DescribeStacksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeDescribeStacksWithContext(ctx context.Context, in *opsworks.DescribeStacksInput, _ ...request.Option) (*opsworks.DescribeStacksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeStacks cancelled", ctx.Err())
	default:
		return d.DescribeStacks(in)
	}
}

func (d *OpsWorksDouble) DescribeTimeBasedAutoScaling(i0 *opsworks.DescribeTimeBasedAutoScalingInput) (r0 *opsworks.DescribeTimeBasedAutoScalingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTimeBasedAutoScaling", i0)
	r0, _ = returns[0].(*opsworks.DescribeTimeBasedAutoScalingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) DescribeTimeBasedAutoScalingRequest(i0 *opsworks.DescribeTimeBasedAutoScalingInput) (r0 *request.Request, r1 *opsworks.DescribeTimeBasedAutoScalingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTimeBasedAutoScalingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.DescribeTimeBasedAutoScalingOutput)
	return
}

func (d *OpsWorksDouble) DescribeTimeBasedAutoScalingWithContext(i0 context.Context, i1 *opsworks.DescribeTimeBasedAutoScalingInput, i2 ...request.Option) (r0 *opsworks.DescribeTimeBasedAutoScalingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTimeBasedAutoScalingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.DescribeTimeBasedAutoScalingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeDescribeTimeBasedAutoScalingWithContext(ctx context.Context, in *opsworks.DescribeTimeBasedAutoScalingInput, _ ...request.Option) (*opsworks.DescribeTimeBasedAutoScalingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTimeBasedAutoScaling cancelled", ctx.Err())
	default:
		return d.DescribeTimeBasedAutoScaling(in)
	}
}

func (d *OpsWorksDouble) DescribeUserProfiles(i0 *opsworks.DescribeUserProfilesInput) (r0 *opsworks.DescribeUserProfilesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserProfiles", i0)
	r0, _ = returns[0].(*opsworks.DescribeUserProfilesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) DescribeUserProfilesRequest(i0 *opsworks.DescribeUserProfilesInput) (r0 *request.Request, r1 *opsworks.DescribeUserProfilesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserProfilesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.DescribeUserProfilesOutput)
	return
}

func (d *OpsWorksDouble) DescribeUserProfilesWithContext(i0 context.Context, i1 *opsworks.DescribeUserProfilesInput, i2 ...request.Option) (r0 *opsworks.DescribeUserProfilesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserProfilesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.DescribeUserProfilesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeDescribeUserProfilesWithContext(ctx context.Context, in *opsworks.DescribeUserProfilesInput, _ ...request.Option) (*opsworks.DescribeUserProfilesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeUserProfiles cancelled", ctx.Err())
	default:
		return d.DescribeUserProfiles(in)
	}
}

func (d *OpsWorksDouble) DescribeVolumes(i0 *opsworks.DescribeVolumesInput) (r0 *opsworks.DescribeVolumesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVolumes", i0)
	r0, _ = returns[0].(*opsworks.DescribeVolumesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) DescribeVolumesRequest(i0 *opsworks.DescribeVolumesInput) (r0 *request.Request, r1 *opsworks.DescribeVolumesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVolumesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.DescribeVolumesOutput)
	return
}

func (d *OpsWorksDouble) DescribeVolumesWithContext(i0 context.Context, i1 *opsworks.DescribeVolumesInput, i2 ...request.Option) (r0 *opsworks.DescribeVolumesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVolumesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.DescribeVolumesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeDescribeVolumesWithContext(ctx context.Context, in *opsworks.DescribeVolumesInput, _ ...request.Option) (*opsworks.DescribeVolumesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeVolumes cancelled", ctx.Err())
	default:
		return d.DescribeVolumes(in)
	}
}

func (d *OpsWorksDouble) DetachElasticLoadBalancer(i0 *opsworks.DetachElasticLoadBalancerInput) (r0 *opsworks.DetachElasticLoadBalancerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachElasticLoadBalancer", i0)
	r0, _ = returns[0].(*opsworks.DetachElasticLoadBalancerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) DetachElasticLoadBalancerRequest(i0 *opsworks.DetachElasticLoadBalancerInput) (r0 *request.Request, r1 *opsworks.DetachElasticLoadBalancerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachElasticLoadBalancerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.DetachElasticLoadBalancerOutput)
	return
}

func (d *OpsWorksDouble) DetachElasticLoadBalancerWithContext(i0 context.Context, i1 *opsworks.DetachElasticLoadBalancerInput, i2 ...request.Option) (r0 *opsworks.DetachElasticLoadBalancerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachElasticLoadBalancerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.DetachElasticLoadBalancerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeDetachElasticLoadBalancerWithContext(ctx context.Context, in *opsworks.DetachElasticLoadBalancerInput, _ ...request.Option) (*opsworks.DetachElasticLoadBalancerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DetachElasticLoadBalancer cancelled", ctx.Err())
	default:
		return d.DetachElasticLoadBalancer(in)
	}
}

func (d *OpsWorksDouble) DisassociateElasticIp(i0 *opsworks.DisassociateElasticIpInput) (r0 *opsworks.DisassociateElasticIpOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateElasticIp", i0)
	r0, _ = returns[0].(*opsworks.DisassociateElasticIpOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) DisassociateElasticIpRequest(i0 *opsworks.DisassociateElasticIpInput) (r0 *request.Request, r1 *opsworks.DisassociateElasticIpOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateElasticIpRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.DisassociateElasticIpOutput)
	return
}

func (d *OpsWorksDouble) DisassociateElasticIpWithContext(i0 context.Context, i1 *opsworks.DisassociateElasticIpInput, i2 ...request.Option) (r0 *opsworks.DisassociateElasticIpOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateElasticIpWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.DisassociateElasticIpOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeDisassociateElasticIpWithContext(ctx context.Context, in *opsworks.DisassociateElasticIpInput, _ ...request.Option) (*opsworks.DisassociateElasticIpOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateElasticIp cancelled", ctx.Err())
	default:
		return d.DisassociateElasticIp(in)
	}
}

func (d *OpsWorksDouble) GetHostnameSuggestion(i0 *opsworks.GetHostnameSuggestionInput) (r0 *opsworks.GetHostnameSuggestionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetHostnameSuggestion", i0)
	r0, _ = returns[0].(*opsworks.GetHostnameSuggestionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) GetHostnameSuggestionRequest(i0 *opsworks.GetHostnameSuggestionInput) (r0 *request.Request, r1 *opsworks.GetHostnameSuggestionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetHostnameSuggestionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.GetHostnameSuggestionOutput)
	return
}

func (d *OpsWorksDouble) GetHostnameSuggestionWithContext(i0 context.Context, i1 *opsworks.GetHostnameSuggestionInput, i2 ...request.Option) (r0 *opsworks.GetHostnameSuggestionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetHostnameSuggestionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.GetHostnameSuggestionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeGetHostnameSuggestionWithContext(ctx context.Context, in *opsworks.GetHostnameSuggestionInput, _ ...request.Option) (*opsworks.GetHostnameSuggestionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetHostnameSuggestion cancelled", ctx.Err())
	default:
		return d.GetHostnameSuggestion(in)
	}
}

func (d *OpsWorksDouble) GrantAccess(i0 *opsworks.GrantAccessInput) (r0 *opsworks.GrantAccessOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GrantAccess", i0)
	r0, _ = returns[0].(*opsworks.GrantAccessOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) GrantAccessRequest(i0 *opsworks.GrantAccessInput) (r0 *request.Request, r1 *opsworks.GrantAccessOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GrantAccessRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.GrantAccessOutput)
	return
}

func (d *OpsWorksDouble) GrantAccessWithContext(i0 context.Context, i1 *opsworks.GrantAccessInput, i2 ...request.Option) (r0 *opsworks.GrantAccessOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GrantAccessWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.GrantAccessOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeGrantAccessWithContext(ctx context.Context, in *opsworks.GrantAccessInput, _ ...request.Option) (*opsworks.GrantAccessOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GrantAccess cancelled", ctx.Err())
	default:
		return d.GrantAccess(in)
	}
}

func (d *OpsWorksDouble) ListTags(i0 *opsworks.ListTagsInput) (r0 *opsworks.ListTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTags", i0)
	r0, _ = returns[0].(*opsworks.ListTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) ListTagsRequest(i0 *opsworks.ListTagsInput) (r0 *request.Request, r1 *opsworks.ListTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.ListTagsOutput)
	return
}

func (d *OpsWorksDouble) ListTagsWithContext(i0 context.Context, i1 *opsworks.ListTagsInput, i2 ...request.Option) (r0 *opsworks.ListTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.ListTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeListTagsWithContext(ctx context.Context, in *opsworks.ListTagsInput, _ ...request.Option) (*opsworks.ListTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTags cancelled", ctx.Err())
	default:
		return d.ListTags(in)
	}
}

func (d *OpsWorksDouble) RebootInstance(i0 *opsworks.RebootInstanceInput) (r0 *opsworks.RebootInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebootInstance", i0)
	r0, _ = returns[0].(*opsworks.RebootInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) RebootInstanceRequest(i0 *opsworks.RebootInstanceInput) (r0 *request.Request, r1 *opsworks.RebootInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebootInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.RebootInstanceOutput)
	return
}

func (d *OpsWorksDouble) RebootInstanceWithContext(i0 context.Context, i1 *opsworks.RebootInstanceInput, i2 ...request.Option) (r0 *opsworks.RebootInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebootInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.RebootInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeRebootInstanceWithContext(ctx context.Context, in *opsworks.RebootInstanceInput, _ ...request.Option) (*opsworks.RebootInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RebootInstance cancelled", ctx.Err())
	default:
		return d.RebootInstance(in)
	}
}

func (d *OpsWorksDouble) RegisterEcsCluster(i0 *opsworks.RegisterEcsClusterInput) (r0 *opsworks.RegisterEcsClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterEcsCluster", i0)
	r0, _ = returns[0].(*opsworks.RegisterEcsClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) RegisterEcsClusterRequest(i0 *opsworks.RegisterEcsClusterInput) (r0 *request.Request, r1 *opsworks.RegisterEcsClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterEcsClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.RegisterEcsClusterOutput)
	return
}

func (d *OpsWorksDouble) RegisterEcsClusterWithContext(i0 context.Context, i1 *opsworks.RegisterEcsClusterInput, i2 ...request.Option) (r0 *opsworks.RegisterEcsClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterEcsClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.RegisterEcsClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeRegisterEcsClusterWithContext(ctx context.Context, in *opsworks.RegisterEcsClusterInput, _ ...request.Option) (*opsworks.RegisterEcsClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterEcsCluster cancelled", ctx.Err())
	default:
		return d.RegisterEcsCluster(in)
	}
}

func (d *OpsWorksDouble) RegisterElasticIp(i0 *opsworks.RegisterElasticIpInput) (r0 *opsworks.RegisterElasticIpOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterElasticIp", i0)
	r0, _ = returns[0].(*opsworks.RegisterElasticIpOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) RegisterElasticIpRequest(i0 *opsworks.RegisterElasticIpInput) (r0 *request.Request, r1 *opsworks.RegisterElasticIpOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterElasticIpRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.RegisterElasticIpOutput)
	return
}

func (d *OpsWorksDouble) RegisterElasticIpWithContext(i0 context.Context, i1 *opsworks.RegisterElasticIpInput, i2 ...request.Option) (r0 *opsworks.RegisterElasticIpOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterElasticIpWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.RegisterElasticIpOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeRegisterElasticIpWithContext(ctx context.Context, in *opsworks.RegisterElasticIpInput, _ ...request.Option) (*opsworks.RegisterElasticIpOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterElasticIp cancelled", ctx.Err())
	default:
		return d.RegisterElasticIp(in)
	}
}

func (d *OpsWorksDouble) RegisterInstance(i0 *opsworks.RegisterInstanceInput) (r0 *opsworks.RegisterInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterInstance", i0)
	r0, _ = returns[0].(*opsworks.RegisterInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) RegisterInstanceRequest(i0 *opsworks.RegisterInstanceInput) (r0 *request.Request, r1 *opsworks.RegisterInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.RegisterInstanceOutput)
	return
}

func (d *OpsWorksDouble) RegisterInstanceWithContext(i0 context.Context, i1 *opsworks.RegisterInstanceInput, i2 ...request.Option) (r0 *opsworks.RegisterInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.RegisterInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeRegisterInstanceWithContext(ctx context.Context, in *opsworks.RegisterInstanceInput, _ ...request.Option) (*opsworks.RegisterInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterInstance cancelled", ctx.Err())
	default:
		return d.RegisterInstance(in)
	}
}

func (d *OpsWorksDouble) RegisterRdsDbInstance(i0 *opsworks.RegisterRdsDbInstanceInput) (r0 *opsworks.RegisterRdsDbInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterRdsDbInstance", i0)
	r0, _ = returns[0].(*opsworks.RegisterRdsDbInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) RegisterRdsDbInstanceRequest(i0 *opsworks.RegisterRdsDbInstanceInput) (r0 *request.Request, r1 *opsworks.RegisterRdsDbInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterRdsDbInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.RegisterRdsDbInstanceOutput)
	return
}

func (d *OpsWorksDouble) RegisterRdsDbInstanceWithContext(i0 context.Context, i1 *opsworks.RegisterRdsDbInstanceInput, i2 ...request.Option) (r0 *opsworks.RegisterRdsDbInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterRdsDbInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.RegisterRdsDbInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeRegisterRdsDbInstanceWithContext(ctx context.Context, in *opsworks.RegisterRdsDbInstanceInput, _ ...request.Option) (*opsworks.RegisterRdsDbInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterRdsDbInstance cancelled", ctx.Err())
	default:
		return d.RegisterRdsDbInstance(in)
	}
}

func (d *OpsWorksDouble) RegisterVolume(i0 *opsworks.RegisterVolumeInput) (r0 *opsworks.RegisterVolumeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterVolume", i0)
	r0, _ = returns[0].(*opsworks.RegisterVolumeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) RegisterVolumeRequest(i0 *opsworks.RegisterVolumeInput) (r0 *request.Request, r1 *opsworks.RegisterVolumeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterVolumeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.RegisterVolumeOutput)
	return
}

func (d *OpsWorksDouble) RegisterVolumeWithContext(i0 context.Context, i1 *opsworks.RegisterVolumeInput, i2 ...request.Option) (r0 *opsworks.RegisterVolumeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterVolumeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.RegisterVolumeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeRegisterVolumeWithContext(ctx context.Context, in *opsworks.RegisterVolumeInput, _ ...request.Option) (*opsworks.RegisterVolumeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterVolume cancelled", ctx.Err())
	default:
		return d.RegisterVolume(in)
	}
}

func (d *OpsWorksDouble) SetLoadBasedAutoScaling(i0 *opsworks.SetLoadBasedAutoScalingInput) (r0 *opsworks.SetLoadBasedAutoScalingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetLoadBasedAutoScaling", i0)
	r0, _ = returns[0].(*opsworks.SetLoadBasedAutoScalingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) SetLoadBasedAutoScalingRequest(i0 *opsworks.SetLoadBasedAutoScalingInput) (r0 *request.Request, r1 *opsworks.SetLoadBasedAutoScalingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetLoadBasedAutoScalingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.SetLoadBasedAutoScalingOutput)
	return
}

func (d *OpsWorksDouble) SetLoadBasedAutoScalingWithContext(i0 context.Context, i1 *opsworks.SetLoadBasedAutoScalingInput, i2 ...request.Option) (r0 *opsworks.SetLoadBasedAutoScalingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetLoadBasedAutoScalingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.SetLoadBasedAutoScalingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeSetLoadBasedAutoScalingWithContext(ctx context.Context, in *opsworks.SetLoadBasedAutoScalingInput, _ ...request.Option) (*opsworks.SetLoadBasedAutoScalingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetLoadBasedAutoScaling cancelled", ctx.Err())
	default:
		return d.SetLoadBasedAutoScaling(in)
	}
}

func (d *OpsWorksDouble) SetPermission(i0 *opsworks.SetPermissionInput) (r0 *opsworks.SetPermissionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetPermission", i0)
	r0, _ = returns[0].(*opsworks.SetPermissionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) SetPermissionRequest(i0 *opsworks.SetPermissionInput) (r0 *request.Request, r1 *opsworks.SetPermissionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetPermissionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.SetPermissionOutput)
	return
}

func (d *OpsWorksDouble) SetPermissionWithContext(i0 context.Context, i1 *opsworks.SetPermissionInput, i2 ...request.Option) (r0 *opsworks.SetPermissionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetPermissionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.SetPermissionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeSetPermissionWithContext(ctx context.Context, in *opsworks.SetPermissionInput, _ ...request.Option) (*opsworks.SetPermissionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetPermission cancelled", ctx.Err())
	default:
		return d.SetPermission(in)
	}
}

func (d *OpsWorksDouble) SetTimeBasedAutoScaling(i0 *opsworks.SetTimeBasedAutoScalingInput) (r0 *opsworks.SetTimeBasedAutoScalingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetTimeBasedAutoScaling", i0)
	r0, _ = returns[0].(*opsworks.SetTimeBasedAutoScalingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) SetTimeBasedAutoScalingRequest(i0 *opsworks.SetTimeBasedAutoScalingInput) (r0 *request.Request, r1 *opsworks.SetTimeBasedAutoScalingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetTimeBasedAutoScalingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.SetTimeBasedAutoScalingOutput)
	return
}

func (d *OpsWorksDouble) SetTimeBasedAutoScalingWithContext(i0 context.Context, i1 *opsworks.SetTimeBasedAutoScalingInput, i2 ...request.Option) (r0 *opsworks.SetTimeBasedAutoScalingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetTimeBasedAutoScalingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.SetTimeBasedAutoScalingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeSetTimeBasedAutoScalingWithContext(ctx context.Context, in *opsworks.SetTimeBasedAutoScalingInput, _ ...request.Option) (*opsworks.SetTimeBasedAutoScalingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetTimeBasedAutoScaling cancelled", ctx.Err())
	default:
		return d.SetTimeBasedAutoScaling(in)
	}
}

func (d *OpsWorksDouble) StartInstance(i0 *opsworks.StartInstanceInput) (r0 *opsworks.StartInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartInstance", i0)
	r0, _ = returns[0].(*opsworks.StartInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) StartInstanceRequest(i0 *opsworks.StartInstanceInput) (r0 *request.Request, r1 *opsworks.StartInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.StartInstanceOutput)
	return
}

func (d *OpsWorksDouble) StartInstanceWithContext(i0 context.Context, i1 *opsworks.StartInstanceInput, i2 ...request.Option) (r0 *opsworks.StartInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.StartInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeStartInstanceWithContext(ctx context.Context, in *opsworks.StartInstanceInput, _ ...request.Option) (*opsworks.StartInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartInstance cancelled", ctx.Err())
	default:
		return d.StartInstance(in)
	}
}

func (d *OpsWorksDouble) StartStack(i0 *opsworks.StartStackInput) (r0 *opsworks.StartStackOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartStack", i0)
	r0, _ = returns[0].(*opsworks.StartStackOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) StartStackRequest(i0 *opsworks.StartStackInput) (r0 *request.Request, r1 *opsworks.StartStackOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartStackRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.StartStackOutput)
	return
}

func (d *OpsWorksDouble) StartStackWithContext(i0 context.Context, i1 *opsworks.StartStackInput, i2 ...request.Option) (r0 *opsworks.StartStackOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartStackWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.StartStackOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeStartStackWithContext(ctx context.Context, in *opsworks.StartStackInput, _ ...request.Option) (*opsworks.StartStackOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartStack cancelled", ctx.Err())
	default:
		return d.StartStack(in)
	}
}

func (d *OpsWorksDouble) StopInstance(i0 *opsworks.StopInstanceInput) (r0 *opsworks.StopInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopInstance", i0)
	r0, _ = returns[0].(*opsworks.StopInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) StopInstanceRequest(i0 *opsworks.StopInstanceInput) (r0 *request.Request, r1 *opsworks.StopInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.StopInstanceOutput)
	return
}

func (d *OpsWorksDouble) StopInstanceWithContext(i0 context.Context, i1 *opsworks.StopInstanceInput, i2 ...request.Option) (r0 *opsworks.StopInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.StopInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeStopInstanceWithContext(ctx context.Context, in *opsworks.StopInstanceInput, _ ...request.Option) (*opsworks.StopInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopInstance cancelled", ctx.Err())
	default:
		return d.StopInstance(in)
	}
}

func (d *OpsWorksDouble) StopStack(i0 *opsworks.StopStackInput) (r0 *opsworks.StopStackOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopStack", i0)
	r0, _ = returns[0].(*opsworks.StopStackOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) StopStackRequest(i0 *opsworks.StopStackInput) (r0 *request.Request, r1 *opsworks.StopStackOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopStackRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.StopStackOutput)
	return
}

func (d *OpsWorksDouble) StopStackWithContext(i0 context.Context, i1 *opsworks.StopStackInput, i2 ...request.Option) (r0 *opsworks.StopStackOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopStackWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.StopStackOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeStopStackWithContext(ctx context.Context, in *opsworks.StopStackInput, _ ...request.Option) (*opsworks.StopStackOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopStack cancelled", ctx.Err())
	default:
		return d.StopStack(in)
	}
}

func (d *OpsWorksDouble) TagResource(i0 *opsworks.TagResourceInput) (r0 *opsworks.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*opsworks.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) TagResourceRequest(i0 *opsworks.TagResourceInput) (r0 *request.Request, r1 *opsworks.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.TagResourceOutput)
	return
}

func (d *OpsWorksDouble) TagResourceWithContext(i0 context.Context, i1 *opsworks.TagResourceInput, i2 ...request.Option) (r0 *opsworks.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeTagResourceWithContext(ctx context.Context, in *opsworks.TagResourceInput, _ ...request.Option) (*opsworks.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *OpsWorksDouble) UnassignInstance(i0 *opsworks.UnassignInstanceInput) (r0 *opsworks.UnassignInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnassignInstance", i0)
	r0, _ = returns[0].(*opsworks.UnassignInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) UnassignInstanceRequest(i0 *opsworks.UnassignInstanceInput) (r0 *request.Request, r1 *opsworks.UnassignInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnassignInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.UnassignInstanceOutput)
	return
}

func (d *OpsWorksDouble) UnassignInstanceWithContext(i0 context.Context, i1 *opsworks.UnassignInstanceInput, i2 ...request.Option) (r0 *opsworks.UnassignInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnassignInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.UnassignInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeUnassignInstanceWithContext(ctx context.Context, in *opsworks.UnassignInstanceInput, _ ...request.Option) (*opsworks.UnassignInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UnassignInstance cancelled", ctx.Err())
	default:
		return d.UnassignInstance(in)
	}
}

func (d *OpsWorksDouble) UnassignVolume(i0 *opsworks.UnassignVolumeInput) (r0 *opsworks.UnassignVolumeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnassignVolume", i0)
	r0, _ = returns[0].(*opsworks.UnassignVolumeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) UnassignVolumeRequest(i0 *opsworks.UnassignVolumeInput) (r0 *request.Request, r1 *opsworks.UnassignVolumeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnassignVolumeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.UnassignVolumeOutput)
	return
}

func (d *OpsWorksDouble) UnassignVolumeWithContext(i0 context.Context, i1 *opsworks.UnassignVolumeInput, i2 ...request.Option) (r0 *opsworks.UnassignVolumeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnassignVolumeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.UnassignVolumeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeUnassignVolumeWithContext(ctx context.Context, in *opsworks.UnassignVolumeInput, _ ...request.Option) (*opsworks.UnassignVolumeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UnassignVolume cancelled", ctx.Err())
	default:
		return d.UnassignVolume(in)
	}
}

func (d *OpsWorksDouble) UntagResource(i0 *opsworks.UntagResourceInput) (r0 *opsworks.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*opsworks.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) UntagResourceRequest(i0 *opsworks.UntagResourceInput) (r0 *request.Request, r1 *opsworks.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.UntagResourceOutput)
	return
}

func (d *OpsWorksDouble) UntagResourceWithContext(i0 context.Context, i1 *opsworks.UntagResourceInput, i2 ...request.Option) (r0 *opsworks.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeUntagResourceWithContext(ctx context.Context, in *opsworks.UntagResourceInput, _ ...request.Option) (*opsworks.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *OpsWorksDouble) UpdateApp(i0 *opsworks.UpdateAppInput) (r0 *opsworks.UpdateAppOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApp", i0)
	r0, _ = returns[0].(*opsworks.UpdateAppOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) UpdateAppRequest(i0 *opsworks.UpdateAppInput) (r0 *request.Request, r1 *opsworks.UpdateAppOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAppRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.UpdateAppOutput)
	return
}

func (d *OpsWorksDouble) UpdateAppWithContext(i0 context.Context, i1 *opsworks.UpdateAppInput, i2 ...request.Option) (r0 *opsworks.UpdateAppOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAppWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.UpdateAppOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeUpdateAppWithContext(ctx context.Context, in *opsworks.UpdateAppInput, _ ...request.Option) (*opsworks.UpdateAppOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateApp cancelled", ctx.Err())
	default:
		return d.UpdateApp(in)
	}
}

func (d *OpsWorksDouble) UpdateElasticIp(i0 *opsworks.UpdateElasticIpInput) (r0 *opsworks.UpdateElasticIpOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateElasticIp", i0)
	r0, _ = returns[0].(*opsworks.UpdateElasticIpOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) UpdateElasticIpRequest(i0 *opsworks.UpdateElasticIpInput) (r0 *request.Request, r1 *opsworks.UpdateElasticIpOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateElasticIpRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.UpdateElasticIpOutput)
	return
}

func (d *OpsWorksDouble) UpdateElasticIpWithContext(i0 context.Context, i1 *opsworks.UpdateElasticIpInput, i2 ...request.Option) (r0 *opsworks.UpdateElasticIpOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateElasticIpWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.UpdateElasticIpOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeUpdateElasticIpWithContext(ctx context.Context, in *opsworks.UpdateElasticIpInput, _ ...request.Option) (*opsworks.UpdateElasticIpOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateElasticIp cancelled", ctx.Err())
	default:
		return d.UpdateElasticIp(in)
	}
}

func (d *OpsWorksDouble) UpdateInstance(i0 *opsworks.UpdateInstanceInput) (r0 *opsworks.UpdateInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateInstance", i0)
	r0, _ = returns[0].(*opsworks.UpdateInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) UpdateInstanceRequest(i0 *opsworks.UpdateInstanceInput) (r0 *request.Request, r1 *opsworks.UpdateInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.UpdateInstanceOutput)
	return
}

func (d *OpsWorksDouble) UpdateInstanceWithContext(i0 context.Context, i1 *opsworks.UpdateInstanceInput, i2 ...request.Option) (r0 *opsworks.UpdateInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.UpdateInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeUpdateInstanceWithContext(ctx context.Context, in *opsworks.UpdateInstanceInput, _ ...request.Option) (*opsworks.UpdateInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateInstance cancelled", ctx.Err())
	default:
		return d.UpdateInstance(in)
	}
}

func (d *OpsWorksDouble) UpdateLayer(i0 *opsworks.UpdateLayerInput) (r0 *opsworks.UpdateLayerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateLayer", i0)
	r0, _ = returns[0].(*opsworks.UpdateLayerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) UpdateLayerRequest(i0 *opsworks.UpdateLayerInput) (r0 *request.Request, r1 *opsworks.UpdateLayerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateLayerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.UpdateLayerOutput)
	return
}

func (d *OpsWorksDouble) UpdateLayerWithContext(i0 context.Context, i1 *opsworks.UpdateLayerInput, i2 ...request.Option) (r0 *opsworks.UpdateLayerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateLayerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.UpdateLayerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeUpdateLayerWithContext(ctx context.Context, in *opsworks.UpdateLayerInput, _ ...request.Option) (*opsworks.UpdateLayerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateLayer cancelled", ctx.Err())
	default:
		return d.UpdateLayer(in)
	}
}

func (d *OpsWorksDouble) UpdateMyUserProfile(i0 *opsworks.UpdateMyUserProfileInput) (r0 *opsworks.UpdateMyUserProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMyUserProfile", i0)
	r0, _ = returns[0].(*opsworks.UpdateMyUserProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) UpdateMyUserProfileRequest(i0 *opsworks.UpdateMyUserProfileInput) (r0 *request.Request, r1 *opsworks.UpdateMyUserProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMyUserProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.UpdateMyUserProfileOutput)
	return
}

func (d *OpsWorksDouble) UpdateMyUserProfileWithContext(i0 context.Context, i1 *opsworks.UpdateMyUserProfileInput, i2 ...request.Option) (r0 *opsworks.UpdateMyUserProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMyUserProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.UpdateMyUserProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeUpdateMyUserProfileWithContext(ctx context.Context, in *opsworks.UpdateMyUserProfileInput, _ ...request.Option) (*opsworks.UpdateMyUserProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateMyUserProfile cancelled", ctx.Err())
	default:
		return d.UpdateMyUserProfile(in)
	}
}

func (d *OpsWorksDouble) UpdateRdsDbInstance(i0 *opsworks.UpdateRdsDbInstanceInput) (r0 *opsworks.UpdateRdsDbInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRdsDbInstance", i0)
	r0, _ = returns[0].(*opsworks.UpdateRdsDbInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) UpdateRdsDbInstanceRequest(i0 *opsworks.UpdateRdsDbInstanceInput) (r0 *request.Request, r1 *opsworks.UpdateRdsDbInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRdsDbInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.UpdateRdsDbInstanceOutput)
	return
}

func (d *OpsWorksDouble) UpdateRdsDbInstanceWithContext(i0 context.Context, i1 *opsworks.UpdateRdsDbInstanceInput, i2 ...request.Option) (r0 *opsworks.UpdateRdsDbInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRdsDbInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.UpdateRdsDbInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeUpdateRdsDbInstanceWithContext(ctx context.Context, in *opsworks.UpdateRdsDbInstanceInput, _ ...request.Option) (*opsworks.UpdateRdsDbInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateRdsDbInstance cancelled", ctx.Err())
	default:
		return d.UpdateRdsDbInstance(in)
	}
}

func (d *OpsWorksDouble) UpdateStack(i0 *opsworks.UpdateStackInput) (r0 *opsworks.UpdateStackOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateStack", i0)
	r0, _ = returns[0].(*opsworks.UpdateStackOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) UpdateStackRequest(i0 *opsworks.UpdateStackInput) (r0 *request.Request, r1 *opsworks.UpdateStackOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateStackRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.UpdateStackOutput)
	return
}

func (d *OpsWorksDouble) UpdateStackWithContext(i0 context.Context, i1 *opsworks.UpdateStackInput, i2 ...request.Option) (r0 *opsworks.UpdateStackOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateStackWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.UpdateStackOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeUpdateStackWithContext(ctx context.Context, in *opsworks.UpdateStackInput, _ ...request.Option) (*opsworks.UpdateStackOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateStack cancelled", ctx.Err())
	default:
		return d.UpdateStack(in)
	}
}

func (d *OpsWorksDouble) UpdateUserProfile(i0 *opsworks.UpdateUserProfileInput) (r0 *opsworks.UpdateUserProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserProfile", i0)
	r0, _ = returns[0].(*opsworks.UpdateUserProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) UpdateUserProfileRequest(i0 *opsworks.UpdateUserProfileInput) (r0 *request.Request, r1 *opsworks.UpdateUserProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.UpdateUserProfileOutput)
	return
}

func (d *OpsWorksDouble) UpdateUserProfileWithContext(i0 context.Context, i1 *opsworks.UpdateUserProfileInput, i2 ...request.Option) (r0 *opsworks.UpdateUserProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.UpdateUserProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeUpdateUserProfileWithContext(ctx context.Context, in *opsworks.UpdateUserProfileInput, _ ...request.Option) (*opsworks.UpdateUserProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateUserProfile cancelled", ctx.Err())
	default:
		return d.UpdateUserProfile(in)
	}
}

func (d *OpsWorksDouble) UpdateVolume(i0 *opsworks.UpdateVolumeInput) (r0 *opsworks.UpdateVolumeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateVolume", i0)
	r0, _ = returns[0].(*opsworks.UpdateVolumeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) UpdateVolumeRequest(i0 *opsworks.UpdateVolumeInput) (r0 *request.Request, r1 *opsworks.UpdateVolumeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateVolumeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworks.UpdateVolumeOutput)
	return
}

func (d *OpsWorksDouble) UpdateVolumeWithContext(i0 context.Context, i1 *opsworks.UpdateVolumeInput, i2 ...request.Option) (r0 *opsworks.UpdateVolumeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateVolumeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworks.UpdateVolumeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksDouble) fakeUpdateVolumeWithContext(ctx context.Context, in *opsworks.UpdateVolumeInput, _ ...request.Option) (*opsworks.UpdateVolumeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateVolume cancelled", ctx.Err())
	default:
		return d.UpdateVolume(in)
	}
}

func (d *OpsWorksDouble) WaitUntilAppExists(i0 *opsworks.DescribeAppsInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilAppExists", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *OpsWorksDouble) fakeWaitUntilAppExists(in *opsworks.DescribeAppsInput) error {
	return d.WaitUntil("AppExists", waiters, in)
}

func (d *OpsWorksDouble) WaitUntilAppExistsWithContext(i0 context.Context, i1 *opsworks.DescribeAppsInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilAppExistsWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *OpsWorksDouble) fakeWaitUntilAppExistsWithContext(ctx context.Context, in *opsworks.DescribeAppsInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("AppExists", waiters, ctx, in, waitOption...)
}

func (d *OpsWorksDouble) WaitUntilDeploymentSuccessful(i0 *opsworks.DescribeDeploymentsInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilDeploymentSuccessful", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *OpsWorksDouble) fakeWaitUntilDeploymentSuccessful(in *opsworks.DescribeDeploymentsInput) error {
	return d.WaitUntil("DeploymentSuccessful", waiters, in)
}

func (d *OpsWorksDouble) WaitUntilDeploymentSuccessfulWithContext(i0 context.Context, i1 *opsworks.DescribeDeploymentsInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilDeploymentSuccessfulWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *OpsWorksDouble) fakeWaitUntilDeploymentSuccessfulWithContext(ctx context.Context, in *opsworks.DescribeDeploymentsInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("DeploymentSuccessful", waiters, ctx, in, waitOption...)
}

func (d *OpsWorksDouble) WaitUntilInstanceOnline(i0 *opsworks.DescribeInstancesInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilInstanceOnline", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *OpsWorksDouble) fakeWaitUntilInstanceOnline(in *opsworks.DescribeInstancesInput) error {
	return d.WaitUntil("InstanceOnline", waiters, in)
}

func (d *OpsWorksDouble) WaitUntilInstanceOnlineWithContext(i0 context.Context, i1 *opsworks.DescribeInstancesInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilInstanceOnlineWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *OpsWorksDouble) fakeWaitUntilInstanceOnlineWithContext(ctx context.Context, in *opsworks.DescribeInstancesInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("InstanceOnline", waiters, ctx, in, waitOption...)
}

func (d *OpsWorksDouble) WaitUntilInstanceRegistered(i0 *opsworks.DescribeInstancesInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilInstanceRegistered", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *OpsWorksDouble) fakeWaitUntilInstanceRegistered(in *opsworks.DescribeInstancesInput) error {
	return d.WaitUntil("InstanceRegistered", waiters, in)
}

func (d *OpsWorksDouble) WaitUntilInstanceRegisteredWithContext(i0 context.Context, i1 *opsworks.DescribeInstancesInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilInstanceRegisteredWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *OpsWorksDouble) fakeWaitUntilInstanceRegisteredWithContext(ctx context.Context, in *opsworks.DescribeInstancesInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("InstanceRegistered", waiters, ctx, in, waitOption...)
}

func (d *OpsWorksDouble) WaitUntilInstanceStopped(i0 *opsworks.DescribeInstancesInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilInstanceStopped", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *OpsWorksDouble) fakeWaitUntilInstanceStopped(in *opsworks.DescribeInstancesInput) error {
	return d.WaitUntil("InstanceStopped", waiters, in)
}

func (d *OpsWorksDouble) WaitUntilInstanceStoppedWithContext(i0 context.Context, i1 *opsworks.DescribeInstancesInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilInstanceStoppedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *OpsWorksDouble) fakeWaitUntilInstanceStoppedWithContext(ctx context.Context, in *opsworks.DescribeInstancesInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("InstanceStopped", waiters, ctx, in, waitOption...)
}

func (d *OpsWorksDouble) WaitUntilInstanceTerminated(i0 *opsworks.DescribeInstancesInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilInstanceTerminated", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *OpsWorksDouble) fakeWaitUntilInstanceTerminated(in *opsworks.DescribeInstancesInput) error {
	return d.WaitUntil("InstanceTerminated", waiters, in)
}

func (d *OpsWorksDouble) WaitUntilInstanceTerminatedWithContext(i0 context.Context, i1 *opsworks.DescribeInstancesInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilInstanceTerminatedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *OpsWorksDouble) fakeWaitUntilInstanceTerminatedWithContext(ctx context.Context, in *opsworks.DescribeInstancesInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("InstanceTerminated", waiters, ctx, in, waitOption...)
}
