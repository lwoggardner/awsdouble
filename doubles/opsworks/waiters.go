// Code generated by go awsdoublegen; DO NOT EDIT.
// This file was generated at 2020-01-29T21:22:05+11:00
package opsworksdouble

import (
	"time"

	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/lwoggardner/awsdouble"
)

var waiters = map[string]*awsdouble.Waiter{

	"AppExists": &awsdouble.Waiter{
		OperationName: "DescribeApps",
		Waiter: request.Waiter{
			Name:        "WaitUntilAppExists",
			MaxAttempts: 40,
			Delay:       request.ConstantWaiterDelay(1 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:    request.SuccessWaiterState,
					Matcher:  request.StatusWaiterMatch,
					Expected: 200,
				},
				{
					State:    request.FailureWaiterState,
					Matcher:  request.StatusWaiterMatch,
					Expected: 400,
				},
			},
		},
	},

	"DeploymentSuccessful": &awsdouble.Waiter{
		OperationName: "DescribeDeployments",
		Waiter: request.Waiter{
			Name:        "WaitUntilDeploymentSuccessful",
			MaxAttempts: 40,
			Delay:       request.ConstantWaiterDelay(15 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathAllWaiterMatch, Argument: "Deployments[].Status",
					Expected: "successful",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Deployments[].Status",
					Expected: "failed",
				},
			},
		},
	},

	"InstanceOnline": &awsdouble.Waiter{
		OperationName: "DescribeInstances",
		Waiter: request.Waiter{
			Name:        "WaitUntilInstanceOnline",
			MaxAttempts: 40,
			Delay:       request.ConstantWaiterDelay(15 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathAllWaiterMatch, Argument: "Instances[].Status",
					Expected: "online",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Instances[].Status",
					Expected: "setup_failed",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Instances[].Status",
					Expected: "shutting_down",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Instances[].Status",
					Expected: "start_failed",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Instances[].Status",
					Expected: "stopped",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Instances[].Status",
					Expected: "stopping",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Instances[].Status",
					Expected: "terminating",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Instances[].Status",
					Expected: "terminated",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Instances[].Status",
					Expected: "stop_failed",
				},
			},
		},
	},

	"InstanceRegistered": &awsdouble.Waiter{
		OperationName: "DescribeInstances",
		Waiter: request.Waiter{
			Name:        "WaitUntilInstanceRegistered",
			MaxAttempts: 40,
			Delay:       request.ConstantWaiterDelay(15 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathAllWaiterMatch, Argument: "Instances[].Status",
					Expected: "registered",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Instances[].Status",
					Expected: "setup_failed",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Instances[].Status",
					Expected: "shutting_down",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Instances[].Status",
					Expected: "stopped",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Instances[].Status",
					Expected: "stopping",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Instances[].Status",
					Expected: "terminating",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Instances[].Status",
					Expected: "terminated",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Instances[].Status",
					Expected: "stop_failed",
				},
			},
		},
	},

	"InstanceStopped": &awsdouble.Waiter{
		OperationName: "DescribeInstances",
		Waiter: request.Waiter{
			Name:        "WaitUntilInstanceStopped",
			MaxAttempts: 40,
			Delay:       request.ConstantWaiterDelay(15 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathAllWaiterMatch, Argument: "Instances[].Status",
					Expected: "stopped",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Instances[].Status",
					Expected: "booting",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Instances[].Status",
					Expected: "pending",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Instances[].Status",
					Expected: "rebooting",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Instances[].Status",
					Expected: "requested",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Instances[].Status",
					Expected: "running_setup",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Instances[].Status",
					Expected: "setup_failed",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Instances[].Status",
					Expected: "start_failed",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Instances[].Status",
					Expected: "stop_failed",
				},
			},
		},
	},

	"InstanceTerminated": &awsdouble.Waiter{
		OperationName: "DescribeInstances",
		Waiter: request.Waiter{
			Name:        "WaitUntilInstanceTerminated",
			MaxAttempts: 40,
			Delay:       request.ConstantWaiterDelay(15 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathAllWaiterMatch, Argument: "Instances[].Status",
					Expected: "terminated",
				},
				{
					State:    request.SuccessWaiterState,
					Matcher:  request.ErrorWaiterMatch,
					Expected: "ResourceNotFoundException",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Instances[].Status",
					Expected: "booting",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Instances[].Status",
					Expected: "online",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Instances[].Status",
					Expected: "pending",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Instances[].Status",
					Expected: "rebooting",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Instances[].Status",
					Expected: "requested",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Instances[].Status",
					Expected: "running_setup",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Instances[].Status",
					Expected: "setup_failed",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Instances[].Status",
					Expected: "start_failed",
				},
			},
		},
	},
}
