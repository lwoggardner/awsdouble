// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:13:19+11:00

// Package iotjobsdataplanedouble provides a TestDouble implementation of iotjobsdataplaneiface.IoTJobsDataPlaneAPI
package iotjobsdataplanedouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/iotjobsdataplane"
	"github.com/aws/aws-sdk-go/service/iotjobsdataplane/iotjobsdataplaneiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// IoTJobsDataPlaneDouble is TestDouble for iotjobsdataplaneiface.IoTJobsDataPlaneAPI
type IoTJobsDataPlaneDouble struct {
	iotjobsdataplaneiface.IoTJobsDataPlaneAPI
	*awsdouble.AWSTestDouble
}

// Constructor for IoTJobsDataPlaneDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *IoTJobsDataPlaneDouble {
	result := &IoTJobsDataPlaneDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*iotjobsdataplaneiface.IoTJobsDataPlaneAPI)(nil), configurators...)
	return result
}

func (d *IoTJobsDataPlaneDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *IoTJobsDataPlaneDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "DescribeJobExecutionWithContext":
		return m.Fake(d.fakeDescribeJobExecutionWithContext)

	case "GetPendingJobExecutionsWithContext":
		return m.Fake(d.fakeGetPendingJobExecutionsWithContext)

	case "StartNextPendingJobExecutionWithContext":
		return m.Fake(d.fakeStartNextPendingJobExecutionWithContext)

	case "UpdateJobExecutionWithContext":
		return m.Fake(d.fakeUpdateJobExecutionWithContext)

	default:
		return nil
	}
}

func (d *IoTJobsDataPlaneDouble) DescribeJobExecution(i0 *iotjobsdataplane.DescribeJobExecutionInput) (r0 *iotjobsdataplane.DescribeJobExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeJobExecution", i0)
	r0, _ = returns[0].(*iotjobsdataplane.DescribeJobExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTJobsDataPlaneDouble) DescribeJobExecutionRequest(i0 *iotjobsdataplane.DescribeJobExecutionInput) (r0 *request.Request, r1 *iotjobsdataplane.DescribeJobExecutionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeJobExecutionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotjobsdataplane.DescribeJobExecutionOutput)
	return
}

func (d *IoTJobsDataPlaneDouble) DescribeJobExecutionWithContext(i0 context.Context, i1 *iotjobsdataplane.DescribeJobExecutionInput, i2 ...request.Option) (r0 *iotjobsdataplane.DescribeJobExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeJobExecutionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotjobsdataplane.DescribeJobExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTJobsDataPlaneDouble) fakeDescribeJobExecutionWithContext(ctx context.Context, in *iotjobsdataplane.DescribeJobExecutionInput, _ ...request.Option) (*iotjobsdataplane.DescribeJobExecutionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeJobExecution cancelled", ctx.Err())
	default:
		return d.DescribeJobExecution(in)
	}
}

func (d *IoTJobsDataPlaneDouble) GetPendingJobExecutions(i0 *iotjobsdataplane.GetPendingJobExecutionsInput) (r0 *iotjobsdataplane.GetPendingJobExecutionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPendingJobExecutions", i0)
	r0, _ = returns[0].(*iotjobsdataplane.GetPendingJobExecutionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTJobsDataPlaneDouble) GetPendingJobExecutionsRequest(i0 *iotjobsdataplane.GetPendingJobExecutionsInput) (r0 *request.Request, r1 *iotjobsdataplane.GetPendingJobExecutionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPendingJobExecutionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotjobsdataplane.GetPendingJobExecutionsOutput)
	return
}

func (d *IoTJobsDataPlaneDouble) GetPendingJobExecutionsWithContext(i0 context.Context, i1 *iotjobsdataplane.GetPendingJobExecutionsInput, i2 ...request.Option) (r0 *iotjobsdataplane.GetPendingJobExecutionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPendingJobExecutionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotjobsdataplane.GetPendingJobExecutionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTJobsDataPlaneDouble) fakeGetPendingJobExecutionsWithContext(ctx context.Context, in *iotjobsdataplane.GetPendingJobExecutionsInput, _ ...request.Option) (*iotjobsdataplane.GetPendingJobExecutionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetPendingJobExecutions cancelled", ctx.Err())
	default:
		return d.GetPendingJobExecutions(in)
	}
}

func (d *IoTJobsDataPlaneDouble) StartNextPendingJobExecution(i0 *iotjobsdataplane.StartNextPendingJobExecutionInput) (r0 *iotjobsdataplane.StartNextPendingJobExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartNextPendingJobExecution", i0)
	r0, _ = returns[0].(*iotjobsdataplane.StartNextPendingJobExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTJobsDataPlaneDouble) StartNextPendingJobExecutionRequest(i0 *iotjobsdataplane.StartNextPendingJobExecutionInput) (r0 *request.Request, r1 *iotjobsdataplane.StartNextPendingJobExecutionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartNextPendingJobExecutionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotjobsdataplane.StartNextPendingJobExecutionOutput)
	return
}

func (d *IoTJobsDataPlaneDouble) StartNextPendingJobExecutionWithContext(i0 context.Context, i1 *iotjobsdataplane.StartNextPendingJobExecutionInput, i2 ...request.Option) (r0 *iotjobsdataplane.StartNextPendingJobExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartNextPendingJobExecutionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotjobsdataplane.StartNextPendingJobExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTJobsDataPlaneDouble) fakeStartNextPendingJobExecutionWithContext(ctx context.Context, in *iotjobsdataplane.StartNextPendingJobExecutionInput, _ ...request.Option) (*iotjobsdataplane.StartNextPendingJobExecutionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartNextPendingJobExecution cancelled", ctx.Err())
	default:
		return d.StartNextPendingJobExecution(in)
	}
}

func (d *IoTJobsDataPlaneDouble) UpdateJobExecution(i0 *iotjobsdataplane.UpdateJobExecutionInput) (r0 *iotjobsdataplane.UpdateJobExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateJobExecution", i0)
	r0, _ = returns[0].(*iotjobsdataplane.UpdateJobExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTJobsDataPlaneDouble) UpdateJobExecutionRequest(i0 *iotjobsdataplane.UpdateJobExecutionInput) (r0 *request.Request, r1 *iotjobsdataplane.UpdateJobExecutionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateJobExecutionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotjobsdataplane.UpdateJobExecutionOutput)
	return
}

func (d *IoTJobsDataPlaneDouble) UpdateJobExecutionWithContext(i0 context.Context, i1 *iotjobsdataplane.UpdateJobExecutionInput, i2 ...request.Option) (r0 *iotjobsdataplane.UpdateJobExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateJobExecutionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotjobsdataplane.UpdateJobExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTJobsDataPlaneDouble) fakeUpdateJobExecutionWithContext(ctx context.Context, in *iotjobsdataplane.UpdateJobExecutionInput, _ ...request.Option) (*iotjobsdataplane.UpdateJobExecutionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateJobExecution cancelled", ctx.Err())
	default:
		return d.UpdateJobExecution(in)
	}
}
