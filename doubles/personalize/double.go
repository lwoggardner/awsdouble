// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:14:16+11:00

// Package personalizedouble provides a TestDouble implementation of personalizeiface.PersonalizeAPI
package personalizedouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/personalize"
	"github.com/aws/aws-sdk-go/service/personalize/personalizeiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// PersonalizeDouble is TestDouble for personalizeiface.PersonalizeAPI
type PersonalizeDouble struct {
	personalizeiface.PersonalizeAPI
	*awsdouble.AWSTestDouble
}

// Constructor for PersonalizeDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *PersonalizeDouble {
	result := &PersonalizeDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*personalizeiface.PersonalizeAPI)(nil), configurators...)
	return result
}

func (d *PersonalizeDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *PersonalizeDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CreateBatchInferenceJobWithContext":
		return m.Fake(d.fakeCreateBatchInferenceJobWithContext)

	case "CreateCampaignWithContext":
		return m.Fake(d.fakeCreateCampaignWithContext)

	case "CreateDatasetGroupWithContext":
		return m.Fake(d.fakeCreateDatasetGroupWithContext)

	case "CreateDatasetImportJobWithContext":
		return m.Fake(d.fakeCreateDatasetImportJobWithContext)

	case "CreateDatasetWithContext":
		return m.Fake(d.fakeCreateDatasetWithContext)

	case "CreateEventTrackerWithContext":
		return m.Fake(d.fakeCreateEventTrackerWithContext)

	case "CreateSchemaWithContext":
		return m.Fake(d.fakeCreateSchemaWithContext)

	case "CreateSolutionVersionWithContext":
		return m.Fake(d.fakeCreateSolutionVersionWithContext)

	case "CreateSolutionWithContext":
		return m.Fake(d.fakeCreateSolutionWithContext)

	case "DeleteCampaignWithContext":
		return m.Fake(d.fakeDeleteCampaignWithContext)

	case "DeleteDatasetGroupWithContext":
		return m.Fake(d.fakeDeleteDatasetGroupWithContext)

	case "DeleteDatasetWithContext":
		return m.Fake(d.fakeDeleteDatasetWithContext)

	case "DeleteEventTrackerWithContext":
		return m.Fake(d.fakeDeleteEventTrackerWithContext)

	case "DeleteSchemaWithContext":
		return m.Fake(d.fakeDeleteSchemaWithContext)

	case "DeleteSolutionWithContext":
		return m.Fake(d.fakeDeleteSolutionWithContext)

	case "DescribeAlgorithmWithContext":
		return m.Fake(d.fakeDescribeAlgorithmWithContext)

	case "DescribeBatchInferenceJobWithContext":
		return m.Fake(d.fakeDescribeBatchInferenceJobWithContext)

	case "DescribeCampaignWithContext":
		return m.Fake(d.fakeDescribeCampaignWithContext)

	case "DescribeDatasetGroupWithContext":
		return m.Fake(d.fakeDescribeDatasetGroupWithContext)

	case "DescribeDatasetImportJobWithContext":
		return m.Fake(d.fakeDescribeDatasetImportJobWithContext)

	case "DescribeDatasetWithContext":
		return m.Fake(d.fakeDescribeDatasetWithContext)

	case "DescribeEventTrackerWithContext":
		return m.Fake(d.fakeDescribeEventTrackerWithContext)

	case "DescribeFeatureTransformationWithContext":
		return m.Fake(d.fakeDescribeFeatureTransformationWithContext)

	case "DescribeRecipeWithContext":
		return m.Fake(d.fakeDescribeRecipeWithContext)

	case "DescribeSchemaWithContext":
		return m.Fake(d.fakeDescribeSchemaWithContext)

	case "DescribeSolutionVersionWithContext":
		return m.Fake(d.fakeDescribeSolutionVersionWithContext)

	case "DescribeSolutionWithContext":
		return m.Fake(d.fakeDescribeSolutionWithContext)

	case "GetSolutionMetricsWithContext":
		return m.Fake(d.fakeGetSolutionMetricsWithContext)

	case "ListBatchInferenceJobsPages":
		return m.Fake(d.fakeListBatchInferenceJobsPages)

	case "ListBatchInferenceJobsPagesWithContext":
		return m.Fake(d.fakeListBatchInferenceJobsPagesWithContext)

	case "ListBatchInferenceJobsWithContext":
		return m.Fake(d.fakeListBatchInferenceJobsWithContext)

	case "ListCampaignsPages":
		return m.Fake(d.fakeListCampaignsPages)

	case "ListCampaignsPagesWithContext":
		return m.Fake(d.fakeListCampaignsPagesWithContext)

	case "ListCampaignsWithContext":
		return m.Fake(d.fakeListCampaignsWithContext)

	case "ListDatasetGroupsPages":
		return m.Fake(d.fakeListDatasetGroupsPages)

	case "ListDatasetGroupsPagesWithContext":
		return m.Fake(d.fakeListDatasetGroupsPagesWithContext)

	case "ListDatasetGroupsWithContext":
		return m.Fake(d.fakeListDatasetGroupsWithContext)

	case "ListDatasetImportJobsPages":
		return m.Fake(d.fakeListDatasetImportJobsPages)

	case "ListDatasetImportJobsPagesWithContext":
		return m.Fake(d.fakeListDatasetImportJobsPagesWithContext)

	case "ListDatasetImportJobsWithContext":
		return m.Fake(d.fakeListDatasetImportJobsWithContext)

	case "ListDatasetsPages":
		return m.Fake(d.fakeListDatasetsPages)

	case "ListDatasetsPagesWithContext":
		return m.Fake(d.fakeListDatasetsPagesWithContext)

	case "ListDatasetsWithContext":
		return m.Fake(d.fakeListDatasetsWithContext)

	case "ListEventTrackersPages":
		return m.Fake(d.fakeListEventTrackersPages)

	case "ListEventTrackersPagesWithContext":
		return m.Fake(d.fakeListEventTrackersPagesWithContext)

	case "ListEventTrackersWithContext":
		return m.Fake(d.fakeListEventTrackersWithContext)

	case "ListRecipesPages":
		return m.Fake(d.fakeListRecipesPages)

	case "ListRecipesPagesWithContext":
		return m.Fake(d.fakeListRecipesPagesWithContext)

	case "ListRecipesWithContext":
		return m.Fake(d.fakeListRecipesWithContext)

	case "ListSchemasPages":
		return m.Fake(d.fakeListSchemasPages)

	case "ListSchemasPagesWithContext":
		return m.Fake(d.fakeListSchemasPagesWithContext)

	case "ListSchemasWithContext":
		return m.Fake(d.fakeListSchemasWithContext)

	case "ListSolutionVersionsPages":
		return m.Fake(d.fakeListSolutionVersionsPages)

	case "ListSolutionVersionsPagesWithContext":
		return m.Fake(d.fakeListSolutionVersionsPagesWithContext)

	case "ListSolutionVersionsWithContext":
		return m.Fake(d.fakeListSolutionVersionsWithContext)

	case "ListSolutionsPages":
		return m.Fake(d.fakeListSolutionsPages)

	case "ListSolutionsPagesWithContext":
		return m.Fake(d.fakeListSolutionsPagesWithContext)

	case "ListSolutionsWithContext":
		return m.Fake(d.fakeListSolutionsWithContext)

	case "UpdateCampaignWithContext":
		return m.Fake(d.fakeUpdateCampaignWithContext)

	default:
		return nil
	}
}

func (d *PersonalizeDouble) CreateBatchInferenceJob(i0 *personalize.CreateBatchInferenceJobInput) (r0 *personalize.CreateBatchInferenceJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBatchInferenceJob", i0)
	r0, _ = returns[0].(*personalize.CreateBatchInferenceJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) CreateBatchInferenceJobRequest(i0 *personalize.CreateBatchInferenceJobInput) (r0 *request.Request, r1 *personalize.CreateBatchInferenceJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBatchInferenceJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.CreateBatchInferenceJobOutput)
	return
}

func (d *PersonalizeDouble) CreateBatchInferenceJobWithContext(i0 context.Context, i1 *personalize.CreateBatchInferenceJobInput, i2 ...request.Option) (r0 *personalize.CreateBatchInferenceJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBatchInferenceJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.CreateBatchInferenceJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeCreateBatchInferenceJobWithContext(ctx context.Context, in *personalize.CreateBatchInferenceJobInput, _ ...request.Option) (*personalize.CreateBatchInferenceJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateBatchInferenceJob cancelled", ctx.Err())
	default:
		return d.CreateBatchInferenceJob(in)
	}
}

func (d *PersonalizeDouble) CreateCampaign(i0 *personalize.CreateCampaignInput) (r0 *personalize.CreateCampaignOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCampaign", i0)
	r0, _ = returns[0].(*personalize.CreateCampaignOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) CreateCampaignRequest(i0 *personalize.CreateCampaignInput) (r0 *request.Request, r1 *personalize.CreateCampaignOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCampaignRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.CreateCampaignOutput)
	return
}

func (d *PersonalizeDouble) CreateCampaignWithContext(i0 context.Context, i1 *personalize.CreateCampaignInput, i2 ...request.Option) (r0 *personalize.CreateCampaignOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCampaignWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.CreateCampaignOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeCreateCampaignWithContext(ctx context.Context, in *personalize.CreateCampaignInput, _ ...request.Option) (*personalize.CreateCampaignOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateCampaign cancelled", ctx.Err())
	default:
		return d.CreateCampaign(in)
	}
}

func (d *PersonalizeDouble) CreateDataset(i0 *personalize.CreateDatasetInput) (r0 *personalize.CreateDatasetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDataset", i0)
	r0, _ = returns[0].(*personalize.CreateDatasetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) CreateDatasetGroup(i0 *personalize.CreateDatasetGroupInput) (r0 *personalize.CreateDatasetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDatasetGroup", i0)
	r0, _ = returns[0].(*personalize.CreateDatasetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) CreateDatasetGroupRequest(i0 *personalize.CreateDatasetGroupInput) (r0 *request.Request, r1 *personalize.CreateDatasetGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDatasetGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.CreateDatasetGroupOutput)
	return
}

func (d *PersonalizeDouble) CreateDatasetGroupWithContext(i0 context.Context, i1 *personalize.CreateDatasetGroupInput, i2 ...request.Option) (r0 *personalize.CreateDatasetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDatasetGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.CreateDatasetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeCreateDatasetGroupWithContext(ctx context.Context, in *personalize.CreateDatasetGroupInput, _ ...request.Option) (*personalize.CreateDatasetGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDatasetGroup cancelled", ctx.Err())
	default:
		return d.CreateDatasetGroup(in)
	}
}

func (d *PersonalizeDouble) CreateDatasetImportJob(i0 *personalize.CreateDatasetImportJobInput) (r0 *personalize.CreateDatasetImportJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDatasetImportJob", i0)
	r0, _ = returns[0].(*personalize.CreateDatasetImportJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) CreateDatasetImportJobRequest(i0 *personalize.CreateDatasetImportJobInput) (r0 *request.Request, r1 *personalize.CreateDatasetImportJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDatasetImportJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.CreateDatasetImportJobOutput)
	return
}

func (d *PersonalizeDouble) CreateDatasetImportJobWithContext(i0 context.Context, i1 *personalize.CreateDatasetImportJobInput, i2 ...request.Option) (r0 *personalize.CreateDatasetImportJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDatasetImportJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.CreateDatasetImportJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeCreateDatasetImportJobWithContext(ctx context.Context, in *personalize.CreateDatasetImportJobInput, _ ...request.Option) (*personalize.CreateDatasetImportJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDatasetImportJob cancelled", ctx.Err())
	default:
		return d.CreateDatasetImportJob(in)
	}
}

func (d *PersonalizeDouble) CreateDatasetRequest(i0 *personalize.CreateDatasetInput) (r0 *request.Request, r1 *personalize.CreateDatasetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDatasetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.CreateDatasetOutput)
	return
}

func (d *PersonalizeDouble) CreateDatasetWithContext(i0 context.Context, i1 *personalize.CreateDatasetInput, i2 ...request.Option) (r0 *personalize.CreateDatasetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDatasetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.CreateDatasetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeCreateDatasetWithContext(ctx context.Context, in *personalize.CreateDatasetInput, _ ...request.Option) (*personalize.CreateDatasetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDataset cancelled", ctx.Err())
	default:
		return d.CreateDataset(in)
	}
}

func (d *PersonalizeDouble) CreateEventTracker(i0 *personalize.CreateEventTrackerInput) (r0 *personalize.CreateEventTrackerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEventTracker", i0)
	r0, _ = returns[0].(*personalize.CreateEventTrackerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) CreateEventTrackerRequest(i0 *personalize.CreateEventTrackerInput) (r0 *request.Request, r1 *personalize.CreateEventTrackerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEventTrackerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.CreateEventTrackerOutput)
	return
}

func (d *PersonalizeDouble) CreateEventTrackerWithContext(i0 context.Context, i1 *personalize.CreateEventTrackerInput, i2 ...request.Option) (r0 *personalize.CreateEventTrackerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEventTrackerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.CreateEventTrackerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeCreateEventTrackerWithContext(ctx context.Context, in *personalize.CreateEventTrackerInput, _ ...request.Option) (*personalize.CreateEventTrackerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateEventTracker cancelled", ctx.Err())
	default:
		return d.CreateEventTracker(in)
	}
}

func (d *PersonalizeDouble) CreateSchema(i0 *personalize.CreateSchemaInput) (r0 *personalize.CreateSchemaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSchema", i0)
	r0, _ = returns[0].(*personalize.CreateSchemaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) CreateSchemaRequest(i0 *personalize.CreateSchemaInput) (r0 *request.Request, r1 *personalize.CreateSchemaOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSchemaRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.CreateSchemaOutput)
	return
}

func (d *PersonalizeDouble) CreateSchemaWithContext(i0 context.Context, i1 *personalize.CreateSchemaInput, i2 ...request.Option) (r0 *personalize.CreateSchemaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSchemaWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.CreateSchemaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeCreateSchemaWithContext(ctx context.Context, in *personalize.CreateSchemaInput, _ ...request.Option) (*personalize.CreateSchemaOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateSchema cancelled", ctx.Err())
	default:
		return d.CreateSchema(in)
	}
}

func (d *PersonalizeDouble) CreateSolution(i0 *personalize.CreateSolutionInput) (r0 *personalize.CreateSolutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSolution", i0)
	r0, _ = returns[0].(*personalize.CreateSolutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) CreateSolutionRequest(i0 *personalize.CreateSolutionInput) (r0 *request.Request, r1 *personalize.CreateSolutionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSolutionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.CreateSolutionOutput)
	return
}

func (d *PersonalizeDouble) CreateSolutionVersion(i0 *personalize.CreateSolutionVersionInput) (r0 *personalize.CreateSolutionVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSolutionVersion", i0)
	r0, _ = returns[0].(*personalize.CreateSolutionVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) CreateSolutionVersionRequest(i0 *personalize.CreateSolutionVersionInput) (r0 *request.Request, r1 *personalize.CreateSolutionVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSolutionVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.CreateSolutionVersionOutput)
	return
}

func (d *PersonalizeDouble) CreateSolutionVersionWithContext(i0 context.Context, i1 *personalize.CreateSolutionVersionInput, i2 ...request.Option) (r0 *personalize.CreateSolutionVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSolutionVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.CreateSolutionVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeCreateSolutionVersionWithContext(ctx context.Context, in *personalize.CreateSolutionVersionInput, _ ...request.Option) (*personalize.CreateSolutionVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateSolutionVersion cancelled", ctx.Err())
	default:
		return d.CreateSolutionVersion(in)
	}
}

func (d *PersonalizeDouble) CreateSolutionWithContext(i0 context.Context, i1 *personalize.CreateSolutionInput, i2 ...request.Option) (r0 *personalize.CreateSolutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSolutionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.CreateSolutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeCreateSolutionWithContext(ctx context.Context, in *personalize.CreateSolutionInput, _ ...request.Option) (*personalize.CreateSolutionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateSolution cancelled", ctx.Err())
	default:
		return d.CreateSolution(in)
	}
}

func (d *PersonalizeDouble) DeleteCampaign(i0 *personalize.DeleteCampaignInput) (r0 *personalize.DeleteCampaignOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCampaign", i0)
	r0, _ = returns[0].(*personalize.DeleteCampaignOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) DeleteCampaignRequest(i0 *personalize.DeleteCampaignInput) (r0 *request.Request, r1 *personalize.DeleteCampaignOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCampaignRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.DeleteCampaignOutput)
	return
}

func (d *PersonalizeDouble) DeleteCampaignWithContext(i0 context.Context, i1 *personalize.DeleteCampaignInput, i2 ...request.Option) (r0 *personalize.DeleteCampaignOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCampaignWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.DeleteCampaignOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeDeleteCampaignWithContext(ctx context.Context, in *personalize.DeleteCampaignInput, _ ...request.Option) (*personalize.DeleteCampaignOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteCampaign cancelled", ctx.Err())
	default:
		return d.DeleteCampaign(in)
	}
}

func (d *PersonalizeDouble) DeleteDataset(i0 *personalize.DeleteDatasetInput) (r0 *personalize.DeleteDatasetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDataset", i0)
	r0, _ = returns[0].(*personalize.DeleteDatasetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) DeleteDatasetGroup(i0 *personalize.DeleteDatasetGroupInput) (r0 *personalize.DeleteDatasetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDatasetGroup", i0)
	r0, _ = returns[0].(*personalize.DeleteDatasetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) DeleteDatasetGroupRequest(i0 *personalize.DeleteDatasetGroupInput) (r0 *request.Request, r1 *personalize.DeleteDatasetGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDatasetGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.DeleteDatasetGroupOutput)
	return
}

func (d *PersonalizeDouble) DeleteDatasetGroupWithContext(i0 context.Context, i1 *personalize.DeleteDatasetGroupInput, i2 ...request.Option) (r0 *personalize.DeleteDatasetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDatasetGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.DeleteDatasetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeDeleteDatasetGroupWithContext(ctx context.Context, in *personalize.DeleteDatasetGroupInput, _ ...request.Option) (*personalize.DeleteDatasetGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDatasetGroup cancelled", ctx.Err())
	default:
		return d.DeleteDatasetGroup(in)
	}
}

func (d *PersonalizeDouble) DeleteDatasetRequest(i0 *personalize.DeleteDatasetInput) (r0 *request.Request, r1 *personalize.DeleteDatasetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDatasetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.DeleteDatasetOutput)
	return
}

func (d *PersonalizeDouble) DeleteDatasetWithContext(i0 context.Context, i1 *personalize.DeleteDatasetInput, i2 ...request.Option) (r0 *personalize.DeleteDatasetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDatasetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.DeleteDatasetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeDeleteDatasetWithContext(ctx context.Context, in *personalize.DeleteDatasetInput, _ ...request.Option) (*personalize.DeleteDatasetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDataset cancelled", ctx.Err())
	default:
		return d.DeleteDataset(in)
	}
}

func (d *PersonalizeDouble) DeleteEventTracker(i0 *personalize.DeleteEventTrackerInput) (r0 *personalize.DeleteEventTrackerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEventTracker", i0)
	r0, _ = returns[0].(*personalize.DeleteEventTrackerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) DeleteEventTrackerRequest(i0 *personalize.DeleteEventTrackerInput) (r0 *request.Request, r1 *personalize.DeleteEventTrackerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEventTrackerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.DeleteEventTrackerOutput)
	return
}

func (d *PersonalizeDouble) DeleteEventTrackerWithContext(i0 context.Context, i1 *personalize.DeleteEventTrackerInput, i2 ...request.Option) (r0 *personalize.DeleteEventTrackerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEventTrackerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.DeleteEventTrackerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeDeleteEventTrackerWithContext(ctx context.Context, in *personalize.DeleteEventTrackerInput, _ ...request.Option) (*personalize.DeleteEventTrackerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteEventTracker cancelled", ctx.Err())
	default:
		return d.DeleteEventTracker(in)
	}
}

func (d *PersonalizeDouble) DeleteSchema(i0 *personalize.DeleteSchemaInput) (r0 *personalize.DeleteSchemaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSchema", i0)
	r0, _ = returns[0].(*personalize.DeleteSchemaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) DeleteSchemaRequest(i0 *personalize.DeleteSchemaInput) (r0 *request.Request, r1 *personalize.DeleteSchemaOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSchemaRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.DeleteSchemaOutput)
	return
}

func (d *PersonalizeDouble) DeleteSchemaWithContext(i0 context.Context, i1 *personalize.DeleteSchemaInput, i2 ...request.Option) (r0 *personalize.DeleteSchemaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSchemaWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.DeleteSchemaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeDeleteSchemaWithContext(ctx context.Context, in *personalize.DeleteSchemaInput, _ ...request.Option) (*personalize.DeleteSchemaOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteSchema cancelled", ctx.Err())
	default:
		return d.DeleteSchema(in)
	}
}

func (d *PersonalizeDouble) DeleteSolution(i0 *personalize.DeleteSolutionInput) (r0 *personalize.DeleteSolutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSolution", i0)
	r0, _ = returns[0].(*personalize.DeleteSolutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) DeleteSolutionRequest(i0 *personalize.DeleteSolutionInput) (r0 *request.Request, r1 *personalize.DeleteSolutionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSolutionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.DeleteSolutionOutput)
	return
}

func (d *PersonalizeDouble) DeleteSolutionWithContext(i0 context.Context, i1 *personalize.DeleteSolutionInput, i2 ...request.Option) (r0 *personalize.DeleteSolutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSolutionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.DeleteSolutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeDeleteSolutionWithContext(ctx context.Context, in *personalize.DeleteSolutionInput, _ ...request.Option) (*personalize.DeleteSolutionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteSolution cancelled", ctx.Err())
	default:
		return d.DeleteSolution(in)
	}
}

func (d *PersonalizeDouble) DescribeAlgorithm(i0 *personalize.DescribeAlgorithmInput) (r0 *personalize.DescribeAlgorithmOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAlgorithm", i0)
	r0, _ = returns[0].(*personalize.DescribeAlgorithmOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) DescribeAlgorithmRequest(i0 *personalize.DescribeAlgorithmInput) (r0 *request.Request, r1 *personalize.DescribeAlgorithmOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAlgorithmRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.DescribeAlgorithmOutput)
	return
}

func (d *PersonalizeDouble) DescribeAlgorithmWithContext(i0 context.Context, i1 *personalize.DescribeAlgorithmInput, i2 ...request.Option) (r0 *personalize.DescribeAlgorithmOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAlgorithmWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.DescribeAlgorithmOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeDescribeAlgorithmWithContext(ctx context.Context, in *personalize.DescribeAlgorithmInput, _ ...request.Option) (*personalize.DescribeAlgorithmOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAlgorithm cancelled", ctx.Err())
	default:
		return d.DescribeAlgorithm(in)
	}
}

func (d *PersonalizeDouble) DescribeBatchInferenceJob(i0 *personalize.DescribeBatchInferenceJobInput) (r0 *personalize.DescribeBatchInferenceJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBatchInferenceJob", i0)
	r0, _ = returns[0].(*personalize.DescribeBatchInferenceJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) DescribeBatchInferenceJobRequest(i0 *personalize.DescribeBatchInferenceJobInput) (r0 *request.Request, r1 *personalize.DescribeBatchInferenceJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBatchInferenceJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.DescribeBatchInferenceJobOutput)
	return
}

func (d *PersonalizeDouble) DescribeBatchInferenceJobWithContext(i0 context.Context, i1 *personalize.DescribeBatchInferenceJobInput, i2 ...request.Option) (r0 *personalize.DescribeBatchInferenceJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBatchInferenceJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.DescribeBatchInferenceJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeDescribeBatchInferenceJobWithContext(ctx context.Context, in *personalize.DescribeBatchInferenceJobInput, _ ...request.Option) (*personalize.DescribeBatchInferenceJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeBatchInferenceJob cancelled", ctx.Err())
	default:
		return d.DescribeBatchInferenceJob(in)
	}
}

func (d *PersonalizeDouble) DescribeCampaign(i0 *personalize.DescribeCampaignInput) (r0 *personalize.DescribeCampaignOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCampaign", i0)
	r0, _ = returns[0].(*personalize.DescribeCampaignOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) DescribeCampaignRequest(i0 *personalize.DescribeCampaignInput) (r0 *request.Request, r1 *personalize.DescribeCampaignOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCampaignRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.DescribeCampaignOutput)
	return
}

func (d *PersonalizeDouble) DescribeCampaignWithContext(i0 context.Context, i1 *personalize.DescribeCampaignInput, i2 ...request.Option) (r0 *personalize.DescribeCampaignOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCampaignWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.DescribeCampaignOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeDescribeCampaignWithContext(ctx context.Context, in *personalize.DescribeCampaignInput, _ ...request.Option) (*personalize.DescribeCampaignOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeCampaign cancelled", ctx.Err())
	default:
		return d.DescribeCampaign(in)
	}
}

func (d *PersonalizeDouble) DescribeDataset(i0 *personalize.DescribeDatasetInput) (r0 *personalize.DescribeDatasetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDataset", i0)
	r0, _ = returns[0].(*personalize.DescribeDatasetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) DescribeDatasetGroup(i0 *personalize.DescribeDatasetGroupInput) (r0 *personalize.DescribeDatasetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDatasetGroup", i0)
	r0, _ = returns[0].(*personalize.DescribeDatasetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) DescribeDatasetGroupRequest(i0 *personalize.DescribeDatasetGroupInput) (r0 *request.Request, r1 *personalize.DescribeDatasetGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDatasetGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.DescribeDatasetGroupOutput)
	return
}

func (d *PersonalizeDouble) DescribeDatasetGroupWithContext(i0 context.Context, i1 *personalize.DescribeDatasetGroupInput, i2 ...request.Option) (r0 *personalize.DescribeDatasetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDatasetGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.DescribeDatasetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeDescribeDatasetGroupWithContext(ctx context.Context, in *personalize.DescribeDatasetGroupInput, _ ...request.Option) (*personalize.DescribeDatasetGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDatasetGroup cancelled", ctx.Err())
	default:
		return d.DescribeDatasetGroup(in)
	}
}

func (d *PersonalizeDouble) DescribeDatasetImportJob(i0 *personalize.DescribeDatasetImportJobInput) (r0 *personalize.DescribeDatasetImportJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDatasetImportJob", i0)
	r0, _ = returns[0].(*personalize.DescribeDatasetImportJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) DescribeDatasetImportJobRequest(i0 *personalize.DescribeDatasetImportJobInput) (r0 *request.Request, r1 *personalize.DescribeDatasetImportJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDatasetImportJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.DescribeDatasetImportJobOutput)
	return
}

func (d *PersonalizeDouble) DescribeDatasetImportJobWithContext(i0 context.Context, i1 *personalize.DescribeDatasetImportJobInput, i2 ...request.Option) (r0 *personalize.DescribeDatasetImportJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDatasetImportJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.DescribeDatasetImportJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeDescribeDatasetImportJobWithContext(ctx context.Context, in *personalize.DescribeDatasetImportJobInput, _ ...request.Option) (*personalize.DescribeDatasetImportJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDatasetImportJob cancelled", ctx.Err())
	default:
		return d.DescribeDatasetImportJob(in)
	}
}

func (d *PersonalizeDouble) DescribeDatasetRequest(i0 *personalize.DescribeDatasetInput) (r0 *request.Request, r1 *personalize.DescribeDatasetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDatasetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.DescribeDatasetOutput)
	return
}

func (d *PersonalizeDouble) DescribeDatasetWithContext(i0 context.Context, i1 *personalize.DescribeDatasetInput, i2 ...request.Option) (r0 *personalize.DescribeDatasetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDatasetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.DescribeDatasetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeDescribeDatasetWithContext(ctx context.Context, in *personalize.DescribeDatasetInput, _ ...request.Option) (*personalize.DescribeDatasetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDataset cancelled", ctx.Err())
	default:
		return d.DescribeDataset(in)
	}
}

func (d *PersonalizeDouble) DescribeEventTracker(i0 *personalize.DescribeEventTrackerInput) (r0 *personalize.DescribeEventTrackerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventTracker", i0)
	r0, _ = returns[0].(*personalize.DescribeEventTrackerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) DescribeEventTrackerRequest(i0 *personalize.DescribeEventTrackerInput) (r0 *request.Request, r1 *personalize.DescribeEventTrackerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventTrackerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.DescribeEventTrackerOutput)
	return
}

func (d *PersonalizeDouble) DescribeEventTrackerWithContext(i0 context.Context, i1 *personalize.DescribeEventTrackerInput, i2 ...request.Option) (r0 *personalize.DescribeEventTrackerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventTrackerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.DescribeEventTrackerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeDescribeEventTrackerWithContext(ctx context.Context, in *personalize.DescribeEventTrackerInput, _ ...request.Option) (*personalize.DescribeEventTrackerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEventTracker cancelled", ctx.Err())
	default:
		return d.DescribeEventTracker(in)
	}
}

func (d *PersonalizeDouble) DescribeFeatureTransformation(i0 *personalize.DescribeFeatureTransformationInput) (r0 *personalize.DescribeFeatureTransformationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFeatureTransformation", i0)
	r0, _ = returns[0].(*personalize.DescribeFeatureTransformationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) DescribeFeatureTransformationRequest(i0 *personalize.DescribeFeatureTransformationInput) (r0 *request.Request, r1 *personalize.DescribeFeatureTransformationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFeatureTransformationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.DescribeFeatureTransformationOutput)
	return
}

func (d *PersonalizeDouble) DescribeFeatureTransformationWithContext(i0 context.Context, i1 *personalize.DescribeFeatureTransformationInput, i2 ...request.Option) (r0 *personalize.DescribeFeatureTransformationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFeatureTransformationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.DescribeFeatureTransformationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeDescribeFeatureTransformationWithContext(ctx context.Context, in *personalize.DescribeFeatureTransformationInput, _ ...request.Option) (*personalize.DescribeFeatureTransformationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeFeatureTransformation cancelled", ctx.Err())
	default:
		return d.DescribeFeatureTransformation(in)
	}
}

func (d *PersonalizeDouble) DescribeRecipe(i0 *personalize.DescribeRecipeInput) (r0 *personalize.DescribeRecipeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRecipe", i0)
	r0, _ = returns[0].(*personalize.DescribeRecipeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) DescribeRecipeRequest(i0 *personalize.DescribeRecipeInput) (r0 *request.Request, r1 *personalize.DescribeRecipeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRecipeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.DescribeRecipeOutput)
	return
}

func (d *PersonalizeDouble) DescribeRecipeWithContext(i0 context.Context, i1 *personalize.DescribeRecipeInput, i2 ...request.Option) (r0 *personalize.DescribeRecipeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRecipeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.DescribeRecipeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeDescribeRecipeWithContext(ctx context.Context, in *personalize.DescribeRecipeInput, _ ...request.Option) (*personalize.DescribeRecipeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeRecipe cancelled", ctx.Err())
	default:
		return d.DescribeRecipe(in)
	}
}

func (d *PersonalizeDouble) DescribeSchema(i0 *personalize.DescribeSchemaInput) (r0 *personalize.DescribeSchemaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSchema", i0)
	r0, _ = returns[0].(*personalize.DescribeSchemaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) DescribeSchemaRequest(i0 *personalize.DescribeSchemaInput) (r0 *request.Request, r1 *personalize.DescribeSchemaOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSchemaRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.DescribeSchemaOutput)
	return
}

func (d *PersonalizeDouble) DescribeSchemaWithContext(i0 context.Context, i1 *personalize.DescribeSchemaInput, i2 ...request.Option) (r0 *personalize.DescribeSchemaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSchemaWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.DescribeSchemaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeDescribeSchemaWithContext(ctx context.Context, in *personalize.DescribeSchemaInput, _ ...request.Option) (*personalize.DescribeSchemaOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSchema cancelled", ctx.Err())
	default:
		return d.DescribeSchema(in)
	}
}

func (d *PersonalizeDouble) DescribeSolution(i0 *personalize.DescribeSolutionInput) (r0 *personalize.DescribeSolutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSolution", i0)
	r0, _ = returns[0].(*personalize.DescribeSolutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) DescribeSolutionRequest(i0 *personalize.DescribeSolutionInput) (r0 *request.Request, r1 *personalize.DescribeSolutionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSolutionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.DescribeSolutionOutput)
	return
}

func (d *PersonalizeDouble) DescribeSolutionVersion(i0 *personalize.DescribeSolutionVersionInput) (r0 *personalize.DescribeSolutionVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSolutionVersion", i0)
	r0, _ = returns[0].(*personalize.DescribeSolutionVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) DescribeSolutionVersionRequest(i0 *personalize.DescribeSolutionVersionInput) (r0 *request.Request, r1 *personalize.DescribeSolutionVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSolutionVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.DescribeSolutionVersionOutput)
	return
}

func (d *PersonalizeDouble) DescribeSolutionVersionWithContext(i0 context.Context, i1 *personalize.DescribeSolutionVersionInput, i2 ...request.Option) (r0 *personalize.DescribeSolutionVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSolutionVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.DescribeSolutionVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeDescribeSolutionVersionWithContext(ctx context.Context, in *personalize.DescribeSolutionVersionInput, _ ...request.Option) (*personalize.DescribeSolutionVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSolutionVersion cancelled", ctx.Err())
	default:
		return d.DescribeSolutionVersion(in)
	}
}

func (d *PersonalizeDouble) DescribeSolutionWithContext(i0 context.Context, i1 *personalize.DescribeSolutionInput, i2 ...request.Option) (r0 *personalize.DescribeSolutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSolutionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.DescribeSolutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeDescribeSolutionWithContext(ctx context.Context, in *personalize.DescribeSolutionInput, _ ...request.Option) (*personalize.DescribeSolutionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSolution cancelled", ctx.Err())
	default:
		return d.DescribeSolution(in)
	}
}

func (d *PersonalizeDouble) GetSolutionMetrics(i0 *personalize.GetSolutionMetricsInput) (r0 *personalize.GetSolutionMetricsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSolutionMetrics", i0)
	r0, _ = returns[0].(*personalize.GetSolutionMetricsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) GetSolutionMetricsRequest(i0 *personalize.GetSolutionMetricsInput) (r0 *request.Request, r1 *personalize.GetSolutionMetricsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSolutionMetricsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.GetSolutionMetricsOutput)
	return
}

func (d *PersonalizeDouble) GetSolutionMetricsWithContext(i0 context.Context, i1 *personalize.GetSolutionMetricsInput, i2 ...request.Option) (r0 *personalize.GetSolutionMetricsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSolutionMetricsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.GetSolutionMetricsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeGetSolutionMetricsWithContext(ctx context.Context, in *personalize.GetSolutionMetricsInput, _ ...request.Option) (*personalize.GetSolutionMetricsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetSolutionMetrics cancelled", ctx.Err())
	default:
		return d.GetSolutionMetrics(in)
	}
}

func (d *PersonalizeDouble) ListBatchInferenceJobs(i0 *personalize.ListBatchInferenceJobsInput) (r0 *personalize.ListBatchInferenceJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBatchInferenceJobs", i0)
	r0, _ = returns[0].(*personalize.ListBatchInferenceJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) ListBatchInferenceJobsPages(i0 *personalize.ListBatchInferenceJobsInput, i1 func(*personalize.ListBatchInferenceJobsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBatchInferenceJobsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *PersonalizeDouble) fakeListBatchInferenceJobsPages(in *personalize.ListBatchInferenceJobsInput, pager func(*personalize.ListBatchInferenceJobsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListBatchInferenceJobs", paginators, in, pager)
}

func (d *PersonalizeDouble) ListBatchInferenceJobsPagesWithContext(i0 context.Context, i1 *personalize.ListBatchInferenceJobsInput, i2 func(*personalize.ListBatchInferenceJobsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBatchInferenceJobsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *PersonalizeDouble) fakeListBatchInferenceJobsPagesWithContext(ctx context.Context, in *personalize.ListBatchInferenceJobsInput, pager func(*personalize.ListBatchInferenceJobsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListBatchInferenceJobs", paginators, ctx, in, pager, options...)
}

func (d *PersonalizeDouble) ListBatchInferenceJobsRequest(i0 *personalize.ListBatchInferenceJobsInput) (r0 *request.Request, r1 *personalize.ListBatchInferenceJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBatchInferenceJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.ListBatchInferenceJobsOutput)
	return
}

func (d *PersonalizeDouble) ListBatchInferenceJobsWithContext(i0 context.Context, i1 *personalize.ListBatchInferenceJobsInput, i2 ...request.Option) (r0 *personalize.ListBatchInferenceJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBatchInferenceJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.ListBatchInferenceJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeListBatchInferenceJobsWithContext(ctx context.Context, in *personalize.ListBatchInferenceJobsInput, _ ...request.Option) (*personalize.ListBatchInferenceJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListBatchInferenceJobs cancelled", ctx.Err())
	default:
		return d.ListBatchInferenceJobs(in)
	}
}

func (d *PersonalizeDouble) ListCampaigns(i0 *personalize.ListCampaignsInput) (r0 *personalize.ListCampaignsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCampaigns", i0)
	r0, _ = returns[0].(*personalize.ListCampaignsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) ListCampaignsPages(i0 *personalize.ListCampaignsInput, i1 func(*personalize.ListCampaignsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCampaignsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *PersonalizeDouble) fakeListCampaignsPages(in *personalize.ListCampaignsInput, pager func(*personalize.ListCampaignsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListCampaigns", paginators, in, pager)
}

func (d *PersonalizeDouble) ListCampaignsPagesWithContext(i0 context.Context, i1 *personalize.ListCampaignsInput, i2 func(*personalize.ListCampaignsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCampaignsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *PersonalizeDouble) fakeListCampaignsPagesWithContext(ctx context.Context, in *personalize.ListCampaignsInput, pager func(*personalize.ListCampaignsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListCampaigns", paginators, ctx, in, pager, options...)
}

func (d *PersonalizeDouble) ListCampaignsRequest(i0 *personalize.ListCampaignsInput) (r0 *request.Request, r1 *personalize.ListCampaignsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCampaignsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.ListCampaignsOutput)
	return
}

func (d *PersonalizeDouble) ListCampaignsWithContext(i0 context.Context, i1 *personalize.ListCampaignsInput, i2 ...request.Option) (r0 *personalize.ListCampaignsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCampaignsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.ListCampaignsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeListCampaignsWithContext(ctx context.Context, in *personalize.ListCampaignsInput, _ ...request.Option) (*personalize.ListCampaignsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListCampaigns cancelled", ctx.Err())
	default:
		return d.ListCampaigns(in)
	}
}

func (d *PersonalizeDouble) ListDatasetGroups(i0 *personalize.ListDatasetGroupsInput) (r0 *personalize.ListDatasetGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDatasetGroups", i0)
	r0, _ = returns[0].(*personalize.ListDatasetGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) ListDatasetGroupsPages(i0 *personalize.ListDatasetGroupsInput, i1 func(*personalize.ListDatasetGroupsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDatasetGroupsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *PersonalizeDouble) fakeListDatasetGroupsPages(in *personalize.ListDatasetGroupsInput, pager func(*personalize.ListDatasetGroupsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListDatasetGroups", paginators, in, pager)
}

func (d *PersonalizeDouble) ListDatasetGroupsPagesWithContext(i0 context.Context, i1 *personalize.ListDatasetGroupsInput, i2 func(*personalize.ListDatasetGroupsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDatasetGroupsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *PersonalizeDouble) fakeListDatasetGroupsPagesWithContext(ctx context.Context, in *personalize.ListDatasetGroupsInput, pager func(*personalize.ListDatasetGroupsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListDatasetGroups", paginators, ctx, in, pager, options...)
}

func (d *PersonalizeDouble) ListDatasetGroupsRequest(i0 *personalize.ListDatasetGroupsInput) (r0 *request.Request, r1 *personalize.ListDatasetGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDatasetGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.ListDatasetGroupsOutput)
	return
}

func (d *PersonalizeDouble) ListDatasetGroupsWithContext(i0 context.Context, i1 *personalize.ListDatasetGroupsInput, i2 ...request.Option) (r0 *personalize.ListDatasetGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDatasetGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.ListDatasetGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeListDatasetGroupsWithContext(ctx context.Context, in *personalize.ListDatasetGroupsInput, _ ...request.Option) (*personalize.ListDatasetGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDatasetGroups cancelled", ctx.Err())
	default:
		return d.ListDatasetGroups(in)
	}
}

func (d *PersonalizeDouble) ListDatasetImportJobs(i0 *personalize.ListDatasetImportJobsInput) (r0 *personalize.ListDatasetImportJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDatasetImportJobs", i0)
	r0, _ = returns[0].(*personalize.ListDatasetImportJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) ListDatasetImportJobsPages(i0 *personalize.ListDatasetImportJobsInput, i1 func(*personalize.ListDatasetImportJobsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDatasetImportJobsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *PersonalizeDouble) fakeListDatasetImportJobsPages(in *personalize.ListDatasetImportJobsInput, pager func(*personalize.ListDatasetImportJobsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListDatasetImportJobs", paginators, in, pager)
}

func (d *PersonalizeDouble) ListDatasetImportJobsPagesWithContext(i0 context.Context, i1 *personalize.ListDatasetImportJobsInput, i2 func(*personalize.ListDatasetImportJobsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDatasetImportJobsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *PersonalizeDouble) fakeListDatasetImportJobsPagesWithContext(ctx context.Context, in *personalize.ListDatasetImportJobsInput, pager func(*personalize.ListDatasetImportJobsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListDatasetImportJobs", paginators, ctx, in, pager, options...)
}

func (d *PersonalizeDouble) ListDatasetImportJobsRequest(i0 *personalize.ListDatasetImportJobsInput) (r0 *request.Request, r1 *personalize.ListDatasetImportJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDatasetImportJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.ListDatasetImportJobsOutput)
	return
}

func (d *PersonalizeDouble) ListDatasetImportJobsWithContext(i0 context.Context, i1 *personalize.ListDatasetImportJobsInput, i2 ...request.Option) (r0 *personalize.ListDatasetImportJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDatasetImportJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.ListDatasetImportJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeListDatasetImportJobsWithContext(ctx context.Context, in *personalize.ListDatasetImportJobsInput, _ ...request.Option) (*personalize.ListDatasetImportJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDatasetImportJobs cancelled", ctx.Err())
	default:
		return d.ListDatasetImportJobs(in)
	}
}

func (d *PersonalizeDouble) ListDatasets(i0 *personalize.ListDatasetsInput) (r0 *personalize.ListDatasetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDatasets", i0)
	r0, _ = returns[0].(*personalize.ListDatasetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) ListDatasetsPages(i0 *personalize.ListDatasetsInput, i1 func(*personalize.ListDatasetsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDatasetsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *PersonalizeDouble) fakeListDatasetsPages(in *personalize.ListDatasetsInput, pager func(*personalize.ListDatasetsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListDatasets", paginators, in, pager)
}

func (d *PersonalizeDouble) ListDatasetsPagesWithContext(i0 context.Context, i1 *personalize.ListDatasetsInput, i2 func(*personalize.ListDatasetsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDatasetsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *PersonalizeDouble) fakeListDatasetsPagesWithContext(ctx context.Context, in *personalize.ListDatasetsInput, pager func(*personalize.ListDatasetsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListDatasets", paginators, ctx, in, pager, options...)
}

func (d *PersonalizeDouble) ListDatasetsRequest(i0 *personalize.ListDatasetsInput) (r0 *request.Request, r1 *personalize.ListDatasetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDatasetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.ListDatasetsOutput)
	return
}

func (d *PersonalizeDouble) ListDatasetsWithContext(i0 context.Context, i1 *personalize.ListDatasetsInput, i2 ...request.Option) (r0 *personalize.ListDatasetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDatasetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.ListDatasetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeListDatasetsWithContext(ctx context.Context, in *personalize.ListDatasetsInput, _ ...request.Option) (*personalize.ListDatasetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDatasets cancelled", ctx.Err())
	default:
		return d.ListDatasets(in)
	}
}

func (d *PersonalizeDouble) ListEventTrackers(i0 *personalize.ListEventTrackersInput) (r0 *personalize.ListEventTrackersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEventTrackers", i0)
	r0, _ = returns[0].(*personalize.ListEventTrackersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) ListEventTrackersPages(i0 *personalize.ListEventTrackersInput, i1 func(*personalize.ListEventTrackersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEventTrackersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *PersonalizeDouble) fakeListEventTrackersPages(in *personalize.ListEventTrackersInput, pager func(*personalize.ListEventTrackersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListEventTrackers", paginators, in, pager)
}

func (d *PersonalizeDouble) ListEventTrackersPagesWithContext(i0 context.Context, i1 *personalize.ListEventTrackersInput, i2 func(*personalize.ListEventTrackersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEventTrackersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *PersonalizeDouble) fakeListEventTrackersPagesWithContext(ctx context.Context, in *personalize.ListEventTrackersInput, pager func(*personalize.ListEventTrackersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListEventTrackers", paginators, ctx, in, pager, options...)
}

func (d *PersonalizeDouble) ListEventTrackersRequest(i0 *personalize.ListEventTrackersInput) (r0 *request.Request, r1 *personalize.ListEventTrackersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEventTrackersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.ListEventTrackersOutput)
	return
}

func (d *PersonalizeDouble) ListEventTrackersWithContext(i0 context.Context, i1 *personalize.ListEventTrackersInput, i2 ...request.Option) (r0 *personalize.ListEventTrackersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEventTrackersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.ListEventTrackersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeListEventTrackersWithContext(ctx context.Context, in *personalize.ListEventTrackersInput, _ ...request.Option) (*personalize.ListEventTrackersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListEventTrackers cancelled", ctx.Err())
	default:
		return d.ListEventTrackers(in)
	}
}

func (d *PersonalizeDouble) ListRecipes(i0 *personalize.ListRecipesInput) (r0 *personalize.ListRecipesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRecipes", i0)
	r0, _ = returns[0].(*personalize.ListRecipesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) ListRecipesPages(i0 *personalize.ListRecipesInput, i1 func(*personalize.ListRecipesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRecipesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *PersonalizeDouble) fakeListRecipesPages(in *personalize.ListRecipesInput, pager func(*personalize.ListRecipesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListRecipes", paginators, in, pager)
}

func (d *PersonalizeDouble) ListRecipesPagesWithContext(i0 context.Context, i1 *personalize.ListRecipesInput, i2 func(*personalize.ListRecipesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRecipesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *PersonalizeDouble) fakeListRecipesPagesWithContext(ctx context.Context, in *personalize.ListRecipesInput, pager func(*personalize.ListRecipesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListRecipes", paginators, ctx, in, pager, options...)
}

func (d *PersonalizeDouble) ListRecipesRequest(i0 *personalize.ListRecipesInput) (r0 *request.Request, r1 *personalize.ListRecipesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRecipesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.ListRecipesOutput)
	return
}

func (d *PersonalizeDouble) ListRecipesWithContext(i0 context.Context, i1 *personalize.ListRecipesInput, i2 ...request.Option) (r0 *personalize.ListRecipesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRecipesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.ListRecipesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeListRecipesWithContext(ctx context.Context, in *personalize.ListRecipesInput, _ ...request.Option) (*personalize.ListRecipesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListRecipes cancelled", ctx.Err())
	default:
		return d.ListRecipes(in)
	}
}

func (d *PersonalizeDouble) ListSchemas(i0 *personalize.ListSchemasInput) (r0 *personalize.ListSchemasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSchemas", i0)
	r0, _ = returns[0].(*personalize.ListSchemasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) ListSchemasPages(i0 *personalize.ListSchemasInput, i1 func(*personalize.ListSchemasOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSchemasPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *PersonalizeDouble) fakeListSchemasPages(in *personalize.ListSchemasInput, pager func(*personalize.ListSchemasOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListSchemas", paginators, in, pager)
}

func (d *PersonalizeDouble) ListSchemasPagesWithContext(i0 context.Context, i1 *personalize.ListSchemasInput, i2 func(*personalize.ListSchemasOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSchemasPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *PersonalizeDouble) fakeListSchemasPagesWithContext(ctx context.Context, in *personalize.ListSchemasInput, pager func(*personalize.ListSchemasOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListSchemas", paginators, ctx, in, pager, options...)
}

func (d *PersonalizeDouble) ListSchemasRequest(i0 *personalize.ListSchemasInput) (r0 *request.Request, r1 *personalize.ListSchemasOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSchemasRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.ListSchemasOutput)
	return
}

func (d *PersonalizeDouble) ListSchemasWithContext(i0 context.Context, i1 *personalize.ListSchemasInput, i2 ...request.Option) (r0 *personalize.ListSchemasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSchemasWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.ListSchemasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeListSchemasWithContext(ctx context.Context, in *personalize.ListSchemasInput, _ ...request.Option) (*personalize.ListSchemasOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListSchemas cancelled", ctx.Err())
	default:
		return d.ListSchemas(in)
	}
}

func (d *PersonalizeDouble) ListSolutionVersions(i0 *personalize.ListSolutionVersionsInput) (r0 *personalize.ListSolutionVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSolutionVersions", i0)
	r0, _ = returns[0].(*personalize.ListSolutionVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) ListSolutionVersionsPages(i0 *personalize.ListSolutionVersionsInput, i1 func(*personalize.ListSolutionVersionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSolutionVersionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *PersonalizeDouble) fakeListSolutionVersionsPages(in *personalize.ListSolutionVersionsInput, pager func(*personalize.ListSolutionVersionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListSolutionVersions", paginators, in, pager)
}

func (d *PersonalizeDouble) ListSolutionVersionsPagesWithContext(i0 context.Context, i1 *personalize.ListSolutionVersionsInput, i2 func(*personalize.ListSolutionVersionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSolutionVersionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *PersonalizeDouble) fakeListSolutionVersionsPagesWithContext(ctx context.Context, in *personalize.ListSolutionVersionsInput, pager func(*personalize.ListSolutionVersionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListSolutionVersions", paginators, ctx, in, pager, options...)
}

func (d *PersonalizeDouble) ListSolutionVersionsRequest(i0 *personalize.ListSolutionVersionsInput) (r0 *request.Request, r1 *personalize.ListSolutionVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSolutionVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.ListSolutionVersionsOutput)
	return
}

func (d *PersonalizeDouble) ListSolutionVersionsWithContext(i0 context.Context, i1 *personalize.ListSolutionVersionsInput, i2 ...request.Option) (r0 *personalize.ListSolutionVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSolutionVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.ListSolutionVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeListSolutionVersionsWithContext(ctx context.Context, in *personalize.ListSolutionVersionsInput, _ ...request.Option) (*personalize.ListSolutionVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListSolutionVersions cancelled", ctx.Err())
	default:
		return d.ListSolutionVersions(in)
	}
}

func (d *PersonalizeDouble) ListSolutions(i0 *personalize.ListSolutionsInput) (r0 *personalize.ListSolutionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSolutions", i0)
	r0, _ = returns[0].(*personalize.ListSolutionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) ListSolutionsPages(i0 *personalize.ListSolutionsInput, i1 func(*personalize.ListSolutionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSolutionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *PersonalizeDouble) fakeListSolutionsPages(in *personalize.ListSolutionsInput, pager func(*personalize.ListSolutionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListSolutions", paginators, in, pager)
}

func (d *PersonalizeDouble) ListSolutionsPagesWithContext(i0 context.Context, i1 *personalize.ListSolutionsInput, i2 func(*personalize.ListSolutionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSolutionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *PersonalizeDouble) fakeListSolutionsPagesWithContext(ctx context.Context, in *personalize.ListSolutionsInput, pager func(*personalize.ListSolutionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListSolutions", paginators, ctx, in, pager, options...)
}

func (d *PersonalizeDouble) ListSolutionsRequest(i0 *personalize.ListSolutionsInput) (r0 *request.Request, r1 *personalize.ListSolutionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSolutionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.ListSolutionsOutput)
	return
}

func (d *PersonalizeDouble) ListSolutionsWithContext(i0 context.Context, i1 *personalize.ListSolutionsInput, i2 ...request.Option) (r0 *personalize.ListSolutionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSolutionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.ListSolutionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeListSolutionsWithContext(ctx context.Context, in *personalize.ListSolutionsInput, _ ...request.Option) (*personalize.ListSolutionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListSolutions cancelled", ctx.Err())
	default:
		return d.ListSolutions(in)
	}
}

func (d *PersonalizeDouble) UpdateCampaign(i0 *personalize.UpdateCampaignInput) (r0 *personalize.UpdateCampaignOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCampaign", i0)
	r0, _ = returns[0].(*personalize.UpdateCampaignOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) UpdateCampaignRequest(i0 *personalize.UpdateCampaignInput) (r0 *request.Request, r1 *personalize.UpdateCampaignOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCampaignRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*personalize.UpdateCampaignOutput)
	return
}

func (d *PersonalizeDouble) UpdateCampaignWithContext(i0 context.Context, i1 *personalize.UpdateCampaignInput, i2 ...request.Option) (r0 *personalize.UpdateCampaignOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCampaignWithContext", i0, i1, i2)
	r0, _ = returns[0].(*personalize.UpdateCampaignOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PersonalizeDouble) fakeUpdateCampaignWithContext(ctx context.Context, in *personalize.UpdateCampaignInput, _ ...request.Option) (*personalize.UpdateCampaignOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateCampaign cancelled", ctx.Err())
	default:
		return d.UpdateCampaign(in)
	}
}
