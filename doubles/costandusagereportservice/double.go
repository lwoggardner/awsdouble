// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:12:08+11:00

// Package costandusagereportservicedouble provides a TestDouble implementation of costandusagereportserviceiface.CostandUsageReportServiceAPI
package costandusagereportservicedouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/costandusagereportservice"
	"github.com/aws/aws-sdk-go/service/costandusagereportservice/costandusagereportserviceiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// CostandUsageReportServiceDouble is TestDouble for costandusagereportserviceiface.CostandUsageReportServiceAPI
type CostandUsageReportServiceDouble struct {
	costandusagereportserviceiface.CostandUsageReportServiceAPI
	*awsdouble.AWSTestDouble
}

// Constructor for CostandUsageReportServiceDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *CostandUsageReportServiceDouble {
	result := &CostandUsageReportServiceDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*costandusagereportserviceiface.CostandUsageReportServiceAPI)(nil), configurators...)
	return result
}

func (d *CostandUsageReportServiceDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *CostandUsageReportServiceDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "DeleteReportDefinitionWithContext":
		return m.Fake(d.fakeDeleteReportDefinitionWithContext)

	case "DescribeReportDefinitionsPages":
		return m.Fake(d.fakeDescribeReportDefinitionsPages)

	case "DescribeReportDefinitionsPagesWithContext":
		return m.Fake(d.fakeDescribeReportDefinitionsPagesWithContext)

	case "DescribeReportDefinitionsWithContext":
		return m.Fake(d.fakeDescribeReportDefinitionsWithContext)

	case "ModifyReportDefinitionWithContext":
		return m.Fake(d.fakeModifyReportDefinitionWithContext)

	case "PutReportDefinitionWithContext":
		return m.Fake(d.fakePutReportDefinitionWithContext)

	default:
		return nil
	}
}

func (d *CostandUsageReportServiceDouble) DeleteReportDefinition(i0 *costandusagereportservice.DeleteReportDefinitionInput) (r0 *costandusagereportservice.DeleteReportDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteReportDefinition", i0)
	r0, _ = returns[0].(*costandusagereportservice.DeleteReportDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CostandUsageReportServiceDouble) DeleteReportDefinitionRequest(i0 *costandusagereportservice.DeleteReportDefinitionInput) (r0 *request.Request, r1 *costandusagereportservice.DeleteReportDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteReportDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*costandusagereportservice.DeleteReportDefinitionOutput)
	return
}

func (d *CostandUsageReportServiceDouble) DeleteReportDefinitionWithContext(i0 context.Context, i1 *costandusagereportservice.DeleteReportDefinitionInput, i2 ...request.Option) (r0 *costandusagereportservice.DeleteReportDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteReportDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*costandusagereportservice.DeleteReportDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CostandUsageReportServiceDouble) fakeDeleteReportDefinitionWithContext(ctx context.Context, in *costandusagereportservice.DeleteReportDefinitionInput, _ ...request.Option) (*costandusagereportservice.DeleteReportDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteReportDefinition cancelled", ctx.Err())
	default:
		return d.DeleteReportDefinition(in)
	}
}

func (d *CostandUsageReportServiceDouble) DescribeReportDefinitions(i0 *costandusagereportservice.DescribeReportDefinitionsInput) (r0 *costandusagereportservice.DescribeReportDefinitionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReportDefinitions", i0)
	r0, _ = returns[0].(*costandusagereportservice.DescribeReportDefinitionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CostandUsageReportServiceDouble) DescribeReportDefinitionsPages(i0 *costandusagereportservice.DescribeReportDefinitionsInput, i1 func(*costandusagereportservice.DescribeReportDefinitionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReportDefinitionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CostandUsageReportServiceDouble) fakeDescribeReportDefinitionsPages(in *costandusagereportservice.DescribeReportDefinitionsInput, pager func(*costandusagereportservice.DescribeReportDefinitionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeReportDefinitions", paginators, in, pager)
}

func (d *CostandUsageReportServiceDouble) DescribeReportDefinitionsPagesWithContext(i0 context.Context, i1 *costandusagereportservice.DescribeReportDefinitionsInput, i2 func(*costandusagereportservice.DescribeReportDefinitionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReportDefinitionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CostandUsageReportServiceDouble) fakeDescribeReportDefinitionsPagesWithContext(ctx context.Context, in *costandusagereportservice.DescribeReportDefinitionsInput, pager func(*costandusagereportservice.DescribeReportDefinitionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeReportDefinitions", paginators, ctx, in, pager, options...)
}

func (d *CostandUsageReportServiceDouble) DescribeReportDefinitionsRequest(i0 *costandusagereportservice.DescribeReportDefinitionsInput) (r0 *request.Request, r1 *costandusagereportservice.DescribeReportDefinitionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReportDefinitionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*costandusagereportservice.DescribeReportDefinitionsOutput)
	return
}

func (d *CostandUsageReportServiceDouble) DescribeReportDefinitionsWithContext(i0 context.Context, i1 *costandusagereportservice.DescribeReportDefinitionsInput, i2 ...request.Option) (r0 *costandusagereportservice.DescribeReportDefinitionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReportDefinitionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*costandusagereportservice.DescribeReportDefinitionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CostandUsageReportServiceDouble) fakeDescribeReportDefinitionsWithContext(ctx context.Context, in *costandusagereportservice.DescribeReportDefinitionsInput, _ ...request.Option) (*costandusagereportservice.DescribeReportDefinitionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeReportDefinitions cancelled", ctx.Err())
	default:
		return d.DescribeReportDefinitions(in)
	}
}

func (d *CostandUsageReportServiceDouble) ModifyReportDefinition(i0 *costandusagereportservice.ModifyReportDefinitionInput) (r0 *costandusagereportservice.ModifyReportDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyReportDefinition", i0)
	r0, _ = returns[0].(*costandusagereportservice.ModifyReportDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CostandUsageReportServiceDouble) ModifyReportDefinitionRequest(i0 *costandusagereportservice.ModifyReportDefinitionInput) (r0 *request.Request, r1 *costandusagereportservice.ModifyReportDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyReportDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*costandusagereportservice.ModifyReportDefinitionOutput)
	return
}

func (d *CostandUsageReportServiceDouble) ModifyReportDefinitionWithContext(i0 context.Context, i1 *costandusagereportservice.ModifyReportDefinitionInput, i2 ...request.Option) (r0 *costandusagereportservice.ModifyReportDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyReportDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*costandusagereportservice.ModifyReportDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CostandUsageReportServiceDouble) fakeModifyReportDefinitionWithContext(ctx context.Context, in *costandusagereportservice.ModifyReportDefinitionInput, _ ...request.Option) (*costandusagereportservice.ModifyReportDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyReportDefinition cancelled", ctx.Err())
	default:
		return d.ModifyReportDefinition(in)
	}
}

func (d *CostandUsageReportServiceDouble) PutReportDefinition(i0 *costandusagereportservice.PutReportDefinitionInput) (r0 *costandusagereportservice.PutReportDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutReportDefinition", i0)
	r0, _ = returns[0].(*costandusagereportservice.PutReportDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CostandUsageReportServiceDouble) PutReportDefinitionRequest(i0 *costandusagereportservice.PutReportDefinitionInput) (r0 *request.Request, r1 *costandusagereportservice.PutReportDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutReportDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*costandusagereportservice.PutReportDefinitionOutput)
	return
}

func (d *CostandUsageReportServiceDouble) PutReportDefinitionWithContext(i0 context.Context, i1 *costandusagereportservice.PutReportDefinitionInput, i2 ...request.Option) (r0 *costandusagereportservice.PutReportDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutReportDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*costandusagereportservice.PutReportDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CostandUsageReportServiceDouble) fakePutReportDefinitionWithContext(ctx context.Context, in *costandusagereportservice.PutReportDefinitionInput, _ ...request.Option) (*costandusagereportservice.PutReportDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutReportDefinition cancelled", ctx.Err())
	default:
		return d.PutReportDefinition(in)
	}
}
