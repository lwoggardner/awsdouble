// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:13:55+11:00

// Package mediapackagedouble provides a TestDouble implementation of mediapackageiface.MediaPackageAPI
package mediapackagedouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/mediapackage"
	"github.com/aws/aws-sdk-go/service/mediapackage/mediapackageiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// MediaPackageDouble is TestDouble for mediapackageiface.MediaPackageAPI
type MediaPackageDouble struct {
	mediapackageiface.MediaPackageAPI
	*awsdouble.AWSTestDouble
}

// Constructor for MediaPackageDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *MediaPackageDouble {
	result := &MediaPackageDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*mediapackageiface.MediaPackageAPI)(nil), configurators...)
	return result
}

func (d *MediaPackageDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *MediaPackageDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CreateChannelWithContext":
		return m.Fake(d.fakeCreateChannelWithContext)

	case "CreateHarvestJobWithContext":
		return m.Fake(d.fakeCreateHarvestJobWithContext)

	case "CreateOriginEndpointWithContext":
		return m.Fake(d.fakeCreateOriginEndpointWithContext)

	case "DeleteChannelWithContext":
		return m.Fake(d.fakeDeleteChannelWithContext)

	case "DeleteOriginEndpointWithContext":
		return m.Fake(d.fakeDeleteOriginEndpointWithContext)

	case "DescribeChannelWithContext":
		return m.Fake(d.fakeDescribeChannelWithContext)

	case "DescribeHarvestJobWithContext":
		return m.Fake(d.fakeDescribeHarvestJobWithContext)

	case "DescribeOriginEndpointWithContext":
		return m.Fake(d.fakeDescribeOriginEndpointWithContext)

	case "ListChannelsPages":
		return m.Fake(d.fakeListChannelsPages)

	case "ListChannelsPagesWithContext":
		return m.Fake(d.fakeListChannelsPagesWithContext)

	case "ListChannelsWithContext":
		return m.Fake(d.fakeListChannelsWithContext)

	case "ListHarvestJobsPages":
		return m.Fake(d.fakeListHarvestJobsPages)

	case "ListHarvestJobsPagesWithContext":
		return m.Fake(d.fakeListHarvestJobsPagesWithContext)

	case "ListHarvestJobsWithContext":
		return m.Fake(d.fakeListHarvestJobsWithContext)

	case "ListOriginEndpointsPages":
		return m.Fake(d.fakeListOriginEndpointsPages)

	case "ListOriginEndpointsPagesWithContext":
		return m.Fake(d.fakeListOriginEndpointsPagesWithContext)

	case "ListOriginEndpointsWithContext":
		return m.Fake(d.fakeListOriginEndpointsWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "RotateChannelCredentialsWithContext":
		return m.Fake(d.fakeRotateChannelCredentialsWithContext)

	case "RotateIngestEndpointCredentialsWithContext":
		return m.Fake(d.fakeRotateIngestEndpointCredentialsWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateChannelWithContext":
		return m.Fake(d.fakeUpdateChannelWithContext)

	case "UpdateOriginEndpointWithContext":
		return m.Fake(d.fakeUpdateOriginEndpointWithContext)

	default:
		return nil
	}
}

func (d *MediaPackageDouble) CreateChannel(i0 *mediapackage.CreateChannelInput) (r0 *mediapackage.CreateChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateChannel", i0)
	r0, _ = returns[0].(*mediapackage.CreateChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaPackageDouble) CreateChannelRequest(i0 *mediapackage.CreateChannelInput) (r0 *request.Request, r1 *mediapackage.CreateChannelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateChannelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediapackage.CreateChannelOutput)
	return
}

func (d *MediaPackageDouble) CreateChannelWithContext(i0 context.Context, i1 *mediapackage.CreateChannelInput, i2 ...request.Option) (r0 *mediapackage.CreateChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateChannelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediapackage.CreateChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaPackageDouble) fakeCreateChannelWithContext(ctx context.Context, in *mediapackage.CreateChannelInput, _ ...request.Option) (*mediapackage.CreateChannelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateChannel cancelled", ctx.Err())
	default:
		return d.CreateChannel(in)
	}
}

func (d *MediaPackageDouble) CreateHarvestJob(i0 *mediapackage.CreateHarvestJobInput) (r0 *mediapackage.CreateHarvestJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHarvestJob", i0)
	r0, _ = returns[0].(*mediapackage.CreateHarvestJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaPackageDouble) CreateHarvestJobRequest(i0 *mediapackage.CreateHarvestJobInput) (r0 *request.Request, r1 *mediapackage.CreateHarvestJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHarvestJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediapackage.CreateHarvestJobOutput)
	return
}

func (d *MediaPackageDouble) CreateHarvestJobWithContext(i0 context.Context, i1 *mediapackage.CreateHarvestJobInput, i2 ...request.Option) (r0 *mediapackage.CreateHarvestJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHarvestJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediapackage.CreateHarvestJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaPackageDouble) fakeCreateHarvestJobWithContext(ctx context.Context, in *mediapackage.CreateHarvestJobInput, _ ...request.Option) (*mediapackage.CreateHarvestJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateHarvestJob cancelled", ctx.Err())
	default:
		return d.CreateHarvestJob(in)
	}
}

func (d *MediaPackageDouble) CreateOriginEndpoint(i0 *mediapackage.CreateOriginEndpointInput) (r0 *mediapackage.CreateOriginEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateOriginEndpoint", i0)
	r0, _ = returns[0].(*mediapackage.CreateOriginEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaPackageDouble) CreateOriginEndpointRequest(i0 *mediapackage.CreateOriginEndpointInput) (r0 *request.Request, r1 *mediapackage.CreateOriginEndpointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateOriginEndpointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediapackage.CreateOriginEndpointOutput)
	return
}

func (d *MediaPackageDouble) CreateOriginEndpointWithContext(i0 context.Context, i1 *mediapackage.CreateOriginEndpointInput, i2 ...request.Option) (r0 *mediapackage.CreateOriginEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateOriginEndpointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediapackage.CreateOriginEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaPackageDouble) fakeCreateOriginEndpointWithContext(ctx context.Context, in *mediapackage.CreateOriginEndpointInput, _ ...request.Option) (*mediapackage.CreateOriginEndpointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateOriginEndpoint cancelled", ctx.Err())
	default:
		return d.CreateOriginEndpoint(in)
	}
}

func (d *MediaPackageDouble) DeleteChannel(i0 *mediapackage.DeleteChannelInput) (r0 *mediapackage.DeleteChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteChannel", i0)
	r0, _ = returns[0].(*mediapackage.DeleteChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaPackageDouble) DeleteChannelRequest(i0 *mediapackage.DeleteChannelInput) (r0 *request.Request, r1 *mediapackage.DeleteChannelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteChannelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediapackage.DeleteChannelOutput)
	return
}

func (d *MediaPackageDouble) DeleteChannelWithContext(i0 context.Context, i1 *mediapackage.DeleteChannelInput, i2 ...request.Option) (r0 *mediapackage.DeleteChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteChannelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediapackage.DeleteChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaPackageDouble) fakeDeleteChannelWithContext(ctx context.Context, in *mediapackage.DeleteChannelInput, _ ...request.Option) (*mediapackage.DeleteChannelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteChannel cancelled", ctx.Err())
	default:
		return d.DeleteChannel(in)
	}
}

func (d *MediaPackageDouble) DeleteOriginEndpoint(i0 *mediapackage.DeleteOriginEndpointInput) (r0 *mediapackage.DeleteOriginEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteOriginEndpoint", i0)
	r0, _ = returns[0].(*mediapackage.DeleteOriginEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaPackageDouble) DeleteOriginEndpointRequest(i0 *mediapackage.DeleteOriginEndpointInput) (r0 *request.Request, r1 *mediapackage.DeleteOriginEndpointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteOriginEndpointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediapackage.DeleteOriginEndpointOutput)
	return
}

func (d *MediaPackageDouble) DeleteOriginEndpointWithContext(i0 context.Context, i1 *mediapackage.DeleteOriginEndpointInput, i2 ...request.Option) (r0 *mediapackage.DeleteOriginEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteOriginEndpointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediapackage.DeleteOriginEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaPackageDouble) fakeDeleteOriginEndpointWithContext(ctx context.Context, in *mediapackage.DeleteOriginEndpointInput, _ ...request.Option) (*mediapackage.DeleteOriginEndpointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteOriginEndpoint cancelled", ctx.Err())
	default:
		return d.DeleteOriginEndpoint(in)
	}
}

func (d *MediaPackageDouble) DescribeChannel(i0 *mediapackage.DescribeChannelInput) (r0 *mediapackage.DescribeChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeChannel", i0)
	r0, _ = returns[0].(*mediapackage.DescribeChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaPackageDouble) DescribeChannelRequest(i0 *mediapackage.DescribeChannelInput) (r0 *request.Request, r1 *mediapackage.DescribeChannelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeChannelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediapackage.DescribeChannelOutput)
	return
}

func (d *MediaPackageDouble) DescribeChannelWithContext(i0 context.Context, i1 *mediapackage.DescribeChannelInput, i2 ...request.Option) (r0 *mediapackage.DescribeChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeChannelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediapackage.DescribeChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaPackageDouble) fakeDescribeChannelWithContext(ctx context.Context, in *mediapackage.DescribeChannelInput, _ ...request.Option) (*mediapackage.DescribeChannelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeChannel cancelled", ctx.Err())
	default:
		return d.DescribeChannel(in)
	}
}

func (d *MediaPackageDouble) DescribeHarvestJob(i0 *mediapackage.DescribeHarvestJobInput) (r0 *mediapackage.DescribeHarvestJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHarvestJob", i0)
	r0, _ = returns[0].(*mediapackage.DescribeHarvestJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaPackageDouble) DescribeHarvestJobRequest(i0 *mediapackage.DescribeHarvestJobInput) (r0 *request.Request, r1 *mediapackage.DescribeHarvestJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHarvestJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediapackage.DescribeHarvestJobOutput)
	return
}

func (d *MediaPackageDouble) DescribeHarvestJobWithContext(i0 context.Context, i1 *mediapackage.DescribeHarvestJobInput, i2 ...request.Option) (r0 *mediapackage.DescribeHarvestJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHarvestJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediapackage.DescribeHarvestJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaPackageDouble) fakeDescribeHarvestJobWithContext(ctx context.Context, in *mediapackage.DescribeHarvestJobInput, _ ...request.Option) (*mediapackage.DescribeHarvestJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeHarvestJob cancelled", ctx.Err())
	default:
		return d.DescribeHarvestJob(in)
	}
}

func (d *MediaPackageDouble) DescribeOriginEndpoint(i0 *mediapackage.DescribeOriginEndpointInput) (r0 *mediapackage.DescribeOriginEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOriginEndpoint", i0)
	r0, _ = returns[0].(*mediapackage.DescribeOriginEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaPackageDouble) DescribeOriginEndpointRequest(i0 *mediapackage.DescribeOriginEndpointInput) (r0 *request.Request, r1 *mediapackage.DescribeOriginEndpointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOriginEndpointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediapackage.DescribeOriginEndpointOutput)
	return
}

func (d *MediaPackageDouble) DescribeOriginEndpointWithContext(i0 context.Context, i1 *mediapackage.DescribeOriginEndpointInput, i2 ...request.Option) (r0 *mediapackage.DescribeOriginEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOriginEndpointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediapackage.DescribeOriginEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaPackageDouble) fakeDescribeOriginEndpointWithContext(ctx context.Context, in *mediapackage.DescribeOriginEndpointInput, _ ...request.Option) (*mediapackage.DescribeOriginEndpointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeOriginEndpoint cancelled", ctx.Err())
	default:
		return d.DescribeOriginEndpoint(in)
	}
}

func (d *MediaPackageDouble) ListChannels(i0 *mediapackage.ListChannelsInput) (r0 *mediapackage.ListChannelsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListChannels", i0)
	r0, _ = returns[0].(*mediapackage.ListChannelsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaPackageDouble) ListChannelsPages(i0 *mediapackage.ListChannelsInput, i1 func(*mediapackage.ListChannelsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListChannelsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaPackageDouble) fakeListChannelsPages(in *mediapackage.ListChannelsInput, pager func(*mediapackage.ListChannelsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListChannels", paginators, in, pager)
}

func (d *MediaPackageDouble) ListChannelsPagesWithContext(i0 context.Context, i1 *mediapackage.ListChannelsInput, i2 func(*mediapackage.ListChannelsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListChannelsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaPackageDouble) fakeListChannelsPagesWithContext(ctx context.Context, in *mediapackage.ListChannelsInput, pager func(*mediapackage.ListChannelsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListChannels", paginators, ctx, in, pager, options...)
}

func (d *MediaPackageDouble) ListChannelsRequest(i0 *mediapackage.ListChannelsInput) (r0 *request.Request, r1 *mediapackage.ListChannelsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListChannelsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediapackage.ListChannelsOutput)
	return
}

func (d *MediaPackageDouble) ListChannelsWithContext(i0 context.Context, i1 *mediapackage.ListChannelsInput, i2 ...request.Option) (r0 *mediapackage.ListChannelsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListChannelsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediapackage.ListChannelsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaPackageDouble) fakeListChannelsWithContext(ctx context.Context, in *mediapackage.ListChannelsInput, _ ...request.Option) (*mediapackage.ListChannelsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListChannels cancelled", ctx.Err())
	default:
		return d.ListChannels(in)
	}
}

func (d *MediaPackageDouble) ListHarvestJobs(i0 *mediapackage.ListHarvestJobsInput) (r0 *mediapackage.ListHarvestJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHarvestJobs", i0)
	r0, _ = returns[0].(*mediapackage.ListHarvestJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaPackageDouble) ListHarvestJobsPages(i0 *mediapackage.ListHarvestJobsInput, i1 func(*mediapackage.ListHarvestJobsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHarvestJobsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaPackageDouble) fakeListHarvestJobsPages(in *mediapackage.ListHarvestJobsInput, pager func(*mediapackage.ListHarvestJobsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListHarvestJobs", paginators, in, pager)
}

func (d *MediaPackageDouble) ListHarvestJobsPagesWithContext(i0 context.Context, i1 *mediapackage.ListHarvestJobsInput, i2 func(*mediapackage.ListHarvestJobsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHarvestJobsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaPackageDouble) fakeListHarvestJobsPagesWithContext(ctx context.Context, in *mediapackage.ListHarvestJobsInput, pager func(*mediapackage.ListHarvestJobsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListHarvestJobs", paginators, ctx, in, pager, options...)
}

func (d *MediaPackageDouble) ListHarvestJobsRequest(i0 *mediapackage.ListHarvestJobsInput) (r0 *request.Request, r1 *mediapackage.ListHarvestJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHarvestJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediapackage.ListHarvestJobsOutput)
	return
}

func (d *MediaPackageDouble) ListHarvestJobsWithContext(i0 context.Context, i1 *mediapackage.ListHarvestJobsInput, i2 ...request.Option) (r0 *mediapackage.ListHarvestJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHarvestJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediapackage.ListHarvestJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaPackageDouble) fakeListHarvestJobsWithContext(ctx context.Context, in *mediapackage.ListHarvestJobsInput, _ ...request.Option) (*mediapackage.ListHarvestJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListHarvestJobs cancelled", ctx.Err())
	default:
		return d.ListHarvestJobs(in)
	}
}

func (d *MediaPackageDouble) ListOriginEndpoints(i0 *mediapackage.ListOriginEndpointsInput) (r0 *mediapackage.ListOriginEndpointsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOriginEndpoints", i0)
	r0, _ = returns[0].(*mediapackage.ListOriginEndpointsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaPackageDouble) ListOriginEndpointsPages(i0 *mediapackage.ListOriginEndpointsInput, i1 func(*mediapackage.ListOriginEndpointsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOriginEndpointsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaPackageDouble) fakeListOriginEndpointsPages(in *mediapackage.ListOriginEndpointsInput, pager func(*mediapackage.ListOriginEndpointsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListOriginEndpoints", paginators, in, pager)
}

func (d *MediaPackageDouble) ListOriginEndpointsPagesWithContext(i0 context.Context, i1 *mediapackage.ListOriginEndpointsInput, i2 func(*mediapackage.ListOriginEndpointsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOriginEndpointsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaPackageDouble) fakeListOriginEndpointsPagesWithContext(ctx context.Context, in *mediapackage.ListOriginEndpointsInput, pager func(*mediapackage.ListOriginEndpointsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListOriginEndpoints", paginators, ctx, in, pager, options...)
}

func (d *MediaPackageDouble) ListOriginEndpointsRequest(i0 *mediapackage.ListOriginEndpointsInput) (r0 *request.Request, r1 *mediapackage.ListOriginEndpointsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOriginEndpointsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediapackage.ListOriginEndpointsOutput)
	return
}

func (d *MediaPackageDouble) ListOriginEndpointsWithContext(i0 context.Context, i1 *mediapackage.ListOriginEndpointsInput, i2 ...request.Option) (r0 *mediapackage.ListOriginEndpointsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOriginEndpointsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediapackage.ListOriginEndpointsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaPackageDouble) fakeListOriginEndpointsWithContext(ctx context.Context, in *mediapackage.ListOriginEndpointsInput, _ ...request.Option) (*mediapackage.ListOriginEndpointsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListOriginEndpoints cancelled", ctx.Err())
	default:
		return d.ListOriginEndpoints(in)
	}
}

func (d *MediaPackageDouble) ListTagsForResource(i0 *mediapackage.ListTagsForResourceInput) (r0 *mediapackage.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*mediapackage.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaPackageDouble) ListTagsForResourceRequest(i0 *mediapackage.ListTagsForResourceInput) (r0 *request.Request, r1 *mediapackage.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediapackage.ListTagsForResourceOutput)
	return
}

func (d *MediaPackageDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *mediapackage.ListTagsForResourceInput, i2 ...request.Option) (r0 *mediapackage.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediapackage.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaPackageDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *mediapackage.ListTagsForResourceInput, _ ...request.Option) (*mediapackage.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *MediaPackageDouble) RotateChannelCredentials(i0 *mediapackage.RotateChannelCredentialsInput) (r0 *mediapackage.RotateChannelCredentialsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RotateChannelCredentials", i0)
	r0, _ = returns[0].(*mediapackage.RotateChannelCredentialsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaPackageDouble) RotateChannelCredentialsRequest(i0 *mediapackage.RotateChannelCredentialsInput) (r0 *request.Request, r1 *mediapackage.RotateChannelCredentialsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RotateChannelCredentialsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediapackage.RotateChannelCredentialsOutput)
	return
}

func (d *MediaPackageDouble) RotateChannelCredentialsWithContext(i0 context.Context, i1 *mediapackage.RotateChannelCredentialsInput, i2 ...request.Option) (r0 *mediapackage.RotateChannelCredentialsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RotateChannelCredentialsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediapackage.RotateChannelCredentialsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaPackageDouble) fakeRotateChannelCredentialsWithContext(ctx context.Context, in *mediapackage.RotateChannelCredentialsInput, _ ...request.Option) (*mediapackage.RotateChannelCredentialsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RotateChannelCredentials cancelled", ctx.Err())
	default:
		return d.RotateChannelCredentials(in)
	}
}

func (d *MediaPackageDouble) RotateIngestEndpointCredentials(i0 *mediapackage.RotateIngestEndpointCredentialsInput) (r0 *mediapackage.RotateIngestEndpointCredentialsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RotateIngestEndpointCredentials", i0)
	r0, _ = returns[0].(*mediapackage.RotateIngestEndpointCredentialsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaPackageDouble) RotateIngestEndpointCredentialsRequest(i0 *mediapackage.RotateIngestEndpointCredentialsInput) (r0 *request.Request, r1 *mediapackage.RotateIngestEndpointCredentialsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RotateIngestEndpointCredentialsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediapackage.RotateIngestEndpointCredentialsOutput)
	return
}

func (d *MediaPackageDouble) RotateIngestEndpointCredentialsWithContext(i0 context.Context, i1 *mediapackage.RotateIngestEndpointCredentialsInput, i2 ...request.Option) (r0 *mediapackage.RotateIngestEndpointCredentialsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RotateIngestEndpointCredentialsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediapackage.RotateIngestEndpointCredentialsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaPackageDouble) fakeRotateIngestEndpointCredentialsWithContext(ctx context.Context, in *mediapackage.RotateIngestEndpointCredentialsInput, _ ...request.Option) (*mediapackage.RotateIngestEndpointCredentialsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RotateIngestEndpointCredentials cancelled", ctx.Err())
	default:
		return d.RotateIngestEndpointCredentials(in)
	}
}

func (d *MediaPackageDouble) TagResource(i0 *mediapackage.TagResourceInput) (r0 *mediapackage.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*mediapackage.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaPackageDouble) TagResourceRequest(i0 *mediapackage.TagResourceInput) (r0 *request.Request, r1 *mediapackage.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediapackage.TagResourceOutput)
	return
}

func (d *MediaPackageDouble) TagResourceWithContext(i0 context.Context, i1 *mediapackage.TagResourceInput, i2 ...request.Option) (r0 *mediapackage.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediapackage.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaPackageDouble) fakeTagResourceWithContext(ctx context.Context, in *mediapackage.TagResourceInput, _ ...request.Option) (*mediapackage.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *MediaPackageDouble) UntagResource(i0 *mediapackage.UntagResourceInput) (r0 *mediapackage.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*mediapackage.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaPackageDouble) UntagResourceRequest(i0 *mediapackage.UntagResourceInput) (r0 *request.Request, r1 *mediapackage.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediapackage.UntagResourceOutput)
	return
}

func (d *MediaPackageDouble) UntagResourceWithContext(i0 context.Context, i1 *mediapackage.UntagResourceInput, i2 ...request.Option) (r0 *mediapackage.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediapackage.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaPackageDouble) fakeUntagResourceWithContext(ctx context.Context, in *mediapackage.UntagResourceInput, _ ...request.Option) (*mediapackage.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *MediaPackageDouble) UpdateChannel(i0 *mediapackage.UpdateChannelInput) (r0 *mediapackage.UpdateChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateChannel", i0)
	r0, _ = returns[0].(*mediapackage.UpdateChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaPackageDouble) UpdateChannelRequest(i0 *mediapackage.UpdateChannelInput) (r0 *request.Request, r1 *mediapackage.UpdateChannelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateChannelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediapackage.UpdateChannelOutput)
	return
}

func (d *MediaPackageDouble) UpdateChannelWithContext(i0 context.Context, i1 *mediapackage.UpdateChannelInput, i2 ...request.Option) (r0 *mediapackage.UpdateChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateChannelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediapackage.UpdateChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaPackageDouble) fakeUpdateChannelWithContext(ctx context.Context, in *mediapackage.UpdateChannelInput, _ ...request.Option) (*mediapackage.UpdateChannelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateChannel cancelled", ctx.Err())
	default:
		return d.UpdateChannel(in)
	}
}

func (d *MediaPackageDouble) UpdateOriginEndpoint(i0 *mediapackage.UpdateOriginEndpointInput) (r0 *mediapackage.UpdateOriginEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateOriginEndpoint", i0)
	r0, _ = returns[0].(*mediapackage.UpdateOriginEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaPackageDouble) UpdateOriginEndpointRequest(i0 *mediapackage.UpdateOriginEndpointInput) (r0 *request.Request, r1 *mediapackage.UpdateOriginEndpointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateOriginEndpointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediapackage.UpdateOriginEndpointOutput)
	return
}

func (d *MediaPackageDouble) UpdateOriginEndpointWithContext(i0 context.Context, i1 *mediapackage.UpdateOriginEndpointInput, i2 ...request.Option) (r0 *mediapackage.UpdateOriginEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateOriginEndpointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediapackage.UpdateOriginEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaPackageDouble) fakeUpdateOriginEndpointWithContext(ctx context.Context, in *mediapackage.UpdateOriginEndpointInput, _ ...request.Option) (*mediapackage.UpdateOriginEndpointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateOriginEndpoint cancelled", ctx.Err())
	default:
		return d.UpdateOriginEndpoint(in)
	}
}
