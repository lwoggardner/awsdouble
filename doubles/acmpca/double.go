// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:11:03+11:00

// Package acmpcadouble provides a TestDouble implementation of acmpcaiface.ACMPCAAPI
package acmpcadouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/acmpca"
	"github.com/aws/aws-sdk-go/service/acmpca/acmpcaiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// ACMPCADouble is TestDouble for acmpcaiface.ACMPCAAPI
type ACMPCADouble struct {
	acmpcaiface.ACMPCAAPI
	*awsdouble.AWSTestDouble
}

// Constructor for ACMPCADouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *ACMPCADouble {
	result := &ACMPCADouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*acmpcaiface.ACMPCAAPI)(nil), configurators...)
	return result
}

func (d *ACMPCADouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *ACMPCADouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CreateCertificateAuthorityAuditReportWithContext":
		return m.Fake(d.fakeCreateCertificateAuthorityAuditReportWithContext)

	case "CreateCertificateAuthorityWithContext":
		return m.Fake(d.fakeCreateCertificateAuthorityWithContext)

	case "CreatePermissionWithContext":
		return m.Fake(d.fakeCreatePermissionWithContext)

	case "DeleteCertificateAuthorityWithContext":
		return m.Fake(d.fakeDeleteCertificateAuthorityWithContext)

	case "DeletePermissionWithContext":
		return m.Fake(d.fakeDeletePermissionWithContext)

	case "DescribeCertificateAuthorityAuditReportWithContext":
		return m.Fake(d.fakeDescribeCertificateAuthorityAuditReportWithContext)

	case "DescribeCertificateAuthorityWithContext":
		return m.Fake(d.fakeDescribeCertificateAuthorityWithContext)

	case "GetCertificateAuthorityCertificateWithContext":
		return m.Fake(d.fakeGetCertificateAuthorityCertificateWithContext)

	case "GetCertificateAuthorityCsrWithContext":
		return m.Fake(d.fakeGetCertificateAuthorityCsrWithContext)

	case "GetCertificateWithContext":
		return m.Fake(d.fakeGetCertificateWithContext)

	case "ImportCertificateAuthorityCertificateWithContext":
		return m.Fake(d.fakeImportCertificateAuthorityCertificateWithContext)

	case "IssueCertificateWithContext":
		return m.Fake(d.fakeIssueCertificateWithContext)

	case "ListCertificateAuthoritiesPages":
		return m.Fake(d.fakeListCertificateAuthoritiesPages)

	case "ListCertificateAuthoritiesPagesWithContext":
		return m.Fake(d.fakeListCertificateAuthoritiesPagesWithContext)

	case "ListCertificateAuthoritiesWithContext":
		return m.Fake(d.fakeListCertificateAuthoritiesWithContext)

	case "ListPermissionsPages":
		return m.Fake(d.fakeListPermissionsPages)

	case "ListPermissionsPagesWithContext":
		return m.Fake(d.fakeListPermissionsPagesWithContext)

	case "ListPermissionsWithContext":
		return m.Fake(d.fakeListPermissionsWithContext)

	case "ListTagsPages":
		return m.Fake(d.fakeListTagsPages)

	case "ListTagsPagesWithContext":
		return m.Fake(d.fakeListTagsPagesWithContext)

	case "ListTagsWithContext":
		return m.Fake(d.fakeListTagsWithContext)

	case "RestoreCertificateAuthorityWithContext":
		return m.Fake(d.fakeRestoreCertificateAuthorityWithContext)

	case "RevokeCertificateWithContext":
		return m.Fake(d.fakeRevokeCertificateWithContext)

	case "TagCertificateAuthorityWithContext":
		return m.Fake(d.fakeTagCertificateAuthorityWithContext)

	case "UntagCertificateAuthorityWithContext":
		return m.Fake(d.fakeUntagCertificateAuthorityWithContext)

	case "UpdateCertificateAuthorityWithContext":
		return m.Fake(d.fakeUpdateCertificateAuthorityWithContext)

	case "WaitUntilAuditReportCreated":
		return m.Fake(d.fakeWaitUntilAuditReportCreated)

	case "WaitUntilAuditReportCreatedWithContext":
		return m.Fake(d.fakeWaitUntilAuditReportCreatedWithContext)

	case "WaitUntilCertificateAuthorityCSRCreated":
		return m.Fake(d.fakeWaitUntilCertificateAuthorityCSRCreated)

	case "WaitUntilCertificateAuthorityCSRCreatedWithContext":
		return m.Fake(d.fakeWaitUntilCertificateAuthorityCSRCreatedWithContext)

	case "WaitUntilCertificateIssued":
		return m.Fake(d.fakeWaitUntilCertificateIssued)

	case "WaitUntilCertificateIssuedWithContext":
		return m.Fake(d.fakeWaitUntilCertificateIssuedWithContext)

	default:
		return nil
	}
}

func (d *ACMPCADouble) CreateCertificateAuthority(i0 *acmpca.CreateCertificateAuthorityInput) (r0 *acmpca.CreateCertificateAuthorityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCertificateAuthority", i0)
	r0, _ = returns[0].(*acmpca.CreateCertificateAuthorityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) CreateCertificateAuthorityAuditReport(i0 *acmpca.CreateCertificateAuthorityAuditReportInput) (r0 *acmpca.CreateCertificateAuthorityAuditReportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCertificateAuthorityAuditReport", i0)
	r0, _ = returns[0].(*acmpca.CreateCertificateAuthorityAuditReportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) CreateCertificateAuthorityAuditReportRequest(i0 *acmpca.CreateCertificateAuthorityAuditReportInput) (r0 *request.Request, r1 *acmpca.CreateCertificateAuthorityAuditReportOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCertificateAuthorityAuditReportRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*acmpca.CreateCertificateAuthorityAuditReportOutput)
	return
}

func (d *ACMPCADouble) CreateCertificateAuthorityAuditReportWithContext(i0 context.Context, i1 *acmpca.CreateCertificateAuthorityAuditReportInput, i2 ...request.Option) (r0 *acmpca.CreateCertificateAuthorityAuditReportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCertificateAuthorityAuditReportWithContext", i0, i1, i2)
	r0, _ = returns[0].(*acmpca.CreateCertificateAuthorityAuditReportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) fakeCreateCertificateAuthorityAuditReportWithContext(ctx context.Context, in *acmpca.CreateCertificateAuthorityAuditReportInput, _ ...request.Option) (*acmpca.CreateCertificateAuthorityAuditReportOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateCertificateAuthorityAuditReport cancelled", ctx.Err())
	default:
		return d.CreateCertificateAuthorityAuditReport(in)
	}
}

func (d *ACMPCADouble) CreateCertificateAuthorityRequest(i0 *acmpca.CreateCertificateAuthorityInput) (r0 *request.Request, r1 *acmpca.CreateCertificateAuthorityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCertificateAuthorityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*acmpca.CreateCertificateAuthorityOutput)
	return
}

func (d *ACMPCADouble) CreateCertificateAuthorityWithContext(i0 context.Context, i1 *acmpca.CreateCertificateAuthorityInput, i2 ...request.Option) (r0 *acmpca.CreateCertificateAuthorityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCertificateAuthorityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*acmpca.CreateCertificateAuthorityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) fakeCreateCertificateAuthorityWithContext(ctx context.Context, in *acmpca.CreateCertificateAuthorityInput, _ ...request.Option) (*acmpca.CreateCertificateAuthorityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateCertificateAuthority cancelled", ctx.Err())
	default:
		return d.CreateCertificateAuthority(in)
	}
}

func (d *ACMPCADouble) CreatePermission(i0 *acmpca.CreatePermissionInput) (r0 *acmpca.CreatePermissionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePermission", i0)
	r0, _ = returns[0].(*acmpca.CreatePermissionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) CreatePermissionRequest(i0 *acmpca.CreatePermissionInput) (r0 *request.Request, r1 *acmpca.CreatePermissionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePermissionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*acmpca.CreatePermissionOutput)
	return
}

func (d *ACMPCADouble) CreatePermissionWithContext(i0 context.Context, i1 *acmpca.CreatePermissionInput, i2 ...request.Option) (r0 *acmpca.CreatePermissionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePermissionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*acmpca.CreatePermissionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) fakeCreatePermissionWithContext(ctx context.Context, in *acmpca.CreatePermissionInput, _ ...request.Option) (*acmpca.CreatePermissionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreatePermission cancelled", ctx.Err())
	default:
		return d.CreatePermission(in)
	}
}

func (d *ACMPCADouble) DeleteCertificateAuthority(i0 *acmpca.DeleteCertificateAuthorityInput) (r0 *acmpca.DeleteCertificateAuthorityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCertificateAuthority", i0)
	r0, _ = returns[0].(*acmpca.DeleteCertificateAuthorityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) DeleteCertificateAuthorityRequest(i0 *acmpca.DeleteCertificateAuthorityInput) (r0 *request.Request, r1 *acmpca.DeleteCertificateAuthorityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCertificateAuthorityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*acmpca.DeleteCertificateAuthorityOutput)
	return
}

func (d *ACMPCADouble) DeleteCertificateAuthorityWithContext(i0 context.Context, i1 *acmpca.DeleteCertificateAuthorityInput, i2 ...request.Option) (r0 *acmpca.DeleteCertificateAuthorityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCertificateAuthorityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*acmpca.DeleteCertificateAuthorityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) fakeDeleteCertificateAuthorityWithContext(ctx context.Context, in *acmpca.DeleteCertificateAuthorityInput, _ ...request.Option) (*acmpca.DeleteCertificateAuthorityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteCertificateAuthority cancelled", ctx.Err())
	default:
		return d.DeleteCertificateAuthority(in)
	}
}

func (d *ACMPCADouble) DeletePermission(i0 *acmpca.DeletePermissionInput) (r0 *acmpca.DeletePermissionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePermission", i0)
	r0, _ = returns[0].(*acmpca.DeletePermissionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) DeletePermissionRequest(i0 *acmpca.DeletePermissionInput) (r0 *request.Request, r1 *acmpca.DeletePermissionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePermissionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*acmpca.DeletePermissionOutput)
	return
}

func (d *ACMPCADouble) DeletePermissionWithContext(i0 context.Context, i1 *acmpca.DeletePermissionInput, i2 ...request.Option) (r0 *acmpca.DeletePermissionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePermissionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*acmpca.DeletePermissionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) fakeDeletePermissionWithContext(ctx context.Context, in *acmpca.DeletePermissionInput, _ ...request.Option) (*acmpca.DeletePermissionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeletePermission cancelled", ctx.Err())
	default:
		return d.DeletePermission(in)
	}
}

func (d *ACMPCADouble) DescribeCertificateAuthority(i0 *acmpca.DescribeCertificateAuthorityInput) (r0 *acmpca.DescribeCertificateAuthorityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCertificateAuthority", i0)
	r0, _ = returns[0].(*acmpca.DescribeCertificateAuthorityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) DescribeCertificateAuthorityAuditReport(i0 *acmpca.DescribeCertificateAuthorityAuditReportInput) (r0 *acmpca.DescribeCertificateAuthorityAuditReportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCertificateAuthorityAuditReport", i0)
	r0, _ = returns[0].(*acmpca.DescribeCertificateAuthorityAuditReportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) DescribeCertificateAuthorityAuditReportRequest(i0 *acmpca.DescribeCertificateAuthorityAuditReportInput) (r0 *request.Request, r1 *acmpca.DescribeCertificateAuthorityAuditReportOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCertificateAuthorityAuditReportRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*acmpca.DescribeCertificateAuthorityAuditReportOutput)
	return
}

func (d *ACMPCADouble) DescribeCertificateAuthorityAuditReportWithContext(i0 context.Context, i1 *acmpca.DescribeCertificateAuthorityAuditReportInput, i2 ...request.Option) (r0 *acmpca.DescribeCertificateAuthorityAuditReportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCertificateAuthorityAuditReportWithContext", i0, i1, i2)
	r0, _ = returns[0].(*acmpca.DescribeCertificateAuthorityAuditReportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) fakeDescribeCertificateAuthorityAuditReportWithContext(ctx context.Context, in *acmpca.DescribeCertificateAuthorityAuditReportInput, _ ...request.Option) (*acmpca.DescribeCertificateAuthorityAuditReportOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeCertificateAuthorityAuditReport cancelled", ctx.Err())
	default:
		return d.DescribeCertificateAuthorityAuditReport(in)
	}
}

func (d *ACMPCADouble) DescribeCertificateAuthorityRequest(i0 *acmpca.DescribeCertificateAuthorityInput) (r0 *request.Request, r1 *acmpca.DescribeCertificateAuthorityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCertificateAuthorityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*acmpca.DescribeCertificateAuthorityOutput)
	return
}

func (d *ACMPCADouble) DescribeCertificateAuthorityWithContext(i0 context.Context, i1 *acmpca.DescribeCertificateAuthorityInput, i2 ...request.Option) (r0 *acmpca.DescribeCertificateAuthorityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCertificateAuthorityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*acmpca.DescribeCertificateAuthorityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) fakeDescribeCertificateAuthorityWithContext(ctx context.Context, in *acmpca.DescribeCertificateAuthorityInput, _ ...request.Option) (*acmpca.DescribeCertificateAuthorityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeCertificateAuthority cancelled", ctx.Err())
	default:
		return d.DescribeCertificateAuthority(in)
	}
}

func (d *ACMPCADouble) GetCertificate(i0 *acmpca.GetCertificateInput) (r0 *acmpca.GetCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCertificate", i0)
	r0, _ = returns[0].(*acmpca.GetCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) GetCertificateAuthorityCertificate(i0 *acmpca.GetCertificateAuthorityCertificateInput) (r0 *acmpca.GetCertificateAuthorityCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCertificateAuthorityCertificate", i0)
	r0, _ = returns[0].(*acmpca.GetCertificateAuthorityCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) GetCertificateAuthorityCertificateRequest(i0 *acmpca.GetCertificateAuthorityCertificateInput) (r0 *request.Request, r1 *acmpca.GetCertificateAuthorityCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCertificateAuthorityCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*acmpca.GetCertificateAuthorityCertificateOutput)
	return
}

func (d *ACMPCADouble) GetCertificateAuthorityCertificateWithContext(i0 context.Context, i1 *acmpca.GetCertificateAuthorityCertificateInput, i2 ...request.Option) (r0 *acmpca.GetCertificateAuthorityCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCertificateAuthorityCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*acmpca.GetCertificateAuthorityCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) fakeGetCertificateAuthorityCertificateWithContext(ctx context.Context, in *acmpca.GetCertificateAuthorityCertificateInput, _ ...request.Option) (*acmpca.GetCertificateAuthorityCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetCertificateAuthorityCertificate cancelled", ctx.Err())
	default:
		return d.GetCertificateAuthorityCertificate(in)
	}
}

func (d *ACMPCADouble) GetCertificateAuthorityCsr(i0 *acmpca.GetCertificateAuthorityCsrInput) (r0 *acmpca.GetCertificateAuthorityCsrOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCertificateAuthorityCsr", i0)
	r0, _ = returns[0].(*acmpca.GetCertificateAuthorityCsrOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) GetCertificateAuthorityCsrRequest(i0 *acmpca.GetCertificateAuthorityCsrInput) (r0 *request.Request, r1 *acmpca.GetCertificateAuthorityCsrOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCertificateAuthorityCsrRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*acmpca.GetCertificateAuthorityCsrOutput)
	return
}

func (d *ACMPCADouble) GetCertificateAuthorityCsrWithContext(i0 context.Context, i1 *acmpca.GetCertificateAuthorityCsrInput, i2 ...request.Option) (r0 *acmpca.GetCertificateAuthorityCsrOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCertificateAuthorityCsrWithContext", i0, i1, i2)
	r0, _ = returns[0].(*acmpca.GetCertificateAuthorityCsrOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) fakeGetCertificateAuthorityCsrWithContext(ctx context.Context, in *acmpca.GetCertificateAuthorityCsrInput, _ ...request.Option) (*acmpca.GetCertificateAuthorityCsrOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetCertificateAuthorityCsr cancelled", ctx.Err())
	default:
		return d.GetCertificateAuthorityCsr(in)
	}
}

func (d *ACMPCADouble) GetCertificateRequest(i0 *acmpca.GetCertificateInput) (r0 *request.Request, r1 *acmpca.GetCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*acmpca.GetCertificateOutput)
	return
}

func (d *ACMPCADouble) GetCertificateWithContext(i0 context.Context, i1 *acmpca.GetCertificateInput, i2 ...request.Option) (r0 *acmpca.GetCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*acmpca.GetCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) fakeGetCertificateWithContext(ctx context.Context, in *acmpca.GetCertificateInput, _ ...request.Option) (*acmpca.GetCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetCertificate cancelled", ctx.Err())
	default:
		return d.GetCertificate(in)
	}
}

func (d *ACMPCADouble) ImportCertificateAuthorityCertificate(i0 *acmpca.ImportCertificateAuthorityCertificateInput) (r0 *acmpca.ImportCertificateAuthorityCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportCertificateAuthorityCertificate", i0)
	r0, _ = returns[0].(*acmpca.ImportCertificateAuthorityCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) ImportCertificateAuthorityCertificateRequest(i0 *acmpca.ImportCertificateAuthorityCertificateInput) (r0 *request.Request, r1 *acmpca.ImportCertificateAuthorityCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportCertificateAuthorityCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*acmpca.ImportCertificateAuthorityCertificateOutput)
	return
}

func (d *ACMPCADouble) ImportCertificateAuthorityCertificateWithContext(i0 context.Context, i1 *acmpca.ImportCertificateAuthorityCertificateInput, i2 ...request.Option) (r0 *acmpca.ImportCertificateAuthorityCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportCertificateAuthorityCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*acmpca.ImportCertificateAuthorityCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) fakeImportCertificateAuthorityCertificateWithContext(ctx context.Context, in *acmpca.ImportCertificateAuthorityCertificateInput, _ ...request.Option) (*acmpca.ImportCertificateAuthorityCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ImportCertificateAuthorityCertificate cancelled", ctx.Err())
	default:
		return d.ImportCertificateAuthorityCertificate(in)
	}
}

func (d *ACMPCADouble) IssueCertificate(i0 *acmpca.IssueCertificateInput) (r0 *acmpca.IssueCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("IssueCertificate", i0)
	r0, _ = returns[0].(*acmpca.IssueCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) IssueCertificateRequest(i0 *acmpca.IssueCertificateInput) (r0 *request.Request, r1 *acmpca.IssueCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("IssueCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*acmpca.IssueCertificateOutput)
	return
}

func (d *ACMPCADouble) IssueCertificateWithContext(i0 context.Context, i1 *acmpca.IssueCertificateInput, i2 ...request.Option) (r0 *acmpca.IssueCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("IssueCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*acmpca.IssueCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) fakeIssueCertificateWithContext(ctx context.Context, in *acmpca.IssueCertificateInput, _ ...request.Option) (*acmpca.IssueCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "IssueCertificate cancelled", ctx.Err())
	default:
		return d.IssueCertificate(in)
	}
}

func (d *ACMPCADouble) ListCertificateAuthorities(i0 *acmpca.ListCertificateAuthoritiesInput) (r0 *acmpca.ListCertificateAuthoritiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCertificateAuthorities", i0)
	r0, _ = returns[0].(*acmpca.ListCertificateAuthoritiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) ListCertificateAuthoritiesPages(i0 *acmpca.ListCertificateAuthoritiesInput, i1 func(*acmpca.ListCertificateAuthoritiesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCertificateAuthoritiesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ACMPCADouble) fakeListCertificateAuthoritiesPages(in *acmpca.ListCertificateAuthoritiesInput, pager func(*acmpca.ListCertificateAuthoritiesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListCertificateAuthorities", paginators, in, pager)
}

func (d *ACMPCADouble) ListCertificateAuthoritiesPagesWithContext(i0 context.Context, i1 *acmpca.ListCertificateAuthoritiesInput, i2 func(*acmpca.ListCertificateAuthoritiesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCertificateAuthoritiesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ACMPCADouble) fakeListCertificateAuthoritiesPagesWithContext(ctx context.Context, in *acmpca.ListCertificateAuthoritiesInput, pager func(*acmpca.ListCertificateAuthoritiesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListCertificateAuthorities", paginators, ctx, in, pager, options...)
}

func (d *ACMPCADouble) ListCertificateAuthoritiesRequest(i0 *acmpca.ListCertificateAuthoritiesInput) (r0 *request.Request, r1 *acmpca.ListCertificateAuthoritiesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCertificateAuthoritiesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*acmpca.ListCertificateAuthoritiesOutput)
	return
}

func (d *ACMPCADouble) ListCertificateAuthoritiesWithContext(i0 context.Context, i1 *acmpca.ListCertificateAuthoritiesInput, i2 ...request.Option) (r0 *acmpca.ListCertificateAuthoritiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCertificateAuthoritiesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*acmpca.ListCertificateAuthoritiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) fakeListCertificateAuthoritiesWithContext(ctx context.Context, in *acmpca.ListCertificateAuthoritiesInput, _ ...request.Option) (*acmpca.ListCertificateAuthoritiesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListCertificateAuthorities cancelled", ctx.Err())
	default:
		return d.ListCertificateAuthorities(in)
	}
}

func (d *ACMPCADouble) ListPermissions(i0 *acmpca.ListPermissionsInput) (r0 *acmpca.ListPermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPermissions", i0)
	r0, _ = returns[0].(*acmpca.ListPermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) ListPermissionsPages(i0 *acmpca.ListPermissionsInput, i1 func(*acmpca.ListPermissionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPermissionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ACMPCADouble) fakeListPermissionsPages(in *acmpca.ListPermissionsInput, pager func(*acmpca.ListPermissionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListPermissions", paginators, in, pager)
}

func (d *ACMPCADouble) ListPermissionsPagesWithContext(i0 context.Context, i1 *acmpca.ListPermissionsInput, i2 func(*acmpca.ListPermissionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPermissionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ACMPCADouble) fakeListPermissionsPagesWithContext(ctx context.Context, in *acmpca.ListPermissionsInput, pager func(*acmpca.ListPermissionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListPermissions", paginators, ctx, in, pager, options...)
}

func (d *ACMPCADouble) ListPermissionsRequest(i0 *acmpca.ListPermissionsInput) (r0 *request.Request, r1 *acmpca.ListPermissionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPermissionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*acmpca.ListPermissionsOutput)
	return
}

func (d *ACMPCADouble) ListPermissionsWithContext(i0 context.Context, i1 *acmpca.ListPermissionsInput, i2 ...request.Option) (r0 *acmpca.ListPermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPermissionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*acmpca.ListPermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) fakeListPermissionsWithContext(ctx context.Context, in *acmpca.ListPermissionsInput, _ ...request.Option) (*acmpca.ListPermissionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListPermissions cancelled", ctx.Err())
	default:
		return d.ListPermissions(in)
	}
}

func (d *ACMPCADouble) ListTags(i0 *acmpca.ListTagsInput) (r0 *acmpca.ListTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTags", i0)
	r0, _ = returns[0].(*acmpca.ListTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) ListTagsPages(i0 *acmpca.ListTagsInput, i1 func(*acmpca.ListTagsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ACMPCADouble) fakeListTagsPages(in *acmpca.ListTagsInput, pager func(*acmpca.ListTagsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTags", paginators, in, pager)
}

func (d *ACMPCADouble) ListTagsPagesWithContext(i0 context.Context, i1 *acmpca.ListTagsInput, i2 func(*acmpca.ListTagsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ACMPCADouble) fakeListTagsPagesWithContext(ctx context.Context, in *acmpca.ListTagsInput, pager func(*acmpca.ListTagsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTags", paginators, ctx, in, pager, options...)
}

func (d *ACMPCADouble) ListTagsRequest(i0 *acmpca.ListTagsInput) (r0 *request.Request, r1 *acmpca.ListTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*acmpca.ListTagsOutput)
	return
}

func (d *ACMPCADouble) ListTagsWithContext(i0 context.Context, i1 *acmpca.ListTagsInput, i2 ...request.Option) (r0 *acmpca.ListTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*acmpca.ListTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) fakeListTagsWithContext(ctx context.Context, in *acmpca.ListTagsInput, _ ...request.Option) (*acmpca.ListTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTags cancelled", ctx.Err())
	default:
		return d.ListTags(in)
	}
}

func (d *ACMPCADouble) RestoreCertificateAuthority(i0 *acmpca.RestoreCertificateAuthorityInput) (r0 *acmpca.RestoreCertificateAuthorityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreCertificateAuthority", i0)
	r0, _ = returns[0].(*acmpca.RestoreCertificateAuthorityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) RestoreCertificateAuthorityRequest(i0 *acmpca.RestoreCertificateAuthorityInput) (r0 *request.Request, r1 *acmpca.RestoreCertificateAuthorityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreCertificateAuthorityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*acmpca.RestoreCertificateAuthorityOutput)
	return
}

func (d *ACMPCADouble) RestoreCertificateAuthorityWithContext(i0 context.Context, i1 *acmpca.RestoreCertificateAuthorityInput, i2 ...request.Option) (r0 *acmpca.RestoreCertificateAuthorityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreCertificateAuthorityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*acmpca.RestoreCertificateAuthorityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) fakeRestoreCertificateAuthorityWithContext(ctx context.Context, in *acmpca.RestoreCertificateAuthorityInput, _ ...request.Option) (*acmpca.RestoreCertificateAuthorityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RestoreCertificateAuthority cancelled", ctx.Err())
	default:
		return d.RestoreCertificateAuthority(in)
	}
}

func (d *ACMPCADouble) RevokeCertificate(i0 *acmpca.RevokeCertificateInput) (r0 *acmpca.RevokeCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeCertificate", i0)
	r0, _ = returns[0].(*acmpca.RevokeCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) RevokeCertificateRequest(i0 *acmpca.RevokeCertificateInput) (r0 *request.Request, r1 *acmpca.RevokeCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*acmpca.RevokeCertificateOutput)
	return
}

func (d *ACMPCADouble) RevokeCertificateWithContext(i0 context.Context, i1 *acmpca.RevokeCertificateInput, i2 ...request.Option) (r0 *acmpca.RevokeCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*acmpca.RevokeCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) fakeRevokeCertificateWithContext(ctx context.Context, in *acmpca.RevokeCertificateInput, _ ...request.Option) (*acmpca.RevokeCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RevokeCertificate cancelled", ctx.Err())
	default:
		return d.RevokeCertificate(in)
	}
}

func (d *ACMPCADouble) TagCertificateAuthority(i0 *acmpca.TagCertificateAuthorityInput) (r0 *acmpca.TagCertificateAuthorityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagCertificateAuthority", i0)
	r0, _ = returns[0].(*acmpca.TagCertificateAuthorityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) TagCertificateAuthorityRequest(i0 *acmpca.TagCertificateAuthorityInput) (r0 *request.Request, r1 *acmpca.TagCertificateAuthorityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagCertificateAuthorityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*acmpca.TagCertificateAuthorityOutput)
	return
}

func (d *ACMPCADouble) TagCertificateAuthorityWithContext(i0 context.Context, i1 *acmpca.TagCertificateAuthorityInput, i2 ...request.Option) (r0 *acmpca.TagCertificateAuthorityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagCertificateAuthorityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*acmpca.TagCertificateAuthorityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) fakeTagCertificateAuthorityWithContext(ctx context.Context, in *acmpca.TagCertificateAuthorityInput, _ ...request.Option) (*acmpca.TagCertificateAuthorityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagCertificateAuthority cancelled", ctx.Err())
	default:
		return d.TagCertificateAuthority(in)
	}
}

func (d *ACMPCADouble) UntagCertificateAuthority(i0 *acmpca.UntagCertificateAuthorityInput) (r0 *acmpca.UntagCertificateAuthorityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagCertificateAuthority", i0)
	r0, _ = returns[0].(*acmpca.UntagCertificateAuthorityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) UntagCertificateAuthorityRequest(i0 *acmpca.UntagCertificateAuthorityInput) (r0 *request.Request, r1 *acmpca.UntagCertificateAuthorityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagCertificateAuthorityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*acmpca.UntagCertificateAuthorityOutput)
	return
}

func (d *ACMPCADouble) UntagCertificateAuthorityWithContext(i0 context.Context, i1 *acmpca.UntagCertificateAuthorityInput, i2 ...request.Option) (r0 *acmpca.UntagCertificateAuthorityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagCertificateAuthorityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*acmpca.UntagCertificateAuthorityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) fakeUntagCertificateAuthorityWithContext(ctx context.Context, in *acmpca.UntagCertificateAuthorityInput, _ ...request.Option) (*acmpca.UntagCertificateAuthorityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagCertificateAuthority cancelled", ctx.Err())
	default:
		return d.UntagCertificateAuthority(in)
	}
}

func (d *ACMPCADouble) UpdateCertificateAuthority(i0 *acmpca.UpdateCertificateAuthorityInput) (r0 *acmpca.UpdateCertificateAuthorityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCertificateAuthority", i0)
	r0, _ = returns[0].(*acmpca.UpdateCertificateAuthorityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) UpdateCertificateAuthorityRequest(i0 *acmpca.UpdateCertificateAuthorityInput) (r0 *request.Request, r1 *acmpca.UpdateCertificateAuthorityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCertificateAuthorityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*acmpca.UpdateCertificateAuthorityOutput)
	return
}

func (d *ACMPCADouble) UpdateCertificateAuthorityWithContext(i0 context.Context, i1 *acmpca.UpdateCertificateAuthorityInput, i2 ...request.Option) (r0 *acmpca.UpdateCertificateAuthorityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCertificateAuthorityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*acmpca.UpdateCertificateAuthorityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMPCADouble) fakeUpdateCertificateAuthorityWithContext(ctx context.Context, in *acmpca.UpdateCertificateAuthorityInput, _ ...request.Option) (*acmpca.UpdateCertificateAuthorityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateCertificateAuthority cancelled", ctx.Err())
	default:
		return d.UpdateCertificateAuthority(in)
	}
}

func (d *ACMPCADouble) WaitUntilAuditReportCreated(i0 *acmpca.DescribeCertificateAuthorityAuditReportInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilAuditReportCreated", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *ACMPCADouble) fakeWaitUntilAuditReportCreated(in *acmpca.DescribeCertificateAuthorityAuditReportInput) error {
	return d.WaitUntil("AuditReportCreated", waiters, in)
}

func (d *ACMPCADouble) WaitUntilAuditReportCreatedWithContext(i0 context.Context, i1 *acmpca.DescribeCertificateAuthorityAuditReportInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilAuditReportCreatedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *ACMPCADouble) fakeWaitUntilAuditReportCreatedWithContext(ctx context.Context, in *acmpca.DescribeCertificateAuthorityAuditReportInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("AuditReportCreated", waiters, ctx, in, waitOption...)
}

func (d *ACMPCADouble) WaitUntilCertificateAuthorityCSRCreated(i0 *acmpca.GetCertificateAuthorityCsrInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilCertificateAuthorityCSRCreated", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *ACMPCADouble) fakeWaitUntilCertificateAuthorityCSRCreated(in *acmpca.GetCertificateAuthorityCsrInput) error {
	return d.WaitUntil("CertificateAuthorityCSRCreated", waiters, in)
}

func (d *ACMPCADouble) WaitUntilCertificateAuthorityCSRCreatedWithContext(i0 context.Context, i1 *acmpca.GetCertificateAuthorityCsrInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilCertificateAuthorityCSRCreatedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *ACMPCADouble) fakeWaitUntilCertificateAuthorityCSRCreatedWithContext(ctx context.Context, in *acmpca.GetCertificateAuthorityCsrInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("CertificateAuthorityCSRCreated", waiters, ctx, in, waitOption...)
}

func (d *ACMPCADouble) WaitUntilCertificateIssued(i0 *acmpca.GetCertificateInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilCertificateIssued", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *ACMPCADouble) fakeWaitUntilCertificateIssued(in *acmpca.GetCertificateInput) error {
	return d.WaitUntil("CertificateIssued", waiters, in)
}

func (d *ACMPCADouble) WaitUntilCertificateIssuedWithContext(i0 context.Context, i1 *acmpca.GetCertificateInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilCertificateIssuedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *ACMPCADouble) fakeWaitUntilCertificateIssuedWithContext(ctx context.Context, in *acmpca.GetCertificateInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("CertificateIssued", waiters, ctx, in, waitOption...)
}
