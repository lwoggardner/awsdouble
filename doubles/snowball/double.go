// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:15:10+11:00

// Package snowballdouble provides a TestDouble implementation of snowballiface.SnowballAPI
package snowballdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/snowball"
	"github.com/aws/aws-sdk-go/service/snowball/snowballiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// SnowballDouble is TestDouble for snowballiface.SnowballAPI
type SnowballDouble struct {
	snowballiface.SnowballAPI
	*awsdouble.AWSTestDouble
}

// Constructor for SnowballDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *SnowballDouble {
	result := &SnowballDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*snowballiface.SnowballAPI)(nil), configurators...)
	return result
}

func (d *SnowballDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *SnowballDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CancelClusterWithContext":
		return m.Fake(d.fakeCancelClusterWithContext)

	case "CancelJobWithContext":
		return m.Fake(d.fakeCancelJobWithContext)

	case "CreateAddressWithContext":
		return m.Fake(d.fakeCreateAddressWithContext)

	case "CreateClusterWithContext":
		return m.Fake(d.fakeCreateClusterWithContext)

	case "CreateJobWithContext":
		return m.Fake(d.fakeCreateJobWithContext)

	case "DescribeAddressWithContext":
		return m.Fake(d.fakeDescribeAddressWithContext)

	case "DescribeAddressesPages":
		return m.Fake(d.fakeDescribeAddressesPages)

	case "DescribeAddressesPagesWithContext":
		return m.Fake(d.fakeDescribeAddressesPagesWithContext)

	case "DescribeAddressesWithContext":
		return m.Fake(d.fakeDescribeAddressesWithContext)

	case "DescribeClusterWithContext":
		return m.Fake(d.fakeDescribeClusterWithContext)

	case "DescribeJobWithContext":
		return m.Fake(d.fakeDescribeJobWithContext)

	case "GetJobManifestWithContext":
		return m.Fake(d.fakeGetJobManifestWithContext)

	case "GetJobUnlockCodeWithContext":
		return m.Fake(d.fakeGetJobUnlockCodeWithContext)

	case "GetSnowballUsageWithContext":
		return m.Fake(d.fakeGetSnowballUsageWithContext)

	case "GetSoftwareUpdatesWithContext":
		return m.Fake(d.fakeGetSoftwareUpdatesWithContext)

	case "ListClusterJobsWithContext":
		return m.Fake(d.fakeListClusterJobsWithContext)

	case "ListClustersWithContext":
		return m.Fake(d.fakeListClustersWithContext)

	case "ListCompatibleImagesWithContext":
		return m.Fake(d.fakeListCompatibleImagesWithContext)

	case "ListJobsPages":
		return m.Fake(d.fakeListJobsPages)

	case "ListJobsPagesWithContext":
		return m.Fake(d.fakeListJobsPagesWithContext)

	case "ListJobsWithContext":
		return m.Fake(d.fakeListJobsWithContext)

	case "UpdateClusterWithContext":
		return m.Fake(d.fakeUpdateClusterWithContext)

	case "UpdateJobWithContext":
		return m.Fake(d.fakeUpdateJobWithContext)

	default:
		return nil
	}
}

func (d *SnowballDouble) CancelCluster(i0 *snowball.CancelClusterInput) (r0 *snowball.CancelClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelCluster", i0)
	r0, _ = returns[0].(*snowball.CancelClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) CancelClusterRequest(i0 *snowball.CancelClusterInput) (r0 *request.Request, r1 *snowball.CancelClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*snowball.CancelClusterOutput)
	return
}

func (d *SnowballDouble) CancelClusterWithContext(i0 context.Context, i1 *snowball.CancelClusterInput, i2 ...request.Option) (r0 *snowball.CancelClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*snowball.CancelClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) fakeCancelClusterWithContext(ctx context.Context, in *snowball.CancelClusterInput, _ ...request.Option) (*snowball.CancelClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelCluster cancelled", ctx.Err())
	default:
		return d.CancelCluster(in)
	}
}

func (d *SnowballDouble) CancelJob(i0 *snowball.CancelJobInput) (r0 *snowball.CancelJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelJob", i0)
	r0, _ = returns[0].(*snowball.CancelJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) CancelJobRequest(i0 *snowball.CancelJobInput) (r0 *request.Request, r1 *snowball.CancelJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*snowball.CancelJobOutput)
	return
}

func (d *SnowballDouble) CancelJobWithContext(i0 context.Context, i1 *snowball.CancelJobInput, i2 ...request.Option) (r0 *snowball.CancelJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*snowball.CancelJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) fakeCancelJobWithContext(ctx context.Context, in *snowball.CancelJobInput, _ ...request.Option) (*snowball.CancelJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelJob cancelled", ctx.Err())
	default:
		return d.CancelJob(in)
	}
}

func (d *SnowballDouble) CreateAddress(i0 *snowball.CreateAddressInput) (r0 *snowball.CreateAddressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAddress", i0)
	r0, _ = returns[0].(*snowball.CreateAddressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) CreateAddressRequest(i0 *snowball.CreateAddressInput) (r0 *request.Request, r1 *snowball.CreateAddressOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAddressRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*snowball.CreateAddressOutput)
	return
}

func (d *SnowballDouble) CreateAddressWithContext(i0 context.Context, i1 *snowball.CreateAddressInput, i2 ...request.Option) (r0 *snowball.CreateAddressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAddressWithContext", i0, i1, i2)
	r0, _ = returns[0].(*snowball.CreateAddressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) fakeCreateAddressWithContext(ctx context.Context, in *snowball.CreateAddressInput, _ ...request.Option) (*snowball.CreateAddressOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateAddress cancelled", ctx.Err())
	default:
		return d.CreateAddress(in)
	}
}

func (d *SnowballDouble) CreateCluster(i0 *snowball.CreateClusterInput) (r0 *snowball.CreateClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCluster", i0)
	r0, _ = returns[0].(*snowball.CreateClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) CreateClusterRequest(i0 *snowball.CreateClusterInput) (r0 *request.Request, r1 *snowball.CreateClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*snowball.CreateClusterOutput)
	return
}

func (d *SnowballDouble) CreateClusterWithContext(i0 context.Context, i1 *snowball.CreateClusterInput, i2 ...request.Option) (r0 *snowball.CreateClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*snowball.CreateClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) fakeCreateClusterWithContext(ctx context.Context, in *snowball.CreateClusterInput, _ ...request.Option) (*snowball.CreateClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateCluster cancelled", ctx.Err())
	default:
		return d.CreateCluster(in)
	}
}

func (d *SnowballDouble) CreateJob(i0 *snowball.CreateJobInput) (r0 *snowball.CreateJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateJob", i0)
	r0, _ = returns[0].(*snowball.CreateJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) CreateJobRequest(i0 *snowball.CreateJobInput) (r0 *request.Request, r1 *snowball.CreateJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*snowball.CreateJobOutput)
	return
}

func (d *SnowballDouble) CreateJobWithContext(i0 context.Context, i1 *snowball.CreateJobInput, i2 ...request.Option) (r0 *snowball.CreateJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*snowball.CreateJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) fakeCreateJobWithContext(ctx context.Context, in *snowball.CreateJobInput, _ ...request.Option) (*snowball.CreateJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateJob cancelled", ctx.Err())
	default:
		return d.CreateJob(in)
	}
}

func (d *SnowballDouble) DescribeAddress(i0 *snowball.DescribeAddressInput) (r0 *snowball.DescribeAddressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAddress", i0)
	r0, _ = returns[0].(*snowball.DescribeAddressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) DescribeAddressRequest(i0 *snowball.DescribeAddressInput) (r0 *request.Request, r1 *snowball.DescribeAddressOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAddressRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*snowball.DescribeAddressOutput)
	return
}

func (d *SnowballDouble) DescribeAddressWithContext(i0 context.Context, i1 *snowball.DescribeAddressInput, i2 ...request.Option) (r0 *snowball.DescribeAddressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAddressWithContext", i0, i1, i2)
	r0, _ = returns[0].(*snowball.DescribeAddressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) fakeDescribeAddressWithContext(ctx context.Context, in *snowball.DescribeAddressInput, _ ...request.Option) (*snowball.DescribeAddressOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAddress cancelled", ctx.Err())
	default:
		return d.DescribeAddress(in)
	}
}

func (d *SnowballDouble) DescribeAddresses(i0 *snowball.DescribeAddressesInput) (r0 *snowball.DescribeAddressesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAddresses", i0)
	r0, _ = returns[0].(*snowball.DescribeAddressesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) DescribeAddressesPages(i0 *snowball.DescribeAddressesInput, i1 func(*snowball.DescribeAddressesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAddressesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SnowballDouble) fakeDescribeAddressesPages(in *snowball.DescribeAddressesInput, pager func(*snowball.DescribeAddressesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeAddresses", paginators, in, pager)
}

func (d *SnowballDouble) DescribeAddressesPagesWithContext(i0 context.Context, i1 *snowball.DescribeAddressesInput, i2 func(*snowball.DescribeAddressesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAddressesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SnowballDouble) fakeDescribeAddressesPagesWithContext(ctx context.Context, in *snowball.DescribeAddressesInput, pager func(*snowball.DescribeAddressesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeAddresses", paginators, ctx, in, pager, options...)
}

func (d *SnowballDouble) DescribeAddressesRequest(i0 *snowball.DescribeAddressesInput) (r0 *request.Request, r1 *snowball.DescribeAddressesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAddressesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*snowball.DescribeAddressesOutput)
	return
}

func (d *SnowballDouble) DescribeAddressesWithContext(i0 context.Context, i1 *snowball.DescribeAddressesInput, i2 ...request.Option) (r0 *snowball.DescribeAddressesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAddressesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*snowball.DescribeAddressesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) fakeDescribeAddressesWithContext(ctx context.Context, in *snowball.DescribeAddressesInput, _ ...request.Option) (*snowball.DescribeAddressesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAddresses cancelled", ctx.Err())
	default:
		return d.DescribeAddresses(in)
	}
}

func (d *SnowballDouble) DescribeCluster(i0 *snowball.DescribeClusterInput) (r0 *snowball.DescribeClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCluster", i0)
	r0, _ = returns[0].(*snowball.DescribeClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) DescribeClusterRequest(i0 *snowball.DescribeClusterInput) (r0 *request.Request, r1 *snowball.DescribeClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*snowball.DescribeClusterOutput)
	return
}

func (d *SnowballDouble) DescribeClusterWithContext(i0 context.Context, i1 *snowball.DescribeClusterInput, i2 ...request.Option) (r0 *snowball.DescribeClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*snowball.DescribeClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) fakeDescribeClusterWithContext(ctx context.Context, in *snowball.DescribeClusterInput, _ ...request.Option) (*snowball.DescribeClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeCluster cancelled", ctx.Err())
	default:
		return d.DescribeCluster(in)
	}
}

func (d *SnowballDouble) DescribeJob(i0 *snowball.DescribeJobInput) (r0 *snowball.DescribeJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeJob", i0)
	r0, _ = returns[0].(*snowball.DescribeJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) DescribeJobRequest(i0 *snowball.DescribeJobInput) (r0 *request.Request, r1 *snowball.DescribeJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*snowball.DescribeJobOutput)
	return
}

func (d *SnowballDouble) DescribeJobWithContext(i0 context.Context, i1 *snowball.DescribeJobInput, i2 ...request.Option) (r0 *snowball.DescribeJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*snowball.DescribeJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) fakeDescribeJobWithContext(ctx context.Context, in *snowball.DescribeJobInput, _ ...request.Option) (*snowball.DescribeJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeJob cancelled", ctx.Err())
	default:
		return d.DescribeJob(in)
	}
}

func (d *SnowballDouble) GetJobManifest(i0 *snowball.GetJobManifestInput) (r0 *snowball.GetJobManifestOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobManifest", i0)
	r0, _ = returns[0].(*snowball.GetJobManifestOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) GetJobManifestRequest(i0 *snowball.GetJobManifestInput) (r0 *request.Request, r1 *snowball.GetJobManifestOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobManifestRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*snowball.GetJobManifestOutput)
	return
}

func (d *SnowballDouble) GetJobManifestWithContext(i0 context.Context, i1 *snowball.GetJobManifestInput, i2 ...request.Option) (r0 *snowball.GetJobManifestOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobManifestWithContext", i0, i1, i2)
	r0, _ = returns[0].(*snowball.GetJobManifestOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) fakeGetJobManifestWithContext(ctx context.Context, in *snowball.GetJobManifestInput, _ ...request.Option) (*snowball.GetJobManifestOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetJobManifest cancelled", ctx.Err())
	default:
		return d.GetJobManifest(in)
	}
}

func (d *SnowballDouble) GetJobUnlockCode(i0 *snowball.GetJobUnlockCodeInput) (r0 *snowball.GetJobUnlockCodeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobUnlockCode", i0)
	r0, _ = returns[0].(*snowball.GetJobUnlockCodeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) GetJobUnlockCodeRequest(i0 *snowball.GetJobUnlockCodeInput) (r0 *request.Request, r1 *snowball.GetJobUnlockCodeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobUnlockCodeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*snowball.GetJobUnlockCodeOutput)
	return
}

func (d *SnowballDouble) GetJobUnlockCodeWithContext(i0 context.Context, i1 *snowball.GetJobUnlockCodeInput, i2 ...request.Option) (r0 *snowball.GetJobUnlockCodeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobUnlockCodeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*snowball.GetJobUnlockCodeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) fakeGetJobUnlockCodeWithContext(ctx context.Context, in *snowball.GetJobUnlockCodeInput, _ ...request.Option) (*snowball.GetJobUnlockCodeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetJobUnlockCode cancelled", ctx.Err())
	default:
		return d.GetJobUnlockCode(in)
	}
}

func (d *SnowballDouble) GetSnowballUsage(i0 *snowball.GetSnowballUsageInput) (r0 *snowball.GetSnowballUsageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSnowballUsage", i0)
	r0, _ = returns[0].(*snowball.GetSnowballUsageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) GetSnowballUsageRequest(i0 *snowball.GetSnowballUsageInput) (r0 *request.Request, r1 *snowball.GetSnowballUsageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSnowballUsageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*snowball.GetSnowballUsageOutput)
	return
}

func (d *SnowballDouble) GetSnowballUsageWithContext(i0 context.Context, i1 *snowball.GetSnowballUsageInput, i2 ...request.Option) (r0 *snowball.GetSnowballUsageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSnowballUsageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*snowball.GetSnowballUsageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) fakeGetSnowballUsageWithContext(ctx context.Context, in *snowball.GetSnowballUsageInput, _ ...request.Option) (*snowball.GetSnowballUsageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetSnowballUsage cancelled", ctx.Err())
	default:
		return d.GetSnowballUsage(in)
	}
}

func (d *SnowballDouble) GetSoftwareUpdates(i0 *snowball.GetSoftwareUpdatesInput) (r0 *snowball.GetSoftwareUpdatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSoftwareUpdates", i0)
	r0, _ = returns[0].(*snowball.GetSoftwareUpdatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) GetSoftwareUpdatesRequest(i0 *snowball.GetSoftwareUpdatesInput) (r0 *request.Request, r1 *snowball.GetSoftwareUpdatesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSoftwareUpdatesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*snowball.GetSoftwareUpdatesOutput)
	return
}

func (d *SnowballDouble) GetSoftwareUpdatesWithContext(i0 context.Context, i1 *snowball.GetSoftwareUpdatesInput, i2 ...request.Option) (r0 *snowball.GetSoftwareUpdatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSoftwareUpdatesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*snowball.GetSoftwareUpdatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) fakeGetSoftwareUpdatesWithContext(ctx context.Context, in *snowball.GetSoftwareUpdatesInput, _ ...request.Option) (*snowball.GetSoftwareUpdatesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetSoftwareUpdates cancelled", ctx.Err())
	default:
		return d.GetSoftwareUpdates(in)
	}
}

func (d *SnowballDouble) ListClusterJobs(i0 *snowball.ListClusterJobsInput) (r0 *snowball.ListClusterJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListClusterJobs", i0)
	r0, _ = returns[0].(*snowball.ListClusterJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) ListClusterJobsRequest(i0 *snowball.ListClusterJobsInput) (r0 *request.Request, r1 *snowball.ListClusterJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListClusterJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*snowball.ListClusterJobsOutput)
	return
}

func (d *SnowballDouble) ListClusterJobsWithContext(i0 context.Context, i1 *snowball.ListClusterJobsInput, i2 ...request.Option) (r0 *snowball.ListClusterJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListClusterJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*snowball.ListClusterJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) fakeListClusterJobsWithContext(ctx context.Context, in *snowball.ListClusterJobsInput, _ ...request.Option) (*snowball.ListClusterJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListClusterJobs cancelled", ctx.Err())
	default:
		return d.ListClusterJobs(in)
	}
}

func (d *SnowballDouble) ListClusters(i0 *snowball.ListClustersInput) (r0 *snowball.ListClustersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListClusters", i0)
	r0, _ = returns[0].(*snowball.ListClustersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) ListClustersRequest(i0 *snowball.ListClustersInput) (r0 *request.Request, r1 *snowball.ListClustersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListClustersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*snowball.ListClustersOutput)
	return
}

func (d *SnowballDouble) ListClustersWithContext(i0 context.Context, i1 *snowball.ListClustersInput, i2 ...request.Option) (r0 *snowball.ListClustersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListClustersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*snowball.ListClustersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) fakeListClustersWithContext(ctx context.Context, in *snowball.ListClustersInput, _ ...request.Option) (*snowball.ListClustersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListClusters cancelled", ctx.Err())
	default:
		return d.ListClusters(in)
	}
}

func (d *SnowballDouble) ListCompatibleImages(i0 *snowball.ListCompatibleImagesInput) (r0 *snowball.ListCompatibleImagesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCompatibleImages", i0)
	r0, _ = returns[0].(*snowball.ListCompatibleImagesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) ListCompatibleImagesRequest(i0 *snowball.ListCompatibleImagesInput) (r0 *request.Request, r1 *snowball.ListCompatibleImagesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCompatibleImagesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*snowball.ListCompatibleImagesOutput)
	return
}

func (d *SnowballDouble) ListCompatibleImagesWithContext(i0 context.Context, i1 *snowball.ListCompatibleImagesInput, i2 ...request.Option) (r0 *snowball.ListCompatibleImagesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCompatibleImagesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*snowball.ListCompatibleImagesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) fakeListCompatibleImagesWithContext(ctx context.Context, in *snowball.ListCompatibleImagesInput, _ ...request.Option) (*snowball.ListCompatibleImagesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListCompatibleImages cancelled", ctx.Err())
	default:
		return d.ListCompatibleImages(in)
	}
}

func (d *SnowballDouble) ListJobs(i0 *snowball.ListJobsInput) (r0 *snowball.ListJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobs", i0)
	r0, _ = returns[0].(*snowball.ListJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) ListJobsPages(i0 *snowball.ListJobsInput, i1 func(*snowball.ListJobsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SnowballDouble) fakeListJobsPages(in *snowball.ListJobsInput, pager func(*snowball.ListJobsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListJobs", paginators, in, pager)
}

func (d *SnowballDouble) ListJobsPagesWithContext(i0 context.Context, i1 *snowball.ListJobsInput, i2 func(*snowball.ListJobsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SnowballDouble) fakeListJobsPagesWithContext(ctx context.Context, in *snowball.ListJobsInput, pager func(*snowball.ListJobsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListJobs", paginators, ctx, in, pager, options...)
}

func (d *SnowballDouble) ListJobsRequest(i0 *snowball.ListJobsInput) (r0 *request.Request, r1 *snowball.ListJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*snowball.ListJobsOutput)
	return
}

func (d *SnowballDouble) ListJobsWithContext(i0 context.Context, i1 *snowball.ListJobsInput, i2 ...request.Option) (r0 *snowball.ListJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*snowball.ListJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) fakeListJobsWithContext(ctx context.Context, in *snowball.ListJobsInput, _ ...request.Option) (*snowball.ListJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListJobs cancelled", ctx.Err())
	default:
		return d.ListJobs(in)
	}
}

func (d *SnowballDouble) UpdateCluster(i0 *snowball.UpdateClusterInput) (r0 *snowball.UpdateClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCluster", i0)
	r0, _ = returns[0].(*snowball.UpdateClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) UpdateClusterRequest(i0 *snowball.UpdateClusterInput) (r0 *request.Request, r1 *snowball.UpdateClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*snowball.UpdateClusterOutput)
	return
}

func (d *SnowballDouble) UpdateClusterWithContext(i0 context.Context, i1 *snowball.UpdateClusterInput, i2 ...request.Option) (r0 *snowball.UpdateClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*snowball.UpdateClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) fakeUpdateClusterWithContext(ctx context.Context, in *snowball.UpdateClusterInput, _ ...request.Option) (*snowball.UpdateClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateCluster cancelled", ctx.Err())
	default:
		return d.UpdateCluster(in)
	}
}

func (d *SnowballDouble) UpdateJob(i0 *snowball.UpdateJobInput) (r0 *snowball.UpdateJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateJob", i0)
	r0, _ = returns[0].(*snowball.UpdateJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) UpdateJobRequest(i0 *snowball.UpdateJobInput) (r0 *request.Request, r1 *snowball.UpdateJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*snowball.UpdateJobOutput)
	return
}

func (d *SnowballDouble) UpdateJobWithContext(i0 context.Context, i1 *snowball.UpdateJobInput, i2 ...request.Option) (r0 *snowball.UpdateJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*snowball.UpdateJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SnowballDouble) fakeUpdateJobWithContext(ctx context.Context, in *snowball.UpdateJobInput, _ ...request.Option) (*snowball.UpdateJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateJob cancelled", ctx.Err())
	default:
		return d.UpdateJob(in)
	}
}
