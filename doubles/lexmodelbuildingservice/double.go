// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:13:38+11:00

// Package lexmodelbuildingservicedouble provides a TestDouble implementation of lexmodelbuildingserviceiface.LexModelBuildingServiceAPI
package lexmodelbuildingservicedouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/lexmodelbuildingservice"
	"github.com/aws/aws-sdk-go/service/lexmodelbuildingservice/lexmodelbuildingserviceiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// LexModelBuildingServiceDouble is TestDouble for lexmodelbuildingserviceiface.LexModelBuildingServiceAPI
type LexModelBuildingServiceDouble struct {
	lexmodelbuildingserviceiface.LexModelBuildingServiceAPI
	*awsdouble.AWSTestDouble
}

// Constructor for LexModelBuildingServiceDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *LexModelBuildingServiceDouble {
	result := &LexModelBuildingServiceDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*lexmodelbuildingserviceiface.LexModelBuildingServiceAPI)(nil), configurators...)
	return result
}

func (d *LexModelBuildingServiceDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *LexModelBuildingServiceDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CreateBotVersionWithContext":
		return m.Fake(d.fakeCreateBotVersionWithContext)

	case "CreateIntentVersionWithContext":
		return m.Fake(d.fakeCreateIntentVersionWithContext)

	case "CreateSlotTypeVersionWithContext":
		return m.Fake(d.fakeCreateSlotTypeVersionWithContext)

	case "DeleteBotAliasWithContext":
		return m.Fake(d.fakeDeleteBotAliasWithContext)

	case "DeleteBotChannelAssociationWithContext":
		return m.Fake(d.fakeDeleteBotChannelAssociationWithContext)

	case "DeleteBotVersionWithContext":
		return m.Fake(d.fakeDeleteBotVersionWithContext)

	case "DeleteBotWithContext":
		return m.Fake(d.fakeDeleteBotWithContext)

	case "DeleteIntentVersionWithContext":
		return m.Fake(d.fakeDeleteIntentVersionWithContext)

	case "DeleteIntentWithContext":
		return m.Fake(d.fakeDeleteIntentWithContext)

	case "DeleteSlotTypeVersionWithContext":
		return m.Fake(d.fakeDeleteSlotTypeVersionWithContext)

	case "DeleteSlotTypeWithContext":
		return m.Fake(d.fakeDeleteSlotTypeWithContext)

	case "DeleteUtterancesWithContext":
		return m.Fake(d.fakeDeleteUtterancesWithContext)

	case "GetBotAliasWithContext":
		return m.Fake(d.fakeGetBotAliasWithContext)

	case "GetBotAliasesPages":
		return m.Fake(d.fakeGetBotAliasesPages)

	case "GetBotAliasesPagesWithContext":
		return m.Fake(d.fakeGetBotAliasesPagesWithContext)

	case "GetBotAliasesWithContext":
		return m.Fake(d.fakeGetBotAliasesWithContext)

	case "GetBotChannelAssociationWithContext":
		return m.Fake(d.fakeGetBotChannelAssociationWithContext)

	case "GetBotChannelAssociationsPages":
		return m.Fake(d.fakeGetBotChannelAssociationsPages)

	case "GetBotChannelAssociationsPagesWithContext":
		return m.Fake(d.fakeGetBotChannelAssociationsPagesWithContext)

	case "GetBotChannelAssociationsWithContext":
		return m.Fake(d.fakeGetBotChannelAssociationsWithContext)

	case "GetBotVersionsPages":
		return m.Fake(d.fakeGetBotVersionsPages)

	case "GetBotVersionsPagesWithContext":
		return m.Fake(d.fakeGetBotVersionsPagesWithContext)

	case "GetBotVersionsWithContext":
		return m.Fake(d.fakeGetBotVersionsWithContext)

	case "GetBotWithContext":
		return m.Fake(d.fakeGetBotWithContext)

	case "GetBotsPages":
		return m.Fake(d.fakeGetBotsPages)

	case "GetBotsPagesWithContext":
		return m.Fake(d.fakeGetBotsPagesWithContext)

	case "GetBotsWithContext":
		return m.Fake(d.fakeGetBotsWithContext)

	case "GetBuiltinIntentWithContext":
		return m.Fake(d.fakeGetBuiltinIntentWithContext)

	case "GetBuiltinIntentsPages":
		return m.Fake(d.fakeGetBuiltinIntentsPages)

	case "GetBuiltinIntentsPagesWithContext":
		return m.Fake(d.fakeGetBuiltinIntentsPagesWithContext)

	case "GetBuiltinIntentsWithContext":
		return m.Fake(d.fakeGetBuiltinIntentsWithContext)

	case "GetBuiltinSlotTypesPages":
		return m.Fake(d.fakeGetBuiltinSlotTypesPages)

	case "GetBuiltinSlotTypesPagesWithContext":
		return m.Fake(d.fakeGetBuiltinSlotTypesPagesWithContext)

	case "GetBuiltinSlotTypesWithContext":
		return m.Fake(d.fakeGetBuiltinSlotTypesWithContext)

	case "GetExportWithContext":
		return m.Fake(d.fakeGetExportWithContext)

	case "GetImportWithContext":
		return m.Fake(d.fakeGetImportWithContext)

	case "GetIntentVersionsPages":
		return m.Fake(d.fakeGetIntentVersionsPages)

	case "GetIntentVersionsPagesWithContext":
		return m.Fake(d.fakeGetIntentVersionsPagesWithContext)

	case "GetIntentVersionsWithContext":
		return m.Fake(d.fakeGetIntentVersionsWithContext)

	case "GetIntentWithContext":
		return m.Fake(d.fakeGetIntentWithContext)

	case "GetIntentsPages":
		return m.Fake(d.fakeGetIntentsPages)

	case "GetIntentsPagesWithContext":
		return m.Fake(d.fakeGetIntentsPagesWithContext)

	case "GetIntentsWithContext":
		return m.Fake(d.fakeGetIntentsWithContext)

	case "GetSlotTypeVersionsPages":
		return m.Fake(d.fakeGetSlotTypeVersionsPages)

	case "GetSlotTypeVersionsPagesWithContext":
		return m.Fake(d.fakeGetSlotTypeVersionsPagesWithContext)

	case "GetSlotTypeVersionsWithContext":
		return m.Fake(d.fakeGetSlotTypeVersionsWithContext)

	case "GetSlotTypeWithContext":
		return m.Fake(d.fakeGetSlotTypeWithContext)

	case "GetSlotTypesPages":
		return m.Fake(d.fakeGetSlotTypesPages)

	case "GetSlotTypesPagesWithContext":
		return m.Fake(d.fakeGetSlotTypesPagesWithContext)

	case "GetSlotTypesWithContext":
		return m.Fake(d.fakeGetSlotTypesWithContext)

	case "GetUtterancesViewWithContext":
		return m.Fake(d.fakeGetUtterancesViewWithContext)

	case "PutBotAliasWithContext":
		return m.Fake(d.fakePutBotAliasWithContext)

	case "PutBotWithContext":
		return m.Fake(d.fakePutBotWithContext)

	case "PutIntentWithContext":
		return m.Fake(d.fakePutIntentWithContext)

	case "PutSlotTypeWithContext":
		return m.Fake(d.fakePutSlotTypeWithContext)

	case "StartImportWithContext":
		return m.Fake(d.fakeStartImportWithContext)

	default:
		return nil
	}
}

func (d *LexModelBuildingServiceDouble) CreateBotVersion(i0 *lexmodelbuildingservice.CreateBotVersionInput) (r0 *lexmodelbuildingservice.CreateBotVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBotVersion", i0)
	r0, _ = returns[0].(*lexmodelbuildingservice.CreateBotVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) CreateBotVersionRequest(i0 *lexmodelbuildingservice.CreateBotVersionInput) (r0 *request.Request, r1 *lexmodelbuildingservice.CreateBotVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBotVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lexmodelbuildingservice.CreateBotVersionOutput)
	return
}

func (d *LexModelBuildingServiceDouble) CreateBotVersionWithContext(i0 context.Context, i1 *lexmodelbuildingservice.CreateBotVersionInput, i2 ...request.Option) (r0 *lexmodelbuildingservice.CreateBotVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBotVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lexmodelbuildingservice.CreateBotVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeCreateBotVersionWithContext(ctx context.Context, in *lexmodelbuildingservice.CreateBotVersionInput, _ ...request.Option) (*lexmodelbuildingservice.CreateBotVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateBotVersion cancelled", ctx.Err())
	default:
		return d.CreateBotVersion(in)
	}
}

func (d *LexModelBuildingServiceDouble) CreateIntentVersion(i0 *lexmodelbuildingservice.CreateIntentVersionInput) (r0 *lexmodelbuildingservice.CreateIntentVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateIntentVersion", i0)
	r0, _ = returns[0].(*lexmodelbuildingservice.CreateIntentVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) CreateIntentVersionRequest(i0 *lexmodelbuildingservice.CreateIntentVersionInput) (r0 *request.Request, r1 *lexmodelbuildingservice.CreateIntentVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateIntentVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lexmodelbuildingservice.CreateIntentVersionOutput)
	return
}

func (d *LexModelBuildingServiceDouble) CreateIntentVersionWithContext(i0 context.Context, i1 *lexmodelbuildingservice.CreateIntentVersionInput, i2 ...request.Option) (r0 *lexmodelbuildingservice.CreateIntentVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateIntentVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lexmodelbuildingservice.CreateIntentVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeCreateIntentVersionWithContext(ctx context.Context, in *lexmodelbuildingservice.CreateIntentVersionInput, _ ...request.Option) (*lexmodelbuildingservice.CreateIntentVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateIntentVersion cancelled", ctx.Err())
	default:
		return d.CreateIntentVersion(in)
	}
}

func (d *LexModelBuildingServiceDouble) CreateSlotTypeVersion(i0 *lexmodelbuildingservice.CreateSlotTypeVersionInput) (r0 *lexmodelbuildingservice.CreateSlotTypeVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSlotTypeVersion", i0)
	r0, _ = returns[0].(*lexmodelbuildingservice.CreateSlotTypeVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) CreateSlotTypeVersionRequest(i0 *lexmodelbuildingservice.CreateSlotTypeVersionInput) (r0 *request.Request, r1 *lexmodelbuildingservice.CreateSlotTypeVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSlotTypeVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lexmodelbuildingservice.CreateSlotTypeVersionOutput)
	return
}

func (d *LexModelBuildingServiceDouble) CreateSlotTypeVersionWithContext(i0 context.Context, i1 *lexmodelbuildingservice.CreateSlotTypeVersionInput, i2 ...request.Option) (r0 *lexmodelbuildingservice.CreateSlotTypeVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSlotTypeVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lexmodelbuildingservice.CreateSlotTypeVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeCreateSlotTypeVersionWithContext(ctx context.Context, in *lexmodelbuildingservice.CreateSlotTypeVersionInput, _ ...request.Option) (*lexmodelbuildingservice.CreateSlotTypeVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateSlotTypeVersion cancelled", ctx.Err())
	default:
		return d.CreateSlotTypeVersion(in)
	}
}

func (d *LexModelBuildingServiceDouble) DeleteBot(i0 *lexmodelbuildingservice.DeleteBotInput) (r0 *lexmodelbuildingservice.DeleteBotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBot", i0)
	r0, _ = returns[0].(*lexmodelbuildingservice.DeleteBotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) DeleteBotAlias(i0 *lexmodelbuildingservice.DeleteBotAliasInput) (r0 *lexmodelbuildingservice.DeleteBotAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBotAlias", i0)
	r0, _ = returns[0].(*lexmodelbuildingservice.DeleteBotAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) DeleteBotAliasRequest(i0 *lexmodelbuildingservice.DeleteBotAliasInput) (r0 *request.Request, r1 *lexmodelbuildingservice.DeleteBotAliasOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBotAliasRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lexmodelbuildingservice.DeleteBotAliasOutput)
	return
}

func (d *LexModelBuildingServiceDouble) DeleteBotAliasWithContext(i0 context.Context, i1 *lexmodelbuildingservice.DeleteBotAliasInput, i2 ...request.Option) (r0 *lexmodelbuildingservice.DeleteBotAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBotAliasWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lexmodelbuildingservice.DeleteBotAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeDeleteBotAliasWithContext(ctx context.Context, in *lexmodelbuildingservice.DeleteBotAliasInput, _ ...request.Option) (*lexmodelbuildingservice.DeleteBotAliasOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteBotAlias cancelled", ctx.Err())
	default:
		return d.DeleteBotAlias(in)
	}
}

func (d *LexModelBuildingServiceDouble) DeleteBotChannelAssociation(i0 *lexmodelbuildingservice.DeleteBotChannelAssociationInput) (r0 *lexmodelbuildingservice.DeleteBotChannelAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBotChannelAssociation", i0)
	r0, _ = returns[0].(*lexmodelbuildingservice.DeleteBotChannelAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) DeleteBotChannelAssociationRequest(i0 *lexmodelbuildingservice.DeleteBotChannelAssociationInput) (r0 *request.Request, r1 *lexmodelbuildingservice.DeleteBotChannelAssociationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBotChannelAssociationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lexmodelbuildingservice.DeleteBotChannelAssociationOutput)
	return
}

func (d *LexModelBuildingServiceDouble) DeleteBotChannelAssociationWithContext(i0 context.Context, i1 *lexmodelbuildingservice.DeleteBotChannelAssociationInput, i2 ...request.Option) (r0 *lexmodelbuildingservice.DeleteBotChannelAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBotChannelAssociationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lexmodelbuildingservice.DeleteBotChannelAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeDeleteBotChannelAssociationWithContext(ctx context.Context, in *lexmodelbuildingservice.DeleteBotChannelAssociationInput, _ ...request.Option) (*lexmodelbuildingservice.DeleteBotChannelAssociationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteBotChannelAssociation cancelled", ctx.Err())
	default:
		return d.DeleteBotChannelAssociation(in)
	}
}

func (d *LexModelBuildingServiceDouble) DeleteBotRequest(i0 *lexmodelbuildingservice.DeleteBotInput) (r0 *request.Request, r1 *lexmodelbuildingservice.DeleteBotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lexmodelbuildingservice.DeleteBotOutput)
	return
}

func (d *LexModelBuildingServiceDouble) DeleteBotVersion(i0 *lexmodelbuildingservice.DeleteBotVersionInput) (r0 *lexmodelbuildingservice.DeleteBotVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBotVersion", i0)
	r0, _ = returns[0].(*lexmodelbuildingservice.DeleteBotVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) DeleteBotVersionRequest(i0 *lexmodelbuildingservice.DeleteBotVersionInput) (r0 *request.Request, r1 *lexmodelbuildingservice.DeleteBotVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBotVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lexmodelbuildingservice.DeleteBotVersionOutput)
	return
}

func (d *LexModelBuildingServiceDouble) DeleteBotVersionWithContext(i0 context.Context, i1 *lexmodelbuildingservice.DeleteBotVersionInput, i2 ...request.Option) (r0 *lexmodelbuildingservice.DeleteBotVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBotVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lexmodelbuildingservice.DeleteBotVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeDeleteBotVersionWithContext(ctx context.Context, in *lexmodelbuildingservice.DeleteBotVersionInput, _ ...request.Option) (*lexmodelbuildingservice.DeleteBotVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteBotVersion cancelled", ctx.Err())
	default:
		return d.DeleteBotVersion(in)
	}
}

func (d *LexModelBuildingServiceDouble) DeleteBotWithContext(i0 context.Context, i1 *lexmodelbuildingservice.DeleteBotInput, i2 ...request.Option) (r0 *lexmodelbuildingservice.DeleteBotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lexmodelbuildingservice.DeleteBotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeDeleteBotWithContext(ctx context.Context, in *lexmodelbuildingservice.DeleteBotInput, _ ...request.Option) (*lexmodelbuildingservice.DeleteBotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteBot cancelled", ctx.Err())
	default:
		return d.DeleteBot(in)
	}
}

func (d *LexModelBuildingServiceDouble) DeleteIntent(i0 *lexmodelbuildingservice.DeleteIntentInput) (r0 *lexmodelbuildingservice.DeleteIntentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIntent", i0)
	r0, _ = returns[0].(*lexmodelbuildingservice.DeleteIntentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) DeleteIntentRequest(i0 *lexmodelbuildingservice.DeleteIntentInput) (r0 *request.Request, r1 *lexmodelbuildingservice.DeleteIntentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIntentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lexmodelbuildingservice.DeleteIntentOutput)
	return
}

func (d *LexModelBuildingServiceDouble) DeleteIntentVersion(i0 *lexmodelbuildingservice.DeleteIntentVersionInput) (r0 *lexmodelbuildingservice.DeleteIntentVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIntentVersion", i0)
	r0, _ = returns[0].(*lexmodelbuildingservice.DeleteIntentVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) DeleteIntentVersionRequest(i0 *lexmodelbuildingservice.DeleteIntentVersionInput) (r0 *request.Request, r1 *lexmodelbuildingservice.DeleteIntentVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIntentVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lexmodelbuildingservice.DeleteIntentVersionOutput)
	return
}

func (d *LexModelBuildingServiceDouble) DeleteIntentVersionWithContext(i0 context.Context, i1 *lexmodelbuildingservice.DeleteIntentVersionInput, i2 ...request.Option) (r0 *lexmodelbuildingservice.DeleteIntentVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIntentVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lexmodelbuildingservice.DeleteIntentVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeDeleteIntentVersionWithContext(ctx context.Context, in *lexmodelbuildingservice.DeleteIntentVersionInput, _ ...request.Option) (*lexmodelbuildingservice.DeleteIntentVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteIntentVersion cancelled", ctx.Err())
	default:
		return d.DeleteIntentVersion(in)
	}
}

func (d *LexModelBuildingServiceDouble) DeleteIntentWithContext(i0 context.Context, i1 *lexmodelbuildingservice.DeleteIntentInput, i2 ...request.Option) (r0 *lexmodelbuildingservice.DeleteIntentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIntentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lexmodelbuildingservice.DeleteIntentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeDeleteIntentWithContext(ctx context.Context, in *lexmodelbuildingservice.DeleteIntentInput, _ ...request.Option) (*lexmodelbuildingservice.DeleteIntentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteIntent cancelled", ctx.Err())
	default:
		return d.DeleteIntent(in)
	}
}

func (d *LexModelBuildingServiceDouble) DeleteSlotType(i0 *lexmodelbuildingservice.DeleteSlotTypeInput) (r0 *lexmodelbuildingservice.DeleteSlotTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSlotType", i0)
	r0, _ = returns[0].(*lexmodelbuildingservice.DeleteSlotTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) DeleteSlotTypeRequest(i0 *lexmodelbuildingservice.DeleteSlotTypeInput) (r0 *request.Request, r1 *lexmodelbuildingservice.DeleteSlotTypeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSlotTypeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lexmodelbuildingservice.DeleteSlotTypeOutput)
	return
}

func (d *LexModelBuildingServiceDouble) DeleteSlotTypeVersion(i0 *lexmodelbuildingservice.DeleteSlotTypeVersionInput) (r0 *lexmodelbuildingservice.DeleteSlotTypeVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSlotTypeVersion", i0)
	r0, _ = returns[0].(*lexmodelbuildingservice.DeleteSlotTypeVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) DeleteSlotTypeVersionRequest(i0 *lexmodelbuildingservice.DeleteSlotTypeVersionInput) (r0 *request.Request, r1 *lexmodelbuildingservice.DeleteSlotTypeVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSlotTypeVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lexmodelbuildingservice.DeleteSlotTypeVersionOutput)
	return
}

func (d *LexModelBuildingServiceDouble) DeleteSlotTypeVersionWithContext(i0 context.Context, i1 *lexmodelbuildingservice.DeleteSlotTypeVersionInput, i2 ...request.Option) (r0 *lexmodelbuildingservice.DeleteSlotTypeVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSlotTypeVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lexmodelbuildingservice.DeleteSlotTypeVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeDeleteSlotTypeVersionWithContext(ctx context.Context, in *lexmodelbuildingservice.DeleteSlotTypeVersionInput, _ ...request.Option) (*lexmodelbuildingservice.DeleteSlotTypeVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteSlotTypeVersion cancelled", ctx.Err())
	default:
		return d.DeleteSlotTypeVersion(in)
	}
}

func (d *LexModelBuildingServiceDouble) DeleteSlotTypeWithContext(i0 context.Context, i1 *lexmodelbuildingservice.DeleteSlotTypeInput, i2 ...request.Option) (r0 *lexmodelbuildingservice.DeleteSlotTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSlotTypeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lexmodelbuildingservice.DeleteSlotTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeDeleteSlotTypeWithContext(ctx context.Context, in *lexmodelbuildingservice.DeleteSlotTypeInput, _ ...request.Option) (*lexmodelbuildingservice.DeleteSlotTypeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteSlotType cancelled", ctx.Err())
	default:
		return d.DeleteSlotType(in)
	}
}

func (d *LexModelBuildingServiceDouble) DeleteUtterances(i0 *lexmodelbuildingservice.DeleteUtterancesInput) (r0 *lexmodelbuildingservice.DeleteUtterancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUtterances", i0)
	r0, _ = returns[0].(*lexmodelbuildingservice.DeleteUtterancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) DeleteUtterancesRequest(i0 *lexmodelbuildingservice.DeleteUtterancesInput) (r0 *request.Request, r1 *lexmodelbuildingservice.DeleteUtterancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUtterancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lexmodelbuildingservice.DeleteUtterancesOutput)
	return
}

func (d *LexModelBuildingServiceDouble) DeleteUtterancesWithContext(i0 context.Context, i1 *lexmodelbuildingservice.DeleteUtterancesInput, i2 ...request.Option) (r0 *lexmodelbuildingservice.DeleteUtterancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUtterancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lexmodelbuildingservice.DeleteUtterancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeDeleteUtterancesWithContext(ctx context.Context, in *lexmodelbuildingservice.DeleteUtterancesInput, _ ...request.Option) (*lexmodelbuildingservice.DeleteUtterancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteUtterances cancelled", ctx.Err())
	default:
		return d.DeleteUtterances(in)
	}
}

func (d *LexModelBuildingServiceDouble) GetBot(i0 *lexmodelbuildingservice.GetBotInput) (r0 *lexmodelbuildingservice.GetBotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBot", i0)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetBotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) GetBotAlias(i0 *lexmodelbuildingservice.GetBotAliasInput) (r0 *lexmodelbuildingservice.GetBotAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBotAlias", i0)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetBotAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) GetBotAliasRequest(i0 *lexmodelbuildingservice.GetBotAliasInput) (r0 *request.Request, r1 *lexmodelbuildingservice.GetBotAliasOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBotAliasRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lexmodelbuildingservice.GetBotAliasOutput)
	return
}

func (d *LexModelBuildingServiceDouble) GetBotAliasWithContext(i0 context.Context, i1 *lexmodelbuildingservice.GetBotAliasInput, i2 ...request.Option) (r0 *lexmodelbuildingservice.GetBotAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBotAliasWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetBotAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetBotAliasWithContext(ctx context.Context, in *lexmodelbuildingservice.GetBotAliasInput, _ ...request.Option) (*lexmodelbuildingservice.GetBotAliasOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBotAlias cancelled", ctx.Err())
	default:
		return d.GetBotAlias(in)
	}
}

func (d *LexModelBuildingServiceDouble) GetBotAliases(i0 *lexmodelbuildingservice.GetBotAliasesInput) (r0 *lexmodelbuildingservice.GetBotAliasesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBotAliases", i0)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetBotAliasesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) GetBotAliasesPages(i0 *lexmodelbuildingservice.GetBotAliasesInput, i1 func(*lexmodelbuildingservice.GetBotAliasesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBotAliasesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetBotAliasesPages(in *lexmodelbuildingservice.GetBotAliasesInput, pager func(*lexmodelbuildingservice.GetBotAliasesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetBotAliases", paginators, in, pager)
}

func (d *LexModelBuildingServiceDouble) GetBotAliasesPagesWithContext(i0 context.Context, i1 *lexmodelbuildingservice.GetBotAliasesInput, i2 func(*lexmodelbuildingservice.GetBotAliasesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBotAliasesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetBotAliasesPagesWithContext(ctx context.Context, in *lexmodelbuildingservice.GetBotAliasesInput, pager func(*lexmodelbuildingservice.GetBotAliasesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetBotAliases", paginators, ctx, in, pager, options...)
}

func (d *LexModelBuildingServiceDouble) GetBotAliasesRequest(i0 *lexmodelbuildingservice.GetBotAliasesInput) (r0 *request.Request, r1 *lexmodelbuildingservice.GetBotAliasesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBotAliasesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lexmodelbuildingservice.GetBotAliasesOutput)
	return
}

func (d *LexModelBuildingServiceDouble) GetBotAliasesWithContext(i0 context.Context, i1 *lexmodelbuildingservice.GetBotAliasesInput, i2 ...request.Option) (r0 *lexmodelbuildingservice.GetBotAliasesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBotAliasesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetBotAliasesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetBotAliasesWithContext(ctx context.Context, in *lexmodelbuildingservice.GetBotAliasesInput, _ ...request.Option) (*lexmodelbuildingservice.GetBotAliasesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBotAliases cancelled", ctx.Err())
	default:
		return d.GetBotAliases(in)
	}
}

func (d *LexModelBuildingServiceDouble) GetBotChannelAssociation(i0 *lexmodelbuildingservice.GetBotChannelAssociationInput) (r0 *lexmodelbuildingservice.GetBotChannelAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBotChannelAssociation", i0)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetBotChannelAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) GetBotChannelAssociationRequest(i0 *lexmodelbuildingservice.GetBotChannelAssociationInput) (r0 *request.Request, r1 *lexmodelbuildingservice.GetBotChannelAssociationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBotChannelAssociationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lexmodelbuildingservice.GetBotChannelAssociationOutput)
	return
}

func (d *LexModelBuildingServiceDouble) GetBotChannelAssociationWithContext(i0 context.Context, i1 *lexmodelbuildingservice.GetBotChannelAssociationInput, i2 ...request.Option) (r0 *lexmodelbuildingservice.GetBotChannelAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBotChannelAssociationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetBotChannelAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetBotChannelAssociationWithContext(ctx context.Context, in *lexmodelbuildingservice.GetBotChannelAssociationInput, _ ...request.Option) (*lexmodelbuildingservice.GetBotChannelAssociationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBotChannelAssociation cancelled", ctx.Err())
	default:
		return d.GetBotChannelAssociation(in)
	}
}

func (d *LexModelBuildingServiceDouble) GetBotChannelAssociations(i0 *lexmodelbuildingservice.GetBotChannelAssociationsInput) (r0 *lexmodelbuildingservice.GetBotChannelAssociationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBotChannelAssociations", i0)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetBotChannelAssociationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) GetBotChannelAssociationsPages(i0 *lexmodelbuildingservice.GetBotChannelAssociationsInput, i1 func(*lexmodelbuildingservice.GetBotChannelAssociationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBotChannelAssociationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetBotChannelAssociationsPages(in *lexmodelbuildingservice.GetBotChannelAssociationsInput, pager func(*lexmodelbuildingservice.GetBotChannelAssociationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetBotChannelAssociations", paginators, in, pager)
}

func (d *LexModelBuildingServiceDouble) GetBotChannelAssociationsPagesWithContext(i0 context.Context, i1 *lexmodelbuildingservice.GetBotChannelAssociationsInput, i2 func(*lexmodelbuildingservice.GetBotChannelAssociationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBotChannelAssociationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetBotChannelAssociationsPagesWithContext(ctx context.Context, in *lexmodelbuildingservice.GetBotChannelAssociationsInput, pager func(*lexmodelbuildingservice.GetBotChannelAssociationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetBotChannelAssociations", paginators, ctx, in, pager, options...)
}

func (d *LexModelBuildingServiceDouble) GetBotChannelAssociationsRequest(i0 *lexmodelbuildingservice.GetBotChannelAssociationsInput) (r0 *request.Request, r1 *lexmodelbuildingservice.GetBotChannelAssociationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBotChannelAssociationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lexmodelbuildingservice.GetBotChannelAssociationsOutput)
	return
}

func (d *LexModelBuildingServiceDouble) GetBotChannelAssociationsWithContext(i0 context.Context, i1 *lexmodelbuildingservice.GetBotChannelAssociationsInput, i2 ...request.Option) (r0 *lexmodelbuildingservice.GetBotChannelAssociationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBotChannelAssociationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetBotChannelAssociationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetBotChannelAssociationsWithContext(ctx context.Context, in *lexmodelbuildingservice.GetBotChannelAssociationsInput, _ ...request.Option) (*lexmodelbuildingservice.GetBotChannelAssociationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBotChannelAssociations cancelled", ctx.Err())
	default:
		return d.GetBotChannelAssociations(in)
	}
}

func (d *LexModelBuildingServiceDouble) GetBotRequest(i0 *lexmodelbuildingservice.GetBotInput) (r0 *request.Request, r1 *lexmodelbuildingservice.GetBotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lexmodelbuildingservice.GetBotOutput)
	return
}

func (d *LexModelBuildingServiceDouble) GetBotVersions(i0 *lexmodelbuildingservice.GetBotVersionsInput) (r0 *lexmodelbuildingservice.GetBotVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBotVersions", i0)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetBotVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) GetBotVersionsPages(i0 *lexmodelbuildingservice.GetBotVersionsInput, i1 func(*lexmodelbuildingservice.GetBotVersionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBotVersionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetBotVersionsPages(in *lexmodelbuildingservice.GetBotVersionsInput, pager func(*lexmodelbuildingservice.GetBotVersionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetBotVersions", paginators, in, pager)
}

func (d *LexModelBuildingServiceDouble) GetBotVersionsPagesWithContext(i0 context.Context, i1 *lexmodelbuildingservice.GetBotVersionsInput, i2 func(*lexmodelbuildingservice.GetBotVersionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBotVersionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetBotVersionsPagesWithContext(ctx context.Context, in *lexmodelbuildingservice.GetBotVersionsInput, pager func(*lexmodelbuildingservice.GetBotVersionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetBotVersions", paginators, ctx, in, pager, options...)
}

func (d *LexModelBuildingServiceDouble) GetBotVersionsRequest(i0 *lexmodelbuildingservice.GetBotVersionsInput) (r0 *request.Request, r1 *lexmodelbuildingservice.GetBotVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBotVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lexmodelbuildingservice.GetBotVersionsOutput)
	return
}

func (d *LexModelBuildingServiceDouble) GetBotVersionsWithContext(i0 context.Context, i1 *lexmodelbuildingservice.GetBotVersionsInput, i2 ...request.Option) (r0 *lexmodelbuildingservice.GetBotVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBotVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetBotVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetBotVersionsWithContext(ctx context.Context, in *lexmodelbuildingservice.GetBotVersionsInput, _ ...request.Option) (*lexmodelbuildingservice.GetBotVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBotVersions cancelled", ctx.Err())
	default:
		return d.GetBotVersions(in)
	}
}

func (d *LexModelBuildingServiceDouble) GetBotWithContext(i0 context.Context, i1 *lexmodelbuildingservice.GetBotInput, i2 ...request.Option) (r0 *lexmodelbuildingservice.GetBotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetBotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetBotWithContext(ctx context.Context, in *lexmodelbuildingservice.GetBotInput, _ ...request.Option) (*lexmodelbuildingservice.GetBotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBot cancelled", ctx.Err())
	default:
		return d.GetBot(in)
	}
}

func (d *LexModelBuildingServiceDouble) GetBots(i0 *lexmodelbuildingservice.GetBotsInput) (r0 *lexmodelbuildingservice.GetBotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBots", i0)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetBotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) GetBotsPages(i0 *lexmodelbuildingservice.GetBotsInput, i1 func(*lexmodelbuildingservice.GetBotsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBotsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetBotsPages(in *lexmodelbuildingservice.GetBotsInput, pager func(*lexmodelbuildingservice.GetBotsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetBots", paginators, in, pager)
}

func (d *LexModelBuildingServiceDouble) GetBotsPagesWithContext(i0 context.Context, i1 *lexmodelbuildingservice.GetBotsInput, i2 func(*lexmodelbuildingservice.GetBotsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBotsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetBotsPagesWithContext(ctx context.Context, in *lexmodelbuildingservice.GetBotsInput, pager func(*lexmodelbuildingservice.GetBotsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetBots", paginators, ctx, in, pager, options...)
}

func (d *LexModelBuildingServiceDouble) GetBotsRequest(i0 *lexmodelbuildingservice.GetBotsInput) (r0 *request.Request, r1 *lexmodelbuildingservice.GetBotsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBotsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lexmodelbuildingservice.GetBotsOutput)
	return
}

func (d *LexModelBuildingServiceDouble) GetBotsWithContext(i0 context.Context, i1 *lexmodelbuildingservice.GetBotsInput, i2 ...request.Option) (r0 *lexmodelbuildingservice.GetBotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBotsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetBotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetBotsWithContext(ctx context.Context, in *lexmodelbuildingservice.GetBotsInput, _ ...request.Option) (*lexmodelbuildingservice.GetBotsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBots cancelled", ctx.Err())
	default:
		return d.GetBots(in)
	}
}

func (d *LexModelBuildingServiceDouble) GetBuiltinIntent(i0 *lexmodelbuildingservice.GetBuiltinIntentInput) (r0 *lexmodelbuildingservice.GetBuiltinIntentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBuiltinIntent", i0)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetBuiltinIntentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) GetBuiltinIntentRequest(i0 *lexmodelbuildingservice.GetBuiltinIntentInput) (r0 *request.Request, r1 *lexmodelbuildingservice.GetBuiltinIntentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBuiltinIntentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lexmodelbuildingservice.GetBuiltinIntentOutput)
	return
}

func (d *LexModelBuildingServiceDouble) GetBuiltinIntentWithContext(i0 context.Context, i1 *lexmodelbuildingservice.GetBuiltinIntentInput, i2 ...request.Option) (r0 *lexmodelbuildingservice.GetBuiltinIntentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBuiltinIntentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetBuiltinIntentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetBuiltinIntentWithContext(ctx context.Context, in *lexmodelbuildingservice.GetBuiltinIntentInput, _ ...request.Option) (*lexmodelbuildingservice.GetBuiltinIntentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBuiltinIntent cancelled", ctx.Err())
	default:
		return d.GetBuiltinIntent(in)
	}
}

func (d *LexModelBuildingServiceDouble) GetBuiltinIntents(i0 *lexmodelbuildingservice.GetBuiltinIntentsInput) (r0 *lexmodelbuildingservice.GetBuiltinIntentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBuiltinIntents", i0)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetBuiltinIntentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) GetBuiltinIntentsPages(i0 *lexmodelbuildingservice.GetBuiltinIntentsInput, i1 func(*lexmodelbuildingservice.GetBuiltinIntentsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBuiltinIntentsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetBuiltinIntentsPages(in *lexmodelbuildingservice.GetBuiltinIntentsInput, pager func(*lexmodelbuildingservice.GetBuiltinIntentsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetBuiltinIntents", paginators, in, pager)
}

func (d *LexModelBuildingServiceDouble) GetBuiltinIntentsPagesWithContext(i0 context.Context, i1 *lexmodelbuildingservice.GetBuiltinIntentsInput, i2 func(*lexmodelbuildingservice.GetBuiltinIntentsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBuiltinIntentsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetBuiltinIntentsPagesWithContext(ctx context.Context, in *lexmodelbuildingservice.GetBuiltinIntentsInput, pager func(*lexmodelbuildingservice.GetBuiltinIntentsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetBuiltinIntents", paginators, ctx, in, pager, options...)
}

func (d *LexModelBuildingServiceDouble) GetBuiltinIntentsRequest(i0 *lexmodelbuildingservice.GetBuiltinIntentsInput) (r0 *request.Request, r1 *lexmodelbuildingservice.GetBuiltinIntentsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBuiltinIntentsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lexmodelbuildingservice.GetBuiltinIntentsOutput)
	return
}

func (d *LexModelBuildingServiceDouble) GetBuiltinIntentsWithContext(i0 context.Context, i1 *lexmodelbuildingservice.GetBuiltinIntentsInput, i2 ...request.Option) (r0 *lexmodelbuildingservice.GetBuiltinIntentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBuiltinIntentsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetBuiltinIntentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetBuiltinIntentsWithContext(ctx context.Context, in *lexmodelbuildingservice.GetBuiltinIntentsInput, _ ...request.Option) (*lexmodelbuildingservice.GetBuiltinIntentsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBuiltinIntents cancelled", ctx.Err())
	default:
		return d.GetBuiltinIntents(in)
	}
}

func (d *LexModelBuildingServiceDouble) GetBuiltinSlotTypes(i0 *lexmodelbuildingservice.GetBuiltinSlotTypesInput) (r0 *lexmodelbuildingservice.GetBuiltinSlotTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBuiltinSlotTypes", i0)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetBuiltinSlotTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) GetBuiltinSlotTypesPages(i0 *lexmodelbuildingservice.GetBuiltinSlotTypesInput, i1 func(*lexmodelbuildingservice.GetBuiltinSlotTypesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBuiltinSlotTypesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetBuiltinSlotTypesPages(in *lexmodelbuildingservice.GetBuiltinSlotTypesInput, pager func(*lexmodelbuildingservice.GetBuiltinSlotTypesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetBuiltinSlotTypes", paginators, in, pager)
}

func (d *LexModelBuildingServiceDouble) GetBuiltinSlotTypesPagesWithContext(i0 context.Context, i1 *lexmodelbuildingservice.GetBuiltinSlotTypesInput, i2 func(*lexmodelbuildingservice.GetBuiltinSlotTypesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBuiltinSlotTypesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetBuiltinSlotTypesPagesWithContext(ctx context.Context, in *lexmodelbuildingservice.GetBuiltinSlotTypesInput, pager func(*lexmodelbuildingservice.GetBuiltinSlotTypesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetBuiltinSlotTypes", paginators, ctx, in, pager, options...)
}

func (d *LexModelBuildingServiceDouble) GetBuiltinSlotTypesRequest(i0 *lexmodelbuildingservice.GetBuiltinSlotTypesInput) (r0 *request.Request, r1 *lexmodelbuildingservice.GetBuiltinSlotTypesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBuiltinSlotTypesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lexmodelbuildingservice.GetBuiltinSlotTypesOutput)
	return
}

func (d *LexModelBuildingServiceDouble) GetBuiltinSlotTypesWithContext(i0 context.Context, i1 *lexmodelbuildingservice.GetBuiltinSlotTypesInput, i2 ...request.Option) (r0 *lexmodelbuildingservice.GetBuiltinSlotTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBuiltinSlotTypesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetBuiltinSlotTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetBuiltinSlotTypesWithContext(ctx context.Context, in *lexmodelbuildingservice.GetBuiltinSlotTypesInput, _ ...request.Option) (*lexmodelbuildingservice.GetBuiltinSlotTypesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBuiltinSlotTypes cancelled", ctx.Err())
	default:
		return d.GetBuiltinSlotTypes(in)
	}
}

func (d *LexModelBuildingServiceDouble) GetExport(i0 *lexmodelbuildingservice.GetExportInput) (r0 *lexmodelbuildingservice.GetExportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetExport", i0)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetExportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) GetExportRequest(i0 *lexmodelbuildingservice.GetExportInput) (r0 *request.Request, r1 *lexmodelbuildingservice.GetExportOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetExportRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lexmodelbuildingservice.GetExportOutput)
	return
}

func (d *LexModelBuildingServiceDouble) GetExportWithContext(i0 context.Context, i1 *lexmodelbuildingservice.GetExportInput, i2 ...request.Option) (r0 *lexmodelbuildingservice.GetExportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetExportWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetExportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetExportWithContext(ctx context.Context, in *lexmodelbuildingservice.GetExportInput, _ ...request.Option) (*lexmodelbuildingservice.GetExportOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetExport cancelled", ctx.Err())
	default:
		return d.GetExport(in)
	}
}

func (d *LexModelBuildingServiceDouble) GetImport(i0 *lexmodelbuildingservice.GetImportInput) (r0 *lexmodelbuildingservice.GetImportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetImport", i0)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetImportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) GetImportRequest(i0 *lexmodelbuildingservice.GetImportInput) (r0 *request.Request, r1 *lexmodelbuildingservice.GetImportOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetImportRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lexmodelbuildingservice.GetImportOutput)
	return
}

func (d *LexModelBuildingServiceDouble) GetImportWithContext(i0 context.Context, i1 *lexmodelbuildingservice.GetImportInput, i2 ...request.Option) (r0 *lexmodelbuildingservice.GetImportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetImportWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetImportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetImportWithContext(ctx context.Context, in *lexmodelbuildingservice.GetImportInput, _ ...request.Option) (*lexmodelbuildingservice.GetImportOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetImport cancelled", ctx.Err())
	default:
		return d.GetImport(in)
	}
}

func (d *LexModelBuildingServiceDouble) GetIntent(i0 *lexmodelbuildingservice.GetIntentInput) (r0 *lexmodelbuildingservice.GetIntentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIntent", i0)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetIntentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) GetIntentRequest(i0 *lexmodelbuildingservice.GetIntentInput) (r0 *request.Request, r1 *lexmodelbuildingservice.GetIntentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIntentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lexmodelbuildingservice.GetIntentOutput)
	return
}

func (d *LexModelBuildingServiceDouble) GetIntentVersions(i0 *lexmodelbuildingservice.GetIntentVersionsInput) (r0 *lexmodelbuildingservice.GetIntentVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIntentVersions", i0)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetIntentVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) GetIntentVersionsPages(i0 *lexmodelbuildingservice.GetIntentVersionsInput, i1 func(*lexmodelbuildingservice.GetIntentVersionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIntentVersionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetIntentVersionsPages(in *lexmodelbuildingservice.GetIntentVersionsInput, pager func(*lexmodelbuildingservice.GetIntentVersionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetIntentVersions", paginators, in, pager)
}

func (d *LexModelBuildingServiceDouble) GetIntentVersionsPagesWithContext(i0 context.Context, i1 *lexmodelbuildingservice.GetIntentVersionsInput, i2 func(*lexmodelbuildingservice.GetIntentVersionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIntentVersionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetIntentVersionsPagesWithContext(ctx context.Context, in *lexmodelbuildingservice.GetIntentVersionsInput, pager func(*lexmodelbuildingservice.GetIntentVersionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetIntentVersions", paginators, ctx, in, pager, options...)
}

func (d *LexModelBuildingServiceDouble) GetIntentVersionsRequest(i0 *lexmodelbuildingservice.GetIntentVersionsInput) (r0 *request.Request, r1 *lexmodelbuildingservice.GetIntentVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIntentVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lexmodelbuildingservice.GetIntentVersionsOutput)
	return
}

func (d *LexModelBuildingServiceDouble) GetIntentVersionsWithContext(i0 context.Context, i1 *lexmodelbuildingservice.GetIntentVersionsInput, i2 ...request.Option) (r0 *lexmodelbuildingservice.GetIntentVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIntentVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetIntentVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetIntentVersionsWithContext(ctx context.Context, in *lexmodelbuildingservice.GetIntentVersionsInput, _ ...request.Option) (*lexmodelbuildingservice.GetIntentVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetIntentVersions cancelled", ctx.Err())
	default:
		return d.GetIntentVersions(in)
	}
}

func (d *LexModelBuildingServiceDouble) GetIntentWithContext(i0 context.Context, i1 *lexmodelbuildingservice.GetIntentInput, i2 ...request.Option) (r0 *lexmodelbuildingservice.GetIntentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIntentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetIntentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetIntentWithContext(ctx context.Context, in *lexmodelbuildingservice.GetIntentInput, _ ...request.Option) (*lexmodelbuildingservice.GetIntentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetIntent cancelled", ctx.Err())
	default:
		return d.GetIntent(in)
	}
}

func (d *LexModelBuildingServiceDouble) GetIntents(i0 *lexmodelbuildingservice.GetIntentsInput) (r0 *lexmodelbuildingservice.GetIntentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIntents", i0)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetIntentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) GetIntentsPages(i0 *lexmodelbuildingservice.GetIntentsInput, i1 func(*lexmodelbuildingservice.GetIntentsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIntentsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetIntentsPages(in *lexmodelbuildingservice.GetIntentsInput, pager func(*lexmodelbuildingservice.GetIntentsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetIntents", paginators, in, pager)
}

func (d *LexModelBuildingServiceDouble) GetIntentsPagesWithContext(i0 context.Context, i1 *lexmodelbuildingservice.GetIntentsInput, i2 func(*lexmodelbuildingservice.GetIntentsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIntentsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetIntentsPagesWithContext(ctx context.Context, in *lexmodelbuildingservice.GetIntentsInput, pager func(*lexmodelbuildingservice.GetIntentsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetIntents", paginators, ctx, in, pager, options...)
}

func (d *LexModelBuildingServiceDouble) GetIntentsRequest(i0 *lexmodelbuildingservice.GetIntentsInput) (r0 *request.Request, r1 *lexmodelbuildingservice.GetIntentsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIntentsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lexmodelbuildingservice.GetIntentsOutput)
	return
}

func (d *LexModelBuildingServiceDouble) GetIntentsWithContext(i0 context.Context, i1 *lexmodelbuildingservice.GetIntentsInput, i2 ...request.Option) (r0 *lexmodelbuildingservice.GetIntentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIntentsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetIntentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetIntentsWithContext(ctx context.Context, in *lexmodelbuildingservice.GetIntentsInput, _ ...request.Option) (*lexmodelbuildingservice.GetIntentsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetIntents cancelled", ctx.Err())
	default:
		return d.GetIntents(in)
	}
}

func (d *LexModelBuildingServiceDouble) GetSlotType(i0 *lexmodelbuildingservice.GetSlotTypeInput) (r0 *lexmodelbuildingservice.GetSlotTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSlotType", i0)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetSlotTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) GetSlotTypeRequest(i0 *lexmodelbuildingservice.GetSlotTypeInput) (r0 *request.Request, r1 *lexmodelbuildingservice.GetSlotTypeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSlotTypeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lexmodelbuildingservice.GetSlotTypeOutput)
	return
}

func (d *LexModelBuildingServiceDouble) GetSlotTypeVersions(i0 *lexmodelbuildingservice.GetSlotTypeVersionsInput) (r0 *lexmodelbuildingservice.GetSlotTypeVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSlotTypeVersions", i0)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetSlotTypeVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) GetSlotTypeVersionsPages(i0 *lexmodelbuildingservice.GetSlotTypeVersionsInput, i1 func(*lexmodelbuildingservice.GetSlotTypeVersionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSlotTypeVersionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetSlotTypeVersionsPages(in *lexmodelbuildingservice.GetSlotTypeVersionsInput, pager func(*lexmodelbuildingservice.GetSlotTypeVersionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetSlotTypeVersions", paginators, in, pager)
}

func (d *LexModelBuildingServiceDouble) GetSlotTypeVersionsPagesWithContext(i0 context.Context, i1 *lexmodelbuildingservice.GetSlotTypeVersionsInput, i2 func(*lexmodelbuildingservice.GetSlotTypeVersionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSlotTypeVersionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetSlotTypeVersionsPagesWithContext(ctx context.Context, in *lexmodelbuildingservice.GetSlotTypeVersionsInput, pager func(*lexmodelbuildingservice.GetSlotTypeVersionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetSlotTypeVersions", paginators, ctx, in, pager, options...)
}

func (d *LexModelBuildingServiceDouble) GetSlotTypeVersionsRequest(i0 *lexmodelbuildingservice.GetSlotTypeVersionsInput) (r0 *request.Request, r1 *lexmodelbuildingservice.GetSlotTypeVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSlotTypeVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lexmodelbuildingservice.GetSlotTypeVersionsOutput)
	return
}

func (d *LexModelBuildingServiceDouble) GetSlotTypeVersionsWithContext(i0 context.Context, i1 *lexmodelbuildingservice.GetSlotTypeVersionsInput, i2 ...request.Option) (r0 *lexmodelbuildingservice.GetSlotTypeVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSlotTypeVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetSlotTypeVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetSlotTypeVersionsWithContext(ctx context.Context, in *lexmodelbuildingservice.GetSlotTypeVersionsInput, _ ...request.Option) (*lexmodelbuildingservice.GetSlotTypeVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetSlotTypeVersions cancelled", ctx.Err())
	default:
		return d.GetSlotTypeVersions(in)
	}
}

func (d *LexModelBuildingServiceDouble) GetSlotTypeWithContext(i0 context.Context, i1 *lexmodelbuildingservice.GetSlotTypeInput, i2 ...request.Option) (r0 *lexmodelbuildingservice.GetSlotTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSlotTypeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetSlotTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetSlotTypeWithContext(ctx context.Context, in *lexmodelbuildingservice.GetSlotTypeInput, _ ...request.Option) (*lexmodelbuildingservice.GetSlotTypeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetSlotType cancelled", ctx.Err())
	default:
		return d.GetSlotType(in)
	}
}

func (d *LexModelBuildingServiceDouble) GetSlotTypes(i0 *lexmodelbuildingservice.GetSlotTypesInput) (r0 *lexmodelbuildingservice.GetSlotTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSlotTypes", i0)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetSlotTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) GetSlotTypesPages(i0 *lexmodelbuildingservice.GetSlotTypesInput, i1 func(*lexmodelbuildingservice.GetSlotTypesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSlotTypesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetSlotTypesPages(in *lexmodelbuildingservice.GetSlotTypesInput, pager func(*lexmodelbuildingservice.GetSlotTypesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetSlotTypes", paginators, in, pager)
}

func (d *LexModelBuildingServiceDouble) GetSlotTypesPagesWithContext(i0 context.Context, i1 *lexmodelbuildingservice.GetSlotTypesInput, i2 func(*lexmodelbuildingservice.GetSlotTypesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSlotTypesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetSlotTypesPagesWithContext(ctx context.Context, in *lexmodelbuildingservice.GetSlotTypesInput, pager func(*lexmodelbuildingservice.GetSlotTypesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetSlotTypes", paginators, ctx, in, pager, options...)
}

func (d *LexModelBuildingServiceDouble) GetSlotTypesRequest(i0 *lexmodelbuildingservice.GetSlotTypesInput) (r0 *request.Request, r1 *lexmodelbuildingservice.GetSlotTypesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSlotTypesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lexmodelbuildingservice.GetSlotTypesOutput)
	return
}

func (d *LexModelBuildingServiceDouble) GetSlotTypesWithContext(i0 context.Context, i1 *lexmodelbuildingservice.GetSlotTypesInput, i2 ...request.Option) (r0 *lexmodelbuildingservice.GetSlotTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSlotTypesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetSlotTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetSlotTypesWithContext(ctx context.Context, in *lexmodelbuildingservice.GetSlotTypesInput, _ ...request.Option) (*lexmodelbuildingservice.GetSlotTypesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetSlotTypes cancelled", ctx.Err())
	default:
		return d.GetSlotTypes(in)
	}
}

func (d *LexModelBuildingServiceDouble) GetUtterancesView(i0 *lexmodelbuildingservice.GetUtterancesViewInput) (r0 *lexmodelbuildingservice.GetUtterancesViewOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUtterancesView", i0)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetUtterancesViewOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) GetUtterancesViewRequest(i0 *lexmodelbuildingservice.GetUtterancesViewInput) (r0 *request.Request, r1 *lexmodelbuildingservice.GetUtterancesViewOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUtterancesViewRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lexmodelbuildingservice.GetUtterancesViewOutput)
	return
}

func (d *LexModelBuildingServiceDouble) GetUtterancesViewWithContext(i0 context.Context, i1 *lexmodelbuildingservice.GetUtterancesViewInput, i2 ...request.Option) (r0 *lexmodelbuildingservice.GetUtterancesViewOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUtterancesViewWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lexmodelbuildingservice.GetUtterancesViewOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeGetUtterancesViewWithContext(ctx context.Context, in *lexmodelbuildingservice.GetUtterancesViewInput, _ ...request.Option) (*lexmodelbuildingservice.GetUtterancesViewOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetUtterancesView cancelled", ctx.Err())
	default:
		return d.GetUtterancesView(in)
	}
}

func (d *LexModelBuildingServiceDouble) PutBot(i0 *lexmodelbuildingservice.PutBotInput) (r0 *lexmodelbuildingservice.PutBotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBot", i0)
	r0, _ = returns[0].(*lexmodelbuildingservice.PutBotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) PutBotAlias(i0 *lexmodelbuildingservice.PutBotAliasInput) (r0 *lexmodelbuildingservice.PutBotAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBotAlias", i0)
	r0, _ = returns[0].(*lexmodelbuildingservice.PutBotAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) PutBotAliasRequest(i0 *lexmodelbuildingservice.PutBotAliasInput) (r0 *request.Request, r1 *lexmodelbuildingservice.PutBotAliasOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBotAliasRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lexmodelbuildingservice.PutBotAliasOutput)
	return
}

func (d *LexModelBuildingServiceDouble) PutBotAliasWithContext(i0 context.Context, i1 *lexmodelbuildingservice.PutBotAliasInput, i2 ...request.Option) (r0 *lexmodelbuildingservice.PutBotAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBotAliasWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lexmodelbuildingservice.PutBotAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakePutBotAliasWithContext(ctx context.Context, in *lexmodelbuildingservice.PutBotAliasInput, _ ...request.Option) (*lexmodelbuildingservice.PutBotAliasOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutBotAlias cancelled", ctx.Err())
	default:
		return d.PutBotAlias(in)
	}
}

func (d *LexModelBuildingServiceDouble) PutBotRequest(i0 *lexmodelbuildingservice.PutBotInput) (r0 *request.Request, r1 *lexmodelbuildingservice.PutBotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lexmodelbuildingservice.PutBotOutput)
	return
}

func (d *LexModelBuildingServiceDouble) PutBotWithContext(i0 context.Context, i1 *lexmodelbuildingservice.PutBotInput, i2 ...request.Option) (r0 *lexmodelbuildingservice.PutBotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lexmodelbuildingservice.PutBotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakePutBotWithContext(ctx context.Context, in *lexmodelbuildingservice.PutBotInput, _ ...request.Option) (*lexmodelbuildingservice.PutBotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutBot cancelled", ctx.Err())
	default:
		return d.PutBot(in)
	}
}

func (d *LexModelBuildingServiceDouble) PutIntent(i0 *lexmodelbuildingservice.PutIntentInput) (r0 *lexmodelbuildingservice.PutIntentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutIntent", i0)
	r0, _ = returns[0].(*lexmodelbuildingservice.PutIntentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) PutIntentRequest(i0 *lexmodelbuildingservice.PutIntentInput) (r0 *request.Request, r1 *lexmodelbuildingservice.PutIntentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutIntentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lexmodelbuildingservice.PutIntentOutput)
	return
}

func (d *LexModelBuildingServiceDouble) PutIntentWithContext(i0 context.Context, i1 *lexmodelbuildingservice.PutIntentInput, i2 ...request.Option) (r0 *lexmodelbuildingservice.PutIntentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutIntentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lexmodelbuildingservice.PutIntentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakePutIntentWithContext(ctx context.Context, in *lexmodelbuildingservice.PutIntentInput, _ ...request.Option) (*lexmodelbuildingservice.PutIntentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutIntent cancelled", ctx.Err())
	default:
		return d.PutIntent(in)
	}
}

func (d *LexModelBuildingServiceDouble) PutSlotType(i0 *lexmodelbuildingservice.PutSlotTypeInput) (r0 *lexmodelbuildingservice.PutSlotTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutSlotType", i0)
	r0, _ = returns[0].(*lexmodelbuildingservice.PutSlotTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) PutSlotTypeRequest(i0 *lexmodelbuildingservice.PutSlotTypeInput) (r0 *request.Request, r1 *lexmodelbuildingservice.PutSlotTypeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutSlotTypeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lexmodelbuildingservice.PutSlotTypeOutput)
	return
}

func (d *LexModelBuildingServiceDouble) PutSlotTypeWithContext(i0 context.Context, i1 *lexmodelbuildingservice.PutSlotTypeInput, i2 ...request.Option) (r0 *lexmodelbuildingservice.PutSlotTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutSlotTypeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lexmodelbuildingservice.PutSlotTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakePutSlotTypeWithContext(ctx context.Context, in *lexmodelbuildingservice.PutSlotTypeInput, _ ...request.Option) (*lexmodelbuildingservice.PutSlotTypeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutSlotType cancelled", ctx.Err())
	default:
		return d.PutSlotType(in)
	}
}

func (d *LexModelBuildingServiceDouble) StartImport(i0 *lexmodelbuildingservice.StartImportInput) (r0 *lexmodelbuildingservice.StartImportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartImport", i0)
	r0, _ = returns[0].(*lexmodelbuildingservice.StartImportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) StartImportRequest(i0 *lexmodelbuildingservice.StartImportInput) (r0 *request.Request, r1 *lexmodelbuildingservice.StartImportOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartImportRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lexmodelbuildingservice.StartImportOutput)
	return
}

func (d *LexModelBuildingServiceDouble) StartImportWithContext(i0 context.Context, i1 *lexmodelbuildingservice.StartImportInput, i2 ...request.Option) (r0 *lexmodelbuildingservice.StartImportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartImportWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lexmodelbuildingservice.StartImportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LexModelBuildingServiceDouble) fakeStartImportWithContext(ctx context.Context, in *lexmodelbuildingservice.StartImportInput, _ ...request.Option) (*lexmodelbuildingservice.StartImportOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartImport cancelled", ctx.Err())
	default:
		return d.StartImport(in)
	}
}
