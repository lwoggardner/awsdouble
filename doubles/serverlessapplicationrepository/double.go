// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:14:56+11:00

// Package serverlessapplicationrepositorydouble provides a TestDouble implementation of serverlessapplicationrepositoryiface.ServerlessApplicationRepositoryAPI
package serverlessapplicationrepositorydouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/serverlessapplicationrepository"
	"github.com/aws/aws-sdk-go/service/serverlessapplicationrepository/serverlessapplicationrepositoryiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// ServerlessApplicationRepositoryDouble is TestDouble for serverlessapplicationrepositoryiface.ServerlessApplicationRepositoryAPI
type ServerlessApplicationRepositoryDouble struct {
	serverlessapplicationrepositoryiface.ServerlessApplicationRepositoryAPI
	*awsdouble.AWSTestDouble
}

// Constructor for ServerlessApplicationRepositoryDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *ServerlessApplicationRepositoryDouble {
	result := &ServerlessApplicationRepositoryDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*serverlessapplicationrepositoryiface.ServerlessApplicationRepositoryAPI)(nil), configurators...)
	return result
}

func (d *ServerlessApplicationRepositoryDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *ServerlessApplicationRepositoryDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CreateApplicationVersionWithContext":
		return m.Fake(d.fakeCreateApplicationVersionWithContext)

	case "CreateApplicationWithContext":
		return m.Fake(d.fakeCreateApplicationWithContext)

	case "CreateCloudFormationChangeSetWithContext":
		return m.Fake(d.fakeCreateCloudFormationChangeSetWithContext)

	case "CreateCloudFormationTemplateWithContext":
		return m.Fake(d.fakeCreateCloudFormationTemplateWithContext)

	case "DeleteApplicationWithContext":
		return m.Fake(d.fakeDeleteApplicationWithContext)

	case "GetApplicationPolicyWithContext":
		return m.Fake(d.fakeGetApplicationPolicyWithContext)

	case "GetApplicationWithContext":
		return m.Fake(d.fakeGetApplicationWithContext)

	case "GetCloudFormationTemplateWithContext":
		return m.Fake(d.fakeGetCloudFormationTemplateWithContext)

	case "ListApplicationDependenciesPages":
		return m.Fake(d.fakeListApplicationDependenciesPages)

	case "ListApplicationDependenciesPagesWithContext":
		return m.Fake(d.fakeListApplicationDependenciesPagesWithContext)

	case "ListApplicationDependenciesWithContext":
		return m.Fake(d.fakeListApplicationDependenciesWithContext)

	case "ListApplicationVersionsPages":
		return m.Fake(d.fakeListApplicationVersionsPages)

	case "ListApplicationVersionsPagesWithContext":
		return m.Fake(d.fakeListApplicationVersionsPagesWithContext)

	case "ListApplicationVersionsWithContext":
		return m.Fake(d.fakeListApplicationVersionsWithContext)

	case "ListApplicationsPages":
		return m.Fake(d.fakeListApplicationsPages)

	case "ListApplicationsPagesWithContext":
		return m.Fake(d.fakeListApplicationsPagesWithContext)

	case "ListApplicationsWithContext":
		return m.Fake(d.fakeListApplicationsWithContext)

	case "PutApplicationPolicyWithContext":
		return m.Fake(d.fakePutApplicationPolicyWithContext)

	case "UpdateApplicationWithContext":
		return m.Fake(d.fakeUpdateApplicationWithContext)

	default:
		return nil
	}
}

func (d *ServerlessApplicationRepositoryDouble) CreateApplication(i0 *serverlessapplicationrepository.CreateApplicationRequest) (r0 *serverlessapplicationrepository.CreateApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApplication", i0)
	r0, _ = returns[0].(*serverlessapplicationrepository.CreateApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServerlessApplicationRepositoryDouble) CreateApplicationRequest(i0 *serverlessapplicationrepository.CreateApplicationRequest) (r0 *request.Request, r1 *serverlessapplicationrepository.CreateApplicationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApplicationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*serverlessapplicationrepository.CreateApplicationOutput)
	return
}

func (d *ServerlessApplicationRepositoryDouble) CreateApplicationVersion(i0 *serverlessapplicationrepository.CreateApplicationVersionRequest) (r0 *serverlessapplicationrepository.CreateApplicationVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApplicationVersion", i0)
	r0, _ = returns[0].(*serverlessapplicationrepository.CreateApplicationVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServerlessApplicationRepositoryDouble) CreateApplicationVersionRequest(i0 *serverlessapplicationrepository.CreateApplicationVersionRequest) (r0 *request.Request, r1 *serverlessapplicationrepository.CreateApplicationVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApplicationVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*serverlessapplicationrepository.CreateApplicationVersionOutput)
	return
}

func (d *ServerlessApplicationRepositoryDouble) CreateApplicationVersionWithContext(i0 context.Context, i1 *serverlessapplicationrepository.CreateApplicationVersionRequest, i2 ...request.Option) (r0 *serverlessapplicationrepository.CreateApplicationVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApplicationVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*serverlessapplicationrepository.CreateApplicationVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServerlessApplicationRepositoryDouble) fakeCreateApplicationVersionWithContext(ctx context.Context, in *serverlessapplicationrepository.CreateApplicationVersionRequest, _ ...request.Option) (*serverlessapplicationrepository.CreateApplicationVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateApplicationVersion cancelled", ctx.Err())
	default:
		return d.CreateApplicationVersion(in)
	}
}

func (d *ServerlessApplicationRepositoryDouble) CreateApplicationWithContext(i0 context.Context, i1 *serverlessapplicationrepository.CreateApplicationRequest, i2 ...request.Option) (r0 *serverlessapplicationrepository.CreateApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApplicationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*serverlessapplicationrepository.CreateApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServerlessApplicationRepositoryDouble) fakeCreateApplicationWithContext(ctx context.Context, in *serverlessapplicationrepository.CreateApplicationRequest, _ ...request.Option) (*serverlessapplicationrepository.CreateApplicationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateApplication cancelled", ctx.Err())
	default:
		return d.CreateApplication(in)
	}
}

func (d *ServerlessApplicationRepositoryDouble) CreateCloudFormationChangeSet(i0 *serverlessapplicationrepository.CreateCloudFormationChangeSetRequest) (r0 *serverlessapplicationrepository.CreateCloudFormationChangeSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCloudFormationChangeSet", i0)
	r0, _ = returns[0].(*serverlessapplicationrepository.CreateCloudFormationChangeSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServerlessApplicationRepositoryDouble) CreateCloudFormationChangeSetRequest(i0 *serverlessapplicationrepository.CreateCloudFormationChangeSetRequest) (r0 *request.Request, r1 *serverlessapplicationrepository.CreateCloudFormationChangeSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCloudFormationChangeSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*serverlessapplicationrepository.CreateCloudFormationChangeSetOutput)
	return
}

func (d *ServerlessApplicationRepositoryDouble) CreateCloudFormationChangeSetWithContext(i0 context.Context, i1 *serverlessapplicationrepository.CreateCloudFormationChangeSetRequest, i2 ...request.Option) (r0 *serverlessapplicationrepository.CreateCloudFormationChangeSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCloudFormationChangeSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*serverlessapplicationrepository.CreateCloudFormationChangeSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServerlessApplicationRepositoryDouble) fakeCreateCloudFormationChangeSetWithContext(ctx context.Context, in *serverlessapplicationrepository.CreateCloudFormationChangeSetRequest, _ ...request.Option) (*serverlessapplicationrepository.CreateCloudFormationChangeSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateCloudFormationChangeSet cancelled", ctx.Err())
	default:
		return d.CreateCloudFormationChangeSet(in)
	}
}

func (d *ServerlessApplicationRepositoryDouble) CreateCloudFormationTemplate(i0 *serverlessapplicationrepository.CreateCloudFormationTemplateInput) (r0 *serverlessapplicationrepository.CreateCloudFormationTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCloudFormationTemplate", i0)
	r0, _ = returns[0].(*serverlessapplicationrepository.CreateCloudFormationTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServerlessApplicationRepositoryDouble) CreateCloudFormationTemplateRequest(i0 *serverlessapplicationrepository.CreateCloudFormationTemplateInput) (r0 *request.Request, r1 *serverlessapplicationrepository.CreateCloudFormationTemplateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCloudFormationTemplateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*serverlessapplicationrepository.CreateCloudFormationTemplateOutput)
	return
}

func (d *ServerlessApplicationRepositoryDouble) CreateCloudFormationTemplateWithContext(i0 context.Context, i1 *serverlessapplicationrepository.CreateCloudFormationTemplateInput, i2 ...request.Option) (r0 *serverlessapplicationrepository.CreateCloudFormationTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCloudFormationTemplateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*serverlessapplicationrepository.CreateCloudFormationTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServerlessApplicationRepositoryDouble) fakeCreateCloudFormationTemplateWithContext(ctx context.Context, in *serverlessapplicationrepository.CreateCloudFormationTemplateInput, _ ...request.Option) (*serverlessapplicationrepository.CreateCloudFormationTemplateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateCloudFormationTemplate cancelled", ctx.Err())
	default:
		return d.CreateCloudFormationTemplate(in)
	}
}

func (d *ServerlessApplicationRepositoryDouble) DeleteApplication(i0 *serverlessapplicationrepository.DeleteApplicationInput) (r0 *serverlessapplicationrepository.DeleteApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApplication", i0)
	r0, _ = returns[0].(*serverlessapplicationrepository.DeleteApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServerlessApplicationRepositoryDouble) DeleteApplicationRequest(i0 *serverlessapplicationrepository.DeleteApplicationInput) (r0 *request.Request, r1 *serverlessapplicationrepository.DeleteApplicationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApplicationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*serverlessapplicationrepository.DeleteApplicationOutput)
	return
}

func (d *ServerlessApplicationRepositoryDouble) DeleteApplicationWithContext(i0 context.Context, i1 *serverlessapplicationrepository.DeleteApplicationInput, i2 ...request.Option) (r0 *serverlessapplicationrepository.DeleteApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApplicationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*serverlessapplicationrepository.DeleteApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServerlessApplicationRepositoryDouble) fakeDeleteApplicationWithContext(ctx context.Context, in *serverlessapplicationrepository.DeleteApplicationInput, _ ...request.Option) (*serverlessapplicationrepository.DeleteApplicationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteApplication cancelled", ctx.Err())
	default:
		return d.DeleteApplication(in)
	}
}

func (d *ServerlessApplicationRepositoryDouble) GetApplication(i0 *serverlessapplicationrepository.GetApplicationInput) (r0 *serverlessapplicationrepository.GetApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApplication", i0)
	r0, _ = returns[0].(*serverlessapplicationrepository.GetApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServerlessApplicationRepositoryDouble) GetApplicationPolicy(i0 *serverlessapplicationrepository.GetApplicationPolicyInput) (r0 *serverlessapplicationrepository.GetApplicationPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApplicationPolicy", i0)
	r0, _ = returns[0].(*serverlessapplicationrepository.GetApplicationPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServerlessApplicationRepositoryDouble) GetApplicationPolicyRequest(i0 *serverlessapplicationrepository.GetApplicationPolicyInput) (r0 *request.Request, r1 *serverlessapplicationrepository.GetApplicationPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApplicationPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*serverlessapplicationrepository.GetApplicationPolicyOutput)
	return
}

func (d *ServerlessApplicationRepositoryDouble) GetApplicationPolicyWithContext(i0 context.Context, i1 *serverlessapplicationrepository.GetApplicationPolicyInput, i2 ...request.Option) (r0 *serverlessapplicationrepository.GetApplicationPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApplicationPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*serverlessapplicationrepository.GetApplicationPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServerlessApplicationRepositoryDouble) fakeGetApplicationPolicyWithContext(ctx context.Context, in *serverlessapplicationrepository.GetApplicationPolicyInput, _ ...request.Option) (*serverlessapplicationrepository.GetApplicationPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetApplicationPolicy cancelled", ctx.Err())
	default:
		return d.GetApplicationPolicy(in)
	}
}

func (d *ServerlessApplicationRepositoryDouble) GetApplicationRequest(i0 *serverlessapplicationrepository.GetApplicationInput) (r0 *request.Request, r1 *serverlessapplicationrepository.GetApplicationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApplicationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*serverlessapplicationrepository.GetApplicationOutput)
	return
}

func (d *ServerlessApplicationRepositoryDouble) GetApplicationWithContext(i0 context.Context, i1 *serverlessapplicationrepository.GetApplicationInput, i2 ...request.Option) (r0 *serverlessapplicationrepository.GetApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApplicationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*serverlessapplicationrepository.GetApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServerlessApplicationRepositoryDouble) fakeGetApplicationWithContext(ctx context.Context, in *serverlessapplicationrepository.GetApplicationInput, _ ...request.Option) (*serverlessapplicationrepository.GetApplicationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetApplication cancelled", ctx.Err())
	default:
		return d.GetApplication(in)
	}
}

func (d *ServerlessApplicationRepositoryDouble) GetCloudFormationTemplate(i0 *serverlessapplicationrepository.GetCloudFormationTemplateInput) (r0 *serverlessapplicationrepository.GetCloudFormationTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCloudFormationTemplate", i0)
	r0, _ = returns[0].(*serverlessapplicationrepository.GetCloudFormationTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServerlessApplicationRepositoryDouble) GetCloudFormationTemplateRequest(i0 *serverlessapplicationrepository.GetCloudFormationTemplateInput) (r0 *request.Request, r1 *serverlessapplicationrepository.GetCloudFormationTemplateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCloudFormationTemplateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*serverlessapplicationrepository.GetCloudFormationTemplateOutput)
	return
}

func (d *ServerlessApplicationRepositoryDouble) GetCloudFormationTemplateWithContext(i0 context.Context, i1 *serverlessapplicationrepository.GetCloudFormationTemplateInput, i2 ...request.Option) (r0 *serverlessapplicationrepository.GetCloudFormationTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCloudFormationTemplateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*serverlessapplicationrepository.GetCloudFormationTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServerlessApplicationRepositoryDouble) fakeGetCloudFormationTemplateWithContext(ctx context.Context, in *serverlessapplicationrepository.GetCloudFormationTemplateInput, _ ...request.Option) (*serverlessapplicationrepository.GetCloudFormationTemplateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetCloudFormationTemplate cancelled", ctx.Err())
	default:
		return d.GetCloudFormationTemplate(in)
	}
}

func (d *ServerlessApplicationRepositoryDouble) ListApplicationDependencies(i0 *serverlessapplicationrepository.ListApplicationDependenciesInput) (r0 *serverlessapplicationrepository.ListApplicationDependenciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApplicationDependencies", i0)
	r0, _ = returns[0].(*serverlessapplicationrepository.ListApplicationDependenciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServerlessApplicationRepositoryDouble) ListApplicationDependenciesPages(i0 *serverlessapplicationrepository.ListApplicationDependenciesInput, i1 func(*serverlessapplicationrepository.ListApplicationDependenciesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApplicationDependenciesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ServerlessApplicationRepositoryDouble) fakeListApplicationDependenciesPages(in *serverlessapplicationrepository.ListApplicationDependenciesInput, pager func(*serverlessapplicationrepository.ListApplicationDependenciesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListApplicationDependencies", paginators, in, pager)
}

func (d *ServerlessApplicationRepositoryDouble) ListApplicationDependenciesPagesWithContext(i0 context.Context, i1 *serverlessapplicationrepository.ListApplicationDependenciesInput, i2 func(*serverlessapplicationrepository.ListApplicationDependenciesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApplicationDependenciesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ServerlessApplicationRepositoryDouble) fakeListApplicationDependenciesPagesWithContext(ctx context.Context, in *serverlessapplicationrepository.ListApplicationDependenciesInput, pager func(*serverlessapplicationrepository.ListApplicationDependenciesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListApplicationDependencies", paginators, ctx, in, pager, options...)
}

func (d *ServerlessApplicationRepositoryDouble) ListApplicationDependenciesRequest(i0 *serverlessapplicationrepository.ListApplicationDependenciesInput) (r0 *request.Request, r1 *serverlessapplicationrepository.ListApplicationDependenciesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApplicationDependenciesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*serverlessapplicationrepository.ListApplicationDependenciesOutput)
	return
}

func (d *ServerlessApplicationRepositoryDouble) ListApplicationDependenciesWithContext(i0 context.Context, i1 *serverlessapplicationrepository.ListApplicationDependenciesInput, i2 ...request.Option) (r0 *serverlessapplicationrepository.ListApplicationDependenciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApplicationDependenciesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*serverlessapplicationrepository.ListApplicationDependenciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServerlessApplicationRepositoryDouble) fakeListApplicationDependenciesWithContext(ctx context.Context, in *serverlessapplicationrepository.ListApplicationDependenciesInput, _ ...request.Option) (*serverlessapplicationrepository.ListApplicationDependenciesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListApplicationDependencies cancelled", ctx.Err())
	default:
		return d.ListApplicationDependencies(in)
	}
}

func (d *ServerlessApplicationRepositoryDouble) ListApplicationVersions(i0 *serverlessapplicationrepository.ListApplicationVersionsInput) (r0 *serverlessapplicationrepository.ListApplicationVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApplicationVersions", i0)
	r0, _ = returns[0].(*serverlessapplicationrepository.ListApplicationVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServerlessApplicationRepositoryDouble) ListApplicationVersionsPages(i0 *serverlessapplicationrepository.ListApplicationVersionsInput, i1 func(*serverlessapplicationrepository.ListApplicationVersionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApplicationVersionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ServerlessApplicationRepositoryDouble) fakeListApplicationVersionsPages(in *serverlessapplicationrepository.ListApplicationVersionsInput, pager func(*serverlessapplicationrepository.ListApplicationVersionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListApplicationVersions", paginators, in, pager)
}

func (d *ServerlessApplicationRepositoryDouble) ListApplicationVersionsPagesWithContext(i0 context.Context, i1 *serverlessapplicationrepository.ListApplicationVersionsInput, i2 func(*serverlessapplicationrepository.ListApplicationVersionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApplicationVersionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ServerlessApplicationRepositoryDouble) fakeListApplicationVersionsPagesWithContext(ctx context.Context, in *serverlessapplicationrepository.ListApplicationVersionsInput, pager func(*serverlessapplicationrepository.ListApplicationVersionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListApplicationVersions", paginators, ctx, in, pager, options...)
}

func (d *ServerlessApplicationRepositoryDouble) ListApplicationVersionsRequest(i0 *serverlessapplicationrepository.ListApplicationVersionsInput) (r0 *request.Request, r1 *serverlessapplicationrepository.ListApplicationVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApplicationVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*serverlessapplicationrepository.ListApplicationVersionsOutput)
	return
}

func (d *ServerlessApplicationRepositoryDouble) ListApplicationVersionsWithContext(i0 context.Context, i1 *serverlessapplicationrepository.ListApplicationVersionsInput, i2 ...request.Option) (r0 *serverlessapplicationrepository.ListApplicationVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApplicationVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*serverlessapplicationrepository.ListApplicationVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServerlessApplicationRepositoryDouble) fakeListApplicationVersionsWithContext(ctx context.Context, in *serverlessapplicationrepository.ListApplicationVersionsInput, _ ...request.Option) (*serverlessapplicationrepository.ListApplicationVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListApplicationVersions cancelled", ctx.Err())
	default:
		return d.ListApplicationVersions(in)
	}
}

func (d *ServerlessApplicationRepositoryDouble) ListApplications(i0 *serverlessapplicationrepository.ListApplicationsInput) (r0 *serverlessapplicationrepository.ListApplicationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApplications", i0)
	r0, _ = returns[0].(*serverlessapplicationrepository.ListApplicationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServerlessApplicationRepositoryDouble) ListApplicationsPages(i0 *serverlessapplicationrepository.ListApplicationsInput, i1 func(*serverlessapplicationrepository.ListApplicationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApplicationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ServerlessApplicationRepositoryDouble) fakeListApplicationsPages(in *serverlessapplicationrepository.ListApplicationsInput, pager func(*serverlessapplicationrepository.ListApplicationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListApplications", paginators, in, pager)
}

func (d *ServerlessApplicationRepositoryDouble) ListApplicationsPagesWithContext(i0 context.Context, i1 *serverlessapplicationrepository.ListApplicationsInput, i2 func(*serverlessapplicationrepository.ListApplicationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApplicationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ServerlessApplicationRepositoryDouble) fakeListApplicationsPagesWithContext(ctx context.Context, in *serverlessapplicationrepository.ListApplicationsInput, pager func(*serverlessapplicationrepository.ListApplicationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListApplications", paginators, ctx, in, pager, options...)
}

func (d *ServerlessApplicationRepositoryDouble) ListApplicationsRequest(i0 *serverlessapplicationrepository.ListApplicationsInput) (r0 *request.Request, r1 *serverlessapplicationrepository.ListApplicationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApplicationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*serverlessapplicationrepository.ListApplicationsOutput)
	return
}

func (d *ServerlessApplicationRepositoryDouble) ListApplicationsWithContext(i0 context.Context, i1 *serverlessapplicationrepository.ListApplicationsInput, i2 ...request.Option) (r0 *serverlessapplicationrepository.ListApplicationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApplicationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*serverlessapplicationrepository.ListApplicationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServerlessApplicationRepositoryDouble) fakeListApplicationsWithContext(ctx context.Context, in *serverlessapplicationrepository.ListApplicationsInput, _ ...request.Option) (*serverlessapplicationrepository.ListApplicationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListApplications cancelled", ctx.Err())
	default:
		return d.ListApplications(in)
	}
}

func (d *ServerlessApplicationRepositoryDouble) PutApplicationPolicy(i0 *serverlessapplicationrepository.PutApplicationPolicyInput) (r0 *serverlessapplicationrepository.PutApplicationPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutApplicationPolicy", i0)
	r0, _ = returns[0].(*serverlessapplicationrepository.PutApplicationPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServerlessApplicationRepositoryDouble) PutApplicationPolicyRequest(i0 *serverlessapplicationrepository.PutApplicationPolicyInput) (r0 *request.Request, r1 *serverlessapplicationrepository.PutApplicationPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutApplicationPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*serverlessapplicationrepository.PutApplicationPolicyOutput)
	return
}

func (d *ServerlessApplicationRepositoryDouble) PutApplicationPolicyWithContext(i0 context.Context, i1 *serverlessapplicationrepository.PutApplicationPolicyInput, i2 ...request.Option) (r0 *serverlessapplicationrepository.PutApplicationPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutApplicationPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*serverlessapplicationrepository.PutApplicationPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServerlessApplicationRepositoryDouble) fakePutApplicationPolicyWithContext(ctx context.Context, in *serverlessapplicationrepository.PutApplicationPolicyInput, _ ...request.Option) (*serverlessapplicationrepository.PutApplicationPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutApplicationPolicy cancelled", ctx.Err())
	default:
		return d.PutApplicationPolicy(in)
	}
}

func (d *ServerlessApplicationRepositoryDouble) UpdateApplication(i0 *serverlessapplicationrepository.UpdateApplicationRequest) (r0 *serverlessapplicationrepository.UpdateApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApplication", i0)
	r0, _ = returns[0].(*serverlessapplicationrepository.UpdateApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServerlessApplicationRepositoryDouble) UpdateApplicationRequest(i0 *serverlessapplicationrepository.UpdateApplicationRequest) (r0 *request.Request, r1 *serverlessapplicationrepository.UpdateApplicationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApplicationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*serverlessapplicationrepository.UpdateApplicationOutput)
	return
}

func (d *ServerlessApplicationRepositoryDouble) UpdateApplicationWithContext(i0 context.Context, i1 *serverlessapplicationrepository.UpdateApplicationRequest, i2 ...request.Option) (r0 *serverlessapplicationrepository.UpdateApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApplicationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*serverlessapplicationrepository.UpdateApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServerlessApplicationRepositoryDouble) fakeUpdateApplicationWithContext(ctx context.Context, in *serverlessapplicationrepository.UpdateApplicationRequest, _ ...request.Option) (*serverlessapplicationrepository.UpdateApplicationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateApplication cancelled", ctx.Err())
	default:
		return d.UpdateApplication(in)
	}
}
