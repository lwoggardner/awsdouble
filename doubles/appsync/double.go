// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:11:18+11:00

// Package appsyncdouble provides a TestDouble implementation of appsynciface.AppSyncAPI
package appsyncdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/appsync"
	"github.com/aws/aws-sdk-go/service/appsync/appsynciface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// AppSyncDouble is TestDouble for appsynciface.AppSyncAPI
type AppSyncDouble struct {
	appsynciface.AppSyncAPI
	*awsdouble.AWSTestDouble
}

// Constructor for AppSyncDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *AppSyncDouble {
	result := &AppSyncDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*appsynciface.AppSyncAPI)(nil), configurators...)
	return result
}

func (d *AppSyncDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *AppSyncDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CreateApiCacheWithContext":
		return m.Fake(d.fakeCreateApiCacheWithContext)

	case "CreateApiKeyWithContext":
		return m.Fake(d.fakeCreateApiKeyWithContext)

	case "CreateDataSourceWithContext":
		return m.Fake(d.fakeCreateDataSourceWithContext)

	case "CreateFunctionWithContext":
		return m.Fake(d.fakeCreateFunctionWithContext)

	case "CreateGraphqlApiWithContext":
		return m.Fake(d.fakeCreateGraphqlApiWithContext)

	case "CreateResolverWithContext":
		return m.Fake(d.fakeCreateResolverWithContext)

	case "CreateTypeWithContext":
		return m.Fake(d.fakeCreateTypeWithContext)

	case "DeleteApiCacheWithContext":
		return m.Fake(d.fakeDeleteApiCacheWithContext)

	case "DeleteApiKeyWithContext":
		return m.Fake(d.fakeDeleteApiKeyWithContext)

	case "DeleteDataSourceWithContext":
		return m.Fake(d.fakeDeleteDataSourceWithContext)

	case "DeleteFunctionWithContext":
		return m.Fake(d.fakeDeleteFunctionWithContext)

	case "DeleteGraphqlApiWithContext":
		return m.Fake(d.fakeDeleteGraphqlApiWithContext)

	case "DeleteResolverWithContext":
		return m.Fake(d.fakeDeleteResolverWithContext)

	case "DeleteTypeWithContext":
		return m.Fake(d.fakeDeleteTypeWithContext)

	case "FlushApiCacheWithContext":
		return m.Fake(d.fakeFlushApiCacheWithContext)

	case "GetApiCacheWithContext":
		return m.Fake(d.fakeGetApiCacheWithContext)

	case "GetDataSourceWithContext":
		return m.Fake(d.fakeGetDataSourceWithContext)

	case "GetFunctionWithContext":
		return m.Fake(d.fakeGetFunctionWithContext)

	case "GetGraphqlApiWithContext":
		return m.Fake(d.fakeGetGraphqlApiWithContext)

	case "GetIntrospectionSchemaWithContext":
		return m.Fake(d.fakeGetIntrospectionSchemaWithContext)

	case "GetResolverWithContext":
		return m.Fake(d.fakeGetResolverWithContext)

	case "GetSchemaCreationStatusWithContext":
		return m.Fake(d.fakeGetSchemaCreationStatusWithContext)

	case "GetTypeWithContext":
		return m.Fake(d.fakeGetTypeWithContext)

	case "ListApiKeysWithContext":
		return m.Fake(d.fakeListApiKeysWithContext)

	case "ListDataSourcesWithContext":
		return m.Fake(d.fakeListDataSourcesWithContext)

	case "ListFunctionsWithContext":
		return m.Fake(d.fakeListFunctionsWithContext)

	case "ListGraphqlApisWithContext":
		return m.Fake(d.fakeListGraphqlApisWithContext)

	case "ListResolversByFunctionWithContext":
		return m.Fake(d.fakeListResolversByFunctionWithContext)

	case "ListResolversWithContext":
		return m.Fake(d.fakeListResolversWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "ListTypesWithContext":
		return m.Fake(d.fakeListTypesWithContext)

	case "StartSchemaCreationWithContext":
		return m.Fake(d.fakeStartSchemaCreationWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateApiCacheWithContext":
		return m.Fake(d.fakeUpdateApiCacheWithContext)

	case "UpdateApiKeyWithContext":
		return m.Fake(d.fakeUpdateApiKeyWithContext)

	case "UpdateDataSourceWithContext":
		return m.Fake(d.fakeUpdateDataSourceWithContext)

	case "UpdateFunctionWithContext":
		return m.Fake(d.fakeUpdateFunctionWithContext)

	case "UpdateGraphqlApiWithContext":
		return m.Fake(d.fakeUpdateGraphqlApiWithContext)

	case "UpdateResolverWithContext":
		return m.Fake(d.fakeUpdateResolverWithContext)

	case "UpdateTypeWithContext":
		return m.Fake(d.fakeUpdateTypeWithContext)

	default:
		return nil
	}
}

func (d *AppSyncDouble) CreateApiCache(i0 *appsync.CreateApiCacheInput) (r0 *appsync.CreateApiCacheOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApiCache", i0)
	r0, _ = returns[0].(*appsync.CreateApiCacheOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) CreateApiCacheRequest(i0 *appsync.CreateApiCacheInput) (r0 *request.Request, r1 *appsync.CreateApiCacheOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApiCacheRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.CreateApiCacheOutput)
	return
}

func (d *AppSyncDouble) CreateApiCacheWithContext(i0 context.Context, i1 *appsync.CreateApiCacheInput, i2 ...request.Option) (r0 *appsync.CreateApiCacheOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApiCacheWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.CreateApiCacheOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeCreateApiCacheWithContext(ctx context.Context, in *appsync.CreateApiCacheInput, _ ...request.Option) (*appsync.CreateApiCacheOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateApiCache cancelled", ctx.Err())
	default:
		return d.CreateApiCache(in)
	}
}

func (d *AppSyncDouble) CreateApiKey(i0 *appsync.CreateApiKeyInput) (r0 *appsync.CreateApiKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApiKey", i0)
	r0, _ = returns[0].(*appsync.CreateApiKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) CreateApiKeyRequest(i0 *appsync.CreateApiKeyInput) (r0 *request.Request, r1 *appsync.CreateApiKeyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApiKeyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.CreateApiKeyOutput)
	return
}

func (d *AppSyncDouble) CreateApiKeyWithContext(i0 context.Context, i1 *appsync.CreateApiKeyInput, i2 ...request.Option) (r0 *appsync.CreateApiKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApiKeyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.CreateApiKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeCreateApiKeyWithContext(ctx context.Context, in *appsync.CreateApiKeyInput, _ ...request.Option) (*appsync.CreateApiKeyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateApiKey cancelled", ctx.Err())
	default:
		return d.CreateApiKey(in)
	}
}

func (d *AppSyncDouble) CreateDataSource(i0 *appsync.CreateDataSourceInput) (r0 *appsync.CreateDataSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDataSource", i0)
	r0, _ = returns[0].(*appsync.CreateDataSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) CreateDataSourceRequest(i0 *appsync.CreateDataSourceInput) (r0 *request.Request, r1 *appsync.CreateDataSourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDataSourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.CreateDataSourceOutput)
	return
}

func (d *AppSyncDouble) CreateDataSourceWithContext(i0 context.Context, i1 *appsync.CreateDataSourceInput, i2 ...request.Option) (r0 *appsync.CreateDataSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDataSourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.CreateDataSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeCreateDataSourceWithContext(ctx context.Context, in *appsync.CreateDataSourceInput, _ ...request.Option) (*appsync.CreateDataSourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDataSource cancelled", ctx.Err())
	default:
		return d.CreateDataSource(in)
	}
}

func (d *AppSyncDouble) CreateFunction(i0 *appsync.CreateFunctionInput) (r0 *appsync.CreateFunctionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFunction", i0)
	r0, _ = returns[0].(*appsync.CreateFunctionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) CreateFunctionRequest(i0 *appsync.CreateFunctionInput) (r0 *request.Request, r1 *appsync.CreateFunctionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFunctionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.CreateFunctionOutput)
	return
}

func (d *AppSyncDouble) CreateFunctionWithContext(i0 context.Context, i1 *appsync.CreateFunctionInput, i2 ...request.Option) (r0 *appsync.CreateFunctionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFunctionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.CreateFunctionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeCreateFunctionWithContext(ctx context.Context, in *appsync.CreateFunctionInput, _ ...request.Option) (*appsync.CreateFunctionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateFunction cancelled", ctx.Err())
	default:
		return d.CreateFunction(in)
	}
}

func (d *AppSyncDouble) CreateGraphqlApi(i0 *appsync.CreateGraphqlApiInput) (r0 *appsync.CreateGraphqlApiOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGraphqlApi", i0)
	r0, _ = returns[0].(*appsync.CreateGraphqlApiOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) CreateGraphqlApiRequest(i0 *appsync.CreateGraphqlApiInput) (r0 *request.Request, r1 *appsync.CreateGraphqlApiOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGraphqlApiRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.CreateGraphqlApiOutput)
	return
}

func (d *AppSyncDouble) CreateGraphqlApiWithContext(i0 context.Context, i1 *appsync.CreateGraphqlApiInput, i2 ...request.Option) (r0 *appsync.CreateGraphqlApiOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGraphqlApiWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.CreateGraphqlApiOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeCreateGraphqlApiWithContext(ctx context.Context, in *appsync.CreateGraphqlApiInput, _ ...request.Option) (*appsync.CreateGraphqlApiOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateGraphqlApi cancelled", ctx.Err())
	default:
		return d.CreateGraphqlApi(in)
	}
}

func (d *AppSyncDouble) CreateResolver(i0 *appsync.CreateResolverInput) (r0 *appsync.CreateResolverOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateResolver", i0)
	r0, _ = returns[0].(*appsync.CreateResolverOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) CreateResolverRequest(i0 *appsync.CreateResolverInput) (r0 *request.Request, r1 *appsync.CreateResolverOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateResolverRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.CreateResolverOutput)
	return
}

func (d *AppSyncDouble) CreateResolverWithContext(i0 context.Context, i1 *appsync.CreateResolverInput, i2 ...request.Option) (r0 *appsync.CreateResolverOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateResolverWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.CreateResolverOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeCreateResolverWithContext(ctx context.Context, in *appsync.CreateResolverInput, _ ...request.Option) (*appsync.CreateResolverOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateResolver cancelled", ctx.Err())
	default:
		return d.CreateResolver(in)
	}
}

func (d *AppSyncDouble) CreateType(i0 *appsync.CreateTypeInput) (r0 *appsync.CreateTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateType", i0)
	r0, _ = returns[0].(*appsync.CreateTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) CreateTypeRequest(i0 *appsync.CreateTypeInput) (r0 *request.Request, r1 *appsync.CreateTypeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTypeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.CreateTypeOutput)
	return
}

func (d *AppSyncDouble) CreateTypeWithContext(i0 context.Context, i1 *appsync.CreateTypeInput, i2 ...request.Option) (r0 *appsync.CreateTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTypeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.CreateTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeCreateTypeWithContext(ctx context.Context, in *appsync.CreateTypeInput, _ ...request.Option) (*appsync.CreateTypeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateType cancelled", ctx.Err())
	default:
		return d.CreateType(in)
	}
}

func (d *AppSyncDouble) DeleteApiCache(i0 *appsync.DeleteApiCacheInput) (r0 *appsync.DeleteApiCacheOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApiCache", i0)
	r0, _ = returns[0].(*appsync.DeleteApiCacheOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) DeleteApiCacheRequest(i0 *appsync.DeleteApiCacheInput) (r0 *request.Request, r1 *appsync.DeleteApiCacheOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApiCacheRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.DeleteApiCacheOutput)
	return
}

func (d *AppSyncDouble) DeleteApiCacheWithContext(i0 context.Context, i1 *appsync.DeleteApiCacheInput, i2 ...request.Option) (r0 *appsync.DeleteApiCacheOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApiCacheWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.DeleteApiCacheOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeDeleteApiCacheWithContext(ctx context.Context, in *appsync.DeleteApiCacheInput, _ ...request.Option) (*appsync.DeleteApiCacheOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteApiCache cancelled", ctx.Err())
	default:
		return d.DeleteApiCache(in)
	}
}

func (d *AppSyncDouble) DeleteApiKey(i0 *appsync.DeleteApiKeyInput) (r0 *appsync.DeleteApiKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApiKey", i0)
	r0, _ = returns[0].(*appsync.DeleteApiKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) DeleteApiKeyRequest(i0 *appsync.DeleteApiKeyInput) (r0 *request.Request, r1 *appsync.DeleteApiKeyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApiKeyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.DeleteApiKeyOutput)
	return
}

func (d *AppSyncDouble) DeleteApiKeyWithContext(i0 context.Context, i1 *appsync.DeleteApiKeyInput, i2 ...request.Option) (r0 *appsync.DeleteApiKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApiKeyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.DeleteApiKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeDeleteApiKeyWithContext(ctx context.Context, in *appsync.DeleteApiKeyInput, _ ...request.Option) (*appsync.DeleteApiKeyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteApiKey cancelled", ctx.Err())
	default:
		return d.DeleteApiKey(in)
	}
}

func (d *AppSyncDouble) DeleteDataSource(i0 *appsync.DeleteDataSourceInput) (r0 *appsync.DeleteDataSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDataSource", i0)
	r0, _ = returns[0].(*appsync.DeleteDataSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) DeleteDataSourceRequest(i0 *appsync.DeleteDataSourceInput) (r0 *request.Request, r1 *appsync.DeleteDataSourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDataSourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.DeleteDataSourceOutput)
	return
}

func (d *AppSyncDouble) DeleteDataSourceWithContext(i0 context.Context, i1 *appsync.DeleteDataSourceInput, i2 ...request.Option) (r0 *appsync.DeleteDataSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDataSourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.DeleteDataSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeDeleteDataSourceWithContext(ctx context.Context, in *appsync.DeleteDataSourceInput, _ ...request.Option) (*appsync.DeleteDataSourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDataSource cancelled", ctx.Err())
	default:
		return d.DeleteDataSource(in)
	}
}

func (d *AppSyncDouble) DeleteFunction(i0 *appsync.DeleteFunctionInput) (r0 *appsync.DeleteFunctionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFunction", i0)
	r0, _ = returns[0].(*appsync.DeleteFunctionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) DeleteFunctionRequest(i0 *appsync.DeleteFunctionInput) (r0 *request.Request, r1 *appsync.DeleteFunctionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFunctionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.DeleteFunctionOutput)
	return
}

func (d *AppSyncDouble) DeleteFunctionWithContext(i0 context.Context, i1 *appsync.DeleteFunctionInput, i2 ...request.Option) (r0 *appsync.DeleteFunctionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFunctionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.DeleteFunctionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeDeleteFunctionWithContext(ctx context.Context, in *appsync.DeleteFunctionInput, _ ...request.Option) (*appsync.DeleteFunctionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteFunction cancelled", ctx.Err())
	default:
		return d.DeleteFunction(in)
	}
}

func (d *AppSyncDouble) DeleteGraphqlApi(i0 *appsync.DeleteGraphqlApiInput) (r0 *appsync.DeleteGraphqlApiOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGraphqlApi", i0)
	r0, _ = returns[0].(*appsync.DeleteGraphqlApiOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) DeleteGraphqlApiRequest(i0 *appsync.DeleteGraphqlApiInput) (r0 *request.Request, r1 *appsync.DeleteGraphqlApiOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGraphqlApiRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.DeleteGraphqlApiOutput)
	return
}

func (d *AppSyncDouble) DeleteGraphqlApiWithContext(i0 context.Context, i1 *appsync.DeleteGraphqlApiInput, i2 ...request.Option) (r0 *appsync.DeleteGraphqlApiOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGraphqlApiWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.DeleteGraphqlApiOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeDeleteGraphqlApiWithContext(ctx context.Context, in *appsync.DeleteGraphqlApiInput, _ ...request.Option) (*appsync.DeleteGraphqlApiOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteGraphqlApi cancelled", ctx.Err())
	default:
		return d.DeleteGraphqlApi(in)
	}
}

func (d *AppSyncDouble) DeleteResolver(i0 *appsync.DeleteResolverInput) (r0 *appsync.DeleteResolverOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResolver", i0)
	r0, _ = returns[0].(*appsync.DeleteResolverOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) DeleteResolverRequest(i0 *appsync.DeleteResolverInput) (r0 *request.Request, r1 *appsync.DeleteResolverOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResolverRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.DeleteResolverOutput)
	return
}

func (d *AppSyncDouble) DeleteResolverWithContext(i0 context.Context, i1 *appsync.DeleteResolverInput, i2 ...request.Option) (r0 *appsync.DeleteResolverOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResolverWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.DeleteResolverOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeDeleteResolverWithContext(ctx context.Context, in *appsync.DeleteResolverInput, _ ...request.Option) (*appsync.DeleteResolverOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteResolver cancelled", ctx.Err())
	default:
		return d.DeleteResolver(in)
	}
}

func (d *AppSyncDouble) DeleteType(i0 *appsync.DeleteTypeInput) (r0 *appsync.DeleteTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteType", i0)
	r0, _ = returns[0].(*appsync.DeleteTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) DeleteTypeRequest(i0 *appsync.DeleteTypeInput) (r0 *request.Request, r1 *appsync.DeleteTypeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTypeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.DeleteTypeOutput)
	return
}

func (d *AppSyncDouble) DeleteTypeWithContext(i0 context.Context, i1 *appsync.DeleteTypeInput, i2 ...request.Option) (r0 *appsync.DeleteTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTypeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.DeleteTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeDeleteTypeWithContext(ctx context.Context, in *appsync.DeleteTypeInput, _ ...request.Option) (*appsync.DeleteTypeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteType cancelled", ctx.Err())
	default:
		return d.DeleteType(in)
	}
}

func (d *AppSyncDouble) FlushApiCache(i0 *appsync.FlushApiCacheInput) (r0 *appsync.FlushApiCacheOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("FlushApiCache", i0)
	r0, _ = returns[0].(*appsync.FlushApiCacheOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) FlushApiCacheRequest(i0 *appsync.FlushApiCacheInput) (r0 *request.Request, r1 *appsync.FlushApiCacheOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("FlushApiCacheRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.FlushApiCacheOutput)
	return
}

func (d *AppSyncDouble) FlushApiCacheWithContext(i0 context.Context, i1 *appsync.FlushApiCacheInput, i2 ...request.Option) (r0 *appsync.FlushApiCacheOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("FlushApiCacheWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.FlushApiCacheOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeFlushApiCacheWithContext(ctx context.Context, in *appsync.FlushApiCacheInput, _ ...request.Option) (*appsync.FlushApiCacheOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "FlushApiCache cancelled", ctx.Err())
	default:
		return d.FlushApiCache(in)
	}
}

func (d *AppSyncDouble) GetApiCache(i0 *appsync.GetApiCacheInput) (r0 *appsync.GetApiCacheOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApiCache", i0)
	r0, _ = returns[0].(*appsync.GetApiCacheOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) GetApiCacheRequest(i0 *appsync.GetApiCacheInput) (r0 *request.Request, r1 *appsync.GetApiCacheOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApiCacheRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.GetApiCacheOutput)
	return
}

func (d *AppSyncDouble) GetApiCacheWithContext(i0 context.Context, i1 *appsync.GetApiCacheInput, i2 ...request.Option) (r0 *appsync.GetApiCacheOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApiCacheWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.GetApiCacheOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeGetApiCacheWithContext(ctx context.Context, in *appsync.GetApiCacheInput, _ ...request.Option) (*appsync.GetApiCacheOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetApiCache cancelled", ctx.Err())
	default:
		return d.GetApiCache(in)
	}
}

func (d *AppSyncDouble) GetDataSource(i0 *appsync.GetDataSourceInput) (r0 *appsync.GetDataSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDataSource", i0)
	r0, _ = returns[0].(*appsync.GetDataSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) GetDataSourceRequest(i0 *appsync.GetDataSourceInput) (r0 *request.Request, r1 *appsync.GetDataSourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDataSourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.GetDataSourceOutput)
	return
}

func (d *AppSyncDouble) GetDataSourceWithContext(i0 context.Context, i1 *appsync.GetDataSourceInput, i2 ...request.Option) (r0 *appsync.GetDataSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDataSourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.GetDataSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeGetDataSourceWithContext(ctx context.Context, in *appsync.GetDataSourceInput, _ ...request.Option) (*appsync.GetDataSourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDataSource cancelled", ctx.Err())
	default:
		return d.GetDataSource(in)
	}
}

func (d *AppSyncDouble) GetFunction(i0 *appsync.GetFunctionInput) (r0 *appsync.GetFunctionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFunction", i0)
	r0, _ = returns[0].(*appsync.GetFunctionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) GetFunctionRequest(i0 *appsync.GetFunctionInput) (r0 *request.Request, r1 *appsync.GetFunctionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFunctionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.GetFunctionOutput)
	return
}

func (d *AppSyncDouble) GetFunctionWithContext(i0 context.Context, i1 *appsync.GetFunctionInput, i2 ...request.Option) (r0 *appsync.GetFunctionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFunctionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.GetFunctionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeGetFunctionWithContext(ctx context.Context, in *appsync.GetFunctionInput, _ ...request.Option) (*appsync.GetFunctionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetFunction cancelled", ctx.Err())
	default:
		return d.GetFunction(in)
	}
}

func (d *AppSyncDouble) GetGraphqlApi(i0 *appsync.GetGraphqlApiInput) (r0 *appsync.GetGraphqlApiOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGraphqlApi", i0)
	r0, _ = returns[0].(*appsync.GetGraphqlApiOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) GetGraphqlApiRequest(i0 *appsync.GetGraphqlApiInput) (r0 *request.Request, r1 *appsync.GetGraphqlApiOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGraphqlApiRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.GetGraphqlApiOutput)
	return
}

func (d *AppSyncDouble) GetGraphqlApiWithContext(i0 context.Context, i1 *appsync.GetGraphqlApiInput, i2 ...request.Option) (r0 *appsync.GetGraphqlApiOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGraphqlApiWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.GetGraphqlApiOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeGetGraphqlApiWithContext(ctx context.Context, in *appsync.GetGraphqlApiInput, _ ...request.Option) (*appsync.GetGraphqlApiOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetGraphqlApi cancelled", ctx.Err())
	default:
		return d.GetGraphqlApi(in)
	}
}

func (d *AppSyncDouble) GetIntrospectionSchema(i0 *appsync.GetIntrospectionSchemaInput) (r0 *appsync.GetIntrospectionSchemaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIntrospectionSchema", i0)
	r0, _ = returns[0].(*appsync.GetIntrospectionSchemaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) GetIntrospectionSchemaRequest(i0 *appsync.GetIntrospectionSchemaInput) (r0 *request.Request, r1 *appsync.GetIntrospectionSchemaOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIntrospectionSchemaRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.GetIntrospectionSchemaOutput)
	return
}

func (d *AppSyncDouble) GetIntrospectionSchemaWithContext(i0 context.Context, i1 *appsync.GetIntrospectionSchemaInput, i2 ...request.Option) (r0 *appsync.GetIntrospectionSchemaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIntrospectionSchemaWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.GetIntrospectionSchemaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeGetIntrospectionSchemaWithContext(ctx context.Context, in *appsync.GetIntrospectionSchemaInput, _ ...request.Option) (*appsync.GetIntrospectionSchemaOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetIntrospectionSchema cancelled", ctx.Err())
	default:
		return d.GetIntrospectionSchema(in)
	}
}

func (d *AppSyncDouble) GetResolver(i0 *appsync.GetResolverInput) (r0 *appsync.GetResolverOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResolver", i0)
	r0, _ = returns[0].(*appsync.GetResolverOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) GetResolverRequest(i0 *appsync.GetResolverInput) (r0 *request.Request, r1 *appsync.GetResolverOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResolverRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.GetResolverOutput)
	return
}

func (d *AppSyncDouble) GetResolverWithContext(i0 context.Context, i1 *appsync.GetResolverInput, i2 ...request.Option) (r0 *appsync.GetResolverOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResolverWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.GetResolverOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeGetResolverWithContext(ctx context.Context, in *appsync.GetResolverInput, _ ...request.Option) (*appsync.GetResolverOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetResolver cancelled", ctx.Err())
	default:
		return d.GetResolver(in)
	}
}

func (d *AppSyncDouble) GetSchemaCreationStatus(i0 *appsync.GetSchemaCreationStatusInput) (r0 *appsync.GetSchemaCreationStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSchemaCreationStatus", i0)
	r0, _ = returns[0].(*appsync.GetSchemaCreationStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) GetSchemaCreationStatusRequest(i0 *appsync.GetSchemaCreationStatusInput) (r0 *request.Request, r1 *appsync.GetSchemaCreationStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSchemaCreationStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.GetSchemaCreationStatusOutput)
	return
}

func (d *AppSyncDouble) GetSchemaCreationStatusWithContext(i0 context.Context, i1 *appsync.GetSchemaCreationStatusInput, i2 ...request.Option) (r0 *appsync.GetSchemaCreationStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSchemaCreationStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.GetSchemaCreationStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeGetSchemaCreationStatusWithContext(ctx context.Context, in *appsync.GetSchemaCreationStatusInput, _ ...request.Option) (*appsync.GetSchemaCreationStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetSchemaCreationStatus cancelled", ctx.Err())
	default:
		return d.GetSchemaCreationStatus(in)
	}
}

func (d *AppSyncDouble) GetType(i0 *appsync.GetTypeInput) (r0 *appsync.GetTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetType", i0)
	r0, _ = returns[0].(*appsync.GetTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) GetTypeRequest(i0 *appsync.GetTypeInput) (r0 *request.Request, r1 *appsync.GetTypeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTypeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.GetTypeOutput)
	return
}

func (d *AppSyncDouble) GetTypeWithContext(i0 context.Context, i1 *appsync.GetTypeInput, i2 ...request.Option) (r0 *appsync.GetTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTypeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.GetTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeGetTypeWithContext(ctx context.Context, in *appsync.GetTypeInput, _ ...request.Option) (*appsync.GetTypeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetType cancelled", ctx.Err())
	default:
		return d.GetType(in)
	}
}

func (d *AppSyncDouble) ListApiKeys(i0 *appsync.ListApiKeysInput) (r0 *appsync.ListApiKeysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApiKeys", i0)
	r0, _ = returns[0].(*appsync.ListApiKeysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) ListApiKeysRequest(i0 *appsync.ListApiKeysInput) (r0 *request.Request, r1 *appsync.ListApiKeysOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApiKeysRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.ListApiKeysOutput)
	return
}

func (d *AppSyncDouble) ListApiKeysWithContext(i0 context.Context, i1 *appsync.ListApiKeysInput, i2 ...request.Option) (r0 *appsync.ListApiKeysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApiKeysWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.ListApiKeysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeListApiKeysWithContext(ctx context.Context, in *appsync.ListApiKeysInput, _ ...request.Option) (*appsync.ListApiKeysOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListApiKeys cancelled", ctx.Err())
	default:
		return d.ListApiKeys(in)
	}
}

func (d *AppSyncDouble) ListDataSources(i0 *appsync.ListDataSourcesInput) (r0 *appsync.ListDataSourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDataSources", i0)
	r0, _ = returns[0].(*appsync.ListDataSourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) ListDataSourcesRequest(i0 *appsync.ListDataSourcesInput) (r0 *request.Request, r1 *appsync.ListDataSourcesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDataSourcesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.ListDataSourcesOutput)
	return
}

func (d *AppSyncDouble) ListDataSourcesWithContext(i0 context.Context, i1 *appsync.ListDataSourcesInput, i2 ...request.Option) (r0 *appsync.ListDataSourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDataSourcesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.ListDataSourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeListDataSourcesWithContext(ctx context.Context, in *appsync.ListDataSourcesInput, _ ...request.Option) (*appsync.ListDataSourcesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDataSources cancelled", ctx.Err())
	default:
		return d.ListDataSources(in)
	}
}

func (d *AppSyncDouble) ListFunctions(i0 *appsync.ListFunctionsInput) (r0 *appsync.ListFunctionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFunctions", i0)
	r0, _ = returns[0].(*appsync.ListFunctionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) ListFunctionsRequest(i0 *appsync.ListFunctionsInput) (r0 *request.Request, r1 *appsync.ListFunctionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFunctionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.ListFunctionsOutput)
	return
}

func (d *AppSyncDouble) ListFunctionsWithContext(i0 context.Context, i1 *appsync.ListFunctionsInput, i2 ...request.Option) (r0 *appsync.ListFunctionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFunctionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.ListFunctionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeListFunctionsWithContext(ctx context.Context, in *appsync.ListFunctionsInput, _ ...request.Option) (*appsync.ListFunctionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListFunctions cancelled", ctx.Err())
	default:
		return d.ListFunctions(in)
	}
}

func (d *AppSyncDouble) ListGraphqlApis(i0 *appsync.ListGraphqlApisInput) (r0 *appsync.ListGraphqlApisOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGraphqlApis", i0)
	r0, _ = returns[0].(*appsync.ListGraphqlApisOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) ListGraphqlApisRequest(i0 *appsync.ListGraphqlApisInput) (r0 *request.Request, r1 *appsync.ListGraphqlApisOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGraphqlApisRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.ListGraphqlApisOutput)
	return
}

func (d *AppSyncDouble) ListGraphqlApisWithContext(i0 context.Context, i1 *appsync.ListGraphqlApisInput, i2 ...request.Option) (r0 *appsync.ListGraphqlApisOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGraphqlApisWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.ListGraphqlApisOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeListGraphqlApisWithContext(ctx context.Context, in *appsync.ListGraphqlApisInput, _ ...request.Option) (*appsync.ListGraphqlApisOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListGraphqlApis cancelled", ctx.Err())
	default:
		return d.ListGraphqlApis(in)
	}
}

func (d *AppSyncDouble) ListResolvers(i0 *appsync.ListResolversInput) (r0 *appsync.ListResolversOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResolvers", i0)
	r0, _ = returns[0].(*appsync.ListResolversOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) ListResolversByFunction(i0 *appsync.ListResolversByFunctionInput) (r0 *appsync.ListResolversByFunctionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResolversByFunction", i0)
	r0, _ = returns[0].(*appsync.ListResolversByFunctionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) ListResolversByFunctionRequest(i0 *appsync.ListResolversByFunctionInput) (r0 *request.Request, r1 *appsync.ListResolversByFunctionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResolversByFunctionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.ListResolversByFunctionOutput)
	return
}

func (d *AppSyncDouble) ListResolversByFunctionWithContext(i0 context.Context, i1 *appsync.ListResolversByFunctionInput, i2 ...request.Option) (r0 *appsync.ListResolversByFunctionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResolversByFunctionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.ListResolversByFunctionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeListResolversByFunctionWithContext(ctx context.Context, in *appsync.ListResolversByFunctionInput, _ ...request.Option) (*appsync.ListResolversByFunctionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListResolversByFunction cancelled", ctx.Err())
	default:
		return d.ListResolversByFunction(in)
	}
}

func (d *AppSyncDouble) ListResolversRequest(i0 *appsync.ListResolversInput) (r0 *request.Request, r1 *appsync.ListResolversOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResolversRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.ListResolversOutput)
	return
}

func (d *AppSyncDouble) ListResolversWithContext(i0 context.Context, i1 *appsync.ListResolversInput, i2 ...request.Option) (r0 *appsync.ListResolversOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResolversWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.ListResolversOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeListResolversWithContext(ctx context.Context, in *appsync.ListResolversInput, _ ...request.Option) (*appsync.ListResolversOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListResolvers cancelled", ctx.Err())
	default:
		return d.ListResolvers(in)
	}
}

func (d *AppSyncDouble) ListTagsForResource(i0 *appsync.ListTagsForResourceInput) (r0 *appsync.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*appsync.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) ListTagsForResourceRequest(i0 *appsync.ListTagsForResourceInput) (r0 *request.Request, r1 *appsync.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.ListTagsForResourceOutput)
	return
}

func (d *AppSyncDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *appsync.ListTagsForResourceInput, i2 ...request.Option) (r0 *appsync.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *appsync.ListTagsForResourceInput, _ ...request.Option) (*appsync.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *AppSyncDouble) ListTypes(i0 *appsync.ListTypesInput) (r0 *appsync.ListTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTypes", i0)
	r0, _ = returns[0].(*appsync.ListTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) ListTypesRequest(i0 *appsync.ListTypesInput) (r0 *request.Request, r1 *appsync.ListTypesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTypesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.ListTypesOutput)
	return
}

func (d *AppSyncDouble) ListTypesWithContext(i0 context.Context, i1 *appsync.ListTypesInput, i2 ...request.Option) (r0 *appsync.ListTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTypesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.ListTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeListTypesWithContext(ctx context.Context, in *appsync.ListTypesInput, _ ...request.Option) (*appsync.ListTypesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTypes cancelled", ctx.Err())
	default:
		return d.ListTypes(in)
	}
}

func (d *AppSyncDouble) StartSchemaCreation(i0 *appsync.StartSchemaCreationInput) (r0 *appsync.StartSchemaCreationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartSchemaCreation", i0)
	r0, _ = returns[0].(*appsync.StartSchemaCreationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) StartSchemaCreationRequest(i0 *appsync.StartSchemaCreationInput) (r0 *request.Request, r1 *appsync.StartSchemaCreationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartSchemaCreationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.StartSchemaCreationOutput)
	return
}

func (d *AppSyncDouble) StartSchemaCreationWithContext(i0 context.Context, i1 *appsync.StartSchemaCreationInput, i2 ...request.Option) (r0 *appsync.StartSchemaCreationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartSchemaCreationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.StartSchemaCreationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeStartSchemaCreationWithContext(ctx context.Context, in *appsync.StartSchemaCreationInput, _ ...request.Option) (*appsync.StartSchemaCreationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartSchemaCreation cancelled", ctx.Err())
	default:
		return d.StartSchemaCreation(in)
	}
}

func (d *AppSyncDouble) TagResource(i0 *appsync.TagResourceInput) (r0 *appsync.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*appsync.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) TagResourceRequest(i0 *appsync.TagResourceInput) (r0 *request.Request, r1 *appsync.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.TagResourceOutput)
	return
}

func (d *AppSyncDouble) TagResourceWithContext(i0 context.Context, i1 *appsync.TagResourceInput, i2 ...request.Option) (r0 *appsync.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeTagResourceWithContext(ctx context.Context, in *appsync.TagResourceInput, _ ...request.Option) (*appsync.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *AppSyncDouble) UntagResource(i0 *appsync.UntagResourceInput) (r0 *appsync.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*appsync.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) UntagResourceRequest(i0 *appsync.UntagResourceInput) (r0 *request.Request, r1 *appsync.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.UntagResourceOutput)
	return
}

func (d *AppSyncDouble) UntagResourceWithContext(i0 context.Context, i1 *appsync.UntagResourceInput, i2 ...request.Option) (r0 *appsync.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeUntagResourceWithContext(ctx context.Context, in *appsync.UntagResourceInput, _ ...request.Option) (*appsync.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *AppSyncDouble) UpdateApiCache(i0 *appsync.UpdateApiCacheInput) (r0 *appsync.UpdateApiCacheOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApiCache", i0)
	r0, _ = returns[0].(*appsync.UpdateApiCacheOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) UpdateApiCacheRequest(i0 *appsync.UpdateApiCacheInput) (r0 *request.Request, r1 *appsync.UpdateApiCacheOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApiCacheRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.UpdateApiCacheOutput)
	return
}

func (d *AppSyncDouble) UpdateApiCacheWithContext(i0 context.Context, i1 *appsync.UpdateApiCacheInput, i2 ...request.Option) (r0 *appsync.UpdateApiCacheOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApiCacheWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.UpdateApiCacheOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeUpdateApiCacheWithContext(ctx context.Context, in *appsync.UpdateApiCacheInput, _ ...request.Option) (*appsync.UpdateApiCacheOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateApiCache cancelled", ctx.Err())
	default:
		return d.UpdateApiCache(in)
	}
}

func (d *AppSyncDouble) UpdateApiKey(i0 *appsync.UpdateApiKeyInput) (r0 *appsync.UpdateApiKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApiKey", i0)
	r0, _ = returns[0].(*appsync.UpdateApiKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) UpdateApiKeyRequest(i0 *appsync.UpdateApiKeyInput) (r0 *request.Request, r1 *appsync.UpdateApiKeyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApiKeyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.UpdateApiKeyOutput)
	return
}

func (d *AppSyncDouble) UpdateApiKeyWithContext(i0 context.Context, i1 *appsync.UpdateApiKeyInput, i2 ...request.Option) (r0 *appsync.UpdateApiKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApiKeyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.UpdateApiKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeUpdateApiKeyWithContext(ctx context.Context, in *appsync.UpdateApiKeyInput, _ ...request.Option) (*appsync.UpdateApiKeyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateApiKey cancelled", ctx.Err())
	default:
		return d.UpdateApiKey(in)
	}
}

func (d *AppSyncDouble) UpdateDataSource(i0 *appsync.UpdateDataSourceInput) (r0 *appsync.UpdateDataSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDataSource", i0)
	r0, _ = returns[0].(*appsync.UpdateDataSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) UpdateDataSourceRequest(i0 *appsync.UpdateDataSourceInput) (r0 *request.Request, r1 *appsync.UpdateDataSourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDataSourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.UpdateDataSourceOutput)
	return
}

func (d *AppSyncDouble) UpdateDataSourceWithContext(i0 context.Context, i1 *appsync.UpdateDataSourceInput, i2 ...request.Option) (r0 *appsync.UpdateDataSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDataSourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.UpdateDataSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeUpdateDataSourceWithContext(ctx context.Context, in *appsync.UpdateDataSourceInput, _ ...request.Option) (*appsync.UpdateDataSourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDataSource cancelled", ctx.Err())
	default:
		return d.UpdateDataSource(in)
	}
}

func (d *AppSyncDouble) UpdateFunction(i0 *appsync.UpdateFunctionInput) (r0 *appsync.UpdateFunctionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFunction", i0)
	r0, _ = returns[0].(*appsync.UpdateFunctionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) UpdateFunctionRequest(i0 *appsync.UpdateFunctionInput) (r0 *request.Request, r1 *appsync.UpdateFunctionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFunctionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.UpdateFunctionOutput)
	return
}

func (d *AppSyncDouble) UpdateFunctionWithContext(i0 context.Context, i1 *appsync.UpdateFunctionInput, i2 ...request.Option) (r0 *appsync.UpdateFunctionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFunctionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.UpdateFunctionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeUpdateFunctionWithContext(ctx context.Context, in *appsync.UpdateFunctionInput, _ ...request.Option) (*appsync.UpdateFunctionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateFunction cancelled", ctx.Err())
	default:
		return d.UpdateFunction(in)
	}
}

func (d *AppSyncDouble) UpdateGraphqlApi(i0 *appsync.UpdateGraphqlApiInput) (r0 *appsync.UpdateGraphqlApiOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGraphqlApi", i0)
	r0, _ = returns[0].(*appsync.UpdateGraphqlApiOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) UpdateGraphqlApiRequest(i0 *appsync.UpdateGraphqlApiInput) (r0 *request.Request, r1 *appsync.UpdateGraphqlApiOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGraphqlApiRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.UpdateGraphqlApiOutput)
	return
}

func (d *AppSyncDouble) UpdateGraphqlApiWithContext(i0 context.Context, i1 *appsync.UpdateGraphqlApiInput, i2 ...request.Option) (r0 *appsync.UpdateGraphqlApiOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGraphqlApiWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.UpdateGraphqlApiOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeUpdateGraphqlApiWithContext(ctx context.Context, in *appsync.UpdateGraphqlApiInput, _ ...request.Option) (*appsync.UpdateGraphqlApiOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateGraphqlApi cancelled", ctx.Err())
	default:
		return d.UpdateGraphqlApi(in)
	}
}

func (d *AppSyncDouble) UpdateResolver(i0 *appsync.UpdateResolverInput) (r0 *appsync.UpdateResolverOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateResolver", i0)
	r0, _ = returns[0].(*appsync.UpdateResolverOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) UpdateResolverRequest(i0 *appsync.UpdateResolverInput) (r0 *request.Request, r1 *appsync.UpdateResolverOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateResolverRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.UpdateResolverOutput)
	return
}

func (d *AppSyncDouble) UpdateResolverWithContext(i0 context.Context, i1 *appsync.UpdateResolverInput, i2 ...request.Option) (r0 *appsync.UpdateResolverOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateResolverWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.UpdateResolverOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeUpdateResolverWithContext(ctx context.Context, in *appsync.UpdateResolverInput, _ ...request.Option) (*appsync.UpdateResolverOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateResolver cancelled", ctx.Err())
	default:
		return d.UpdateResolver(in)
	}
}

func (d *AppSyncDouble) UpdateType(i0 *appsync.UpdateTypeInput) (r0 *appsync.UpdateTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateType", i0)
	r0, _ = returns[0].(*appsync.UpdateTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) UpdateTypeRequest(i0 *appsync.UpdateTypeInput) (r0 *request.Request, r1 *appsync.UpdateTypeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTypeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appsync.UpdateTypeOutput)
	return
}

func (d *AppSyncDouble) UpdateTypeWithContext(i0 context.Context, i1 *appsync.UpdateTypeInput, i2 ...request.Option) (r0 *appsync.UpdateTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTypeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appsync.UpdateTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppSyncDouble) fakeUpdateTypeWithContext(ctx context.Context, in *appsync.UpdateTypeInput, _ ...request.Option) (*appsync.UpdateTypeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateType cancelled", ctx.Err())
	default:
		return d.UpdateType(in)
	}
}
