// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:15:04+11:00

// Package sfndouble provides a TestDouble implementation of sfniface.SFNAPI
package sfndouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/sfn"
	"github.com/aws/aws-sdk-go/service/sfn/sfniface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// SFNDouble is TestDouble for sfniface.SFNAPI
type SFNDouble struct {
	sfniface.SFNAPI
	*awsdouble.AWSTestDouble
}

// Constructor for SFNDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *SFNDouble {
	result := &SFNDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*sfniface.SFNAPI)(nil), configurators...)
	return result
}

func (d *SFNDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *SFNDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CreateActivityWithContext":
		return m.Fake(d.fakeCreateActivityWithContext)

	case "CreateStateMachineWithContext":
		return m.Fake(d.fakeCreateStateMachineWithContext)

	case "DeleteActivityWithContext":
		return m.Fake(d.fakeDeleteActivityWithContext)

	case "DeleteStateMachineWithContext":
		return m.Fake(d.fakeDeleteStateMachineWithContext)

	case "DescribeActivityWithContext":
		return m.Fake(d.fakeDescribeActivityWithContext)

	case "DescribeExecutionWithContext":
		return m.Fake(d.fakeDescribeExecutionWithContext)

	case "DescribeStateMachineForExecutionWithContext":
		return m.Fake(d.fakeDescribeStateMachineForExecutionWithContext)

	case "DescribeStateMachineWithContext":
		return m.Fake(d.fakeDescribeStateMachineWithContext)

	case "GetActivityTaskWithContext":
		return m.Fake(d.fakeGetActivityTaskWithContext)

	case "GetExecutionHistoryPages":
		return m.Fake(d.fakeGetExecutionHistoryPages)

	case "GetExecutionHistoryPagesWithContext":
		return m.Fake(d.fakeGetExecutionHistoryPagesWithContext)

	case "GetExecutionHistoryWithContext":
		return m.Fake(d.fakeGetExecutionHistoryWithContext)

	case "ListActivitiesPages":
		return m.Fake(d.fakeListActivitiesPages)

	case "ListActivitiesPagesWithContext":
		return m.Fake(d.fakeListActivitiesPagesWithContext)

	case "ListActivitiesWithContext":
		return m.Fake(d.fakeListActivitiesWithContext)

	case "ListExecutionsPages":
		return m.Fake(d.fakeListExecutionsPages)

	case "ListExecutionsPagesWithContext":
		return m.Fake(d.fakeListExecutionsPagesWithContext)

	case "ListExecutionsWithContext":
		return m.Fake(d.fakeListExecutionsWithContext)

	case "ListStateMachinesPages":
		return m.Fake(d.fakeListStateMachinesPages)

	case "ListStateMachinesPagesWithContext":
		return m.Fake(d.fakeListStateMachinesPagesWithContext)

	case "ListStateMachinesWithContext":
		return m.Fake(d.fakeListStateMachinesWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "SendTaskFailureWithContext":
		return m.Fake(d.fakeSendTaskFailureWithContext)

	case "SendTaskHeartbeatWithContext":
		return m.Fake(d.fakeSendTaskHeartbeatWithContext)

	case "SendTaskSuccessWithContext":
		return m.Fake(d.fakeSendTaskSuccessWithContext)

	case "StartExecutionWithContext":
		return m.Fake(d.fakeStartExecutionWithContext)

	case "StopExecutionWithContext":
		return m.Fake(d.fakeStopExecutionWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateStateMachineWithContext":
		return m.Fake(d.fakeUpdateStateMachineWithContext)

	default:
		return nil
	}
}

func (d *SFNDouble) CreateActivity(i0 *sfn.CreateActivityInput) (r0 *sfn.CreateActivityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateActivity", i0)
	r0, _ = returns[0].(*sfn.CreateActivityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) CreateActivityRequest(i0 *sfn.CreateActivityInput) (r0 *request.Request, r1 *sfn.CreateActivityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateActivityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sfn.CreateActivityOutput)
	return
}

func (d *SFNDouble) CreateActivityWithContext(i0 context.Context, i1 *sfn.CreateActivityInput, i2 ...request.Option) (r0 *sfn.CreateActivityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateActivityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sfn.CreateActivityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) fakeCreateActivityWithContext(ctx context.Context, in *sfn.CreateActivityInput, _ ...request.Option) (*sfn.CreateActivityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateActivity cancelled", ctx.Err())
	default:
		return d.CreateActivity(in)
	}
}

func (d *SFNDouble) CreateStateMachine(i0 *sfn.CreateStateMachineInput) (r0 *sfn.CreateStateMachineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStateMachine", i0)
	r0, _ = returns[0].(*sfn.CreateStateMachineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) CreateStateMachineRequest(i0 *sfn.CreateStateMachineInput) (r0 *request.Request, r1 *sfn.CreateStateMachineOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStateMachineRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sfn.CreateStateMachineOutput)
	return
}

func (d *SFNDouble) CreateStateMachineWithContext(i0 context.Context, i1 *sfn.CreateStateMachineInput, i2 ...request.Option) (r0 *sfn.CreateStateMachineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStateMachineWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sfn.CreateStateMachineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) fakeCreateStateMachineWithContext(ctx context.Context, in *sfn.CreateStateMachineInput, _ ...request.Option) (*sfn.CreateStateMachineOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateStateMachine cancelled", ctx.Err())
	default:
		return d.CreateStateMachine(in)
	}
}

func (d *SFNDouble) DeleteActivity(i0 *sfn.DeleteActivityInput) (r0 *sfn.DeleteActivityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteActivity", i0)
	r0, _ = returns[0].(*sfn.DeleteActivityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) DeleteActivityRequest(i0 *sfn.DeleteActivityInput) (r0 *request.Request, r1 *sfn.DeleteActivityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteActivityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sfn.DeleteActivityOutput)
	return
}

func (d *SFNDouble) DeleteActivityWithContext(i0 context.Context, i1 *sfn.DeleteActivityInput, i2 ...request.Option) (r0 *sfn.DeleteActivityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteActivityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sfn.DeleteActivityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) fakeDeleteActivityWithContext(ctx context.Context, in *sfn.DeleteActivityInput, _ ...request.Option) (*sfn.DeleteActivityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteActivity cancelled", ctx.Err())
	default:
		return d.DeleteActivity(in)
	}
}

func (d *SFNDouble) DeleteStateMachine(i0 *sfn.DeleteStateMachineInput) (r0 *sfn.DeleteStateMachineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteStateMachine", i0)
	r0, _ = returns[0].(*sfn.DeleteStateMachineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) DeleteStateMachineRequest(i0 *sfn.DeleteStateMachineInput) (r0 *request.Request, r1 *sfn.DeleteStateMachineOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteStateMachineRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sfn.DeleteStateMachineOutput)
	return
}

func (d *SFNDouble) DeleteStateMachineWithContext(i0 context.Context, i1 *sfn.DeleteStateMachineInput, i2 ...request.Option) (r0 *sfn.DeleteStateMachineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteStateMachineWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sfn.DeleteStateMachineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) fakeDeleteStateMachineWithContext(ctx context.Context, in *sfn.DeleteStateMachineInput, _ ...request.Option) (*sfn.DeleteStateMachineOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteStateMachine cancelled", ctx.Err())
	default:
		return d.DeleteStateMachine(in)
	}
}

func (d *SFNDouble) DescribeActivity(i0 *sfn.DescribeActivityInput) (r0 *sfn.DescribeActivityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeActivity", i0)
	r0, _ = returns[0].(*sfn.DescribeActivityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) DescribeActivityRequest(i0 *sfn.DescribeActivityInput) (r0 *request.Request, r1 *sfn.DescribeActivityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeActivityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sfn.DescribeActivityOutput)
	return
}

func (d *SFNDouble) DescribeActivityWithContext(i0 context.Context, i1 *sfn.DescribeActivityInput, i2 ...request.Option) (r0 *sfn.DescribeActivityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeActivityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sfn.DescribeActivityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) fakeDescribeActivityWithContext(ctx context.Context, in *sfn.DescribeActivityInput, _ ...request.Option) (*sfn.DescribeActivityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeActivity cancelled", ctx.Err())
	default:
		return d.DescribeActivity(in)
	}
}

func (d *SFNDouble) DescribeExecution(i0 *sfn.DescribeExecutionInput) (r0 *sfn.DescribeExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeExecution", i0)
	r0, _ = returns[0].(*sfn.DescribeExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) DescribeExecutionRequest(i0 *sfn.DescribeExecutionInput) (r0 *request.Request, r1 *sfn.DescribeExecutionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeExecutionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sfn.DescribeExecutionOutput)
	return
}

func (d *SFNDouble) DescribeExecutionWithContext(i0 context.Context, i1 *sfn.DescribeExecutionInput, i2 ...request.Option) (r0 *sfn.DescribeExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeExecutionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sfn.DescribeExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) fakeDescribeExecutionWithContext(ctx context.Context, in *sfn.DescribeExecutionInput, _ ...request.Option) (*sfn.DescribeExecutionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeExecution cancelled", ctx.Err())
	default:
		return d.DescribeExecution(in)
	}
}

func (d *SFNDouble) DescribeStateMachine(i0 *sfn.DescribeStateMachineInput) (r0 *sfn.DescribeStateMachineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStateMachine", i0)
	r0, _ = returns[0].(*sfn.DescribeStateMachineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) DescribeStateMachineForExecution(i0 *sfn.DescribeStateMachineForExecutionInput) (r0 *sfn.DescribeStateMachineForExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStateMachineForExecution", i0)
	r0, _ = returns[0].(*sfn.DescribeStateMachineForExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) DescribeStateMachineForExecutionRequest(i0 *sfn.DescribeStateMachineForExecutionInput) (r0 *request.Request, r1 *sfn.DescribeStateMachineForExecutionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStateMachineForExecutionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sfn.DescribeStateMachineForExecutionOutput)
	return
}

func (d *SFNDouble) DescribeStateMachineForExecutionWithContext(i0 context.Context, i1 *sfn.DescribeStateMachineForExecutionInput, i2 ...request.Option) (r0 *sfn.DescribeStateMachineForExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStateMachineForExecutionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sfn.DescribeStateMachineForExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) fakeDescribeStateMachineForExecutionWithContext(ctx context.Context, in *sfn.DescribeStateMachineForExecutionInput, _ ...request.Option) (*sfn.DescribeStateMachineForExecutionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeStateMachineForExecution cancelled", ctx.Err())
	default:
		return d.DescribeStateMachineForExecution(in)
	}
}

func (d *SFNDouble) DescribeStateMachineRequest(i0 *sfn.DescribeStateMachineInput) (r0 *request.Request, r1 *sfn.DescribeStateMachineOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStateMachineRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sfn.DescribeStateMachineOutput)
	return
}

func (d *SFNDouble) DescribeStateMachineWithContext(i0 context.Context, i1 *sfn.DescribeStateMachineInput, i2 ...request.Option) (r0 *sfn.DescribeStateMachineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStateMachineWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sfn.DescribeStateMachineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) fakeDescribeStateMachineWithContext(ctx context.Context, in *sfn.DescribeStateMachineInput, _ ...request.Option) (*sfn.DescribeStateMachineOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeStateMachine cancelled", ctx.Err())
	default:
		return d.DescribeStateMachine(in)
	}
}

func (d *SFNDouble) GetActivityTask(i0 *sfn.GetActivityTaskInput) (r0 *sfn.GetActivityTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetActivityTask", i0)
	r0, _ = returns[0].(*sfn.GetActivityTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) GetActivityTaskRequest(i0 *sfn.GetActivityTaskInput) (r0 *request.Request, r1 *sfn.GetActivityTaskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetActivityTaskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sfn.GetActivityTaskOutput)
	return
}

func (d *SFNDouble) GetActivityTaskWithContext(i0 context.Context, i1 *sfn.GetActivityTaskInput, i2 ...request.Option) (r0 *sfn.GetActivityTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetActivityTaskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sfn.GetActivityTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) fakeGetActivityTaskWithContext(ctx context.Context, in *sfn.GetActivityTaskInput, _ ...request.Option) (*sfn.GetActivityTaskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetActivityTask cancelled", ctx.Err())
	default:
		return d.GetActivityTask(in)
	}
}

func (d *SFNDouble) GetExecutionHistory(i0 *sfn.GetExecutionHistoryInput) (r0 *sfn.GetExecutionHistoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetExecutionHistory", i0)
	r0, _ = returns[0].(*sfn.GetExecutionHistoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) GetExecutionHistoryPages(i0 *sfn.GetExecutionHistoryInput, i1 func(*sfn.GetExecutionHistoryOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetExecutionHistoryPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SFNDouble) fakeGetExecutionHistoryPages(in *sfn.GetExecutionHistoryInput, pager func(*sfn.GetExecutionHistoryOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetExecutionHistory", paginators, in, pager)
}

func (d *SFNDouble) GetExecutionHistoryPagesWithContext(i0 context.Context, i1 *sfn.GetExecutionHistoryInput, i2 func(*sfn.GetExecutionHistoryOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetExecutionHistoryPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SFNDouble) fakeGetExecutionHistoryPagesWithContext(ctx context.Context, in *sfn.GetExecutionHistoryInput, pager func(*sfn.GetExecutionHistoryOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetExecutionHistory", paginators, ctx, in, pager, options...)
}

func (d *SFNDouble) GetExecutionHistoryRequest(i0 *sfn.GetExecutionHistoryInput) (r0 *request.Request, r1 *sfn.GetExecutionHistoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetExecutionHistoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sfn.GetExecutionHistoryOutput)
	return
}

func (d *SFNDouble) GetExecutionHistoryWithContext(i0 context.Context, i1 *sfn.GetExecutionHistoryInput, i2 ...request.Option) (r0 *sfn.GetExecutionHistoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetExecutionHistoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sfn.GetExecutionHistoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) fakeGetExecutionHistoryWithContext(ctx context.Context, in *sfn.GetExecutionHistoryInput, _ ...request.Option) (*sfn.GetExecutionHistoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetExecutionHistory cancelled", ctx.Err())
	default:
		return d.GetExecutionHistory(in)
	}
}

func (d *SFNDouble) ListActivities(i0 *sfn.ListActivitiesInput) (r0 *sfn.ListActivitiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListActivities", i0)
	r0, _ = returns[0].(*sfn.ListActivitiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) ListActivitiesPages(i0 *sfn.ListActivitiesInput, i1 func(*sfn.ListActivitiesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListActivitiesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SFNDouble) fakeListActivitiesPages(in *sfn.ListActivitiesInput, pager func(*sfn.ListActivitiesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListActivities", paginators, in, pager)
}

func (d *SFNDouble) ListActivitiesPagesWithContext(i0 context.Context, i1 *sfn.ListActivitiesInput, i2 func(*sfn.ListActivitiesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListActivitiesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SFNDouble) fakeListActivitiesPagesWithContext(ctx context.Context, in *sfn.ListActivitiesInput, pager func(*sfn.ListActivitiesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListActivities", paginators, ctx, in, pager, options...)
}

func (d *SFNDouble) ListActivitiesRequest(i0 *sfn.ListActivitiesInput) (r0 *request.Request, r1 *sfn.ListActivitiesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListActivitiesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sfn.ListActivitiesOutput)
	return
}

func (d *SFNDouble) ListActivitiesWithContext(i0 context.Context, i1 *sfn.ListActivitiesInput, i2 ...request.Option) (r0 *sfn.ListActivitiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListActivitiesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sfn.ListActivitiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) fakeListActivitiesWithContext(ctx context.Context, in *sfn.ListActivitiesInput, _ ...request.Option) (*sfn.ListActivitiesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListActivities cancelled", ctx.Err())
	default:
		return d.ListActivities(in)
	}
}

func (d *SFNDouble) ListExecutions(i0 *sfn.ListExecutionsInput) (r0 *sfn.ListExecutionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListExecutions", i0)
	r0, _ = returns[0].(*sfn.ListExecutionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) ListExecutionsPages(i0 *sfn.ListExecutionsInput, i1 func(*sfn.ListExecutionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListExecutionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SFNDouble) fakeListExecutionsPages(in *sfn.ListExecutionsInput, pager func(*sfn.ListExecutionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListExecutions", paginators, in, pager)
}

func (d *SFNDouble) ListExecutionsPagesWithContext(i0 context.Context, i1 *sfn.ListExecutionsInput, i2 func(*sfn.ListExecutionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListExecutionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SFNDouble) fakeListExecutionsPagesWithContext(ctx context.Context, in *sfn.ListExecutionsInput, pager func(*sfn.ListExecutionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListExecutions", paginators, ctx, in, pager, options...)
}

func (d *SFNDouble) ListExecutionsRequest(i0 *sfn.ListExecutionsInput) (r0 *request.Request, r1 *sfn.ListExecutionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListExecutionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sfn.ListExecutionsOutput)
	return
}

func (d *SFNDouble) ListExecutionsWithContext(i0 context.Context, i1 *sfn.ListExecutionsInput, i2 ...request.Option) (r0 *sfn.ListExecutionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListExecutionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sfn.ListExecutionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) fakeListExecutionsWithContext(ctx context.Context, in *sfn.ListExecutionsInput, _ ...request.Option) (*sfn.ListExecutionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListExecutions cancelled", ctx.Err())
	default:
		return d.ListExecutions(in)
	}
}

func (d *SFNDouble) ListStateMachines(i0 *sfn.ListStateMachinesInput) (r0 *sfn.ListStateMachinesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStateMachines", i0)
	r0, _ = returns[0].(*sfn.ListStateMachinesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) ListStateMachinesPages(i0 *sfn.ListStateMachinesInput, i1 func(*sfn.ListStateMachinesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStateMachinesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SFNDouble) fakeListStateMachinesPages(in *sfn.ListStateMachinesInput, pager func(*sfn.ListStateMachinesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListStateMachines", paginators, in, pager)
}

func (d *SFNDouble) ListStateMachinesPagesWithContext(i0 context.Context, i1 *sfn.ListStateMachinesInput, i2 func(*sfn.ListStateMachinesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStateMachinesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SFNDouble) fakeListStateMachinesPagesWithContext(ctx context.Context, in *sfn.ListStateMachinesInput, pager func(*sfn.ListStateMachinesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListStateMachines", paginators, ctx, in, pager, options...)
}

func (d *SFNDouble) ListStateMachinesRequest(i0 *sfn.ListStateMachinesInput) (r0 *request.Request, r1 *sfn.ListStateMachinesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStateMachinesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sfn.ListStateMachinesOutput)
	return
}

func (d *SFNDouble) ListStateMachinesWithContext(i0 context.Context, i1 *sfn.ListStateMachinesInput, i2 ...request.Option) (r0 *sfn.ListStateMachinesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStateMachinesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sfn.ListStateMachinesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) fakeListStateMachinesWithContext(ctx context.Context, in *sfn.ListStateMachinesInput, _ ...request.Option) (*sfn.ListStateMachinesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListStateMachines cancelled", ctx.Err())
	default:
		return d.ListStateMachines(in)
	}
}

func (d *SFNDouble) ListTagsForResource(i0 *sfn.ListTagsForResourceInput) (r0 *sfn.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*sfn.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) ListTagsForResourceRequest(i0 *sfn.ListTagsForResourceInput) (r0 *request.Request, r1 *sfn.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sfn.ListTagsForResourceOutput)
	return
}

func (d *SFNDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *sfn.ListTagsForResourceInput, i2 ...request.Option) (r0 *sfn.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sfn.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *sfn.ListTagsForResourceInput, _ ...request.Option) (*sfn.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *SFNDouble) SendTaskFailure(i0 *sfn.SendTaskFailureInput) (r0 *sfn.SendTaskFailureOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendTaskFailure", i0)
	r0, _ = returns[0].(*sfn.SendTaskFailureOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) SendTaskFailureRequest(i0 *sfn.SendTaskFailureInput) (r0 *request.Request, r1 *sfn.SendTaskFailureOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendTaskFailureRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sfn.SendTaskFailureOutput)
	return
}

func (d *SFNDouble) SendTaskFailureWithContext(i0 context.Context, i1 *sfn.SendTaskFailureInput, i2 ...request.Option) (r0 *sfn.SendTaskFailureOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendTaskFailureWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sfn.SendTaskFailureOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) fakeSendTaskFailureWithContext(ctx context.Context, in *sfn.SendTaskFailureInput, _ ...request.Option) (*sfn.SendTaskFailureOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SendTaskFailure cancelled", ctx.Err())
	default:
		return d.SendTaskFailure(in)
	}
}

func (d *SFNDouble) SendTaskHeartbeat(i0 *sfn.SendTaskHeartbeatInput) (r0 *sfn.SendTaskHeartbeatOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendTaskHeartbeat", i0)
	r0, _ = returns[0].(*sfn.SendTaskHeartbeatOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) SendTaskHeartbeatRequest(i0 *sfn.SendTaskHeartbeatInput) (r0 *request.Request, r1 *sfn.SendTaskHeartbeatOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendTaskHeartbeatRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sfn.SendTaskHeartbeatOutput)
	return
}

func (d *SFNDouble) SendTaskHeartbeatWithContext(i0 context.Context, i1 *sfn.SendTaskHeartbeatInput, i2 ...request.Option) (r0 *sfn.SendTaskHeartbeatOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendTaskHeartbeatWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sfn.SendTaskHeartbeatOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) fakeSendTaskHeartbeatWithContext(ctx context.Context, in *sfn.SendTaskHeartbeatInput, _ ...request.Option) (*sfn.SendTaskHeartbeatOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SendTaskHeartbeat cancelled", ctx.Err())
	default:
		return d.SendTaskHeartbeat(in)
	}
}

func (d *SFNDouble) SendTaskSuccess(i0 *sfn.SendTaskSuccessInput) (r0 *sfn.SendTaskSuccessOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendTaskSuccess", i0)
	r0, _ = returns[0].(*sfn.SendTaskSuccessOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) SendTaskSuccessRequest(i0 *sfn.SendTaskSuccessInput) (r0 *request.Request, r1 *sfn.SendTaskSuccessOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendTaskSuccessRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sfn.SendTaskSuccessOutput)
	return
}

func (d *SFNDouble) SendTaskSuccessWithContext(i0 context.Context, i1 *sfn.SendTaskSuccessInput, i2 ...request.Option) (r0 *sfn.SendTaskSuccessOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendTaskSuccessWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sfn.SendTaskSuccessOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) fakeSendTaskSuccessWithContext(ctx context.Context, in *sfn.SendTaskSuccessInput, _ ...request.Option) (*sfn.SendTaskSuccessOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SendTaskSuccess cancelled", ctx.Err())
	default:
		return d.SendTaskSuccess(in)
	}
}

func (d *SFNDouble) StartExecution(i0 *sfn.StartExecutionInput) (r0 *sfn.StartExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartExecution", i0)
	r0, _ = returns[0].(*sfn.StartExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) StartExecutionRequest(i0 *sfn.StartExecutionInput) (r0 *request.Request, r1 *sfn.StartExecutionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartExecutionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sfn.StartExecutionOutput)
	return
}

func (d *SFNDouble) StartExecutionWithContext(i0 context.Context, i1 *sfn.StartExecutionInput, i2 ...request.Option) (r0 *sfn.StartExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartExecutionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sfn.StartExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) fakeStartExecutionWithContext(ctx context.Context, in *sfn.StartExecutionInput, _ ...request.Option) (*sfn.StartExecutionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartExecution cancelled", ctx.Err())
	default:
		return d.StartExecution(in)
	}
}

func (d *SFNDouble) StopExecution(i0 *sfn.StopExecutionInput) (r0 *sfn.StopExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopExecution", i0)
	r0, _ = returns[0].(*sfn.StopExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) StopExecutionRequest(i0 *sfn.StopExecutionInput) (r0 *request.Request, r1 *sfn.StopExecutionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopExecutionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sfn.StopExecutionOutput)
	return
}

func (d *SFNDouble) StopExecutionWithContext(i0 context.Context, i1 *sfn.StopExecutionInput, i2 ...request.Option) (r0 *sfn.StopExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopExecutionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sfn.StopExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) fakeStopExecutionWithContext(ctx context.Context, in *sfn.StopExecutionInput, _ ...request.Option) (*sfn.StopExecutionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopExecution cancelled", ctx.Err())
	default:
		return d.StopExecution(in)
	}
}

func (d *SFNDouble) TagResource(i0 *sfn.TagResourceInput) (r0 *sfn.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*sfn.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) TagResourceRequest(i0 *sfn.TagResourceInput) (r0 *request.Request, r1 *sfn.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sfn.TagResourceOutput)
	return
}

func (d *SFNDouble) TagResourceWithContext(i0 context.Context, i1 *sfn.TagResourceInput, i2 ...request.Option) (r0 *sfn.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sfn.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) fakeTagResourceWithContext(ctx context.Context, in *sfn.TagResourceInput, _ ...request.Option) (*sfn.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *SFNDouble) UntagResource(i0 *sfn.UntagResourceInput) (r0 *sfn.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*sfn.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) UntagResourceRequest(i0 *sfn.UntagResourceInput) (r0 *request.Request, r1 *sfn.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sfn.UntagResourceOutput)
	return
}

func (d *SFNDouble) UntagResourceWithContext(i0 context.Context, i1 *sfn.UntagResourceInput, i2 ...request.Option) (r0 *sfn.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sfn.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) fakeUntagResourceWithContext(ctx context.Context, in *sfn.UntagResourceInput, _ ...request.Option) (*sfn.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *SFNDouble) UpdateStateMachine(i0 *sfn.UpdateStateMachineInput) (r0 *sfn.UpdateStateMachineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateStateMachine", i0)
	r0, _ = returns[0].(*sfn.UpdateStateMachineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) UpdateStateMachineRequest(i0 *sfn.UpdateStateMachineInput) (r0 *request.Request, r1 *sfn.UpdateStateMachineOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateStateMachineRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sfn.UpdateStateMachineOutput)
	return
}

func (d *SFNDouble) UpdateStateMachineWithContext(i0 context.Context, i1 *sfn.UpdateStateMachineInput, i2 ...request.Option) (r0 *sfn.UpdateStateMachineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateStateMachineWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sfn.UpdateStateMachineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SFNDouble) fakeUpdateStateMachineWithContext(ctx context.Context, in *sfn.UpdateStateMachineInput, _ ...request.Option) (*sfn.UpdateStateMachineOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateStateMachine cancelled", ctx.Err())
	default:
		return d.UpdateStateMachine(in)
	}
}
