// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:13:27+11:00

// Package kinesisanalyticsv2double provides a TestDouble implementation of kinesisanalyticsv2iface.KinesisAnalyticsV2API
package kinesisanalyticsv2double

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/kinesisanalyticsv2"
	"github.com/aws/aws-sdk-go/service/kinesisanalyticsv2/kinesisanalyticsv2iface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// KinesisAnalyticsV2Double is TestDouble for kinesisanalyticsv2iface.KinesisAnalyticsV2API
type KinesisAnalyticsV2Double struct {
	kinesisanalyticsv2iface.KinesisAnalyticsV2API
	*awsdouble.AWSTestDouble
}

// Constructor for KinesisAnalyticsV2Double
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *KinesisAnalyticsV2Double {
	result := &KinesisAnalyticsV2Double{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*kinesisanalyticsv2iface.KinesisAnalyticsV2API)(nil), configurators...)
	return result
}

func (d *KinesisAnalyticsV2Double) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *KinesisAnalyticsV2Double) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AddApplicationCloudWatchLoggingOptionWithContext":
		return m.Fake(d.fakeAddApplicationCloudWatchLoggingOptionWithContext)

	case "AddApplicationInputProcessingConfigurationWithContext":
		return m.Fake(d.fakeAddApplicationInputProcessingConfigurationWithContext)

	case "AddApplicationInputWithContext":
		return m.Fake(d.fakeAddApplicationInputWithContext)

	case "AddApplicationOutputWithContext":
		return m.Fake(d.fakeAddApplicationOutputWithContext)

	case "AddApplicationReferenceDataSourceWithContext":
		return m.Fake(d.fakeAddApplicationReferenceDataSourceWithContext)

	case "AddApplicationVpcConfigurationWithContext":
		return m.Fake(d.fakeAddApplicationVpcConfigurationWithContext)

	case "CreateApplicationSnapshotWithContext":
		return m.Fake(d.fakeCreateApplicationSnapshotWithContext)

	case "CreateApplicationWithContext":
		return m.Fake(d.fakeCreateApplicationWithContext)

	case "DeleteApplicationCloudWatchLoggingOptionWithContext":
		return m.Fake(d.fakeDeleteApplicationCloudWatchLoggingOptionWithContext)

	case "DeleteApplicationInputProcessingConfigurationWithContext":
		return m.Fake(d.fakeDeleteApplicationInputProcessingConfigurationWithContext)

	case "DeleteApplicationOutputWithContext":
		return m.Fake(d.fakeDeleteApplicationOutputWithContext)

	case "DeleteApplicationReferenceDataSourceWithContext":
		return m.Fake(d.fakeDeleteApplicationReferenceDataSourceWithContext)

	case "DeleteApplicationSnapshotWithContext":
		return m.Fake(d.fakeDeleteApplicationSnapshotWithContext)

	case "DeleteApplicationVpcConfigurationWithContext":
		return m.Fake(d.fakeDeleteApplicationVpcConfigurationWithContext)

	case "DeleteApplicationWithContext":
		return m.Fake(d.fakeDeleteApplicationWithContext)

	case "DescribeApplicationSnapshotWithContext":
		return m.Fake(d.fakeDescribeApplicationSnapshotWithContext)

	case "DescribeApplicationWithContext":
		return m.Fake(d.fakeDescribeApplicationWithContext)

	case "DiscoverInputSchemaWithContext":
		return m.Fake(d.fakeDiscoverInputSchemaWithContext)

	case "ListApplicationSnapshotsWithContext":
		return m.Fake(d.fakeListApplicationSnapshotsWithContext)

	case "ListApplicationsWithContext":
		return m.Fake(d.fakeListApplicationsWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "StartApplicationWithContext":
		return m.Fake(d.fakeStartApplicationWithContext)

	case "StopApplicationWithContext":
		return m.Fake(d.fakeStopApplicationWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateApplicationWithContext":
		return m.Fake(d.fakeUpdateApplicationWithContext)

	default:
		return nil
	}
}

func (d *KinesisAnalyticsV2Double) AddApplicationCloudWatchLoggingOption(i0 *kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionInput) (r0 *kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddApplicationCloudWatchLoggingOption", i0)
	r0, _ = returns[0].(*kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) AddApplicationCloudWatchLoggingOptionRequest(i0 *kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionInput) (r0 *request.Request, r1 *kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddApplicationCloudWatchLoggingOptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionOutput)
	return
}

func (d *KinesisAnalyticsV2Double) AddApplicationCloudWatchLoggingOptionWithContext(i0 context.Context, i1 *kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionInput, i2 ...request.Option) (r0 *kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddApplicationCloudWatchLoggingOptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) fakeAddApplicationCloudWatchLoggingOptionWithContext(ctx context.Context, in *kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionInput, _ ...request.Option) (*kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddApplicationCloudWatchLoggingOption cancelled", ctx.Err())
	default:
		return d.AddApplicationCloudWatchLoggingOption(in)
	}
}

func (d *KinesisAnalyticsV2Double) AddApplicationInput(i0 *kinesisanalyticsv2.AddApplicationInputInput) (r0 *kinesisanalyticsv2.AddApplicationInputOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddApplicationInput", i0)
	r0, _ = returns[0].(*kinesisanalyticsv2.AddApplicationInputOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) AddApplicationInputProcessingConfiguration(i0 *kinesisanalyticsv2.AddApplicationInputProcessingConfigurationInput) (r0 *kinesisanalyticsv2.AddApplicationInputProcessingConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddApplicationInputProcessingConfiguration", i0)
	r0, _ = returns[0].(*kinesisanalyticsv2.AddApplicationInputProcessingConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) AddApplicationInputProcessingConfigurationRequest(i0 *kinesisanalyticsv2.AddApplicationInputProcessingConfigurationInput) (r0 *request.Request, r1 *kinesisanalyticsv2.AddApplicationInputProcessingConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddApplicationInputProcessingConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisanalyticsv2.AddApplicationInputProcessingConfigurationOutput)
	return
}

func (d *KinesisAnalyticsV2Double) AddApplicationInputProcessingConfigurationWithContext(i0 context.Context, i1 *kinesisanalyticsv2.AddApplicationInputProcessingConfigurationInput, i2 ...request.Option) (r0 *kinesisanalyticsv2.AddApplicationInputProcessingConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddApplicationInputProcessingConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisanalyticsv2.AddApplicationInputProcessingConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) fakeAddApplicationInputProcessingConfigurationWithContext(ctx context.Context, in *kinesisanalyticsv2.AddApplicationInputProcessingConfigurationInput, _ ...request.Option) (*kinesisanalyticsv2.AddApplicationInputProcessingConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddApplicationInputProcessingConfiguration cancelled", ctx.Err())
	default:
		return d.AddApplicationInputProcessingConfiguration(in)
	}
}

func (d *KinesisAnalyticsV2Double) AddApplicationInputRequest(i0 *kinesisanalyticsv2.AddApplicationInputInput) (r0 *request.Request, r1 *kinesisanalyticsv2.AddApplicationInputOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddApplicationInputRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisanalyticsv2.AddApplicationInputOutput)
	return
}

func (d *KinesisAnalyticsV2Double) AddApplicationInputWithContext(i0 context.Context, i1 *kinesisanalyticsv2.AddApplicationInputInput, i2 ...request.Option) (r0 *kinesisanalyticsv2.AddApplicationInputOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddApplicationInputWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisanalyticsv2.AddApplicationInputOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) fakeAddApplicationInputWithContext(ctx context.Context, in *kinesisanalyticsv2.AddApplicationInputInput, _ ...request.Option) (*kinesisanalyticsv2.AddApplicationInputOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddApplicationInput cancelled", ctx.Err())
	default:
		return d.AddApplicationInput(in)
	}
}

func (d *KinesisAnalyticsV2Double) AddApplicationOutput(i0 *kinesisanalyticsv2.AddApplicationOutputInput) (r0 *kinesisanalyticsv2.AddApplicationOutputOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddApplicationOutput", i0)
	r0, _ = returns[0].(*kinesisanalyticsv2.AddApplicationOutputOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) AddApplicationOutputRequest(i0 *kinesisanalyticsv2.AddApplicationOutputInput) (r0 *request.Request, r1 *kinesisanalyticsv2.AddApplicationOutputOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddApplicationOutputRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisanalyticsv2.AddApplicationOutputOutput)
	return
}

func (d *KinesisAnalyticsV2Double) AddApplicationOutputWithContext(i0 context.Context, i1 *kinesisanalyticsv2.AddApplicationOutputInput, i2 ...request.Option) (r0 *kinesisanalyticsv2.AddApplicationOutputOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddApplicationOutputWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisanalyticsv2.AddApplicationOutputOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) fakeAddApplicationOutputWithContext(ctx context.Context, in *kinesisanalyticsv2.AddApplicationOutputInput, _ ...request.Option) (*kinesisanalyticsv2.AddApplicationOutputOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddApplicationOutput cancelled", ctx.Err())
	default:
		return d.AddApplicationOutput(in)
	}
}

func (d *KinesisAnalyticsV2Double) AddApplicationReferenceDataSource(i0 *kinesisanalyticsv2.AddApplicationReferenceDataSourceInput) (r0 *kinesisanalyticsv2.AddApplicationReferenceDataSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddApplicationReferenceDataSource", i0)
	r0, _ = returns[0].(*kinesisanalyticsv2.AddApplicationReferenceDataSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) AddApplicationReferenceDataSourceRequest(i0 *kinesisanalyticsv2.AddApplicationReferenceDataSourceInput) (r0 *request.Request, r1 *kinesisanalyticsv2.AddApplicationReferenceDataSourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddApplicationReferenceDataSourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisanalyticsv2.AddApplicationReferenceDataSourceOutput)
	return
}

func (d *KinesisAnalyticsV2Double) AddApplicationReferenceDataSourceWithContext(i0 context.Context, i1 *kinesisanalyticsv2.AddApplicationReferenceDataSourceInput, i2 ...request.Option) (r0 *kinesisanalyticsv2.AddApplicationReferenceDataSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddApplicationReferenceDataSourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisanalyticsv2.AddApplicationReferenceDataSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) fakeAddApplicationReferenceDataSourceWithContext(ctx context.Context, in *kinesisanalyticsv2.AddApplicationReferenceDataSourceInput, _ ...request.Option) (*kinesisanalyticsv2.AddApplicationReferenceDataSourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddApplicationReferenceDataSource cancelled", ctx.Err())
	default:
		return d.AddApplicationReferenceDataSource(in)
	}
}

func (d *KinesisAnalyticsV2Double) AddApplicationVpcConfiguration(i0 *kinesisanalyticsv2.AddApplicationVpcConfigurationInput) (r0 *kinesisanalyticsv2.AddApplicationVpcConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddApplicationVpcConfiguration", i0)
	r0, _ = returns[0].(*kinesisanalyticsv2.AddApplicationVpcConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) AddApplicationVpcConfigurationRequest(i0 *kinesisanalyticsv2.AddApplicationVpcConfigurationInput) (r0 *request.Request, r1 *kinesisanalyticsv2.AddApplicationVpcConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddApplicationVpcConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisanalyticsv2.AddApplicationVpcConfigurationOutput)
	return
}

func (d *KinesisAnalyticsV2Double) AddApplicationVpcConfigurationWithContext(i0 context.Context, i1 *kinesisanalyticsv2.AddApplicationVpcConfigurationInput, i2 ...request.Option) (r0 *kinesisanalyticsv2.AddApplicationVpcConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddApplicationVpcConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisanalyticsv2.AddApplicationVpcConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) fakeAddApplicationVpcConfigurationWithContext(ctx context.Context, in *kinesisanalyticsv2.AddApplicationVpcConfigurationInput, _ ...request.Option) (*kinesisanalyticsv2.AddApplicationVpcConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddApplicationVpcConfiguration cancelled", ctx.Err())
	default:
		return d.AddApplicationVpcConfiguration(in)
	}
}

func (d *KinesisAnalyticsV2Double) CreateApplication(i0 *kinesisanalyticsv2.CreateApplicationInput) (r0 *kinesisanalyticsv2.CreateApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApplication", i0)
	r0, _ = returns[0].(*kinesisanalyticsv2.CreateApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) CreateApplicationRequest(i0 *kinesisanalyticsv2.CreateApplicationInput) (r0 *request.Request, r1 *kinesisanalyticsv2.CreateApplicationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApplicationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisanalyticsv2.CreateApplicationOutput)
	return
}

func (d *KinesisAnalyticsV2Double) CreateApplicationSnapshot(i0 *kinesisanalyticsv2.CreateApplicationSnapshotInput) (r0 *kinesisanalyticsv2.CreateApplicationSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApplicationSnapshot", i0)
	r0, _ = returns[0].(*kinesisanalyticsv2.CreateApplicationSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) CreateApplicationSnapshotRequest(i0 *kinesisanalyticsv2.CreateApplicationSnapshotInput) (r0 *request.Request, r1 *kinesisanalyticsv2.CreateApplicationSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApplicationSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisanalyticsv2.CreateApplicationSnapshotOutput)
	return
}

func (d *KinesisAnalyticsV2Double) CreateApplicationSnapshotWithContext(i0 context.Context, i1 *kinesisanalyticsv2.CreateApplicationSnapshotInput, i2 ...request.Option) (r0 *kinesisanalyticsv2.CreateApplicationSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApplicationSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisanalyticsv2.CreateApplicationSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) fakeCreateApplicationSnapshotWithContext(ctx context.Context, in *kinesisanalyticsv2.CreateApplicationSnapshotInput, _ ...request.Option) (*kinesisanalyticsv2.CreateApplicationSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateApplicationSnapshot cancelled", ctx.Err())
	default:
		return d.CreateApplicationSnapshot(in)
	}
}

func (d *KinesisAnalyticsV2Double) CreateApplicationWithContext(i0 context.Context, i1 *kinesisanalyticsv2.CreateApplicationInput, i2 ...request.Option) (r0 *kinesisanalyticsv2.CreateApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApplicationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisanalyticsv2.CreateApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) fakeCreateApplicationWithContext(ctx context.Context, in *kinesisanalyticsv2.CreateApplicationInput, _ ...request.Option) (*kinesisanalyticsv2.CreateApplicationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateApplication cancelled", ctx.Err())
	default:
		return d.CreateApplication(in)
	}
}

func (d *KinesisAnalyticsV2Double) DeleteApplication(i0 *kinesisanalyticsv2.DeleteApplicationInput) (r0 *kinesisanalyticsv2.DeleteApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApplication", i0)
	r0, _ = returns[0].(*kinesisanalyticsv2.DeleteApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) DeleteApplicationCloudWatchLoggingOption(i0 *kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionInput) (r0 *kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApplicationCloudWatchLoggingOption", i0)
	r0, _ = returns[0].(*kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) DeleteApplicationCloudWatchLoggingOptionRequest(i0 *kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionInput) (r0 *request.Request, r1 *kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApplicationCloudWatchLoggingOptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionOutput)
	return
}

func (d *KinesisAnalyticsV2Double) DeleteApplicationCloudWatchLoggingOptionWithContext(i0 context.Context, i1 *kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionInput, i2 ...request.Option) (r0 *kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApplicationCloudWatchLoggingOptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) fakeDeleteApplicationCloudWatchLoggingOptionWithContext(ctx context.Context, in *kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionInput, _ ...request.Option) (*kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteApplicationCloudWatchLoggingOption cancelled", ctx.Err())
	default:
		return d.DeleteApplicationCloudWatchLoggingOption(in)
	}
}

func (d *KinesisAnalyticsV2Double) DeleteApplicationInputProcessingConfiguration(i0 *kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationInput) (r0 *kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApplicationInputProcessingConfiguration", i0)
	r0, _ = returns[0].(*kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) DeleteApplicationInputProcessingConfigurationRequest(i0 *kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationInput) (r0 *request.Request, r1 *kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApplicationInputProcessingConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationOutput)
	return
}

func (d *KinesisAnalyticsV2Double) DeleteApplicationInputProcessingConfigurationWithContext(i0 context.Context, i1 *kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationInput, i2 ...request.Option) (r0 *kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApplicationInputProcessingConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) fakeDeleteApplicationInputProcessingConfigurationWithContext(ctx context.Context, in *kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationInput, _ ...request.Option) (*kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteApplicationInputProcessingConfiguration cancelled", ctx.Err())
	default:
		return d.DeleteApplicationInputProcessingConfiguration(in)
	}
}

func (d *KinesisAnalyticsV2Double) DeleteApplicationOutput(i0 *kinesisanalyticsv2.DeleteApplicationOutputInput) (r0 *kinesisanalyticsv2.DeleteApplicationOutputOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApplicationOutput", i0)
	r0, _ = returns[0].(*kinesisanalyticsv2.DeleteApplicationOutputOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) DeleteApplicationOutputRequest(i0 *kinesisanalyticsv2.DeleteApplicationOutputInput) (r0 *request.Request, r1 *kinesisanalyticsv2.DeleteApplicationOutputOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApplicationOutputRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisanalyticsv2.DeleteApplicationOutputOutput)
	return
}

func (d *KinesisAnalyticsV2Double) DeleteApplicationOutputWithContext(i0 context.Context, i1 *kinesisanalyticsv2.DeleteApplicationOutputInput, i2 ...request.Option) (r0 *kinesisanalyticsv2.DeleteApplicationOutputOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApplicationOutputWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisanalyticsv2.DeleteApplicationOutputOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) fakeDeleteApplicationOutputWithContext(ctx context.Context, in *kinesisanalyticsv2.DeleteApplicationOutputInput, _ ...request.Option) (*kinesisanalyticsv2.DeleteApplicationOutputOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteApplicationOutput cancelled", ctx.Err())
	default:
		return d.DeleteApplicationOutput(in)
	}
}

func (d *KinesisAnalyticsV2Double) DeleteApplicationReferenceDataSource(i0 *kinesisanalyticsv2.DeleteApplicationReferenceDataSourceInput) (r0 *kinesisanalyticsv2.DeleteApplicationReferenceDataSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApplicationReferenceDataSource", i0)
	r0, _ = returns[0].(*kinesisanalyticsv2.DeleteApplicationReferenceDataSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) DeleteApplicationReferenceDataSourceRequest(i0 *kinesisanalyticsv2.DeleteApplicationReferenceDataSourceInput) (r0 *request.Request, r1 *kinesisanalyticsv2.DeleteApplicationReferenceDataSourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApplicationReferenceDataSourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisanalyticsv2.DeleteApplicationReferenceDataSourceOutput)
	return
}

func (d *KinesisAnalyticsV2Double) DeleteApplicationReferenceDataSourceWithContext(i0 context.Context, i1 *kinesisanalyticsv2.DeleteApplicationReferenceDataSourceInput, i2 ...request.Option) (r0 *kinesisanalyticsv2.DeleteApplicationReferenceDataSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApplicationReferenceDataSourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisanalyticsv2.DeleteApplicationReferenceDataSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) fakeDeleteApplicationReferenceDataSourceWithContext(ctx context.Context, in *kinesisanalyticsv2.DeleteApplicationReferenceDataSourceInput, _ ...request.Option) (*kinesisanalyticsv2.DeleteApplicationReferenceDataSourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteApplicationReferenceDataSource cancelled", ctx.Err())
	default:
		return d.DeleteApplicationReferenceDataSource(in)
	}
}

func (d *KinesisAnalyticsV2Double) DeleteApplicationRequest(i0 *kinesisanalyticsv2.DeleteApplicationInput) (r0 *request.Request, r1 *kinesisanalyticsv2.DeleteApplicationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApplicationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisanalyticsv2.DeleteApplicationOutput)
	return
}

func (d *KinesisAnalyticsV2Double) DeleteApplicationSnapshot(i0 *kinesisanalyticsv2.DeleteApplicationSnapshotInput) (r0 *kinesisanalyticsv2.DeleteApplicationSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApplicationSnapshot", i0)
	r0, _ = returns[0].(*kinesisanalyticsv2.DeleteApplicationSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) DeleteApplicationSnapshotRequest(i0 *kinesisanalyticsv2.DeleteApplicationSnapshotInput) (r0 *request.Request, r1 *kinesisanalyticsv2.DeleteApplicationSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApplicationSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisanalyticsv2.DeleteApplicationSnapshotOutput)
	return
}

func (d *KinesisAnalyticsV2Double) DeleteApplicationSnapshotWithContext(i0 context.Context, i1 *kinesisanalyticsv2.DeleteApplicationSnapshotInput, i2 ...request.Option) (r0 *kinesisanalyticsv2.DeleteApplicationSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApplicationSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisanalyticsv2.DeleteApplicationSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) fakeDeleteApplicationSnapshotWithContext(ctx context.Context, in *kinesisanalyticsv2.DeleteApplicationSnapshotInput, _ ...request.Option) (*kinesisanalyticsv2.DeleteApplicationSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteApplicationSnapshot cancelled", ctx.Err())
	default:
		return d.DeleteApplicationSnapshot(in)
	}
}

func (d *KinesisAnalyticsV2Double) DeleteApplicationVpcConfiguration(i0 *kinesisanalyticsv2.DeleteApplicationVpcConfigurationInput) (r0 *kinesisanalyticsv2.DeleteApplicationVpcConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApplicationVpcConfiguration", i0)
	r0, _ = returns[0].(*kinesisanalyticsv2.DeleteApplicationVpcConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) DeleteApplicationVpcConfigurationRequest(i0 *kinesisanalyticsv2.DeleteApplicationVpcConfigurationInput) (r0 *request.Request, r1 *kinesisanalyticsv2.DeleteApplicationVpcConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApplicationVpcConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisanalyticsv2.DeleteApplicationVpcConfigurationOutput)
	return
}

func (d *KinesisAnalyticsV2Double) DeleteApplicationVpcConfigurationWithContext(i0 context.Context, i1 *kinesisanalyticsv2.DeleteApplicationVpcConfigurationInput, i2 ...request.Option) (r0 *kinesisanalyticsv2.DeleteApplicationVpcConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApplicationVpcConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisanalyticsv2.DeleteApplicationVpcConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) fakeDeleteApplicationVpcConfigurationWithContext(ctx context.Context, in *kinesisanalyticsv2.DeleteApplicationVpcConfigurationInput, _ ...request.Option) (*kinesisanalyticsv2.DeleteApplicationVpcConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteApplicationVpcConfiguration cancelled", ctx.Err())
	default:
		return d.DeleteApplicationVpcConfiguration(in)
	}
}

func (d *KinesisAnalyticsV2Double) DeleteApplicationWithContext(i0 context.Context, i1 *kinesisanalyticsv2.DeleteApplicationInput, i2 ...request.Option) (r0 *kinesisanalyticsv2.DeleteApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApplicationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisanalyticsv2.DeleteApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) fakeDeleteApplicationWithContext(ctx context.Context, in *kinesisanalyticsv2.DeleteApplicationInput, _ ...request.Option) (*kinesisanalyticsv2.DeleteApplicationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteApplication cancelled", ctx.Err())
	default:
		return d.DeleteApplication(in)
	}
}

func (d *KinesisAnalyticsV2Double) DescribeApplication(i0 *kinesisanalyticsv2.DescribeApplicationInput) (r0 *kinesisanalyticsv2.DescribeApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeApplication", i0)
	r0, _ = returns[0].(*kinesisanalyticsv2.DescribeApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) DescribeApplicationRequest(i0 *kinesisanalyticsv2.DescribeApplicationInput) (r0 *request.Request, r1 *kinesisanalyticsv2.DescribeApplicationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeApplicationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisanalyticsv2.DescribeApplicationOutput)
	return
}

func (d *KinesisAnalyticsV2Double) DescribeApplicationSnapshot(i0 *kinesisanalyticsv2.DescribeApplicationSnapshotInput) (r0 *kinesisanalyticsv2.DescribeApplicationSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeApplicationSnapshot", i0)
	r0, _ = returns[0].(*kinesisanalyticsv2.DescribeApplicationSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) DescribeApplicationSnapshotRequest(i0 *kinesisanalyticsv2.DescribeApplicationSnapshotInput) (r0 *request.Request, r1 *kinesisanalyticsv2.DescribeApplicationSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeApplicationSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisanalyticsv2.DescribeApplicationSnapshotOutput)
	return
}

func (d *KinesisAnalyticsV2Double) DescribeApplicationSnapshotWithContext(i0 context.Context, i1 *kinesisanalyticsv2.DescribeApplicationSnapshotInput, i2 ...request.Option) (r0 *kinesisanalyticsv2.DescribeApplicationSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeApplicationSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisanalyticsv2.DescribeApplicationSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) fakeDescribeApplicationSnapshotWithContext(ctx context.Context, in *kinesisanalyticsv2.DescribeApplicationSnapshotInput, _ ...request.Option) (*kinesisanalyticsv2.DescribeApplicationSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeApplicationSnapshot cancelled", ctx.Err())
	default:
		return d.DescribeApplicationSnapshot(in)
	}
}

func (d *KinesisAnalyticsV2Double) DescribeApplicationWithContext(i0 context.Context, i1 *kinesisanalyticsv2.DescribeApplicationInput, i2 ...request.Option) (r0 *kinesisanalyticsv2.DescribeApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeApplicationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisanalyticsv2.DescribeApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) fakeDescribeApplicationWithContext(ctx context.Context, in *kinesisanalyticsv2.DescribeApplicationInput, _ ...request.Option) (*kinesisanalyticsv2.DescribeApplicationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeApplication cancelled", ctx.Err())
	default:
		return d.DescribeApplication(in)
	}
}

func (d *KinesisAnalyticsV2Double) DiscoverInputSchema(i0 *kinesisanalyticsv2.DiscoverInputSchemaInput) (r0 *kinesisanalyticsv2.DiscoverInputSchemaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DiscoverInputSchema", i0)
	r0, _ = returns[0].(*kinesisanalyticsv2.DiscoverInputSchemaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) DiscoverInputSchemaRequest(i0 *kinesisanalyticsv2.DiscoverInputSchemaInput) (r0 *request.Request, r1 *kinesisanalyticsv2.DiscoverInputSchemaOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DiscoverInputSchemaRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisanalyticsv2.DiscoverInputSchemaOutput)
	return
}

func (d *KinesisAnalyticsV2Double) DiscoverInputSchemaWithContext(i0 context.Context, i1 *kinesisanalyticsv2.DiscoverInputSchemaInput, i2 ...request.Option) (r0 *kinesisanalyticsv2.DiscoverInputSchemaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DiscoverInputSchemaWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisanalyticsv2.DiscoverInputSchemaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) fakeDiscoverInputSchemaWithContext(ctx context.Context, in *kinesisanalyticsv2.DiscoverInputSchemaInput, _ ...request.Option) (*kinesisanalyticsv2.DiscoverInputSchemaOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DiscoverInputSchema cancelled", ctx.Err())
	default:
		return d.DiscoverInputSchema(in)
	}
}

func (d *KinesisAnalyticsV2Double) ListApplicationSnapshots(i0 *kinesisanalyticsv2.ListApplicationSnapshotsInput) (r0 *kinesisanalyticsv2.ListApplicationSnapshotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApplicationSnapshots", i0)
	r0, _ = returns[0].(*kinesisanalyticsv2.ListApplicationSnapshotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) ListApplicationSnapshotsRequest(i0 *kinesisanalyticsv2.ListApplicationSnapshotsInput) (r0 *request.Request, r1 *kinesisanalyticsv2.ListApplicationSnapshotsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApplicationSnapshotsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisanalyticsv2.ListApplicationSnapshotsOutput)
	return
}

func (d *KinesisAnalyticsV2Double) ListApplicationSnapshotsWithContext(i0 context.Context, i1 *kinesisanalyticsv2.ListApplicationSnapshotsInput, i2 ...request.Option) (r0 *kinesisanalyticsv2.ListApplicationSnapshotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApplicationSnapshotsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisanalyticsv2.ListApplicationSnapshotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) fakeListApplicationSnapshotsWithContext(ctx context.Context, in *kinesisanalyticsv2.ListApplicationSnapshotsInput, _ ...request.Option) (*kinesisanalyticsv2.ListApplicationSnapshotsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListApplicationSnapshots cancelled", ctx.Err())
	default:
		return d.ListApplicationSnapshots(in)
	}
}

func (d *KinesisAnalyticsV2Double) ListApplications(i0 *kinesisanalyticsv2.ListApplicationsInput) (r0 *kinesisanalyticsv2.ListApplicationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApplications", i0)
	r0, _ = returns[0].(*kinesisanalyticsv2.ListApplicationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) ListApplicationsRequest(i0 *kinesisanalyticsv2.ListApplicationsInput) (r0 *request.Request, r1 *kinesisanalyticsv2.ListApplicationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApplicationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisanalyticsv2.ListApplicationsOutput)
	return
}

func (d *KinesisAnalyticsV2Double) ListApplicationsWithContext(i0 context.Context, i1 *kinesisanalyticsv2.ListApplicationsInput, i2 ...request.Option) (r0 *kinesisanalyticsv2.ListApplicationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApplicationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisanalyticsv2.ListApplicationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) fakeListApplicationsWithContext(ctx context.Context, in *kinesisanalyticsv2.ListApplicationsInput, _ ...request.Option) (*kinesisanalyticsv2.ListApplicationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListApplications cancelled", ctx.Err())
	default:
		return d.ListApplications(in)
	}
}

func (d *KinesisAnalyticsV2Double) ListTagsForResource(i0 *kinesisanalyticsv2.ListTagsForResourceInput) (r0 *kinesisanalyticsv2.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*kinesisanalyticsv2.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) ListTagsForResourceRequest(i0 *kinesisanalyticsv2.ListTagsForResourceInput) (r0 *request.Request, r1 *kinesisanalyticsv2.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisanalyticsv2.ListTagsForResourceOutput)
	return
}

func (d *KinesisAnalyticsV2Double) ListTagsForResourceWithContext(i0 context.Context, i1 *kinesisanalyticsv2.ListTagsForResourceInput, i2 ...request.Option) (r0 *kinesisanalyticsv2.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisanalyticsv2.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) fakeListTagsForResourceWithContext(ctx context.Context, in *kinesisanalyticsv2.ListTagsForResourceInput, _ ...request.Option) (*kinesisanalyticsv2.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *KinesisAnalyticsV2Double) StartApplication(i0 *kinesisanalyticsv2.StartApplicationInput) (r0 *kinesisanalyticsv2.StartApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartApplication", i0)
	r0, _ = returns[0].(*kinesisanalyticsv2.StartApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) StartApplicationRequest(i0 *kinesisanalyticsv2.StartApplicationInput) (r0 *request.Request, r1 *kinesisanalyticsv2.StartApplicationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartApplicationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisanalyticsv2.StartApplicationOutput)
	return
}

func (d *KinesisAnalyticsV2Double) StartApplicationWithContext(i0 context.Context, i1 *kinesisanalyticsv2.StartApplicationInput, i2 ...request.Option) (r0 *kinesisanalyticsv2.StartApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartApplicationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisanalyticsv2.StartApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) fakeStartApplicationWithContext(ctx context.Context, in *kinesisanalyticsv2.StartApplicationInput, _ ...request.Option) (*kinesisanalyticsv2.StartApplicationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartApplication cancelled", ctx.Err())
	default:
		return d.StartApplication(in)
	}
}

func (d *KinesisAnalyticsV2Double) StopApplication(i0 *kinesisanalyticsv2.StopApplicationInput) (r0 *kinesisanalyticsv2.StopApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopApplication", i0)
	r0, _ = returns[0].(*kinesisanalyticsv2.StopApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) StopApplicationRequest(i0 *kinesisanalyticsv2.StopApplicationInput) (r0 *request.Request, r1 *kinesisanalyticsv2.StopApplicationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopApplicationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisanalyticsv2.StopApplicationOutput)
	return
}

func (d *KinesisAnalyticsV2Double) StopApplicationWithContext(i0 context.Context, i1 *kinesisanalyticsv2.StopApplicationInput, i2 ...request.Option) (r0 *kinesisanalyticsv2.StopApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopApplicationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisanalyticsv2.StopApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) fakeStopApplicationWithContext(ctx context.Context, in *kinesisanalyticsv2.StopApplicationInput, _ ...request.Option) (*kinesisanalyticsv2.StopApplicationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopApplication cancelled", ctx.Err())
	default:
		return d.StopApplication(in)
	}
}

func (d *KinesisAnalyticsV2Double) TagResource(i0 *kinesisanalyticsv2.TagResourceInput) (r0 *kinesisanalyticsv2.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*kinesisanalyticsv2.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) TagResourceRequest(i0 *kinesisanalyticsv2.TagResourceInput) (r0 *request.Request, r1 *kinesisanalyticsv2.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisanalyticsv2.TagResourceOutput)
	return
}

func (d *KinesisAnalyticsV2Double) TagResourceWithContext(i0 context.Context, i1 *kinesisanalyticsv2.TagResourceInput, i2 ...request.Option) (r0 *kinesisanalyticsv2.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisanalyticsv2.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) fakeTagResourceWithContext(ctx context.Context, in *kinesisanalyticsv2.TagResourceInput, _ ...request.Option) (*kinesisanalyticsv2.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *KinesisAnalyticsV2Double) UntagResource(i0 *kinesisanalyticsv2.UntagResourceInput) (r0 *kinesisanalyticsv2.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*kinesisanalyticsv2.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) UntagResourceRequest(i0 *kinesisanalyticsv2.UntagResourceInput) (r0 *request.Request, r1 *kinesisanalyticsv2.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisanalyticsv2.UntagResourceOutput)
	return
}

func (d *KinesisAnalyticsV2Double) UntagResourceWithContext(i0 context.Context, i1 *kinesisanalyticsv2.UntagResourceInput, i2 ...request.Option) (r0 *kinesisanalyticsv2.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisanalyticsv2.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) fakeUntagResourceWithContext(ctx context.Context, in *kinesisanalyticsv2.UntagResourceInput, _ ...request.Option) (*kinesisanalyticsv2.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *KinesisAnalyticsV2Double) UpdateApplication(i0 *kinesisanalyticsv2.UpdateApplicationInput) (r0 *kinesisanalyticsv2.UpdateApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApplication", i0)
	r0, _ = returns[0].(*kinesisanalyticsv2.UpdateApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) UpdateApplicationRequest(i0 *kinesisanalyticsv2.UpdateApplicationInput) (r0 *request.Request, r1 *kinesisanalyticsv2.UpdateApplicationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApplicationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisanalyticsv2.UpdateApplicationOutput)
	return
}

func (d *KinesisAnalyticsV2Double) UpdateApplicationWithContext(i0 context.Context, i1 *kinesisanalyticsv2.UpdateApplicationInput, i2 ...request.Option) (r0 *kinesisanalyticsv2.UpdateApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApplicationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisanalyticsv2.UpdateApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisAnalyticsV2Double) fakeUpdateApplicationWithContext(ctx context.Context, in *kinesisanalyticsv2.UpdateApplicationInput, _ ...request.Option) (*kinesisanalyticsv2.UpdateApplicationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateApplication cancelled", ctx.Err())
	default:
		return d.UpdateApplication(in)
	}
}
