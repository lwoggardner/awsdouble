// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:14:40+11:00

// Package robomakerdouble provides a TestDouble implementation of robomakeriface.RoboMakerAPI
package robomakerdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/robomaker"
	"github.com/aws/aws-sdk-go/service/robomaker/robomakeriface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// RoboMakerDouble is TestDouble for robomakeriface.RoboMakerAPI
type RoboMakerDouble struct {
	robomakeriface.RoboMakerAPI
	*awsdouble.AWSTestDouble
}

// Constructor for RoboMakerDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *RoboMakerDouble {
	result := &RoboMakerDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*robomakeriface.RoboMakerAPI)(nil), configurators...)
	return result
}

func (d *RoboMakerDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *RoboMakerDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "BatchDescribeSimulationJobWithContext":
		return m.Fake(d.fakeBatchDescribeSimulationJobWithContext)

	case "CancelDeploymentJobWithContext":
		return m.Fake(d.fakeCancelDeploymentJobWithContext)

	case "CancelSimulationJobBatchWithContext":
		return m.Fake(d.fakeCancelSimulationJobBatchWithContext)

	case "CancelSimulationJobWithContext":
		return m.Fake(d.fakeCancelSimulationJobWithContext)

	case "CreateDeploymentJobWithContext":
		return m.Fake(d.fakeCreateDeploymentJobWithContext)

	case "CreateFleetWithContext":
		return m.Fake(d.fakeCreateFleetWithContext)

	case "CreateRobotApplicationVersionWithContext":
		return m.Fake(d.fakeCreateRobotApplicationVersionWithContext)

	case "CreateRobotApplicationWithContext":
		return m.Fake(d.fakeCreateRobotApplicationWithContext)

	case "CreateRobotWithContext":
		return m.Fake(d.fakeCreateRobotWithContext)

	case "CreateSimulationApplicationVersionWithContext":
		return m.Fake(d.fakeCreateSimulationApplicationVersionWithContext)

	case "CreateSimulationApplicationWithContext":
		return m.Fake(d.fakeCreateSimulationApplicationWithContext)

	case "CreateSimulationJobWithContext":
		return m.Fake(d.fakeCreateSimulationJobWithContext)

	case "DeleteFleetWithContext":
		return m.Fake(d.fakeDeleteFleetWithContext)

	case "DeleteRobotApplicationWithContext":
		return m.Fake(d.fakeDeleteRobotApplicationWithContext)

	case "DeleteRobotWithContext":
		return m.Fake(d.fakeDeleteRobotWithContext)

	case "DeleteSimulationApplicationWithContext":
		return m.Fake(d.fakeDeleteSimulationApplicationWithContext)

	case "DeregisterRobotWithContext":
		return m.Fake(d.fakeDeregisterRobotWithContext)

	case "DescribeDeploymentJobWithContext":
		return m.Fake(d.fakeDescribeDeploymentJobWithContext)

	case "DescribeFleetWithContext":
		return m.Fake(d.fakeDescribeFleetWithContext)

	case "DescribeRobotApplicationWithContext":
		return m.Fake(d.fakeDescribeRobotApplicationWithContext)

	case "DescribeRobotWithContext":
		return m.Fake(d.fakeDescribeRobotWithContext)

	case "DescribeSimulationApplicationWithContext":
		return m.Fake(d.fakeDescribeSimulationApplicationWithContext)

	case "DescribeSimulationJobBatchWithContext":
		return m.Fake(d.fakeDescribeSimulationJobBatchWithContext)

	case "DescribeSimulationJobWithContext":
		return m.Fake(d.fakeDescribeSimulationJobWithContext)

	case "ListDeploymentJobsPages":
		return m.Fake(d.fakeListDeploymentJobsPages)

	case "ListDeploymentJobsPagesWithContext":
		return m.Fake(d.fakeListDeploymentJobsPagesWithContext)

	case "ListDeploymentJobsWithContext":
		return m.Fake(d.fakeListDeploymentJobsWithContext)

	case "ListFleetsPages":
		return m.Fake(d.fakeListFleetsPages)

	case "ListFleetsPagesWithContext":
		return m.Fake(d.fakeListFleetsPagesWithContext)

	case "ListFleetsWithContext":
		return m.Fake(d.fakeListFleetsWithContext)

	case "ListRobotApplicationsPages":
		return m.Fake(d.fakeListRobotApplicationsPages)

	case "ListRobotApplicationsPagesWithContext":
		return m.Fake(d.fakeListRobotApplicationsPagesWithContext)

	case "ListRobotApplicationsWithContext":
		return m.Fake(d.fakeListRobotApplicationsWithContext)

	case "ListRobotsPages":
		return m.Fake(d.fakeListRobotsPages)

	case "ListRobotsPagesWithContext":
		return m.Fake(d.fakeListRobotsPagesWithContext)

	case "ListRobotsWithContext":
		return m.Fake(d.fakeListRobotsWithContext)

	case "ListSimulationApplicationsPages":
		return m.Fake(d.fakeListSimulationApplicationsPages)

	case "ListSimulationApplicationsPagesWithContext":
		return m.Fake(d.fakeListSimulationApplicationsPagesWithContext)

	case "ListSimulationApplicationsWithContext":
		return m.Fake(d.fakeListSimulationApplicationsWithContext)

	case "ListSimulationJobBatchesPages":
		return m.Fake(d.fakeListSimulationJobBatchesPages)

	case "ListSimulationJobBatchesPagesWithContext":
		return m.Fake(d.fakeListSimulationJobBatchesPagesWithContext)

	case "ListSimulationJobBatchesWithContext":
		return m.Fake(d.fakeListSimulationJobBatchesWithContext)

	case "ListSimulationJobsPages":
		return m.Fake(d.fakeListSimulationJobsPages)

	case "ListSimulationJobsPagesWithContext":
		return m.Fake(d.fakeListSimulationJobsPagesWithContext)

	case "ListSimulationJobsWithContext":
		return m.Fake(d.fakeListSimulationJobsWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "RegisterRobotWithContext":
		return m.Fake(d.fakeRegisterRobotWithContext)

	case "RestartSimulationJobWithContext":
		return m.Fake(d.fakeRestartSimulationJobWithContext)

	case "StartSimulationJobBatchWithContext":
		return m.Fake(d.fakeStartSimulationJobBatchWithContext)

	case "SyncDeploymentJobWithContext":
		return m.Fake(d.fakeSyncDeploymentJobWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateRobotApplicationWithContext":
		return m.Fake(d.fakeUpdateRobotApplicationWithContext)

	case "UpdateSimulationApplicationWithContext":
		return m.Fake(d.fakeUpdateSimulationApplicationWithContext)

	default:
		return nil
	}
}

func (d *RoboMakerDouble) BatchDescribeSimulationJob(i0 *robomaker.BatchDescribeSimulationJobInput) (r0 *robomaker.BatchDescribeSimulationJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDescribeSimulationJob", i0)
	r0, _ = returns[0].(*robomaker.BatchDescribeSimulationJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) BatchDescribeSimulationJobRequest(i0 *robomaker.BatchDescribeSimulationJobInput) (r0 *request.Request, r1 *robomaker.BatchDescribeSimulationJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDescribeSimulationJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.BatchDescribeSimulationJobOutput)
	return
}

func (d *RoboMakerDouble) BatchDescribeSimulationJobWithContext(i0 context.Context, i1 *robomaker.BatchDescribeSimulationJobInput, i2 ...request.Option) (r0 *robomaker.BatchDescribeSimulationJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDescribeSimulationJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.BatchDescribeSimulationJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeBatchDescribeSimulationJobWithContext(ctx context.Context, in *robomaker.BatchDescribeSimulationJobInput, _ ...request.Option) (*robomaker.BatchDescribeSimulationJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchDescribeSimulationJob cancelled", ctx.Err())
	default:
		return d.BatchDescribeSimulationJob(in)
	}
}

func (d *RoboMakerDouble) CancelDeploymentJob(i0 *robomaker.CancelDeploymentJobInput) (r0 *robomaker.CancelDeploymentJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelDeploymentJob", i0)
	r0, _ = returns[0].(*robomaker.CancelDeploymentJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) CancelDeploymentJobRequest(i0 *robomaker.CancelDeploymentJobInput) (r0 *request.Request, r1 *robomaker.CancelDeploymentJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelDeploymentJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.CancelDeploymentJobOutput)
	return
}

func (d *RoboMakerDouble) CancelDeploymentJobWithContext(i0 context.Context, i1 *robomaker.CancelDeploymentJobInput, i2 ...request.Option) (r0 *robomaker.CancelDeploymentJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelDeploymentJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.CancelDeploymentJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeCancelDeploymentJobWithContext(ctx context.Context, in *robomaker.CancelDeploymentJobInput, _ ...request.Option) (*robomaker.CancelDeploymentJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelDeploymentJob cancelled", ctx.Err())
	default:
		return d.CancelDeploymentJob(in)
	}
}

func (d *RoboMakerDouble) CancelSimulationJob(i0 *robomaker.CancelSimulationJobInput) (r0 *robomaker.CancelSimulationJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelSimulationJob", i0)
	r0, _ = returns[0].(*robomaker.CancelSimulationJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) CancelSimulationJobBatch(i0 *robomaker.CancelSimulationJobBatchInput) (r0 *robomaker.CancelSimulationJobBatchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelSimulationJobBatch", i0)
	r0, _ = returns[0].(*robomaker.CancelSimulationJobBatchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) CancelSimulationJobBatchRequest(i0 *robomaker.CancelSimulationJobBatchInput) (r0 *request.Request, r1 *robomaker.CancelSimulationJobBatchOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelSimulationJobBatchRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.CancelSimulationJobBatchOutput)
	return
}

func (d *RoboMakerDouble) CancelSimulationJobBatchWithContext(i0 context.Context, i1 *robomaker.CancelSimulationJobBatchInput, i2 ...request.Option) (r0 *robomaker.CancelSimulationJobBatchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelSimulationJobBatchWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.CancelSimulationJobBatchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeCancelSimulationJobBatchWithContext(ctx context.Context, in *robomaker.CancelSimulationJobBatchInput, _ ...request.Option) (*robomaker.CancelSimulationJobBatchOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelSimulationJobBatch cancelled", ctx.Err())
	default:
		return d.CancelSimulationJobBatch(in)
	}
}

func (d *RoboMakerDouble) CancelSimulationJobRequest(i0 *robomaker.CancelSimulationJobInput) (r0 *request.Request, r1 *robomaker.CancelSimulationJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelSimulationJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.CancelSimulationJobOutput)
	return
}

func (d *RoboMakerDouble) CancelSimulationJobWithContext(i0 context.Context, i1 *robomaker.CancelSimulationJobInput, i2 ...request.Option) (r0 *robomaker.CancelSimulationJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelSimulationJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.CancelSimulationJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeCancelSimulationJobWithContext(ctx context.Context, in *robomaker.CancelSimulationJobInput, _ ...request.Option) (*robomaker.CancelSimulationJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelSimulationJob cancelled", ctx.Err())
	default:
		return d.CancelSimulationJob(in)
	}
}

func (d *RoboMakerDouble) CreateDeploymentJob(i0 *robomaker.CreateDeploymentJobInput) (r0 *robomaker.CreateDeploymentJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDeploymentJob", i0)
	r0, _ = returns[0].(*robomaker.CreateDeploymentJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) CreateDeploymentJobRequest(i0 *robomaker.CreateDeploymentJobInput) (r0 *request.Request, r1 *robomaker.CreateDeploymentJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDeploymentJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.CreateDeploymentJobOutput)
	return
}

func (d *RoboMakerDouble) CreateDeploymentJobWithContext(i0 context.Context, i1 *robomaker.CreateDeploymentJobInput, i2 ...request.Option) (r0 *robomaker.CreateDeploymentJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDeploymentJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.CreateDeploymentJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeCreateDeploymentJobWithContext(ctx context.Context, in *robomaker.CreateDeploymentJobInput, _ ...request.Option) (*robomaker.CreateDeploymentJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDeploymentJob cancelled", ctx.Err())
	default:
		return d.CreateDeploymentJob(in)
	}
}

func (d *RoboMakerDouble) CreateFleet(i0 *robomaker.CreateFleetInput) (r0 *robomaker.CreateFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFleet", i0)
	r0, _ = returns[0].(*robomaker.CreateFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) CreateFleetRequest(i0 *robomaker.CreateFleetInput) (r0 *request.Request, r1 *robomaker.CreateFleetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFleetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.CreateFleetOutput)
	return
}

func (d *RoboMakerDouble) CreateFleetWithContext(i0 context.Context, i1 *robomaker.CreateFleetInput, i2 ...request.Option) (r0 *robomaker.CreateFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFleetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.CreateFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeCreateFleetWithContext(ctx context.Context, in *robomaker.CreateFleetInput, _ ...request.Option) (*robomaker.CreateFleetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateFleet cancelled", ctx.Err())
	default:
		return d.CreateFleet(in)
	}
}

func (d *RoboMakerDouble) CreateRobot(i0 *robomaker.CreateRobotInput) (r0 *robomaker.CreateRobotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRobot", i0)
	r0, _ = returns[0].(*robomaker.CreateRobotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) CreateRobotApplication(i0 *robomaker.CreateRobotApplicationInput) (r0 *robomaker.CreateRobotApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRobotApplication", i0)
	r0, _ = returns[0].(*robomaker.CreateRobotApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) CreateRobotApplicationRequest(i0 *robomaker.CreateRobotApplicationInput) (r0 *request.Request, r1 *robomaker.CreateRobotApplicationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRobotApplicationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.CreateRobotApplicationOutput)
	return
}

func (d *RoboMakerDouble) CreateRobotApplicationVersion(i0 *robomaker.CreateRobotApplicationVersionInput) (r0 *robomaker.CreateRobotApplicationVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRobotApplicationVersion", i0)
	r0, _ = returns[0].(*robomaker.CreateRobotApplicationVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) CreateRobotApplicationVersionRequest(i0 *robomaker.CreateRobotApplicationVersionInput) (r0 *request.Request, r1 *robomaker.CreateRobotApplicationVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRobotApplicationVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.CreateRobotApplicationVersionOutput)
	return
}

func (d *RoboMakerDouble) CreateRobotApplicationVersionWithContext(i0 context.Context, i1 *robomaker.CreateRobotApplicationVersionInput, i2 ...request.Option) (r0 *robomaker.CreateRobotApplicationVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRobotApplicationVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.CreateRobotApplicationVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeCreateRobotApplicationVersionWithContext(ctx context.Context, in *robomaker.CreateRobotApplicationVersionInput, _ ...request.Option) (*robomaker.CreateRobotApplicationVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateRobotApplicationVersion cancelled", ctx.Err())
	default:
		return d.CreateRobotApplicationVersion(in)
	}
}

func (d *RoboMakerDouble) CreateRobotApplicationWithContext(i0 context.Context, i1 *robomaker.CreateRobotApplicationInput, i2 ...request.Option) (r0 *robomaker.CreateRobotApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRobotApplicationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.CreateRobotApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeCreateRobotApplicationWithContext(ctx context.Context, in *robomaker.CreateRobotApplicationInput, _ ...request.Option) (*robomaker.CreateRobotApplicationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateRobotApplication cancelled", ctx.Err())
	default:
		return d.CreateRobotApplication(in)
	}
}

func (d *RoboMakerDouble) CreateRobotRequest(i0 *robomaker.CreateRobotInput) (r0 *request.Request, r1 *robomaker.CreateRobotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRobotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.CreateRobotOutput)
	return
}

func (d *RoboMakerDouble) CreateRobotWithContext(i0 context.Context, i1 *robomaker.CreateRobotInput, i2 ...request.Option) (r0 *robomaker.CreateRobotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRobotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.CreateRobotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeCreateRobotWithContext(ctx context.Context, in *robomaker.CreateRobotInput, _ ...request.Option) (*robomaker.CreateRobotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateRobot cancelled", ctx.Err())
	default:
		return d.CreateRobot(in)
	}
}

func (d *RoboMakerDouble) CreateSimulationApplication(i0 *robomaker.CreateSimulationApplicationInput) (r0 *robomaker.CreateSimulationApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSimulationApplication", i0)
	r0, _ = returns[0].(*robomaker.CreateSimulationApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) CreateSimulationApplicationRequest(i0 *robomaker.CreateSimulationApplicationInput) (r0 *request.Request, r1 *robomaker.CreateSimulationApplicationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSimulationApplicationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.CreateSimulationApplicationOutput)
	return
}

func (d *RoboMakerDouble) CreateSimulationApplicationVersion(i0 *robomaker.CreateSimulationApplicationVersionInput) (r0 *robomaker.CreateSimulationApplicationVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSimulationApplicationVersion", i0)
	r0, _ = returns[0].(*robomaker.CreateSimulationApplicationVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) CreateSimulationApplicationVersionRequest(i0 *robomaker.CreateSimulationApplicationVersionInput) (r0 *request.Request, r1 *robomaker.CreateSimulationApplicationVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSimulationApplicationVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.CreateSimulationApplicationVersionOutput)
	return
}

func (d *RoboMakerDouble) CreateSimulationApplicationVersionWithContext(i0 context.Context, i1 *robomaker.CreateSimulationApplicationVersionInput, i2 ...request.Option) (r0 *robomaker.CreateSimulationApplicationVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSimulationApplicationVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.CreateSimulationApplicationVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeCreateSimulationApplicationVersionWithContext(ctx context.Context, in *robomaker.CreateSimulationApplicationVersionInput, _ ...request.Option) (*robomaker.CreateSimulationApplicationVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateSimulationApplicationVersion cancelled", ctx.Err())
	default:
		return d.CreateSimulationApplicationVersion(in)
	}
}

func (d *RoboMakerDouble) CreateSimulationApplicationWithContext(i0 context.Context, i1 *robomaker.CreateSimulationApplicationInput, i2 ...request.Option) (r0 *robomaker.CreateSimulationApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSimulationApplicationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.CreateSimulationApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeCreateSimulationApplicationWithContext(ctx context.Context, in *robomaker.CreateSimulationApplicationInput, _ ...request.Option) (*robomaker.CreateSimulationApplicationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateSimulationApplication cancelled", ctx.Err())
	default:
		return d.CreateSimulationApplication(in)
	}
}

func (d *RoboMakerDouble) CreateSimulationJob(i0 *robomaker.CreateSimulationJobInput) (r0 *robomaker.CreateSimulationJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSimulationJob", i0)
	r0, _ = returns[0].(*robomaker.CreateSimulationJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) CreateSimulationJobRequest(i0 *robomaker.CreateSimulationJobInput) (r0 *request.Request, r1 *robomaker.CreateSimulationJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSimulationJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.CreateSimulationJobOutput)
	return
}

func (d *RoboMakerDouble) CreateSimulationJobWithContext(i0 context.Context, i1 *robomaker.CreateSimulationJobInput, i2 ...request.Option) (r0 *robomaker.CreateSimulationJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSimulationJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.CreateSimulationJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeCreateSimulationJobWithContext(ctx context.Context, in *robomaker.CreateSimulationJobInput, _ ...request.Option) (*robomaker.CreateSimulationJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateSimulationJob cancelled", ctx.Err())
	default:
		return d.CreateSimulationJob(in)
	}
}

func (d *RoboMakerDouble) DeleteFleet(i0 *robomaker.DeleteFleetInput) (r0 *robomaker.DeleteFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFleet", i0)
	r0, _ = returns[0].(*robomaker.DeleteFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) DeleteFleetRequest(i0 *robomaker.DeleteFleetInput) (r0 *request.Request, r1 *robomaker.DeleteFleetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFleetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.DeleteFleetOutput)
	return
}

func (d *RoboMakerDouble) DeleteFleetWithContext(i0 context.Context, i1 *robomaker.DeleteFleetInput, i2 ...request.Option) (r0 *robomaker.DeleteFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFleetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.DeleteFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeDeleteFleetWithContext(ctx context.Context, in *robomaker.DeleteFleetInput, _ ...request.Option) (*robomaker.DeleteFleetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteFleet cancelled", ctx.Err())
	default:
		return d.DeleteFleet(in)
	}
}

func (d *RoboMakerDouble) DeleteRobot(i0 *robomaker.DeleteRobotInput) (r0 *robomaker.DeleteRobotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRobot", i0)
	r0, _ = returns[0].(*robomaker.DeleteRobotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) DeleteRobotApplication(i0 *robomaker.DeleteRobotApplicationInput) (r0 *robomaker.DeleteRobotApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRobotApplication", i0)
	r0, _ = returns[0].(*robomaker.DeleteRobotApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) DeleteRobotApplicationRequest(i0 *robomaker.DeleteRobotApplicationInput) (r0 *request.Request, r1 *robomaker.DeleteRobotApplicationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRobotApplicationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.DeleteRobotApplicationOutput)
	return
}

func (d *RoboMakerDouble) DeleteRobotApplicationWithContext(i0 context.Context, i1 *robomaker.DeleteRobotApplicationInput, i2 ...request.Option) (r0 *robomaker.DeleteRobotApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRobotApplicationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.DeleteRobotApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeDeleteRobotApplicationWithContext(ctx context.Context, in *robomaker.DeleteRobotApplicationInput, _ ...request.Option) (*robomaker.DeleteRobotApplicationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRobotApplication cancelled", ctx.Err())
	default:
		return d.DeleteRobotApplication(in)
	}
}

func (d *RoboMakerDouble) DeleteRobotRequest(i0 *robomaker.DeleteRobotInput) (r0 *request.Request, r1 *robomaker.DeleteRobotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRobotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.DeleteRobotOutput)
	return
}

func (d *RoboMakerDouble) DeleteRobotWithContext(i0 context.Context, i1 *robomaker.DeleteRobotInput, i2 ...request.Option) (r0 *robomaker.DeleteRobotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRobotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.DeleteRobotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeDeleteRobotWithContext(ctx context.Context, in *robomaker.DeleteRobotInput, _ ...request.Option) (*robomaker.DeleteRobotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRobot cancelled", ctx.Err())
	default:
		return d.DeleteRobot(in)
	}
}

func (d *RoboMakerDouble) DeleteSimulationApplication(i0 *robomaker.DeleteSimulationApplicationInput) (r0 *robomaker.DeleteSimulationApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSimulationApplication", i0)
	r0, _ = returns[0].(*robomaker.DeleteSimulationApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) DeleteSimulationApplicationRequest(i0 *robomaker.DeleteSimulationApplicationInput) (r0 *request.Request, r1 *robomaker.DeleteSimulationApplicationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSimulationApplicationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.DeleteSimulationApplicationOutput)
	return
}

func (d *RoboMakerDouble) DeleteSimulationApplicationWithContext(i0 context.Context, i1 *robomaker.DeleteSimulationApplicationInput, i2 ...request.Option) (r0 *robomaker.DeleteSimulationApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSimulationApplicationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.DeleteSimulationApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeDeleteSimulationApplicationWithContext(ctx context.Context, in *robomaker.DeleteSimulationApplicationInput, _ ...request.Option) (*robomaker.DeleteSimulationApplicationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteSimulationApplication cancelled", ctx.Err())
	default:
		return d.DeleteSimulationApplication(in)
	}
}

func (d *RoboMakerDouble) DeregisterRobot(i0 *robomaker.DeregisterRobotInput) (r0 *robomaker.DeregisterRobotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterRobot", i0)
	r0, _ = returns[0].(*robomaker.DeregisterRobotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) DeregisterRobotRequest(i0 *robomaker.DeregisterRobotInput) (r0 *request.Request, r1 *robomaker.DeregisterRobotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterRobotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.DeregisterRobotOutput)
	return
}

func (d *RoboMakerDouble) DeregisterRobotWithContext(i0 context.Context, i1 *robomaker.DeregisterRobotInput, i2 ...request.Option) (r0 *robomaker.DeregisterRobotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterRobotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.DeregisterRobotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeDeregisterRobotWithContext(ctx context.Context, in *robomaker.DeregisterRobotInput, _ ...request.Option) (*robomaker.DeregisterRobotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeregisterRobot cancelled", ctx.Err())
	default:
		return d.DeregisterRobot(in)
	}
}

func (d *RoboMakerDouble) DescribeDeploymentJob(i0 *robomaker.DescribeDeploymentJobInput) (r0 *robomaker.DescribeDeploymentJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDeploymentJob", i0)
	r0, _ = returns[0].(*robomaker.DescribeDeploymentJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) DescribeDeploymentJobRequest(i0 *robomaker.DescribeDeploymentJobInput) (r0 *request.Request, r1 *robomaker.DescribeDeploymentJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDeploymentJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.DescribeDeploymentJobOutput)
	return
}

func (d *RoboMakerDouble) DescribeDeploymentJobWithContext(i0 context.Context, i1 *robomaker.DescribeDeploymentJobInput, i2 ...request.Option) (r0 *robomaker.DescribeDeploymentJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDeploymentJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.DescribeDeploymentJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeDescribeDeploymentJobWithContext(ctx context.Context, in *robomaker.DescribeDeploymentJobInput, _ ...request.Option) (*robomaker.DescribeDeploymentJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDeploymentJob cancelled", ctx.Err())
	default:
		return d.DescribeDeploymentJob(in)
	}
}

func (d *RoboMakerDouble) DescribeFleet(i0 *robomaker.DescribeFleetInput) (r0 *robomaker.DescribeFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFleet", i0)
	r0, _ = returns[0].(*robomaker.DescribeFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) DescribeFleetRequest(i0 *robomaker.DescribeFleetInput) (r0 *request.Request, r1 *robomaker.DescribeFleetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFleetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.DescribeFleetOutput)
	return
}

func (d *RoboMakerDouble) DescribeFleetWithContext(i0 context.Context, i1 *robomaker.DescribeFleetInput, i2 ...request.Option) (r0 *robomaker.DescribeFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFleetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.DescribeFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeDescribeFleetWithContext(ctx context.Context, in *robomaker.DescribeFleetInput, _ ...request.Option) (*robomaker.DescribeFleetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeFleet cancelled", ctx.Err())
	default:
		return d.DescribeFleet(in)
	}
}

func (d *RoboMakerDouble) DescribeRobot(i0 *robomaker.DescribeRobotInput) (r0 *robomaker.DescribeRobotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRobot", i0)
	r0, _ = returns[0].(*robomaker.DescribeRobotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) DescribeRobotApplication(i0 *robomaker.DescribeRobotApplicationInput) (r0 *robomaker.DescribeRobotApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRobotApplication", i0)
	r0, _ = returns[0].(*robomaker.DescribeRobotApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) DescribeRobotApplicationRequest(i0 *robomaker.DescribeRobotApplicationInput) (r0 *request.Request, r1 *robomaker.DescribeRobotApplicationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRobotApplicationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.DescribeRobotApplicationOutput)
	return
}

func (d *RoboMakerDouble) DescribeRobotApplicationWithContext(i0 context.Context, i1 *robomaker.DescribeRobotApplicationInput, i2 ...request.Option) (r0 *robomaker.DescribeRobotApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRobotApplicationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.DescribeRobotApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeDescribeRobotApplicationWithContext(ctx context.Context, in *robomaker.DescribeRobotApplicationInput, _ ...request.Option) (*robomaker.DescribeRobotApplicationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeRobotApplication cancelled", ctx.Err())
	default:
		return d.DescribeRobotApplication(in)
	}
}

func (d *RoboMakerDouble) DescribeRobotRequest(i0 *robomaker.DescribeRobotInput) (r0 *request.Request, r1 *robomaker.DescribeRobotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRobotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.DescribeRobotOutput)
	return
}

func (d *RoboMakerDouble) DescribeRobotWithContext(i0 context.Context, i1 *robomaker.DescribeRobotInput, i2 ...request.Option) (r0 *robomaker.DescribeRobotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRobotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.DescribeRobotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeDescribeRobotWithContext(ctx context.Context, in *robomaker.DescribeRobotInput, _ ...request.Option) (*robomaker.DescribeRobotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeRobot cancelled", ctx.Err())
	default:
		return d.DescribeRobot(in)
	}
}

func (d *RoboMakerDouble) DescribeSimulationApplication(i0 *robomaker.DescribeSimulationApplicationInput) (r0 *robomaker.DescribeSimulationApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSimulationApplication", i0)
	r0, _ = returns[0].(*robomaker.DescribeSimulationApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) DescribeSimulationApplicationRequest(i0 *robomaker.DescribeSimulationApplicationInput) (r0 *request.Request, r1 *robomaker.DescribeSimulationApplicationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSimulationApplicationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.DescribeSimulationApplicationOutput)
	return
}

func (d *RoboMakerDouble) DescribeSimulationApplicationWithContext(i0 context.Context, i1 *robomaker.DescribeSimulationApplicationInput, i2 ...request.Option) (r0 *robomaker.DescribeSimulationApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSimulationApplicationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.DescribeSimulationApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeDescribeSimulationApplicationWithContext(ctx context.Context, in *robomaker.DescribeSimulationApplicationInput, _ ...request.Option) (*robomaker.DescribeSimulationApplicationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSimulationApplication cancelled", ctx.Err())
	default:
		return d.DescribeSimulationApplication(in)
	}
}

func (d *RoboMakerDouble) DescribeSimulationJob(i0 *robomaker.DescribeSimulationJobInput) (r0 *robomaker.DescribeSimulationJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSimulationJob", i0)
	r0, _ = returns[0].(*robomaker.DescribeSimulationJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) DescribeSimulationJobBatch(i0 *robomaker.DescribeSimulationJobBatchInput) (r0 *robomaker.DescribeSimulationJobBatchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSimulationJobBatch", i0)
	r0, _ = returns[0].(*robomaker.DescribeSimulationJobBatchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) DescribeSimulationJobBatchRequest(i0 *robomaker.DescribeSimulationJobBatchInput) (r0 *request.Request, r1 *robomaker.DescribeSimulationJobBatchOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSimulationJobBatchRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.DescribeSimulationJobBatchOutput)
	return
}

func (d *RoboMakerDouble) DescribeSimulationJobBatchWithContext(i0 context.Context, i1 *robomaker.DescribeSimulationJobBatchInput, i2 ...request.Option) (r0 *robomaker.DescribeSimulationJobBatchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSimulationJobBatchWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.DescribeSimulationJobBatchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeDescribeSimulationJobBatchWithContext(ctx context.Context, in *robomaker.DescribeSimulationJobBatchInput, _ ...request.Option) (*robomaker.DescribeSimulationJobBatchOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSimulationJobBatch cancelled", ctx.Err())
	default:
		return d.DescribeSimulationJobBatch(in)
	}
}

func (d *RoboMakerDouble) DescribeSimulationJobRequest(i0 *robomaker.DescribeSimulationJobInput) (r0 *request.Request, r1 *robomaker.DescribeSimulationJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSimulationJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.DescribeSimulationJobOutput)
	return
}

func (d *RoboMakerDouble) DescribeSimulationJobWithContext(i0 context.Context, i1 *robomaker.DescribeSimulationJobInput, i2 ...request.Option) (r0 *robomaker.DescribeSimulationJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSimulationJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.DescribeSimulationJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeDescribeSimulationJobWithContext(ctx context.Context, in *robomaker.DescribeSimulationJobInput, _ ...request.Option) (*robomaker.DescribeSimulationJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSimulationJob cancelled", ctx.Err())
	default:
		return d.DescribeSimulationJob(in)
	}
}

func (d *RoboMakerDouble) ListDeploymentJobs(i0 *robomaker.ListDeploymentJobsInput) (r0 *robomaker.ListDeploymentJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeploymentJobs", i0)
	r0, _ = returns[0].(*robomaker.ListDeploymentJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) ListDeploymentJobsPages(i0 *robomaker.ListDeploymentJobsInput, i1 func(*robomaker.ListDeploymentJobsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeploymentJobsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RoboMakerDouble) fakeListDeploymentJobsPages(in *robomaker.ListDeploymentJobsInput, pager func(*robomaker.ListDeploymentJobsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListDeploymentJobs", paginators, in, pager)
}

func (d *RoboMakerDouble) ListDeploymentJobsPagesWithContext(i0 context.Context, i1 *robomaker.ListDeploymentJobsInput, i2 func(*robomaker.ListDeploymentJobsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeploymentJobsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RoboMakerDouble) fakeListDeploymentJobsPagesWithContext(ctx context.Context, in *robomaker.ListDeploymentJobsInput, pager func(*robomaker.ListDeploymentJobsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListDeploymentJobs", paginators, ctx, in, pager, options...)
}

func (d *RoboMakerDouble) ListDeploymentJobsRequest(i0 *robomaker.ListDeploymentJobsInput) (r0 *request.Request, r1 *robomaker.ListDeploymentJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeploymentJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.ListDeploymentJobsOutput)
	return
}

func (d *RoboMakerDouble) ListDeploymentJobsWithContext(i0 context.Context, i1 *robomaker.ListDeploymentJobsInput, i2 ...request.Option) (r0 *robomaker.ListDeploymentJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeploymentJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.ListDeploymentJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeListDeploymentJobsWithContext(ctx context.Context, in *robomaker.ListDeploymentJobsInput, _ ...request.Option) (*robomaker.ListDeploymentJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDeploymentJobs cancelled", ctx.Err())
	default:
		return d.ListDeploymentJobs(in)
	}
}

func (d *RoboMakerDouble) ListFleets(i0 *robomaker.ListFleetsInput) (r0 *robomaker.ListFleetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFleets", i0)
	r0, _ = returns[0].(*robomaker.ListFleetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) ListFleetsPages(i0 *robomaker.ListFleetsInput, i1 func(*robomaker.ListFleetsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFleetsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RoboMakerDouble) fakeListFleetsPages(in *robomaker.ListFleetsInput, pager func(*robomaker.ListFleetsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListFleets", paginators, in, pager)
}

func (d *RoboMakerDouble) ListFleetsPagesWithContext(i0 context.Context, i1 *robomaker.ListFleetsInput, i2 func(*robomaker.ListFleetsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFleetsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RoboMakerDouble) fakeListFleetsPagesWithContext(ctx context.Context, in *robomaker.ListFleetsInput, pager func(*robomaker.ListFleetsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListFleets", paginators, ctx, in, pager, options...)
}

func (d *RoboMakerDouble) ListFleetsRequest(i0 *robomaker.ListFleetsInput) (r0 *request.Request, r1 *robomaker.ListFleetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFleetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.ListFleetsOutput)
	return
}

func (d *RoboMakerDouble) ListFleetsWithContext(i0 context.Context, i1 *robomaker.ListFleetsInput, i2 ...request.Option) (r0 *robomaker.ListFleetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFleetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.ListFleetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeListFleetsWithContext(ctx context.Context, in *robomaker.ListFleetsInput, _ ...request.Option) (*robomaker.ListFleetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListFleets cancelled", ctx.Err())
	default:
		return d.ListFleets(in)
	}
}

func (d *RoboMakerDouble) ListRobotApplications(i0 *robomaker.ListRobotApplicationsInput) (r0 *robomaker.ListRobotApplicationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRobotApplications", i0)
	r0, _ = returns[0].(*robomaker.ListRobotApplicationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) ListRobotApplicationsPages(i0 *robomaker.ListRobotApplicationsInput, i1 func(*robomaker.ListRobotApplicationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRobotApplicationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RoboMakerDouble) fakeListRobotApplicationsPages(in *robomaker.ListRobotApplicationsInput, pager func(*robomaker.ListRobotApplicationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListRobotApplications", paginators, in, pager)
}

func (d *RoboMakerDouble) ListRobotApplicationsPagesWithContext(i0 context.Context, i1 *robomaker.ListRobotApplicationsInput, i2 func(*robomaker.ListRobotApplicationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRobotApplicationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RoboMakerDouble) fakeListRobotApplicationsPagesWithContext(ctx context.Context, in *robomaker.ListRobotApplicationsInput, pager func(*robomaker.ListRobotApplicationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListRobotApplications", paginators, ctx, in, pager, options...)
}

func (d *RoboMakerDouble) ListRobotApplicationsRequest(i0 *robomaker.ListRobotApplicationsInput) (r0 *request.Request, r1 *robomaker.ListRobotApplicationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRobotApplicationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.ListRobotApplicationsOutput)
	return
}

func (d *RoboMakerDouble) ListRobotApplicationsWithContext(i0 context.Context, i1 *robomaker.ListRobotApplicationsInput, i2 ...request.Option) (r0 *robomaker.ListRobotApplicationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRobotApplicationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.ListRobotApplicationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeListRobotApplicationsWithContext(ctx context.Context, in *robomaker.ListRobotApplicationsInput, _ ...request.Option) (*robomaker.ListRobotApplicationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListRobotApplications cancelled", ctx.Err())
	default:
		return d.ListRobotApplications(in)
	}
}

func (d *RoboMakerDouble) ListRobots(i0 *robomaker.ListRobotsInput) (r0 *robomaker.ListRobotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRobots", i0)
	r0, _ = returns[0].(*robomaker.ListRobotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) ListRobotsPages(i0 *robomaker.ListRobotsInput, i1 func(*robomaker.ListRobotsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRobotsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RoboMakerDouble) fakeListRobotsPages(in *robomaker.ListRobotsInput, pager func(*robomaker.ListRobotsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListRobots", paginators, in, pager)
}

func (d *RoboMakerDouble) ListRobotsPagesWithContext(i0 context.Context, i1 *robomaker.ListRobotsInput, i2 func(*robomaker.ListRobotsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRobotsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RoboMakerDouble) fakeListRobotsPagesWithContext(ctx context.Context, in *robomaker.ListRobotsInput, pager func(*robomaker.ListRobotsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListRobots", paginators, ctx, in, pager, options...)
}

func (d *RoboMakerDouble) ListRobotsRequest(i0 *robomaker.ListRobotsInput) (r0 *request.Request, r1 *robomaker.ListRobotsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRobotsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.ListRobotsOutput)
	return
}

func (d *RoboMakerDouble) ListRobotsWithContext(i0 context.Context, i1 *robomaker.ListRobotsInput, i2 ...request.Option) (r0 *robomaker.ListRobotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRobotsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.ListRobotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeListRobotsWithContext(ctx context.Context, in *robomaker.ListRobotsInput, _ ...request.Option) (*robomaker.ListRobotsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListRobots cancelled", ctx.Err())
	default:
		return d.ListRobots(in)
	}
}

func (d *RoboMakerDouble) ListSimulationApplications(i0 *robomaker.ListSimulationApplicationsInput) (r0 *robomaker.ListSimulationApplicationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSimulationApplications", i0)
	r0, _ = returns[0].(*robomaker.ListSimulationApplicationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) ListSimulationApplicationsPages(i0 *robomaker.ListSimulationApplicationsInput, i1 func(*robomaker.ListSimulationApplicationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSimulationApplicationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RoboMakerDouble) fakeListSimulationApplicationsPages(in *robomaker.ListSimulationApplicationsInput, pager func(*robomaker.ListSimulationApplicationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListSimulationApplications", paginators, in, pager)
}

func (d *RoboMakerDouble) ListSimulationApplicationsPagesWithContext(i0 context.Context, i1 *robomaker.ListSimulationApplicationsInput, i2 func(*robomaker.ListSimulationApplicationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSimulationApplicationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RoboMakerDouble) fakeListSimulationApplicationsPagesWithContext(ctx context.Context, in *robomaker.ListSimulationApplicationsInput, pager func(*robomaker.ListSimulationApplicationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListSimulationApplications", paginators, ctx, in, pager, options...)
}

func (d *RoboMakerDouble) ListSimulationApplicationsRequest(i0 *robomaker.ListSimulationApplicationsInput) (r0 *request.Request, r1 *robomaker.ListSimulationApplicationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSimulationApplicationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.ListSimulationApplicationsOutput)
	return
}

func (d *RoboMakerDouble) ListSimulationApplicationsWithContext(i0 context.Context, i1 *robomaker.ListSimulationApplicationsInput, i2 ...request.Option) (r0 *robomaker.ListSimulationApplicationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSimulationApplicationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.ListSimulationApplicationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeListSimulationApplicationsWithContext(ctx context.Context, in *robomaker.ListSimulationApplicationsInput, _ ...request.Option) (*robomaker.ListSimulationApplicationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListSimulationApplications cancelled", ctx.Err())
	default:
		return d.ListSimulationApplications(in)
	}
}

func (d *RoboMakerDouble) ListSimulationJobBatches(i0 *robomaker.ListSimulationJobBatchesInput) (r0 *robomaker.ListSimulationJobBatchesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSimulationJobBatches", i0)
	r0, _ = returns[0].(*robomaker.ListSimulationJobBatchesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) ListSimulationJobBatchesPages(i0 *robomaker.ListSimulationJobBatchesInput, i1 func(*robomaker.ListSimulationJobBatchesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSimulationJobBatchesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RoboMakerDouble) fakeListSimulationJobBatchesPages(in *robomaker.ListSimulationJobBatchesInput, pager func(*robomaker.ListSimulationJobBatchesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListSimulationJobBatches", paginators, in, pager)
}

func (d *RoboMakerDouble) ListSimulationJobBatchesPagesWithContext(i0 context.Context, i1 *robomaker.ListSimulationJobBatchesInput, i2 func(*robomaker.ListSimulationJobBatchesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSimulationJobBatchesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RoboMakerDouble) fakeListSimulationJobBatchesPagesWithContext(ctx context.Context, in *robomaker.ListSimulationJobBatchesInput, pager func(*robomaker.ListSimulationJobBatchesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListSimulationJobBatches", paginators, ctx, in, pager, options...)
}

func (d *RoboMakerDouble) ListSimulationJobBatchesRequest(i0 *robomaker.ListSimulationJobBatchesInput) (r0 *request.Request, r1 *robomaker.ListSimulationJobBatchesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSimulationJobBatchesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.ListSimulationJobBatchesOutput)
	return
}

func (d *RoboMakerDouble) ListSimulationJobBatchesWithContext(i0 context.Context, i1 *robomaker.ListSimulationJobBatchesInput, i2 ...request.Option) (r0 *robomaker.ListSimulationJobBatchesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSimulationJobBatchesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.ListSimulationJobBatchesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeListSimulationJobBatchesWithContext(ctx context.Context, in *robomaker.ListSimulationJobBatchesInput, _ ...request.Option) (*robomaker.ListSimulationJobBatchesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListSimulationJobBatches cancelled", ctx.Err())
	default:
		return d.ListSimulationJobBatches(in)
	}
}

func (d *RoboMakerDouble) ListSimulationJobs(i0 *robomaker.ListSimulationJobsInput) (r0 *robomaker.ListSimulationJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSimulationJobs", i0)
	r0, _ = returns[0].(*robomaker.ListSimulationJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) ListSimulationJobsPages(i0 *robomaker.ListSimulationJobsInput, i1 func(*robomaker.ListSimulationJobsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSimulationJobsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RoboMakerDouble) fakeListSimulationJobsPages(in *robomaker.ListSimulationJobsInput, pager func(*robomaker.ListSimulationJobsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListSimulationJobs", paginators, in, pager)
}

func (d *RoboMakerDouble) ListSimulationJobsPagesWithContext(i0 context.Context, i1 *robomaker.ListSimulationJobsInput, i2 func(*robomaker.ListSimulationJobsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSimulationJobsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RoboMakerDouble) fakeListSimulationJobsPagesWithContext(ctx context.Context, in *robomaker.ListSimulationJobsInput, pager func(*robomaker.ListSimulationJobsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListSimulationJobs", paginators, ctx, in, pager, options...)
}

func (d *RoboMakerDouble) ListSimulationJobsRequest(i0 *robomaker.ListSimulationJobsInput) (r0 *request.Request, r1 *robomaker.ListSimulationJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSimulationJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.ListSimulationJobsOutput)
	return
}

func (d *RoboMakerDouble) ListSimulationJobsWithContext(i0 context.Context, i1 *robomaker.ListSimulationJobsInput, i2 ...request.Option) (r0 *robomaker.ListSimulationJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSimulationJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.ListSimulationJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeListSimulationJobsWithContext(ctx context.Context, in *robomaker.ListSimulationJobsInput, _ ...request.Option) (*robomaker.ListSimulationJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListSimulationJobs cancelled", ctx.Err())
	default:
		return d.ListSimulationJobs(in)
	}
}

func (d *RoboMakerDouble) ListTagsForResource(i0 *robomaker.ListTagsForResourceInput) (r0 *robomaker.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*robomaker.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) ListTagsForResourceRequest(i0 *robomaker.ListTagsForResourceInput) (r0 *request.Request, r1 *robomaker.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.ListTagsForResourceOutput)
	return
}

func (d *RoboMakerDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *robomaker.ListTagsForResourceInput, i2 ...request.Option) (r0 *robomaker.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *robomaker.ListTagsForResourceInput, _ ...request.Option) (*robomaker.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *RoboMakerDouble) RegisterRobot(i0 *robomaker.RegisterRobotInput) (r0 *robomaker.RegisterRobotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterRobot", i0)
	r0, _ = returns[0].(*robomaker.RegisterRobotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) RegisterRobotRequest(i0 *robomaker.RegisterRobotInput) (r0 *request.Request, r1 *robomaker.RegisterRobotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterRobotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.RegisterRobotOutput)
	return
}

func (d *RoboMakerDouble) RegisterRobotWithContext(i0 context.Context, i1 *robomaker.RegisterRobotInput, i2 ...request.Option) (r0 *robomaker.RegisterRobotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterRobotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.RegisterRobotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeRegisterRobotWithContext(ctx context.Context, in *robomaker.RegisterRobotInput, _ ...request.Option) (*robomaker.RegisterRobotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterRobot cancelled", ctx.Err())
	default:
		return d.RegisterRobot(in)
	}
}

func (d *RoboMakerDouble) RestartSimulationJob(i0 *robomaker.RestartSimulationJobInput) (r0 *robomaker.RestartSimulationJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestartSimulationJob", i0)
	r0, _ = returns[0].(*robomaker.RestartSimulationJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) RestartSimulationJobRequest(i0 *robomaker.RestartSimulationJobInput) (r0 *request.Request, r1 *robomaker.RestartSimulationJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestartSimulationJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.RestartSimulationJobOutput)
	return
}

func (d *RoboMakerDouble) RestartSimulationJobWithContext(i0 context.Context, i1 *robomaker.RestartSimulationJobInput, i2 ...request.Option) (r0 *robomaker.RestartSimulationJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestartSimulationJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.RestartSimulationJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeRestartSimulationJobWithContext(ctx context.Context, in *robomaker.RestartSimulationJobInput, _ ...request.Option) (*robomaker.RestartSimulationJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RestartSimulationJob cancelled", ctx.Err())
	default:
		return d.RestartSimulationJob(in)
	}
}

func (d *RoboMakerDouble) StartSimulationJobBatch(i0 *robomaker.StartSimulationJobBatchInput) (r0 *robomaker.StartSimulationJobBatchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartSimulationJobBatch", i0)
	r0, _ = returns[0].(*robomaker.StartSimulationJobBatchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) StartSimulationJobBatchRequest(i0 *robomaker.StartSimulationJobBatchInput) (r0 *request.Request, r1 *robomaker.StartSimulationJobBatchOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartSimulationJobBatchRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.StartSimulationJobBatchOutput)
	return
}

func (d *RoboMakerDouble) StartSimulationJobBatchWithContext(i0 context.Context, i1 *robomaker.StartSimulationJobBatchInput, i2 ...request.Option) (r0 *robomaker.StartSimulationJobBatchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartSimulationJobBatchWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.StartSimulationJobBatchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeStartSimulationJobBatchWithContext(ctx context.Context, in *robomaker.StartSimulationJobBatchInput, _ ...request.Option) (*robomaker.StartSimulationJobBatchOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartSimulationJobBatch cancelled", ctx.Err())
	default:
		return d.StartSimulationJobBatch(in)
	}
}

func (d *RoboMakerDouble) SyncDeploymentJob(i0 *robomaker.SyncDeploymentJobInput) (r0 *robomaker.SyncDeploymentJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SyncDeploymentJob", i0)
	r0, _ = returns[0].(*robomaker.SyncDeploymentJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) SyncDeploymentJobRequest(i0 *robomaker.SyncDeploymentJobInput) (r0 *request.Request, r1 *robomaker.SyncDeploymentJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SyncDeploymentJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.SyncDeploymentJobOutput)
	return
}

func (d *RoboMakerDouble) SyncDeploymentJobWithContext(i0 context.Context, i1 *robomaker.SyncDeploymentJobInput, i2 ...request.Option) (r0 *robomaker.SyncDeploymentJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SyncDeploymentJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.SyncDeploymentJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeSyncDeploymentJobWithContext(ctx context.Context, in *robomaker.SyncDeploymentJobInput, _ ...request.Option) (*robomaker.SyncDeploymentJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SyncDeploymentJob cancelled", ctx.Err())
	default:
		return d.SyncDeploymentJob(in)
	}
}

func (d *RoboMakerDouble) TagResource(i0 *robomaker.TagResourceInput) (r0 *robomaker.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*robomaker.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) TagResourceRequest(i0 *robomaker.TagResourceInput) (r0 *request.Request, r1 *robomaker.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.TagResourceOutput)
	return
}

func (d *RoboMakerDouble) TagResourceWithContext(i0 context.Context, i1 *robomaker.TagResourceInput, i2 ...request.Option) (r0 *robomaker.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeTagResourceWithContext(ctx context.Context, in *robomaker.TagResourceInput, _ ...request.Option) (*robomaker.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *RoboMakerDouble) UntagResource(i0 *robomaker.UntagResourceInput) (r0 *robomaker.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*robomaker.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) UntagResourceRequest(i0 *robomaker.UntagResourceInput) (r0 *request.Request, r1 *robomaker.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.UntagResourceOutput)
	return
}

func (d *RoboMakerDouble) UntagResourceWithContext(i0 context.Context, i1 *robomaker.UntagResourceInput, i2 ...request.Option) (r0 *robomaker.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeUntagResourceWithContext(ctx context.Context, in *robomaker.UntagResourceInput, _ ...request.Option) (*robomaker.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *RoboMakerDouble) UpdateRobotApplication(i0 *robomaker.UpdateRobotApplicationInput) (r0 *robomaker.UpdateRobotApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRobotApplication", i0)
	r0, _ = returns[0].(*robomaker.UpdateRobotApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) UpdateRobotApplicationRequest(i0 *robomaker.UpdateRobotApplicationInput) (r0 *request.Request, r1 *robomaker.UpdateRobotApplicationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRobotApplicationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.UpdateRobotApplicationOutput)
	return
}

func (d *RoboMakerDouble) UpdateRobotApplicationWithContext(i0 context.Context, i1 *robomaker.UpdateRobotApplicationInput, i2 ...request.Option) (r0 *robomaker.UpdateRobotApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRobotApplicationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.UpdateRobotApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeUpdateRobotApplicationWithContext(ctx context.Context, in *robomaker.UpdateRobotApplicationInput, _ ...request.Option) (*robomaker.UpdateRobotApplicationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateRobotApplication cancelled", ctx.Err())
	default:
		return d.UpdateRobotApplication(in)
	}
}

func (d *RoboMakerDouble) UpdateSimulationApplication(i0 *robomaker.UpdateSimulationApplicationInput) (r0 *robomaker.UpdateSimulationApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSimulationApplication", i0)
	r0, _ = returns[0].(*robomaker.UpdateSimulationApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) UpdateSimulationApplicationRequest(i0 *robomaker.UpdateSimulationApplicationInput) (r0 *request.Request, r1 *robomaker.UpdateSimulationApplicationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSimulationApplicationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*robomaker.UpdateSimulationApplicationOutput)
	return
}

func (d *RoboMakerDouble) UpdateSimulationApplicationWithContext(i0 context.Context, i1 *robomaker.UpdateSimulationApplicationInput, i2 ...request.Option) (r0 *robomaker.UpdateSimulationApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSimulationApplicationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*robomaker.UpdateSimulationApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RoboMakerDouble) fakeUpdateSimulationApplicationWithContext(ctx context.Context, in *robomaker.UpdateSimulationApplicationInput, _ ...request.Option) (*robomaker.UpdateSimulationApplicationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateSimulationApplication cancelled", ctx.Err())
	default:
		return d.UpdateSimulationApplication(in)
	}
}
