// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:13:30+11:00

// Package kinesisvideoarchivedmediadouble provides a TestDouble implementation of kinesisvideoarchivedmediaiface.KinesisVideoArchivedMediaAPI
package kinesisvideoarchivedmediadouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/kinesisvideoarchivedmedia"
	"github.com/aws/aws-sdk-go/service/kinesisvideoarchivedmedia/kinesisvideoarchivedmediaiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// KinesisVideoArchivedMediaDouble is TestDouble for kinesisvideoarchivedmediaiface.KinesisVideoArchivedMediaAPI
type KinesisVideoArchivedMediaDouble struct {
	kinesisvideoarchivedmediaiface.KinesisVideoArchivedMediaAPI
	*awsdouble.AWSTestDouble
}

// Constructor for KinesisVideoArchivedMediaDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *KinesisVideoArchivedMediaDouble {
	result := &KinesisVideoArchivedMediaDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*kinesisvideoarchivedmediaiface.KinesisVideoArchivedMediaAPI)(nil), configurators...)
	return result
}

func (d *KinesisVideoArchivedMediaDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *KinesisVideoArchivedMediaDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "GetDASHStreamingSessionURLWithContext":
		return m.Fake(d.fakeGetDASHStreamingSessionURLWithContext)

	case "GetHLSStreamingSessionURLWithContext":
		return m.Fake(d.fakeGetHLSStreamingSessionURLWithContext)

	case "GetMediaForFragmentListWithContext":
		return m.Fake(d.fakeGetMediaForFragmentListWithContext)

	case "ListFragmentsPages":
		return m.Fake(d.fakeListFragmentsPages)

	case "ListFragmentsPagesWithContext":
		return m.Fake(d.fakeListFragmentsPagesWithContext)

	case "ListFragmentsWithContext":
		return m.Fake(d.fakeListFragmentsWithContext)

	default:
		return nil
	}
}

func (d *KinesisVideoArchivedMediaDouble) GetDASHStreamingSessionURL(i0 *kinesisvideoarchivedmedia.GetDASHStreamingSessionURLInput) (r0 *kinesisvideoarchivedmedia.GetDASHStreamingSessionURLOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDASHStreamingSessionURL", i0)
	r0, _ = returns[0].(*kinesisvideoarchivedmedia.GetDASHStreamingSessionURLOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoArchivedMediaDouble) GetDASHStreamingSessionURLRequest(i0 *kinesisvideoarchivedmedia.GetDASHStreamingSessionURLInput) (r0 *request.Request, r1 *kinesisvideoarchivedmedia.GetDASHStreamingSessionURLOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDASHStreamingSessionURLRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisvideoarchivedmedia.GetDASHStreamingSessionURLOutput)
	return
}

func (d *KinesisVideoArchivedMediaDouble) GetDASHStreamingSessionURLWithContext(i0 context.Context, i1 *kinesisvideoarchivedmedia.GetDASHStreamingSessionURLInput, i2 ...request.Option) (r0 *kinesisvideoarchivedmedia.GetDASHStreamingSessionURLOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDASHStreamingSessionURLWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisvideoarchivedmedia.GetDASHStreamingSessionURLOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoArchivedMediaDouble) fakeGetDASHStreamingSessionURLWithContext(ctx context.Context, in *kinesisvideoarchivedmedia.GetDASHStreamingSessionURLInput, _ ...request.Option) (*kinesisvideoarchivedmedia.GetDASHStreamingSessionURLOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDASHStreamingSessionURL cancelled", ctx.Err())
	default:
		return d.GetDASHStreamingSessionURL(in)
	}
}

func (d *KinesisVideoArchivedMediaDouble) GetHLSStreamingSessionURL(i0 *kinesisvideoarchivedmedia.GetHLSStreamingSessionURLInput) (r0 *kinesisvideoarchivedmedia.GetHLSStreamingSessionURLOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetHLSStreamingSessionURL", i0)
	r0, _ = returns[0].(*kinesisvideoarchivedmedia.GetHLSStreamingSessionURLOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoArchivedMediaDouble) GetHLSStreamingSessionURLRequest(i0 *kinesisvideoarchivedmedia.GetHLSStreamingSessionURLInput) (r0 *request.Request, r1 *kinesisvideoarchivedmedia.GetHLSStreamingSessionURLOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetHLSStreamingSessionURLRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisvideoarchivedmedia.GetHLSStreamingSessionURLOutput)
	return
}

func (d *KinesisVideoArchivedMediaDouble) GetHLSStreamingSessionURLWithContext(i0 context.Context, i1 *kinesisvideoarchivedmedia.GetHLSStreamingSessionURLInput, i2 ...request.Option) (r0 *kinesisvideoarchivedmedia.GetHLSStreamingSessionURLOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetHLSStreamingSessionURLWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisvideoarchivedmedia.GetHLSStreamingSessionURLOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoArchivedMediaDouble) fakeGetHLSStreamingSessionURLWithContext(ctx context.Context, in *kinesisvideoarchivedmedia.GetHLSStreamingSessionURLInput, _ ...request.Option) (*kinesisvideoarchivedmedia.GetHLSStreamingSessionURLOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetHLSStreamingSessionURL cancelled", ctx.Err())
	default:
		return d.GetHLSStreamingSessionURL(in)
	}
}

func (d *KinesisVideoArchivedMediaDouble) GetMediaForFragmentList(i0 *kinesisvideoarchivedmedia.GetMediaForFragmentListInput) (r0 *kinesisvideoarchivedmedia.GetMediaForFragmentListOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMediaForFragmentList", i0)
	r0, _ = returns[0].(*kinesisvideoarchivedmedia.GetMediaForFragmentListOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoArchivedMediaDouble) GetMediaForFragmentListRequest(i0 *kinesisvideoarchivedmedia.GetMediaForFragmentListInput) (r0 *request.Request, r1 *kinesisvideoarchivedmedia.GetMediaForFragmentListOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMediaForFragmentListRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisvideoarchivedmedia.GetMediaForFragmentListOutput)
	return
}

func (d *KinesisVideoArchivedMediaDouble) GetMediaForFragmentListWithContext(i0 context.Context, i1 *kinesisvideoarchivedmedia.GetMediaForFragmentListInput, i2 ...request.Option) (r0 *kinesisvideoarchivedmedia.GetMediaForFragmentListOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMediaForFragmentListWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisvideoarchivedmedia.GetMediaForFragmentListOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoArchivedMediaDouble) fakeGetMediaForFragmentListWithContext(ctx context.Context, in *kinesisvideoarchivedmedia.GetMediaForFragmentListInput, _ ...request.Option) (*kinesisvideoarchivedmedia.GetMediaForFragmentListOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetMediaForFragmentList cancelled", ctx.Err())
	default:
		return d.GetMediaForFragmentList(in)
	}
}

func (d *KinesisVideoArchivedMediaDouble) ListFragments(i0 *kinesisvideoarchivedmedia.ListFragmentsInput) (r0 *kinesisvideoarchivedmedia.ListFragmentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFragments", i0)
	r0, _ = returns[0].(*kinesisvideoarchivedmedia.ListFragmentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoArchivedMediaDouble) ListFragmentsPages(i0 *kinesisvideoarchivedmedia.ListFragmentsInput, i1 func(*kinesisvideoarchivedmedia.ListFragmentsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFragmentsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *KinesisVideoArchivedMediaDouble) fakeListFragmentsPages(in *kinesisvideoarchivedmedia.ListFragmentsInput, pager func(*kinesisvideoarchivedmedia.ListFragmentsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListFragments", paginators, in, pager)
}

func (d *KinesisVideoArchivedMediaDouble) ListFragmentsPagesWithContext(i0 context.Context, i1 *kinesisvideoarchivedmedia.ListFragmentsInput, i2 func(*kinesisvideoarchivedmedia.ListFragmentsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFragmentsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *KinesisVideoArchivedMediaDouble) fakeListFragmentsPagesWithContext(ctx context.Context, in *kinesisvideoarchivedmedia.ListFragmentsInput, pager func(*kinesisvideoarchivedmedia.ListFragmentsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListFragments", paginators, ctx, in, pager, options...)
}

func (d *KinesisVideoArchivedMediaDouble) ListFragmentsRequest(i0 *kinesisvideoarchivedmedia.ListFragmentsInput) (r0 *request.Request, r1 *kinesisvideoarchivedmedia.ListFragmentsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFragmentsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisvideoarchivedmedia.ListFragmentsOutput)
	return
}

func (d *KinesisVideoArchivedMediaDouble) ListFragmentsWithContext(i0 context.Context, i1 *kinesisvideoarchivedmedia.ListFragmentsInput, i2 ...request.Option) (r0 *kinesisvideoarchivedmedia.ListFragmentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFragmentsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisvideoarchivedmedia.ListFragmentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoArchivedMediaDouble) fakeListFragmentsWithContext(ctx context.Context, in *kinesisvideoarchivedmedia.ListFragmentsInput, _ ...request.Option) (*kinesisvideoarchivedmedia.ListFragmentsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListFragments cancelled", ctx.Err())
	default:
		return d.ListFragments(in)
	}
}
