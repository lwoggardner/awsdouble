// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:11:58+11:00

// Package cognitoidentityproviderdouble provides a TestDouble implementation of cognitoidentityprovideriface.CognitoIdentityProviderAPI
package cognitoidentityproviderdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/cognitoidentityprovider"
	"github.com/aws/aws-sdk-go/service/cognitoidentityprovider/cognitoidentityprovideriface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// CognitoIdentityProviderDouble is TestDouble for cognitoidentityprovideriface.CognitoIdentityProviderAPI
type CognitoIdentityProviderDouble struct {
	cognitoidentityprovideriface.CognitoIdentityProviderAPI
	*awsdouble.AWSTestDouble
}

// Constructor for CognitoIdentityProviderDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *CognitoIdentityProviderDouble {
	result := &CognitoIdentityProviderDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*cognitoidentityprovideriface.CognitoIdentityProviderAPI)(nil), configurators...)
	return result
}

func (d *CognitoIdentityProviderDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *CognitoIdentityProviderDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AddCustomAttributesWithContext":
		return m.Fake(d.fakeAddCustomAttributesWithContext)

	case "AdminAddUserToGroupWithContext":
		return m.Fake(d.fakeAdminAddUserToGroupWithContext)

	case "AdminConfirmSignUpWithContext":
		return m.Fake(d.fakeAdminConfirmSignUpWithContext)

	case "AdminCreateUserWithContext":
		return m.Fake(d.fakeAdminCreateUserWithContext)

	case "AdminDeleteUserAttributesWithContext":
		return m.Fake(d.fakeAdminDeleteUserAttributesWithContext)

	case "AdminDeleteUserWithContext":
		return m.Fake(d.fakeAdminDeleteUserWithContext)

	case "AdminDisableProviderForUserWithContext":
		return m.Fake(d.fakeAdminDisableProviderForUserWithContext)

	case "AdminDisableUserWithContext":
		return m.Fake(d.fakeAdminDisableUserWithContext)

	case "AdminEnableUserWithContext":
		return m.Fake(d.fakeAdminEnableUserWithContext)

	case "AdminForgetDeviceWithContext":
		return m.Fake(d.fakeAdminForgetDeviceWithContext)

	case "AdminGetDeviceWithContext":
		return m.Fake(d.fakeAdminGetDeviceWithContext)

	case "AdminGetUserWithContext":
		return m.Fake(d.fakeAdminGetUserWithContext)

	case "AdminInitiateAuthWithContext":
		return m.Fake(d.fakeAdminInitiateAuthWithContext)

	case "AdminLinkProviderForUserWithContext":
		return m.Fake(d.fakeAdminLinkProviderForUserWithContext)

	case "AdminListDevicesWithContext":
		return m.Fake(d.fakeAdminListDevicesWithContext)

	case "AdminListGroupsForUserPages":
		return m.Fake(d.fakeAdminListGroupsForUserPages)

	case "AdminListGroupsForUserPagesWithContext":
		return m.Fake(d.fakeAdminListGroupsForUserPagesWithContext)

	case "AdminListGroupsForUserWithContext":
		return m.Fake(d.fakeAdminListGroupsForUserWithContext)

	case "AdminListUserAuthEventsPages":
		return m.Fake(d.fakeAdminListUserAuthEventsPages)

	case "AdminListUserAuthEventsPagesWithContext":
		return m.Fake(d.fakeAdminListUserAuthEventsPagesWithContext)

	case "AdminListUserAuthEventsWithContext":
		return m.Fake(d.fakeAdminListUserAuthEventsWithContext)

	case "AdminRemoveUserFromGroupWithContext":
		return m.Fake(d.fakeAdminRemoveUserFromGroupWithContext)

	case "AdminResetUserPasswordWithContext":
		return m.Fake(d.fakeAdminResetUserPasswordWithContext)

	case "AdminRespondToAuthChallengeWithContext":
		return m.Fake(d.fakeAdminRespondToAuthChallengeWithContext)

	case "AdminSetUserMFAPreferenceWithContext":
		return m.Fake(d.fakeAdminSetUserMFAPreferenceWithContext)

	case "AdminSetUserPasswordWithContext":
		return m.Fake(d.fakeAdminSetUserPasswordWithContext)

	case "AdminSetUserSettingsWithContext":
		return m.Fake(d.fakeAdminSetUserSettingsWithContext)

	case "AdminUpdateAuthEventFeedbackWithContext":
		return m.Fake(d.fakeAdminUpdateAuthEventFeedbackWithContext)

	case "AdminUpdateDeviceStatusWithContext":
		return m.Fake(d.fakeAdminUpdateDeviceStatusWithContext)

	case "AdminUpdateUserAttributesWithContext":
		return m.Fake(d.fakeAdminUpdateUserAttributesWithContext)

	case "AdminUserGlobalSignOutWithContext":
		return m.Fake(d.fakeAdminUserGlobalSignOutWithContext)

	case "AssociateSoftwareTokenWithContext":
		return m.Fake(d.fakeAssociateSoftwareTokenWithContext)

	case "ChangePasswordWithContext":
		return m.Fake(d.fakeChangePasswordWithContext)

	case "ConfirmDeviceWithContext":
		return m.Fake(d.fakeConfirmDeviceWithContext)

	case "ConfirmForgotPasswordWithContext":
		return m.Fake(d.fakeConfirmForgotPasswordWithContext)

	case "ConfirmSignUpWithContext":
		return m.Fake(d.fakeConfirmSignUpWithContext)

	case "CreateGroupWithContext":
		return m.Fake(d.fakeCreateGroupWithContext)

	case "CreateIdentityProviderWithContext":
		return m.Fake(d.fakeCreateIdentityProviderWithContext)

	case "CreateResourceServerWithContext":
		return m.Fake(d.fakeCreateResourceServerWithContext)

	case "CreateUserImportJobWithContext":
		return m.Fake(d.fakeCreateUserImportJobWithContext)

	case "CreateUserPoolClientWithContext":
		return m.Fake(d.fakeCreateUserPoolClientWithContext)

	case "CreateUserPoolDomainWithContext":
		return m.Fake(d.fakeCreateUserPoolDomainWithContext)

	case "CreateUserPoolWithContext":
		return m.Fake(d.fakeCreateUserPoolWithContext)

	case "DeleteGroupWithContext":
		return m.Fake(d.fakeDeleteGroupWithContext)

	case "DeleteIdentityProviderWithContext":
		return m.Fake(d.fakeDeleteIdentityProviderWithContext)

	case "DeleteResourceServerWithContext":
		return m.Fake(d.fakeDeleteResourceServerWithContext)

	case "DeleteUserAttributesWithContext":
		return m.Fake(d.fakeDeleteUserAttributesWithContext)

	case "DeleteUserPoolClientWithContext":
		return m.Fake(d.fakeDeleteUserPoolClientWithContext)

	case "DeleteUserPoolDomainWithContext":
		return m.Fake(d.fakeDeleteUserPoolDomainWithContext)

	case "DeleteUserPoolWithContext":
		return m.Fake(d.fakeDeleteUserPoolWithContext)

	case "DeleteUserWithContext":
		return m.Fake(d.fakeDeleteUserWithContext)

	case "DescribeIdentityProviderWithContext":
		return m.Fake(d.fakeDescribeIdentityProviderWithContext)

	case "DescribeResourceServerWithContext":
		return m.Fake(d.fakeDescribeResourceServerWithContext)

	case "DescribeRiskConfigurationWithContext":
		return m.Fake(d.fakeDescribeRiskConfigurationWithContext)

	case "DescribeUserImportJobWithContext":
		return m.Fake(d.fakeDescribeUserImportJobWithContext)

	case "DescribeUserPoolClientWithContext":
		return m.Fake(d.fakeDescribeUserPoolClientWithContext)

	case "DescribeUserPoolDomainWithContext":
		return m.Fake(d.fakeDescribeUserPoolDomainWithContext)

	case "DescribeUserPoolWithContext":
		return m.Fake(d.fakeDescribeUserPoolWithContext)

	case "ForgetDeviceWithContext":
		return m.Fake(d.fakeForgetDeviceWithContext)

	case "ForgotPasswordWithContext":
		return m.Fake(d.fakeForgotPasswordWithContext)

	case "GetCSVHeaderWithContext":
		return m.Fake(d.fakeGetCSVHeaderWithContext)

	case "GetDeviceWithContext":
		return m.Fake(d.fakeGetDeviceWithContext)

	case "GetGroupWithContext":
		return m.Fake(d.fakeGetGroupWithContext)

	case "GetIdentityProviderByIdentifierWithContext":
		return m.Fake(d.fakeGetIdentityProviderByIdentifierWithContext)

	case "GetSigningCertificateWithContext":
		return m.Fake(d.fakeGetSigningCertificateWithContext)

	case "GetUICustomizationWithContext":
		return m.Fake(d.fakeGetUICustomizationWithContext)

	case "GetUserAttributeVerificationCodeWithContext":
		return m.Fake(d.fakeGetUserAttributeVerificationCodeWithContext)

	case "GetUserPoolMfaConfigWithContext":
		return m.Fake(d.fakeGetUserPoolMfaConfigWithContext)

	case "GetUserWithContext":
		return m.Fake(d.fakeGetUserWithContext)

	case "GlobalSignOutWithContext":
		return m.Fake(d.fakeGlobalSignOutWithContext)

	case "InitiateAuthWithContext":
		return m.Fake(d.fakeInitiateAuthWithContext)

	case "ListDevicesWithContext":
		return m.Fake(d.fakeListDevicesWithContext)

	case "ListGroupsPages":
		return m.Fake(d.fakeListGroupsPages)

	case "ListGroupsPagesWithContext":
		return m.Fake(d.fakeListGroupsPagesWithContext)

	case "ListGroupsWithContext":
		return m.Fake(d.fakeListGroupsWithContext)

	case "ListIdentityProvidersPages":
		return m.Fake(d.fakeListIdentityProvidersPages)

	case "ListIdentityProvidersPagesWithContext":
		return m.Fake(d.fakeListIdentityProvidersPagesWithContext)

	case "ListIdentityProvidersWithContext":
		return m.Fake(d.fakeListIdentityProvidersWithContext)

	case "ListResourceServersPages":
		return m.Fake(d.fakeListResourceServersPages)

	case "ListResourceServersPagesWithContext":
		return m.Fake(d.fakeListResourceServersPagesWithContext)

	case "ListResourceServersWithContext":
		return m.Fake(d.fakeListResourceServersWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "ListUserImportJobsWithContext":
		return m.Fake(d.fakeListUserImportJobsWithContext)

	case "ListUserPoolClientsPages":
		return m.Fake(d.fakeListUserPoolClientsPages)

	case "ListUserPoolClientsPagesWithContext":
		return m.Fake(d.fakeListUserPoolClientsPagesWithContext)

	case "ListUserPoolClientsWithContext":
		return m.Fake(d.fakeListUserPoolClientsWithContext)

	case "ListUserPoolsPages":
		return m.Fake(d.fakeListUserPoolsPages)

	case "ListUserPoolsPagesWithContext":
		return m.Fake(d.fakeListUserPoolsPagesWithContext)

	case "ListUserPoolsWithContext":
		return m.Fake(d.fakeListUserPoolsWithContext)

	case "ListUsersInGroupPages":
		return m.Fake(d.fakeListUsersInGroupPages)

	case "ListUsersInGroupPagesWithContext":
		return m.Fake(d.fakeListUsersInGroupPagesWithContext)

	case "ListUsersInGroupWithContext":
		return m.Fake(d.fakeListUsersInGroupWithContext)

	case "ListUsersPages":
		return m.Fake(d.fakeListUsersPages)

	case "ListUsersPagesWithContext":
		return m.Fake(d.fakeListUsersPagesWithContext)

	case "ListUsersWithContext":
		return m.Fake(d.fakeListUsersWithContext)

	case "ResendConfirmationCodeWithContext":
		return m.Fake(d.fakeResendConfirmationCodeWithContext)

	case "RespondToAuthChallengeWithContext":
		return m.Fake(d.fakeRespondToAuthChallengeWithContext)

	case "SetRiskConfigurationWithContext":
		return m.Fake(d.fakeSetRiskConfigurationWithContext)

	case "SetUICustomizationWithContext":
		return m.Fake(d.fakeSetUICustomizationWithContext)

	case "SetUserMFAPreferenceWithContext":
		return m.Fake(d.fakeSetUserMFAPreferenceWithContext)

	case "SetUserPoolMfaConfigWithContext":
		return m.Fake(d.fakeSetUserPoolMfaConfigWithContext)

	case "SetUserSettingsWithContext":
		return m.Fake(d.fakeSetUserSettingsWithContext)

	case "SignUpWithContext":
		return m.Fake(d.fakeSignUpWithContext)

	case "StartUserImportJobWithContext":
		return m.Fake(d.fakeStartUserImportJobWithContext)

	case "StopUserImportJobWithContext":
		return m.Fake(d.fakeStopUserImportJobWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateAuthEventFeedbackWithContext":
		return m.Fake(d.fakeUpdateAuthEventFeedbackWithContext)

	case "UpdateDeviceStatusWithContext":
		return m.Fake(d.fakeUpdateDeviceStatusWithContext)

	case "UpdateGroupWithContext":
		return m.Fake(d.fakeUpdateGroupWithContext)

	case "UpdateIdentityProviderWithContext":
		return m.Fake(d.fakeUpdateIdentityProviderWithContext)

	case "UpdateResourceServerWithContext":
		return m.Fake(d.fakeUpdateResourceServerWithContext)

	case "UpdateUserAttributesWithContext":
		return m.Fake(d.fakeUpdateUserAttributesWithContext)

	case "UpdateUserPoolClientWithContext":
		return m.Fake(d.fakeUpdateUserPoolClientWithContext)

	case "UpdateUserPoolDomainWithContext":
		return m.Fake(d.fakeUpdateUserPoolDomainWithContext)

	case "UpdateUserPoolWithContext":
		return m.Fake(d.fakeUpdateUserPoolWithContext)

	case "VerifySoftwareTokenWithContext":
		return m.Fake(d.fakeVerifySoftwareTokenWithContext)

	case "VerifyUserAttributeWithContext":
		return m.Fake(d.fakeVerifyUserAttributeWithContext)

	default:
		return nil
	}
}

func (d *CognitoIdentityProviderDouble) AddCustomAttributes(i0 *cognitoidentityprovider.AddCustomAttributesInput) (r0 *cognitoidentityprovider.AddCustomAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddCustomAttributes", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.AddCustomAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) AddCustomAttributesRequest(i0 *cognitoidentityprovider.AddCustomAttributesInput) (r0 *request.Request, r1 *cognitoidentityprovider.AddCustomAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddCustomAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.AddCustomAttributesOutput)
	return
}

func (d *CognitoIdentityProviderDouble) AddCustomAttributesWithContext(i0 context.Context, i1 *cognitoidentityprovider.AddCustomAttributesInput, i2 ...request.Option) (r0 *cognitoidentityprovider.AddCustomAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddCustomAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.AddCustomAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeAddCustomAttributesWithContext(ctx context.Context, in *cognitoidentityprovider.AddCustomAttributesInput, _ ...request.Option) (*cognitoidentityprovider.AddCustomAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddCustomAttributes cancelled", ctx.Err())
	default:
		return d.AddCustomAttributes(in)
	}
}

func (d *CognitoIdentityProviderDouble) AdminAddUserToGroup(i0 *cognitoidentityprovider.AdminAddUserToGroupInput) (r0 *cognitoidentityprovider.AdminAddUserToGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminAddUserToGroup", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminAddUserToGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) AdminAddUserToGroupRequest(i0 *cognitoidentityprovider.AdminAddUserToGroupInput) (r0 *request.Request, r1 *cognitoidentityprovider.AdminAddUserToGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminAddUserToGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.AdminAddUserToGroupOutput)
	return
}

func (d *CognitoIdentityProviderDouble) AdminAddUserToGroupWithContext(i0 context.Context, i1 *cognitoidentityprovider.AdminAddUserToGroupInput, i2 ...request.Option) (r0 *cognitoidentityprovider.AdminAddUserToGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminAddUserToGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminAddUserToGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeAdminAddUserToGroupWithContext(ctx context.Context, in *cognitoidentityprovider.AdminAddUserToGroupInput, _ ...request.Option) (*cognitoidentityprovider.AdminAddUserToGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AdminAddUserToGroup cancelled", ctx.Err())
	default:
		return d.AdminAddUserToGroup(in)
	}
}

func (d *CognitoIdentityProviderDouble) AdminConfirmSignUp(i0 *cognitoidentityprovider.AdminConfirmSignUpInput) (r0 *cognitoidentityprovider.AdminConfirmSignUpOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminConfirmSignUp", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminConfirmSignUpOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) AdminConfirmSignUpRequest(i0 *cognitoidentityprovider.AdminConfirmSignUpInput) (r0 *request.Request, r1 *cognitoidentityprovider.AdminConfirmSignUpOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminConfirmSignUpRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.AdminConfirmSignUpOutput)
	return
}

func (d *CognitoIdentityProviderDouble) AdminConfirmSignUpWithContext(i0 context.Context, i1 *cognitoidentityprovider.AdminConfirmSignUpInput, i2 ...request.Option) (r0 *cognitoidentityprovider.AdminConfirmSignUpOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminConfirmSignUpWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminConfirmSignUpOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeAdminConfirmSignUpWithContext(ctx context.Context, in *cognitoidentityprovider.AdminConfirmSignUpInput, _ ...request.Option) (*cognitoidentityprovider.AdminConfirmSignUpOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AdminConfirmSignUp cancelled", ctx.Err())
	default:
		return d.AdminConfirmSignUp(in)
	}
}

func (d *CognitoIdentityProviderDouble) AdminCreateUser(i0 *cognitoidentityprovider.AdminCreateUserInput) (r0 *cognitoidentityprovider.AdminCreateUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminCreateUser", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminCreateUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) AdminCreateUserRequest(i0 *cognitoidentityprovider.AdminCreateUserInput) (r0 *request.Request, r1 *cognitoidentityprovider.AdminCreateUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminCreateUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.AdminCreateUserOutput)
	return
}

func (d *CognitoIdentityProviderDouble) AdminCreateUserWithContext(i0 context.Context, i1 *cognitoidentityprovider.AdminCreateUserInput, i2 ...request.Option) (r0 *cognitoidentityprovider.AdminCreateUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminCreateUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminCreateUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeAdminCreateUserWithContext(ctx context.Context, in *cognitoidentityprovider.AdminCreateUserInput, _ ...request.Option) (*cognitoidentityprovider.AdminCreateUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AdminCreateUser cancelled", ctx.Err())
	default:
		return d.AdminCreateUser(in)
	}
}

func (d *CognitoIdentityProviderDouble) AdminDeleteUser(i0 *cognitoidentityprovider.AdminDeleteUserInput) (r0 *cognitoidentityprovider.AdminDeleteUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminDeleteUser", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminDeleteUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) AdminDeleteUserAttributes(i0 *cognitoidentityprovider.AdminDeleteUserAttributesInput) (r0 *cognitoidentityprovider.AdminDeleteUserAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminDeleteUserAttributes", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminDeleteUserAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) AdminDeleteUserAttributesRequest(i0 *cognitoidentityprovider.AdminDeleteUserAttributesInput) (r0 *request.Request, r1 *cognitoidentityprovider.AdminDeleteUserAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminDeleteUserAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.AdminDeleteUserAttributesOutput)
	return
}

func (d *CognitoIdentityProviderDouble) AdminDeleteUserAttributesWithContext(i0 context.Context, i1 *cognitoidentityprovider.AdminDeleteUserAttributesInput, i2 ...request.Option) (r0 *cognitoidentityprovider.AdminDeleteUserAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminDeleteUserAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminDeleteUserAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeAdminDeleteUserAttributesWithContext(ctx context.Context, in *cognitoidentityprovider.AdminDeleteUserAttributesInput, _ ...request.Option) (*cognitoidentityprovider.AdminDeleteUserAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AdminDeleteUserAttributes cancelled", ctx.Err())
	default:
		return d.AdminDeleteUserAttributes(in)
	}
}

func (d *CognitoIdentityProviderDouble) AdminDeleteUserRequest(i0 *cognitoidentityprovider.AdminDeleteUserInput) (r0 *request.Request, r1 *cognitoidentityprovider.AdminDeleteUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminDeleteUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.AdminDeleteUserOutput)
	return
}

func (d *CognitoIdentityProviderDouble) AdminDeleteUserWithContext(i0 context.Context, i1 *cognitoidentityprovider.AdminDeleteUserInput, i2 ...request.Option) (r0 *cognitoidentityprovider.AdminDeleteUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminDeleteUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminDeleteUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeAdminDeleteUserWithContext(ctx context.Context, in *cognitoidentityprovider.AdminDeleteUserInput, _ ...request.Option) (*cognitoidentityprovider.AdminDeleteUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AdminDeleteUser cancelled", ctx.Err())
	default:
		return d.AdminDeleteUser(in)
	}
}

func (d *CognitoIdentityProviderDouble) AdminDisableProviderForUser(i0 *cognitoidentityprovider.AdminDisableProviderForUserInput) (r0 *cognitoidentityprovider.AdminDisableProviderForUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminDisableProviderForUser", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminDisableProviderForUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) AdminDisableProviderForUserRequest(i0 *cognitoidentityprovider.AdminDisableProviderForUserInput) (r0 *request.Request, r1 *cognitoidentityprovider.AdminDisableProviderForUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminDisableProviderForUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.AdminDisableProviderForUserOutput)
	return
}

func (d *CognitoIdentityProviderDouble) AdminDisableProviderForUserWithContext(i0 context.Context, i1 *cognitoidentityprovider.AdminDisableProviderForUserInput, i2 ...request.Option) (r0 *cognitoidentityprovider.AdminDisableProviderForUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminDisableProviderForUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminDisableProviderForUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeAdminDisableProviderForUserWithContext(ctx context.Context, in *cognitoidentityprovider.AdminDisableProviderForUserInput, _ ...request.Option) (*cognitoidentityprovider.AdminDisableProviderForUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AdminDisableProviderForUser cancelled", ctx.Err())
	default:
		return d.AdminDisableProviderForUser(in)
	}
}

func (d *CognitoIdentityProviderDouble) AdminDisableUser(i0 *cognitoidentityprovider.AdminDisableUserInput) (r0 *cognitoidentityprovider.AdminDisableUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminDisableUser", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminDisableUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) AdminDisableUserRequest(i0 *cognitoidentityprovider.AdminDisableUserInput) (r0 *request.Request, r1 *cognitoidentityprovider.AdminDisableUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminDisableUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.AdminDisableUserOutput)
	return
}

func (d *CognitoIdentityProviderDouble) AdminDisableUserWithContext(i0 context.Context, i1 *cognitoidentityprovider.AdminDisableUserInput, i2 ...request.Option) (r0 *cognitoidentityprovider.AdminDisableUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminDisableUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminDisableUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeAdminDisableUserWithContext(ctx context.Context, in *cognitoidentityprovider.AdminDisableUserInput, _ ...request.Option) (*cognitoidentityprovider.AdminDisableUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AdminDisableUser cancelled", ctx.Err())
	default:
		return d.AdminDisableUser(in)
	}
}

func (d *CognitoIdentityProviderDouble) AdminEnableUser(i0 *cognitoidentityprovider.AdminEnableUserInput) (r0 *cognitoidentityprovider.AdminEnableUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminEnableUser", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminEnableUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) AdminEnableUserRequest(i0 *cognitoidentityprovider.AdminEnableUserInput) (r0 *request.Request, r1 *cognitoidentityprovider.AdminEnableUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminEnableUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.AdminEnableUserOutput)
	return
}

func (d *CognitoIdentityProviderDouble) AdminEnableUserWithContext(i0 context.Context, i1 *cognitoidentityprovider.AdminEnableUserInput, i2 ...request.Option) (r0 *cognitoidentityprovider.AdminEnableUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminEnableUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminEnableUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeAdminEnableUserWithContext(ctx context.Context, in *cognitoidentityprovider.AdminEnableUserInput, _ ...request.Option) (*cognitoidentityprovider.AdminEnableUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AdminEnableUser cancelled", ctx.Err())
	default:
		return d.AdminEnableUser(in)
	}
}

func (d *CognitoIdentityProviderDouble) AdminForgetDevice(i0 *cognitoidentityprovider.AdminForgetDeviceInput) (r0 *cognitoidentityprovider.AdminForgetDeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminForgetDevice", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminForgetDeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) AdminForgetDeviceRequest(i0 *cognitoidentityprovider.AdminForgetDeviceInput) (r0 *request.Request, r1 *cognitoidentityprovider.AdminForgetDeviceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminForgetDeviceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.AdminForgetDeviceOutput)
	return
}

func (d *CognitoIdentityProviderDouble) AdminForgetDeviceWithContext(i0 context.Context, i1 *cognitoidentityprovider.AdminForgetDeviceInput, i2 ...request.Option) (r0 *cognitoidentityprovider.AdminForgetDeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminForgetDeviceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminForgetDeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeAdminForgetDeviceWithContext(ctx context.Context, in *cognitoidentityprovider.AdminForgetDeviceInput, _ ...request.Option) (*cognitoidentityprovider.AdminForgetDeviceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AdminForgetDevice cancelled", ctx.Err())
	default:
		return d.AdminForgetDevice(in)
	}
}

func (d *CognitoIdentityProviderDouble) AdminGetDevice(i0 *cognitoidentityprovider.AdminGetDeviceInput) (r0 *cognitoidentityprovider.AdminGetDeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminGetDevice", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminGetDeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) AdminGetDeviceRequest(i0 *cognitoidentityprovider.AdminGetDeviceInput) (r0 *request.Request, r1 *cognitoidentityprovider.AdminGetDeviceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminGetDeviceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.AdminGetDeviceOutput)
	return
}

func (d *CognitoIdentityProviderDouble) AdminGetDeviceWithContext(i0 context.Context, i1 *cognitoidentityprovider.AdminGetDeviceInput, i2 ...request.Option) (r0 *cognitoidentityprovider.AdminGetDeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminGetDeviceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminGetDeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeAdminGetDeviceWithContext(ctx context.Context, in *cognitoidentityprovider.AdminGetDeviceInput, _ ...request.Option) (*cognitoidentityprovider.AdminGetDeviceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AdminGetDevice cancelled", ctx.Err())
	default:
		return d.AdminGetDevice(in)
	}
}

func (d *CognitoIdentityProviderDouble) AdminGetUser(i0 *cognitoidentityprovider.AdminGetUserInput) (r0 *cognitoidentityprovider.AdminGetUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminGetUser", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminGetUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) AdminGetUserRequest(i0 *cognitoidentityprovider.AdminGetUserInput) (r0 *request.Request, r1 *cognitoidentityprovider.AdminGetUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminGetUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.AdminGetUserOutput)
	return
}

func (d *CognitoIdentityProviderDouble) AdminGetUserWithContext(i0 context.Context, i1 *cognitoidentityprovider.AdminGetUserInput, i2 ...request.Option) (r0 *cognitoidentityprovider.AdminGetUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminGetUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminGetUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeAdminGetUserWithContext(ctx context.Context, in *cognitoidentityprovider.AdminGetUserInput, _ ...request.Option) (*cognitoidentityprovider.AdminGetUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AdminGetUser cancelled", ctx.Err())
	default:
		return d.AdminGetUser(in)
	}
}

func (d *CognitoIdentityProviderDouble) AdminInitiateAuth(i0 *cognitoidentityprovider.AdminInitiateAuthInput) (r0 *cognitoidentityprovider.AdminInitiateAuthOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminInitiateAuth", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminInitiateAuthOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) AdminInitiateAuthRequest(i0 *cognitoidentityprovider.AdminInitiateAuthInput) (r0 *request.Request, r1 *cognitoidentityprovider.AdminInitiateAuthOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminInitiateAuthRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.AdminInitiateAuthOutput)
	return
}

func (d *CognitoIdentityProviderDouble) AdminInitiateAuthWithContext(i0 context.Context, i1 *cognitoidentityprovider.AdminInitiateAuthInput, i2 ...request.Option) (r0 *cognitoidentityprovider.AdminInitiateAuthOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminInitiateAuthWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminInitiateAuthOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeAdminInitiateAuthWithContext(ctx context.Context, in *cognitoidentityprovider.AdminInitiateAuthInput, _ ...request.Option) (*cognitoidentityprovider.AdminInitiateAuthOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AdminInitiateAuth cancelled", ctx.Err())
	default:
		return d.AdminInitiateAuth(in)
	}
}

func (d *CognitoIdentityProviderDouble) AdminLinkProviderForUser(i0 *cognitoidentityprovider.AdminLinkProviderForUserInput) (r0 *cognitoidentityprovider.AdminLinkProviderForUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminLinkProviderForUser", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminLinkProviderForUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) AdminLinkProviderForUserRequest(i0 *cognitoidentityprovider.AdminLinkProviderForUserInput) (r0 *request.Request, r1 *cognitoidentityprovider.AdminLinkProviderForUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminLinkProviderForUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.AdminLinkProviderForUserOutput)
	return
}

func (d *CognitoIdentityProviderDouble) AdminLinkProviderForUserWithContext(i0 context.Context, i1 *cognitoidentityprovider.AdminLinkProviderForUserInput, i2 ...request.Option) (r0 *cognitoidentityprovider.AdminLinkProviderForUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminLinkProviderForUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminLinkProviderForUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeAdminLinkProviderForUserWithContext(ctx context.Context, in *cognitoidentityprovider.AdminLinkProviderForUserInput, _ ...request.Option) (*cognitoidentityprovider.AdminLinkProviderForUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AdminLinkProviderForUser cancelled", ctx.Err())
	default:
		return d.AdminLinkProviderForUser(in)
	}
}

func (d *CognitoIdentityProviderDouble) AdminListDevices(i0 *cognitoidentityprovider.AdminListDevicesInput) (r0 *cognitoidentityprovider.AdminListDevicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminListDevices", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminListDevicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) AdminListDevicesRequest(i0 *cognitoidentityprovider.AdminListDevicesInput) (r0 *request.Request, r1 *cognitoidentityprovider.AdminListDevicesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminListDevicesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.AdminListDevicesOutput)
	return
}

func (d *CognitoIdentityProviderDouble) AdminListDevicesWithContext(i0 context.Context, i1 *cognitoidentityprovider.AdminListDevicesInput, i2 ...request.Option) (r0 *cognitoidentityprovider.AdminListDevicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminListDevicesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminListDevicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeAdminListDevicesWithContext(ctx context.Context, in *cognitoidentityprovider.AdminListDevicesInput, _ ...request.Option) (*cognitoidentityprovider.AdminListDevicesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AdminListDevices cancelled", ctx.Err())
	default:
		return d.AdminListDevices(in)
	}
}

func (d *CognitoIdentityProviderDouble) AdminListGroupsForUser(i0 *cognitoidentityprovider.AdminListGroupsForUserInput) (r0 *cognitoidentityprovider.AdminListGroupsForUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminListGroupsForUser", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminListGroupsForUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) AdminListGroupsForUserPages(i0 *cognitoidentityprovider.AdminListGroupsForUserInput, i1 func(*cognitoidentityprovider.AdminListGroupsForUserOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminListGroupsForUserPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeAdminListGroupsForUserPages(in *cognitoidentityprovider.AdminListGroupsForUserInput, pager func(*cognitoidentityprovider.AdminListGroupsForUserOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("AdminListGroupsForUser", paginators, in, pager)
}

func (d *CognitoIdentityProviderDouble) AdminListGroupsForUserPagesWithContext(i0 context.Context, i1 *cognitoidentityprovider.AdminListGroupsForUserInput, i2 func(*cognitoidentityprovider.AdminListGroupsForUserOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminListGroupsForUserPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeAdminListGroupsForUserPagesWithContext(ctx context.Context, in *cognitoidentityprovider.AdminListGroupsForUserInput, pager func(*cognitoidentityprovider.AdminListGroupsForUserOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("AdminListGroupsForUser", paginators, ctx, in, pager, options...)
}

func (d *CognitoIdentityProviderDouble) AdminListGroupsForUserRequest(i0 *cognitoidentityprovider.AdminListGroupsForUserInput) (r0 *request.Request, r1 *cognitoidentityprovider.AdminListGroupsForUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminListGroupsForUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.AdminListGroupsForUserOutput)
	return
}

func (d *CognitoIdentityProviderDouble) AdminListGroupsForUserWithContext(i0 context.Context, i1 *cognitoidentityprovider.AdminListGroupsForUserInput, i2 ...request.Option) (r0 *cognitoidentityprovider.AdminListGroupsForUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminListGroupsForUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminListGroupsForUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeAdminListGroupsForUserWithContext(ctx context.Context, in *cognitoidentityprovider.AdminListGroupsForUserInput, _ ...request.Option) (*cognitoidentityprovider.AdminListGroupsForUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AdminListGroupsForUser cancelled", ctx.Err())
	default:
		return d.AdminListGroupsForUser(in)
	}
}

func (d *CognitoIdentityProviderDouble) AdminListUserAuthEvents(i0 *cognitoidentityprovider.AdminListUserAuthEventsInput) (r0 *cognitoidentityprovider.AdminListUserAuthEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminListUserAuthEvents", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminListUserAuthEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) AdminListUserAuthEventsPages(i0 *cognitoidentityprovider.AdminListUserAuthEventsInput, i1 func(*cognitoidentityprovider.AdminListUserAuthEventsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminListUserAuthEventsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeAdminListUserAuthEventsPages(in *cognitoidentityprovider.AdminListUserAuthEventsInput, pager func(*cognitoidentityprovider.AdminListUserAuthEventsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("AdminListUserAuthEvents", paginators, in, pager)
}

func (d *CognitoIdentityProviderDouble) AdminListUserAuthEventsPagesWithContext(i0 context.Context, i1 *cognitoidentityprovider.AdminListUserAuthEventsInput, i2 func(*cognitoidentityprovider.AdminListUserAuthEventsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminListUserAuthEventsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeAdminListUserAuthEventsPagesWithContext(ctx context.Context, in *cognitoidentityprovider.AdminListUserAuthEventsInput, pager func(*cognitoidentityprovider.AdminListUserAuthEventsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("AdminListUserAuthEvents", paginators, ctx, in, pager, options...)
}

func (d *CognitoIdentityProviderDouble) AdminListUserAuthEventsRequest(i0 *cognitoidentityprovider.AdminListUserAuthEventsInput) (r0 *request.Request, r1 *cognitoidentityprovider.AdminListUserAuthEventsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminListUserAuthEventsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.AdminListUserAuthEventsOutput)
	return
}

func (d *CognitoIdentityProviderDouble) AdminListUserAuthEventsWithContext(i0 context.Context, i1 *cognitoidentityprovider.AdminListUserAuthEventsInput, i2 ...request.Option) (r0 *cognitoidentityprovider.AdminListUserAuthEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminListUserAuthEventsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminListUserAuthEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeAdminListUserAuthEventsWithContext(ctx context.Context, in *cognitoidentityprovider.AdminListUserAuthEventsInput, _ ...request.Option) (*cognitoidentityprovider.AdminListUserAuthEventsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AdminListUserAuthEvents cancelled", ctx.Err())
	default:
		return d.AdminListUserAuthEvents(in)
	}
}

func (d *CognitoIdentityProviderDouble) AdminRemoveUserFromGroup(i0 *cognitoidentityprovider.AdminRemoveUserFromGroupInput) (r0 *cognitoidentityprovider.AdminRemoveUserFromGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminRemoveUserFromGroup", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminRemoveUserFromGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) AdminRemoveUserFromGroupRequest(i0 *cognitoidentityprovider.AdminRemoveUserFromGroupInput) (r0 *request.Request, r1 *cognitoidentityprovider.AdminRemoveUserFromGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminRemoveUserFromGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.AdminRemoveUserFromGroupOutput)
	return
}

func (d *CognitoIdentityProviderDouble) AdminRemoveUserFromGroupWithContext(i0 context.Context, i1 *cognitoidentityprovider.AdminRemoveUserFromGroupInput, i2 ...request.Option) (r0 *cognitoidentityprovider.AdminRemoveUserFromGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminRemoveUserFromGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminRemoveUserFromGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeAdminRemoveUserFromGroupWithContext(ctx context.Context, in *cognitoidentityprovider.AdminRemoveUserFromGroupInput, _ ...request.Option) (*cognitoidentityprovider.AdminRemoveUserFromGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AdminRemoveUserFromGroup cancelled", ctx.Err())
	default:
		return d.AdminRemoveUserFromGroup(in)
	}
}

func (d *CognitoIdentityProviderDouble) AdminResetUserPassword(i0 *cognitoidentityprovider.AdminResetUserPasswordInput) (r0 *cognitoidentityprovider.AdminResetUserPasswordOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminResetUserPassword", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminResetUserPasswordOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) AdminResetUserPasswordRequest(i0 *cognitoidentityprovider.AdminResetUserPasswordInput) (r0 *request.Request, r1 *cognitoidentityprovider.AdminResetUserPasswordOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminResetUserPasswordRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.AdminResetUserPasswordOutput)
	return
}

func (d *CognitoIdentityProviderDouble) AdminResetUserPasswordWithContext(i0 context.Context, i1 *cognitoidentityprovider.AdminResetUserPasswordInput, i2 ...request.Option) (r0 *cognitoidentityprovider.AdminResetUserPasswordOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminResetUserPasswordWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminResetUserPasswordOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeAdminResetUserPasswordWithContext(ctx context.Context, in *cognitoidentityprovider.AdminResetUserPasswordInput, _ ...request.Option) (*cognitoidentityprovider.AdminResetUserPasswordOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AdminResetUserPassword cancelled", ctx.Err())
	default:
		return d.AdminResetUserPassword(in)
	}
}

func (d *CognitoIdentityProviderDouble) AdminRespondToAuthChallenge(i0 *cognitoidentityprovider.AdminRespondToAuthChallengeInput) (r0 *cognitoidentityprovider.AdminRespondToAuthChallengeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminRespondToAuthChallenge", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminRespondToAuthChallengeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) AdminRespondToAuthChallengeRequest(i0 *cognitoidentityprovider.AdminRespondToAuthChallengeInput) (r0 *request.Request, r1 *cognitoidentityprovider.AdminRespondToAuthChallengeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminRespondToAuthChallengeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.AdminRespondToAuthChallengeOutput)
	return
}

func (d *CognitoIdentityProviderDouble) AdminRespondToAuthChallengeWithContext(i0 context.Context, i1 *cognitoidentityprovider.AdminRespondToAuthChallengeInput, i2 ...request.Option) (r0 *cognitoidentityprovider.AdminRespondToAuthChallengeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminRespondToAuthChallengeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminRespondToAuthChallengeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeAdminRespondToAuthChallengeWithContext(ctx context.Context, in *cognitoidentityprovider.AdminRespondToAuthChallengeInput, _ ...request.Option) (*cognitoidentityprovider.AdminRespondToAuthChallengeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AdminRespondToAuthChallenge cancelled", ctx.Err())
	default:
		return d.AdminRespondToAuthChallenge(in)
	}
}

func (d *CognitoIdentityProviderDouble) AdminSetUserMFAPreference(i0 *cognitoidentityprovider.AdminSetUserMFAPreferenceInput) (r0 *cognitoidentityprovider.AdminSetUserMFAPreferenceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminSetUserMFAPreference", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminSetUserMFAPreferenceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) AdminSetUserMFAPreferenceRequest(i0 *cognitoidentityprovider.AdminSetUserMFAPreferenceInput) (r0 *request.Request, r1 *cognitoidentityprovider.AdminSetUserMFAPreferenceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminSetUserMFAPreferenceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.AdminSetUserMFAPreferenceOutput)
	return
}

func (d *CognitoIdentityProviderDouble) AdminSetUserMFAPreferenceWithContext(i0 context.Context, i1 *cognitoidentityprovider.AdminSetUserMFAPreferenceInput, i2 ...request.Option) (r0 *cognitoidentityprovider.AdminSetUserMFAPreferenceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminSetUserMFAPreferenceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminSetUserMFAPreferenceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeAdminSetUserMFAPreferenceWithContext(ctx context.Context, in *cognitoidentityprovider.AdminSetUserMFAPreferenceInput, _ ...request.Option) (*cognitoidentityprovider.AdminSetUserMFAPreferenceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AdminSetUserMFAPreference cancelled", ctx.Err())
	default:
		return d.AdminSetUserMFAPreference(in)
	}
}

func (d *CognitoIdentityProviderDouble) AdminSetUserPassword(i0 *cognitoidentityprovider.AdminSetUserPasswordInput) (r0 *cognitoidentityprovider.AdminSetUserPasswordOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminSetUserPassword", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminSetUserPasswordOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) AdminSetUserPasswordRequest(i0 *cognitoidentityprovider.AdminSetUserPasswordInput) (r0 *request.Request, r1 *cognitoidentityprovider.AdminSetUserPasswordOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminSetUserPasswordRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.AdminSetUserPasswordOutput)
	return
}

func (d *CognitoIdentityProviderDouble) AdminSetUserPasswordWithContext(i0 context.Context, i1 *cognitoidentityprovider.AdminSetUserPasswordInput, i2 ...request.Option) (r0 *cognitoidentityprovider.AdminSetUserPasswordOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminSetUserPasswordWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminSetUserPasswordOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeAdminSetUserPasswordWithContext(ctx context.Context, in *cognitoidentityprovider.AdminSetUserPasswordInput, _ ...request.Option) (*cognitoidentityprovider.AdminSetUserPasswordOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AdminSetUserPassword cancelled", ctx.Err())
	default:
		return d.AdminSetUserPassword(in)
	}
}

func (d *CognitoIdentityProviderDouble) AdminSetUserSettings(i0 *cognitoidentityprovider.AdminSetUserSettingsInput) (r0 *cognitoidentityprovider.AdminSetUserSettingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminSetUserSettings", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminSetUserSettingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) AdminSetUserSettingsRequest(i0 *cognitoidentityprovider.AdminSetUserSettingsInput) (r0 *request.Request, r1 *cognitoidentityprovider.AdminSetUserSettingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminSetUserSettingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.AdminSetUserSettingsOutput)
	return
}

func (d *CognitoIdentityProviderDouble) AdminSetUserSettingsWithContext(i0 context.Context, i1 *cognitoidentityprovider.AdminSetUserSettingsInput, i2 ...request.Option) (r0 *cognitoidentityprovider.AdminSetUserSettingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminSetUserSettingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminSetUserSettingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeAdminSetUserSettingsWithContext(ctx context.Context, in *cognitoidentityprovider.AdminSetUserSettingsInput, _ ...request.Option) (*cognitoidentityprovider.AdminSetUserSettingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AdminSetUserSettings cancelled", ctx.Err())
	default:
		return d.AdminSetUserSettings(in)
	}
}

func (d *CognitoIdentityProviderDouble) AdminUpdateAuthEventFeedback(i0 *cognitoidentityprovider.AdminUpdateAuthEventFeedbackInput) (r0 *cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminUpdateAuthEventFeedback", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) AdminUpdateAuthEventFeedbackRequest(i0 *cognitoidentityprovider.AdminUpdateAuthEventFeedbackInput) (r0 *request.Request, r1 *cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminUpdateAuthEventFeedbackRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput)
	return
}

func (d *CognitoIdentityProviderDouble) AdminUpdateAuthEventFeedbackWithContext(i0 context.Context, i1 *cognitoidentityprovider.AdminUpdateAuthEventFeedbackInput, i2 ...request.Option) (r0 *cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminUpdateAuthEventFeedbackWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeAdminUpdateAuthEventFeedbackWithContext(ctx context.Context, in *cognitoidentityprovider.AdminUpdateAuthEventFeedbackInput, _ ...request.Option) (*cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AdminUpdateAuthEventFeedback cancelled", ctx.Err())
	default:
		return d.AdminUpdateAuthEventFeedback(in)
	}
}

func (d *CognitoIdentityProviderDouble) AdminUpdateDeviceStatus(i0 *cognitoidentityprovider.AdminUpdateDeviceStatusInput) (r0 *cognitoidentityprovider.AdminUpdateDeviceStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminUpdateDeviceStatus", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminUpdateDeviceStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) AdminUpdateDeviceStatusRequest(i0 *cognitoidentityprovider.AdminUpdateDeviceStatusInput) (r0 *request.Request, r1 *cognitoidentityprovider.AdminUpdateDeviceStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminUpdateDeviceStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.AdminUpdateDeviceStatusOutput)
	return
}

func (d *CognitoIdentityProviderDouble) AdminUpdateDeviceStatusWithContext(i0 context.Context, i1 *cognitoidentityprovider.AdminUpdateDeviceStatusInput, i2 ...request.Option) (r0 *cognitoidentityprovider.AdminUpdateDeviceStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminUpdateDeviceStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminUpdateDeviceStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeAdminUpdateDeviceStatusWithContext(ctx context.Context, in *cognitoidentityprovider.AdminUpdateDeviceStatusInput, _ ...request.Option) (*cognitoidentityprovider.AdminUpdateDeviceStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AdminUpdateDeviceStatus cancelled", ctx.Err())
	default:
		return d.AdminUpdateDeviceStatus(in)
	}
}

func (d *CognitoIdentityProviderDouble) AdminUpdateUserAttributes(i0 *cognitoidentityprovider.AdminUpdateUserAttributesInput) (r0 *cognitoidentityprovider.AdminUpdateUserAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminUpdateUserAttributes", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminUpdateUserAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) AdminUpdateUserAttributesRequest(i0 *cognitoidentityprovider.AdminUpdateUserAttributesInput) (r0 *request.Request, r1 *cognitoidentityprovider.AdminUpdateUserAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminUpdateUserAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.AdminUpdateUserAttributesOutput)
	return
}

func (d *CognitoIdentityProviderDouble) AdminUpdateUserAttributesWithContext(i0 context.Context, i1 *cognitoidentityprovider.AdminUpdateUserAttributesInput, i2 ...request.Option) (r0 *cognitoidentityprovider.AdminUpdateUserAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminUpdateUserAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminUpdateUserAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeAdminUpdateUserAttributesWithContext(ctx context.Context, in *cognitoidentityprovider.AdminUpdateUserAttributesInput, _ ...request.Option) (*cognitoidentityprovider.AdminUpdateUserAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AdminUpdateUserAttributes cancelled", ctx.Err())
	default:
		return d.AdminUpdateUserAttributes(in)
	}
}

func (d *CognitoIdentityProviderDouble) AdminUserGlobalSignOut(i0 *cognitoidentityprovider.AdminUserGlobalSignOutInput) (r0 *cognitoidentityprovider.AdminUserGlobalSignOutOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminUserGlobalSignOut", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminUserGlobalSignOutOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) AdminUserGlobalSignOutRequest(i0 *cognitoidentityprovider.AdminUserGlobalSignOutInput) (r0 *request.Request, r1 *cognitoidentityprovider.AdminUserGlobalSignOutOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminUserGlobalSignOutRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.AdminUserGlobalSignOutOutput)
	return
}

func (d *CognitoIdentityProviderDouble) AdminUserGlobalSignOutWithContext(i0 context.Context, i1 *cognitoidentityprovider.AdminUserGlobalSignOutInput, i2 ...request.Option) (r0 *cognitoidentityprovider.AdminUserGlobalSignOutOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdminUserGlobalSignOutWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.AdminUserGlobalSignOutOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeAdminUserGlobalSignOutWithContext(ctx context.Context, in *cognitoidentityprovider.AdminUserGlobalSignOutInput, _ ...request.Option) (*cognitoidentityprovider.AdminUserGlobalSignOutOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AdminUserGlobalSignOut cancelled", ctx.Err())
	default:
		return d.AdminUserGlobalSignOut(in)
	}
}

func (d *CognitoIdentityProviderDouble) AssociateSoftwareToken(i0 *cognitoidentityprovider.AssociateSoftwareTokenInput) (r0 *cognitoidentityprovider.AssociateSoftwareTokenOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateSoftwareToken", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.AssociateSoftwareTokenOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) AssociateSoftwareTokenRequest(i0 *cognitoidentityprovider.AssociateSoftwareTokenInput) (r0 *request.Request, r1 *cognitoidentityprovider.AssociateSoftwareTokenOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateSoftwareTokenRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.AssociateSoftwareTokenOutput)
	return
}

func (d *CognitoIdentityProviderDouble) AssociateSoftwareTokenWithContext(i0 context.Context, i1 *cognitoidentityprovider.AssociateSoftwareTokenInput, i2 ...request.Option) (r0 *cognitoidentityprovider.AssociateSoftwareTokenOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateSoftwareTokenWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.AssociateSoftwareTokenOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeAssociateSoftwareTokenWithContext(ctx context.Context, in *cognitoidentityprovider.AssociateSoftwareTokenInput, _ ...request.Option) (*cognitoidentityprovider.AssociateSoftwareTokenOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateSoftwareToken cancelled", ctx.Err())
	default:
		return d.AssociateSoftwareToken(in)
	}
}

func (d *CognitoIdentityProviderDouble) ChangePassword(i0 *cognitoidentityprovider.ChangePasswordInput) (r0 *cognitoidentityprovider.ChangePasswordOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ChangePassword", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.ChangePasswordOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) ChangePasswordRequest(i0 *cognitoidentityprovider.ChangePasswordInput) (r0 *request.Request, r1 *cognitoidentityprovider.ChangePasswordOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ChangePasswordRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.ChangePasswordOutput)
	return
}

func (d *CognitoIdentityProviderDouble) ChangePasswordWithContext(i0 context.Context, i1 *cognitoidentityprovider.ChangePasswordInput, i2 ...request.Option) (r0 *cognitoidentityprovider.ChangePasswordOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ChangePasswordWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.ChangePasswordOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeChangePasswordWithContext(ctx context.Context, in *cognitoidentityprovider.ChangePasswordInput, _ ...request.Option) (*cognitoidentityprovider.ChangePasswordOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ChangePassword cancelled", ctx.Err())
	default:
		return d.ChangePassword(in)
	}
}

func (d *CognitoIdentityProviderDouble) ConfirmDevice(i0 *cognitoidentityprovider.ConfirmDeviceInput) (r0 *cognitoidentityprovider.ConfirmDeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ConfirmDevice", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.ConfirmDeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) ConfirmDeviceRequest(i0 *cognitoidentityprovider.ConfirmDeviceInput) (r0 *request.Request, r1 *cognitoidentityprovider.ConfirmDeviceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ConfirmDeviceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.ConfirmDeviceOutput)
	return
}

func (d *CognitoIdentityProviderDouble) ConfirmDeviceWithContext(i0 context.Context, i1 *cognitoidentityprovider.ConfirmDeviceInput, i2 ...request.Option) (r0 *cognitoidentityprovider.ConfirmDeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ConfirmDeviceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.ConfirmDeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeConfirmDeviceWithContext(ctx context.Context, in *cognitoidentityprovider.ConfirmDeviceInput, _ ...request.Option) (*cognitoidentityprovider.ConfirmDeviceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ConfirmDevice cancelled", ctx.Err())
	default:
		return d.ConfirmDevice(in)
	}
}

func (d *CognitoIdentityProviderDouble) ConfirmForgotPassword(i0 *cognitoidentityprovider.ConfirmForgotPasswordInput) (r0 *cognitoidentityprovider.ConfirmForgotPasswordOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ConfirmForgotPassword", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.ConfirmForgotPasswordOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) ConfirmForgotPasswordRequest(i0 *cognitoidentityprovider.ConfirmForgotPasswordInput) (r0 *request.Request, r1 *cognitoidentityprovider.ConfirmForgotPasswordOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ConfirmForgotPasswordRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.ConfirmForgotPasswordOutput)
	return
}

func (d *CognitoIdentityProviderDouble) ConfirmForgotPasswordWithContext(i0 context.Context, i1 *cognitoidentityprovider.ConfirmForgotPasswordInput, i2 ...request.Option) (r0 *cognitoidentityprovider.ConfirmForgotPasswordOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ConfirmForgotPasswordWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.ConfirmForgotPasswordOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeConfirmForgotPasswordWithContext(ctx context.Context, in *cognitoidentityprovider.ConfirmForgotPasswordInput, _ ...request.Option) (*cognitoidentityprovider.ConfirmForgotPasswordOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ConfirmForgotPassword cancelled", ctx.Err())
	default:
		return d.ConfirmForgotPassword(in)
	}
}

func (d *CognitoIdentityProviderDouble) ConfirmSignUp(i0 *cognitoidentityprovider.ConfirmSignUpInput) (r0 *cognitoidentityprovider.ConfirmSignUpOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ConfirmSignUp", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.ConfirmSignUpOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) ConfirmSignUpRequest(i0 *cognitoidentityprovider.ConfirmSignUpInput) (r0 *request.Request, r1 *cognitoidentityprovider.ConfirmSignUpOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ConfirmSignUpRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.ConfirmSignUpOutput)
	return
}

func (d *CognitoIdentityProviderDouble) ConfirmSignUpWithContext(i0 context.Context, i1 *cognitoidentityprovider.ConfirmSignUpInput, i2 ...request.Option) (r0 *cognitoidentityprovider.ConfirmSignUpOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ConfirmSignUpWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.ConfirmSignUpOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeConfirmSignUpWithContext(ctx context.Context, in *cognitoidentityprovider.ConfirmSignUpInput, _ ...request.Option) (*cognitoidentityprovider.ConfirmSignUpOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ConfirmSignUp cancelled", ctx.Err())
	default:
		return d.ConfirmSignUp(in)
	}
}

func (d *CognitoIdentityProviderDouble) CreateGroup(i0 *cognitoidentityprovider.CreateGroupInput) (r0 *cognitoidentityprovider.CreateGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGroup", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.CreateGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) CreateGroupRequest(i0 *cognitoidentityprovider.CreateGroupInput) (r0 *request.Request, r1 *cognitoidentityprovider.CreateGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.CreateGroupOutput)
	return
}

func (d *CognitoIdentityProviderDouble) CreateGroupWithContext(i0 context.Context, i1 *cognitoidentityprovider.CreateGroupInput, i2 ...request.Option) (r0 *cognitoidentityprovider.CreateGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.CreateGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeCreateGroupWithContext(ctx context.Context, in *cognitoidentityprovider.CreateGroupInput, _ ...request.Option) (*cognitoidentityprovider.CreateGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateGroup cancelled", ctx.Err())
	default:
		return d.CreateGroup(in)
	}
}

func (d *CognitoIdentityProviderDouble) CreateIdentityProvider(i0 *cognitoidentityprovider.CreateIdentityProviderInput) (r0 *cognitoidentityprovider.CreateIdentityProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateIdentityProvider", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.CreateIdentityProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) CreateIdentityProviderRequest(i0 *cognitoidentityprovider.CreateIdentityProviderInput) (r0 *request.Request, r1 *cognitoidentityprovider.CreateIdentityProviderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateIdentityProviderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.CreateIdentityProviderOutput)
	return
}

func (d *CognitoIdentityProviderDouble) CreateIdentityProviderWithContext(i0 context.Context, i1 *cognitoidentityprovider.CreateIdentityProviderInput, i2 ...request.Option) (r0 *cognitoidentityprovider.CreateIdentityProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateIdentityProviderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.CreateIdentityProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeCreateIdentityProviderWithContext(ctx context.Context, in *cognitoidentityprovider.CreateIdentityProviderInput, _ ...request.Option) (*cognitoidentityprovider.CreateIdentityProviderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateIdentityProvider cancelled", ctx.Err())
	default:
		return d.CreateIdentityProvider(in)
	}
}

func (d *CognitoIdentityProviderDouble) CreateResourceServer(i0 *cognitoidentityprovider.CreateResourceServerInput) (r0 *cognitoidentityprovider.CreateResourceServerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateResourceServer", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.CreateResourceServerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) CreateResourceServerRequest(i0 *cognitoidentityprovider.CreateResourceServerInput) (r0 *request.Request, r1 *cognitoidentityprovider.CreateResourceServerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateResourceServerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.CreateResourceServerOutput)
	return
}

func (d *CognitoIdentityProviderDouble) CreateResourceServerWithContext(i0 context.Context, i1 *cognitoidentityprovider.CreateResourceServerInput, i2 ...request.Option) (r0 *cognitoidentityprovider.CreateResourceServerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateResourceServerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.CreateResourceServerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeCreateResourceServerWithContext(ctx context.Context, in *cognitoidentityprovider.CreateResourceServerInput, _ ...request.Option) (*cognitoidentityprovider.CreateResourceServerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateResourceServer cancelled", ctx.Err())
	default:
		return d.CreateResourceServer(in)
	}
}

func (d *CognitoIdentityProviderDouble) CreateUserImportJob(i0 *cognitoidentityprovider.CreateUserImportJobInput) (r0 *cognitoidentityprovider.CreateUserImportJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserImportJob", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.CreateUserImportJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) CreateUserImportJobRequest(i0 *cognitoidentityprovider.CreateUserImportJobInput) (r0 *request.Request, r1 *cognitoidentityprovider.CreateUserImportJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserImportJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.CreateUserImportJobOutput)
	return
}

func (d *CognitoIdentityProviderDouble) CreateUserImportJobWithContext(i0 context.Context, i1 *cognitoidentityprovider.CreateUserImportJobInput, i2 ...request.Option) (r0 *cognitoidentityprovider.CreateUserImportJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserImportJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.CreateUserImportJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeCreateUserImportJobWithContext(ctx context.Context, in *cognitoidentityprovider.CreateUserImportJobInput, _ ...request.Option) (*cognitoidentityprovider.CreateUserImportJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateUserImportJob cancelled", ctx.Err())
	default:
		return d.CreateUserImportJob(in)
	}
}

func (d *CognitoIdentityProviderDouble) CreateUserPool(i0 *cognitoidentityprovider.CreateUserPoolInput) (r0 *cognitoidentityprovider.CreateUserPoolOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserPool", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.CreateUserPoolOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) CreateUserPoolClient(i0 *cognitoidentityprovider.CreateUserPoolClientInput) (r0 *cognitoidentityprovider.CreateUserPoolClientOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserPoolClient", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.CreateUserPoolClientOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) CreateUserPoolClientRequest(i0 *cognitoidentityprovider.CreateUserPoolClientInput) (r0 *request.Request, r1 *cognitoidentityprovider.CreateUserPoolClientOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserPoolClientRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.CreateUserPoolClientOutput)
	return
}

func (d *CognitoIdentityProviderDouble) CreateUserPoolClientWithContext(i0 context.Context, i1 *cognitoidentityprovider.CreateUserPoolClientInput, i2 ...request.Option) (r0 *cognitoidentityprovider.CreateUserPoolClientOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserPoolClientWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.CreateUserPoolClientOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeCreateUserPoolClientWithContext(ctx context.Context, in *cognitoidentityprovider.CreateUserPoolClientInput, _ ...request.Option) (*cognitoidentityprovider.CreateUserPoolClientOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateUserPoolClient cancelled", ctx.Err())
	default:
		return d.CreateUserPoolClient(in)
	}
}

func (d *CognitoIdentityProviderDouble) CreateUserPoolDomain(i0 *cognitoidentityprovider.CreateUserPoolDomainInput) (r0 *cognitoidentityprovider.CreateUserPoolDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserPoolDomain", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.CreateUserPoolDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) CreateUserPoolDomainRequest(i0 *cognitoidentityprovider.CreateUserPoolDomainInput) (r0 *request.Request, r1 *cognitoidentityprovider.CreateUserPoolDomainOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserPoolDomainRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.CreateUserPoolDomainOutput)
	return
}

func (d *CognitoIdentityProviderDouble) CreateUserPoolDomainWithContext(i0 context.Context, i1 *cognitoidentityprovider.CreateUserPoolDomainInput, i2 ...request.Option) (r0 *cognitoidentityprovider.CreateUserPoolDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserPoolDomainWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.CreateUserPoolDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeCreateUserPoolDomainWithContext(ctx context.Context, in *cognitoidentityprovider.CreateUserPoolDomainInput, _ ...request.Option) (*cognitoidentityprovider.CreateUserPoolDomainOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateUserPoolDomain cancelled", ctx.Err())
	default:
		return d.CreateUserPoolDomain(in)
	}
}

func (d *CognitoIdentityProviderDouble) CreateUserPoolRequest(i0 *cognitoidentityprovider.CreateUserPoolInput) (r0 *request.Request, r1 *cognitoidentityprovider.CreateUserPoolOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserPoolRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.CreateUserPoolOutput)
	return
}

func (d *CognitoIdentityProviderDouble) CreateUserPoolWithContext(i0 context.Context, i1 *cognitoidentityprovider.CreateUserPoolInput, i2 ...request.Option) (r0 *cognitoidentityprovider.CreateUserPoolOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserPoolWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.CreateUserPoolOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeCreateUserPoolWithContext(ctx context.Context, in *cognitoidentityprovider.CreateUserPoolInput, _ ...request.Option) (*cognitoidentityprovider.CreateUserPoolOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateUserPool cancelled", ctx.Err())
	default:
		return d.CreateUserPool(in)
	}
}

func (d *CognitoIdentityProviderDouble) DeleteGroup(i0 *cognitoidentityprovider.DeleteGroupInput) (r0 *cognitoidentityprovider.DeleteGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGroup", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.DeleteGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) DeleteGroupRequest(i0 *cognitoidentityprovider.DeleteGroupInput) (r0 *request.Request, r1 *cognitoidentityprovider.DeleteGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.DeleteGroupOutput)
	return
}

func (d *CognitoIdentityProviderDouble) DeleteGroupWithContext(i0 context.Context, i1 *cognitoidentityprovider.DeleteGroupInput, i2 ...request.Option) (r0 *cognitoidentityprovider.DeleteGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.DeleteGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeDeleteGroupWithContext(ctx context.Context, in *cognitoidentityprovider.DeleteGroupInput, _ ...request.Option) (*cognitoidentityprovider.DeleteGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteGroup cancelled", ctx.Err())
	default:
		return d.DeleteGroup(in)
	}
}

func (d *CognitoIdentityProviderDouble) DeleteIdentityProvider(i0 *cognitoidentityprovider.DeleteIdentityProviderInput) (r0 *cognitoidentityprovider.DeleteIdentityProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIdentityProvider", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.DeleteIdentityProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) DeleteIdentityProviderRequest(i0 *cognitoidentityprovider.DeleteIdentityProviderInput) (r0 *request.Request, r1 *cognitoidentityprovider.DeleteIdentityProviderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIdentityProviderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.DeleteIdentityProviderOutput)
	return
}

func (d *CognitoIdentityProviderDouble) DeleteIdentityProviderWithContext(i0 context.Context, i1 *cognitoidentityprovider.DeleteIdentityProviderInput, i2 ...request.Option) (r0 *cognitoidentityprovider.DeleteIdentityProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIdentityProviderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.DeleteIdentityProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeDeleteIdentityProviderWithContext(ctx context.Context, in *cognitoidentityprovider.DeleteIdentityProviderInput, _ ...request.Option) (*cognitoidentityprovider.DeleteIdentityProviderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteIdentityProvider cancelled", ctx.Err())
	default:
		return d.DeleteIdentityProvider(in)
	}
}

func (d *CognitoIdentityProviderDouble) DeleteResourceServer(i0 *cognitoidentityprovider.DeleteResourceServerInput) (r0 *cognitoidentityprovider.DeleteResourceServerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResourceServer", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.DeleteResourceServerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) DeleteResourceServerRequest(i0 *cognitoidentityprovider.DeleteResourceServerInput) (r0 *request.Request, r1 *cognitoidentityprovider.DeleteResourceServerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResourceServerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.DeleteResourceServerOutput)
	return
}

func (d *CognitoIdentityProviderDouble) DeleteResourceServerWithContext(i0 context.Context, i1 *cognitoidentityprovider.DeleteResourceServerInput, i2 ...request.Option) (r0 *cognitoidentityprovider.DeleteResourceServerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResourceServerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.DeleteResourceServerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeDeleteResourceServerWithContext(ctx context.Context, in *cognitoidentityprovider.DeleteResourceServerInput, _ ...request.Option) (*cognitoidentityprovider.DeleteResourceServerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteResourceServer cancelled", ctx.Err())
	default:
		return d.DeleteResourceServer(in)
	}
}

func (d *CognitoIdentityProviderDouble) DeleteUser(i0 *cognitoidentityprovider.DeleteUserInput) (r0 *cognitoidentityprovider.DeleteUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUser", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.DeleteUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) DeleteUserAttributes(i0 *cognitoidentityprovider.DeleteUserAttributesInput) (r0 *cognitoidentityprovider.DeleteUserAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserAttributes", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.DeleteUserAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) DeleteUserAttributesRequest(i0 *cognitoidentityprovider.DeleteUserAttributesInput) (r0 *request.Request, r1 *cognitoidentityprovider.DeleteUserAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.DeleteUserAttributesOutput)
	return
}

func (d *CognitoIdentityProviderDouble) DeleteUserAttributesWithContext(i0 context.Context, i1 *cognitoidentityprovider.DeleteUserAttributesInput, i2 ...request.Option) (r0 *cognitoidentityprovider.DeleteUserAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.DeleteUserAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeDeleteUserAttributesWithContext(ctx context.Context, in *cognitoidentityprovider.DeleteUserAttributesInput, _ ...request.Option) (*cognitoidentityprovider.DeleteUserAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteUserAttributes cancelled", ctx.Err())
	default:
		return d.DeleteUserAttributes(in)
	}
}

func (d *CognitoIdentityProviderDouble) DeleteUserPool(i0 *cognitoidentityprovider.DeleteUserPoolInput) (r0 *cognitoidentityprovider.DeleteUserPoolOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserPool", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.DeleteUserPoolOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) DeleteUserPoolClient(i0 *cognitoidentityprovider.DeleteUserPoolClientInput) (r0 *cognitoidentityprovider.DeleteUserPoolClientOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserPoolClient", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.DeleteUserPoolClientOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) DeleteUserPoolClientRequest(i0 *cognitoidentityprovider.DeleteUserPoolClientInput) (r0 *request.Request, r1 *cognitoidentityprovider.DeleteUserPoolClientOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserPoolClientRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.DeleteUserPoolClientOutput)
	return
}

func (d *CognitoIdentityProviderDouble) DeleteUserPoolClientWithContext(i0 context.Context, i1 *cognitoidentityprovider.DeleteUserPoolClientInput, i2 ...request.Option) (r0 *cognitoidentityprovider.DeleteUserPoolClientOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserPoolClientWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.DeleteUserPoolClientOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeDeleteUserPoolClientWithContext(ctx context.Context, in *cognitoidentityprovider.DeleteUserPoolClientInput, _ ...request.Option) (*cognitoidentityprovider.DeleteUserPoolClientOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteUserPoolClient cancelled", ctx.Err())
	default:
		return d.DeleteUserPoolClient(in)
	}
}

func (d *CognitoIdentityProviderDouble) DeleteUserPoolDomain(i0 *cognitoidentityprovider.DeleteUserPoolDomainInput) (r0 *cognitoidentityprovider.DeleteUserPoolDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserPoolDomain", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.DeleteUserPoolDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) DeleteUserPoolDomainRequest(i0 *cognitoidentityprovider.DeleteUserPoolDomainInput) (r0 *request.Request, r1 *cognitoidentityprovider.DeleteUserPoolDomainOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserPoolDomainRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.DeleteUserPoolDomainOutput)
	return
}

func (d *CognitoIdentityProviderDouble) DeleteUserPoolDomainWithContext(i0 context.Context, i1 *cognitoidentityprovider.DeleteUserPoolDomainInput, i2 ...request.Option) (r0 *cognitoidentityprovider.DeleteUserPoolDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserPoolDomainWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.DeleteUserPoolDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeDeleteUserPoolDomainWithContext(ctx context.Context, in *cognitoidentityprovider.DeleteUserPoolDomainInput, _ ...request.Option) (*cognitoidentityprovider.DeleteUserPoolDomainOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteUserPoolDomain cancelled", ctx.Err())
	default:
		return d.DeleteUserPoolDomain(in)
	}
}

func (d *CognitoIdentityProviderDouble) DeleteUserPoolRequest(i0 *cognitoidentityprovider.DeleteUserPoolInput) (r0 *request.Request, r1 *cognitoidentityprovider.DeleteUserPoolOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserPoolRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.DeleteUserPoolOutput)
	return
}

func (d *CognitoIdentityProviderDouble) DeleteUserPoolWithContext(i0 context.Context, i1 *cognitoidentityprovider.DeleteUserPoolInput, i2 ...request.Option) (r0 *cognitoidentityprovider.DeleteUserPoolOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserPoolWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.DeleteUserPoolOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeDeleteUserPoolWithContext(ctx context.Context, in *cognitoidentityprovider.DeleteUserPoolInput, _ ...request.Option) (*cognitoidentityprovider.DeleteUserPoolOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteUserPool cancelled", ctx.Err())
	default:
		return d.DeleteUserPool(in)
	}
}

func (d *CognitoIdentityProviderDouble) DeleteUserRequest(i0 *cognitoidentityprovider.DeleteUserInput) (r0 *request.Request, r1 *cognitoidentityprovider.DeleteUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.DeleteUserOutput)
	return
}

func (d *CognitoIdentityProviderDouble) DeleteUserWithContext(i0 context.Context, i1 *cognitoidentityprovider.DeleteUserInput, i2 ...request.Option) (r0 *cognitoidentityprovider.DeleteUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.DeleteUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeDeleteUserWithContext(ctx context.Context, in *cognitoidentityprovider.DeleteUserInput, _ ...request.Option) (*cognitoidentityprovider.DeleteUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteUser cancelled", ctx.Err())
	default:
		return d.DeleteUser(in)
	}
}

func (d *CognitoIdentityProviderDouble) DescribeIdentityProvider(i0 *cognitoidentityprovider.DescribeIdentityProviderInput) (r0 *cognitoidentityprovider.DescribeIdentityProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIdentityProvider", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.DescribeIdentityProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) DescribeIdentityProviderRequest(i0 *cognitoidentityprovider.DescribeIdentityProviderInput) (r0 *request.Request, r1 *cognitoidentityprovider.DescribeIdentityProviderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIdentityProviderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.DescribeIdentityProviderOutput)
	return
}

func (d *CognitoIdentityProviderDouble) DescribeIdentityProviderWithContext(i0 context.Context, i1 *cognitoidentityprovider.DescribeIdentityProviderInput, i2 ...request.Option) (r0 *cognitoidentityprovider.DescribeIdentityProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIdentityProviderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.DescribeIdentityProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeDescribeIdentityProviderWithContext(ctx context.Context, in *cognitoidentityprovider.DescribeIdentityProviderInput, _ ...request.Option) (*cognitoidentityprovider.DescribeIdentityProviderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeIdentityProvider cancelled", ctx.Err())
	default:
		return d.DescribeIdentityProvider(in)
	}
}

func (d *CognitoIdentityProviderDouble) DescribeResourceServer(i0 *cognitoidentityprovider.DescribeResourceServerInput) (r0 *cognitoidentityprovider.DescribeResourceServerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeResourceServer", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.DescribeResourceServerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) DescribeResourceServerRequest(i0 *cognitoidentityprovider.DescribeResourceServerInput) (r0 *request.Request, r1 *cognitoidentityprovider.DescribeResourceServerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeResourceServerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.DescribeResourceServerOutput)
	return
}

func (d *CognitoIdentityProviderDouble) DescribeResourceServerWithContext(i0 context.Context, i1 *cognitoidentityprovider.DescribeResourceServerInput, i2 ...request.Option) (r0 *cognitoidentityprovider.DescribeResourceServerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeResourceServerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.DescribeResourceServerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeDescribeResourceServerWithContext(ctx context.Context, in *cognitoidentityprovider.DescribeResourceServerInput, _ ...request.Option) (*cognitoidentityprovider.DescribeResourceServerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeResourceServer cancelled", ctx.Err())
	default:
		return d.DescribeResourceServer(in)
	}
}

func (d *CognitoIdentityProviderDouble) DescribeRiskConfiguration(i0 *cognitoidentityprovider.DescribeRiskConfigurationInput) (r0 *cognitoidentityprovider.DescribeRiskConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRiskConfiguration", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.DescribeRiskConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) DescribeRiskConfigurationRequest(i0 *cognitoidentityprovider.DescribeRiskConfigurationInput) (r0 *request.Request, r1 *cognitoidentityprovider.DescribeRiskConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRiskConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.DescribeRiskConfigurationOutput)
	return
}

func (d *CognitoIdentityProviderDouble) DescribeRiskConfigurationWithContext(i0 context.Context, i1 *cognitoidentityprovider.DescribeRiskConfigurationInput, i2 ...request.Option) (r0 *cognitoidentityprovider.DescribeRiskConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRiskConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.DescribeRiskConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeDescribeRiskConfigurationWithContext(ctx context.Context, in *cognitoidentityprovider.DescribeRiskConfigurationInput, _ ...request.Option) (*cognitoidentityprovider.DescribeRiskConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeRiskConfiguration cancelled", ctx.Err())
	default:
		return d.DescribeRiskConfiguration(in)
	}
}

func (d *CognitoIdentityProviderDouble) DescribeUserImportJob(i0 *cognitoidentityprovider.DescribeUserImportJobInput) (r0 *cognitoidentityprovider.DescribeUserImportJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserImportJob", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.DescribeUserImportJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) DescribeUserImportJobRequest(i0 *cognitoidentityprovider.DescribeUserImportJobInput) (r0 *request.Request, r1 *cognitoidentityprovider.DescribeUserImportJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserImportJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.DescribeUserImportJobOutput)
	return
}

func (d *CognitoIdentityProviderDouble) DescribeUserImportJobWithContext(i0 context.Context, i1 *cognitoidentityprovider.DescribeUserImportJobInput, i2 ...request.Option) (r0 *cognitoidentityprovider.DescribeUserImportJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserImportJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.DescribeUserImportJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeDescribeUserImportJobWithContext(ctx context.Context, in *cognitoidentityprovider.DescribeUserImportJobInput, _ ...request.Option) (*cognitoidentityprovider.DescribeUserImportJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeUserImportJob cancelled", ctx.Err())
	default:
		return d.DescribeUserImportJob(in)
	}
}

func (d *CognitoIdentityProviderDouble) DescribeUserPool(i0 *cognitoidentityprovider.DescribeUserPoolInput) (r0 *cognitoidentityprovider.DescribeUserPoolOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserPool", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.DescribeUserPoolOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) DescribeUserPoolClient(i0 *cognitoidentityprovider.DescribeUserPoolClientInput) (r0 *cognitoidentityprovider.DescribeUserPoolClientOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserPoolClient", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.DescribeUserPoolClientOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) DescribeUserPoolClientRequest(i0 *cognitoidentityprovider.DescribeUserPoolClientInput) (r0 *request.Request, r1 *cognitoidentityprovider.DescribeUserPoolClientOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserPoolClientRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.DescribeUserPoolClientOutput)
	return
}

func (d *CognitoIdentityProviderDouble) DescribeUserPoolClientWithContext(i0 context.Context, i1 *cognitoidentityprovider.DescribeUserPoolClientInput, i2 ...request.Option) (r0 *cognitoidentityprovider.DescribeUserPoolClientOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserPoolClientWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.DescribeUserPoolClientOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeDescribeUserPoolClientWithContext(ctx context.Context, in *cognitoidentityprovider.DescribeUserPoolClientInput, _ ...request.Option) (*cognitoidentityprovider.DescribeUserPoolClientOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeUserPoolClient cancelled", ctx.Err())
	default:
		return d.DescribeUserPoolClient(in)
	}
}

func (d *CognitoIdentityProviderDouble) DescribeUserPoolDomain(i0 *cognitoidentityprovider.DescribeUserPoolDomainInput) (r0 *cognitoidentityprovider.DescribeUserPoolDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserPoolDomain", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.DescribeUserPoolDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) DescribeUserPoolDomainRequest(i0 *cognitoidentityprovider.DescribeUserPoolDomainInput) (r0 *request.Request, r1 *cognitoidentityprovider.DescribeUserPoolDomainOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserPoolDomainRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.DescribeUserPoolDomainOutput)
	return
}

func (d *CognitoIdentityProviderDouble) DescribeUserPoolDomainWithContext(i0 context.Context, i1 *cognitoidentityprovider.DescribeUserPoolDomainInput, i2 ...request.Option) (r0 *cognitoidentityprovider.DescribeUserPoolDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserPoolDomainWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.DescribeUserPoolDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeDescribeUserPoolDomainWithContext(ctx context.Context, in *cognitoidentityprovider.DescribeUserPoolDomainInput, _ ...request.Option) (*cognitoidentityprovider.DescribeUserPoolDomainOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeUserPoolDomain cancelled", ctx.Err())
	default:
		return d.DescribeUserPoolDomain(in)
	}
}

func (d *CognitoIdentityProviderDouble) DescribeUserPoolRequest(i0 *cognitoidentityprovider.DescribeUserPoolInput) (r0 *request.Request, r1 *cognitoidentityprovider.DescribeUserPoolOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserPoolRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.DescribeUserPoolOutput)
	return
}

func (d *CognitoIdentityProviderDouble) DescribeUserPoolWithContext(i0 context.Context, i1 *cognitoidentityprovider.DescribeUserPoolInput, i2 ...request.Option) (r0 *cognitoidentityprovider.DescribeUserPoolOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserPoolWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.DescribeUserPoolOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeDescribeUserPoolWithContext(ctx context.Context, in *cognitoidentityprovider.DescribeUserPoolInput, _ ...request.Option) (*cognitoidentityprovider.DescribeUserPoolOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeUserPool cancelled", ctx.Err())
	default:
		return d.DescribeUserPool(in)
	}
}

func (d *CognitoIdentityProviderDouble) ForgetDevice(i0 *cognitoidentityprovider.ForgetDeviceInput) (r0 *cognitoidentityprovider.ForgetDeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ForgetDevice", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.ForgetDeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) ForgetDeviceRequest(i0 *cognitoidentityprovider.ForgetDeviceInput) (r0 *request.Request, r1 *cognitoidentityprovider.ForgetDeviceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ForgetDeviceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.ForgetDeviceOutput)
	return
}

func (d *CognitoIdentityProviderDouble) ForgetDeviceWithContext(i0 context.Context, i1 *cognitoidentityprovider.ForgetDeviceInput, i2 ...request.Option) (r0 *cognitoidentityprovider.ForgetDeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ForgetDeviceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.ForgetDeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeForgetDeviceWithContext(ctx context.Context, in *cognitoidentityprovider.ForgetDeviceInput, _ ...request.Option) (*cognitoidentityprovider.ForgetDeviceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ForgetDevice cancelled", ctx.Err())
	default:
		return d.ForgetDevice(in)
	}
}

func (d *CognitoIdentityProviderDouble) ForgotPassword(i0 *cognitoidentityprovider.ForgotPasswordInput) (r0 *cognitoidentityprovider.ForgotPasswordOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ForgotPassword", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.ForgotPasswordOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) ForgotPasswordRequest(i0 *cognitoidentityprovider.ForgotPasswordInput) (r0 *request.Request, r1 *cognitoidentityprovider.ForgotPasswordOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ForgotPasswordRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.ForgotPasswordOutput)
	return
}

func (d *CognitoIdentityProviderDouble) ForgotPasswordWithContext(i0 context.Context, i1 *cognitoidentityprovider.ForgotPasswordInput, i2 ...request.Option) (r0 *cognitoidentityprovider.ForgotPasswordOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ForgotPasswordWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.ForgotPasswordOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeForgotPasswordWithContext(ctx context.Context, in *cognitoidentityprovider.ForgotPasswordInput, _ ...request.Option) (*cognitoidentityprovider.ForgotPasswordOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ForgotPassword cancelled", ctx.Err())
	default:
		return d.ForgotPassword(in)
	}
}

func (d *CognitoIdentityProviderDouble) GetCSVHeader(i0 *cognitoidentityprovider.GetCSVHeaderInput) (r0 *cognitoidentityprovider.GetCSVHeaderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCSVHeader", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.GetCSVHeaderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) GetCSVHeaderRequest(i0 *cognitoidentityprovider.GetCSVHeaderInput) (r0 *request.Request, r1 *cognitoidentityprovider.GetCSVHeaderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCSVHeaderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.GetCSVHeaderOutput)
	return
}

func (d *CognitoIdentityProviderDouble) GetCSVHeaderWithContext(i0 context.Context, i1 *cognitoidentityprovider.GetCSVHeaderInput, i2 ...request.Option) (r0 *cognitoidentityprovider.GetCSVHeaderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCSVHeaderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.GetCSVHeaderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeGetCSVHeaderWithContext(ctx context.Context, in *cognitoidentityprovider.GetCSVHeaderInput, _ ...request.Option) (*cognitoidentityprovider.GetCSVHeaderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetCSVHeader cancelled", ctx.Err())
	default:
		return d.GetCSVHeader(in)
	}
}

func (d *CognitoIdentityProviderDouble) GetDevice(i0 *cognitoidentityprovider.GetDeviceInput) (r0 *cognitoidentityprovider.GetDeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDevice", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.GetDeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) GetDeviceRequest(i0 *cognitoidentityprovider.GetDeviceInput) (r0 *request.Request, r1 *cognitoidentityprovider.GetDeviceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeviceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.GetDeviceOutput)
	return
}

func (d *CognitoIdentityProviderDouble) GetDeviceWithContext(i0 context.Context, i1 *cognitoidentityprovider.GetDeviceInput, i2 ...request.Option) (r0 *cognitoidentityprovider.GetDeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeviceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.GetDeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeGetDeviceWithContext(ctx context.Context, in *cognitoidentityprovider.GetDeviceInput, _ ...request.Option) (*cognitoidentityprovider.GetDeviceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDevice cancelled", ctx.Err())
	default:
		return d.GetDevice(in)
	}
}

func (d *CognitoIdentityProviderDouble) GetGroup(i0 *cognitoidentityprovider.GetGroupInput) (r0 *cognitoidentityprovider.GetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGroup", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.GetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) GetGroupRequest(i0 *cognitoidentityprovider.GetGroupInput) (r0 *request.Request, r1 *cognitoidentityprovider.GetGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.GetGroupOutput)
	return
}

func (d *CognitoIdentityProviderDouble) GetGroupWithContext(i0 context.Context, i1 *cognitoidentityprovider.GetGroupInput, i2 ...request.Option) (r0 *cognitoidentityprovider.GetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.GetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeGetGroupWithContext(ctx context.Context, in *cognitoidentityprovider.GetGroupInput, _ ...request.Option) (*cognitoidentityprovider.GetGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetGroup cancelled", ctx.Err())
	default:
		return d.GetGroup(in)
	}
}

func (d *CognitoIdentityProviderDouble) GetIdentityProviderByIdentifier(i0 *cognitoidentityprovider.GetIdentityProviderByIdentifierInput) (r0 *cognitoidentityprovider.GetIdentityProviderByIdentifierOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIdentityProviderByIdentifier", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.GetIdentityProviderByIdentifierOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) GetIdentityProviderByIdentifierRequest(i0 *cognitoidentityprovider.GetIdentityProviderByIdentifierInput) (r0 *request.Request, r1 *cognitoidentityprovider.GetIdentityProviderByIdentifierOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIdentityProviderByIdentifierRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.GetIdentityProviderByIdentifierOutput)
	return
}

func (d *CognitoIdentityProviderDouble) GetIdentityProviderByIdentifierWithContext(i0 context.Context, i1 *cognitoidentityprovider.GetIdentityProviderByIdentifierInput, i2 ...request.Option) (r0 *cognitoidentityprovider.GetIdentityProviderByIdentifierOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIdentityProviderByIdentifierWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.GetIdentityProviderByIdentifierOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeGetIdentityProviderByIdentifierWithContext(ctx context.Context, in *cognitoidentityprovider.GetIdentityProviderByIdentifierInput, _ ...request.Option) (*cognitoidentityprovider.GetIdentityProviderByIdentifierOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetIdentityProviderByIdentifier cancelled", ctx.Err())
	default:
		return d.GetIdentityProviderByIdentifier(in)
	}
}

func (d *CognitoIdentityProviderDouble) GetSigningCertificate(i0 *cognitoidentityprovider.GetSigningCertificateInput) (r0 *cognitoidentityprovider.GetSigningCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSigningCertificate", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.GetSigningCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) GetSigningCertificateRequest(i0 *cognitoidentityprovider.GetSigningCertificateInput) (r0 *request.Request, r1 *cognitoidentityprovider.GetSigningCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSigningCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.GetSigningCertificateOutput)
	return
}

func (d *CognitoIdentityProviderDouble) GetSigningCertificateWithContext(i0 context.Context, i1 *cognitoidentityprovider.GetSigningCertificateInput, i2 ...request.Option) (r0 *cognitoidentityprovider.GetSigningCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSigningCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.GetSigningCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeGetSigningCertificateWithContext(ctx context.Context, in *cognitoidentityprovider.GetSigningCertificateInput, _ ...request.Option) (*cognitoidentityprovider.GetSigningCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetSigningCertificate cancelled", ctx.Err())
	default:
		return d.GetSigningCertificate(in)
	}
}

func (d *CognitoIdentityProviderDouble) GetUICustomization(i0 *cognitoidentityprovider.GetUICustomizationInput) (r0 *cognitoidentityprovider.GetUICustomizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUICustomization", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.GetUICustomizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) GetUICustomizationRequest(i0 *cognitoidentityprovider.GetUICustomizationInput) (r0 *request.Request, r1 *cognitoidentityprovider.GetUICustomizationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUICustomizationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.GetUICustomizationOutput)
	return
}

func (d *CognitoIdentityProviderDouble) GetUICustomizationWithContext(i0 context.Context, i1 *cognitoidentityprovider.GetUICustomizationInput, i2 ...request.Option) (r0 *cognitoidentityprovider.GetUICustomizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUICustomizationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.GetUICustomizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeGetUICustomizationWithContext(ctx context.Context, in *cognitoidentityprovider.GetUICustomizationInput, _ ...request.Option) (*cognitoidentityprovider.GetUICustomizationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetUICustomization cancelled", ctx.Err())
	default:
		return d.GetUICustomization(in)
	}
}

func (d *CognitoIdentityProviderDouble) GetUser(i0 *cognitoidentityprovider.GetUserInput) (r0 *cognitoidentityprovider.GetUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUser", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.GetUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) GetUserAttributeVerificationCode(i0 *cognitoidentityprovider.GetUserAttributeVerificationCodeInput) (r0 *cognitoidentityprovider.GetUserAttributeVerificationCodeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUserAttributeVerificationCode", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.GetUserAttributeVerificationCodeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) GetUserAttributeVerificationCodeRequest(i0 *cognitoidentityprovider.GetUserAttributeVerificationCodeInput) (r0 *request.Request, r1 *cognitoidentityprovider.GetUserAttributeVerificationCodeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUserAttributeVerificationCodeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.GetUserAttributeVerificationCodeOutput)
	return
}

func (d *CognitoIdentityProviderDouble) GetUserAttributeVerificationCodeWithContext(i0 context.Context, i1 *cognitoidentityprovider.GetUserAttributeVerificationCodeInput, i2 ...request.Option) (r0 *cognitoidentityprovider.GetUserAttributeVerificationCodeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUserAttributeVerificationCodeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.GetUserAttributeVerificationCodeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeGetUserAttributeVerificationCodeWithContext(ctx context.Context, in *cognitoidentityprovider.GetUserAttributeVerificationCodeInput, _ ...request.Option) (*cognitoidentityprovider.GetUserAttributeVerificationCodeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetUserAttributeVerificationCode cancelled", ctx.Err())
	default:
		return d.GetUserAttributeVerificationCode(in)
	}
}

func (d *CognitoIdentityProviderDouble) GetUserPoolMfaConfig(i0 *cognitoidentityprovider.GetUserPoolMfaConfigInput) (r0 *cognitoidentityprovider.GetUserPoolMfaConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUserPoolMfaConfig", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.GetUserPoolMfaConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) GetUserPoolMfaConfigRequest(i0 *cognitoidentityprovider.GetUserPoolMfaConfigInput) (r0 *request.Request, r1 *cognitoidentityprovider.GetUserPoolMfaConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUserPoolMfaConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.GetUserPoolMfaConfigOutput)
	return
}

func (d *CognitoIdentityProviderDouble) GetUserPoolMfaConfigWithContext(i0 context.Context, i1 *cognitoidentityprovider.GetUserPoolMfaConfigInput, i2 ...request.Option) (r0 *cognitoidentityprovider.GetUserPoolMfaConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUserPoolMfaConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.GetUserPoolMfaConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeGetUserPoolMfaConfigWithContext(ctx context.Context, in *cognitoidentityprovider.GetUserPoolMfaConfigInput, _ ...request.Option) (*cognitoidentityprovider.GetUserPoolMfaConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetUserPoolMfaConfig cancelled", ctx.Err())
	default:
		return d.GetUserPoolMfaConfig(in)
	}
}

func (d *CognitoIdentityProviderDouble) GetUserRequest(i0 *cognitoidentityprovider.GetUserInput) (r0 *request.Request, r1 *cognitoidentityprovider.GetUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.GetUserOutput)
	return
}

func (d *CognitoIdentityProviderDouble) GetUserWithContext(i0 context.Context, i1 *cognitoidentityprovider.GetUserInput, i2 ...request.Option) (r0 *cognitoidentityprovider.GetUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.GetUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeGetUserWithContext(ctx context.Context, in *cognitoidentityprovider.GetUserInput, _ ...request.Option) (*cognitoidentityprovider.GetUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetUser cancelled", ctx.Err())
	default:
		return d.GetUser(in)
	}
}

func (d *CognitoIdentityProviderDouble) GlobalSignOut(i0 *cognitoidentityprovider.GlobalSignOutInput) (r0 *cognitoidentityprovider.GlobalSignOutOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GlobalSignOut", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.GlobalSignOutOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) GlobalSignOutRequest(i0 *cognitoidentityprovider.GlobalSignOutInput) (r0 *request.Request, r1 *cognitoidentityprovider.GlobalSignOutOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GlobalSignOutRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.GlobalSignOutOutput)
	return
}

func (d *CognitoIdentityProviderDouble) GlobalSignOutWithContext(i0 context.Context, i1 *cognitoidentityprovider.GlobalSignOutInput, i2 ...request.Option) (r0 *cognitoidentityprovider.GlobalSignOutOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GlobalSignOutWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.GlobalSignOutOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeGlobalSignOutWithContext(ctx context.Context, in *cognitoidentityprovider.GlobalSignOutInput, _ ...request.Option) (*cognitoidentityprovider.GlobalSignOutOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GlobalSignOut cancelled", ctx.Err())
	default:
		return d.GlobalSignOut(in)
	}
}

func (d *CognitoIdentityProviderDouble) InitiateAuth(i0 *cognitoidentityprovider.InitiateAuthInput) (r0 *cognitoidentityprovider.InitiateAuthOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("InitiateAuth", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.InitiateAuthOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) InitiateAuthRequest(i0 *cognitoidentityprovider.InitiateAuthInput) (r0 *request.Request, r1 *cognitoidentityprovider.InitiateAuthOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("InitiateAuthRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.InitiateAuthOutput)
	return
}

func (d *CognitoIdentityProviderDouble) InitiateAuthWithContext(i0 context.Context, i1 *cognitoidentityprovider.InitiateAuthInput, i2 ...request.Option) (r0 *cognitoidentityprovider.InitiateAuthOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("InitiateAuthWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.InitiateAuthOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeInitiateAuthWithContext(ctx context.Context, in *cognitoidentityprovider.InitiateAuthInput, _ ...request.Option) (*cognitoidentityprovider.InitiateAuthOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "InitiateAuth cancelled", ctx.Err())
	default:
		return d.InitiateAuth(in)
	}
}

func (d *CognitoIdentityProviderDouble) ListDevices(i0 *cognitoidentityprovider.ListDevicesInput) (r0 *cognitoidentityprovider.ListDevicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDevices", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.ListDevicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) ListDevicesRequest(i0 *cognitoidentityprovider.ListDevicesInput) (r0 *request.Request, r1 *cognitoidentityprovider.ListDevicesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDevicesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.ListDevicesOutput)
	return
}

func (d *CognitoIdentityProviderDouble) ListDevicesWithContext(i0 context.Context, i1 *cognitoidentityprovider.ListDevicesInput, i2 ...request.Option) (r0 *cognitoidentityprovider.ListDevicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDevicesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.ListDevicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeListDevicesWithContext(ctx context.Context, in *cognitoidentityprovider.ListDevicesInput, _ ...request.Option) (*cognitoidentityprovider.ListDevicesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDevices cancelled", ctx.Err())
	default:
		return d.ListDevices(in)
	}
}

func (d *CognitoIdentityProviderDouble) ListGroups(i0 *cognitoidentityprovider.ListGroupsInput) (r0 *cognitoidentityprovider.ListGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroups", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.ListGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) ListGroupsPages(i0 *cognitoidentityprovider.ListGroupsInput, i1 func(*cognitoidentityprovider.ListGroupsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeListGroupsPages(in *cognitoidentityprovider.ListGroupsInput, pager func(*cognitoidentityprovider.ListGroupsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListGroups", paginators, in, pager)
}

func (d *CognitoIdentityProviderDouble) ListGroupsPagesWithContext(i0 context.Context, i1 *cognitoidentityprovider.ListGroupsInput, i2 func(*cognitoidentityprovider.ListGroupsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeListGroupsPagesWithContext(ctx context.Context, in *cognitoidentityprovider.ListGroupsInput, pager func(*cognitoidentityprovider.ListGroupsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListGroups", paginators, ctx, in, pager, options...)
}

func (d *CognitoIdentityProviderDouble) ListGroupsRequest(i0 *cognitoidentityprovider.ListGroupsInput) (r0 *request.Request, r1 *cognitoidentityprovider.ListGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.ListGroupsOutput)
	return
}

func (d *CognitoIdentityProviderDouble) ListGroupsWithContext(i0 context.Context, i1 *cognitoidentityprovider.ListGroupsInput, i2 ...request.Option) (r0 *cognitoidentityprovider.ListGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.ListGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeListGroupsWithContext(ctx context.Context, in *cognitoidentityprovider.ListGroupsInput, _ ...request.Option) (*cognitoidentityprovider.ListGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListGroups cancelled", ctx.Err())
	default:
		return d.ListGroups(in)
	}
}

func (d *CognitoIdentityProviderDouble) ListIdentityProviders(i0 *cognitoidentityprovider.ListIdentityProvidersInput) (r0 *cognitoidentityprovider.ListIdentityProvidersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIdentityProviders", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.ListIdentityProvidersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) ListIdentityProvidersPages(i0 *cognitoidentityprovider.ListIdentityProvidersInput, i1 func(*cognitoidentityprovider.ListIdentityProvidersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIdentityProvidersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeListIdentityProvidersPages(in *cognitoidentityprovider.ListIdentityProvidersInput, pager func(*cognitoidentityprovider.ListIdentityProvidersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListIdentityProviders", paginators, in, pager)
}

func (d *CognitoIdentityProviderDouble) ListIdentityProvidersPagesWithContext(i0 context.Context, i1 *cognitoidentityprovider.ListIdentityProvidersInput, i2 func(*cognitoidentityprovider.ListIdentityProvidersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIdentityProvidersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeListIdentityProvidersPagesWithContext(ctx context.Context, in *cognitoidentityprovider.ListIdentityProvidersInput, pager func(*cognitoidentityprovider.ListIdentityProvidersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListIdentityProviders", paginators, ctx, in, pager, options...)
}

func (d *CognitoIdentityProviderDouble) ListIdentityProvidersRequest(i0 *cognitoidentityprovider.ListIdentityProvidersInput) (r0 *request.Request, r1 *cognitoidentityprovider.ListIdentityProvidersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIdentityProvidersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.ListIdentityProvidersOutput)
	return
}

func (d *CognitoIdentityProviderDouble) ListIdentityProvidersWithContext(i0 context.Context, i1 *cognitoidentityprovider.ListIdentityProvidersInput, i2 ...request.Option) (r0 *cognitoidentityprovider.ListIdentityProvidersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIdentityProvidersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.ListIdentityProvidersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeListIdentityProvidersWithContext(ctx context.Context, in *cognitoidentityprovider.ListIdentityProvidersInput, _ ...request.Option) (*cognitoidentityprovider.ListIdentityProvidersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListIdentityProviders cancelled", ctx.Err())
	default:
		return d.ListIdentityProviders(in)
	}
}

func (d *CognitoIdentityProviderDouble) ListResourceServers(i0 *cognitoidentityprovider.ListResourceServersInput) (r0 *cognitoidentityprovider.ListResourceServersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourceServers", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.ListResourceServersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) ListResourceServersPages(i0 *cognitoidentityprovider.ListResourceServersInput, i1 func(*cognitoidentityprovider.ListResourceServersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourceServersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeListResourceServersPages(in *cognitoidentityprovider.ListResourceServersInput, pager func(*cognitoidentityprovider.ListResourceServersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListResourceServers", paginators, in, pager)
}

func (d *CognitoIdentityProviderDouble) ListResourceServersPagesWithContext(i0 context.Context, i1 *cognitoidentityprovider.ListResourceServersInput, i2 func(*cognitoidentityprovider.ListResourceServersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourceServersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeListResourceServersPagesWithContext(ctx context.Context, in *cognitoidentityprovider.ListResourceServersInput, pager func(*cognitoidentityprovider.ListResourceServersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListResourceServers", paginators, ctx, in, pager, options...)
}

func (d *CognitoIdentityProviderDouble) ListResourceServersRequest(i0 *cognitoidentityprovider.ListResourceServersInput) (r0 *request.Request, r1 *cognitoidentityprovider.ListResourceServersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourceServersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.ListResourceServersOutput)
	return
}

func (d *CognitoIdentityProviderDouble) ListResourceServersWithContext(i0 context.Context, i1 *cognitoidentityprovider.ListResourceServersInput, i2 ...request.Option) (r0 *cognitoidentityprovider.ListResourceServersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourceServersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.ListResourceServersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeListResourceServersWithContext(ctx context.Context, in *cognitoidentityprovider.ListResourceServersInput, _ ...request.Option) (*cognitoidentityprovider.ListResourceServersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListResourceServers cancelled", ctx.Err())
	default:
		return d.ListResourceServers(in)
	}
}

func (d *CognitoIdentityProviderDouble) ListTagsForResource(i0 *cognitoidentityprovider.ListTagsForResourceInput) (r0 *cognitoidentityprovider.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) ListTagsForResourceRequest(i0 *cognitoidentityprovider.ListTagsForResourceInput) (r0 *request.Request, r1 *cognitoidentityprovider.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.ListTagsForResourceOutput)
	return
}

func (d *CognitoIdentityProviderDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *cognitoidentityprovider.ListTagsForResourceInput, i2 ...request.Option) (r0 *cognitoidentityprovider.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *cognitoidentityprovider.ListTagsForResourceInput, _ ...request.Option) (*cognitoidentityprovider.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *CognitoIdentityProviderDouble) ListUserImportJobs(i0 *cognitoidentityprovider.ListUserImportJobsInput) (r0 *cognitoidentityprovider.ListUserImportJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUserImportJobs", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.ListUserImportJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) ListUserImportJobsRequest(i0 *cognitoidentityprovider.ListUserImportJobsInput) (r0 *request.Request, r1 *cognitoidentityprovider.ListUserImportJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUserImportJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.ListUserImportJobsOutput)
	return
}

func (d *CognitoIdentityProviderDouble) ListUserImportJobsWithContext(i0 context.Context, i1 *cognitoidentityprovider.ListUserImportJobsInput, i2 ...request.Option) (r0 *cognitoidentityprovider.ListUserImportJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUserImportJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.ListUserImportJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeListUserImportJobsWithContext(ctx context.Context, in *cognitoidentityprovider.ListUserImportJobsInput, _ ...request.Option) (*cognitoidentityprovider.ListUserImportJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListUserImportJobs cancelled", ctx.Err())
	default:
		return d.ListUserImportJobs(in)
	}
}

func (d *CognitoIdentityProviderDouble) ListUserPoolClients(i0 *cognitoidentityprovider.ListUserPoolClientsInput) (r0 *cognitoidentityprovider.ListUserPoolClientsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUserPoolClients", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.ListUserPoolClientsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) ListUserPoolClientsPages(i0 *cognitoidentityprovider.ListUserPoolClientsInput, i1 func(*cognitoidentityprovider.ListUserPoolClientsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUserPoolClientsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeListUserPoolClientsPages(in *cognitoidentityprovider.ListUserPoolClientsInput, pager func(*cognitoidentityprovider.ListUserPoolClientsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListUserPoolClients", paginators, in, pager)
}

func (d *CognitoIdentityProviderDouble) ListUserPoolClientsPagesWithContext(i0 context.Context, i1 *cognitoidentityprovider.ListUserPoolClientsInput, i2 func(*cognitoidentityprovider.ListUserPoolClientsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUserPoolClientsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeListUserPoolClientsPagesWithContext(ctx context.Context, in *cognitoidentityprovider.ListUserPoolClientsInput, pager func(*cognitoidentityprovider.ListUserPoolClientsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListUserPoolClients", paginators, ctx, in, pager, options...)
}

func (d *CognitoIdentityProviderDouble) ListUserPoolClientsRequest(i0 *cognitoidentityprovider.ListUserPoolClientsInput) (r0 *request.Request, r1 *cognitoidentityprovider.ListUserPoolClientsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUserPoolClientsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.ListUserPoolClientsOutput)
	return
}

func (d *CognitoIdentityProviderDouble) ListUserPoolClientsWithContext(i0 context.Context, i1 *cognitoidentityprovider.ListUserPoolClientsInput, i2 ...request.Option) (r0 *cognitoidentityprovider.ListUserPoolClientsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUserPoolClientsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.ListUserPoolClientsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeListUserPoolClientsWithContext(ctx context.Context, in *cognitoidentityprovider.ListUserPoolClientsInput, _ ...request.Option) (*cognitoidentityprovider.ListUserPoolClientsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListUserPoolClients cancelled", ctx.Err())
	default:
		return d.ListUserPoolClients(in)
	}
}

func (d *CognitoIdentityProviderDouble) ListUserPools(i0 *cognitoidentityprovider.ListUserPoolsInput) (r0 *cognitoidentityprovider.ListUserPoolsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUserPools", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.ListUserPoolsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) ListUserPoolsPages(i0 *cognitoidentityprovider.ListUserPoolsInput, i1 func(*cognitoidentityprovider.ListUserPoolsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUserPoolsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeListUserPoolsPages(in *cognitoidentityprovider.ListUserPoolsInput, pager func(*cognitoidentityprovider.ListUserPoolsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListUserPools", paginators, in, pager)
}

func (d *CognitoIdentityProviderDouble) ListUserPoolsPagesWithContext(i0 context.Context, i1 *cognitoidentityprovider.ListUserPoolsInput, i2 func(*cognitoidentityprovider.ListUserPoolsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUserPoolsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeListUserPoolsPagesWithContext(ctx context.Context, in *cognitoidentityprovider.ListUserPoolsInput, pager func(*cognitoidentityprovider.ListUserPoolsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListUserPools", paginators, ctx, in, pager, options...)
}

func (d *CognitoIdentityProviderDouble) ListUserPoolsRequest(i0 *cognitoidentityprovider.ListUserPoolsInput) (r0 *request.Request, r1 *cognitoidentityprovider.ListUserPoolsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUserPoolsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.ListUserPoolsOutput)
	return
}

func (d *CognitoIdentityProviderDouble) ListUserPoolsWithContext(i0 context.Context, i1 *cognitoidentityprovider.ListUserPoolsInput, i2 ...request.Option) (r0 *cognitoidentityprovider.ListUserPoolsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUserPoolsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.ListUserPoolsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeListUserPoolsWithContext(ctx context.Context, in *cognitoidentityprovider.ListUserPoolsInput, _ ...request.Option) (*cognitoidentityprovider.ListUserPoolsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListUserPools cancelled", ctx.Err())
	default:
		return d.ListUserPools(in)
	}
}

func (d *CognitoIdentityProviderDouble) ListUsers(i0 *cognitoidentityprovider.ListUsersInput) (r0 *cognitoidentityprovider.ListUsersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUsers", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.ListUsersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) ListUsersInGroup(i0 *cognitoidentityprovider.ListUsersInGroupInput) (r0 *cognitoidentityprovider.ListUsersInGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUsersInGroup", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.ListUsersInGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) ListUsersInGroupPages(i0 *cognitoidentityprovider.ListUsersInGroupInput, i1 func(*cognitoidentityprovider.ListUsersInGroupOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUsersInGroupPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeListUsersInGroupPages(in *cognitoidentityprovider.ListUsersInGroupInput, pager func(*cognitoidentityprovider.ListUsersInGroupOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListUsersInGroup", paginators, in, pager)
}

func (d *CognitoIdentityProviderDouble) ListUsersInGroupPagesWithContext(i0 context.Context, i1 *cognitoidentityprovider.ListUsersInGroupInput, i2 func(*cognitoidentityprovider.ListUsersInGroupOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUsersInGroupPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeListUsersInGroupPagesWithContext(ctx context.Context, in *cognitoidentityprovider.ListUsersInGroupInput, pager func(*cognitoidentityprovider.ListUsersInGroupOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListUsersInGroup", paginators, ctx, in, pager, options...)
}

func (d *CognitoIdentityProviderDouble) ListUsersInGroupRequest(i0 *cognitoidentityprovider.ListUsersInGroupInput) (r0 *request.Request, r1 *cognitoidentityprovider.ListUsersInGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUsersInGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.ListUsersInGroupOutput)
	return
}

func (d *CognitoIdentityProviderDouble) ListUsersInGroupWithContext(i0 context.Context, i1 *cognitoidentityprovider.ListUsersInGroupInput, i2 ...request.Option) (r0 *cognitoidentityprovider.ListUsersInGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUsersInGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.ListUsersInGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeListUsersInGroupWithContext(ctx context.Context, in *cognitoidentityprovider.ListUsersInGroupInput, _ ...request.Option) (*cognitoidentityprovider.ListUsersInGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListUsersInGroup cancelled", ctx.Err())
	default:
		return d.ListUsersInGroup(in)
	}
}

func (d *CognitoIdentityProviderDouble) ListUsersPages(i0 *cognitoidentityprovider.ListUsersInput, i1 func(*cognitoidentityprovider.ListUsersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUsersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeListUsersPages(in *cognitoidentityprovider.ListUsersInput, pager func(*cognitoidentityprovider.ListUsersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListUsers", paginators, in, pager)
}

func (d *CognitoIdentityProviderDouble) ListUsersPagesWithContext(i0 context.Context, i1 *cognitoidentityprovider.ListUsersInput, i2 func(*cognitoidentityprovider.ListUsersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUsersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeListUsersPagesWithContext(ctx context.Context, in *cognitoidentityprovider.ListUsersInput, pager func(*cognitoidentityprovider.ListUsersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListUsers", paginators, ctx, in, pager, options...)
}

func (d *CognitoIdentityProviderDouble) ListUsersRequest(i0 *cognitoidentityprovider.ListUsersInput) (r0 *request.Request, r1 *cognitoidentityprovider.ListUsersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUsersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.ListUsersOutput)
	return
}

func (d *CognitoIdentityProviderDouble) ListUsersWithContext(i0 context.Context, i1 *cognitoidentityprovider.ListUsersInput, i2 ...request.Option) (r0 *cognitoidentityprovider.ListUsersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUsersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.ListUsersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeListUsersWithContext(ctx context.Context, in *cognitoidentityprovider.ListUsersInput, _ ...request.Option) (*cognitoidentityprovider.ListUsersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListUsers cancelled", ctx.Err())
	default:
		return d.ListUsers(in)
	}
}

func (d *CognitoIdentityProviderDouble) ResendConfirmationCode(i0 *cognitoidentityprovider.ResendConfirmationCodeInput) (r0 *cognitoidentityprovider.ResendConfirmationCodeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResendConfirmationCode", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.ResendConfirmationCodeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) ResendConfirmationCodeRequest(i0 *cognitoidentityprovider.ResendConfirmationCodeInput) (r0 *request.Request, r1 *cognitoidentityprovider.ResendConfirmationCodeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResendConfirmationCodeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.ResendConfirmationCodeOutput)
	return
}

func (d *CognitoIdentityProviderDouble) ResendConfirmationCodeWithContext(i0 context.Context, i1 *cognitoidentityprovider.ResendConfirmationCodeInput, i2 ...request.Option) (r0 *cognitoidentityprovider.ResendConfirmationCodeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResendConfirmationCodeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.ResendConfirmationCodeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeResendConfirmationCodeWithContext(ctx context.Context, in *cognitoidentityprovider.ResendConfirmationCodeInput, _ ...request.Option) (*cognitoidentityprovider.ResendConfirmationCodeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ResendConfirmationCode cancelled", ctx.Err())
	default:
		return d.ResendConfirmationCode(in)
	}
}

func (d *CognitoIdentityProviderDouble) RespondToAuthChallenge(i0 *cognitoidentityprovider.RespondToAuthChallengeInput) (r0 *cognitoidentityprovider.RespondToAuthChallengeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RespondToAuthChallenge", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.RespondToAuthChallengeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) RespondToAuthChallengeRequest(i0 *cognitoidentityprovider.RespondToAuthChallengeInput) (r0 *request.Request, r1 *cognitoidentityprovider.RespondToAuthChallengeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RespondToAuthChallengeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.RespondToAuthChallengeOutput)
	return
}

func (d *CognitoIdentityProviderDouble) RespondToAuthChallengeWithContext(i0 context.Context, i1 *cognitoidentityprovider.RespondToAuthChallengeInput, i2 ...request.Option) (r0 *cognitoidentityprovider.RespondToAuthChallengeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RespondToAuthChallengeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.RespondToAuthChallengeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeRespondToAuthChallengeWithContext(ctx context.Context, in *cognitoidentityprovider.RespondToAuthChallengeInput, _ ...request.Option) (*cognitoidentityprovider.RespondToAuthChallengeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RespondToAuthChallenge cancelled", ctx.Err())
	default:
		return d.RespondToAuthChallenge(in)
	}
}

func (d *CognitoIdentityProviderDouble) SetRiskConfiguration(i0 *cognitoidentityprovider.SetRiskConfigurationInput) (r0 *cognitoidentityprovider.SetRiskConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetRiskConfiguration", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.SetRiskConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) SetRiskConfigurationRequest(i0 *cognitoidentityprovider.SetRiskConfigurationInput) (r0 *request.Request, r1 *cognitoidentityprovider.SetRiskConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetRiskConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.SetRiskConfigurationOutput)
	return
}

func (d *CognitoIdentityProviderDouble) SetRiskConfigurationWithContext(i0 context.Context, i1 *cognitoidentityprovider.SetRiskConfigurationInput, i2 ...request.Option) (r0 *cognitoidentityprovider.SetRiskConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetRiskConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.SetRiskConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeSetRiskConfigurationWithContext(ctx context.Context, in *cognitoidentityprovider.SetRiskConfigurationInput, _ ...request.Option) (*cognitoidentityprovider.SetRiskConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetRiskConfiguration cancelled", ctx.Err())
	default:
		return d.SetRiskConfiguration(in)
	}
}

func (d *CognitoIdentityProviderDouble) SetUICustomization(i0 *cognitoidentityprovider.SetUICustomizationInput) (r0 *cognitoidentityprovider.SetUICustomizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetUICustomization", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.SetUICustomizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) SetUICustomizationRequest(i0 *cognitoidentityprovider.SetUICustomizationInput) (r0 *request.Request, r1 *cognitoidentityprovider.SetUICustomizationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetUICustomizationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.SetUICustomizationOutput)
	return
}

func (d *CognitoIdentityProviderDouble) SetUICustomizationWithContext(i0 context.Context, i1 *cognitoidentityprovider.SetUICustomizationInput, i2 ...request.Option) (r0 *cognitoidentityprovider.SetUICustomizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetUICustomizationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.SetUICustomizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeSetUICustomizationWithContext(ctx context.Context, in *cognitoidentityprovider.SetUICustomizationInput, _ ...request.Option) (*cognitoidentityprovider.SetUICustomizationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetUICustomization cancelled", ctx.Err())
	default:
		return d.SetUICustomization(in)
	}
}

func (d *CognitoIdentityProviderDouble) SetUserMFAPreference(i0 *cognitoidentityprovider.SetUserMFAPreferenceInput) (r0 *cognitoidentityprovider.SetUserMFAPreferenceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetUserMFAPreference", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.SetUserMFAPreferenceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) SetUserMFAPreferenceRequest(i0 *cognitoidentityprovider.SetUserMFAPreferenceInput) (r0 *request.Request, r1 *cognitoidentityprovider.SetUserMFAPreferenceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetUserMFAPreferenceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.SetUserMFAPreferenceOutput)
	return
}

func (d *CognitoIdentityProviderDouble) SetUserMFAPreferenceWithContext(i0 context.Context, i1 *cognitoidentityprovider.SetUserMFAPreferenceInput, i2 ...request.Option) (r0 *cognitoidentityprovider.SetUserMFAPreferenceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetUserMFAPreferenceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.SetUserMFAPreferenceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeSetUserMFAPreferenceWithContext(ctx context.Context, in *cognitoidentityprovider.SetUserMFAPreferenceInput, _ ...request.Option) (*cognitoidentityprovider.SetUserMFAPreferenceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetUserMFAPreference cancelled", ctx.Err())
	default:
		return d.SetUserMFAPreference(in)
	}
}

func (d *CognitoIdentityProviderDouble) SetUserPoolMfaConfig(i0 *cognitoidentityprovider.SetUserPoolMfaConfigInput) (r0 *cognitoidentityprovider.SetUserPoolMfaConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetUserPoolMfaConfig", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.SetUserPoolMfaConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) SetUserPoolMfaConfigRequest(i0 *cognitoidentityprovider.SetUserPoolMfaConfigInput) (r0 *request.Request, r1 *cognitoidentityprovider.SetUserPoolMfaConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetUserPoolMfaConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.SetUserPoolMfaConfigOutput)
	return
}

func (d *CognitoIdentityProviderDouble) SetUserPoolMfaConfigWithContext(i0 context.Context, i1 *cognitoidentityprovider.SetUserPoolMfaConfigInput, i2 ...request.Option) (r0 *cognitoidentityprovider.SetUserPoolMfaConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetUserPoolMfaConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.SetUserPoolMfaConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeSetUserPoolMfaConfigWithContext(ctx context.Context, in *cognitoidentityprovider.SetUserPoolMfaConfigInput, _ ...request.Option) (*cognitoidentityprovider.SetUserPoolMfaConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetUserPoolMfaConfig cancelled", ctx.Err())
	default:
		return d.SetUserPoolMfaConfig(in)
	}
}

func (d *CognitoIdentityProviderDouble) SetUserSettings(i0 *cognitoidentityprovider.SetUserSettingsInput) (r0 *cognitoidentityprovider.SetUserSettingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetUserSettings", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.SetUserSettingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) SetUserSettingsRequest(i0 *cognitoidentityprovider.SetUserSettingsInput) (r0 *request.Request, r1 *cognitoidentityprovider.SetUserSettingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetUserSettingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.SetUserSettingsOutput)
	return
}

func (d *CognitoIdentityProviderDouble) SetUserSettingsWithContext(i0 context.Context, i1 *cognitoidentityprovider.SetUserSettingsInput, i2 ...request.Option) (r0 *cognitoidentityprovider.SetUserSettingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetUserSettingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.SetUserSettingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeSetUserSettingsWithContext(ctx context.Context, in *cognitoidentityprovider.SetUserSettingsInput, _ ...request.Option) (*cognitoidentityprovider.SetUserSettingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetUserSettings cancelled", ctx.Err())
	default:
		return d.SetUserSettings(in)
	}
}

func (d *CognitoIdentityProviderDouble) SignUp(i0 *cognitoidentityprovider.SignUpInput) (r0 *cognitoidentityprovider.SignUpOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SignUp", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.SignUpOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) SignUpRequest(i0 *cognitoidentityprovider.SignUpInput) (r0 *request.Request, r1 *cognitoidentityprovider.SignUpOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SignUpRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.SignUpOutput)
	return
}

func (d *CognitoIdentityProviderDouble) SignUpWithContext(i0 context.Context, i1 *cognitoidentityprovider.SignUpInput, i2 ...request.Option) (r0 *cognitoidentityprovider.SignUpOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SignUpWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.SignUpOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeSignUpWithContext(ctx context.Context, in *cognitoidentityprovider.SignUpInput, _ ...request.Option) (*cognitoidentityprovider.SignUpOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SignUp cancelled", ctx.Err())
	default:
		return d.SignUp(in)
	}
}

func (d *CognitoIdentityProviderDouble) StartUserImportJob(i0 *cognitoidentityprovider.StartUserImportJobInput) (r0 *cognitoidentityprovider.StartUserImportJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartUserImportJob", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.StartUserImportJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) StartUserImportJobRequest(i0 *cognitoidentityprovider.StartUserImportJobInput) (r0 *request.Request, r1 *cognitoidentityprovider.StartUserImportJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartUserImportJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.StartUserImportJobOutput)
	return
}

func (d *CognitoIdentityProviderDouble) StartUserImportJobWithContext(i0 context.Context, i1 *cognitoidentityprovider.StartUserImportJobInput, i2 ...request.Option) (r0 *cognitoidentityprovider.StartUserImportJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartUserImportJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.StartUserImportJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeStartUserImportJobWithContext(ctx context.Context, in *cognitoidentityprovider.StartUserImportJobInput, _ ...request.Option) (*cognitoidentityprovider.StartUserImportJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartUserImportJob cancelled", ctx.Err())
	default:
		return d.StartUserImportJob(in)
	}
}

func (d *CognitoIdentityProviderDouble) StopUserImportJob(i0 *cognitoidentityprovider.StopUserImportJobInput) (r0 *cognitoidentityprovider.StopUserImportJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopUserImportJob", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.StopUserImportJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) StopUserImportJobRequest(i0 *cognitoidentityprovider.StopUserImportJobInput) (r0 *request.Request, r1 *cognitoidentityprovider.StopUserImportJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopUserImportJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.StopUserImportJobOutput)
	return
}

func (d *CognitoIdentityProviderDouble) StopUserImportJobWithContext(i0 context.Context, i1 *cognitoidentityprovider.StopUserImportJobInput, i2 ...request.Option) (r0 *cognitoidentityprovider.StopUserImportJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopUserImportJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.StopUserImportJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeStopUserImportJobWithContext(ctx context.Context, in *cognitoidentityprovider.StopUserImportJobInput, _ ...request.Option) (*cognitoidentityprovider.StopUserImportJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopUserImportJob cancelled", ctx.Err())
	default:
		return d.StopUserImportJob(in)
	}
}

func (d *CognitoIdentityProviderDouble) TagResource(i0 *cognitoidentityprovider.TagResourceInput) (r0 *cognitoidentityprovider.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) TagResourceRequest(i0 *cognitoidentityprovider.TagResourceInput) (r0 *request.Request, r1 *cognitoidentityprovider.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.TagResourceOutput)
	return
}

func (d *CognitoIdentityProviderDouble) TagResourceWithContext(i0 context.Context, i1 *cognitoidentityprovider.TagResourceInput, i2 ...request.Option) (r0 *cognitoidentityprovider.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeTagResourceWithContext(ctx context.Context, in *cognitoidentityprovider.TagResourceInput, _ ...request.Option) (*cognitoidentityprovider.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *CognitoIdentityProviderDouble) UntagResource(i0 *cognitoidentityprovider.UntagResourceInput) (r0 *cognitoidentityprovider.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) UntagResourceRequest(i0 *cognitoidentityprovider.UntagResourceInput) (r0 *request.Request, r1 *cognitoidentityprovider.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.UntagResourceOutput)
	return
}

func (d *CognitoIdentityProviderDouble) UntagResourceWithContext(i0 context.Context, i1 *cognitoidentityprovider.UntagResourceInput, i2 ...request.Option) (r0 *cognitoidentityprovider.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeUntagResourceWithContext(ctx context.Context, in *cognitoidentityprovider.UntagResourceInput, _ ...request.Option) (*cognitoidentityprovider.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *CognitoIdentityProviderDouble) UpdateAuthEventFeedback(i0 *cognitoidentityprovider.UpdateAuthEventFeedbackInput) (r0 *cognitoidentityprovider.UpdateAuthEventFeedbackOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAuthEventFeedback", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.UpdateAuthEventFeedbackOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) UpdateAuthEventFeedbackRequest(i0 *cognitoidentityprovider.UpdateAuthEventFeedbackInput) (r0 *request.Request, r1 *cognitoidentityprovider.UpdateAuthEventFeedbackOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAuthEventFeedbackRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.UpdateAuthEventFeedbackOutput)
	return
}

func (d *CognitoIdentityProviderDouble) UpdateAuthEventFeedbackWithContext(i0 context.Context, i1 *cognitoidentityprovider.UpdateAuthEventFeedbackInput, i2 ...request.Option) (r0 *cognitoidentityprovider.UpdateAuthEventFeedbackOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAuthEventFeedbackWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.UpdateAuthEventFeedbackOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeUpdateAuthEventFeedbackWithContext(ctx context.Context, in *cognitoidentityprovider.UpdateAuthEventFeedbackInput, _ ...request.Option) (*cognitoidentityprovider.UpdateAuthEventFeedbackOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateAuthEventFeedback cancelled", ctx.Err())
	default:
		return d.UpdateAuthEventFeedback(in)
	}
}

func (d *CognitoIdentityProviderDouble) UpdateDeviceStatus(i0 *cognitoidentityprovider.UpdateDeviceStatusInput) (r0 *cognitoidentityprovider.UpdateDeviceStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDeviceStatus", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.UpdateDeviceStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) UpdateDeviceStatusRequest(i0 *cognitoidentityprovider.UpdateDeviceStatusInput) (r0 *request.Request, r1 *cognitoidentityprovider.UpdateDeviceStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDeviceStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.UpdateDeviceStatusOutput)
	return
}

func (d *CognitoIdentityProviderDouble) UpdateDeviceStatusWithContext(i0 context.Context, i1 *cognitoidentityprovider.UpdateDeviceStatusInput, i2 ...request.Option) (r0 *cognitoidentityprovider.UpdateDeviceStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDeviceStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.UpdateDeviceStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeUpdateDeviceStatusWithContext(ctx context.Context, in *cognitoidentityprovider.UpdateDeviceStatusInput, _ ...request.Option) (*cognitoidentityprovider.UpdateDeviceStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDeviceStatus cancelled", ctx.Err())
	default:
		return d.UpdateDeviceStatus(in)
	}
}

func (d *CognitoIdentityProviderDouble) UpdateGroup(i0 *cognitoidentityprovider.UpdateGroupInput) (r0 *cognitoidentityprovider.UpdateGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGroup", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.UpdateGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) UpdateGroupRequest(i0 *cognitoidentityprovider.UpdateGroupInput) (r0 *request.Request, r1 *cognitoidentityprovider.UpdateGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.UpdateGroupOutput)
	return
}

func (d *CognitoIdentityProviderDouble) UpdateGroupWithContext(i0 context.Context, i1 *cognitoidentityprovider.UpdateGroupInput, i2 ...request.Option) (r0 *cognitoidentityprovider.UpdateGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.UpdateGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeUpdateGroupWithContext(ctx context.Context, in *cognitoidentityprovider.UpdateGroupInput, _ ...request.Option) (*cognitoidentityprovider.UpdateGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateGroup cancelled", ctx.Err())
	default:
		return d.UpdateGroup(in)
	}
}

func (d *CognitoIdentityProviderDouble) UpdateIdentityProvider(i0 *cognitoidentityprovider.UpdateIdentityProviderInput) (r0 *cognitoidentityprovider.UpdateIdentityProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateIdentityProvider", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.UpdateIdentityProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) UpdateIdentityProviderRequest(i0 *cognitoidentityprovider.UpdateIdentityProviderInput) (r0 *request.Request, r1 *cognitoidentityprovider.UpdateIdentityProviderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateIdentityProviderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.UpdateIdentityProviderOutput)
	return
}

func (d *CognitoIdentityProviderDouble) UpdateIdentityProviderWithContext(i0 context.Context, i1 *cognitoidentityprovider.UpdateIdentityProviderInput, i2 ...request.Option) (r0 *cognitoidentityprovider.UpdateIdentityProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateIdentityProviderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.UpdateIdentityProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeUpdateIdentityProviderWithContext(ctx context.Context, in *cognitoidentityprovider.UpdateIdentityProviderInput, _ ...request.Option) (*cognitoidentityprovider.UpdateIdentityProviderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateIdentityProvider cancelled", ctx.Err())
	default:
		return d.UpdateIdentityProvider(in)
	}
}

func (d *CognitoIdentityProviderDouble) UpdateResourceServer(i0 *cognitoidentityprovider.UpdateResourceServerInput) (r0 *cognitoidentityprovider.UpdateResourceServerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateResourceServer", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.UpdateResourceServerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) UpdateResourceServerRequest(i0 *cognitoidentityprovider.UpdateResourceServerInput) (r0 *request.Request, r1 *cognitoidentityprovider.UpdateResourceServerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateResourceServerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.UpdateResourceServerOutput)
	return
}

func (d *CognitoIdentityProviderDouble) UpdateResourceServerWithContext(i0 context.Context, i1 *cognitoidentityprovider.UpdateResourceServerInput, i2 ...request.Option) (r0 *cognitoidentityprovider.UpdateResourceServerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateResourceServerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.UpdateResourceServerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeUpdateResourceServerWithContext(ctx context.Context, in *cognitoidentityprovider.UpdateResourceServerInput, _ ...request.Option) (*cognitoidentityprovider.UpdateResourceServerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateResourceServer cancelled", ctx.Err())
	default:
		return d.UpdateResourceServer(in)
	}
}

func (d *CognitoIdentityProviderDouble) UpdateUserAttributes(i0 *cognitoidentityprovider.UpdateUserAttributesInput) (r0 *cognitoidentityprovider.UpdateUserAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserAttributes", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.UpdateUserAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) UpdateUserAttributesRequest(i0 *cognitoidentityprovider.UpdateUserAttributesInput) (r0 *request.Request, r1 *cognitoidentityprovider.UpdateUserAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.UpdateUserAttributesOutput)
	return
}

func (d *CognitoIdentityProviderDouble) UpdateUserAttributesWithContext(i0 context.Context, i1 *cognitoidentityprovider.UpdateUserAttributesInput, i2 ...request.Option) (r0 *cognitoidentityprovider.UpdateUserAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.UpdateUserAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeUpdateUserAttributesWithContext(ctx context.Context, in *cognitoidentityprovider.UpdateUserAttributesInput, _ ...request.Option) (*cognitoidentityprovider.UpdateUserAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateUserAttributes cancelled", ctx.Err())
	default:
		return d.UpdateUserAttributes(in)
	}
}

func (d *CognitoIdentityProviderDouble) UpdateUserPool(i0 *cognitoidentityprovider.UpdateUserPoolInput) (r0 *cognitoidentityprovider.UpdateUserPoolOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserPool", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.UpdateUserPoolOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) UpdateUserPoolClient(i0 *cognitoidentityprovider.UpdateUserPoolClientInput) (r0 *cognitoidentityprovider.UpdateUserPoolClientOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserPoolClient", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.UpdateUserPoolClientOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) UpdateUserPoolClientRequest(i0 *cognitoidentityprovider.UpdateUserPoolClientInput) (r0 *request.Request, r1 *cognitoidentityprovider.UpdateUserPoolClientOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserPoolClientRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.UpdateUserPoolClientOutput)
	return
}

func (d *CognitoIdentityProviderDouble) UpdateUserPoolClientWithContext(i0 context.Context, i1 *cognitoidentityprovider.UpdateUserPoolClientInput, i2 ...request.Option) (r0 *cognitoidentityprovider.UpdateUserPoolClientOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserPoolClientWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.UpdateUserPoolClientOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeUpdateUserPoolClientWithContext(ctx context.Context, in *cognitoidentityprovider.UpdateUserPoolClientInput, _ ...request.Option) (*cognitoidentityprovider.UpdateUserPoolClientOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateUserPoolClient cancelled", ctx.Err())
	default:
		return d.UpdateUserPoolClient(in)
	}
}

func (d *CognitoIdentityProviderDouble) UpdateUserPoolDomain(i0 *cognitoidentityprovider.UpdateUserPoolDomainInput) (r0 *cognitoidentityprovider.UpdateUserPoolDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserPoolDomain", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.UpdateUserPoolDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) UpdateUserPoolDomainRequest(i0 *cognitoidentityprovider.UpdateUserPoolDomainInput) (r0 *request.Request, r1 *cognitoidentityprovider.UpdateUserPoolDomainOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserPoolDomainRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.UpdateUserPoolDomainOutput)
	return
}

func (d *CognitoIdentityProviderDouble) UpdateUserPoolDomainWithContext(i0 context.Context, i1 *cognitoidentityprovider.UpdateUserPoolDomainInput, i2 ...request.Option) (r0 *cognitoidentityprovider.UpdateUserPoolDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserPoolDomainWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.UpdateUserPoolDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeUpdateUserPoolDomainWithContext(ctx context.Context, in *cognitoidentityprovider.UpdateUserPoolDomainInput, _ ...request.Option) (*cognitoidentityprovider.UpdateUserPoolDomainOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateUserPoolDomain cancelled", ctx.Err())
	default:
		return d.UpdateUserPoolDomain(in)
	}
}

func (d *CognitoIdentityProviderDouble) UpdateUserPoolRequest(i0 *cognitoidentityprovider.UpdateUserPoolInput) (r0 *request.Request, r1 *cognitoidentityprovider.UpdateUserPoolOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserPoolRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.UpdateUserPoolOutput)
	return
}

func (d *CognitoIdentityProviderDouble) UpdateUserPoolWithContext(i0 context.Context, i1 *cognitoidentityprovider.UpdateUserPoolInput, i2 ...request.Option) (r0 *cognitoidentityprovider.UpdateUserPoolOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserPoolWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.UpdateUserPoolOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeUpdateUserPoolWithContext(ctx context.Context, in *cognitoidentityprovider.UpdateUserPoolInput, _ ...request.Option) (*cognitoidentityprovider.UpdateUserPoolOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateUserPool cancelled", ctx.Err())
	default:
		return d.UpdateUserPool(in)
	}
}

func (d *CognitoIdentityProviderDouble) VerifySoftwareToken(i0 *cognitoidentityprovider.VerifySoftwareTokenInput) (r0 *cognitoidentityprovider.VerifySoftwareTokenOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("VerifySoftwareToken", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.VerifySoftwareTokenOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) VerifySoftwareTokenRequest(i0 *cognitoidentityprovider.VerifySoftwareTokenInput) (r0 *request.Request, r1 *cognitoidentityprovider.VerifySoftwareTokenOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("VerifySoftwareTokenRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.VerifySoftwareTokenOutput)
	return
}

func (d *CognitoIdentityProviderDouble) VerifySoftwareTokenWithContext(i0 context.Context, i1 *cognitoidentityprovider.VerifySoftwareTokenInput, i2 ...request.Option) (r0 *cognitoidentityprovider.VerifySoftwareTokenOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("VerifySoftwareTokenWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.VerifySoftwareTokenOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeVerifySoftwareTokenWithContext(ctx context.Context, in *cognitoidentityprovider.VerifySoftwareTokenInput, _ ...request.Option) (*cognitoidentityprovider.VerifySoftwareTokenOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "VerifySoftwareToken cancelled", ctx.Err())
	default:
		return d.VerifySoftwareToken(in)
	}
}

func (d *CognitoIdentityProviderDouble) VerifyUserAttribute(i0 *cognitoidentityprovider.VerifyUserAttributeInput) (r0 *cognitoidentityprovider.VerifyUserAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("VerifyUserAttribute", i0)
	r0, _ = returns[0].(*cognitoidentityprovider.VerifyUserAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) VerifyUserAttributeRequest(i0 *cognitoidentityprovider.VerifyUserAttributeInput) (r0 *request.Request, r1 *cognitoidentityprovider.VerifyUserAttributeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("VerifyUserAttributeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentityprovider.VerifyUserAttributeOutput)
	return
}

func (d *CognitoIdentityProviderDouble) VerifyUserAttributeWithContext(i0 context.Context, i1 *cognitoidentityprovider.VerifyUserAttributeInput, i2 ...request.Option) (r0 *cognitoidentityprovider.VerifyUserAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("VerifyUserAttributeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentityprovider.VerifyUserAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityProviderDouble) fakeVerifyUserAttributeWithContext(ctx context.Context, in *cognitoidentityprovider.VerifyUserAttributeInput, _ ...request.Option) (*cognitoidentityprovider.VerifyUserAttributeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "VerifyUserAttribute cancelled", ctx.Err())
	default:
		return d.VerifyUserAttribute(in)
	}
}
