// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:13:41+11:00

// Package lightsaildouble provides a TestDouble implementation of lightsailiface.LightsailAPI
package lightsaildouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/lightsail"
	"github.com/aws/aws-sdk-go/service/lightsail/lightsailiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// LightsailDouble is TestDouble for lightsailiface.LightsailAPI
type LightsailDouble struct {
	lightsailiface.LightsailAPI
	*awsdouble.AWSTestDouble
}

// Constructor for LightsailDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *LightsailDouble {
	result := &LightsailDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*lightsailiface.LightsailAPI)(nil), configurators...)
	return result
}

func (d *LightsailDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *LightsailDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AllocateStaticIpWithContext":
		return m.Fake(d.fakeAllocateStaticIpWithContext)

	case "AttachDiskWithContext":
		return m.Fake(d.fakeAttachDiskWithContext)

	case "AttachInstancesToLoadBalancerWithContext":
		return m.Fake(d.fakeAttachInstancesToLoadBalancerWithContext)

	case "AttachLoadBalancerTlsCertificateWithContext":
		return m.Fake(d.fakeAttachLoadBalancerTlsCertificateWithContext)

	case "AttachStaticIpWithContext":
		return m.Fake(d.fakeAttachStaticIpWithContext)

	case "CloseInstancePublicPortsWithContext":
		return m.Fake(d.fakeCloseInstancePublicPortsWithContext)

	case "CopySnapshotWithContext":
		return m.Fake(d.fakeCopySnapshotWithContext)

	case "CreateCloudFormationStackWithContext":
		return m.Fake(d.fakeCreateCloudFormationStackWithContext)

	case "CreateDiskFromSnapshotWithContext":
		return m.Fake(d.fakeCreateDiskFromSnapshotWithContext)

	case "CreateDiskSnapshotWithContext":
		return m.Fake(d.fakeCreateDiskSnapshotWithContext)

	case "CreateDiskWithContext":
		return m.Fake(d.fakeCreateDiskWithContext)

	case "CreateDomainEntryWithContext":
		return m.Fake(d.fakeCreateDomainEntryWithContext)

	case "CreateDomainWithContext":
		return m.Fake(d.fakeCreateDomainWithContext)

	case "CreateInstanceSnapshotWithContext":
		return m.Fake(d.fakeCreateInstanceSnapshotWithContext)

	case "CreateInstancesFromSnapshotWithContext":
		return m.Fake(d.fakeCreateInstancesFromSnapshotWithContext)

	case "CreateInstancesWithContext":
		return m.Fake(d.fakeCreateInstancesWithContext)

	case "CreateKeyPairWithContext":
		return m.Fake(d.fakeCreateKeyPairWithContext)

	case "CreateLoadBalancerTlsCertificateWithContext":
		return m.Fake(d.fakeCreateLoadBalancerTlsCertificateWithContext)

	case "CreateLoadBalancerWithContext":
		return m.Fake(d.fakeCreateLoadBalancerWithContext)

	case "CreateRelationalDatabaseFromSnapshotWithContext":
		return m.Fake(d.fakeCreateRelationalDatabaseFromSnapshotWithContext)

	case "CreateRelationalDatabaseSnapshotWithContext":
		return m.Fake(d.fakeCreateRelationalDatabaseSnapshotWithContext)

	case "CreateRelationalDatabaseWithContext":
		return m.Fake(d.fakeCreateRelationalDatabaseWithContext)

	case "DeleteAutoSnapshotWithContext":
		return m.Fake(d.fakeDeleteAutoSnapshotWithContext)

	case "DeleteDiskSnapshotWithContext":
		return m.Fake(d.fakeDeleteDiskSnapshotWithContext)

	case "DeleteDiskWithContext":
		return m.Fake(d.fakeDeleteDiskWithContext)

	case "DeleteDomainEntryWithContext":
		return m.Fake(d.fakeDeleteDomainEntryWithContext)

	case "DeleteDomainWithContext":
		return m.Fake(d.fakeDeleteDomainWithContext)

	case "DeleteInstanceSnapshotWithContext":
		return m.Fake(d.fakeDeleteInstanceSnapshotWithContext)

	case "DeleteInstanceWithContext":
		return m.Fake(d.fakeDeleteInstanceWithContext)

	case "DeleteKeyPairWithContext":
		return m.Fake(d.fakeDeleteKeyPairWithContext)

	case "DeleteKnownHostKeysWithContext":
		return m.Fake(d.fakeDeleteKnownHostKeysWithContext)

	case "DeleteLoadBalancerTlsCertificateWithContext":
		return m.Fake(d.fakeDeleteLoadBalancerTlsCertificateWithContext)

	case "DeleteLoadBalancerWithContext":
		return m.Fake(d.fakeDeleteLoadBalancerWithContext)

	case "DeleteRelationalDatabaseSnapshotWithContext":
		return m.Fake(d.fakeDeleteRelationalDatabaseSnapshotWithContext)

	case "DeleteRelationalDatabaseWithContext":
		return m.Fake(d.fakeDeleteRelationalDatabaseWithContext)

	case "DetachDiskWithContext":
		return m.Fake(d.fakeDetachDiskWithContext)

	case "DetachInstancesFromLoadBalancerWithContext":
		return m.Fake(d.fakeDetachInstancesFromLoadBalancerWithContext)

	case "DetachStaticIpWithContext":
		return m.Fake(d.fakeDetachStaticIpWithContext)

	case "DisableAddOnWithContext":
		return m.Fake(d.fakeDisableAddOnWithContext)

	case "DownloadDefaultKeyPairWithContext":
		return m.Fake(d.fakeDownloadDefaultKeyPairWithContext)

	case "EnableAddOnWithContext":
		return m.Fake(d.fakeEnableAddOnWithContext)

	case "ExportSnapshotWithContext":
		return m.Fake(d.fakeExportSnapshotWithContext)

	case "GetActiveNamesWithContext":
		return m.Fake(d.fakeGetActiveNamesWithContext)

	case "GetAutoSnapshotsWithContext":
		return m.Fake(d.fakeGetAutoSnapshotsWithContext)

	case "GetBlueprintsWithContext":
		return m.Fake(d.fakeGetBlueprintsWithContext)

	case "GetBundlesWithContext":
		return m.Fake(d.fakeGetBundlesWithContext)

	case "GetCloudFormationStackRecordsWithContext":
		return m.Fake(d.fakeGetCloudFormationStackRecordsWithContext)

	case "GetDiskSnapshotWithContext":
		return m.Fake(d.fakeGetDiskSnapshotWithContext)

	case "GetDiskSnapshotsWithContext":
		return m.Fake(d.fakeGetDiskSnapshotsWithContext)

	case "GetDiskWithContext":
		return m.Fake(d.fakeGetDiskWithContext)

	case "GetDisksWithContext":
		return m.Fake(d.fakeGetDisksWithContext)

	case "GetDomainWithContext":
		return m.Fake(d.fakeGetDomainWithContext)

	case "GetDomainsWithContext":
		return m.Fake(d.fakeGetDomainsWithContext)

	case "GetExportSnapshotRecordsWithContext":
		return m.Fake(d.fakeGetExportSnapshotRecordsWithContext)

	case "GetInstanceAccessDetailsWithContext":
		return m.Fake(d.fakeGetInstanceAccessDetailsWithContext)

	case "GetInstanceMetricDataWithContext":
		return m.Fake(d.fakeGetInstanceMetricDataWithContext)

	case "GetInstancePortStatesWithContext":
		return m.Fake(d.fakeGetInstancePortStatesWithContext)

	case "GetInstanceSnapshotWithContext":
		return m.Fake(d.fakeGetInstanceSnapshotWithContext)

	case "GetInstanceSnapshotsWithContext":
		return m.Fake(d.fakeGetInstanceSnapshotsWithContext)

	case "GetInstanceStateWithContext":
		return m.Fake(d.fakeGetInstanceStateWithContext)

	case "GetInstanceWithContext":
		return m.Fake(d.fakeGetInstanceWithContext)

	case "GetInstancesWithContext":
		return m.Fake(d.fakeGetInstancesWithContext)

	case "GetKeyPairWithContext":
		return m.Fake(d.fakeGetKeyPairWithContext)

	case "GetKeyPairsWithContext":
		return m.Fake(d.fakeGetKeyPairsWithContext)

	case "GetLoadBalancerMetricDataWithContext":
		return m.Fake(d.fakeGetLoadBalancerMetricDataWithContext)

	case "GetLoadBalancerTlsCertificatesWithContext":
		return m.Fake(d.fakeGetLoadBalancerTlsCertificatesWithContext)

	case "GetLoadBalancerWithContext":
		return m.Fake(d.fakeGetLoadBalancerWithContext)

	case "GetLoadBalancersWithContext":
		return m.Fake(d.fakeGetLoadBalancersWithContext)

	case "GetOperationWithContext":
		return m.Fake(d.fakeGetOperationWithContext)

	case "GetOperationsForResourceWithContext":
		return m.Fake(d.fakeGetOperationsForResourceWithContext)

	case "GetOperationsWithContext":
		return m.Fake(d.fakeGetOperationsWithContext)

	case "GetRegionsWithContext":
		return m.Fake(d.fakeGetRegionsWithContext)

	case "GetRelationalDatabaseBlueprintsWithContext":
		return m.Fake(d.fakeGetRelationalDatabaseBlueprintsWithContext)

	case "GetRelationalDatabaseBundlesWithContext":
		return m.Fake(d.fakeGetRelationalDatabaseBundlesWithContext)

	case "GetRelationalDatabaseEventsWithContext":
		return m.Fake(d.fakeGetRelationalDatabaseEventsWithContext)

	case "GetRelationalDatabaseLogEventsWithContext":
		return m.Fake(d.fakeGetRelationalDatabaseLogEventsWithContext)

	case "GetRelationalDatabaseLogStreamsWithContext":
		return m.Fake(d.fakeGetRelationalDatabaseLogStreamsWithContext)

	case "GetRelationalDatabaseMasterUserPasswordWithContext":
		return m.Fake(d.fakeGetRelationalDatabaseMasterUserPasswordWithContext)

	case "GetRelationalDatabaseMetricDataWithContext":
		return m.Fake(d.fakeGetRelationalDatabaseMetricDataWithContext)

	case "GetRelationalDatabaseParametersWithContext":
		return m.Fake(d.fakeGetRelationalDatabaseParametersWithContext)

	case "GetRelationalDatabaseSnapshotWithContext":
		return m.Fake(d.fakeGetRelationalDatabaseSnapshotWithContext)

	case "GetRelationalDatabaseSnapshotsWithContext":
		return m.Fake(d.fakeGetRelationalDatabaseSnapshotsWithContext)

	case "GetRelationalDatabaseWithContext":
		return m.Fake(d.fakeGetRelationalDatabaseWithContext)

	case "GetRelationalDatabasesWithContext":
		return m.Fake(d.fakeGetRelationalDatabasesWithContext)

	case "GetStaticIpWithContext":
		return m.Fake(d.fakeGetStaticIpWithContext)

	case "GetStaticIpsWithContext":
		return m.Fake(d.fakeGetStaticIpsWithContext)

	case "ImportKeyPairWithContext":
		return m.Fake(d.fakeImportKeyPairWithContext)

	case "IsVpcPeeredWithContext":
		return m.Fake(d.fakeIsVpcPeeredWithContext)

	case "OpenInstancePublicPortsWithContext":
		return m.Fake(d.fakeOpenInstancePublicPortsWithContext)

	case "PeerVpcWithContext":
		return m.Fake(d.fakePeerVpcWithContext)

	case "PutInstancePublicPortsWithContext":
		return m.Fake(d.fakePutInstancePublicPortsWithContext)

	case "RebootInstanceWithContext":
		return m.Fake(d.fakeRebootInstanceWithContext)

	case "RebootRelationalDatabaseWithContext":
		return m.Fake(d.fakeRebootRelationalDatabaseWithContext)

	case "ReleaseStaticIpWithContext":
		return m.Fake(d.fakeReleaseStaticIpWithContext)

	case "StartInstanceWithContext":
		return m.Fake(d.fakeStartInstanceWithContext)

	case "StartRelationalDatabaseWithContext":
		return m.Fake(d.fakeStartRelationalDatabaseWithContext)

	case "StopInstanceWithContext":
		return m.Fake(d.fakeStopInstanceWithContext)

	case "StopRelationalDatabaseWithContext":
		return m.Fake(d.fakeStopRelationalDatabaseWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UnpeerVpcWithContext":
		return m.Fake(d.fakeUnpeerVpcWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateDomainEntryWithContext":
		return m.Fake(d.fakeUpdateDomainEntryWithContext)

	case "UpdateLoadBalancerAttributeWithContext":
		return m.Fake(d.fakeUpdateLoadBalancerAttributeWithContext)

	case "UpdateRelationalDatabaseParametersWithContext":
		return m.Fake(d.fakeUpdateRelationalDatabaseParametersWithContext)

	case "UpdateRelationalDatabaseWithContext":
		return m.Fake(d.fakeUpdateRelationalDatabaseWithContext)

	default:
		return nil
	}
}

func (d *LightsailDouble) AllocateStaticIp(i0 *lightsail.AllocateStaticIpInput) (r0 *lightsail.AllocateStaticIpOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AllocateStaticIp", i0)
	r0, _ = returns[0].(*lightsail.AllocateStaticIpOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) AllocateStaticIpRequest(i0 *lightsail.AllocateStaticIpInput) (r0 *request.Request, r1 *lightsail.AllocateStaticIpOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AllocateStaticIpRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.AllocateStaticIpOutput)
	return
}

func (d *LightsailDouble) AllocateStaticIpWithContext(i0 context.Context, i1 *lightsail.AllocateStaticIpInput, i2 ...request.Option) (r0 *lightsail.AllocateStaticIpOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AllocateStaticIpWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.AllocateStaticIpOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeAllocateStaticIpWithContext(ctx context.Context, in *lightsail.AllocateStaticIpInput, _ ...request.Option) (*lightsail.AllocateStaticIpOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AllocateStaticIp cancelled", ctx.Err())
	default:
		return d.AllocateStaticIp(in)
	}
}

func (d *LightsailDouble) AttachDisk(i0 *lightsail.AttachDiskInput) (r0 *lightsail.AttachDiskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachDisk", i0)
	r0, _ = returns[0].(*lightsail.AttachDiskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) AttachDiskRequest(i0 *lightsail.AttachDiskInput) (r0 *request.Request, r1 *lightsail.AttachDiskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachDiskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.AttachDiskOutput)
	return
}

func (d *LightsailDouble) AttachDiskWithContext(i0 context.Context, i1 *lightsail.AttachDiskInput, i2 ...request.Option) (r0 *lightsail.AttachDiskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachDiskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.AttachDiskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeAttachDiskWithContext(ctx context.Context, in *lightsail.AttachDiskInput, _ ...request.Option) (*lightsail.AttachDiskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AttachDisk cancelled", ctx.Err())
	default:
		return d.AttachDisk(in)
	}
}

func (d *LightsailDouble) AttachInstancesToLoadBalancer(i0 *lightsail.AttachInstancesToLoadBalancerInput) (r0 *lightsail.AttachInstancesToLoadBalancerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachInstancesToLoadBalancer", i0)
	r0, _ = returns[0].(*lightsail.AttachInstancesToLoadBalancerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) AttachInstancesToLoadBalancerRequest(i0 *lightsail.AttachInstancesToLoadBalancerInput) (r0 *request.Request, r1 *lightsail.AttachInstancesToLoadBalancerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachInstancesToLoadBalancerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.AttachInstancesToLoadBalancerOutput)
	return
}

func (d *LightsailDouble) AttachInstancesToLoadBalancerWithContext(i0 context.Context, i1 *lightsail.AttachInstancesToLoadBalancerInput, i2 ...request.Option) (r0 *lightsail.AttachInstancesToLoadBalancerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachInstancesToLoadBalancerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.AttachInstancesToLoadBalancerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeAttachInstancesToLoadBalancerWithContext(ctx context.Context, in *lightsail.AttachInstancesToLoadBalancerInput, _ ...request.Option) (*lightsail.AttachInstancesToLoadBalancerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AttachInstancesToLoadBalancer cancelled", ctx.Err())
	default:
		return d.AttachInstancesToLoadBalancer(in)
	}
}

func (d *LightsailDouble) AttachLoadBalancerTlsCertificate(i0 *lightsail.AttachLoadBalancerTlsCertificateInput) (r0 *lightsail.AttachLoadBalancerTlsCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachLoadBalancerTlsCertificate", i0)
	r0, _ = returns[0].(*lightsail.AttachLoadBalancerTlsCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) AttachLoadBalancerTlsCertificateRequest(i0 *lightsail.AttachLoadBalancerTlsCertificateInput) (r0 *request.Request, r1 *lightsail.AttachLoadBalancerTlsCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachLoadBalancerTlsCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.AttachLoadBalancerTlsCertificateOutput)
	return
}

func (d *LightsailDouble) AttachLoadBalancerTlsCertificateWithContext(i0 context.Context, i1 *lightsail.AttachLoadBalancerTlsCertificateInput, i2 ...request.Option) (r0 *lightsail.AttachLoadBalancerTlsCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachLoadBalancerTlsCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.AttachLoadBalancerTlsCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeAttachLoadBalancerTlsCertificateWithContext(ctx context.Context, in *lightsail.AttachLoadBalancerTlsCertificateInput, _ ...request.Option) (*lightsail.AttachLoadBalancerTlsCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AttachLoadBalancerTlsCertificate cancelled", ctx.Err())
	default:
		return d.AttachLoadBalancerTlsCertificate(in)
	}
}

func (d *LightsailDouble) AttachStaticIp(i0 *lightsail.AttachStaticIpInput) (r0 *lightsail.AttachStaticIpOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachStaticIp", i0)
	r0, _ = returns[0].(*lightsail.AttachStaticIpOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) AttachStaticIpRequest(i0 *lightsail.AttachStaticIpInput) (r0 *request.Request, r1 *lightsail.AttachStaticIpOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachStaticIpRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.AttachStaticIpOutput)
	return
}

func (d *LightsailDouble) AttachStaticIpWithContext(i0 context.Context, i1 *lightsail.AttachStaticIpInput, i2 ...request.Option) (r0 *lightsail.AttachStaticIpOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachStaticIpWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.AttachStaticIpOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeAttachStaticIpWithContext(ctx context.Context, in *lightsail.AttachStaticIpInput, _ ...request.Option) (*lightsail.AttachStaticIpOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AttachStaticIp cancelled", ctx.Err())
	default:
		return d.AttachStaticIp(in)
	}
}

func (d *LightsailDouble) CloseInstancePublicPorts(i0 *lightsail.CloseInstancePublicPortsInput) (r0 *lightsail.CloseInstancePublicPortsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CloseInstancePublicPorts", i0)
	r0, _ = returns[0].(*lightsail.CloseInstancePublicPortsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) CloseInstancePublicPortsRequest(i0 *lightsail.CloseInstancePublicPortsInput) (r0 *request.Request, r1 *lightsail.CloseInstancePublicPortsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CloseInstancePublicPortsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.CloseInstancePublicPortsOutput)
	return
}

func (d *LightsailDouble) CloseInstancePublicPortsWithContext(i0 context.Context, i1 *lightsail.CloseInstancePublicPortsInput, i2 ...request.Option) (r0 *lightsail.CloseInstancePublicPortsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CloseInstancePublicPortsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.CloseInstancePublicPortsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeCloseInstancePublicPortsWithContext(ctx context.Context, in *lightsail.CloseInstancePublicPortsInput, _ ...request.Option) (*lightsail.CloseInstancePublicPortsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CloseInstancePublicPorts cancelled", ctx.Err())
	default:
		return d.CloseInstancePublicPorts(in)
	}
}

func (d *LightsailDouble) CopySnapshot(i0 *lightsail.CopySnapshotInput) (r0 *lightsail.CopySnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopySnapshot", i0)
	r0, _ = returns[0].(*lightsail.CopySnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) CopySnapshotRequest(i0 *lightsail.CopySnapshotInput) (r0 *request.Request, r1 *lightsail.CopySnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopySnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.CopySnapshotOutput)
	return
}

func (d *LightsailDouble) CopySnapshotWithContext(i0 context.Context, i1 *lightsail.CopySnapshotInput, i2 ...request.Option) (r0 *lightsail.CopySnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopySnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.CopySnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeCopySnapshotWithContext(ctx context.Context, in *lightsail.CopySnapshotInput, _ ...request.Option) (*lightsail.CopySnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CopySnapshot cancelled", ctx.Err())
	default:
		return d.CopySnapshot(in)
	}
}

func (d *LightsailDouble) CreateCloudFormationStack(i0 *lightsail.CreateCloudFormationStackInput) (r0 *lightsail.CreateCloudFormationStackOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCloudFormationStack", i0)
	r0, _ = returns[0].(*lightsail.CreateCloudFormationStackOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) CreateCloudFormationStackRequest(i0 *lightsail.CreateCloudFormationStackInput) (r0 *request.Request, r1 *lightsail.CreateCloudFormationStackOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCloudFormationStackRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.CreateCloudFormationStackOutput)
	return
}

func (d *LightsailDouble) CreateCloudFormationStackWithContext(i0 context.Context, i1 *lightsail.CreateCloudFormationStackInput, i2 ...request.Option) (r0 *lightsail.CreateCloudFormationStackOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCloudFormationStackWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.CreateCloudFormationStackOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeCreateCloudFormationStackWithContext(ctx context.Context, in *lightsail.CreateCloudFormationStackInput, _ ...request.Option) (*lightsail.CreateCloudFormationStackOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateCloudFormationStack cancelled", ctx.Err())
	default:
		return d.CreateCloudFormationStack(in)
	}
}

func (d *LightsailDouble) CreateDisk(i0 *lightsail.CreateDiskInput) (r0 *lightsail.CreateDiskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDisk", i0)
	r0, _ = returns[0].(*lightsail.CreateDiskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) CreateDiskFromSnapshot(i0 *lightsail.CreateDiskFromSnapshotInput) (r0 *lightsail.CreateDiskFromSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDiskFromSnapshot", i0)
	r0, _ = returns[0].(*lightsail.CreateDiskFromSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) CreateDiskFromSnapshotRequest(i0 *lightsail.CreateDiskFromSnapshotInput) (r0 *request.Request, r1 *lightsail.CreateDiskFromSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDiskFromSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.CreateDiskFromSnapshotOutput)
	return
}

func (d *LightsailDouble) CreateDiskFromSnapshotWithContext(i0 context.Context, i1 *lightsail.CreateDiskFromSnapshotInput, i2 ...request.Option) (r0 *lightsail.CreateDiskFromSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDiskFromSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.CreateDiskFromSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeCreateDiskFromSnapshotWithContext(ctx context.Context, in *lightsail.CreateDiskFromSnapshotInput, _ ...request.Option) (*lightsail.CreateDiskFromSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDiskFromSnapshot cancelled", ctx.Err())
	default:
		return d.CreateDiskFromSnapshot(in)
	}
}

func (d *LightsailDouble) CreateDiskRequest(i0 *lightsail.CreateDiskInput) (r0 *request.Request, r1 *lightsail.CreateDiskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDiskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.CreateDiskOutput)
	return
}

func (d *LightsailDouble) CreateDiskSnapshot(i0 *lightsail.CreateDiskSnapshotInput) (r0 *lightsail.CreateDiskSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDiskSnapshot", i0)
	r0, _ = returns[0].(*lightsail.CreateDiskSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) CreateDiskSnapshotRequest(i0 *lightsail.CreateDiskSnapshotInput) (r0 *request.Request, r1 *lightsail.CreateDiskSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDiskSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.CreateDiskSnapshotOutput)
	return
}

func (d *LightsailDouble) CreateDiskSnapshotWithContext(i0 context.Context, i1 *lightsail.CreateDiskSnapshotInput, i2 ...request.Option) (r0 *lightsail.CreateDiskSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDiskSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.CreateDiskSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeCreateDiskSnapshotWithContext(ctx context.Context, in *lightsail.CreateDiskSnapshotInput, _ ...request.Option) (*lightsail.CreateDiskSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDiskSnapshot cancelled", ctx.Err())
	default:
		return d.CreateDiskSnapshot(in)
	}
}

func (d *LightsailDouble) CreateDiskWithContext(i0 context.Context, i1 *lightsail.CreateDiskInput, i2 ...request.Option) (r0 *lightsail.CreateDiskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDiskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.CreateDiskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeCreateDiskWithContext(ctx context.Context, in *lightsail.CreateDiskInput, _ ...request.Option) (*lightsail.CreateDiskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDisk cancelled", ctx.Err())
	default:
		return d.CreateDisk(in)
	}
}

func (d *LightsailDouble) CreateDomain(i0 *lightsail.CreateDomainInput) (r0 *lightsail.CreateDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDomain", i0)
	r0, _ = returns[0].(*lightsail.CreateDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) CreateDomainEntry(i0 *lightsail.CreateDomainEntryInput) (r0 *lightsail.CreateDomainEntryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDomainEntry", i0)
	r0, _ = returns[0].(*lightsail.CreateDomainEntryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) CreateDomainEntryRequest(i0 *lightsail.CreateDomainEntryInput) (r0 *request.Request, r1 *lightsail.CreateDomainEntryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDomainEntryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.CreateDomainEntryOutput)
	return
}

func (d *LightsailDouble) CreateDomainEntryWithContext(i0 context.Context, i1 *lightsail.CreateDomainEntryInput, i2 ...request.Option) (r0 *lightsail.CreateDomainEntryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDomainEntryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.CreateDomainEntryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeCreateDomainEntryWithContext(ctx context.Context, in *lightsail.CreateDomainEntryInput, _ ...request.Option) (*lightsail.CreateDomainEntryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDomainEntry cancelled", ctx.Err())
	default:
		return d.CreateDomainEntry(in)
	}
}

func (d *LightsailDouble) CreateDomainRequest(i0 *lightsail.CreateDomainInput) (r0 *request.Request, r1 *lightsail.CreateDomainOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDomainRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.CreateDomainOutput)
	return
}

func (d *LightsailDouble) CreateDomainWithContext(i0 context.Context, i1 *lightsail.CreateDomainInput, i2 ...request.Option) (r0 *lightsail.CreateDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDomainWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.CreateDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeCreateDomainWithContext(ctx context.Context, in *lightsail.CreateDomainInput, _ ...request.Option) (*lightsail.CreateDomainOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDomain cancelled", ctx.Err())
	default:
		return d.CreateDomain(in)
	}
}

func (d *LightsailDouble) CreateInstanceSnapshot(i0 *lightsail.CreateInstanceSnapshotInput) (r0 *lightsail.CreateInstanceSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInstanceSnapshot", i0)
	r0, _ = returns[0].(*lightsail.CreateInstanceSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) CreateInstanceSnapshotRequest(i0 *lightsail.CreateInstanceSnapshotInput) (r0 *request.Request, r1 *lightsail.CreateInstanceSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInstanceSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.CreateInstanceSnapshotOutput)
	return
}

func (d *LightsailDouble) CreateInstanceSnapshotWithContext(i0 context.Context, i1 *lightsail.CreateInstanceSnapshotInput, i2 ...request.Option) (r0 *lightsail.CreateInstanceSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInstanceSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.CreateInstanceSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeCreateInstanceSnapshotWithContext(ctx context.Context, in *lightsail.CreateInstanceSnapshotInput, _ ...request.Option) (*lightsail.CreateInstanceSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateInstanceSnapshot cancelled", ctx.Err())
	default:
		return d.CreateInstanceSnapshot(in)
	}
}

func (d *LightsailDouble) CreateInstances(i0 *lightsail.CreateInstancesInput) (r0 *lightsail.CreateInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInstances", i0)
	r0, _ = returns[0].(*lightsail.CreateInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) CreateInstancesFromSnapshot(i0 *lightsail.CreateInstancesFromSnapshotInput) (r0 *lightsail.CreateInstancesFromSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInstancesFromSnapshot", i0)
	r0, _ = returns[0].(*lightsail.CreateInstancesFromSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) CreateInstancesFromSnapshotRequest(i0 *lightsail.CreateInstancesFromSnapshotInput) (r0 *request.Request, r1 *lightsail.CreateInstancesFromSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInstancesFromSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.CreateInstancesFromSnapshotOutput)
	return
}

func (d *LightsailDouble) CreateInstancesFromSnapshotWithContext(i0 context.Context, i1 *lightsail.CreateInstancesFromSnapshotInput, i2 ...request.Option) (r0 *lightsail.CreateInstancesFromSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInstancesFromSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.CreateInstancesFromSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeCreateInstancesFromSnapshotWithContext(ctx context.Context, in *lightsail.CreateInstancesFromSnapshotInput, _ ...request.Option) (*lightsail.CreateInstancesFromSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateInstancesFromSnapshot cancelled", ctx.Err())
	default:
		return d.CreateInstancesFromSnapshot(in)
	}
}

func (d *LightsailDouble) CreateInstancesRequest(i0 *lightsail.CreateInstancesInput) (r0 *request.Request, r1 *lightsail.CreateInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.CreateInstancesOutput)
	return
}

func (d *LightsailDouble) CreateInstancesWithContext(i0 context.Context, i1 *lightsail.CreateInstancesInput, i2 ...request.Option) (r0 *lightsail.CreateInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.CreateInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeCreateInstancesWithContext(ctx context.Context, in *lightsail.CreateInstancesInput, _ ...request.Option) (*lightsail.CreateInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateInstances cancelled", ctx.Err())
	default:
		return d.CreateInstances(in)
	}
}

func (d *LightsailDouble) CreateKeyPair(i0 *lightsail.CreateKeyPairInput) (r0 *lightsail.CreateKeyPairOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateKeyPair", i0)
	r0, _ = returns[0].(*lightsail.CreateKeyPairOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) CreateKeyPairRequest(i0 *lightsail.CreateKeyPairInput) (r0 *request.Request, r1 *lightsail.CreateKeyPairOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateKeyPairRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.CreateKeyPairOutput)
	return
}

func (d *LightsailDouble) CreateKeyPairWithContext(i0 context.Context, i1 *lightsail.CreateKeyPairInput, i2 ...request.Option) (r0 *lightsail.CreateKeyPairOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateKeyPairWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.CreateKeyPairOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeCreateKeyPairWithContext(ctx context.Context, in *lightsail.CreateKeyPairInput, _ ...request.Option) (*lightsail.CreateKeyPairOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateKeyPair cancelled", ctx.Err())
	default:
		return d.CreateKeyPair(in)
	}
}

func (d *LightsailDouble) CreateLoadBalancer(i0 *lightsail.CreateLoadBalancerInput) (r0 *lightsail.CreateLoadBalancerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLoadBalancer", i0)
	r0, _ = returns[0].(*lightsail.CreateLoadBalancerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) CreateLoadBalancerRequest(i0 *lightsail.CreateLoadBalancerInput) (r0 *request.Request, r1 *lightsail.CreateLoadBalancerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLoadBalancerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.CreateLoadBalancerOutput)
	return
}

func (d *LightsailDouble) CreateLoadBalancerTlsCertificate(i0 *lightsail.CreateLoadBalancerTlsCertificateInput) (r0 *lightsail.CreateLoadBalancerTlsCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLoadBalancerTlsCertificate", i0)
	r0, _ = returns[0].(*lightsail.CreateLoadBalancerTlsCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) CreateLoadBalancerTlsCertificateRequest(i0 *lightsail.CreateLoadBalancerTlsCertificateInput) (r0 *request.Request, r1 *lightsail.CreateLoadBalancerTlsCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLoadBalancerTlsCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.CreateLoadBalancerTlsCertificateOutput)
	return
}

func (d *LightsailDouble) CreateLoadBalancerTlsCertificateWithContext(i0 context.Context, i1 *lightsail.CreateLoadBalancerTlsCertificateInput, i2 ...request.Option) (r0 *lightsail.CreateLoadBalancerTlsCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLoadBalancerTlsCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.CreateLoadBalancerTlsCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeCreateLoadBalancerTlsCertificateWithContext(ctx context.Context, in *lightsail.CreateLoadBalancerTlsCertificateInput, _ ...request.Option) (*lightsail.CreateLoadBalancerTlsCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateLoadBalancerTlsCertificate cancelled", ctx.Err())
	default:
		return d.CreateLoadBalancerTlsCertificate(in)
	}
}

func (d *LightsailDouble) CreateLoadBalancerWithContext(i0 context.Context, i1 *lightsail.CreateLoadBalancerInput, i2 ...request.Option) (r0 *lightsail.CreateLoadBalancerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLoadBalancerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.CreateLoadBalancerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeCreateLoadBalancerWithContext(ctx context.Context, in *lightsail.CreateLoadBalancerInput, _ ...request.Option) (*lightsail.CreateLoadBalancerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateLoadBalancer cancelled", ctx.Err())
	default:
		return d.CreateLoadBalancer(in)
	}
}

func (d *LightsailDouble) CreateRelationalDatabase(i0 *lightsail.CreateRelationalDatabaseInput) (r0 *lightsail.CreateRelationalDatabaseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRelationalDatabase", i0)
	r0, _ = returns[0].(*lightsail.CreateRelationalDatabaseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) CreateRelationalDatabaseFromSnapshot(i0 *lightsail.CreateRelationalDatabaseFromSnapshotInput) (r0 *lightsail.CreateRelationalDatabaseFromSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRelationalDatabaseFromSnapshot", i0)
	r0, _ = returns[0].(*lightsail.CreateRelationalDatabaseFromSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) CreateRelationalDatabaseFromSnapshotRequest(i0 *lightsail.CreateRelationalDatabaseFromSnapshotInput) (r0 *request.Request, r1 *lightsail.CreateRelationalDatabaseFromSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRelationalDatabaseFromSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.CreateRelationalDatabaseFromSnapshotOutput)
	return
}

func (d *LightsailDouble) CreateRelationalDatabaseFromSnapshotWithContext(i0 context.Context, i1 *lightsail.CreateRelationalDatabaseFromSnapshotInput, i2 ...request.Option) (r0 *lightsail.CreateRelationalDatabaseFromSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRelationalDatabaseFromSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.CreateRelationalDatabaseFromSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeCreateRelationalDatabaseFromSnapshotWithContext(ctx context.Context, in *lightsail.CreateRelationalDatabaseFromSnapshotInput, _ ...request.Option) (*lightsail.CreateRelationalDatabaseFromSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateRelationalDatabaseFromSnapshot cancelled", ctx.Err())
	default:
		return d.CreateRelationalDatabaseFromSnapshot(in)
	}
}

func (d *LightsailDouble) CreateRelationalDatabaseRequest(i0 *lightsail.CreateRelationalDatabaseInput) (r0 *request.Request, r1 *lightsail.CreateRelationalDatabaseOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRelationalDatabaseRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.CreateRelationalDatabaseOutput)
	return
}

func (d *LightsailDouble) CreateRelationalDatabaseSnapshot(i0 *lightsail.CreateRelationalDatabaseSnapshotInput) (r0 *lightsail.CreateRelationalDatabaseSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRelationalDatabaseSnapshot", i0)
	r0, _ = returns[0].(*lightsail.CreateRelationalDatabaseSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) CreateRelationalDatabaseSnapshotRequest(i0 *lightsail.CreateRelationalDatabaseSnapshotInput) (r0 *request.Request, r1 *lightsail.CreateRelationalDatabaseSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRelationalDatabaseSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.CreateRelationalDatabaseSnapshotOutput)
	return
}

func (d *LightsailDouble) CreateRelationalDatabaseSnapshotWithContext(i0 context.Context, i1 *lightsail.CreateRelationalDatabaseSnapshotInput, i2 ...request.Option) (r0 *lightsail.CreateRelationalDatabaseSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRelationalDatabaseSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.CreateRelationalDatabaseSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeCreateRelationalDatabaseSnapshotWithContext(ctx context.Context, in *lightsail.CreateRelationalDatabaseSnapshotInput, _ ...request.Option) (*lightsail.CreateRelationalDatabaseSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateRelationalDatabaseSnapshot cancelled", ctx.Err())
	default:
		return d.CreateRelationalDatabaseSnapshot(in)
	}
}

func (d *LightsailDouble) CreateRelationalDatabaseWithContext(i0 context.Context, i1 *lightsail.CreateRelationalDatabaseInput, i2 ...request.Option) (r0 *lightsail.CreateRelationalDatabaseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRelationalDatabaseWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.CreateRelationalDatabaseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeCreateRelationalDatabaseWithContext(ctx context.Context, in *lightsail.CreateRelationalDatabaseInput, _ ...request.Option) (*lightsail.CreateRelationalDatabaseOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateRelationalDatabase cancelled", ctx.Err())
	default:
		return d.CreateRelationalDatabase(in)
	}
}

func (d *LightsailDouble) DeleteAutoSnapshot(i0 *lightsail.DeleteAutoSnapshotInput) (r0 *lightsail.DeleteAutoSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAutoSnapshot", i0)
	r0, _ = returns[0].(*lightsail.DeleteAutoSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) DeleteAutoSnapshotRequest(i0 *lightsail.DeleteAutoSnapshotInput) (r0 *request.Request, r1 *lightsail.DeleteAutoSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAutoSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.DeleteAutoSnapshotOutput)
	return
}

func (d *LightsailDouble) DeleteAutoSnapshotWithContext(i0 context.Context, i1 *lightsail.DeleteAutoSnapshotInput, i2 ...request.Option) (r0 *lightsail.DeleteAutoSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAutoSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.DeleteAutoSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeDeleteAutoSnapshotWithContext(ctx context.Context, in *lightsail.DeleteAutoSnapshotInput, _ ...request.Option) (*lightsail.DeleteAutoSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteAutoSnapshot cancelled", ctx.Err())
	default:
		return d.DeleteAutoSnapshot(in)
	}
}

func (d *LightsailDouble) DeleteDisk(i0 *lightsail.DeleteDiskInput) (r0 *lightsail.DeleteDiskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDisk", i0)
	r0, _ = returns[0].(*lightsail.DeleteDiskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) DeleteDiskRequest(i0 *lightsail.DeleteDiskInput) (r0 *request.Request, r1 *lightsail.DeleteDiskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDiskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.DeleteDiskOutput)
	return
}

func (d *LightsailDouble) DeleteDiskSnapshot(i0 *lightsail.DeleteDiskSnapshotInput) (r0 *lightsail.DeleteDiskSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDiskSnapshot", i0)
	r0, _ = returns[0].(*lightsail.DeleteDiskSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) DeleteDiskSnapshotRequest(i0 *lightsail.DeleteDiskSnapshotInput) (r0 *request.Request, r1 *lightsail.DeleteDiskSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDiskSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.DeleteDiskSnapshotOutput)
	return
}

func (d *LightsailDouble) DeleteDiskSnapshotWithContext(i0 context.Context, i1 *lightsail.DeleteDiskSnapshotInput, i2 ...request.Option) (r0 *lightsail.DeleteDiskSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDiskSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.DeleteDiskSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeDeleteDiskSnapshotWithContext(ctx context.Context, in *lightsail.DeleteDiskSnapshotInput, _ ...request.Option) (*lightsail.DeleteDiskSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDiskSnapshot cancelled", ctx.Err())
	default:
		return d.DeleteDiskSnapshot(in)
	}
}

func (d *LightsailDouble) DeleteDiskWithContext(i0 context.Context, i1 *lightsail.DeleteDiskInput, i2 ...request.Option) (r0 *lightsail.DeleteDiskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDiskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.DeleteDiskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeDeleteDiskWithContext(ctx context.Context, in *lightsail.DeleteDiskInput, _ ...request.Option) (*lightsail.DeleteDiskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDisk cancelled", ctx.Err())
	default:
		return d.DeleteDisk(in)
	}
}

func (d *LightsailDouble) DeleteDomain(i0 *lightsail.DeleteDomainInput) (r0 *lightsail.DeleteDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDomain", i0)
	r0, _ = returns[0].(*lightsail.DeleteDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) DeleteDomainEntry(i0 *lightsail.DeleteDomainEntryInput) (r0 *lightsail.DeleteDomainEntryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDomainEntry", i0)
	r0, _ = returns[0].(*lightsail.DeleteDomainEntryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) DeleteDomainEntryRequest(i0 *lightsail.DeleteDomainEntryInput) (r0 *request.Request, r1 *lightsail.DeleteDomainEntryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDomainEntryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.DeleteDomainEntryOutput)
	return
}

func (d *LightsailDouble) DeleteDomainEntryWithContext(i0 context.Context, i1 *lightsail.DeleteDomainEntryInput, i2 ...request.Option) (r0 *lightsail.DeleteDomainEntryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDomainEntryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.DeleteDomainEntryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeDeleteDomainEntryWithContext(ctx context.Context, in *lightsail.DeleteDomainEntryInput, _ ...request.Option) (*lightsail.DeleteDomainEntryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDomainEntry cancelled", ctx.Err())
	default:
		return d.DeleteDomainEntry(in)
	}
}

func (d *LightsailDouble) DeleteDomainRequest(i0 *lightsail.DeleteDomainInput) (r0 *request.Request, r1 *lightsail.DeleteDomainOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDomainRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.DeleteDomainOutput)
	return
}

func (d *LightsailDouble) DeleteDomainWithContext(i0 context.Context, i1 *lightsail.DeleteDomainInput, i2 ...request.Option) (r0 *lightsail.DeleteDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDomainWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.DeleteDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeDeleteDomainWithContext(ctx context.Context, in *lightsail.DeleteDomainInput, _ ...request.Option) (*lightsail.DeleteDomainOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDomain cancelled", ctx.Err())
	default:
		return d.DeleteDomain(in)
	}
}

func (d *LightsailDouble) DeleteInstance(i0 *lightsail.DeleteInstanceInput) (r0 *lightsail.DeleteInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInstance", i0)
	r0, _ = returns[0].(*lightsail.DeleteInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) DeleteInstanceRequest(i0 *lightsail.DeleteInstanceInput) (r0 *request.Request, r1 *lightsail.DeleteInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.DeleteInstanceOutput)
	return
}

func (d *LightsailDouble) DeleteInstanceSnapshot(i0 *lightsail.DeleteInstanceSnapshotInput) (r0 *lightsail.DeleteInstanceSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInstanceSnapshot", i0)
	r0, _ = returns[0].(*lightsail.DeleteInstanceSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) DeleteInstanceSnapshotRequest(i0 *lightsail.DeleteInstanceSnapshotInput) (r0 *request.Request, r1 *lightsail.DeleteInstanceSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInstanceSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.DeleteInstanceSnapshotOutput)
	return
}

func (d *LightsailDouble) DeleteInstanceSnapshotWithContext(i0 context.Context, i1 *lightsail.DeleteInstanceSnapshotInput, i2 ...request.Option) (r0 *lightsail.DeleteInstanceSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInstanceSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.DeleteInstanceSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeDeleteInstanceSnapshotWithContext(ctx context.Context, in *lightsail.DeleteInstanceSnapshotInput, _ ...request.Option) (*lightsail.DeleteInstanceSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteInstanceSnapshot cancelled", ctx.Err())
	default:
		return d.DeleteInstanceSnapshot(in)
	}
}

func (d *LightsailDouble) DeleteInstanceWithContext(i0 context.Context, i1 *lightsail.DeleteInstanceInput, i2 ...request.Option) (r0 *lightsail.DeleteInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.DeleteInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeDeleteInstanceWithContext(ctx context.Context, in *lightsail.DeleteInstanceInput, _ ...request.Option) (*lightsail.DeleteInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteInstance cancelled", ctx.Err())
	default:
		return d.DeleteInstance(in)
	}
}

func (d *LightsailDouble) DeleteKeyPair(i0 *lightsail.DeleteKeyPairInput) (r0 *lightsail.DeleteKeyPairOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteKeyPair", i0)
	r0, _ = returns[0].(*lightsail.DeleteKeyPairOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) DeleteKeyPairRequest(i0 *lightsail.DeleteKeyPairInput) (r0 *request.Request, r1 *lightsail.DeleteKeyPairOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteKeyPairRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.DeleteKeyPairOutput)
	return
}

func (d *LightsailDouble) DeleteKeyPairWithContext(i0 context.Context, i1 *lightsail.DeleteKeyPairInput, i2 ...request.Option) (r0 *lightsail.DeleteKeyPairOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteKeyPairWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.DeleteKeyPairOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeDeleteKeyPairWithContext(ctx context.Context, in *lightsail.DeleteKeyPairInput, _ ...request.Option) (*lightsail.DeleteKeyPairOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteKeyPair cancelled", ctx.Err())
	default:
		return d.DeleteKeyPair(in)
	}
}

func (d *LightsailDouble) DeleteKnownHostKeys(i0 *lightsail.DeleteKnownHostKeysInput) (r0 *lightsail.DeleteKnownHostKeysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteKnownHostKeys", i0)
	r0, _ = returns[0].(*lightsail.DeleteKnownHostKeysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) DeleteKnownHostKeysRequest(i0 *lightsail.DeleteKnownHostKeysInput) (r0 *request.Request, r1 *lightsail.DeleteKnownHostKeysOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteKnownHostKeysRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.DeleteKnownHostKeysOutput)
	return
}

func (d *LightsailDouble) DeleteKnownHostKeysWithContext(i0 context.Context, i1 *lightsail.DeleteKnownHostKeysInput, i2 ...request.Option) (r0 *lightsail.DeleteKnownHostKeysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteKnownHostKeysWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.DeleteKnownHostKeysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeDeleteKnownHostKeysWithContext(ctx context.Context, in *lightsail.DeleteKnownHostKeysInput, _ ...request.Option) (*lightsail.DeleteKnownHostKeysOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteKnownHostKeys cancelled", ctx.Err())
	default:
		return d.DeleteKnownHostKeys(in)
	}
}

func (d *LightsailDouble) DeleteLoadBalancer(i0 *lightsail.DeleteLoadBalancerInput) (r0 *lightsail.DeleteLoadBalancerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLoadBalancer", i0)
	r0, _ = returns[0].(*lightsail.DeleteLoadBalancerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) DeleteLoadBalancerRequest(i0 *lightsail.DeleteLoadBalancerInput) (r0 *request.Request, r1 *lightsail.DeleteLoadBalancerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLoadBalancerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.DeleteLoadBalancerOutput)
	return
}

func (d *LightsailDouble) DeleteLoadBalancerTlsCertificate(i0 *lightsail.DeleteLoadBalancerTlsCertificateInput) (r0 *lightsail.DeleteLoadBalancerTlsCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLoadBalancerTlsCertificate", i0)
	r0, _ = returns[0].(*lightsail.DeleteLoadBalancerTlsCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) DeleteLoadBalancerTlsCertificateRequest(i0 *lightsail.DeleteLoadBalancerTlsCertificateInput) (r0 *request.Request, r1 *lightsail.DeleteLoadBalancerTlsCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLoadBalancerTlsCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.DeleteLoadBalancerTlsCertificateOutput)
	return
}

func (d *LightsailDouble) DeleteLoadBalancerTlsCertificateWithContext(i0 context.Context, i1 *lightsail.DeleteLoadBalancerTlsCertificateInput, i2 ...request.Option) (r0 *lightsail.DeleteLoadBalancerTlsCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLoadBalancerTlsCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.DeleteLoadBalancerTlsCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeDeleteLoadBalancerTlsCertificateWithContext(ctx context.Context, in *lightsail.DeleteLoadBalancerTlsCertificateInput, _ ...request.Option) (*lightsail.DeleteLoadBalancerTlsCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteLoadBalancerTlsCertificate cancelled", ctx.Err())
	default:
		return d.DeleteLoadBalancerTlsCertificate(in)
	}
}

func (d *LightsailDouble) DeleteLoadBalancerWithContext(i0 context.Context, i1 *lightsail.DeleteLoadBalancerInput, i2 ...request.Option) (r0 *lightsail.DeleteLoadBalancerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLoadBalancerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.DeleteLoadBalancerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeDeleteLoadBalancerWithContext(ctx context.Context, in *lightsail.DeleteLoadBalancerInput, _ ...request.Option) (*lightsail.DeleteLoadBalancerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteLoadBalancer cancelled", ctx.Err())
	default:
		return d.DeleteLoadBalancer(in)
	}
}

func (d *LightsailDouble) DeleteRelationalDatabase(i0 *lightsail.DeleteRelationalDatabaseInput) (r0 *lightsail.DeleteRelationalDatabaseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRelationalDatabase", i0)
	r0, _ = returns[0].(*lightsail.DeleteRelationalDatabaseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) DeleteRelationalDatabaseRequest(i0 *lightsail.DeleteRelationalDatabaseInput) (r0 *request.Request, r1 *lightsail.DeleteRelationalDatabaseOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRelationalDatabaseRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.DeleteRelationalDatabaseOutput)
	return
}

func (d *LightsailDouble) DeleteRelationalDatabaseSnapshot(i0 *lightsail.DeleteRelationalDatabaseSnapshotInput) (r0 *lightsail.DeleteRelationalDatabaseSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRelationalDatabaseSnapshot", i0)
	r0, _ = returns[0].(*lightsail.DeleteRelationalDatabaseSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) DeleteRelationalDatabaseSnapshotRequest(i0 *lightsail.DeleteRelationalDatabaseSnapshotInput) (r0 *request.Request, r1 *lightsail.DeleteRelationalDatabaseSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRelationalDatabaseSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.DeleteRelationalDatabaseSnapshotOutput)
	return
}

func (d *LightsailDouble) DeleteRelationalDatabaseSnapshotWithContext(i0 context.Context, i1 *lightsail.DeleteRelationalDatabaseSnapshotInput, i2 ...request.Option) (r0 *lightsail.DeleteRelationalDatabaseSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRelationalDatabaseSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.DeleteRelationalDatabaseSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeDeleteRelationalDatabaseSnapshotWithContext(ctx context.Context, in *lightsail.DeleteRelationalDatabaseSnapshotInput, _ ...request.Option) (*lightsail.DeleteRelationalDatabaseSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRelationalDatabaseSnapshot cancelled", ctx.Err())
	default:
		return d.DeleteRelationalDatabaseSnapshot(in)
	}
}

func (d *LightsailDouble) DeleteRelationalDatabaseWithContext(i0 context.Context, i1 *lightsail.DeleteRelationalDatabaseInput, i2 ...request.Option) (r0 *lightsail.DeleteRelationalDatabaseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRelationalDatabaseWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.DeleteRelationalDatabaseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeDeleteRelationalDatabaseWithContext(ctx context.Context, in *lightsail.DeleteRelationalDatabaseInput, _ ...request.Option) (*lightsail.DeleteRelationalDatabaseOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRelationalDatabase cancelled", ctx.Err())
	default:
		return d.DeleteRelationalDatabase(in)
	}
}

func (d *LightsailDouble) DetachDisk(i0 *lightsail.DetachDiskInput) (r0 *lightsail.DetachDiskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachDisk", i0)
	r0, _ = returns[0].(*lightsail.DetachDiskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) DetachDiskRequest(i0 *lightsail.DetachDiskInput) (r0 *request.Request, r1 *lightsail.DetachDiskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachDiskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.DetachDiskOutput)
	return
}

func (d *LightsailDouble) DetachDiskWithContext(i0 context.Context, i1 *lightsail.DetachDiskInput, i2 ...request.Option) (r0 *lightsail.DetachDiskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachDiskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.DetachDiskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeDetachDiskWithContext(ctx context.Context, in *lightsail.DetachDiskInput, _ ...request.Option) (*lightsail.DetachDiskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DetachDisk cancelled", ctx.Err())
	default:
		return d.DetachDisk(in)
	}
}

func (d *LightsailDouble) DetachInstancesFromLoadBalancer(i0 *lightsail.DetachInstancesFromLoadBalancerInput) (r0 *lightsail.DetachInstancesFromLoadBalancerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachInstancesFromLoadBalancer", i0)
	r0, _ = returns[0].(*lightsail.DetachInstancesFromLoadBalancerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) DetachInstancesFromLoadBalancerRequest(i0 *lightsail.DetachInstancesFromLoadBalancerInput) (r0 *request.Request, r1 *lightsail.DetachInstancesFromLoadBalancerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachInstancesFromLoadBalancerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.DetachInstancesFromLoadBalancerOutput)
	return
}

func (d *LightsailDouble) DetachInstancesFromLoadBalancerWithContext(i0 context.Context, i1 *lightsail.DetachInstancesFromLoadBalancerInput, i2 ...request.Option) (r0 *lightsail.DetachInstancesFromLoadBalancerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachInstancesFromLoadBalancerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.DetachInstancesFromLoadBalancerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeDetachInstancesFromLoadBalancerWithContext(ctx context.Context, in *lightsail.DetachInstancesFromLoadBalancerInput, _ ...request.Option) (*lightsail.DetachInstancesFromLoadBalancerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DetachInstancesFromLoadBalancer cancelled", ctx.Err())
	default:
		return d.DetachInstancesFromLoadBalancer(in)
	}
}

func (d *LightsailDouble) DetachStaticIp(i0 *lightsail.DetachStaticIpInput) (r0 *lightsail.DetachStaticIpOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachStaticIp", i0)
	r0, _ = returns[0].(*lightsail.DetachStaticIpOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) DetachStaticIpRequest(i0 *lightsail.DetachStaticIpInput) (r0 *request.Request, r1 *lightsail.DetachStaticIpOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachStaticIpRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.DetachStaticIpOutput)
	return
}

func (d *LightsailDouble) DetachStaticIpWithContext(i0 context.Context, i1 *lightsail.DetachStaticIpInput, i2 ...request.Option) (r0 *lightsail.DetachStaticIpOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachStaticIpWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.DetachStaticIpOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeDetachStaticIpWithContext(ctx context.Context, in *lightsail.DetachStaticIpInput, _ ...request.Option) (*lightsail.DetachStaticIpOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DetachStaticIp cancelled", ctx.Err())
	default:
		return d.DetachStaticIp(in)
	}
}

func (d *LightsailDouble) DisableAddOn(i0 *lightsail.DisableAddOnInput) (r0 *lightsail.DisableAddOnOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableAddOn", i0)
	r0, _ = returns[0].(*lightsail.DisableAddOnOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) DisableAddOnRequest(i0 *lightsail.DisableAddOnInput) (r0 *request.Request, r1 *lightsail.DisableAddOnOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableAddOnRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.DisableAddOnOutput)
	return
}

func (d *LightsailDouble) DisableAddOnWithContext(i0 context.Context, i1 *lightsail.DisableAddOnInput, i2 ...request.Option) (r0 *lightsail.DisableAddOnOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableAddOnWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.DisableAddOnOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeDisableAddOnWithContext(ctx context.Context, in *lightsail.DisableAddOnInput, _ ...request.Option) (*lightsail.DisableAddOnOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisableAddOn cancelled", ctx.Err())
	default:
		return d.DisableAddOn(in)
	}
}

func (d *LightsailDouble) DownloadDefaultKeyPair(i0 *lightsail.DownloadDefaultKeyPairInput) (r0 *lightsail.DownloadDefaultKeyPairOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DownloadDefaultKeyPair", i0)
	r0, _ = returns[0].(*lightsail.DownloadDefaultKeyPairOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) DownloadDefaultKeyPairRequest(i0 *lightsail.DownloadDefaultKeyPairInput) (r0 *request.Request, r1 *lightsail.DownloadDefaultKeyPairOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DownloadDefaultKeyPairRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.DownloadDefaultKeyPairOutput)
	return
}

func (d *LightsailDouble) DownloadDefaultKeyPairWithContext(i0 context.Context, i1 *lightsail.DownloadDefaultKeyPairInput, i2 ...request.Option) (r0 *lightsail.DownloadDefaultKeyPairOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DownloadDefaultKeyPairWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.DownloadDefaultKeyPairOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeDownloadDefaultKeyPairWithContext(ctx context.Context, in *lightsail.DownloadDefaultKeyPairInput, _ ...request.Option) (*lightsail.DownloadDefaultKeyPairOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DownloadDefaultKeyPair cancelled", ctx.Err())
	default:
		return d.DownloadDefaultKeyPair(in)
	}
}

func (d *LightsailDouble) EnableAddOn(i0 *lightsail.EnableAddOnInput) (r0 *lightsail.EnableAddOnOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableAddOn", i0)
	r0, _ = returns[0].(*lightsail.EnableAddOnOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) EnableAddOnRequest(i0 *lightsail.EnableAddOnInput) (r0 *request.Request, r1 *lightsail.EnableAddOnOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableAddOnRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.EnableAddOnOutput)
	return
}

func (d *LightsailDouble) EnableAddOnWithContext(i0 context.Context, i1 *lightsail.EnableAddOnInput, i2 ...request.Option) (r0 *lightsail.EnableAddOnOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableAddOnWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.EnableAddOnOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeEnableAddOnWithContext(ctx context.Context, in *lightsail.EnableAddOnInput, _ ...request.Option) (*lightsail.EnableAddOnOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "EnableAddOn cancelled", ctx.Err())
	default:
		return d.EnableAddOn(in)
	}
}

func (d *LightsailDouble) ExportSnapshot(i0 *lightsail.ExportSnapshotInput) (r0 *lightsail.ExportSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExportSnapshot", i0)
	r0, _ = returns[0].(*lightsail.ExportSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) ExportSnapshotRequest(i0 *lightsail.ExportSnapshotInput) (r0 *request.Request, r1 *lightsail.ExportSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExportSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.ExportSnapshotOutput)
	return
}

func (d *LightsailDouble) ExportSnapshotWithContext(i0 context.Context, i1 *lightsail.ExportSnapshotInput, i2 ...request.Option) (r0 *lightsail.ExportSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExportSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.ExportSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeExportSnapshotWithContext(ctx context.Context, in *lightsail.ExportSnapshotInput, _ ...request.Option) (*lightsail.ExportSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ExportSnapshot cancelled", ctx.Err())
	default:
		return d.ExportSnapshot(in)
	}
}

func (d *LightsailDouble) GetActiveNames(i0 *lightsail.GetActiveNamesInput) (r0 *lightsail.GetActiveNamesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetActiveNames", i0)
	r0, _ = returns[0].(*lightsail.GetActiveNamesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetActiveNamesRequest(i0 *lightsail.GetActiveNamesInput) (r0 *request.Request, r1 *lightsail.GetActiveNamesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetActiveNamesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetActiveNamesOutput)
	return
}

func (d *LightsailDouble) GetActiveNamesWithContext(i0 context.Context, i1 *lightsail.GetActiveNamesInput, i2 ...request.Option) (r0 *lightsail.GetActiveNamesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetActiveNamesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetActiveNamesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetActiveNamesWithContext(ctx context.Context, in *lightsail.GetActiveNamesInput, _ ...request.Option) (*lightsail.GetActiveNamesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetActiveNames cancelled", ctx.Err())
	default:
		return d.GetActiveNames(in)
	}
}

func (d *LightsailDouble) GetAutoSnapshots(i0 *lightsail.GetAutoSnapshotsInput) (r0 *lightsail.GetAutoSnapshotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAutoSnapshots", i0)
	r0, _ = returns[0].(*lightsail.GetAutoSnapshotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetAutoSnapshotsRequest(i0 *lightsail.GetAutoSnapshotsInput) (r0 *request.Request, r1 *lightsail.GetAutoSnapshotsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAutoSnapshotsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetAutoSnapshotsOutput)
	return
}

func (d *LightsailDouble) GetAutoSnapshotsWithContext(i0 context.Context, i1 *lightsail.GetAutoSnapshotsInput, i2 ...request.Option) (r0 *lightsail.GetAutoSnapshotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAutoSnapshotsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetAutoSnapshotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetAutoSnapshotsWithContext(ctx context.Context, in *lightsail.GetAutoSnapshotsInput, _ ...request.Option) (*lightsail.GetAutoSnapshotsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetAutoSnapshots cancelled", ctx.Err())
	default:
		return d.GetAutoSnapshots(in)
	}
}

func (d *LightsailDouble) GetBlueprints(i0 *lightsail.GetBlueprintsInput) (r0 *lightsail.GetBlueprintsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBlueprints", i0)
	r0, _ = returns[0].(*lightsail.GetBlueprintsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetBlueprintsRequest(i0 *lightsail.GetBlueprintsInput) (r0 *request.Request, r1 *lightsail.GetBlueprintsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBlueprintsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetBlueprintsOutput)
	return
}

func (d *LightsailDouble) GetBlueprintsWithContext(i0 context.Context, i1 *lightsail.GetBlueprintsInput, i2 ...request.Option) (r0 *lightsail.GetBlueprintsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBlueprintsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetBlueprintsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetBlueprintsWithContext(ctx context.Context, in *lightsail.GetBlueprintsInput, _ ...request.Option) (*lightsail.GetBlueprintsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBlueprints cancelled", ctx.Err())
	default:
		return d.GetBlueprints(in)
	}
}

func (d *LightsailDouble) GetBundles(i0 *lightsail.GetBundlesInput) (r0 *lightsail.GetBundlesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBundles", i0)
	r0, _ = returns[0].(*lightsail.GetBundlesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetBundlesRequest(i0 *lightsail.GetBundlesInput) (r0 *request.Request, r1 *lightsail.GetBundlesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBundlesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetBundlesOutput)
	return
}

func (d *LightsailDouble) GetBundlesWithContext(i0 context.Context, i1 *lightsail.GetBundlesInput, i2 ...request.Option) (r0 *lightsail.GetBundlesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBundlesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetBundlesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetBundlesWithContext(ctx context.Context, in *lightsail.GetBundlesInput, _ ...request.Option) (*lightsail.GetBundlesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBundles cancelled", ctx.Err())
	default:
		return d.GetBundles(in)
	}
}

func (d *LightsailDouble) GetCloudFormationStackRecords(i0 *lightsail.GetCloudFormationStackRecordsInput) (r0 *lightsail.GetCloudFormationStackRecordsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCloudFormationStackRecords", i0)
	r0, _ = returns[0].(*lightsail.GetCloudFormationStackRecordsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetCloudFormationStackRecordsRequest(i0 *lightsail.GetCloudFormationStackRecordsInput) (r0 *request.Request, r1 *lightsail.GetCloudFormationStackRecordsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCloudFormationStackRecordsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetCloudFormationStackRecordsOutput)
	return
}

func (d *LightsailDouble) GetCloudFormationStackRecordsWithContext(i0 context.Context, i1 *lightsail.GetCloudFormationStackRecordsInput, i2 ...request.Option) (r0 *lightsail.GetCloudFormationStackRecordsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCloudFormationStackRecordsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetCloudFormationStackRecordsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetCloudFormationStackRecordsWithContext(ctx context.Context, in *lightsail.GetCloudFormationStackRecordsInput, _ ...request.Option) (*lightsail.GetCloudFormationStackRecordsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetCloudFormationStackRecords cancelled", ctx.Err())
	default:
		return d.GetCloudFormationStackRecords(in)
	}
}

func (d *LightsailDouble) GetDisk(i0 *lightsail.GetDiskInput) (r0 *lightsail.GetDiskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDisk", i0)
	r0, _ = returns[0].(*lightsail.GetDiskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetDiskRequest(i0 *lightsail.GetDiskInput) (r0 *request.Request, r1 *lightsail.GetDiskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDiskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetDiskOutput)
	return
}

func (d *LightsailDouble) GetDiskSnapshot(i0 *lightsail.GetDiskSnapshotInput) (r0 *lightsail.GetDiskSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDiskSnapshot", i0)
	r0, _ = returns[0].(*lightsail.GetDiskSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetDiskSnapshotRequest(i0 *lightsail.GetDiskSnapshotInput) (r0 *request.Request, r1 *lightsail.GetDiskSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDiskSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetDiskSnapshotOutput)
	return
}

func (d *LightsailDouble) GetDiskSnapshotWithContext(i0 context.Context, i1 *lightsail.GetDiskSnapshotInput, i2 ...request.Option) (r0 *lightsail.GetDiskSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDiskSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetDiskSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetDiskSnapshotWithContext(ctx context.Context, in *lightsail.GetDiskSnapshotInput, _ ...request.Option) (*lightsail.GetDiskSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDiskSnapshot cancelled", ctx.Err())
	default:
		return d.GetDiskSnapshot(in)
	}
}

func (d *LightsailDouble) GetDiskSnapshots(i0 *lightsail.GetDiskSnapshotsInput) (r0 *lightsail.GetDiskSnapshotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDiskSnapshots", i0)
	r0, _ = returns[0].(*lightsail.GetDiskSnapshotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetDiskSnapshotsRequest(i0 *lightsail.GetDiskSnapshotsInput) (r0 *request.Request, r1 *lightsail.GetDiskSnapshotsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDiskSnapshotsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetDiskSnapshotsOutput)
	return
}

func (d *LightsailDouble) GetDiskSnapshotsWithContext(i0 context.Context, i1 *lightsail.GetDiskSnapshotsInput, i2 ...request.Option) (r0 *lightsail.GetDiskSnapshotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDiskSnapshotsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetDiskSnapshotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetDiskSnapshotsWithContext(ctx context.Context, in *lightsail.GetDiskSnapshotsInput, _ ...request.Option) (*lightsail.GetDiskSnapshotsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDiskSnapshots cancelled", ctx.Err())
	default:
		return d.GetDiskSnapshots(in)
	}
}

func (d *LightsailDouble) GetDiskWithContext(i0 context.Context, i1 *lightsail.GetDiskInput, i2 ...request.Option) (r0 *lightsail.GetDiskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDiskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetDiskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetDiskWithContext(ctx context.Context, in *lightsail.GetDiskInput, _ ...request.Option) (*lightsail.GetDiskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDisk cancelled", ctx.Err())
	default:
		return d.GetDisk(in)
	}
}

func (d *LightsailDouble) GetDisks(i0 *lightsail.GetDisksInput) (r0 *lightsail.GetDisksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDisks", i0)
	r0, _ = returns[0].(*lightsail.GetDisksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetDisksRequest(i0 *lightsail.GetDisksInput) (r0 *request.Request, r1 *lightsail.GetDisksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDisksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetDisksOutput)
	return
}

func (d *LightsailDouble) GetDisksWithContext(i0 context.Context, i1 *lightsail.GetDisksInput, i2 ...request.Option) (r0 *lightsail.GetDisksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDisksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetDisksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetDisksWithContext(ctx context.Context, in *lightsail.GetDisksInput, _ ...request.Option) (*lightsail.GetDisksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDisks cancelled", ctx.Err())
	default:
		return d.GetDisks(in)
	}
}

func (d *LightsailDouble) GetDomain(i0 *lightsail.GetDomainInput) (r0 *lightsail.GetDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDomain", i0)
	r0, _ = returns[0].(*lightsail.GetDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetDomainRequest(i0 *lightsail.GetDomainInput) (r0 *request.Request, r1 *lightsail.GetDomainOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDomainRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetDomainOutput)
	return
}

func (d *LightsailDouble) GetDomainWithContext(i0 context.Context, i1 *lightsail.GetDomainInput, i2 ...request.Option) (r0 *lightsail.GetDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDomainWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetDomainWithContext(ctx context.Context, in *lightsail.GetDomainInput, _ ...request.Option) (*lightsail.GetDomainOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDomain cancelled", ctx.Err())
	default:
		return d.GetDomain(in)
	}
}

func (d *LightsailDouble) GetDomains(i0 *lightsail.GetDomainsInput) (r0 *lightsail.GetDomainsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDomains", i0)
	r0, _ = returns[0].(*lightsail.GetDomainsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetDomainsRequest(i0 *lightsail.GetDomainsInput) (r0 *request.Request, r1 *lightsail.GetDomainsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDomainsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetDomainsOutput)
	return
}

func (d *LightsailDouble) GetDomainsWithContext(i0 context.Context, i1 *lightsail.GetDomainsInput, i2 ...request.Option) (r0 *lightsail.GetDomainsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDomainsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetDomainsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetDomainsWithContext(ctx context.Context, in *lightsail.GetDomainsInput, _ ...request.Option) (*lightsail.GetDomainsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDomains cancelled", ctx.Err())
	default:
		return d.GetDomains(in)
	}
}

func (d *LightsailDouble) GetExportSnapshotRecords(i0 *lightsail.GetExportSnapshotRecordsInput) (r0 *lightsail.GetExportSnapshotRecordsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetExportSnapshotRecords", i0)
	r0, _ = returns[0].(*lightsail.GetExportSnapshotRecordsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetExportSnapshotRecordsRequest(i0 *lightsail.GetExportSnapshotRecordsInput) (r0 *request.Request, r1 *lightsail.GetExportSnapshotRecordsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetExportSnapshotRecordsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetExportSnapshotRecordsOutput)
	return
}

func (d *LightsailDouble) GetExportSnapshotRecordsWithContext(i0 context.Context, i1 *lightsail.GetExportSnapshotRecordsInput, i2 ...request.Option) (r0 *lightsail.GetExportSnapshotRecordsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetExportSnapshotRecordsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetExportSnapshotRecordsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetExportSnapshotRecordsWithContext(ctx context.Context, in *lightsail.GetExportSnapshotRecordsInput, _ ...request.Option) (*lightsail.GetExportSnapshotRecordsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetExportSnapshotRecords cancelled", ctx.Err())
	default:
		return d.GetExportSnapshotRecords(in)
	}
}

func (d *LightsailDouble) GetInstance(i0 *lightsail.GetInstanceInput) (r0 *lightsail.GetInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstance", i0)
	r0, _ = returns[0].(*lightsail.GetInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetInstanceAccessDetails(i0 *lightsail.GetInstanceAccessDetailsInput) (r0 *lightsail.GetInstanceAccessDetailsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstanceAccessDetails", i0)
	r0, _ = returns[0].(*lightsail.GetInstanceAccessDetailsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetInstanceAccessDetailsRequest(i0 *lightsail.GetInstanceAccessDetailsInput) (r0 *request.Request, r1 *lightsail.GetInstanceAccessDetailsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstanceAccessDetailsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetInstanceAccessDetailsOutput)
	return
}

func (d *LightsailDouble) GetInstanceAccessDetailsWithContext(i0 context.Context, i1 *lightsail.GetInstanceAccessDetailsInput, i2 ...request.Option) (r0 *lightsail.GetInstanceAccessDetailsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstanceAccessDetailsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetInstanceAccessDetailsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetInstanceAccessDetailsWithContext(ctx context.Context, in *lightsail.GetInstanceAccessDetailsInput, _ ...request.Option) (*lightsail.GetInstanceAccessDetailsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetInstanceAccessDetails cancelled", ctx.Err())
	default:
		return d.GetInstanceAccessDetails(in)
	}
}

func (d *LightsailDouble) GetInstanceMetricData(i0 *lightsail.GetInstanceMetricDataInput) (r0 *lightsail.GetInstanceMetricDataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstanceMetricData", i0)
	r0, _ = returns[0].(*lightsail.GetInstanceMetricDataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetInstanceMetricDataRequest(i0 *lightsail.GetInstanceMetricDataInput) (r0 *request.Request, r1 *lightsail.GetInstanceMetricDataOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstanceMetricDataRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetInstanceMetricDataOutput)
	return
}

func (d *LightsailDouble) GetInstanceMetricDataWithContext(i0 context.Context, i1 *lightsail.GetInstanceMetricDataInput, i2 ...request.Option) (r0 *lightsail.GetInstanceMetricDataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstanceMetricDataWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetInstanceMetricDataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetInstanceMetricDataWithContext(ctx context.Context, in *lightsail.GetInstanceMetricDataInput, _ ...request.Option) (*lightsail.GetInstanceMetricDataOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetInstanceMetricData cancelled", ctx.Err())
	default:
		return d.GetInstanceMetricData(in)
	}
}

func (d *LightsailDouble) GetInstancePortStates(i0 *lightsail.GetInstancePortStatesInput) (r0 *lightsail.GetInstancePortStatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstancePortStates", i0)
	r0, _ = returns[0].(*lightsail.GetInstancePortStatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetInstancePortStatesRequest(i0 *lightsail.GetInstancePortStatesInput) (r0 *request.Request, r1 *lightsail.GetInstancePortStatesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstancePortStatesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetInstancePortStatesOutput)
	return
}

func (d *LightsailDouble) GetInstancePortStatesWithContext(i0 context.Context, i1 *lightsail.GetInstancePortStatesInput, i2 ...request.Option) (r0 *lightsail.GetInstancePortStatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstancePortStatesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetInstancePortStatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetInstancePortStatesWithContext(ctx context.Context, in *lightsail.GetInstancePortStatesInput, _ ...request.Option) (*lightsail.GetInstancePortStatesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetInstancePortStates cancelled", ctx.Err())
	default:
		return d.GetInstancePortStates(in)
	}
}

func (d *LightsailDouble) GetInstanceRequest(i0 *lightsail.GetInstanceInput) (r0 *request.Request, r1 *lightsail.GetInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetInstanceOutput)
	return
}

func (d *LightsailDouble) GetInstanceSnapshot(i0 *lightsail.GetInstanceSnapshotInput) (r0 *lightsail.GetInstanceSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstanceSnapshot", i0)
	r0, _ = returns[0].(*lightsail.GetInstanceSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetInstanceSnapshotRequest(i0 *lightsail.GetInstanceSnapshotInput) (r0 *request.Request, r1 *lightsail.GetInstanceSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstanceSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetInstanceSnapshotOutput)
	return
}

func (d *LightsailDouble) GetInstanceSnapshotWithContext(i0 context.Context, i1 *lightsail.GetInstanceSnapshotInput, i2 ...request.Option) (r0 *lightsail.GetInstanceSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstanceSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetInstanceSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetInstanceSnapshotWithContext(ctx context.Context, in *lightsail.GetInstanceSnapshotInput, _ ...request.Option) (*lightsail.GetInstanceSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetInstanceSnapshot cancelled", ctx.Err())
	default:
		return d.GetInstanceSnapshot(in)
	}
}

func (d *LightsailDouble) GetInstanceSnapshots(i0 *lightsail.GetInstanceSnapshotsInput) (r0 *lightsail.GetInstanceSnapshotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstanceSnapshots", i0)
	r0, _ = returns[0].(*lightsail.GetInstanceSnapshotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetInstanceSnapshotsRequest(i0 *lightsail.GetInstanceSnapshotsInput) (r0 *request.Request, r1 *lightsail.GetInstanceSnapshotsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstanceSnapshotsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetInstanceSnapshotsOutput)
	return
}

func (d *LightsailDouble) GetInstanceSnapshotsWithContext(i0 context.Context, i1 *lightsail.GetInstanceSnapshotsInput, i2 ...request.Option) (r0 *lightsail.GetInstanceSnapshotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstanceSnapshotsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetInstanceSnapshotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetInstanceSnapshotsWithContext(ctx context.Context, in *lightsail.GetInstanceSnapshotsInput, _ ...request.Option) (*lightsail.GetInstanceSnapshotsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetInstanceSnapshots cancelled", ctx.Err())
	default:
		return d.GetInstanceSnapshots(in)
	}
}

func (d *LightsailDouble) GetInstanceState(i0 *lightsail.GetInstanceStateInput) (r0 *lightsail.GetInstanceStateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstanceState", i0)
	r0, _ = returns[0].(*lightsail.GetInstanceStateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetInstanceStateRequest(i0 *lightsail.GetInstanceStateInput) (r0 *request.Request, r1 *lightsail.GetInstanceStateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstanceStateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetInstanceStateOutput)
	return
}

func (d *LightsailDouble) GetInstanceStateWithContext(i0 context.Context, i1 *lightsail.GetInstanceStateInput, i2 ...request.Option) (r0 *lightsail.GetInstanceStateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstanceStateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetInstanceStateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetInstanceStateWithContext(ctx context.Context, in *lightsail.GetInstanceStateInput, _ ...request.Option) (*lightsail.GetInstanceStateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetInstanceState cancelled", ctx.Err())
	default:
		return d.GetInstanceState(in)
	}
}

func (d *LightsailDouble) GetInstanceWithContext(i0 context.Context, i1 *lightsail.GetInstanceInput, i2 ...request.Option) (r0 *lightsail.GetInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetInstanceWithContext(ctx context.Context, in *lightsail.GetInstanceInput, _ ...request.Option) (*lightsail.GetInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetInstance cancelled", ctx.Err())
	default:
		return d.GetInstance(in)
	}
}

func (d *LightsailDouble) GetInstances(i0 *lightsail.GetInstancesInput) (r0 *lightsail.GetInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstances", i0)
	r0, _ = returns[0].(*lightsail.GetInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetInstancesRequest(i0 *lightsail.GetInstancesInput) (r0 *request.Request, r1 *lightsail.GetInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetInstancesOutput)
	return
}

func (d *LightsailDouble) GetInstancesWithContext(i0 context.Context, i1 *lightsail.GetInstancesInput, i2 ...request.Option) (r0 *lightsail.GetInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetInstancesWithContext(ctx context.Context, in *lightsail.GetInstancesInput, _ ...request.Option) (*lightsail.GetInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetInstances cancelled", ctx.Err())
	default:
		return d.GetInstances(in)
	}
}

func (d *LightsailDouble) GetKeyPair(i0 *lightsail.GetKeyPairInput) (r0 *lightsail.GetKeyPairOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetKeyPair", i0)
	r0, _ = returns[0].(*lightsail.GetKeyPairOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetKeyPairRequest(i0 *lightsail.GetKeyPairInput) (r0 *request.Request, r1 *lightsail.GetKeyPairOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetKeyPairRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetKeyPairOutput)
	return
}

func (d *LightsailDouble) GetKeyPairWithContext(i0 context.Context, i1 *lightsail.GetKeyPairInput, i2 ...request.Option) (r0 *lightsail.GetKeyPairOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetKeyPairWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetKeyPairOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetKeyPairWithContext(ctx context.Context, in *lightsail.GetKeyPairInput, _ ...request.Option) (*lightsail.GetKeyPairOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetKeyPair cancelled", ctx.Err())
	default:
		return d.GetKeyPair(in)
	}
}

func (d *LightsailDouble) GetKeyPairs(i0 *lightsail.GetKeyPairsInput) (r0 *lightsail.GetKeyPairsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetKeyPairs", i0)
	r0, _ = returns[0].(*lightsail.GetKeyPairsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetKeyPairsRequest(i0 *lightsail.GetKeyPairsInput) (r0 *request.Request, r1 *lightsail.GetKeyPairsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetKeyPairsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetKeyPairsOutput)
	return
}

func (d *LightsailDouble) GetKeyPairsWithContext(i0 context.Context, i1 *lightsail.GetKeyPairsInput, i2 ...request.Option) (r0 *lightsail.GetKeyPairsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetKeyPairsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetKeyPairsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetKeyPairsWithContext(ctx context.Context, in *lightsail.GetKeyPairsInput, _ ...request.Option) (*lightsail.GetKeyPairsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetKeyPairs cancelled", ctx.Err())
	default:
		return d.GetKeyPairs(in)
	}
}

func (d *LightsailDouble) GetLoadBalancer(i0 *lightsail.GetLoadBalancerInput) (r0 *lightsail.GetLoadBalancerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLoadBalancer", i0)
	r0, _ = returns[0].(*lightsail.GetLoadBalancerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetLoadBalancerMetricData(i0 *lightsail.GetLoadBalancerMetricDataInput) (r0 *lightsail.GetLoadBalancerMetricDataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLoadBalancerMetricData", i0)
	r0, _ = returns[0].(*lightsail.GetLoadBalancerMetricDataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetLoadBalancerMetricDataRequest(i0 *lightsail.GetLoadBalancerMetricDataInput) (r0 *request.Request, r1 *lightsail.GetLoadBalancerMetricDataOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLoadBalancerMetricDataRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetLoadBalancerMetricDataOutput)
	return
}

func (d *LightsailDouble) GetLoadBalancerMetricDataWithContext(i0 context.Context, i1 *lightsail.GetLoadBalancerMetricDataInput, i2 ...request.Option) (r0 *lightsail.GetLoadBalancerMetricDataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLoadBalancerMetricDataWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetLoadBalancerMetricDataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetLoadBalancerMetricDataWithContext(ctx context.Context, in *lightsail.GetLoadBalancerMetricDataInput, _ ...request.Option) (*lightsail.GetLoadBalancerMetricDataOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetLoadBalancerMetricData cancelled", ctx.Err())
	default:
		return d.GetLoadBalancerMetricData(in)
	}
}

func (d *LightsailDouble) GetLoadBalancerRequest(i0 *lightsail.GetLoadBalancerInput) (r0 *request.Request, r1 *lightsail.GetLoadBalancerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLoadBalancerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetLoadBalancerOutput)
	return
}

func (d *LightsailDouble) GetLoadBalancerTlsCertificates(i0 *lightsail.GetLoadBalancerTlsCertificatesInput) (r0 *lightsail.GetLoadBalancerTlsCertificatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLoadBalancerTlsCertificates", i0)
	r0, _ = returns[0].(*lightsail.GetLoadBalancerTlsCertificatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetLoadBalancerTlsCertificatesRequest(i0 *lightsail.GetLoadBalancerTlsCertificatesInput) (r0 *request.Request, r1 *lightsail.GetLoadBalancerTlsCertificatesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLoadBalancerTlsCertificatesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetLoadBalancerTlsCertificatesOutput)
	return
}

func (d *LightsailDouble) GetLoadBalancerTlsCertificatesWithContext(i0 context.Context, i1 *lightsail.GetLoadBalancerTlsCertificatesInput, i2 ...request.Option) (r0 *lightsail.GetLoadBalancerTlsCertificatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLoadBalancerTlsCertificatesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetLoadBalancerTlsCertificatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetLoadBalancerTlsCertificatesWithContext(ctx context.Context, in *lightsail.GetLoadBalancerTlsCertificatesInput, _ ...request.Option) (*lightsail.GetLoadBalancerTlsCertificatesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetLoadBalancerTlsCertificates cancelled", ctx.Err())
	default:
		return d.GetLoadBalancerTlsCertificates(in)
	}
}

func (d *LightsailDouble) GetLoadBalancerWithContext(i0 context.Context, i1 *lightsail.GetLoadBalancerInput, i2 ...request.Option) (r0 *lightsail.GetLoadBalancerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLoadBalancerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetLoadBalancerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetLoadBalancerWithContext(ctx context.Context, in *lightsail.GetLoadBalancerInput, _ ...request.Option) (*lightsail.GetLoadBalancerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetLoadBalancer cancelled", ctx.Err())
	default:
		return d.GetLoadBalancer(in)
	}
}

func (d *LightsailDouble) GetLoadBalancers(i0 *lightsail.GetLoadBalancersInput) (r0 *lightsail.GetLoadBalancersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLoadBalancers", i0)
	r0, _ = returns[0].(*lightsail.GetLoadBalancersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetLoadBalancersRequest(i0 *lightsail.GetLoadBalancersInput) (r0 *request.Request, r1 *lightsail.GetLoadBalancersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLoadBalancersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetLoadBalancersOutput)
	return
}

func (d *LightsailDouble) GetLoadBalancersWithContext(i0 context.Context, i1 *lightsail.GetLoadBalancersInput, i2 ...request.Option) (r0 *lightsail.GetLoadBalancersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLoadBalancersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetLoadBalancersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetLoadBalancersWithContext(ctx context.Context, in *lightsail.GetLoadBalancersInput, _ ...request.Option) (*lightsail.GetLoadBalancersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetLoadBalancers cancelled", ctx.Err())
	default:
		return d.GetLoadBalancers(in)
	}
}

func (d *LightsailDouble) GetOperation(i0 *lightsail.GetOperationInput) (r0 *lightsail.GetOperationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOperation", i0)
	r0, _ = returns[0].(*lightsail.GetOperationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetOperationRequest(i0 *lightsail.GetOperationInput) (r0 *request.Request, r1 *lightsail.GetOperationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOperationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetOperationOutput)
	return
}

func (d *LightsailDouble) GetOperationWithContext(i0 context.Context, i1 *lightsail.GetOperationInput, i2 ...request.Option) (r0 *lightsail.GetOperationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOperationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetOperationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetOperationWithContext(ctx context.Context, in *lightsail.GetOperationInput, _ ...request.Option) (*lightsail.GetOperationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetOperation cancelled", ctx.Err())
	default:
		return d.GetOperation(in)
	}
}

func (d *LightsailDouble) GetOperations(i0 *lightsail.GetOperationsInput) (r0 *lightsail.GetOperationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOperations", i0)
	r0, _ = returns[0].(*lightsail.GetOperationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetOperationsForResource(i0 *lightsail.GetOperationsForResourceInput) (r0 *lightsail.GetOperationsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOperationsForResource", i0)
	r0, _ = returns[0].(*lightsail.GetOperationsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetOperationsForResourceRequest(i0 *lightsail.GetOperationsForResourceInput) (r0 *request.Request, r1 *lightsail.GetOperationsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOperationsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetOperationsForResourceOutput)
	return
}

func (d *LightsailDouble) GetOperationsForResourceWithContext(i0 context.Context, i1 *lightsail.GetOperationsForResourceInput, i2 ...request.Option) (r0 *lightsail.GetOperationsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOperationsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetOperationsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetOperationsForResourceWithContext(ctx context.Context, in *lightsail.GetOperationsForResourceInput, _ ...request.Option) (*lightsail.GetOperationsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetOperationsForResource cancelled", ctx.Err())
	default:
		return d.GetOperationsForResource(in)
	}
}

func (d *LightsailDouble) GetOperationsRequest(i0 *lightsail.GetOperationsInput) (r0 *request.Request, r1 *lightsail.GetOperationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOperationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetOperationsOutput)
	return
}

func (d *LightsailDouble) GetOperationsWithContext(i0 context.Context, i1 *lightsail.GetOperationsInput, i2 ...request.Option) (r0 *lightsail.GetOperationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOperationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetOperationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetOperationsWithContext(ctx context.Context, in *lightsail.GetOperationsInput, _ ...request.Option) (*lightsail.GetOperationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetOperations cancelled", ctx.Err())
	default:
		return d.GetOperations(in)
	}
}

func (d *LightsailDouble) GetRegions(i0 *lightsail.GetRegionsInput) (r0 *lightsail.GetRegionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRegions", i0)
	r0, _ = returns[0].(*lightsail.GetRegionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetRegionsRequest(i0 *lightsail.GetRegionsInput) (r0 *request.Request, r1 *lightsail.GetRegionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRegionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetRegionsOutput)
	return
}

func (d *LightsailDouble) GetRegionsWithContext(i0 context.Context, i1 *lightsail.GetRegionsInput, i2 ...request.Option) (r0 *lightsail.GetRegionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRegionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetRegionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetRegionsWithContext(ctx context.Context, in *lightsail.GetRegionsInput, _ ...request.Option) (*lightsail.GetRegionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRegions cancelled", ctx.Err())
	default:
		return d.GetRegions(in)
	}
}

func (d *LightsailDouble) GetRelationalDatabase(i0 *lightsail.GetRelationalDatabaseInput) (r0 *lightsail.GetRelationalDatabaseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRelationalDatabase", i0)
	r0, _ = returns[0].(*lightsail.GetRelationalDatabaseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetRelationalDatabaseBlueprints(i0 *lightsail.GetRelationalDatabaseBlueprintsInput) (r0 *lightsail.GetRelationalDatabaseBlueprintsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRelationalDatabaseBlueprints", i0)
	r0, _ = returns[0].(*lightsail.GetRelationalDatabaseBlueprintsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetRelationalDatabaseBlueprintsRequest(i0 *lightsail.GetRelationalDatabaseBlueprintsInput) (r0 *request.Request, r1 *lightsail.GetRelationalDatabaseBlueprintsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRelationalDatabaseBlueprintsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetRelationalDatabaseBlueprintsOutput)
	return
}

func (d *LightsailDouble) GetRelationalDatabaseBlueprintsWithContext(i0 context.Context, i1 *lightsail.GetRelationalDatabaseBlueprintsInput, i2 ...request.Option) (r0 *lightsail.GetRelationalDatabaseBlueprintsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRelationalDatabaseBlueprintsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetRelationalDatabaseBlueprintsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetRelationalDatabaseBlueprintsWithContext(ctx context.Context, in *lightsail.GetRelationalDatabaseBlueprintsInput, _ ...request.Option) (*lightsail.GetRelationalDatabaseBlueprintsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRelationalDatabaseBlueprints cancelled", ctx.Err())
	default:
		return d.GetRelationalDatabaseBlueprints(in)
	}
}

func (d *LightsailDouble) GetRelationalDatabaseBundles(i0 *lightsail.GetRelationalDatabaseBundlesInput) (r0 *lightsail.GetRelationalDatabaseBundlesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRelationalDatabaseBundles", i0)
	r0, _ = returns[0].(*lightsail.GetRelationalDatabaseBundlesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetRelationalDatabaseBundlesRequest(i0 *lightsail.GetRelationalDatabaseBundlesInput) (r0 *request.Request, r1 *lightsail.GetRelationalDatabaseBundlesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRelationalDatabaseBundlesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetRelationalDatabaseBundlesOutput)
	return
}

func (d *LightsailDouble) GetRelationalDatabaseBundlesWithContext(i0 context.Context, i1 *lightsail.GetRelationalDatabaseBundlesInput, i2 ...request.Option) (r0 *lightsail.GetRelationalDatabaseBundlesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRelationalDatabaseBundlesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetRelationalDatabaseBundlesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetRelationalDatabaseBundlesWithContext(ctx context.Context, in *lightsail.GetRelationalDatabaseBundlesInput, _ ...request.Option) (*lightsail.GetRelationalDatabaseBundlesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRelationalDatabaseBundles cancelled", ctx.Err())
	default:
		return d.GetRelationalDatabaseBundles(in)
	}
}

func (d *LightsailDouble) GetRelationalDatabaseEvents(i0 *lightsail.GetRelationalDatabaseEventsInput) (r0 *lightsail.GetRelationalDatabaseEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRelationalDatabaseEvents", i0)
	r0, _ = returns[0].(*lightsail.GetRelationalDatabaseEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetRelationalDatabaseEventsRequest(i0 *lightsail.GetRelationalDatabaseEventsInput) (r0 *request.Request, r1 *lightsail.GetRelationalDatabaseEventsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRelationalDatabaseEventsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetRelationalDatabaseEventsOutput)
	return
}

func (d *LightsailDouble) GetRelationalDatabaseEventsWithContext(i0 context.Context, i1 *lightsail.GetRelationalDatabaseEventsInput, i2 ...request.Option) (r0 *lightsail.GetRelationalDatabaseEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRelationalDatabaseEventsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetRelationalDatabaseEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetRelationalDatabaseEventsWithContext(ctx context.Context, in *lightsail.GetRelationalDatabaseEventsInput, _ ...request.Option) (*lightsail.GetRelationalDatabaseEventsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRelationalDatabaseEvents cancelled", ctx.Err())
	default:
		return d.GetRelationalDatabaseEvents(in)
	}
}

func (d *LightsailDouble) GetRelationalDatabaseLogEvents(i0 *lightsail.GetRelationalDatabaseLogEventsInput) (r0 *lightsail.GetRelationalDatabaseLogEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRelationalDatabaseLogEvents", i0)
	r0, _ = returns[0].(*lightsail.GetRelationalDatabaseLogEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetRelationalDatabaseLogEventsRequest(i0 *lightsail.GetRelationalDatabaseLogEventsInput) (r0 *request.Request, r1 *lightsail.GetRelationalDatabaseLogEventsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRelationalDatabaseLogEventsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetRelationalDatabaseLogEventsOutput)
	return
}

func (d *LightsailDouble) GetRelationalDatabaseLogEventsWithContext(i0 context.Context, i1 *lightsail.GetRelationalDatabaseLogEventsInput, i2 ...request.Option) (r0 *lightsail.GetRelationalDatabaseLogEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRelationalDatabaseLogEventsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetRelationalDatabaseLogEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetRelationalDatabaseLogEventsWithContext(ctx context.Context, in *lightsail.GetRelationalDatabaseLogEventsInput, _ ...request.Option) (*lightsail.GetRelationalDatabaseLogEventsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRelationalDatabaseLogEvents cancelled", ctx.Err())
	default:
		return d.GetRelationalDatabaseLogEvents(in)
	}
}

func (d *LightsailDouble) GetRelationalDatabaseLogStreams(i0 *lightsail.GetRelationalDatabaseLogStreamsInput) (r0 *lightsail.GetRelationalDatabaseLogStreamsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRelationalDatabaseLogStreams", i0)
	r0, _ = returns[0].(*lightsail.GetRelationalDatabaseLogStreamsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetRelationalDatabaseLogStreamsRequest(i0 *lightsail.GetRelationalDatabaseLogStreamsInput) (r0 *request.Request, r1 *lightsail.GetRelationalDatabaseLogStreamsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRelationalDatabaseLogStreamsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetRelationalDatabaseLogStreamsOutput)
	return
}

func (d *LightsailDouble) GetRelationalDatabaseLogStreamsWithContext(i0 context.Context, i1 *lightsail.GetRelationalDatabaseLogStreamsInput, i2 ...request.Option) (r0 *lightsail.GetRelationalDatabaseLogStreamsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRelationalDatabaseLogStreamsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetRelationalDatabaseLogStreamsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetRelationalDatabaseLogStreamsWithContext(ctx context.Context, in *lightsail.GetRelationalDatabaseLogStreamsInput, _ ...request.Option) (*lightsail.GetRelationalDatabaseLogStreamsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRelationalDatabaseLogStreams cancelled", ctx.Err())
	default:
		return d.GetRelationalDatabaseLogStreams(in)
	}
}

func (d *LightsailDouble) GetRelationalDatabaseMasterUserPassword(i0 *lightsail.GetRelationalDatabaseMasterUserPasswordInput) (r0 *lightsail.GetRelationalDatabaseMasterUserPasswordOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRelationalDatabaseMasterUserPassword", i0)
	r0, _ = returns[0].(*lightsail.GetRelationalDatabaseMasterUserPasswordOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetRelationalDatabaseMasterUserPasswordRequest(i0 *lightsail.GetRelationalDatabaseMasterUserPasswordInput) (r0 *request.Request, r1 *lightsail.GetRelationalDatabaseMasterUserPasswordOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRelationalDatabaseMasterUserPasswordRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetRelationalDatabaseMasterUserPasswordOutput)
	return
}

func (d *LightsailDouble) GetRelationalDatabaseMasterUserPasswordWithContext(i0 context.Context, i1 *lightsail.GetRelationalDatabaseMasterUserPasswordInput, i2 ...request.Option) (r0 *lightsail.GetRelationalDatabaseMasterUserPasswordOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRelationalDatabaseMasterUserPasswordWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetRelationalDatabaseMasterUserPasswordOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetRelationalDatabaseMasterUserPasswordWithContext(ctx context.Context, in *lightsail.GetRelationalDatabaseMasterUserPasswordInput, _ ...request.Option) (*lightsail.GetRelationalDatabaseMasterUserPasswordOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRelationalDatabaseMasterUserPassword cancelled", ctx.Err())
	default:
		return d.GetRelationalDatabaseMasterUserPassword(in)
	}
}

func (d *LightsailDouble) GetRelationalDatabaseMetricData(i0 *lightsail.GetRelationalDatabaseMetricDataInput) (r0 *lightsail.GetRelationalDatabaseMetricDataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRelationalDatabaseMetricData", i0)
	r0, _ = returns[0].(*lightsail.GetRelationalDatabaseMetricDataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetRelationalDatabaseMetricDataRequest(i0 *lightsail.GetRelationalDatabaseMetricDataInput) (r0 *request.Request, r1 *lightsail.GetRelationalDatabaseMetricDataOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRelationalDatabaseMetricDataRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetRelationalDatabaseMetricDataOutput)
	return
}

func (d *LightsailDouble) GetRelationalDatabaseMetricDataWithContext(i0 context.Context, i1 *lightsail.GetRelationalDatabaseMetricDataInput, i2 ...request.Option) (r0 *lightsail.GetRelationalDatabaseMetricDataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRelationalDatabaseMetricDataWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetRelationalDatabaseMetricDataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetRelationalDatabaseMetricDataWithContext(ctx context.Context, in *lightsail.GetRelationalDatabaseMetricDataInput, _ ...request.Option) (*lightsail.GetRelationalDatabaseMetricDataOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRelationalDatabaseMetricData cancelled", ctx.Err())
	default:
		return d.GetRelationalDatabaseMetricData(in)
	}
}

func (d *LightsailDouble) GetRelationalDatabaseParameters(i0 *lightsail.GetRelationalDatabaseParametersInput) (r0 *lightsail.GetRelationalDatabaseParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRelationalDatabaseParameters", i0)
	r0, _ = returns[0].(*lightsail.GetRelationalDatabaseParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetRelationalDatabaseParametersRequest(i0 *lightsail.GetRelationalDatabaseParametersInput) (r0 *request.Request, r1 *lightsail.GetRelationalDatabaseParametersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRelationalDatabaseParametersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetRelationalDatabaseParametersOutput)
	return
}

func (d *LightsailDouble) GetRelationalDatabaseParametersWithContext(i0 context.Context, i1 *lightsail.GetRelationalDatabaseParametersInput, i2 ...request.Option) (r0 *lightsail.GetRelationalDatabaseParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRelationalDatabaseParametersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetRelationalDatabaseParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetRelationalDatabaseParametersWithContext(ctx context.Context, in *lightsail.GetRelationalDatabaseParametersInput, _ ...request.Option) (*lightsail.GetRelationalDatabaseParametersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRelationalDatabaseParameters cancelled", ctx.Err())
	default:
		return d.GetRelationalDatabaseParameters(in)
	}
}

func (d *LightsailDouble) GetRelationalDatabaseRequest(i0 *lightsail.GetRelationalDatabaseInput) (r0 *request.Request, r1 *lightsail.GetRelationalDatabaseOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRelationalDatabaseRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetRelationalDatabaseOutput)
	return
}

func (d *LightsailDouble) GetRelationalDatabaseSnapshot(i0 *lightsail.GetRelationalDatabaseSnapshotInput) (r0 *lightsail.GetRelationalDatabaseSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRelationalDatabaseSnapshot", i0)
	r0, _ = returns[0].(*lightsail.GetRelationalDatabaseSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetRelationalDatabaseSnapshotRequest(i0 *lightsail.GetRelationalDatabaseSnapshotInput) (r0 *request.Request, r1 *lightsail.GetRelationalDatabaseSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRelationalDatabaseSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetRelationalDatabaseSnapshotOutput)
	return
}

func (d *LightsailDouble) GetRelationalDatabaseSnapshotWithContext(i0 context.Context, i1 *lightsail.GetRelationalDatabaseSnapshotInput, i2 ...request.Option) (r0 *lightsail.GetRelationalDatabaseSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRelationalDatabaseSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetRelationalDatabaseSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetRelationalDatabaseSnapshotWithContext(ctx context.Context, in *lightsail.GetRelationalDatabaseSnapshotInput, _ ...request.Option) (*lightsail.GetRelationalDatabaseSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRelationalDatabaseSnapshot cancelled", ctx.Err())
	default:
		return d.GetRelationalDatabaseSnapshot(in)
	}
}

func (d *LightsailDouble) GetRelationalDatabaseSnapshots(i0 *lightsail.GetRelationalDatabaseSnapshotsInput) (r0 *lightsail.GetRelationalDatabaseSnapshotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRelationalDatabaseSnapshots", i0)
	r0, _ = returns[0].(*lightsail.GetRelationalDatabaseSnapshotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetRelationalDatabaseSnapshotsRequest(i0 *lightsail.GetRelationalDatabaseSnapshotsInput) (r0 *request.Request, r1 *lightsail.GetRelationalDatabaseSnapshotsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRelationalDatabaseSnapshotsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetRelationalDatabaseSnapshotsOutput)
	return
}

func (d *LightsailDouble) GetRelationalDatabaseSnapshotsWithContext(i0 context.Context, i1 *lightsail.GetRelationalDatabaseSnapshotsInput, i2 ...request.Option) (r0 *lightsail.GetRelationalDatabaseSnapshotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRelationalDatabaseSnapshotsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetRelationalDatabaseSnapshotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetRelationalDatabaseSnapshotsWithContext(ctx context.Context, in *lightsail.GetRelationalDatabaseSnapshotsInput, _ ...request.Option) (*lightsail.GetRelationalDatabaseSnapshotsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRelationalDatabaseSnapshots cancelled", ctx.Err())
	default:
		return d.GetRelationalDatabaseSnapshots(in)
	}
}

func (d *LightsailDouble) GetRelationalDatabaseWithContext(i0 context.Context, i1 *lightsail.GetRelationalDatabaseInput, i2 ...request.Option) (r0 *lightsail.GetRelationalDatabaseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRelationalDatabaseWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetRelationalDatabaseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetRelationalDatabaseWithContext(ctx context.Context, in *lightsail.GetRelationalDatabaseInput, _ ...request.Option) (*lightsail.GetRelationalDatabaseOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRelationalDatabase cancelled", ctx.Err())
	default:
		return d.GetRelationalDatabase(in)
	}
}

func (d *LightsailDouble) GetRelationalDatabases(i0 *lightsail.GetRelationalDatabasesInput) (r0 *lightsail.GetRelationalDatabasesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRelationalDatabases", i0)
	r0, _ = returns[0].(*lightsail.GetRelationalDatabasesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetRelationalDatabasesRequest(i0 *lightsail.GetRelationalDatabasesInput) (r0 *request.Request, r1 *lightsail.GetRelationalDatabasesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRelationalDatabasesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetRelationalDatabasesOutput)
	return
}

func (d *LightsailDouble) GetRelationalDatabasesWithContext(i0 context.Context, i1 *lightsail.GetRelationalDatabasesInput, i2 ...request.Option) (r0 *lightsail.GetRelationalDatabasesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRelationalDatabasesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetRelationalDatabasesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetRelationalDatabasesWithContext(ctx context.Context, in *lightsail.GetRelationalDatabasesInput, _ ...request.Option) (*lightsail.GetRelationalDatabasesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRelationalDatabases cancelled", ctx.Err())
	default:
		return d.GetRelationalDatabases(in)
	}
}

func (d *LightsailDouble) GetStaticIp(i0 *lightsail.GetStaticIpInput) (r0 *lightsail.GetStaticIpOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetStaticIp", i0)
	r0, _ = returns[0].(*lightsail.GetStaticIpOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetStaticIpRequest(i0 *lightsail.GetStaticIpInput) (r0 *request.Request, r1 *lightsail.GetStaticIpOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetStaticIpRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetStaticIpOutput)
	return
}

func (d *LightsailDouble) GetStaticIpWithContext(i0 context.Context, i1 *lightsail.GetStaticIpInput, i2 ...request.Option) (r0 *lightsail.GetStaticIpOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetStaticIpWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetStaticIpOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetStaticIpWithContext(ctx context.Context, in *lightsail.GetStaticIpInput, _ ...request.Option) (*lightsail.GetStaticIpOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetStaticIp cancelled", ctx.Err())
	default:
		return d.GetStaticIp(in)
	}
}

func (d *LightsailDouble) GetStaticIps(i0 *lightsail.GetStaticIpsInput) (r0 *lightsail.GetStaticIpsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetStaticIps", i0)
	r0, _ = returns[0].(*lightsail.GetStaticIpsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) GetStaticIpsRequest(i0 *lightsail.GetStaticIpsInput) (r0 *request.Request, r1 *lightsail.GetStaticIpsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetStaticIpsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.GetStaticIpsOutput)
	return
}

func (d *LightsailDouble) GetStaticIpsWithContext(i0 context.Context, i1 *lightsail.GetStaticIpsInput, i2 ...request.Option) (r0 *lightsail.GetStaticIpsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetStaticIpsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.GetStaticIpsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeGetStaticIpsWithContext(ctx context.Context, in *lightsail.GetStaticIpsInput, _ ...request.Option) (*lightsail.GetStaticIpsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetStaticIps cancelled", ctx.Err())
	default:
		return d.GetStaticIps(in)
	}
}

func (d *LightsailDouble) ImportKeyPair(i0 *lightsail.ImportKeyPairInput) (r0 *lightsail.ImportKeyPairOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportKeyPair", i0)
	r0, _ = returns[0].(*lightsail.ImportKeyPairOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) ImportKeyPairRequest(i0 *lightsail.ImportKeyPairInput) (r0 *request.Request, r1 *lightsail.ImportKeyPairOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportKeyPairRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.ImportKeyPairOutput)
	return
}

func (d *LightsailDouble) ImportKeyPairWithContext(i0 context.Context, i1 *lightsail.ImportKeyPairInput, i2 ...request.Option) (r0 *lightsail.ImportKeyPairOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportKeyPairWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.ImportKeyPairOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeImportKeyPairWithContext(ctx context.Context, in *lightsail.ImportKeyPairInput, _ ...request.Option) (*lightsail.ImportKeyPairOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ImportKeyPair cancelled", ctx.Err())
	default:
		return d.ImportKeyPair(in)
	}
}

func (d *LightsailDouble) IsVpcPeered(i0 *lightsail.IsVpcPeeredInput) (r0 *lightsail.IsVpcPeeredOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("IsVpcPeered", i0)
	r0, _ = returns[0].(*lightsail.IsVpcPeeredOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) IsVpcPeeredRequest(i0 *lightsail.IsVpcPeeredInput) (r0 *request.Request, r1 *lightsail.IsVpcPeeredOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("IsVpcPeeredRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.IsVpcPeeredOutput)
	return
}

func (d *LightsailDouble) IsVpcPeeredWithContext(i0 context.Context, i1 *lightsail.IsVpcPeeredInput, i2 ...request.Option) (r0 *lightsail.IsVpcPeeredOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("IsVpcPeeredWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.IsVpcPeeredOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeIsVpcPeeredWithContext(ctx context.Context, in *lightsail.IsVpcPeeredInput, _ ...request.Option) (*lightsail.IsVpcPeeredOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "IsVpcPeered cancelled", ctx.Err())
	default:
		return d.IsVpcPeered(in)
	}
}

func (d *LightsailDouble) OpenInstancePublicPorts(i0 *lightsail.OpenInstancePublicPortsInput) (r0 *lightsail.OpenInstancePublicPortsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("OpenInstancePublicPorts", i0)
	r0, _ = returns[0].(*lightsail.OpenInstancePublicPortsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) OpenInstancePublicPortsRequest(i0 *lightsail.OpenInstancePublicPortsInput) (r0 *request.Request, r1 *lightsail.OpenInstancePublicPortsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("OpenInstancePublicPortsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.OpenInstancePublicPortsOutput)
	return
}

func (d *LightsailDouble) OpenInstancePublicPortsWithContext(i0 context.Context, i1 *lightsail.OpenInstancePublicPortsInput, i2 ...request.Option) (r0 *lightsail.OpenInstancePublicPortsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("OpenInstancePublicPortsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.OpenInstancePublicPortsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeOpenInstancePublicPortsWithContext(ctx context.Context, in *lightsail.OpenInstancePublicPortsInput, _ ...request.Option) (*lightsail.OpenInstancePublicPortsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "OpenInstancePublicPorts cancelled", ctx.Err())
	default:
		return d.OpenInstancePublicPorts(in)
	}
}

func (d *LightsailDouble) PeerVpc(i0 *lightsail.PeerVpcInput) (r0 *lightsail.PeerVpcOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PeerVpc", i0)
	r0, _ = returns[0].(*lightsail.PeerVpcOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) PeerVpcRequest(i0 *lightsail.PeerVpcInput) (r0 *request.Request, r1 *lightsail.PeerVpcOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PeerVpcRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.PeerVpcOutput)
	return
}

func (d *LightsailDouble) PeerVpcWithContext(i0 context.Context, i1 *lightsail.PeerVpcInput, i2 ...request.Option) (r0 *lightsail.PeerVpcOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PeerVpcWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.PeerVpcOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakePeerVpcWithContext(ctx context.Context, in *lightsail.PeerVpcInput, _ ...request.Option) (*lightsail.PeerVpcOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PeerVpc cancelled", ctx.Err())
	default:
		return d.PeerVpc(in)
	}
}

func (d *LightsailDouble) PutInstancePublicPorts(i0 *lightsail.PutInstancePublicPortsInput) (r0 *lightsail.PutInstancePublicPortsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutInstancePublicPorts", i0)
	r0, _ = returns[0].(*lightsail.PutInstancePublicPortsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) PutInstancePublicPortsRequest(i0 *lightsail.PutInstancePublicPortsInput) (r0 *request.Request, r1 *lightsail.PutInstancePublicPortsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutInstancePublicPortsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.PutInstancePublicPortsOutput)
	return
}

func (d *LightsailDouble) PutInstancePublicPortsWithContext(i0 context.Context, i1 *lightsail.PutInstancePublicPortsInput, i2 ...request.Option) (r0 *lightsail.PutInstancePublicPortsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutInstancePublicPortsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.PutInstancePublicPortsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakePutInstancePublicPortsWithContext(ctx context.Context, in *lightsail.PutInstancePublicPortsInput, _ ...request.Option) (*lightsail.PutInstancePublicPortsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutInstancePublicPorts cancelled", ctx.Err())
	default:
		return d.PutInstancePublicPorts(in)
	}
}

func (d *LightsailDouble) RebootInstance(i0 *lightsail.RebootInstanceInput) (r0 *lightsail.RebootInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebootInstance", i0)
	r0, _ = returns[0].(*lightsail.RebootInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) RebootInstanceRequest(i0 *lightsail.RebootInstanceInput) (r0 *request.Request, r1 *lightsail.RebootInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebootInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.RebootInstanceOutput)
	return
}

func (d *LightsailDouble) RebootInstanceWithContext(i0 context.Context, i1 *lightsail.RebootInstanceInput, i2 ...request.Option) (r0 *lightsail.RebootInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebootInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.RebootInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeRebootInstanceWithContext(ctx context.Context, in *lightsail.RebootInstanceInput, _ ...request.Option) (*lightsail.RebootInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RebootInstance cancelled", ctx.Err())
	default:
		return d.RebootInstance(in)
	}
}

func (d *LightsailDouble) RebootRelationalDatabase(i0 *lightsail.RebootRelationalDatabaseInput) (r0 *lightsail.RebootRelationalDatabaseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebootRelationalDatabase", i0)
	r0, _ = returns[0].(*lightsail.RebootRelationalDatabaseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) RebootRelationalDatabaseRequest(i0 *lightsail.RebootRelationalDatabaseInput) (r0 *request.Request, r1 *lightsail.RebootRelationalDatabaseOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebootRelationalDatabaseRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.RebootRelationalDatabaseOutput)
	return
}

func (d *LightsailDouble) RebootRelationalDatabaseWithContext(i0 context.Context, i1 *lightsail.RebootRelationalDatabaseInput, i2 ...request.Option) (r0 *lightsail.RebootRelationalDatabaseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebootRelationalDatabaseWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.RebootRelationalDatabaseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeRebootRelationalDatabaseWithContext(ctx context.Context, in *lightsail.RebootRelationalDatabaseInput, _ ...request.Option) (*lightsail.RebootRelationalDatabaseOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RebootRelationalDatabase cancelled", ctx.Err())
	default:
		return d.RebootRelationalDatabase(in)
	}
}

func (d *LightsailDouble) ReleaseStaticIp(i0 *lightsail.ReleaseStaticIpInput) (r0 *lightsail.ReleaseStaticIpOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReleaseStaticIp", i0)
	r0, _ = returns[0].(*lightsail.ReleaseStaticIpOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) ReleaseStaticIpRequest(i0 *lightsail.ReleaseStaticIpInput) (r0 *request.Request, r1 *lightsail.ReleaseStaticIpOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReleaseStaticIpRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.ReleaseStaticIpOutput)
	return
}

func (d *LightsailDouble) ReleaseStaticIpWithContext(i0 context.Context, i1 *lightsail.ReleaseStaticIpInput, i2 ...request.Option) (r0 *lightsail.ReleaseStaticIpOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReleaseStaticIpWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.ReleaseStaticIpOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeReleaseStaticIpWithContext(ctx context.Context, in *lightsail.ReleaseStaticIpInput, _ ...request.Option) (*lightsail.ReleaseStaticIpOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ReleaseStaticIp cancelled", ctx.Err())
	default:
		return d.ReleaseStaticIp(in)
	}
}

func (d *LightsailDouble) StartInstance(i0 *lightsail.StartInstanceInput) (r0 *lightsail.StartInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartInstance", i0)
	r0, _ = returns[0].(*lightsail.StartInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) StartInstanceRequest(i0 *lightsail.StartInstanceInput) (r0 *request.Request, r1 *lightsail.StartInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.StartInstanceOutput)
	return
}

func (d *LightsailDouble) StartInstanceWithContext(i0 context.Context, i1 *lightsail.StartInstanceInput, i2 ...request.Option) (r0 *lightsail.StartInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.StartInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeStartInstanceWithContext(ctx context.Context, in *lightsail.StartInstanceInput, _ ...request.Option) (*lightsail.StartInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartInstance cancelled", ctx.Err())
	default:
		return d.StartInstance(in)
	}
}

func (d *LightsailDouble) StartRelationalDatabase(i0 *lightsail.StartRelationalDatabaseInput) (r0 *lightsail.StartRelationalDatabaseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartRelationalDatabase", i0)
	r0, _ = returns[0].(*lightsail.StartRelationalDatabaseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) StartRelationalDatabaseRequest(i0 *lightsail.StartRelationalDatabaseInput) (r0 *request.Request, r1 *lightsail.StartRelationalDatabaseOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartRelationalDatabaseRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.StartRelationalDatabaseOutput)
	return
}

func (d *LightsailDouble) StartRelationalDatabaseWithContext(i0 context.Context, i1 *lightsail.StartRelationalDatabaseInput, i2 ...request.Option) (r0 *lightsail.StartRelationalDatabaseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartRelationalDatabaseWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.StartRelationalDatabaseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeStartRelationalDatabaseWithContext(ctx context.Context, in *lightsail.StartRelationalDatabaseInput, _ ...request.Option) (*lightsail.StartRelationalDatabaseOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartRelationalDatabase cancelled", ctx.Err())
	default:
		return d.StartRelationalDatabase(in)
	}
}

func (d *LightsailDouble) StopInstance(i0 *lightsail.StopInstanceInput) (r0 *lightsail.StopInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopInstance", i0)
	r0, _ = returns[0].(*lightsail.StopInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) StopInstanceRequest(i0 *lightsail.StopInstanceInput) (r0 *request.Request, r1 *lightsail.StopInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.StopInstanceOutput)
	return
}

func (d *LightsailDouble) StopInstanceWithContext(i0 context.Context, i1 *lightsail.StopInstanceInput, i2 ...request.Option) (r0 *lightsail.StopInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.StopInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeStopInstanceWithContext(ctx context.Context, in *lightsail.StopInstanceInput, _ ...request.Option) (*lightsail.StopInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopInstance cancelled", ctx.Err())
	default:
		return d.StopInstance(in)
	}
}

func (d *LightsailDouble) StopRelationalDatabase(i0 *lightsail.StopRelationalDatabaseInput) (r0 *lightsail.StopRelationalDatabaseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopRelationalDatabase", i0)
	r0, _ = returns[0].(*lightsail.StopRelationalDatabaseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) StopRelationalDatabaseRequest(i0 *lightsail.StopRelationalDatabaseInput) (r0 *request.Request, r1 *lightsail.StopRelationalDatabaseOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopRelationalDatabaseRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.StopRelationalDatabaseOutput)
	return
}

func (d *LightsailDouble) StopRelationalDatabaseWithContext(i0 context.Context, i1 *lightsail.StopRelationalDatabaseInput, i2 ...request.Option) (r0 *lightsail.StopRelationalDatabaseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopRelationalDatabaseWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.StopRelationalDatabaseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeStopRelationalDatabaseWithContext(ctx context.Context, in *lightsail.StopRelationalDatabaseInput, _ ...request.Option) (*lightsail.StopRelationalDatabaseOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopRelationalDatabase cancelled", ctx.Err())
	default:
		return d.StopRelationalDatabase(in)
	}
}

func (d *LightsailDouble) TagResource(i0 *lightsail.TagResourceInput) (r0 *lightsail.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*lightsail.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) TagResourceRequest(i0 *lightsail.TagResourceInput) (r0 *request.Request, r1 *lightsail.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.TagResourceOutput)
	return
}

func (d *LightsailDouble) TagResourceWithContext(i0 context.Context, i1 *lightsail.TagResourceInput, i2 ...request.Option) (r0 *lightsail.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeTagResourceWithContext(ctx context.Context, in *lightsail.TagResourceInput, _ ...request.Option) (*lightsail.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *LightsailDouble) UnpeerVpc(i0 *lightsail.UnpeerVpcInput) (r0 *lightsail.UnpeerVpcOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnpeerVpc", i0)
	r0, _ = returns[0].(*lightsail.UnpeerVpcOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) UnpeerVpcRequest(i0 *lightsail.UnpeerVpcInput) (r0 *request.Request, r1 *lightsail.UnpeerVpcOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnpeerVpcRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.UnpeerVpcOutput)
	return
}

func (d *LightsailDouble) UnpeerVpcWithContext(i0 context.Context, i1 *lightsail.UnpeerVpcInput, i2 ...request.Option) (r0 *lightsail.UnpeerVpcOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnpeerVpcWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.UnpeerVpcOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeUnpeerVpcWithContext(ctx context.Context, in *lightsail.UnpeerVpcInput, _ ...request.Option) (*lightsail.UnpeerVpcOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UnpeerVpc cancelled", ctx.Err())
	default:
		return d.UnpeerVpc(in)
	}
}

func (d *LightsailDouble) UntagResource(i0 *lightsail.UntagResourceInput) (r0 *lightsail.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*lightsail.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) UntagResourceRequest(i0 *lightsail.UntagResourceInput) (r0 *request.Request, r1 *lightsail.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.UntagResourceOutput)
	return
}

func (d *LightsailDouble) UntagResourceWithContext(i0 context.Context, i1 *lightsail.UntagResourceInput, i2 ...request.Option) (r0 *lightsail.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeUntagResourceWithContext(ctx context.Context, in *lightsail.UntagResourceInput, _ ...request.Option) (*lightsail.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *LightsailDouble) UpdateDomainEntry(i0 *lightsail.UpdateDomainEntryInput) (r0 *lightsail.UpdateDomainEntryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDomainEntry", i0)
	r0, _ = returns[0].(*lightsail.UpdateDomainEntryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) UpdateDomainEntryRequest(i0 *lightsail.UpdateDomainEntryInput) (r0 *request.Request, r1 *lightsail.UpdateDomainEntryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDomainEntryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.UpdateDomainEntryOutput)
	return
}

func (d *LightsailDouble) UpdateDomainEntryWithContext(i0 context.Context, i1 *lightsail.UpdateDomainEntryInput, i2 ...request.Option) (r0 *lightsail.UpdateDomainEntryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDomainEntryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.UpdateDomainEntryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeUpdateDomainEntryWithContext(ctx context.Context, in *lightsail.UpdateDomainEntryInput, _ ...request.Option) (*lightsail.UpdateDomainEntryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDomainEntry cancelled", ctx.Err())
	default:
		return d.UpdateDomainEntry(in)
	}
}

func (d *LightsailDouble) UpdateLoadBalancerAttribute(i0 *lightsail.UpdateLoadBalancerAttributeInput) (r0 *lightsail.UpdateLoadBalancerAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateLoadBalancerAttribute", i0)
	r0, _ = returns[0].(*lightsail.UpdateLoadBalancerAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) UpdateLoadBalancerAttributeRequest(i0 *lightsail.UpdateLoadBalancerAttributeInput) (r0 *request.Request, r1 *lightsail.UpdateLoadBalancerAttributeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateLoadBalancerAttributeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.UpdateLoadBalancerAttributeOutput)
	return
}

func (d *LightsailDouble) UpdateLoadBalancerAttributeWithContext(i0 context.Context, i1 *lightsail.UpdateLoadBalancerAttributeInput, i2 ...request.Option) (r0 *lightsail.UpdateLoadBalancerAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateLoadBalancerAttributeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.UpdateLoadBalancerAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeUpdateLoadBalancerAttributeWithContext(ctx context.Context, in *lightsail.UpdateLoadBalancerAttributeInput, _ ...request.Option) (*lightsail.UpdateLoadBalancerAttributeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateLoadBalancerAttribute cancelled", ctx.Err())
	default:
		return d.UpdateLoadBalancerAttribute(in)
	}
}

func (d *LightsailDouble) UpdateRelationalDatabase(i0 *lightsail.UpdateRelationalDatabaseInput) (r0 *lightsail.UpdateRelationalDatabaseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRelationalDatabase", i0)
	r0, _ = returns[0].(*lightsail.UpdateRelationalDatabaseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) UpdateRelationalDatabaseParameters(i0 *lightsail.UpdateRelationalDatabaseParametersInput) (r0 *lightsail.UpdateRelationalDatabaseParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRelationalDatabaseParameters", i0)
	r0, _ = returns[0].(*lightsail.UpdateRelationalDatabaseParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) UpdateRelationalDatabaseParametersRequest(i0 *lightsail.UpdateRelationalDatabaseParametersInput) (r0 *request.Request, r1 *lightsail.UpdateRelationalDatabaseParametersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRelationalDatabaseParametersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.UpdateRelationalDatabaseParametersOutput)
	return
}

func (d *LightsailDouble) UpdateRelationalDatabaseParametersWithContext(i0 context.Context, i1 *lightsail.UpdateRelationalDatabaseParametersInput, i2 ...request.Option) (r0 *lightsail.UpdateRelationalDatabaseParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRelationalDatabaseParametersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.UpdateRelationalDatabaseParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeUpdateRelationalDatabaseParametersWithContext(ctx context.Context, in *lightsail.UpdateRelationalDatabaseParametersInput, _ ...request.Option) (*lightsail.UpdateRelationalDatabaseParametersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateRelationalDatabaseParameters cancelled", ctx.Err())
	default:
		return d.UpdateRelationalDatabaseParameters(in)
	}
}

func (d *LightsailDouble) UpdateRelationalDatabaseRequest(i0 *lightsail.UpdateRelationalDatabaseInput) (r0 *request.Request, r1 *lightsail.UpdateRelationalDatabaseOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRelationalDatabaseRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*lightsail.UpdateRelationalDatabaseOutput)
	return
}

func (d *LightsailDouble) UpdateRelationalDatabaseWithContext(i0 context.Context, i1 *lightsail.UpdateRelationalDatabaseInput, i2 ...request.Option) (r0 *lightsail.UpdateRelationalDatabaseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRelationalDatabaseWithContext", i0, i1, i2)
	r0, _ = returns[0].(*lightsail.UpdateRelationalDatabaseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LightsailDouble) fakeUpdateRelationalDatabaseWithContext(ctx context.Context, in *lightsail.UpdateRelationalDatabaseInput, _ ...request.Option) (*lightsail.UpdateRelationalDatabaseOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateRelationalDatabase cancelled", ctx.Err())
	default:
		return d.UpdateRelationalDatabase(in)
	}
}
