// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:13:34+11:00

// Package kmsdouble provides a TestDouble implementation of kmsiface.KMSAPI
package kmsdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/kms"
	"github.com/aws/aws-sdk-go/service/kms/kmsiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// KMSDouble is TestDouble for kmsiface.KMSAPI
type KMSDouble struct {
	kmsiface.KMSAPI
	*awsdouble.AWSTestDouble
}

// Constructor for KMSDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *KMSDouble {
	result := &KMSDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*kmsiface.KMSAPI)(nil), configurators...)
	return result
}

func (d *KMSDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *KMSDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CancelKeyDeletionWithContext":
		return m.Fake(d.fakeCancelKeyDeletionWithContext)

	case "ConnectCustomKeyStoreWithContext":
		return m.Fake(d.fakeConnectCustomKeyStoreWithContext)

	case "CreateAliasWithContext":
		return m.Fake(d.fakeCreateAliasWithContext)

	case "CreateCustomKeyStoreWithContext":
		return m.Fake(d.fakeCreateCustomKeyStoreWithContext)

	case "CreateGrantWithContext":
		return m.Fake(d.fakeCreateGrantWithContext)

	case "CreateKeyWithContext":
		return m.Fake(d.fakeCreateKeyWithContext)

	case "DecryptWithContext":
		return m.Fake(d.fakeDecryptWithContext)

	case "DeleteAliasWithContext":
		return m.Fake(d.fakeDeleteAliasWithContext)

	case "DeleteCustomKeyStoreWithContext":
		return m.Fake(d.fakeDeleteCustomKeyStoreWithContext)

	case "DeleteImportedKeyMaterialWithContext":
		return m.Fake(d.fakeDeleteImportedKeyMaterialWithContext)

	case "DescribeCustomKeyStoresWithContext":
		return m.Fake(d.fakeDescribeCustomKeyStoresWithContext)

	case "DescribeKeyWithContext":
		return m.Fake(d.fakeDescribeKeyWithContext)

	case "DisableKeyRotationWithContext":
		return m.Fake(d.fakeDisableKeyRotationWithContext)

	case "DisableKeyWithContext":
		return m.Fake(d.fakeDisableKeyWithContext)

	case "DisconnectCustomKeyStoreWithContext":
		return m.Fake(d.fakeDisconnectCustomKeyStoreWithContext)

	case "EnableKeyRotationWithContext":
		return m.Fake(d.fakeEnableKeyRotationWithContext)

	case "EnableKeyWithContext":
		return m.Fake(d.fakeEnableKeyWithContext)

	case "EncryptWithContext":
		return m.Fake(d.fakeEncryptWithContext)

	case "GenerateDataKeyPairWithContext":
		return m.Fake(d.fakeGenerateDataKeyPairWithContext)

	case "GenerateDataKeyPairWithoutPlaintextWithContext":
		return m.Fake(d.fakeGenerateDataKeyPairWithoutPlaintextWithContext)

	case "GenerateDataKeyWithContext":
		return m.Fake(d.fakeGenerateDataKeyWithContext)

	case "GenerateDataKeyWithoutPlaintextWithContext":
		return m.Fake(d.fakeGenerateDataKeyWithoutPlaintextWithContext)

	case "GenerateRandomWithContext":
		return m.Fake(d.fakeGenerateRandomWithContext)

	case "GetKeyPolicyWithContext":
		return m.Fake(d.fakeGetKeyPolicyWithContext)

	case "GetKeyRotationStatusWithContext":
		return m.Fake(d.fakeGetKeyRotationStatusWithContext)

	case "GetParametersForImportWithContext":
		return m.Fake(d.fakeGetParametersForImportWithContext)

	case "GetPublicKeyWithContext":
		return m.Fake(d.fakeGetPublicKeyWithContext)

	case "ImportKeyMaterialWithContext":
		return m.Fake(d.fakeImportKeyMaterialWithContext)

	case "ListAliasesPages":
		return m.Fake(d.fakeListAliasesPages)

	case "ListAliasesPagesWithContext":
		return m.Fake(d.fakeListAliasesPagesWithContext)

	case "ListAliasesWithContext":
		return m.Fake(d.fakeListAliasesWithContext)

	case "ListGrantsPages":
		return m.Fake(d.fakeListGrantsPages)

	case "ListGrantsPagesWithContext":
		return m.Fake(d.fakeListGrantsPagesWithContext)

	case "ListGrantsWithContext":
		return m.Fake(d.fakeListGrantsWithContext)

	case "ListKeyPoliciesPages":
		return m.Fake(d.fakeListKeyPoliciesPages)

	case "ListKeyPoliciesPagesWithContext":
		return m.Fake(d.fakeListKeyPoliciesPagesWithContext)

	case "ListKeyPoliciesWithContext":
		return m.Fake(d.fakeListKeyPoliciesWithContext)

	case "ListKeysPages":
		return m.Fake(d.fakeListKeysPages)

	case "ListKeysPagesWithContext":
		return m.Fake(d.fakeListKeysPagesWithContext)

	case "ListKeysWithContext":
		return m.Fake(d.fakeListKeysWithContext)

	case "ListResourceTagsWithContext":
		return m.Fake(d.fakeListResourceTagsWithContext)

	case "ListRetirableGrantsWithContext":
		return m.Fake(d.fakeListRetirableGrantsWithContext)

	case "PutKeyPolicyWithContext":
		return m.Fake(d.fakePutKeyPolicyWithContext)

	case "ReEncryptWithContext":
		return m.Fake(d.fakeReEncryptWithContext)

	case "RetireGrantWithContext":
		return m.Fake(d.fakeRetireGrantWithContext)

	case "RevokeGrantWithContext":
		return m.Fake(d.fakeRevokeGrantWithContext)

	case "ScheduleKeyDeletionWithContext":
		return m.Fake(d.fakeScheduleKeyDeletionWithContext)

	case "SignWithContext":
		return m.Fake(d.fakeSignWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateAliasWithContext":
		return m.Fake(d.fakeUpdateAliasWithContext)

	case "UpdateCustomKeyStoreWithContext":
		return m.Fake(d.fakeUpdateCustomKeyStoreWithContext)

	case "UpdateKeyDescriptionWithContext":
		return m.Fake(d.fakeUpdateKeyDescriptionWithContext)

	case "VerifyWithContext":
		return m.Fake(d.fakeVerifyWithContext)

	default:
		return nil
	}
}

func (d *KMSDouble) CancelKeyDeletion(i0 *kms.CancelKeyDeletionInput) (r0 *kms.CancelKeyDeletionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelKeyDeletion", i0)
	r0, _ = returns[0].(*kms.CancelKeyDeletionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) CancelKeyDeletionRequest(i0 *kms.CancelKeyDeletionInput) (r0 *request.Request, r1 *kms.CancelKeyDeletionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelKeyDeletionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.CancelKeyDeletionOutput)
	return
}

func (d *KMSDouble) CancelKeyDeletionWithContext(i0 context.Context, i1 *kms.CancelKeyDeletionInput, i2 ...request.Option) (r0 *kms.CancelKeyDeletionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelKeyDeletionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.CancelKeyDeletionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeCancelKeyDeletionWithContext(ctx context.Context, in *kms.CancelKeyDeletionInput, _ ...request.Option) (*kms.CancelKeyDeletionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelKeyDeletion cancelled", ctx.Err())
	default:
		return d.CancelKeyDeletion(in)
	}
}

func (d *KMSDouble) ConnectCustomKeyStore(i0 *kms.ConnectCustomKeyStoreInput) (r0 *kms.ConnectCustomKeyStoreOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ConnectCustomKeyStore", i0)
	r0, _ = returns[0].(*kms.ConnectCustomKeyStoreOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) ConnectCustomKeyStoreRequest(i0 *kms.ConnectCustomKeyStoreInput) (r0 *request.Request, r1 *kms.ConnectCustomKeyStoreOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ConnectCustomKeyStoreRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.ConnectCustomKeyStoreOutput)
	return
}

func (d *KMSDouble) ConnectCustomKeyStoreWithContext(i0 context.Context, i1 *kms.ConnectCustomKeyStoreInput, i2 ...request.Option) (r0 *kms.ConnectCustomKeyStoreOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ConnectCustomKeyStoreWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.ConnectCustomKeyStoreOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeConnectCustomKeyStoreWithContext(ctx context.Context, in *kms.ConnectCustomKeyStoreInput, _ ...request.Option) (*kms.ConnectCustomKeyStoreOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ConnectCustomKeyStore cancelled", ctx.Err())
	default:
		return d.ConnectCustomKeyStore(in)
	}
}

func (d *KMSDouble) CreateAlias(i0 *kms.CreateAliasInput) (r0 *kms.CreateAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAlias", i0)
	r0, _ = returns[0].(*kms.CreateAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) CreateAliasRequest(i0 *kms.CreateAliasInput) (r0 *request.Request, r1 *kms.CreateAliasOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAliasRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.CreateAliasOutput)
	return
}

func (d *KMSDouble) CreateAliasWithContext(i0 context.Context, i1 *kms.CreateAliasInput, i2 ...request.Option) (r0 *kms.CreateAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAliasWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.CreateAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeCreateAliasWithContext(ctx context.Context, in *kms.CreateAliasInput, _ ...request.Option) (*kms.CreateAliasOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateAlias cancelled", ctx.Err())
	default:
		return d.CreateAlias(in)
	}
}

func (d *KMSDouble) CreateCustomKeyStore(i0 *kms.CreateCustomKeyStoreInput) (r0 *kms.CreateCustomKeyStoreOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCustomKeyStore", i0)
	r0, _ = returns[0].(*kms.CreateCustomKeyStoreOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) CreateCustomKeyStoreRequest(i0 *kms.CreateCustomKeyStoreInput) (r0 *request.Request, r1 *kms.CreateCustomKeyStoreOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCustomKeyStoreRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.CreateCustomKeyStoreOutput)
	return
}

func (d *KMSDouble) CreateCustomKeyStoreWithContext(i0 context.Context, i1 *kms.CreateCustomKeyStoreInput, i2 ...request.Option) (r0 *kms.CreateCustomKeyStoreOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCustomKeyStoreWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.CreateCustomKeyStoreOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeCreateCustomKeyStoreWithContext(ctx context.Context, in *kms.CreateCustomKeyStoreInput, _ ...request.Option) (*kms.CreateCustomKeyStoreOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateCustomKeyStore cancelled", ctx.Err())
	default:
		return d.CreateCustomKeyStore(in)
	}
}

func (d *KMSDouble) CreateGrant(i0 *kms.CreateGrantInput) (r0 *kms.CreateGrantOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGrant", i0)
	r0, _ = returns[0].(*kms.CreateGrantOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) CreateGrantRequest(i0 *kms.CreateGrantInput) (r0 *request.Request, r1 *kms.CreateGrantOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGrantRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.CreateGrantOutput)
	return
}

func (d *KMSDouble) CreateGrantWithContext(i0 context.Context, i1 *kms.CreateGrantInput, i2 ...request.Option) (r0 *kms.CreateGrantOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGrantWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.CreateGrantOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeCreateGrantWithContext(ctx context.Context, in *kms.CreateGrantInput, _ ...request.Option) (*kms.CreateGrantOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateGrant cancelled", ctx.Err())
	default:
		return d.CreateGrant(in)
	}
}

func (d *KMSDouble) CreateKey(i0 *kms.CreateKeyInput) (r0 *kms.CreateKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateKey", i0)
	r0, _ = returns[0].(*kms.CreateKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) CreateKeyRequest(i0 *kms.CreateKeyInput) (r0 *request.Request, r1 *kms.CreateKeyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateKeyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.CreateKeyOutput)
	return
}

func (d *KMSDouble) CreateKeyWithContext(i0 context.Context, i1 *kms.CreateKeyInput, i2 ...request.Option) (r0 *kms.CreateKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateKeyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.CreateKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeCreateKeyWithContext(ctx context.Context, in *kms.CreateKeyInput, _ ...request.Option) (*kms.CreateKeyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateKey cancelled", ctx.Err())
	default:
		return d.CreateKey(in)
	}
}

func (d *KMSDouble) Decrypt(i0 *kms.DecryptInput) (r0 *kms.DecryptOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("Decrypt", i0)
	r0, _ = returns[0].(*kms.DecryptOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) DecryptRequest(i0 *kms.DecryptInput) (r0 *request.Request, r1 *kms.DecryptOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DecryptRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.DecryptOutput)
	return
}

func (d *KMSDouble) DecryptWithContext(i0 context.Context, i1 *kms.DecryptInput, i2 ...request.Option) (r0 *kms.DecryptOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DecryptWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.DecryptOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeDecryptWithContext(ctx context.Context, in *kms.DecryptInput, _ ...request.Option) (*kms.DecryptOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "Decrypt cancelled", ctx.Err())
	default:
		return d.Decrypt(in)
	}
}

func (d *KMSDouble) DeleteAlias(i0 *kms.DeleteAliasInput) (r0 *kms.DeleteAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAlias", i0)
	r0, _ = returns[0].(*kms.DeleteAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) DeleteAliasRequest(i0 *kms.DeleteAliasInput) (r0 *request.Request, r1 *kms.DeleteAliasOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAliasRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.DeleteAliasOutput)
	return
}

func (d *KMSDouble) DeleteAliasWithContext(i0 context.Context, i1 *kms.DeleteAliasInput, i2 ...request.Option) (r0 *kms.DeleteAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAliasWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.DeleteAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeDeleteAliasWithContext(ctx context.Context, in *kms.DeleteAliasInput, _ ...request.Option) (*kms.DeleteAliasOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteAlias cancelled", ctx.Err())
	default:
		return d.DeleteAlias(in)
	}
}

func (d *KMSDouble) DeleteCustomKeyStore(i0 *kms.DeleteCustomKeyStoreInput) (r0 *kms.DeleteCustomKeyStoreOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCustomKeyStore", i0)
	r0, _ = returns[0].(*kms.DeleteCustomKeyStoreOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) DeleteCustomKeyStoreRequest(i0 *kms.DeleteCustomKeyStoreInput) (r0 *request.Request, r1 *kms.DeleteCustomKeyStoreOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCustomKeyStoreRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.DeleteCustomKeyStoreOutput)
	return
}

func (d *KMSDouble) DeleteCustomKeyStoreWithContext(i0 context.Context, i1 *kms.DeleteCustomKeyStoreInput, i2 ...request.Option) (r0 *kms.DeleteCustomKeyStoreOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCustomKeyStoreWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.DeleteCustomKeyStoreOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeDeleteCustomKeyStoreWithContext(ctx context.Context, in *kms.DeleteCustomKeyStoreInput, _ ...request.Option) (*kms.DeleteCustomKeyStoreOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteCustomKeyStore cancelled", ctx.Err())
	default:
		return d.DeleteCustomKeyStore(in)
	}
}

func (d *KMSDouble) DeleteImportedKeyMaterial(i0 *kms.DeleteImportedKeyMaterialInput) (r0 *kms.DeleteImportedKeyMaterialOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteImportedKeyMaterial", i0)
	r0, _ = returns[0].(*kms.DeleteImportedKeyMaterialOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) DeleteImportedKeyMaterialRequest(i0 *kms.DeleteImportedKeyMaterialInput) (r0 *request.Request, r1 *kms.DeleteImportedKeyMaterialOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteImportedKeyMaterialRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.DeleteImportedKeyMaterialOutput)
	return
}

func (d *KMSDouble) DeleteImportedKeyMaterialWithContext(i0 context.Context, i1 *kms.DeleteImportedKeyMaterialInput, i2 ...request.Option) (r0 *kms.DeleteImportedKeyMaterialOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteImportedKeyMaterialWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.DeleteImportedKeyMaterialOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeDeleteImportedKeyMaterialWithContext(ctx context.Context, in *kms.DeleteImportedKeyMaterialInput, _ ...request.Option) (*kms.DeleteImportedKeyMaterialOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteImportedKeyMaterial cancelled", ctx.Err())
	default:
		return d.DeleteImportedKeyMaterial(in)
	}
}

func (d *KMSDouble) DescribeCustomKeyStores(i0 *kms.DescribeCustomKeyStoresInput) (r0 *kms.DescribeCustomKeyStoresOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCustomKeyStores", i0)
	r0, _ = returns[0].(*kms.DescribeCustomKeyStoresOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) DescribeCustomKeyStoresRequest(i0 *kms.DescribeCustomKeyStoresInput) (r0 *request.Request, r1 *kms.DescribeCustomKeyStoresOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCustomKeyStoresRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.DescribeCustomKeyStoresOutput)
	return
}

func (d *KMSDouble) DescribeCustomKeyStoresWithContext(i0 context.Context, i1 *kms.DescribeCustomKeyStoresInput, i2 ...request.Option) (r0 *kms.DescribeCustomKeyStoresOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCustomKeyStoresWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.DescribeCustomKeyStoresOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeDescribeCustomKeyStoresWithContext(ctx context.Context, in *kms.DescribeCustomKeyStoresInput, _ ...request.Option) (*kms.DescribeCustomKeyStoresOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeCustomKeyStores cancelled", ctx.Err())
	default:
		return d.DescribeCustomKeyStores(in)
	}
}

func (d *KMSDouble) DescribeKey(i0 *kms.DescribeKeyInput) (r0 *kms.DescribeKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeKey", i0)
	r0, _ = returns[0].(*kms.DescribeKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) DescribeKeyRequest(i0 *kms.DescribeKeyInput) (r0 *request.Request, r1 *kms.DescribeKeyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeKeyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.DescribeKeyOutput)
	return
}

func (d *KMSDouble) DescribeKeyWithContext(i0 context.Context, i1 *kms.DescribeKeyInput, i2 ...request.Option) (r0 *kms.DescribeKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeKeyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.DescribeKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeDescribeKeyWithContext(ctx context.Context, in *kms.DescribeKeyInput, _ ...request.Option) (*kms.DescribeKeyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeKey cancelled", ctx.Err())
	default:
		return d.DescribeKey(in)
	}
}

func (d *KMSDouble) DisableKey(i0 *kms.DisableKeyInput) (r0 *kms.DisableKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableKey", i0)
	r0, _ = returns[0].(*kms.DisableKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) DisableKeyRequest(i0 *kms.DisableKeyInput) (r0 *request.Request, r1 *kms.DisableKeyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableKeyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.DisableKeyOutput)
	return
}

func (d *KMSDouble) DisableKeyRotation(i0 *kms.DisableKeyRotationInput) (r0 *kms.DisableKeyRotationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableKeyRotation", i0)
	r0, _ = returns[0].(*kms.DisableKeyRotationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) DisableKeyRotationRequest(i0 *kms.DisableKeyRotationInput) (r0 *request.Request, r1 *kms.DisableKeyRotationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableKeyRotationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.DisableKeyRotationOutput)
	return
}

func (d *KMSDouble) DisableKeyRotationWithContext(i0 context.Context, i1 *kms.DisableKeyRotationInput, i2 ...request.Option) (r0 *kms.DisableKeyRotationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableKeyRotationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.DisableKeyRotationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeDisableKeyRotationWithContext(ctx context.Context, in *kms.DisableKeyRotationInput, _ ...request.Option) (*kms.DisableKeyRotationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisableKeyRotation cancelled", ctx.Err())
	default:
		return d.DisableKeyRotation(in)
	}
}

func (d *KMSDouble) DisableKeyWithContext(i0 context.Context, i1 *kms.DisableKeyInput, i2 ...request.Option) (r0 *kms.DisableKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableKeyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.DisableKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeDisableKeyWithContext(ctx context.Context, in *kms.DisableKeyInput, _ ...request.Option) (*kms.DisableKeyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisableKey cancelled", ctx.Err())
	default:
		return d.DisableKey(in)
	}
}

func (d *KMSDouble) DisconnectCustomKeyStore(i0 *kms.DisconnectCustomKeyStoreInput) (r0 *kms.DisconnectCustomKeyStoreOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisconnectCustomKeyStore", i0)
	r0, _ = returns[0].(*kms.DisconnectCustomKeyStoreOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) DisconnectCustomKeyStoreRequest(i0 *kms.DisconnectCustomKeyStoreInput) (r0 *request.Request, r1 *kms.DisconnectCustomKeyStoreOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisconnectCustomKeyStoreRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.DisconnectCustomKeyStoreOutput)
	return
}

func (d *KMSDouble) DisconnectCustomKeyStoreWithContext(i0 context.Context, i1 *kms.DisconnectCustomKeyStoreInput, i2 ...request.Option) (r0 *kms.DisconnectCustomKeyStoreOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisconnectCustomKeyStoreWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.DisconnectCustomKeyStoreOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeDisconnectCustomKeyStoreWithContext(ctx context.Context, in *kms.DisconnectCustomKeyStoreInput, _ ...request.Option) (*kms.DisconnectCustomKeyStoreOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisconnectCustomKeyStore cancelled", ctx.Err())
	default:
		return d.DisconnectCustomKeyStore(in)
	}
}

func (d *KMSDouble) EnableKey(i0 *kms.EnableKeyInput) (r0 *kms.EnableKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableKey", i0)
	r0, _ = returns[0].(*kms.EnableKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) EnableKeyRequest(i0 *kms.EnableKeyInput) (r0 *request.Request, r1 *kms.EnableKeyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableKeyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.EnableKeyOutput)
	return
}

func (d *KMSDouble) EnableKeyRotation(i0 *kms.EnableKeyRotationInput) (r0 *kms.EnableKeyRotationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableKeyRotation", i0)
	r0, _ = returns[0].(*kms.EnableKeyRotationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) EnableKeyRotationRequest(i0 *kms.EnableKeyRotationInput) (r0 *request.Request, r1 *kms.EnableKeyRotationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableKeyRotationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.EnableKeyRotationOutput)
	return
}

func (d *KMSDouble) EnableKeyRotationWithContext(i0 context.Context, i1 *kms.EnableKeyRotationInput, i2 ...request.Option) (r0 *kms.EnableKeyRotationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableKeyRotationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.EnableKeyRotationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeEnableKeyRotationWithContext(ctx context.Context, in *kms.EnableKeyRotationInput, _ ...request.Option) (*kms.EnableKeyRotationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "EnableKeyRotation cancelled", ctx.Err())
	default:
		return d.EnableKeyRotation(in)
	}
}

func (d *KMSDouble) EnableKeyWithContext(i0 context.Context, i1 *kms.EnableKeyInput, i2 ...request.Option) (r0 *kms.EnableKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableKeyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.EnableKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeEnableKeyWithContext(ctx context.Context, in *kms.EnableKeyInput, _ ...request.Option) (*kms.EnableKeyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "EnableKey cancelled", ctx.Err())
	default:
		return d.EnableKey(in)
	}
}

func (d *KMSDouble) Encrypt(i0 *kms.EncryptInput) (r0 *kms.EncryptOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("Encrypt", i0)
	r0, _ = returns[0].(*kms.EncryptOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) EncryptRequest(i0 *kms.EncryptInput) (r0 *request.Request, r1 *kms.EncryptOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EncryptRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.EncryptOutput)
	return
}

func (d *KMSDouble) EncryptWithContext(i0 context.Context, i1 *kms.EncryptInput, i2 ...request.Option) (r0 *kms.EncryptOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EncryptWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.EncryptOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeEncryptWithContext(ctx context.Context, in *kms.EncryptInput, _ ...request.Option) (*kms.EncryptOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "Encrypt cancelled", ctx.Err())
	default:
		return d.Encrypt(in)
	}
}

func (d *KMSDouble) GenerateDataKey(i0 *kms.GenerateDataKeyInput) (r0 *kms.GenerateDataKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateDataKey", i0)
	r0, _ = returns[0].(*kms.GenerateDataKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) GenerateDataKeyPair(i0 *kms.GenerateDataKeyPairInput) (r0 *kms.GenerateDataKeyPairOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateDataKeyPair", i0)
	r0, _ = returns[0].(*kms.GenerateDataKeyPairOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) GenerateDataKeyPairRequest(i0 *kms.GenerateDataKeyPairInput) (r0 *request.Request, r1 *kms.GenerateDataKeyPairOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateDataKeyPairRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.GenerateDataKeyPairOutput)
	return
}

func (d *KMSDouble) GenerateDataKeyPairWithContext(i0 context.Context, i1 *kms.GenerateDataKeyPairInput, i2 ...request.Option) (r0 *kms.GenerateDataKeyPairOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateDataKeyPairWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.GenerateDataKeyPairOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeGenerateDataKeyPairWithContext(ctx context.Context, in *kms.GenerateDataKeyPairInput, _ ...request.Option) (*kms.GenerateDataKeyPairOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GenerateDataKeyPair cancelled", ctx.Err())
	default:
		return d.GenerateDataKeyPair(in)
	}
}

func (d *KMSDouble) GenerateDataKeyPairWithoutPlaintext(i0 *kms.GenerateDataKeyPairWithoutPlaintextInput) (r0 *kms.GenerateDataKeyPairWithoutPlaintextOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateDataKeyPairWithoutPlaintext", i0)
	r0, _ = returns[0].(*kms.GenerateDataKeyPairWithoutPlaintextOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) GenerateDataKeyPairWithoutPlaintextRequest(i0 *kms.GenerateDataKeyPairWithoutPlaintextInput) (r0 *request.Request, r1 *kms.GenerateDataKeyPairWithoutPlaintextOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateDataKeyPairWithoutPlaintextRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.GenerateDataKeyPairWithoutPlaintextOutput)
	return
}

func (d *KMSDouble) GenerateDataKeyPairWithoutPlaintextWithContext(i0 context.Context, i1 *kms.GenerateDataKeyPairWithoutPlaintextInput, i2 ...request.Option) (r0 *kms.GenerateDataKeyPairWithoutPlaintextOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateDataKeyPairWithoutPlaintextWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.GenerateDataKeyPairWithoutPlaintextOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeGenerateDataKeyPairWithoutPlaintextWithContext(ctx context.Context, in *kms.GenerateDataKeyPairWithoutPlaintextInput, _ ...request.Option) (*kms.GenerateDataKeyPairWithoutPlaintextOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GenerateDataKeyPairWithoutPlaintext cancelled", ctx.Err())
	default:
		return d.GenerateDataKeyPairWithoutPlaintext(in)
	}
}

func (d *KMSDouble) GenerateDataKeyRequest(i0 *kms.GenerateDataKeyInput) (r0 *request.Request, r1 *kms.GenerateDataKeyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateDataKeyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.GenerateDataKeyOutput)
	return
}

func (d *KMSDouble) GenerateDataKeyWithContext(i0 context.Context, i1 *kms.GenerateDataKeyInput, i2 ...request.Option) (r0 *kms.GenerateDataKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateDataKeyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.GenerateDataKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeGenerateDataKeyWithContext(ctx context.Context, in *kms.GenerateDataKeyInput, _ ...request.Option) (*kms.GenerateDataKeyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GenerateDataKey cancelled", ctx.Err())
	default:
		return d.GenerateDataKey(in)
	}
}

func (d *KMSDouble) GenerateDataKeyWithoutPlaintext(i0 *kms.GenerateDataKeyWithoutPlaintextInput) (r0 *kms.GenerateDataKeyWithoutPlaintextOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateDataKeyWithoutPlaintext", i0)
	r0, _ = returns[0].(*kms.GenerateDataKeyWithoutPlaintextOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) GenerateDataKeyWithoutPlaintextRequest(i0 *kms.GenerateDataKeyWithoutPlaintextInput) (r0 *request.Request, r1 *kms.GenerateDataKeyWithoutPlaintextOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateDataKeyWithoutPlaintextRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.GenerateDataKeyWithoutPlaintextOutput)
	return
}

func (d *KMSDouble) GenerateDataKeyWithoutPlaintextWithContext(i0 context.Context, i1 *kms.GenerateDataKeyWithoutPlaintextInput, i2 ...request.Option) (r0 *kms.GenerateDataKeyWithoutPlaintextOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateDataKeyWithoutPlaintextWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.GenerateDataKeyWithoutPlaintextOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeGenerateDataKeyWithoutPlaintextWithContext(ctx context.Context, in *kms.GenerateDataKeyWithoutPlaintextInput, _ ...request.Option) (*kms.GenerateDataKeyWithoutPlaintextOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GenerateDataKeyWithoutPlaintext cancelled", ctx.Err())
	default:
		return d.GenerateDataKeyWithoutPlaintext(in)
	}
}

func (d *KMSDouble) GenerateRandom(i0 *kms.GenerateRandomInput) (r0 *kms.GenerateRandomOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateRandom", i0)
	r0, _ = returns[0].(*kms.GenerateRandomOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) GenerateRandomRequest(i0 *kms.GenerateRandomInput) (r0 *request.Request, r1 *kms.GenerateRandomOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateRandomRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.GenerateRandomOutput)
	return
}

func (d *KMSDouble) GenerateRandomWithContext(i0 context.Context, i1 *kms.GenerateRandomInput, i2 ...request.Option) (r0 *kms.GenerateRandomOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateRandomWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.GenerateRandomOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeGenerateRandomWithContext(ctx context.Context, in *kms.GenerateRandomInput, _ ...request.Option) (*kms.GenerateRandomOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GenerateRandom cancelled", ctx.Err())
	default:
		return d.GenerateRandom(in)
	}
}

func (d *KMSDouble) GetKeyPolicy(i0 *kms.GetKeyPolicyInput) (r0 *kms.GetKeyPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetKeyPolicy", i0)
	r0, _ = returns[0].(*kms.GetKeyPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) GetKeyPolicyRequest(i0 *kms.GetKeyPolicyInput) (r0 *request.Request, r1 *kms.GetKeyPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetKeyPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.GetKeyPolicyOutput)
	return
}

func (d *KMSDouble) GetKeyPolicyWithContext(i0 context.Context, i1 *kms.GetKeyPolicyInput, i2 ...request.Option) (r0 *kms.GetKeyPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetKeyPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.GetKeyPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeGetKeyPolicyWithContext(ctx context.Context, in *kms.GetKeyPolicyInput, _ ...request.Option) (*kms.GetKeyPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetKeyPolicy cancelled", ctx.Err())
	default:
		return d.GetKeyPolicy(in)
	}
}

func (d *KMSDouble) GetKeyRotationStatus(i0 *kms.GetKeyRotationStatusInput) (r0 *kms.GetKeyRotationStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetKeyRotationStatus", i0)
	r0, _ = returns[0].(*kms.GetKeyRotationStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) GetKeyRotationStatusRequest(i0 *kms.GetKeyRotationStatusInput) (r0 *request.Request, r1 *kms.GetKeyRotationStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetKeyRotationStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.GetKeyRotationStatusOutput)
	return
}

func (d *KMSDouble) GetKeyRotationStatusWithContext(i0 context.Context, i1 *kms.GetKeyRotationStatusInput, i2 ...request.Option) (r0 *kms.GetKeyRotationStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetKeyRotationStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.GetKeyRotationStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeGetKeyRotationStatusWithContext(ctx context.Context, in *kms.GetKeyRotationStatusInput, _ ...request.Option) (*kms.GetKeyRotationStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetKeyRotationStatus cancelled", ctx.Err())
	default:
		return d.GetKeyRotationStatus(in)
	}
}

func (d *KMSDouble) GetParametersForImport(i0 *kms.GetParametersForImportInput) (r0 *kms.GetParametersForImportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetParametersForImport", i0)
	r0, _ = returns[0].(*kms.GetParametersForImportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) GetParametersForImportRequest(i0 *kms.GetParametersForImportInput) (r0 *request.Request, r1 *kms.GetParametersForImportOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetParametersForImportRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.GetParametersForImportOutput)
	return
}

func (d *KMSDouble) GetParametersForImportWithContext(i0 context.Context, i1 *kms.GetParametersForImportInput, i2 ...request.Option) (r0 *kms.GetParametersForImportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetParametersForImportWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.GetParametersForImportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeGetParametersForImportWithContext(ctx context.Context, in *kms.GetParametersForImportInput, _ ...request.Option) (*kms.GetParametersForImportOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetParametersForImport cancelled", ctx.Err())
	default:
		return d.GetParametersForImport(in)
	}
}

func (d *KMSDouble) GetPublicKey(i0 *kms.GetPublicKeyInput) (r0 *kms.GetPublicKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPublicKey", i0)
	r0, _ = returns[0].(*kms.GetPublicKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) GetPublicKeyRequest(i0 *kms.GetPublicKeyInput) (r0 *request.Request, r1 *kms.GetPublicKeyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPublicKeyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.GetPublicKeyOutput)
	return
}

func (d *KMSDouble) GetPublicKeyWithContext(i0 context.Context, i1 *kms.GetPublicKeyInput, i2 ...request.Option) (r0 *kms.GetPublicKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPublicKeyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.GetPublicKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeGetPublicKeyWithContext(ctx context.Context, in *kms.GetPublicKeyInput, _ ...request.Option) (*kms.GetPublicKeyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetPublicKey cancelled", ctx.Err())
	default:
		return d.GetPublicKey(in)
	}
}

func (d *KMSDouble) ImportKeyMaterial(i0 *kms.ImportKeyMaterialInput) (r0 *kms.ImportKeyMaterialOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportKeyMaterial", i0)
	r0, _ = returns[0].(*kms.ImportKeyMaterialOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) ImportKeyMaterialRequest(i0 *kms.ImportKeyMaterialInput) (r0 *request.Request, r1 *kms.ImportKeyMaterialOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportKeyMaterialRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.ImportKeyMaterialOutput)
	return
}

func (d *KMSDouble) ImportKeyMaterialWithContext(i0 context.Context, i1 *kms.ImportKeyMaterialInput, i2 ...request.Option) (r0 *kms.ImportKeyMaterialOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportKeyMaterialWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.ImportKeyMaterialOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeImportKeyMaterialWithContext(ctx context.Context, in *kms.ImportKeyMaterialInput, _ ...request.Option) (*kms.ImportKeyMaterialOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ImportKeyMaterial cancelled", ctx.Err())
	default:
		return d.ImportKeyMaterial(in)
	}
}

func (d *KMSDouble) ListAliases(i0 *kms.ListAliasesInput) (r0 *kms.ListAliasesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAliases", i0)
	r0, _ = returns[0].(*kms.ListAliasesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) ListAliasesPages(i0 *kms.ListAliasesInput, i1 func(*kms.ListAliasesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAliasesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *KMSDouble) fakeListAliasesPages(in *kms.ListAliasesInput, pager func(*kms.ListAliasesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListAliases", paginators, in, pager)
}

func (d *KMSDouble) ListAliasesPagesWithContext(i0 context.Context, i1 *kms.ListAliasesInput, i2 func(*kms.ListAliasesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAliasesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *KMSDouble) fakeListAliasesPagesWithContext(ctx context.Context, in *kms.ListAliasesInput, pager func(*kms.ListAliasesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListAliases", paginators, ctx, in, pager, options...)
}

func (d *KMSDouble) ListAliasesRequest(i0 *kms.ListAliasesInput) (r0 *request.Request, r1 *kms.ListAliasesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAliasesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.ListAliasesOutput)
	return
}

func (d *KMSDouble) ListAliasesWithContext(i0 context.Context, i1 *kms.ListAliasesInput, i2 ...request.Option) (r0 *kms.ListAliasesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAliasesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.ListAliasesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeListAliasesWithContext(ctx context.Context, in *kms.ListAliasesInput, _ ...request.Option) (*kms.ListAliasesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAliases cancelled", ctx.Err())
	default:
		return d.ListAliases(in)
	}
}

func (d *KMSDouble) ListGrants(i0 *kms.ListGrantsInput) (r0 *kms.ListGrantsResponse, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGrants", i0)
	r0, _ = returns[0].(*kms.ListGrantsResponse)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) ListGrantsPages(i0 *kms.ListGrantsInput, i1 func(*kms.ListGrantsResponse, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGrantsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *KMSDouble) fakeListGrantsPages(in *kms.ListGrantsInput, pager func(*kms.ListGrantsResponse, bool) (shouldContinue bool)) error {
	return d.Paginate("ListGrants", paginators, in, pager)
}

func (d *KMSDouble) ListGrantsPagesWithContext(i0 context.Context, i1 *kms.ListGrantsInput, i2 func(*kms.ListGrantsResponse, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGrantsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *KMSDouble) fakeListGrantsPagesWithContext(ctx context.Context, in *kms.ListGrantsInput, pager func(*kms.ListGrantsResponse, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListGrants", paginators, ctx, in, pager, options...)
}

func (d *KMSDouble) ListGrantsRequest(i0 *kms.ListGrantsInput) (r0 *request.Request, r1 *kms.ListGrantsResponse) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGrantsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.ListGrantsResponse)
	return
}

func (d *KMSDouble) ListGrantsWithContext(i0 context.Context, i1 *kms.ListGrantsInput, i2 ...request.Option) (r0 *kms.ListGrantsResponse, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGrantsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.ListGrantsResponse)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeListGrantsWithContext(ctx context.Context, in *kms.ListGrantsInput, _ ...request.Option) (*kms.ListGrantsResponse, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListGrants cancelled", ctx.Err())
	default:
		return d.ListGrants(in)
	}
}

func (d *KMSDouble) ListKeyPolicies(i0 *kms.ListKeyPoliciesInput) (r0 *kms.ListKeyPoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListKeyPolicies", i0)
	r0, _ = returns[0].(*kms.ListKeyPoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) ListKeyPoliciesPages(i0 *kms.ListKeyPoliciesInput, i1 func(*kms.ListKeyPoliciesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListKeyPoliciesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *KMSDouble) fakeListKeyPoliciesPages(in *kms.ListKeyPoliciesInput, pager func(*kms.ListKeyPoliciesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListKeyPolicies", paginators, in, pager)
}

func (d *KMSDouble) ListKeyPoliciesPagesWithContext(i0 context.Context, i1 *kms.ListKeyPoliciesInput, i2 func(*kms.ListKeyPoliciesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListKeyPoliciesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *KMSDouble) fakeListKeyPoliciesPagesWithContext(ctx context.Context, in *kms.ListKeyPoliciesInput, pager func(*kms.ListKeyPoliciesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListKeyPolicies", paginators, ctx, in, pager, options...)
}

func (d *KMSDouble) ListKeyPoliciesRequest(i0 *kms.ListKeyPoliciesInput) (r0 *request.Request, r1 *kms.ListKeyPoliciesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListKeyPoliciesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.ListKeyPoliciesOutput)
	return
}

func (d *KMSDouble) ListKeyPoliciesWithContext(i0 context.Context, i1 *kms.ListKeyPoliciesInput, i2 ...request.Option) (r0 *kms.ListKeyPoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListKeyPoliciesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.ListKeyPoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeListKeyPoliciesWithContext(ctx context.Context, in *kms.ListKeyPoliciesInput, _ ...request.Option) (*kms.ListKeyPoliciesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListKeyPolicies cancelled", ctx.Err())
	default:
		return d.ListKeyPolicies(in)
	}
}

func (d *KMSDouble) ListKeys(i0 *kms.ListKeysInput) (r0 *kms.ListKeysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListKeys", i0)
	r0, _ = returns[0].(*kms.ListKeysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) ListKeysPages(i0 *kms.ListKeysInput, i1 func(*kms.ListKeysOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListKeysPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *KMSDouble) fakeListKeysPages(in *kms.ListKeysInput, pager func(*kms.ListKeysOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListKeys", paginators, in, pager)
}

func (d *KMSDouble) ListKeysPagesWithContext(i0 context.Context, i1 *kms.ListKeysInput, i2 func(*kms.ListKeysOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListKeysPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *KMSDouble) fakeListKeysPagesWithContext(ctx context.Context, in *kms.ListKeysInput, pager func(*kms.ListKeysOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListKeys", paginators, ctx, in, pager, options...)
}

func (d *KMSDouble) ListKeysRequest(i0 *kms.ListKeysInput) (r0 *request.Request, r1 *kms.ListKeysOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListKeysRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.ListKeysOutput)
	return
}

func (d *KMSDouble) ListKeysWithContext(i0 context.Context, i1 *kms.ListKeysInput, i2 ...request.Option) (r0 *kms.ListKeysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListKeysWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.ListKeysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeListKeysWithContext(ctx context.Context, in *kms.ListKeysInput, _ ...request.Option) (*kms.ListKeysOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListKeys cancelled", ctx.Err())
	default:
		return d.ListKeys(in)
	}
}

func (d *KMSDouble) ListResourceTags(i0 *kms.ListResourceTagsInput) (r0 *kms.ListResourceTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourceTags", i0)
	r0, _ = returns[0].(*kms.ListResourceTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) ListResourceTagsRequest(i0 *kms.ListResourceTagsInput) (r0 *request.Request, r1 *kms.ListResourceTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourceTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.ListResourceTagsOutput)
	return
}

func (d *KMSDouble) ListResourceTagsWithContext(i0 context.Context, i1 *kms.ListResourceTagsInput, i2 ...request.Option) (r0 *kms.ListResourceTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourceTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.ListResourceTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeListResourceTagsWithContext(ctx context.Context, in *kms.ListResourceTagsInput, _ ...request.Option) (*kms.ListResourceTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListResourceTags cancelled", ctx.Err())
	default:
		return d.ListResourceTags(in)
	}
}

func (d *KMSDouble) ListRetirableGrants(i0 *kms.ListRetirableGrantsInput) (r0 *kms.ListGrantsResponse, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRetirableGrants", i0)
	r0, _ = returns[0].(*kms.ListGrantsResponse)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) ListRetirableGrantsRequest(i0 *kms.ListRetirableGrantsInput) (r0 *request.Request, r1 *kms.ListGrantsResponse) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRetirableGrantsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.ListGrantsResponse)
	return
}

func (d *KMSDouble) ListRetirableGrantsWithContext(i0 context.Context, i1 *kms.ListRetirableGrantsInput, i2 ...request.Option) (r0 *kms.ListGrantsResponse, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRetirableGrantsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.ListGrantsResponse)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeListRetirableGrantsWithContext(ctx context.Context, in *kms.ListRetirableGrantsInput, _ ...request.Option) (*kms.ListGrantsResponse, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListRetirableGrants cancelled", ctx.Err())
	default:
		return d.ListRetirableGrants(in)
	}
}

func (d *KMSDouble) PutKeyPolicy(i0 *kms.PutKeyPolicyInput) (r0 *kms.PutKeyPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutKeyPolicy", i0)
	r0, _ = returns[0].(*kms.PutKeyPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) PutKeyPolicyRequest(i0 *kms.PutKeyPolicyInput) (r0 *request.Request, r1 *kms.PutKeyPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutKeyPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.PutKeyPolicyOutput)
	return
}

func (d *KMSDouble) PutKeyPolicyWithContext(i0 context.Context, i1 *kms.PutKeyPolicyInput, i2 ...request.Option) (r0 *kms.PutKeyPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutKeyPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.PutKeyPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakePutKeyPolicyWithContext(ctx context.Context, in *kms.PutKeyPolicyInput, _ ...request.Option) (*kms.PutKeyPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutKeyPolicy cancelled", ctx.Err())
	default:
		return d.PutKeyPolicy(in)
	}
}

func (d *KMSDouble) ReEncrypt(i0 *kms.ReEncryptInput) (r0 *kms.ReEncryptOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReEncrypt", i0)
	r0, _ = returns[0].(*kms.ReEncryptOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) ReEncryptRequest(i0 *kms.ReEncryptInput) (r0 *request.Request, r1 *kms.ReEncryptOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReEncryptRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.ReEncryptOutput)
	return
}

func (d *KMSDouble) ReEncryptWithContext(i0 context.Context, i1 *kms.ReEncryptInput, i2 ...request.Option) (r0 *kms.ReEncryptOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReEncryptWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.ReEncryptOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeReEncryptWithContext(ctx context.Context, in *kms.ReEncryptInput, _ ...request.Option) (*kms.ReEncryptOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ReEncrypt cancelled", ctx.Err())
	default:
		return d.ReEncrypt(in)
	}
}

func (d *KMSDouble) RetireGrant(i0 *kms.RetireGrantInput) (r0 *kms.RetireGrantOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RetireGrant", i0)
	r0, _ = returns[0].(*kms.RetireGrantOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) RetireGrantRequest(i0 *kms.RetireGrantInput) (r0 *request.Request, r1 *kms.RetireGrantOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RetireGrantRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.RetireGrantOutput)
	return
}

func (d *KMSDouble) RetireGrantWithContext(i0 context.Context, i1 *kms.RetireGrantInput, i2 ...request.Option) (r0 *kms.RetireGrantOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RetireGrantWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.RetireGrantOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeRetireGrantWithContext(ctx context.Context, in *kms.RetireGrantInput, _ ...request.Option) (*kms.RetireGrantOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RetireGrant cancelled", ctx.Err())
	default:
		return d.RetireGrant(in)
	}
}

func (d *KMSDouble) RevokeGrant(i0 *kms.RevokeGrantInput) (r0 *kms.RevokeGrantOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeGrant", i0)
	r0, _ = returns[0].(*kms.RevokeGrantOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) RevokeGrantRequest(i0 *kms.RevokeGrantInput) (r0 *request.Request, r1 *kms.RevokeGrantOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeGrantRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.RevokeGrantOutput)
	return
}

func (d *KMSDouble) RevokeGrantWithContext(i0 context.Context, i1 *kms.RevokeGrantInput, i2 ...request.Option) (r0 *kms.RevokeGrantOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeGrantWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.RevokeGrantOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeRevokeGrantWithContext(ctx context.Context, in *kms.RevokeGrantInput, _ ...request.Option) (*kms.RevokeGrantOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RevokeGrant cancelled", ctx.Err())
	default:
		return d.RevokeGrant(in)
	}
}

func (d *KMSDouble) ScheduleKeyDeletion(i0 *kms.ScheduleKeyDeletionInput) (r0 *kms.ScheduleKeyDeletionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ScheduleKeyDeletion", i0)
	r0, _ = returns[0].(*kms.ScheduleKeyDeletionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) ScheduleKeyDeletionRequest(i0 *kms.ScheduleKeyDeletionInput) (r0 *request.Request, r1 *kms.ScheduleKeyDeletionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ScheduleKeyDeletionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.ScheduleKeyDeletionOutput)
	return
}

func (d *KMSDouble) ScheduleKeyDeletionWithContext(i0 context.Context, i1 *kms.ScheduleKeyDeletionInput, i2 ...request.Option) (r0 *kms.ScheduleKeyDeletionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ScheduleKeyDeletionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.ScheduleKeyDeletionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeScheduleKeyDeletionWithContext(ctx context.Context, in *kms.ScheduleKeyDeletionInput, _ ...request.Option) (*kms.ScheduleKeyDeletionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ScheduleKeyDeletion cancelled", ctx.Err())
	default:
		return d.ScheduleKeyDeletion(in)
	}
}

func (d *KMSDouble) Sign(i0 *kms.SignInput) (r0 *kms.SignOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("Sign", i0)
	r0, _ = returns[0].(*kms.SignOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) SignRequest(i0 *kms.SignInput) (r0 *request.Request, r1 *kms.SignOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SignRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.SignOutput)
	return
}

func (d *KMSDouble) SignWithContext(i0 context.Context, i1 *kms.SignInput, i2 ...request.Option) (r0 *kms.SignOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SignWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.SignOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeSignWithContext(ctx context.Context, in *kms.SignInput, _ ...request.Option) (*kms.SignOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "Sign cancelled", ctx.Err())
	default:
		return d.Sign(in)
	}
}

func (d *KMSDouble) TagResource(i0 *kms.TagResourceInput) (r0 *kms.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*kms.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) TagResourceRequest(i0 *kms.TagResourceInput) (r0 *request.Request, r1 *kms.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.TagResourceOutput)
	return
}

func (d *KMSDouble) TagResourceWithContext(i0 context.Context, i1 *kms.TagResourceInput, i2 ...request.Option) (r0 *kms.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeTagResourceWithContext(ctx context.Context, in *kms.TagResourceInput, _ ...request.Option) (*kms.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *KMSDouble) UntagResource(i0 *kms.UntagResourceInput) (r0 *kms.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*kms.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) UntagResourceRequest(i0 *kms.UntagResourceInput) (r0 *request.Request, r1 *kms.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.UntagResourceOutput)
	return
}

func (d *KMSDouble) UntagResourceWithContext(i0 context.Context, i1 *kms.UntagResourceInput, i2 ...request.Option) (r0 *kms.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeUntagResourceWithContext(ctx context.Context, in *kms.UntagResourceInput, _ ...request.Option) (*kms.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *KMSDouble) UpdateAlias(i0 *kms.UpdateAliasInput) (r0 *kms.UpdateAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAlias", i0)
	r0, _ = returns[0].(*kms.UpdateAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) UpdateAliasRequest(i0 *kms.UpdateAliasInput) (r0 *request.Request, r1 *kms.UpdateAliasOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAliasRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.UpdateAliasOutput)
	return
}

func (d *KMSDouble) UpdateAliasWithContext(i0 context.Context, i1 *kms.UpdateAliasInput, i2 ...request.Option) (r0 *kms.UpdateAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAliasWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.UpdateAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeUpdateAliasWithContext(ctx context.Context, in *kms.UpdateAliasInput, _ ...request.Option) (*kms.UpdateAliasOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateAlias cancelled", ctx.Err())
	default:
		return d.UpdateAlias(in)
	}
}

func (d *KMSDouble) UpdateCustomKeyStore(i0 *kms.UpdateCustomKeyStoreInput) (r0 *kms.UpdateCustomKeyStoreOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCustomKeyStore", i0)
	r0, _ = returns[0].(*kms.UpdateCustomKeyStoreOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) UpdateCustomKeyStoreRequest(i0 *kms.UpdateCustomKeyStoreInput) (r0 *request.Request, r1 *kms.UpdateCustomKeyStoreOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCustomKeyStoreRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.UpdateCustomKeyStoreOutput)
	return
}

func (d *KMSDouble) UpdateCustomKeyStoreWithContext(i0 context.Context, i1 *kms.UpdateCustomKeyStoreInput, i2 ...request.Option) (r0 *kms.UpdateCustomKeyStoreOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCustomKeyStoreWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.UpdateCustomKeyStoreOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeUpdateCustomKeyStoreWithContext(ctx context.Context, in *kms.UpdateCustomKeyStoreInput, _ ...request.Option) (*kms.UpdateCustomKeyStoreOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateCustomKeyStore cancelled", ctx.Err())
	default:
		return d.UpdateCustomKeyStore(in)
	}
}

func (d *KMSDouble) UpdateKeyDescription(i0 *kms.UpdateKeyDescriptionInput) (r0 *kms.UpdateKeyDescriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateKeyDescription", i0)
	r0, _ = returns[0].(*kms.UpdateKeyDescriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) UpdateKeyDescriptionRequest(i0 *kms.UpdateKeyDescriptionInput) (r0 *request.Request, r1 *kms.UpdateKeyDescriptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateKeyDescriptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.UpdateKeyDescriptionOutput)
	return
}

func (d *KMSDouble) UpdateKeyDescriptionWithContext(i0 context.Context, i1 *kms.UpdateKeyDescriptionInput, i2 ...request.Option) (r0 *kms.UpdateKeyDescriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateKeyDescriptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.UpdateKeyDescriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeUpdateKeyDescriptionWithContext(ctx context.Context, in *kms.UpdateKeyDescriptionInput, _ ...request.Option) (*kms.UpdateKeyDescriptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateKeyDescription cancelled", ctx.Err())
	default:
		return d.UpdateKeyDescription(in)
	}
}

func (d *KMSDouble) Verify(i0 *kms.VerifyInput) (r0 *kms.VerifyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("Verify", i0)
	r0, _ = returns[0].(*kms.VerifyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) VerifyRequest(i0 *kms.VerifyInput) (r0 *request.Request, r1 *kms.VerifyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("VerifyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kms.VerifyOutput)
	return
}

func (d *KMSDouble) VerifyWithContext(i0 context.Context, i1 *kms.VerifyInput, i2 ...request.Option) (r0 *kms.VerifyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("VerifyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kms.VerifyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KMSDouble) fakeVerifyWithContext(ctx context.Context, in *kms.VerifyInput, _ ...request.Option) (*kms.VerifyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "Verify cancelled", ctx.Err())
	default:
		return d.Verify(in)
	}
}
