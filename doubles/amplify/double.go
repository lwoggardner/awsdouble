// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:11:06+11:00

// Package amplifydouble provides a TestDouble implementation of amplifyiface.AmplifyAPI
package amplifydouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/amplify"
	"github.com/aws/aws-sdk-go/service/amplify/amplifyiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// AmplifyDouble is TestDouble for amplifyiface.AmplifyAPI
type AmplifyDouble struct {
	amplifyiface.AmplifyAPI
	*awsdouble.AWSTestDouble
}

// Constructor for AmplifyDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *AmplifyDouble {
	result := &AmplifyDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*amplifyiface.AmplifyAPI)(nil), configurators...)
	return result
}

func (d *AmplifyDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *AmplifyDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CreateAppWithContext":
		return m.Fake(d.fakeCreateAppWithContext)

	case "CreateBackendEnvironmentWithContext":
		return m.Fake(d.fakeCreateBackendEnvironmentWithContext)

	case "CreateBranchWithContext":
		return m.Fake(d.fakeCreateBranchWithContext)

	case "CreateDeploymentWithContext":
		return m.Fake(d.fakeCreateDeploymentWithContext)

	case "CreateDomainAssociationWithContext":
		return m.Fake(d.fakeCreateDomainAssociationWithContext)

	case "CreateWebhookWithContext":
		return m.Fake(d.fakeCreateWebhookWithContext)

	case "DeleteAppWithContext":
		return m.Fake(d.fakeDeleteAppWithContext)

	case "DeleteBackendEnvironmentWithContext":
		return m.Fake(d.fakeDeleteBackendEnvironmentWithContext)

	case "DeleteBranchWithContext":
		return m.Fake(d.fakeDeleteBranchWithContext)

	case "DeleteDomainAssociationWithContext":
		return m.Fake(d.fakeDeleteDomainAssociationWithContext)

	case "DeleteJobWithContext":
		return m.Fake(d.fakeDeleteJobWithContext)

	case "DeleteWebhookWithContext":
		return m.Fake(d.fakeDeleteWebhookWithContext)

	case "GenerateAccessLogsWithContext":
		return m.Fake(d.fakeGenerateAccessLogsWithContext)

	case "GetAppWithContext":
		return m.Fake(d.fakeGetAppWithContext)

	case "GetArtifactUrlWithContext":
		return m.Fake(d.fakeGetArtifactUrlWithContext)

	case "GetBackendEnvironmentWithContext":
		return m.Fake(d.fakeGetBackendEnvironmentWithContext)

	case "GetBranchWithContext":
		return m.Fake(d.fakeGetBranchWithContext)

	case "GetDomainAssociationWithContext":
		return m.Fake(d.fakeGetDomainAssociationWithContext)

	case "GetJobWithContext":
		return m.Fake(d.fakeGetJobWithContext)

	case "GetWebhookWithContext":
		return m.Fake(d.fakeGetWebhookWithContext)

	case "ListAppsWithContext":
		return m.Fake(d.fakeListAppsWithContext)

	case "ListArtifactsWithContext":
		return m.Fake(d.fakeListArtifactsWithContext)

	case "ListBackendEnvironmentsWithContext":
		return m.Fake(d.fakeListBackendEnvironmentsWithContext)

	case "ListBranchesWithContext":
		return m.Fake(d.fakeListBranchesWithContext)

	case "ListDomainAssociationsWithContext":
		return m.Fake(d.fakeListDomainAssociationsWithContext)

	case "ListJobsWithContext":
		return m.Fake(d.fakeListJobsWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "ListWebhooksWithContext":
		return m.Fake(d.fakeListWebhooksWithContext)

	case "StartDeploymentWithContext":
		return m.Fake(d.fakeStartDeploymentWithContext)

	case "StartJobWithContext":
		return m.Fake(d.fakeStartJobWithContext)

	case "StopJobWithContext":
		return m.Fake(d.fakeStopJobWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateAppWithContext":
		return m.Fake(d.fakeUpdateAppWithContext)

	case "UpdateBranchWithContext":
		return m.Fake(d.fakeUpdateBranchWithContext)

	case "UpdateDomainAssociationWithContext":
		return m.Fake(d.fakeUpdateDomainAssociationWithContext)

	case "UpdateWebhookWithContext":
		return m.Fake(d.fakeUpdateWebhookWithContext)

	default:
		return nil
	}
}

func (d *AmplifyDouble) CreateApp(i0 *amplify.CreateAppInput) (r0 *amplify.CreateAppOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApp", i0)
	r0, _ = returns[0].(*amplify.CreateAppOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) CreateAppRequest(i0 *amplify.CreateAppInput) (r0 *request.Request, r1 *amplify.CreateAppOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAppRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*amplify.CreateAppOutput)
	return
}

func (d *AmplifyDouble) CreateAppWithContext(i0 context.Context, i1 *amplify.CreateAppInput, i2 ...request.Option) (r0 *amplify.CreateAppOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAppWithContext", i0, i1, i2)
	r0, _ = returns[0].(*amplify.CreateAppOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) fakeCreateAppWithContext(ctx context.Context, in *amplify.CreateAppInput, _ ...request.Option) (*amplify.CreateAppOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateApp cancelled", ctx.Err())
	default:
		return d.CreateApp(in)
	}
}

func (d *AmplifyDouble) CreateBackendEnvironment(i0 *amplify.CreateBackendEnvironmentInput) (r0 *amplify.CreateBackendEnvironmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBackendEnvironment", i0)
	r0, _ = returns[0].(*amplify.CreateBackendEnvironmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) CreateBackendEnvironmentRequest(i0 *amplify.CreateBackendEnvironmentInput) (r0 *request.Request, r1 *amplify.CreateBackendEnvironmentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBackendEnvironmentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*amplify.CreateBackendEnvironmentOutput)
	return
}

func (d *AmplifyDouble) CreateBackendEnvironmentWithContext(i0 context.Context, i1 *amplify.CreateBackendEnvironmentInput, i2 ...request.Option) (r0 *amplify.CreateBackendEnvironmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBackendEnvironmentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*amplify.CreateBackendEnvironmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) fakeCreateBackendEnvironmentWithContext(ctx context.Context, in *amplify.CreateBackendEnvironmentInput, _ ...request.Option) (*amplify.CreateBackendEnvironmentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateBackendEnvironment cancelled", ctx.Err())
	default:
		return d.CreateBackendEnvironment(in)
	}
}

func (d *AmplifyDouble) CreateBranch(i0 *amplify.CreateBranchInput) (r0 *amplify.CreateBranchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBranch", i0)
	r0, _ = returns[0].(*amplify.CreateBranchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) CreateBranchRequest(i0 *amplify.CreateBranchInput) (r0 *request.Request, r1 *amplify.CreateBranchOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBranchRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*amplify.CreateBranchOutput)
	return
}

func (d *AmplifyDouble) CreateBranchWithContext(i0 context.Context, i1 *amplify.CreateBranchInput, i2 ...request.Option) (r0 *amplify.CreateBranchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBranchWithContext", i0, i1, i2)
	r0, _ = returns[0].(*amplify.CreateBranchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) fakeCreateBranchWithContext(ctx context.Context, in *amplify.CreateBranchInput, _ ...request.Option) (*amplify.CreateBranchOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateBranch cancelled", ctx.Err())
	default:
		return d.CreateBranch(in)
	}
}

func (d *AmplifyDouble) CreateDeployment(i0 *amplify.CreateDeploymentInput) (r0 *amplify.CreateDeploymentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDeployment", i0)
	r0, _ = returns[0].(*amplify.CreateDeploymentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) CreateDeploymentRequest(i0 *amplify.CreateDeploymentInput) (r0 *request.Request, r1 *amplify.CreateDeploymentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDeploymentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*amplify.CreateDeploymentOutput)
	return
}

func (d *AmplifyDouble) CreateDeploymentWithContext(i0 context.Context, i1 *amplify.CreateDeploymentInput, i2 ...request.Option) (r0 *amplify.CreateDeploymentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDeploymentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*amplify.CreateDeploymentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) fakeCreateDeploymentWithContext(ctx context.Context, in *amplify.CreateDeploymentInput, _ ...request.Option) (*amplify.CreateDeploymentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDeployment cancelled", ctx.Err())
	default:
		return d.CreateDeployment(in)
	}
}

func (d *AmplifyDouble) CreateDomainAssociation(i0 *amplify.CreateDomainAssociationInput) (r0 *amplify.CreateDomainAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDomainAssociation", i0)
	r0, _ = returns[0].(*amplify.CreateDomainAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) CreateDomainAssociationRequest(i0 *amplify.CreateDomainAssociationInput) (r0 *request.Request, r1 *amplify.CreateDomainAssociationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDomainAssociationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*amplify.CreateDomainAssociationOutput)
	return
}

func (d *AmplifyDouble) CreateDomainAssociationWithContext(i0 context.Context, i1 *amplify.CreateDomainAssociationInput, i2 ...request.Option) (r0 *amplify.CreateDomainAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDomainAssociationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*amplify.CreateDomainAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) fakeCreateDomainAssociationWithContext(ctx context.Context, in *amplify.CreateDomainAssociationInput, _ ...request.Option) (*amplify.CreateDomainAssociationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDomainAssociation cancelled", ctx.Err())
	default:
		return d.CreateDomainAssociation(in)
	}
}

func (d *AmplifyDouble) CreateWebhook(i0 *amplify.CreateWebhookInput) (r0 *amplify.CreateWebhookOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateWebhook", i0)
	r0, _ = returns[0].(*amplify.CreateWebhookOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) CreateWebhookRequest(i0 *amplify.CreateWebhookInput) (r0 *request.Request, r1 *amplify.CreateWebhookOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateWebhookRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*amplify.CreateWebhookOutput)
	return
}

func (d *AmplifyDouble) CreateWebhookWithContext(i0 context.Context, i1 *amplify.CreateWebhookInput, i2 ...request.Option) (r0 *amplify.CreateWebhookOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateWebhookWithContext", i0, i1, i2)
	r0, _ = returns[0].(*amplify.CreateWebhookOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) fakeCreateWebhookWithContext(ctx context.Context, in *amplify.CreateWebhookInput, _ ...request.Option) (*amplify.CreateWebhookOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateWebhook cancelled", ctx.Err())
	default:
		return d.CreateWebhook(in)
	}
}

func (d *AmplifyDouble) DeleteApp(i0 *amplify.DeleteAppInput) (r0 *amplify.DeleteAppOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApp", i0)
	r0, _ = returns[0].(*amplify.DeleteAppOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) DeleteAppRequest(i0 *amplify.DeleteAppInput) (r0 *request.Request, r1 *amplify.DeleteAppOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAppRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*amplify.DeleteAppOutput)
	return
}

func (d *AmplifyDouble) DeleteAppWithContext(i0 context.Context, i1 *amplify.DeleteAppInput, i2 ...request.Option) (r0 *amplify.DeleteAppOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAppWithContext", i0, i1, i2)
	r0, _ = returns[0].(*amplify.DeleteAppOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) fakeDeleteAppWithContext(ctx context.Context, in *amplify.DeleteAppInput, _ ...request.Option) (*amplify.DeleteAppOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteApp cancelled", ctx.Err())
	default:
		return d.DeleteApp(in)
	}
}

func (d *AmplifyDouble) DeleteBackendEnvironment(i0 *amplify.DeleteBackendEnvironmentInput) (r0 *amplify.DeleteBackendEnvironmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBackendEnvironment", i0)
	r0, _ = returns[0].(*amplify.DeleteBackendEnvironmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) DeleteBackendEnvironmentRequest(i0 *amplify.DeleteBackendEnvironmentInput) (r0 *request.Request, r1 *amplify.DeleteBackendEnvironmentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBackendEnvironmentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*amplify.DeleteBackendEnvironmentOutput)
	return
}

func (d *AmplifyDouble) DeleteBackendEnvironmentWithContext(i0 context.Context, i1 *amplify.DeleteBackendEnvironmentInput, i2 ...request.Option) (r0 *amplify.DeleteBackendEnvironmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBackendEnvironmentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*amplify.DeleteBackendEnvironmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) fakeDeleteBackendEnvironmentWithContext(ctx context.Context, in *amplify.DeleteBackendEnvironmentInput, _ ...request.Option) (*amplify.DeleteBackendEnvironmentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteBackendEnvironment cancelled", ctx.Err())
	default:
		return d.DeleteBackendEnvironment(in)
	}
}

func (d *AmplifyDouble) DeleteBranch(i0 *amplify.DeleteBranchInput) (r0 *amplify.DeleteBranchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBranch", i0)
	r0, _ = returns[0].(*amplify.DeleteBranchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) DeleteBranchRequest(i0 *amplify.DeleteBranchInput) (r0 *request.Request, r1 *amplify.DeleteBranchOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBranchRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*amplify.DeleteBranchOutput)
	return
}

func (d *AmplifyDouble) DeleteBranchWithContext(i0 context.Context, i1 *amplify.DeleteBranchInput, i2 ...request.Option) (r0 *amplify.DeleteBranchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBranchWithContext", i0, i1, i2)
	r0, _ = returns[0].(*amplify.DeleteBranchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) fakeDeleteBranchWithContext(ctx context.Context, in *amplify.DeleteBranchInput, _ ...request.Option) (*amplify.DeleteBranchOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteBranch cancelled", ctx.Err())
	default:
		return d.DeleteBranch(in)
	}
}

func (d *AmplifyDouble) DeleteDomainAssociation(i0 *amplify.DeleteDomainAssociationInput) (r0 *amplify.DeleteDomainAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDomainAssociation", i0)
	r0, _ = returns[0].(*amplify.DeleteDomainAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) DeleteDomainAssociationRequest(i0 *amplify.DeleteDomainAssociationInput) (r0 *request.Request, r1 *amplify.DeleteDomainAssociationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDomainAssociationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*amplify.DeleteDomainAssociationOutput)
	return
}

func (d *AmplifyDouble) DeleteDomainAssociationWithContext(i0 context.Context, i1 *amplify.DeleteDomainAssociationInput, i2 ...request.Option) (r0 *amplify.DeleteDomainAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDomainAssociationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*amplify.DeleteDomainAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) fakeDeleteDomainAssociationWithContext(ctx context.Context, in *amplify.DeleteDomainAssociationInput, _ ...request.Option) (*amplify.DeleteDomainAssociationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDomainAssociation cancelled", ctx.Err())
	default:
		return d.DeleteDomainAssociation(in)
	}
}

func (d *AmplifyDouble) DeleteJob(i0 *amplify.DeleteJobInput) (r0 *amplify.DeleteJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteJob", i0)
	r0, _ = returns[0].(*amplify.DeleteJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) DeleteJobRequest(i0 *amplify.DeleteJobInput) (r0 *request.Request, r1 *amplify.DeleteJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*amplify.DeleteJobOutput)
	return
}

func (d *AmplifyDouble) DeleteJobWithContext(i0 context.Context, i1 *amplify.DeleteJobInput, i2 ...request.Option) (r0 *amplify.DeleteJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*amplify.DeleteJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) fakeDeleteJobWithContext(ctx context.Context, in *amplify.DeleteJobInput, _ ...request.Option) (*amplify.DeleteJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteJob cancelled", ctx.Err())
	default:
		return d.DeleteJob(in)
	}
}

func (d *AmplifyDouble) DeleteWebhook(i0 *amplify.DeleteWebhookInput) (r0 *amplify.DeleteWebhookOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteWebhook", i0)
	r0, _ = returns[0].(*amplify.DeleteWebhookOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) DeleteWebhookRequest(i0 *amplify.DeleteWebhookInput) (r0 *request.Request, r1 *amplify.DeleteWebhookOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteWebhookRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*amplify.DeleteWebhookOutput)
	return
}

func (d *AmplifyDouble) DeleteWebhookWithContext(i0 context.Context, i1 *amplify.DeleteWebhookInput, i2 ...request.Option) (r0 *amplify.DeleteWebhookOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteWebhookWithContext", i0, i1, i2)
	r0, _ = returns[0].(*amplify.DeleteWebhookOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) fakeDeleteWebhookWithContext(ctx context.Context, in *amplify.DeleteWebhookInput, _ ...request.Option) (*amplify.DeleteWebhookOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteWebhook cancelled", ctx.Err())
	default:
		return d.DeleteWebhook(in)
	}
}

func (d *AmplifyDouble) GenerateAccessLogs(i0 *amplify.GenerateAccessLogsInput) (r0 *amplify.GenerateAccessLogsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateAccessLogs", i0)
	r0, _ = returns[0].(*amplify.GenerateAccessLogsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) GenerateAccessLogsRequest(i0 *amplify.GenerateAccessLogsInput) (r0 *request.Request, r1 *amplify.GenerateAccessLogsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateAccessLogsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*amplify.GenerateAccessLogsOutput)
	return
}

func (d *AmplifyDouble) GenerateAccessLogsWithContext(i0 context.Context, i1 *amplify.GenerateAccessLogsInput, i2 ...request.Option) (r0 *amplify.GenerateAccessLogsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateAccessLogsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*amplify.GenerateAccessLogsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) fakeGenerateAccessLogsWithContext(ctx context.Context, in *amplify.GenerateAccessLogsInput, _ ...request.Option) (*amplify.GenerateAccessLogsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GenerateAccessLogs cancelled", ctx.Err())
	default:
		return d.GenerateAccessLogs(in)
	}
}

func (d *AmplifyDouble) GetApp(i0 *amplify.GetAppInput) (r0 *amplify.GetAppOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApp", i0)
	r0, _ = returns[0].(*amplify.GetAppOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) GetAppRequest(i0 *amplify.GetAppInput) (r0 *request.Request, r1 *amplify.GetAppOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAppRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*amplify.GetAppOutput)
	return
}

func (d *AmplifyDouble) GetAppWithContext(i0 context.Context, i1 *amplify.GetAppInput, i2 ...request.Option) (r0 *amplify.GetAppOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAppWithContext", i0, i1, i2)
	r0, _ = returns[0].(*amplify.GetAppOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) fakeGetAppWithContext(ctx context.Context, in *amplify.GetAppInput, _ ...request.Option) (*amplify.GetAppOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetApp cancelled", ctx.Err())
	default:
		return d.GetApp(in)
	}
}

func (d *AmplifyDouble) GetArtifactUrl(i0 *amplify.GetArtifactUrlInput) (r0 *amplify.GetArtifactUrlOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetArtifactUrl", i0)
	r0, _ = returns[0].(*amplify.GetArtifactUrlOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) GetArtifactUrlRequest(i0 *amplify.GetArtifactUrlInput) (r0 *request.Request, r1 *amplify.GetArtifactUrlOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetArtifactUrlRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*amplify.GetArtifactUrlOutput)
	return
}

func (d *AmplifyDouble) GetArtifactUrlWithContext(i0 context.Context, i1 *amplify.GetArtifactUrlInput, i2 ...request.Option) (r0 *amplify.GetArtifactUrlOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetArtifactUrlWithContext", i0, i1, i2)
	r0, _ = returns[0].(*amplify.GetArtifactUrlOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) fakeGetArtifactUrlWithContext(ctx context.Context, in *amplify.GetArtifactUrlInput, _ ...request.Option) (*amplify.GetArtifactUrlOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetArtifactUrl cancelled", ctx.Err())
	default:
		return d.GetArtifactUrl(in)
	}
}

func (d *AmplifyDouble) GetBackendEnvironment(i0 *amplify.GetBackendEnvironmentInput) (r0 *amplify.GetBackendEnvironmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBackendEnvironment", i0)
	r0, _ = returns[0].(*amplify.GetBackendEnvironmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) GetBackendEnvironmentRequest(i0 *amplify.GetBackendEnvironmentInput) (r0 *request.Request, r1 *amplify.GetBackendEnvironmentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBackendEnvironmentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*amplify.GetBackendEnvironmentOutput)
	return
}

func (d *AmplifyDouble) GetBackendEnvironmentWithContext(i0 context.Context, i1 *amplify.GetBackendEnvironmentInput, i2 ...request.Option) (r0 *amplify.GetBackendEnvironmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBackendEnvironmentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*amplify.GetBackendEnvironmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) fakeGetBackendEnvironmentWithContext(ctx context.Context, in *amplify.GetBackendEnvironmentInput, _ ...request.Option) (*amplify.GetBackendEnvironmentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBackendEnvironment cancelled", ctx.Err())
	default:
		return d.GetBackendEnvironment(in)
	}
}

func (d *AmplifyDouble) GetBranch(i0 *amplify.GetBranchInput) (r0 *amplify.GetBranchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBranch", i0)
	r0, _ = returns[0].(*amplify.GetBranchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) GetBranchRequest(i0 *amplify.GetBranchInput) (r0 *request.Request, r1 *amplify.GetBranchOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBranchRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*amplify.GetBranchOutput)
	return
}

func (d *AmplifyDouble) GetBranchWithContext(i0 context.Context, i1 *amplify.GetBranchInput, i2 ...request.Option) (r0 *amplify.GetBranchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBranchWithContext", i0, i1, i2)
	r0, _ = returns[0].(*amplify.GetBranchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) fakeGetBranchWithContext(ctx context.Context, in *amplify.GetBranchInput, _ ...request.Option) (*amplify.GetBranchOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBranch cancelled", ctx.Err())
	default:
		return d.GetBranch(in)
	}
}

func (d *AmplifyDouble) GetDomainAssociation(i0 *amplify.GetDomainAssociationInput) (r0 *amplify.GetDomainAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDomainAssociation", i0)
	r0, _ = returns[0].(*amplify.GetDomainAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) GetDomainAssociationRequest(i0 *amplify.GetDomainAssociationInput) (r0 *request.Request, r1 *amplify.GetDomainAssociationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDomainAssociationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*amplify.GetDomainAssociationOutput)
	return
}

func (d *AmplifyDouble) GetDomainAssociationWithContext(i0 context.Context, i1 *amplify.GetDomainAssociationInput, i2 ...request.Option) (r0 *amplify.GetDomainAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDomainAssociationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*amplify.GetDomainAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) fakeGetDomainAssociationWithContext(ctx context.Context, in *amplify.GetDomainAssociationInput, _ ...request.Option) (*amplify.GetDomainAssociationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDomainAssociation cancelled", ctx.Err())
	default:
		return d.GetDomainAssociation(in)
	}
}

func (d *AmplifyDouble) GetJob(i0 *amplify.GetJobInput) (r0 *amplify.GetJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJob", i0)
	r0, _ = returns[0].(*amplify.GetJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) GetJobRequest(i0 *amplify.GetJobInput) (r0 *request.Request, r1 *amplify.GetJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*amplify.GetJobOutput)
	return
}

func (d *AmplifyDouble) GetJobWithContext(i0 context.Context, i1 *amplify.GetJobInput, i2 ...request.Option) (r0 *amplify.GetJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*amplify.GetJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) fakeGetJobWithContext(ctx context.Context, in *amplify.GetJobInput, _ ...request.Option) (*amplify.GetJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetJob cancelled", ctx.Err())
	default:
		return d.GetJob(in)
	}
}

func (d *AmplifyDouble) GetWebhook(i0 *amplify.GetWebhookInput) (r0 *amplify.GetWebhookOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetWebhook", i0)
	r0, _ = returns[0].(*amplify.GetWebhookOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) GetWebhookRequest(i0 *amplify.GetWebhookInput) (r0 *request.Request, r1 *amplify.GetWebhookOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetWebhookRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*amplify.GetWebhookOutput)
	return
}

func (d *AmplifyDouble) GetWebhookWithContext(i0 context.Context, i1 *amplify.GetWebhookInput, i2 ...request.Option) (r0 *amplify.GetWebhookOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetWebhookWithContext", i0, i1, i2)
	r0, _ = returns[0].(*amplify.GetWebhookOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) fakeGetWebhookWithContext(ctx context.Context, in *amplify.GetWebhookInput, _ ...request.Option) (*amplify.GetWebhookOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetWebhook cancelled", ctx.Err())
	default:
		return d.GetWebhook(in)
	}
}

func (d *AmplifyDouble) ListApps(i0 *amplify.ListAppsInput) (r0 *amplify.ListAppsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApps", i0)
	r0, _ = returns[0].(*amplify.ListAppsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) ListAppsRequest(i0 *amplify.ListAppsInput) (r0 *request.Request, r1 *amplify.ListAppsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAppsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*amplify.ListAppsOutput)
	return
}

func (d *AmplifyDouble) ListAppsWithContext(i0 context.Context, i1 *amplify.ListAppsInput, i2 ...request.Option) (r0 *amplify.ListAppsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAppsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*amplify.ListAppsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) fakeListAppsWithContext(ctx context.Context, in *amplify.ListAppsInput, _ ...request.Option) (*amplify.ListAppsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListApps cancelled", ctx.Err())
	default:
		return d.ListApps(in)
	}
}

func (d *AmplifyDouble) ListArtifacts(i0 *amplify.ListArtifactsInput) (r0 *amplify.ListArtifactsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListArtifacts", i0)
	r0, _ = returns[0].(*amplify.ListArtifactsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) ListArtifactsRequest(i0 *amplify.ListArtifactsInput) (r0 *request.Request, r1 *amplify.ListArtifactsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListArtifactsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*amplify.ListArtifactsOutput)
	return
}

func (d *AmplifyDouble) ListArtifactsWithContext(i0 context.Context, i1 *amplify.ListArtifactsInput, i2 ...request.Option) (r0 *amplify.ListArtifactsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListArtifactsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*amplify.ListArtifactsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) fakeListArtifactsWithContext(ctx context.Context, in *amplify.ListArtifactsInput, _ ...request.Option) (*amplify.ListArtifactsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListArtifacts cancelled", ctx.Err())
	default:
		return d.ListArtifacts(in)
	}
}

func (d *AmplifyDouble) ListBackendEnvironments(i0 *amplify.ListBackendEnvironmentsInput) (r0 *amplify.ListBackendEnvironmentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBackendEnvironments", i0)
	r0, _ = returns[0].(*amplify.ListBackendEnvironmentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) ListBackendEnvironmentsRequest(i0 *amplify.ListBackendEnvironmentsInput) (r0 *request.Request, r1 *amplify.ListBackendEnvironmentsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBackendEnvironmentsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*amplify.ListBackendEnvironmentsOutput)
	return
}

func (d *AmplifyDouble) ListBackendEnvironmentsWithContext(i0 context.Context, i1 *amplify.ListBackendEnvironmentsInput, i2 ...request.Option) (r0 *amplify.ListBackendEnvironmentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBackendEnvironmentsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*amplify.ListBackendEnvironmentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) fakeListBackendEnvironmentsWithContext(ctx context.Context, in *amplify.ListBackendEnvironmentsInput, _ ...request.Option) (*amplify.ListBackendEnvironmentsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListBackendEnvironments cancelled", ctx.Err())
	default:
		return d.ListBackendEnvironments(in)
	}
}

func (d *AmplifyDouble) ListBranches(i0 *amplify.ListBranchesInput) (r0 *amplify.ListBranchesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBranches", i0)
	r0, _ = returns[0].(*amplify.ListBranchesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) ListBranchesRequest(i0 *amplify.ListBranchesInput) (r0 *request.Request, r1 *amplify.ListBranchesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBranchesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*amplify.ListBranchesOutput)
	return
}

func (d *AmplifyDouble) ListBranchesWithContext(i0 context.Context, i1 *amplify.ListBranchesInput, i2 ...request.Option) (r0 *amplify.ListBranchesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBranchesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*amplify.ListBranchesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) fakeListBranchesWithContext(ctx context.Context, in *amplify.ListBranchesInput, _ ...request.Option) (*amplify.ListBranchesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListBranches cancelled", ctx.Err())
	default:
		return d.ListBranches(in)
	}
}

func (d *AmplifyDouble) ListDomainAssociations(i0 *amplify.ListDomainAssociationsInput) (r0 *amplify.ListDomainAssociationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDomainAssociations", i0)
	r0, _ = returns[0].(*amplify.ListDomainAssociationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) ListDomainAssociationsRequest(i0 *amplify.ListDomainAssociationsInput) (r0 *request.Request, r1 *amplify.ListDomainAssociationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDomainAssociationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*amplify.ListDomainAssociationsOutput)
	return
}

func (d *AmplifyDouble) ListDomainAssociationsWithContext(i0 context.Context, i1 *amplify.ListDomainAssociationsInput, i2 ...request.Option) (r0 *amplify.ListDomainAssociationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDomainAssociationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*amplify.ListDomainAssociationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) fakeListDomainAssociationsWithContext(ctx context.Context, in *amplify.ListDomainAssociationsInput, _ ...request.Option) (*amplify.ListDomainAssociationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDomainAssociations cancelled", ctx.Err())
	default:
		return d.ListDomainAssociations(in)
	}
}

func (d *AmplifyDouble) ListJobs(i0 *amplify.ListJobsInput) (r0 *amplify.ListJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobs", i0)
	r0, _ = returns[0].(*amplify.ListJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) ListJobsRequest(i0 *amplify.ListJobsInput) (r0 *request.Request, r1 *amplify.ListJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*amplify.ListJobsOutput)
	return
}

func (d *AmplifyDouble) ListJobsWithContext(i0 context.Context, i1 *amplify.ListJobsInput, i2 ...request.Option) (r0 *amplify.ListJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*amplify.ListJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) fakeListJobsWithContext(ctx context.Context, in *amplify.ListJobsInput, _ ...request.Option) (*amplify.ListJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListJobs cancelled", ctx.Err())
	default:
		return d.ListJobs(in)
	}
}

func (d *AmplifyDouble) ListTagsForResource(i0 *amplify.ListTagsForResourceInput) (r0 *amplify.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*amplify.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) ListTagsForResourceRequest(i0 *amplify.ListTagsForResourceInput) (r0 *request.Request, r1 *amplify.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*amplify.ListTagsForResourceOutput)
	return
}

func (d *AmplifyDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *amplify.ListTagsForResourceInput, i2 ...request.Option) (r0 *amplify.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*amplify.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *amplify.ListTagsForResourceInput, _ ...request.Option) (*amplify.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *AmplifyDouble) ListWebhooks(i0 *amplify.ListWebhooksInput) (r0 *amplify.ListWebhooksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWebhooks", i0)
	r0, _ = returns[0].(*amplify.ListWebhooksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) ListWebhooksRequest(i0 *amplify.ListWebhooksInput) (r0 *request.Request, r1 *amplify.ListWebhooksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWebhooksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*amplify.ListWebhooksOutput)
	return
}

func (d *AmplifyDouble) ListWebhooksWithContext(i0 context.Context, i1 *amplify.ListWebhooksInput, i2 ...request.Option) (r0 *amplify.ListWebhooksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWebhooksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*amplify.ListWebhooksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) fakeListWebhooksWithContext(ctx context.Context, in *amplify.ListWebhooksInput, _ ...request.Option) (*amplify.ListWebhooksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListWebhooks cancelled", ctx.Err())
	default:
		return d.ListWebhooks(in)
	}
}

func (d *AmplifyDouble) StartDeployment(i0 *amplify.StartDeploymentInput) (r0 *amplify.StartDeploymentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartDeployment", i0)
	r0, _ = returns[0].(*amplify.StartDeploymentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) StartDeploymentRequest(i0 *amplify.StartDeploymentInput) (r0 *request.Request, r1 *amplify.StartDeploymentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartDeploymentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*amplify.StartDeploymentOutput)
	return
}

func (d *AmplifyDouble) StartDeploymentWithContext(i0 context.Context, i1 *amplify.StartDeploymentInput, i2 ...request.Option) (r0 *amplify.StartDeploymentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartDeploymentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*amplify.StartDeploymentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) fakeStartDeploymentWithContext(ctx context.Context, in *amplify.StartDeploymentInput, _ ...request.Option) (*amplify.StartDeploymentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartDeployment cancelled", ctx.Err())
	default:
		return d.StartDeployment(in)
	}
}

func (d *AmplifyDouble) StartJob(i0 *amplify.StartJobInput) (r0 *amplify.StartJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartJob", i0)
	r0, _ = returns[0].(*amplify.StartJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) StartJobRequest(i0 *amplify.StartJobInput) (r0 *request.Request, r1 *amplify.StartJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*amplify.StartJobOutput)
	return
}

func (d *AmplifyDouble) StartJobWithContext(i0 context.Context, i1 *amplify.StartJobInput, i2 ...request.Option) (r0 *amplify.StartJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*amplify.StartJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) fakeStartJobWithContext(ctx context.Context, in *amplify.StartJobInput, _ ...request.Option) (*amplify.StartJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartJob cancelled", ctx.Err())
	default:
		return d.StartJob(in)
	}
}

func (d *AmplifyDouble) StopJob(i0 *amplify.StopJobInput) (r0 *amplify.StopJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopJob", i0)
	r0, _ = returns[0].(*amplify.StopJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) StopJobRequest(i0 *amplify.StopJobInput) (r0 *request.Request, r1 *amplify.StopJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*amplify.StopJobOutput)
	return
}

func (d *AmplifyDouble) StopJobWithContext(i0 context.Context, i1 *amplify.StopJobInput, i2 ...request.Option) (r0 *amplify.StopJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*amplify.StopJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) fakeStopJobWithContext(ctx context.Context, in *amplify.StopJobInput, _ ...request.Option) (*amplify.StopJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopJob cancelled", ctx.Err())
	default:
		return d.StopJob(in)
	}
}

func (d *AmplifyDouble) TagResource(i0 *amplify.TagResourceInput) (r0 *amplify.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*amplify.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) TagResourceRequest(i0 *amplify.TagResourceInput) (r0 *request.Request, r1 *amplify.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*amplify.TagResourceOutput)
	return
}

func (d *AmplifyDouble) TagResourceWithContext(i0 context.Context, i1 *amplify.TagResourceInput, i2 ...request.Option) (r0 *amplify.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*amplify.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) fakeTagResourceWithContext(ctx context.Context, in *amplify.TagResourceInput, _ ...request.Option) (*amplify.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *AmplifyDouble) UntagResource(i0 *amplify.UntagResourceInput) (r0 *amplify.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*amplify.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) UntagResourceRequest(i0 *amplify.UntagResourceInput) (r0 *request.Request, r1 *amplify.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*amplify.UntagResourceOutput)
	return
}

func (d *AmplifyDouble) UntagResourceWithContext(i0 context.Context, i1 *amplify.UntagResourceInput, i2 ...request.Option) (r0 *amplify.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*amplify.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) fakeUntagResourceWithContext(ctx context.Context, in *amplify.UntagResourceInput, _ ...request.Option) (*amplify.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *AmplifyDouble) UpdateApp(i0 *amplify.UpdateAppInput) (r0 *amplify.UpdateAppOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApp", i0)
	r0, _ = returns[0].(*amplify.UpdateAppOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) UpdateAppRequest(i0 *amplify.UpdateAppInput) (r0 *request.Request, r1 *amplify.UpdateAppOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAppRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*amplify.UpdateAppOutput)
	return
}

func (d *AmplifyDouble) UpdateAppWithContext(i0 context.Context, i1 *amplify.UpdateAppInput, i2 ...request.Option) (r0 *amplify.UpdateAppOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAppWithContext", i0, i1, i2)
	r0, _ = returns[0].(*amplify.UpdateAppOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) fakeUpdateAppWithContext(ctx context.Context, in *amplify.UpdateAppInput, _ ...request.Option) (*amplify.UpdateAppOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateApp cancelled", ctx.Err())
	default:
		return d.UpdateApp(in)
	}
}

func (d *AmplifyDouble) UpdateBranch(i0 *amplify.UpdateBranchInput) (r0 *amplify.UpdateBranchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateBranch", i0)
	r0, _ = returns[0].(*amplify.UpdateBranchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) UpdateBranchRequest(i0 *amplify.UpdateBranchInput) (r0 *request.Request, r1 *amplify.UpdateBranchOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateBranchRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*amplify.UpdateBranchOutput)
	return
}

func (d *AmplifyDouble) UpdateBranchWithContext(i0 context.Context, i1 *amplify.UpdateBranchInput, i2 ...request.Option) (r0 *amplify.UpdateBranchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateBranchWithContext", i0, i1, i2)
	r0, _ = returns[0].(*amplify.UpdateBranchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) fakeUpdateBranchWithContext(ctx context.Context, in *amplify.UpdateBranchInput, _ ...request.Option) (*amplify.UpdateBranchOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateBranch cancelled", ctx.Err())
	default:
		return d.UpdateBranch(in)
	}
}

func (d *AmplifyDouble) UpdateDomainAssociation(i0 *amplify.UpdateDomainAssociationInput) (r0 *amplify.UpdateDomainAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDomainAssociation", i0)
	r0, _ = returns[0].(*amplify.UpdateDomainAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) UpdateDomainAssociationRequest(i0 *amplify.UpdateDomainAssociationInput) (r0 *request.Request, r1 *amplify.UpdateDomainAssociationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDomainAssociationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*amplify.UpdateDomainAssociationOutput)
	return
}

func (d *AmplifyDouble) UpdateDomainAssociationWithContext(i0 context.Context, i1 *amplify.UpdateDomainAssociationInput, i2 ...request.Option) (r0 *amplify.UpdateDomainAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDomainAssociationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*amplify.UpdateDomainAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) fakeUpdateDomainAssociationWithContext(ctx context.Context, in *amplify.UpdateDomainAssociationInput, _ ...request.Option) (*amplify.UpdateDomainAssociationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDomainAssociation cancelled", ctx.Err())
	default:
		return d.UpdateDomainAssociation(in)
	}
}

func (d *AmplifyDouble) UpdateWebhook(i0 *amplify.UpdateWebhookInput) (r0 *amplify.UpdateWebhookOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateWebhook", i0)
	r0, _ = returns[0].(*amplify.UpdateWebhookOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) UpdateWebhookRequest(i0 *amplify.UpdateWebhookInput) (r0 *request.Request, r1 *amplify.UpdateWebhookOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateWebhookRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*amplify.UpdateWebhookOutput)
	return
}

func (d *AmplifyDouble) UpdateWebhookWithContext(i0 context.Context, i1 *amplify.UpdateWebhookInput, i2 ...request.Option) (r0 *amplify.UpdateWebhookOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateWebhookWithContext", i0, i1, i2)
	r0, _ = returns[0].(*amplify.UpdateWebhookOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AmplifyDouble) fakeUpdateWebhookWithContext(ctx context.Context, in *amplify.UpdateWebhookInput, _ ...request.Option) (*amplify.UpdateWebhookOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateWebhook cancelled", ctx.Err())
	default:
		return d.UpdateWebhook(in)
	}
}
