// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:15:39+11:00

// Package xraydouble provides a TestDouble implementation of xrayiface.XRayAPI
package xraydouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/xray"
	"github.com/aws/aws-sdk-go/service/xray/xrayiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// XRayDouble is TestDouble for xrayiface.XRayAPI
type XRayDouble struct {
	xrayiface.XRayAPI
	*awsdouble.AWSTestDouble
}

// Constructor for XRayDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *XRayDouble {
	result := &XRayDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*xrayiface.XRayAPI)(nil), configurators...)
	return result
}

func (d *XRayDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *XRayDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "BatchGetTracesPages":
		return m.Fake(d.fakeBatchGetTracesPages)

	case "BatchGetTracesPagesWithContext":
		return m.Fake(d.fakeBatchGetTracesPagesWithContext)

	case "BatchGetTracesWithContext":
		return m.Fake(d.fakeBatchGetTracesWithContext)

	case "CreateGroupWithContext":
		return m.Fake(d.fakeCreateGroupWithContext)

	case "CreateSamplingRuleWithContext":
		return m.Fake(d.fakeCreateSamplingRuleWithContext)

	case "DeleteGroupWithContext":
		return m.Fake(d.fakeDeleteGroupWithContext)

	case "DeleteSamplingRuleWithContext":
		return m.Fake(d.fakeDeleteSamplingRuleWithContext)

	case "GetEncryptionConfigWithContext":
		return m.Fake(d.fakeGetEncryptionConfigWithContext)

	case "GetGroupWithContext":
		return m.Fake(d.fakeGetGroupWithContext)

	case "GetGroupsPages":
		return m.Fake(d.fakeGetGroupsPages)

	case "GetGroupsPagesWithContext":
		return m.Fake(d.fakeGetGroupsPagesWithContext)

	case "GetGroupsWithContext":
		return m.Fake(d.fakeGetGroupsWithContext)

	case "GetSamplingRulesPages":
		return m.Fake(d.fakeGetSamplingRulesPages)

	case "GetSamplingRulesPagesWithContext":
		return m.Fake(d.fakeGetSamplingRulesPagesWithContext)

	case "GetSamplingRulesWithContext":
		return m.Fake(d.fakeGetSamplingRulesWithContext)

	case "GetSamplingStatisticSummariesPages":
		return m.Fake(d.fakeGetSamplingStatisticSummariesPages)

	case "GetSamplingStatisticSummariesPagesWithContext":
		return m.Fake(d.fakeGetSamplingStatisticSummariesPagesWithContext)

	case "GetSamplingStatisticSummariesWithContext":
		return m.Fake(d.fakeGetSamplingStatisticSummariesWithContext)

	case "GetSamplingTargetsWithContext":
		return m.Fake(d.fakeGetSamplingTargetsWithContext)

	case "GetServiceGraphPages":
		return m.Fake(d.fakeGetServiceGraphPages)

	case "GetServiceGraphPagesWithContext":
		return m.Fake(d.fakeGetServiceGraphPagesWithContext)

	case "GetServiceGraphWithContext":
		return m.Fake(d.fakeGetServiceGraphWithContext)

	case "GetTimeSeriesServiceStatisticsPages":
		return m.Fake(d.fakeGetTimeSeriesServiceStatisticsPages)

	case "GetTimeSeriesServiceStatisticsPagesWithContext":
		return m.Fake(d.fakeGetTimeSeriesServiceStatisticsPagesWithContext)

	case "GetTimeSeriesServiceStatisticsWithContext":
		return m.Fake(d.fakeGetTimeSeriesServiceStatisticsWithContext)

	case "GetTraceGraphPages":
		return m.Fake(d.fakeGetTraceGraphPages)

	case "GetTraceGraphPagesWithContext":
		return m.Fake(d.fakeGetTraceGraphPagesWithContext)

	case "GetTraceGraphWithContext":
		return m.Fake(d.fakeGetTraceGraphWithContext)

	case "GetTraceSummariesPages":
		return m.Fake(d.fakeGetTraceSummariesPages)

	case "GetTraceSummariesPagesWithContext":
		return m.Fake(d.fakeGetTraceSummariesPagesWithContext)

	case "GetTraceSummariesWithContext":
		return m.Fake(d.fakeGetTraceSummariesWithContext)

	case "PutEncryptionConfigWithContext":
		return m.Fake(d.fakePutEncryptionConfigWithContext)

	case "PutTelemetryRecordsWithContext":
		return m.Fake(d.fakePutTelemetryRecordsWithContext)

	case "PutTraceSegmentsWithContext":
		return m.Fake(d.fakePutTraceSegmentsWithContext)

	case "UpdateGroupWithContext":
		return m.Fake(d.fakeUpdateGroupWithContext)

	case "UpdateSamplingRuleWithContext":
		return m.Fake(d.fakeUpdateSamplingRuleWithContext)

	default:
		return nil
	}
}

func (d *XRayDouble) BatchGetTraces(i0 *xray.BatchGetTracesInput) (r0 *xray.BatchGetTracesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetTraces", i0)
	r0, _ = returns[0].(*xray.BatchGetTracesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) BatchGetTracesPages(i0 *xray.BatchGetTracesInput, i1 func(*xray.BatchGetTracesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetTracesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *XRayDouble) fakeBatchGetTracesPages(in *xray.BatchGetTracesInput, pager func(*xray.BatchGetTracesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("BatchGetTraces", paginators, in, pager)
}

func (d *XRayDouble) BatchGetTracesPagesWithContext(i0 context.Context, i1 *xray.BatchGetTracesInput, i2 func(*xray.BatchGetTracesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetTracesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *XRayDouble) fakeBatchGetTracesPagesWithContext(ctx context.Context, in *xray.BatchGetTracesInput, pager func(*xray.BatchGetTracesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("BatchGetTraces", paginators, ctx, in, pager, options...)
}

func (d *XRayDouble) BatchGetTracesRequest(i0 *xray.BatchGetTracesInput) (r0 *request.Request, r1 *xray.BatchGetTracesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetTracesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*xray.BatchGetTracesOutput)
	return
}

func (d *XRayDouble) BatchGetTracesWithContext(i0 context.Context, i1 *xray.BatchGetTracesInput, i2 ...request.Option) (r0 *xray.BatchGetTracesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetTracesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*xray.BatchGetTracesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) fakeBatchGetTracesWithContext(ctx context.Context, in *xray.BatchGetTracesInput, _ ...request.Option) (*xray.BatchGetTracesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchGetTraces cancelled", ctx.Err())
	default:
		return d.BatchGetTraces(in)
	}
}

func (d *XRayDouble) CreateGroup(i0 *xray.CreateGroupInput) (r0 *xray.CreateGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGroup", i0)
	r0, _ = returns[0].(*xray.CreateGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) CreateGroupRequest(i0 *xray.CreateGroupInput) (r0 *request.Request, r1 *xray.CreateGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*xray.CreateGroupOutput)
	return
}

func (d *XRayDouble) CreateGroupWithContext(i0 context.Context, i1 *xray.CreateGroupInput, i2 ...request.Option) (r0 *xray.CreateGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*xray.CreateGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) fakeCreateGroupWithContext(ctx context.Context, in *xray.CreateGroupInput, _ ...request.Option) (*xray.CreateGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateGroup cancelled", ctx.Err())
	default:
		return d.CreateGroup(in)
	}
}

func (d *XRayDouble) CreateSamplingRule(i0 *xray.CreateSamplingRuleInput) (r0 *xray.CreateSamplingRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSamplingRule", i0)
	r0, _ = returns[0].(*xray.CreateSamplingRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) CreateSamplingRuleRequest(i0 *xray.CreateSamplingRuleInput) (r0 *request.Request, r1 *xray.CreateSamplingRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSamplingRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*xray.CreateSamplingRuleOutput)
	return
}

func (d *XRayDouble) CreateSamplingRuleWithContext(i0 context.Context, i1 *xray.CreateSamplingRuleInput, i2 ...request.Option) (r0 *xray.CreateSamplingRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSamplingRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*xray.CreateSamplingRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) fakeCreateSamplingRuleWithContext(ctx context.Context, in *xray.CreateSamplingRuleInput, _ ...request.Option) (*xray.CreateSamplingRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateSamplingRule cancelled", ctx.Err())
	default:
		return d.CreateSamplingRule(in)
	}
}

func (d *XRayDouble) DeleteGroup(i0 *xray.DeleteGroupInput) (r0 *xray.DeleteGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGroup", i0)
	r0, _ = returns[0].(*xray.DeleteGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) DeleteGroupRequest(i0 *xray.DeleteGroupInput) (r0 *request.Request, r1 *xray.DeleteGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*xray.DeleteGroupOutput)
	return
}

func (d *XRayDouble) DeleteGroupWithContext(i0 context.Context, i1 *xray.DeleteGroupInput, i2 ...request.Option) (r0 *xray.DeleteGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*xray.DeleteGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) fakeDeleteGroupWithContext(ctx context.Context, in *xray.DeleteGroupInput, _ ...request.Option) (*xray.DeleteGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteGroup cancelled", ctx.Err())
	default:
		return d.DeleteGroup(in)
	}
}

func (d *XRayDouble) DeleteSamplingRule(i0 *xray.DeleteSamplingRuleInput) (r0 *xray.DeleteSamplingRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSamplingRule", i0)
	r0, _ = returns[0].(*xray.DeleteSamplingRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) DeleteSamplingRuleRequest(i0 *xray.DeleteSamplingRuleInput) (r0 *request.Request, r1 *xray.DeleteSamplingRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSamplingRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*xray.DeleteSamplingRuleOutput)
	return
}

func (d *XRayDouble) DeleteSamplingRuleWithContext(i0 context.Context, i1 *xray.DeleteSamplingRuleInput, i2 ...request.Option) (r0 *xray.DeleteSamplingRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSamplingRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*xray.DeleteSamplingRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) fakeDeleteSamplingRuleWithContext(ctx context.Context, in *xray.DeleteSamplingRuleInput, _ ...request.Option) (*xray.DeleteSamplingRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteSamplingRule cancelled", ctx.Err())
	default:
		return d.DeleteSamplingRule(in)
	}
}

func (d *XRayDouble) GetEncryptionConfig(i0 *xray.GetEncryptionConfigInput) (r0 *xray.GetEncryptionConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetEncryptionConfig", i0)
	r0, _ = returns[0].(*xray.GetEncryptionConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) GetEncryptionConfigRequest(i0 *xray.GetEncryptionConfigInput) (r0 *request.Request, r1 *xray.GetEncryptionConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetEncryptionConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*xray.GetEncryptionConfigOutput)
	return
}

func (d *XRayDouble) GetEncryptionConfigWithContext(i0 context.Context, i1 *xray.GetEncryptionConfigInput, i2 ...request.Option) (r0 *xray.GetEncryptionConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetEncryptionConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*xray.GetEncryptionConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) fakeGetEncryptionConfigWithContext(ctx context.Context, in *xray.GetEncryptionConfigInput, _ ...request.Option) (*xray.GetEncryptionConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetEncryptionConfig cancelled", ctx.Err())
	default:
		return d.GetEncryptionConfig(in)
	}
}

func (d *XRayDouble) GetGroup(i0 *xray.GetGroupInput) (r0 *xray.GetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGroup", i0)
	r0, _ = returns[0].(*xray.GetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) GetGroupRequest(i0 *xray.GetGroupInput) (r0 *request.Request, r1 *xray.GetGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*xray.GetGroupOutput)
	return
}

func (d *XRayDouble) GetGroupWithContext(i0 context.Context, i1 *xray.GetGroupInput, i2 ...request.Option) (r0 *xray.GetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*xray.GetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) fakeGetGroupWithContext(ctx context.Context, in *xray.GetGroupInput, _ ...request.Option) (*xray.GetGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetGroup cancelled", ctx.Err())
	default:
		return d.GetGroup(in)
	}
}

func (d *XRayDouble) GetGroups(i0 *xray.GetGroupsInput) (r0 *xray.GetGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGroups", i0)
	r0, _ = returns[0].(*xray.GetGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) GetGroupsPages(i0 *xray.GetGroupsInput, i1 func(*xray.GetGroupsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGroupsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *XRayDouble) fakeGetGroupsPages(in *xray.GetGroupsInput, pager func(*xray.GetGroupsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetGroups", paginators, in, pager)
}

func (d *XRayDouble) GetGroupsPagesWithContext(i0 context.Context, i1 *xray.GetGroupsInput, i2 func(*xray.GetGroupsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGroupsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *XRayDouble) fakeGetGroupsPagesWithContext(ctx context.Context, in *xray.GetGroupsInput, pager func(*xray.GetGroupsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetGroups", paginators, ctx, in, pager, options...)
}

func (d *XRayDouble) GetGroupsRequest(i0 *xray.GetGroupsInput) (r0 *request.Request, r1 *xray.GetGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*xray.GetGroupsOutput)
	return
}

func (d *XRayDouble) GetGroupsWithContext(i0 context.Context, i1 *xray.GetGroupsInput, i2 ...request.Option) (r0 *xray.GetGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*xray.GetGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) fakeGetGroupsWithContext(ctx context.Context, in *xray.GetGroupsInput, _ ...request.Option) (*xray.GetGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetGroups cancelled", ctx.Err())
	default:
		return d.GetGroups(in)
	}
}

func (d *XRayDouble) GetSamplingRules(i0 *xray.GetSamplingRulesInput) (r0 *xray.GetSamplingRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSamplingRules", i0)
	r0, _ = returns[0].(*xray.GetSamplingRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) GetSamplingRulesPages(i0 *xray.GetSamplingRulesInput, i1 func(*xray.GetSamplingRulesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSamplingRulesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *XRayDouble) fakeGetSamplingRulesPages(in *xray.GetSamplingRulesInput, pager func(*xray.GetSamplingRulesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetSamplingRules", paginators, in, pager)
}

func (d *XRayDouble) GetSamplingRulesPagesWithContext(i0 context.Context, i1 *xray.GetSamplingRulesInput, i2 func(*xray.GetSamplingRulesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSamplingRulesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *XRayDouble) fakeGetSamplingRulesPagesWithContext(ctx context.Context, in *xray.GetSamplingRulesInput, pager func(*xray.GetSamplingRulesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetSamplingRules", paginators, ctx, in, pager, options...)
}

func (d *XRayDouble) GetSamplingRulesRequest(i0 *xray.GetSamplingRulesInput) (r0 *request.Request, r1 *xray.GetSamplingRulesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSamplingRulesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*xray.GetSamplingRulesOutput)
	return
}

func (d *XRayDouble) GetSamplingRulesWithContext(i0 context.Context, i1 *xray.GetSamplingRulesInput, i2 ...request.Option) (r0 *xray.GetSamplingRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSamplingRulesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*xray.GetSamplingRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) fakeGetSamplingRulesWithContext(ctx context.Context, in *xray.GetSamplingRulesInput, _ ...request.Option) (*xray.GetSamplingRulesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetSamplingRules cancelled", ctx.Err())
	default:
		return d.GetSamplingRules(in)
	}
}

func (d *XRayDouble) GetSamplingStatisticSummaries(i0 *xray.GetSamplingStatisticSummariesInput) (r0 *xray.GetSamplingStatisticSummariesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSamplingStatisticSummaries", i0)
	r0, _ = returns[0].(*xray.GetSamplingStatisticSummariesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) GetSamplingStatisticSummariesPages(i0 *xray.GetSamplingStatisticSummariesInput, i1 func(*xray.GetSamplingStatisticSummariesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSamplingStatisticSummariesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *XRayDouble) fakeGetSamplingStatisticSummariesPages(in *xray.GetSamplingStatisticSummariesInput, pager func(*xray.GetSamplingStatisticSummariesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetSamplingStatisticSummaries", paginators, in, pager)
}

func (d *XRayDouble) GetSamplingStatisticSummariesPagesWithContext(i0 context.Context, i1 *xray.GetSamplingStatisticSummariesInput, i2 func(*xray.GetSamplingStatisticSummariesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSamplingStatisticSummariesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *XRayDouble) fakeGetSamplingStatisticSummariesPagesWithContext(ctx context.Context, in *xray.GetSamplingStatisticSummariesInput, pager func(*xray.GetSamplingStatisticSummariesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetSamplingStatisticSummaries", paginators, ctx, in, pager, options...)
}

func (d *XRayDouble) GetSamplingStatisticSummariesRequest(i0 *xray.GetSamplingStatisticSummariesInput) (r0 *request.Request, r1 *xray.GetSamplingStatisticSummariesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSamplingStatisticSummariesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*xray.GetSamplingStatisticSummariesOutput)
	return
}

func (d *XRayDouble) GetSamplingStatisticSummariesWithContext(i0 context.Context, i1 *xray.GetSamplingStatisticSummariesInput, i2 ...request.Option) (r0 *xray.GetSamplingStatisticSummariesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSamplingStatisticSummariesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*xray.GetSamplingStatisticSummariesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) fakeGetSamplingStatisticSummariesWithContext(ctx context.Context, in *xray.GetSamplingStatisticSummariesInput, _ ...request.Option) (*xray.GetSamplingStatisticSummariesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetSamplingStatisticSummaries cancelled", ctx.Err())
	default:
		return d.GetSamplingStatisticSummaries(in)
	}
}

func (d *XRayDouble) GetSamplingTargets(i0 *xray.GetSamplingTargetsInput) (r0 *xray.GetSamplingTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSamplingTargets", i0)
	r0, _ = returns[0].(*xray.GetSamplingTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) GetSamplingTargetsRequest(i0 *xray.GetSamplingTargetsInput) (r0 *request.Request, r1 *xray.GetSamplingTargetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSamplingTargetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*xray.GetSamplingTargetsOutput)
	return
}

func (d *XRayDouble) GetSamplingTargetsWithContext(i0 context.Context, i1 *xray.GetSamplingTargetsInput, i2 ...request.Option) (r0 *xray.GetSamplingTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSamplingTargetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*xray.GetSamplingTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) fakeGetSamplingTargetsWithContext(ctx context.Context, in *xray.GetSamplingTargetsInput, _ ...request.Option) (*xray.GetSamplingTargetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetSamplingTargets cancelled", ctx.Err())
	default:
		return d.GetSamplingTargets(in)
	}
}

func (d *XRayDouble) GetServiceGraph(i0 *xray.GetServiceGraphInput) (r0 *xray.GetServiceGraphOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetServiceGraph", i0)
	r0, _ = returns[0].(*xray.GetServiceGraphOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) GetServiceGraphPages(i0 *xray.GetServiceGraphInput, i1 func(*xray.GetServiceGraphOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetServiceGraphPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *XRayDouble) fakeGetServiceGraphPages(in *xray.GetServiceGraphInput, pager func(*xray.GetServiceGraphOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetServiceGraph", paginators, in, pager)
}

func (d *XRayDouble) GetServiceGraphPagesWithContext(i0 context.Context, i1 *xray.GetServiceGraphInput, i2 func(*xray.GetServiceGraphOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetServiceGraphPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *XRayDouble) fakeGetServiceGraphPagesWithContext(ctx context.Context, in *xray.GetServiceGraphInput, pager func(*xray.GetServiceGraphOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetServiceGraph", paginators, ctx, in, pager, options...)
}

func (d *XRayDouble) GetServiceGraphRequest(i0 *xray.GetServiceGraphInput) (r0 *request.Request, r1 *xray.GetServiceGraphOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetServiceGraphRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*xray.GetServiceGraphOutput)
	return
}

func (d *XRayDouble) GetServiceGraphWithContext(i0 context.Context, i1 *xray.GetServiceGraphInput, i2 ...request.Option) (r0 *xray.GetServiceGraphOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetServiceGraphWithContext", i0, i1, i2)
	r0, _ = returns[0].(*xray.GetServiceGraphOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) fakeGetServiceGraphWithContext(ctx context.Context, in *xray.GetServiceGraphInput, _ ...request.Option) (*xray.GetServiceGraphOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetServiceGraph cancelled", ctx.Err())
	default:
		return d.GetServiceGraph(in)
	}
}

func (d *XRayDouble) GetTimeSeriesServiceStatistics(i0 *xray.GetTimeSeriesServiceStatisticsInput) (r0 *xray.GetTimeSeriesServiceStatisticsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTimeSeriesServiceStatistics", i0)
	r0, _ = returns[0].(*xray.GetTimeSeriesServiceStatisticsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) GetTimeSeriesServiceStatisticsPages(i0 *xray.GetTimeSeriesServiceStatisticsInput, i1 func(*xray.GetTimeSeriesServiceStatisticsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTimeSeriesServiceStatisticsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *XRayDouble) fakeGetTimeSeriesServiceStatisticsPages(in *xray.GetTimeSeriesServiceStatisticsInput, pager func(*xray.GetTimeSeriesServiceStatisticsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetTimeSeriesServiceStatistics", paginators, in, pager)
}

func (d *XRayDouble) GetTimeSeriesServiceStatisticsPagesWithContext(i0 context.Context, i1 *xray.GetTimeSeriesServiceStatisticsInput, i2 func(*xray.GetTimeSeriesServiceStatisticsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTimeSeriesServiceStatisticsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *XRayDouble) fakeGetTimeSeriesServiceStatisticsPagesWithContext(ctx context.Context, in *xray.GetTimeSeriesServiceStatisticsInput, pager func(*xray.GetTimeSeriesServiceStatisticsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetTimeSeriesServiceStatistics", paginators, ctx, in, pager, options...)
}

func (d *XRayDouble) GetTimeSeriesServiceStatisticsRequest(i0 *xray.GetTimeSeriesServiceStatisticsInput) (r0 *request.Request, r1 *xray.GetTimeSeriesServiceStatisticsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTimeSeriesServiceStatisticsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*xray.GetTimeSeriesServiceStatisticsOutput)
	return
}

func (d *XRayDouble) GetTimeSeriesServiceStatisticsWithContext(i0 context.Context, i1 *xray.GetTimeSeriesServiceStatisticsInput, i2 ...request.Option) (r0 *xray.GetTimeSeriesServiceStatisticsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTimeSeriesServiceStatisticsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*xray.GetTimeSeriesServiceStatisticsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) fakeGetTimeSeriesServiceStatisticsWithContext(ctx context.Context, in *xray.GetTimeSeriesServiceStatisticsInput, _ ...request.Option) (*xray.GetTimeSeriesServiceStatisticsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetTimeSeriesServiceStatistics cancelled", ctx.Err())
	default:
		return d.GetTimeSeriesServiceStatistics(in)
	}
}

func (d *XRayDouble) GetTraceGraph(i0 *xray.GetTraceGraphInput) (r0 *xray.GetTraceGraphOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTraceGraph", i0)
	r0, _ = returns[0].(*xray.GetTraceGraphOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) GetTraceGraphPages(i0 *xray.GetTraceGraphInput, i1 func(*xray.GetTraceGraphOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTraceGraphPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *XRayDouble) fakeGetTraceGraphPages(in *xray.GetTraceGraphInput, pager func(*xray.GetTraceGraphOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetTraceGraph", paginators, in, pager)
}

func (d *XRayDouble) GetTraceGraphPagesWithContext(i0 context.Context, i1 *xray.GetTraceGraphInput, i2 func(*xray.GetTraceGraphOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTraceGraphPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *XRayDouble) fakeGetTraceGraphPagesWithContext(ctx context.Context, in *xray.GetTraceGraphInput, pager func(*xray.GetTraceGraphOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetTraceGraph", paginators, ctx, in, pager, options...)
}

func (d *XRayDouble) GetTraceGraphRequest(i0 *xray.GetTraceGraphInput) (r0 *request.Request, r1 *xray.GetTraceGraphOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTraceGraphRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*xray.GetTraceGraphOutput)
	return
}

func (d *XRayDouble) GetTraceGraphWithContext(i0 context.Context, i1 *xray.GetTraceGraphInput, i2 ...request.Option) (r0 *xray.GetTraceGraphOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTraceGraphWithContext", i0, i1, i2)
	r0, _ = returns[0].(*xray.GetTraceGraphOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) fakeGetTraceGraphWithContext(ctx context.Context, in *xray.GetTraceGraphInput, _ ...request.Option) (*xray.GetTraceGraphOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetTraceGraph cancelled", ctx.Err())
	default:
		return d.GetTraceGraph(in)
	}
}

func (d *XRayDouble) GetTraceSummaries(i0 *xray.GetTraceSummariesInput) (r0 *xray.GetTraceSummariesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTraceSummaries", i0)
	r0, _ = returns[0].(*xray.GetTraceSummariesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) GetTraceSummariesPages(i0 *xray.GetTraceSummariesInput, i1 func(*xray.GetTraceSummariesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTraceSummariesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *XRayDouble) fakeGetTraceSummariesPages(in *xray.GetTraceSummariesInput, pager func(*xray.GetTraceSummariesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetTraceSummaries", paginators, in, pager)
}

func (d *XRayDouble) GetTraceSummariesPagesWithContext(i0 context.Context, i1 *xray.GetTraceSummariesInput, i2 func(*xray.GetTraceSummariesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTraceSummariesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *XRayDouble) fakeGetTraceSummariesPagesWithContext(ctx context.Context, in *xray.GetTraceSummariesInput, pager func(*xray.GetTraceSummariesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetTraceSummaries", paginators, ctx, in, pager, options...)
}

func (d *XRayDouble) GetTraceSummariesRequest(i0 *xray.GetTraceSummariesInput) (r0 *request.Request, r1 *xray.GetTraceSummariesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTraceSummariesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*xray.GetTraceSummariesOutput)
	return
}

func (d *XRayDouble) GetTraceSummariesWithContext(i0 context.Context, i1 *xray.GetTraceSummariesInput, i2 ...request.Option) (r0 *xray.GetTraceSummariesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTraceSummariesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*xray.GetTraceSummariesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) fakeGetTraceSummariesWithContext(ctx context.Context, in *xray.GetTraceSummariesInput, _ ...request.Option) (*xray.GetTraceSummariesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetTraceSummaries cancelled", ctx.Err())
	default:
		return d.GetTraceSummaries(in)
	}
}

func (d *XRayDouble) PutEncryptionConfig(i0 *xray.PutEncryptionConfigInput) (r0 *xray.PutEncryptionConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutEncryptionConfig", i0)
	r0, _ = returns[0].(*xray.PutEncryptionConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) PutEncryptionConfigRequest(i0 *xray.PutEncryptionConfigInput) (r0 *request.Request, r1 *xray.PutEncryptionConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutEncryptionConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*xray.PutEncryptionConfigOutput)
	return
}

func (d *XRayDouble) PutEncryptionConfigWithContext(i0 context.Context, i1 *xray.PutEncryptionConfigInput, i2 ...request.Option) (r0 *xray.PutEncryptionConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutEncryptionConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*xray.PutEncryptionConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) fakePutEncryptionConfigWithContext(ctx context.Context, in *xray.PutEncryptionConfigInput, _ ...request.Option) (*xray.PutEncryptionConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutEncryptionConfig cancelled", ctx.Err())
	default:
		return d.PutEncryptionConfig(in)
	}
}

func (d *XRayDouble) PutTelemetryRecords(i0 *xray.PutTelemetryRecordsInput) (r0 *xray.PutTelemetryRecordsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutTelemetryRecords", i0)
	r0, _ = returns[0].(*xray.PutTelemetryRecordsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) PutTelemetryRecordsRequest(i0 *xray.PutTelemetryRecordsInput) (r0 *request.Request, r1 *xray.PutTelemetryRecordsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutTelemetryRecordsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*xray.PutTelemetryRecordsOutput)
	return
}

func (d *XRayDouble) PutTelemetryRecordsWithContext(i0 context.Context, i1 *xray.PutTelemetryRecordsInput, i2 ...request.Option) (r0 *xray.PutTelemetryRecordsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutTelemetryRecordsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*xray.PutTelemetryRecordsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) fakePutTelemetryRecordsWithContext(ctx context.Context, in *xray.PutTelemetryRecordsInput, _ ...request.Option) (*xray.PutTelemetryRecordsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutTelemetryRecords cancelled", ctx.Err())
	default:
		return d.PutTelemetryRecords(in)
	}
}

func (d *XRayDouble) PutTraceSegments(i0 *xray.PutTraceSegmentsInput) (r0 *xray.PutTraceSegmentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutTraceSegments", i0)
	r0, _ = returns[0].(*xray.PutTraceSegmentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) PutTraceSegmentsRequest(i0 *xray.PutTraceSegmentsInput) (r0 *request.Request, r1 *xray.PutTraceSegmentsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutTraceSegmentsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*xray.PutTraceSegmentsOutput)
	return
}

func (d *XRayDouble) PutTraceSegmentsWithContext(i0 context.Context, i1 *xray.PutTraceSegmentsInput, i2 ...request.Option) (r0 *xray.PutTraceSegmentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutTraceSegmentsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*xray.PutTraceSegmentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) fakePutTraceSegmentsWithContext(ctx context.Context, in *xray.PutTraceSegmentsInput, _ ...request.Option) (*xray.PutTraceSegmentsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutTraceSegments cancelled", ctx.Err())
	default:
		return d.PutTraceSegments(in)
	}
}

func (d *XRayDouble) UpdateGroup(i0 *xray.UpdateGroupInput) (r0 *xray.UpdateGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGroup", i0)
	r0, _ = returns[0].(*xray.UpdateGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) UpdateGroupRequest(i0 *xray.UpdateGroupInput) (r0 *request.Request, r1 *xray.UpdateGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*xray.UpdateGroupOutput)
	return
}

func (d *XRayDouble) UpdateGroupWithContext(i0 context.Context, i1 *xray.UpdateGroupInput, i2 ...request.Option) (r0 *xray.UpdateGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*xray.UpdateGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) fakeUpdateGroupWithContext(ctx context.Context, in *xray.UpdateGroupInput, _ ...request.Option) (*xray.UpdateGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateGroup cancelled", ctx.Err())
	default:
		return d.UpdateGroup(in)
	}
}

func (d *XRayDouble) UpdateSamplingRule(i0 *xray.UpdateSamplingRuleInput) (r0 *xray.UpdateSamplingRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSamplingRule", i0)
	r0, _ = returns[0].(*xray.UpdateSamplingRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) UpdateSamplingRuleRequest(i0 *xray.UpdateSamplingRuleInput) (r0 *request.Request, r1 *xray.UpdateSamplingRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSamplingRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*xray.UpdateSamplingRuleOutput)
	return
}

func (d *XRayDouble) UpdateSamplingRuleWithContext(i0 context.Context, i1 *xray.UpdateSamplingRuleInput, i2 ...request.Option) (r0 *xray.UpdateSamplingRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSamplingRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*xray.UpdateSamplingRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *XRayDouble) fakeUpdateSamplingRuleWithContext(ctx context.Context, in *xray.UpdateSamplingRuleInput, _ ...request.Option) (*xray.UpdateSamplingRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateSamplingRule cancelled", ctx.Err())
	default:
		return d.UpdateSamplingRule(in)
	}
}
