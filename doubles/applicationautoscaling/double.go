// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:11:12+11:00

// Package applicationautoscalingdouble provides a TestDouble implementation of applicationautoscalingiface.ApplicationAutoScalingAPI
package applicationautoscalingdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/applicationautoscaling"
	"github.com/aws/aws-sdk-go/service/applicationautoscaling/applicationautoscalingiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// ApplicationAutoScalingDouble is TestDouble for applicationautoscalingiface.ApplicationAutoScalingAPI
type ApplicationAutoScalingDouble struct {
	applicationautoscalingiface.ApplicationAutoScalingAPI
	*awsdouble.AWSTestDouble
}

// Constructor for ApplicationAutoScalingDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *ApplicationAutoScalingDouble {
	result := &ApplicationAutoScalingDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*applicationautoscalingiface.ApplicationAutoScalingAPI)(nil), configurators...)
	return result
}

func (d *ApplicationAutoScalingDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *ApplicationAutoScalingDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "DeleteScalingPolicyWithContext":
		return m.Fake(d.fakeDeleteScalingPolicyWithContext)

	case "DeleteScheduledActionWithContext":
		return m.Fake(d.fakeDeleteScheduledActionWithContext)

	case "DeregisterScalableTargetWithContext":
		return m.Fake(d.fakeDeregisterScalableTargetWithContext)

	case "DescribeScalableTargetsPages":
		return m.Fake(d.fakeDescribeScalableTargetsPages)

	case "DescribeScalableTargetsPagesWithContext":
		return m.Fake(d.fakeDescribeScalableTargetsPagesWithContext)

	case "DescribeScalableTargetsWithContext":
		return m.Fake(d.fakeDescribeScalableTargetsWithContext)

	case "DescribeScalingActivitiesPages":
		return m.Fake(d.fakeDescribeScalingActivitiesPages)

	case "DescribeScalingActivitiesPagesWithContext":
		return m.Fake(d.fakeDescribeScalingActivitiesPagesWithContext)

	case "DescribeScalingActivitiesWithContext":
		return m.Fake(d.fakeDescribeScalingActivitiesWithContext)

	case "DescribeScalingPoliciesPages":
		return m.Fake(d.fakeDescribeScalingPoliciesPages)

	case "DescribeScalingPoliciesPagesWithContext":
		return m.Fake(d.fakeDescribeScalingPoliciesPagesWithContext)

	case "DescribeScalingPoliciesWithContext":
		return m.Fake(d.fakeDescribeScalingPoliciesWithContext)

	case "DescribeScheduledActionsPages":
		return m.Fake(d.fakeDescribeScheduledActionsPages)

	case "DescribeScheduledActionsPagesWithContext":
		return m.Fake(d.fakeDescribeScheduledActionsPagesWithContext)

	case "DescribeScheduledActionsWithContext":
		return m.Fake(d.fakeDescribeScheduledActionsWithContext)

	case "PutScalingPolicyWithContext":
		return m.Fake(d.fakePutScalingPolicyWithContext)

	case "PutScheduledActionWithContext":
		return m.Fake(d.fakePutScheduledActionWithContext)

	case "RegisterScalableTargetWithContext":
		return m.Fake(d.fakeRegisterScalableTargetWithContext)

	default:
		return nil
	}
}

func (d *ApplicationAutoScalingDouble) DeleteScalingPolicy(i0 *applicationautoscaling.DeleteScalingPolicyInput) (r0 *applicationautoscaling.DeleteScalingPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteScalingPolicy", i0)
	r0, _ = returns[0].(*applicationautoscaling.DeleteScalingPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationAutoScalingDouble) DeleteScalingPolicyRequest(i0 *applicationautoscaling.DeleteScalingPolicyInput) (r0 *request.Request, r1 *applicationautoscaling.DeleteScalingPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteScalingPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*applicationautoscaling.DeleteScalingPolicyOutput)
	return
}

func (d *ApplicationAutoScalingDouble) DeleteScalingPolicyWithContext(i0 context.Context, i1 *applicationautoscaling.DeleteScalingPolicyInput, i2 ...request.Option) (r0 *applicationautoscaling.DeleteScalingPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteScalingPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*applicationautoscaling.DeleteScalingPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationAutoScalingDouble) fakeDeleteScalingPolicyWithContext(ctx context.Context, in *applicationautoscaling.DeleteScalingPolicyInput, _ ...request.Option) (*applicationautoscaling.DeleteScalingPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteScalingPolicy cancelled", ctx.Err())
	default:
		return d.DeleteScalingPolicy(in)
	}
}

func (d *ApplicationAutoScalingDouble) DeleteScheduledAction(i0 *applicationautoscaling.DeleteScheduledActionInput) (r0 *applicationautoscaling.DeleteScheduledActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteScheduledAction", i0)
	r0, _ = returns[0].(*applicationautoscaling.DeleteScheduledActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationAutoScalingDouble) DeleteScheduledActionRequest(i0 *applicationautoscaling.DeleteScheduledActionInput) (r0 *request.Request, r1 *applicationautoscaling.DeleteScheduledActionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteScheduledActionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*applicationautoscaling.DeleteScheduledActionOutput)
	return
}

func (d *ApplicationAutoScalingDouble) DeleteScheduledActionWithContext(i0 context.Context, i1 *applicationautoscaling.DeleteScheduledActionInput, i2 ...request.Option) (r0 *applicationautoscaling.DeleteScheduledActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteScheduledActionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*applicationautoscaling.DeleteScheduledActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationAutoScalingDouble) fakeDeleteScheduledActionWithContext(ctx context.Context, in *applicationautoscaling.DeleteScheduledActionInput, _ ...request.Option) (*applicationautoscaling.DeleteScheduledActionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteScheduledAction cancelled", ctx.Err())
	default:
		return d.DeleteScheduledAction(in)
	}
}

func (d *ApplicationAutoScalingDouble) DeregisterScalableTarget(i0 *applicationautoscaling.DeregisterScalableTargetInput) (r0 *applicationautoscaling.DeregisterScalableTargetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterScalableTarget", i0)
	r0, _ = returns[0].(*applicationautoscaling.DeregisterScalableTargetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationAutoScalingDouble) DeregisterScalableTargetRequest(i0 *applicationautoscaling.DeregisterScalableTargetInput) (r0 *request.Request, r1 *applicationautoscaling.DeregisterScalableTargetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterScalableTargetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*applicationautoscaling.DeregisterScalableTargetOutput)
	return
}

func (d *ApplicationAutoScalingDouble) DeregisterScalableTargetWithContext(i0 context.Context, i1 *applicationautoscaling.DeregisterScalableTargetInput, i2 ...request.Option) (r0 *applicationautoscaling.DeregisterScalableTargetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterScalableTargetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*applicationautoscaling.DeregisterScalableTargetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationAutoScalingDouble) fakeDeregisterScalableTargetWithContext(ctx context.Context, in *applicationautoscaling.DeregisterScalableTargetInput, _ ...request.Option) (*applicationautoscaling.DeregisterScalableTargetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeregisterScalableTarget cancelled", ctx.Err())
	default:
		return d.DeregisterScalableTarget(in)
	}
}

func (d *ApplicationAutoScalingDouble) DescribeScalableTargets(i0 *applicationautoscaling.DescribeScalableTargetsInput) (r0 *applicationautoscaling.DescribeScalableTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScalableTargets", i0)
	r0, _ = returns[0].(*applicationautoscaling.DescribeScalableTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationAutoScalingDouble) DescribeScalableTargetsPages(i0 *applicationautoscaling.DescribeScalableTargetsInput, i1 func(*applicationautoscaling.DescribeScalableTargetsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScalableTargetsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ApplicationAutoScalingDouble) fakeDescribeScalableTargetsPages(in *applicationautoscaling.DescribeScalableTargetsInput, pager func(*applicationautoscaling.DescribeScalableTargetsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeScalableTargets", paginators, in, pager)
}

func (d *ApplicationAutoScalingDouble) DescribeScalableTargetsPagesWithContext(i0 context.Context, i1 *applicationautoscaling.DescribeScalableTargetsInput, i2 func(*applicationautoscaling.DescribeScalableTargetsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScalableTargetsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ApplicationAutoScalingDouble) fakeDescribeScalableTargetsPagesWithContext(ctx context.Context, in *applicationautoscaling.DescribeScalableTargetsInput, pager func(*applicationautoscaling.DescribeScalableTargetsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeScalableTargets", paginators, ctx, in, pager, options...)
}

func (d *ApplicationAutoScalingDouble) DescribeScalableTargetsRequest(i0 *applicationautoscaling.DescribeScalableTargetsInput) (r0 *request.Request, r1 *applicationautoscaling.DescribeScalableTargetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScalableTargetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*applicationautoscaling.DescribeScalableTargetsOutput)
	return
}

func (d *ApplicationAutoScalingDouble) DescribeScalableTargetsWithContext(i0 context.Context, i1 *applicationautoscaling.DescribeScalableTargetsInput, i2 ...request.Option) (r0 *applicationautoscaling.DescribeScalableTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScalableTargetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*applicationautoscaling.DescribeScalableTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationAutoScalingDouble) fakeDescribeScalableTargetsWithContext(ctx context.Context, in *applicationautoscaling.DescribeScalableTargetsInput, _ ...request.Option) (*applicationautoscaling.DescribeScalableTargetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeScalableTargets cancelled", ctx.Err())
	default:
		return d.DescribeScalableTargets(in)
	}
}

func (d *ApplicationAutoScalingDouble) DescribeScalingActivities(i0 *applicationautoscaling.DescribeScalingActivitiesInput) (r0 *applicationautoscaling.DescribeScalingActivitiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScalingActivities", i0)
	r0, _ = returns[0].(*applicationautoscaling.DescribeScalingActivitiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationAutoScalingDouble) DescribeScalingActivitiesPages(i0 *applicationautoscaling.DescribeScalingActivitiesInput, i1 func(*applicationautoscaling.DescribeScalingActivitiesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScalingActivitiesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ApplicationAutoScalingDouble) fakeDescribeScalingActivitiesPages(in *applicationautoscaling.DescribeScalingActivitiesInput, pager func(*applicationautoscaling.DescribeScalingActivitiesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeScalingActivities", paginators, in, pager)
}

func (d *ApplicationAutoScalingDouble) DescribeScalingActivitiesPagesWithContext(i0 context.Context, i1 *applicationautoscaling.DescribeScalingActivitiesInput, i2 func(*applicationautoscaling.DescribeScalingActivitiesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScalingActivitiesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ApplicationAutoScalingDouble) fakeDescribeScalingActivitiesPagesWithContext(ctx context.Context, in *applicationautoscaling.DescribeScalingActivitiesInput, pager func(*applicationautoscaling.DescribeScalingActivitiesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeScalingActivities", paginators, ctx, in, pager, options...)
}

func (d *ApplicationAutoScalingDouble) DescribeScalingActivitiesRequest(i0 *applicationautoscaling.DescribeScalingActivitiesInput) (r0 *request.Request, r1 *applicationautoscaling.DescribeScalingActivitiesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScalingActivitiesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*applicationautoscaling.DescribeScalingActivitiesOutput)
	return
}

func (d *ApplicationAutoScalingDouble) DescribeScalingActivitiesWithContext(i0 context.Context, i1 *applicationautoscaling.DescribeScalingActivitiesInput, i2 ...request.Option) (r0 *applicationautoscaling.DescribeScalingActivitiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScalingActivitiesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*applicationautoscaling.DescribeScalingActivitiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationAutoScalingDouble) fakeDescribeScalingActivitiesWithContext(ctx context.Context, in *applicationautoscaling.DescribeScalingActivitiesInput, _ ...request.Option) (*applicationautoscaling.DescribeScalingActivitiesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeScalingActivities cancelled", ctx.Err())
	default:
		return d.DescribeScalingActivities(in)
	}
}

func (d *ApplicationAutoScalingDouble) DescribeScalingPolicies(i0 *applicationautoscaling.DescribeScalingPoliciesInput) (r0 *applicationautoscaling.DescribeScalingPoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScalingPolicies", i0)
	r0, _ = returns[0].(*applicationautoscaling.DescribeScalingPoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationAutoScalingDouble) DescribeScalingPoliciesPages(i0 *applicationautoscaling.DescribeScalingPoliciesInput, i1 func(*applicationautoscaling.DescribeScalingPoliciesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScalingPoliciesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ApplicationAutoScalingDouble) fakeDescribeScalingPoliciesPages(in *applicationautoscaling.DescribeScalingPoliciesInput, pager func(*applicationautoscaling.DescribeScalingPoliciesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeScalingPolicies", paginators, in, pager)
}

func (d *ApplicationAutoScalingDouble) DescribeScalingPoliciesPagesWithContext(i0 context.Context, i1 *applicationautoscaling.DescribeScalingPoliciesInput, i2 func(*applicationautoscaling.DescribeScalingPoliciesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScalingPoliciesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ApplicationAutoScalingDouble) fakeDescribeScalingPoliciesPagesWithContext(ctx context.Context, in *applicationautoscaling.DescribeScalingPoliciesInput, pager func(*applicationautoscaling.DescribeScalingPoliciesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeScalingPolicies", paginators, ctx, in, pager, options...)
}

func (d *ApplicationAutoScalingDouble) DescribeScalingPoliciesRequest(i0 *applicationautoscaling.DescribeScalingPoliciesInput) (r0 *request.Request, r1 *applicationautoscaling.DescribeScalingPoliciesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScalingPoliciesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*applicationautoscaling.DescribeScalingPoliciesOutput)
	return
}

func (d *ApplicationAutoScalingDouble) DescribeScalingPoliciesWithContext(i0 context.Context, i1 *applicationautoscaling.DescribeScalingPoliciesInput, i2 ...request.Option) (r0 *applicationautoscaling.DescribeScalingPoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScalingPoliciesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*applicationautoscaling.DescribeScalingPoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationAutoScalingDouble) fakeDescribeScalingPoliciesWithContext(ctx context.Context, in *applicationautoscaling.DescribeScalingPoliciesInput, _ ...request.Option) (*applicationautoscaling.DescribeScalingPoliciesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeScalingPolicies cancelled", ctx.Err())
	default:
		return d.DescribeScalingPolicies(in)
	}
}

func (d *ApplicationAutoScalingDouble) DescribeScheduledActions(i0 *applicationautoscaling.DescribeScheduledActionsInput) (r0 *applicationautoscaling.DescribeScheduledActionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScheduledActions", i0)
	r0, _ = returns[0].(*applicationautoscaling.DescribeScheduledActionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationAutoScalingDouble) DescribeScheduledActionsPages(i0 *applicationautoscaling.DescribeScheduledActionsInput, i1 func(*applicationautoscaling.DescribeScheduledActionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScheduledActionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ApplicationAutoScalingDouble) fakeDescribeScheduledActionsPages(in *applicationautoscaling.DescribeScheduledActionsInput, pager func(*applicationautoscaling.DescribeScheduledActionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeScheduledActions", paginators, in, pager)
}

func (d *ApplicationAutoScalingDouble) DescribeScheduledActionsPagesWithContext(i0 context.Context, i1 *applicationautoscaling.DescribeScheduledActionsInput, i2 func(*applicationautoscaling.DescribeScheduledActionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScheduledActionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ApplicationAutoScalingDouble) fakeDescribeScheduledActionsPagesWithContext(ctx context.Context, in *applicationautoscaling.DescribeScheduledActionsInput, pager func(*applicationautoscaling.DescribeScheduledActionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeScheduledActions", paginators, ctx, in, pager, options...)
}

func (d *ApplicationAutoScalingDouble) DescribeScheduledActionsRequest(i0 *applicationautoscaling.DescribeScheduledActionsInput) (r0 *request.Request, r1 *applicationautoscaling.DescribeScheduledActionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScheduledActionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*applicationautoscaling.DescribeScheduledActionsOutput)
	return
}

func (d *ApplicationAutoScalingDouble) DescribeScheduledActionsWithContext(i0 context.Context, i1 *applicationautoscaling.DescribeScheduledActionsInput, i2 ...request.Option) (r0 *applicationautoscaling.DescribeScheduledActionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScheduledActionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*applicationautoscaling.DescribeScheduledActionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationAutoScalingDouble) fakeDescribeScheduledActionsWithContext(ctx context.Context, in *applicationautoscaling.DescribeScheduledActionsInput, _ ...request.Option) (*applicationautoscaling.DescribeScheduledActionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeScheduledActions cancelled", ctx.Err())
	default:
		return d.DescribeScheduledActions(in)
	}
}

func (d *ApplicationAutoScalingDouble) PutScalingPolicy(i0 *applicationautoscaling.PutScalingPolicyInput) (r0 *applicationautoscaling.PutScalingPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutScalingPolicy", i0)
	r0, _ = returns[0].(*applicationautoscaling.PutScalingPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationAutoScalingDouble) PutScalingPolicyRequest(i0 *applicationautoscaling.PutScalingPolicyInput) (r0 *request.Request, r1 *applicationautoscaling.PutScalingPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutScalingPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*applicationautoscaling.PutScalingPolicyOutput)
	return
}

func (d *ApplicationAutoScalingDouble) PutScalingPolicyWithContext(i0 context.Context, i1 *applicationautoscaling.PutScalingPolicyInput, i2 ...request.Option) (r0 *applicationautoscaling.PutScalingPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutScalingPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*applicationautoscaling.PutScalingPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationAutoScalingDouble) fakePutScalingPolicyWithContext(ctx context.Context, in *applicationautoscaling.PutScalingPolicyInput, _ ...request.Option) (*applicationautoscaling.PutScalingPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutScalingPolicy cancelled", ctx.Err())
	default:
		return d.PutScalingPolicy(in)
	}
}

func (d *ApplicationAutoScalingDouble) PutScheduledAction(i0 *applicationautoscaling.PutScheduledActionInput) (r0 *applicationautoscaling.PutScheduledActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutScheduledAction", i0)
	r0, _ = returns[0].(*applicationautoscaling.PutScheduledActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationAutoScalingDouble) PutScheduledActionRequest(i0 *applicationautoscaling.PutScheduledActionInput) (r0 *request.Request, r1 *applicationautoscaling.PutScheduledActionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutScheduledActionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*applicationautoscaling.PutScheduledActionOutput)
	return
}

func (d *ApplicationAutoScalingDouble) PutScheduledActionWithContext(i0 context.Context, i1 *applicationautoscaling.PutScheduledActionInput, i2 ...request.Option) (r0 *applicationautoscaling.PutScheduledActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutScheduledActionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*applicationautoscaling.PutScheduledActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationAutoScalingDouble) fakePutScheduledActionWithContext(ctx context.Context, in *applicationautoscaling.PutScheduledActionInput, _ ...request.Option) (*applicationautoscaling.PutScheduledActionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutScheduledAction cancelled", ctx.Err())
	default:
		return d.PutScheduledAction(in)
	}
}

func (d *ApplicationAutoScalingDouble) RegisterScalableTarget(i0 *applicationautoscaling.RegisterScalableTargetInput) (r0 *applicationautoscaling.RegisterScalableTargetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterScalableTarget", i0)
	r0, _ = returns[0].(*applicationautoscaling.RegisterScalableTargetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationAutoScalingDouble) RegisterScalableTargetRequest(i0 *applicationautoscaling.RegisterScalableTargetInput) (r0 *request.Request, r1 *applicationautoscaling.RegisterScalableTargetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterScalableTargetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*applicationautoscaling.RegisterScalableTargetOutput)
	return
}

func (d *ApplicationAutoScalingDouble) RegisterScalableTargetWithContext(i0 context.Context, i1 *applicationautoscaling.RegisterScalableTargetInput, i2 ...request.Option) (r0 *applicationautoscaling.RegisterScalableTargetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterScalableTargetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*applicationautoscaling.RegisterScalableTargetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationAutoScalingDouble) fakeRegisterScalableTargetWithContext(ctx context.Context, in *applicationautoscaling.RegisterScalableTargetInput, _ ...request.Option) (*applicationautoscaling.RegisterScalableTargetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterScalableTarget cancelled", ctx.Err())
	default:
		return d.RegisterScalableTarget(in)
	}
}
