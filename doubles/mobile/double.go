// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:14:03+11:00

// Package mobiledouble provides a TestDouble implementation of mobileiface.MobileAPI
package mobiledouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/mobile"
	"github.com/aws/aws-sdk-go/service/mobile/mobileiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// MobileDouble is TestDouble for mobileiface.MobileAPI
type MobileDouble struct {
	mobileiface.MobileAPI
	*awsdouble.AWSTestDouble
}

// Constructor for MobileDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *MobileDouble {
	result := &MobileDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*mobileiface.MobileAPI)(nil), configurators...)
	return result
}

func (d *MobileDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *MobileDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CreateProjectWithContext":
		return m.Fake(d.fakeCreateProjectWithContext)

	case "DeleteProjectWithContext":
		return m.Fake(d.fakeDeleteProjectWithContext)

	case "DescribeBundleWithContext":
		return m.Fake(d.fakeDescribeBundleWithContext)

	case "DescribeProjectWithContext":
		return m.Fake(d.fakeDescribeProjectWithContext)

	case "ExportBundleWithContext":
		return m.Fake(d.fakeExportBundleWithContext)

	case "ExportProjectWithContext":
		return m.Fake(d.fakeExportProjectWithContext)

	case "ListBundlesPages":
		return m.Fake(d.fakeListBundlesPages)

	case "ListBundlesPagesWithContext":
		return m.Fake(d.fakeListBundlesPagesWithContext)

	case "ListBundlesWithContext":
		return m.Fake(d.fakeListBundlesWithContext)

	case "ListProjectsPages":
		return m.Fake(d.fakeListProjectsPages)

	case "ListProjectsPagesWithContext":
		return m.Fake(d.fakeListProjectsPagesWithContext)

	case "ListProjectsWithContext":
		return m.Fake(d.fakeListProjectsWithContext)

	case "UpdateProjectWithContext":
		return m.Fake(d.fakeUpdateProjectWithContext)

	default:
		return nil
	}
}

func (d *MobileDouble) CreateProject(i0 *mobile.CreateProjectInput) (r0 *mobile.CreateProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProject", i0)
	r0, _ = returns[0].(*mobile.CreateProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MobileDouble) CreateProjectRequest(i0 *mobile.CreateProjectInput) (r0 *request.Request, r1 *mobile.CreateProjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mobile.CreateProjectOutput)
	return
}

func (d *MobileDouble) CreateProjectWithContext(i0 context.Context, i1 *mobile.CreateProjectInput, i2 ...request.Option) (r0 *mobile.CreateProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mobile.CreateProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MobileDouble) fakeCreateProjectWithContext(ctx context.Context, in *mobile.CreateProjectInput, _ ...request.Option) (*mobile.CreateProjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateProject cancelled", ctx.Err())
	default:
		return d.CreateProject(in)
	}
}

func (d *MobileDouble) DeleteProject(i0 *mobile.DeleteProjectInput) (r0 *mobile.DeleteProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteProject", i0)
	r0, _ = returns[0].(*mobile.DeleteProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MobileDouble) DeleteProjectRequest(i0 *mobile.DeleteProjectInput) (r0 *request.Request, r1 *mobile.DeleteProjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteProjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mobile.DeleteProjectOutput)
	return
}

func (d *MobileDouble) DeleteProjectWithContext(i0 context.Context, i1 *mobile.DeleteProjectInput, i2 ...request.Option) (r0 *mobile.DeleteProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteProjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mobile.DeleteProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MobileDouble) fakeDeleteProjectWithContext(ctx context.Context, in *mobile.DeleteProjectInput, _ ...request.Option) (*mobile.DeleteProjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteProject cancelled", ctx.Err())
	default:
		return d.DeleteProject(in)
	}
}

func (d *MobileDouble) DescribeBundle(i0 *mobile.DescribeBundleInput) (r0 *mobile.DescribeBundleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBundle", i0)
	r0, _ = returns[0].(*mobile.DescribeBundleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MobileDouble) DescribeBundleRequest(i0 *mobile.DescribeBundleInput) (r0 *request.Request, r1 *mobile.DescribeBundleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBundleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mobile.DescribeBundleOutput)
	return
}

func (d *MobileDouble) DescribeBundleWithContext(i0 context.Context, i1 *mobile.DescribeBundleInput, i2 ...request.Option) (r0 *mobile.DescribeBundleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBundleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mobile.DescribeBundleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MobileDouble) fakeDescribeBundleWithContext(ctx context.Context, in *mobile.DescribeBundleInput, _ ...request.Option) (*mobile.DescribeBundleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeBundle cancelled", ctx.Err())
	default:
		return d.DescribeBundle(in)
	}
}

func (d *MobileDouble) DescribeProject(i0 *mobile.DescribeProjectInput) (r0 *mobile.DescribeProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProject", i0)
	r0, _ = returns[0].(*mobile.DescribeProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MobileDouble) DescribeProjectRequest(i0 *mobile.DescribeProjectInput) (r0 *request.Request, r1 *mobile.DescribeProjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mobile.DescribeProjectOutput)
	return
}

func (d *MobileDouble) DescribeProjectWithContext(i0 context.Context, i1 *mobile.DescribeProjectInput, i2 ...request.Option) (r0 *mobile.DescribeProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mobile.DescribeProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MobileDouble) fakeDescribeProjectWithContext(ctx context.Context, in *mobile.DescribeProjectInput, _ ...request.Option) (*mobile.DescribeProjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeProject cancelled", ctx.Err())
	default:
		return d.DescribeProject(in)
	}
}

func (d *MobileDouble) ExportBundle(i0 *mobile.ExportBundleInput) (r0 *mobile.ExportBundleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExportBundle", i0)
	r0, _ = returns[0].(*mobile.ExportBundleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MobileDouble) ExportBundleRequest(i0 *mobile.ExportBundleInput) (r0 *request.Request, r1 *mobile.ExportBundleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExportBundleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mobile.ExportBundleOutput)
	return
}

func (d *MobileDouble) ExportBundleWithContext(i0 context.Context, i1 *mobile.ExportBundleInput, i2 ...request.Option) (r0 *mobile.ExportBundleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExportBundleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mobile.ExportBundleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MobileDouble) fakeExportBundleWithContext(ctx context.Context, in *mobile.ExportBundleInput, _ ...request.Option) (*mobile.ExportBundleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ExportBundle cancelled", ctx.Err())
	default:
		return d.ExportBundle(in)
	}
}

func (d *MobileDouble) ExportProject(i0 *mobile.ExportProjectInput) (r0 *mobile.ExportProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExportProject", i0)
	r0, _ = returns[0].(*mobile.ExportProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MobileDouble) ExportProjectRequest(i0 *mobile.ExportProjectInput) (r0 *request.Request, r1 *mobile.ExportProjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExportProjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mobile.ExportProjectOutput)
	return
}

func (d *MobileDouble) ExportProjectWithContext(i0 context.Context, i1 *mobile.ExportProjectInput, i2 ...request.Option) (r0 *mobile.ExportProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExportProjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mobile.ExportProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MobileDouble) fakeExportProjectWithContext(ctx context.Context, in *mobile.ExportProjectInput, _ ...request.Option) (*mobile.ExportProjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ExportProject cancelled", ctx.Err())
	default:
		return d.ExportProject(in)
	}
}

func (d *MobileDouble) ListBundles(i0 *mobile.ListBundlesInput) (r0 *mobile.ListBundlesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBundles", i0)
	r0, _ = returns[0].(*mobile.ListBundlesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MobileDouble) ListBundlesPages(i0 *mobile.ListBundlesInput, i1 func(*mobile.ListBundlesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBundlesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MobileDouble) fakeListBundlesPages(in *mobile.ListBundlesInput, pager func(*mobile.ListBundlesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListBundles", paginators, in, pager)
}

func (d *MobileDouble) ListBundlesPagesWithContext(i0 context.Context, i1 *mobile.ListBundlesInput, i2 func(*mobile.ListBundlesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBundlesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MobileDouble) fakeListBundlesPagesWithContext(ctx context.Context, in *mobile.ListBundlesInput, pager func(*mobile.ListBundlesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListBundles", paginators, ctx, in, pager, options...)
}

func (d *MobileDouble) ListBundlesRequest(i0 *mobile.ListBundlesInput) (r0 *request.Request, r1 *mobile.ListBundlesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBundlesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mobile.ListBundlesOutput)
	return
}

func (d *MobileDouble) ListBundlesWithContext(i0 context.Context, i1 *mobile.ListBundlesInput, i2 ...request.Option) (r0 *mobile.ListBundlesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBundlesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mobile.ListBundlesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MobileDouble) fakeListBundlesWithContext(ctx context.Context, in *mobile.ListBundlesInput, _ ...request.Option) (*mobile.ListBundlesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListBundles cancelled", ctx.Err())
	default:
		return d.ListBundles(in)
	}
}

func (d *MobileDouble) ListProjects(i0 *mobile.ListProjectsInput) (r0 *mobile.ListProjectsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProjects", i0)
	r0, _ = returns[0].(*mobile.ListProjectsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MobileDouble) ListProjectsPages(i0 *mobile.ListProjectsInput, i1 func(*mobile.ListProjectsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProjectsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MobileDouble) fakeListProjectsPages(in *mobile.ListProjectsInput, pager func(*mobile.ListProjectsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListProjects", paginators, in, pager)
}

func (d *MobileDouble) ListProjectsPagesWithContext(i0 context.Context, i1 *mobile.ListProjectsInput, i2 func(*mobile.ListProjectsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProjectsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MobileDouble) fakeListProjectsPagesWithContext(ctx context.Context, in *mobile.ListProjectsInput, pager func(*mobile.ListProjectsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListProjects", paginators, ctx, in, pager, options...)
}

func (d *MobileDouble) ListProjectsRequest(i0 *mobile.ListProjectsInput) (r0 *request.Request, r1 *mobile.ListProjectsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProjectsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mobile.ListProjectsOutput)
	return
}

func (d *MobileDouble) ListProjectsWithContext(i0 context.Context, i1 *mobile.ListProjectsInput, i2 ...request.Option) (r0 *mobile.ListProjectsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProjectsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mobile.ListProjectsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MobileDouble) fakeListProjectsWithContext(ctx context.Context, in *mobile.ListProjectsInput, _ ...request.Option) (*mobile.ListProjectsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListProjects cancelled", ctx.Err())
	default:
		return d.ListProjects(in)
	}
}

func (d *MobileDouble) UpdateProject(i0 *mobile.UpdateProjectInput) (r0 *mobile.UpdateProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateProject", i0)
	r0, _ = returns[0].(*mobile.UpdateProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MobileDouble) UpdateProjectRequest(i0 *mobile.UpdateProjectInput) (r0 *request.Request, r1 *mobile.UpdateProjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateProjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mobile.UpdateProjectOutput)
	return
}

func (d *MobileDouble) UpdateProjectWithContext(i0 context.Context, i1 *mobile.UpdateProjectInput, i2 ...request.Option) (r0 *mobile.UpdateProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateProjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mobile.UpdateProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MobileDouble) fakeUpdateProjectWithContext(ctx context.Context, in *mobile.UpdateProjectInput, _ ...request.Option) (*mobile.UpdateProjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateProject cancelled", ctx.Err())
	default:
		return d.UpdateProject(in)
	}
}
