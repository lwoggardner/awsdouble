// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:11:56+11:00

// Package cognitoidentitydouble provides a TestDouble implementation of cognitoidentityiface.CognitoIdentityAPI
package cognitoidentitydouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/cognitoidentity"
	"github.com/aws/aws-sdk-go/service/cognitoidentity/cognitoidentityiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// CognitoIdentityDouble is TestDouble for cognitoidentityiface.CognitoIdentityAPI
type CognitoIdentityDouble struct {
	cognitoidentityiface.CognitoIdentityAPI
	*awsdouble.AWSTestDouble
}

// Constructor for CognitoIdentityDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *CognitoIdentityDouble {
	result := &CognitoIdentityDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*cognitoidentityiface.CognitoIdentityAPI)(nil), configurators...)
	return result
}

func (d *CognitoIdentityDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *CognitoIdentityDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CreateIdentityPoolWithContext":
		return m.Fake(d.fakeCreateIdentityPoolWithContext)

	case "DeleteIdentitiesWithContext":
		return m.Fake(d.fakeDeleteIdentitiesWithContext)

	case "DeleteIdentityPoolWithContext":
		return m.Fake(d.fakeDeleteIdentityPoolWithContext)

	case "DescribeIdentityPoolWithContext":
		return m.Fake(d.fakeDescribeIdentityPoolWithContext)

	case "DescribeIdentityWithContext":
		return m.Fake(d.fakeDescribeIdentityWithContext)

	case "GetCredentialsForIdentityWithContext":
		return m.Fake(d.fakeGetCredentialsForIdentityWithContext)

	case "GetIdWithContext":
		return m.Fake(d.fakeGetIdWithContext)

	case "GetIdentityPoolRolesWithContext":
		return m.Fake(d.fakeGetIdentityPoolRolesWithContext)

	case "GetOpenIdTokenForDeveloperIdentityWithContext":
		return m.Fake(d.fakeGetOpenIdTokenForDeveloperIdentityWithContext)

	case "GetOpenIdTokenWithContext":
		return m.Fake(d.fakeGetOpenIdTokenWithContext)

	case "ListIdentitiesWithContext":
		return m.Fake(d.fakeListIdentitiesWithContext)

	case "ListIdentityPoolsWithContext":
		return m.Fake(d.fakeListIdentityPoolsWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "LookupDeveloperIdentityWithContext":
		return m.Fake(d.fakeLookupDeveloperIdentityWithContext)

	case "MergeDeveloperIdentitiesWithContext":
		return m.Fake(d.fakeMergeDeveloperIdentitiesWithContext)

	case "SetIdentityPoolRolesWithContext":
		return m.Fake(d.fakeSetIdentityPoolRolesWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UnlinkDeveloperIdentityWithContext":
		return m.Fake(d.fakeUnlinkDeveloperIdentityWithContext)

	case "UnlinkIdentityWithContext":
		return m.Fake(d.fakeUnlinkIdentityWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateIdentityPoolWithContext":
		return m.Fake(d.fakeUpdateIdentityPoolWithContext)

	default:
		return nil
	}
}

func (d *CognitoIdentityDouble) CreateIdentityPool(i0 *cognitoidentity.CreateIdentityPoolInput) (r0 *cognitoidentity.IdentityPool, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateIdentityPool", i0)
	r0, _ = returns[0].(*cognitoidentity.IdentityPool)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) CreateIdentityPoolRequest(i0 *cognitoidentity.CreateIdentityPoolInput) (r0 *request.Request, r1 *cognitoidentity.IdentityPool) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateIdentityPoolRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentity.IdentityPool)
	return
}

func (d *CognitoIdentityDouble) CreateIdentityPoolWithContext(i0 context.Context, i1 *cognitoidentity.CreateIdentityPoolInput, i2 ...request.Option) (r0 *cognitoidentity.IdentityPool, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateIdentityPoolWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentity.IdentityPool)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) fakeCreateIdentityPoolWithContext(ctx context.Context, in *cognitoidentity.CreateIdentityPoolInput, _ ...request.Option) (*cognitoidentity.IdentityPool, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateIdentityPool cancelled", ctx.Err())
	default:
		return d.CreateIdentityPool(in)
	}
}

func (d *CognitoIdentityDouble) DeleteIdentities(i0 *cognitoidentity.DeleteIdentitiesInput) (r0 *cognitoidentity.DeleteIdentitiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIdentities", i0)
	r0, _ = returns[0].(*cognitoidentity.DeleteIdentitiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) DeleteIdentitiesRequest(i0 *cognitoidentity.DeleteIdentitiesInput) (r0 *request.Request, r1 *cognitoidentity.DeleteIdentitiesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIdentitiesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentity.DeleteIdentitiesOutput)
	return
}

func (d *CognitoIdentityDouble) DeleteIdentitiesWithContext(i0 context.Context, i1 *cognitoidentity.DeleteIdentitiesInput, i2 ...request.Option) (r0 *cognitoidentity.DeleteIdentitiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIdentitiesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentity.DeleteIdentitiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) fakeDeleteIdentitiesWithContext(ctx context.Context, in *cognitoidentity.DeleteIdentitiesInput, _ ...request.Option) (*cognitoidentity.DeleteIdentitiesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteIdentities cancelled", ctx.Err())
	default:
		return d.DeleteIdentities(in)
	}
}

func (d *CognitoIdentityDouble) DeleteIdentityPool(i0 *cognitoidentity.DeleteIdentityPoolInput) (r0 *cognitoidentity.DeleteIdentityPoolOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIdentityPool", i0)
	r0, _ = returns[0].(*cognitoidentity.DeleteIdentityPoolOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) DeleteIdentityPoolRequest(i0 *cognitoidentity.DeleteIdentityPoolInput) (r0 *request.Request, r1 *cognitoidentity.DeleteIdentityPoolOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIdentityPoolRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentity.DeleteIdentityPoolOutput)
	return
}

func (d *CognitoIdentityDouble) DeleteIdentityPoolWithContext(i0 context.Context, i1 *cognitoidentity.DeleteIdentityPoolInput, i2 ...request.Option) (r0 *cognitoidentity.DeleteIdentityPoolOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIdentityPoolWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentity.DeleteIdentityPoolOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) fakeDeleteIdentityPoolWithContext(ctx context.Context, in *cognitoidentity.DeleteIdentityPoolInput, _ ...request.Option) (*cognitoidentity.DeleteIdentityPoolOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteIdentityPool cancelled", ctx.Err())
	default:
		return d.DeleteIdentityPool(in)
	}
}

func (d *CognitoIdentityDouble) DescribeIdentity(i0 *cognitoidentity.DescribeIdentityInput) (r0 *cognitoidentity.IdentityDescription, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIdentity", i0)
	r0, _ = returns[0].(*cognitoidentity.IdentityDescription)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) DescribeIdentityPool(i0 *cognitoidentity.DescribeIdentityPoolInput) (r0 *cognitoidentity.IdentityPool, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIdentityPool", i0)
	r0, _ = returns[0].(*cognitoidentity.IdentityPool)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) DescribeIdentityPoolRequest(i0 *cognitoidentity.DescribeIdentityPoolInput) (r0 *request.Request, r1 *cognitoidentity.IdentityPool) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIdentityPoolRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentity.IdentityPool)
	return
}

func (d *CognitoIdentityDouble) DescribeIdentityPoolWithContext(i0 context.Context, i1 *cognitoidentity.DescribeIdentityPoolInput, i2 ...request.Option) (r0 *cognitoidentity.IdentityPool, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIdentityPoolWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentity.IdentityPool)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) fakeDescribeIdentityPoolWithContext(ctx context.Context, in *cognitoidentity.DescribeIdentityPoolInput, _ ...request.Option) (*cognitoidentity.IdentityPool, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeIdentityPool cancelled", ctx.Err())
	default:
		return d.DescribeIdentityPool(in)
	}
}

func (d *CognitoIdentityDouble) DescribeIdentityRequest(i0 *cognitoidentity.DescribeIdentityInput) (r0 *request.Request, r1 *cognitoidentity.IdentityDescription) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIdentityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentity.IdentityDescription)
	return
}

func (d *CognitoIdentityDouble) DescribeIdentityWithContext(i0 context.Context, i1 *cognitoidentity.DescribeIdentityInput, i2 ...request.Option) (r0 *cognitoidentity.IdentityDescription, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIdentityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentity.IdentityDescription)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) fakeDescribeIdentityWithContext(ctx context.Context, in *cognitoidentity.DescribeIdentityInput, _ ...request.Option) (*cognitoidentity.IdentityDescription, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeIdentity cancelled", ctx.Err())
	default:
		return d.DescribeIdentity(in)
	}
}

func (d *CognitoIdentityDouble) GetCredentialsForIdentity(i0 *cognitoidentity.GetCredentialsForIdentityInput) (r0 *cognitoidentity.GetCredentialsForIdentityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCredentialsForIdentity", i0)
	r0, _ = returns[0].(*cognitoidentity.GetCredentialsForIdentityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) GetCredentialsForIdentityRequest(i0 *cognitoidentity.GetCredentialsForIdentityInput) (r0 *request.Request, r1 *cognitoidentity.GetCredentialsForIdentityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCredentialsForIdentityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentity.GetCredentialsForIdentityOutput)
	return
}

func (d *CognitoIdentityDouble) GetCredentialsForIdentityWithContext(i0 context.Context, i1 *cognitoidentity.GetCredentialsForIdentityInput, i2 ...request.Option) (r0 *cognitoidentity.GetCredentialsForIdentityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCredentialsForIdentityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentity.GetCredentialsForIdentityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) fakeGetCredentialsForIdentityWithContext(ctx context.Context, in *cognitoidentity.GetCredentialsForIdentityInput, _ ...request.Option) (*cognitoidentity.GetCredentialsForIdentityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetCredentialsForIdentity cancelled", ctx.Err())
	default:
		return d.GetCredentialsForIdentity(in)
	}
}

func (d *CognitoIdentityDouble) GetId(i0 *cognitoidentity.GetIdInput) (r0 *cognitoidentity.GetIdOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetId", i0)
	r0, _ = returns[0].(*cognitoidentity.GetIdOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) GetIdRequest(i0 *cognitoidentity.GetIdInput) (r0 *request.Request, r1 *cognitoidentity.GetIdOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIdRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentity.GetIdOutput)
	return
}

func (d *CognitoIdentityDouble) GetIdWithContext(i0 context.Context, i1 *cognitoidentity.GetIdInput, i2 ...request.Option) (r0 *cognitoidentity.GetIdOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIdWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentity.GetIdOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) fakeGetIdWithContext(ctx context.Context, in *cognitoidentity.GetIdInput, _ ...request.Option) (*cognitoidentity.GetIdOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetId cancelled", ctx.Err())
	default:
		return d.GetId(in)
	}
}

func (d *CognitoIdentityDouble) GetIdentityPoolRoles(i0 *cognitoidentity.GetIdentityPoolRolesInput) (r0 *cognitoidentity.GetIdentityPoolRolesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIdentityPoolRoles", i0)
	r0, _ = returns[0].(*cognitoidentity.GetIdentityPoolRolesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) GetIdentityPoolRolesRequest(i0 *cognitoidentity.GetIdentityPoolRolesInput) (r0 *request.Request, r1 *cognitoidentity.GetIdentityPoolRolesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIdentityPoolRolesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentity.GetIdentityPoolRolesOutput)
	return
}

func (d *CognitoIdentityDouble) GetIdentityPoolRolesWithContext(i0 context.Context, i1 *cognitoidentity.GetIdentityPoolRolesInput, i2 ...request.Option) (r0 *cognitoidentity.GetIdentityPoolRolesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIdentityPoolRolesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentity.GetIdentityPoolRolesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) fakeGetIdentityPoolRolesWithContext(ctx context.Context, in *cognitoidentity.GetIdentityPoolRolesInput, _ ...request.Option) (*cognitoidentity.GetIdentityPoolRolesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetIdentityPoolRoles cancelled", ctx.Err())
	default:
		return d.GetIdentityPoolRoles(in)
	}
}

func (d *CognitoIdentityDouble) GetOpenIdToken(i0 *cognitoidentity.GetOpenIdTokenInput) (r0 *cognitoidentity.GetOpenIdTokenOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOpenIdToken", i0)
	r0, _ = returns[0].(*cognitoidentity.GetOpenIdTokenOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) GetOpenIdTokenForDeveloperIdentity(i0 *cognitoidentity.GetOpenIdTokenForDeveloperIdentityInput) (r0 *cognitoidentity.GetOpenIdTokenForDeveloperIdentityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOpenIdTokenForDeveloperIdentity", i0)
	r0, _ = returns[0].(*cognitoidentity.GetOpenIdTokenForDeveloperIdentityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) GetOpenIdTokenForDeveloperIdentityRequest(i0 *cognitoidentity.GetOpenIdTokenForDeveloperIdentityInput) (r0 *request.Request, r1 *cognitoidentity.GetOpenIdTokenForDeveloperIdentityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOpenIdTokenForDeveloperIdentityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentity.GetOpenIdTokenForDeveloperIdentityOutput)
	return
}

func (d *CognitoIdentityDouble) GetOpenIdTokenForDeveloperIdentityWithContext(i0 context.Context, i1 *cognitoidentity.GetOpenIdTokenForDeveloperIdentityInput, i2 ...request.Option) (r0 *cognitoidentity.GetOpenIdTokenForDeveloperIdentityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOpenIdTokenForDeveloperIdentityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentity.GetOpenIdTokenForDeveloperIdentityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) fakeGetOpenIdTokenForDeveloperIdentityWithContext(ctx context.Context, in *cognitoidentity.GetOpenIdTokenForDeveloperIdentityInput, _ ...request.Option) (*cognitoidentity.GetOpenIdTokenForDeveloperIdentityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetOpenIdTokenForDeveloperIdentity cancelled", ctx.Err())
	default:
		return d.GetOpenIdTokenForDeveloperIdentity(in)
	}
}

func (d *CognitoIdentityDouble) GetOpenIdTokenRequest(i0 *cognitoidentity.GetOpenIdTokenInput) (r0 *request.Request, r1 *cognitoidentity.GetOpenIdTokenOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOpenIdTokenRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentity.GetOpenIdTokenOutput)
	return
}

func (d *CognitoIdentityDouble) GetOpenIdTokenWithContext(i0 context.Context, i1 *cognitoidentity.GetOpenIdTokenInput, i2 ...request.Option) (r0 *cognitoidentity.GetOpenIdTokenOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOpenIdTokenWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentity.GetOpenIdTokenOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) fakeGetOpenIdTokenWithContext(ctx context.Context, in *cognitoidentity.GetOpenIdTokenInput, _ ...request.Option) (*cognitoidentity.GetOpenIdTokenOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetOpenIdToken cancelled", ctx.Err())
	default:
		return d.GetOpenIdToken(in)
	}
}

func (d *CognitoIdentityDouble) ListIdentities(i0 *cognitoidentity.ListIdentitiesInput) (r0 *cognitoidentity.ListIdentitiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIdentities", i0)
	r0, _ = returns[0].(*cognitoidentity.ListIdentitiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) ListIdentitiesRequest(i0 *cognitoidentity.ListIdentitiesInput) (r0 *request.Request, r1 *cognitoidentity.ListIdentitiesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIdentitiesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentity.ListIdentitiesOutput)
	return
}

func (d *CognitoIdentityDouble) ListIdentitiesWithContext(i0 context.Context, i1 *cognitoidentity.ListIdentitiesInput, i2 ...request.Option) (r0 *cognitoidentity.ListIdentitiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIdentitiesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentity.ListIdentitiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) fakeListIdentitiesWithContext(ctx context.Context, in *cognitoidentity.ListIdentitiesInput, _ ...request.Option) (*cognitoidentity.ListIdentitiesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListIdentities cancelled", ctx.Err())
	default:
		return d.ListIdentities(in)
	}
}

func (d *CognitoIdentityDouble) ListIdentityPools(i0 *cognitoidentity.ListIdentityPoolsInput) (r0 *cognitoidentity.ListIdentityPoolsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIdentityPools", i0)
	r0, _ = returns[0].(*cognitoidentity.ListIdentityPoolsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) ListIdentityPoolsRequest(i0 *cognitoidentity.ListIdentityPoolsInput) (r0 *request.Request, r1 *cognitoidentity.ListIdentityPoolsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIdentityPoolsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentity.ListIdentityPoolsOutput)
	return
}

func (d *CognitoIdentityDouble) ListIdentityPoolsWithContext(i0 context.Context, i1 *cognitoidentity.ListIdentityPoolsInput, i2 ...request.Option) (r0 *cognitoidentity.ListIdentityPoolsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIdentityPoolsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentity.ListIdentityPoolsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) fakeListIdentityPoolsWithContext(ctx context.Context, in *cognitoidentity.ListIdentityPoolsInput, _ ...request.Option) (*cognitoidentity.ListIdentityPoolsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListIdentityPools cancelled", ctx.Err())
	default:
		return d.ListIdentityPools(in)
	}
}

func (d *CognitoIdentityDouble) ListTagsForResource(i0 *cognitoidentity.ListTagsForResourceInput) (r0 *cognitoidentity.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*cognitoidentity.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) ListTagsForResourceRequest(i0 *cognitoidentity.ListTagsForResourceInput) (r0 *request.Request, r1 *cognitoidentity.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentity.ListTagsForResourceOutput)
	return
}

func (d *CognitoIdentityDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *cognitoidentity.ListTagsForResourceInput, i2 ...request.Option) (r0 *cognitoidentity.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentity.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *cognitoidentity.ListTagsForResourceInput, _ ...request.Option) (*cognitoidentity.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *CognitoIdentityDouble) LookupDeveloperIdentity(i0 *cognitoidentity.LookupDeveloperIdentityInput) (r0 *cognitoidentity.LookupDeveloperIdentityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("LookupDeveloperIdentity", i0)
	r0, _ = returns[0].(*cognitoidentity.LookupDeveloperIdentityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) LookupDeveloperIdentityRequest(i0 *cognitoidentity.LookupDeveloperIdentityInput) (r0 *request.Request, r1 *cognitoidentity.LookupDeveloperIdentityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("LookupDeveloperIdentityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentity.LookupDeveloperIdentityOutput)
	return
}

func (d *CognitoIdentityDouble) LookupDeveloperIdentityWithContext(i0 context.Context, i1 *cognitoidentity.LookupDeveloperIdentityInput, i2 ...request.Option) (r0 *cognitoidentity.LookupDeveloperIdentityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("LookupDeveloperIdentityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentity.LookupDeveloperIdentityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) fakeLookupDeveloperIdentityWithContext(ctx context.Context, in *cognitoidentity.LookupDeveloperIdentityInput, _ ...request.Option) (*cognitoidentity.LookupDeveloperIdentityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "LookupDeveloperIdentity cancelled", ctx.Err())
	default:
		return d.LookupDeveloperIdentity(in)
	}
}

func (d *CognitoIdentityDouble) MergeDeveloperIdentities(i0 *cognitoidentity.MergeDeveloperIdentitiesInput) (r0 *cognitoidentity.MergeDeveloperIdentitiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("MergeDeveloperIdentities", i0)
	r0, _ = returns[0].(*cognitoidentity.MergeDeveloperIdentitiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) MergeDeveloperIdentitiesRequest(i0 *cognitoidentity.MergeDeveloperIdentitiesInput) (r0 *request.Request, r1 *cognitoidentity.MergeDeveloperIdentitiesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("MergeDeveloperIdentitiesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentity.MergeDeveloperIdentitiesOutput)
	return
}

func (d *CognitoIdentityDouble) MergeDeveloperIdentitiesWithContext(i0 context.Context, i1 *cognitoidentity.MergeDeveloperIdentitiesInput, i2 ...request.Option) (r0 *cognitoidentity.MergeDeveloperIdentitiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("MergeDeveloperIdentitiesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentity.MergeDeveloperIdentitiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) fakeMergeDeveloperIdentitiesWithContext(ctx context.Context, in *cognitoidentity.MergeDeveloperIdentitiesInput, _ ...request.Option) (*cognitoidentity.MergeDeveloperIdentitiesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "MergeDeveloperIdentities cancelled", ctx.Err())
	default:
		return d.MergeDeveloperIdentities(in)
	}
}

func (d *CognitoIdentityDouble) SetIdentityPoolRoles(i0 *cognitoidentity.SetIdentityPoolRolesInput) (r0 *cognitoidentity.SetIdentityPoolRolesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetIdentityPoolRoles", i0)
	r0, _ = returns[0].(*cognitoidentity.SetIdentityPoolRolesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) SetIdentityPoolRolesRequest(i0 *cognitoidentity.SetIdentityPoolRolesInput) (r0 *request.Request, r1 *cognitoidentity.SetIdentityPoolRolesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetIdentityPoolRolesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentity.SetIdentityPoolRolesOutput)
	return
}

func (d *CognitoIdentityDouble) SetIdentityPoolRolesWithContext(i0 context.Context, i1 *cognitoidentity.SetIdentityPoolRolesInput, i2 ...request.Option) (r0 *cognitoidentity.SetIdentityPoolRolesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetIdentityPoolRolesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentity.SetIdentityPoolRolesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) fakeSetIdentityPoolRolesWithContext(ctx context.Context, in *cognitoidentity.SetIdentityPoolRolesInput, _ ...request.Option) (*cognitoidentity.SetIdentityPoolRolesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetIdentityPoolRoles cancelled", ctx.Err())
	default:
		return d.SetIdentityPoolRoles(in)
	}
}

func (d *CognitoIdentityDouble) TagResource(i0 *cognitoidentity.TagResourceInput) (r0 *cognitoidentity.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*cognitoidentity.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) TagResourceRequest(i0 *cognitoidentity.TagResourceInput) (r0 *request.Request, r1 *cognitoidentity.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentity.TagResourceOutput)
	return
}

func (d *CognitoIdentityDouble) TagResourceWithContext(i0 context.Context, i1 *cognitoidentity.TagResourceInput, i2 ...request.Option) (r0 *cognitoidentity.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentity.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) fakeTagResourceWithContext(ctx context.Context, in *cognitoidentity.TagResourceInput, _ ...request.Option) (*cognitoidentity.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *CognitoIdentityDouble) UnlinkDeveloperIdentity(i0 *cognitoidentity.UnlinkDeveloperIdentityInput) (r0 *cognitoidentity.UnlinkDeveloperIdentityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnlinkDeveloperIdentity", i0)
	r0, _ = returns[0].(*cognitoidentity.UnlinkDeveloperIdentityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) UnlinkDeveloperIdentityRequest(i0 *cognitoidentity.UnlinkDeveloperIdentityInput) (r0 *request.Request, r1 *cognitoidentity.UnlinkDeveloperIdentityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnlinkDeveloperIdentityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentity.UnlinkDeveloperIdentityOutput)
	return
}

func (d *CognitoIdentityDouble) UnlinkDeveloperIdentityWithContext(i0 context.Context, i1 *cognitoidentity.UnlinkDeveloperIdentityInput, i2 ...request.Option) (r0 *cognitoidentity.UnlinkDeveloperIdentityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnlinkDeveloperIdentityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentity.UnlinkDeveloperIdentityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) fakeUnlinkDeveloperIdentityWithContext(ctx context.Context, in *cognitoidentity.UnlinkDeveloperIdentityInput, _ ...request.Option) (*cognitoidentity.UnlinkDeveloperIdentityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UnlinkDeveloperIdentity cancelled", ctx.Err())
	default:
		return d.UnlinkDeveloperIdentity(in)
	}
}

func (d *CognitoIdentityDouble) UnlinkIdentity(i0 *cognitoidentity.UnlinkIdentityInput) (r0 *cognitoidentity.UnlinkIdentityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnlinkIdentity", i0)
	r0, _ = returns[0].(*cognitoidentity.UnlinkIdentityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) UnlinkIdentityRequest(i0 *cognitoidentity.UnlinkIdentityInput) (r0 *request.Request, r1 *cognitoidentity.UnlinkIdentityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnlinkIdentityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentity.UnlinkIdentityOutput)
	return
}

func (d *CognitoIdentityDouble) UnlinkIdentityWithContext(i0 context.Context, i1 *cognitoidentity.UnlinkIdentityInput, i2 ...request.Option) (r0 *cognitoidentity.UnlinkIdentityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnlinkIdentityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentity.UnlinkIdentityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) fakeUnlinkIdentityWithContext(ctx context.Context, in *cognitoidentity.UnlinkIdentityInput, _ ...request.Option) (*cognitoidentity.UnlinkIdentityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UnlinkIdentity cancelled", ctx.Err())
	default:
		return d.UnlinkIdentity(in)
	}
}

func (d *CognitoIdentityDouble) UntagResource(i0 *cognitoidentity.UntagResourceInput) (r0 *cognitoidentity.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*cognitoidentity.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) UntagResourceRequest(i0 *cognitoidentity.UntagResourceInput) (r0 *request.Request, r1 *cognitoidentity.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentity.UntagResourceOutput)
	return
}

func (d *CognitoIdentityDouble) UntagResourceWithContext(i0 context.Context, i1 *cognitoidentity.UntagResourceInput, i2 ...request.Option) (r0 *cognitoidentity.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentity.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) fakeUntagResourceWithContext(ctx context.Context, in *cognitoidentity.UntagResourceInput, _ ...request.Option) (*cognitoidentity.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *CognitoIdentityDouble) UpdateIdentityPool(i0 *cognitoidentity.IdentityPool) (r0 *cognitoidentity.IdentityPool, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateIdentityPool", i0)
	r0, _ = returns[0].(*cognitoidentity.IdentityPool)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) UpdateIdentityPoolRequest(i0 *cognitoidentity.IdentityPool) (r0 *request.Request, r1 *cognitoidentity.IdentityPool) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateIdentityPoolRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitoidentity.IdentityPool)
	return
}

func (d *CognitoIdentityDouble) UpdateIdentityPoolWithContext(i0 context.Context, i1 *cognitoidentity.IdentityPool, i2 ...request.Option) (r0 *cognitoidentity.IdentityPool, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateIdentityPoolWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitoidentity.IdentityPool)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoIdentityDouble) fakeUpdateIdentityPoolWithContext(ctx context.Context, in *cognitoidentity.IdentityPool, _ ...request.Option) (*cognitoidentity.IdentityPool, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateIdentityPool cancelled", ctx.Err())
	default:
		return d.UpdateIdentityPool(in)
	}
}
