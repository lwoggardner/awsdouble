// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:12:04+11:00

// Package configservicedouble provides a TestDouble implementation of configserviceiface.ConfigServiceAPI
package configservicedouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/configservice"
	"github.com/aws/aws-sdk-go/service/configservice/configserviceiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// ConfigServiceDouble is TestDouble for configserviceiface.ConfigServiceAPI
type ConfigServiceDouble struct {
	configserviceiface.ConfigServiceAPI
	*awsdouble.AWSTestDouble
}

// Constructor for ConfigServiceDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *ConfigServiceDouble {
	result := &ConfigServiceDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*configserviceiface.ConfigServiceAPI)(nil), configurators...)
	return result
}

func (d *ConfigServiceDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *ConfigServiceDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "BatchGetAggregateResourceConfigWithContext":
		return m.Fake(d.fakeBatchGetAggregateResourceConfigWithContext)

	case "BatchGetResourceConfigWithContext":
		return m.Fake(d.fakeBatchGetResourceConfigWithContext)

	case "DeleteAggregationAuthorizationWithContext":
		return m.Fake(d.fakeDeleteAggregationAuthorizationWithContext)

	case "DeleteConfigRuleWithContext":
		return m.Fake(d.fakeDeleteConfigRuleWithContext)

	case "DeleteConfigurationAggregatorWithContext":
		return m.Fake(d.fakeDeleteConfigurationAggregatorWithContext)

	case "DeleteConfigurationRecorderWithContext":
		return m.Fake(d.fakeDeleteConfigurationRecorderWithContext)

	case "DeleteConformancePackWithContext":
		return m.Fake(d.fakeDeleteConformancePackWithContext)

	case "DeleteDeliveryChannelWithContext":
		return m.Fake(d.fakeDeleteDeliveryChannelWithContext)

	case "DeleteEvaluationResultsWithContext":
		return m.Fake(d.fakeDeleteEvaluationResultsWithContext)

	case "DeleteOrganizationConfigRuleWithContext":
		return m.Fake(d.fakeDeleteOrganizationConfigRuleWithContext)

	case "DeleteOrganizationConformancePackWithContext":
		return m.Fake(d.fakeDeleteOrganizationConformancePackWithContext)

	case "DeletePendingAggregationRequestWithContext":
		return m.Fake(d.fakeDeletePendingAggregationRequestWithContext)

	case "DeleteRemediationConfigurationWithContext":
		return m.Fake(d.fakeDeleteRemediationConfigurationWithContext)

	case "DeleteRemediationExceptionsWithContext":
		return m.Fake(d.fakeDeleteRemediationExceptionsWithContext)

	case "DeleteResourceConfigWithContext":
		return m.Fake(d.fakeDeleteResourceConfigWithContext)

	case "DeleteRetentionConfigurationWithContext":
		return m.Fake(d.fakeDeleteRetentionConfigurationWithContext)

	case "DeliverConfigSnapshotWithContext":
		return m.Fake(d.fakeDeliverConfigSnapshotWithContext)

	case "DescribeAggregateComplianceByConfigRulesWithContext":
		return m.Fake(d.fakeDescribeAggregateComplianceByConfigRulesWithContext)

	case "DescribeAggregationAuthorizationsWithContext":
		return m.Fake(d.fakeDescribeAggregationAuthorizationsWithContext)

	case "DescribeComplianceByConfigRuleWithContext":
		return m.Fake(d.fakeDescribeComplianceByConfigRuleWithContext)

	case "DescribeComplianceByResourceWithContext":
		return m.Fake(d.fakeDescribeComplianceByResourceWithContext)

	case "DescribeConfigRuleEvaluationStatusWithContext":
		return m.Fake(d.fakeDescribeConfigRuleEvaluationStatusWithContext)

	case "DescribeConfigRulesWithContext":
		return m.Fake(d.fakeDescribeConfigRulesWithContext)

	case "DescribeConfigurationAggregatorSourcesStatusWithContext":
		return m.Fake(d.fakeDescribeConfigurationAggregatorSourcesStatusWithContext)

	case "DescribeConfigurationAggregatorsWithContext":
		return m.Fake(d.fakeDescribeConfigurationAggregatorsWithContext)

	case "DescribeConfigurationRecorderStatusWithContext":
		return m.Fake(d.fakeDescribeConfigurationRecorderStatusWithContext)

	case "DescribeConfigurationRecordersWithContext":
		return m.Fake(d.fakeDescribeConfigurationRecordersWithContext)

	case "DescribeConformancePackComplianceWithContext":
		return m.Fake(d.fakeDescribeConformancePackComplianceWithContext)

	case "DescribeConformancePackStatusWithContext":
		return m.Fake(d.fakeDescribeConformancePackStatusWithContext)

	case "DescribeConformancePacksWithContext":
		return m.Fake(d.fakeDescribeConformancePacksWithContext)

	case "DescribeDeliveryChannelStatusWithContext":
		return m.Fake(d.fakeDescribeDeliveryChannelStatusWithContext)

	case "DescribeDeliveryChannelsWithContext":
		return m.Fake(d.fakeDescribeDeliveryChannelsWithContext)

	case "DescribeOrganizationConfigRuleStatusesWithContext":
		return m.Fake(d.fakeDescribeOrganizationConfigRuleStatusesWithContext)

	case "DescribeOrganizationConfigRulesWithContext":
		return m.Fake(d.fakeDescribeOrganizationConfigRulesWithContext)

	case "DescribeOrganizationConformancePackStatusesWithContext":
		return m.Fake(d.fakeDescribeOrganizationConformancePackStatusesWithContext)

	case "DescribeOrganizationConformancePacksWithContext":
		return m.Fake(d.fakeDescribeOrganizationConformancePacksWithContext)

	case "DescribePendingAggregationRequestsWithContext":
		return m.Fake(d.fakeDescribePendingAggregationRequestsWithContext)

	case "DescribeRemediationConfigurationsWithContext":
		return m.Fake(d.fakeDescribeRemediationConfigurationsWithContext)

	case "DescribeRemediationExceptionsPages":
		return m.Fake(d.fakeDescribeRemediationExceptionsPages)

	case "DescribeRemediationExceptionsPagesWithContext":
		return m.Fake(d.fakeDescribeRemediationExceptionsPagesWithContext)

	case "DescribeRemediationExceptionsWithContext":
		return m.Fake(d.fakeDescribeRemediationExceptionsWithContext)

	case "DescribeRemediationExecutionStatusPages":
		return m.Fake(d.fakeDescribeRemediationExecutionStatusPages)

	case "DescribeRemediationExecutionStatusPagesWithContext":
		return m.Fake(d.fakeDescribeRemediationExecutionStatusPagesWithContext)

	case "DescribeRemediationExecutionStatusWithContext":
		return m.Fake(d.fakeDescribeRemediationExecutionStatusWithContext)

	case "DescribeRetentionConfigurationsWithContext":
		return m.Fake(d.fakeDescribeRetentionConfigurationsWithContext)

	case "GetAggregateComplianceDetailsByConfigRuleWithContext":
		return m.Fake(d.fakeGetAggregateComplianceDetailsByConfigRuleWithContext)

	case "GetAggregateConfigRuleComplianceSummaryWithContext":
		return m.Fake(d.fakeGetAggregateConfigRuleComplianceSummaryWithContext)

	case "GetAggregateDiscoveredResourceCountsWithContext":
		return m.Fake(d.fakeGetAggregateDiscoveredResourceCountsWithContext)

	case "GetAggregateResourceConfigWithContext":
		return m.Fake(d.fakeGetAggregateResourceConfigWithContext)

	case "GetComplianceDetailsByConfigRuleWithContext":
		return m.Fake(d.fakeGetComplianceDetailsByConfigRuleWithContext)

	case "GetComplianceDetailsByResourceWithContext":
		return m.Fake(d.fakeGetComplianceDetailsByResourceWithContext)

	case "GetComplianceSummaryByConfigRuleWithContext":
		return m.Fake(d.fakeGetComplianceSummaryByConfigRuleWithContext)

	case "GetComplianceSummaryByResourceTypeWithContext":
		return m.Fake(d.fakeGetComplianceSummaryByResourceTypeWithContext)

	case "GetConformancePackComplianceDetailsWithContext":
		return m.Fake(d.fakeGetConformancePackComplianceDetailsWithContext)

	case "GetConformancePackComplianceSummaryWithContext":
		return m.Fake(d.fakeGetConformancePackComplianceSummaryWithContext)

	case "GetDiscoveredResourceCountsWithContext":
		return m.Fake(d.fakeGetDiscoveredResourceCountsWithContext)

	case "GetOrganizationConfigRuleDetailedStatusWithContext":
		return m.Fake(d.fakeGetOrganizationConfigRuleDetailedStatusWithContext)

	case "GetOrganizationConformancePackDetailedStatusWithContext":
		return m.Fake(d.fakeGetOrganizationConformancePackDetailedStatusWithContext)

	case "GetResourceConfigHistoryPages":
		return m.Fake(d.fakeGetResourceConfigHistoryPages)

	case "GetResourceConfigHistoryPagesWithContext":
		return m.Fake(d.fakeGetResourceConfigHistoryPagesWithContext)

	case "GetResourceConfigHistoryWithContext":
		return m.Fake(d.fakeGetResourceConfigHistoryWithContext)

	case "ListAggregateDiscoveredResourcesWithContext":
		return m.Fake(d.fakeListAggregateDiscoveredResourcesWithContext)

	case "ListDiscoveredResourcesWithContext":
		return m.Fake(d.fakeListDiscoveredResourcesWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "PutAggregationAuthorizationWithContext":
		return m.Fake(d.fakePutAggregationAuthorizationWithContext)

	case "PutConfigRuleWithContext":
		return m.Fake(d.fakePutConfigRuleWithContext)

	case "PutConfigurationAggregatorWithContext":
		return m.Fake(d.fakePutConfigurationAggregatorWithContext)

	case "PutConfigurationRecorderWithContext":
		return m.Fake(d.fakePutConfigurationRecorderWithContext)

	case "PutConformancePackWithContext":
		return m.Fake(d.fakePutConformancePackWithContext)

	case "PutDeliveryChannelWithContext":
		return m.Fake(d.fakePutDeliveryChannelWithContext)

	case "PutEvaluationsWithContext":
		return m.Fake(d.fakePutEvaluationsWithContext)

	case "PutOrganizationConfigRuleWithContext":
		return m.Fake(d.fakePutOrganizationConfigRuleWithContext)

	case "PutOrganizationConformancePackWithContext":
		return m.Fake(d.fakePutOrganizationConformancePackWithContext)

	case "PutRemediationConfigurationsWithContext":
		return m.Fake(d.fakePutRemediationConfigurationsWithContext)

	case "PutRemediationExceptionsWithContext":
		return m.Fake(d.fakePutRemediationExceptionsWithContext)

	case "PutResourceConfigWithContext":
		return m.Fake(d.fakePutResourceConfigWithContext)

	case "PutRetentionConfigurationWithContext":
		return m.Fake(d.fakePutRetentionConfigurationWithContext)

	case "SelectResourceConfigWithContext":
		return m.Fake(d.fakeSelectResourceConfigWithContext)

	case "StartConfigRulesEvaluationWithContext":
		return m.Fake(d.fakeStartConfigRulesEvaluationWithContext)

	case "StartConfigurationRecorderWithContext":
		return m.Fake(d.fakeStartConfigurationRecorderWithContext)

	case "StartRemediationExecutionWithContext":
		return m.Fake(d.fakeStartRemediationExecutionWithContext)

	case "StopConfigurationRecorderWithContext":
		return m.Fake(d.fakeStopConfigurationRecorderWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	default:
		return nil
	}
}

func (d *ConfigServiceDouble) BatchGetAggregateResourceConfig(i0 *configservice.BatchGetAggregateResourceConfigInput) (r0 *configservice.BatchGetAggregateResourceConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetAggregateResourceConfig", i0)
	r0, _ = returns[0].(*configservice.BatchGetAggregateResourceConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) BatchGetAggregateResourceConfigRequest(i0 *configservice.BatchGetAggregateResourceConfigInput) (r0 *request.Request, r1 *configservice.BatchGetAggregateResourceConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetAggregateResourceConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.BatchGetAggregateResourceConfigOutput)
	return
}

func (d *ConfigServiceDouble) BatchGetAggregateResourceConfigWithContext(i0 context.Context, i1 *configservice.BatchGetAggregateResourceConfigInput, i2 ...request.Option) (r0 *configservice.BatchGetAggregateResourceConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetAggregateResourceConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.BatchGetAggregateResourceConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeBatchGetAggregateResourceConfigWithContext(ctx context.Context, in *configservice.BatchGetAggregateResourceConfigInput, _ ...request.Option) (*configservice.BatchGetAggregateResourceConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchGetAggregateResourceConfig cancelled", ctx.Err())
	default:
		return d.BatchGetAggregateResourceConfig(in)
	}
}

func (d *ConfigServiceDouble) BatchGetResourceConfig(i0 *configservice.BatchGetResourceConfigInput) (r0 *configservice.BatchGetResourceConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetResourceConfig", i0)
	r0, _ = returns[0].(*configservice.BatchGetResourceConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) BatchGetResourceConfigRequest(i0 *configservice.BatchGetResourceConfigInput) (r0 *request.Request, r1 *configservice.BatchGetResourceConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetResourceConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.BatchGetResourceConfigOutput)
	return
}

func (d *ConfigServiceDouble) BatchGetResourceConfigWithContext(i0 context.Context, i1 *configservice.BatchGetResourceConfigInput, i2 ...request.Option) (r0 *configservice.BatchGetResourceConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetResourceConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.BatchGetResourceConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeBatchGetResourceConfigWithContext(ctx context.Context, in *configservice.BatchGetResourceConfigInput, _ ...request.Option) (*configservice.BatchGetResourceConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchGetResourceConfig cancelled", ctx.Err())
	default:
		return d.BatchGetResourceConfig(in)
	}
}

func (d *ConfigServiceDouble) DeleteAggregationAuthorization(i0 *configservice.DeleteAggregationAuthorizationInput) (r0 *configservice.DeleteAggregationAuthorizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAggregationAuthorization", i0)
	r0, _ = returns[0].(*configservice.DeleteAggregationAuthorizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DeleteAggregationAuthorizationRequest(i0 *configservice.DeleteAggregationAuthorizationInput) (r0 *request.Request, r1 *configservice.DeleteAggregationAuthorizationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAggregationAuthorizationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DeleteAggregationAuthorizationOutput)
	return
}

func (d *ConfigServiceDouble) DeleteAggregationAuthorizationWithContext(i0 context.Context, i1 *configservice.DeleteAggregationAuthorizationInput, i2 ...request.Option) (r0 *configservice.DeleteAggregationAuthorizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAggregationAuthorizationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DeleteAggregationAuthorizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDeleteAggregationAuthorizationWithContext(ctx context.Context, in *configservice.DeleteAggregationAuthorizationInput, _ ...request.Option) (*configservice.DeleteAggregationAuthorizationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteAggregationAuthorization cancelled", ctx.Err())
	default:
		return d.DeleteAggregationAuthorization(in)
	}
}

func (d *ConfigServiceDouble) DeleteConfigRule(i0 *configservice.DeleteConfigRuleInput) (r0 *configservice.DeleteConfigRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteConfigRule", i0)
	r0, _ = returns[0].(*configservice.DeleteConfigRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DeleteConfigRuleRequest(i0 *configservice.DeleteConfigRuleInput) (r0 *request.Request, r1 *configservice.DeleteConfigRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteConfigRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DeleteConfigRuleOutput)
	return
}

func (d *ConfigServiceDouble) DeleteConfigRuleWithContext(i0 context.Context, i1 *configservice.DeleteConfigRuleInput, i2 ...request.Option) (r0 *configservice.DeleteConfigRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteConfigRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DeleteConfigRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDeleteConfigRuleWithContext(ctx context.Context, in *configservice.DeleteConfigRuleInput, _ ...request.Option) (*configservice.DeleteConfigRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteConfigRule cancelled", ctx.Err())
	default:
		return d.DeleteConfigRule(in)
	}
}

func (d *ConfigServiceDouble) DeleteConfigurationAggregator(i0 *configservice.DeleteConfigurationAggregatorInput) (r0 *configservice.DeleteConfigurationAggregatorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteConfigurationAggregator", i0)
	r0, _ = returns[0].(*configservice.DeleteConfigurationAggregatorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DeleteConfigurationAggregatorRequest(i0 *configservice.DeleteConfigurationAggregatorInput) (r0 *request.Request, r1 *configservice.DeleteConfigurationAggregatorOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteConfigurationAggregatorRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DeleteConfigurationAggregatorOutput)
	return
}

func (d *ConfigServiceDouble) DeleteConfigurationAggregatorWithContext(i0 context.Context, i1 *configservice.DeleteConfigurationAggregatorInput, i2 ...request.Option) (r0 *configservice.DeleteConfigurationAggregatorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteConfigurationAggregatorWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DeleteConfigurationAggregatorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDeleteConfigurationAggregatorWithContext(ctx context.Context, in *configservice.DeleteConfigurationAggregatorInput, _ ...request.Option) (*configservice.DeleteConfigurationAggregatorOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteConfigurationAggregator cancelled", ctx.Err())
	default:
		return d.DeleteConfigurationAggregator(in)
	}
}

func (d *ConfigServiceDouble) DeleteConfigurationRecorder(i0 *configservice.DeleteConfigurationRecorderInput) (r0 *configservice.DeleteConfigurationRecorderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteConfigurationRecorder", i0)
	r0, _ = returns[0].(*configservice.DeleteConfigurationRecorderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DeleteConfigurationRecorderRequest(i0 *configservice.DeleteConfigurationRecorderInput) (r0 *request.Request, r1 *configservice.DeleteConfigurationRecorderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteConfigurationRecorderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DeleteConfigurationRecorderOutput)
	return
}

func (d *ConfigServiceDouble) DeleteConfigurationRecorderWithContext(i0 context.Context, i1 *configservice.DeleteConfigurationRecorderInput, i2 ...request.Option) (r0 *configservice.DeleteConfigurationRecorderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteConfigurationRecorderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DeleteConfigurationRecorderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDeleteConfigurationRecorderWithContext(ctx context.Context, in *configservice.DeleteConfigurationRecorderInput, _ ...request.Option) (*configservice.DeleteConfigurationRecorderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteConfigurationRecorder cancelled", ctx.Err())
	default:
		return d.DeleteConfigurationRecorder(in)
	}
}

func (d *ConfigServiceDouble) DeleteConformancePack(i0 *configservice.DeleteConformancePackInput) (r0 *configservice.DeleteConformancePackOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteConformancePack", i0)
	r0, _ = returns[0].(*configservice.DeleteConformancePackOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DeleteConformancePackRequest(i0 *configservice.DeleteConformancePackInput) (r0 *request.Request, r1 *configservice.DeleteConformancePackOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteConformancePackRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DeleteConformancePackOutput)
	return
}

func (d *ConfigServiceDouble) DeleteConformancePackWithContext(i0 context.Context, i1 *configservice.DeleteConformancePackInput, i2 ...request.Option) (r0 *configservice.DeleteConformancePackOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteConformancePackWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DeleteConformancePackOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDeleteConformancePackWithContext(ctx context.Context, in *configservice.DeleteConformancePackInput, _ ...request.Option) (*configservice.DeleteConformancePackOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteConformancePack cancelled", ctx.Err())
	default:
		return d.DeleteConformancePack(in)
	}
}

func (d *ConfigServiceDouble) DeleteDeliveryChannel(i0 *configservice.DeleteDeliveryChannelInput) (r0 *configservice.DeleteDeliveryChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDeliveryChannel", i0)
	r0, _ = returns[0].(*configservice.DeleteDeliveryChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DeleteDeliveryChannelRequest(i0 *configservice.DeleteDeliveryChannelInput) (r0 *request.Request, r1 *configservice.DeleteDeliveryChannelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDeliveryChannelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DeleteDeliveryChannelOutput)
	return
}

func (d *ConfigServiceDouble) DeleteDeliveryChannelWithContext(i0 context.Context, i1 *configservice.DeleteDeliveryChannelInput, i2 ...request.Option) (r0 *configservice.DeleteDeliveryChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDeliveryChannelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DeleteDeliveryChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDeleteDeliveryChannelWithContext(ctx context.Context, in *configservice.DeleteDeliveryChannelInput, _ ...request.Option) (*configservice.DeleteDeliveryChannelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDeliveryChannel cancelled", ctx.Err())
	default:
		return d.DeleteDeliveryChannel(in)
	}
}

func (d *ConfigServiceDouble) DeleteEvaluationResults(i0 *configservice.DeleteEvaluationResultsInput) (r0 *configservice.DeleteEvaluationResultsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEvaluationResults", i0)
	r0, _ = returns[0].(*configservice.DeleteEvaluationResultsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DeleteEvaluationResultsRequest(i0 *configservice.DeleteEvaluationResultsInput) (r0 *request.Request, r1 *configservice.DeleteEvaluationResultsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEvaluationResultsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DeleteEvaluationResultsOutput)
	return
}

func (d *ConfigServiceDouble) DeleteEvaluationResultsWithContext(i0 context.Context, i1 *configservice.DeleteEvaluationResultsInput, i2 ...request.Option) (r0 *configservice.DeleteEvaluationResultsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEvaluationResultsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DeleteEvaluationResultsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDeleteEvaluationResultsWithContext(ctx context.Context, in *configservice.DeleteEvaluationResultsInput, _ ...request.Option) (*configservice.DeleteEvaluationResultsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteEvaluationResults cancelled", ctx.Err())
	default:
		return d.DeleteEvaluationResults(in)
	}
}

func (d *ConfigServiceDouble) DeleteOrganizationConfigRule(i0 *configservice.DeleteOrganizationConfigRuleInput) (r0 *configservice.DeleteOrganizationConfigRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteOrganizationConfigRule", i0)
	r0, _ = returns[0].(*configservice.DeleteOrganizationConfigRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DeleteOrganizationConfigRuleRequest(i0 *configservice.DeleteOrganizationConfigRuleInput) (r0 *request.Request, r1 *configservice.DeleteOrganizationConfigRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteOrganizationConfigRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DeleteOrganizationConfigRuleOutput)
	return
}

func (d *ConfigServiceDouble) DeleteOrganizationConfigRuleWithContext(i0 context.Context, i1 *configservice.DeleteOrganizationConfigRuleInput, i2 ...request.Option) (r0 *configservice.DeleteOrganizationConfigRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteOrganizationConfigRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DeleteOrganizationConfigRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDeleteOrganizationConfigRuleWithContext(ctx context.Context, in *configservice.DeleteOrganizationConfigRuleInput, _ ...request.Option) (*configservice.DeleteOrganizationConfigRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteOrganizationConfigRule cancelled", ctx.Err())
	default:
		return d.DeleteOrganizationConfigRule(in)
	}
}

func (d *ConfigServiceDouble) DeleteOrganizationConformancePack(i0 *configservice.DeleteOrganizationConformancePackInput) (r0 *configservice.DeleteOrganizationConformancePackOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteOrganizationConformancePack", i0)
	r0, _ = returns[0].(*configservice.DeleteOrganizationConformancePackOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DeleteOrganizationConformancePackRequest(i0 *configservice.DeleteOrganizationConformancePackInput) (r0 *request.Request, r1 *configservice.DeleteOrganizationConformancePackOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteOrganizationConformancePackRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DeleteOrganizationConformancePackOutput)
	return
}

func (d *ConfigServiceDouble) DeleteOrganizationConformancePackWithContext(i0 context.Context, i1 *configservice.DeleteOrganizationConformancePackInput, i2 ...request.Option) (r0 *configservice.DeleteOrganizationConformancePackOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteOrganizationConformancePackWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DeleteOrganizationConformancePackOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDeleteOrganizationConformancePackWithContext(ctx context.Context, in *configservice.DeleteOrganizationConformancePackInput, _ ...request.Option) (*configservice.DeleteOrganizationConformancePackOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteOrganizationConformancePack cancelled", ctx.Err())
	default:
		return d.DeleteOrganizationConformancePack(in)
	}
}

func (d *ConfigServiceDouble) DeletePendingAggregationRequest(i0 *configservice.DeletePendingAggregationRequestInput) (r0 *configservice.DeletePendingAggregationRequestOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePendingAggregationRequest", i0)
	r0, _ = returns[0].(*configservice.DeletePendingAggregationRequestOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DeletePendingAggregationRequestRequest(i0 *configservice.DeletePendingAggregationRequestInput) (r0 *request.Request, r1 *configservice.DeletePendingAggregationRequestOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePendingAggregationRequestRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DeletePendingAggregationRequestOutput)
	return
}

func (d *ConfigServiceDouble) DeletePendingAggregationRequestWithContext(i0 context.Context, i1 *configservice.DeletePendingAggregationRequestInput, i2 ...request.Option) (r0 *configservice.DeletePendingAggregationRequestOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePendingAggregationRequestWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DeletePendingAggregationRequestOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDeletePendingAggregationRequestWithContext(ctx context.Context, in *configservice.DeletePendingAggregationRequestInput, _ ...request.Option) (*configservice.DeletePendingAggregationRequestOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeletePendingAggregationRequest cancelled", ctx.Err())
	default:
		return d.DeletePendingAggregationRequest(in)
	}
}

func (d *ConfigServiceDouble) DeleteRemediationConfiguration(i0 *configservice.DeleteRemediationConfigurationInput) (r0 *configservice.DeleteRemediationConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRemediationConfiguration", i0)
	r0, _ = returns[0].(*configservice.DeleteRemediationConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DeleteRemediationConfigurationRequest(i0 *configservice.DeleteRemediationConfigurationInput) (r0 *request.Request, r1 *configservice.DeleteRemediationConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRemediationConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DeleteRemediationConfigurationOutput)
	return
}

func (d *ConfigServiceDouble) DeleteRemediationConfigurationWithContext(i0 context.Context, i1 *configservice.DeleteRemediationConfigurationInput, i2 ...request.Option) (r0 *configservice.DeleteRemediationConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRemediationConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DeleteRemediationConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDeleteRemediationConfigurationWithContext(ctx context.Context, in *configservice.DeleteRemediationConfigurationInput, _ ...request.Option) (*configservice.DeleteRemediationConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRemediationConfiguration cancelled", ctx.Err())
	default:
		return d.DeleteRemediationConfiguration(in)
	}
}

func (d *ConfigServiceDouble) DeleteRemediationExceptions(i0 *configservice.DeleteRemediationExceptionsInput) (r0 *configservice.DeleteRemediationExceptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRemediationExceptions", i0)
	r0, _ = returns[0].(*configservice.DeleteRemediationExceptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DeleteRemediationExceptionsRequest(i0 *configservice.DeleteRemediationExceptionsInput) (r0 *request.Request, r1 *configservice.DeleteRemediationExceptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRemediationExceptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DeleteRemediationExceptionsOutput)
	return
}

func (d *ConfigServiceDouble) DeleteRemediationExceptionsWithContext(i0 context.Context, i1 *configservice.DeleteRemediationExceptionsInput, i2 ...request.Option) (r0 *configservice.DeleteRemediationExceptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRemediationExceptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DeleteRemediationExceptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDeleteRemediationExceptionsWithContext(ctx context.Context, in *configservice.DeleteRemediationExceptionsInput, _ ...request.Option) (*configservice.DeleteRemediationExceptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRemediationExceptions cancelled", ctx.Err())
	default:
		return d.DeleteRemediationExceptions(in)
	}
}

func (d *ConfigServiceDouble) DeleteResourceConfig(i0 *configservice.DeleteResourceConfigInput) (r0 *configservice.DeleteResourceConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResourceConfig", i0)
	r0, _ = returns[0].(*configservice.DeleteResourceConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DeleteResourceConfigRequest(i0 *configservice.DeleteResourceConfigInput) (r0 *request.Request, r1 *configservice.DeleteResourceConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResourceConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DeleteResourceConfigOutput)
	return
}

func (d *ConfigServiceDouble) DeleteResourceConfigWithContext(i0 context.Context, i1 *configservice.DeleteResourceConfigInput, i2 ...request.Option) (r0 *configservice.DeleteResourceConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResourceConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DeleteResourceConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDeleteResourceConfigWithContext(ctx context.Context, in *configservice.DeleteResourceConfigInput, _ ...request.Option) (*configservice.DeleteResourceConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteResourceConfig cancelled", ctx.Err())
	default:
		return d.DeleteResourceConfig(in)
	}
}

func (d *ConfigServiceDouble) DeleteRetentionConfiguration(i0 *configservice.DeleteRetentionConfigurationInput) (r0 *configservice.DeleteRetentionConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRetentionConfiguration", i0)
	r0, _ = returns[0].(*configservice.DeleteRetentionConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DeleteRetentionConfigurationRequest(i0 *configservice.DeleteRetentionConfigurationInput) (r0 *request.Request, r1 *configservice.DeleteRetentionConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRetentionConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DeleteRetentionConfigurationOutput)
	return
}

func (d *ConfigServiceDouble) DeleteRetentionConfigurationWithContext(i0 context.Context, i1 *configservice.DeleteRetentionConfigurationInput, i2 ...request.Option) (r0 *configservice.DeleteRetentionConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRetentionConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DeleteRetentionConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDeleteRetentionConfigurationWithContext(ctx context.Context, in *configservice.DeleteRetentionConfigurationInput, _ ...request.Option) (*configservice.DeleteRetentionConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRetentionConfiguration cancelled", ctx.Err())
	default:
		return d.DeleteRetentionConfiguration(in)
	}
}

func (d *ConfigServiceDouble) DeliverConfigSnapshot(i0 *configservice.DeliverConfigSnapshotInput) (r0 *configservice.DeliverConfigSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeliverConfigSnapshot", i0)
	r0, _ = returns[0].(*configservice.DeliverConfigSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DeliverConfigSnapshotRequest(i0 *configservice.DeliverConfigSnapshotInput) (r0 *request.Request, r1 *configservice.DeliverConfigSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeliverConfigSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DeliverConfigSnapshotOutput)
	return
}

func (d *ConfigServiceDouble) DeliverConfigSnapshotWithContext(i0 context.Context, i1 *configservice.DeliverConfigSnapshotInput, i2 ...request.Option) (r0 *configservice.DeliverConfigSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeliverConfigSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DeliverConfigSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDeliverConfigSnapshotWithContext(ctx context.Context, in *configservice.DeliverConfigSnapshotInput, _ ...request.Option) (*configservice.DeliverConfigSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeliverConfigSnapshot cancelled", ctx.Err())
	default:
		return d.DeliverConfigSnapshot(in)
	}
}

func (d *ConfigServiceDouble) DescribeAggregateComplianceByConfigRules(i0 *configservice.DescribeAggregateComplianceByConfigRulesInput) (r0 *configservice.DescribeAggregateComplianceByConfigRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAggregateComplianceByConfigRules", i0)
	r0, _ = returns[0].(*configservice.DescribeAggregateComplianceByConfigRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DescribeAggregateComplianceByConfigRulesRequest(i0 *configservice.DescribeAggregateComplianceByConfigRulesInput) (r0 *request.Request, r1 *configservice.DescribeAggregateComplianceByConfigRulesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAggregateComplianceByConfigRulesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DescribeAggregateComplianceByConfigRulesOutput)
	return
}

func (d *ConfigServiceDouble) DescribeAggregateComplianceByConfigRulesWithContext(i0 context.Context, i1 *configservice.DescribeAggregateComplianceByConfigRulesInput, i2 ...request.Option) (r0 *configservice.DescribeAggregateComplianceByConfigRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAggregateComplianceByConfigRulesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DescribeAggregateComplianceByConfigRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDescribeAggregateComplianceByConfigRulesWithContext(ctx context.Context, in *configservice.DescribeAggregateComplianceByConfigRulesInput, _ ...request.Option) (*configservice.DescribeAggregateComplianceByConfigRulesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAggregateComplianceByConfigRules cancelled", ctx.Err())
	default:
		return d.DescribeAggregateComplianceByConfigRules(in)
	}
}

func (d *ConfigServiceDouble) DescribeAggregationAuthorizations(i0 *configservice.DescribeAggregationAuthorizationsInput) (r0 *configservice.DescribeAggregationAuthorizationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAggregationAuthorizations", i0)
	r0, _ = returns[0].(*configservice.DescribeAggregationAuthorizationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DescribeAggregationAuthorizationsRequest(i0 *configservice.DescribeAggregationAuthorizationsInput) (r0 *request.Request, r1 *configservice.DescribeAggregationAuthorizationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAggregationAuthorizationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DescribeAggregationAuthorizationsOutput)
	return
}

func (d *ConfigServiceDouble) DescribeAggregationAuthorizationsWithContext(i0 context.Context, i1 *configservice.DescribeAggregationAuthorizationsInput, i2 ...request.Option) (r0 *configservice.DescribeAggregationAuthorizationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAggregationAuthorizationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DescribeAggregationAuthorizationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDescribeAggregationAuthorizationsWithContext(ctx context.Context, in *configservice.DescribeAggregationAuthorizationsInput, _ ...request.Option) (*configservice.DescribeAggregationAuthorizationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAggregationAuthorizations cancelled", ctx.Err())
	default:
		return d.DescribeAggregationAuthorizations(in)
	}
}

func (d *ConfigServiceDouble) DescribeComplianceByConfigRule(i0 *configservice.DescribeComplianceByConfigRuleInput) (r0 *configservice.DescribeComplianceByConfigRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeComplianceByConfigRule", i0)
	r0, _ = returns[0].(*configservice.DescribeComplianceByConfigRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DescribeComplianceByConfigRuleRequest(i0 *configservice.DescribeComplianceByConfigRuleInput) (r0 *request.Request, r1 *configservice.DescribeComplianceByConfigRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeComplianceByConfigRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DescribeComplianceByConfigRuleOutput)
	return
}

func (d *ConfigServiceDouble) DescribeComplianceByConfigRuleWithContext(i0 context.Context, i1 *configservice.DescribeComplianceByConfigRuleInput, i2 ...request.Option) (r0 *configservice.DescribeComplianceByConfigRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeComplianceByConfigRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DescribeComplianceByConfigRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDescribeComplianceByConfigRuleWithContext(ctx context.Context, in *configservice.DescribeComplianceByConfigRuleInput, _ ...request.Option) (*configservice.DescribeComplianceByConfigRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeComplianceByConfigRule cancelled", ctx.Err())
	default:
		return d.DescribeComplianceByConfigRule(in)
	}
}

func (d *ConfigServiceDouble) DescribeComplianceByResource(i0 *configservice.DescribeComplianceByResourceInput) (r0 *configservice.DescribeComplianceByResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeComplianceByResource", i0)
	r0, _ = returns[0].(*configservice.DescribeComplianceByResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DescribeComplianceByResourceRequest(i0 *configservice.DescribeComplianceByResourceInput) (r0 *request.Request, r1 *configservice.DescribeComplianceByResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeComplianceByResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DescribeComplianceByResourceOutput)
	return
}

func (d *ConfigServiceDouble) DescribeComplianceByResourceWithContext(i0 context.Context, i1 *configservice.DescribeComplianceByResourceInput, i2 ...request.Option) (r0 *configservice.DescribeComplianceByResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeComplianceByResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DescribeComplianceByResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDescribeComplianceByResourceWithContext(ctx context.Context, in *configservice.DescribeComplianceByResourceInput, _ ...request.Option) (*configservice.DescribeComplianceByResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeComplianceByResource cancelled", ctx.Err())
	default:
		return d.DescribeComplianceByResource(in)
	}
}

func (d *ConfigServiceDouble) DescribeConfigRuleEvaluationStatus(i0 *configservice.DescribeConfigRuleEvaluationStatusInput) (r0 *configservice.DescribeConfigRuleEvaluationStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConfigRuleEvaluationStatus", i0)
	r0, _ = returns[0].(*configservice.DescribeConfigRuleEvaluationStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DescribeConfigRuleEvaluationStatusRequest(i0 *configservice.DescribeConfigRuleEvaluationStatusInput) (r0 *request.Request, r1 *configservice.DescribeConfigRuleEvaluationStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConfigRuleEvaluationStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DescribeConfigRuleEvaluationStatusOutput)
	return
}

func (d *ConfigServiceDouble) DescribeConfigRuleEvaluationStatusWithContext(i0 context.Context, i1 *configservice.DescribeConfigRuleEvaluationStatusInput, i2 ...request.Option) (r0 *configservice.DescribeConfigRuleEvaluationStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConfigRuleEvaluationStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DescribeConfigRuleEvaluationStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDescribeConfigRuleEvaluationStatusWithContext(ctx context.Context, in *configservice.DescribeConfigRuleEvaluationStatusInput, _ ...request.Option) (*configservice.DescribeConfigRuleEvaluationStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeConfigRuleEvaluationStatus cancelled", ctx.Err())
	default:
		return d.DescribeConfigRuleEvaluationStatus(in)
	}
}

func (d *ConfigServiceDouble) DescribeConfigRules(i0 *configservice.DescribeConfigRulesInput) (r0 *configservice.DescribeConfigRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConfigRules", i0)
	r0, _ = returns[0].(*configservice.DescribeConfigRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DescribeConfigRulesRequest(i0 *configservice.DescribeConfigRulesInput) (r0 *request.Request, r1 *configservice.DescribeConfigRulesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConfigRulesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DescribeConfigRulesOutput)
	return
}

func (d *ConfigServiceDouble) DescribeConfigRulesWithContext(i0 context.Context, i1 *configservice.DescribeConfigRulesInput, i2 ...request.Option) (r0 *configservice.DescribeConfigRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConfigRulesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DescribeConfigRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDescribeConfigRulesWithContext(ctx context.Context, in *configservice.DescribeConfigRulesInput, _ ...request.Option) (*configservice.DescribeConfigRulesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeConfigRules cancelled", ctx.Err())
	default:
		return d.DescribeConfigRules(in)
	}
}

func (d *ConfigServiceDouble) DescribeConfigurationAggregatorSourcesStatus(i0 *configservice.DescribeConfigurationAggregatorSourcesStatusInput) (r0 *configservice.DescribeConfigurationAggregatorSourcesStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConfigurationAggregatorSourcesStatus", i0)
	r0, _ = returns[0].(*configservice.DescribeConfigurationAggregatorSourcesStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DescribeConfigurationAggregatorSourcesStatusRequest(i0 *configservice.DescribeConfigurationAggregatorSourcesStatusInput) (r0 *request.Request, r1 *configservice.DescribeConfigurationAggregatorSourcesStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConfigurationAggregatorSourcesStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DescribeConfigurationAggregatorSourcesStatusOutput)
	return
}

func (d *ConfigServiceDouble) DescribeConfigurationAggregatorSourcesStatusWithContext(i0 context.Context, i1 *configservice.DescribeConfigurationAggregatorSourcesStatusInput, i2 ...request.Option) (r0 *configservice.DescribeConfigurationAggregatorSourcesStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConfigurationAggregatorSourcesStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DescribeConfigurationAggregatorSourcesStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDescribeConfigurationAggregatorSourcesStatusWithContext(ctx context.Context, in *configservice.DescribeConfigurationAggregatorSourcesStatusInput, _ ...request.Option) (*configservice.DescribeConfigurationAggregatorSourcesStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeConfigurationAggregatorSourcesStatus cancelled", ctx.Err())
	default:
		return d.DescribeConfigurationAggregatorSourcesStatus(in)
	}
}

func (d *ConfigServiceDouble) DescribeConfigurationAggregators(i0 *configservice.DescribeConfigurationAggregatorsInput) (r0 *configservice.DescribeConfigurationAggregatorsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConfigurationAggregators", i0)
	r0, _ = returns[0].(*configservice.DescribeConfigurationAggregatorsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DescribeConfigurationAggregatorsRequest(i0 *configservice.DescribeConfigurationAggregatorsInput) (r0 *request.Request, r1 *configservice.DescribeConfigurationAggregatorsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConfigurationAggregatorsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DescribeConfigurationAggregatorsOutput)
	return
}

func (d *ConfigServiceDouble) DescribeConfigurationAggregatorsWithContext(i0 context.Context, i1 *configservice.DescribeConfigurationAggregatorsInput, i2 ...request.Option) (r0 *configservice.DescribeConfigurationAggregatorsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConfigurationAggregatorsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DescribeConfigurationAggregatorsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDescribeConfigurationAggregatorsWithContext(ctx context.Context, in *configservice.DescribeConfigurationAggregatorsInput, _ ...request.Option) (*configservice.DescribeConfigurationAggregatorsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeConfigurationAggregators cancelled", ctx.Err())
	default:
		return d.DescribeConfigurationAggregators(in)
	}
}

func (d *ConfigServiceDouble) DescribeConfigurationRecorderStatus(i0 *configservice.DescribeConfigurationRecorderStatusInput) (r0 *configservice.DescribeConfigurationRecorderStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConfigurationRecorderStatus", i0)
	r0, _ = returns[0].(*configservice.DescribeConfigurationRecorderStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DescribeConfigurationRecorderStatusRequest(i0 *configservice.DescribeConfigurationRecorderStatusInput) (r0 *request.Request, r1 *configservice.DescribeConfigurationRecorderStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConfigurationRecorderStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DescribeConfigurationRecorderStatusOutput)
	return
}

func (d *ConfigServiceDouble) DescribeConfigurationRecorderStatusWithContext(i0 context.Context, i1 *configservice.DescribeConfigurationRecorderStatusInput, i2 ...request.Option) (r0 *configservice.DescribeConfigurationRecorderStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConfigurationRecorderStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DescribeConfigurationRecorderStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDescribeConfigurationRecorderStatusWithContext(ctx context.Context, in *configservice.DescribeConfigurationRecorderStatusInput, _ ...request.Option) (*configservice.DescribeConfigurationRecorderStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeConfigurationRecorderStatus cancelled", ctx.Err())
	default:
		return d.DescribeConfigurationRecorderStatus(in)
	}
}

func (d *ConfigServiceDouble) DescribeConfigurationRecorders(i0 *configservice.DescribeConfigurationRecordersInput) (r0 *configservice.DescribeConfigurationRecordersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConfigurationRecorders", i0)
	r0, _ = returns[0].(*configservice.DescribeConfigurationRecordersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DescribeConfigurationRecordersRequest(i0 *configservice.DescribeConfigurationRecordersInput) (r0 *request.Request, r1 *configservice.DescribeConfigurationRecordersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConfigurationRecordersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DescribeConfigurationRecordersOutput)
	return
}

func (d *ConfigServiceDouble) DescribeConfigurationRecordersWithContext(i0 context.Context, i1 *configservice.DescribeConfigurationRecordersInput, i2 ...request.Option) (r0 *configservice.DescribeConfigurationRecordersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConfigurationRecordersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DescribeConfigurationRecordersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDescribeConfigurationRecordersWithContext(ctx context.Context, in *configservice.DescribeConfigurationRecordersInput, _ ...request.Option) (*configservice.DescribeConfigurationRecordersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeConfigurationRecorders cancelled", ctx.Err())
	default:
		return d.DescribeConfigurationRecorders(in)
	}
}

func (d *ConfigServiceDouble) DescribeConformancePackCompliance(i0 *configservice.DescribeConformancePackComplianceInput) (r0 *configservice.DescribeConformancePackComplianceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConformancePackCompliance", i0)
	r0, _ = returns[0].(*configservice.DescribeConformancePackComplianceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DescribeConformancePackComplianceRequest(i0 *configservice.DescribeConformancePackComplianceInput) (r0 *request.Request, r1 *configservice.DescribeConformancePackComplianceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConformancePackComplianceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DescribeConformancePackComplianceOutput)
	return
}

func (d *ConfigServiceDouble) DescribeConformancePackComplianceWithContext(i0 context.Context, i1 *configservice.DescribeConformancePackComplianceInput, i2 ...request.Option) (r0 *configservice.DescribeConformancePackComplianceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConformancePackComplianceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DescribeConformancePackComplianceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDescribeConformancePackComplianceWithContext(ctx context.Context, in *configservice.DescribeConformancePackComplianceInput, _ ...request.Option) (*configservice.DescribeConformancePackComplianceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeConformancePackCompliance cancelled", ctx.Err())
	default:
		return d.DescribeConformancePackCompliance(in)
	}
}

func (d *ConfigServiceDouble) DescribeConformancePackStatus(i0 *configservice.DescribeConformancePackStatusInput) (r0 *configservice.DescribeConformancePackStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConformancePackStatus", i0)
	r0, _ = returns[0].(*configservice.DescribeConformancePackStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DescribeConformancePackStatusRequest(i0 *configservice.DescribeConformancePackStatusInput) (r0 *request.Request, r1 *configservice.DescribeConformancePackStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConformancePackStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DescribeConformancePackStatusOutput)
	return
}

func (d *ConfigServiceDouble) DescribeConformancePackStatusWithContext(i0 context.Context, i1 *configservice.DescribeConformancePackStatusInput, i2 ...request.Option) (r0 *configservice.DescribeConformancePackStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConformancePackStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DescribeConformancePackStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDescribeConformancePackStatusWithContext(ctx context.Context, in *configservice.DescribeConformancePackStatusInput, _ ...request.Option) (*configservice.DescribeConformancePackStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeConformancePackStatus cancelled", ctx.Err())
	default:
		return d.DescribeConformancePackStatus(in)
	}
}

func (d *ConfigServiceDouble) DescribeConformancePacks(i0 *configservice.DescribeConformancePacksInput) (r0 *configservice.DescribeConformancePacksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConformancePacks", i0)
	r0, _ = returns[0].(*configservice.DescribeConformancePacksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DescribeConformancePacksRequest(i0 *configservice.DescribeConformancePacksInput) (r0 *request.Request, r1 *configservice.DescribeConformancePacksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConformancePacksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DescribeConformancePacksOutput)
	return
}

func (d *ConfigServiceDouble) DescribeConformancePacksWithContext(i0 context.Context, i1 *configservice.DescribeConformancePacksInput, i2 ...request.Option) (r0 *configservice.DescribeConformancePacksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConformancePacksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DescribeConformancePacksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDescribeConformancePacksWithContext(ctx context.Context, in *configservice.DescribeConformancePacksInput, _ ...request.Option) (*configservice.DescribeConformancePacksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeConformancePacks cancelled", ctx.Err())
	default:
		return d.DescribeConformancePacks(in)
	}
}

func (d *ConfigServiceDouble) DescribeDeliveryChannelStatus(i0 *configservice.DescribeDeliveryChannelStatusInput) (r0 *configservice.DescribeDeliveryChannelStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDeliveryChannelStatus", i0)
	r0, _ = returns[0].(*configservice.DescribeDeliveryChannelStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DescribeDeliveryChannelStatusRequest(i0 *configservice.DescribeDeliveryChannelStatusInput) (r0 *request.Request, r1 *configservice.DescribeDeliveryChannelStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDeliveryChannelStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DescribeDeliveryChannelStatusOutput)
	return
}

func (d *ConfigServiceDouble) DescribeDeliveryChannelStatusWithContext(i0 context.Context, i1 *configservice.DescribeDeliveryChannelStatusInput, i2 ...request.Option) (r0 *configservice.DescribeDeliveryChannelStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDeliveryChannelStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DescribeDeliveryChannelStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDescribeDeliveryChannelStatusWithContext(ctx context.Context, in *configservice.DescribeDeliveryChannelStatusInput, _ ...request.Option) (*configservice.DescribeDeliveryChannelStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDeliveryChannelStatus cancelled", ctx.Err())
	default:
		return d.DescribeDeliveryChannelStatus(in)
	}
}

func (d *ConfigServiceDouble) DescribeDeliveryChannels(i0 *configservice.DescribeDeliveryChannelsInput) (r0 *configservice.DescribeDeliveryChannelsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDeliveryChannels", i0)
	r0, _ = returns[0].(*configservice.DescribeDeliveryChannelsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DescribeDeliveryChannelsRequest(i0 *configservice.DescribeDeliveryChannelsInput) (r0 *request.Request, r1 *configservice.DescribeDeliveryChannelsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDeliveryChannelsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DescribeDeliveryChannelsOutput)
	return
}

func (d *ConfigServiceDouble) DescribeDeliveryChannelsWithContext(i0 context.Context, i1 *configservice.DescribeDeliveryChannelsInput, i2 ...request.Option) (r0 *configservice.DescribeDeliveryChannelsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDeliveryChannelsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DescribeDeliveryChannelsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDescribeDeliveryChannelsWithContext(ctx context.Context, in *configservice.DescribeDeliveryChannelsInput, _ ...request.Option) (*configservice.DescribeDeliveryChannelsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDeliveryChannels cancelled", ctx.Err())
	default:
		return d.DescribeDeliveryChannels(in)
	}
}

func (d *ConfigServiceDouble) DescribeOrganizationConfigRuleStatuses(i0 *configservice.DescribeOrganizationConfigRuleStatusesInput) (r0 *configservice.DescribeOrganizationConfigRuleStatusesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrganizationConfigRuleStatuses", i0)
	r0, _ = returns[0].(*configservice.DescribeOrganizationConfigRuleStatusesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DescribeOrganizationConfigRuleStatusesRequest(i0 *configservice.DescribeOrganizationConfigRuleStatusesInput) (r0 *request.Request, r1 *configservice.DescribeOrganizationConfigRuleStatusesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrganizationConfigRuleStatusesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DescribeOrganizationConfigRuleStatusesOutput)
	return
}

func (d *ConfigServiceDouble) DescribeOrganizationConfigRuleStatusesWithContext(i0 context.Context, i1 *configservice.DescribeOrganizationConfigRuleStatusesInput, i2 ...request.Option) (r0 *configservice.DescribeOrganizationConfigRuleStatusesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrganizationConfigRuleStatusesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DescribeOrganizationConfigRuleStatusesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDescribeOrganizationConfigRuleStatusesWithContext(ctx context.Context, in *configservice.DescribeOrganizationConfigRuleStatusesInput, _ ...request.Option) (*configservice.DescribeOrganizationConfigRuleStatusesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeOrganizationConfigRuleStatuses cancelled", ctx.Err())
	default:
		return d.DescribeOrganizationConfigRuleStatuses(in)
	}
}

func (d *ConfigServiceDouble) DescribeOrganizationConfigRules(i0 *configservice.DescribeOrganizationConfigRulesInput) (r0 *configservice.DescribeOrganizationConfigRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrganizationConfigRules", i0)
	r0, _ = returns[0].(*configservice.DescribeOrganizationConfigRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DescribeOrganizationConfigRulesRequest(i0 *configservice.DescribeOrganizationConfigRulesInput) (r0 *request.Request, r1 *configservice.DescribeOrganizationConfigRulesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrganizationConfigRulesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DescribeOrganizationConfigRulesOutput)
	return
}

func (d *ConfigServiceDouble) DescribeOrganizationConfigRulesWithContext(i0 context.Context, i1 *configservice.DescribeOrganizationConfigRulesInput, i2 ...request.Option) (r0 *configservice.DescribeOrganizationConfigRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrganizationConfigRulesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DescribeOrganizationConfigRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDescribeOrganizationConfigRulesWithContext(ctx context.Context, in *configservice.DescribeOrganizationConfigRulesInput, _ ...request.Option) (*configservice.DescribeOrganizationConfigRulesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeOrganizationConfigRules cancelled", ctx.Err())
	default:
		return d.DescribeOrganizationConfigRules(in)
	}
}

func (d *ConfigServiceDouble) DescribeOrganizationConformancePackStatuses(i0 *configservice.DescribeOrganizationConformancePackStatusesInput) (r0 *configservice.DescribeOrganizationConformancePackStatusesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrganizationConformancePackStatuses", i0)
	r0, _ = returns[0].(*configservice.DescribeOrganizationConformancePackStatusesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DescribeOrganizationConformancePackStatusesRequest(i0 *configservice.DescribeOrganizationConformancePackStatusesInput) (r0 *request.Request, r1 *configservice.DescribeOrganizationConformancePackStatusesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrganizationConformancePackStatusesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DescribeOrganizationConformancePackStatusesOutput)
	return
}

func (d *ConfigServiceDouble) DescribeOrganizationConformancePackStatusesWithContext(i0 context.Context, i1 *configservice.DescribeOrganizationConformancePackStatusesInput, i2 ...request.Option) (r0 *configservice.DescribeOrganizationConformancePackStatusesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrganizationConformancePackStatusesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DescribeOrganizationConformancePackStatusesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDescribeOrganizationConformancePackStatusesWithContext(ctx context.Context, in *configservice.DescribeOrganizationConformancePackStatusesInput, _ ...request.Option) (*configservice.DescribeOrganizationConformancePackStatusesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeOrganizationConformancePackStatuses cancelled", ctx.Err())
	default:
		return d.DescribeOrganizationConformancePackStatuses(in)
	}
}

func (d *ConfigServiceDouble) DescribeOrganizationConformancePacks(i0 *configservice.DescribeOrganizationConformancePacksInput) (r0 *configservice.DescribeOrganizationConformancePacksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrganizationConformancePacks", i0)
	r0, _ = returns[0].(*configservice.DescribeOrganizationConformancePacksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DescribeOrganizationConformancePacksRequest(i0 *configservice.DescribeOrganizationConformancePacksInput) (r0 *request.Request, r1 *configservice.DescribeOrganizationConformancePacksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrganizationConformancePacksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DescribeOrganizationConformancePacksOutput)
	return
}

func (d *ConfigServiceDouble) DescribeOrganizationConformancePacksWithContext(i0 context.Context, i1 *configservice.DescribeOrganizationConformancePacksInput, i2 ...request.Option) (r0 *configservice.DescribeOrganizationConformancePacksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrganizationConformancePacksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DescribeOrganizationConformancePacksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDescribeOrganizationConformancePacksWithContext(ctx context.Context, in *configservice.DescribeOrganizationConformancePacksInput, _ ...request.Option) (*configservice.DescribeOrganizationConformancePacksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeOrganizationConformancePacks cancelled", ctx.Err())
	default:
		return d.DescribeOrganizationConformancePacks(in)
	}
}

func (d *ConfigServiceDouble) DescribePendingAggregationRequests(i0 *configservice.DescribePendingAggregationRequestsInput) (r0 *configservice.DescribePendingAggregationRequestsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePendingAggregationRequests", i0)
	r0, _ = returns[0].(*configservice.DescribePendingAggregationRequestsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DescribePendingAggregationRequestsRequest(i0 *configservice.DescribePendingAggregationRequestsInput) (r0 *request.Request, r1 *configservice.DescribePendingAggregationRequestsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePendingAggregationRequestsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DescribePendingAggregationRequestsOutput)
	return
}

func (d *ConfigServiceDouble) DescribePendingAggregationRequestsWithContext(i0 context.Context, i1 *configservice.DescribePendingAggregationRequestsInput, i2 ...request.Option) (r0 *configservice.DescribePendingAggregationRequestsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePendingAggregationRequestsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DescribePendingAggregationRequestsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDescribePendingAggregationRequestsWithContext(ctx context.Context, in *configservice.DescribePendingAggregationRequestsInput, _ ...request.Option) (*configservice.DescribePendingAggregationRequestsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribePendingAggregationRequests cancelled", ctx.Err())
	default:
		return d.DescribePendingAggregationRequests(in)
	}
}

func (d *ConfigServiceDouble) DescribeRemediationConfigurations(i0 *configservice.DescribeRemediationConfigurationsInput) (r0 *configservice.DescribeRemediationConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRemediationConfigurations", i0)
	r0, _ = returns[0].(*configservice.DescribeRemediationConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DescribeRemediationConfigurationsRequest(i0 *configservice.DescribeRemediationConfigurationsInput) (r0 *request.Request, r1 *configservice.DescribeRemediationConfigurationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRemediationConfigurationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DescribeRemediationConfigurationsOutput)
	return
}

func (d *ConfigServiceDouble) DescribeRemediationConfigurationsWithContext(i0 context.Context, i1 *configservice.DescribeRemediationConfigurationsInput, i2 ...request.Option) (r0 *configservice.DescribeRemediationConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRemediationConfigurationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DescribeRemediationConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDescribeRemediationConfigurationsWithContext(ctx context.Context, in *configservice.DescribeRemediationConfigurationsInput, _ ...request.Option) (*configservice.DescribeRemediationConfigurationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeRemediationConfigurations cancelled", ctx.Err())
	default:
		return d.DescribeRemediationConfigurations(in)
	}
}

func (d *ConfigServiceDouble) DescribeRemediationExceptions(i0 *configservice.DescribeRemediationExceptionsInput) (r0 *configservice.DescribeRemediationExceptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRemediationExceptions", i0)
	r0, _ = returns[0].(*configservice.DescribeRemediationExceptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DescribeRemediationExceptionsPages(i0 *configservice.DescribeRemediationExceptionsInput, i1 func(*configservice.DescribeRemediationExceptionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRemediationExceptionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ConfigServiceDouble) fakeDescribeRemediationExceptionsPages(in *configservice.DescribeRemediationExceptionsInput, pager func(*configservice.DescribeRemediationExceptionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeRemediationExceptions", paginators, in, pager)
}

func (d *ConfigServiceDouble) DescribeRemediationExceptionsPagesWithContext(i0 context.Context, i1 *configservice.DescribeRemediationExceptionsInput, i2 func(*configservice.DescribeRemediationExceptionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRemediationExceptionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ConfigServiceDouble) fakeDescribeRemediationExceptionsPagesWithContext(ctx context.Context, in *configservice.DescribeRemediationExceptionsInput, pager func(*configservice.DescribeRemediationExceptionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeRemediationExceptions", paginators, ctx, in, pager, options...)
}

func (d *ConfigServiceDouble) DescribeRemediationExceptionsRequest(i0 *configservice.DescribeRemediationExceptionsInput) (r0 *request.Request, r1 *configservice.DescribeRemediationExceptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRemediationExceptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DescribeRemediationExceptionsOutput)
	return
}

func (d *ConfigServiceDouble) DescribeRemediationExceptionsWithContext(i0 context.Context, i1 *configservice.DescribeRemediationExceptionsInput, i2 ...request.Option) (r0 *configservice.DescribeRemediationExceptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRemediationExceptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DescribeRemediationExceptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDescribeRemediationExceptionsWithContext(ctx context.Context, in *configservice.DescribeRemediationExceptionsInput, _ ...request.Option) (*configservice.DescribeRemediationExceptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeRemediationExceptions cancelled", ctx.Err())
	default:
		return d.DescribeRemediationExceptions(in)
	}
}

func (d *ConfigServiceDouble) DescribeRemediationExecutionStatus(i0 *configservice.DescribeRemediationExecutionStatusInput) (r0 *configservice.DescribeRemediationExecutionStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRemediationExecutionStatus", i0)
	r0, _ = returns[0].(*configservice.DescribeRemediationExecutionStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DescribeRemediationExecutionStatusPages(i0 *configservice.DescribeRemediationExecutionStatusInput, i1 func(*configservice.DescribeRemediationExecutionStatusOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRemediationExecutionStatusPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ConfigServiceDouble) fakeDescribeRemediationExecutionStatusPages(in *configservice.DescribeRemediationExecutionStatusInput, pager func(*configservice.DescribeRemediationExecutionStatusOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeRemediationExecutionStatus", paginators, in, pager)
}

func (d *ConfigServiceDouble) DescribeRemediationExecutionStatusPagesWithContext(i0 context.Context, i1 *configservice.DescribeRemediationExecutionStatusInput, i2 func(*configservice.DescribeRemediationExecutionStatusOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRemediationExecutionStatusPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ConfigServiceDouble) fakeDescribeRemediationExecutionStatusPagesWithContext(ctx context.Context, in *configservice.DescribeRemediationExecutionStatusInput, pager func(*configservice.DescribeRemediationExecutionStatusOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeRemediationExecutionStatus", paginators, ctx, in, pager, options...)
}

func (d *ConfigServiceDouble) DescribeRemediationExecutionStatusRequest(i0 *configservice.DescribeRemediationExecutionStatusInput) (r0 *request.Request, r1 *configservice.DescribeRemediationExecutionStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRemediationExecutionStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DescribeRemediationExecutionStatusOutput)
	return
}

func (d *ConfigServiceDouble) DescribeRemediationExecutionStatusWithContext(i0 context.Context, i1 *configservice.DescribeRemediationExecutionStatusInput, i2 ...request.Option) (r0 *configservice.DescribeRemediationExecutionStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRemediationExecutionStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DescribeRemediationExecutionStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDescribeRemediationExecutionStatusWithContext(ctx context.Context, in *configservice.DescribeRemediationExecutionStatusInput, _ ...request.Option) (*configservice.DescribeRemediationExecutionStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeRemediationExecutionStatus cancelled", ctx.Err())
	default:
		return d.DescribeRemediationExecutionStatus(in)
	}
}

func (d *ConfigServiceDouble) DescribeRetentionConfigurations(i0 *configservice.DescribeRetentionConfigurationsInput) (r0 *configservice.DescribeRetentionConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRetentionConfigurations", i0)
	r0, _ = returns[0].(*configservice.DescribeRetentionConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) DescribeRetentionConfigurationsRequest(i0 *configservice.DescribeRetentionConfigurationsInput) (r0 *request.Request, r1 *configservice.DescribeRetentionConfigurationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRetentionConfigurationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.DescribeRetentionConfigurationsOutput)
	return
}

func (d *ConfigServiceDouble) DescribeRetentionConfigurationsWithContext(i0 context.Context, i1 *configservice.DescribeRetentionConfigurationsInput, i2 ...request.Option) (r0 *configservice.DescribeRetentionConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRetentionConfigurationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.DescribeRetentionConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeDescribeRetentionConfigurationsWithContext(ctx context.Context, in *configservice.DescribeRetentionConfigurationsInput, _ ...request.Option) (*configservice.DescribeRetentionConfigurationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeRetentionConfigurations cancelled", ctx.Err())
	default:
		return d.DescribeRetentionConfigurations(in)
	}
}

func (d *ConfigServiceDouble) GetAggregateComplianceDetailsByConfigRule(i0 *configservice.GetAggregateComplianceDetailsByConfigRuleInput) (r0 *configservice.GetAggregateComplianceDetailsByConfigRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAggregateComplianceDetailsByConfigRule", i0)
	r0, _ = returns[0].(*configservice.GetAggregateComplianceDetailsByConfigRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) GetAggregateComplianceDetailsByConfigRuleRequest(i0 *configservice.GetAggregateComplianceDetailsByConfigRuleInput) (r0 *request.Request, r1 *configservice.GetAggregateComplianceDetailsByConfigRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAggregateComplianceDetailsByConfigRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.GetAggregateComplianceDetailsByConfigRuleOutput)
	return
}

func (d *ConfigServiceDouble) GetAggregateComplianceDetailsByConfigRuleWithContext(i0 context.Context, i1 *configservice.GetAggregateComplianceDetailsByConfigRuleInput, i2 ...request.Option) (r0 *configservice.GetAggregateComplianceDetailsByConfigRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAggregateComplianceDetailsByConfigRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.GetAggregateComplianceDetailsByConfigRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeGetAggregateComplianceDetailsByConfigRuleWithContext(ctx context.Context, in *configservice.GetAggregateComplianceDetailsByConfigRuleInput, _ ...request.Option) (*configservice.GetAggregateComplianceDetailsByConfigRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetAggregateComplianceDetailsByConfigRule cancelled", ctx.Err())
	default:
		return d.GetAggregateComplianceDetailsByConfigRule(in)
	}
}

func (d *ConfigServiceDouble) GetAggregateConfigRuleComplianceSummary(i0 *configservice.GetAggregateConfigRuleComplianceSummaryInput) (r0 *configservice.GetAggregateConfigRuleComplianceSummaryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAggregateConfigRuleComplianceSummary", i0)
	r0, _ = returns[0].(*configservice.GetAggregateConfigRuleComplianceSummaryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) GetAggregateConfigRuleComplianceSummaryRequest(i0 *configservice.GetAggregateConfigRuleComplianceSummaryInput) (r0 *request.Request, r1 *configservice.GetAggregateConfigRuleComplianceSummaryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAggregateConfigRuleComplianceSummaryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.GetAggregateConfigRuleComplianceSummaryOutput)
	return
}

func (d *ConfigServiceDouble) GetAggregateConfigRuleComplianceSummaryWithContext(i0 context.Context, i1 *configservice.GetAggregateConfigRuleComplianceSummaryInput, i2 ...request.Option) (r0 *configservice.GetAggregateConfigRuleComplianceSummaryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAggregateConfigRuleComplianceSummaryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.GetAggregateConfigRuleComplianceSummaryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeGetAggregateConfigRuleComplianceSummaryWithContext(ctx context.Context, in *configservice.GetAggregateConfigRuleComplianceSummaryInput, _ ...request.Option) (*configservice.GetAggregateConfigRuleComplianceSummaryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetAggregateConfigRuleComplianceSummary cancelled", ctx.Err())
	default:
		return d.GetAggregateConfigRuleComplianceSummary(in)
	}
}

func (d *ConfigServiceDouble) GetAggregateDiscoveredResourceCounts(i0 *configservice.GetAggregateDiscoveredResourceCountsInput) (r0 *configservice.GetAggregateDiscoveredResourceCountsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAggregateDiscoveredResourceCounts", i0)
	r0, _ = returns[0].(*configservice.GetAggregateDiscoveredResourceCountsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) GetAggregateDiscoveredResourceCountsRequest(i0 *configservice.GetAggregateDiscoveredResourceCountsInput) (r0 *request.Request, r1 *configservice.GetAggregateDiscoveredResourceCountsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAggregateDiscoveredResourceCountsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.GetAggregateDiscoveredResourceCountsOutput)
	return
}

func (d *ConfigServiceDouble) GetAggregateDiscoveredResourceCountsWithContext(i0 context.Context, i1 *configservice.GetAggregateDiscoveredResourceCountsInput, i2 ...request.Option) (r0 *configservice.GetAggregateDiscoveredResourceCountsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAggregateDiscoveredResourceCountsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.GetAggregateDiscoveredResourceCountsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeGetAggregateDiscoveredResourceCountsWithContext(ctx context.Context, in *configservice.GetAggregateDiscoveredResourceCountsInput, _ ...request.Option) (*configservice.GetAggregateDiscoveredResourceCountsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetAggregateDiscoveredResourceCounts cancelled", ctx.Err())
	default:
		return d.GetAggregateDiscoveredResourceCounts(in)
	}
}

func (d *ConfigServiceDouble) GetAggregateResourceConfig(i0 *configservice.GetAggregateResourceConfigInput) (r0 *configservice.GetAggregateResourceConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAggregateResourceConfig", i0)
	r0, _ = returns[0].(*configservice.GetAggregateResourceConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) GetAggregateResourceConfigRequest(i0 *configservice.GetAggregateResourceConfigInput) (r0 *request.Request, r1 *configservice.GetAggregateResourceConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAggregateResourceConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.GetAggregateResourceConfigOutput)
	return
}

func (d *ConfigServiceDouble) GetAggregateResourceConfigWithContext(i0 context.Context, i1 *configservice.GetAggregateResourceConfigInput, i2 ...request.Option) (r0 *configservice.GetAggregateResourceConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAggregateResourceConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.GetAggregateResourceConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeGetAggregateResourceConfigWithContext(ctx context.Context, in *configservice.GetAggregateResourceConfigInput, _ ...request.Option) (*configservice.GetAggregateResourceConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetAggregateResourceConfig cancelled", ctx.Err())
	default:
		return d.GetAggregateResourceConfig(in)
	}
}

func (d *ConfigServiceDouble) GetComplianceDetailsByConfigRule(i0 *configservice.GetComplianceDetailsByConfigRuleInput) (r0 *configservice.GetComplianceDetailsByConfigRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetComplianceDetailsByConfigRule", i0)
	r0, _ = returns[0].(*configservice.GetComplianceDetailsByConfigRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) GetComplianceDetailsByConfigRuleRequest(i0 *configservice.GetComplianceDetailsByConfigRuleInput) (r0 *request.Request, r1 *configservice.GetComplianceDetailsByConfigRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetComplianceDetailsByConfigRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.GetComplianceDetailsByConfigRuleOutput)
	return
}

func (d *ConfigServiceDouble) GetComplianceDetailsByConfigRuleWithContext(i0 context.Context, i1 *configservice.GetComplianceDetailsByConfigRuleInput, i2 ...request.Option) (r0 *configservice.GetComplianceDetailsByConfigRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetComplianceDetailsByConfigRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.GetComplianceDetailsByConfigRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeGetComplianceDetailsByConfigRuleWithContext(ctx context.Context, in *configservice.GetComplianceDetailsByConfigRuleInput, _ ...request.Option) (*configservice.GetComplianceDetailsByConfigRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetComplianceDetailsByConfigRule cancelled", ctx.Err())
	default:
		return d.GetComplianceDetailsByConfigRule(in)
	}
}

func (d *ConfigServiceDouble) GetComplianceDetailsByResource(i0 *configservice.GetComplianceDetailsByResourceInput) (r0 *configservice.GetComplianceDetailsByResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetComplianceDetailsByResource", i0)
	r0, _ = returns[0].(*configservice.GetComplianceDetailsByResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) GetComplianceDetailsByResourceRequest(i0 *configservice.GetComplianceDetailsByResourceInput) (r0 *request.Request, r1 *configservice.GetComplianceDetailsByResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetComplianceDetailsByResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.GetComplianceDetailsByResourceOutput)
	return
}

func (d *ConfigServiceDouble) GetComplianceDetailsByResourceWithContext(i0 context.Context, i1 *configservice.GetComplianceDetailsByResourceInput, i2 ...request.Option) (r0 *configservice.GetComplianceDetailsByResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetComplianceDetailsByResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.GetComplianceDetailsByResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeGetComplianceDetailsByResourceWithContext(ctx context.Context, in *configservice.GetComplianceDetailsByResourceInput, _ ...request.Option) (*configservice.GetComplianceDetailsByResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetComplianceDetailsByResource cancelled", ctx.Err())
	default:
		return d.GetComplianceDetailsByResource(in)
	}
}

func (d *ConfigServiceDouble) GetComplianceSummaryByConfigRule(i0 *configservice.GetComplianceSummaryByConfigRuleInput) (r0 *configservice.GetComplianceSummaryByConfigRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetComplianceSummaryByConfigRule", i0)
	r0, _ = returns[0].(*configservice.GetComplianceSummaryByConfigRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) GetComplianceSummaryByConfigRuleRequest(i0 *configservice.GetComplianceSummaryByConfigRuleInput) (r0 *request.Request, r1 *configservice.GetComplianceSummaryByConfigRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetComplianceSummaryByConfigRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.GetComplianceSummaryByConfigRuleOutput)
	return
}

func (d *ConfigServiceDouble) GetComplianceSummaryByConfigRuleWithContext(i0 context.Context, i1 *configservice.GetComplianceSummaryByConfigRuleInput, i2 ...request.Option) (r0 *configservice.GetComplianceSummaryByConfigRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetComplianceSummaryByConfigRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.GetComplianceSummaryByConfigRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeGetComplianceSummaryByConfigRuleWithContext(ctx context.Context, in *configservice.GetComplianceSummaryByConfigRuleInput, _ ...request.Option) (*configservice.GetComplianceSummaryByConfigRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetComplianceSummaryByConfigRule cancelled", ctx.Err())
	default:
		return d.GetComplianceSummaryByConfigRule(in)
	}
}

func (d *ConfigServiceDouble) GetComplianceSummaryByResourceType(i0 *configservice.GetComplianceSummaryByResourceTypeInput) (r0 *configservice.GetComplianceSummaryByResourceTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetComplianceSummaryByResourceType", i0)
	r0, _ = returns[0].(*configservice.GetComplianceSummaryByResourceTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) GetComplianceSummaryByResourceTypeRequest(i0 *configservice.GetComplianceSummaryByResourceTypeInput) (r0 *request.Request, r1 *configservice.GetComplianceSummaryByResourceTypeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetComplianceSummaryByResourceTypeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.GetComplianceSummaryByResourceTypeOutput)
	return
}

func (d *ConfigServiceDouble) GetComplianceSummaryByResourceTypeWithContext(i0 context.Context, i1 *configservice.GetComplianceSummaryByResourceTypeInput, i2 ...request.Option) (r0 *configservice.GetComplianceSummaryByResourceTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetComplianceSummaryByResourceTypeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.GetComplianceSummaryByResourceTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeGetComplianceSummaryByResourceTypeWithContext(ctx context.Context, in *configservice.GetComplianceSummaryByResourceTypeInput, _ ...request.Option) (*configservice.GetComplianceSummaryByResourceTypeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetComplianceSummaryByResourceType cancelled", ctx.Err())
	default:
		return d.GetComplianceSummaryByResourceType(in)
	}
}

func (d *ConfigServiceDouble) GetConformancePackComplianceDetails(i0 *configservice.GetConformancePackComplianceDetailsInput) (r0 *configservice.GetConformancePackComplianceDetailsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConformancePackComplianceDetails", i0)
	r0, _ = returns[0].(*configservice.GetConformancePackComplianceDetailsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) GetConformancePackComplianceDetailsRequest(i0 *configservice.GetConformancePackComplianceDetailsInput) (r0 *request.Request, r1 *configservice.GetConformancePackComplianceDetailsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConformancePackComplianceDetailsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.GetConformancePackComplianceDetailsOutput)
	return
}

func (d *ConfigServiceDouble) GetConformancePackComplianceDetailsWithContext(i0 context.Context, i1 *configservice.GetConformancePackComplianceDetailsInput, i2 ...request.Option) (r0 *configservice.GetConformancePackComplianceDetailsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConformancePackComplianceDetailsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.GetConformancePackComplianceDetailsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeGetConformancePackComplianceDetailsWithContext(ctx context.Context, in *configservice.GetConformancePackComplianceDetailsInput, _ ...request.Option) (*configservice.GetConformancePackComplianceDetailsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetConformancePackComplianceDetails cancelled", ctx.Err())
	default:
		return d.GetConformancePackComplianceDetails(in)
	}
}

func (d *ConfigServiceDouble) GetConformancePackComplianceSummary(i0 *configservice.GetConformancePackComplianceSummaryInput) (r0 *configservice.GetConformancePackComplianceSummaryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConformancePackComplianceSummary", i0)
	r0, _ = returns[0].(*configservice.GetConformancePackComplianceSummaryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) GetConformancePackComplianceSummaryRequest(i0 *configservice.GetConformancePackComplianceSummaryInput) (r0 *request.Request, r1 *configservice.GetConformancePackComplianceSummaryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConformancePackComplianceSummaryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.GetConformancePackComplianceSummaryOutput)
	return
}

func (d *ConfigServiceDouble) GetConformancePackComplianceSummaryWithContext(i0 context.Context, i1 *configservice.GetConformancePackComplianceSummaryInput, i2 ...request.Option) (r0 *configservice.GetConformancePackComplianceSummaryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConformancePackComplianceSummaryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.GetConformancePackComplianceSummaryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeGetConformancePackComplianceSummaryWithContext(ctx context.Context, in *configservice.GetConformancePackComplianceSummaryInput, _ ...request.Option) (*configservice.GetConformancePackComplianceSummaryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetConformancePackComplianceSummary cancelled", ctx.Err())
	default:
		return d.GetConformancePackComplianceSummary(in)
	}
}

func (d *ConfigServiceDouble) GetDiscoveredResourceCounts(i0 *configservice.GetDiscoveredResourceCountsInput) (r0 *configservice.GetDiscoveredResourceCountsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDiscoveredResourceCounts", i0)
	r0, _ = returns[0].(*configservice.GetDiscoveredResourceCountsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) GetDiscoveredResourceCountsRequest(i0 *configservice.GetDiscoveredResourceCountsInput) (r0 *request.Request, r1 *configservice.GetDiscoveredResourceCountsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDiscoveredResourceCountsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.GetDiscoveredResourceCountsOutput)
	return
}

func (d *ConfigServiceDouble) GetDiscoveredResourceCountsWithContext(i0 context.Context, i1 *configservice.GetDiscoveredResourceCountsInput, i2 ...request.Option) (r0 *configservice.GetDiscoveredResourceCountsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDiscoveredResourceCountsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.GetDiscoveredResourceCountsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeGetDiscoveredResourceCountsWithContext(ctx context.Context, in *configservice.GetDiscoveredResourceCountsInput, _ ...request.Option) (*configservice.GetDiscoveredResourceCountsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDiscoveredResourceCounts cancelled", ctx.Err())
	default:
		return d.GetDiscoveredResourceCounts(in)
	}
}

func (d *ConfigServiceDouble) GetOrganizationConfigRuleDetailedStatus(i0 *configservice.GetOrganizationConfigRuleDetailedStatusInput) (r0 *configservice.GetOrganizationConfigRuleDetailedStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOrganizationConfigRuleDetailedStatus", i0)
	r0, _ = returns[0].(*configservice.GetOrganizationConfigRuleDetailedStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) GetOrganizationConfigRuleDetailedStatusRequest(i0 *configservice.GetOrganizationConfigRuleDetailedStatusInput) (r0 *request.Request, r1 *configservice.GetOrganizationConfigRuleDetailedStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOrganizationConfigRuleDetailedStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.GetOrganizationConfigRuleDetailedStatusOutput)
	return
}

func (d *ConfigServiceDouble) GetOrganizationConfigRuleDetailedStatusWithContext(i0 context.Context, i1 *configservice.GetOrganizationConfigRuleDetailedStatusInput, i2 ...request.Option) (r0 *configservice.GetOrganizationConfigRuleDetailedStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOrganizationConfigRuleDetailedStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.GetOrganizationConfigRuleDetailedStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeGetOrganizationConfigRuleDetailedStatusWithContext(ctx context.Context, in *configservice.GetOrganizationConfigRuleDetailedStatusInput, _ ...request.Option) (*configservice.GetOrganizationConfigRuleDetailedStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetOrganizationConfigRuleDetailedStatus cancelled", ctx.Err())
	default:
		return d.GetOrganizationConfigRuleDetailedStatus(in)
	}
}

func (d *ConfigServiceDouble) GetOrganizationConformancePackDetailedStatus(i0 *configservice.GetOrganizationConformancePackDetailedStatusInput) (r0 *configservice.GetOrganizationConformancePackDetailedStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOrganizationConformancePackDetailedStatus", i0)
	r0, _ = returns[0].(*configservice.GetOrganizationConformancePackDetailedStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) GetOrganizationConformancePackDetailedStatusRequest(i0 *configservice.GetOrganizationConformancePackDetailedStatusInput) (r0 *request.Request, r1 *configservice.GetOrganizationConformancePackDetailedStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOrganizationConformancePackDetailedStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.GetOrganizationConformancePackDetailedStatusOutput)
	return
}

func (d *ConfigServiceDouble) GetOrganizationConformancePackDetailedStatusWithContext(i0 context.Context, i1 *configservice.GetOrganizationConformancePackDetailedStatusInput, i2 ...request.Option) (r0 *configservice.GetOrganizationConformancePackDetailedStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOrganizationConformancePackDetailedStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.GetOrganizationConformancePackDetailedStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeGetOrganizationConformancePackDetailedStatusWithContext(ctx context.Context, in *configservice.GetOrganizationConformancePackDetailedStatusInput, _ ...request.Option) (*configservice.GetOrganizationConformancePackDetailedStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetOrganizationConformancePackDetailedStatus cancelled", ctx.Err())
	default:
		return d.GetOrganizationConformancePackDetailedStatus(in)
	}
}

func (d *ConfigServiceDouble) GetResourceConfigHistory(i0 *configservice.GetResourceConfigHistoryInput) (r0 *configservice.GetResourceConfigHistoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResourceConfigHistory", i0)
	r0, _ = returns[0].(*configservice.GetResourceConfigHistoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) GetResourceConfigHistoryPages(i0 *configservice.GetResourceConfigHistoryInput, i1 func(*configservice.GetResourceConfigHistoryOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResourceConfigHistoryPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ConfigServiceDouble) fakeGetResourceConfigHistoryPages(in *configservice.GetResourceConfigHistoryInput, pager func(*configservice.GetResourceConfigHistoryOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetResourceConfigHistory", paginators, in, pager)
}

func (d *ConfigServiceDouble) GetResourceConfigHistoryPagesWithContext(i0 context.Context, i1 *configservice.GetResourceConfigHistoryInput, i2 func(*configservice.GetResourceConfigHistoryOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResourceConfigHistoryPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ConfigServiceDouble) fakeGetResourceConfigHistoryPagesWithContext(ctx context.Context, in *configservice.GetResourceConfigHistoryInput, pager func(*configservice.GetResourceConfigHistoryOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetResourceConfigHistory", paginators, ctx, in, pager, options...)
}

func (d *ConfigServiceDouble) GetResourceConfigHistoryRequest(i0 *configservice.GetResourceConfigHistoryInput) (r0 *request.Request, r1 *configservice.GetResourceConfigHistoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResourceConfigHistoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.GetResourceConfigHistoryOutput)
	return
}

func (d *ConfigServiceDouble) GetResourceConfigHistoryWithContext(i0 context.Context, i1 *configservice.GetResourceConfigHistoryInput, i2 ...request.Option) (r0 *configservice.GetResourceConfigHistoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResourceConfigHistoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.GetResourceConfigHistoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeGetResourceConfigHistoryWithContext(ctx context.Context, in *configservice.GetResourceConfigHistoryInput, _ ...request.Option) (*configservice.GetResourceConfigHistoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetResourceConfigHistory cancelled", ctx.Err())
	default:
		return d.GetResourceConfigHistory(in)
	}
}

func (d *ConfigServiceDouble) ListAggregateDiscoveredResources(i0 *configservice.ListAggregateDiscoveredResourcesInput) (r0 *configservice.ListAggregateDiscoveredResourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAggregateDiscoveredResources", i0)
	r0, _ = returns[0].(*configservice.ListAggregateDiscoveredResourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) ListAggregateDiscoveredResourcesRequest(i0 *configservice.ListAggregateDiscoveredResourcesInput) (r0 *request.Request, r1 *configservice.ListAggregateDiscoveredResourcesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAggregateDiscoveredResourcesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.ListAggregateDiscoveredResourcesOutput)
	return
}

func (d *ConfigServiceDouble) ListAggregateDiscoveredResourcesWithContext(i0 context.Context, i1 *configservice.ListAggregateDiscoveredResourcesInput, i2 ...request.Option) (r0 *configservice.ListAggregateDiscoveredResourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAggregateDiscoveredResourcesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.ListAggregateDiscoveredResourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeListAggregateDiscoveredResourcesWithContext(ctx context.Context, in *configservice.ListAggregateDiscoveredResourcesInput, _ ...request.Option) (*configservice.ListAggregateDiscoveredResourcesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAggregateDiscoveredResources cancelled", ctx.Err())
	default:
		return d.ListAggregateDiscoveredResources(in)
	}
}

func (d *ConfigServiceDouble) ListDiscoveredResources(i0 *configservice.ListDiscoveredResourcesInput) (r0 *configservice.ListDiscoveredResourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDiscoveredResources", i0)
	r0, _ = returns[0].(*configservice.ListDiscoveredResourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) ListDiscoveredResourcesRequest(i0 *configservice.ListDiscoveredResourcesInput) (r0 *request.Request, r1 *configservice.ListDiscoveredResourcesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDiscoveredResourcesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.ListDiscoveredResourcesOutput)
	return
}

func (d *ConfigServiceDouble) ListDiscoveredResourcesWithContext(i0 context.Context, i1 *configservice.ListDiscoveredResourcesInput, i2 ...request.Option) (r0 *configservice.ListDiscoveredResourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDiscoveredResourcesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.ListDiscoveredResourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeListDiscoveredResourcesWithContext(ctx context.Context, in *configservice.ListDiscoveredResourcesInput, _ ...request.Option) (*configservice.ListDiscoveredResourcesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDiscoveredResources cancelled", ctx.Err())
	default:
		return d.ListDiscoveredResources(in)
	}
}

func (d *ConfigServiceDouble) ListTagsForResource(i0 *configservice.ListTagsForResourceInput) (r0 *configservice.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*configservice.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) ListTagsForResourceRequest(i0 *configservice.ListTagsForResourceInput) (r0 *request.Request, r1 *configservice.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.ListTagsForResourceOutput)
	return
}

func (d *ConfigServiceDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *configservice.ListTagsForResourceInput, i2 ...request.Option) (r0 *configservice.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *configservice.ListTagsForResourceInput, _ ...request.Option) (*configservice.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *ConfigServiceDouble) PutAggregationAuthorization(i0 *configservice.PutAggregationAuthorizationInput) (r0 *configservice.PutAggregationAuthorizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutAggregationAuthorization", i0)
	r0, _ = returns[0].(*configservice.PutAggregationAuthorizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) PutAggregationAuthorizationRequest(i0 *configservice.PutAggregationAuthorizationInput) (r0 *request.Request, r1 *configservice.PutAggregationAuthorizationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutAggregationAuthorizationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.PutAggregationAuthorizationOutput)
	return
}

func (d *ConfigServiceDouble) PutAggregationAuthorizationWithContext(i0 context.Context, i1 *configservice.PutAggregationAuthorizationInput, i2 ...request.Option) (r0 *configservice.PutAggregationAuthorizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutAggregationAuthorizationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.PutAggregationAuthorizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakePutAggregationAuthorizationWithContext(ctx context.Context, in *configservice.PutAggregationAuthorizationInput, _ ...request.Option) (*configservice.PutAggregationAuthorizationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutAggregationAuthorization cancelled", ctx.Err())
	default:
		return d.PutAggregationAuthorization(in)
	}
}

func (d *ConfigServiceDouble) PutConfigRule(i0 *configservice.PutConfigRuleInput) (r0 *configservice.PutConfigRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutConfigRule", i0)
	r0, _ = returns[0].(*configservice.PutConfigRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) PutConfigRuleRequest(i0 *configservice.PutConfigRuleInput) (r0 *request.Request, r1 *configservice.PutConfigRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutConfigRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.PutConfigRuleOutput)
	return
}

func (d *ConfigServiceDouble) PutConfigRuleWithContext(i0 context.Context, i1 *configservice.PutConfigRuleInput, i2 ...request.Option) (r0 *configservice.PutConfigRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutConfigRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.PutConfigRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakePutConfigRuleWithContext(ctx context.Context, in *configservice.PutConfigRuleInput, _ ...request.Option) (*configservice.PutConfigRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutConfigRule cancelled", ctx.Err())
	default:
		return d.PutConfigRule(in)
	}
}

func (d *ConfigServiceDouble) PutConfigurationAggregator(i0 *configservice.PutConfigurationAggregatorInput) (r0 *configservice.PutConfigurationAggregatorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutConfigurationAggregator", i0)
	r0, _ = returns[0].(*configservice.PutConfigurationAggregatorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) PutConfigurationAggregatorRequest(i0 *configservice.PutConfigurationAggregatorInput) (r0 *request.Request, r1 *configservice.PutConfigurationAggregatorOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutConfigurationAggregatorRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.PutConfigurationAggregatorOutput)
	return
}

func (d *ConfigServiceDouble) PutConfigurationAggregatorWithContext(i0 context.Context, i1 *configservice.PutConfigurationAggregatorInput, i2 ...request.Option) (r0 *configservice.PutConfigurationAggregatorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutConfigurationAggregatorWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.PutConfigurationAggregatorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakePutConfigurationAggregatorWithContext(ctx context.Context, in *configservice.PutConfigurationAggregatorInput, _ ...request.Option) (*configservice.PutConfigurationAggregatorOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutConfigurationAggregator cancelled", ctx.Err())
	default:
		return d.PutConfigurationAggregator(in)
	}
}

func (d *ConfigServiceDouble) PutConfigurationRecorder(i0 *configservice.PutConfigurationRecorderInput) (r0 *configservice.PutConfigurationRecorderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutConfigurationRecorder", i0)
	r0, _ = returns[0].(*configservice.PutConfigurationRecorderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) PutConfigurationRecorderRequest(i0 *configservice.PutConfigurationRecorderInput) (r0 *request.Request, r1 *configservice.PutConfigurationRecorderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutConfigurationRecorderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.PutConfigurationRecorderOutput)
	return
}

func (d *ConfigServiceDouble) PutConfigurationRecorderWithContext(i0 context.Context, i1 *configservice.PutConfigurationRecorderInput, i2 ...request.Option) (r0 *configservice.PutConfigurationRecorderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutConfigurationRecorderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.PutConfigurationRecorderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakePutConfigurationRecorderWithContext(ctx context.Context, in *configservice.PutConfigurationRecorderInput, _ ...request.Option) (*configservice.PutConfigurationRecorderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutConfigurationRecorder cancelled", ctx.Err())
	default:
		return d.PutConfigurationRecorder(in)
	}
}

func (d *ConfigServiceDouble) PutConformancePack(i0 *configservice.PutConformancePackInput) (r0 *configservice.PutConformancePackOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutConformancePack", i0)
	r0, _ = returns[0].(*configservice.PutConformancePackOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) PutConformancePackRequest(i0 *configservice.PutConformancePackInput) (r0 *request.Request, r1 *configservice.PutConformancePackOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutConformancePackRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.PutConformancePackOutput)
	return
}

func (d *ConfigServiceDouble) PutConformancePackWithContext(i0 context.Context, i1 *configservice.PutConformancePackInput, i2 ...request.Option) (r0 *configservice.PutConformancePackOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutConformancePackWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.PutConformancePackOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakePutConformancePackWithContext(ctx context.Context, in *configservice.PutConformancePackInput, _ ...request.Option) (*configservice.PutConformancePackOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutConformancePack cancelled", ctx.Err())
	default:
		return d.PutConformancePack(in)
	}
}

func (d *ConfigServiceDouble) PutDeliveryChannel(i0 *configservice.PutDeliveryChannelInput) (r0 *configservice.PutDeliveryChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutDeliveryChannel", i0)
	r0, _ = returns[0].(*configservice.PutDeliveryChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) PutDeliveryChannelRequest(i0 *configservice.PutDeliveryChannelInput) (r0 *request.Request, r1 *configservice.PutDeliveryChannelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutDeliveryChannelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.PutDeliveryChannelOutput)
	return
}

func (d *ConfigServiceDouble) PutDeliveryChannelWithContext(i0 context.Context, i1 *configservice.PutDeliveryChannelInput, i2 ...request.Option) (r0 *configservice.PutDeliveryChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutDeliveryChannelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.PutDeliveryChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakePutDeliveryChannelWithContext(ctx context.Context, in *configservice.PutDeliveryChannelInput, _ ...request.Option) (*configservice.PutDeliveryChannelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutDeliveryChannel cancelled", ctx.Err())
	default:
		return d.PutDeliveryChannel(in)
	}
}

func (d *ConfigServiceDouble) PutEvaluations(i0 *configservice.PutEvaluationsInput) (r0 *configservice.PutEvaluationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutEvaluations", i0)
	r0, _ = returns[0].(*configservice.PutEvaluationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) PutEvaluationsRequest(i0 *configservice.PutEvaluationsInput) (r0 *request.Request, r1 *configservice.PutEvaluationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutEvaluationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.PutEvaluationsOutput)
	return
}

func (d *ConfigServiceDouble) PutEvaluationsWithContext(i0 context.Context, i1 *configservice.PutEvaluationsInput, i2 ...request.Option) (r0 *configservice.PutEvaluationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutEvaluationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.PutEvaluationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakePutEvaluationsWithContext(ctx context.Context, in *configservice.PutEvaluationsInput, _ ...request.Option) (*configservice.PutEvaluationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutEvaluations cancelled", ctx.Err())
	default:
		return d.PutEvaluations(in)
	}
}

func (d *ConfigServiceDouble) PutOrganizationConfigRule(i0 *configservice.PutOrganizationConfigRuleInput) (r0 *configservice.PutOrganizationConfigRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutOrganizationConfigRule", i0)
	r0, _ = returns[0].(*configservice.PutOrganizationConfigRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) PutOrganizationConfigRuleRequest(i0 *configservice.PutOrganizationConfigRuleInput) (r0 *request.Request, r1 *configservice.PutOrganizationConfigRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutOrganizationConfigRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.PutOrganizationConfigRuleOutput)
	return
}

func (d *ConfigServiceDouble) PutOrganizationConfigRuleWithContext(i0 context.Context, i1 *configservice.PutOrganizationConfigRuleInput, i2 ...request.Option) (r0 *configservice.PutOrganizationConfigRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutOrganizationConfigRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.PutOrganizationConfigRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakePutOrganizationConfigRuleWithContext(ctx context.Context, in *configservice.PutOrganizationConfigRuleInput, _ ...request.Option) (*configservice.PutOrganizationConfigRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutOrganizationConfigRule cancelled", ctx.Err())
	default:
		return d.PutOrganizationConfigRule(in)
	}
}

func (d *ConfigServiceDouble) PutOrganizationConformancePack(i0 *configservice.PutOrganizationConformancePackInput) (r0 *configservice.PutOrganizationConformancePackOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutOrganizationConformancePack", i0)
	r0, _ = returns[0].(*configservice.PutOrganizationConformancePackOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) PutOrganizationConformancePackRequest(i0 *configservice.PutOrganizationConformancePackInput) (r0 *request.Request, r1 *configservice.PutOrganizationConformancePackOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutOrganizationConformancePackRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.PutOrganizationConformancePackOutput)
	return
}

func (d *ConfigServiceDouble) PutOrganizationConformancePackWithContext(i0 context.Context, i1 *configservice.PutOrganizationConformancePackInput, i2 ...request.Option) (r0 *configservice.PutOrganizationConformancePackOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutOrganizationConformancePackWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.PutOrganizationConformancePackOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakePutOrganizationConformancePackWithContext(ctx context.Context, in *configservice.PutOrganizationConformancePackInput, _ ...request.Option) (*configservice.PutOrganizationConformancePackOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutOrganizationConformancePack cancelled", ctx.Err())
	default:
		return d.PutOrganizationConformancePack(in)
	}
}

func (d *ConfigServiceDouble) PutRemediationConfigurations(i0 *configservice.PutRemediationConfigurationsInput) (r0 *configservice.PutRemediationConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRemediationConfigurations", i0)
	r0, _ = returns[0].(*configservice.PutRemediationConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) PutRemediationConfigurationsRequest(i0 *configservice.PutRemediationConfigurationsInput) (r0 *request.Request, r1 *configservice.PutRemediationConfigurationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRemediationConfigurationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.PutRemediationConfigurationsOutput)
	return
}

func (d *ConfigServiceDouble) PutRemediationConfigurationsWithContext(i0 context.Context, i1 *configservice.PutRemediationConfigurationsInput, i2 ...request.Option) (r0 *configservice.PutRemediationConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRemediationConfigurationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.PutRemediationConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakePutRemediationConfigurationsWithContext(ctx context.Context, in *configservice.PutRemediationConfigurationsInput, _ ...request.Option) (*configservice.PutRemediationConfigurationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutRemediationConfigurations cancelled", ctx.Err())
	default:
		return d.PutRemediationConfigurations(in)
	}
}

func (d *ConfigServiceDouble) PutRemediationExceptions(i0 *configservice.PutRemediationExceptionsInput) (r0 *configservice.PutRemediationExceptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRemediationExceptions", i0)
	r0, _ = returns[0].(*configservice.PutRemediationExceptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) PutRemediationExceptionsRequest(i0 *configservice.PutRemediationExceptionsInput) (r0 *request.Request, r1 *configservice.PutRemediationExceptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRemediationExceptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.PutRemediationExceptionsOutput)
	return
}

func (d *ConfigServiceDouble) PutRemediationExceptionsWithContext(i0 context.Context, i1 *configservice.PutRemediationExceptionsInput, i2 ...request.Option) (r0 *configservice.PutRemediationExceptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRemediationExceptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.PutRemediationExceptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakePutRemediationExceptionsWithContext(ctx context.Context, in *configservice.PutRemediationExceptionsInput, _ ...request.Option) (*configservice.PutRemediationExceptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutRemediationExceptions cancelled", ctx.Err())
	default:
		return d.PutRemediationExceptions(in)
	}
}

func (d *ConfigServiceDouble) PutResourceConfig(i0 *configservice.PutResourceConfigInput) (r0 *configservice.PutResourceConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutResourceConfig", i0)
	r0, _ = returns[0].(*configservice.PutResourceConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) PutResourceConfigRequest(i0 *configservice.PutResourceConfigInput) (r0 *request.Request, r1 *configservice.PutResourceConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutResourceConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.PutResourceConfigOutput)
	return
}

func (d *ConfigServiceDouble) PutResourceConfigWithContext(i0 context.Context, i1 *configservice.PutResourceConfigInput, i2 ...request.Option) (r0 *configservice.PutResourceConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutResourceConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.PutResourceConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakePutResourceConfigWithContext(ctx context.Context, in *configservice.PutResourceConfigInput, _ ...request.Option) (*configservice.PutResourceConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutResourceConfig cancelled", ctx.Err())
	default:
		return d.PutResourceConfig(in)
	}
}

func (d *ConfigServiceDouble) PutRetentionConfiguration(i0 *configservice.PutRetentionConfigurationInput) (r0 *configservice.PutRetentionConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRetentionConfiguration", i0)
	r0, _ = returns[0].(*configservice.PutRetentionConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) PutRetentionConfigurationRequest(i0 *configservice.PutRetentionConfigurationInput) (r0 *request.Request, r1 *configservice.PutRetentionConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRetentionConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.PutRetentionConfigurationOutput)
	return
}

func (d *ConfigServiceDouble) PutRetentionConfigurationWithContext(i0 context.Context, i1 *configservice.PutRetentionConfigurationInput, i2 ...request.Option) (r0 *configservice.PutRetentionConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRetentionConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.PutRetentionConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakePutRetentionConfigurationWithContext(ctx context.Context, in *configservice.PutRetentionConfigurationInput, _ ...request.Option) (*configservice.PutRetentionConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutRetentionConfiguration cancelled", ctx.Err())
	default:
		return d.PutRetentionConfiguration(in)
	}
}

func (d *ConfigServiceDouble) SelectResourceConfig(i0 *configservice.SelectResourceConfigInput) (r0 *configservice.SelectResourceConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SelectResourceConfig", i0)
	r0, _ = returns[0].(*configservice.SelectResourceConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) SelectResourceConfigRequest(i0 *configservice.SelectResourceConfigInput) (r0 *request.Request, r1 *configservice.SelectResourceConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SelectResourceConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.SelectResourceConfigOutput)
	return
}

func (d *ConfigServiceDouble) SelectResourceConfigWithContext(i0 context.Context, i1 *configservice.SelectResourceConfigInput, i2 ...request.Option) (r0 *configservice.SelectResourceConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SelectResourceConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.SelectResourceConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeSelectResourceConfigWithContext(ctx context.Context, in *configservice.SelectResourceConfigInput, _ ...request.Option) (*configservice.SelectResourceConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SelectResourceConfig cancelled", ctx.Err())
	default:
		return d.SelectResourceConfig(in)
	}
}

func (d *ConfigServiceDouble) StartConfigRulesEvaluation(i0 *configservice.StartConfigRulesEvaluationInput) (r0 *configservice.StartConfigRulesEvaluationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartConfigRulesEvaluation", i0)
	r0, _ = returns[0].(*configservice.StartConfigRulesEvaluationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) StartConfigRulesEvaluationRequest(i0 *configservice.StartConfigRulesEvaluationInput) (r0 *request.Request, r1 *configservice.StartConfigRulesEvaluationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartConfigRulesEvaluationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.StartConfigRulesEvaluationOutput)
	return
}

func (d *ConfigServiceDouble) StartConfigRulesEvaluationWithContext(i0 context.Context, i1 *configservice.StartConfigRulesEvaluationInput, i2 ...request.Option) (r0 *configservice.StartConfigRulesEvaluationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartConfigRulesEvaluationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.StartConfigRulesEvaluationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeStartConfigRulesEvaluationWithContext(ctx context.Context, in *configservice.StartConfigRulesEvaluationInput, _ ...request.Option) (*configservice.StartConfigRulesEvaluationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartConfigRulesEvaluation cancelled", ctx.Err())
	default:
		return d.StartConfigRulesEvaluation(in)
	}
}

func (d *ConfigServiceDouble) StartConfigurationRecorder(i0 *configservice.StartConfigurationRecorderInput) (r0 *configservice.StartConfigurationRecorderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartConfigurationRecorder", i0)
	r0, _ = returns[0].(*configservice.StartConfigurationRecorderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) StartConfigurationRecorderRequest(i0 *configservice.StartConfigurationRecorderInput) (r0 *request.Request, r1 *configservice.StartConfigurationRecorderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartConfigurationRecorderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.StartConfigurationRecorderOutput)
	return
}

func (d *ConfigServiceDouble) StartConfigurationRecorderWithContext(i0 context.Context, i1 *configservice.StartConfigurationRecorderInput, i2 ...request.Option) (r0 *configservice.StartConfigurationRecorderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartConfigurationRecorderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.StartConfigurationRecorderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeStartConfigurationRecorderWithContext(ctx context.Context, in *configservice.StartConfigurationRecorderInput, _ ...request.Option) (*configservice.StartConfigurationRecorderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartConfigurationRecorder cancelled", ctx.Err())
	default:
		return d.StartConfigurationRecorder(in)
	}
}

func (d *ConfigServiceDouble) StartRemediationExecution(i0 *configservice.StartRemediationExecutionInput) (r0 *configservice.StartRemediationExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartRemediationExecution", i0)
	r0, _ = returns[0].(*configservice.StartRemediationExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) StartRemediationExecutionRequest(i0 *configservice.StartRemediationExecutionInput) (r0 *request.Request, r1 *configservice.StartRemediationExecutionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartRemediationExecutionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.StartRemediationExecutionOutput)
	return
}

func (d *ConfigServiceDouble) StartRemediationExecutionWithContext(i0 context.Context, i1 *configservice.StartRemediationExecutionInput, i2 ...request.Option) (r0 *configservice.StartRemediationExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartRemediationExecutionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.StartRemediationExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeStartRemediationExecutionWithContext(ctx context.Context, in *configservice.StartRemediationExecutionInput, _ ...request.Option) (*configservice.StartRemediationExecutionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartRemediationExecution cancelled", ctx.Err())
	default:
		return d.StartRemediationExecution(in)
	}
}

func (d *ConfigServiceDouble) StopConfigurationRecorder(i0 *configservice.StopConfigurationRecorderInput) (r0 *configservice.StopConfigurationRecorderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopConfigurationRecorder", i0)
	r0, _ = returns[0].(*configservice.StopConfigurationRecorderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) StopConfigurationRecorderRequest(i0 *configservice.StopConfigurationRecorderInput) (r0 *request.Request, r1 *configservice.StopConfigurationRecorderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopConfigurationRecorderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.StopConfigurationRecorderOutput)
	return
}

func (d *ConfigServiceDouble) StopConfigurationRecorderWithContext(i0 context.Context, i1 *configservice.StopConfigurationRecorderInput, i2 ...request.Option) (r0 *configservice.StopConfigurationRecorderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopConfigurationRecorderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.StopConfigurationRecorderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeStopConfigurationRecorderWithContext(ctx context.Context, in *configservice.StopConfigurationRecorderInput, _ ...request.Option) (*configservice.StopConfigurationRecorderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopConfigurationRecorder cancelled", ctx.Err())
	default:
		return d.StopConfigurationRecorder(in)
	}
}

func (d *ConfigServiceDouble) TagResource(i0 *configservice.TagResourceInput) (r0 *configservice.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*configservice.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) TagResourceRequest(i0 *configservice.TagResourceInput) (r0 *request.Request, r1 *configservice.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.TagResourceOutput)
	return
}

func (d *ConfigServiceDouble) TagResourceWithContext(i0 context.Context, i1 *configservice.TagResourceInput, i2 ...request.Option) (r0 *configservice.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeTagResourceWithContext(ctx context.Context, in *configservice.TagResourceInput, _ ...request.Option) (*configservice.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *ConfigServiceDouble) UntagResource(i0 *configservice.UntagResourceInput) (r0 *configservice.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*configservice.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) UntagResourceRequest(i0 *configservice.UntagResourceInput) (r0 *request.Request, r1 *configservice.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*configservice.UntagResourceOutput)
	return
}

func (d *ConfigServiceDouble) UntagResourceWithContext(i0 context.Context, i1 *configservice.UntagResourceInput, i2 ...request.Option) (r0 *configservice.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*configservice.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConfigServiceDouble) fakeUntagResourceWithContext(ctx context.Context, in *configservice.UntagResourceInput, _ ...request.Option) (*configservice.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}
