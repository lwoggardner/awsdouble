// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:11:04+11:00

// Package alexaforbusinessdouble provides a TestDouble implementation of alexaforbusinessiface.AlexaForBusinessAPI
package alexaforbusinessdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/alexaforbusiness"
	"github.com/aws/aws-sdk-go/service/alexaforbusiness/alexaforbusinessiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// AlexaForBusinessDouble is TestDouble for alexaforbusinessiface.AlexaForBusinessAPI
type AlexaForBusinessDouble struct {
	alexaforbusinessiface.AlexaForBusinessAPI
	*awsdouble.AWSTestDouble
}

// Constructor for AlexaForBusinessDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *AlexaForBusinessDouble {
	result := &AlexaForBusinessDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*alexaforbusinessiface.AlexaForBusinessAPI)(nil), configurators...)
	return result
}

func (d *AlexaForBusinessDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *AlexaForBusinessDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "ApproveSkillWithContext":
		return m.Fake(d.fakeApproveSkillWithContext)

	case "AssociateContactWithAddressBookWithContext":
		return m.Fake(d.fakeAssociateContactWithAddressBookWithContext)

	case "AssociateDeviceWithNetworkProfileWithContext":
		return m.Fake(d.fakeAssociateDeviceWithNetworkProfileWithContext)

	case "AssociateDeviceWithRoomWithContext":
		return m.Fake(d.fakeAssociateDeviceWithRoomWithContext)

	case "AssociateSkillGroupWithRoomWithContext":
		return m.Fake(d.fakeAssociateSkillGroupWithRoomWithContext)

	case "AssociateSkillWithSkillGroupWithContext":
		return m.Fake(d.fakeAssociateSkillWithSkillGroupWithContext)

	case "AssociateSkillWithUsersWithContext":
		return m.Fake(d.fakeAssociateSkillWithUsersWithContext)

	case "CreateAddressBookWithContext":
		return m.Fake(d.fakeCreateAddressBookWithContext)

	case "CreateBusinessReportScheduleWithContext":
		return m.Fake(d.fakeCreateBusinessReportScheduleWithContext)

	case "CreateConferenceProviderWithContext":
		return m.Fake(d.fakeCreateConferenceProviderWithContext)

	case "CreateContactWithContext":
		return m.Fake(d.fakeCreateContactWithContext)

	case "CreateGatewayGroupWithContext":
		return m.Fake(d.fakeCreateGatewayGroupWithContext)

	case "CreateNetworkProfileWithContext":
		return m.Fake(d.fakeCreateNetworkProfileWithContext)

	case "CreateProfileWithContext":
		return m.Fake(d.fakeCreateProfileWithContext)

	case "CreateRoomWithContext":
		return m.Fake(d.fakeCreateRoomWithContext)

	case "CreateSkillGroupWithContext":
		return m.Fake(d.fakeCreateSkillGroupWithContext)

	case "CreateUserWithContext":
		return m.Fake(d.fakeCreateUserWithContext)

	case "DeleteAddressBookWithContext":
		return m.Fake(d.fakeDeleteAddressBookWithContext)

	case "DeleteBusinessReportScheduleWithContext":
		return m.Fake(d.fakeDeleteBusinessReportScheduleWithContext)

	case "DeleteConferenceProviderWithContext":
		return m.Fake(d.fakeDeleteConferenceProviderWithContext)

	case "DeleteContactWithContext":
		return m.Fake(d.fakeDeleteContactWithContext)

	case "DeleteDeviceUsageDataWithContext":
		return m.Fake(d.fakeDeleteDeviceUsageDataWithContext)

	case "DeleteDeviceWithContext":
		return m.Fake(d.fakeDeleteDeviceWithContext)

	case "DeleteGatewayGroupWithContext":
		return m.Fake(d.fakeDeleteGatewayGroupWithContext)

	case "DeleteNetworkProfileWithContext":
		return m.Fake(d.fakeDeleteNetworkProfileWithContext)

	case "DeleteProfileWithContext":
		return m.Fake(d.fakeDeleteProfileWithContext)

	case "DeleteRoomSkillParameterWithContext":
		return m.Fake(d.fakeDeleteRoomSkillParameterWithContext)

	case "DeleteRoomWithContext":
		return m.Fake(d.fakeDeleteRoomWithContext)

	case "DeleteSkillAuthorizationWithContext":
		return m.Fake(d.fakeDeleteSkillAuthorizationWithContext)

	case "DeleteSkillGroupWithContext":
		return m.Fake(d.fakeDeleteSkillGroupWithContext)

	case "DeleteUserWithContext":
		return m.Fake(d.fakeDeleteUserWithContext)

	case "DisassociateContactFromAddressBookWithContext":
		return m.Fake(d.fakeDisassociateContactFromAddressBookWithContext)

	case "DisassociateDeviceFromRoomWithContext":
		return m.Fake(d.fakeDisassociateDeviceFromRoomWithContext)

	case "DisassociateSkillFromSkillGroupWithContext":
		return m.Fake(d.fakeDisassociateSkillFromSkillGroupWithContext)

	case "DisassociateSkillFromUsersWithContext":
		return m.Fake(d.fakeDisassociateSkillFromUsersWithContext)

	case "DisassociateSkillGroupFromRoomWithContext":
		return m.Fake(d.fakeDisassociateSkillGroupFromRoomWithContext)

	case "ForgetSmartHomeAppliancesWithContext":
		return m.Fake(d.fakeForgetSmartHomeAppliancesWithContext)

	case "GetAddressBookWithContext":
		return m.Fake(d.fakeGetAddressBookWithContext)

	case "GetConferencePreferenceWithContext":
		return m.Fake(d.fakeGetConferencePreferenceWithContext)

	case "GetConferenceProviderWithContext":
		return m.Fake(d.fakeGetConferenceProviderWithContext)

	case "GetContactWithContext":
		return m.Fake(d.fakeGetContactWithContext)

	case "GetDeviceWithContext":
		return m.Fake(d.fakeGetDeviceWithContext)

	case "GetGatewayGroupWithContext":
		return m.Fake(d.fakeGetGatewayGroupWithContext)

	case "GetGatewayWithContext":
		return m.Fake(d.fakeGetGatewayWithContext)

	case "GetInvitationConfigurationWithContext":
		return m.Fake(d.fakeGetInvitationConfigurationWithContext)

	case "GetNetworkProfileWithContext":
		return m.Fake(d.fakeGetNetworkProfileWithContext)

	case "GetProfileWithContext":
		return m.Fake(d.fakeGetProfileWithContext)

	case "GetRoomSkillParameterWithContext":
		return m.Fake(d.fakeGetRoomSkillParameterWithContext)

	case "GetRoomWithContext":
		return m.Fake(d.fakeGetRoomWithContext)

	case "GetSkillGroupWithContext":
		return m.Fake(d.fakeGetSkillGroupWithContext)

	case "ListBusinessReportSchedulesPages":
		return m.Fake(d.fakeListBusinessReportSchedulesPages)

	case "ListBusinessReportSchedulesPagesWithContext":
		return m.Fake(d.fakeListBusinessReportSchedulesPagesWithContext)

	case "ListBusinessReportSchedulesWithContext":
		return m.Fake(d.fakeListBusinessReportSchedulesWithContext)

	case "ListConferenceProvidersPages":
		return m.Fake(d.fakeListConferenceProvidersPages)

	case "ListConferenceProvidersPagesWithContext":
		return m.Fake(d.fakeListConferenceProvidersPagesWithContext)

	case "ListConferenceProvidersWithContext":
		return m.Fake(d.fakeListConferenceProvidersWithContext)

	case "ListDeviceEventsPages":
		return m.Fake(d.fakeListDeviceEventsPages)

	case "ListDeviceEventsPagesWithContext":
		return m.Fake(d.fakeListDeviceEventsPagesWithContext)

	case "ListDeviceEventsWithContext":
		return m.Fake(d.fakeListDeviceEventsWithContext)

	case "ListGatewayGroupsPages":
		return m.Fake(d.fakeListGatewayGroupsPages)

	case "ListGatewayGroupsPagesWithContext":
		return m.Fake(d.fakeListGatewayGroupsPagesWithContext)

	case "ListGatewayGroupsWithContext":
		return m.Fake(d.fakeListGatewayGroupsWithContext)

	case "ListGatewaysPages":
		return m.Fake(d.fakeListGatewaysPages)

	case "ListGatewaysPagesWithContext":
		return m.Fake(d.fakeListGatewaysPagesWithContext)

	case "ListGatewaysWithContext":
		return m.Fake(d.fakeListGatewaysWithContext)

	case "ListSkillsPages":
		return m.Fake(d.fakeListSkillsPages)

	case "ListSkillsPagesWithContext":
		return m.Fake(d.fakeListSkillsPagesWithContext)

	case "ListSkillsStoreCategoriesPages":
		return m.Fake(d.fakeListSkillsStoreCategoriesPages)

	case "ListSkillsStoreCategoriesPagesWithContext":
		return m.Fake(d.fakeListSkillsStoreCategoriesPagesWithContext)

	case "ListSkillsStoreCategoriesWithContext":
		return m.Fake(d.fakeListSkillsStoreCategoriesWithContext)

	case "ListSkillsStoreSkillsByCategoryPages":
		return m.Fake(d.fakeListSkillsStoreSkillsByCategoryPages)

	case "ListSkillsStoreSkillsByCategoryPagesWithContext":
		return m.Fake(d.fakeListSkillsStoreSkillsByCategoryPagesWithContext)

	case "ListSkillsStoreSkillsByCategoryWithContext":
		return m.Fake(d.fakeListSkillsStoreSkillsByCategoryWithContext)

	case "ListSkillsWithContext":
		return m.Fake(d.fakeListSkillsWithContext)

	case "ListSmartHomeAppliancesPages":
		return m.Fake(d.fakeListSmartHomeAppliancesPages)

	case "ListSmartHomeAppliancesPagesWithContext":
		return m.Fake(d.fakeListSmartHomeAppliancesPagesWithContext)

	case "ListSmartHomeAppliancesWithContext":
		return m.Fake(d.fakeListSmartHomeAppliancesWithContext)

	case "ListTagsPages":
		return m.Fake(d.fakeListTagsPages)

	case "ListTagsPagesWithContext":
		return m.Fake(d.fakeListTagsPagesWithContext)

	case "ListTagsWithContext":
		return m.Fake(d.fakeListTagsWithContext)

	case "PutConferencePreferenceWithContext":
		return m.Fake(d.fakePutConferencePreferenceWithContext)

	case "PutInvitationConfigurationWithContext":
		return m.Fake(d.fakePutInvitationConfigurationWithContext)

	case "PutRoomSkillParameterWithContext":
		return m.Fake(d.fakePutRoomSkillParameterWithContext)

	case "PutSkillAuthorizationWithContext":
		return m.Fake(d.fakePutSkillAuthorizationWithContext)

	case "RegisterAVSDeviceWithContext":
		return m.Fake(d.fakeRegisterAVSDeviceWithContext)

	case "RejectSkillWithContext":
		return m.Fake(d.fakeRejectSkillWithContext)

	case "ResolveRoomWithContext":
		return m.Fake(d.fakeResolveRoomWithContext)

	case "RevokeInvitationWithContext":
		return m.Fake(d.fakeRevokeInvitationWithContext)

	case "SearchAddressBooksPages":
		return m.Fake(d.fakeSearchAddressBooksPages)

	case "SearchAddressBooksPagesWithContext":
		return m.Fake(d.fakeSearchAddressBooksPagesWithContext)

	case "SearchAddressBooksWithContext":
		return m.Fake(d.fakeSearchAddressBooksWithContext)

	case "SearchContactsPages":
		return m.Fake(d.fakeSearchContactsPages)

	case "SearchContactsPagesWithContext":
		return m.Fake(d.fakeSearchContactsPagesWithContext)

	case "SearchContactsWithContext":
		return m.Fake(d.fakeSearchContactsWithContext)

	case "SearchDevicesPages":
		return m.Fake(d.fakeSearchDevicesPages)

	case "SearchDevicesPagesWithContext":
		return m.Fake(d.fakeSearchDevicesPagesWithContext)

	case "SearchDevicesWithContext":
		return m.Fake(d.fakeSearchDevicesWithContext)

	case "SearchNetworkProfilesPages":
		return m.Fake(d.fakeSearchNetworkProfilesPages)

	case "SearchNetworkProfilesPagesWithContext":
		return m.Fake(d.fakeSearchNetworkProfilesPagesWithContext)

	case "SearchNetworkProfilesWithContext":
		return m.Fake(d.fakeSearchNetworkProfilesWithContext)

	case "SearchProfilesPages":
		return m.Fake(d.fakeSearchProfilesPages)

	case "SearchProfilesPagesWithContext":
		return m.Fake(d.fakeSearchProfilesPagesWithContext)

	case "SearchProfilesWithContext":
		return m.Fake(d.fakeSearchProfilesWithContext)

	case "SearchRoomsPages":
		return m.Fake(d.fakeSearchRoomsPages)

	case "SearchRoomsPagesWithContext":
		return m.Fake(d.fakeSearchRoomsPagesWithContext)

	case "SearchRoomsWithContext":
		return m.Fake(d.fakeSearchRoomsWithContext)

	case "SearchSkillGroupsPages":
		return m.Fake(d.fakeSearchSkillGroupsPages)

	case "SearchSkillGroupsPagesWithContext":
		return m.Fake(d.fakeSearchSkillGroupsPagesWithContext)

	case "SearchSkillGroupsWithContext":
		return m.Fake(d.fakeSearchSkillGroupsWithContext)

	case "SearchUsersPages":
		return m.Fake(d.fakeSearchUsersPages)

	case "SearchUsersPagesWithContext":
		return m.Fake(d.fakeSearchUsersPagesWithContext)

	case "SearchUsersWithContext":
		return m.Fake(d.fakeSearchUsersWithContext)

	case "SendAnnouncementWithContext":
		return m.Fake(d.fakeSendAnnouncementWithContext)

	case "SendInvitationWithContext":
		return m.Fake(d.fakeSendInvitationWithContext)

	case "StartDeviceSyncWithContext":
		return m.Fake(d.fakeStartDeviceSyncWithContext)

	case "StartSmartHomeApplianceDiscoveryWithContext":
		return m.Fake(d.fakeStartSmartHomeApplianceDiscoveryWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateAddressBookWithContext":
		return m.Fake(d.fakeUpdateAddressBookWithContext)

	case "UpdateBusinessReportScheduleWithContext":
		return m.Fake(d.fakeUpdateBusinessReportScheduleWithContext)

	case "UpdateConferenceProviderWithContext":
		return m.Fake(d.fakeUpdateConferenceProviderWithContext)

	case "UpdateContactWithContext":
		return m.Fake(d.fakeUpdateContactWithContext)

	case "UpdateDeviceWithContext":
		return m.Fake(d.fakeUpdateDeviceWithContext)

	case "UpdateGatewayGroupWithContext":
		return m.Fake(d.fakeUpdateGatewayGroupWithContext)

	case "UpdateGatewayWithContext":
		return m.Fake(d.fakeUpdateGatewayWithContext)

	case "UpdateNetworkProfileWithContext":
		return m.Fake(d.fakeUpdateNetworkProfileWithContext)

	case "UpdateProfileWithContext":
		return m.Fake(d.fakeUpdateProfileWithContext)

	case "UpdateRoomWithContext":
		return m.Fake(d.fakeUpdateRoomWithContext)

	case "UpdateSkillGroupWithContext":
		return m.Fake(d.fakeUpdateSkillGroupWithContext)

	default:
		return nil
	}
}

func (d *AlexaForBusinessDouble) ApproveSkill(i0 *alexaforbusiness.ApproveSkillInput) (r0 *alexaforbusiness.ApproveSkillOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ApproveSkill", i0)
	r0, _ = returns[0].(*alexaforbusiness.ApproveSkillOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) ApproveSkillRequest(i0 *alexaforbusiness.ApproveSkillInput) (r0 *request.Request, r1 *alexaforbusiness.ApproveSkillOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ApproveSkillRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.ApproveSkillOutput)
	return
}

func (d *AlexaForBusinessDouble) ApproveSkillWithContext(i0 context.Context, i1 *alexaforbusiness.ApproveSkillInput, i2 ...request.Option) (r0 *alexaforbusiness.ApproveSkillOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ApproveSkillWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.ApproveSkillOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeApproveSkillWithContext(ctx context.Context, in *alexaforbusiness.ApproveSkillInput, _ ...request.Option) (*alexaforbusiness.ApproveSkillOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ApproveSkill cancelled", ctx.Err())
	default:
		return d.ApproveSkill(in)
	}
}

func (d *AlexaForBusinessDouble) AssociateContactWithAddressBook(i0 *alexaforbusiness.AssociateContactWithAddressBookInput) (r0 *alexaforbusiness.AssociateContactWithAddressBookOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateContactWithAddressBook", i0)
	r0, _ = returns[0].(*alexaforbusiness.AssociateContactWithAddressBookOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) AssociateContactWithAddressBookRequest(i0 *alexaforbusiness.AssociateContactWithAddressBookInput) (r0 *request.Request, r1 *alexaforbusiness.AssociateContactWithAddressBookOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateContactWithAddressBookRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.AssociateContactWithAddressBookOutput)
	return
}

func (d *AlexaForBusinessDouble) AssociateContactWithAddressBookWithContext(i0 context.Context, i1 *alexaforbusiness.AssociateContactWithAddressBookInput, i2 ...request.Option) (r0 *alexaforbusiness.AssociateContactWithAddressBookOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateContactWithAddressBookWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.AssociateContactWithAddressBookOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeAssociateContactWithAddressBookWithContext(ctx context.Context, in *alexaforbusiness.AssociateContactWithAddressBookInput, _ ...request.Option) (*alexaforbusiness.AssociateContactWithAddressBookOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateContactWithAddressBook cancelled", ctx.Err())
	default:
		return d.AssociateContactWithAddressBook(in)
	}
}

func (d *AlexaForBusinessDouble) AssociateDeviceWithNetworkProfile(i0 *alexaforbusiness.AssociateDeviceWithNetworkProfileInput) (r0 *alexaforbusiness.AssociateDeviceWithNetworkProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateDeviceWithNetworkProfile", i0)
	r0, _ = returns[0].(*alexaforbusiness.AssociateDeviceWithNetworkProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) AssociateDeviceWithNetworkProfileRequest(i0 *alexaforbusiness.AssociateDeviceWithNetworkProfileInput) (r0 *request.Request, r1 *alexaforbusiness.AssociateDeviceWithNetworkProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateDeviceWithNetworkProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.AssociateDeviceWithNetworkProfileOutput)
	return
}

func (d *AlexaForBusinessDouble) AssociateDeviceWithNetworkProfileWithContext(i0 context.Context, i1 *alexaforbusiness.AssociateDeviceWithNetworkProfileInput, i2 ...request.Option) (r0 *alexaforbusiness.AssociateDeviceWithNetworkProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateDeviceWithNetworkProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.AssociateDeviceWithNetworkProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeAssociateDeviceWithNetworkProfileWithContext(ctx context.Context, in *alexaforbusiness.AssociateDeviceWithNetworkProfileInput, _ ...request.Option) (*alexaforbusiness.AssociateDeviceWithNetworkProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateDeviceWithNetworkProfile cancelled", ctx.Err())
	default:
		return d.AssociateDeviceWithNetworkProfile(in)
	}
}

func (d *AlexaForBusinessDouble) AssociateDeviceWithRoom(i0 *alexaforbusiness.AssociateDeviceWithRoomInput) (r0 *alexaforbusiness.AssociateDeviceWithRoomOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateDeviceWithRoom", i0)
	r0, _ = returns[0].(*alexaforbusiness.AssociateDeviceWithRoomOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) AssociateDeviceWithRoomRequest(i0 *alexaforbusiness.AssociateDeviceWithRoomInput) (r0 *request.Request, r1 *alexaforbusiness.AssociateDeviceWithRoomOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateDeviceWithRoomRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.AssociateDeviceWithRoomOutput)
	return
}

func (d *AlexaForBusinessDouble) AssociateDeviceWithRoomWithContext(i0 context.Context, i1 *alexaforbusiness.AssociateDeviceWithRoomInput, i2 ...request.Option) (r0 *alexaforbusiness.AssociateDeviceWithRoomOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateDeviceWithRoomWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.AssociateDeviceWithRoomOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeAssociateDeviceWithRoomWithContext(ctx context.Context, in *alexaforbusiness.AssociateDeviceWithRoomInput, _ ...request.Option) (*alexaforbusiness.AssociateDeviceWithRoomOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateDeviceWithRoom cancelled", ctx.Err())
	default:
		return d.AssociateDeviceWithRoom(in)
	}
}

func (d *AlexaForBusinessDouble) AssociateSkillGroupWithRoom(i0 *alexaforbusiness.AssociateSkillGroupWithRoomInput) (r0 *alexaforbusiness.AssociateSkillGroupWithRoomOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateSkillGroupWithRoom", i0)
	r0, _ = returns[0].(*alexaforbusiness.AssociateSkillGroupWithRoomOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) AssociateSkillGroupWithRoomRequest(i0 *alexaforbusiness.AssociateSkillGroupWithRoomInput) (r0 *request.Request, r1 *alexaforbusiness.AssociateSkillGroupWithRoomOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateSkillGroupWithRoomRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.AssociateSkillGroupWithRoomOutput)
	return
}

func (d *AlexaForBusinessDouble) AssociateSkillGroupWithRoomWithContext(i0 context.Context, i1 *alexaforbusiness.AssociateSkillGroupWithRoomInput, i2 ...request.Option) (r0 *alexaforbusiness.AssociateSkillGroupWithRoomOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateSkillGroupWithRoomWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.AssociateSkillGroupWithRoomOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeAssociateSkillGroupWithRoomWithContext(ctx context.Context, in *alexaforbusiness.AssociateSkillGroupWithRoomInput, _ ...request.Option) (*alexaforbusiness.AssociateSkillGroupWithRoomOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateSkillGroupWithRoom cancelled", ctx.Err())
	default:
		return d.AssociateSkillGroupWithRoom(in)
	}
}

func (d *AlexaForBusinessDouble) AssociateSkillWithSkillGroup(i0 *alexaforbusiness.AssociateSkillWithSkillGroupInput) (r0 *alexaforbusiness.AssociateSkillWithSkillGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateSkillWithSkillGroup", i0)
	r0, _ = returns[0].(*alexaforbusiness.AssociateSkillWithSkillGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) AssociateSkillWithSkillGroupRequest(i0 *alexaforbusiness.AssociateSkillWithSkillGroupInput) (r0 *request.Request, r1 *alexaforbusiness.AssociateSkillWithSkillGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateSkillWithSkillGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.AssociateSkillWithSkillGroupOutput)
	return
}

func (d *AlexaForBusinessDouble) AssociateSkillWithSkillGroupWithContext(i0 context.Context, i1 *alexaforbusiness.AssociateSkillWithSkillGroupInput, i2 ...request.Option) (r0 *alexaforbusiness.AssociateSkillWithSkillGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateSkillWithSkillGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.AssociateSkillWithSkillGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeAssociateSkillWithSkillGroupWithContext(ctx context.Context, in *alexaforbusiness.AssociateSkillWithSkillGroupInput, _ ...request.Option) (*alexaforbusiness.AssociateSkillWithSkillGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateSkillWithSkillGroup cancelled", ctx.Err())
	default:
		return d.AssociateSkillWithSkillGroup(in)
	}
}

func (d *AlexaForBusinessDouble) AssociateSkillWithUsers(i0 *alexaforbusiness.AssociateSkillWithUsersInput) (r0 *alexaforbusiness.AssociateSkillWithUsersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateSkillWithUsers", i0)
	r0, _ = returns[0].(*alexaforbusiness.AssociateSkillWithUsersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) AssociateSkillWithUsersRequest(i0 *alexaforbusiness.AssociateSkillWithUsersInput) (r0 *request.Request, r1 *alexaforbusiness.AssociateSkillWithUsersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateSkillWithUsersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.AssociateSkillWithUsersOutput)
	return
}

func (d *AlexaForBusinessDouble) AssociateSkillWithUsersWithContext(i0 context.Context, i1 *alexaforbusiness.AssociateSkillWithUsersInput, i2 ...request.Option) (r0 *alexaforbusiness.AssociateSkillWithUsersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateSkillWithUsersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.AssociateSkillWithUsersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeAssociateSkillWithUsersWithContext(ctx context.Context, in *alexaforbusiness.AssociateSkillWithUsersInput, _ ...request.Option) (*alexaforbusiness.AssociateSkillWithUsersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateSkillWithUsers cancelled", ctx.Err())
	default:
		return d.AssociateSkillWithUsers(in)
	}
}

func (d *AlexaForBusinessDouble) CreateAddressBook(i0 *alexaforbusiness.CreateAddressBookInput) (r0 *alexaforbusiness.CreateAddressBookOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAddressBook", i0)
	r0, _ = returns[0].(*alexaforbusiness.CreateAddressBookOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) CreateAddressBookRequest(i0 *alexaforbusiness.CreateAddressBookInput) (r0 *request.Request, r1 *alexaforbusiness.CreateAddressBookOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAddressBookRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.CreateAddressBookOutput)
	return
}

func (d *AlexaForBusinessDouble) CreateAddressBookWithContext(i0 context.Context, i1 *alexaforbusiness.CreateAddressBookInput, i2 ...request.Option) (r0 *alexaforbusiness.CreateAddressBookOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAddressBookWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.CreateAddressBookOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeCreateAddressBookWithContext(ctx context.Context, in *alexaforbusiness.CreateAddressBookInput, _ ...request.Option) (*alexaforbusiness.CreateAddressBookOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateAddressBook cancelled", ctx.Err())
	default:
		return d.CreateAddressBook(in)
	}
}

func (d *AlexaForBusinessDouble) CreateBusinessReportSchedule(i0 *alexaforbusiness.CreateBusinessReportScheduleInput) (r0 *alexaforbusiness.CreateBusinessReportScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBusinessReportSchedule", i0)
	r0, _ = returns[0].(*alexaforbusiness.CreateBusinessReportScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) CreateBusinessReportScheduleRequest(i0 *alexaforbusiness.CreateBusinessReportScheduleInput) (r0 *request.Request, r1 *alexaforbusiness.CreateBusinessReportScheduleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBusinessReportScheduleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.CreateBusinessReportScheduleOutput)
	return
}

func (d *AlexaForBusinessDouble) CreateBusinessReportScheduleWithContext(i0 context.Context, i1 *alexaforbusiness.CreateBusinessReportScheduleInput, i2 ...request.Option) (r0 *alexaforbusiness.CreateBusinessReportScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBusinessReportScheduleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.CreateBusinessReportScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeCreateBusinessReportScheduleWithContext(ctx context.Context, in *alexaforbusiness.CreateBusinessReportScheduleInput, _ ...request.Option) (*alexaforbusiness.CreateBusinessReportScheduleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateBusinessReportSchedule cancelled", ctx.Err())
	default:
		return d.CreateBusinessReportSchedule(in)
	}
}

func (d *AlexaForBusinessDouble) CreateConferenceProvider(i0 *alexaforbusiness.CreateConferenceProviderInput) (r0 *alexaforbusiness.CreateConferenceProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateConferenceProvider", i0)
	r0, _ = returns[0].(*alexaforbusiness.CreateConferenceProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) CreateConferenceProviderRequest(i0 *alexaforbusiness.CreateConferenceProviderInput) (r0 *request.Request, r1 *alexaforbusiness.CreateConferenceProviderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateConferenceProviderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.CreateConferenceProviderOutput)
	return
}

func (d *AlexaForBusinessDouble) CreateConferenceProviderWithContext(i0 context.Context, i1 *alexaforbusiness.CreateConferenceProviderInput, i2 ...request.Option) (r0 *alexaforbusiness.CreateConferenceProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateConferenceProviderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.CreateConferenceProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeCreateConferenceProviderWithContext(ctx context.Context, in *alexaforbusiness.CreateConferenceProviderInput, _ ...request.Option) (*alexaforbusiness.CreateConferenceProviderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateConferenceProvider cancelled", ctx.Err())
	default:
		return d.CreateConferenceProvider(in)
	}
}

func (d *AlexaForBusinessDouble) CreateContact(i0 *alexaforbusiness.CreateContactInput) (r0 *alexaforbusiness.CreateContactOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateContact", i0)
	r0, _ = returns[0].(*alexaforbusiness.CreateContactOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) CreateContactRequest(i0 *alexaforbusiness.CreateContactInput) (r0 *request.Request, r1 *alexaforbusiness.CreateContactOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateContactRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.CreateContactOutput)
	return
}

func (d *AlexaForBusinessDouble) CreateContactWithContext(i0 context.Context, i1 *alexaforbusiness.CreateContactInput, i2 ...request.Option) (r0 *alexaforbusiness.CreateContactOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateContactWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.CreateContactOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeCreateContactWithContext(ctx context.Context, in *alexaforbusiness.CreateContactInput, _ ...request.Option) (*alexaforbusiness.CreateContactOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateContact cancelled", ctx.Err())
	default:
		return d.CreateContact(in)
	}
}

func (d *AlexaForBusinessDouble) CreateGatewayGroup(i0 *alexaforbusiness.CreateGatewayGroupInput) (r0 *alexaforbusiness.CreateGatewayGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGatewayGroup", i0)
	r0, _ = returns[0].(*alexaforbusiness.CreateGatewayGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) CreateGatewayGroupRequest(i0 *alexaforbusiness.CreateGatewayGroupInput) (r0 *request.Request, r1 *alexaforbusiness.CreateGatewayGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGatewayGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.CreateGatewayGroupOutput)
	return
}

func (d *AlexaForBusinessDouble) CreateGatewayGroupWithContext(i0 context.Context, i1 *alexaforbusiness.CreateGatewayGroupInput, i2 ...request.Option) (r0 *alexaforbusiness.CreateGatewayGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGatewayGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.CreateGatewayGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeCreateGatewayGroupWithContext(ctx context.Context, in *alexaforbusiness.CreateGatewayGroupInput, _ ...request.Option) (*alexaforbusiness.CreateGatewayGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateGatewayGroup cancelled", ctx.Err())
	default:
		return d.CreateGatewayGroup(in)
	}
}

func (d *AlexaForBusinessDouble) CreateNetworkProfile(i0 *alexaforbusiness.CreateNetworkProfileInput) (r0 *alexaforbusiness.CreateNetworkProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNetworkProfile", i0)
	r0, _ = returns[0].(*alexaforbusiness.CreateNetworkProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) CreateNetworkProfileRequest(i0 *alexaforbusiness.CreateNetworkProfileInput) (r0 *request.Request, r1 *alexaforbusiness.CreateNetworkProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNetworkProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.CreateNetworkProfileOutput)
	return
}

func (d *AlexaForBusinessDouble) CreateNetworkProfileWithContext(i0 context.Context, i1 *alexaforbusiness.CreateNetworkProfileInput, i2 ...request.Option) (r0 *alexaforbusiness.CreateNetworkProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNetworkProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.CreateNetworkProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeCreateNetworkProfileWithContext(ctx context.Context, in *alexaforbusiness.CreateNetworkProfileInput, _ ...request.Option) (*alexaforbusiness.CreateNetworkProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateNetworkProfile cancelled", ctx.Err())
	default:
		return d.CreateNetworkProfile(in)
	}
}

func (d *AlexaForBusinessDouble) CreateProfile(i0 *alexaforbusiness.CreateProfileInput) (r0 *alexaforbusiness.CreateProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProfile", i0)
	r0, _ = returns[0].(*alexaforbusiness.CreateProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) CreateProfileRequest(i0 *alexaforbusiness.CreateProfileInput) (r0 *request.Request, r1 *alexaforbusiness.CreateProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.CreateProfileOutput)
	return
}

func (d *AlexaForBusinessDouble) CreateProfileWithContext(i0 context.Context, i1 *alexaforbusiness.CreateProfileInput, i2 ...request.Option) (r0 *alexaforbusiness.CreateProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.CreateProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeCreateProfileWithContext(ctx context.Context, in *alexaforbusiness.CreateProfileInput, _ ...request.Option) (*alexaforbusiness.CreateProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateProfile cancelled", ctx.Err())
	default:
		return d.CreateProfile(in)
	}
}

func (d *AlexaForBusinessDouble) CreateRoom(i0 *alexaforbusiness.CreateRoomInput) (r0 *alexaforbusiness.CreateRoomOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRoom", i0)
	r0, _ = returns[0].(*alexaforbusiness.CreateRoomOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) CreateRoomRequest(i0 *alexaforbusiness.CreateRoomInput) (r0 *request.Request, r1 *alexaforbusiness.CreateRoomOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRoomRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.CreateRoomOutput)
	return
}

func (d *AlexaForBusinessDouble) CreateRoomWithContext(i0 context.Context, i1 *alexaforbusiness.CreateRoomInput, i2 ...request.Option) (r0 *alexaforbusiness.CreateRoomOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRoomWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.CreateRoomOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeCreateRoomWithContext(ctx context.Context, in *alexaforbusiness.CreateRoomInput, _ ...request.Option) (*alexaforbusiness.CreateRoomOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateRoom cancelled", ctx.Err())
	default:
		return d.CreateRoom(in)
	}
}

func (d *AlexaForBusinessDouble) CreateSkillGroup(i0 *alexaforbusiness.CreateSkillGroupInput) (r0 *alexaforbusiness.CreateSkillGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSkillGroup", i0)
	r0, _ = returns[0].(*alexaforbusiness.CreateSkillGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) CreateSkillGroupRequest(i0 *alexaforbusiness.CreateSkillGroupInput) (r0 *request.Request, r1 *alexaforbusiness.CreateSkillGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSkillGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.CreateSkillGroupOutput)
	return
}

func (d *AlexaForBusinessDouble) CreateSkillGroupWithContext(i0 context.Context, i1 *alexaforbusiness.CreateSkillGroupInput, i2 ...request.Option) (r0 *alexaforbusiness.CreateSkillGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSkillGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.CreateSkillGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeCreateSkillGroupWithContext(ctx context.Context, in *alexaforbusiness.CreateSkillGroupInput, _ ...request.Option) (*alexaforbusiness.CreateSkillGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateSkillGroup cancelled", ctx.Err())
	default:
		return d.CreateSkillGroup(in)
	}
}

func (d *AlexaForBusinessDouble) CreateUser(i0 *alexaforbusiness.CreateUserInput) (r0 *alexaforbusiness.CreateUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUser", i0)
	r0, _ = returns[0].(*alexaforbusiness.CreateUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) CreateUserRequest(i0 *alexaforbusiness.CreateUserInput) (r0 *request.Request, r1 *alexaforbusiness.CreateUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.CreateUserOutput)
	return
}

func (d *AlexaForBusinessDouble) CreateUserWithContext(i0 context.Context, i1 *alexaforbusiness.CreateUserInput, i2 ...request.Option) (r0 *alexaforbusiness.CreateUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.CreateUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeCreateUserWithContext(ctx context.Context, in *alexaforbusiness.CreateUserInput, _ ...request.Option) (*alexaforbusiness.CreateUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateUser cancelled", ctx.Err())
	default:
		return d.CreateUser(in)
	}
}

func (d *AlexaForBusinessDouble) DeleteAddressBook(i0 *alexaforbusiness.DeleteAddressBookInput) (r0 *alexaforbusiness.DeleteAddressBookOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAddressBook", i0)
	r0, _ = returns[0].(*alexaforbusiness.DeleteAddressBookOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) DeleteAddressBookRequest(i0 *alexaforbusiness.DeleteAddressBookInput) (r0 *request.Request, r1 *alexaforbusiness.DeleteAddressBookOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAddressBookRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.DeleteAddressBookOutput)
	return
}

func (d *AlexaForBusinessDouble) DeleteAddressBookWithContext(i0 context.Context, i1 *alexaforbusiness.DeleteAddressBookInput, i2 ...request.Option) (r0 *alexaforbusiness.DeleteAddressBookOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAddressBookWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.DeleteAddressBookOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeDeleteAddressBookWithContext(ctx context.Context, in *alexaforbusiness.DeleteAddressBookInput, _ ...request.Option) (*alexaforbusiness.DeleteAddressBookOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteAddressBook cancelled", ctx.Err())
	default:
		return d.DeleteAddressBook(in)
	}
}

func (d *AlexaForBusinessDouble) DeleteBusinessReportSchedule(i0 *alexaforbusiness.DeleteBusinessReportScheduleInput) (r0 *alexaforbusiness.DeleteBusinessReportScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBusinessReportSchedule", i0)
	r0, _ = returns[0].(*alexaforbusiness.DeleteBusinessReportScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) DeleteBusinessReportScheduleRequest(i0 *alexaforbusiness.DeleteBusinessReportScheduleInput) (r0 *request.Request, r1 *alexaforbusiness.DeleteBusinessReportScheduleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBusinessReportScheduleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.DeleteBusinessReportScheduleOutput)
	return
}

func (d *AlexaForBusinessDouble) DeleteBusinessReportScheduleWithContext(i0 context.Context, i1 *alexaforbusiness.DeleteBusinessReportScheduleInput, i2 ...request.Option) (r0 *alexaforbusiness.DeleteBusinessReportScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBusinessReportScheduleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.DeleteBusinessReportScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeDeleteBusinessReportScheduleWithContext(ctx context.Context, in *alexaforbusiness.DeleteBusinessReportScheduleInput, _ ...request.Option) (*alexaforbusiness.DeleteBusinessReportScheduleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteBusinessReportSchedule cancelled", ctx.Err())
	default:
		return d.DeleteBusinessReportSchedule(in)
	}
}

func (d *AlexaForBusinessDouble) DeleteConferenceProvider(i0 *alexaforbusiness.DeleteConferenceProviderInput) (r0 *alexaforbusiness.DeleteConferenceProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteConferenceProvider", i0)
	r0, _ = returns[0].(*alexaforbusiness.DeleteConferenceProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) DeleteConferenceProviderRequest(i0 *alexaforbusiness.DeleteConferenceProviderInput) (r0 *request.Request, r1 *alexaforbusiness.DeleteConferenceProviderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteConferenceProviderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.DeleteConferenceProviderOutput)
	return
}

func (d *AlexaForBusinessDouble) DeleteConferenceProviderWithContext(i0 context.Context, i1 *alexaforbusiness.DeleteConferenceProviderInput, i2 ...request.Option) (r0 *alexaforbusiness.DeleteConferenceProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteConferenceProviderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.DeleteConferenceProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeDeleteConferenceProviderWithContext(ctx context.Context, in *alexaforbusiness.DeleteConferenceProviderInput, _ ...request.Option) (*alexaforbusiness.DeleteConferenceProviderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteConferenceProvider cancelled", ctx.Err())
	default:
		return d.DeleteConferenceProvider(in)
	}
}

func (d *AlexaForBusinessDouble) DeleteContact(i0 *alexaforbusiness.DeleteContactInput) (r0 *alexaforbusiness.DeleteContactOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteContact", i0)
	r0, _ = returns[0].(*alexaforbusiness.DeleteContactOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) DeleteContactRequest(i0 *alexaforbusiness.DeleteContactInput) (r0 *request.Request, r1 *alexaforbusiness.DeleteContactOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteContactRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.DeleteContactOutput)
	return
}

func (d *AlexaForBusinessDouble) DeleteContactWithContext(i0 context.Context, i1 *alexaforbusiness.DeleteContactInput, i2 ...request.Option) (r0 *alexaforbusiness.DeleteContactOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteContactWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.DeleteContactOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeDeleteContactWithContext(ctx context.Context, in *alexaforbusiness.DeleteContactInput, _ ...request.Option) (*alexaforbusiness.DeleteContactOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteContact cancelled", ctx.Err())
	default:
		return d.DeleteContact(in)
	}
}

func (d *AlexaForBusinessDouble) DeleteDevice(i0 *alexaforbusiness.DeleteDeviceInput) (r0 *alexaforbusiness.DeleteDeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDevice", i0)
	r0, _ = returns[0].(*alexaforbusiness.DeleteDeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) DeleteDeviceRequest(i0 *alexaforbusiness.DeleteDeviceInput) (r0 *request.Request, r1 *alexaforbusiness.DeleteDeviceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDeviceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.DeleteDeviceOutput)
	return
}

func (d *AlexaForBusinessDouble) DeleteDeviceUsageData(i0 *alexaforbusiness.DeleteDeviceUsageDataInput) (r0 *alexaforbusiness.DeleteDeviceUsageDataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDeviceUsageData", i0)
	r0, _ = returns[0].(*alexaforbusiness.DeleteDeviceUsageDataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) DeleteDeviceUsageDataRequest(i0 *alexaforbusiness.DeleteDeviceUsageDataInput) (r0 *request.Request, r1 *alexaforbusiness.DeleteDeviceUsageDataOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDeviceUsageDataRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.DeleteDeviceUsageDataOutput)
	return
}

func (d *AlexaForBusinessDouble) DeleteDeviceUsageDataWithContext(i0 context.Context, i1 *alexaforbusiness.DeleteDeviceUsageDataInput, i2 ...request.Option) (r0 *alexaforbusiness.DeleteDeviceUsageDataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDeviceUsageDataWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.DeleteDeviceUsageDataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeDeleteDeviceUsageDataWithContext(ctx context.Context, in *alexaforbusiness.DeleteDeviceUsageDataInput, _ ...request.Option) (*alexaforbusiness.DeleteDeviceUsageDataOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDeviceUsageData cancelled", ctx.Err())
	default:
		return d.DeleteDeviceUsageData(in)
	}
}

func (d *AlexaForBusinessDouble) DeleteDeviceWithContext(i0 context.Context, i1 *alexaforbusiness.DeleteDeviceInput, i2 ...request.Option) (r0 *alexaforbusiness.DeleteDeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDeviceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.DeleteDeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeDeleteDeviceWithContext(ctx context.Context, in *alexaforbusiness.DeleteDeviceInput, _ ...request.Option) (*alexaforbusiness.DeleteDeviceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDevice cancelled", ctx.Err())
	default:
		return d.DeleteDevice(in)
	}
}

func (d *AlexaForBusinessDouble) DeleteGatewayGroup(i0 *alexaforbusiness.DeleteGatewayGroupInput) (r0 *alexaforbusiness.DeleteGatewayGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGatewayGroup", i0)
	r0, _ = returns[0].(*alexaforbusiness.DeleteGatewayGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) DeleteGatewayGroupRequest(i0 *alexaforbusiness.DeleteGatewayGroupInput) (r0 *request.Request, r1 *alexaforbusiness.DeleteGatewayGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGatewayGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.DeleteGatewayGroupOutput)
	return
}

func (d *AlexaForBusinessDouble) DeleteGatewayGroupWithContext(i0 context.Context, i1 *alexaforbusiness.DeleteGatewayGroupInput, i2 ...request.Option) (r0 *alexaforbusiness.DeleteGatewayGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGatewayGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.DeleteGatewayGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeDeleteGatewayGroupWithContext(ctx context.Context, in *alexaforbusiness.DeleteGatewayGroupInput, _ ...request.Option) (*alexaforbusiness.DeleteGatewayGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteGatewayGroup cancelled", ctx.Err())
	default:
		return d.DeleteGatewayGroup(in)
	}
}

func (d *AlexaForBusinessDouble) DeleteNetworkProfile(i0 *alexaforbusiness.DeleteNetworkProfileInput) (r0 *alexaforbusiness.DeleteNetworkProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNetworkProfile", i0)
	r0, _ = returns[0].(*alexaforbusiness.DeleteNetworkProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) DeleteNetworkProfileRequest(i0 *alexaforbusiness.DeleteNetworkProfileInput) (r0 *request.Request, r1 *alexaforbusiness.DeleteNetworkProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNetworkProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.DeleteNetworkProfileOutput)
	return
}

func (d *AlexaForBusinessDouble) DeleteNetworkProfileWithContext(i0 context.Context, i1 *alexaforbusiness.DeleteNetworkProfileInput, i2 ...request.Option) (r0 *alexaforbusiness.DeleteNetworkProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNetworkProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.DeleteNetworkProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeDeleteNetworkProfileWithContext(ctx context.Context, in *alexaforbusiness.DeleteNetworkProfileInput, _ ...request.Option) (*alexaforbusiness.DeleteNetworkProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteNetworkProfile cancelled", ctx.Err())
	default:
		return d.DeleteNetworkProfile(in)
	}
}

func (d *AlexaForBusinessDouble) DeleteProfile(i0 *alexaforbusiness.DeleteProfileInput) (r0 *alexaforbusiness.DeleteProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteProfile", i0)
	r0, _ = returns[0].(*alexaforbusiness.DeleteProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) DeleteProfileRequest(i0 *alexaforbusiness.DeleteProfileInput) (r0 *request.Request, r1 *alexaforbusiness.DeleteProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.DeleteProfileOutput)
	return
}

func (d *AlexaForBusinessDouble) DeleteProfileWithContext(i0 context.Context, i1 *alexaforbusiness.DeleteProfileInput, i2 ...request.Option) (r0 *alexaforbusiness.DeleteProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.DeleteProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeDeleteProfileWithContext(ctx context.Context, in *alexaforbusiness.DeleteProfileInput, _ ...request.Option) (*alexaforbusiness.DeleteProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteProfile cancelled", ctx.Err())
	default:
		return d.DeleteProfile(in)
	}
}

func (d *AlexaForBusinessDouble) DeleteRoom(i0 *alexaforbusiness.DeleteRoomInput) (r0 *alexaforbusiness.DeleteRoomOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRoom", i0)
	r0, _ = returns[0].(*alexaforbusiness.DeleteRoomOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) DeleteRoomRequest(i0 *alexaforbusiness.DeleteRoomInput) (r0 *request.Request, r1 *alexaforbusiness.DeleteRoomOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRoomRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.DeleteRoomOutput)
	return
}

func (d *AlexaForBusinessDouble) DeleteRoomSkillParameter(i0 *alexaforbusiness.DeleteRoomSkillParameterInput) (r0 *alexaforbusiness.DeleteRoomSkillParameterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRoomSkillParameter", i0)
	r0, _ = returns[0].(*alexaforbusiness.DeleteRoomSkillParameterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) DeleteRoomSkillParameterRequest(i0 *alexaforbusiness.DeleteRoomSkillParameterInput) (r0 *request.Request, r1 *alexaforbusiness.DeleteRoomSkillParameterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRoomSkillParameterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.DeleteRoomSkillParameterOutput)
	return
}

func (d *AlexaForBusinessDouble) DeleteRoomSkillParameterWithContext(i0 context.Context, i1 *alexaforbusiness.DeleteRoomSkillParameterInput, i2 ...request.Option) (r0 *alexaforbusiness.DeleteRoomSkillParameterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRoomSkillParameterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.DeleteRoomSkillParameterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeDeleteRoomSkillParameterWithContext(ctx context.Context, in *alexaforbusiness.DeleteRoomSkillParameterInput, _ ...request.Option) (*alexaforbusiness.DeleteRoomSkillParameterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRoomSkillParameter cancelled", ctx.Err())
	default:
		return d.DeleteRoomSkillParameter(in)
	}
}

func (d *AlexaForBusinessDouble) DeleteRoomWithContext(i0 context.Context, i1 *alexaforbusiness.DeleteRoomInput, i2 ...request.Option) (r0 *alexaforbusiness.DeleteRoomOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRoomWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.DeleteRoomOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeDeleteRoomWithContext(ctx context.Context, in *alexaforbusiness.DeleteRoomInput, _ ...request.Option) (*alexaforbusiness.DeleteRoomOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRoom cancelled", ctx.Err())
	default:
		return d.DeleteRoom(in)
	}
}

func (d *AlexaForBusinessDouble) DeleteSkillAuthorization(i0 *alexaforbusiness.DeleteSkillAuthorizationInput) (r0 *alexaforbusiness.DeleteSkillAuthorizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSkillAuthorization", i0)
	r0, _ = returns[0].(*alexaforbusiness.DeleteSkillAuthorizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) DeleteSkillAuthorizationRequest(i0 *alexaforbusiness.DeleteSkillAuthorizationInput) (r0 *request.Request, r1 *alexaforbusiness.DeleteSkillAuthorizationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSkillAuthorizationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.DeleteSkillAuthorizationOutput)
	return
}

func (d *AlexaForBusinessDouble) DeleteSkillAuthorizationWithContext(i0 context.Context, i1 *alexaforbusiness.DeleteSkillAuthorizationInput, i2 ...request.Option) (r0 *alexaforbusiness.DeleteSkillAuthorizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSkillAuthorizationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.DeleteSkillAuthorizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeDeleteSkillAuthorizationWithContext(ctx context.Context, in *alexaforbusiness.DeleteSkillAuthorizationInput, _ ...request.Option) (*alexaforbusiness.DeleteSkillAuthorizationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteSkillAuthorization cancelled", ctx.Err())
	default:
		return d.DeleteSkillAuthorization(in)
	}
}

func (d *AlexaForBusinessDouble) DeleteSkillGroup(i0 *alexaforbusiness.DeleteSkillGroupInput) (r0 *alexaforbusiness.DeleteSkillGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSkillGroup", i0)
	r0, _ = returns[0].(*alexaforbusiness.DeleteSkillGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) DeleteSkillGroupRequest(i0 *alexaforbusiness.DeleteSkillGroupInput) (r0 *request.Request, r1 *alexaforbusiness.DeleteSkillGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSkillGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.DeleteSkillGroupOutput)
	return
}

func (d *AlexaForBusinessDouble) DeleteSkillGroupWithContext(i0 context.Context, i1 *alexaforbusiness.DeleteSkillGroupInput, i2 ...request.Option) (r0 *alexaforbusiness.DeleteSkillGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSkillGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.DeleteSkillGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeDeleteSkillGroupWithContext(ctx context.Context, in *alexaforbusiness.DeleteSkillGroupInput, _ ...request.Option) (*alexaforbusiness.DeleteSkillGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteSkillGroup cancelled", ctx.Err())
	default:
		return d.DeleteSkillGroup(in)
	}
}

func (d *AlexaForBusinessDouble) DeleteUser(i0 *alexaforbusiness.DeleteUserInput) (r0 *alexaforbusiness.DeleteUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUser", i0)
	r0, _ = returns[0].(*alexaforbusiness.DeleteUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) DeleteUserRequest(i0 *alexaforbusiness.DeleteUserInput) (r0 *request.Request, r1 *alexaforbusiness.DeleteUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.DeleteUserOutput)
	return
}

func (d *AlexaForBusinessDouble) DeleteUserWithContext(i0 context.Context, i1 *alexaforbusiness.DeleteUserInput, i2 ...request.Option) (r0 *alexaforbusiness.DeleteUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.DeleteUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeDeleteUserWithContext(ctx context.Context, in *alexaforbusiness.DeleteUserInput, _ ...request.Option) (*alexaforbusiness.DeleteUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteUser cancelled", ctx.Err())
	default:
		return d.DeleteUser(in)
	}
}

func (d *AlexaForBusinessDouble) DisassociateContactFromAddressBook(i0 *alexaforbusiness.DisassociateContactFromAddressBookInput) (r0 *alexaforbusiness.DisassociateContactFromAddressBookOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateContactFromAddressBook", i0)
	r0, _ = returns[0].(*alexaforbusiness.DisassociateContactFromAddressBookOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) DisassociateContactFromAddressBookRequest(i0 *alexaforbusiness.DisassociateContactFromAddressBookInput) (r0 *request.Request, r1 *alexaforbusiness.DisassociateContactFromAddressBookOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateContactFromAddressBookRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.DisassociateContactFromAddressBookOutput)
	return
}

func (d *AlexaForBusinessDouble) DisassociateContactFromAddressBookWithContext(i0 context.Context, i1 *alexaforbusiness.DisassociateContactFromAddressBookInput, i2 ...request.Option) (r0 *alexaforbusiness.DisassociateContactFromAddressBookOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateContactFromAddressBookWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.DisassociateContactFromAddressBookOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeDisassociateContactFromAddressBookWithContext(ctx context.Context, in *alexaforbusiness.DisassociateContactFromAddressBookInput, _ ...request.Option) (*alexaforbusiness.DisassociateContactFromAddressBookOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateContactFromAddressBook cancelled", ctx.Err())
	default:
		return d.DisassociateContactFromAddressBook(in)
	}
}

func (d *AlexaForBusinessDouble) DisassociateDeviceFromRoom(i0 *alexaforbusiness.DisassociateDeviceFromRoomInput) (r0 *alexaforbusiness.DisassociateDeviceFromRoomOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateDeviceFromRoom", i0)
	r0, _ = returns[0].(*alexaforbusiness.DisassociateDeviceFromRoomOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) DisassociateDeviceFromRoomRequest(i0 *alexaforbusiness.DisassociateDeviceFromRoomInput) (r0 *request.Request, r1 *alexaforbusiness.DisassociateDeviceFromRoomOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateDeviceFromRoomRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.DisassociateDeviceFromRoomOutput)
	return
}

func (d *AlexaForBusinessDouble) DisassociateDeviceFromRoomWithContext(i0 context.Context, i1 *alexaforbusiness.DisassociateDeviceFromRoomInput, i2 ...request.Option) (r0 *alexaforbusiness.DisassociateDeviceFromRoomOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateDeviceFromRoomWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.DisassociateDeviceFromRoomOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeDisassociateDeviceFromRoomWithContext(ctx context.Context, in *alexaforbusiness.DisassociateDeviceFromRoomInput, _ ...request.Option) (*alexaforbusiness.DisassociateDeviceFromRoomOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateDeviceFromRoom cancelled", ctx.Err())
	default:
		return d.DisassociateDeviceFromRoom(in)
	}
}

func (d *AlexaForBusinessDouble) DisassociateSkillFromSkillGroup(i0 *alexaforbusiness.DisassociateSkillFromSkillGroupInput) (r0 *alexaforbusiness.DisassociateSkillFromSkillGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateSkillFromSkillGroup", i0)
	r0, _ = returns[0].(*alexaforbusiness.DisassociateSkillFromSkillGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) DisassociateSkillFromSkillGroupRequest(i0 *alexaforbusiness.DisassociateSkillFromSkillGroupInput) (r0 *request.Request, r1 *alexaforbusiness.DisassociateSkillFromSkillGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateSkillFromSkillGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.DisassociateSkillFromSkillGroupOutput)
	return
}

func (d *AlexaForBusinessDouble) DisassociateSkillFromSkillGroupWithContext(i0 context.Context, i1 *alexaforbusiness.DisassociateSkillFromSkillGroupInput, i2 ...request.Option) (r0 *alexaforbusiness.DisassociateSkillFromSkillGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateSkillFromSkillGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.DisassociateSkillFromSkillGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeDisassociateSkillFromSkillGroupWithContext(ctx context.Context, in *alexaforbusiness.DisassociateSkillFromSkillGroupInput, _ ...request.Option) (*alexaforbusiness.DisassociateSkillFromSkillGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateSkillFromSkillGroup cancelled", ctx.Err())
	default:
		return d.DisassociateSkillFromSkillGroup(in)
	}
}

func (d *AlexaForBusinessDouble) DisassociateSkillFromUsers(i0 *alexaforbusiness.DisassociateSkillFromUsersInput) (r0 *alexaforbusiness.DisassociateSkillFromUsersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateSkillFromUsers", i0)
	r0, _ = returns[0].(*alexaforbusiness.DisassociateSkillFromUsersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) DisassociateSkillFromUsersRequest(i0 *alexaforbusiness.DisassociateSkillFromUsersInput) (r0 *request.Request, r1 *alexaforbusiness.DisassociateSkillFromUsersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateSkillFromUsersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.DisassociateSkillFromUsersOutput)
	return
}

func (d *AlexaForBusinessDouble) DisassociateSkillFromUsersWithContext(i0 context.Context, i1 *alexaforbusiness.DisassociateSkillFromUsersInput, i2 ...request.Option) (r0 *alexaforbusiness.DisassociateSkillFromUsersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateSkillFromUsersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.DisassociateSkillFromUsersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeDisassociateSkillFromUsersWithContext(ctx context.Context, in *alexaforbusiness.DisassociateSkillFromUsersInput, _ ...request.Option) (*alexaforbusiness.DisassociateSkillFromUsersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateSkillFromUsers cancelled", ctx.Err())
	default:
		return d.DisassociateSkillFromUsers(in)
	}
}

func (d *AlexaForBusinessDouble) DisassociateSkillGroupFromRoom(i0 *alexaforbusiness.DisassociateSkillGroupFromRoomInput) (r0 *alexaforbusiness.DisassociateSkillGroupFromRoomOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateSkillGroupFromRoom", i0)
	r0, _ = returns[0].(*alexaforbusiness.DisassociateSkillGroupFromRoomOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) DisassociateSkillGroupFromRoomRequest(i0 *alexaforbusiness.DisassociateSkillGroupFromRoomInput) (r0 *request.Request, r1 *alexaforbusiness.DisassociateSkillGroupFromRoomOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateSkillGroupFromRoomRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.DisassociateSkillGroupFromRoomOutput)
	return
}

func (d *AlexaForBusinessDouble) DisassociateSkillGroupFromRoomWithContext(i0 context.Context, i1 *alexaforbusiness.DisassociateSkillGroupFromRoomInput, i2 ...request.Option) (r0 *alexaforbusiness.DisassociateSkillGroupFromRoomOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateSkillGroupFromRoomWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.DisassociateSkillGroupFromRoomOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeDisassociateSkillGroupFromRoomWithContext(ctx context.Context, in *alexaforbusiness.DisassociateSkillGroupFromRoomInput, _ ...request.Option) (*alexaforbusiness.DisassociateSkillGroupFromRoomOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateSkillGroupFromRoom cancelled", ctx.Err())
	default:
		return d.DisassociateSkillGroupFromRoom(in)
	}
}

func (d *AlexaForBusinessDouble) ForgetSmartHomeAppliances(i0 *alexaforbusiness.ForgetSmartHomeAppliancesInput) (r0 *alexaforbusiness.ForgetSmartHomeAppliancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ForgetSmartHomeAppliances", i0)
	r0, _ = returns[0].(*alexaforbusiness.ForgetSmartHomeAppliancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) ForgetSmartHomeAppliancesRequest(i0 *alexaforbusiness.ForgetSmartHomeAppliancesInput) (r0 *request.Request, r1 *alexaforbusiness.ForgetSmartHomeAppliancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ForgetSmartHomeAppliancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.ForgetSmartHomeAppliancesOutput)
	return
}

func (d *AlexaForBusinessDouble) ForgetSmartHomeAppliancesWithContext(i0 context.Context, i1 *alexaforbusiness.ForgetSmartHomeAppliancesInput, i2 ...request.Option) (r0 *alexaforbusiness.ForgetSmartHomeAppliancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ForgetSmartHomeAppliancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.ForgetSmartHomeAppliancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeForgetSmartHomeAppliancesWithContext(ctx context.Context, in *alexaforbusiness.ForgetSmartHomeAppliancesInput, _ ...request.Option) (*alexaforbusiness.ForgetSmartHomeAppliancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ForgetSmartHomeAppliances cancelled", ctx.Err())
	default:
		return d.ForgetSmartHomeAppliances(in)
	}
}

func (d *AlexaForBusinessDouble) GetAddressBook(i0 *alexaforbusiness.GetAddressBookInput) (r0 *alexaforbusiness.GetAddressBookOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAddressBook", i0)
	r0, _ = returns[0].(*alexaforbusiness.GetAddressBookOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) GetAddressBookRequest(i0 *alexaforbusiness.GetAddressBookInput) (r0 *request.Request, r1 *alexaforbusiness.GetAddressBookOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAddressBookRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.GetAddressBookOutput)
	return
}

func (d *AlexaForBusinessDouble) GetAddressBookWithContext(i0 context.Context, i1 *alexaforbusiness.GetAddressBookInput, i2 ...request.Option) (r0 *alexaforbusiness.GetAddressBookOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAddressBookWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.GetAddressBookOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeGetAddressBookWithContext(ctx context.Context, in *alexaforbusiness.GetAddressBookInput, _ ...request.Option) (*alexaforbusiness.GetAddressBookOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetAddressBook cancelled", ctx.Err())
	default:
		return d.GetAddressBook(in)
	}
}

func (d *AlexaForBusinessDouble) GetConferencePreference(i0 *alexaforbusiness.GetConferencePreferenceInput) (r0 *alexaforbusiness.GetConferencePreferenceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConferencePreference", i0)
	r0, _ = returns[0].(*alexaforbusiness.GetConferencePreferenceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) GetConferencePreferenceRequest(i0 *alexaforbusiness.GetConferencePreferenceInput) (r0 *request.Request, r1 *alexaforbusiness.GetConferencePreferenceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConferencePreferenceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.GetConferencePreferenceOutput)
	return
}

func (d *AlexaForBusinessDouble) GetConferencePreferenceWithContext(i0 context.Context, i1 *alexaforbusiness.GetConferencePreferenceInput, i2 ...request.Option) (r0 *alexaforbusiness.GetConferencePreferenceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConferencePreferenceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.GetConferencePreferenceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeGetConferencePreferenceWithContext(ctx context.Context, in *alexaforbusiness.GetConferencePreferenceInput, _ ...request.Option) (*alexaforbusiness.GetConferencePreferenceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetConferencePreference cancelled", ctx.Err())
	default:
		return d.GetConferencePreference(in)
	}
}

func (d *AlexaForBusinessDouble) GetConferenceProvider(i0 *alexaforbusiness.GetConferenceProviderInput) (r0 *alexaforbusiness.GetConferenceProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConferenceProvider", i0)
	r0, _ = returns[0].(*alexaforbusiness.GetConferenceProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) GetConferenceProviderRequest(i0 *alexaforbusiness.GetConferenceProviderInput) (r0 *request.Request, r1 *alexaforbusiness.GetConferenceProviderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConferenceProviderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.GetConferenceProviderOutput)
	return
}

func (d *AlexaForBusinessDouble) GetConferenceProviderWithContext(i0 context.Context, i1 *alexaforbusiness.GetConferenceProviderInput, i2 ...request.Option) (r0 *alexaforbusiness.GetConferenceProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConferenceProviderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.GetConferenceProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeGetConferenceProviderWithContext(ctx context.Context, in *alexaforbusiness.GetConferenceProviderInput, _ ...request.Option) (*alexaforbusiness.GetConferenceProviderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetConferenceProvider cancelled", ctx.Err())
	default:
		return d.GetConferenceProvider(in)
	}
}

func (d *AlexaForBusinessDouble) GetContact(i0 *alexaforbusiness.GetContactInput) (r0 *alexaforbusiness.GetContactOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetContact", i0)
	r0, _ = returns[0].(*alexaforbusiness.GetContactOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) GetContactRequest(i0 *alexaforbusiness.GetContactInput) (r0 *request.Request, r1 *alexaforbusiness.GetContactOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetContactRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.GetContactOutput)
	return
}

func (d *AlexaForBusinessDouble) GetContactWithContext(i0 context.Context, i1 *alexaforbusiness.GetContactInput, i2 ...request.Option) (r0 *alexaforbusiness.GetContactOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetContactWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.GetContactOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeGetContactWithContext(ctx context.Context, in *alexaforbusiness.GetContactInput, _ ...request.Option) (*alexaforbusiness.GetContactOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetContact cancelled", ctx.Err())
	default:
		return d.GetContact(in)
	}
}

func (d *AlexaForBusinessDouble) GetDevice(i0 *alexaforbusiness.GetDeviceInput) (r0 *alexaforbusiness.GetDeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDevice", i0)
	r0, _ = returns[0].(*alexaforbusiness.GetDeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) GetDeviceRequest(i0 *alexaforbusiness.GetDeviceInput) (r0 *request.Request, r1 *alexaforbusiness.GetDeviceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeviceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.GetDeviceOutput)
	return
}

func (d *AlexaForBusinessDouble) GetDeviceWithContext(i0 context.Context, i1 *alexaforbusiness.GetDeviceInput, i2 ...request.Option) (r0 *alexaforbusiness.GetDeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeviceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.GetDeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeGetDeviceWithContext(ctx context.Context, in *alexaforbusiness.GetDeviceInput, _ ...request.Option) (*alexaforbusiness.GetDeviceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDevice cancelled", ctx.Err())
	default:
		return d.GetDevice(in)
	}
}

func (d *AlexaForBusinessDouble) GetGateway(i0 *alexaforbusiness.GetGatewayInput) (r0 *alexaforbusiness.GetGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGateway", i0)
	r0, _ = returns[0].(*alexaforbusiness.GetGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) GetGatewayGroup(i0 *alexaforbusiness.GetGatewayGroupInput) (r0 *alexaforbusiness.GetGatewayGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGatewayGroup", i0)
	r0, _ = returns[0].(*alexaforbusiness.GetGatewayGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) GetGatewayGroupRequest(i0 *alexaforbusiness.GetGatewayGroupInput) (r0 *request.Request, r1 *alexaforbusiness.GetGatewayGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGatewayGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.GetGatewayGroupOutput)
	return
}

func (d *AlexaForBusinessDouble) GetGatewayGroupWithContext(i0 context.Context, i1 *alexaforbusiness.GetGatewayGroupInput, i2 ...request.Option) (r0 *alexaforbusiness.GetGatewayGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGatewayGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.GetGatewayGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeGetGatewayGroupWithContext(ctx context.Context, in *alexaforbusiness.GetGatewayGroupInput, _ ...request.Option) (*alexaforbusiness.GetGatewayGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetGatewayGroup cancelled", ctx.Err())
	default:
		return d.GetGatewayGroup(in)
	}
}

func (d *AlexaForBusinessDouble) GetGatewayRequest(i0 *alexaforbusiness.GetGatewayInput) (r0 *request.Request, r1 *alexaforbusiness.GetGatewayOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGatewayRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.GetGatewayOutput)
	return
}

func (d *AlexaForBusinessDouble) GetGatewayWithContext(i0 context.Context, i1 *alexaforbusiness.GetGatewayInput, i2 ...request.Option) (r0 *alexaforbusiness.GetGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGatewayWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.GetGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeGetGatewayWithContext(ctx context.Context, in *alexaforbusiness.GetGatewayInput, _ ...request.Option) (*alexaforbusiness.GetGatewayOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetGateway cancelled", ctx.Err())
	default:
		return d.GetGateway(in)
	}
}

func (d *AlexaForBusinessDouble) GetInvitationConfiguration(i0 *alexaforbusiness.GetInvitationConfigurationInput) (r0 *alexaforbusiness.GetInvitationConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInvitationConfiguration", i0)
	r0, _ = returns[0].(*alexaforbusiness.GetInvitationConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) GetInvitationConfigurationRequest(i0 *alexaforbusiness.GetInvitationConfigurationInput) (r0 *request.Request, r1 *alexaforbusiness.GetInvitationConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInvitationConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.GetInvitationConfigurationOutput)
	return
}

func (d *AlexaForBusinessDouble) GetInvitationConfigurationWithContext(i0 context.Context, i1 *alexaforbusiness.GetInvitationConfigurationInput, i2 ...request.Option) (r0 *alexaforbusiness.GetInvitationConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInvitationConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.GetInvitationConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeGetInvitationConfigurationWithContext(ctx context.Context, in *alexaforbusiness.GetInvitationConfigurationInput, _ ...request.Option) (*alexaforbusiness.GetInvitationConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetInvitationConfiguration cancelled", ctx.Err())
	default:
		return d.GetInvitationConfiguration(in)
	}
}

func (d *AlexaForBusinessDouble) GetNetworkProfile(i0 *alexaforbusiness.GetNetworkProfileInput) (r0 *alexaforbusiness.GetNetworkProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetNetworkProfile", i0)
	r0, _ = returns[0].(*alexaforbusiness.GetNetworkProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) GetNetworkProfileRequest(i0 *alexaforbusiness.GetNetworkProfileInput) (r0 *request.Request, r1 *alexaforbusiness.GetNetworkProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetNetworkProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.GetNetworkProfileOutput)
	return
}

func (d *AlexaForBusinessDouble) GetNetworkProfileWithContext(i0 context.Context, i1 *alexaforbusiness.GetNetworkProfileInput, i2 ...request.Option) (r0 *alexaforbusiness.GetNetworkProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetNetworkProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.GetNetworkProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeGetNetworkProfileWithContext(ctx context.Context, in *alexaforbusiness.GetNetworkProfileInput, _ ...request.Option) (*alexaforbusiness.GetNetworkProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetNetworkProfile cancelled", ctx.Err())
	default:
		return d.GetNetworkProfile(in)
	}
}

func (d *AlexaForBusinessDouble) GetProfile(i0 *alexaforbusiness.GetProfileInput) (r0 *alexaforbusiness.GetProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetProfile", i0)
	r0, _ = returns[0].(*alexaforbusiness.GetProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) GetProfileRequest(i0 *alexaforbusiness.GetProfileInput) (r0 *request.Request, r1 *alexaforbusiness.GetProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.GetProfileOutput)
	return
}

func (d *AlexaForBusinessDouble) GetProfileWithContext(i0 context.Context, i1 *alexaforbusiness.GetProfileInput, i2 ...request.Option) (r0 *alexaforbusiness.GetProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.GetProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeGetProfileWithContext(ctx context.Context, in *alexaforbusiness.GetProfileInput, _ ...request.Option) (*alexaforbusiness.GetProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetProfile cancelled", ctx.Err())
	default:
		return d.GetProfile(in)
	}
}

func (d *AlexaForBusinessDouble) GetRoom(i0 *alexaforbusiness.GetRoomInput) (r0 *alexaforbusiness.GetRoomOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRoom", i0)
	r0, _ = returns[0].(*alexaforbusiness.GetRoomOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) GetRoomRequest(i0 *alexaforbusiness.GetRoomInput) (r0 *request.Request, r1 *alexaforbusiness.GetRoomOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRoomRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.GetRoomOutput)
	return
}

func (d *AlexaForBusinessDouble) GetRoomSkillParameter(i0 *alexaforbusiness.GetRoomSkillParameterInput) (r0 *alexaforbusiness.GetRoomSkillParameterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRoomSkillParameter", i0)
	r0, _ = returns[0].(*alexaforbusiness.GetRoomSkillParameterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) GetRoomSkillParameterRequest(i0 *alexaforbusiness.GetRoomSkillParameterInput) (r0 *request.Request, r1 *alexaforbusiness.GetRoomSkillParameterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRoomSkillParameterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.GetRoomSkillParameterOutput)
	return
}

func (d *AlexaForBusinessDouble) GetRoomSkillParameterWithContext(i0 context.Context, i1 *alexaforbusiness.GetRoomSkillParameterInput, i2 ...request.Option) (r0 *alexaforbusiness.GetRoomSkillParameterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRoomSkillParameterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.GetRoomSkillParameterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeGetRoomSkillParameterWithContext(ctx context.Context, in *alexaforbusiness.GetRoomSkillParameterInput, _ ...request.Option) (*alexaforbusiness.GetRoomSkillParameterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRoomSkillParameter cancelled", ctx.Err())
	default:
		return d.GetRoomSkillParameter(in)
	}
}

func (d *AlexaForBusinessDouble) GetRoomWithContext(i0 context.Context, i1 *alexaforbusiness.GetRoomInput, i2 ...request.Option) (r0 *alexaforbusiness.GetRoomOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRoomWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.GetRoomOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeGetRoomWithContext(ctx context.Context, in *alexaforbusiness.GetRoomInput, _ ...request.Option) (*alexaforbusiness.GetRoomOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRoom cancelled", ctx.Err())
	default:
		return d.GetRoom(in)
	}
}

func (d *AlexaForBusinessDouble) GetSkillGroup(i0 *alexaforbusiness.GetSkillGroupInput) (r0 *alexaforbusiness.GetSkillGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSkillGroup", i0)
	r0, _ = returns[0].(*alexaforbusiness.GetSkillGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) GetSkillGroupRequest(i0 *alexaforbusiness.GetSkillGroupInput) (r0 *request.Request, r1 *alexaforbusiness.GetSkillGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSkillGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.GetSkillGroupOutput)
	return
}

func (d *AlexaForBusinessDouble) GetSkillGroupWithContext(i0 context.Context, i1 *alexaforbusiness.GetSkillGroupInput, i2 ...request.Option) (r0 *alexaforbusiness.GetSkillGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSkillGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.GetSkillGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeGetSkillGroupWithContext(ctx context.Context, in *alexaforbusiness.GetSkillGroupInput, _ ...request.Option) (*alexaforbusiness.GetSkillGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetSkillGroup cancelled", ctx.Err())
	default:
		return d.GetSkillGroup(in)
	}
}

func (d *AlexaForBusinessDouble) ListBusinessReportSchedules(i0 *alexaforbusiness.ListBusinessReportSchedulesInput) (r0 *alexaforbusiness.ListBusinessReportSchedulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBusinessReportSchedules", i0)
	r0, _ = returns[0].(*alexaforbusiness.ListBusinessReportSchedulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) ListBusinessReportSchedulesPages(i0 *alexaforbusiness.ListBusinessReportSchedulesInput, i1 func(*alexaforbusiness.ListBusinessReportSchedulesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBusinessReportSchedulesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeListBusinessReportSchedulesPages(in *alexaforbusiness.ListBusinessReportSchedulesInput, pager func(*alexaforbusiness.ListBusinessReportSchedulesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListBusinessReportSchedules", paginators, in, pager)
}

func (d *AlexaForBusinessDouble) ListBusinessReportSchedulesPagesWithContext(i0 context.Context, i1 *alexaforbusiness.ListBusinessReportSchedulesInput, i2 func(*alexaforbusiness.ListBusinessReportSchedulesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBusinessReportSchedulesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeListBusinessReportSchedulesPagesWithContext(ctx context.Context, in *alexaforbusiness.ListBusinessReportSchedulesInput, pager func(*alexaforbusiness.ListBusinessReportSchedulesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListBusinessReportSchedules", paginators, ctx, in, pager, options...)
}

func (d *AlexaForBusinessDouble) ListBusinessReportSchedulesRequest(i0 *alexaforbusiness.ListBusinessReportSchedulesInput) (r0 *request.Request, r1 *alexaforbusiness.ListBusinessReportSchedulesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBusinessReportSchedulesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.ListBusinessReportSchedulesOutput)
	return
}

func (d *AlexaForBusinessDouble) ListBusinessReportSchedulesWithContext(i0 context.Context, i1 *alexaforbusiness.ListBusinessReportSchedulesInput, i2 ...request.Option) (r0 *alexaforbusiness.ListBusinessReportSchedulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBusinessReportSchedulesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.ListBusinessReportSchedulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeListBusinessReportSchedulesWithContext(ctx context.Context, in *alexaforbusiness.ListBusinessReportSchedulesInput, _ ...request.Option) (*alexaforbusiness.ListBusinessReportSchedulesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListBusinessReportSchedules cancelled", ctx.Err())
	default:
		return d.ListBusinessReportSchedules(in)
	}
}

func (d *AlexaForBusinessDouble) ListConferenceProviders(i0 *alexaforbusiness.ListConferenceProvidersInput) (r0 *alexaforbusiness.ListConferenceProvidersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListConferenceProviders", i0)
	r0, _ = returns[0].(*alexaforbusiness.ListConferenceProvidersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) ListConferenceProvidersPages(i0 *alexaforbusiness.ListConferenceProvidersInput, i1 func(*alexaforbusiness.ListConferenceProvidersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListConferenceProvidersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeListConferenceProvidersPages(in *alexaforbusiness.ListConferenceProvidersInput, pager func(*alexaforbusiness.ListConferenceProvidersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListConferenceProviders", paginators, in, pager)
}

func (d *AlexaForBusinessDouble) ListConferenceProvidersPagesWithContext(i0 context.Context, i1 *alexaforbusiness.ListConferenceProvidersInput, i2 func(*alexaforbusiness.ListConferenceProvidersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListConferenceProvidersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeListConferenceProvidersPagesWithContext(ctx context.Context, in *alexaforbusiness.ListConferenceProvidersInput, pager func(*alexaforbusiness.ListConferenceProvidersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListConferenceProviders", paginators, ctx, in, pager, options...)
}

func (d *AlexaForBusinessDouble) ListConferenceProvidersRequest(i0 *alexaforbusiness.ListConferenceProvidersInput) (r0 *request.Request, r1 *alexaforbusiness.ListConferenceProvidersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListConferenceProvidersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.ListConferenceProvidersOutput)
	return
}

func (d *AlexaForBusinessDouble) ListConferenceProvidersWithContext(i0 context.Context, i1 *alexaforbusiness.ListConferenceProvidersInput, i2 ...request.Option) (r0 *alexaforbusiness.ListConferenceProvidersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListConferenceProvidersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.ListConferenceProvidersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeListConferenceProvidersWithContext(ctx context.Context, in *alexaforbusiness.ListConferenceProvidersInput, _ ...request.Option) (*alexaforbusiness.ListConferenceProvidersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListConferenceProviders cancelled", ctx.Err())
	default:
		return d.ListConferenceProviders(in)
	}
}

func (d *AlexaForBusinessDouble) ListDeviceEvents(i0 *alexaforbusiness.ListDeviceEventsInput) (r0 *alexaforbusiness.ListDeviceEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeviceEvents", i0)
	r0, _ = returns[0].(*alexaforbusiness.ListDeviceEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) ListDeviceEventsPages(i0 *alexaforbusiness.ListDeviceEventsInput, i1 func(*alexaforbusiness.ListDeviceEventsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeviceEventsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeListDeviceEventsPages(in *alexaforbusiness.ListDeviceEventsInput, pager func(*alexaforbusiness.ListDeviceEventsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListDeviceEvents", paginators, in, pager)
}

func (d *AlexaForBusinessDouble) ListDeviceEventsPagesWithContext(i0 context.Context, i1 *alexaforbusiness.ListDeviceEventsInput, i2 func(*alexaforbusiness.ListDeviceEventsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeviceEventsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeListDeviceEventsPagesWithContext(ctx context.Context, in *alexaforbusiness.ListDeviceEventsInput, pager func(*alexaforbusiness.ListDeviceEventsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListDeviceEvents", paginators, ctx, in, pager, options...)
}

func (d *AlexaForBusinessDouble) ListDeviceEventsRequest(i0 *alexaforbusiness.ListDeviceEventsInput) (r0 *request.Request, r1 *alexaforbusiness.ListDeviceEventsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeviceEventsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.ListDeviceEventsOutput)
	return
}

func (d *AlexaForBusinessDouble) ListDeviceEventsWithContext(i0 context.Context, i1 *alexaforbusiness.ListDeviceEventsInput, i2 ...request.Option) (r0 *alexaforbusiness.ListDeviceEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeviceEventsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.ListDeviceEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeListDeviceEventsWithContext(ctx context.Context, in *alexaforbusiness.ListDeviceEventsInput, _ ...request.Option) (*alexaforbusiness.ListDeviceEventsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDeviceEvents cancelled", ctx.Err())
	default:
		return d.ListDeviceEvents(in)
	}
}

func (d *AlexaForBusinessDouble) ListGatewayGroups(i0 *alexaforbusiness.ListGatewayGroupsInput) (r0 *alexaforbusiness.ListGatewayGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGatewayGroups", i0)
	r0, _ = returns[0].(*alexaforbusiness.ListGatewayGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) ListGatewayGroupsPages(i0 *alexaforbusiness.ListGatewayGroupsInput, i1 func(*alexaforbusiness.ListGatewayGroupsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGatewayGroupsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeListGatewayGroupsPages(in *alexaforbusiness.ListGatewayGroupsInput, pager func(*alexaforbusiness.ListGatewayGroupsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListGatewayGroups", paginators, in, pager)
}

func (d *AlexaForBusinessDouble) ListGatewayGroupsPagesWithContext(i0 context.Context, i1 *alexaforbusiness.ListGatewayGroupsInput, i2 func(*alexaforbusiness.ListGatewayGroupsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGatewayGroupsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeListGatewayGroupsPagesWithContext(ctx context.Context, in *alexaforbusiness.ListGatewayGroupsInput, pager func(*alexaforbusiness.ListGatewayGroupsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListGatewayGroups", paginators, ctx, in, pager, options...)
}

func (d *AlexaForBusinessDouble) ListGatewayGroupsRequest(i0 *alexaforbusiness.ListGatewayGroupsInput) (r0 *request.Request, r1 *alexaforbusiness.ListGatewayGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGatewayGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.ListGatewayGroupsOutput)
	return
}

func (d *AlexaForBusinessDouble) ListGatewayGroupsWithContext(i0 context.Context, i1 *alexaforbusiness.ListGatewayGroupsInput, i2 ...request.Option) (r0 *alexaforbusiness.ListGatewayGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGatewayGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.ListGatewayGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeListGatewayGroupsWithContext(ctx context.Context, in *alexaforbusiness.ListGatewayGroupsInput, _ ...request.Option) (*alexaforbusiness.ListGatewayGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListGatewayGroups cancelled", ctx.Err())
	default:
		return d.ListGatewayGroups(in)
	}
}

func (d *AlexaForBusinessDouble) ListGateways(i0 *alexaforbusiness.ListGatewaysInput) (r0 *alexaforbusiness.ListGatewaysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGateways", i0)
	r0, _ = returns[0].(*alexaforbusiness.ListGatewaysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) ListGatewaysPages(i0 *alexaforbusiness.ListGatewaysInput, i1 func(*alexaforbusiness.ListGatewaysOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGatewaysPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeListGatewaysPages(in *alexaforbusiness.ListGatewaysInput, pager func(*alexaforbusiness.ListGatewaysOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListGateways", paginators, in, pager)
}

func (d *AlexaForBusinessDouble) ListGatewaysPagesWithContext(i0 context.Context, i1 *alexaforbusiness.ListGatewaysInput, i2 func(*alexaforbusiness.ListGatewaysOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGatewaysPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeListGatewaysPagesWithContext(ctx context.Context, in *alexaforbusiness.ListGatewaysInput, pager func(*alexaforbusiness.ListGatewaysOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListGateways", paginators, ctx, in, pager, options...)
}

func (d *AlexaForBusinessDouble) ListGatewaysRequest(i0 *alexaforbusiness.ListGatewaysInput) (r0 *request.Request, r1 *alexaforbusiness.ListGatewaysOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGatewaysRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.ListGatewaysOutput)
	return
}

func (d *AlexaForBusinessDouble) ListGatewaysWithContext(i0 context.Context, i1 *alexaforbusiness.ListGatewaysInput, i2 ...request.Option) (r0 *alexaforbusiness.ListGatewaysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGatewaysWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.ListGatewaysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeListGatewaysWithContext(ctx context.Context, in *alexaforbusiness.ListGatewaysInput, _ ...request.Option) (*alexaforbusiness.ListGatewaysOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListGateways cancelled", ctx.Err())
	default:
		return d.ListGateways(in)
	}
}

func (d *AlexaForBusinessDouble) ListSkills(i0 *alexaforbusiness.ListSkillsInput) (r0 *alexaforbusiness.ListSkillsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSkills", i0)
	r0, _ = returns[0].(*alexaforbusiness.ListSkillsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) ListSkillsPages(i0 *alexaforbusiness.ListSkillsInput, i1 func(*alexaforbusiness.ListSkillsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSkillsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeListSkillsPages(in *alexaforbusiness.ListSkillsInput, pager func(*alexaforbusiness.ListSkillsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListSkills", paginators, in, pager)
}

func (d *AlexaForBusinessDouble) ListSkillsPagesWithContext(i0 context.Context, i1 *alexaforbusiness.ListSkillsInput, i2 func(*alexaforbusiness.ListSkillsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSkillsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeListSkillsPagesWithContext(ctx context.Context, in *alexaforbusiness.ListSkillsInput, pager func(*alexaforbusiness.ListSkillsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListSkills", paginators, ctx, in, pager, options...)
}

func (d *AlexaForBusinessDouble) ListSkillsRequest(i0 *alexaforbusiness.ListSkillsInput) (r0 *request.Request, r1 *alexaforbusiness.ListSkillsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSkillsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.ListSkillsOutput)
	return
}

func (d *AlexaForBusinessDouble) ListSkillsStoreCategories(i0 *alexaforbusiness.ListSkillsStoreCategoriesInput) (r0 *alexaforbusiness.ListSkillsStoreCategoriesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSkillsStoreCategories", i0)
	r0, _ = returns[0].(*alexaforbusiness.ListSkillsStoreCategoriesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) ListSkillsStoreCategoriesPages(i0 *alexaforbusiness.ListSkillsStoreCategoriesInput, i1 func(*alexaforbusiness.ListSkillsStoreCategoriesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSkillsStoreCategoriesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeListSkillsStoreCategoriesPages(in *alexaforbusiness.ListSkillsStoreCategoriesInput, pager func(*alexaforbusiness.ListSkillsStoreCategoriesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListSkillsStoreCategories", paginators, in, pager)
}

func (d *AlexaForBusinessDouble) ListSkillsStoreCategoriesPagesWithContext(i0 context.Context, i1 *alexaforbusiness.ListSkillsStoreCategoriesInput, i2 func(*alexaforbusiness.ListSkillsStoreCategoriesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSkillsStoreCategoriesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeListSkillsStoreCategoriesPagesWithContext(ctx context.Context, in *alexaforbusiness.ListSkillsStoreCategoriesInput, pager func(*alexaforbusiness.ListSkillsStoreCategoriesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListSkillsStoreCategories", paginators, ctx, in, pager, options...)
}

func (d *AlexaForBusinessDouble) ListSkillsStoreCategoriesRequest(i0 *alexaforbusiness.ListSkillsStoreCategoriesInput) (r0 *request.Request, r1 *alexaforbusiness.ListSkillsStoreCategoriesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSkillsStoreCategoriesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.ListSkillsStoreCategoriesOutput)
	return
}

func (d *AlexaForBusinessDouble) ListSkillsStoreCategoriesWithContext(i0 context.Context, i1 *alexaforbusiness.ListSkillsStoreCategoriesInput, i2 ...request.Option) (r0 *alexaforbusiness.ListSkillsStoreCategoriesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSkillsStoreCategoriesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.ListSkillsStoreCategoriesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeListSkillsStoreCategoriesWithContext(ctx context.Context, in *alexaforbusiness.ListSkillsStoreCategoriesInput, _ ...request.Option) (*alexaforbusiness.ListSkillsStoreCategoriesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListSkillsStoreCategories cancelled", ctx.Err())
	default:
		return d.ListSkillsStoreCategories(in)
	}
}

func (d *AlexaForBusinessDouble) ListSkillsStoreSkillsByCategory(i0 *alexaforbusiness.ListSkillsStoreSkillsByCategoryInput) (r0 *alexaforbusiness.ListSkillsStoreSkillsByCategoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSkillsStoreSkillsByCategory", i0)
	r0, _ = returns[0].(*alexaforbusiness.ListSkillsStoreSkillsByCategoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) ListSkillsStoreSkillsByCategoryPages(i0 *alexaforbusiness.ListSkillsStoreSkillsByCategoryInput, i1 func(*alexaforbusiness.ListSkillsStoreSkillsByCategoryOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSkillsStoreSkillsByCategoryPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeListSkillsStoreSkillsByCategoryPages(in *alexaforbusiness.ListSkillsStoreSkillsByCategoryInput, pager func(*alexaforbusiness.ListSkillsStoreSkillsByCategoryOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListSkillsStoreSkillsByCategory", paginators, in, pager)
}

func (d *AlexaForBusinessDouble) ListSkillsStoreSkillsByCategoryPagesWithContext(i0 context.Context, i1 *alexaforbusiness.ListSkillsStoreSkillsByCategoryInput, i2 func(*alexaforbusiness.ListSkillsStoreSkillsByCategoryOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSkillsStoreSkillsByCategoryPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeListSkillsStoreSkillsByCategoryPagesWithContext(ctx context.Context, in *alexaforbusiness.ListSkillsStoreSkillsByCategoryInput, pager func(*alexaforbusiness.ListSkillsStoreSkillsByCategoryOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListSkillsStoreSkillsByCategory", paginators, ctx, in, pager, options...)
}

func (d *AlexaForBusinessDouble) ListSkillsStoreSkillsByCategoryRequest(i0 *alexaforbusiness.ListSkillsStoreSkillsByCategoryInput) (r0 *request.Request, r1 *alexaforbusiness.ListSkillsStoreSkillsByCategoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSkillsStoreSkillsByCategoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.ListSkillsStoreSkillsByCategoryOutput)
	return
}

func (d *AlexaForBusinessDouble) ListSkillsStoreSkillsByCategoryWithContext(i0 context.Context, i1 *alexaforbusiness.ListSkillsStoreSkillsByCategoryInput, i2 ...request.Option) (r0 *alexaforbusiness.ListSkillsStoreSkillsByCategoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSkillsStoreSkillsByCategoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.ListSkillsStoreSkillsByCategoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeListSkillsStoreSkillsByCategoryWithContext(ctx context.Context, in *alexaforbusiness.ListSkillsStoreSkillsByCategoryInput, _ ...request.Option) (*alexaforbusiness.ListSkillsStoreSkillsByCategoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListSkillsStoreSkillsByCategory cancelled", ctx.Err())
	default:
		return d.ListSkillsStoreSkillsByCategory(in)
	}
}

func (d *AlexaForBusinessDouble) ListSkillsWithContext(i0 context.Context, i1 *alexaforbusiness.ListSkillsInput, i2 ...request.Option) (r0 *alexaforbusiness.ListSkillsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSkillsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.ListSkillsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeListSkillsWithContext(ctx context.Context, in *alexaforbusiness.ListSkillsInput, _ ...request.Option) (*alexaforbusiness.ListSkillsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListSkills cancelled", ctx.Err())
	default:
		return d.ListSkills(in)
	}
}

func (d *AlexaForBusinessDouble) ListSmartHomeAppliances(i0 *alexaforbusiness.ListSmartHomeAppliancesInput) (r0 *alexaforbusiness.ListSmartHomeAppliancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSmartHomeAppliances", i0)
	r0, _ = returns[0].(*alexaforbusiness.ListSmartHomeAppliancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) ListSmartHomeAppliancesPages(i0 *alexaforbusiness.ListSmartHomeAppliancesInput, i1 func(*alexaforbusiness.ListSmartHomeAppliancesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSmartHomeAppliancesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeListSmartHomeAppliancesPages(in *alexaforbusiness.ListSmartHomeAppliancesInput, pager func(*alexaforbusiness.ListSmartHomeAppliancesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListSmartHomeAppliances", paginators, in, pager)
}

func (d *AlexaForBusinessDouble) ListSmartHomeAppliancesPagesWithContext(i0 context.Context, i1 *alexaforbusiness.ListSmartHomeAppliancesInput, i2 func(*alexaforbusiness.ListSmartHomeAppliancesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSmartHomeAppliancesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeListSmartHomeAppliancesPagesWithContext(ctx context.Context, in *alexaforbusiness.ListSmartHomeAppliancesInput, pager func(*alexaforbusiness.ListSmartHomeAppliancesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListSmartHomeAppliances", paginators, ctx, in, pager, options...)
}

func (d *AlexaForBusinessDouble) ListSmartHomeAppliancesRequest(i0 *alexaforbusiness.ListSmartHomeAppliancesInput) (r0 *request.Request, r1 *alexaforbusiness.ListSmartHomeAppliancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSmartHomeAppliancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.ListSmartHomeAppliancesOutput)
	return
}

func (d *AlexaForBusinessDouble) ListSmartHomeAppliancesWithContext(i0 context.Context, i1 *alexaforbusiness.ListSmartHomeAppliancesInput, i2 ...request.Option) (r0 *alexaforbusiness.ListSmartHomeAppliancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSmartHomeAppliancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.ListSmartHomeAppliancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeListSmartHomeAppliancesWithContext(ctx context.Context, in *alexaforbusiness.ListSmartHomeAppliancesInput, _ ...request.Option) (*alexaforbusiness.ListSmartHomeAppliancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListSmartHomeAppliances cancelled", ctx.Err())
	default:
		return d.ListSmartHomeAppliances(in)
	}
}

func (d *AlexaForBusinessDouble) ListTags(i0 *alexaforbusiness.ListTagsInput) (r0 *alexaforbusiness.ListTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTags", i0)
	r0, _ = returns[0].(*alexaforbusiness.ListTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) ListTagsPages(i0 *alexaforbusiness.ListTagsInput, i1 func(*alexaforbusiness.ListTagsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeListTagsPages(in *alexaforbusiness.ListTagsInput, pager func(*alexaforbusiness.ListTagsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTags", paginators, in, pager)
}

func (d *AlexaForBusinessDouble) ListTagsPagesWithContext(i0 context.Context, i1 *alexaforbusiness.ListTagsInput, i2 func(*alexaforbusiness.ListTagsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeListTagsPagesWithContext(ctx context.Context, in *alexaforbusiness.ListTagsInput, pager func(*alexaforbusiness.ListTagsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTags", paginators, ctx, in, pager, options...)
}

func (d *AlexaForBusinessDouble) ListTagsRequest(i0 *alexaforbusiness.ListTagsInput) (r0 *request.Request, r1 *alexaforbusiness.ListTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.ListTagsOutput)
	return
}

func (d *AlexaForBusinessDouble) ListTagsWithContext(i0 context.Context, i1 *alexaforbusiness.ListTagsInput, i2 ...request.Option) (r0 *alexaforbusiness.ListTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.ListTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeListTagsWithContext(ctx context.Context, in *alexaforbusiness.ListTagsInput, _ ...request.Option) (*alexaforbusiness.ListTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTags cancelled", ctx.Err())
	default:
		return d.ListTags(in)
	}
}

func (d *AlexaForBusinessDouble) PutConferencePreference(i0 *alexaforbusiness.PutConferencePreferenceInput) (r0 *alexaforbusiness.PutConferencePreferenceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutConferencePreference", i0)
	r0, _ = returns[0].(*alexaforbusiness.PutConferencePreferenceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) PutConferencePreferenceRequest(i0 *alexaforbusiness.PutConferencePreferenceInput) (r0 *request.Request, r1 *alexaforbusiness.PutConferencePreferenceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutConferencePreferenceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.PutConferencePreferenceOutput)
	return
}

func (d *AlexaForBusinessDouble) PutConferencePreferenceWithContext(i0 context.Context, i1 *alexaforbusiness.PutConferencePreferenceInput, i2 ...request.Option) (r0 *alexaforbusiness.PutConferencePreferenceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutConferencePreferenceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.PutConferencePreferenceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakePutConferencePreferenceWithContext(ctx context.Context, in *alexaforbusiness.PutConferencePreferenceInput, _ ...request.Option) (*alexaforbusiness.PutConferencePreferenceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutConferencePreference cancelled", ctx.Err())
	default:
		return d.PutConferencePreference(in)
	}
}

func (d *AlexaForBusinessDouble) PutInvitationConfiguration(i0 *alexaforbusiness.PutInvitationConfigurationInput) (r0 *alexaforbusiness.PutInvitationConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutInvitationConfiguration", i0)
	r0, _ = returns[0].(*alexaforbusiness.PutInvitationConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) PutInvitationConfigurationRequest(i0 *alexaforbusiness.PutInvitationConfigurationInput) (r0 *request.Request, r1 *alexaforbusiness.PutInvitationConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutInvitationConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.PutInvitationConfigurationOutput)
	return
}

func (d *AlexaForBusinessDouble) PutInvitationConfigurationWithContext(i0 context.Context, i1 *alexaforbusiness.PutInvitationConfigurationInput, i2 ...request.Option) (r0 *alexaforbusiness.PutInvitationConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutInvitationConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.PutInvitationConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakePutInvitationConfigurationWithContext(ctx context.Context, in *alexaforbusiness.PutInvitationConfigurationInput, _ ...request.Option) (*alexaforbusiness.PutInvitationConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutInvitationConfiguration cancelled", ctx.Err())
	default:
		return d.PutInvitationConfiguration(in)
	}
}

func (d *AlexaForBusinessDouble) PutRoomSkillParameter(i0 *alexaforbusiness.PutRoomSkillParameterInput) (r0 *alexaforbusiness.PutRoomSkillParameterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRoomSkillParameter", i0)
	r0, _ = returns[0].(*alexaforbusiness.PutRoomSkillParameterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) PutRoomSkillParameterRequest(i0 *alexaforbusiness.PutRoomSkillParameterInput) (r0 *request.Request, r1 *alexaforbusiness.PutRoomSkillParameterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRoomSkillParameterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.PutRoomSkillParameterOutput)
	return
}

func (d *AlexaForBusinessDouble) PutRoomSkillParameterWithContext(i0 context.Context, i1 *alexaforbusiness.PutRoomSkillParameterInput, i2 ...request.Option) (r0 *alexaforbusiness.PutRoomSkillParameterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRoomSkillParameterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.PutRoomSkillParameterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakePutRoomSkillParameterWithContext(ctx context.Context, in *alexaforbusiness.PutRoomSkillParameterInput, _ ...request.Option) (*alexaforbusiness.PutRoomSkillParameterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutRoomSkillParameter cancelled", ctx.Err())
	default:
		return d.PutRoomSkillParameter(in)
	}
}

func (d *AlexaForBusinessDouble) PutSkillAuthorization(i0 *alexaforbusiness.PutSkillAuthorizationInput) (r0 *alexaforbusiness.PutSkillAuthorizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutSkillAuthorization", i0)
	r0, _ = returns[0].(*alexaforbusiness.PutSkillAuthorizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) PutSkillAuthorizationRequest(i0 *alexaforbusiness.PutSkillAuthorizationInput) (r0 *request.Request, r1 *alexaforbusiness.PutSkillAuthorizationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutSkillAuthorizationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.PutSkillAuthorizationOutput)
	return
}

func (d *AlexaForBusinessDouble) PutSkillAuthorizationWithContext(i0 context.Context, i1 *alexaforbusiness.PutSkillAuthorizationInput, i2 ...request.Option) (r0 *alexaforbusiness.PutSkillAuthorizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutSkillAuthorizationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.PutSkillAuthorizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakePutSkillAuthorizationWithContext(ctx context.Context, in *alexaforbusiness.PutSkillAuthorizationInput, _ ...request.Option) (*alexaforbusiness.PutSkillAuthorizationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutSkillAuthorization cancelled", ctx.Err())
	default:
		return d.PutSkillAuthorization(in)
	}
}

func (d *AlexaForBusinessDouble) RegisterAVSDevice(i0 *alexaforbusiness.RegisterAVSDeviceInput) (r0 *alexaforbusiness.RegisterAVSDeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterAVSDevice", i0)
	r0, _ = returns[0].(*alexaforbusiness.RegisterAVSDeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) RegisterAVSDeviceRequest(i0 *alexaforbusiness.RegisterAVSDeviceInput) (r0 *request.Request, r1 *alexaforbusiness.RegisterAVSDeviceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterAVSDeviceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.RegisterAVSDeviceOutput)
	return
}

func (d *AlexaForBusinessDouble) RegisterAVSDeviceWithContext(i0 context.Context, i1 *alexaforbusiness.RegisterAVSDeviceInput, i2 ...request.Option) (r0 *alexaforbusiness.RegisterAVSDeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterAVSDeviceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.RegisterAVSDeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeRegisterAVSDeviceWithContext(ctx context.Context, in *alexaforbusiness.RegisterAVSDeviceInput, _ ...request.Option) (*alexaforbusiness.RegisterAVSDeviceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterAVSDevice cancelled", ctx.Err())
	default:
		return d.RegisterAVSDevice(in)
	}
}

func (d *AlexaForBusinessDouble) RejectSkill(i0 *alexaforbusiness.RejectSkillInput) (r0 *alexaforbusiness.RejectSkillOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RejectSkill", i0)
	r0, _ = returns[0].(*alexaforbusiness.RejectSkillOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) RejectSkillRequest(i0 *alexaforbusiness.RejectSkillInput) (r0 *request.Request, r1 *alexaforbusiness.RejectSkillOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RejectSkillRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.RejectSkillOutput)
	return
}

func (d *AlexaForBusinessDouble) RejectSkillWithContext(i0 context.Context, i1 *alexaforbusiness.RejectSkillInput, i2 ...request.Option) (r0 *alexaforbusiness.RejectSkillOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RejectSkillWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.RejectSkillOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeRejectSkillWithContext(ctx context.Context, in *alexaforbusiness.RejectSkillInput, _ ...request.Option) (*alexaforbusiness.RejectSkillOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RejectSkill cancelled", ctx.Err())
	default:
		return d.RejectSkill(in)
	}
}

func (d *AlexaForBusinessDouble) ResolveRoom(i0 *alexaforbusiness.ResolveRoomInput) (r0 *alexaforbusiness.ResolveRoomOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResolveRoom", i0)
	r0, _ = returns[0].(*alexaforbusiness.ResolveRoomOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) ResolveRoomRequest(i0 *alexaforbusiness.ResolveRoomInput) (r0 *request.Request, r1 *alexaforbusiness.ResolveRoomOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResolveRoomRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.ResolveRoomOutput)
	return
}

func (d *AlexaForBusinessDouble) ResolveRoomWithContext(i0 context.Context, i1 *alexaforbusiness.ResolveRoomInput, i2 ...request.Option) (r0 *alexaforbusiness.ResolveRoomOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResolveRoomWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.ResolveRoomOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeResolveRoomWithContext(ctx context.Context, in *alexaforbusiness.ResolveRoomInput, _ ...request.Option) (*alexaforbusiness.ResolveRoomOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ResolveRoom cancelled", ctx.Err())
	default:
		return d.ResolveRoom(in)
	}
}

func (d *AlexaForBusinessDouble) RevokeInvitation(i0 *alexaforbusiness.RevokeInvitationInput) (r0 *alexaforbusiness.RevokeInvitationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeInvitation", i0)
	r0, _ = returns[0].(*alexaforbusiness.RevokeInvitationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) RevokeInvitationRequest(i0 *alexaforbusiness.RevokeInvitationInput) (r0 *request.Request, r1 *alexaforbusiness.RevokeInvitationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeInvitationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.RevokeInvitationOutput)
	return
}

func (d *AlexaForBusinessDouble) RevokeInvitationWithContext(i0 context.Context, i1 *alexaforbusiness.RevokeInvitationInput, i2 ...request.Option) (r0 *alexaforbusiness.RevokeInvitationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeInvitationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.RevokeInvitationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeRevokeInvitationWithContext(ctx context.Context, in *alexaforbusiness.RevokeInvitationInput, _ ...request.Option) (*alexaforbusiness.RevokeInvitationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RevokeInvitation cancelled", ctx.Err())
	default:
		return d.RevokeInvitation(in)
	}
}

func (d *AlexaForBusinessDouble) SearchAddressBooks(i0 *alexaforbusiness.SearchAddressBooksInput) (r0 *alexaforbusiness.SearchAddressBooksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchAddressBooks", i0)
	r0, _ = returns[0].(*alexaforbusiness.SearchAddressBooksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) SearchAddressBooksPages(i0 *alexaforbusiness.SearchAddressBooksInput, i1 func(*alexaforbusiness.SearchAddressBooksOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchAddressBooksPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeSearchAddressBooksPages(in *alexaforbusiness.SearchAddressBooksInput, pager func(*alexaforbusiness.SearchAddressBooksOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("SearchAddressBooks", paginators, in, pager)
}

func (d *AlexaForBusinessDouble) SearchAddressBooksPagesWithContext(i0 context.Context, i1 *alexaforbusiness.SearchAddressBooksInput, i2 func(*alexaforbusiness.SearchAddressBooksOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchAddressBooksPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeSearchAddressBooksPagesWithContext(ctx context.Context, in *alexaforbusiness.SearchAddressBooksInput, pager func(*alexaforbusiness.SearchAddressBooksOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("SearchAddressBooks", paginators, ctx, in, pager, options...)
}

func (d *AlexaForBusinessDouble) SearchAddressBooksRequest(i0 *alexaforbusiness.SearchAddressBooksInput) (r0 *request.Request, r1 *alexaforbusiness.SearchAddressBooksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchAddressBooksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.SearchAddressBooksOutput)
	return
}

func (d *AlexaForBusinessDouble) SearchAddressBooksWithContext(i0 context.Context, i1 *alexaforbusiness.SearchAddressBooksInput, i2 ...request.Option) (r0 *alexaforbusiness.SearchAddressBooksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchAddressBooksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.SearchAddressBooksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeSearchAddressBooksWithContext(ctx context.Context, in *alexaforbusiness.SearchAddressBooksInput, _ ...request.Option) (*alexaforbusiness.SearchAddressBooksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SearchAddressBooks cancelled", ctx.Err())
	default:
		return d.SearchAddressBooks(in)
	}
}

func (d *AlexaForBusinessDouble) SearchContacts(i0 *alexaforbusiness.SearchContactsInput) (r0 *alexaforbusiness.SearchContactsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchContacts", i0)
	r0, _ = returns[0].(*alexaforbusiness.SearchContactsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) SearchContactsPages(i0 *alexaforbusiness.SearchContactsInput, i1 func(*alexaforbusiness.SearchContactsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchContactsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeSearchContactsPages(in *alexaforbusiness.SearchContactsInput, pager func(*alexaforbusiness.SearchContactsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("SearchContacts", paginators, in, pager)
}

func (d *AlexaForBusinessDouble) SearchContactsPagesWithContext(i0 context.Context, i1 *alexaforbusiness.SearchContactsInput, i2 func(*alexaforbusiness.SearchContactsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchContactsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeSearchContactsPagesWithContext(ctx context.Context, in *alexaforbusiness.SearchContactsInput, pager func(*alexaforbusiness.SearchContactsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("SearchContacts", paginators, ctx, in, pager, options...)
}

func (d *AlexaForBusinessDouble) SearchContactsRequest(i0 *alexaforbusiness.SearchContactsInput) (r0 *request.Request, r1 *alexaforbusiness.SearchContactsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchContactsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.SearchContactsOutput)
	return
}

func (d *AlexaForBusinessDouble) SearchContactsWithContext(i0 context.Context, i1 *alexaforbusiness.SearchContactsInput, i2 ...request.Option) (r0 *alexaforbusiness.SearchContactsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchContactsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.SearchContactsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeSearchContactsWithContext(ctx context.Context, in *alexaforbusiness.SearchContactsInput, _ ...request.Option) (*alexaforbusiness.SearchContactsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SearchContacts cancelled", ctx.Err())
	default:
		return d.SearchContacts(in)
	}
}

func (d *AlexaForBusinessDouble) SearchDevices(i0 *alexaforbusiness.SearchDevicesInput) (r0 *alexaforbusiness.SearchDevicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchDevices", i0)
	r0, _ = returns[0].(*alexaforbusiness.SearchDevicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) SearchDevicesPages(i0 *alexaforbusiness.SearchDevicesInput, i1 func(*alexaforbusiness.SearchDevicesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchDevicesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeSearchDevicesPages(in *alexaforbusiness.SearchDevicesInput, pager func(*alexaforbusiness.SearchDevicesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("SearchDevices", paginators, in, pager)
}

func (d *AlexaForBusinessDouble) SearchDevicesPagesWithContext(i0 context.Context, i1 *alexaforbusiness.SearchDevicesInput, i2 func(*alexaforbusiness.SearchDevicesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchDevicesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeSearchDevicesPagesWithContext(ctx context.Context, in *alexaforbusiness.SearchDevicesInput, pager func(*alexaforbusiness.SearchDevicesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("SearchDevices", paginators, ctx, in, pager, options...)
}

func (d *AlexaForBusinessDouble) SearchDevicesRequest(i0 *alexaforbusiness.SearchDevicesInput) (r0 *request.Request, r1 *alexaforbusiness.SearchDevicesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchDevicesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.SearchDevicesOutput)
	return
}

func (d *AlexaForBusinessDouble) SearchDevicesWithContext(i0 context.Context, i1 *alexaforbusiness.SearchDevicesInput, i2 ...request.Option) (r0 *alexaforbusiness.SearchDevicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchDevicesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.SearchDevicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeSearchDevicesWithContext(ctx context.Context, in *alexaforbusiness.SearchDevicesInput, _ ...request.Option) (*alexaforbusiness.SearchDevicesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SearchDevices cancelled", ctx.Err())
	default:
		return d.SearchDevices(in)
	}
}

func (d *AlexaForBusinessDouble) SearchNetworkProfiles(i0 *alexaforbusiness.SearchNetworkProfilesInput) (r0 *alexaforbusiness.SearchNetworkProfilesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchNetworkProfiles", i0)
	r0, _ = returns[0].(*alexaforbusiness.SearchNetworkProfilesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) SearchNetworkProfilesPages(i0 *alexaforbusiness.SearchNetworkProfilesInput, i1 func(*alexaforbusiness.SearchNetworkProfilesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchNetworkProfilesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeSearchNetworkProfilesPages(in *alexaforbusiness.SearchNetworkProfilesInput, pager func(*alexaforbusiness.SearchNetworkProfilesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("SearchNetworkProfiles", paginators, in, pager)
}

func (d *AlexaForBusinessDouble) SearchNetworkProfilesPagesWithContext(i0 context.Context, i1 *alexaforbusiness.SearchNetworkProfilesInput, i2 func(*alexaforbusiness.SearchNetworkProfilesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchNetworkProfilesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeSearchNetworkProfilesPagesWithContext(ctx context.Context, in *alexaforbusiness.SearchNetworkProfilesInput, pager func(*alexaforbusiness.SearchNetworkProfilesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("SearchNetworkProfiles", paginators, ctx, in, pager, options...)
}

func (d *AlexaForBusinessDouble) SearchNetworkProfilesRequest(i0 *alexaforbusiness.SearchNetworkProfilesInput) (r0 *request.Request, r1 *alexaforbusiness.SearchNetworkProfilesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchNetworkProfilesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.SearchNetworkProfilesOutput)
	return
}

func (d *AlexaForBusinessDouble) SearchNetworkProfilesWithContext(i0 context.Context, i1 *alexaforbusiness.SearchNetworkProfilesInput, i2 ...request.Option) (r0 *alexaforbusiness.SearchNetworkProfilesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchNetworkProfilesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.SearchNetworkProfilesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeSearchNetworkProfilesWithContext(ctx context.Context, in *alexaforbusiness.SearchNetworkProfilesInput, _ ...request.Option) (*alexaforbusiness.SearchNetworkProfilesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SearchNetworkProfiles cancelled", ctx.Err())
	default:
		return d.SearchNetworkProfiles(in)
	}
}

func (d *AlexaForBusinessDouble) SearchProfiles(i0 *alexaforbusiness.SearchProfilesInput) (r0 *alexaforbusiness.SearchProfilesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchProfiles", i0)
	r0, _ = returns[0].(*alexaforbusiness.SearchProfilesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) SearchProfilesPages(i0 *alexaforbusiness.SearchProfilesInput, i1 func(*alexaforbusiness.SearchProfilesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchProfilesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeSearchProfilesPages(in *alexaforbusiness.SearchProfilesInput, pager func(*alexaforbusiness.SearchProfilesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("SearchProfiles", paginators, in, pager)
}

func (d *AlexaForBusinessDouble) SearchProfilesPagesWithContext(i0 context.Context, i1 *alexaforbusiness.SearchProfilesInput, i2 func(*alexaforbusiness.SearchProfilesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchProfilesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeSearchProfilesPagesWithContext(ctx context.Context, in *alexaforbusiness.SearchProfilesInput, pager func(*alexaforbusiness.SearchProfilesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("SearchProfiles", paginators, ctx, in, pager, options...)
}

func (d *AlexaForBusinessDouble) SearchProfilesRequest(i0 *alexaforbusiness.SearchProfilesInput) (r0 *request.Request, r1 *alexaforbusiness.SearchProfilesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchProfilesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.SearchProfilesOutput)
	return
}

func (d *AlexaForBusinessDouble) SearchProfilesWithContext(i0 context.Context, i1 *alexaforbusiness.SearchProfilesInput, i2 ...request.Option) (r0 *alexaforbusiness.SearchProfilesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchProfilesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.SearchProfilesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeSearchProfilesWithContext(ctx context.Context, in *alexaforbusiness.SearchProfilesInput, _ ...request.Option) (*alexaforbusiness.SearchProfilesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SearchProfiles cancelled", ctx.Err())
	default:
		return d.SearchProfiles(in)
	}
}

func (d *AlexaForBusinessDouble) SearchRooms(i0 *alexaforbusiness.SearchRoomsInput) (r0 *alexaforbusiness.SearchRoomsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchRooms", i0)
	r0, _ = returns[0].(*alexaforbusiness.SearchRoomsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) SearchRoomsPages(i0 *alexaforbusiness.SearchRoomsInput, i1 func(*alexaforbusiness.SearchRoomsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchRoomsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeSearchRoomsPages(in *alexaforbusiness.SearchRoomsInput, pager func(*alexaforbusiness.SearchRoomsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("SearchRooms", paginators, in, pager)
}

func (d *AlexaForBusinessDouble) SearchRoomsPagesWithContext(i0 context.Context, i1 *alexaforbusiness.SearchRoomsInput, i2 func(*alexaforbusiness.SearchRoomsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchRoomsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeSearchRoomsPagesWithContext(ctx context.Context, in *alexaforbusiness.SearchRoomsInput, pager func(*alexaforbusiness.SearchRoomsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("SearchRooms", paginators, ctx, in, pager, options...)
}

func (d *AlexaForBusinessDouble) SearchRoomsRequest(i0 *alexaforbusiness.SearchRoomsInput) (r0 *request.Request, r1 *alexaforbusiness.SearchRoomsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchRoomsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.SearchRoomsOutput)
	return
}

func (d *AlexaForBusinessDouble) SearchRoomsWithContext(i0 context.Context, i1 *alexaforbusiness.SearchRoomsInput, i2 ...request.Option) (r0 *alexaforbusiness.SearchRoomsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchRoomsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.SearchRoomsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeSearchRoomsWithContext(ctx context.Context, in *alexaforbusiness.SearchRoomsInput, _ ...request.Option) (*alexaforbusiness.SearchRoomsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SearchRooms cancelled", ctx.Err())
	default:
		return d.SearchRooms(in)
	}
}

func (d *AlexaForBusinessDouble) SearchSkillGroups(i0 *alexaforbusiness.SearchSkillGroupsInput) (r0 *alexaforbusiness.SearchSkillGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchSkillGroups", i0)
	r0, _ = returns[0].(*alexaforbusiness.SearchSkillGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) SearchSkillGroupsPages(i0 *alexaforbusiness.SearchSkillGroupsInput, i1 func(*alexaforbusiness.SearchSkillGroupsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchSkillGroupsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeSearchSkillGroupsPages(in *alexaforbusiness.SearchSkillGroupsInput, pager func(*alexaforbusiness.SearchSkillGroupsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("SearchSkillGroups", paginators, in, pager)
}

func (d *AlexaForBusinessDouble) SearchSkillGroupsPagesWithContext(i0 context.Context, i1 *alexaforbusiness.SearchSkillGroupsInput, i2 func(*alexaforbusiness.SearchSkillGroupsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchSkillGroupsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeSearchSkillGroupsPagesWithContext(ctx context.Context, in *alexaforbusiness.SearchSkillGroupsInput, pager func(*alexaforbusiness.SearchSkillGroupsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("SearchSkillGroups", paginators, ctx, in, pager, options...)
}

func (d *AlexaForBusinessDouble) SearchSkillGroupsRequest(i0 *alexaforbusiness.SearchSkillGroupsInput) (r0 *request.Request, r1 *alexaforbusiness.SearchSkillGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchSkillGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.SearchSkillGroupsOutput)
	return
}

func (d *AlexaForBusinessDouble) SearchSkillGroupsWithContext(i0 context.Context, i1 *alexaforbusiness.SearchSkillGroupsInput, i2 ...request.Option) (r0 *alexaforbusiness.SearchSkillGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchSkillGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.SearchSkillGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeSearchSkillGroupsWithContext(ctx context.Context, in *alexaforbusiness.SearchSkillGroupsInput, _ ...request.Option) (*alexaforbusiness.SearchSkillGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SearchSkillGroups cancelled", ctx.Err())
	default:
		return d.SearchSkillGroups(in)
	}
}

func (d *AlexaForBusinessDouble) SearchUsers(i0 *alexaforbusiness.SearchUsersInput) (r0 *alexaforbusiness.SearchUsersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchUsers", i0)
	r0, _ = returns[0].(*alexaforbusiness.SearchUsersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) SearchUsersPages(i0 *alexaforbusiness.SearchUsersInput, i1 func(*alexaforbusiness.SearchUsersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchUsersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeSearchUsersPages(in *alexaforbusiness.SearchUsersInput, pager func(*alexaforbusiness.SearchUsersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("SearchUsers", paginators, in, pager)
}

func (d *AlexaForBusinessDouble) SearchUsersPagesWithContext(i0 context.Context, i1 *alexaforbusiness.SearchUsersInput, i2 func(*alexaforbusiness.SearchUsersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchUsersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeSearchUsersPagesWithContext(ctx context.Context, in *alexaforbusiness.SearchUsersInput, pager func(*alexaforbusiness.SearchUsersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("SearchUsers", paginators, ctx, in, pager, options...)
}

func (d *AlexaForBusinessDouble) SearchUsersRequest(i0 *alexaforbusiness.SearchUsersInput) (r0 *request.Request, r1 *alexaforbusiness.SearchUsersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchUsersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.SearchUsersOutput)
	return
}

func (d *AlexaForBusinessDouble) SearchUsersWithContext(i0 context.Context, i1 *alexaforbusiness.SearchUsersInput, i2 ...request.Option) (r0 *alexaforbusiness.SearchUsersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchUsersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.SearchUsersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeSearchUsersWithContext(ctx context.Context, in *alexaforbusiness.SearchUsersInput, _ ...request.Option) (*alexaforbusiness.SearchUsersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SearchUsers cancelled", ctx.Err())
	default:
		return d.SearchUsers(in)
	}
}

func (d *AlexaForBusinessDouble) SendAnnouncement(i0 *alexaforbusiness.SendAnnouncementInput) (r0 *alexaforbusiness.SendAnnouncementOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendAnnouncement", i0)
	r0, _ = returns[0].(*alexaforbusiness.SendAnnouncementOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) SendAnnouncementRequest(i0 *alexaforbusiness.SendAnnouncementInput) (r0 *request.Request, r1 *alexaforbusiness.SendAnnouncementOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendAnnouncementRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.SendAnnouncementOutput)
	return
}

func (d *AlexaForBusinessDouble) SendAnnouncementWithContext(i0 context.Context, i1 *alexaforbusiness.SendAnnouncementInput, i2 ...request.Option) (r0 *alexaforbusiness.SendAnnouncementOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendAnnouncementWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.SendAnnouncementOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeSendAnnouncementWithContext(ctx context.Context, in *alexaforbusiness.SendAnnouncementInput, _ ...request.Option) (*alexaforbusiness.SendAnnouncementOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SendAnnouncement cancelled", ctx.Err())
	default:
		return d.SendAnnouncement(in)
	}
}

func (d *AlexaForBusinessDouble) SendInvitation(i0 *alexaforbusiness.SendInvitationInput) (r0 *alexaforbusiness.SendInvitationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendInvitation", i0)
	r0, _ = returns[0].(*alexaforbusiness.SendInvitationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) SendInvitationRequest(i0 *alexaforbusiness.SendInvitationInput) (r0 *request.Request, r1 *alexaforbusiness.SendInvitationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendInvitationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.SendInvitationOutput)
	return
}

func (d *AlexaForBusinessDouble) SendInvitationWithContext(i0 context.Context, i1 *alexaforbusiness.SendInvitationInput, i2 ...request.Option) (r0 *alexaforbusiness.SendInvitationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendInvitationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.SendInvitationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeSendInvitationWithContext(ctx context.Context, in *alexaforbusiness.SendInvitationInput, _ ...request.Option) (*alexaforbusiness.SendInvitationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SendInvitation cancelled", ctx.Err())
	default:
		return d.SendInvitation(in)
	}
}

func (d *AlexaForBusinessDouble) StartDeviceSync(i0 *alexaforbusiness.StartDeviceSyncInput) (r0 *alexaforbusiness.StartDeviceSyncOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartDeviceSync", i0)
	r0, _ = returns[0].(*alexaforbusiness.StartDeviceSyncOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) StartDeviceSyncRequest(i0 *alexaforbusiness.StartDeviceSyncInput) (r0 *request.Request, r1 *alexaforbusiness.StartDeviceSyncOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartDeviceSyncRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.StartDeviceSyncOutput)
	return
}

func (d *AlexaForBusinessDouble) StartDeviceSyncWithContext(i0 context.Context, i1 *alexaforbusiness.StartDeviceSyncInput, i2 ...request.Option) (r0 *alexaforbusiness.StartDeviceSyncOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartDeviceSyncWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.StartDeviceSyncOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeStartDeviceSyncWithContext(ctx context.Context, in *alexaforbusiness.StartDeviceSyncInput, _ ...request.Option) (*alexaforbusiness.StartDeviceSyncOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartDeviceSync cancelled", ctx.Err())
	default:
		return d.StartDeviceSync(in)
	}
}

func (d *AlexaForBusinessDouble) StartSmartHomeApplianceDiscovery(i0 *alexaforbusiness.StartSmartHomeApplianceDiscoveryInput) (r0 *alexaforbusiness.StartSmartHomeApplianceDiscoveryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartSmartHomeApplianceDiscovery", i0)
	r0, _ = returns[0].(*alexaforbusiness.StartSmartHomeApplianceDiscoveryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) StartSmartHomeApplianceDiscoveryRequest(i0 *alexaforbusiness.StartSmartHomeApplianceDiscoveryInput) (r0 *request.Request, r1 *alexaforbusiness.StartSmartHomeApplianceDiscoveryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartSmartHomeApplianceDiscoveryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.StartSmartHomeApplianceDiscoveryOutput)
	return
}

func (d *AlexaForBusinessDouble) StartSmartHomeApplianceDiscoveryWithContext(i0 context.Context, i1 *alexaforbusiness.StartSmartHomeApplianceDiscoveryInput, i2 ...request.Option) (r0 *alexaforbusiness.StartSmartHomeApplianceDiscoveryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartSmartHomeApplianceDiscoveryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.StartSmartHomeApplianceDiscoveryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeStartSmartHomeApplianceDiscoveryWithContext(ctx context.Context, in *alexaforbusiness.StartSmartHomeApplianceDiscoveryInput, _ ...request.Option) (*alexaforbusiness.StartSmartHomeApplianceDiscoveryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartSmartHomeApplianceDiscovery cancelled", ctx.Err())
	default:
		return d.StartSmartHomeApplianceDiscovery(in)
	}
}

func (d *AlexaForBusinessDouble) TagResource(i0 *alexaforbusiness.TagResourceInput) (r0 *alexaforbusiness.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*alexaforbusiness.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) TagResourceRequest(i0 *alexaforbusiness.TagResourceInput) (r0 *request.Request, r1 *alexaforbusiness.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.TagResourceOutput)
	return
}

func (d *AlexaForBusinessDouble) TagResourceWithContext(i0 context.Context, i1 *alexaforbusiness.TagResourceInput, i2 ...request.Option) (r0 *alexaforbusiness.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeTagResourceWithContext(ctx context.Context, in *alexaforbusiness.TagResourceInput, _ ...request.Option) (*alexaforbusiness.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *AlexaForBusinessDouble) UntagResource(i0 *alexaforbusiness.UntagResourceInput) (r0 *alexaforbusiness.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*alexaforbusiness.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) UntagResourceRequest(i0 *alexaforbusiness.UntagResourceInput) (r0 *request.Request, r1 *alexaforbusiness.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.UntagResourceOutput)
	return
}

func (d *AlexaForBusinessDouble) UntagResourceWithContext(i0 context.Context, i1 *alexaforbusiness.UntagResourceInput, i2 ...request.Option) (r0 *alexaforbusiness.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeUntagResourceWithContext(ctx context.Context, in *alexaforbusiness.UntagResourceInput, _ ...request.Option) (*alexaforbusiness.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *AlexaForBusinessDouble) UpdateAddressBook(i0 *alexaforbusiness.UpdateAddressBookInput) (r0 *alexaforbusiness.UpdateAddressBookOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAddressBook", i0)
	r0, _ = returns[0].(*alexaforbusiness.UpdateAddressBookOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) UpdateAddressBookRequest(i0 *alexaforbusiness.UpdateAddressBookInput) (r0 *request.Request, r1 *alexaforbusiness.UpdateAddressBookOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAddressBookRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.UpdateAddressBookOutput)
	return
}

func (d *AlexaForBusinessDouble) UpdateAddressBookWithContext(i0 context.Context, i1 *alexaforbusiness.UpdateAddressBookInput, i2 ...request.Option) (r0 *alexaforbusiness.UpdateAddressBookOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAddressBookWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.UpdateAddressBookOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeUpdateAddressBookWithContext(ctx context.Context, in *alexaforbusiness.UpdateAddressBookInput, _ ...request.Option) (*alexaforbusiness.UpdateAddressBookOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateAddressBook cancelled", ctx.Err())
	default:
		return d.UpdateAddressBook(in)
	}
}

func (d *AlexaForBusinessDouble) UpdateBusinessReportSchedule(i0 *alexaforbusiness.UpdateBusinessReportScheduleInput) (r0 *alexaforbusiness.UpdateBusinessReportScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateBusinessReportSchedule", i0)
	r0, _ = returns[0].(*alexaforbusiness.UpdateBusinessReportScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) UpdateBusinessReportScheduleRequest(i0 *alexaforbusiness.UpdateBusinessReportScheduleInput) (r0 *request.Request, r1 *alexaforbusiness.UpdateBusinessReportScheduleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateBusinessReportScheduleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.UpdateBusinessReportScheduleOutput)
	return
}

func (d *AlexaForBusinessDouble) UpdateBusinessReportScheduleWithContext(i0 context.Context, i1 *alexaforbusiness.UpdateBusinessReportScheduleInput, i2 ...request.Option) (r0 *alexaforbusiness.UpdateBusinessReportScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateBusinessReportScheduleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.UpdateBusinessReportScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeUpdateBusinessReportScheduleWithContext(ctx context.Context, in *alexaforbusiness.UpdateBusinessReportScheduleInput, _ ...request.Option) (*alexaforbusiness.UpdateBusinessReportScheduleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateBusinessReportSchedule cancelled", ctx.Err())
	default:
		return d.UpdateBusinessReportSchedule(in)
	}
}

func (d *AlexaForBusinessDouble) UpdateConferenceProvider(i0 *alexaforbusiness.UpdateConferenceProviderInput) (r0 *alexaforbusiness.UpdateConferenceProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateConferenceProvider", i0)
	r0, _ = returns[0].(*alexaforbusiness.UpdateConferenceProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) UpdateConferenceProviderRequest(i0 *alexaforbusiness.UpdateConferenceProviderInput) (r0 *request.Request, r1 *alexaforbusiness.UpdateConferenceProviderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateConferenceProviderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.UpdateConferenceProviderOutput)
	return
}

func (d *AlexaForBusinessDouble) UpdateConferenceProviderWithContext(i0 context.Context, i1 *alexaforbusiness.UpdateConferenceProviderInput, i2 ...request.Option) (r0 *alexaforbusiness.UpdateConferenceProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateConferenceProviderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.UpdateConferenceProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeUpdateConferenceProviderWithContext(ctx context.Context, in *alexaforbusiness.UpdateConferenceProviderInput, _ ...request.Option) (*alexaforbusiness.UpdateConferenceProviderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateConferenceProvider cancelled", ctx.Err())
	default:
		return d.UpdateConferenceProvider(in)
	}
}

func (d *AlexaForBusinessDouble) UpdateContact(i0 *alexaforbusiness.UpdateContactInput) (r0 *alexaforbusiness.UpdateContactOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateContact", i0)
	r0, _ = returns[0].(*alexaforbusiness.UpdateContactOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) UpdateContactRequest(i0 *alexaforbusiness.UpdateContactInput) (r0 *request.Request, r1 *alexaforbusiness.UpdateContactOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateContactRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.UpdateContactOutput)
	return
}

func (d *AlexaForBusinessDouble) UpdateContactWithContext(i0 context.Context, i1 *alexaforbusiness.UpdateContactInput, i2 ...request.Option) (r0 *alexaforbusiness.UpdateContactOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateContactWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.UpdateContactOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeUpdateContactWithContext(ctx context.Context, in *alexaforbusiness.UpdateContactInput, _ ...request.Option) (*alexaforbusiness.UpdateContactOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateContact cancelled", ctx.Err())
	default:
		return d.UpdateContact(in)
	}
}

func (d *AlexaForBusinessDouble) UpdateDevice(i0 *alexaforbusiness.UpdateDeviceInput) (r0 *alexaforbusiness.UpdateDeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDevice", i0)
	r0, _ = returns[0].(*alexaforbusiness.UpdateDeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) UpdateDeviceRequest(i0 *alexaforbusiness.UpdateDeviceInput) (r0 *request.Request, r1 *alexaforbusiness.UpdateDeviceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDeviceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.UpdateDeviceOutput)
	return
}

func (d *AlexaForBusinessDouble) UpdateDeviceWithContext(i0 context.Context, i1 *alexaforbusiness.UpdateDeviceInput, i2 ...request.Option) (r0 *alexaforbusiness.UpdateDeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDeviceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.UpdateDeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeUpdateDeviceWithContext(ctx context.Context, in *alexaforbusiness.UpdateDeviceInput, _ ...request.Option) (*alexaforbusiness.UpdateDeviceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDevice cancelled", ctx.Err())
	default:
		return d.UpdateDevice(in)
	}
}

func (d *AlexaForBusinessDouble) UpdateGateway(i0 *alexaforbusiness.UpdateGatewayInput) (r0 *alexaforbusiness.UpdateGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGateway", i0)
	r0, _ = returns[0].(*alexaforbusiness.UpdateGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) UpdateGatewayGroup(i0 *alexaforbusiness.UpdateGatewayGroupInput) (r0 *alexaforbusiness.UpdateGatewayGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGatewayGroup", i0)
	r0, _ = returns[0].(*alexaforbusiness.UpdateGatewayGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) UpdateGatewayGroupRequest(i0 *alexaforbusiness.UpdateGatewayGroupInput) (r0 *request.Request, r1 *alexaforbusiness.UpdateGatewayGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGatewayGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.UpdateGatewayGroupOutput)
	return
}

func (d *AlexaForBusinessDouble) UpdateGatewayGroupWithContext(i0 context.Context, i1 *alexaforbusiness.UpdateGatewayGroupInput, i2 ...request.Option) (r0 *alexaforbusiness.UpdateGatewayGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGatewayGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.UpdateGatewayGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeUpdateGatewayGroupWithContext(ctx context.Context, in *alexaforbusiness.UpdateGatewayGroupInput, _ ...request.Option) (*alexaforbusiness.UpdateGatewayGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateGatewayGroup cancelled", ctx.Err())
	default:
		return d.UpdateGatewayGroup(in)
	}
}

func (d *AlexaForBusinessDouble) UpdateGatewayRequest(i0 *alexaforbusiness.UpdateGatewayInput) (r0 *request.Request, r1 *alexaforbusiness.UpdateGatewayOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGatewayRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.UpdateGatewayOutput)
	return
}

func (d *AlexaForBusinessDouble) UpdateGatewayWithContext(i0 context.Context, i1 *alexaforbusiness.UpdateGatewayInput, i2 ...request.Option) (r0 *alexaforbusiness.UpdateGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGatewayWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.UpdateGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeUpdateGatewayWithContext(ctx context.Context, in *alexaforbusiness.UpdateGatewayInput, _ ...request.Option) (*alexaforbusiness.UpdateGatewayOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateGateway cancelled", ctx.Err())
	default:
		return d.UpdateGateway(in)
	}
}

func (d *AlexaForBusinessDouble) UpdateNetworkProfile(i0 *alexaforbusiness.UpdateNetworkProfileInput) (r0 *alexaforbusiness.UpdateNetworkProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateNetworkProfile", i0)
	r0, _ = returns[0].(*alexaforbusiness.UpdateNetworkProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) UpdateNetworkProfileRequest(i0 *alexaforbusiness.UpdateNetworkProfileInput) (r0 *request.Request, r1 *alexaforbusiness.UpdateNetworkProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateNetworkProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.UpdateNetworkProfileOutput)
	return
}

func (d *AlexaForBusinessDouble) UpdateNetworkProfileWithContext(i0 context.Context, i1 *alexaforbusiness.UpdateNetworkProfileInput, i2 ...request.Option) (r0 *alexaforbusiness.UpdateNetworkProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateNetworkProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.UpdateNetworkProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeUpdateNetworkProfileWithContext(ctx context.Context, in *alexaforbusiness.UpdateNetworkProfileInput, _ ...request.Option) (*alexaforbusiness.UpdateNetworkProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateNetworkProfile cancelled", ctx.Err())
	default:
		return d.UpdateNetworkProfile(in)
	}
}

func (d *AlexaForBusinessDouble) UpdateProfile(i0 *alexaforbusiness.UpdateProfileInput) (r0 *alexaforbusiness.UpdateProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateProfile", i0)
	r0, _ = returns[0].(*alexaforbusiness.UpdateProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) UpdateProfileRequest(i0 *alexaforbusiness.UpdateProfileInput) (r0 *request.Request, r1 *alexaforbusiness.UpdateProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.UpdateProfileOutput)
	return
}

func (d *AlexaForBusinessDouble) UpdateProfileWithContext(i0 context.Context, i1 *alexaforbusiness.UpdateProfileInput, i2 ...request.Option) (r0 *alexaforbusiness.UpdateProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.UpdateProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeUpdateProfileWithContext(ctx context.Context, in *alexaforbusiness.UpdateProfileInput, _ ...request.Option) (*alexaforbusiness.UpdateProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateProfile cancelled", ctx.Err())
	default:
		return d.UpdateProfile(in)
	}
}

func (d *AlexaForBusinessDouble) UpdateRoom(i0 *alexaforbusiness.UpdateRoomInput) (r0 *alexaforbusiness.UpdateRoomOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRoom", i0)
	r0, _ = returns[0].(*alexaforbusiness.UpdateRoomOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) UpdateRoomRequest(i0 *alexaforbusiness.UpdateRoomInput) (r0 *request.Request, r1 *alexaforbusiness.UpdateRoomOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRoomRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.UpdateRoomOutput)
	return
}

func (d *AlexaForBusinessDouble) UpdateRoomWithContext(i0 context.Context, i1 *alexaforbusiness.UpdateRoomInput, i2 ...request.Option) (r0 *alexaforbusiness.UpdateRoomOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRoomWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.UpdateRoomOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeUpdateRoomWithContext(ctx context.Context, in *alexaforbusiness.UpdateRoomInput, _ ...request.Option) (*alexaforbusiness.UpdateRoomOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateRoom cancelled", ctx.Err())
	default:
		return d.UpdateRoom(in)
	}
}

func (d *AlexaForBusinessDouble) UpdateSkillGroup(i0 *alexaforbusiness.UpdateSkillGroupInput) (r0 *alexaforbusiness.UpdateSkillGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSkillGroup", i0)
	r0, _ = returns[0].(*alexaforbusiness.UpdateSkillGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) UpdateSkillGroupRequest(i0 *alexaforbusiness.UpdateSkillGroupInput) (r0 *request.Request, r1 *alexaforbusiness.UpdateSkillGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSkillGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*alexaforbusiness.UpdateSkillGroupOutput)
	return
}

func (d *AlexaForBusinessDouble) UpdateSkillGroupWithContext(i0 context.Context, i1 *alexaforbusiness.UpdateSkillGroupInput, i2 ...request.Option) (r0 *alexaforbusiness.UpdateSkillGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSkillGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*alexaforbusiness.UpdateSkillGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AlexaForBusinessDouble) fakeUpdateSkillGroupWithContext(ctx context.Context, in *alexaforbusiness.UpdateSkillGroupInput, _ ...request.Option) (*alexaforbusiness.UpdateSkillGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateSkillGroup cancelled", ctx.Err())
	default:
		return d.UpdateSkillGroup(in)
	}
}
