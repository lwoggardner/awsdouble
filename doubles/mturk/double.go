// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:14:07+11:00

// Package mturkdouble provides a TestDouble implementation of mturkiface.MTurkAPI
package mturkdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/mturk"
	"github.com/aws/aws-sdk-go/service/mturk/mturkiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// MTurkDouble is TestDouble for mturkiface.MTurkAPI
type MTurkDouble struct {
	mturkiface.MTurkAPI
	*awsdouble.AWSTestDouble
}

// Constructor for MTurkDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *MTurkDouble {
	result := &MTurkDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*mturkiface.MTurkAPI)(nil), configurators...)
	return result
}

func (d *MTurkDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *MTurkDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AcceptQualificationRequestWithContext":
		return m.Fake(d.fakeAcceptQualificationRequestWithContext)

	case "ApproveAssignmentWithContext":
		return m.Fake(d.fakeApproveAssignmentWithContext)

	case "AssociateQualificationWithWorkerWithContext":
		return m.Fake(d.fakeAssociateQualificationWithWorkerWithContext)

	case "CreateAdditionalAssignmentsForHITWithContext":
		return m.Fake(d.fakeCreateAdditionalAssignmentsForHITWithContext)

	case "CreateHITTypeWithContext":
		return m.Fake(d.fakeCreateHITTypeWithContext)

	case "CreateHITWithContext":
		return m.Fake(d.fakeCreateHITWithContext)

	case "CreateHITWithHITTypeWithContext":
		return m.Fake(d.fakeCreateHITWithHITTypeWithContext)

	case "CreateQualificationTypeWithContext":
		return m.Fake(d.fakeCreateQualificationTypeWithContext)

	case "CreateWorkerBlockWithContext":
		return m.Fake(d.fakeCreateWorkerBlockWithContext)

	case "DeleteHITWithContext":
		return m.Fake(d.fakeDeleteHITWithContext)

	case "DeleteQualificationTypeWithContext":
		return m.Fake(d.fakeDeleteQualificationTypeWithContext)

	case "DeleteWorkerBlockWithContext":
		return m.Fake(d.fakeDeleteWorkerBlockWithContext)

	case "DisassociateQualificationFromWorkerWithContext":
		return m.Fake(d.fakeDisassociateQualificationFromWorkerWithContext)

	case "GetAccountBalanceWithContext":
		return m.Fake(d.fakeGetAccountBalanceWithContext)

	case "GetAssignmentWithContext":
		return m.Fake(d.fakeGetAssignmentWithContext)

	case "GetFileUploadURLWithContext":
		return m.Fake(d.fakeGetFileUploadURLWithContext)

	case "GetHITWithContext":
		return m.Fake(d.fakeGetHITWithContext)

	case "GetQualificationScoreWithContext":
		return m.Fake(d.fakeGetQualificationScoreWithContext)

	case "GetQualificationTypeWithContext":
		return m.Fake(d.fakeGetQualificationTypeWithContext)

	case "ListAssignmentsForHITPages":
		return m.Fake(d.fakeListAssignmentsForHITPages)

	case "ListAssignmentsForHITPagesWithContext":
		return m.Fake(d.fakeListAssignmentsForHITPagesWithContext)

	case "ListAssignmentsForHITWithContext":
		return m.Fake(d.fakeListAssignmentsForHITWithContext)

	case "ListBonusPaymentsPages":
		return m.Fake(d.fakeListBonusPaymentsPages)

	case "ListBonusPaymentsPagesWithContext":
		return m.Fake(d.fakeListBonusPaymentsPagesWithContext)

	case "ListBonusPaymentsWithContext":
		return m.Fake(d.fakeListBonusPaymentsWithContext)

	case "ListHITsForQualificationTypePages":
		return m.Fake(d.fakeListHITsForQualificationTypePages)

	case "ListHITsForQualificationTypePagesWithContext":
		return m.Fake(d.fakeListHITsForQualificationTypePagesWithContext)

	case "ListHITsForQualificationTypeWithContext":
		return m.Fake(d.fakeListHITsForQualificationTypeWithContext)

	case "ListHITsPages":
		return m.Fake(d.fakeListHITsPages)

	case "ListHITsPagesWithContext":
		return m.Fake(d.fakeListHITsPagesWithContext)

	case "ListHITsWithContext":
		return m.Fake(d.fakeListHITsWithContext)

	case "ListQualificationRequestsPages":
		return m.Fake(d.fakeListQualificationRequestsPages)

	case "ListQualificationRequestsPagesWithContext":
		return m.Fake(d.fakeListQualificationRequestsPagesWithContext)

	case "ListQualificationRequestsWithContext":
		return m.Fake(d.fakeListQualificationRequestsWithContext)

	case "ListQualificationTypesPages":
		return m.Fake(d.fakeListQualificationTypesPages)

	case "ListQualificationTypesPagesWithContext":
		return m.Fake(d.fakeListQualificationTypesPagesWithContext)

	case "ListQualificationTypesWithContext":
		return m.Fake(d.fakeListQualificationTypesWithContext)

	case "ListReviewPolicyResultsForHITPages":
		return m.Fake(d.fakeListReviewPolicyResultsForHITPages)

	case "ListReviewPolicyResultsForHITPagesWithContext":
		return m.Fake(d.fakeListReviewPolicyResultsForHITPagesWithContext)

	case "ListReviewPolicyResultsForHITWithContext":
		return m.Fake(d.fakeListReviewPolicyResultsForHITWithContext)

	case "ListReviewableHITsPages":
		return m.Fake(d.fakeListReviewableHITsPages)

	case "ListReviewableHITsPagesWithContext":
		return m.Fake(d.fakeListReviewableHITsPagesWithContext)

	case "ListReviewableHITsWithContext":
		return m.Fake(d.fakeListReviewableHITsWithContext)

	case "ListWorkerBlocksPages":
		return m.Fake(d.fakeListWorkerBlocksPages)

	case "ListWorkerBlocksPagesWithContext":
		return m.Fake(d.fakeListWorkerBlocksPagesWithContext)

	case "ListWorkerBlocksWithContext":
		return m.Fake(d.fakeListWorkerBlocksWithContext)

	case "ListWorkersWithQualificationTypePages":
		return m.Fake(d.fakeListWorkersWithQualificationTypePages)

	case "ListWorkersWithQualificationTypePagesWithContext":
		return m.Fake(d.fakeListWorkersWithQualificationTypePagesWithContext)

	case "ListWorkersWithQualificationTypeWithContext":
		return m.Fake(d.fakeListWorkersWithQualificationTypeWithContext)

	case "NotifyWorkersWithContext":
		return m.Fake(d.fakeNotifyWorkersWithContext)

	case "RejectAssignmentWithContext":
		return m.Fake(d.fakeRejectAssignmentWithContext)

	case "RejectQualificationRequestWithContext":
		return m.Fake(d.fakeRejectQualificationRequestWithContext)

	case "SendBonusWithContext":
		return m.Fake(d.fakeSendBonusWithContext)

	case "SendTestEventNotificationWithContext":
		return m.Fake(d.fakeSendTestEventNotificationWithContext)

	case "UpdateExpirationForHITWithContext":
		return m.Fake(d.fakeUpdateExpirationForHITWithContext)

	case "UpdateHITReviewStatusWithContext":
		return m.Fake(d.fakeUpdateHITReviewStatusWithContext)

	case "UpdateHITTypeOfHITWithContext":
		return m.Fake(d.fakeUpdateHITTypeOfHITWithContext)

	case "UpdateNotificationSettingsWithContext":
		return m.Fake(d.fakeUpdateNotificationSettingsWithContext)

	case "UpdateQualificationTypeWithContext":
		return m.Fake(d.fakeUpdateQualificationTypeWithContext)

	default:
		return nil
	}
}

func (d *MTurkDouble) AcceptQualificationRequest(i0 *mturk.AcceptQualificationRequestInput) (r0 *mturk.AcceptQualificationRequestOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptQualificationRequest", i0)
	r0, _ = returns[0].(*mturk.AcceptQualificationRequestOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) AcceptQualificationRequestRequest(i0 *mturk.AcceptQualificationRequestInput) (r0 *request.Request, r1 *mturk.AcceptQualificationRequestOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptQualificationRequestRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.AcceptQualificationRequestOutput)
	return
}

func (d *MTurkDouble) AcceptQualificationRequestWithContext(i0 context.Context, i1 *mturk.AcceptQualificationRequestInput, i2 ...request.Option) (r0 *mturk.AcceptQualificationRequestOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptQualificationRequestWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.AcceptQualificationRequestOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeAcceptQualificationRequestWithContext(ctx context.Context, in *mturk.AcceptQualificationRequestInput, _ ...request.Option) (*mturk.AcceptQualificationRequestOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AcceptQualificationRequest cancelled", ctx.Err())
	default:
		return d.AcceptQualificationRequest(in)
	}
}

func (d *MTurkDouble) ApproveAssignment(i0 *mturk.ApproveAssignmentInput) (r0 *mturk.ApproveAssignmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ApproveAssignment", i0)
	r0, _ = returns[0].(*mturk.ApproveAssignmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) ApproveAssignmentRequest(i0 *mturk.ApproveAssignmentInput) (r0 *request.Request, r1 *mturk.ApproveAssignmentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ApproveAssignmentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.ApproveAssignmentOutput)
	return
}

func (d *MTurkDouble) ApproveAssignmentWithContext(i0 context.Context, i1 *mturk.ApproveAssignmentInput, i2 ...request.Option) (r0 *mturk.ApproveAssignmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ApproveAssignmentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.ApproveAssignmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeApproveAssignmentWithContext(ctx context.Context, in *mturk.ApproveAssignmentInput, _ ...request.Option) (*mturk.ApproveAssignmentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ApproveAssignment cancelled", ctx.Err())
	default:
		return d.ApproveAssignment(in)
	}
}

func (d *MTurkDouble) AssociateQualificationWithWorker(i0 *mturk.AssociateQualificationWithWorkerInput) (r0 *mturk.AssociateQualificationWithWorkerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateQualificationWithWorker", i0)
	r0, _ = returns[0].(*mturk.AssociateQualificationWithWorkerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) AssociateQualificationWithWorkerRequest(i0 *mturk.AssociateQualificationWithWorkerInput) (r0 *request.Request, r1 *mturk.AssociateQualificationWithWorkerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateQualificationWithWorkerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.AssociateQualificationWithWorkerOutput)
	return
}

func (d *MTurkDouble) AssociateQualificationWithWorkerWithContext(i0 context.Context, i1 *mturk.AssociateQualificationWithWorkerInput, i2 ...request.Option) (r0 *mturk.AssociateQualificationWithWorkerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateQualificationWithWorkerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.AssociateQualificationWithWorkerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeAssociateQualificationWithWorkerWithContext(ctx context.Context, in *mturk.AssociateQualificationWithWorkerInput, _ ...request.Option) (*mturk.AssociateQualificationWithWorkerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateQualificationWithWorker cancelled", ctx.Err())
	default:
		return d.AssociateQualificationWithWorker(in)
	}
}

func (d *MTurkDouble) CreateAdditionalAssignmentsForHIT(i0 *mturk.CreateAdditionalAssignmentsForHITInput) (r0 *mturk.CreateAdditionalAssignmentsForHITOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAdditionalAssignmentsForHIT", i0)
	r0, _ = returns[0].(*mturk.CreateAdditionalAssignmentsForHITOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) CreateAdditionalAssignmentsForHITRequest(i0 *mturk.CreateAdditionalAssignmentsForHITInput) (r0 *request.Request, r1 *mturk.CreateAdditionalAssignmentsForHITOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAdditionalAssignmentsForHITRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.CreateAdditionalAssignmentsForHITOutput)
	return
}

func (d *MTurkDouble) CreateAdditionalAssignmentsForHITWithContext(i0 context.Context, i1 *mturk.CreateAdditionalAssignmentsForHITInput, i2 ...request.Option) (r0 *mturk.CreateAdditionalAssignmentsForHITOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAdditionalAssignmentsForHITWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.CreateAdditionalAssignmentsForHITOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeCreateAdditionalAssignmentsForHITWithContext(ctx context.Context, in *mturk.CreateAdditionalAssignmentsForHITInput, _ ...request.Option) (*mturk.CreateAdditionalAssignmentsForHITOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateAdditionalAssignmentsForHIT cancelled", ctx.Err())
	default:
		return d.CreateAdditionalAssignmentsForHIT(in)
	}
}

func (d *MTurkDouble) CreateHIT(i0 *mturk.CreateHITInput) (r0 *mturk.CreateHITOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHIT", i0)
	r0, _ = returns[0].(*mturk.CreateHITOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) CreateHITRequest(i0 *mturk.CreateHITInput) (r0 *request.Request, r1 *mturk.CreateHITOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHITRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.CreateHITOutput)
	return
}

func (d *MTurkDouble) CreateHITType(i0 *mturk.CreateHITTypeInput) (r0 *mturk.CreateHITTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHITType", i0)
	r0, _ = returns[0].(*mturk.CreateHITTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) CreateHITTypeRequest(i0 *mturk.CreateHITTypeInput) (r0 *request.Request, r1 *mturk.CreateHITTypeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHITTypeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.CreateHITTypeOutput)
	return
}

func (d *MTurkDouble) CreateHITTypeWithContext(i0 context.Context, i1 *mturk.CreateHITTypeInput, i2 ...request.Option) (r0 *mturk.CreateHITTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHITTypeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.CreateHITTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeCreateHITTypeWithContext(ctx context.Context, in *mturk.CreateHITTypeInput, _ ...request.Option) (*mturk.CreateHITTypeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateHITType cancelled", ctx.Err())
	default:
		return d.CreateHITType(in)
	}
}

func (d *MTurkDouble) CreateHITWithContext(i0 context.Context, i1 *mturk.CreateHITInput, i2 ...request.Option) (r0 *mturk.CreateHITOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHITWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.CreateHITOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeCreateHITWithContext(ctx context.Context, in *mturk.CreateHITInput, _ ...request.Option) (*mturk.CreateHITOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateHIT cancelled", ctx.Err())
	default:
		return d.CreateHIT(in)
	}
}

func (d *MTurkDouble) CreateHITWithHITType(i0 *mturk.CreateHITWithHITTypeInput) (r0 *mturk.CreateHITWithHITTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHITWithHITType", i0)
	r0, _ = returns[0].(*mturk.CreateHITWithHITTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) CreateHITWithHITTypeRequest(i0 *mturk.CreateHITWithHITTypeInput) (r0 *request.Request, r1 *mturk.CreateHITWithHITTypeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHITWithHITTypeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.CreateHITWithHITTypeOutput)
	return
}

func (d *MTurkDouble) CreateHITWithHITTypeWithContext(i0 context.Context, i1 *mturk.CreateHITWithHITTypeInput, i2 ...request.Option) (r0 *mturk.CreateHITWithHITTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHITWithHITTypeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.CreateHITWithHITTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeCreateHITWithHITTypeWithContext(ctx context.Context, in *mturk.CreateHITWithHITTypeInput, _ ...request.Option) (*mturk.CreateHITWithHITTypeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateHITWithHITType cancelled", ctx.Err())
	default:
		return d.CreateHITWithHITType(in)
	}
}

func (d *MTurkDouble) CreateQualificationType(i0 *mturk.CreateQualificationTypeInput) (r0 *mturk.CreateQualificationTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateQualificationType", i0)
	r0, _ = returns[0].(*mturk.CreateQualificationTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) CreateQualificationTypeRequest(i0 *mturk.CreateQualificationTypeInput) (r0 *request.Request, r1 *mturk.CreateQualificationTypeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateQualificationTypeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.CreateQualificationTypeOutput)
	return
}

func (d *MTurkDouble) CreateQualificationTypeWithContext(i0 context.Context, i1 *mturk.CreateQualificationTypeInput, i2 ...request.Option) (r0 *mturk.CreateQualificationTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateQualificationTypeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.CreateQualificationTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeCreateQualificationTypeWithContext(ctx context.Context, in *mturk.CreateQualificationTypeInput, _ ...request.Option) (*mturk.CreateQualificationTypeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateQualificationType cancelled", ctx.Err())
	default:
		return d.CreateQualificationType(in)
	}
}

func (d *MTurkDouble) CreateWorkerBlock(i0 *mturk.CreateWorkerBlockInput) (r0 *mturk.CreateWorkerBlockOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateWorkerBlock", i0)
	r0, _ = returns[0].(*mturk.CreateWorkerBlockOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) CreateWorkerBlockRequest(i0 *mturk.CreateWorkerBlockInput) (r0 *request.Request, r1 *mturk.CreateWorkerBlockOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateWorkerBlockRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.CreateWorkerBlockOutput)
	return
}

func (d *MTurkDouble) CreateWorkerBlockWithContext(i0 context.Context, i1 *mturk.CreateWorkerBlockInput, i2 ...request.Option) (r0 *mturk.CreateWorkerBlockOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateWorkerBlockWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.CreateWorkerBlockOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeCreateWorkerBlockWithContext(ctx context.Context, in *mturk.CreateWorkerBlockInput, _ ...request.Option) (*mturk.CreateWorkerBlockOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateWorkerBlock cancelled", ctx.Err())
	default:
		return d.CreateWorkerBlock(in)
	}
}

func (d *MTurkDouble) DeleteHIT(i0 *mturk.DeleteHITInput) (r0 *mturk.DeleteHITOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteHIT", i0)
	r0, _ = returns[0].(*mturk.DeleteHITOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) DeleteHITRequest(i0 *mturk.DeleteHITInput) (r0 *request.Request, r1 *mturk.DeleteHITOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteHITRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.DeleteHITOutput)
	return
}

func (d *MTurkDouble) DeleteHITWithContext(i0 context.Context, i1 *mturk.DeleteHITInput, i2 ...request.Option) (r0 *mturk.DeleteHITOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteHITWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.DeleteHITOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeDeleteHITWithContext(ctx context.Context, in *mturk.DeleteHITInput, _ ...request.Option) (*mturk.DeleteHITOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteHIT cancelled", ctx.Err())
	default:
		return d.DeleteHIT(in)
	}
}

func (d *MTurkDouble) DeleteQualificationType(i0 *mturk.DeleteQualificationTypeInput) (r0 *mturk.DeleteQualificationTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteQualificationType", i0)
	r0, _ = returns[0].(*mturk.DeleteQualificationTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) DeleteQualificationTypeRequest(i0 *mturk.DeleteQualificationTypeInput) (r0 *request.Request, r1 *mturk.DeleteQualificationTypeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteQualificationTypeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.DeleteQualificationTypeOutput)
	return
}

func (d *MTurkDouble) DeleteQualificationTypeWithContext(i0 context.Context, i1 *mturk.DeleteQualificationTypeInput, i2 ...request.Option) (r0 *mturk.DeleteQualificationTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteQualificationTypeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.DeleteQualificationTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeDeleteQualificationTypeWithContext(ctx context.Context, in *mturk.DeleteQualificationTypeInput, _ ...request.Option) (*mturk.DeleteQualificationTypeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteQualificationType cancelled", ctx.Err())
	default:
		return d.DeleteQualificationType(in)
	}
}

func (d *MTurkDouble) DeleteWorkerBlock(i0 *mturk.DeleteWorkerBlockInput) (r0 *mturk.DeleteWorkerBlockOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteWorkerBlock", i0)
	r0, _ = returns[0].(*mturk.DeleteWorkerBlockOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) DeleteWorkerBlockRequest(i0 *mturk.DeleteWorkerBlockInput) (r0 *request.Request, r1 *mturk.DeleteWorkerBlockOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteWorkerBlockRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.DeleteWorkerBlockOutput)
	return
}

func (d *MTurkDouble) DeleteWorkerBlockWithContext(i0 context.Context, i1 *mturk.DeleteWorkerBlockInput, i2 ...request.Option) (r0 *mturk.DeleteWorkerBlockOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteWorkerBlockWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.DeleteWorkerBlockOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeDeleteWorkerBlockWithContext(ctx context.Context, in *mturk.DeleteWorkerBlockInput, _ ...request.Option) (*mturk.DeleteWorkerBlockOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteWorkerBlock cancelled", ctx.Err())
	default:
		return d.DeleteWorkerBlock(in)
	}
}

func (d *MTurkDouble) DisassociateQualificationFromWorker(i0 *mturk.DisassociateQualificationFromWorkerInput) (r0 *mturk.DisassociateQualificationFromWorkerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateQualificationFromWorker", i0)
	r0, _ = returns[0].(*mturk.DisassociateQualificationFromWorkerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) DisassociateQualificationFromWorkerRequest(i0 *mturk.DisassociateQualificationFromWorkerInput) (r0 *request.Request, r1 *mturk.DisassociateQualificationFromWorkerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateQualificationFromWorkerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.DisassociateQualificationFromWorkerOutput)
	return
}

func (d *MTurkDouble) DisassociateQualificationFromWorkerWithContext(i0 context.Context, i1 *mturk.DisassociateQualificationFromWorkerInput, i2 ...request.Option) (r0 *mturk.DisassociateQualificationFromWorkerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateQualificationFromWorkerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.DisassociateQualificationFromWorkerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeDisassociateQualificationFromWorkerWithContext(ctx context.Context, in *mturk.DisassociateQualificationFromWorkerInput, _ ...request.Option) (*mturk.DisassociateQualificationFromWorkerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateQualificationFromWorker cancelled", ctx.Err())
	default:
		return d.DisassociateQualificationFromWorker(in)
	}
}

func (d *MTurkDouble) GetAccountBalance(i0 *mturk.GetAccountBalanceInput) (r0 *mturk.GetAccountBalanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAccountBalance", i0)
	r0, _ = returns[0].(*mturk.GetAccountBalanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) GetAccountBalanceRequest(i0 *mturk.GetAccountBalanceInput) (r0 *request.Request, r1 *mturk.GetAccountBalanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAccountBalanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.GetAccountBalanceOutput)
	return
}

func (d *MTurkDouble) GetAccountBalanceWithContext(i0 context.Context, i1 *mturk.GetAccountBalanceInput, i2 ...request.Option) (r0 *mturk.GetAccountBalanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAccountBalanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.GetAccountBalanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeGetAccountBalanceWithContext(ctx context.Context, in *mturk.GetAccountBalanceInput, _ ...request.Option) (*mturk.GetAccountBalanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetAccountBalance cancelled", ctx.Err())
	default:
		return d.GetAccountBalance(in)
	}
}

func (d *MTurkDouble) GetAssignment(i0 *mturk.GetAssignmentInput) (r0 *mturk.GetAssignmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAssignment", i0)
	r0, _ = returns[0].(*mturk.GetAssignmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) GetAssignmentRequest(i0 *mturk.GetAssignmentInput) (r0 *request.Request, r1 *mturk.GetAssignmentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAssignmentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.GetAssignmentOutput)
	return
}

func (d *MTurkDouble) GetAssignmentWithContext(i0 context.Context, i1 *mturk.GetAssignmentInput, i2 ...request.Option) (r0 *mturk.GetAssignmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAssignmentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.GetAssignmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeGetAssignmentWithContext(ctx context.Context, in *mturk.GetAssignmentInput, _ ...request.Option) (*mturk.GetAssignmentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetAssignment cancelled", ctx.Err())
	default:
		return d.GetAssignment(in)
	}
}

func (d *MTurkDouble) GetFileUploadURL(i0 *mturk.GetFileUploadURLInput) (r0 *mturk.GetFileUploadURLOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFileUploadURL", i0)
	r0, _ = returns[0].(*mturk.GetFileUploadURLOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) GetFileUploadURLRequest(i0 *mturk.GetFileUploadURLInput) (r0 *request.Request, r1 *mturk.GetFileUploadURLOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFileUploadURLRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.GetFileUploadURLOutput)
	return
}

func (d *MTurkDouble) GetFileUploadURLWithContext(i0 context.Context, i1 *mturk.GetFileUploadURLInput, i2 ...request.Option) (r0 *mturk.GetFileUploadURLOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFileUploadURLWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.GetFileUploadURLOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeGetFileUploadURLWithContext(ctx context.Context, in *mturk.GetFileUploadURLInput, _ ...request.Option) (*mturk.GetFileUploadURLOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetFileUploadURL cancelled", ctx.Err())
	default:
		return d.GetFileUploadURL(in)
	}
}

func (d *MTurkDouble) GetHIT(i0 *mturk.GetHITInput) (r0 *mturk.GetHITOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetHIT", i0)
	r0, _ = returns[0].(*mturk.GetHITOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) GetHITRequest(i0 *mturk.GetHITInput) (r0 *request.Request, r1 *mturk.GetHITOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetHITRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.GetHITOutput)
	return
}

func (d *MTurkDouble) GetHITWithContext(i0 context.Context, i1 *mturk.GetHITInput, i2 ...request.Option) (r0 *mturk.GetHITOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetHITWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.GetHITOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeGetHITWithContext(ctx context.Context, in *mturk.GetHITInput, _ ...request.Option) (*mturk.GetHITOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetHIT cancelled", ctx.Err())
	default:
		return d.GetHIT(in)
	}
}

func (d *MTurkDouble) GetQualificationScore(i0 *mturk.GetQualificationScoreInput) (r0 *mturk.GetQualificationScoreOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetQualificationScore", i0)
	r0, _ = returns[0].(*mturk.GetQualificationScoreOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) GetQualificationScoreRequest(i0 *mturk.GetQualificationScoreInput) (r0 *request.Request, r1 *mturk.GetQualificationScoreOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetQualificationScoreRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.GetQualificationScoreOutput)
	return
}

func (d *MTurkDouble) GetQualificationScoreWithContext(i0 context.Context, i1 *mturk.GetQualificationScoreInput, i2 ...request.Option) (r0 *mturk.GetQualificationScoreOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetQualificationScoreWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.GetQualificationScoreOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeGetQualificationScoreWithContext(ctx context.Context, in *mturk.GetQualificationScoreInput, _ ...request.Option) (*mturk.GetQualificationScoreOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetQualificationScore cancelled", ctx.Err())
	default:
		return d.GetQualificationScore(in)
	}
}

func (d *MTurkDouble) GetQualificationType(i0 *mturk.GetQualificationTypeInput) (r0 *mturk.GetQualificationTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetQualificationType", i0)
	r0, _ = returns[0].(*mturk.GetQualificationTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) GetQualificationTypeRequest(i0 *mturk.GetQualificationTypeInput) (r0 *request.Request, r1 *mturk.GetQualificationTypeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetQualificationTypeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.GetQualificationTypeOutput)
	return
}

func (d *MTurkDouble) GetQualificationTypeWithContext(i0 context.Context, i1 *mturk.GetQualificationTypeInput, i2 ...request.Option) (r0 *mturk.GetQualificationTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetQualificationTypeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.GetQualificationTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeGetQualificationTypeWithContext(ctx context.Context, in *mturk.GetQualificationTypeInput, _ ...request.Option) (*mturk.GetQualificationTypeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetQualificationType cancelled", ctx.Err())
	default:
		return d.GetQualificationType(in)
	}
}

func (d *MTurkDouble) ListAssignmentsForHIT(i0 *mturk.ListAssignmentsForHITInput) (r0 *mturk.ListAssignmentsForHITOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssignmentsForHIT", i0)
	r0, _ = returns[0].(*mturk.ListAssignmentsForHITOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) ListAssignmentsForHITPages(i0 *mturk.ListAssignmentsForHITInput, i1 func(*mturk.ListAssignmentsForHITOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssignmentsForHITPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MTurkDouble) fakeListAssignmentsForHITPages(in *mturk.ListAssignmentsForHITInput, pager func(*mturk.ListAssignmentsForHITOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListAssignmentsForHIT", paginators, in, pager)
}

func (d *MTurkDouble) ListAssignmentsForHITPagesWithContext(i0 context.Context, i1 *mturk.ListAssignmentsForHITInput, i2 func(*mturk.ListAssignmentsForHITOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssignmentsForHITPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MTurkDouble) fakeListAssignmentsForHITPagesWithContext(ctx context.Context, in *mturk.ListAssignmentsForHITInput, pager func(*mturk.ListAssignmentsForHITOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListAssignmentsForHIT", paginators, ctx, in, pager, options...)
}

func (d *MTurkDouble) ListAssignmentsForHITRequest(i0 *mturk.ListAssignmentsForHITInput) (r0 *request.Request, r1 *mturk.ListAssignmentsForHITOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssignmentsForHITRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.ListAssignmentsForHITOutput)
	return
}

func (d *MTurkDouble) ListAssignmentsForHITWithContext(i0 context.Context, i1 *mturk.ListAssignmentsForHITInput, i2 ...request.Option) (r0 *mturk.ListAssignmentsForHITOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssignmentsForHITWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.ListAssignmentsForHITOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeListAssignmentsForHITWithContext(ctx context.Context, in *mturk.ListAssignmentsForHITInput, _ ...request.Option) (*mturk.ListAssignmentsForHITOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAssignmentsForHIT cancelled", ctx.Err())
	default:
		return d.ListAssignmentsForHIT(in)
	}
}

func (d *MTurkDouble) ListBonusPayments(i0 *mturk.ListBonusPaymentsInput) (r0 *mturk.ListBonusPaymentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBonusPayments", i0)
	r0, _ = returns[0].(*mturk.ListBonusPaymentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) ListBonusPaymentsPages(i0 *mturk.ListBonusPaymentsInput, i1 func(*mturk.ListBonusPaymentsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBonusPaymentsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MTurkDouble) fakeListBonusPaymentsPages(in *mturk.ListBonusPaymentsInput, pager func(*mturk.ListBonusPaymentsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListBonusPayments", paginators, in, pager)
}

func (d *MTurkDouble) ListBonusPaymentsPagesWithContext(i0 context.Context, i1 *mturk.ListBonusPaymentsInput, i2 func(*mturk.ListBonusPaymentsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBonusPaymentsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MTurkDouble) fakeListBonusPaymentsPagesWithContext(ctx context.Context, in *mturk.ListBonusPaymentsInput, pager func(*mturk.ListBonusPaymentsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListBonusPayments", paginators, ctx, in, pager, options...)
}

func (d *MTurkDouble) ListBonusPaymentsRequest(i0 *mturk.ListBonusPaymentsInput) (r0 *request.Request, r1 *mturk.ListBonusPaymentsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBonusPaymentsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.ListBonusPaymentsOutput)
	return
}

func (d *MTurkDouble) ListBonusPaymentsWithContext(i0 context.Context, i1 *mturk.ListBonusPaymentsInput, i2 ...request.Option) (r0 *mturk.ListBonusPaymentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBonusPaymentsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.ListBonusPaymentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeListBonusPaymentsWithContext(ctx context.Context, in *mturk.ListBonusPaymentsInput, _ ...request.Option) (*mturk.ListBonusPaymentsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListBonusPayments cancelled", ctx.Err())
	default:
		return d.ListBonusPayments(in)
	}
}

func (d *MTurkDouble) ListHITs(i0 *mturk.ListHITsInput) (r0 *mturk.ListHITsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHITs", i0)
	r0, _ = returns[0].(*mturk.ListHITsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) ListHITsForQualificationType(i0 *mturk.ListHITsForQualificationTypeInput) (r0 *mturk.ListHITsForQualificationTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHITsForQualificationType", i0)
	r0, _ = returns[0].(*mturk.ListHITsForQualificationTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) ListHITsForQualificationTypePages(i0 *mturk.ListHITsForQualificationTypeInput, i1 func(*mturk.ListHITsForQualificationTypeOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHITsForQualificationTypePages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MTurkDouble) fakeListHITsForQualificationTypePages(in *mturk.ListHITsForQualificationTypeInput, pager func(*mturk.ListHITsForQualificationTypeOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListHITsForQualificationType", paginators, in, pager)
}

func (d *MTurkDouble) ListHITsForQualificationTypePagesWithContext(i0 context.Context, i1 *mturk.ListHITsForQualificationTypeInput, i2 func(*mturk.ListHITsForQualificationTypeOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHITsForQualificationTypePagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MTurkDouble) fakeListHITsForQualificationTypePagesWithContext(ctx context.Context, in *mturk.ListHITsForQualificationTypeInput, pager func(*mturk.ListHITsForQualificationTypeOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListHITsForQualificationType", paginators, ctx, in, pager, options...)
}

func (d *MTurkDouble) ListHITsForQualificationTypeRequest(i0 *mturk.ListHITsForQualificationTypeInput) (r0 *request.Request, r1 *mturk.ListHITsForQualificationTypeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHITsForQualificationTypeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.ListHITsForQualificationTypeOutput)
	return
}

func (d *MTurkDouble) ListHITsForQualificationTypeWithContext(i0 context.Context, i1 *mturk.ListHITsForQualificationTypeInput, i2 ...request.Option) (r0 *mturk.ListHITsForQualificationTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHITsForQualificationTypeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.ListHITsForQualificationTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeListHITsForQualificationTypeWithContext(ctx context.Context, in *mturk.ListHITsForQualificationTypeInput, _ ...request.Option) (*mturk.ListHITsForQualificationTypeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListHITsForQualificationType cancelled", ctx.Err())
	default:
		return d.ListHITsForQualificationType(in)
	}
}

func (d *MTurkDouble) ListHITsPages(i0 *mturk.ListHITsInput, i1 func(*mturk.ListHITsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHITsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MTurkDouble) fakeListHITsPages(in *mturk.ListHITsInput, pager func(*mturk.ListHITsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListHITs", paginators, in, pager)
}

func (d *MTurkDouble) ListHITsPagesWithContext(i0 context.Context, i1 *mturk.ListHITsInput, i2 func(*mturk.ListHITsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHITsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MTurkDouble) fakeListHITsPagesWithContext(ctx context.Context, in *mturk.ListHITsInput, pager func(*mturk.ListHITsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListHITs", paginators, ctx, in, pager, options...)
}

func (d *MTurkDouble) ListHITsRequest(i0 *mturk.ListHITsInput) (r0 *request.Request, r1 *mturk.ListHITsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHITsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.ListHITsOutput)
	return
}

func (d *MTurkDouble) ListHITsWithContext(i0 context.Context, i1 *mturk.ListHITsInput, i2 ...request.Option) (r0 *mturk.ListHITsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHITsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.ListHITsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeListHITsWithContext(ctx context.Context, in *mturk.ListHITsInput, _ ...request.Option) (*mturk.ListHITsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListHITs cancelled", ctx.Err())
	default:
		return d.ListHITs(in)
	}
}

func (d *MTurkDouble) ListQualificationRequests(i0 *mturk.ListQualificationRequestsInput) (r0 *mturk.ListQualificationRequestsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListQualificationRequests", i0)
	r0, _ = returns[0].(*mturk.ListQualificationRequestsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) ListQualificationRequestsPages(i0 *mturk.ListQualificationRequestsInput, i1 func(*mturk.ListQualificationRequestsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListQualificationRequestsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MTurkDouble) fakeListQualificationRequestsPages(in *mturk.ListQualificationRequestsInput, pager func(*mturk.ListQualificationRequestsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListQualificationRequests", paginators, in, pager)
}

func (d *MTurkDouble) ListQualificationRequestsPagesWithContext(i0 context.Context, i1 *mturk.ListQualificationRequestsInput, i2 func(*mturk.ListQualificationRequestsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListQualificationRequestsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MTurkDouble) fakeListQualificationRequestsPagesWithContext(ctx context.Context, in *mturk.ListQualificationRequestsInput, pager func(*mturk.ListQualificationRequestsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListQualificationRequests", paginators, ctx, in, pager, options...)
}

func (d *MTurkDouble) ListQualificationRequestsRequest(i0 *mturk.ListQualificationRequestsInput) (r0 *request.Request, r1 *mturk.ListQualificationRequestsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListQualificationRequestsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.ListQualificationRequestsOutput)
	return
}

func (d *MTurkDouble) ListQualificationRequestsWithContext(i0 context.Context, i1 *mturk.ListQualificationRequestsInput, i2 ...request.Option) (r0 *mturk.ListQualificationRequestsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListQualificationRequestsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.ListQualificationRequestsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeListQualificationRequestsWithContext(ctx context.Context, in *mturk.ListQualificationRequestsInput, _ ...request.Option) (*mturk.ListQualificationRequestsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListQualificationRequests cancelled", ctx.Err())
	default:
		return d.ListQualificationRequests(in)
	}
}

func (d *MTurkDouble) ListQualificationTypes(i0 *mturk.ListQualificationTypesInput) (r0 *mturk.ListQualificationTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListQualificationTypes", i0)
	r0, _ = returns[0].(*mturk.ListQualificationTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) ListQualificationTypesPages(i0 *mturk.ListQualificationTypesInput, i1 func(*mturk.ListQualificationTypesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListQualificationTypesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MTurkDouble) fakeListQualificationTypesPages(in *mturk.ListQualificationTypesInput, pager func(*mturk.ListQualificationTypesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListQualificationTypes", paginators, in, pager)
}

func (d *MTurkDouble) ListQualificationTypesPagesWithContext(i0 context.Context, i1 *mturk.ListQualificationTypesInput, i2 func(*mturk.ListQualificationTypesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListQualificationTypesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MTurkDouble) fakeListQualificationTypesPagesWithContext(ctx context.Context, in *mturk.ListQualificationTypesInput, pager func(*mturk.ListQualificationTypesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListQualificationTypes", paginators, ctx, in, pager, options...)
}

func (d *MTurkDouble) ListQualificationTypesRequest(i0 *mturk.ListQualificationTypesInput) (r0 *request.Request, r1 *mturk.ListQualificationTypesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListQualificationTypesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.ListQualificationTypesOutput)
	return
}

func (d *MTurkDouble) ListQualificationTypesWithContext(i0 context.Context, i1 *mturk.ListQualificationTypesInput, i2 ...request.Option) (r0 *mturk.ListQualificationTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListQualificationTypesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.ListQualificationTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeListQualificationTypesWithContext(ctx context.Context, in *mturk.ListQualificationTypesInput, _ ...request.Option) (*mturk.ListQualificationTypesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListQualificationTypes cancelled", ctx.Err())
	default:
		return d.ListQualificationTypes(in)
	}
}

func (d *MTurkDouble) ListReviewPolicyResultsForHIT(i0 *mturk.ListReviewPolicyResultsForHITInput) (r0 *mturk.ListReviewPolicyResultsForHITOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListReviewPolicyResultsForHIT", i0)
	r0, _ = returns[0].(*mturk.ListReviewPolicyResultsForHITOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) ListReviewPolicyResultsForHITPages(i0 *mturk.ListReviewPolicyResultsForHITInput, i1 func(*mturk.ListReviewPolicyResultsForHITOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListReviewPolicyResultsForHITPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MTurkDouble) fakeListReviewPolicyResultsForHITPages(in *mturk.ListReviewPolicyResultsForHITInput, pager func(*mturk.ListReviewPolicyResultsForHITOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListReviewPolicyResultsForHIT", paginators, in, pager)
}

func (d *MTurkDouble) ListReviewPolicyResultsForHITPagesWithContext(i0 context.Context, i1 *mturk.ListReviewPolicyResultsForHITInput, i2 func(*mturk.ListReviewPolicyResultsForHITOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListReviewPolicyResultsForHITPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MTurkDouble) fakeListReviewPolicyResultsForHITPagesWithContext(ctx context.Context, in *mturk.ListReviewPolicyResultsForHITInput, pager func(*mturk.ListReviewPolicyResultsForHITOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListReviewPolicyResultsForHIT", paginators, ctx, in, pager, options...)
}

func (d *MTurkDouble) ListReviewPolicyResultsForHITRequest(i0 *mturk.ListReviewPolicyResultsForHITInput) (r0 *request.Request, r1 *mturk.ListReviewPolicyResultsForHITOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListReviewPolicyResultsForHITRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.ListReviewPolicyResultsForHITOutput)
	return
}

func (d *MTurkDouble) ListReviewPolicyResultsForHITWithContext(i0 context.Context, i1 *mturk.ListReviewPolicyResultsForHITInput, i2 ...request.Option) (r0 *mturk.ListReviewPolicyResultsForHITOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListReviewPolicyResultsForHITWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.ListReviewPolicyResultsForHITOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeListReviewPolicyResultsForHITWithContext(ctx context.Context, in *mturk.ListReviewPolicyResultsForHITInput, _ ...request.Option) (*mturk.ListReviewPolicyResultsForHITOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListReviewPolicyResultsForHIT cancelled", ctx.Err())
	default:
		return d.ListReviewPolicyResultsForHIT(in)
	}
}

func (d *MTurkDouble) ListReviewableHITs(i0 *mturk.ListReviewableHITsInput) (r0 *mturk.ListReviewableHITsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListReviewableHITs", i0)
	r0, _ = returns[0].(*mturk.ListReviewableHITsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) ListReviewableHITsPages(i0 *mturk.ListReviewableHITsInput, i1 func(*mturk.ListReviewableHITsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListReviewableHITsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MTurkDouble) fakeListReviewableHITsPages(in *mturk.ListReviewableHITsInput, pager func(*mturk.ListReviewableHITsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListReviewableHITs", paginators, in, pager)
}

func (d *MTurkDouble) ListReviewableHITsPagesWithContext(i0 context.Context, i1 *mturk.ListReviewableHITsInput, i2 func(*mturk.ListReviewableHITsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListReviewableHITsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MTurkDouble) fakeListReviewableHITsPagesWithContext(ctx context.Context, in *mturk.ListReviewableHITsInput, pager func(*mturk.ListReviewableHITsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListReviewableHITs", paginators, ctx, in, pager, options...)
}

func (d *MTurkDouble) ListReviewableHITsRequest(i0 *mturk.ListReviewableHITsInput) (r0 *request.Request, r1 *mturk.ListReviewableHITsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListReviewableHITsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.ListReviewableHITsOutput)
	return
}

func (d *MTurkDouble) ListReviewableHITsWithContext(i0 context.Context, i1 *mturk.ListReviewableHITsInput, i2 ...request.Option) (r0 *mturk.ListReviewableHITsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListReviewableHITsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.ListReviewableHITsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeListReviewableHITsWithContext(ctx context.Context, in *mturk.ListReviewableHITsInput, _ ...request.Option) (*mturk.ListReviewableHITsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListReviewableHITs cancelled", ctx.Err())
	default:
		return d.ListReviewableHITs(in)
	}
}

func (d *MTurkDouble) ListWorkerBlocks(i0 *mturk.ListWorkerBlocksInput) (r0 *mturk.ListWorkerBlocksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWorkerBlocks", i0)
	r0, _ = returns[0].(*mturk.ListWorkerBlocksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) ListWorkerBlocksPages(i0 *mturk.ListWorkerBlocksInput, i1 func(*mturk.ListWorkerBlocksOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWorkerBlocksPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MTurkDouble) fakeListWorkerBlocksPages(in *mturk.ListWorkerBlocksInput, pager func(*mturk.ListWorkerBlocksOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListWorkerBlocks", paginators, in, pager)
}

func (d *MTurkDouble) ListWorkerBlocksPagesWithContext(i0 context.Context, i1 *mturk.ListWorkerBlocksInput, i2 func(*mturk.ListWorkerBlocksOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWorkerBlocksPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MTurkDouble) fakeListWorkerBlocksPagesWithContext(ctx context.Context, in *mturk.ListWorkerBlocksInput, pager func(*mturk.ListWorkerBlocksOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListWorkerBlocks", paginators, ctx, in, pager, options...)
}

func (d *MTurkDouble) ListWorkerBlocksRequest(i0 *mturk.ListWorkerBlocksInput) (r0 *request.Request, r1 *mturk.ListWorkerBlocksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWorkerBlocksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.ListWorkerBlocksOutput)
	return
}

func (d *MTurkDouble) ListWorkerBlocksWithContext(i0 context.Context, i1 *mturk.ListWorkerBlocksInput, i2 ...request.Option) (r0 *mturk.ListWorkerBlocksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWorkerBlocksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.ListWorkerBlocksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeListWorkerBlocksWithContext(ctx context.Context, in *mturk.ListWorkerBlocksInput, _ ...request.Option) (*mturk.ListWorkerBlocksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListWorkerBlocks cancelled", ctx.Err())
	default:
		return d.ListWorkerBlocks(in)
	}
}

func (d *MTurkDouble) ListWorkersWithQualificationType(i0 *mturk.ListWorkersWithQualificationTypeInput) (r0 *mturk.ListWorkersWithQualificationTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWorkersWithQualificationType", i0)
	r0, _ = returns[0].(*mturk.ListWorkersWithQualificationTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) ListWorkersWithQualificationTypePages(i0 *mturk.ListWorkersWithQualificationTypeInput, i1 func(*mturk.ListWorkersWithQualificationTypeOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWorkersWithQualificationTypePages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MTurkDouble) fakeListWorkersWithQualificationTypePages(in *mturk.ListWorkersWithQualificationTypeInput, pager func(*mturk.ListWorkersWithQualificationTypeOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListWorkersWithQualificationType", paginators, in, pager)
}

func (d *MTurkDouble) ListWorkersWithQualificationTypePagesWithContext(i0 context.Context, i1 *mturk.ListWorkersWithQualificationTypeInput, i2 func(*mturk.ListWorkersWithQualificationTypeOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWorkersWithQualificationTypePagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MTurkDouble) fakeListWorkersWithQualificationTypePagesWithContext(ctx context.Context, in *mturk.ListWorkersWithQualificationTypeInput, pager func(*mturk.ListWorkersWithQualificationTypeOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListWorkersWithQualificationType", paginators, ctx, in, pager, options...)
}

func (d *MTurkDouble) ListWorkersWithQualificationTypeRequest(i0 *mturk.ListWorkersWithQualificationTypeInput) (r0 *request.Request, r1 *mturk.ListWorkersWithQualificationTypeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWorkersWithQualificationTypeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.ListWorkersWithQualificationTypeOutput)
	return
}

func (d *MTurkDouble) ListWorkersWithQualificationTypeWithContext(i0 context.Context, i1 *mturk.ListWorkersWithQualificationTypeInput, i2 ...request.Option) (r0 *mturk.ListWorkersWithQualificationTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWorkersWithQualificationTypeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.ListWorkersWithQualificationTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeListWorkersWithQualificationTypeWithContext(ctx context.Context, in *mturk.ListWorkersWithQualificationTypeInput, _ ...request.Option) (*mturk.ListWorkersWithQualificationTypeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListWorkersWithQualificationType cancelled", ctx.Err())
	default:
		return d.ListWorkersWithQualificationType(in)
	}
}

func (d *MTurkDouble) NotifyWorkers(i0 *mturk.NotifyWorkersInput) (r0 *mturk.NotifyWorkersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("NotifyWorkers", i0)
	r0, _ = returns[0].(*mturk.NotifyWorkersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) NotifyWorkersRequest(i0 *mturk.NotifyWorkersInput) (r0 *request.Request, r1 *mturk.NotifyWorkersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("NotifyWorkersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.NotifyWorkersOutput)
	return
}

func (d *MTurkDouble) NotifyWorkersWithContext(i0 context.Context, i1 *mturk.NotifyWorkersInput, i2 ...request.Option) (r0 *mturk.NotifyWorkersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("NotifyWorkersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.NotifyWorkersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeNotifyWorkersWithContext(ctx context.Context, in *mturk.NotifyWorkersInput, _ ...request.Option) (*mturk.NotifyWorkersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "NotifyWorkers cancelled", ctx.Err())
	default:
		return d.NotifyWorkers(in)
	}
}

func (d *MTurkDouble) RejectAssignment(i0 *mturk.RejectAssignmentInput) (r0 *mturk.RejectAssignmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RejectAssignment", i0)
	r0, _ = returns[0].(*mturk.RejectAssignmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) RejectAssignmentRequest(i0 *mturk.RejectAssignmentInput) (r0 *request.Request, r1 *mturk.RejectAssignmentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RejectAssignmentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.RejectAssignmentOutput)
	return
}

func (d *MTurkDouble) RejectAssignmentWithContext(i0 context.Context, i1 *mturk.RejectAssignmentInput, i2 ...request.Option) (r0 *mturk.RejectAssignmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RejectAssignmentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.RejectAssignmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeRejectAssignmentWithContext(ctx context.Context, in *mturk.RejectAssignmentInput, _ ...request.Option) (*mturk.RejectAssignmentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RejectAssignment cancelled", ctx.Err())
	default:
		return d.RejectAssignment(in)
	}
}

func (d *MTurkDouble) RejectQualificationRequest(i0 *mturk.RejectQualificationRequestInput) (r0 *mturk.RejectQualificationRequestOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RejectQualificationRequest", i0)
	r0, _ = returns[0].(*mturk.RejectQualificationRequestOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) RejectQualificationRequestRequest(i0 *mturk.RejectQualificationRequestInput) (r0 *request.Request, r1 *mturk.RejectQualificationRequestOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RejectQualificationRequestRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.RejectQualificationRequestOutput)
	return
}

func (d *MTurkDouble) RejectQualificationRequestWithContext(i0 context.Context, i1 *mturk.RejectQualificationRequestInput, i2 ...request.Option) (r0 *mturk.RejectQualificationRequestOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RejectQualificationRequestWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.RejectQualificationRequestOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeRejectQualificationRequestWithContext(ctx context.Context, in *mturk.RejectQualificationRequestInput, _ ...request.Option) (*mturk.RejectQualificationRequestOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RejectQualificationRequest cancelled", ctx.Err())
	default:
		return d.RejectQualificationRequest(in)
	}
}

func (d *MTurkDouble) SendBonus(i0 *mturk.SendBonusInput) (r0 *mturk.SendBonusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendBonus", i0)
	r0, _ = returns[0].(*mturk.SendBonusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) SendBonusRequest(i0 *mturk.SendBonusInput) (r0 *request.Request, r1 *mturk.SendBonusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendBonusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.SendBonusOutput)
	return
}

func (d *MTurkDouble) SendBonusWithContext(i0 context.Context, i1 *mturk.SendBonusInput, i2 ...request.Option) (r0 *mturk.SendBonusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendBonusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.SendBonusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeSendBonusWithContext(ctx context.Context, in *mturk.SendBonusInput, _ ...request.Option) (*mturk.SendBonusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SendBonus cancelled", ctx.Err())
	default:
		return d.SendBonus(in)
	}
}

func (d *MTurkDouble) SendTestEventNotification(i0 *mturk.SendTestEventNotificationInput) (r0 *mturk.SendTestEventNotificationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendTestEventNotification", i0)
	r0, _ = returns[0].(*mturk.SendTestEventNotificationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) SendTestEventNotificationRequest(i0 *mturk.SendTestEventNotificationInput) (r0 *request.Request, r1 *mturk.SendTestEventNotificationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendTestEventNotificationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.SendTestEventNotificationOutput)
	return
}

func (d *MTurkDouble) SendTestEventNotificationWithContext(i0 context.Context, i1 *mturk.SendTestEventNotificationInput, i2 ...request.Option) (r0 *mturk.SendTestEventNotificationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendTestEventNotificationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.SendTestEventNotificationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeSendTestEventNotificationWithContext(ctx context.Context, in *mturk.SendTestEventNotificationInput, _ ...request.Option) (*mturk.SendTestEventNotificationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SendTestEventNotification cancelled", ctx.Err())
	default:
		return d.SendTestEventNotification(in)
	}
}

func (d *MTurkDouble) UpdateExpirationForHIT(i0 *mturk.UpdateExpirationForHITInput) (r0 *mturk.UpdateExpirationForHITOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateExpirationForHIT", i0)
	r0, _ = returns[0].(*mturk.UpdateExpirationForHITOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) UpdateExpirationForHITRequest(i0 *mturk.UpdateExpirationForHITInput) (r0 *request.Request, r1 *mturk.UpdateExpirationForHITOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateExpirationForHITRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.UpdateExpirationForHITOutput)
	return
}

func (d *MTurkDouble) UpdateExpirationForHITWithContext(i0 context.Context, i1 *mturk.UpdateExpirationForHITInput, i2 ...request.Option) (r0 *mturk.UpdateExpirationForHITOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateExpirationForHITWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.UpdateExpirationForHITOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeUpdateExpirationForHITWithContext(ctx context.Context, in *mturk.UpdateExpirationForHITInput, _ ...request.Option) (*mturk.UpdateExpirationForHITOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateExpirationForHIT cancelled", ctx.Err())
	default:
		return d.UpdateExpirationForHIT(in)
	}
}

func (d *MTurkDouble) UpdateHITReviewStatus(i0 *mturk.UpdateHITReviewStatusInput) (r0 *mturk.UpdateHITReviewStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateHITReviewStatus", i0)
	r0, _ = returns[0].(*mturk.UpdateHITReviewStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) UpdateHITReviewStatusRequest(i0 *mturk.UpdateHITReviewStatusInput) (r0 *request.Request, r1 *mturk.UpdateHITReviewStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateHITReviewStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.UpdateHITReviewStatusOutput)
	return
}

func (d *MTurkDouble) UpdateHITReviewStatusWithContext(i0 context.Context, i1 *mturk.UpdateHITReviewStatusInput, i2 ...request.Option) (r0 *mturk.UpdateHITReviewStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateHITReviewStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.UpdateHITReviewStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeUpdateHITReviewStatusWithContext(ctx context.Context, in *mturk.UpdateHITReviewStatusInput, _ ...request.Option) (*mturk.UpdateHITReviewStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateHITReviewStatus cancelled", ctx.Err())
	default:
		return d.UpdateHITReviewStatus(in)
	}
}

func (d *MTurkDouble) UpdateHITTypeOfHIT(i0 *mturk.UpdateHITTypeOfHITInput) (r0 *mturk.UpdateHITTypeOfHITOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateHITTypeOfHIT", i0)
	r0, _ = returns[0].(*mturk.UpdateHITTypeOfHITOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) UpdateHITTypeOfHITRequest(i0 *mturk.UpdateHITTypeOfHITInput) (r0 *request.Request, r1 *mturk.UpdateHITTypeOfHITOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateHITTypeOfHITRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.UpdateHITTypeOfHITOutput)
	return
}

func (d *MTurkDouble) UpdateHITTypeOfHITWithContext(i0 context.Context, i1 *mturk.UpdateHITTypeOfHITInput, i2 ...request.Option) (r0 *mturk.UpdateHITTypeOfHITOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateHITTypeOfHITWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.UpdateHITTypeOfHITOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeUpdateHITTypeOfHITWithContext(ctx context.Context, in *mturk.UpdateHITTypeOfHITInput, _ ...request.Option) (*mturk.UpdateHITTypeOfHITOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateHITTypeOfHIT cancelled", ctx.Err())
	default:
		return d.UpdateHITTypeOfHIT(in)
	}
}

func (d *MTurkDouble) UpdateNotificationSettings(i0 *mturk.UpdateNotificationSettingsInput) (r0 *mturk.UpdateNotificationSettingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateNotificationSettings", i0)
	r0, _ = returns[0].(*mturk.UpdateNotificationSettingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) UpdateNotificationSettingsRequest(i0 *mturk.UpdateNotificationSettingsInput) (r0 *request.Request, r1 *mturk.UpdateNotificationSettingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateNotificationSettingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.UpdateNotificationSettingsOutput)
	return
}

func (d *MTurkDouble) UpdateNotificationSettingsWithContext(i0 context.Context, i1 *mturk.UpdateNotificationSettingsInput, i2 ...request.Option) (r0 *mturk.UpdateNotificationSettingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateNotificationSettingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.UpdateNotificationSettingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeUpdateNotificationSettingsWithContext(ctx context.Context, in *mturk.UpdateNotificationSettingsInput, _ ...request.Option) (*mturk.UpdateNotificationSettingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateNotificationSettings cancelled", ctx.Err())
	default:
		return d.UpdateNotificationSettings(in)
	}
}

func (d *MTurkDouble) UpdateQualificationType(i0 *mturk.UpdateQualificationTypeInput) (r0 *mturk.UpdateQualificationTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateQualificationType", i0)
	r0, _ = returns[0].(*mturk.UpdateQualificationTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) UpdateQualificationTypeRequest(i0 *mturk.UpdateQualificationTypeInput) (r0 *request.Request, r1 *mturk.UpdateQualificationTypeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateQualificationTypeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mturk.UpdateQualificationTypeOutput)
	return
}

func (d *MTurkDouble) UpdateQualificationTypeWithContext(i0 context.Context, i1 *mturk.UpdateQualificationTypeInput, i2 ...request.Option) (r0 *mturk.UpdateQualificationTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateQualificationTypeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mturk.UpdateQualificationTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MTurkDouble) fakeUpdateQualificationTypeWithContext(ctx context.Context, in *mturk.UpdateQualificationTypeInput, _ ...request.Option) (*mturk.UpdateQualificationTypeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateQualificationType cancelled", ctx.Err())
	default:
		return d.UpdateQualificationType(in)
	}
}
