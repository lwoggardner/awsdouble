// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:11:35+11:00

// Package cloudhsmdouble provides a TestDouble implementation of cloudhsmiface.CloudHSMAPI
package cloudhsmdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/cloudhsm"
	"github.com/aws/aws-sdk-go/service/cloudhsm/cloudhsmiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// CloudHSMDouble is TestDouble for cloudhsmiface.CloudHSMAPI
type CloudHSMDouble struct {
	cloudhsmiface.CloudHSMAPI
	*awsdouble.AWSTestDouble
}

// Constructor for CloudHSMDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *CloudHSMDouble {
	result := &CloudHSMDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*cloudhsmiface.CloudHSMAPI)(nil), configurators...)
	return result
}

func (d *CloudHSMDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *CloudHSMDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AddTagsToResourceWithContext":
		return m.Fake(d.fakeAddTagsToResourceWithContext)

	case "CreateHapgWithContext":
		return m.Fake(d.fakeCreateHapgWithContext)

	case "CreateHsmWithContext":
		return m.Fake(d.fakeCreateHsmWithContext)

	case "CreateLunaClientWithContext":
		return m.Fake(d.fakeCreateLunaClientWithContext)

	case "DeleteHapgWithContext":
		return m.Fake(d.fakeDeleteHapgWithContext)

	case "DeleteHsmWithContext":
		return m.Fake(d.fakeDeleteHsmWithContext)

	case "DeleteLunaClientWithContext":
		return m.Fake(d.fakeDeleteLunaClientWithContext)

	case "DescribeHapgWithContext":
		return m.Fake(d.fakeDescribeHapgWithContext)

	case "DescribeHsmWithContext":
		return m.Fake(d.fakeDescribeHsmWithContext)

	case "DescribeLunaClientWithContext":
		return m.Fake(d.fakeDescribeLunaClientWithContext)

	case "GetConfigWithContext":
		return m.Fake(d.fakeGetConfigWithContext)

	case "ListAvailableZonesWithContext":
		return m.Fake(d.fakeListAvailableZonesWithContext)

	case "ListHapgsWithContext":
		return m.Fake(d.fakeListHapgsWithContext)

	case "ListHsmsWithContext":
		return m.Fake(d.fakeListHsmsWithContext)

	case "ListLunaClientsWithContext":
		return m.Fake(d.fakeListLunaClientsWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "ModifyHapgWithContext":
		return m.Fake(d.fakeModifyHapgWithContext)

	case "ModifyHsmWithContext":
		return m.Fake(d.fakeModifyHsmWithContext)

	case "ModifyLunaClientWithContext":
		return m.Fake(d.fakeModifyLunaClientWithContext)

	case "RemoveTagsFromResourceWithContext":
		return m.Fake(d.fakeRemoveTagsFromResourceWithContext)

	default:
		return nil
	}
}

func (d *CloudHSMDouble) AddTagsToResource(i0 *cloudhsm.AddTagsToResourceInput) (r0 *cloudhsm.AddTagsToResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToResource", i0)
	r0, _ = returns[0].(*cloudhsm.AddTagsToResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) AddTagsToResourceRequest(i0 *cloudhsm.AddTagsToResourceInput) (r0 *request.Request, r1 *cloudhsm.AddTagsToResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudhsm.AddTagsToResourceOutput)
	return
}

func (d *CloudHSMDouble) AddTagsToResourceWithContext(i0 context.Context, i1 *cloudhsm.AddTagsToResourceInput, i2 ...request.Option) (r0 *cloudhsm.AddTagsToResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudhsm.AddTagsToResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) fakeAddTagsToResourceWithContext(ctx context.Context, in *cloudhsm.AddTagsToResourceInput, _ ...request.Option) (*cloudhsm.AddTagsToResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddTagsToResource cancelled", ctx.Err())
	default:
		return d.AddTagsToResource(in)
	}
}

func (d *CloudHSMDouble) CreateHapg(i0 *cloudhsm.CreateHapgInput) (r0 *cloudhsm.CreateHapgOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHapg", i0)
	r0, _ = returns[0].(*cloudhsm.CreateHapgOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) CreateHapgRequest(i0 *cloudhsm.CreateHapgInput) (r0 *request.Request, r1 *cloudhsm.CreateHapgOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHapgRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudhsm.CreateHapgOutput)
	return
}

func (d *CloudHSMDouble) CreateHapgWithContext(i0 context.Context, i1 *cloudhsm.CreateHapgInput, i2 ...request.Option) (r0 *cloudhsm.CreateHapgOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHapgWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudhsm.CreateHapgOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) fakeCreateHapgWithContext(ctx context.Context, in *cloudhsm.CreateHapgInput, _ ...request.Option) (*cloudhsm.CreateHapgOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateHapg cancelled", ctx.Err())
	default:
		return d.CreateHapg(in)
	}
}

func (d *CloudHSMDouble) CreateHsm(i0 *cloudhsm.CreateHsmInput) (r0 *cloudhsm.CreateHsmOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHsm", i0)
	r0, _ = returns[0].(*cloudhsm.CreateHsmOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) CreateHsmRequest(i0 *cloudhsm.CreateHsmInput) (r0 *request.Request, r1 *cloudhsm.CreateHsmOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHsmRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudhsm.CreateHsmOutput)
	return
}

func (d *CloudHSMDouble) CreateHsmWithContext(i0 context.Context, i1 *cloudhsm.CreateHsmInput, i2 ...request.Option) (r0 *cloudhsm.CreateHsmOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHsmWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudhsm.CreateHsmOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) fakeCreateHsmWithContext(ctx context.Context, in *cloudhsm.CreateHsmInput, _ ...request.Option) (*cloudhsm.CreateHsmOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateHsm cancelled", ctx.Err())
	default:
		return d.CreateHsm(in)
	}
}

func (d *CloudHSMDouble) CreateLunaClient(i0 *cloudhsm.CreateLunaClientInput) (r0 *cloudhsm.CreateLunaClientOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLunaClient", i0)
	r0, _ = returns[0].(*cloudhsm.CreateLunaClientOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) CreateLunaClientRequest(i0 *cloudhsm.CreateLunaClientInput) (r0 *request.Request, r1 *cloudhsm.CreateLunaClientOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLunaClientRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudhsm.CreateLunaClientOutput)
	return
}

func (d *CloudHSMDouble) CreateLunaClientWithContext(i0 context.Context, i1 *cloudhsm.CreateLunaClientInput, i2 ...request.Option) (r0 *cloudhsm.CreateLunaClientOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLunaClientWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudhsm.CreateLunaClientOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) fakeCreateLunaClientWithContext(ctx context.Context, in *cloudhsm.CreateLunaClientInput, _ ...request.Option) (*cloudhsm.CreateLunaClientOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateLunaClient cancelled", ctx.Err())
	default:
		return d.CreateLunaClient(in)
	}
}

func (d *CloudHSMDouble) DeleteHapg(i0 *cloudhsm.DeleteHapgInput) (r0 *cloudhsm.DeleteHapgOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteHapg", i0)
	r0, _ = returns[0].(*cloudhsm.DeleteHapgOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) DeleteHapgRequest(i0 *cloudhsm.DeleteHapgInput) (r0 *request.Request, r1 *cloudhsm.DeleteHapgOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteHapgRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudhsm.DeleteHapgOutput)
	return
}

func (d *CloudHSMDouble) DeleteHapgWithContext(i0 context.Context, i1 *cloudhsm.DeleteHapgInput, i2 ...request.Option) (r0 *cloudhsm.DeleteHapgOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteHapgWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudhsm.DeleteHapgOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) fakeDeleteHapgWithContext(ctx context.Context, in *cloudhsm.DeleteHapgInput, _ ...request.Option) (*cloudhsm.DeleteHapgOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteHapg cancelled", ctx.Err())
	default:
		return d.DeleteHapg(in)
	}
}

func (d *CloudHSMDouble) DeleteHsm(i0 *cloudhsm.DeleteHsmInput) (r0 *cloudhsm.DeleteHsmOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteHsm", i0)
	r0, _ = returns[0].(*cloudhsm.DeleteHsmOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) DeleteHsmRequest(i0 *cloudhsm.DeleteHsmInput) (r0 *request.Request, r1 *cloudhsm.DeleteHsmOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteHsmRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudhsm.DeleteHsmOutput)
	return
}

func (d *CloudHSMDouble) DeleteHsmWithContext(i0 context.Context, i1 *cloudhsm.DeleteHsmInput, i2 ...request.Option) (r0 *cloudhsm.DeleteHsmOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteHsmWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudhsm.DeleteHsmOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) fakeDeleteHsmWithContext(ctx context.Context, in *cloudhsm.DeleteHsmInput, _ ...request.Option) (*cloudhsm.DeleteHsmOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteHsm cancelled", ctx.Err())
	default:
		return d.DeleteHsm(in)
	}
}

func (d *CloudHSMDouble) DeleteLunaClient(i0 *cloudhsm.DeleteLunaClientInput) (r0 *cloudhsm.DeleteLunaClientOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLunaClient", i0)
	r0, _ = returns[0].(*cloudhsm.DeleteLunaClientOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) DeleteLunaClientRequest(i0 *cloudhsm.DeleteLunaClientInput) (r0 *request.Request, r1 *cloudhsm.DeleteLunaClientOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLunaClientRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudhsm.DeleteLunaClientOutput)
	return
}

func (d *CloudHSMDouble) DeleteLunaClientWithContext(i0 context.Context, i1 *cloudhsm.DeleteLunaClientInput, i2 ...request.Option) (r0 *cloudhsm.DeleteLunaClientOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLunaClientWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudhsm.DeleteLunaClientOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) fakeDeleteLunaClientWithContext(ctx context.Context, in *cloudhsm.DeleteLunaClientInput, _ ...request.Option) (*cloudhsm.DeleteLunaClientOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteLunaClient cancelled", ctx.Err())
	default:
		return d.DeleteLunaClient(in)
	}
}

func (d *CloudHSMDouble) DescribeHapg(i0 *cloudhsm.DescribeHapgInput) (r0 *cloudhsm.DescribeHapgOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHapg", i0)
	r0, _ = returns[0].(*cloudhsm.DescribeHapgOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) DescribeHapgRequest(i0 *cloudhsm.DescribeHapgInput) (r0 *request.Request, r1 *cloudhsm.DescribeHapgOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHapgRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudhsm.DescribeHapgOutput)
	return
}

func (d *CloudHSMDouble) DescribeHapgWithContext(i0 context.Context, i1 *cloudhsm.DescribeHapgInput, i2 ...request.Option) (r0 *cloudhsm.DescribeHapgOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHapgWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudhsm.DescribeHapgOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) fakeDescribeHapgWithContext(ctx context.Context, in *cloudhsm.DescribeHapgInput, _ ...request.Option) (*cloudhsm.DescribeHapgOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeHapg cancelled", ctx.Err())
	default:
		return d.DescribeHapg(in)
	}
}

func (d *CloudHSMDouble) DescribeHsm(i0 *cloudhsm.DescribeHsmInput) (r0 *cloudhsm.DescribeHsmOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHsm", i0)
	r0, _ = returns[0].(*cloudhsm.DescribeHsmOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) DescribeHsmRequest(i0 *cloudhsm.DescribeHsmInput) (r0 *request.Request, r1 *cloudhsm.DescribeHsmOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHsmRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudhsm.DescribeHsmOutput)
	return
}

func (d *CloudHSMDouble) DescribeHsmWithContext(i0 context.Context, i1 *cloudhsm.DescribeHsmInput, i2 ...request.Option) (r0 *cloudhsm.DescribeHsmOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHsmWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudhsm.DescribeHsmOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) fakeDescribeHsmWithContext(ctx context.Context, in *cloudhsm.DescribeHsmInput, _ ...request.Option) (*cloudhsm.DescribeHsmOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeHsm cancelled", ctx.Err())
	default:
		return d.DescribeHsm(in)
	}
}

func (d *CloudHSMDouble) DescribeLunaClient(i0 *cloudhsm.DescribeLunaClientInput) (r0 *cloudhsm.DescribeLunaClientOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLunaClient", i0)
	r0, _ = returns[0].(*cloudhsm.DescribeLunaClientOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) DescribeLunaClientRequest(i0 *cloudhsm.DescribeLunaClientInput) (r0 *request.Request, r1 *cloudhsm.DescribeLunaClientOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLunaClientRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudhsm.DescribeLunaClientOutput)
	return
}

func (d *CloudHSMDouble) DescribeLunaClientWithContext(i0 context.Context, i1 *cloudhsm.DescribeLunaClientInput, i2 ...request.Option) (r0 *cloudhsm.DescribeLunaClientOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLunaClientWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudhsm.DescribeLunaClientOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) fakeDescribeLunaClientWithContext(ctx context.Context, in *cloudhsm.DescribeLunaClientInput, _ ...request.Option) (*cloudhsm.DescribeLunaClientOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeLunaClient cancelled", ctx.Err())
	default:
		return d.DescribeLunaClient(in)
	}
}

func (d *CloudHSMDouble) GetConfig(i0 *cloudhsm.GetConfigInput) (r0 *cloudhsm.GetConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConfig", i0)
	r0, _ = returns[0].(*cloudhsm.GetConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) GetConfigRequest(i0 *cloudhsm.GetConfigInput) (r0 *request.Request, r1 *cloudhsm.GetConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudhsm.GetConfigOutput)
	return
}

func (d *CloudHSMDouble) GetConfigWithContext(i0 context.Context, i1 *cloudhsm.GetConfigInput, i2 ...request.Option) (r0 *cloudhsm.GetConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudhsm.GetConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) fakeGetConfigWithContext(ctx context.Context, in *cloudhsm.GetConfigInput, _ ...request.Option) (*cloudhsm.GetConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetConfig cancelled", ctx.Err())
	default:
		return d.GetConfig(in)
	}
}

func (d *CloudHSMDouble) ListAvailableZones(i0 *cloudhsm.ListAvailableZonesInput) (r0 *cloudhsm.ListAvailableZonesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAvailableZones", i0)
	r0, _ = returns[0].(*cloudhsm.ListAvailableZonesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) ListAvailableZonesRequest(i0 *cloudhsm.ListAvailableZonesInput) (r0 *request.Request, r1 *cloudhsm.ListAvailableZonesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAvailableZonesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudhsm.ListAvailableZonesOutput)
	return
}

func (d *CloudHSMDouble) ListAvailableZonesWithContext(i0 context.Context, i1 *cloudhsm.ListAvailableZonesInput, i2 ...request.Option) (r0 *cloudhsm.ListAvailableZonesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAvailableZonesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudhsm.ListAvailableZonesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) fakeListAvailableZonesWithContext(ctx context.Context, in *cloudhsm.ListAvailableZonesInput, _ ...request.Option) (*cloudhsm.ListAvailableZonesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAvailableZones cancelled", ctx.Err())
	default:
		return d.ListAvailableZones(in)
	}
}

func (d *CloudHSMDouble) ListHapgs(i0 *cloudhsm.ListHapgsInput) (r0 *cloudhsm.ListHapgsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHapgs", i0)
	r0, _ = returns[0].(*cloudhsm.ListHapgsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) ListHapgsRequest(i0 *cloudhsm.ListHapgsInput) (r0 *request.Request, r1 *cloudhsm.ListHapgsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHapgsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudhsm.ListHapgsOutput)
	return
}

func (d *CloudHSMDouble) ListHapgsWithContext(i0 context.Context, i1 *cloudhsm.ListHapgsInput, i2 ...request.Option) (r0 *cloudhsm.ListHapgsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHapgsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudhsm.ListHapgsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) fakeListHapgsWithContext(ctx context.Context, in *cloudhsm.ListHapgsInput, _ ...request.Option) (*cloudhsm.ListHapgsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListHapgs cancelled", ctx.Err())
	default:
		return d.ListHapgs(in)
	}
}

func (d *CloudHSMDouble) ListHsms(i0 *cloudhsm.ListHsmsInput) (r0 *cloudhsm.ListHsmsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHsms", i0)
	r0, _ = returns[0].(*cloudhsm.ListHsmsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) ListHsmsRequest(i0 *cloudhsm.ListHsmsInput) (r0 *request.Request, r1 *cloudhsm.ListHsmsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHsmsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudhsm.ListHsmsOutput)
	return
}

func (d *CloudHSMDouble) ListHsmsWithContext(i0 context.Context, i1 *cloudhsm.ListHsmsInput, i2 ...request.Option) (r0 *cloudhsm.ListHsmsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHsmsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudhsm.ListHsmsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) fakeListHsmsWithContext(ctx context.Context, in *cloudhsm.ListHsmsInput, _ ...request.Option) (*cloudhsm.ListHsmsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListHsms cancelled", ctx.Err())
	default:
		return d.ListHsms(in)
	}
}

func (d *CloudHSMDouble) ListLunaClients(i0 *cloudhsm.ListLunaClientsInput) (r0 *cloudhsm.ListLunaClientsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLunaClients", i0)
	r0, _ = returns[0].(*cloudhsm.ListLunaClientsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) ListLunaClientsRequest(i0 *cloudhsm.ListLunaClientsInput) (r0 *request.Request, r1 *cloudhsm.ListLunaClientsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLunaClientsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudhsm.ListLunaClientsOutput)
	return
}

func (d *CloudHSMDouble) ListLunaClientsWithContext(i0 context.Context, i1 *cloudhsm.ListLunaClientsInput, i2 ...request.Option) (r0 *cloudhsm.ListLunaClientsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLunaClientsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudhsm.ListLunaClientsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) fakeListLunaClientsWithContext(ctx context.Context, in *cloudhsm.ListLunaClientsInput, _ ...request.Option) (*cloudhsm.ListLunaClientsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListLunaClients cancelled", ctx.Err())
	default:
		return d.ListLunaClients(in)
	}
}

func (d *CloudHSMDouble) ListTagsForResource(i0 *cloudhsm.ListTagsForResourceInput) (r0 *cloudhsm.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*cloudhsm.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) ListTagsForResourceRequest(i0 *cloudhsm.ListTagsForResourceInput) (r0 *request.Request, r1 *cloudhsm.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudhsm.ListTagsForResourceOutput)
	return
}

func (d *CloudHSMDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *cloudhsm.ListTagsForResourceInput, i2 ...request.Option) (r0 *cloudhsm.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudhsm.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *cloudhsm.ListTagsForResourceInput, _ ...request.Option) (*cloudhsm.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *CloudHSMDouble) ModifyHapg(i0 *cloudhsm.ModifyHapgInput) (r0 *cloudhsm.ModifyHapgOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyHapg", i0)
	r0, _ = returns[0].(*cloudhsm.ModifyHapgOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) ModifyHapgRequest(i0 *cloudhsm.ModifyHapgInput) (r0 *request.Request, r1 *cloudhsm.ModifyHapgOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyHapgRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudhsm.ModifyHapgOutput)
	return
}

func (d *CloudHSMDouble) ModifyHapgWithContext(i0 context.Context, i1 *cloudhsm.ModifyHapgInput, i2 ...request.Option) (r0 *cloudhsm.ModifyHapgOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyHapgWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudhsm.ModifyHapgOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) fakeModifyHapgWithContext(ctx context.Context, in *cloudhsm.ModifyHapgInput, _ ...request.Option) (*cloudhsm.ModifyHapgOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyHapg cancelled", ctx.Err())
	default:
		return d.ModifyHapg(in)
	}
}

func (d *CloudHSMDouble) ModifyHsm(i0 *cloudhsm.ModifyHsmInput) (r0 *cloudhsm.ModifyHsmOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyHsm", i0)
	r0, _ = returns[0].(*cloudhsm.ModifyHsmOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) ModifyHsmRequest(i0 *cloudhsm.ModifyHsmInput) (r0 *request.Request, r1 *cloudhsm.ModifyHsmOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyHsmRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudhsm.ModifyHsmOutput)
	return
}

func (d *CloudHSMDouble) ModifyHsmWithContext(i0 context.Context, i1 *cloudhsm.ModifyHsmInput, i2 ...request.Option) (r0 *cloudhsm.ModifyHsmOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyHsmWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudhsm.ModifyHsmOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) fakeModifyHsmWithContext(ctx context.Context, in *cloudhsm.ModifyHsmInput, _ ...request.Option) (*cloudhsm.ModifyHsmOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyHsm cancelled", ctx.Err())
	default:
		return d.ModifyHsm(in)
	}
}

func (d *CloudHSMDouble) ModifyLunaClient(i0 *cloudhsm.ModifyLunaClientInput) (r0 *cloudhsm.ModifyLunaClientOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyLunaClient", i0)
	r0, _ = returns[0].(*cloudhsm.ModifyLunaClientOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) ModifyLunaClientRequest(i0 *cloudhsm.ModifyLunaClientInput) (r0 *request.Request, r1 *cloudhsm.ModifyLunaClientOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyLunaClientRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudhsm.ModifyLunaClientOutput)
	return
}

func (d *CloudHSMDouble) ModifyLunaClientWithContext(i0 context.Context, i1 *cloudhsm.ModifyLunaClientInput, i2 ...request.Option) (r0 *cloudhsm.ModifyLunaClientOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyLunaClientWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudhsm.ModifyLunaClientOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) fakeModifyLunaClientWithContext(ctx context.Context, in *cloudhsm.ModifyLunaClientInput, _ ...request.Option) (*cloudhsm.ModifyLunaClientOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyLunaClient cancelled", ctx.Err())
	default:
		return d.ModifyLunaClient(in)
	}
}

func (d *CloudHSMDouble) RemoveTagsFromResource(i0 *cloudhsm.RemoveTagsFromResourceInput) (r0 *cloudhsm.RemoveTagsFromResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromResource", i0)
	r0, _ = returns[0].(*cloudhsm.RemoveTagsFromResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) RemoveTagsFromResourceRequest(i0 *cloudhsm.RemoveTagsFromResourceInput) (r0 *request.Request, r1 *cloudhsm.RemoveTagsFromResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudhsm.RemoveTagsFromResourceOutput)
	return
}

func (d *CloudHSMDouble) RemoveTagsFromResourceWithContext(i0 context.Context, i1 *cloudhsm.RemoveTagsFromResourceInput, i2 ...request.Option) (r0 *cloudhsm.RemoveTagsFromResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudhsm.RemoveTagsFromResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMDouble) fakeRemoveTagsFromResourceWithContext(ctx context.Context, in *cloudhsm.RemoveTagsFromResourceInput, _ ...request.Option) (*cloudhsm.RemoveTagsFromResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveTagsFromResource cancelled", ctx.Err())
	default:
		return d.RemoveTagsFromResource(in)
	}
}
