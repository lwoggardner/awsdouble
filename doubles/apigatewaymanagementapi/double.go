// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:11:08+11:00

// Package apigatewaymanagementapidouble provides a TestDouble implementation of apigatewaymanagementapiiface.ApiGatewayManagementApiAPI
package apigatewaymanagementapidouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/apigatewaymanagementapi"
	"github.com/aws/aws-sdk-go/service/apigatewaymanagementapi/apigatewaymanagementapiiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// ApiGatewayManagementApiDouble is TestDouble for apigatewaymanagementapiiface.ApiGatewayManagementApiAPI
type ApiGatewayManagementApiDouble struct {
	apigatewaymanagementapiiface.ApiGatewayManagementApiAPI
	*awsdouble.AWSTestDouble
}

// Constructor for ApiGatewayManagementApiDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *ApiGatewayManagementApiDouble {
	result := &ApiGatewayManagementApiDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*apigatewaymanagementapiiface.ApiGatewayManagementApiAPI)(nil), configurators...)
	return result
}

func (d *ApiGatewayManagementApiDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *ApiGatewayManagementApiDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "DeleteConnectionWithContext":
		return m.Fake(d.fakeDeleteConnectionWithContext)

	case "GetConnectionWithContext":
		return m.Fake(d.fakeGetConnectionWithContext)

	case "PostToConnectionWithContext":
		return m.Fake(d.fakePostToConnectionWithContext)

	default:
		return nil
	}
}

func (d *ApiGatewayManagementApiDouble) DeleteConnection(i0 *apigatewaymanagementapi.DeleteConnectionInput) (r0 *apigatewaymanagementapi.DeleteConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteConnection", i0)
	r0, _ = returns[0].(*apigatewaymanagementapi.DeleteConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayManagementApiDouble) DeleteConnectionRequest(i0 *apigatewaymanagementapi.DeleteConnectionInput) (r0 *request.Request, r1 *apigatewaymanagementapi.DeleteConnectionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteConnectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewaymanagementapi.DeleteConnectionOutput)
	return
}

func (d *ApiGatewayManagementApiDouble) DeleteConnectionWithContext(i0 context.Context, i1 *apigatewaymanagementapi.DeleteConnectionInput, i2 ...request.Option) (r0 *apigatewaymanagementapi.DeleteConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteConnectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewaymanagementapi.DeleteConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayManagementApiDouble) fakeDeleteConnectionWithContext(ctx context.Context, in *apigatewaymanagementapi.DeleteConnectionInput, _ ...request.Option) (*apigatewaymanagementapi.DeleteConnectionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteConnection cancelled", ctx.Err())
	default:
		return d.DeleteConnection(in)
	}
}

func (d *ApiGatewayManagementApiDouble) GetConnection(i0 *apigatewaymanagementapi.GetConnectionInput) (r0 *apigatewaymanagementapi.GetConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConnection", i0)
	r0, _ = returns[0].(*apigatewaymanagementapi.GetConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayManagementApiDouble) GetConnectionRequest(i0 *apigatewaymanagementapi.GetConnectionInput) (r0 *request.Request, r1 *apigatewaymanagementapi.GetConnectionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConnectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewaymanagementapi.GetConnectionOutput)
	return
}

func (d *ApiGatewayManagementApiDouble) GetConnectionWithContext(i0 context.Context, i1 *apigatewaymanagementapi.GetConnectionInput, i2 ...request.Option) (r0 *apigatewaymanagementapi.GetConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConnectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewaymanagementapi.GetConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayManagementApiDouble) fakeGetConnectionWithContext(ctx context.Context, in *apigatewaymanagementapi.GetConnectionInput, _ ...request.Option) (*apigatewaymanagementapi.GetConnectionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetConnection cancelled", ctx.Err())
	default:
		return d.GetConnection(in)
	}
}

func (d *ApiGatewayManagementApiDouble) PostToConnection(i0 *apigatewaymanagementapi.PostToConnectionInput) (r0 *apigatewaymanagementapi.PostToConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PostToConnection", i0)
	r0, _ = returns[0].(*apigatewaymanagementapi.PostToConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayManagementApiDouble) PostToConnectionRequest(i0 *apigatewaymanagementapi.PostToConnectionInput) (r0 *request.Request, r1 *apigatewaymanagementapi.PostToConnectionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PostToConnectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewaymanagementapi.PostToConnectionOutput)
	return
}

func (d *ApiGatewayManagementApiDouble) PostToConnectionWithContext(i0 context.Context, i1 *apigatewaymanagementapi.PostToConnectionInput, i2 ...request.Option) (r0 *apigatewaymanagementapi.PostToConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PostToConnectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewaymanagementapi.PostToConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayManagementApiDouble) fakePostToConnectionWithContext(ctx context.Context, in *apigatewaymanagementapi.PostToConnectionInput, _ ...request.Option) (*apigatewaymanagementapi.PostToConnectionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PostToConnection cancelled", ctx.Err())
	default:
		return d.PostToConnection(in)
	}
}
