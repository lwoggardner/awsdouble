// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:11:38+11:00

// Package cloudsearchdouble provides a TestDouble implementation of cloudsearchiface.CloudSearchAPI
package cloudsearchdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/cloudsearch"
	"github.com/aws/aws-sdk-go/service/cloudsearch/cloudsearchiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// CloudSearchDouble is TestDouble for cloudsearchiface.CloudSearchAPI
type CloudSearchDouble struct {
	cloudsearchiface.CloudSearchAPI
	*awsdouble.AWSTestDouble
}

// Constructor for CloudSearchDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *CloudSearchDouble {
	result := &CloudSearchDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*cloudsearchiface.CloudSearchAPI)(nil), configurators...)
	return result
}

func (d *CloudSearchDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *CloudSearchDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "BuildSuggestersWithContext":
		return m.Fake(d.fakeBuildSuggestersWithContext)

	case "CreateDomainWithContext":
		return m.Fake(d.fakeCreateDomainWithContext)

	case "DefineAnalysisSchemeWithContext":
		return m.Fake(d.fakeDefineAnalysisSchemeWithContext)

	case "DefineExpressionWithContext":
		return m.Fake(d.fakeDefineExpressionWithContext)

	case "DefineIndexFieldWithContext":
		return m.Fake(d.fakeDefineIndexFieldWithContext)

	case "DefineSuggesterWithContext":
		return m.Fake(d.fakeDefineSuggesterWithContext)

	case "DeleteAnalysisSchemeWithContext":
		return m.Fake(d.fakeDeleteAnalysisSchemeWithContext)

	case "DeleteDomainWithContext":
		return m.Fake(d.fakeDeleteDomainWithContext)

	case "DeleteExpressionWithContext":
		return m.Fake(d.fakeDeleteExpressionWithContext)

	case "DeleteIndexFieldWithContext":
		return m.Fake(d.fakeDeleteIndexFieldWithContext)

	case "DeleteSuggesterWithContext":
		return m.Fake(d.fakeDeleteSuggesterWithContext)

	case "DescribeAnalysisSchemesWithContext":
		return m.Fake(d.fakeDescribeAnalysisSchemesWithContext)

	case "DescribeAvailabilityOptionsWithContext":
		return m.Fake(d.fakeDescribeAvailabilityOptionsWithContext)

	case "DescribeDomainEndpointOptionsWithContext":
		return m.Fake(d.fakeDescribeDomainEndpointOptionsWithContext)

	case "DescribeDomainsWithContext":
		return m.Fake(d.fakeDescribeDomainsWithContext)

	case "DescribeExpressionsWithContext":
		return m.Fake(d.fakeDescribeExpressionsWithContext)

	case "DescribeIndexFieldsWithContext":
		return m.Fake(d.fakeDescribeIndexFieldsWithContext)

	case "DescribeScalingParametersWithContext":
		return m.Fake(d.fakeDescribeScalingParametersWithContext)

	case "DescribeServiceAccessPoliciesWithContext":
		return m.Fake(d.fakeDescribeServiceAccessPoliciesWithContext)

	case "DescribeSuggestersWithContext":
		return m.Fake(d.fakeDescribeSuggestersWithContext)

	case "IndexDocumentsWithContext":
		return m.Fake(d.fakeIndexDocumentsWithContext)

	case "ListDomainNamesWithContext":
		return m.Fake(d.fakeListDomainNamesWithContext)

	case "UpdateAvailabilityOptionsWithContext":
		return m.Fake(d.fakeUpdateAvailabilityOptionsWithContext)

	case "UpdateDomainEndpointOptionsWithContext":
		return m.Fake(d.fakeUpdateDomainEndpointOptionsWithContext)

	case "UpdateScalingParametersWithContext":
		return m.Fake(d.fakeUpdateScalingParametersWithContext)

	case "UpdateServiceAccessPoliciesWithContext":
		return m.Fake(d.fakeUpdateServiceAccessPoliciesWithContext)

	default:
		return nil
	}
}

func (d *CloudSearchDouble) BuildSuggesters(i0 *cloudsearch.BuildSuggestersInput) (r0 *cloudsearch.BuildSuggestersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BuildSuggesters", i0)
	r0, _ = returns[0].(*cloudsearch.BuildSuggestersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) BuildSuggestersRequest(i0 *cloudsearch.BuildSuggestersInput) (r0 *request.Request, r1 *cloudsearch.BuildSuggestersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BuildSuggestersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudsearch.BuildSuggestersOutput)
	return
}

func (d *CloudSearchDouble) BuildSuggestersWithContext(i0 context.Context, i1 *cloudsearch.BuildSuggestersInput, i2 ...request.Option) (r0 *cloudsearch.BuildSuggestersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BuildSuggestersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudsearch.BuildSuggestersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) fakeBuildSuggestersWithContext(ctx context.Context, in *cloudsearch.BuildSuggestersInput, _ ...request.Option) (*cloudsearch.BuildSuggestersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BuildSuggesters cancelled", ctx.Err())
	default:
		return d.BuildSuggesters(in)
	}
}

func (d *CloudSearchDouble) CreateDomain(i0 *cloudsearch.CreateDomainInput) (r0 *cloudsearch.CreateDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDomain", i0)
	r0, _ = returns[0].(*cloudsearch.CreateDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) CreateDomainRequest(i0 *cloudsearch.CreateDomainInput) (r0 *request.Request, r1 *cloudsearch.CreateDomainOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDomainRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudsearch.CreateDomainOutput)
	return
}

func (d *CloudSearchDouble) CreateDomainWithContext(i0 context.Context, i1 *cloudsearch.CreateDomainInput, i2 ...request.Option) (r0 *cloudsearch.CreateDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDomainWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudsearch.CreateDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) fakeCreateDomainWithContext(ctx context.Context, in *cloudsearch.CreateDomainInput, _ ...request.Option) (*cloudsearch.CreateDomainOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDomain cancelled", ctx.Err())
	default:
		return d.CreateDomain(in)
	}
}

func (d *CloudSearchDouble) DefineAnalysisScheme(i0 *cloudsearch.DefineAnalysisSchemeInput) (r0 *cloudsearch.DefineAnalysisSchemeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DefineAnalysisScheme", i0)
	r0, _ = returns[0].(*cloudsearch.DefineAnalysisSchemeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) DefineAnalysisSchemeRequest(i0 *cloudsearch.DefineAnalysisSchemeInput) (r0 *request.Request, r1 *cloudsearch.DefineAnalysisSchemeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DefineAnalysisSchemeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudsearch.DefineAnalysisSchemeOutput)
	return
}

func (d *CloudSearchDouble) DefineAnalysisSchemeWithContext(i0 context.Context, i1 *cloudsearch.DefineAnalysisSchemeInput, i2 ...request.Option) (r0 *cloudsearch.DefineAnalysisSchemeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DefineAnalysisSchemeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudsearch.DefineAnalysisSchemeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) fakeDefineAnalysisSchemeWithContext(ctx context.Context, in *cloudsearch.DefineAnalysisSchemeInput, _ ...request.Option) (*cloudsearch.DefineAnalysisSchemeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DefineAnalysisScheme cancelled", ctx.Err())
	default:
		return d.DefineAnalysisScheme(in)
	}
}

func (d *CloudSearchDouble) DefineExpression(i0 *cloudsearch.DefineExpressionInput) (r0 *cloudsearch.DefineExpressionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DefineExpression", i0)
	r0, _ = returns[0].(*cloudsearch.DefineExpressionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) DefineExpressionRequest(i0 *cloudsearch.DefineExpressionInput) (r0 *request.Request, r1 *cloudsearch.DefineExpressionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DefineExpressionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudsearch.DefineExpressionOutput)
	return
}

func (d *CloudSearchDouble) DefineExpressionWithContext(i0 context.Context, i1 *cloudsearch.DefineExpressionInput, i2 ...request.Option) (r0 *cloudsearch.DefineExpressionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DefineExpressionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudsearch.DefineExpressionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) fakeDefineExpressionWithContext(ctx context.Context, in *cloudsearch.DefineExpressionInput, _ ...request.Option) (*cloudsearch.DefineExpressionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DefineExpression cancelled", ctx.Err())
	default:
		return d.DefineExpression(in)
	}
}

func (d *CloudSearchDouble) DefineIndexField(i0 *cloudsearch.DefineIndexFieldInput) (r0 *cloudsearch.DefineIndexFieldOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DefineIndexField", i0)
	r0, _ = returns[0].(*cloudsearch.DefineIndexFieldOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) DefineIndexFieldRequest(i0 *cloudsearch.DefineIndexFieldInput) (r0 *request.Request, r1 *cloudsearch.DefineIndexFieldOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DefineIndexFieldRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudsearch.DefineIndexFieldOutput)
	return
}

func (d *CloudSearchDouble) DefineIndexFieldWithContext(i0 context.Context, i1 *cloudsearch.DefineIndexFieldInput, i2 ...request.Option) (r0 *cloudsearch.DefineIndexFieldOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DefineIndexFieldWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudsearch.DefineIndexFieldOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) fakeDefineIndexFieldWithContext(ctx context.Context, in *cloudsearch.DefineIndexFieldInput, _ ...request.Option) (*cloudsearch.DefineIndexFieldOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DefineIndexField cancelled", ctx.Err())
	default:
		return d.DefineIndexField(in)
	}
}

func (d *CloudSearchDouble) DefineSuggester(i0 *cloudsearch.DefineSuggesterInput) (r0 *cloudsearch.DefineSuggesterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DefineSuggester", i0)
	r0, _ = returns[0].(*cloudsearch.DefineSuggesterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) DefineSuggesterRequest(i0 *cloudsearch.DefineSuggesterInput) (r0 *request.Request, r1 *cloudsearch.DefineSuggesterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DefineSuggesterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudsearch.DefineSuggesterOutput)
	return
}

func (d *CloudSearchDouble) DefineSuggesterWithContext(i0 context.Context, i1 *cloudsearch.DefineSuggesterInput, i2 ...request.Option) (r0 *cloudsearch.DefineSuggesterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DefineSuggesterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudsearch.DefineSuggesterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) fakeDefineSuggesterWithContext(ctx context.Context, in *cloudsearch.DefineSuggesterInput, _ ...request.Option) (*cloudsearch.DefineSuggesterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DefineSuggester cancelled", ctx.Err())
	default:
		return d.DefineSuggester(in)
	}
}

func (d *CloudSearchDouble) DeleteAnalysisScheme(i0 *cloudsearch.DeleteAnalysisSchemeInput) (r0 *cloudsearch.DeleteAnalysisSchemeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAnalysisScheme", i0)
	r0, _ = returns[0].(*cloudsearch.DeleteAnalysisSchemeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) DeleteAnalysisSchemeRequest(i0 *cloudsearch.DeleteAnalysisSchemeInput) (r0 *request.Request, r1 *cloudsearch.DeleteAnalysisSchemeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAnalysisSchemeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudsearch.DeleteAnalysisSchemeOutput)
	return
}

func (d *CloudSearchDouble) DeleteAnalysisSchemeWithContext(i0 context.Context, i1 *cloudsearch.DeleteAnalysisSchemeInput, i2 ...request.Option) (r0 *cloudsearch.DeleteAnalysisSchemeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAnalysisSchemeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudsearch.DeleteAnalysisSchemeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) fakeDeleteAnalysisSchemeWithContext(ctx context.Context, in *cloudsearch.DeleteAnalysisSchemeInput, _ ...request.Option) (*cloudsearch.DeleteAnalysisSchemeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteAnalysisScheme cancelled", ctx.Err())
	default:
		return d.DeleteAnalysisScheme(in)
	}
}

func (d *CloudSearchDouble) DeleteDomain(i0 *cloudsearch.DeleteDomainInput) (r0 *cloudsearch.DeleteDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDomain", i0)
	r0, _ = returns[0].(*cloudsearch.DeleteDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) DeleteDomainRequest(i0 *cloudsearch.DeleteDomainInput) (r0 *request.Request, r1 *cloudsearch.DeleteDomainOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDomainRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudsearch.DeleteDomainOutput)
	return
}

func (d *CloudSearchDouble) DeleteDomainWithContext(i0 context.Context, i1 *cloudsearch.DeleteDomainInput, i2 ...request.Option) (r0 *cloudsearch.DeleteDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDomainWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudsearch.DeleteDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) fakeDeleteDomainWithContext(ctx context.Context, in *cloudsearch.DeleteDomainInput, _ ...request.Option) (*cloudsearch.DeleteDomainOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDomain cancelled", ctx.Err())
	default:
		return d.DeleteDomain(in)
	}
}

func (d *CloudSearchDouble) DeleteExpression(i0 *cloudsearch.DeleteExpressionInput) (r0 *cloudsearch.DeleteExpressionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteExpression", i0)
	r0, _ = returns[0].(*cloudsearch.DeleteExpressionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) DeleteExpressionRequest(i0 *cloudsearch.DeleteExpressionInput) (r0 *request.Request, r1 *cloudsearch.DeleteExpressionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteExpressionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudsearch.DeleteExpressionOutput)
	return
}

func (d *CloudSearchDouble) DeleteExpressionWithContext(i0 context.Context, i1 *cloudsearch.DeleteExpressionInput, i2 ...request.Option) (r0 *cloudsearch.DeleteExpressionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteExpressionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudsearch.DeleteExpressionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) fakeDeleteExpressionWithContext(ctx context.Context, in *cloudsearch.DeleteExpressionInput, _ ...request.Option) (*cloudsearch.DeleteExpressionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteExpression cancelled", ctx.Err())
	default:
		return d.DeleteExpression(in)
	}
}

func (d *CloudSearchDouble) DeleteIndexField(i0 *cloudsearch.DeleteIndexFieldInput) (r0 *cloudsearch.DeleteIndexFieldOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIndexField", i0)
	r0, _ = returns[0].(*cloudsearch.DeleteIndexFieldOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) DeleteIndexFieldRequest(i0 *cloudsearch.DeleteIndexFieldInput) (r0 *request.Request, r1 *cloudsearch.DeleteIndexFieldOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIndexFieldRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudsearch.DeleteIndexFieldOutput)
	return
}

func (d *CloudSearchDouble) DeleteIndexFieldWithContext(i0 context.Context, i1 *cloudsearch.DeleteIndexFieldInput, i2 ...request.Option) (r0 *cloudsearch.DeleteIndexFieldOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIndexFieldWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudsearch.DeleteIndexFieldOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) fakeDeleteIndexFieldWithContext(ctx context.Context, in *cloudsearch.DeleteIndexFieldInput, _ ...request.Option) (*cloudsearch.DeleteIndexFieldOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteIndexField cancelled", ctx.Err())
	default:
		return d.DeleteIndexField(in)
	}
}

func (d *CloudSearchDouble) DeleteSuggester(i0 *cloudsearch.DeleteSuggesterInput) (r0 *cloudsearch.DeleteSuggesterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSuggester", i0)
	r0, _ = returns[0].(*cloudsearch.DeleteSuggesterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) DeleteSuggesterRequest(i0 *cloudsearch.DeleteSuggesterInput) (r0 *request.Request, r1 *cloudsearch.DeleteSuggesterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSuggesterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudsearch.DeleteSuggesterOutput)
	return
}

func (d *CloudSearchDouble) DeleteSuggesterWithContext(i0 context.Context, i1 *cloudsearch.DeleteSuggesterInput, i2 ...request.Option) (r0 *cloudsearch.DeleteSuggesterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSuggesterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudsearch.DeleteSuggesterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) fakeDeleteSuggesterWithContext(ctx context.Context, in *cloudsearch.DeleteSuggesterInput, _ ...request.Option) (*cloudsearch.DeleteSuggesterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteSuggester cancelled", ctx.Err())
	default:
		return d.DeleteSuggester(in)
	}
}

func (d *CloudSearchDouble) DescribeAnalysisSchemes(i0 *cloudsearch.DescribeAnalysisSchemesInput) (r0 *cloudsearch.DescribeAnalysisSchemesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAnalysisSchemes", i0)
	r0, _ = returns[0].(*cloudsearch.DescribeAnalysisSchemesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) DescribeAnalysisSchemesRequest(i0 *cloudsearch.DescribeAnalysisSchemesInput) (r0 *request.Request, r1 *cloudsearch.DescribeAnalysisSchemesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAnalysisSchemesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudsearch.DescribeAnalysisSchemesOutput)
	return
}

func (d *CloudSearchDouble) DescribeAnalysisSchemesWithContext(i0 context.Context, i1 *cloudsearch.DescribeAnalysisSchemesInput, i2 ...request.Option) (r0 *cloudsearch.DescribeAnalysisSchemesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAnalysisSchemesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudsearch.DescribeAnalysisSchemesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) fakeDescribeAnalysisSchemesWithContext(ctx context.Context, in *cloudsearch.DescribeAnalysisSchemesInput, _ ...request.Option) (*cloudsearch.DescribeAnalysisSchemesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAnalysisSchemes cancelled", ctx.Err())
	default:
		return d.DescribeAnalysisSchemes(in)
	}
}

func (d *CloudSearchDouble) DescribeAvailabilityOptions(i0 *cloudsearch.DescribeAvailabilityOptionsInput) (r0 *cloudsearch.DescribeAvailabilityOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAvailabilityOptions", i0)
	r0, _ = returns[0].(*cloudsearch.DescribeAvailabilityOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) DescribeAvailabilityOptionsRequest(i0 *cloudsearch.DescribeAvailabilityOptionsInput) (r0 *request.Request, r1 *cloudsearch.DescribeAvailabilityOptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAvailabilityOptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudsearch.DescribeAvailabilityOptionsOutput)
	return
}

func (d *CloudSearchDouble) DescribeAvailabilityOptionsWithContext(i0 context.Context, i1 *cloudsearch.DescribeAvailabilityOptionsInput, i2 ...request.Option) (r0 *cloudsearch.DescribeAvailabilityOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAvailabilityOptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudsearch.DescribeAvailabilityOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) fakeDescribeAvailabilityOptionsWithContext(ctx context.Context, in *cloudsearch.DescribeAvailabilityOptionsInput, _ ...request.Option) (*cloudsearch.DescribeAvailabilityOptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAvailabilityOptions cancelled", ctx.Err())
	default:
		return d.DescribeAvailabilityOptions(in)
	}
}

func (d *CloudSearchDouble) DescribeDomainEndpointOptions(i0 *cloudsearch.DescribeDomainEndpointOptionsInput) (r0 *cloudsearch.DescribeDomainEndpointOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDomainEndpointOptions", i0)
	r0, _ = returns[0].(*cloudsearch.DescribeDomainEndpointOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) DescribeDomainEndpointOptionsRequest(i0 *cloudsearch.DescribeDomainEndpointOptionsInput) (r0 *request.Request, r1 *cloudsearch.DescribeDomainEndpointOptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDomainEndpointOptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudsearch.DescribeDomainEndpointOptionsOutput)
	return
}

func (d *CloudSearchDouble) DescribeDomainEndpointOptionsWithContext(i0 context.Context, i1 *cloudsearch.DescribeDomainEndpointOptionsInput, i2 ...request.Option) (r0 *cloudsearch.DescribeDomainEndpointOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDomainEndpointOptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudsearch.DescribeDomainEndpointOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) fakeDescribeDomainEndpointOptionsWithContext(ctx context.Context, in *cloudsearch.DescribeDomainEndpointOptionsInput, _ ...request.Option) (*cloudsearch.DescribeDomainEndpointOptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDomainEndpointOptions cancelled", ctx.Err())
	default:
		return d.DescribeDomainEndpointOptions(in)
	}
}

func (d *CloudSearchDouble) DescribeDomains(i0 *cloudsearch.DescribeDomainsInput) (r0 *cloudsearch.DescribeDomainsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDomains", i0)
	r0, _ = returns[0].(*cloudsearch.DescribeDomainsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) DescribeDomainsRequest(i0 *cloudsearch.DescribeDomainsInput) (r0 *request.Request, r1 *cloudsearch.DescribeDomainsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDomainsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudsearch.DescribeDomainsOutput)
	return
}

func (d *CloudSearchDouble) DescribeDomainsWithContext(i0 context.Context, i1 *cloudsearch.DescribeDomainsInput, i2 ...request.Option) (r0 *cloudsearch.DescribeDomainsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDomainsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudsearch.DescribeDomainsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) fakeDescribeDomainsWithContext(ctx context.Context, in *cloudsearch.DescribeDomainsInput, _ ...request.Option) (*cloudsearch.DescribeDomainsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDomains cancelled", ctx.Err())
	default:
		return d.DescribeDomains(in)
	}
}

func (d *CloudSearchDouble) DescribeExpressions(i0 *cloudsearch.DescribeExpressionsInput) (r0 *cloudsearch.DescribeExpressionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeExpressions", i0)
	r0, _ = returns[0].(*cloudsearch.DescribeExpressionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) DescribeExpressionsRequest(i0 *cloudsearch.DescribeExpressionsInput) (r0 *request.Request, r1 *cloudsearch.DescribeExpressionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeExpressionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudsearch.DescribeExpressionsOutput)
	return
}

func (d *CloudSearchDouble) DescribeExpressionsWithContext(i0 context.Context, i1 *cloudsearch.DescribeExpressionsInput, i2 ...request.Option) (r0 *cloudsearch.DescribeExpressionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeExpressionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudsearch.DescribeExpressionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) fakeDescribeExpressionsWithContext(ctx context.Context, in *cloudsearch.DescribeExpressionsInput, _ ...request.Option) (*cloudsearch.DescribeExpressionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeExpressions cancelled", ctx.Err())
	default:
		return d.DescribeExpressions(in)
	}
}

func (d *CloudSearchDouble) DescribeIndexFields(i0 *cloudsearch.DescribeIndexFieldsInput) (r0 *cloudsearch.DescribeIndexFieldsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIndexFields", i0)
	r0, _ = returns[0].(*cloudsearch.DescribeIndexFieldsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) DescribeIndexFieldsRequest(i0 *cloudsearch.DescribeIndexFieldsInput) (r0 *request.Request, r1 *cloudsearch.DescribeIndexFieldsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIndexFieldsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudsearch.DescribeIndexFieldsOutput)
	return
}

func (d *CloudSearchDouble) DescribeIndexFieldsWithContext(i0 context.Context, i1 *cloudsearch.DescribeIndexFieldsInput, i2 ...request.Option) (r0 *cloudsearch.DescribeIndexFieldsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIndexFieldsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudsearch.DescribeIndexFieldsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) fakeDescribeIndexFieldsWithContext(ctx context.Context, in *cloudsearch.DescribeIndexFieldsInput, _ ...request.Option) (*cloudsearch.DescribeIndexFieldsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeIndexFields cancelled", ctx.Err())
	default:
		return d.DescribeIndexFields(in)
	}
}

func (d *CloudSearchDouble) DescribeScalingParameters(i0 *cloudsearch.DescribeScalingParametersInput) (r0 *cloudsearch.DescribeScalingParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScalingParameters", i0)
	r0, _ = returns[0].(*cloudsearch.DescribeScalingParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) DescribeScalingParametersRequest(i0 *cloudsearch.DescribeScalingParametersInput) (r0 *request.Request, r1 *cloudsearch.DescribeScalingParametersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScalingParametersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudsearch.DescribeScalingParametersOutput)
	return
}

func (d *CloudSearchDouble) DescribeScalingParametersWithContext(i0 context.Context, i1 *cloudsearch.DescribeScalingParametersInput, i2 ...request.Option) (r0 *cloudsearch.DescribeScalingParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScalingParametersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudsearch.DescribeScalingParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) fakeDescribeScalingParametersWithContext(ctx context.Context, in *cloudsearch.DescribeScalingParametersInput, _ ...request.Option) (*cloudsearch.DescribeScalingParametersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeScalingParameters cancelled", ctx.Err())
	default:
		return d.DescribeScalingParameters(in)
	}
}

func (d *CloudSearchDouble) DescribeServiceAccessPolicies(i0 *cloudsearch.DescribeServiceAccessPoliciesInput) (r0 *cloudsearch.DescribeServiceAccessPoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeServiceAccessPolicies", i0)
	r0, _ = returns[0].(*cloudsearch.DescribeServiceAccessPoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) DescribeServiceAccessPoliciesRequest(i0 *cloudsearch.DescribeServiceAccessPoliciesInput) (r0 *request.Request, r1 *cloudsearch.DescribeServiceAccessPoliciesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeServiceAccessPoliciesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudsearch.DescribeServiceAccessPoliciesOutput)
	return
}

func (d *CloudSearchDouble) DescribeServiceAccessPoliciesWithContext(i0 context.Context, i1 *cloudsearch.DescribeServiceAccessPoliciesInput, i2 ...request.Option) (r0 *cloudsearch.DescribeServiceAccessPoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeServiceAccessPoliciesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudsearch.DescribeServiceAccessPoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) fakeDescribeServiceAccessPoliciesWithContext(ctx context.Context, in *cloudsearch.DescribeServiceAccessPoliciesInput, _ ...request.Option) (*cloudsearch.DescribeServiceAccessPoliciesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeServiceAccessPolicies cancelled", ctx.Err())
	default:
		return d.DescribeServiceAccessPolicies(in)
	}
}

func (d *CloudSearchDouble) DescribeSuggesters(i0 *cloudsearch.DescribeSuggestersInput) (r0 *cloudsearch.DescribeSuggestersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSuggesters", i0)
	r0, _ = returns[0].(*cloudsearch.DescribeSuggestersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) DescribeSuggestersRequest(i0 *cloudsearch.DescribeSuggestersInput) (r0 *request.Request, r1 *cloudsearch.DescribeSuggestersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSuggestersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudsearch.DescribeSuggestersOutput)
	return
}

func (d *CloudSearchDouble) DescribeSuggestersWithContext(i0 context.Context, i1 *cloudsearch.DescribeSuggestersInput, i2 ...request.Option) (r0 *cloudsearch.DescribeSuggestersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSuggestersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudsearch.DescribeSuggestersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) fakeDescribeSuggestersWithContext(ctx context.Context, in *cloudsearch.DescribeSuggestersInput, _ ...request.Option) (*cloudsearch.DescribeSuggestersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSuggesters cancelled", ctx.Err())
	default:
		return d.DescribeSuggesters(in)
	}
}

func (d *CloudSearchDouble) IndexDocuments(i0 *cloudsearch.IndexDocumentsInput) (r0 *cloudsearch.IndexDocumentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("IndexDocuments", i0)
	r0, _ = returns[0].(*cloudsearch.IndexDocumentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) IndexDocumentsRequest(i0 *cloudsearch.IndexDocumentsInput) (r0 *request.Request, r1 *cloudsearch.IndexDocumentsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("IndexDocumentsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudsearch.IndexDocumentsOutput)
	return
}

func (d *CloudSearchDouble) IndexDocumentsWithContext(i0 context.Context, i1 *cloudsearch.IndexDocumentsInput, i2 ...request.Option) (r0 *cloudsearch.IndexDocumentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("IndexDocumentsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudsearch.IndexDocumentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) fakeIndexDocumentsWithContext(ctx context.Context, in *cloudsearch.IndexDocumentsInput, _ ...request.Option) (*cloudsearch.IndexDocumentsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "IndexDocuments cancelled", ctx.Err())
	default:
		return d.IndexDocuments(in)
	}
}

func (d *CloudSearchDouble) ListDomainNames(i0 *cloudsearch.ListDomainNamesInput) (r0 *cloudsearch.ListDomainNamesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDomainNames", i0)
	r0, _ = returns[0].(*cloudsearch.ListDomainNamesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) ListDomainNamesRequest(i0 *cloudsearch.ListDomainNamesInput) (r0 *request.Request, r1 *cloudsearch.ListDomainNamesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDomainNamesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudsearch.ListDomainNamesOutput)
	return
}

func (d *CloudSearchDouble) ListDomainNamesWithContext(i0 context.Context, i1 *cloudsearch.ListDomainNamesInput, i2 ...request.Option) (r0 *cloudsearch.ListDomainNamesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDomainNamesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudsearch.ListDomainNamesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) fakeListDomainNamesWithContext(ctx context.Context, in *cloudsearch.ListDomainNamesInput, _ ...request.Option) (*cloudsearch.ListDomainNamesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDomainNames cancelled", ctx.Err())
	default:
		return d.ListDomainNames(in)
	}
}

func (d *CloudSearchDouble) UpdateAvailabilityOptions(i0 *cloudsearch.UpdateAvailabilityOptionsInput) (r0 *cloudsearch.UpdateAvailabilityOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAvailabilityOptions", i0)
	r0, _ = returns[0].(*cloudsearch.UpdateAvailabilityOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) UpdateAvailabilityOptionsRequest(i0 *cloudsearch.UpdateAvailabilityOptionsInput) (r0 *request.Request, r1 *cloudsearch.UpdateAvailabilityOptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAvailabilityOptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudsearch.UpdateAvailabilityOptionsOutput)
	return
}

func (d *CloudSearchDouble) UpdateAvailabilityOptionsWithContext(i0 context.Context, i1 *cloudsearch.UpdateAvailabilityOptionsInput, i2 ...request.Option) (r0 *cloudsearch.UpdateAvailabilityOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAvailabilityOptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudsearch.UpdateAvailabilityOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) fakeUpdateAvailabilityOptionsWithContext(ctx context.Context, in *cloudsearch.UpdateAvailabilityOptionsInput, _ ...request.Option) (*cloudsearch.UpdateAvailabilityOptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateAvailabilityOptions cancelled", ctx.Err())
	default:
		return d.UpdateAvailabilityOptions(in)
	}
}

func (d *CloudSearchDouble) UpdateDomainEndpointOptions(i0 *cloudsearch.UpdateDomainEndpointOptionsInput) (r0 *cloudsearch.UpdateDomainEndpointOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDomainEndpointOptions", i0)
	r0, _ = returns[0].(*cloudsearch.UpdateDomainEndpointOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) UpdateDomainEndpointOptionsRequest(i0 *cloudsearch.UpdateDomainEndpointOptionsInput) (r0 *request.Request, r1 *cloudsearch.UpdateDomainEndpointOptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDomainEndpointOptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudsearch.UpdateDomainEndpointOptionsOutput)
	return
}

func (d *CloudSearchDouble) UpdateDomainEndpointOptionsWithContext(i0 context.Context, i1 *cloudsearch.UpdateDomainEndpointOptionsInput, i2 ...request.Option) (r0 *cloudsearch.UpdateDomainEndpointOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDomainEndpointOptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudsearch.UpdateDomainEndpointOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) fakeUpdateDomainEndpointOptionsWithContext(ctx context.Context, in *cloudsearch.UpdateDomainEndpointOptionsInput, _ ...request.Option) (*cloudsearch.UpdateDomainEndpointOptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDomainEndpointOptions cancelled", ctx.Err())
	default:
		return d.UpdateDomainEndpointOptions(in)
	}
}

func (d *CloudSearchDouble) UpdateScalingParameters(i0 *cloudsearch.UpdateScalingParametersInput) (r0 *cloudsearch.UpdateScalingParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateScalingParameters", i0)
	r0, _ = returns[0].(*cloudsearch.UpdateScalingParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) UpdateScalingParametersRequest(i0 *cloudsearch.UpdateScalingParametersInput) (r0 *request.Request, r1 *cloudsearch.UpdateScalingParametersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateScalingParametersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudsearch.UpdateScalingParametersOutput)
	return
}

func (d *CloudSearchDouble) UpdateScalingParametersWithContext(i0 context.Context, i1 *cloudsearch.UpdateScalingParametersInput, i2 ...request.Option) (r0 *cloudsearch.UpdateScalingParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateScalingParametersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudsearch.UpdateScalingParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) fakeUpdateScalingParametersWithContext(ctx context.Context, in *cloudsearch.UpdateScalingParametersInput, _ ...request.Option) (*cloudsearch.UpdateScalingParametersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateScalingParameters cancelled", ctx.Err())
	default:
		return d.UpdateScalingParameters(in)
	}
}

func (d *CloudSearchDouble) UpdateServiceAccessPolicies(i0 *cloudsearch.UpdateServiceAccessPoliciesInput) (r0 *cloudsearch.UpdateServiceAccessPoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateServiceAccessPolicies", i0)
	r0, _ = returns[0].(*cloudsearch.UpdateServiceAccessPoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) UpdateServiceAccessPoliciesRequest(i0 *cloudsearch.UpdateServiceAccessPoliciesInput) (r0 *request.Request, r1 *cloudsearch.UpdateServiceAccessPoliciesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateServiceAccessPoliciesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudsearch.UpdateServiceAccessPoliciesOutput)
	return
}

func (d *CloudSearchDouble) UpdateServiceAccessPoliciesWithContext(i0 context.Context, i1 *cloudsearch.UpdateServiceAccessPoliciesInput, i2 ...request.Option) (r0 *cloudsearch.UpdateServiceAccessPoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateServiceAccessPoliciesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudsearch.UpdateServiceAccessPoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDouble) fakeUpdateServiceAccessPoliciesWithContext(ctx context.Context, in *cloudsearch.UpdateServiceAccessPoliciesInput, _ ...request.Option) (*cloudsearch.UpdateServiceAccessPoliciesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateServiceAccessPolicies cancelled", ctx.Err())
	default:
		return d.UpdateServiceAccessPolicies(in)
	}
}
