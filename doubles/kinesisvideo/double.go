// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:13:29+11:00

// Package kinesisvideodouble provides a TestDouble implementation of kinesisvideoiface.KinesisVideoAPI
package kinesisvideodouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/kinesisvideo"
	"github.com/aws/aws-sdk-go/service/kinesisvideo/kinesisvideoiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// KinesisVideoDouble is TestDouble for kinesisvideoiface.KinesisVideoAPI
type KinesisVideoDouble struct {
	kinesisvideoiface.KinesisVideoAPI
	*awsdouble.AWSTestDouble
}

// Constructor for KinesisVideoDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *KinesisVideoDouble {
	result := &KinesisVideoDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*kinesisvideoiface.KinesisVideoAPI)(nil), configurators...)
	return result
}

func (d *KinesisVideoDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *KinesisVideoDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CreateSignalingChannelWithContext":
		return m.Fake(d.fakeCreateSignalingChannelWithContext)

	case "CreateStreamWithContext":
		return m.Fake(d.fakeCreateStreamWithContext)

	case "DeleteSignalingChannelWithContext":
		return m.Fake(d.fakeDeleteSignalingChannelWithContext)

	case "DeleteStreamWithContext":
		return m.Fake(d.fakeDeleteStreamWithContext)

	case "DescribeSignalingChannelWithContext":
		return m.Fake(d.fakeDescribeSignalingChannelWithContext)

	case "DescribeStreamWithContext":
		return m.Fake(d.fakeDescribeStreamWithContext)

	case "GetDataEndpointWithContext":
		return m.Fake(d.fakeGetDataEndpointWithContext)

	case "GetSignalingChannelEndpointWithContext":
		return m.Fake(d.fakeGetSignalingChannelEndpointWithContext)

	case "ListSignalingChannelsPages":
		return m.Fake(d.fakeListSignalingChannelsPages)

	case "ListSignalingChannelsPagesWithContext":
		return m.Fake(d.fakeListSignalingChannelsPagesWithContext)

	case "ListSignalingChannelsWithContext":
		return m.Fake(d.fakeListSignalingChannelsWithContext)

	case "ListStreamsPages":
		return m.Fake(d.fakeListStreamsPages)

	case "ListStreamsPagesWithContext":
		return m.Fake(d.fakeListStreamsPagesWithContext)

	case "ListStreamsWithContext":
		return m.Fake(d.fakeListStreamsWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "ListTagsForStreamWithContext":
		return m.Fake(d.fakeListTagsForStreamWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "TagStreamWithContext":
		return m.Fake(d.fakeTagStreamWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UntagStreamWithContext":
		return m.Fake(d.fakeUntagStreamWithContext)

	case "UpdateDataRetentionWithContext":
		return m.Fake(d.fakeUpdateDataRetentionWithContext)

	case "UpdateSignalingChannelWithContext":
		return m.Fake(d.fakeUpdateSignalingChannelWithContext)

	case "UpdateStreamWithContext":
		return m.Fake(d.fakeUpdateStreamWithContext)

	default:
		return nil
	}
}

func (d *KinesisVideoDouble) CreateSignalingChannel(i0 *kinesisvideo.CreateSignalingChannelInput) (r0 *kinesisvideo.CreateSignalingChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSignalingChannel", i0)
	r0, _ = returns[0].(*kinesisvideo.CreateSignalingChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) CreateSignalingChannelRequest(i0 *kinesisvideo.CreateSignalingChannelInput) (r0 *request.Request, r1 *kinesisvideo.CreateSignalingChannelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSignalingChannelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisvideo.CreateSignalingChannelOutput)
	return
}

func (d *KinesisVideoDouble) CreateSignalingChannelWithContext(i0 context.Context, i1 *kinesisvideo.CreateSignalingChannelInput, i2 ...request.Option) (r0 *kinesisvideo.CreateSignalingChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSignalingChannelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisvideo.CreateSignalingChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) fakeCreateSignalingChannelWithContext(ctx context.Context, in *kinesisvideo.CreateSignalingChannelInput, _ ...request.Option) (*kinesisvideo.CreateSignalingChannelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateSignalingChannel cancelled", ctx.Err())
	default:
		return d.CreateSignalingChannel(in)
	}
}

func (d *KinesisVideoDouble) CreateStream(i0 *kinesisvideo.CreateStreamInput) (r0 *kinesisvideo.CreateStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStream", i0)
	r0, _ = returns[0].(*kinesisvideo.CreateStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) CreateStreamRequest(i0 *kinesisvideo.CreateStreamInput) (r0 *request.Request, r1 *kinesisvideo.CreateStreamOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStreamRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisvideo.CreateStreamOutput)
	return
}

func (d *KinesisVideoDouble) CreateStreamWithContext(i0 context.Context, i1 *kinesisvideo.CreateStreamInput, i2 ...request.Option) (r0 *kinesisvideo.CreateStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStreamWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisvideo.CreateStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) fakeCreateStreamWithContext(ctx context.Context, in *kinesisvideo.CreateStreamInput, _ ...request.Option) (*kinesisvideo.CreateStreamOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateStream cancelled", ctx.Err())
	default:
		return d.CreateStream(in)
	}
}

func (d *KinesisVideoDouble) DeleteSignalingChannel(i0 *kinesisvideo.DeleteSignalingChannelInput) (r0 *kinesisvideo.DeleteSignalingChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSignalingChannel", i0)
	r0, _ = returns[0].(*kinesisvideo.DeleteSignalingChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) DeleteSignalingChannelRequest(i0 *kinesisvideo.DeleteSignalingChannelInput) (r0 *request.Request, r1 *kinesisvideo.DeleteSignalingChannelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSignalingChannelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisvideo.DeleteSignalingChannelOutput)
	return
}

func (d *KinesisVideoDouble) DeleteSignalingChannelWithContext(i0 context.Context, i1 *kinesisvideo.DeleteSignalingChannelInput, i2 ...request.Option) (r0 *kinesisvideo.DeleteSignalingChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSignalingChannelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisvideo.DeleteSignalingChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) fakeDeleteSignalingChannelWithContext(ctx context.Context, in *kinesisvideo.DeleteSignalingChannelInput, _ ...request.Option) (*kinesisvideo.DeleteSignalingChannelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteSignalingChannel cancelled", ctx.Err())
	default:
		return d.DeleteSignalingChannel(in)
	}
}

func (d *KinesisVideoDouble) DeleteStream(i0 *kinesisvideo.DeleteStreamInput) (r0 *kinesisvideo.DeleteStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteStream", i0)
	r0, _ = returns[0].(*kinesisvideo.DeleteStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) DeleteStreamRequest(i0 *kinesisvideo.DeleteStreamInput) (r0 *request.Request, r1 *kinesisvideo.DeleteStreamOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteStreamRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisvideo.DeleteStreamOutput)
	return
}

func (d *KinesisVideoDouble) DeleteStreamWithContext(i0 context.Context, i1 *kinesisvideo.DeleteStreamInput, i2 ...request.Option) (r0 *kinesisvideo.DeleteStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteStreamWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisvideo.DeleteStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) fakeDeleteStreamWithContext(ctx context.Context, in *kinesisvideo.DeleteStreamInput, _ ...request.Option) (*kinesisvideo.DeleteStreamOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteStream cancelled", ctx.Err())
	default:
		return d.DeleteStream(in)
	}
}

func (d *KinesisVideoDouble) DescribeSignalingChannel(i0 *kinesisvideo.DescribeSignalingChannelInput) (r0 *kinesisvideo.DescribeSignalingChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSignalingChannel", i0)
	r0, _ = returns[0].(*kinesisvideo.DescribeSignalingChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) DescribeSignalingChannelRequest(i0 *kinesisvideo.DescribeSignalingChannelInput) (r0 *request.Request, r1 *kinesisvideo.DescribeSignalingChannelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSignalingChannelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisvideo.DescribeSignalingChannelOutput)
	return
}

func (d *KinesisVideoDouble) DescribeSignalingChannelWithContext(i0 context.Context, i1 *kinesisvideo.DescribeSignalingChannelInput, i2 ...request.Option) (r0 *kinesisvideo.DescribeSignalingChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSignalingChannelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisvideo.DescribeSignalingChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) fakeDescribeSignalingChannelWithContext(ctx context.Context, in *kinesisvideo.DescribeSignalingChannelInput, _ ...request.Option) (*kinesisvideo.DescribeSignalingChannelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSignalingChannel cancelled", ctx.Err())
	default:
		return d.DescribeSignalingChannel(in)
	}
}

func (d *KinesisVideoDouble) DescribeStream(i0 *kinesisvideo.DescribeStreamInput) (r0 *kinesisvideo.DescribeStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStream", i0)
	r0, _ = returns[0].(*kinesisvideo.DescribeStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) DescribeStreamRequest(i0 *kinesisvideo.DescribeStreamInput) (r0 *request.Request, r1 *kinesisvideo.DescribeStreamOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStreamRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisvideo.DescribeStreamOutput)
	return
}

func (d *KinesisVideoDouble) DescribeStreamWithContext(i0 context.Context, i1 *kinesisvideo.DescribeStreamInput, i2 ...request.Option) (r0 *kinesisvideo.DescribeStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStreamWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisvideo.DescribeStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) fakeDescribeStreamWithContext(ctx context.Context, in *kinesisvideo.DescribeStreamInput, _ ...request.Option) (*kinesisvideo.DescribeStreamOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeStream cancelled", ctx.Err())
	default:
		return d.DescribeStream(in)
	}
}

func (d *KinesisVideoDouble) GetDataEndpoint(i0 *kinesisvideo.GetDataEndpointInput) (r0 *kinesisvideo.GetDataEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDataEndpoint", i0)
	r0, _ = returns[0].(*kinesisvideo.GetDataEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) GetDataEndpointRequest(i0 *kinesisvideo.GetDataEndpointInput) (r0 *request.Request, r1 *kinesisvideo.GetDataEndpointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDataEndpointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisvideo.GetDataEndpointOutput)
	return
}

func (d *KinesisVideoDouble) GetDataEndpointWithContext(i0 context.Context, i1 *kinesisvideo.GetDataEndpointInput, i2 ...request.Option) (r0 *kinesisvideo.GetDataEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDataEndpointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisvideo.GetDataEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) fakeGetDataEndpointWithContext(ctx context.Context, in *kinesisvideo.GetDataEndpointInput, _ ...request.Option) (*kinesisvideo.GetDataEndpointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDataEndpoint cancelled", ctx.Err())
	default:
		return d.GetDataEndpoint(in)
	}
}

func (d *KinesisVideoDouble) GetSignalingChannelEndpoint(i0 *kinesisvideo.GetSignalingChannelEndpointInput) (r0 *kinesisvideo.GetSignalingChannelEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSignalingChannelEndpoint", i0)
	r0, _ = returns[0].(*kinesisvideo.GetSignalingChannelEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) GetSignalingChannelEndpointRequest(i0 *kinesisvideo.GetSignalingChannelEndpointInput) (r0 *request.Request, r1 *kinesisvideo.GetSignalingChannelEndpointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSignalingChannelEndpointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisvideo.GetSignalingChannelEndpointOutput)
	return
}

func (d *KinesisVideoDouble) GetSignalingChannelEndpointWithContext(i0 context.Context, i1 *kinesisvideo.GetSignalingChannelEndpointInput, i2 ...request.Option) (r0 *kinesisvideo.GetSignalingChannelEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSignalingChannelEndpointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisvideo.GetSignalingChannelEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) fakeGetSignalingChannelEndpointWithContext(ctx context.Context, in *kinesisvideo.GetSignalingChannelEndpointInput, _ ...request.Option) (*kinesisvideo.GetSignalingChannelEndpointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetSignalingChannelEndpoint cancelled", ctx.Err())
	default:
		return d.GetSignalingChannelEndpoint(in)
	}
}

func (d *KinesisVideoDouble) ListSignalingChannels(i0 *kinesisvideo.ListSignalingChannelsInput) (r0 *kinesisvideo.ListSignalingChannelsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSignalingChannels", i0)
	r0, _ = returns[0].(*kinesisvideo.ListSignalingChannelsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) ListSignalingChannelsPages(i0 *kinesisvideo.ListSignalingChannelsInput, i1 func(*kinesisvideo.ListSignalingChannelsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSignalingChannelsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *KinesisVideoDouble) fakeListSignalingChannelsPages(in *kinesisvideo.ListSignalingChannelsInput, pager func(*kinesisvideo.ListSignalingChannelsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListSignalingChannels", paginators, in, pager)
}

func (d *KinesisVideoDouble) ListSignalingChannelsPagesWithContext(i0 context.Context, i1 *kinesisvideo.ListSignalingChannelsInput, i2 func(*kinesisvideo.ListSignalingChannelsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSignalingChannelsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *KinesisVideoDouble) fakeListSignalingChannelsPagesWithContext(ctx context.Context, in *kinesisvideo.ListSignalingChannelsInput, pager func(*kinesisvideo.ListSignalingChannelsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListSignalingChannels", paginators, ctx, in, pager, options...)
}

func (d *KinesisVideoDouble) ListSignalingChannelsRequest(i0 *kinesisvideo.ListSignalingChannelsInput) (r0 *request.Request, r1 *kinesisvideo.ListSignalingChannelsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSignalingChannelsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisvideo.ListSignalingChannelsOutput)
	return
}

func (d *KinesisVideoDouble) ListSignalingChannelsWithContext(i0 context.Context, i1 *kinesisvideo.ListSignalingChannelsInput, i2 ...request.Option) (r0 *kinesisvideo.ListSignalingChannelsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSignalingChannelsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisvideo.ListSignalingChannelsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) fakeListSignalingChannelsWithContext(ctx context.Context, in *kinesisvideo.ListSignalingChannelsInput, _ ...request.Option) (*kinesisvideo.ListSignalingChannelsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListSignalingChannels cancelled", ctx.Err())
	default:
		return d.ListSignalingChannels(in)
	}
}

func (d *KinesisVideoDouble) ListStreams(i0 *kinesisvideo.ListStreamsInput) (r0 *kinesisvideo.ListStreamsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStreams", i0)
	r0, _ = returns[0].(*kinesisvideo.ListStreamsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) ListStreamsPages(i0 *kinesisvideo.ListStreamsInput, i1 func(*kinesisvideo.ListStreamsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStreamsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *KinesisVideoDouble) fakeListStreamsPages(in *kinesisvideo.ListStreamsInput, pager func(*kinesisvideo.ListStreamsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListStreams", paginators, in, pager)
}

func (d *KinesisVideoDouble) ListStreamsPagesWithContext(i0 context.Context, i1 *kinesisvideo.ListStreamsInput, i2 func(*kinesisvideo.ListStreamsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStreamsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *KinesisVideoDouble) fakeListStreamsPagesWithContext(ctx context.Context, in *kinesisvideo.ListStreamsInput, pager func(*kinesisvideo.ListStreamsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListStreams", paginators, ctx, in, pager, options...)
}

func (d *KinesisVideoDouble) ListStreamsRequest(i0 *kinesisvideo.ListStreamsInput) (r0 *request.Request, r1 *kinesisvideo.ListStreamsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStreamsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisvideo.ListStreamsOutput)
	return
}

func (d *KinesisVideoDouble) ListStreamsWithContext(i0 context.Context, i1 *kinesisvideo.ListStreamsInput, i2 ...request.Option) (r0 *kinesisvideo.ListStreamsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStreamsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisvideo.ListStreamsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) fakeListStreamsWithContext(ctx context.Context, in *kinesisvideo.ListStreamsInput, _ ...request.Option) (*kinesisvideo.ListStreamsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListStreams cancelled", ctx.Err())
	default:
		return d.ListStreams(in)
	}
}

func (d *KinesisVideoDouble) ListTagsForResource(i0 *kinesisvideo.ListTagsForResourceInput) (r0 *kinesisvideo.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*kinesisvideo.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) ListTagsForResourceRequest(i0 *kinesisvideo.ListTagsForResourceInput) (r0 *request.Request, r1 *kinesisvideo.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisvideo.ListTagsForResourceOutput)
	return
}

func (d *KinesisVideoDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *kinesisvideo.ListTagsForResourceInput, i2 ...request.Option) (r0 *kinesisvideo.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisvideo.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *kinesisvideo.ListTagsForResourceInput, _ ...request.Option) (*kinesisvideo.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *KinesisVideoDouble) ListTagsForStream(i0 *kinesisvideo.ListTagsForStreamInput) (r0 *kinesisvideo.ListTagsForStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForStream", i0)
	r0, _ = returns[0].(*kinesisvideo.ListTagsForStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) ListTagsForStreamRequest(i0 *kinesisvideo.ListTagsForStreamInput) (r0 *request.Request, r1 *kinesisvideo.ListTagsForStreamOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForStreamRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisvideo.ListTagsForStreamOutput)
	return
}

func (d *KinesisVideoDouble) ListTagsForStreamWithContext(i0 context.Context, i1 *kinesisvideo.ListTagsForStreamInput, i2 ...request.Option) (r0 *kinesisvideo.ListTagsForStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForStreamWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisvideo.ListTagsForStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) fakeListTagsForStreamWithContext(ctx context.Context, in *kinesisvideo.ListTagsForStreamInput, _ ...request.Option) (*kinesisvideo.ListTagsForStreamOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForStream cancelled", ctx.Err())
	default:
		return d.ListTagsForStream(in)
	}
}

func (d *KinesisVideoDouble) TagResource(i0 *kinesisvideo.TagResourceInput) (r0 *kinesisvideo.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*kinesisvideo.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) TagResourceRequest(i0 *kinesisvideo.TagResourceInput) (r0 *request.Request, r1 *kinesisvideo.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisvideo.TagResourceOutput)
	return
}

func (d *KinesisVideoDouble) TagResourceWithContext(i0 context.Context, i1 *kinesisvideo.TagResourceInput, i2 ...request.Option) (r0 *kinesisvideo.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisvideo.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) fakeTagResourceWithContext(ctx context.Context, in *kinesisvideo.TagResourceInput, _ ...request.Option) (*kinesisvideo.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *KinesisVideoDouble) TagStream(i0 *kinesisvideo.TagStreamInput) (r0 *kinesisvideo.TagStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagStream", i0)
	r0, _ = returns[0].(*kinesisvideo.TagStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) TagStreamRequest(i0 *kinesisvideo.TagStreamInput) (r0 *request.Request, r1 *kinesisvideo.TagStreamOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagStreamRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisvideo.TagStreamOutput)
	return
}

func (d *KinesisVideoDouble) TagStreamWithContext(i0 context.Context, i1 *kinesisvideo.TagStreamInput, i2 ...request.Option) (r0 *kinesisvideo.TagStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagStreamWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisvideo.TagStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) fakeTagStreamWithContext(ctx context.Context, in *kinesisvideo.TagStreamInput, _ ...request.Option) (*kinesisvideo.TagStreamOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagStream cancelled", ctx.Err())
	default:
		return d.TagStream(in)
	}
}

func (d *KinesisVideoDouble) UntagResource(i0 *kinesisvideo.UntagResourceInput) (r0 *kinesisvideo.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*kinesisvideo.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) UntagResourceRequest(i0 *kinesisvideo.UntagResourceInput) (r0 *request.Request, r1 *kinesisvideo.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisvideo.UntagResourceOutput)
	return
}

func (d *KinesisVideoDouble) UntagResourceWithContext(i0 context.Context, i1 *kinesisvideo.UntagResourceInput, i2 ...request.Option) (r0 *kinesisvideo.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisvideo.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) fakeUntagResourceWithContext(ctx context.Context, in *kinesisvideo.UntagResourceInput, _ ...request.Option) (*kinesisvideo.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *KinesisVideoDouble) UntagStream(i0 *kinesisvideo.UntagStreamInput) (r0 *kinesisvideo.UntagStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagStream", i0)
	r0, _ = returns[0].(*kinesisvideo.UntagStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) UntagStreamRequest(i0 *kinesisvideo.UntagStreamInput) (r0 *request.Request, r1 *kinesisvideo.UntagStreamOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagStreamRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisvideo.UntagStreamOutput)
	return
}

func (d *KinesisVideoDouble) UntagStreamWithContext(i0 context.Context, i1 *kinesisvideo.UntagStreamInput, i2 ...request.Option) (r0 *kinesisvideo.UntagStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagStreamWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisvideo.UntagStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) fakeUntagStreamWithContext(ctx context.Context, in *kinesisvideo.UntagStreamInput, _ ...request.Option) (*kinesisvideo.UntagStreamOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagStream cancelled", ctx.Err())
	default:
		return d.UntagStream(in)
	}
}

func (d *KinesisVideoDouble) UpdateDataRetention(i0 *kinesisvideo.UpdateDataRetentionInput) (r0 *kinesisvideo.UpdateDataRetentionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDataRetention", i0)
	r0, _ = returns[0].(*kinesisvideo.UpdateDataRetentionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) UpdateDataRetentionRequest(i0 *kinesisvideo.UpdateDataRetentionInput) (r0 *request.Request, r1 *kinesisvideo.UpdateDataRetentionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDataRetentionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisvideo.UpdateDataRetentionOutput)
	return
}

func (d *KinesisVideoDouble) UpdateDataRetentionWithContext(i0 context.Context, i1 *kinesisvideo.UpdateDataRetentionInput, i2 ...request.Option) (r0 *kinesisvideo.UpdateDataRetentionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDataRetentionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisvideo.UpdateDataRetentionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) fakeUpdateDataRetentionWithContext(ctx context.Context, in *kinesisvideo.UpdateDataRetentionInput, _ ...request.Option) (*kinesisvideo.UpdateDataRetentionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDataRetention cancelled", ctx.Err())
	default:
		return d.UpdateDataRetention(in)
	}
}

func (d *KinesisVideoDouble) UpdateSignalingChannel(i0 *kinesisvideo.UpdateSignalingChannelInput) (r0 *kinesisvideo.UpdateSignalingChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSignalingChannel", i0)
	r0, _ = returns[0].(*kinesisvideo.UpdateSignalingChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) UpdateSignalingChannelRequest(i0 *kinesisvideo.UpdateSignalingChannelInput) (r0 *request.Request, r1 *kinesisvideo.UpdateSignalingChannelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSignalingChannelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisvideo.UpdateSignalingChannelOutput)
	return
}

func (d *KinesisVideoDouble) UpdateSignalingChannelWithContext(i0 context.Context, i1 *kinesisvideo.UpdateSignalingChannelInput, i2 ...request.Option) (r0 *kinesisvideo.UpdateSignalingChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSignalingChannelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisvideo.UpdateSignalingChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) fakeUpdateSignalingChannelWithContext(ctx context.Context, in *kinesisvideo.UpdateSignalingChannelInput, _ ...request.Option) (*kinesisvideo.UpdateSignalingChannelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateSignalingChannel cancelled", ctx.Err())
	default:
		return d.UpdateSignalingChannel(in)
	}
}

func (d *KinesisVideoDouble) UpdateStream(i0 *kinesisvideo.UpdateStreamInput) (r0 *kinesisvideo.UpdateStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateStream", i0)
	r0, _ = returns[0].(*kinesisvideo.UpdateStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) UpdateStreamRequest(i0 *kinesisvideo.UpdateStreamInput) (r0 *request.Request, r1 *kinesisvideo.UpdateStreamOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateStreamRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesisvideo.UpdateStreamOutput)
	return
}

func (d *KinesisVideoDouble) UpdateStreamWithContext(i0 context.Context, i1 *kinesisvideo.UpdateStreamInput, i2 ...request.Option) (r0 *kinesisvideo.UpdateStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateStreamWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesisvideo.UpdateStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisVideoDouble) fakeUpdateStreamWithContext(ctx context.Context, in *kinesisvideo.UpdateStreamInput, _ ...request.Option) (*kinesisvideo.UpdateStreamOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateStream cancelled", ctx.Err())
	default:
		return d.UpdateStream(in)
	}
}
