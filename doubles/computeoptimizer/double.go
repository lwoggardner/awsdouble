// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:12:03+11:00

// Package computeoptimizerdouble provides a TestDouble implementation of computeoptimizeriface.ComputeOptimizerAPI
package computeoptimizerdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/computeoptimizer"
	"github.com/aws/aws-sdk-go/service/computeoptimizer/computeoptimizeriface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// ComputeOptimizerDouble is TestDouble for computeoptimizeriface.ComputeOptimizerAPI
type ComputeOptimizerDouble struct {
	computeoptimizeriface.ComputeOptimizerAPI
	*awsdouble.AWSTestDouble
}

// Constructor for ComputeOptimizerDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *ComputeOptimizerDouble {
	result := &ComputeOptimizerDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*computeoptimizeriface.ComputeOptimizerAPI)(nil), configurators...)
	return result
}

func (d *ComputeOptimizerDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *ComputeOptimizerDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "GetAutoScalingGroupRecommendationsWithContext":
		return m.Fake(d.fakeGetAutoScalingGroupRecommendationsWithContext)

	case "GetEC2InstanceRecommendationsWithContext":
		return m.Fake(d.fakeGetEC2InstanceRecommendationsWithContext)

	case "GetEC2RecommendationProjectedMetricsWithContext":
		return m.Fake(d.fakeGetEC2RecommendationProjectedMetricsWithContext)

	case "GetEnrollmentStatusWithContext":
		return m.Fake(d.fakeGetEnrollmentStatusWithContext)

	case "GetRecommendationSummariesWithContext":
		return m.Fake(d.fakeGetRecommendationSummariesWithContext)

	case "UpdateEnrollmentStatusWithContext":
		return m.Fake(d.fakeUpdateEnrollmentStatusWithContext)

	default:
		return nil
	}
}

func (d *ComputeOptimizerDouble) GetAutoScalingGroupRecommendations(i0 *computeoptimizer.GetAutoScalingGroupRecommendationsInput) (r0 *computeoptimizer.GetAutoScalingGroupRecommendationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAutoScalingGroupRecommendations", i0)
	r0, _ = returns[0].(*computeoptimizer.GetAutoScalingGroupRecommendationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComputeOptimizerDouble) GetAutoScalingGroupRecommendationsRequest(i0 *computeoptimizer.GetAutoScalingGroupRecommendationsInput) (r0 *request.Request, r1 *computeoptimizer.GetAutoScalingGroupRecommendationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAutoScalingGroupRecommendationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*computeoptimizer.GetAutoScalingGroupRecommendationsOutput)
	return
}

func (d *ComputeOptimizerDouble) GetAutoScalingGroupRecommendationsWithContext(i0 context.Context, i1 *computeoptimizer.GetAutoScalingGroupRecommendationsInput, i2 ...request.Option) (r0 *computeoptimizer.GetAutoScalingGroupRecommendationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAutoScalingGroupRecommendationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*computeoptimizer.GetAutoScalingGroupRecommendationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComputeOptimizerDouble) fakeGetAutoScalingGroupRecommendationsWithContext(ctx context.Context, in *computeoptimizer.GetAutoScalingGroupRecommendationsInput, _ ...request.Option) (*computeoptimizer.GetAutoScalingGroupRecommendationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetAutoScalingGroupRecommendations cancelled", ctx.Err())
	default:
		return d.GetAutoScalingGroupRecommendations(in)
	}
}

func (d *ComputeOptimizerDouble) GetEC2InstanceRecommendations(i0 *computeoptimizer.GetEC2InstanceRecommendationsInput) (r0 *computeoptimizer.GetEC2InstanceRecommendationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetEC2InstanceRecommendations", i0)
	r0, _ = returns[0].(*computeoptimizer.GetEC2InstanceRecommendationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComputeOptimizerDouble) GetEC2InstanceRecommendationsRequest(i0 *computeoptimizer.GetEC2InstanceRecommendationsInput) (r0 *request.Request, r1 *computeoptimizer.GetEC2InstanceRecommendationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetEC2InstanceRecommendationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*computeoptimizer.GetEC2InstanceRecommendationsOutput)
	return
}

func (d *ComputeOptimizerDouble) GetEC2InstanceRecommendationsWithContext(i0 context.Context, i1 *computeoptimizer.GetEC2InstanceRecommendationsInput, i2 ...request.Option) (r0 *computeoptimizer.GetEC2InstanceRecommendationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetEC2InstanceRecommendationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*computeoptimizer.GetEC2InstanceRecommendationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComputeOptimizerDouble) fakeGetEC2InstanceRecommendationsWithContext(ctx context.Context, in *computeoptimizer.GetEC2InstanceRecommendationsInput, _ ...request.Option) (*computeoptimizer.GetEC2InstanceRecommendationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetEC2InstanceRecommendations cancelled", ctx.Err())
	default:
		return d.GetEC2InstanceRecommendations(in)
	}
}

func (d *ComputeOptimizerDouble) GetEC2RecommendationProjectedMetrics(i0 *computeoptimizer.GetEC2RecommendationProjectedMetricsInput) (r0 *computeoptimizer.GetEC2RecommendationProjectedMetricsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetEC2RecommendationProjectedMetrics", i0)
	r0, _ = returns[0].(*computeoptimizer.GetEC2RecommendationProjectedMetricsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComputeOptimizerDouble) GetEC2RecommendationProjectedMetricsRequest(i0 *computeoptimizer.GetEC2RecommendationProjectedMetricsInput) (r0 *request.Request, r1 *computeoptimizer.GetEC2RecommendationProjectedMetricsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetEC2RecommendationProjectedMetricsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*computeoptimizer.GetEC2RecommendationProjectedMetricsOutput)
	return
}

func (d *ComputeOptimizerDouble) GetEC2RecommendationProjectedMetricsWithContext(i0 context.Context, i1 *computeoptimizer.GetEC2RecommendationProjectedMetricsInput, i2 ...request.Option) (r0 *computeoptimizer.GetEC2RecommendationProjectedMetricsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetEC2RecommendationProjectedMetricsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*computeoptimizer.GetEC2RecommendationProjectedMetricsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComputeOptimizerDouble) fakeGetEC2RecommendationProjectedMetricsWithContext(ctx context.Context, in *computeoptimizer.GetEC2RecommendationProjectedMetricsInput, _ ...request.Option) (*computeoptimizer.GetEC2RecommendationProjectedMetricsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetEC2RecommendationProjectedMetrics cancelled", ctx.Err())
	default:
		return d.GetEC2RecommendationProjectedMetrics(in)
	}
}

func (d *ComputeOptimizerDouble) GetEnrollmentStatus(i0 *computeoptimizer.GetEnrollmentStatusInput) (r0 *computeoptimizer.GetEnrollmentStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetEnrollmentStatus", i0)
	r0, _ = returns[0].(*computeoptimizer.GetEnrollmentStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComputeOptimizerDouble) GetEnrollmentStatusRequest(i0 *computeoptimizer.GetEnrollmentStatusInput) (r0 *request.Request, r1 *computeoptimizer.GetEnrollmentStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetEnrollmentStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*computeoptimizer.GetEnrollmentStatusOutput)
	return
}

func (d *ComputeOptimizerDouble) GetEnrollmentStatusWithContext(i0 context.Context, i1 *computeoptimizer.GetEnrollmentStatusInput, i2 ...request.Option) (r0 *computeoptimizer.GetEnrollmentStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetEnrollmentStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*computeoptimizer.GetEnrollmentStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComputeOptimizerDouble) fakeGetEnrollmentStatusWithContext(ctx context.Context, in *computeoptimizer.GetEnrollmentStatusInput, _ ...request.Option) (*computeoptimizer.GetEnrollmentStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetEnrollmentStatus cancelled", ctx.Err())
	default:
		return d.GetEnrollmentStatus(in)
	}
}

func (d *ComputeOptimizerDouble) GetRecommendationSummaries(i0 *computeoptimizer.GetRecommendationSummariesInput) (r0 *computeoptimizer.GetRecommendationSummariesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRecommendationSummaries", i0)
	r0, _ = returns[0].(*computeoptimizer.GetRecommendationSummariesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComputeOptimizerDouble) GetRecommendationSummariesRequest(i0 *computeoptimizer.GetRecommendationSummariesInput) (r0 *request.Request, r1 *computeoptimizer.GetRecommendationSummariesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRecommendationSummariesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*computeoptimizer.GetRecommendationSummariesOutput)
	return
}

func (d *ComputeOptimizerDouble) GetRecommendationSummariesWithContext(i0 context.Context, i1 *computeoptimizer.GetRecommendationSummariesInput, i2 ...request.Option) (r0 *computeoptimizer.GetRecommendationSummariesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRecommendationSummariesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*computeoptimizer.GetRecommendationSummariesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComputeOptimizerDouble) fakeGetRecommendationSummariesWithContext(ctx context.Context, in *computeoptimizer.GetRecommendationSummariesInput, _ ...request.Option) (*computeoptimizer.GetRecommendationSummariesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRecommendationSummaries cancelled", ctx.Err())
	default:
		return d.GetRecommendationSummaries(in)
	}
}

func (d *ComputeOptimizerDouble) UpdateEnrollmentStatus(i0 *computeoptimizer.UpdateEnrollmentStatusInput) (r0 *computeoptimizer.UpdateEnrollmentStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateEnrollmentStatus", i0)
	r0, _ = returns[0].(*computeoptimizer.UpdateEnrollmentStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComputeOptimizerDouble) UpdateEnrollmentStatusRequest(i0 *computeoptimizer.UpdateEnrollmentStatusInput) (r0 *request.Request, r1 *computeoptimizer.UpdateEnrollmentStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateEnrollmentStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*computeoptimizer.UpdateEnrollmentStatusOutput)
	return
}

func (d *ComputeOptimizerDouble) UpdateEnrollmentStatusWithContext(i0 context.Context, i1 *computeoptimizer.UpdateEnrollmentStatusInput, i2 ...request.Option) (r0 *computeoptimizer.UpdateEnrollmentStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateEnrollmentStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*computeoptimizer.UpdateEnrollmentStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComputeOptimizerDouble) fakeUpdateEnrollmentStatusWithContext(ctx context.Context, in *computeoptimizer.UpdateEnrollmentStatusInput, _ ...request.Option) (*computeoptimizer.UpdateEnrollmentStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateEnrollmentStatus cancelled", ctx.Err())
	default:
		return d.UpdateEnrollmentStatus(in)
	}
}
