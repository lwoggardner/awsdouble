// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:14:53+11:00

// Package secretsmanagerdouble provides a TestDouble implementation of secretsmanageriface.SecretsManagerAPI
package secretsmanagerdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/secretsmanager"
	"github.com/aws/aws-sdk-go/service/secretsmanager/secretsmanageriface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// SecretsManagerDouble is TestDouble for secretsmanageriface.SecretsManagerAPI
type SecretsManagerDouble struct {
	secretsmanageriface.SecretsManagerAPI
	*awsdouble.AWSTestDouble
}

// Constructor for SecretsManagerDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *SecretsManagerDouble {
	result := &SecretsManagerDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*secretsmanageriface.SecretsManagerAPI)(nil), configurators...)
	return result
}

func (d *SecretsManagerDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *SecretsManagerDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CancelRotateSecretWithContext":
		return m.Fake(d.fakeCancelRotateSecretWithContext)

	case "CreateSecretWithContext":
		return m.Fake(d.fakeCreateSecretWithContext)

	case "DeleteResourcePolicyWithContext":
		return m.Fake(d.fakeDeleteResourcePolicyWithContext)

	case "DeleteSecretWithContext":
		return m.Fake(d.fakeDeleteSecretWithContext)

	case "DescribeSecretWithContext":
		return m.Fake(d.fakeDescribeSecretWithContext)

	case "GetRandomPasswordWithContext":
		return m.Fake(d.fakeGetRandomPasswordWithContext)

	case "GetResourcePolicyWithContext":
		return m.Fake(d.fakeGetResourcePolicyWithContext)

	case "GetSecretValueWithContext":
		return m.Fake(d.fakeGetSecretValueWithContext)

	case "ListSecretVersionIdsPages":
		return m.Fake(d.fakeListSecretVersionIdsPages)

	case "ListSecretVersionIdsPagesWithContext":
		return m.Fake(d.fakeListSecretVersionIdsPagesWithContext)

	case "ListSecretVersionIdsWithContext":
		return m.Fake(d.fakeListSecretVersionIdsWithContext)

	case "ListSecretsPages":
		return m.Fake(d.fakeListSecretsPages)

	case "ListSecretsPagesWithContext":
		return m.Fake(d.fakeListSecretsPagesWithContext)

	case "ListSecretsWithContext":
		return m.Fake(d.fakeListSecretsWithContext)

	case "PutResourcePolicyWithContext":
		return m.Fake(d.fakePutResourcePolicyWithContext)

	case "PutSecretValueWithContext":
		return m.Fake(d.fakePutSecretValueWithContext)

	case "RestoreSecretWithContext":
		return m.Fake(d.fakeRestoreSecretWithContext)

	case "RotateSecretWithContext":
		return m.Fake(d.fakeRotateSecretWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateSecretVersionStageWithContext":
		return m.Fake(d.fakeUpdateSecretVersionStageWithContext)

	case "UpdateSecretWithContext":
		return m.Fake(d.fakeUpdateSecretWithContext)

	default:
		return nil
	}
}

func (d *SecretsManagerDouble) CancelRotateSecret(i0 *secretsmanager.CancelRotateSecretInput) (r0 *secretsmanager.CancelRotateSecretOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelRotateSecret", i0)
	r0, _ = returns[0].(*secretsmanager.CancelRotateSecretOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SecretsManagerDouble) CancelRotateSecretRequest(i0 *secretsmanager.CancelRotateSecretInput) (r0 *request.Request, r1 *secretsmanager.CancelRotateSecretOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelRotateSecretRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*secretsmanager.CancelRotateSecretOutput)
	return
}

func (d *SecretsManagerDouble) CancelRotateSecretWithContext(i0 context.Context, i1 *secretsmanager.CancelRotateSecretInput, i2 ...request.Option) (r0 *secretsmanager.CancelRotateSecretOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelRotateSecretWithContext", i0, i1, i2)
	r0, _ = returns[0].(*secretsmanager.CancelRotateSecretOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SecretsManagerDouble) fakeCancelRotateSecretWithContext(ctx context.Context, in *secretsmanager.CancelRotateSecretInput, _ ...request.Option) (*secretsmanager.CancelRotateSecretOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelRotateSecret cancelled", ctx.Err())
	default:
		return d.CancelRotateSecret(in)
	}
}

func (d *SecretsManagerDouble) CreateSecret(i0 *secretsmanager.CreateSecretInput) (r0 *secretsmanager.CreateSecretOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSecret", i0)
	r0, _ = returns[0].(*secretsmanager.CreateSecretOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SecretsManagerDouble) CreateSecretRequest(i0 *secretsmanager.CreateSecretInput) (r0 *request.Request, r1 *secretsmanager.CreateSecretOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSecretRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*secretsmanager.CreateSecretOutput)
	return
}

func (d *SecretsManagerDouble) CreateSecretWithContext(i0 context.Context, i1 *secretsmanager.CreateSecretInput, i2 ...request.Option) (r0 *secretsmanager.CreateSecretOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSecretWithContext", i0, i1, i2)
	r0, _ = returns[0].(*secretsmanager.CreateSecretOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SecretsManagerDouble) fakeCreateSecretWithContext(ctx context.Context, in *secretsmanager.CreateSecretInput, _ ...request.Option) (*secretsmanager.CreateSecretOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateSecret cancelled", ctx.Err())
	default:
		return d.CreateSecret(in)
	}
}

func (d *SecretsManagerDouble) DeleteResourcePolicy(i0 *secretsmanager.DeleteResourcePolicyInput) (r0 *secretsmanager.DeleteResourcePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResourcePolicy", i0)
	r0, _ = returns[0].(*secretsmanager.DeleteResourcePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SecretsManagerDouble) DeleteResourcePolicyRequest(i0 *secretsmanager.DeleteResourcePolicyInput) (r0 *request.Request, r1 *secretsmanager.DeleteResourcePolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResourcePolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*secretsmanager.DeleteResourcePolicyOutput)
	return
}

func (d *SecretsManagerDouble) DeleteResourcePolicyWithContext(i0 context.Context, i1 *secretsmanager.DeleteResourcePolicyInput, i2 ...request.Option) (r0 *secretsmanager.DeleteResourcePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResourcePolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*secretsmanager.DeleteResourcePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SecretsManagerDouble) fakeDeleteResourcePolicyWithContext(ctx context.Context, in *secretsmanager.DeleteResourcePolicyInput, _ ...request.Option) (*secretsmanager.DeleteResourcePolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteResourcePolicy cancelled", ctx.Err())
	default:
		return d.DeleteResourcePolicy(in)
	}
}

func (d *SecretsManagerDouble) DeleteSecret(i0 *secretsmanager.DeleteSecretInput) (r0 *secretsmanager.DeleteSecretOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSecret", i0)
	r0, _ = returns[0].(*secretsmanager.DeleteSecretOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SecretsManagerDouble) DeleteSecretRequest(i0 *secretsmanager.DeleteSecretInput) (r0 *request.Request, r1 *secretsmanager.DeleteSecretOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSecretRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*secretsmanager.DeleteSecretOutput)
	return
}

func (d *SecretsManagerDouble) DeleteSecretWithContext(i0 context.Context, i1 *secretsmanager.DeleteSecretInput, i2 ...request.Option) (r0 *secretsmanager.DeleteSecretOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSecretWithContext", i0, i1, i2)
	r0, _ = returns[0].(*secretsmanager.DeleteSecretOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SecretsManagerDouble) fakeDeleteSecretWithContext(ctx context.Context, in *secretsmanager.DeleteSecretInput, _ ...request.Option) (*secretsmanager.DeleteSecretOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteSecret cancelled", ctx.Err())
	default:
		return d.DeleteSecret(in)
	}
}

func (d *SecretsManagerDouble) DescribeSecret(i0 *secretsmanager.DescribeSecretInput) (r0 *secretsmanager.DescribeSecretOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSecret", i0)
	r0, _ = returns[0].(*secretsmanager.DescribeSecretOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SecretsManagerDouble) DescribeSecretRequest(i0 *secretsmanager.DescribeSecretInput) (r0 *request.Request, r1 *secretsmanager.DescribeSecretOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSecretRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*secretsmanager.DescribeSecretOutput)
	return
}

func (d *SecretsManagerDouble) DescribeSecretWithContext(i0 context.Context, i1 *secretsmanager.DescribeSecretInput, i2 ...request.Option) (r0 *secretsmanager.DescribeSecretOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSecretWithContext", i0, i1, i2)
	r0, _ = returns[0].(*secretsmanager.DescribeSecretOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SecretsManagerDouble) fakeDescribeSecretWithContext(ctx context.Context, in *secretsmanager.DescribeSecretInput, _ ...request.Option) (*secretsmanager.DescribeSecretOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSecret cancelled", ctx.Err())
	default:
		return d.DescribeSecret(in)
	}
}

func (d *SecretsManagerDouble) GetRandomPassword(i0 *secretsmanager.GetRandomPasswordInput) (r0 *secretsmanager.GetRandomPasswordOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRandomPassword", i0)
	r0, _ = returns[0].(*secretsmanager.GetRandomPasswordOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SecretsManagerDouble) GetRandomPasswordRequest(i0 *secretsmanager.GetRandomPasswordInput) (r0 *request.Request, r1 *secretsmanager.GetRandomPasswordOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRandomPasswordRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*secretsmanager.GetRandomPasswordOutput)
	return
}

func (d *SecretsManagerDouble) GetRandomPasswordWithContext(i0 context.Context, i1 *secretsmanager.GetRandomPasswordInput, i2 ...request.Option) (r0 *secretsmanager.GetRandomPasswordOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRandomPasswordWithContext", i0, i1, i2)
	r0, _ = returns[0].(*secretsmanager.GetRandomPasswordOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SecretsManagerDouble) fakeGetRandomPasswordWithContext(ctx context.Context, in *secretsmanager.GetRandomPasswordInput, _ ...request.Option) (*secretsmanager.GetRandomPasswordOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRandomPassword cancelled", ctx.Err())
	default:
		return d.GetRandomPassword(in)
	}
}

func (d *SecretsManagerDouble) GetResourcePolicy(i0 *secretsmanager.GetResourcePolicyInput) (r0 *secretsmanager.GetResourcePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResourcePolicy", i0)
	r0, _ = returns[0].(*secretsmanager.GetResourcePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SecretsManagerDouble) GetResourcePolicyRequest(i0 *secretsmanager.GetResourcePolicyInput) (r0 *request.Request, r1 *secretsmanager.GetResourcePolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResourcePolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*secretsmanager.GetResourcePolicyOutput)
	return
}

func (d *SecretsManagerDouble) GetResourcePolicyWithContext(i0 context.Context, i1 *secretsmanager.GetResourcePolicyInput, i2 ...request.Option) (r0 *secretsmanager.GetResourcePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResourcePolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*secretsmanager.GetResourcePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SecretsManagerDouble) fakeGetResourcePolicyWithContext(ctx context.Context, in *secretsmanager.GetResourcePolicyInput, _ ...request.Option) (*secretsmanager.GetResourcePolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetResourcePolicy cancelled", ctx.Err())
	default:
		return d.GetResourcePolicy(in)
	}
}

func (d *SecretsManagerDouble) GetSecretValue(i0 *secretsmanager.GetSecretValueInput) (r0 *secretsmanager.GetSecretValueOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSecretValue", i0)
	r0, _ = returns[0].(*secretsmanager.GetSecretValueOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SecretsManagerDouble) GetSecretValueRequest(i0 *secretsmanager.GetSecretValueInput) (r0 *request.Request, r1 *secretsmanager.GetSecretValueOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSecretValueRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*secretsmanager.GetSecretValueOutput)
	return
}

func (d *SecretsManagerDouble) GetSecretValueWithContext(i0 context.Context, i1 *secretsmanager.GetSecretValueInput, i2 ...request.Option) (r0 *secretsmanager.GetSecretValueOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSecretValueWithContext", i0, i1, i2)
	r0, _ = returns[0].(*secretsmanager.GetSecretValueOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SecretsManagerDouble) fakeGetSecretValueWithContext(ctx context.Context, in *secretsmanager.GetSecretValueInput, _ ...request.Option) (*secretsmanager.GetSecretValueOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetSecretValue cancelled", ctx.Err())
	default:
		return d.GetSecretValue(in)
	}
}

func (d *SecretsManagerDouble) ListSecretVersionIds(i0 *secretsmanager.ListSecretVersionIdsInput) (r0 *secretsmanager.ListSecretVersionIdsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSecretVersionIds", i0)
	r0, _ = returns[0].(*secretsmanager.ListSecretVersionIdsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SecretsManagerDouble) ListSecretVersionIdsPages(i0 *secretsmanager.ListSecretVersionIdsInput, i1 func(*secretsmanager.ListSecretVersionIdsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSecretVersionIdsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SecretsManagerDouble) fakeListSecretVersionIdsPages(in *secretsmanager.ListSecretVersionIdsInput, pager func(*secretsmanager.ListSecretVersionIdsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListSecretVersionIds", paginators, in, pager)
}

func (d *SecretsManagerDouble) ListSecretVersionIdsPagesWithContext(i0 context.Context, i1 *secretsmanager.ListSecretVersionIdsInput, i2 func(*secretsmanager.ListSecretVersionIdsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSecretVersionIdsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SecretsManagerDouble) fakeListSecretVersionIdsPagesWithContext(ctx context.Context, in *secretsmanager.ListSecretVersionIdsInput, pager func(*secretsmanager.ListSecretVersionIdsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListSecretVersionIds", paginators, ctx, in, pager, options...)
}

func (d *SecretsManagerDouble) ListSecretVersionIdsRequest(i0 *secretsmanager.ListSecretVersionIdsInput) (r0 *request.Request, r1 *secretsmanager.ListSecretVersionIdsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSecretVersionIdsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*secretsmanager.ListSecretVersionIdsOutput)
	return
}

func (d *SecretsManagerDouble) ListSecretVersionIdsWithContext(i0 context.Context, i1 *secretsmanager.ListSecretVersionIdsInput, i2 ...request.Option) (r0 *secretsmanager.ListSecretVersionIdsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSecretVersionIdsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*secretsmanager.ListSecretVersionIdsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SecretsManagerDouble) fakeListSecretVersionIdsWithContext(ctx context.Context, in *secretsmanager.ListSecretVersionIdsInput, _ ...request.Option) (*secretsmanager.ListSecretVersionIdsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListSecretVersionIds cancelled", ctx.Err())
	default:
		return d.ListSecretVersionIds(in)
	}
}

func (d *SecretsManagerDouble) ListSecrets(i0 *secretsmanager.ListSecretsInput) (r0 *secretsmanager.ListSecretsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSecrets", i0)
	r0, _ = returns[0].(*secretsmanager.ListSecretsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SecretsManagerDouble) ListSecretsPages(i0 *secretsmanager.ListSecretsInput, i1 func(*secretsmanager.ListSecretsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSecretsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SecretsManagerDouble) fakeListSecretsPages(in *secretsmanager.ListSecretsInput, pager func(*secretsmanager.ListSecretsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListSecrets", paginators, in, pager)
}

func (d *SecretsManagerDouble) ListSecretsPagesWithContext(i0 context.Context, i1 *secretsmanager.ListSecretsInput, i2 func(*secretsmanager.ListSecretsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSecretsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SecretsManagerDouble) fakeListSecretsPagesWithContext(ctx context.Context, in *secretsmanager.ListSecretsInput, pager func(*secretsmanager.ListSecretsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListSecrets", paginators, ctx, in, pager, options...)
}

func (d *SecretsManagerDouble) ListSecretsRequest(i0 *secretsmanager.ListSecretsInput) (r0 *request.Request, r1 *secretsmanager.ListSecretsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSecretsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*secretsmanager.ListSecretsOutput)
	return
}

func (d *SecretsManagerDouble) ListSecretsWithContext(i0 context.Context, i1 *secretsmanager.ListSecretsInput, i2 ...request.Option) (r0 *secretsmanager.ListSecretsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSecretsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*secretsmanager.ListSecretsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SecretsManagerDouble) fakeListSecretsWithContext(ctx context.Context, in *secretsmanager.ListSecretsInput, _ ...request.Option) (*secretsmanager.ListSecretsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListSecrets cancelled", ctx.Err())
	default:
		return d.ListSecrets(in)
	}
}

func (d *SecretsManagerDouble) PutResourcePolicy(i0 *secretsmanager.PutResourcePolicyInput) (r0 *secretsmanager.PutResourcePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutResourcePolicy", i0)
	r0, _ = returns[0].(*secretsmanager.PutResourcePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SecretsManagerDouble) PutResourcePolicyRequest(i0 *secretsmanager.PutResourcePolicyInput) (r0 *request.Request, r1 *secretsmanager.PutResourcePolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutResourcePolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*secretsmanager.PutResourcePolicyOutput)
	return
}

func (d *SecretsManagerDouble) PutResourcePolicyWithContext(i0 context.Context, i1 *secretsmanager.PutResourcePolicyInput, i2 ...request.Option) (r0 *secretsmanager.PutResourcePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutResourcePolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*secretsmanager.PutResourcePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SecretsManagerDouble) fakePutResourcePolicyWithContext(ctx context.Context, in *secretsmanager.PutResourcePolicyInput, _ ...request.Option) (*secretsmanager.PutResourcePolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutResourcePolicy cancelled", ctx.Err())
	default:
		return d.PutResourcePolicy(in)
	}
}

func (d *SecretsManagerDouble) PutSecretValue(i0 *secretsmanager.PutSecretValueInput) (r0 *secretsmanager.PutSecretValueOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutSecretValue", i0)
	r0, _ = returns[0].(*secretsmanager.PutSecretValueOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SecretsManagerDouble) PutSecretValueRequest(i0 *secretsmanager.PutSecretValueInput) (r0 *request.Request, r1 *secretsmanager.PutSecretValueOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutSecretValueRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*secretsmanager.PutSecretValueOutput)
	return
}

func (d *SecretsManagerDouble) PutSecretValueWithContext(i0 context.Context, i1 *secretsmanager.PutSecretValueInput, i2 ...request.Option) (r0 *secretsmanager.PutSecretValueOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutSecretValueWithContext", i0, i1, i2)
	r0, _ = returns[0].(*secretsmanager.PutSecretValueOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SecretsManagerDouble) fakePutSecretValueWithContext(ctx context.Context, in *secretsmanager.PutSecretValueInput, _ ...request.Option) (*secretsmanager.PutSecretValueOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutSecretValue cancelled", ctx.Err())
	default:
		return d.PutSecretValue(in)
	}
}

func (d *SecretsManagerDouble) RestoreSecret(i0 *secretsmanager.RestoreSecretInput) (r0 *secretsmanager.RestoreSecretOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreSecret", i0)
	r0, _ = returns[0].(*secretsmanager.RestoreSecretOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SecretsManagerDouble) RestoreSecretRequest(i0 *secretsmanager.RestoreSecretInput) (r0 *request.Request, r1 *secretsmanager.RestoreSecretOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreSecretRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*secretsmanager.RestoreSecretOutput)
	return
}

func (d *SecretsManagerDouble) RestoreSecretWithContext(i0 context.Context, i1 *secretsmanager.RestoreSecretInput, i2 ...request.Option) (r0 *secretsmanager.RestoreSecretOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreSecretWithContext", i0, i1, i2)
	r0, _ = returns[0].(*secretsmanager.RestoreSecretOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SecretsManagerDouble) fakeRestoreSecretWithContext(ctx context.Context, in *secretsmanager.RestoreSecretInput, _ ...request.Option) (*secretsmanager.RestoreSecretOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RestoreSecret cancelled", ctx.Err())
	default:
		return d.RestoreSecret(in)
	}
}

func (d *SecretsManagerDouble) RotateSecret(i0 *secretsmanager.RotateSecretInput) (r0 *secretsmanager.RotateSecretOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RotateSecret", i0)
	r0, _ = returns[0].(*secretsmanager.RotateSecretOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SecretsManagerDouble) RotateSecretRequest(i0 *secretsmanager.RotateSecretInput) (r0 *request.Request, r1 *secretsmanager.RotateSecretOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RotateSecretRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*secretsmanager.RotateSecretOutput)
	return
}

func (d *SecretsManagerDouble) RotateSecretWithContext(i0 context.Context, i1 *secretsmanager.RotateSecretInput, i2 ...request.Option) (r0 *secretsmanager.RotateSecretOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RotateSecretWithContext", i0, i1, i2)
	r0, _ = returns[0].(*secretsmanager.RotateSecretOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SecretsManagerDouble) fakeRotateSecretWithContext(ctx context.Context, in *secretsmanager.RotateSecretInput, _ ...request.Option) (*secretsmanager.RotateSecretOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RotateSecret cancelled", ctx.Err())
	default:
		return d.RotateSecret(in)
	}
}

func (d *SecretsManagerDouble) TagResource(i0 *secretsmanager.TagResourceInput) (r0 *secretsmanager.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*secretsmanager.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SecretsManagerDouble) TagResourceRequest(i0 *secretsmanager.TagResourceInput) (r0 *request.Request, r1 *secretsmanager.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*secretsmanager.TagResourceOutput)
	return
}

func (d *SecretsManagerDouble) TagResourceWithContext(i0 context.Context, i1 *secretsmanager.TagResourceInput, i2 ...request.Option) (r0 *secretsmanager.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*secretsmanager.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SecretsManagerDouble) fakeTagResourceWithContext(ctx context.Context, in *secretsmanager.TagResourceInput, _ ...request.Option) (*secretsmanager.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *SecretsManagerDouble) UntagResource(i0 *secretsmanager.UntagResourceInput) (r0 *secretsmanager.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*secretsmanager.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SecretsManagerDouble) UntagResourceRequest(i0 *secretsmanager.UntagResourceInput) (r0 *request.Request, r1 *secretsmanager.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*secretsmanager.UntagResourceOutput)
	return
}

func (d *SecretsManagerDouble) UntagResourceWithContext(i0 context.Context, i1 *secretsmanager.UntagResourceInput, i2 ...request.Option) (r0 *secretsmanager.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*secretsmanager.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SecretsManagerDouble) fakeUntagResourceWithContext(ctx context.Context, in *secretsmanager.UntagResourceInput, _ ...request.Option) (*secretsmanager.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *SecretsManagerDouble) UpdateSecret(i0 *secretsmanager.UpdateSecretInput) (r0 *secretsmanager.UpdateSecretOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSecret", i0)
	r0, _ = returns[0].(*secretsmanager.UpdateSecretOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SecretsManagerDouble) UpdateSecretRequest(i0 *secretsmanager.UpdateSecretInput) (r0 *request.Request, r1 *secretsmanager.UpdateSecretOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSecretRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*secretsmanager.UpdateSecretOutput)
	return
}

func (d *SecretsManagerDouble) UpdateSecretVersionStage(i0 *secretsmanager.UpdateSecretVersionStageInput) (r0 *secretsmanager.UpdateSecretVersionStageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSecretVersionStage", i0)
	r0, _ = returns[0].(*secretsmanager.UpdateSecretVersionStageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SecretsManagerDouble) UpdateSecretVersionStageRequest(i0 *secretsmanager.UpdateSecretVersionStageInput) (r0 *request.Request, r1 *secretsmanager.UpdateSecretVersionStageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSecretVersionStageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*secretsmanager.UpdateSecretVersionStageOutput)
	return
}

func (d *SecretsManagerDouble) UpdateSecretVersionStageWithContext(i0 context.Context, i1 *secretsmanager.UpdateSecretVersionStageInput, i2 ...request.Option) (r0 *secretsmanager.UpdateSecretVersionStageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSecretVersionStageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*secretsmanager.UpdateSecretVersionStageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SecretsManagerDouble) fakeUpdateSecretVersionStageWithContext(ctx context.Context, in *secretsmanager.UpdateSecretVersionStageInput, _ ...request.Option) (*secretsmanager.UpdateSecretVersionStageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateSecretVersionStage cancelled", ctx.Err())
	default:
		return d.UpdateSecretVersionStage(in)
	}
}

func (d *SecretsManagerDouble) UpdateSecretWithContext(i0 context.Context, i1 *secretsmanager.UpdateSecretInput, i2 ...request.Option) (r0 *secretsmanager.UpdateSecretOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSecretWithContext", i0, i1, i2)
	r0, _ = returns[0].(*secretsmanager.UpdateSecretOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SecretsManagerDouble) fakeUpdateSecretWithContext(ctx context.Context, in *secretsmanager.UpdateSecretInput, _ ...request.Option) (*secretsmanager.UpdateSecretOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateSecret cancelled", ctx.Err())
	default:
		return d.UpdateSecret(in)
	}
}
