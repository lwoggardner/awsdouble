// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:14:30+11:00

// Package quicksightdouble provides a TestDouble implementation of quicksightiface.QuickSightAPI
package quicksightdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/quicksight"
	"github.com/aws/aws-sdk-go/service/quicksight/quicksightiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// QuickSightDouble is TestDouble for quicksightiface.QuickSightAPI
type QuickSightDouble struct {
	quicksightiface.QuickSightAPI
	*awsdouble.AWSTestDouble
}

// Constructor for QuickSightDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *QuickSightDouble {
	result := &QuickSightDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*quicksightiface.QuickSightAPI)(nil), configurators...)
	return result
}

func (d *QuickSightDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *QuickSightDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CancelIngestionWithContext":
		return m.Fake(d.fakeCancelIngestionWithContext)

	case "CreateDashboardWithContext":
		return m.Fake(d.fakeCreateDashboardWithContext)

	case "CreateDataSetWithContext":
		return m.Fake(d.fakeCreateDataSetWithContext)

	case "CreateDataSourceWithContext":
		return m.Fake(d.fakeCreateDataSourceWithContext)

	case "CreateGroupMembershipWithContext":
		return m.Fake(d.fakeCreateGroupMembershipWithContext)

	case "CreateGroupWithContext":
		return m.Fake(d.fakeCreateGroupWithContext)

	case "CreateIAMPolicyAssignmentWithContext":
		return m.Fake(d.fakeCreateIAMPolicyAssignmentWithContext)

	case "CreateIngestionWithContext":
		return m.Fake(d.fakeCreateIngestionWithContext)

	case "CreateTemplateAliasWithContext":
		return m.Fake(d.fakeCreateTemplateAliasWithContext)

	case "CreateTemplateWithContext":
		return m.Fake(d.fakeCreateTemplateWithContext)

	case "DeleteDashboardWithContext":
		return m.Fake(d.fakeDeleteDashboardWithContext)

	case "DeleteDataSetWithContext":
		return m.Fake(d.fakeDeleteDataSetWithContext)

	case "DeleteDataSourceWithContext":
		return m.Fake(d.fakeDeleteDataSourceWithContext)

	case "DeleteGroupMembershipWithContext":
		return m.Fake(d.fakeDeleteGroupMembershipWithContext)

	case "DeleteGroupWithContext":
		return m.Fake(d.fakeDeleteGroupWithContext)

	case "DeleteIAMPolicyAssignmentWithContext":
		return m.Fake(d.fakeDeleteIAMPolicyAssignmentWithContext)

	case "DeleteTemplateAliasWithContext":
		return m.Fake(d.fakeDeleteTemplateAliasWithContext)

	case "DeleteTemplateWithContext":
		return m.Fake(d.fakeDeleteTemplateWithContext)

	case "DeleteUserByPrincipalIdWithContext":
		return m.Fake(d.fakeDeleteUserByPrincipalIdWithContext)

	case "DeleteUserWithContext":
		return m.Fake(d.fakeDeleteUserWithContext)

	case "DescribeDashboardPermissionsWithContext":
		return m.Fake(d.fakeDescribeDashboardPermissionsWithContext)

	case "DescribeDashboardWithContext":
		return m.Fake(d.fakeDescribeDashboardWithContext)

	case "DescribeDataSetPermissionsWithContext":
		return m.Fake(d.fakeDescribeDataSetPermissionsWithContext)

	case "DescribeDataSetWithContext":
		return m.Fake(d.fakeDescribeDataSetWithContext)

	case "DescribeDataSourcePermissionsWithContext":
		return m.Fake(d.fakeDescribeDataSourcePermissionsWithContext)

	case "DescribeDataSourceWithContext":
		return m.Fake(d.fakeDescribeDataSourceWithContext)

	case "DescribeGroupWithContext":
		return m.Fake(d.fakeDescribeGroupWithContext)

	case "DescribeIAMPolicyAssignmentWithContext":
		return m.Fake(d.fakeDescribeIAMPolicyAssignmentWithContext)

	case "DescribeIngestionWithContext":
		return m.Fake(d.fakeDescribeIngestionWithContext)

	case "DescribeTemplateAliasWithContext":
		return m.Fake(d.fakeDescribeTemplateAliasWithContext)

	case "DescribeTemplatePermissionsWithContext":
		return m.Fake(d.fakeDescribeTemplatePermissionsWithContext)

	case "DescribeTemplateWithContext":
		return m.Fake(d.fakeDescribeTemplateWithContext)

	case "DescribeUserWithContext":
		return m.Fake(d.fakeDescribeUserWithContext)

	case "GetDashboardEmbedUrlWithContext":
		return m.Fake(d.fakeGetDashboardEmbedUrlWithContext)

	case "ListDashboardVersionsPages":
		return m.Fake(d.fakeListDashboardVersionsPages)

	case "ListDashboardVersionsPagesWithContext":
		return m.Fake(d.fakeListDashboardVersionsPagesWithContext)

	case "ListDashboardVersionsWithContext":
		return m.Fake(d.fakeListDashboardVersionsWithContext)

	case "ListDashboardsPages":
		return m.Fake(d.fakeListDashboardsPages)

	case "ListDashboardsPagesWithContext":
		return m.Fake(d.fakeListDashboardsPagesWithContext)

	case "ListDashboardsWithContext":
		return m.Fake(d.fakeListDashboardsWithContext)

	case "ListDataSetsPages":
		return m.Fake(d.fakeListDataSetsPages)

	case "ListDataSetsPagesWithContext":
		return m.Fake(d.fakeListDataSetsPagesWithContext)

	case "ListDataSetsWithContext":
		return m.Fake(d.fakeListDataSetsWithContext)

	case "ListDataSourcesPages":
		return m.Fake(d.fakeListDataSourcesPages)

	case "ListDataSourcesPagesWithContext":
		return m.Fake(d.fakeListDataSourcesPagesWithContext)

	case "ListDataSourcesWithContext":
		return m.Fake(d.fakeListDataSourcesWithContext)

	case "ListGroupMembershipsWithContext":
		return m.Fake(d.fakeListGroupMembershipsWithContext)

	case "ListGroupsWithContext":
		return m.Fake(d.fakeListGroupsWithContext)

	case "ListIAMPolicyAssignmentsForUserWithContext":
		return m.Fake(d.fakeListIAMPolicyAssignmentsForUserWithContext)

	case "ListIAMPolicyAssignmentsWithContext":
		return m.Fake(d.fakeListIAMPolicyAssignmentsWithContext)

	case "ListIngestionsPages":
		return m.Fake(d.fakeListIngestionsPages)

	case "ListIngestionsPagesWithContext":
		return m.Fake(d.fakeListIngestionsPagesWithContext)

	case "ListIngestionsWithContext":
		return m.Fake(d.fakeListIngestionsWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "ListTemplateAliasesPages":
		return m.Fake(d.fakeListTemplateAliasesPages)

	case "ListTemplateAliasesPagesWithContext":
		return m.Fake(d.fakeListTemplateAliasesPagesWithContext)

	case "ListTemplateAliasesWithContext":
		return m.Fake(d.fakeListTemplateAliasesWithContext)

	case "ListTemplateVersionsPages":
		return m.Fake(d.fakeListTemplateVersionsPages)

	case "ListTemplateVersionsPagesWithContext":
		return m.Fake(d.fakeListTemplateVersionsPagesWithContext)

	case "ListTemplateVersionsWithContext":
		return m.Fake(d.fakeListTemplateVersionsWithContext)

	case "ListTemplatesPages":
		return m.Fake(d.fakeListTemplatesPages)

	case "ListTemplatesPagesWithContext":
		return m.Fake(d.fakeListTemplatesPagesWithContext)

	case "ListTemplatesWithContext":
		return m.Fake(d.fakeListTemplatesWithContext)

	case "ListUserGroupsWithContext":
		return m.Fake(d.fakeListUserGroupsWithContext)

	case "ListUsersWithContext":
		return m.Fake(d.fakeListUsersWithContext)

	case "RegisterUserWithContext":
		return m.Fake(d.fakeRegisterUserWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateDashboardPermissionsWithContext":
		return m.Fake(d.fakeUpdateDashboardPermissionsWithContext)

	case "UpdateDashboardPublishedVersionWithContext":
		return m.Fake(d.fakeUpdateDashboardPublishedVersionWithContext)

	case "UpdateDashboardWithContext":
		return m.Fake(d.fakeUpdateDashboardWithContext)

	case "UpdateDataSetPermissionsWithContext":
		return m.Fake(d.fakeUpdateDataSetPermissionsWithContext)

	case "UpdateDataSetWithContext":
		return m.Fake(d.fakeUpdateDataSetWithContext)

	case "UpdateDataSourcePermissionsWithContext":
		return m.Fake(d.fakeUpdateDataSourcePermissionsWithContext)

	case "UpdateDataSourceWithContext":
		return m.Fake(d.fakeUpdateDataSourceWithContext)

	case "UpdateGroupWithContext":
		return m.Fake(d.fakeUpdateGroupWithContext)

	case "UpdateIAMPolicyAssignmentWithContext":
		return m.Fake(d.fakeUpdateIAMPolicyAssignmentWithContext)

	case "UpdateTemplateAliasWithContext":
		return m.Fake(d.fakeUpdateTemplateAliasWithContext)

	case "UpdateTemplatePermissionsWithContext":
		return m.Fake(d.fakeUpdateTemplatePermissionsWithContext)

	case "UpdateTemplateWithContext":
		return m.Fake(d.fakeUpdateTemplateWithContext)

	case "UpdateUserWithContext":
		return m.Fake(d.fakeUpdateUserWithContext)

	default:
		return nil
	}
}

func (d *QuickSightDouble) CancelIngestion(i0 *quicksight.CancelIngestionInput) (r0 *quicksight.CancelIngestionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelIngestion", i0)
	r0, _ = returns[0].(*quicksight.CancelIngestionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) CancelIngestionRequest(i0 *quicksight.CancelIngestionInput) (r0 *request.Request, r1 *quicksight.CancelIngestionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelIngestionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.CancelIngestionOutput)
	return
}

func (d *QuickSightDouble) CancelIngestionWithContext(i0 context.Context, i1 *quicksight.CancelIngestionInput, i2 ...request.Option) (r0 *quicksight.CancelIngestionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelIngestionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.CancelIngestionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeCancelIngestionWithContext(ctx context.Context, in *quicksight.CancelIngestionInput, _ ...request.Option) (*quicksight.CancelIngestionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelIngestion cancelled", ctx.Err())
	default:
		return d.CancelIngestion(in)
	}
}

func (d *QuickSightDouble) CreateDashboard(i0 *quicksight.CreateDashboardInput) (r0 *quicksight.CreateDashboardOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDashboard", i0)
	r0, _ = returns[0].(*quicksight.CreateDashboardOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) CreateDashboardRequest(i0 *quicksight.CreateDashboardInput) (r0 *request.Request, r1 *quicksight.CreateDashboardOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDashboardRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.CreateDashboardOutput)
	return
}

func (d *QuickSightDouble) CreateDashboardWithContext(i0 context.Context, i1 *quicksight.CreateDashboardInput, i2 ...request.Option) (r0 *quicksight.CreateDashboardOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDashboardWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.CreateDashboardOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeCreateDashboardWithContext(ctx context.Context, in *quicksight.CreateDashboardInput, _ ...request.Option) (*quicksight.CreateDashboardOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDashboard cancelled", ctx.Err())
	default:
		return d.CreateDashboard(in)
	}
}

func (d *QuickSightDouble) CreateDataSet(i0 *quicksight.CreateDataSetInput) (r0 *quicksight.CreateDataSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDataSet", i0)
	r0, _ = returns[0].(*quicksight.CreateDataSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) CreateDataSetRequest(i0 *quicksight.CreateDataSetInput) (r0 *request.Request, r1 *quicksight.CreateDataSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDataSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.CreateDataSetOutput)
	return
}

func (d *QuickSightDouble) CreateDataSetWithContext(i0 context.Context, i1 *quicksight.CreateDataSetInput, i2 ...request.Option) (r0 *quicksight.CreateDataSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDataSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.CreateDataSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeCreateDataSetWithContext(ctx context.Context, in *quicksight.CreateDataSetInput, _ ...request.Option) (*quicksight.CreateDataSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDataSet cancelled", ctx.Err())
	default:
		return d.CreateDataSet(in)
	}
}

func (d *QuickSightDouble) CreateDataSource(i0 *quicksight.CreateDataSourceInput) (r0 *quicksight.CreateDataSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDataSource", i0)
	r0, _ = returns[0].(*quicksight.CreateDataSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) CreateDataSourceRequest(i0 *quicksight.CreateDataSourceInput) (r0 *request.Request, r1 *quicksight.CreateDataSourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDataSourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.CreateDataSourceOutput)
	return
}

func (d *QuickSightDouble) CreateDataSourceWithContext(i0 context.Context, i1 *quicksight.CreateDataSourceInput, i2 ...request.Option) (r0 *quicksight.CreateDataSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDataSourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.CreateDataSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeCreateDataSourceWithContext(ctx context.Context, in *quicksight.CreateDataSourceInput, _ ...request.Option) (*quicksight.CreateDataSourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDataSource cancelled", ctx.Err())
	default:
		return d.CreateDataSource(in)
	}
}

func (d *QuickSightDouble) CreateGroup(i0 *quicksight.CreateGroupInput) (r0 *quicksight.CreateGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGroup", i0)
	r0, _ = returns[0].(*quicksight.CreateGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) CreateGroupMembership(i0 *quicksight.CreateGroupMembershipInput) (r0 *quicksight.CreateGroupMembershipOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGroupMembership", i0)
	r0, _ = returns[0].(*quicksight.CreateGroupMembershipOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) CreateGroupMembershipRequest(i0 *quicksight.CreateGroupMembershipInput) (r0 *request.Request, r1 *quicksight.CreateGroupMembershipOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGroupMembershipRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.CreateGroupMembershipOutput)
	return
}

func (d *QuickSightDouble) CreateGroupMembershipWithContext(i0 context.Context, i1 *quicksight.CreateGroupMembershipInput, i2 ...request.Option) (r0 *quicksight.CreateGroupMembershipOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGroupMembershipWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.CreateGroupMembershipOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeCreateGroupMembershipWithContext(ctx context.Context, in *quicksight.CreateGroupMembershipInput, _ ...request.Option) (*quicksight.CreateGroupMembershipOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateGroupMembership cancelled", ctx.Err())
	default:
		return d.CreateGroupMembership(in)
	}
}

func (d *QuickSightDouble) CreateGroupRequest(i0 *quicksight.CreateGroupInput) (r0 *request.Request, r1 *quicksight.CreateGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.CreateGroupOutput)
	return
}

func (d *QuickSightDouble) CreateGroupWithContext(i0 context.Context, i1 *quicksight.CreateGroupInput, i2 ...request.Option) (r0 *quicksight.CreateGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.CreateGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeCreateGroupWithContext(ctx context.Context, in *quicksight.CreateGroupInput, _ ...request.Option) (*quicksight.CreateGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateGroup cancelled", ctx.Err())
	default:
		return d.CreateGroup(in)
	}
}

func (d *QuickSightDouble) CreateIAMPolicyAssignment(i0 *quicksight.CreateIAMPolicyAssignmentInput) (r0 *quicksight.CreateIAMPolicyAssignmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateIAMPolicyAssignment", i0)
	r0, _ = returns[0].(*quicksight.CreateIAMPolicyAssignmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) CreateIAMPolicyAssignmentRequest(i0 *quicksight.CreateIAMPolicyAssignmentInput) (r0 *request.Request, r1 *quicksight.CreateIAMPolicyAssignmentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateIAMPolicyAssignmentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.CreateIAMPolicyAssignmentOutput)
	return
}

func (d *QuickSightDouble) CreateIAMPolicyAssignmentWithContext(i0 context.Context, i1 *quicksight.CreateIAMPolicyAssignmentInput, i2 ...request.Option) (r0 *quicksight.CreateIAMPolicyAssignmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateIAMPolicyAssignmentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.CreateIAMPolicyAssignmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeCreateIAMPolicyAssignmentWithContext(ctx context.Context, in *quicksight.CreateIAMPolicyAssignmentInput, _ ...request.Option) (*quicksight.CreateIAMPolicyAssignmentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateIAMPolicyAssignment cancelled", ctx.Err())
	default:
		return d.CreateIAMPolicyAssignment(in)
	}
}

func (d *QuickSightDouble) CreateIngestion(i0 *quicksight.CreateIngestionInput) (r0 *quicksight.CreateIngestionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateIngestion", i0)
	r0, _ = returns[0].(*quicksight.CreateIngestionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) CreateIngestionRequest(i0 *quicksight.CreateIngestionInput) (r0 *request.Request, r1 *quicksight.CreateIngestionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateIngestionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.CreateIngestionOutput)
	return
}

func (d *QuickSightDouble) CreateIngestionWithContext(i0 context.Context, i1 *quicksight.CreateIngestionInput, i2 ...request.Option) (r0 *quicksight.CreateIngestionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateIngestionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.CreateIngestionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeCreateIngestionWithContext(ctx context.Context, in *quicksight.CreateIngestionInput, _ ...request.Option) (*quicksight.CreateIngestionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateIngestion cancelled", ctx.Err())
	default:
		return d.CreateIngestion(in)
	}
}

func (d *QuickSightDouble) CreateTemplate(i0 *quicksight.CreateTemplateInput) (r0 *quicksight.CreateTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTemplate", i0)
	r0, _ = returns[0].(*quicksight.CreateTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) CreateTemplateAlias(i0 *quicksight.CreateTemplateAliasInput) (r0 *quicksight.CreateTemplateAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTemplateAlias", i0)
	r0, _ = returns[0].(*quicksight.CreateTemplateAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) CreateTemplateAliasRequest(i0 *quicksight.CreateTemplateAliasInput) (r0 *request.Request, r1 *quicksight.CreateTemplateAliasOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTemplateAliasRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.CreateTemplateAliasOutput)
	return
}

func (d *QuickSightDouble) CreateTemplateAliasWithContext(i0 context.Context, i1 *quicksight.CreateTemplateAliasInput, i2 ...request.Option) (r0 *quicksight.CreateTemplateAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTemplateAliasWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.CreateTemplateAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeCreateTemplateAliasWithContext(ctx context.Context, in *quicksight.CreateTemplateAliasInput, _ ...request.Option) (*quicksight.CreateTemplateAliasOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTemplateAlias cancelled", ctx.Err())
	default:
		return d.CreateTemplateAlias(in)
	}
}

func (d *QuickSightDouble) CreateTemplateRequest(i0 *quicksight.CreateTemplateInput) (r0 *request.Request, r1 *quicksight.CreateTemplateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTemplateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.CreateTemplateOutput)
	return
}

func (d *QuickSightDouble) CreateTemplateWithContext(i0 context.Context, i1 *quicksight.CreateTemplateInput, i2 ...request.Option) (r0 *quicksight.CreateTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTemplateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.CreateTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeCreateTemplateWithContext(ctx context.Context, in *quicksight.CreateTemplateInput, _ ...request.Option) (*quicksight.CreateTemplateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTemplate cancelled", ctx.Err())
	default:
		return d.CreateTemplate(in)
	}
}

func (d *QuickSightDouble) DeleteDashboard(i0 *quicksight.DeleteDashboardInput) (r0 *quicksight.DeleteDashboardOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDashboard", i0)
	r0, _ = returns[0].(*quicksight.DeleteDashboardOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) DeleteDashboardRequest(i0 *quicksight.DeleteDashboardInput) (r0 *request.Request, r1 *quicksight.DeleteDashboardOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDashboardRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.DeleteDashboardOutput)
	return
}

func (d *QuickSightDouble) DeleteDashboardWithContext(i0 context.Context, i1 *quicksight.DeleteDashboardInput, i2 ...request.Option) (r0 *quicksight.DeleteDashboardOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDashboardWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.DeleteDashboardOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeDeleteDashboardWithContext(ctx context.Context, in *quicksight.DeleteDashboardInput, _ ...request.Option) (*quicksight.DeleteDashboardOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDashboard cancelled", ctx.Err())
	default:
		return d.DeleteDashboard(in)
	}
}

func (d *QuickSightDouble) DeleteDataSet(i0 *quicksight.DeleteDataSetInput) (r0 *quicksight.DeleteDataSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDataSet", i0)
	r0, _ = returns[0].(*quicksight.DeleteDataSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) DeleteDataSetRequest(i0 *quicksight.DeleteDataSetInput) (r0 *request.Request, r1 *quicksight.DeleteDataSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDataSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.DeleteDataSetOutput)
	return
}

func (d *QuickSightDouble) DeleteDataSetWithContext(i0 context.Context, i1 *quicksight.DeleteDataSetInput, i2 ...request.Option) (r0 *quicksight.DeleteDataSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDataSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.DeleteDataSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeDeleteDataSetWithContext(ctx context.Context, in *quicksight.DeleteDataSetInput, _ ...request.Option) (*quicksight.DeleteDataSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDataSet cancelled", ctx.Err())
	default:
		return d.DeleteDataSet(in)
	}
}

func (d *QuickSightDouble) DeleteDataSource(i0 *quicksight.DeleteDataSourceInput) (r0 *quicksight.DeleteDataSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDataSource", i0)
	r0, _ = returns[0].(*quicksight.DeleteDataSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) DeleteDataSourceRequest(i0 *quicksight.DeleteDataSourceInput) (r0 *request.Request, r1 *quicksight.DeleteDataSourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDataSourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.DeleteDataSourceOutput)
	return
}

func (d *QuickSightDouble) DeleteDataSourceWithContext(i0 context.Context, i1 *quicksight.DeleteDataSourceInput, i2 ...request.Option) (r0 *quicksight.DeleteDataSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDataSourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.DeleteDataSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeDeleteDataSourceWithContext(ctx context.Context, in *quicksight.DeleteDataSourceInput, _ ...request.Option) (*quicksight.DeleteDataSourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDataSource cancelled", ctx.Err())
	default:
		return d.DeleteDataSource(in)
	}
}

func (d *QuickSightDouble) DeleteGroup(i0 *quicksight.DeleteGroupInput) (r0 *quicksight.DeleteGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGroup", i0)
	r0, _ = returns[0].(*quicksight.DeleteGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) DeleteGroupMembership(i0 *quicksight.DeleteGroupMembershipInput) (r0 *quicksight.DeleteGroupMembershipOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGroupMembership", i0)
	r0, _ = returns[0].(*quicksight.DeleteGroupMembershipOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) DeleteGroupMembershipRequest(i0 *quicksight.DeleteGroupMembershipInput) (r0 *request.Request, r1 *quicksight.DeleteGroupMembershipOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGroupMembershipRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.DeleteGroupMembershipOutput)
	return
}

func (d *QuickSightDouble) DeleteGroupMembershipWithContext(i0 context.Context, i1 *quicksight.DeleteGroupMembershipInput, i2 ...request.Option) (r0 *quicksight.DeleteGroupMembershipOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGroupMembershipWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.DeleteGroupMembershipOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeDeleteGroupMembershipWithContext(ctx context.Context, in *quicksight.DeleteGroupMembershipInput, _ ...request.Option) (*quicksight.DeleteGroupMembershipOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteGroupMembership cancelled", ctx.Err())
	default:
		return d.DeleteGroupMembership(in)
	}
}

func (d *QuickSightDouble) DeleteGroupRequest(i0 *quicksight.DeleteGroupInput) (r0 *request.Request, r1 *quicksight.DeleteGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.DeleteGroupOutput)
	return
}

func (d *QuickSightDouble) DeleteGroupWithContext(i0 context.Context, i1 *quicksight.DeleteGroupInput, i2 ...request.Option) (r0 *quicksight.DeleteGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.DeleteGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeDeleteGroupWithContext(ctx context.Context, in *quicksight.DeleteGroupInput, _ ...request.Option) (*quicksight.DeleteGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteGroup cancelled", ctx.Err())
	default:
		return d.DeleteGroup(in)
	}
}

func (d *QuickSightDouble) DeleteIAMPolicyAssignment(i0 *quicksight.DeleteIAMPolicyAssignmentInput) (r0 *quicksight.DeleteIAMPolicyAssignmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIAMPolicyAssignment", i0)
	r0, _ = returns[0].(*quicksight.DeleteIAMPolicyAssignmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) DeleteIAMPolicyAssignmentRequest(i0 *quicksight.DeleteIAMPolicyAssignmentInput) (r0 *request.Request, r1 *quicksight.DeleteIAMPolicyAssignmentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIAMPolicyAssignmentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.DeleteIAMPolicyAssignmentOutput)
	return
}

func (d *QuickSightDouble) DeleteIAMPolicyAssignmentWithContext(i0 context.Context, i1 *quicksight.DeleteIAMPolicyAssignmentInput, i2 ...request.Option) (r0 *quicksight.DeleteIAMPolicyAssignmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIAMPolicyAssignmentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.DeleteIAMPolicyAssignmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeDeleteIAMPolicyAssignmentWithContext(ctx context.Context, in *quicksight.DeleteIAMPolicyAssignmentInput, _ ...request.Option) (*quicksight.DeleteIAMPolicyAssignmentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteIAMPolicyAssignment cancelled", ctx.Err())
	default:
		return d.DeleteIAMPolicyAssignment(in)
	}
}

func (d *QuickSightDouble) DeleteTemplate(i0 *quicksight.DeleteTemplateInput) (r0 *quicksight.DeleteTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTemplate", i0)
	r0, _ = returns[0].(*quicksight.DeleteTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) DeleteTemplateAlias(i0 *quicksight.DeleteTemplateAliasInput) (r0 *quicksight.DeleteTemplateAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTemplateAlias", i0)
	r0, _ = returns[0].(*quicksight.DeleteTemplateAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) DeleteTemplateAliasRequest(i0 *quicksight.DeleteTemplateAliasInput) (r0 *request.Request, r1 *quicksight.DeleteTemplateAliasOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTemplateAliasRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.DeleteTemplateAliasOutput)
	return
}

func (d *QuickSightDouble) DeleteTemplateAliasWithContext(i0 context.Context, i1 *quicksight.DeleteTemplateAliasInput, i2 ...request.Option) (r0 *quicksight.DeleteTemplateAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTemplateAliasWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.DeleteTemplateAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeDeleteTemplateAliasWithContext(ctx context.Context, in *quicksight.DeleteTemplateAliasInput, _ ...request.Option) (*quicksight.DeleteTemplateAliasOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTemplateAlias cancelled", ctx.Err())
	default:
		return d.DeleteTemplateAlias(in)
	}
}

func (d *QuickSightDouble) DeleteTemplateRequest(i0 *quicksight.DeleteTemplateInput) (r0 *request.Request, r1 *quicksight.DeleteTemplateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTemplateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.DeleteTemplateOutput)
	return
}

func (d *QuickSightDouble) DeleteTemplateWithContext(i0 context.Context, i1 *quicksight.DeleteTemplateInput, i2 ...request.Option) (r0 *quicksight.DeleteTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTemplateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.DeleteTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeDeleteTemplateWithContext(ctx context.Context, in *quicksight.DeleteTemplateInput, _ ...request.Option) (*quicksight.DeleteTemplateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTemplate cancelled", ctx.Err())
	default:
		return d.DeleteTemplate(in)
	}
}

func (d *QuickSightDouble) DeleteUser(i0 *quicksight.DeleteUserInput) (r0 *quicksight.DeleteUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUser", i0)
	r0, _ = returns[0].(*quicksight.DeleteUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) DeleteUserByPrincipalId(i0 *quicksight.DeleteUserByPrincipalIdInput) (r0 *quicksight.DeleteUserByPrincipalIdOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserByPrincipalId", i0)
	r0, _ = returns[0].(*quicksight.DeleteUserByPrincipalIdOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) DeleteUserByPrincipalIdRequest(i0 *quicksight.DeleteUserByPrincipalIdInput) (r0 *request.Request, r1 *quicksight.DeleteUserByPrincipalIdOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserByPrincipalIdRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.DeleteUserByPrincipalIdOutput)
	return
}

func (d *QuickSightDouble) DeleteUserByPrincipalIdWithContext(i0 context.Context, i1 *quicksight.DeleteUserByPrincipalIdInput, i2 ...request.Option) (r0 *quicksight.DeleteUserByPrincipalIdOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserByPrincipalIdWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.DeleteUserByPrincipalIdOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeDeleteUserByPrincipalIdWithContext(ctx context.Context, in *quicksight.DeleteUserByPrincipalIdInput, _ ...request.Option) (*quicksight.DeleteUserByPrincipalIdOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteUserByPrincipalId cancelled", ctx.Err())
	default:
		return d.DeleteUserByPrincipalId(in)
	}
}

func (d *QuickSightDouble) DeleteUserRequest(i0 *quicksight.DeleteUserInput) (r0 *request.Request, r1 *quicksight.DeleteUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.DeleteUserOutput)
	return
}

func (d *QuickSightDouble) DeleteUserWithContext(i0 context.Context, i1 *quicksight.DeleteUserInput, i2 ...request.Option) (r0 *quicksight.DeleteUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.DeleteUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeDeleteUserWithContext(ctx context.Context, in *quicksight.DeleteUserInput, _ ...request.Option) (*quicksight.DeleteUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteUser cancelled", ctx.Err())
	default:
		return d.DeleteUser(in)
	}
}

func (d *QuickSightDouble) DescribeDashboard(i0 *quicksight.DescribeDashboardInput) (r0 *quicksight.DescribeDashboardOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDashboard", i0)
	r0, _ = returns[0].(*quicksight.DescribeDashboardOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) DescribeDashboardPermissions(i0 *quicksight.DescribeDashboardPermissionsInput) (r0 *quicksight.DescribeDashboardPermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDashboardPermissions", i0)
	r0, _ = returns[0].(*quicksight.DescribeDashboardPermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) DescribeDashboardPermissionsRequest(i0 *quicksight.DescribeDashboardPermissionsInput) (r0 *request.Request, r1 *quicksight.DescribeDashboardPermissionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDashboardPermissionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.DescribeDashboardPermissionsOutput)
	return
}

func (d *QuickSightDouble) DescribeDashboardPermissionsWithContext(i0 context.Context, i1 *quicksight.DescribeDashboardPermissionsInput, i2 ...request.Option) (r0 *quicksight.DescribeDashboardPermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDashboardPermissionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.DescribeDashboardPermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeDescribeDashboardPermissionsWithContext(ctx context.Context, in *quicksight.DescribeDashboardPermissionsInput, _ ...request.Option) (*quicksight.DescribeDashboardPermissionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDashboardPermissions cancelled", ctx.Err())
	default:
		return d.DescribeDashboardPermissions(in)
	}
}

func (d *QuickSightDouble) DescribeDashboardRequest(i0 *quicksight.DescribeDashboardInput) (r0 *request.Request, r1 *quicksight.DescribeDashboardOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDashboardRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.DescribeDashboardOutput)
	return
}

func (d *QuickSightDouble) DescribeDashboardWithContext(i0 context.Context, i1 *quicksight.DescribeDashboardInput, i2 ...request.Option) (r0 *quicksight.DescribeDashboardOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDashboardWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.DescribeDashboardOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeDescribeDashboardWithContext(ctx context.Context, in *quicksight.DescribeDashboardInput, _ ...request.Option) (*quicksight.DescribeDashboardOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDashboard cancelled", ctx.Err())
	default:
		return d.DescribeDashboard(in)
	}
}

func (d *QuickSightDouble) DescribeDataSet(i0 *quicksight.DescribeDataSetInput) (r0 *quicksight.DescribeDataSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDataSet", i0)
	r0, _ = returns[0].(*quicksight.DescribeDataSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) DescribeDataSetPermissions(i0 *quicksight.DescribeDataSetPermissionsInput) (r0 *quicksight.DescribeDataSetPermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDataSetPermissions", i0)
	r0, _ = returns[0].(*quicksight.DescribeDataSetPermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) DescribeDataSetPermissionsRequest(i0 *quicksight.DescribeDataSetPermissionsInput) (r0 *request.Request, r1 *quicksight.DescribeDataSetPermissionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDataSetPermissionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.DescribeDataSetPermissionsOutput)
	return
}

func (d *QuickSightDouble) DescribeDataSetPermissionsWithContext(i0 context.Context, i1 *quicksight.DescribeDataSetPermissionsInput, i2 ...request.Option) (r0 *quicksight.DescribeDataSetPermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDataSetPermissionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.DescribeDataSetPermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeDescribeDataSetPermissionsWithContext(ctx context.Context, in *quicksight.DescribeDataSetPermissionsInput, _ ...request.Option) (*quicksight.DescribeDataSetPermissionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDataSetPermissions cancelled", ctx.Err())
	default:
		return d.DescribeDataSetPermissions(in)
	}
}

func (d *QuickSightDouble) DescribeDataSetRequest(i0 *quicksight.DescribeDataSetInput) (r0 *request.Request, r1 *quicksight.DescribeDataSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDataSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.DescribeDataSetOutput)
	return
}

func (d *QuickSightDouble) DescribeDataSetWithContext(i0 context.Context, i1 *quicksight.DescribeDataSetInput, i2 ...request.Option) (r0 *quicksight.DescribeDataSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDataSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.DescribeDataSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeDescribeDataSetWithContext(ctx context.Context, in *quicksight.DescribeDataSetInput, _ ...request.Option) (*quicksight.DescribeDataSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDataSet cancelled", ctx.Err())
	default:
		return d.DescribeDataSet(in)
	}
}

func (d *QuickSightDouble) DescribeDataSource(i0 *quicksight.DescribeDataSourceInput) (r0 *quicksight.DescribeDataSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDataSource", i0)
	r0, _ = returns[0].(*quicksight.DescribeDataSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) DescribeDataSourcePermissions(i0 *quicksight.DescribeDataSourcePermissionsInput) (r0 *quicksight.DescribeDataSourcePermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDataSourcePermissions", i0)
	r0, _ = returns[0].(*quicksight.DescribeDataSourcePermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) DescribeDataSourcePermissionsRequest(i0 *quicksight.DescribeDataSourcePermissionsInput) (r0 *request.Request, r1 *quicksight.DescribeDataSourcePermissionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDataSourcePermissionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.DescribeDataSourcePermissionsOutput)
	return
}

func (d *QuickSightDouble) DescribeDataSourcePermissionsWithContext(i0 context.Context, i1 *quicksight.DescribeDataSourcePermissionsInput, i2 ...request.Option) (r0 *quicksight.DescribeDataSourcePermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDataSourcePermissionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.DescribeDataSourcePermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeDescribeDataSourcePermissionsWithContext(ctx context.Context, in *quicksight.DescribeDataSourcePermissionsInput, _ ...request.Option) (*quicksight.DescribeDataSourcePermissionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDataSourcePermissions cancelled", ctx.Err())
	default:
		return d.DescribeDataSourcePermissions(in)
	}
}

func (d *QuickSightDouble) DescribeDataSourceRequest(i0 *quicksight.DescribeDataSourceInput) (r0 *request.Request, r1 *quicksight.DescribeDataSourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDataSourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.DescribeDataSourceOutput)
	return
}

func (d *QuickSightDouble) DescribeDataSourceWithContext(i0 context.Context, i1 *quicksight.DescribeDataSourceInput, i2 ...request.Option) (r0 *quicksight.DescribeDataSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDataSourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.DescribeDataSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeDescribeDataSourceWithContext(ctx context.Context, in *quicksight.DescribeDataSourceInput, _ ...request.Option) (*quicksight.DescribeDataSourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDataSource cancelled", ctx.Err())
	default:
		return d.DescribeDataSource(in)
	}
}

func (d *QuickSightDouble) DescribeGroup(i0 *quicksight.DescribeGroupInput) (r0 *quicksight.DescribeGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGroup", i0)
	r0, _ = returns[0].(*quicksight.DescribeGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) DescribeGroupRequest(i0 *quicksight.DescribeGroupInput) (r0 *request.Request, r1 *quicksight.DescribeGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.DescribeGroupOutput)
	return
}

func (d *QuickSightDouble) DescribeGroupWithContext(i0 context.Context, i1 *quicksight.DescribeGroupInput, i2 ...request.Option) (r0 *quicksight.DescribeGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.DescribeGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeDescribeGroupWithContext(ctx context.Context, in *quicksight.DescribeGroupInput, _ ...request.Option) (*quicksight.DescribeGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeGroup cancelled", ctx.Err())
	default:
		return d.DescribeGroup(in)
	}
}

func (d *QuickSightDouble) DescribeIAMPolicyAssignment(i0 *quicksight.DescribeIAMPolicyAssignmentInput) (r0 *quicksight.DescribeIAMPolicyAssignmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIAMPolicyAssignment", i0)
	r0, _ = returns[0].(*quicksight.DescribeIAMPolicyAssignmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) DescribeIAMPolicyAssignmentRequest(i0 *quicksight.DescribeIAMPolicyAssignmentInput) (r0 *request.Request, r1 *quicksight.DescribeIAMPolicyAssignmentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIAMPolicyAssignmentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.DescribeIAMPolicyAssignmentOutput)
	return
}

func (d *QuickSightDouble) DescribeIAMPolicyAssignmentWithContext(i0 context.Context, i1 *quicksight.DescribeIAMPolicyAssignmentInput, i2 ...request.Option) (r0 *quicksight.DescribeIAMPolicyAssignmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIAMPolicyAssignmentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.DescribeIAMPolicyAssignmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeDescribeIAMPolicyAssignmentWithContext(ctx context.Context, in *quicksight.DescribeIAMPolicyAssignmentInput, _ ...request.Option) (*quicksight.DescribeIAMPolicyAssignmentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeIAMPolicyAssignment cancelled", ctx.Err())
	default:
		return d.DescribeIAMPolicyAssignment(in)
	}
}

func (d *QuickSightDouble) DescribeIngestion(i0 *quicksight.DescribeIngestionInput) (r0 *quicksight.DescribeIngestionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIngestion", i0)
	r0, _ = returns[0].(*quicksight.DescribeIngestionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) DescribeIngestionRequest(i0 *quicksight.DescribeIngestionInput) (r0 *request.Request, r1 *quicksight.DescribeIngestionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIngestionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.DescribeIngestionOutput)
	return
}

func (d *QuickSightDouble) DescribeIngestionWithContext(i0 context.Context, i1 *quicksight.DescribeIngestionInput, i2 ...request.Option) (r0 *quicksight.DescribeIngestionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIngestionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.DescribeIngestionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeDescribeIngestionWithContext(ctx context.Context, in *quicksight.DescribeIngestionInput, _ ...request.Option) (*quicksight.DescribeIngestionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeIngestion cancelled", ctx.Err())
	default:
		return d.DescribeIngestion(in)
	}
}

func (d *QuickSightDouble) DescribeTemplate(i0 *quicksight.DescribeTemplateInput) (r0 *quicksight.DescribeTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTemplate", i0)
	r0, _ = returns[0].(*quicksight.DescribeTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) DescribeTemplateAlias(i0 *quicksight.DescribeTemplateAliasInput) (r0 *quicksight.DescribeTemplateAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTemplateAlias", i0)
	r0, _ = returns[0].(*quicksight.DescribeTemplateAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) DescribeTemplateAliasRequest(i0 *quicksight.DescribeTemplateAliasInput) (r0 *request.Request, r1 *quicksight.DescribeTemplateAliasOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTemplateAliasRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.DescribeTemplateAliasOutput)
	return
}

func (d *QuickSightDouble) DescribeTemplateAliasWithContext(i0 context.Context, i1 *quicksight.DescribeTemplateAliasInput, i2 ...request.Option) (r0 *quicksight.DescribeTemplateAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTemplateAliasWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.DescribeTemplateAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeDescribeTemplateAliasWithContext(ctx context.Context, in *quicksight.DescribeTemplateAliasInput, _ ...request.Option) (*quicksight.DescribeTemplateAliasOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTemplateAlias cancelled", ctx.Err())
	default:
		return d.DescribeTemplateAlias(in)
	}
}

func (d *QuickSightDouble) DescribeTemplatePermissions(i0 *quicksight.DescribeTemplatePermissionsInput) (r0 *quicksight.DescribeTemplatePermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTemplatePermissions", i0)
	r0, _ = returns[0].(*quicksight.DescribeTemplatePermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) DescribeTemplatePermissionsRequest(i0 *quicksight.DescribeTemplatePermissionsInput) (r0 *request.Request, r1 *quicksight.DescribeTemplatePermissionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTemplatePermissionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.DescribeTemplatePermissionsOutput)
	return
}

func (d *QuickSightDouble) DescribeTemplatePermissionsWithContext(i0 context.Context, i1 *quicksight.DescribeTemplatePermissionsInput, i2 ...request.Option) (r0 *quicksight.DescribeTemplatePermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTemplatePermissionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.DescribeTemplatePermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeDescribeTemplatePermissionsWithContext(ctx context.Context, in *quicksight.DescribeTemplatePermissionsInput, _ ...request.Option) (*quicksight.DescribeTemplatePermissionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTemplatePermissions cancelled", ctx.Err())
	default:
		return d.DescribeTemplatePermissions(in)
	}
}

func (d *QuickSightDouble) DescribeTemplateRequest(i0 *quicksight.DescribeTemplateInput) (r0 *request.Request, r1 *quicksight.DescribeTemplateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTemplateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.DescribeTemplateOutput)
	return
}

func (d *QuickSightDouble) DescribeTemplateWithContext(i0 context.Context, i1 *quicksight.DescribeTemplateInput, i2 ...request.Option) (r0 *quicksight.DescribeTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTemplateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.DescribeTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeDescribeTemplateWithContext(ctx context.Context, in *quicksight.DescribeTemplateInput, _ ...request.Option) (*quicksight.DescribeTemplateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTemplate cancelled", ctx.Err())
	default:
		return d.DescribeTemplate(in)
	}
}

func (d *QuickSightDouble) DescribeUser(i0 *quicksight.DescribeUserInput) (r0 *quicksight.DescribeUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUser", i0)
	r0, _ = returns[0].(*quicksight.DescribeUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) DescribeUserRequest(i0 *quicksight.DescribeUserInput) (r0 *request.Request, r1 *quicksight.DescribeUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.DescribeUserOutput)
	return
}

func (d *QuickSightDouble) DescribeUserWithContext(i0 context.Context, i1 *quicksight.DescribeUserInput, i2 ...request.Option) (r0 *quicksight.DescribeUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.DescribeUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeDescribeUserWithContext(ctx context.Context, in *quicksight.DescribeUserInput, _ ...request.Option) (*quicksight.DescribeUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeUser cancelled", ctx.Err())
	default:
		return d.DescribeUser(in)
	}
}

func (d *QuickSightDouble) GetDashboardEmbedUrl(i0 *quicksight.GetDashboardEmbedUrlInput) (r0 *quicksight.GetDashboardEmbedUrlOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDashboardEmbedUrl", i0)
	r0, _ = returns[0].(*quicksight.GetDashboardEmbedUrlOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) GetDashboardEmbedUrlRequest(i0 *quicksight.GetDashboardEmbedUrlInput) (r0 *request.Request, r1 *quicksight.GetDashboardEmbedUrlOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDashboardEmbedUrlRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.GetDashboardEmbedUrlOutput)
	return
}

func (d *QuickSightDouble) GetDashboardEmbedUrlWithContext(i0 context.Context, i1 *quicksight.GetDashboardEmbedUrlInput, i2 ...request.Option) (r0 *quicksight.GetDashboardEmbedUrlOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDashboardEmbedUrlWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.GetDashboardEmbedUrlOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeGetDashboardEmbedUrlWithContext(ctx context.Context, in *quicksight.GetDashboardEmbedUrlInput, _ ...request.Option) (*quicksight.GetDashboardEmbedUrlOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDashboardEmbedUrl cancelled", ctx.Err())
	default:
		return d.GetDashboardEmbedUrl(in)
	}
}

func (d *QuickSightDouble) ListDashboardVersions(i0 *quicksight.ListDashboardVersionsInput) (r0 *quicksight.ListDashboardVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDashboardVersions", i0)
	r0, _ = returns[0].(*quicksight.ListDashboardVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) ListDashboardVersionsPages(i0 *quicksight.ListDashboardVersionsInput, i1 func(*quicksight.ListDashboardVersionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDashboardVersionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *QuickSightDouble) fakeListDashboardVersionsPages(in *quicksight.ListDashboardVersionsInput, pager func(*quicksight.ListDashboardVersionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListDashboardVersions", paginators, in, pager)
}

func (d *QuickSightDouble) ListDashboardVersionsPagesWithContext(i0 context.Context, i1 *quicksight.ListDashboardVersionsInput, i2 func(*quicksight.ListDashboardVersionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDashboardVersionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *QuickSightDouble) fakeListDashboardVersionsPagesWithContext(ctx context.Context, in *quicksight.ListDashboardVersionsInput, pager func(*quicksight.ListDashboardVersionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListDashboardVersions", paginators, ctx, in, pager, options...)
}

func (d *QuickSightDouble) ListDashboardVersionsRequest(i0 *quicksight.ListDashboardVersionsInput) (r0 *request.Request, r1 *quicksight.ListDashboardVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDashboardVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.ListDashboardVersionsOutput)
	return
}

func (d *QuickSightDouble) ListDashboardVersionsWithContext(i0 context.Context, i1 *quicksight.ListDashboardVersionsInput, i2 ...request.Option) (r0 *quicksight.ListDashboardVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDashboardVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.ListDashboardVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeListDashboardVersionsWithContext(ctx context.Context, in *quicksight.ListDashboardVersionsInput, _ ...request.Option) (*quicksight.ListDashboardVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDashboardVersions cancelled", ctx.Err())
	default:
		return d.ListDashboardVersions(in)
	}
}

func (d *QuickSightDouble) ListDashboards(i0 *quicksight.ListDashboardsInput) (r0 *quicksight.ListDashboardsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDashboards", i0)
	r0, _ = returns[0].(*quicksight.ListDashboardsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) ListDashboardsPages(i0 *quicksight.ListDashboardsInput, i1 func(*quicksight.ListDashboardsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDashboardsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *QuickSightDouble) fakeListDashboardsPages(in *quicksight.ListDashboardsInput, pager func(*quicksight.ListDashboardsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListDashboards", paginators, in, pager)
}

func (d *QuickSightDouble) ListDashboardsPagesWithContext(i0 context.Context, i1 *quicksight.ListDashboardsInput, i2 func(*quicksight.ListDashboardsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDashboardsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *QuickSightDouble) fakeListDashboardsPagesWithContext(ctx context.Context, in *quicksight.ListDashboardsInput, pager func(*quicksight.ListDashboardsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListDashboards", paginators, ctx, in, pager, options...)
}

func (d *QuickSightDouble) ListDashboardsRequest(i0 *quicksight.ListDashboardsInput) (r0 *request.Request, r1 *quicksight.ListDashboardsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDashboardsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.ListDashboardsOutput)
	return
}

func (d *QuickSightDouble) ListDashboardsWithContext(i0 context.Context, i1 *quicksight.ListDashboardsInput, i2 ...request.Option) (r0 *quicksight.ListDashboardsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDashboardsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.ListDashboardsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeListDashboardsWithContext(ctx context.Context, in *quicksight.ListDashboardsInput, _ ...request.Option) (*quicksight.ListDashboardsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDashboards cancelled", ctx.Err())
	default:
		return d.ListDashboards(in)
	}
}

func (d *QuickSightDouble) ListDataSets(i0 *quicksight.ListDataSetsInput) (r0 *quicksight.ListDataSetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDataSets", i0)
	r0, _ = returns[0].(*quicksight.ListDataSetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) ListDataSetsPages(i0 *quicksight.ListDataSetsInput, i1 func(*quicksight.ListDataSetsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDataSetsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *QuickSightDouble) fakeListDataSetsPages(in *quicksight.ListDataSetsInput, pager func(*quicksight.ListDataSetsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListDataSets", paginators, in, pager)
}

func (d *QuickSightDouble) ListDataSetsPagesWithContext(i0 context.Context, i1 *quicksight.ListDataSetsInput, i2 func(*quicksight.ListDataSetsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDataSetsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *QuickSightDouble) fakeListDataSetsPagesWithContext(ctx context.Context, in *quicksight.ListDataSetsInput, pager func(*quicksight.ListDataSetsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListDataSets", paginators, ctx, in, pager, options...)
}

func (d *QuickSightDouble) ListDataSetsRequest(i0 *quicksight.ListDataSetsInput) (r0 *request.Request, r1 *quicksight.ListDataSetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDataSetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.ListDataSetsOutput)
	return
}

func (d *QuickSightDouble) ListDataSetsWithContext(i0 context.Context, i1 *quicksight.ListDataSetsInput, i2 ...request.Option) (r0 *quicksight.ListDataSetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDataSetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.ListDataSetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeListDataSetsWithContext(ctx context.Context, in *quicksight.ListDataSetsInput, _ ...request.Option) (*quicksight.ListDataSetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDataSets cancelled", ctx.Err())
	default:
		return d.ListDataSets(in)
	}
}

func (d *QuickSightDouble) ListDataSources(i0 *quicksight.ListDataSourcesInput) (r0 *quicksight.ListDataSourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDataSources", i0)
	r0, _ = returns[0].(*quicksight.ListDataSourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) ListDataSourcesPages(i0 *quicksight.ListDataSourcesInput, i1 func(*quicksight.ListDataSourcesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDataSourcesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *QuickSightDouble) fakeListDataSourcesPages(in *quicksight.ListDataSourcesInput, pager func(*quicksight.ListDataSourcesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListDataSources", paginators, in, pager)
}

func (d *QuickSightDouble) ListDataSourcesPagesWithContext(i0 context.Context, i1 *quicksight.ListDataSourcesInput, i2 func(*quicksight.ListDataSourcesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDataSourcesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *QuickSightDouble) fakeListDataSourcesPagesWithContext(ctx context.Context, in *quicksight.ListDataSourcesInput, pager func(*quicksight.ListDataSourcesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListDataSources", paginators, ctx, in, pager, options...)
}

func (d *QuickSightDouble) ListDataSourcesRequest(i0 *quicksight.ListDataSourcesInput) (r0 *request.Request, r1 *quicksight.ListDataSourcesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDataSourcesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.ListDataSourcesOutput)
	return
}

func (d *QuickSightDouble) ListDataSourcesWithContext(i0 context.Context, i1 *quicksight.ListDataSourcesInput, i2 ...request.Option) (r0 *quicksight.ListDataSourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDataSourcesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.ListDataSourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeListDataSourcesWithContext(ctx context.Context, in *quicksight.ListDataSourcesInput, _ ...request.Option) (*quicksight.ListDataSourcesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDataSources cancelled", ctx.Err())
	default:
		return d.ListDataSources(in)
	}
}

func (d *QuickSightDouble) ListGroupMemberships(i0 *quicksight.ListGroupMembershipsInput) (r0 *quicksight.ListGroupMembershipsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupMemberships", i0)
	r0, _ = returns[0].(*quicksight.ListGroupMembershipsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) ListGroupMembershipsRequest(i0 *quicksight.ListGroupMembershipsInput) (r0 *request.Request, r1 *quicksight.ListGroupMembershipsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupMembershipsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.ListGroupMembershipsOutput)
	return
}

func (d *QuickSightDouble) ListGroupMembershipsWithContext(i0 context.Context, i1 *quicksight.ListGroupMembershipsInput, i2 ...request.Option) (r0 *quicksight.ListGroupMembershipsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupMembershipsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.ListGroupMembershipsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeListGroupMembershipsWithContext(ctx context.Context, in *quicksight.ListGroupMembershipsInput, _ ...request.Option) (*quicksight.ListGroupMembershipsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListGroupMemberships cancelled", ctx.Err())
	default:
		return d.ListGroupMemberships(in)
	}
}

func (d *QuickSightDouble) ListGroups(i0 *quicksight.ListGroupsInput) (r0 *quicksight.ListGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroups", i0)
	r0, _ = returns[0].(*quicksight.ListGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) ListGroupsRequest(i0 *quicksight.ListGroupsInput) (r0 *request.Request, r1 *quicksight.ListGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.ListGroupsOutput)
	return
}

func (d *QuickSightDouble) ListGroupsWithContext(i0 context.Context, i1 *quicksight.ListGroupsInput, i2 ...request.Option) (r0 *quicksight.ListGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.ListGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeListGroupsWithContext(ctx context.Context, in *quicksight.ListGroupsInput, _ ...request.Option) (*quicksight.ListGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListGroups cancelled", ctx.Err())
	default:
		return d.ListGroups(in)
	}
}

func (d *QuickSightDouble) ListIAMPolicyAssignments(i0 *quicksight.ListIAMPolicyAssignmentsInput) (r0 *quicksight.ListIAMPolicyAssignmentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIAMPolicyAssignments", i0)
	r0, _ = returns[0].(*quicksight.ListIAMPolicyAssignmentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) ListIAMPolicyAssignmentsForUser(i0 *quicksight.ListIAMPolicyAssignmentsForUserInput) (r0 *quicksight.ListIAMPolicyAssignmentsForUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIAMPolicyAssignmentsForUser", i0)
	r0, _ = returns[0].(*quicksight.ListIAMPolicyAssignmentsForUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) ListIAMPolicyAssignmentsForUserRequest(i0 *quicksight.ListIAMPolicyAssignmentsForUserInput) (r0 *request.Request, r1 *quicksight.ListIAMPolicyAssignmentsForUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIAMPolicyAssignmentsForUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.ListIAMPolicyAssignmentsForUserOutput)
	return
}

func (d *QuickSightDouble) ListIAMPolicyAssignmentsForUserWithContext(i0 context.Context, i1 *quicksight.ListIAMPolicyAssignmentsForUserInput, i2 ...request.Option) (r0 *quicksight.ListIAMPolicyAssignmentsForUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIAMPolicyAssignmentsForUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.ListIAMPolicyAssignmentsForUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeListIAMPolicyAssignmentsForUserWithContext(ctx context.Context, in *quicksight.ListIAMPolicyAssignmentsForUserInput, _ ...request.Option) (*quicksight.ListIAMPolicyAssignmentsForUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListIAMPolicyAssignmentsForUser cancelled", ctx.Err())
	default:
		return d.ListIAMPolicyAssignmentsForUser(in)
	}
}

func (d *QuickSightDouble) ListIAMPolicyAssignmentsRequest(i0 *quicksight.ListIAMPolicyAssignmentsInput) (r0 *request.Request, r1 *quicksight.ListIAMPolicyAssignmentsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIAMPolicyAssignmentsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.ListIAMPolicyAssignmentsOutput)
	return
}

func (d *QuickSightDouble) ListIAMPolicyAssignmentsWithContext(i0 context.Context, i1 *quicksight.ListIAMPolicyAssignmentsInput, i2 ...request.Option) (r0 *quicksight.ListIAMPolicyAssignmentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIAMPolicyAssignmentsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.ListIAMPolicyAssignmentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeListIAMPolicyAssignmentsWithContext(ctx context.Context, in *quicksight.ListIAMPolicyAssignmentsInput, _ ...request.Option) (*quicksight.ListIAMPolicyAssignmentsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListIAMPolicyAssignments cancelled", ctx.Err())
	default:
		return d.ListIAMPolicyAssignments(in)
	}
}

func (d *QuickSightDouble) ListIngestions(i0 *quicksight.ListIngestionsInput) (r0 *quicksight.ListIngestionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIngestions", i0)
	r0, _ = returns[0].(*quicksight.ListIngestionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) ListIngestionsPages(i0 *quicksight.ListIngestionsInput, i1 func(*quicksight.ListIngestionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIngestionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *QuickSightDouble) fakeListIngestionsPages(in *quicksight.ListIngestionsInput, pager func(*quicksight.ListIngestionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListIngestions", paginators, in, pager)
}

func (d *QuickSightDouble) ListIngestionsPagesWithContext(i0 context.Context, i1 *quicksight.ListIngestionsInput, i2 func(*quicksight.ListIngestionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIngestionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *QuickSightDouble) fakeListIngestionsPagesWithContext(ctx context.Context, in *quicksight.ListIngestionsInput, pager func(*quicksight.ListIngestionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListIngestions", paginators, ctx, in, pager, options...)
}

func (d *QuickSightDouble) ListIngestionsRequest(i0 *quicksight.ListIngestionsInput) (r0 *request.Request, r1 *quicksight.ListIngestionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIngestionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.ListIngestionsOutput)
	return
}

func (d *QuickSightDouble) ListIngestionsWithContext(i0 context.Context, i1 *quicksight.ListIngestionsInput, i2 ...request.Option) (r0 *quicksight.ListIngestionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIngestionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.ListIngestionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeListIngestionsWithContext(ctx context.Context, in *quicksight.ListIngestionsInput, _ ...request.Option) (*quicksight.ListIngestionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListIngestions cancelled", ctx.Err())
	default:
		return d.ListIngestions(in)
	}
}

func (d *QuickSightDouble) ListTagsForResource(i0 *quicksight.ListTagsForResourceInput) (r0 *quicksight.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*quicksight.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) ListTagsForResourceRequest(i0 *quicksight.ListTagsForResourceInput) (r0 *request.Request, r1 *quicksight.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.ListTagsForResourceOutput)
	return
}

func (d *QuickSightDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *quicksight.ListTagsForResourceInput, i2 ...request.Option) (r0 *quicksight.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *quicksight.ListTagsForResourceInput, _ ...request.Option) (*quicksight.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *QuickSightDouble) ListTemplateAliases(i0 *quicksight.ListTemplateAliasesInput) (r0 *quicksight.ListTemplateAliasesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTemplateAliases", i0)
	r0, _ = returns[0].(*quicksight.ListTemplateAliasesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) ListTemplateAliasesPages(i0 *quicksight.ListTemplateAliasesInput, i1 func(*quicksight.ListTemplateAliasesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTemplateAliasesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *QuickSightDouble) fakeListTemplateAliasesPages(in *quicksight.ListTemplateAliasesInput, pager func(*quicksight.ListTemplateAliasesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTemplateAliases", paginators, in, pager)
}

func (d *QuickSightDouble) ListTemplateAliasesPagesWithContext(i0 context.Context, i1 *quicksight.ListTemplateAliasesInput, i2 func(*quicksight.ListTemplateAliasesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTemplateAliasesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *QuickSightDouble) fakeListTemplateAliasesPagesWithContext(ctx context.Context, in *quicksight.ListTemplateAliasesInput, pager func(*quicksight.ListTemplateAliasesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTemplateAliases", paginators, ctx, in, pager, options...)
}

func (d *QuickSightDouble) ListTemplateAliasesRequest(i0 *quicksight.ListTemplateAliasesInput) (r0 *request.Request, r1 *quicksight.ListTemplateAliasesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTemplateAliasesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.ListTemplateAliasesOutput)
	return
}

func (d *QuickSightDouble) ListTemplateAliasesWithContext(i0 context.Context, i1 *quicksight.ListTemplateAliasesInput, i2 ...request.Option) (r0 *quicksight.ListTemplateAliasesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTemplateAliasesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.ListTemplateAliasesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeListTemplateAliasesWithContext(ctx context.Context, in *quicksight.ListTemplateAliasesInput, _ ...request.Option) (*quicksight.ListTemplateAliasesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTemplateAliases cancelled", ctx.Err())
	default:
		return d.ListTemplateAliases(in)
	}
}

func (d *QuickSightDouble) ListTemplateVersions(i0 *quicksight.ListTemplateVersionsInput) (r0 *quicksight.ListTemplateVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTemplateVersions", i0)
	r0, _ = returns[0].(*quicksight.ListTemplateVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) ListTemplateVersionsPages(i0 *quicksight.ListTemplateVersionsInput, i1 func(*quicksight.ListTemplateVersionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTemplateVersionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *QuickSightDouble) fakeListTemplateVersionsPages(in *quicksight.ListTemplateVersionsInput, pager func(*quicksight.ListTemplateVersionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTemplateVersions", paginators, in, pager)
}

func (d *QuickSightDouble) ListTemplateVersionsPagesWithContext(i0 context.Context, i1 *quicksight.ListTemplateVersionsInput, i2 func(*quicksight.ListTemplateVersionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTemplateVersionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *QuickSightDouble) fakeListTemplateVersionsPagesWithContext(ctx context.Context, in *quicksight.ListTemplateVersionsInput, pager func(*quicksight.ListTemplateVersionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTemplateVersions", paginators, ctx, in, pager, options...)
}

func (d *QuickSightDouble) ListTemplateVersionsRequest(i0 *quicksight.ListTemplateVersionsInput) (r0 *request.Request, r1 *quicksight.ListTemplateVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTemplateVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.ListTemplateVersionsOutput)
	return
}

func (d *QuickSightDouble) ListTemplateVersionsWithContext(i0 context.Context, i1 *quicksight.ListTemplateVersionsInput, i2 ...request.Option) (r0 *quicksight.ListTemplateVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTemplateVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.ListTemplateVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeListTemplateVersionsWithContext(ctx context.Context, in *quicksight.ListTemplateVersionsInput, _ ...request.Option) (*quicksight.ListTemplateVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTemplateVersions cancelled", ctx.Err())
	default:
		return d.ListTemplateVersions(in)
	}
}

func (d *QuickSightDouble) ListTemplates(i0 *quicksight.ListTemplatesInput) (r0 *quicksight.ListTemplatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTemplates", i0)
	r0, _ = returns[0].(*quicksight.ListTemplatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) ListTemplatesPages(i0 *quicksight.ListTemplatesInput, i1 func(*quicksight.ListTemplatesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTemplatesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *QuickSightDouble) fakeListTemplatesPages(in *quicksight.ListTemplatesInput, pager func(*quicksight.ListTemplatesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTemplates", paginators, in, pager)
}

func (d *QuickSightDouble) ListTemplatesPagesWithContext(i0 context.Context, i1 *quicksight.ListTemplatesInput, i2 func(*quicksight.ListTemplatesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTemplatesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *QuickSightDouble) fakeListTemplatesPagesWithContext(ctx context.Context, in *quicksight.ListTemplatesInput, pager func(*quicksight.ListTemplatesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTemplates", paginators, ctx, in, pager, options...)
}

func (d *QuickSightDouble) ListTemplatesRequest(i0 *quicksight.ListTemplatesInput) (r0 *request.Request, r1 *quicksight.ListTemplatesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTemplatesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.ListTemplatesOutput)
	return
}

func (d *QuickSightDouble) ListTemplatesWithContext(i0 context.Context, i1 *quicksight.ListTemplatesInput, i2 ...request.Option) (r0 *quicksight.ListTemplatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTemplatesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.ListTemplatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeListTemplatesWithContext(ctx context.Context, in *quicksight.ListTemplatesInput, _ ...request.Option) (*quicksight.ListTemplatesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTemplates cancelled", ctx.Err())
	default:
		return d.ListTemplates(in)
	}
}

func (d *QuickSightDouble) ListUserGroups(i0 *quicksight.ListUserGroupsInput) (r0 *quicksight.ListUserGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUserGroups", i0)
	r0, _ = returns[0].(*quicksight.ListUserGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) ListUserGroupsRequest(i0 *quicksight.ListUserGroupsInput) (r0 *request.Request, r1 *quicksight.ListUserGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUserGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.ListUserGroupsOutput)
	return
}

func (d *QuickSightDouble) ListUserGroupsWithContext(i0 context.Context, i1 *quicksight.ListUserGroupsInput, i2 ...request.Option) (r0 *quicksight.ListUserGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUserGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.ListUserGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeListUserGroupsWithContext(ctx context.Context, in *quicksight.ListUserGroupsInput, _ ...request.Option) (*quicksight.ListUserGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListUserGroups cancelled", ctx.Err())
	default:
		return d.ListUserGroups(in)
	}
}

func (d *QuickSightDouble) ListUsers(i0 *quicksight.ListUsersInput) (r0 *quicksight.ListUsersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUsers", i0)
	r0, _ = returns[0].(*quicksight.ListUsersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) ListUsersRequest(i0 *quicksight.ListUsersInput) (r0 *request.Request, r1 *quicksight.ListUsersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUsersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.ListUsersOutput)
	return
}

func (d *QuickSightDouble) ListUsersWithContext(i0 context.Context, i1 *quicksight.ListUsersInput, i2 ...request.Option) (r0 *quicksight.ListUsersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUsersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.ListUsersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeListUsersWithContext(ctx context.Context, in *quicksight.ListUsersInput, _ ...request.Option) (*quicksight.ListUsersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListUsers cancelled", ctx.Err())
	default:
		return d.ListUsers(in)
	}
}

func (d *QuickSightDouble) RegisterUser(i0 *quicksight.RegisterUserInput) (r0 *quicksight.RegisterUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterUser", i0)
	r0, _ = returns[0].(*quicksight.RegisterUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) RegisterUserRequest(i0 *quicksight.RegisterUserInput) (r0 *request.Request, r1 *quicksight.RegisterUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.RegisterUserOutput)
	return
}

func (d *QuickSightDouble) RegisterUserWithContext(i0 context.Context, i1 *quicksight.RegisterUserInput, i2 ...request.Option) (r0 *quicksight.RegisterUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.RegisterUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeRegisterUserWithContext(ctx context.Context, in *quicksight.RegisterUserInput, _ ...request.Option) (*quicksight.RegisterUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterUser cancelled", ctx.Err())
	default:
		return d.RegisterUser(in)
	}
}

func (d *QuickSightDouble) TagResource(i0 *quicksight.TagResourceInput) (r0 *quicksight.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*quicksight.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) TagResourceRequest(i0 *quicksight.TagResourceInput) (r0 *request.Request, r1 *quicksight.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.TagResourceOutput)
	return
}

func (d *QuickSightDouble) TagResourceWithContext(i0 context.Context, i1 *quicksight.TagResourceInput, i2 ...request.Option) (r0 *quicksight.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeTagResourceWithContext(ctx context.Context, in *quicksight.TagResourceInput, _ ...request.Option) (*quicksight.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *QuickSightDouble) UntagResource(i0 *quicksight.UntagResourceInput) (r0 *quicksight.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*quicksight.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) UntagResourceRequest(i0 *quicksight.UntagResourceInput) (r0 *request.Request, r1 *quicksight.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.UntagResourceOutput)
	return
}

func (d *QuickSightDouble) UntagResourceWithContext(i0 context.Context, i1 *quicksight.UntagResourceInput, i2 ...request.Option) (r0 *quicksight.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeUntagResourceWithContext(ctx context.Context, in *quicksight.UntagResourceInput, _ ...request.Option) (*quicksight.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *QuickSightDouble) UpdateDashboard(i0 *quicksight.UpdateDashboardInput) (r0 *quicksight.UpdateDashboardOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDashboard", i0)
	r0, _ = returns[0].(*quicksight.UpdateDashboardOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) UpdateDashboardPermissions(i0 *quicksight.UpdateDashboardPermissionsInput) (r0 *quicksight.UpdateDashboardPermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDashboardPermissions", i0)
	r0, _ = returns[0].(*quicksight.UpdateDashboardPermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) UpdateDashboardPermissionsRequest(i0 *quicksight.UpdateDashboardPermissionsInput) (r0 *request.Request, r1 *quicksight.UpdateDashboardPermissionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDashboardPermissionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.UpdateDashboardPermissionsOutput)
	return
}

func (d *QuickSightDouble) UpdateDashboardPermissionsWithContext(i0 context.Context, i1 *quicksight.UpdateDashboardPermissionsInput, i2 ...request.Option) (r0 *quicksight.UpdateDashboardPermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDashboardPermissionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.UpdateDashboardPermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeUpdateDashboardPermissionsWithContext(ctx context.Context, in *quicksight.UpdateDashboardPermissionsInput, _ ...request.Option) (*quicksight.UpdateDashboardPermissionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDashboardPermissions cancelled", ctx.Err())
	default:
		return d.UpdateDashboardPermissions(in)
	}
}

func (d *QuickSightDouble) UpdateDashboardPublishedVersion(i0 *quicksight.UpdateDashboardPublishedVersionInput) (r0 *quicksight.UpdateDashboardPublishedVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDashboardPublishedVersion", i0)
	r0, _ = returns[0].(*quicksight.UpdateDashboardPublishedVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) UpdateDashboardPublishedVersionRequest(i0 *quicksight.UpdateDashboardPublishedVersionInput) (r0 *request.Request, r1 *quicksight.UpdateDashboardPublishedVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDashboardPublishedVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.UpdateDashboardPublishedVersionOutput)
	return
}

func (d *QuickSightDouble) UpdateDashboardPublishedVersionWithContext(i0 context.Context, i1 *quicksight.UpdateDashboardPublishedVersionInput, i2 ...request.Option) (r0 *quicksight.UpdateDashboardPublishedVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDashboardPublishedVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.UpdateDashboardPublishedVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeUpdateDashboardPublishedVersionWithContext(ctx context.Context, in *quicksight.UpdateDashboardPublishedVersionInput, _ ...request.Option) (*quicksight.UpdateDashboardPublishedVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDashboardPublishedVersion cancelled", ctx.Err())
	default:
		return d.UpdateDashboardPublishedVersion(in)
	}
}

func (d *QuickSightDouble) UpdateDashboardRequest(i0 *quicksight.UpdateDashboardInput) (r0 *request.Request, r1 *quicksight.UpdateDashboardOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDashboardRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.UpdateDashboardOutput)
	return
}

func (d *QuickSightDouble) UpdateDashboardWithContext(i0 context.Context, i1 *quicksight.UpdateDashboardInput, i2 ...request.Option) (r0 *quicksight.UpdateDashboardOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDashboardWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.UpdateDashboardOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeUpdateDashboardWithContext(ctx context.Context, in *quicksight.UpdateDashboardInput, _ ...request.Option) (*quicksight.UpdateDashboardOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDashboard cancelled", ctx.Err())
	default:
		return d.UpdateDashboard(in)
	}
}

func (d *QuickSightDouble) UpdateDataSet(i0 *quicksight.UpdateDataSetInput) (r0 *quicksight.UpdateDataSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDataSet", i0)
	r0, _ = returns[0].(*quicksight.UpdateDataSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) UpdateDataSetPermissions(i0 *quicksight.UpdateDataSetPermissionsInput) (r0 *quicksight.UpdateDataSetPermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDataSetPermissions", i0)
	r0, _ = returns[0].(*quicksight.UpdateDataSetPermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) UpdateDataSetPermissionsRequest(i0 *quicksight.UpdateDataSetPermissionsInput) (r0 *request.Request, r1 *quicksight.UpdateDataSetPermissionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDataSetPermissionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.UpdateDataSetPermissionsOutput)
	return
}

func (d *QuickSightDouble) UpdateDataSetPermissionsWithContext(i0 context.Context, i1 *quicksight.UpdateDataSetPermissionsInput, i2 ...request.Option) (r0 *quicksight.UpdateDataSetPermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDataSetPermissionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.UpdateDataSetPermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeUpdateDataSetPermissionsWithContext(ctx context.Context, in *quicksight.UpdateDataSetPermissionsInput, _ ...request.Option) (*quicksight.UpdateDataSetPermissionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDataSetPermissions cancelled", ctx.Err())
	default:
		return d.UpdateDataSetPermissions(in)
	}
}

func (d *QuickSightDouble) UpdateDataSetRequest(i0 *quicksight.UpdateDataSetInput) (r0 *request.Request, r1 *quicksight.UpdateDataSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDataSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.UpdateDataSetOutput)
	return
}

func (d *QuickSightDouble) UpdateDataSetWithContext(i0 context.Context, i1 *quicksight.UpdateDataSetInput, i2 ...request.Option) (r0 *quicksight.UpdateDataSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDataSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.UpdateDataSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeUpdateDataSetWithContext(ctx context.Context, in *quicksight.UpdateDataSetInput, _ ...request.Option) (*quicksight.UpdateDataSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDataSet cancelled", ctx.Err())
	default:
		return d.UpdateDataSet(in)
	}
}

func (d *QuickSightDouble) UpdateDataSource(i0 *quicksight.UpdateDataSourceInput) (r0 *quicksight.UpdateDataSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDataSource", i0)
	r0, _ = returns[0].(*quicksight.UpdateDataSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) UpdateDataSourcePermissions(i0 *quicksight.UpdateDataSourcePermissionsInput) (r0 *quicksight.UpdateDataSourcePermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDataSourcePermissions", i0)
	r0, _ = returns[0].(*quicksight.UpdateDataSourcePermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) UpdateDataSourcePermissionsRequest(i0 *quicksight.UpdateDataSourcePermissionsInput) (r0 *request.Request, r1 *quicksight.UpdateDataSourcePermissionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDataSourcePermissionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.UpdateDataSourcePermissionsOutput)
	return
}

func (d *QuickSightDouble) UpdateDataSourcePermissionsWithContext(i0 context.Context, i1 *quicksight.UpdateDataSourcePermissionsInput, i2 ...request.Option) (r0 *quicksight.UpdateDataSourcePermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDataSourcePermissionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.UpdateDataSourcePermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeUpdateDataSourcePermissionsWithContext(ctx context.Context, in *quicksight.UpdateDataSourcePermissionsInput, _ ...request.Option) (*quicksight.UpdateDataSourcePermissionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDataSourcePermissions cancelled", ctx.Err())
	default:
		return d.UpdateDataSourcePermissions(in)
	}
}

func (d *QuickSightDouble) UpdateDataSourceRequest(i0 *quicksight.UpdateDataSourceInput) (r0 *request.Request, r1 *quicksight.UpdateDataSourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDataSourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.UpdateDataSourceOutput)
	return
}

func (d *QuickSightDouble) UpdateDataSourceWithContext(i0 context.Context, i1 *quicksight.UpdateDataSourceInput, i2 ...request.Option) (r0 *quicksight.UpdateDataSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDataSourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.UpdateDataSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeUpdateDataSourceWithContext(ctx context.Context, in *quicksight.UpdateDataSourceInput, _ ...request.Option) (*quicksight.UpdateDataSourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDataSource cancelled", ctx.Err())
	default:
		return d.UpdateDataSource(in)
	}
}

func (d *QuickSightDouble) UpdateGroup(i0 *quicksight.UpdateGroupInput) (r0 *quicksight.UpdateGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGroup", i0)
	r0, _ = returns[0].(*quicksight.UpdateGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) UpdateGroupRequest(i0 *quicksight.UpdateGroupInput) (r0 *request.Request, r1 *quicksight.UpdateGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.UpdateGroupOutput)
	return
}

func (d *QuickSightDouble) UpdateGroupWithContext(i0 context.Context, i1 *quicksight.UpdateGroupInput, i2 ...request.Option) (r0 *quicksight.UpdateGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.UpdateGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeUpdateGroupWithContext(ctx context.Context, in *quicksight.UpdateGroupInput, _ ...request.Option) (*quicksight.UpdateGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateGroup cancelled", ctx.Err())
	default:
		return d.UpdateGroup(in)
	}
}

func (d *QuickSightDouble) UpdateIAMPolicyAssignment(i0 *quicksight.UpdateIAMPolicyAssignmentInput) (r0 *quicksight.UpdateIAMPolicyAssignmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateIAMPolicyAssignment", i0)
	r0, _ = returns[0].(*quicksight.UpdateIAMPolicyAssignmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) UpdateIAMPolicyAssignmentRequest(i0 *quicksight.UpdateIAMPolicyAssignmentInput) (r0 *request.Request, r1 *quicksight.UpdateIAMPolicyAssignmentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateIAMPolicyAssignmentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.UpdateIAMPolicyAssignmentOutput)
	return
}

func (d *QuickSightDouble) UpdateIAMPolicyAssignmentWithContext(i0 context.Context, i1 *quicksight.UpdateIAMPolicyAssignmentInput, i2 ...request.Option) (r0 *quicksight.UpdateIAMPolicyAssignmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateIAMPolicyAssignmentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.UpdateIAMPolicyAssignmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeUpdateIAMPolicyAssignmentWithContext(ctx context.Context, in *quicksight.UpdateIAMPolicyAssignmentInput, _ ...request.Option) (*quicksight.UpdateIAMPolicyAssignmentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateIAMPolicyAssignment cancelled", ctx.Err())
	default:
		return d.UpdateIAMPolicyAssignment(in)
	}
}

func (d *QuickSightDouble) UpdateTemplate(i0 *quicksight.UpdateTemplateInput) (r0 *quicksight.UpdateTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTemplate", i0)
	r0, _ = returns[0].(*quicksight.UpdateTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) UpdateTemplateAlias(i0 *quicksight.UpdateTemplateAliasInput) (r0 *quicksight.UpdateTemplateAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTemplateAlias", i0)
	r0, _ = returns[0].(*quicksight.UpdateTemplateAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) UpdateTemplateAliasRequest(i0 *quicksight.UpdateTemplateAliasInput) (r0 *request.Request, r1 *quicksight.UpdateTemplateAliasOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTemplateAliasRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.UpdateTemplateAliasOutput)
	return
}

func (d *QuickSightDouble) UpdateTemplateAliasWithContext(i0 context.Context, i1 *quicksight.UpdateTemplateAliasInput, i2 ...request.Option) (r0 *quicksight.UpdateTemplateAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTemplateAliasWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.UpdateTemplateAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeUpdateTemplateAliasWithContext(ctx context.Context, in *quicksight.UpdateTemplateAliasInput, _ ...request.Option) (*quicksight.UpdateTemplateAliasOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateTemplateAlias cancelled", ctx.Err())
	default:
		return d.UpdateTemplateAlias(in)
	}
}

func (d *QuickSightDouble) UpdateTemplatePermissions(i0 *quicksight.UpdateTemplatePermissionsInput) (r0 *quicksight.UpdateTemplatePermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTemplatePermissions", i0)
	r0, _ = returns[0].(*quicksight.UpdateTemplatePermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) UpdateTemplatePermissionsRequest(i0 *quicksight.UpdateTemplatePermissionsInput) (r0 *request.Request, r1 *quicksight.UpdateTemplatePermissionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTemplatePermissionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.UpdateTemplatePermissionsOutput)
	return
}

func (d *QuickSightDouble) UpdateTemplatePermissionsWithContext(i0 context.Context, i1 *quicksight.UpdateTemplatePermissionsInput, i2 ...request.Option) (r0 *quicksight.UpdateTemplatePermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTemplatePermissionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.UpdateTemplatePermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeUpdateTemplatePermissionsWithContext(ctx context.Context, in *quicksight.UpdateTemplatePermissionsInput, _ ...request.Option) (*quicksight.UpdateTemplatePermissionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateTemplatePermissions cancelled", ctx.Err())
	default:
		return d.UpdateTemplatePermissions(in)
	}
}

func (d *QuickSightDouble) UpdateTemplateRequest(i0 *quicksight.UpdateTemplateInput) (r0 *request.Request, r1 *quicksight.UpdateTemplateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTemplateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.UpdateTemplateOutput)
	return
}

func (d *QuickSightDouble) UpdateTemplateWithContext(i0 context.Context, i1 *quicksight.UpdateTemplateInput, i2 ...request.Option) (r0 *quicksight.UpdateTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTemplateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.UpdateTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeUpdateTemplateWithContext(ctx context.Context, in *quicksight.UpdateTemplateInput, _ ...request.Option) (*quicksight.UpdateTemplateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateTemplate cancelled", ctx.Err())
	default:
		return d.UpdateTemplate(in)
	}
}

func (d *QuickSightDouble) UpdateUser(i0 *quicksight.UpdateUserInput) (r0 *quicksight.UpdateUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUser", i0)
	r0, _ = returns[0].(*quicksight.UpdateUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) UpdateUserRequest(i0 *quicksight.UpdateUserInput) (r0 *request.Request, r1 *quicksight.UpdateUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*quicksight.UpdateUserOutput)
	return
}

func (d *QuickSightDouble) UpdateUserWithContext(i0 context.Context, i1 *quicksight.UpdateUserInput, i2 ...request.Option) (r0 *quicksight.UpdateUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*quicksight.UpdateUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QuickSightDouble) fakeUpdateUserWithContext(ctx context.Context, in *quicksight.UpdateUserInput, _ ...request.Option) (*quicksight.UpdateUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateUser cancelled", ctx.Err())
	default:
		return d.UpdateUser(in)
	}
}
