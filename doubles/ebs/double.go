// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:12:27+11:00

// Package ebsdouble provides a TestDouble implementation of ebsiface.EBSAPI
package ebsdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/ebs"
	"github.com/aws/aws-sdk-go/service/ebs/ebsiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// EBSDouble is TestDouble for ebsiface.EBSAPI
type EBSDouble struct {
	ebsiface.EBSAPI
	*awsdouble.AWSTestDouble
}

// Constructor for EBSDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *EBSDouble {
	result := &EBSDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*ebsiface.EBSAPI)(nil), configurators...)
	return result
}

func (d *EBSDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *EBSDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "GetSnapshotBlockWithContext":
		return m.Fake(d.fakeGetSnapshotBlockWithContext)

	case "ListChangedBlocksPages":
		return m.Fake(d.fakeListChangedBlocksPages)

	case "ListChangedBlocksPagesWithContext":
		return m.Fake(d.fakeListChangedBlocksPagesWithContext)

	case "ListChangedBlocksWithContext":
		return m.Fake(d.fakeListChangedBlocksWithContext)

	case "ListSnapshotBlocksPages":
		return m.Fake(d.fakeListSnapshotBlocksPages)

	case "ListSnapshotBlocksPagesWithContext":
		return m.Fake(d.fakeListSnapshotBlocksPagesWithContext)

	case "ListSnapshotBlocksWithContext":
		return m.Fake(d.fakeListSnapshotBlocksWithContext)

	default:
		return nil
	}
}

func (d *EBSDouble) GetSnapshotBlock(i0 *ebs.GetSnapshotBlockInput) (r0 *ebs.GetSnapshotBlockOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSnapshotBlock", i0)
	r0, _ = returns[0].(*ebs.GetSnapshotBlockOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EBSDouble) GetSnapshotBlockRequest(i0 *ebs.GetSnapshotBlockInput) (r0 *request.Request, r1 *ebs.GetSnapshotBlockOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSnapshotBlockRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ebs.GetSnapshotBlockOutput)
	return
}

func (d *EBSDouble) GetSnapshotBlockWithContext(i0 context.Context, i1 *ebs.GetSnapshotBlockInput, i2 ...request.Option) (r0 *ebs.GetSnapshotBlockOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSnapshotBlockWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ebs.GetSnapshotBlockOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EBSDouble) fakeGetSnapshotBlockWithContext(ctx context.Context, in *ebs.GetSnapshotBlockInput, _ ...request.Option) (*ebs.GetSnapshotBlockOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetSnapshotBlock cancelled", ctx.Err())
	default:
		return d.GetSnapshotBlock(in)
	}
}

func (d *EBSDouble) ListChangedBlocks(i0 *ebs.ListChangedBlocksInput) (r0 *ebs.ListChangedBlocksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListChangedBlocks", i0)
	r0, _ = returns[0].(*ebs.ListChangedBlocksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EBSDouble) ListChangedBlocksPages(i0 *ebs.ListChangedBlocksInput, i1 func(*ebs.ListChangedBlocksOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListChangedBlocksPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EBSDouble) fakeListChangedBlocksPages(in *ebs.ListChangedBlocksInput, pager func(*ebs.ListChangedBlocksOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListChangedBlocks", paginators, in, pager)
}

func (d *EBSDouble) ListChangedBlocksPagesWithContext(i0 context.Context, i1 *ebs.ListChangedBlocksInput, i2 func(*ebs.ListChangedBlocksOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListChangedBlocksPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EBSDouble) fakeListChangedBlocksPagesWithContext(ctx context.Context, in *ebs.ListChangedBlocksInput, pager func(*ebs.ListChangedBlocksOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListChangedBlocks", paginators, ctx, in, pager, options...)
}

func (d *EBSDouble) ListChangedBlocksRequest(i0 *ebs.ListChangedBlocksInput) (r0 *request.Request, r1 *ebs.ListChangedBlocksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListChangedBlocksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ebs.ListChangedBlocksOutput)
	return
}

func (d *EBSDouble) ListChangedBlocksWithContext(i0 context.Context, i1 *ebs.ListChangedBlocksInput, i2 ...request.Option) (r0 *ebs.ListChangedBlocksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListChangedBlocksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ebs.ListChangedBlocksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EBSDouble) fakeListChangedBlocksWithContext(ctx context.Context, in *ebs.ListChangedBlocksInput, _ ...request.Option) (*ebs.ListChangedBlocksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListChangedBlocks cancelled", ctx.Err())
	default:
		return d.ListChangedBlocks(in)
	}
}

func (d *EBSDouble) ListSnapshotBlocks(i0 *ebs.ListSnapshotBlocksInput) (r0 *ebs.ListSnapshotBlocksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSnapshotBlocks", i0)
	r0, _ = returns[0].(*ebs.ListSnapshotBlocksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EBSDouble) ListSnapshotBlocksPages(i0 *ebs.ListSnapshotBlocksInput, i1 func(*ebs.ListSnapshotBlocksOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSnapshotBlocksPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EBSDouble) fakeListSnapshotBlocksPages(in *ebs.ListSnapshotBlocksInput, pager func(*ebs.ListSnapshotBlocksOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListSnapshotBlocks", paginators, in, pager)
}

func (d *EBSDouble) ListSnapshotBlocksPagesWithContext(i0 context.Context, i1 *ebs.ListSnapshotBlocksInput, i2 func(*ebs.ListSnapshotBlocksOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSnapshotBlocksPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EBSDouble) fakeListSnapshotBlocksPagesWithContext(ctx context.Context, in *ebs.ListSnapshotBlocksInput, pager func(*ebs.ListSnapshotBlocksOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListSnapshotBlocks", paginators, ctx, in, pager, options...)
}

func (d *EBSDouble) ListSnapshotBlocksRequest(i0 *ebs.ListSnapshotBlocksInput) (r0 *request.Request, r1 *ebs.ListSnapshotBlocksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSnapshotBlocksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ebs.ListSnapshotBlocksOutput)
	return
}

func (d *EBSDouble) ListSnapshotBlocksWithContext(i0 context.Context, i1 *ebs.ListSnapshotBlocksInput, i2 ...request.Option) (r0 *ebs.ListSnapshotBlocksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSnapshotBlocksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ebs.ListSnapshotBlocksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EBSDouble) fakeListSnapshotBlocksWithContext(ctx context.Context, in *ebs.ListSnapshotBlocksInput, _ ...request.Option) (*ebs.ListSnapshotBlocksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListSnapshotBlocks cancelled", ctx.Err())
	default:
		return d.ListSnapshotBlocks(in)
	}
}
