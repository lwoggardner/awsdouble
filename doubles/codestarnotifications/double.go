// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:11:55+11:00

// Package codestarnotificationsdouble provides a TestDouble implementation of codestarnotificationsiface.CodeStarNotificationsAPI
package codestarnotificationsdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/codestarnotifications"
	"github.com/aws/aws-sdk-go/service/codestarnotifications/codestarnotificationsiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// CodeStarNotificationsDouble is TestDouble for codestarnotificationsiface.CodeStarNotificationsAPI
type CodeStarNotificationsDouble struct {
	codestarnotificationsiface.CodeStarNotificationsAPI
	*awsdouble.AWSTestDouble
}

// Constructor for CodeStarNotificationsDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *CodeStarNotificationsDouble {
	result := &CodeStarNotificationsDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*codestarnotificationsiface.CodeStarNotificationsAPI)(nil), configurators...)
	return result
}

func (d *CodeStarNotificationsDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *CodeStarNotificationsDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CreateNotificationRuleWithContext":
		return m.Fake(d.fakeCreateNotificationRuleWithContext)

	case "DeleteNotificationRuleWithContext":
		return m.Fake(d.fakeDeleteNotificationRuleWithContext)

	case "DeleteTargetWithContext":
		return m.Fake(d.fakeDeleteTargetWithContext)

	case "DescribeNotificationRuleWithContext":
		return m.Fake(d.fakeDescribeNotificationRuleWithContext)

	case "ListEventTypesPages":
		return m.Fake(d.fakeListEventTypesPages)

	case "ListEventTypesPagesWithContext":
		return m.Fake(d.fakeListEventTypesPagesWithContext)

	case "ListEventTypesWithContext":
		return m.Fake(d.fakeListEventTypesWithContext)

	case "ListNotificationRulesPages":
		return m.Fake(d.fakeListNotificationRulesPages)

	case "ListNotificationRulesPagesWithContext":
		return m.Fake(d.fakeListNotificationRulesPagesWithContext)

	case "ListNotificationRulesWithContext":
		return m.Fake(d.fakeListNotificationRulesWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "ListTargetsPages":
		return m.Fake(d.fakeListTargetsPages)

	case "ListTargetsPagesWithContext":
		return m.Fake(d.fakeListTargetsPagesWithContext)

	case "ListTargetsWithContext":
		return m.Fake(d.fakeListTargetsWithContext)

	case "SubscribeWithContext":
		return m.Fake(d.fakeSubscribeWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UnsubscribeWithContext":
		return m.Fake(d.fakeUnsubscribeWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateNotificationRuleWithContext":
		return m.Fake(d.fakeUpdateNotificationRuleWithContext)

	default:
		return nil
	}
}

func (d *CodeStarNotificationsDouble) CreateNotificationRule(i0 *codestarnotifications.CreateNotificationRuleInput) (r0 *codestarnotifications.CreateNotificationRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNotificationRule", i0)
	r0, _ = returns[0].(*codestarnotifications.CreateNotificationRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarNotificationsDouble) CreateNotificationRuleRequest(i0 *codestarnotifications.CreateNotificationRuleInput) (r0 *request.Request, r1 *codestarnotifications.CreateNotificationRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNotificationRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codestarnotifications.CreateNotificationRuleOutput)
	return
}

func (d *CodeStarNotificationsDouble) CreateNotificationRuleWithContext(i0 context.Context, i1 *codestarnotifications.CreateNotificationRuleInput, i2 ...request.Option) (r0 *codestarnotifications.CreateNotificationRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNotificationRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codestarnotifications.CreateNotificationRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarNotificationsDouble) fakeCreateNotificationRuleWithContext(ctx context.Context, in *codestarnotifications.CreateNotificationRuleInput, _ ...request.Option) (*codestarnotifications.CreateNotificationRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateNotificationRule cancelled", ctx.Err())
	default:
		return d.CreateNotificationRule(in)
	}
}

func (d *CodeStarNotificationsDouble) DeleteNotificationRule(i0 *codestarnotifications.DeleteNotificationRuleInput) (r0 *codestarnotifications.DeleteNotificationRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNotificationRule", i0)
	r0, _ = returns[0].(*codestarnotifications.DeleteNotificationRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarNotificationsDouble) DeleteNotificationRuleRequest(i0 *codestarnotifications.DeleteNotificationRuleInput) (r0 *request.Request, r1 *codestarnotifications.DeleteNotificationRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNotificationRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codestarnotifications.DeleteNotificationRuleOutput)
	return
}

func (d *CodeStarNotificationsDouble) DeleteNotificationRuleWithContext(i0 context.Context, i1 *codestarnotifications.DeleteNotificationRuleInput, i2 ...request.Option) (r0 *codestarnotifications.DeleteNotificationRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNotificationRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codestarnotifications.DeleteNotificationRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarNotificationsDouble) fakeDeleteNotificationRuleWithContext(ctx context.Context, in *codestarnotifications.DeleteNotificationRuleInput, _ ...request.Option) (*codestarnotifications.DeleteNotificationRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteNotificationRule cancelled", ctx.Err())
	default:
		return d.DeleteNotificationRule(in)
	}
}

func (d *CodeStarNotificationsDouble) DeleteTarget(i0 *codestarnotifications.DeleteTargetInput) (r0 *codestarnotifications.DeleteTargetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTarget", i0)
	r0, _ = returns[0].(*codestarnotifications.DeleteTargetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarNotificationsDouble) DeleteTargetRequest(i0 *codestarnotifications.DeleteTargetInput) (r0 *request.Request, r1 *codestarnotifications.DeleteTargetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTargetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codestarnotifications.DeleteTargetOutput)
	return
}

func (d *CodeStarNotificationsDouble) DeleteTargetWithContext(i0 context.Context, i1 *codestarnotifications.DeleteTargetInput, i2 ...request.Option) (r0 *codestarnotifications.DeleteTargetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTargetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codestarnotifications.DeleteTargetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarNotificationsDouble) fakeDeleteTargetWithContext(ctx context.Context, in *codestarnotifications.DeleteTargetInput, _ ...request.Option) (*codestarnotifications.DeleteTargetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTarget cancelled", ctx.Err())
	default:
		return d.DeleteTarget(in)
	}
}

func (d *CodeStarNotificationsDouble) DescribeNotificationRule(i0 *codestarnotifications.DescribeNotificationRuleInput) (r0 *codestarnotifications.DescribeNotificationRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNotificationRule", i0)
	r0, _ = returns[0].(*codestarnotifications.DescribeNotificationRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarNotificationsDouble) DescribeNotificationRuleRequest(i0 *codestarnotifications.DescribeNotificationRuleInput) (r0 *request.Request, r1 *codestarnotifications.DescribeNotificationRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNotificationRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codestarnotifications.DescribeNotificationRuleOutput)
	return
}

func (d *CodeStarNotificationsDouble) DescribeNotificationRuleWithContext(i0 context.Context, i1 *codestarnotifications.DescribeNotificationRuleInput, i2 ...request.Option) (r0 *codestarnotifications.DescribeNotificationRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNotificationRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codestarnotifications.DescribeNotificationRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarNotificationsDouble) fakeDescribeNotificationRuleWithContext(ctx context.Context, in *codestarnotifications.DescribeNotificationRuleInput, _ ...request.Option) (*codestarnotifications.DescribeNotificationRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeNotificationRule cancelled", ctx.Err())
	default:
		return d.DescribeNotificationRule(in)
	}
}

func (d *CodeStarNotificationsDouble) ListEventTypes(i0 *codestarnotifications.ListEventTypesInput) (r0 *codestarnotifications.ListEventTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEventTypes", i0)
	r0, _ = returns[0].(*codestarnotifications.ListEventTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarNotificationsDouble) ListEventTypesPages(i0 *codestarnotifications.ListEventTypesInput, i1 func(*codestarnotifications.ListEventTypesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEventTypesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeStarNotificationsDouble) fakeListEventTypesPages(in *codestarnotifications.ListEventTypesInput, pager func(*codestarnotifications.ListEventTypesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListEventTypes", paginators, in, pager)
}

func (d *CodeStarNotificationsDouble) ListEventTypesPagesWithContext(i0 context.Context, i1 *codestarnotifications.ListEventTypesInput, i2 func(*codestarnotifications.ListEventTypesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEventTypesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeStarNotificationsDouble) fakeListEventTypesPagesWithContext(ctx context.Context, in *codestarnotifications.ListEventTypesInput, pager func(*codestarnotifications.ListEventTypesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListEventTypes", paginators, ctx, in, pager, options...)
}

func (d *CodeStarNotificationsDouble) ListEventTypesRequest(i0 *codestarnotifications.ListEventTypesInput) (r0 *request.Request, r1 *codestarnotifications.ListEventTypesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEventTypesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codestarnotifications.ListEventTypesOutput)
	return
}

func (d *CodeStarNotificationsDouble) ListEventTypesWithContext(i0 context.Context, i1 *codestarnotifications.ListEventTypesInput, i2 ...request.Option) (r0 *codestarnotifications.ListEventTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEventTypesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codestarnotifications.ListEventTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarNotificationsDouble) fakeListEventTypesWithContext(ctx context.Context, in *codestarnotifications.ListEventTypesInput, _ ...request.Option) (*codestarnotifications.ListEventTypesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListEventTypes cancelled", ctx.Err())
	default:
		return d.ListEventTypes(in)
	}
}

func (d *CodeStarNotificationsDouble) ListNotificationRules(i0 *codestarnotifications.ListNotificationRulesInput) (r0 *codestarnotifications.ListNotificationRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListNotificationRules", i0)
	r0, _ = returns[0].(*codestarnotifications.ListNotificationRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarNotificationsDouble) ListNotificationRulesPages(i0 *codestarnotifications.ListNotificationRulesInput, i1 func(*codestarnotifications.ListNotificationRulesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListNotificationRulesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeStarNotificationsDouble) fakeListNotificationRulesPages(in *codestarnotifications.ListNotificationRulesInput, pager func(*codestarnotifications.ListNotificationRulesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListNotificationRules", paginators, in, pager)
}

func (d *CodeStarNotificationsDouble) ListNotificationRulesPagesWithContext(i0 context.Context, i1 *codestarnotifications.ListNotificationRulesInput, i2 func(*codestarnotifications.ListNotificationRulesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListNotificationRulesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeStarNotificationsDouble) fakeListNotificationRulesPagesWithContext(ctx context.Context, in *codestarnotifications.ListNotificationRulesInput, pager func(*codestarnotifications.ListNotificationRulesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListNotificationRules", paginators, ctx, in, pager, options...)
}

func (d *CodeStarNotificationsDouble) ListNotificationRulesRequest(i0 *codestarnotifications.ListNotificationRulesInput) (r0 *request.Request, r1 *codestarnotifications.ListNotificationRulesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListNotificationRulesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codestarnotifications.ListNotificationRulesOutput)
	return
}

func (d *CodeStarNotificationsDouble) ListNotificationRulesWithContext(i0 context.Context, i1 *codestarnotifications.ListNotificationRulesInput, i2 ...request.Option) (r0 *codestarnotifications.ListNotificationRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListNotificationRulesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codestarnotifications.ListNotificationRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarNotificationsDouble) fakeListNotificationRulesWithContext(ctx context.Context, in *codestarnotifications.ListNotificationRulesInput, _ ...request.Option) (*codestarnotifications.ListNotificationRulesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListNotificationRules cancelled", ctx.Err())
	default:
		return d.ListNotificationRules(in)
	}
}

func (d *CodeStarNotificationsDouble) ListTagsForResource(i0 *codestarnotifications.ListTagsForResourceInput) (r0 *codestarnotifications.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*codestarnotifications.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarNotificationsDouble) ListTagsForResourceRequest(i0 *codestarnotifications.ListTagsForResourceInput) (r0 *request.Request, r1 *codestarnotifications.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codestarnotifications.ListTagsForResourceOutput)
	return
}

func (d *CodeStarNotificationsDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *codestarnotifications.ListTagsForResourceInput, i2 ...request.Option) (r0 *codestarnotifications.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codestarnotifications.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarNotificationsDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *codestarnotifications.ListTagsForResourceInput, _ ...request.Option) (*codestarnotifications.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *CodeStarNotificationsDouble) ListTargets(i0 *codestarnotifications.ListTargetsInput) (r0 *codestarnotifications.ListTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTargets", i0)
	r0, _ = returns[0].(*codestarnotifications.ListTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarNotificationsDouble) ListTargetsPages(i0 *codestarnotifications.ListTargetsInput, i1 func(*codestarnotifications.ListTargetsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTargetsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeStarNotificationsDouble) fakeListTargetsPages(in *codestarnotifications.ListTargetsInput, pager func(*codestarnotifications.ListTargetsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTargets", paginators, in, pager)
}

func (d *CodeStarNotificationsDouble) ListTargetsPagesWithContext(i0 context.Context, i1 *codestarnotifications.ListTargetsInput, i2 func(*codestarnotifications.ListTargetsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTargetsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeStarNotificationsDouble) fakeListTargetsPagesWithContext(ctx context.Context, in *codestarnotifications.ListTargetsInput, pager func(*codestarnotifications.ListTargetsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTargets", paginators, ctx, in, pager, options...)
}

func (d *CodeStarNotificationsDouble) ListTargetsRequest(i0 *codestarnotifications.ListTargetsInput) (r0 *request.Request, r1 *codestarnotifications.ListTargetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTargetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codestarnotifications.ListTargetsOutput)
	return
}

func (d *CodeStarNotificationsDouble) ListTargetsWithContext(i0 context.Context, i1 *codestarnotifications.ListTargetsInput, i2 ...request.Option) (r0 *codestarnotifications.ListTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTargetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codestarnotifications.ListTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarNotificationsDouble) fakeListTargetsWithContext(ctx context.Context, in *codestarnotifications.ListTargetsInput, _ ...request.Option) (*codestarnotifications.ListTargetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTargets cancelled", ctx.Err())
	default:
		return d.ListTargets(in)
	}
}

func (d *CodeStarNotificationsDouble) Subscribe(i0 *codestarnotifications.SubscribeInput) (r0 *codestarnotifications.SubscribeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("Subscribe", i0)
	r0, _ = returns[0].(*codestarnotifications.SubscribeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarNotificationsDouble) SubscribeRequest(i0 *codestarnotifications.SubscribeInput) (r0 *request.Request, r1 *codestarnotifications.SubscribeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SubscribeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codestarnotifications.SubscribeOutput)
	return
}

func (d *CodeStarNotificationsDouble) SubscribeWithContext(i0 context.Context, i1 *codestarnotifications.SubscribeInput, i2 ...request.Option) (r0 *codestarnotifications.SubscribeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SubscribeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codestarnotifications.SubscribeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarNotificationsDouble) fakeSubscribeWithContext(ctx context.Context, in *codestarnotifications.SubscribeInput, _ ...request.Option) (*codestarnotifications.SubscribeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "Subscribe cancelled", ctx.Err())
	default:
		return d.Subscribe(in)
	}
}

func (d *CodeStarNotificationsDouble) TagResource(i0 *codestarnotifications.TagResourceInput) (r0 *codestarnotifications.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*codestarnotifications.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarNotificationsDouble) TagResourceRequest(i0 *codestarnotifications.TagResourceInput) (r0 *request.Request, r1 *codestarnotifications.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codestarnotifications.TagResourceOutput)
	return
}

func (d *CodeStarNotificationsDouble) TagResourceWithContext(i0 context.Context, i1 *codestarnotifications.TagResourceInput, i2 ...request.Option) (r0 *codestarnotifications.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codestarnotifications.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarNotificationsDouble) fakeTagResourceWithContext(ctx context.Context, in *codestarnotifications.TagResourceInput, _ ...request.Option) (*codestarnotifications.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *CodeStarNotificationsDouble) Unsubscribe(i0 *codestarnotifications.UnsubscribeInput) (r0 *codestarnotifications.UnsubscribeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("Unsubscribe", i0)
	r0, _ = returns[0].(*codestarnotifications.UnsubscribeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarNotificationsDouble) UnsubscribeRequest(i0 *codestarnotifications.UnsubscribeInput) (r0 *request.Request, r1 *codestarnotifications.UnsubscribeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnsubscribeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codestarnotifications.UnsubscribeOutput)
	return
}

func (d *CodeStarNotificationsDouble) UnsubscribeWithContext(i0 context.Context, i1 *codestarnotifications.UnsubscribeInput, i2 ...request.Option) (r0 *codestarnotifications.UnsubscribeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnsubscribeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codestarnotifications.UnsubscribeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarNotificationsDouble) fakeUnsubscribeWithContext(ctx context.Context, in *codestarnotifications.UnsubscribeInput, _ ...request.Option) (*codestarnotifications.UnsubscribeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "Unsubscribe cancelled", ctx.Err())
	default:
		return d.Unsubscribe(in)
	}
}

func (d *CodeStarNotificationsDouble) UntagResource(i0 *codestarnotifications.UntagResourceInput) (r0 *codestarnotifications.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*codestarnotifications.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarNotificationsDouble) UntagResourceRequest(i0 *codestarnotifications.UntagResourceInput) (r0 *request.Request, r1 *codestarnotifications.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codestarnotifications.UntagResourceOutput)
	return
}

func (d *CodeStarNotificationsDouble) UntagResourceWithContext(i0 context.Context, i1 *codestarnotifications.UntagResourceInput, i2 ...request.Option) (r0 *codestarnotifications.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codestarnotifications.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarNotificationsDouble) fakeUntagResourceWithContext(ctx context.Context, in *codestarnotifications.UntagResourceInput, _ ...request.Option) (*codestarnotifications.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *CodeStarNotificationsDouble) UpdateNotificationRule(i0 *codestarnotifications.UpdateNotificationRuleInput) (r0 *codestarnotifications.UpdateNotificationRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateNotificationRule", i0)
	r0, _ = returns[0].(*codestarnotifications.UpdateNotificationRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarNotificationsDouble) UpdateNotificationRuleRequest(i0 *codestarnotifications.UpdateNotificationRuleInput) (r0 *request.Request, r1 *codestarnotifications.UpdateNotificationRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateNotificationRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codestarnotifications.UpdateNotificationRuleOutput)
	return
}

func (d *CodeStarNotificationsDouble) UpdateNotificationRuleWithContext(i0 context.Context, i1 *codestarnotifications.UpdateNotificationRuleInput, i2 ...request.Option) (r0 *codestarnotifications.UpdateNotificationRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateNotificationRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codestarnotifications.UpdateNotificationRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarNotificationsDouble) fakeUpdateNotificationRuleWithContext(ctx context.Context, in *codestarnotifications.UpdateNotificationRuleInput, _ ...request.Option) (*codestarnotifications.UpdateNotificationRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateNotificationRule cancelled", ctx.Err())
	default:
		return d.UpdateNotificationRule(in)
	}
}
