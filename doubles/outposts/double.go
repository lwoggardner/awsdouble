// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:14:15+11:00

// Package outpostsdouble provides a TestDouble implementation of outpostsiface.OutpostsAPI
package outpostsdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/outposts"
	"github.com/aws/aws-sdk-go/service/outposts/outpostsiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// OutpostsDouble is TestDouble for outpostsiface.OutpostsAPI
type OutpostsDouble struct {
	outpostsiface.OutpostsAPI
	*awsdouble.AWSTestDouble
}

// Constructor for OutpostsDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *OutpostsDouble {
	result := &OutpostsDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*outpostsiface.OutpostsAPI)(nil), configurators...)
	return result
}

func (d *OutpostsDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *OutpostsDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CreateOutpostWithContext":
		return m.Fake(d.fakeCreateOutpostWithContext)

	case "GetOutpostInstanceTypesWithContext":
		return m.Fake(d.fakeGetOutpostInstanceTypesWithContext)

	case "GetOutpostWithContext":
		return m.Fake(d.fakeGetOutpostWithContext)

	case "ListOutpostsPages":
		return m.Fake(d.fakeListOutpostsPages)

	case "ListOutpostsPagesWithContext":
		return m.Fake(d.fakeListOutpostsPagesWithContext)

	case "ListOutpostsWithContext":
		return m.Fake(d.fakeListOutpostsWithContext)

	case "ListSitesPages":
		return m.Fake(d.fakeListSitesPages)

	case "ListSitesPagesWithContext":
		return m.Fake(d.fakeListSitesPagesWithContext)

	case "ListSitesWithContext":
		return m.Fake(d.fakeListSitesWithContext)

	default:
		return nil
	}
}

func (d *OutpostsDouble) CreateOutpost(i0 *outposts.CreateOutpostInput) (r0 *outposts.CreateOutpostOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateOutpost", i0)
	r0, _ = returns[0].(*outposts.CreateOutpostOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OutpostsDouble) CreateOutpostRequest(i0 *outposts.CreateOutpostInput) (r0 *request.Request, r1 *outposts.CreateOutpostOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateOutpostRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*outposts.CreateOutpostOutput)
	return
}

func (d *OutpostsDouble) CreateOutpostWithContext(i0 context.Context, i1 *outposts.CreateOutpostInput, i2 ...request.Option) (r0 *outposts.CreateOutpostOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateOutpostWithContext", i0, i1, i2)
	r0, _ = returns[0].(*outposts.CreateOutpostOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OutpostsDouble) fakeCreateOutpostWithContext(ctx context.Context, in *outposts.CreateOutpostInput, _ ...request.Option) (*outposts.CreateOutpostOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateOutpost cancelled", ctx.Err())
	default:
		return d.CreateOutpost(in)
	}
}

func (d *OutpostsDouble) GetOutpost(i0 *outposts.GetOutpostInput) (r0 *outposts.GetOutpostOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOutpost", i0)
	r0, _ = returns[0].(*outposts.GetOutpostOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OutpostsDouble) GetOutpostInstanceTypes(i0 *outposts.GetOutpostInstanceTypesInput) (r0 *outposts.GetOutpostInstanceTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOutpostInstanceTypes", i0)
	r0, _ = returns[0].(*outposts.GetOutpostInstanceTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OutpostsDouble) GetOutpostInstanceTypesRequest(i0 *outposts.GetOutpostInstanceTypesInput) (r0 *request.Request, r1 *outposts.GetOutpostInstanceTypesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOutpostInstanceTypesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*outposts.GetOutpostInstanceTypesOutput)
	return
}

func (d *OutpostsDouble) GetOutpostInstanceTypesWithContext(i0 context.Context, i1 *outposts.GetOutpostInstanceTypesInput, i2 ...request.Option) (r0 *outposts.GetOutpostInstanceTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOutpostInstanceTypesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*outposts.GetOutpostInstanceTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OutpostsDouble) fakeGetOutpostInstanceTypesWithContext(ctx context.Context, in *outposts.GetOutpostInstanceTypesInput, _ ...request.Option) (*outposts.GetOutpostInstanceTypesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetOutpostInstanceTypes cancelled", ctx.Err())
	default:
		return d.GetOutpostInstanceTypes(in)
	}
}

func (d *OutpostsDouble) GetOutpostRequest(i0 *outposts.GetOutpostInput) (r0 *request.Request, r1 *outposts.GetOutpostOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOutpostRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*outposts.GetOutpostOutput)
	return
}

func (d *OutpostsDouble) GetOutpostWithContext(i0 context.Context, i1 *outposts.GetOutpostInput, i2 ...request.Option) (r0 *outposts.GetOutpostOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOutpostWithContext", i0, i1, i2)
	r0, _ = returns[0].(*outposts.GetOutpostOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OutpostsDouble) fakeGetOutpostWithContext(ctx context.Context, in *outposts.GetOutpostInput, _ ...request.Option) (*outposts.GetOutpostOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetOutpost cancelled", ctx.Err())
	default:
		return d.GetOutpost(in)
	}
}

func (d *OutpostsDouble) ListOutposts(i0 *outposts.ListOutpostsInput) (r0 *outposts.ListOutpostsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOutposts", i0)
	r0, _ = returns[0].(*outposts.ListOutpostsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OutpostsDouble) ListOutpostsPages(i0 *outposts.ListOutpostsInput, i1 func(*outposts.ListOutpostsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOutpostsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *OutpostsDouble) fakeListOutpostsPages(in *outposts.ListOutpostsInput, pager func(*outposts.ListOutpostsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListOutposts", paginators, in, pager)
}

func (d *OutpostsDouble) ListOutpostsPagesWithContext(i0 context.Context, i1 *outposts.ListOutpostsInput, i2 func(*outposts.ListOutpostsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOutpostsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *OutpostsDouble) fakeListOutpostsPagesWithContext(ctx context.Context, in *outposts.ListOutpostsInput, pager func(*outposts.ListOutpostsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListOutposts", paginators, ctx, in, pager, options...)
}

func (d *OutpostsDouble) ListOutpostsRequest(i0 *outposts.ListOutpostsInput) (r0 *request.Request, r1 *outposts.ListOutpostsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOutpostsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*outposts.ListOutpostsOutput)
	return
}

func (d *OutpostsDouble) ListOutpostsWithContext(i0 context.Context, i1 *outposts.ListOutpostsInput, i2 ...request.Option) (r0 *outposts.ListOutpostsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOutpostsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*outposts.ListOutpostsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OutpostsDouble) fakeListOutpostsWithContext(ctx context.Context, in *outposts.ListOutpostsInput, _ ...request.Option) (*outposts.ListOutpostsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListOutposts cancelled", ctx.Err())
	default:
		return d.ListOutposts(in)
	}
}

func (d *OutpostsDouble) ListSites(i0 *outposts.ListSitesInput) (r0 *outposts.ListSitesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSites", i0)
	r0, _ = returns[0].(*outposts.ListSitesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OutpostsDouble) ListSitesPages(i0 *outposts.ListSitesInput, i1 func(*outposts.ListSitesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSitesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *OutpostsDouble) fakeListSitesPages(in *outposts.ListSitesInput, pager func(*outposts.ListSitesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListSites", paginators, in, pager)
}

func (d *OutpostsDouble) ListSitesPagesWithContext(i0 context.Context, i1 *outposts.ListSitesInput, i2 func(*outposts.ListSitesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSitesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *OutpostsDouble) fakeListSitesPagesWithContext(ctx context.Context, in *outposts.ListSitesInput, pager func(*outposts.ListSitesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListSites", paginators, ctx, in, pager, options...)
}

func (d *OutpostsDouble) ListSitesRequest(i0 *outposts.ListSitesInput) (r0 *request.Request, r1 *outposts.ListSitesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSitesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*outposts.ListSitesOutput)
	return
}

func (d *OutpostsDouble) ListSitesWithContext(i0 context.Context, i1 *outposts.ListSitesInput, i2 ...request.Option) (r0 *outposts.ListSitesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSitesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*outposts.ListSitesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OutpostsDouble) fakeListSitesWithContext(ctx context.Context, in *outposts.ListSitesInput, _ ...request.Option) (*outposts.ListSitesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListSites cancelled", ctx.Err())
	default:
		return d.ListSites(in)
	}
}
