// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:14:44+11:00

// Package route53resolverdouble provides a TestDouble implementation of route53resolveriface.Route53ResolverAPI
package route53resolverdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/route53resolver"
	"github.com/aws/aws-sdk-go/service/route53resolver/route53resolveriface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// Route53ResolverDouble is TestDouble for route53resolveriface.Route53ResolverAPI
type Route53ResolverDouble struct {
	route53resolveriface.Route53ResolverAPI
	*awsdouble.AWSTestDouble
}

// Constructor for Route53ResolverDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *Route53ResolverDouble {
	result := &Route53ResolverDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*route53resolveriface.Route53ResolverAPI)(nil), configurators...)
	return result
}

func (d *Route53ResolverDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *Route53ResolverDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AssociateResolverEndpointIpAddressWithContext":
		return m.Fake(d.fakeAssociateResolverEndpointIpAddressWithContext)

	case "AssociateResolverRuleWithContext":
		return m.Fake(d.fakeAssociateResolverRuleWithContext)

	case "CreateResolverEndpointWithContext":
		return m.Fake(d.fakeCreateResolverEndpointWithContext)

	case "CreateResolverRuleWithContext":
		return m.Fake(d.fakeCreateResolverRuleWithContext)

	case "DeleteResolverEndpointWithContext":
		return m.Fake(d.fakeDeleteResolverEndpointWithContext)

	case "DeleteResolverRuleWithContext":
		return m.Fake(d.fakeDeleteResolverRuleWithContext)

	case "DisassociateResolverEndpointIpAddressWithContext":
		return m.Fake(d.fakeDisassociateResolverEndpointIpAddressWithContext)

	case "DisassociateResolverRuleWithContext":
		return m.Fake(d.fakeDisassociateResolverRuleWithContext)

	case "GetResolverEndpointWithContext":
		return m.Fake(d.fakeGetResolverEndpointWithContext)

	case "GetResolverRuleAssociationWithContext":
		return m.Fake(d.fakeGetResolverRuleAssociationWithContext)

	case "GetResolverRulePolicyWithContext":
		return m.Fake(d.fakeGetResolverRulePolicyWithContext)

	case "GetResolverRuleWithContext":
		return m.Fake(d.fakeGetResolverRuleWithContext)

	case "ListResolverEndpointIpAddressesPages":
		return m.Fake(d.fakeListResolverEndpointIpAddressesPages)

	case "ListResolverEndpointIpAddressesPagesWithContext":
		return m.Fake(d.fakeListResolverEndpointIpAddressesPagesWithContext)

	case "ListResolverEndpointIpAddressesWithContext":
		return m.Fake(d.fakeListResolverEndpointIpAddressesWithContext)

	case "ListResolverEndpointsPages":
		return m.Fake(d.fakeListResolverEndpointsPages)

	case "ListResolverEndpointsPagesWithContext":
		return m.Fake(d.fakeListResolverEndpointsPagesWithContext)

	case "ListResolverEndpointsWithContext":
		return m.Fake(d.fakeListResolverEndpointsWithContext)

	case "ListResolverRuleAssociationsPages":
		return m.Fake(d.fakeListResolverRuleAssociationsPages)

	case "ListResolverRuleAssociationsPagesWithContext":
		return m.Fake(d.fakeListResolverRuleAssociationsPagesWithContext)

	case "ListResolverRuleAssociationsWithContext":
		return m.Fake(d.fakeListResolverRuleAssociationsWithContext)

	case "ListResolverRulesPages":
		return m.Fake(d.fakeListResolverRulesPages)

	case "ListResolverRulesPagesWithContext":
		return m.Fake(d.fakeListResolverRulesPagesWithContext)

	case "ListResolverRulesWithContext":
		return m.Fake(d.fakeListResolverRulesWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "PutResolverRulePolicyWithContext":
		return m.Fake(d.fakePutResolverRulePolicyWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateResolverEndpointWithContext":
		return m.Fake(d.fakeUpdateResolverEndpointWithContext)

	case "UpdateResolverRuleWithContext":
		return m.Fake(d.fakeUpdateResolverRuleWithContext)

	default:
		return nil
	}
}

func (d *Route53ResolverDouble) AssociateResolverEndpointIpAddress(i0 *route53resolver.AssociateResolverEndpointIpAddressInput) (r0 *route53resolver.AssociateResolverEndpointIpAddressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateResolverEndpointIpAddress", i0)
	r0, _ = returns[0].(*route53resolver.AssociateResolverEndpointIpAddressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) AssociateResolverEndpointIpAddressRequest(i0 *route53resolver.AssociateResolverEndpointIpAddressInput) (r0 *request.Request, r1 *route53resolver.AssociateResolverEndpointIpAddressOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateResolverEndpointIpAddressRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53resolver.AssociateResolverEndpointIpAddressOutput)
	return
}

func (d *Route53ResolverDouble) AssociateResolverEndpointIpAddressWithContext(i0 context.Context, i1 *route53resolver.AssociateResolverEndpointIpAddressInput, i2 ...request.Option) (r0 *route53resolver.AssociateResolverEndpointIpAddressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateResolverEndpointIpAddressWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53resolver.AssociateResolverEndpointIpAddressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) fakeAssociateResolverEndpointIpAddressWithContext(ctx context.Context, in *route53resolver.AssociateResolverEndpointIpAddressInput, _ ...request.Option) (*route53resolver.AssociateResolverEndpointIpAddressOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateResolverEndpointIpAddress cancelled", ctx.Err())
	default:
		return d.AssociateResolverEndpointIpAddress(in)
	}
}

func (d *Route53ResolverDouble) AssociateResolverRule(i0 *route53resolver.AssociateResolverRuleInput) (r0 *route53resolver.AssociateResolverRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateResolverRule", i0)
	r0, _ = returns[0].(*route53resolver.AssociateResolverRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) AssociateResolverRuleRequest(i0 *route53resolver.AssociateResolverRuleInput) (r0 *request.Request, r1 *route53resolver.AssociateResolverRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateResolverRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53resolver.AssociateResolverRuleOutput)
	return
}

func (d *Route53ResolverDouble) AssociateResolverRuleWithContext(i0 context.Context, i1 *route53resolver.AssociateResolverRuleInput, i2 ...request.Option) (r0 *route53resolver.AssociateResolverRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateResolverRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53resolver.AssociateResolverRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) fakeAssociateResolverRuleWithContext(ctx context.Context, in *route53resolver.AssociateResolverRuleInput, _ ...request.Option) (*route53resolver.AssociateResolverRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateResolverRule cancelled", ctx.Err())
	default:
		return d.AssociateResolverRule(in)
	}
}

func (d *Route53ResolverDouble) CreateResolverEndpoint(i0 *route53resolver.CreateResolverEndpointInput) (r0 *route53resolver.CreateResolverEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateResolverEndpoint", i0)
	r0, _ = returns[0].(*route53resolver.CreateResolverEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) CreateResolverEndpointRequest(i0 *route53resolver.CreateResolverEndpointInput) (r0 *request.Request, r1 *route53resolver.CreateResolverEndpointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateResolverEndpointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53resolver.CreateResolverEndpointOutput)
	return
}

func (d *Route53ResolverDouble) CreateResolverEndpointWithContext(i0 context.Context, i1 *route53resolver.CreateResolverEndpointInput, i2 ...request.Option) (r0 *route53resolver.CreateResolverEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateResolverEndpointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53resolver.CreateResolverEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) fakeCreateResolverEndpointWithContext(ctx context.Context, in *route53resolver.CreateResolverEndpointInput, _ ...request.Option) (*route53resolver.CreateResolverEndpointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateResolverEndpoint cancelled", ctx.Err())
	default:
		return d.CreateResolverEndpoint(in)
	}
}

func (d *Route53ResolverDouble) CreateResolverRule(i0 *route53resolver.CreateResolverRuleInput) (r0 *route53resolver.CreateResolverRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateResolverRule", i0)
	r0, _ = returns[0].(*route53resolver.CreateResolverRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) CreateResolverRuleRequest(i0 *route53resolver.CreateResolverRuleInput) (r0 *request.Request, r1 *route53resolver.CreateResolverRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateResolverRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53resolver.CreateResolverRuleOutput)
	return
}

func (d *Route53ResolverDouble) CreateResolverRuleWithContext(i0 context.Context, i1 *route53resolver.CreateResolverRuleInput, i2 ...request.Option) (r0 *route53resolver.CreateResolverRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateResolverRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53resolver.CreateResolverRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) fakeCreateResolverRuleWithContext(ctx context.Context, in *route53resolver.CreateResolverRuleInput, _ ...request.Option) (*route53resolver.CreateResolverRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateResolverRule cancelled", ctx.Err())
	default:
		return d.CreateResolverRule(in)
	}
}

func (d *Route53ResolverDouble) DeleteResolverEndpoint(i0 *route53resolver.DeleteResolverEndpointInput) (r0 *route53resolver.DeleteResolverEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResolverEndpoint", i0)
	r0, _ = returns[0].(*route53resolver.DeleteResolverEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) DeleteResolverEndpointRequest(i0 *route53resolver.DeleteResolverEndpointInput) (r0 *request.Request, r1 *route53resolver.DeleteResolverEndpointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResolverEndpointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53resolver.DeleteResolverEndpointOutput)
	return
}

func (d *Route53ResolverDouble) DeleteResolverEndpointWithContext(i0 context.Context, i1 *route53resolver.DeleteResolverEndpointInput, i2 ...request.Option) (r0 *route53resolver.DeleteResolverEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResolverEndpointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53resolver.DeleteResolverEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) fakeDeleteResolverEndpointWithContext(ctx context.Context, in *route53resolver.DeleteResolverEndpointInput, _ ...request.Option) (*route53resolver.DeleteResolverEndpointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteResolverEndpoint cancelled", ctx.Err())
	default:
		return d.DeleteResolverEndpoint(in)
	}
}

func (d *Route53ResolverDouble) DeleteResolverRule(i0 *route53resolver.DeleteResolverRuleInput) (r0 *route53resolver.DeleteResolverRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResolverRule", i0)
	r0, _ = returns[0].(*route53resolver.DeleteResolverRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) DeleteResolverRuleRequest(i0 *route53resolver.DeleteResolverRuleInput) (r0 *request.Request, r1 *route53resolver.DeleteResolverRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResolverRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53resolver.DeleteResolverRuleOutput)
	return
}

func (d *Route53ResolverDouble) DeleteResolverRuleWithContext(i0 context.Context, i1 *route53resolver.DeleteResolverRuleInput, i2 ...request.Option) (r0 *route53resolver.DeleteResolverRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResolverRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53resolver.DeleteResolverRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) fakeDeleteResolverRuleWithContext(ctx context.Context, in *route53resolver.DeleteResolverRuleInput, _ ...request.Option) (*route53resolver.DeleteResolverRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteResolverRule cancelled", ctx.Err())
	default:
		return d.DeleteResolverRule(in)
	}
}

func (d *Route53ResolverDouble) DisassociateResolverEndpointIpAddress(i0 *route53resolver.DisassociateResolverEndpointIpAddressInput) (r0 *route53resolver.DisassociateResolverEndpointIpAddressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateResolverEndpointIpAddress", i0)
	r0, _ = returns[0].(*route53resolver.DisassociateResolverEndpointIpAddressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) DisassociateResolverEndpointIpAddressRequest(i0 *route53resolver.DisassociateResolverEndpointIpAddressInput) (r0 *request.Request, r1 *route53resolver.DisassociateResolverEndpointIpAddressOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateResolverEndpointIpAddressRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53resolver.DisassociateResolverEndpointIpAddressOutput)
	return
}

func (d *Route53ResolverDouble) DisassociateResolverEndpointIpAddressWithContext(i0 context.Context, i1 *route53resolver.DisassociateResolverEndpointIpAddressInput, i2 ...request.Option) (r0 *route53resolver.DisassociateResolverEndpointIpAddressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateResolverEndpointIpAddressWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53resolver.DisassociateResolverEndpointIpAddressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) fakeDisassociateResolverEndpointIpAddressWithContext(ctx context.Context, in *route53resolver.DisassociateResolverEndpointIpAddressInput, _ ...request.Option) (*route53resolver.DisassociateResolverEndpointIpAddressOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateResolverEndpointIpAddress cancelled", ctx.Err())
	default:
		return d.DisassociateResolverEndpointIpAddress(in)
	}
}

func (d *Route53ResolverDouble) DisassociateResolverRule(i0 *route53resolver.DisassociateResolverRuleInput) (r0 *route53resolver.DisassociateResolverRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateResolverRule", i0)
	r0, _ = returns[0].(*route53resolver.DisassociateResolverRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) DisassociateResolverRuleRequest(i0 *route53resolver.DisassociateResolverRuleInput) (r0 *request.Request, r1 *route53resolver.DisassociateResolverRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateResolverRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53resolver.DisassociateResolverRuleOutput)
	return
}

func (d *Route53ResolverDouble) DisassociateResolverRuleWithContext(i0 context.Context, i1 *route53resolver.DisassociateResolverRuleInput, i2 ...request.Option) (r0 *route53resolver.DisassociateResolverRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateResolverRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53resolver.DisassociateResolverRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) fakeDisassociateResolverRuleWithContext(ctx context.Context, in *route53resolver.DisassociateResolverRuleInput, _ ...request.Option) (*route53resolver.DisassociateResolverRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateResolverRule cancelled", ctx.Err())
	default:
		return d.DisassociateResolverRule(in)
	}
}

func (d *Route53ResolverDouble) GetResolverEndpoint(i0 *route53resolver.GetResolverEndpointInput) (r0 *route53resolver.GetResolverEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResolverEndpoint", i0)
	r0, _ = returns[0].(*route53resolver.GetResolverEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) GetResolverEndpointRequest(i0 *route53resolver.GetResolverEndpointInput) (r0 *request.Request, r1 *route53resolver.GetResolverEndpointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResolverEndpointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53resolver.GetResolverEndpointOutput)
	return
}

func (d *Route53ResolverDouble) GetResolverEndpointWithContext(i0 context.Context, i1 *route53resolver.GetResolverEndpointInput, i2 ...request.Option) (r0 *route53resolver.GetResolverEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResolverEndpointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53resolver.GetResolverEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) fakeGetResolverEndpointWithContext(ctx context.Context, in *route53resolver.GetResolverEndpointInput, _ ...request.Option) (*route53resolver.GetResolverEndpointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetResolverEndpoint cancelled", ctx.Err())
	default:
		return d.GetResolverEndpoint(in)
	}
}

func (d *Route53ResolverDouble) GetResolverRule(i0 *route53resolver.GetResolverRuleInput) (r0 *route53resolver.GetResolverRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResolverRule", i0)
	r0, _ = returns[0].(*route53resolver.GetResolverRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) GetResolverRuleAssociation(i0 *route53resolver.GetResolverRuleAssociationInput) (r0 *route53resolver.GetResolverRuleAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResolverRuleAssociation", i0)
	r0, _ = returns[0].(*route53resolver.GetResolverRuleAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) GetResolverRuleAssociationRequest(i0 *route53resolver.GetResolverRuleAssociationInput) (r0 *request.Request, r1 *route53resolver.GetResolverRuleAssociationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResolverRuleAssociationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53resolver.GetResolverRuleAssociationOutput)
	return
}

func (d *Route53ResolverDouble) GetResolverRuleAssociationWithContext(i0 context.Context, i1 *route53resolver.GetResolverRuleAssociationInput, i2 ...request.Option) (r0 *route53resolver.GetResolverRuleAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResolverRuleAssociationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53resolver.GetResolverRuleAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) fakeGetResolverRuleAssociationWithContext(ctx context.Context, in *route53resolver.GetResolverRuleAssociationInput, _ ...request.Option) (*route53resolver.GetResolverRuleAssociationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetResolverRuleAssociation cancelled", ctx.Err())
	default:
		return d.GetResolverRuleAssociation(in)
	}
}

func (d *Route53ResolverDouble) GetResolverRulePolicy(i0 *route53resolver.GetResolverRulePolicyInput) (r0 *route53resolver.GetResolverRulePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResolverRulePolicy", i0)
	r0, _ = returns[0].(*route53resolver.GetResolverRulePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) GetResolverRulePolicyRequest(i0 *route53resolver.GetResolverRulePolicyInput) (r0 *request.Request, r1 *route53resolver.GetResolverRulePolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResolverRulePolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53resolver.GetResolverRulePolicyOutput)
	return
}

func (d *Route53ResolverDouble) GetResolverRulePolicyWithContext(i0 context.Context, i1 *route53resolver.GetResolverRulePolicyInput, i2 ...request.Option) (r0 *route53resolver.GetResolverRulePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResolverRulePolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53resolver.GetResolverRulePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) fakeGetResolverRulePolicyWithContext(ctx context.Context, in *route53resolver.GetResolverRulePolicyInput, _ ...request.Option) (*route53resolver.GetResolverRulePolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetResolverRulePolicy cancelled", ctx.Err())
	default:
		return d.GetResolverRulePolicy(in)
	}
}

func (d *Route53ResolverDouble) GetResolverRuleRequest(i0 *route53resolver.GetResolverRuleInput) (r0 *request.Request, r1 *route53resolver.GetResolverRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResolverRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53resolver.GetResolverRuleOutput)
	return
}

func (d *Route53ResolverDouble) GetResolverRuleWithContext(i0 context.Context, i1 *route53resolver.GetResolverRuleInput, i2 ...request.Option) (r0 *route53resolver.GetResolverRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResolverRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53resolver.GetResolverRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) fakeGetResolverRuleWithContext(ctx context.Context, in *route53resolver.GetResolverRuleInput, _ ...request.Option) (*route53resolver.GetResolverRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetResolverRule cancelled", ctx.Err())
	default:
		return d.GetResolverRule(in)
	}
}

func (d *Route53ResolverDouble) ListResolverEndpointIpAddresses(i0 *route53resolver.ListResolverEndpointIpAddressesInput) (r0 *route53resolver.ListResolverEndpointIpAddressesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResolverEndpointIpAddresses", i0)
	r0, _ = returns[0].(*route53resolver.ListResolverEndpointIpAddressesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) ListResolverEndpointIpAddressesPages(i0 *route53resolver.ListResolverEndpointIpAddressesInput, i1 func(*route53resolver.ListResolverEndpointIpAddressesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResolverEndpointIpAddressesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *Route53ResolverDouble) fakeListResolverEndpointIpAddressesPages(in *route53resolver.ListResolverEndpointIpAddressesInput, pager func(*route53resolver.ListResolverEndpointIpAddressesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListResolverEndpointIpAddresses", paginators, in, pager)
}

func (d *Route53ResolverDouble) ListResolverEndpointIpAddressesPagesWithContext(i0 context.Context, i1 *route53resolver.ListResolverEndpointIpAddressesInput, i2 func(*route53resolver.ListResolverEndpointIpAddressesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResolverEndpointIpAddressesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *Route53ResolverDouble) fakeListResolverEndpointIpAddressesPagesWithContext(ctx context.Context, in *route53resolver.ListResolverEndpointIpAddressesInput, pager func(*route53resolver.ListResolverEndpointIpAddressesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListResolverEndpointIpAddresses", paginators, ctx, in, pager, options...)
}

func (d *Route53ResolverDouble) ListResolverEndpointIpAddressesRequest(i0 *route53resolver.ListResolverEndpointIpAddressesInput) (r0 *request.Request, r1 *route53resolver.ListResolverEndpointIpAddressesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResolverEndpointIpAddressesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53resolver.ListResolverEndpointIpAddressesOutput)
	return
}

func (d *Route53ResolverDouble) ListResolverEndpointIpAddressesWithContext(i0 context.Context, i1 *route53resolver.ListResolverEndpointIpAddressesInput, i2 ...request.Option) (r0 *route53resolver.ListResolverEndpointIpAddressesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResolverEndpointIpAddressesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53resolver.ListResolverEndpointIpAddressesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) fakeListResolverEndpointIpAddressesWithContext(ctx context.Context, in *route53resolver.ListResolverEndpointIpAddressesInput, _ ...request.Option) (*route53resolver.ListResolverEndpointIpAddressesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListResolverEndpointIpAddresses cancelled", ctx.Err())
	default:
		return d.ListResolverEndpointIpAddresses(in)
	}
}

func (d *Route53ResolverDouble) ListResolverEndpoints(i0 *route53resolver.ListResolverEndpointsInput) (r0 *route53resolver.ListResolverEndpointsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResolverEndpoints", i0)
	r0, _ = returns[0].(*route53resolver.ListResolverEndpointsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) ListResolverEndpointsPages(i0 *route53resolver.ListResolverEndpointsInput, i1 func(*route53resolver.ListResolverEndpointsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResolverEndpointsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *Route53ResolverDouble) fakeListResolverEndpointsPages(in *route53resolver.ListResolverEndpointsInput, pager func(*route53resolver.ListResolverEndpointsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListResolverEndpoints", paginators, in, pager)
}

func (d *Route53ResolverDouble) ListResolverEndpointsPagesWithContext(i0 context.Context, i1 *route53resolver.ListResolverEndpointsInput, i2 func(*route53resolver.ListResolverEndpointsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResolverEndpointsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *Route53ResolverDouble) fakeListResolverEndpointsPagesWithContext(ctx context.Context, in *route53resolver.ListResolverEndpointsInput, pager func(*route53resolver.ListResolverEndpointsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListResolverEndpoints", paginators, ctx, in, pager, options...)
}

func (d *Route53ResolverDouble) ListResolverEndpointsRequest(i0 *route53resolver.ListResolverEndpointsInput) (r0 *request.Request, r1 *route53resolver.ListResolverEndpointsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResolverEndpointsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53resolver.ListResolverEndpointsOutput)
	return
}

func (d *Route53ResolverDouble) ListResolverEndpointsWithContext(i0 context.Context, i1 *route53resolver.ListResolverEndpointsInput, i2 ...request.Option) (r0 *route53resolver.ListResolverEndpointsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResolverEndpointsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53resolver.ListResolverEndpointsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) fakeListResolverEndpointsWithContext(ctx context.Context, in *route53resolver.ListResolverEndpointsInput, _ ...request.Option) (*route53resolver.ListResolverEndpointsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListResolverEndpoints cancelled", ctx.Err())
	default:
		return d.ListResolverEndpoints(in)
	}
}

func (d *Route53ResolverDouble) ListResolverRuleAssociations(i0 *route53resolver.ListResolverRuleAssociationsInput) (r0 *route53resolver.ListResolverRuleAssociationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResolverRuleAssociations", i0)
	r0, _ = returns[0].(*route53resolver.ListResolverRuleAssociationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) ListResolverRuleAssociationsPages(i0 *route53resolver.ListResolverRuleAssociationsInput, i1 func(*route53resolver.ListResolverRuleAssociationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResolverRuleAssociationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *Route53ResolverDouble) fakeListResolverRuleAssociationsPages(in *route53resolver.ListResolverRuleAssociationsInput, pager func(*route53resolver.ListResolverRuleAssociationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListResolverRuleAssociations", paginators, in, pager)
}

func (d *Route53ResolverDouble) ListResolverRuleAssociationsPagesWithContext(i0 context.Context, i1 *route53resolver.ListResolverRuleAssociationsInput, i2 func(*route53resolver.ListResolverRuleAssociationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResolverRuleAssociationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *Route53ResolverDouble) fakeListResolverRuleAssociationsPagesWithContext(ctx context.Context, in *route53resolver.ListResolverRuleAssociationsInput, pager func(*route53resolver.ListResolverRuleAssociationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListResolverRuleAssociations", paginators, ctx, in, pager, options...)
}

func (d *Route53ResolverDouble) ListResolverRuleAssociationsRequest(i0 *route53resolver.ListResolverRuleAssociationsInput) (r0 *request.Request, r1 *route53resolver.ListResolverRuleAssociationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResolverRuleAssociationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53resolver.ListResolverRuleAssociationsOutput)
	return
}

func (d *Route53ResolverDouble) ListResolverRuleAssociationsWithContext(i0 context.Context, i1 *route53resolver.ListResolverRuleAssociationsInput, i2 ...request.Option) (r0 *route53resolver.ListResolverRuleAssociationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResolverRuleAssociationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53resolver.ListResolverRuleAssociationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) fakeListResolverRuleAssociationsWithContext(ctx context.Context, in *route53resolver.ListResolverRuleAssociationsInput, _ ...request.Option) (*route53resolver.ListResolverRuleAssociationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListResolverRuleAssociations cancelled", ctx.Err())
	default:
		return d.ListResolverRuleAssociations(in)
	}
}

func (d *Route53ResolverDouble) ListResolverRules(i0 *route53resolver.ListResolverRulesInput) (r0 *route53resolver.ListResolverRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResolverRules", i0)
	r0, _ = returns[0].(*route53resolver.ListResolverRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) ListResolverRulesPages(i0 *route53resolver.ListResolverRulesInput, i1 func(*route53resolver.ListResolverRulesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResolverRulesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *Route53ResolverDouble) fakeListResolverRulesPages(in *route53resolver.ListResolverRulesInput, pager func(*route53resolver.ListResolverRulesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListResolverRules", paginators, in, pager)
}

func (d *Route53ResolverDouble) ListResolverRulesPagesWithContext(i0 context.Context, i1 *route53resolver.ListResolverRulesInput, i2 func(*route53resolver.ListResolverRulesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResolverRulesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *Route53ResolverDouble) fakeListResolverRulesPagesWithContext(ctx context.Context, in *route53resolver.ListResolverRulesInput, pager func(*route53resolver.ListResolverRulesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListResolverRules", paginators, ctx, in, pager, options...)
}

func (d *Route53ResolverDouble) ListResolverRulesRequest(i0 *route53resolver.ListResolverRulesInput) (r0 *request.Request, r1 *route53resolver.ListResolverRulesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResolverRulesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53resolver.ListResolverRulesOutput)
	return
}

func (d *Route53ResolverDouble) ListResolverRulesWithContext(i0 context.Context, i1 *route53resolver.ListResolverRulesInput, i2 ...request.Option) (r0 *route53resolver.ListResolverRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResolverRulesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53resolver.ListResolverRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) fakeListResolverRulesWithContext(ctx context.Context, in *route53resolver.ListResolverRulesInput, _ ...request.Option) (*route53resolver.ListResolverRulesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListResolverRules cancelled", ctx.Err())
	default:
		return d.ListResolverRules(in)
	}
}

func (d *Route53ResolverDouble) ListTagsForResource(i0 *route53resolver.ListTagsForResourceInput) (r0 *route53resolver.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*route53resolver.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) ListTagsForResourceRequest(i0 *route53resolver.ListTagsForResourceInput) (r0 *request.Request, r1 *route53resolver.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53resolver.ListTagsForResourceOutput)
	return
}

func (d *Route53ResolverDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *route53resolver.ListTagsForResourceInput, i2 ...request.Option) (r0 *route53resolver.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53resolver.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *route53resolver.ListTagsForResourceInput, _ ...request.Option) (*route53resolver.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *Route53ResolverDouble) PutResolverRulePolicy(i0 *route53resolver.PutResolverRulePolicyInput) (r0 *route53resolver.PutResolverRulePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutResolverRulePolicy", i0)
	r0, _ = returns[0].(*route53resolver.PutResolverRulePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) PutResolverRulePolicyRequest(i0 *route53resolver.PutResolverRulePolicyInput) (r0 *request.Request, r1 *route53resolver.PutResolverRulePolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutResolverRulePolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53resolver.PutResolverRulePolicyOutput)
	return
}

func (d *Route53ResolverDouble) PutResolverRulePolicyWithContext(i0 context.Context, i1 *route53resolver.PutResolverRulePolicyInput, i2 ...request.Option) (r0 *route53resolver.PutResolverRulePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutResolverRulePolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53resolver.PutResolverRulePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) fakePutResolverRulePolicyWithContext(ctx context.Context, in *route53resolver.PutResolverRulePolicyInput, _ ...request.Option) (*route53resolver.PutResolverRulePolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutResolverRulePolicy cancelled", ctx.Err())
	default:
		return d.PutResolverRulePolicy(in)
	}
}

func (d *Route53ResolverDouble) TagResource(i0 *route53resolver.TagResourceInput) (r0 *route53resolver.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*route53resolver.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) TagResourceRequest(i0 *route53resolver.TagResourceInput) (r0 *request.Request, r1 *route53resolver.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53resolver.TagResourceOutput)
	return
}

func (d *Route53ResolverDouble) TagResourceWithContext(i0 context.Context, i1 *route53resolver.TagResourceInput, i2 ...request.Option) (r0 *route53resolver.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53resolver.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) fakeTagResourceWithContext(ctx context.Context, in *route53resolver.TagResourceInput, _ ...request.Option) (*route53resolver.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *Route53ResolverDouble) UntagResource(i0 *route53resolver.UntagResourceInput) (r0 *route53resolver.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*route53resolver.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) UntagResourceRequest(i0 *route53resolver.UntagResourceInput) (r0 *request.Request, r1 *route53resolver.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53resolver.UntagResourceOutput)
	return
}

func (d *Route53ResolverDouble) UntagResourceWithContext(i0 context.Context, i1 *route53resolver.UntagResourceInput, i2 ...request.Option) (r0 *route53resolver.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53resolver.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) fakeUntagResourceWithContext(ctx context.Context, in *route53resolver.UntagResourceInput, _ ...request.Option) (*route53resolver.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *Route53ResolverDouble) UpdateResolverEndpoint(i0 *route53resolver.UpdateResolverEndpointInput) (r0 *route53resolver.UpdateResolverEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateResolverEndpoint", i0)
	r0, _ = returns[0].(*route53resolver.UpdateResolverEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) UpdateResolverEndpointRequest(i0 *route53resolver.UpdateResolverEndpointInput) (r0 *request.Request, r1 *route53resolver.UpdateResolverEndpointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateResolverEndpointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53resolver.UpdateResolverEndpointOutput)
	return
}

func (d *Route53ResolverDouble) UpdateResolverEndpointWithContext(i0 context.Context, i1 *route53resolver.UpdateResolverEndpointInput, i2 ...request.Option) (r0 *route53resolver.UpdateResolverEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateResolverEndpointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53resolver.UpdateResolverEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) fakeUpdateResolverEndpointWithContext(ctx context.Context, in *route53resolver.UpdateResolverEndpointInput, _ ...request.Option) (*route53resolver.UpdateResolverEndpointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateResolverEndpoint cancelled", ctx.Err())
	default:
		return d.UpdateResolverEndpoint(in)
	}
}

func (d *Route53ResolverDouble) UpdateResolverRule(i0 *route53resolver.UpdateResolverRuleInput) (r0 *route53resolver.UpdateResolverRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateResolverRule", i0)
	r0, _ = returns[0].(*route53resolver.UpdateResolverRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) UpdateResolverRuleRequest(i0 *route53resolver.UpdateResolverRuleInput) (r0 *request.Request, r1 *route53resolver.UpdateResolverRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateResolverRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53resolver.UpdateResolverRuleOutput)
	return
}

func (d *Route53ResolverDouble) UpdateResolverRuleWithContext(i0 context.Context, i1 *route53resolver.UpdateResolverRuleInput, i2 ...request.Option) (r0 *route53resolver.UpdateResolverRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateResolverRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53resolver.UpdateResolverRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53ResolverDouble) fakeUpdateResolverRuleWithContext(ctx context.Context, in *route53resolver.UpdateResolverRuleInput, _ ...request.Option) (*route53resolver.UpdateResolverRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateResolverRule cancelled", ctx.Err())
	default:
		return d.UpdateResolverRule(in)
	}
}
