// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:11:59+11:00

// Package cognitosyncdouble provides a TestDouble implementation of cognitosynciface.CognitoSyncAPI
package cognitosyncdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/cognitosync"
	"github.com/aws/aws-sdk-go/service/cognitosync/cognitosynciface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// CognitoSyncDouble is TestDouble for cognitosynciface.CognitoSyncAPI
type CognitoSyncDouble struct {
	cognitosynciface.CognitoSyncAPI
	*awsdouble.AWSTestDouble
}

// Constructor for CognitoSyncDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *CognitoSyncDouble {
	result := &CognitoSyncDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*cognitosynciface.CognitoSyncAPI)(nil), configurators...)
	return result
}

func (d *CognitoSyncDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *CognitoSyncDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "BulkPublishWithContext":
		return m.Fake(d.fakeBulkPublishWithContext)

	case "DeleteDatasetWithContext":
		return m.Fake(d.fakeDeleteDatasetWithContext)

	case "DescribeDatasetWithContext":
		return m.Fake(d.fakeDescribeDatasetWithContext)

	case "DescribeIdentityPoolUsageWithContext":
		return m.Fake(d.fakeDescribeIdentityPoolUsageWithContext)

	case "DescribeIdentityUsageWithContext":
		return m.Fake(d.fakeDescribeIdentityUsageWithContext)

	case "GetBulkPublishDetailsWithContext":
		return m.Fake(d.fakeGetBulkPublishDetailsWithContext)

	case "GetCognitoEventsWithContext":
		return m.Fake(d.fakeGetCognitoEventsWithContext)

	case "GetIdentityPoolConfigurationWithContext":
		return m.Fake(d.fakeGetIdentityPoolConfigurationWithContext)

	case "ListDatasetsWithContext":
		return m.Fake(d.fakeListDatasetsWithContext)

	case "ListIdentityPoolUsageWithContext":
		return m.Fake(d.fakeListIdentityPoolUsageWithContext)

	case "ListRecordsWithContext":
		return m.Fake(d.fakeListRecordsWithContext)

	case "RegisterDeviceWithContext":
		return m.Fake(d.fakeRegisterDeviceWithContext)

	case "SetCognitoEventsWithContext":
		return m.Fake(d.fakeSetCognitoEventsWithContext)

	case "SetIdentityPoolConfigurationWithContext":
		return m.Fake(d.fakeSetIdentityPoolConfigurationWithContext)

	case "SubscribeToDatasetWithContext":
		return m.Fake(d.fakeSubscribeToDatasetWithContext)

	case "UnsubscribeFromDatasetWithContext":
		return m.Fake(d.fakeUnsubscribeFromDatasetWithContext)

	case "UpdateRecordsWithContext":
		return m.Fake(d.fakeUpdateRecordsWithContext)

	default:
		return nil
	}
}

func (d *CognitoSyncDouble) BulkPublish(i0 *cognitosync.BulkPublishInput) (r0 *cognitosync.BulkPublishOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BulkPublish", i0)
	r0, _ = returns[0].(*cognitosync.BulkPublishOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoSyncDouble) BulkPublishRequest(i0 *cognitosync.BulkPublishInput) (r0 *request.Request, r1 *cognitosync.BulkPublishOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BulkPublishRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitosync.BulkPublishOutput)
	return
}

func (d *CognitoSyncDouble) BulkPublishWithContext(i0 context.Context, i1 *cognitosync.BulkPublishInput, i2 ...request.Option) (r0 *cognitosync.BulkPublishOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BulkPublishWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitosync.BulkPublishOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoSyncDouble) fakeBulkPublishWithContext(ctx context.Context, in *cognitosync.BulkPublishInput, _ ...request.Option) (*cognitosync.BulkPublishOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BulkPublish cancelled", ctx.Err())
	default:
		return d.BulkPublish(in)
	}
}

func (d *CognitoSyncDouble) DeleteDataset(i0 *cognitosync.DeleteDatasetInput) (r0 *cognitosync.DeleteDatasetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDataset", i0)
	r0, _ = returns[0].(*cognitosync.DeleteDatasetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoSyncDouble) DeleteDatasetRequest(i0 *cognitosync.DeleteDatasetInput) (r0 *request.Request, r1 *cognitosync.DeleteDatasetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDatasetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitosync.DeleteDatasetOutput)
	return
}

func (d *CognitoSyncDouble) DeleteDatasetWithContext(i0 context.Context, i1 *cognitosync.DeleteDatasetInput, i2 ...request.Option) (r0 *cognitosync.DeleteDatasetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDatasetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitosync.DeleteDatasetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoSyncDouble) fakeDeleteDatasetWithContext(ctx context.Context, in *cognitosync.DeleteDatasetInput, _ ...request.Option) (*cognitosync.DeleteDatasetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDataset cancelled", ctx.Err())
	default:
		return d.DeleteDataset(in)
	}
}

func (d *CognitoSyncDouble) DescribeDataset(i0 *cognitosync.DescribeDatasetInput) (r0 *cognitosync.DescribeDatasetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDataset", i0)
	r0, _ = returns[0].(*cognitosync.DescribeDatasetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoSyncDouble) DescribeDatasetRequest(i0 *cognitosync.DescribeDatasetInput) (r0 *request.Request, r1 *cognitosync.DescribeDatasetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDatasetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitosync.DescribeDatasetOutput)
	return
}

func (d *CognitoSyncDouble) DescribeDatasetWithContext(i0 context.Context, i1 *cognitosync.DescribeDatasetInput, i2 ...request.Option) (r0 *cognitosync.DescribeDatasetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDatasetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitosync.DescribeDatasetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoSyncDouble) fakeDescribeDatasetWithContext(ctx context.Context, in *cognitosync.DescribeDatasetInput, _ ...request.Option) (*cognitosync.DescribeDatasetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDataset cancelled", ctx.Err())
	default:
		return d.DescribeDataset(in)
	}
}

func (d *CognitoSyncDouble) DescribeIdentityPoolUsage(i0 *cognitosync.DescribeIdentityPoolUsageInput) (r0 *cognitosync.DescribeIdentityPoolUsageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIdentityPoolUsage", i0)
	r0, _ = returns[0].(*cognitosync.DescribeIdentityPoolUsageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoSyncDouble) DescribeIdentityPoolUsageRequest(i0 *cognitosync.DescribeIdentityPoolUsageInput) (r0 *request.Request, r1 *cognitosync.DescribeIdentityPoolUsageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIdentityPoolUsageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitosync.DescribeIdentityPoolUsageOutput)
	return
}

func (d *CognitoSyncDouble) DescribeIdentityPoolUsageWithContext(i0 context.Context, i1 *cognitosync.DescribeIdentityPoolUsageInput, i2 ...request.Option) (r0 *cognitosync.DescribeIdentityPoolUsageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIdentityPoolUsageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitosync.DescribeIdentityPoolUsageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoSyncDouble) fakeDescribeIdentityPoolUsageWithContext(ctx context.Context, in *cognitosync.DescribeIdentityPoolUsageInput, _ ...request.Option) (*cognitosync.DescribeIdentityPoolUsageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeIdentityPoolUsage cancelled", ctx.Err())
	default:
		return d.DescribeIdentityPoolUsage(in)
	}
}

func (d *CognitoSyncDouble) DescribeIdentityUsage(i0 *cognitosync.DescribeIdentityUsageInput) (r0 *cognitosync.DescribeIdentityUsageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIdentityUsage", i0)
	r0, _ = returns[0].(*cognitosync.DescribeIdentityUsageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoSyncDouble) DescribeIdentityUsageRequest(i0 *cognitosync.DescribeIdentityUsageInput) (r0 *request.Request, r1 *cognitosync.DescribeIdentityUsageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIdentityUsageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitosync.DescribeIdentityUsageOutput)
	return
}

func (d *CognitoSyncDouble) DescribeIdentityUsageWithContext(i0 context.Context, i1 *cognitosync.DescribeIdentityUsageInput, i2 ...request.Option) (r0 *cognitosync.DescribeIdentityUsageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIdentityUsageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitosync.DescribeIdentityUsageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoSyncDouble) fakeDescribeIdentityUsageWithContext(ctx context.Context, in *cognitosync.DescribeIdentityUsageInput, _ ...request.Option) (*cognitosync.DescribeIdentityUsageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeIdentityUsage cancelled", ctx.Err())
	default:
		return d.DescribeIdentityUsage(in)
	}
}

func (d *CognitoSyncDouble) GetBulkPublishDetails(i0 *cognitosync.GetBulkPublishDetailsInput) (r0 *cognitosync.GetBulkPublishDetailsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBulkPublishDetails", i0)
	r0, _ = returns[0].(*cognitosync.GetBulkPublishDetailsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoSyncDouble) GetBulkPublishDetailsRequest(i0 *cognitosync.GetBulkPublishDetailsInput) (r0 *request.Request, r1 *cognitosync.GetBulkPublishDetailsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBulkPublishDetailsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitosync.GetBulkPublishDetailsOutput)
	return
}

func (d *CognitoSyncDouble) GetBulkPublishDetailsWithContext(i0 context.Context, i1 *cognitosync.GetBulkPublishDetailsInput, i2 ...request.Option) (r0 *cognitosync.GetBulkPublishDetailsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBulkPublishDetailsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitosync.GetBulkPublishDetailsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoSyncDouble) fakeGetBulkPublishDetailsWithContext(ctx context.Context, in *cognitosync.GetBulkPublishDetailsInput, _ ...request.Option) (*cognitosync.GetBulkPublishDetailsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBulkPublishDetails cancelled", ctx.Err())
	default:
		return d.GetBulkPublishDetails(in)
	}
}

func (d *CognitoSyncDouble) GetCognitoEvents(i0 *cognitosync.GetCognitoEventsInput) (r0 *cognitosync.GetCognitoEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCognitoEvents", i0)
	r0, _ = returns[0].(*cognitosync.GetCognitoEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoSyncDouble) GetCognitoEventsRequest(i0 *cognitosync.GetCognitoEventsInput) (r0 *request.Request, r1 *cognitosync.GetCognitoEventsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCognitoEventsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitosync.GetCognitoEventsOutput)
	return
}

func (d *CognitoSyncDouble) GetCognitoEventsWithContext(i0 context.Context, i1 *cognitosync.GetCognitoEventsInput, i2 ...request.Option) (r0 *cognitosync.GetCognitoEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCognitoEventsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitosync.GetCognitoEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoSyncDouble) fakeGetCognitoEventsWithContext(ctx context.Context, in *cognitosync.GetCognitoEventsInput, _ ...request.Option) (*cognitosync.GetCognitoEventsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetCognitoEvents cancelled", ctx.Err())
	default:
		return d.GetCognitoEvents(in)
	}
}

func (d *CognitoSyncDouble) GetIdentityPoolConfiguration(i0 *cognitosync.GetIdentityPoolConfigurationInput) (r0 *cognitosync.GetIdentityPoolConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIdentityPoolConfiguration", i0)
	r0, _ = returns[0].(*cognitosync.GetIdentityPoolConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoSyncDouble) GetIdentityPoolConfigurationRequest(i0 *cognitosync.GetIdentityPoolConfigurationInput) (r0 *request.Request, r1 *cognitosync.GetIdentityPoolConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIdentityPoolConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitosync.GetIdentityPoolConfigurationOutput)
	return
}

func (d *CognitoSyncDouble) GetIdentityPoolConfigurationWithContext(i0 context.Context, i1 *cognitosync.GetIdentityPoolConfigurationInput, i2 ...request.Option) (r0 *cognitosync.GetIdentityPoolConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIdentityPoolConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitosync.GetIdentityPoolConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoSyncDouble) fakeGetIdentityPoolConfigurationWithContext(ctx context.Context, in *cognitosync.GetIdentityPoolConfigurationInput, _ ...request.Option) (*cognitosync.GetIdentityPoolConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetIdentityPoolConfiguration cancelled", ctx.Err())
	default:
		return d.GetIdentityPoolConfiguration(in)
	}
}

func (d *CognitoSyncDouble) ListDatasets(i0 *cognitosync.ListDatasetsInput) (r0 *cognitosync.ListDatasetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDatasets", i0)
	r0, _ = returns[0].(*cognitosync.ListDatasetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoSyncDouble) ListDatasetsRequest(i0 *cognitosync.ListDatasetsInput) (r0 *request.Request, r1 *cognitosync.ListDatasetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDatasetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitosync.ListDatasetsOutput)
	return
}

func (d *CognitoSyncDouble) ListDatasetsWithContext(i0 context.Context, i1 *cognitosync.ListDatasetsInput, i2 ...request.Option) (r0 *cognitosync.ListDatasetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDatasetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitosync.ListDatasetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoSyncDouble) fakeListDatasetsWithContext(ctx context.Context, in *cognitosync.ListDatasetsInput, _ ...request.Option) (*cognitosync.ListDatasetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDatasets cancelled", ctx.Err())
	default:
		return d.ListDatasets(in)
	}
}

func (d *CognitoSyncDouble) ListIdentityPoolUsage(i0 *cognitosync.ListIdentityPoolUsageInput) (r0 *cognitosync.ListIdentityPoolUsageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIdentityPoolUsage", i0)
	r0, _ = returns[0].(*cognitosync.ListIdentityPoolUsageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoSyncDouble) ListIdentityPoolUsageRequest(i0 *cognitosync.ListIdentityPoolUsageInput) (r0 *request.Request, r1 *cognitosync.ListIdentityPoolUsageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIdentityPoolUsageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitosync.ListIdentityPoolUsageOutput)
	return
}

func (d *CognitoSyncDouble) ListIdentityPoolUsageWithContext(i0 context.Context, i1 *cognitosync.ListIdentityPoolUsageInput, i2 ...request.Option) (r0 *cognitosync.ListIdentityPoolUsageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIdentityPoolUsageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitosync.ListIdentityPoolUsageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoSyncDouble) fakeListIdentityPoolUsageWithContext(ctx context.Context, in *cognitosync.ListIdentityPoolUsageInput, _ ...request.Option) (*cognitosync.ListIdentityPoolUsageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListIdentityPoolUsage cancelled", ctx.Err())
	default:
		return d.ListIdentityPoolUsage(in)
	}
}

func (d *CognitoSyncDouble) ListRecords(i0 *cognitosync.ListRecordsInput) (r0 *cognitosync.ListRecordsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRecords", i0)
	r0, _ = returns[0].(*cognitosync.ListRecordsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoSyncDouble) ListRecordsRequest(i0 *cognitosync.ListRecordsInput) (r0 *request.Request, r1 *cognitosync.ListRecordsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRecordsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitosync.ListRecordsOutput)
	return
}

func (d *CognitoSyncDouble) ListRecordsWithContext(i0 context.Context, i1 *cognitosync.ListRecordsInput, i2 ...request.Option) (r0 *cognitosync.ListRecordsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRecordsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitosync.ListRecordsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoSyncDouble) fakeListRecordsWithContext(ctx context.Context, in *cognitosync.ListRecordsInput, _ ...request.Option) (*cognitosync.ListRecordsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListRecords cancelled", ctx.Err())
	default:
		return d.ListRecords(in)
	}
}

func (d *CognitoSyncDouble) RegisterDevice(i0 *cognitosync.RegisterDeviceInput) (r0 *cognitosync.RegisterDeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterDevice", i0)
	r0, _ = returns[0].(*cognitosync.RegisterDeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoSyncDouble) RegisterDeviceRequest(i0 *cognitosync.RegisterDeviceInput) (r0 *request.Request, r1 *cognitosync.RegisterDeviceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterDeviceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitosync.RegisterDeviceOutput)
	return
}

func (d *CognitoSyncDouble) RegisterDeviceWithContext(i0 context.Context, i1 *cognitosync.RegisterDeviceInput, i2 ...request.Option) (r0 *cognitosync.RegisterDeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterDeviceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitosync.RegisterDeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoSyncDouble) fakeRegisterDeviceWithContext(ctx context.Context, in *cognitosync.RegisterDeviceInput, _ ...request.Option) (*cognitosync.RegisterDeviceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterDevice cancelled", ctx.Err())
	default:
		return d.RegisterDevice(in)
	}
}

func (d *CognitoSyncDouble) SetCognitoEvents(i0 *cognitosync.SetCognitoEventsInput) (r0 *cognitosync.SetCognitoEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetCognitoEvents", i0)
	r0, _ = returns[0].(*cognitosync.SetCognitoEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoSyncDouble) SetCognitoEventsRequest(i0 *cognitosync.SetCognitoEventsInput) (r0 *request.Request, r1 *cognitosync.SetCognitoEventsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetCognitoEventsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitosync.SetCognitoEventsOutput)
	return
}

func (d *CognitoSyncDouble) SetCognitoEventsWithContext(i0 context.Context, i1 *cognitosync.SetCognitoEventsInput, i2 ...request.Option) (r0 *cognitosync.SetCognitoEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetCognitoEventsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitosync.SetCognitoEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoSyncDouble) fakeSetCognitoEventsWithContext(ctx context.Context, in *cognitosync.SetCognitoEventsInput, _ ...request.Option) (*cognitosync.SetCognitoEventsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetCognitoEvents cancelled", ctx.Err())
	default:
		return d.SetCognitoEvents(in)
	}
}

func (d *CognitoSyncDouble) SetIdentityPoolConfiguration(i0 *cognitosync.SetIdentityPoolConfigurationInput) (r0 *cognitosync.SetIdentityPoolConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetIdentityPoolConfiguration", i0)
	r0, _ = returns[0].(*cognitosync.SetIdentityPoolConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoSyncDouble) SetIdentityPoolConfigurationRequest(i0 *cognitosync.SetIdentityPoolConfigurationInput) (r0 *request.Request, r1 *cognitosync.SetIdentityPoolConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetIdentityPoolConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitosync.SetIdentityPoolConfigurationOutput)
	return
}

func (d *CognitoSyncDouble) SetIdentityPoolConfigurationWithContext(i0 context.Context, i1 *cognitosync.SetIdentityPoolConfigurationInput, i2 ...request.Option) (r0 *cognitosync.SetIdentityPoolConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetIdentityPoolConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitosync.SetIdentityPoolConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoSyncDouble) fakeSetIdentityPoolConfigurationWithContext(ctx context.Context, in *cognitosync.SetIdentityPoolConfigurationInput, _ ...request.Option) (*cognitosync.SetIdentityPoolConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetIdentityPoolConfiguration cancelled", ctx.Err())
	default:
		return d.SetIdentityPoolConfiguration(in)
	}
}

func (d *CognitoSyncDouble) SubscribeToDataset(i0 *cognitosync.SubscribeToDatasetInput) (r0 *cognitosync.SubscribeToDatasetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SubscribeToDataset", i0)
	r0, _ = returns[0].(*cognitosync.SubscribeToDatasetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoSyncDouble) SubscribeToDatasetRequest(i0 *cognitosync.SubscribeToDatasetInput) (r0 *request.Request, r1 *cognitosync.SubscribeToDatasetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SubscribeToDatasetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitosync.SubscribeToDatasetOutput)
	return
}

func (d *CognitoSyncDouble) SubscribeToDatasetWithContext(i0 context.Context, i1 *cognitosync.SubscribeToDatasetInput, i2 ...request.Option) (r0 *cognitosync.SubscribeToDatasetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SubscribeToDatasetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitosync.SubscribeToDatasetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoSyncDouble) fakeSubscribeToDatasetWithContext(ctx context.Context, in *cognitosync.SubscribeToDatasetInput, _ ...request.Option) (*cognitosync.SubscribeToDatasetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SubscribeToDataset cancelled", ctx.Err())
	default:
		return d.SubscribeToDataset(in)
	}
}

func (d *CognitoSyncDouble) UnsubscribeFromDataset(i0 *cognitosync.UnsubscribeFromDatasetInput) (r0 *cognitosync.UnsubscribeFromDatasetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnsubscribeFromDataset", i0)
	r0, _ = returns[0].(*cognitosync.UnsubscribeFromDatasetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoSyncDouble) UnsubscribeFromDatasetRequest(i0 *cognitosync.UnsubscribeFromDatasetInput) (r0 *request.Request, r1 *cognitosync.UnsubscribeFromDatasetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnsubscribeFromDatasetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitosync.UnsubscribeFromDatasetOutput)
	return
}

func (d *CognitoSyncDouble) UnsubscribeFromDatasetWithContext(i0 context.Context, i1 *cognitosync.UnsubscribeFromDatasetInput, i2 ...request.Option) (r0 *cognitosync.UnsubscribeFromDatasetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnsubscribeFromDatasetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitosync.UnsubscribeFromDatasetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoSyncDouble) fakeUnsubscribeFromDatasetWithContext(ctx context.Context, in *cognitosync.UnsubscribeFromDatasetInput, _ ...request.Option) (*cognitosync.UnsubscribeFromDatasetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UnsubscribeFromDataset cancelled", ctx.Err())
	default:
		return d.UnsubscribeFromDataset(in)
	}
}

func (d *CognitoSyncDouble) UpdateRecords(i0 *cognitosync.UpdateRecordsInput) (r0 *cognitosync.UpdateRecordsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRecords", i0)
	r0, _ = returns[0].(*cognitosync.UpdateRecordsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoSyncDouble) UpdateRecordsRequest(i0 *cognitosync.UpdateRecordsInput) (r0 *request.Request, r1 *cognitosync.UpdateRecordsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRecordsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cognitosync.UpdateRecordsOutput)
	return
}

func (d *CognitoSyncDouble) UpdateRecordsWithContext(i0 context.Context, i1 *cognitosync.UpdateRecordsInput, i2 ...request.Option) (r0 *cognitosync.UpdateRecordsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRecordsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cognitosync.UpdateRecordsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CognitoSyncDouble) fakeUpdateRecordsWithContext(ctx context.Context, in *cognitosync.UpdateRecordsInput, _ ...request.Option) (*cognitosync.UpdateRecordsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateRecords cancelled", ctx.Err())
	default:
		return d.UpdateRecords(in)
	}
}
