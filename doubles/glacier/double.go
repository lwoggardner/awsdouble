// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:12:57+11:00

// Package glacierdouble provides a TestDouble implementation of glacieriface.GlacierAPI
package glacierdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/glacier"
	"github.com/aws/aws-sdk-go/service/glacier/glacieriface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// GlacierDouble is TestDouble for glacieriface.GlacierAPI
type GlacierDouble struct {
	glacieriface.GlacierAPI
	*awsdouble.AWSTestDouble
}

// Constructor for GlacierDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *GlacierDouble {
	result := &GlacierDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*glacieriface.GlacierAPI)(nil), configurators...)
	return result
}

func (d *GlacierDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *GlacierDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AbortMultipartUploadWithContext":
		return m.Fake(d.fakeAbortMultipartUploadWithContext)

	case "AbortVaultLockWithContext":
		return m.Fake(d.fakeAbortVaultLockWithContext)

	case "AddTagsToVaultWithContext":
		return m.Fake(d.fakeAddTagsToVaultWithContext)

	case "CompleteMultipartUploadWithContext":
		return m.Fake(d.fakeCompleteMultipartUploadWithContext)

	case "CompleteVaultLockWithContext":
		return m.Fake(d.fakeCompleteVaultLockWithContext)

	case "CreateVaultWithContext":
		return m.Fake(d.fakeCreateVaultWithContext)

	case "DeleteArchiveWithContext":
		return m.Fake(d.fakeDeleteArchiveWithContext)

	case "DeleteVaultAccessPolicyWithContext":
		return m.Fake(d.fakeDeleteVaultAccessPolicyWithContext)

	case "DeleteVaultNotificationsWithContext":
		return m.Fake(d.fakeDeleteVaultNotificationsWithContext)

	case "DeleteVaultWithContext":
		return m.Fake(d.fakeDeleteVaultWithContext)

	case "DescribeJobWithContext":
		return m.Fake(d.fakeDescribeJobWithContext)

	case "DescribeVaultWithContext":
		return m.Fake(d.fakeDescribeVaultWithContext)

	case "GetDataRetrievalPolicyWithContext":
		return m.Fake(d.fakeGetDataRetrievalPolicyWithContext)

	case "GetJobOutputWithContext":
		return m.Fake(d.fakeGetJobOutputWithContext)

	case "GetVaultAccessPolicyWithContext":
		return m.Fake(d.fakeGetVaultAccessPolicyWithContext)

	case "GetVaultLockWithContext":
		return m.Fake(d.fakeGetVaultLockWithContext)

	case "GetVaultNotificationsWithContext":
		return m.Fake(d.fakeGetVaultNotificationsWithContext)

	case "InitiateJobWithContext":
		return m.Fake(d.fakeInitiateJobWithContext)

	case "InitiateMultipartUploadWithContext":
		return m.Fake(d.fakeInitiateMultipartUploadWithContext)

	case "InitiateVaultLockWithContext":
		return m.Fake(d.fakeInitiateVaultLockWithContext)

	case "ListJobsPages":
		return m.Fake(d.fakeListJobsPages)

	case "ListJobsPagesWithContext":
		return m.Fake(d.fakeListJobsPagesWithContext)

	case "ListJobsWithContext":
		return m.Fake(d.fakeListJobsWithContext)

	case "ListMultipartUploadsPages":
		return m.Fake(d.fakeListMultipartUploadsPages)

	case "ListMultipartUploadsPagesWithContext":
		return m.Fake(d.fakeListMultipartUploadsPagesWithContext)

	case "ListMultipartUploadsWithContext":
		return m.Fake(d.fakeListMultipartUploadsWithContext)

	case "ListPartsPages":
		return m.Fake(d.fakeListPartsPages)

	case "ListPartsPagesWithContext":
		return m.Fake(d.fakeListPartsPagesWithContext)

	case "ListPartsWithContext":
		return m.Fake(d.fakeListPartsWithContext)

	case "ListProvisionedCapacityWithContext":
		return m.Fake(d.fakeListProvisionedCapacityWithContext)

	case "ListTagsForVaultWithContext":
		return m.Fake(d.fakeListTagsForVaultWithContext)

	case "ListVaultsPages":
		return m.Fake(d.fakeListVaultsPages)

	case "ListVaultsPagesWithContext":
		return m.Fake(d.fakeListVaultsPagesWithContext)

	case "ListVaultsWithContext":
		return m.Fake(d.fakeListVaultsWithContext)

	case "PurchaseProvisionedCapacityWithContext":
		return m.Fake(d.fakePurchaseProvisionedCapacityWithContext)

	case "RemoveTagsFromVaultWithContext":
		return m.Fake(d.fakeRemoveTagsFromVaultWithContext)

	case "SetDataRetrievalPolicyWithContext":
		return m.Fake(d.fakeSetDataRetrievalPolicyWithContext)

	case "SetVaultAccessPolicyWithContext":
		return m.Fake(d.fakeSetVaultAccessPolicyWithContext)

	case "SetVaultNotificationsWithContext":
		return m.Fake(d.fakeSetVaultNotificationsWithContext)

	case "UploadArchiveWithContext":
		return m.Fake(d.fakeUploadArchiveWithContext)

	case "UploadMultipartPartWithContext":
		return m.Fake(d.fakeUploadMultipartPartWithContext)

	case "WaitUntilVaultExists":
		return m.Fake(d.fakeWaitUntilVaultExists)

	case "WaitUntilVaultExistsWithContext":
		return m.Fake(d.fakeWaitUntilVaultExistsWithContext)

	case "WaitUntilVaultNotExists":
		return m.Fake(d.fakeWaitUntilVaultNotExists)

	case "WaitUntilVaultNotExistsWithContext":
		return m.Fake(d.fakeWaitUntilVaultNotExistsWithContext)

	default:
		return nil
	}
}

func (d *GlacierDouble) AbortMultipartUpload(i0 *glacier.AbortMultipartUploadInput) (r0 *glacier.AbortMultipartUploadOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AbortMultipartUpload", i0)
	r0, _ = returns[0].(*glacier.AbortMultipartUploadOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) AbortMultipartUploadRequest(i0 *glacier.AbortMultipartUploadInput) (r0 *request.Request, r1 *glacier.AbortMultipartUploadOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AbortMultipartUploadRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glacier.AbortMultipartUploadOutput)
	return
}

func (d *GlacierDouble) AbortMultipartUploadWithContext(i0 context.Context, i1 *glacier.AbortMultipartUploadInput, i2 ...request.Option) (r0 *glacier.AbortMultipartUploadOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AbortMultipartUploadWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glacier.AbortMultipartUploadOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) fakeAbortMultipartUploadWithContext(ctx context.Context, in *glacier.AbortMultipartUploadInput, _ ...request.Option) (*glacier.AbortMultipartUploadOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AbortMultipartUpload cancelled", ctx.Err())
	default:
		return d.AbortMultipartUpload(in)
	}
}

func (d *GlacierDouble) AbortVaultLock(i0 *glacier.AbortVaultLockInput) (r0 *glacier.AbortVaultLockOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AbortVaultLock", i0)
	r0, _ = returns[0].(*glacier.AbortVaultLockOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) AbortVaultLockRequest(i0 *glacier.AbortVaultLockInput) (r0 *request.Request, r1 *glacier.AbortVaultLockOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AbortVaultLockRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glacier.AbortVaultLockOutput)
	return
}

func (d *GlacierDouble) AbortVaultLockWithContext(i0 context.Context, i1 *glacier.AbortVaultLockInput, i2 ...request.Option) (r0 *glacier.AbortVaultLockOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AbortVaultLockWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glacier.AbortVaultLockOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) fakeAbortVaultLockWithContext(ctx context.Context, in *glacier.AbortVaultLockInput, _ ...request.Option) (*glacier.AbortVaultLockOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AbortVaultLock cancelled", ctx.Err())
	default:
		return d.AbortVaultLock(in)
	}
}

func (d *GlacierDouble) AddTagsToVault(i0 *glacier.AddTagsToVaultInput) (r0 *glacier.AddTagsToVaultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToVault", i0)
	r0, _ = returns[0].(*glacier.AddTagsToVaultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) AddTagsToVaultRequest(i0 *glacier.AddTagsToVaultInput) (r0 *request.Request, r1 *glacier.AddTagsToVaultOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToVaultRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glacier.AddTagsToVaultOutput)
	return
}

func (d *GlacierDouble) AddTagsToVaultWithContext(i0 context.Context, i1 *glacier.AddTagsToVaultInput, i2 ...request.Option) (r0 *glacier.AddTagsToVaultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToVaultWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glacier.AddTagsToVaultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) fakeAddTagsToVaultWithContext(ctx context.Context, in *glacier.AddTagsToVaultInput, _ ...request.Option) (*glacier.AddTagsToVaultOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddTagsToVault cancelled", ctx.Err())
	default:
		return d.AddTagsToVault(in)
	}
}

func (d *GlacierDouble) CompleteMultipartUpload(i0 *glacier.CompleteMultipartUploadInput) (r0 *glacier.ArchiveCreationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CompleteMultipartUpload", i0)
	r0, _ = returns[0].(*glacier.ArchiveCreationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) CompleteMultipartUploadRequest(i0 *glacier.CompleteMultipartUploadInput) (r0 *request.Request, r1 *glacier.ArchiveCreationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CompleteMultipartUploadRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glacier.ArchiveCreationOutput)
	return
}

func (d *GlacierDouble) CompleteMultipartUploadWithContext(i0 context.Context, i1 *glacier.CompleteMultipartUploadInput, i2 ...request.Option) (r0 *glacier.ArchiveCreationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CompleteMultipartUploadWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glacier.ArchiveCreationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) fakeCompleteMultipartUploadWithContext(ctx context.Context, in *glacier.CompleteMultipartUploadInput, _ ...request.Option) (*glacier.ArchiveCreationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CompleteMultipartUpload cancelled", ctx.Err())
	default:
		return d.CompleteMultipartUpload(in)
	}
}

func (d *GlacierDouble) CompleteVaultLock(i0 *glacier.CompleteVaultLockInput) (r0 *glacier.CompleteVaultLockOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CompleteVaultLock", i0)
	r0, _ = returns[0].(*glacier.CompleteVaultLockOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) CompleteVaultLockRequest(i0 *glacier.CompleteVaultLockInput) (r0 *request.Request, r1 *glacier.CompleteVaultLockOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CompleteVaultLockRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glacier.CompleteVaultLockOutput)
	return
}

func (d *GlacierDouble) CompleteVaultLockWithContext(i0 context.Context, i1 *glacier.CompleteVaultLockInput, i2 ...request.Option) (r0 *glacier.CompleteVaultLockOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CompleteVaultLockWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glacier.CompleteVaultLockOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) fakeCompleteVaultLockWithContext(ctx context.Context, in *glacier.CompleteVaultLockInput, _ ...request.Option) (*glacier.CompleteVaultLockOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CompleteVaultLock cancelled", ctx.Err())
	default:
		return d.CompleteVaultLock(in)
	}
}

func (d *GlacierDouble) CreateVault(i0 *glacier.CreateVaultInput) (r0 *glacier.CreateVaultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVault", i0)
	r0, _ = returns[0].(*glacier.CreateVaultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) CreateVaultRequest(i0 *glacier.CreateVaultInput) (r0 *request.Request, r1 *glacier.CreateVaultOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVaultRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glacier.CreateVaultOutput)
	return
}

func (d *GlacierDouble) CreateVaultWithContext(i0 context.Context, i1 *glacier.CreateVaultInput, i2 ...request.Option) (r0 *glacier.CreateVaultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVaultWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glacier.CreateVaultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) fakeCreateVaultWithContext(ctx context.Context, in *glacier.CreateVaultInput, _ ...request.Option) (*glacier.CreateVaultOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateVault cancelled", ctx.Err())
	default:
		return d.CreateVault(in)
	}
}

func (d *GlacierDouble) DeleteArchive(i0 *glacier.DeleteArchiveInput) (r0 *glacier.DeleteArchiveOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteArchive", i0)
	r0, _ = returns[0].(*glacier.DeleteArchiveOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) DeleteArchiveRequest(i0 *glacier.DeleteArchiveInput) (r0 *request.Request, r1 *glacier.DeleteArchiveOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteArchiveRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glacier.DeleteArchiveOutput)
	return
}

func (d *GlacierDouble) DeleteArchiveWithContext(i0 context.Context, i1 *glacier.DeleteArchiveInput, i2 ...request.Option) (r0 *glacier.DeleteArchiveOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteArchiveWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glacier.DeleteArchiveOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) fakeDeleteArchiveWithContext(ctx context.Context, in *glacier.DeleteArchiveInput, _ ...request.Option) (*glacier.DeleteArchiveOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteArchive cancelled", ctx.Err())
	default:
		return d.DeleteArchive(in)
	}
}

func (d *GlacierDouble) DeleteVault(i0 *glacier.DeleteVaultInput) (r0 *glacier.DeleteVaultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVault", i0)
	r0, _ = returns[0].(*glacier.DeleteVaultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) DeleteVaultAccessPolicy(i0 *glacier.DeleteVaultAccessPolicyInput) (r0 *glacier.DeleteVaultAccessPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVaultAccessPolicy", i0)
	r0, _ = returns[0].(*glacier.DeleteVaultAccessPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) DeleteVaultAccessPolicyRequest(i0 *glacier.DeleteVaultAccessPolicyInput) (r0 *request.Request, r1 *glacier.DeleteVaultAccessPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVaultAccessPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glacier.DeleteVaultAccessPolicyOutput)
	return
}

func (d *GlacierDouble) DeleteVaultAccessPolicyWithContext(i0 context.Context, i1 *glacier.DeleteVaultAccessPolicyInput, i2 ...request.Option) (r0 *glacier.DeleteVaultAccessPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVaultAccessPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glacier.DeleteVaultAccessPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) fakeDeleteVaultAccessPolicyWithContext(ctx context.Context, in *glacier.DeleteVaultAccessPolicyInput, _ ...request.Option) (*glacier.DeleteVaultAccessPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteVaultAccessPolicy cancelled", ctx.Err())
	default:
		return d.DeleteVaultAccessPolicy(in)
	}
}

func (d *GlacierDouble) DeleteVaultNotifications(i0 *glacier.DeleteVaultNotificationsInput) (r0 *glacier.DeleteVaultNotificationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVaultNotifications", i0)
	r0, _ = returns[0].(*glacier.DeleteVaultNotificationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) DeleteVaultNotificationsRequest(i0 *glacier.DeleteVaultNotificationsInput) (r0 *request.Request, r1 *glacier.DeleteVaultNotificationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVaultNotificationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glacier.DeleteVaultNotificationsOutput)
	return
}

func (d *GlacierDouble) DeleteVaultNotificationsWithContext(i0 context.Context, i1 *glacier.DeleteVaultNotificationsInput, i2 ...request.Option) (r0 *glacier.DeleteVaultNotificationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVaultNotificationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glacier.DeleteVaultNotificationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) fakeDeleteVaultNotificationsWithContext(ctx context.Context, in *glacier.DeleteVaultNotificationsInput, _ ...request.Option) (*glacier.DeleteVaultNotificationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteVaultNotifications cancelled", ctx.Err())
	default:
		return d.DeleteVaultNotifications(in)
	}
}

func (d *GlacierDouble) DeleteVaultRequest(i0 *glacier.DeleteVaultInput) (r0 *request.Request, r1 *glacier.DeleteVaultOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVaultRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glacier.DeleteVaultOutput)
	return
}

func (d *GlacierDouble) DeleteVaultWithContext(i0 context.Context, i1 *glacier.DeleteVaultInput, i2 ...request.Option) (r0 *glacier.DeleteVaultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVaultWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glacier.DeleteVaultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) fakeDeleteVaultWithContext(ctx context.Context, in *glacier.DeleteVaultInput, _ ...request.Option) (*glacier.DeleteVaultOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteVault cancelled", ctx.Err())
	default:
		return d.DeleteVault(in)
	}
}

func (d *GlacierDouble) DescribeJob(i0 *glacier.DescribeJobInput) (r0 *glacier.JobDescription, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeJob", i0)
	r0, _ = returns[0].(*glacier.JobDescription)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) DescribeJobRequest(i0 *glacier.DescribeJobInput) (r0 *request.Request, r1 *glacier.JobDescription) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glacier.JobDescription)
	return
}

func (d *GlacierDouble) DescribeJobWithContext(i0 context.Context, i1 *glacier.DescribeJobInput, i2 ...request.Option) (r0 *glacier.JobDescription, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glacier.JobDescription)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) fakeDescribeJobWithContext(ctx context.Context, in *glacier.DescribeJobInput, _ ...request.Option) (*glacier.JobDescription, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeJob cancelled", ctx.Err())
	default:
		return d.DescribeJob(in)
	}
}

func (d *GlacierDouble) DescribeVault(i0 *glacier.DescribeVaultInput) (r0 *glacier.DescribeVaultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVault", i0)
	r0, _ = returns[0].(*glacier.DescribeVaultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) DescribeVaultRequest(i0 *glacier.DescribeVaultInput) (r0 *request.Request, r1 *glacier.DescribeVaultOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVaultRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glacier.DescribeVaultOutput)
	return
}

func (d *GlacierDouble) DescribeVaultWithContext(i0 context.Context, i1 *glacier.DescribeVaultInput, i2 ...request.Option) (r0 *glacier.DescribeVaultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVaultWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glacier.DescribeVaultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) fakeDescribeVaultWithContext(ctx context.Context, in *glacier.DescribeVaultInput, _ ...request.Option) (*glacier.DescribeVaultOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeVault cancelled", ctx.Err())
	default:
		return d.DescribeVault(in)
	}
}

func (d *GlacierDouble) GetDataRetrievalPolicy(i0 *glacier.GetDataRetrievalPolicyInput) (r0 *glacier.GetDataRetrievalPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDataRetrievalPolicy", i0)
	r0, _ = returns[0].(*glacier.GetDataRetrievalPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) GetDataRetrievalPolicyRequest(i0 *glacier.GetDataRetrievalPolicyInput) (r0 *request.Request, r1 *glacier.GetDataRetrievalPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDataRetrievalPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glacier.GetDataRetrievalPolicyOutput)
	return
}

func (d *GlacierDouble) GetDataRetrievalPolicyWithContext(i0 context.Context, i1 *glacier.GetDataRetrievalPolicyInput, i2 ...request.Option) (r0 *glacier.GetDataRetrievalPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDataRetrievalPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glacier.GetDataRetrievalPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) fakeGetDataRetrievalPolicyWithContext(ctx context.Context, in *glacier.GetDataRetrievalPolicyInput, _ ...request.Option) (*glacier.GetDataRetrievalPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDataRetrievalPolicy cancelled", ctx.Err())
	default:
		return d.GetDataRetrievalPolicy(in)
	}
}

func (d *GlacierDouble) GetJobOutput(i0 *glacier.GetJobOutputInput) (r0 *glacier.GetJobOutputOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobOutput", i0)
	r0, _ = returns[0].(*glacier.GetJobOutputOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) GetJobOutputRequest(i0 *glacier.GetJobOutputInput) (r0 *request.Request, r1 *glacier.GetJobOutputOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobOutputRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glacier.GetJobOutputOutput)
	return
}

func (d *GlacierDouble) GetJobOutputWithContext(i0 context.Context, i1 *glacier.GetJobOutputInput, i2 ...request.Option) (r0 *glacier.GetJobOutputOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobOutputWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glacier.GetJobOutputOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) fakeGetJobOutputWithContext(ctx context.Context, in *glacier.GetJobOutputInput, _ ...request.Option) (*glacier.GetJobOutputOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetJobOutput cancelled", ctx.Err())
	default:
		return d.GetJobOutput(in)
	}
}

func (d *GlacierDouble) GetVaultAccessPolicy(i0 *glacier.GetVaultAccessPolicyInput) (r0 *glacier.GetVaultAccessPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetVaultAccessPolicy", i0)
	r0, _ = returns[0].(*glacier.GetVaultAccessPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) GetVaultAccessPolicyRequest(i0 *glacier.GetVaultAccessPolicyInput) (r0 *request.Request, r1 *glacier.GetVaultAccessPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetVaultAccessPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glacier.GetVaultAccessPolicyOutput)
	return
}

func (d *GlacierDouble) GetVaultAccessPolicyWithContext(i0 context.Context, i1 *glacier.GetVaultAccessPolicyInput, i2 ...request.Option) (r0 *glacier.GetVaultAccessPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetVaultAccessPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glacier.GetVaultAccessPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) fakeGetVaultAccessPolicyWithContext(ctx context.Context, in *glacier.GetVaultAccessPolicyInput, _ ...request.Option) (*glacier.GetVaultAccessPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetVaultAccessPolicy cancelled", ctx.Err())
	default:
		return d.GetVaultAccessPolicy(in)
	}
}

func (d *GlacierDouble) GetVaultLock(i0 *glacier.GetVaultLockInput) (r0 *glacier.GetVaultLockOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetVaultLock", i0)
	r0, _ = returns[0].(*glacier.GetVaultLockOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) GetVaultLockRequest(i0 *glacier.GetVaultLockInput) (r0 *request.Request, r1 *glacier.GetVaultLockOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetVaultLockRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glacier.GetVaultLockOutput)
	return
}

func (d *GlacierDouble) GetVaultLockWithContext(i0 context.Context, i1 *glacier.GetVaultLockInput, i2 ...request.Option) (r0 *glacier.GetVaultLockOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetVaultLockWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glacier.GetVaultLockOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) fakeGetVaultLockWithContext(ctx context.Context, in *glacier.GetVaultLockInput, _ ...request.Option) (*glacier.GetVaultLockOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetVaultLock cancelled", ctx.Err())
	default:
		return d.GetVaultLock(in)
	}
}

func (d *GlacierDouble) GetVaultNotifications(i0 *glacier.GetVaultNotificationsInput) (r0 *glacier.GetVaultNotificationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetVaultNotifications", i0)
	r0, _ = returns[0].(*glacier.GetVaultNotificationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) GetVaultNotificationsRequest(i0 *glacier.GetVaultNotificationsInput) (r0 *request.Request, r1 *glacier.GetVaultNotificationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetVaultNotificationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glacier.GetVaultNotificationsOutput)
	return
}

func (d *GlacierDouble) GetVaultNotificationsWithContext(i0 context.Context, i1 *glacier.GetVaultNotificationsInput, i2 ...request.Option) (r0 *glacier.GetVaultNotificationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetVaultNotificationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glacier.GetVaultNotificationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) fakeGetVaultNotificationsWithContext(ctx context.Context, in *glacier.GetVaultNotificationsInput, _ ...request.Option) (*glacier.GetVaultNotificationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetVaultNotifications cancelled", ctx.Err())
	default:
		return d.GetVaultNotifications(in)
	}
}

func (d *GlacierDouble) InitiateJob(i0 *glacier.InitiateJobInput) (r0 *glacier.InitiateJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("InitiateJob", i0)
	r0, _ = returns[0].(*glacier.InitiateJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) InitiateJobRequest(i0 *glacier.InitiateJobInput) (r0 *request.Request, r1 *glacier.InitiateJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("InitiateJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glacier.InitiateJobOutput)
	return
}

func (d *GlacierDouble) InitiateJobWithContext(i0 context.Context, i1 *glacier.InitiateJobInput, i2 ...request.Option) (r0 *glacier.InitiateJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("InitiateJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glacier.InitiateJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) fakeInitiateJobWithContext(ctx context.Context, in *glacier.InitiateJobInput, _ ...request.Option) (*glacier.InitiateJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "InitiateJob cancelled", ctx.Err())
	default:
		return d.InitiateJob(in)
	}
}

func (d *GlacierDouble) InitiateMultipartUpload(i0 *glacier.InitiateMultipartUploadInput) (r0 *glacier.InitiateMultipartUploadOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("InitiateMultipartUpload", i0)
	r0, _ = returns[0].(*glacier.InitiateMultipartUploadOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) InitiateMultipartUploadRequest(i0 *glacier.InitiateMultipartUploadInput) (r0 *request.Request, r1 *glacier.InitiateMultipartUploadOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("InitiateMultipartUploadRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glacier.InitiateMultipartUploadOutput)
	return
}

func (d *GlacierDouble) InitiateMultipartUploadWithContext(i0 context.Context, i1 *glacier.InitiateMultipartUploadInput, i2 ...request.Option) (r0 *glacier.InitiateMultipartUploadOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("InitiateMultipartUploadWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glacier.InitiateMultipartUploadOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) fakeInitiateMultipartUploadWithContext(ctx context.Context, in *glacier.InitiateMultipartUploadInput, _ ...request.Option) (*glacier.InitiateMultipartUploadOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "InitiateMultipartUpload cancelled", ctx.Err())
	default:
		return d.InitiateMultipartUpload(in)
	}
}

func (d *GlacierDouble) InitiateVaultLock(i0 *glacier.InitiateVaultLockInput) (r0 *glacier.InitiateVaultLockOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("InitiateVaultLock", i0)
	r0, _ = returns[0].(*glacier.InitiateVaultLockOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) InitiateVaultLockRequest(i0 *glacier.InitiateVaultLockInput) (r0 *request.Request, r1 *glacier.InitiateVaultLockOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("InitiateVaultLockRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glacier.InitiateVaultLockOutput)
	return
}

func (d *GlacierDouble) InitiateVaultLockWithContext(i0 context.Context, i1 *glacier.InitiateVaultLockInput, i2 ...request.Option) (r0 *glacier.InitiateVaultLockOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("InitiateVaultLockWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glacier.InitiateVaultLockOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) fakeInitiateVaultLockWithContext(ctx context.Context, in *glacier.InitiateVaultLockInput, _ ...request.Option) (*glacier.InitiateVaultLockOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "InitiateVaultLock cancelled", ctx.Err())
	default:
		return d.InitiateVaultLock(in)
	}
}

func (d *GlacierDouble) ListJobs(i0 *glacier.ListJobsInput) (r0 *glacier.ListJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobs", i0)
	r0, _ = returns[0].(*glacier.ListJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) ListJobsPages(i0 *glacier.ListJobsInput, i1 func(*glacier.ListJobsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *GlacierDouble) fakeListJobsPages(in *glacier.ListJobsInput, pager func(*glacier.ListJobsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListJobs", paginators, in, pager)
}

func (d *GlacierDouble) ListJobsPagesWithContext(i0 context.Context, i1 *glacier.ListJobsInput, i2 func(*glacier.ListJobsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *GlacierDouble) fakeListJobsPagesWithContext(ctx context.Context, in *glacier.ListJobsInput, pager func(*glacier.ListJobsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListJobs", paginators, ctx, in, pager, options...)
}

func (d *GlacierDouble) ListJobsRequest(i0 *glacier.ListJobsInput) (r0 *request.Request, r1 *glacier.ListJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glacier.ListJobsOutput)
	return
}

func (d *GlacierDouble) ListJobsWithContext(i0 context.Context, i1 *glacier.ListJobsInput, i2 ...request.Option) (r0 *glacier.ListJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glacier.ListJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) fakeListJobsWithContext(ctx context.Context, in *glacier.ListJobsInput, _ ...request.Option) (*glacier.ListJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListJobs cancelled", ctx.Err())
	default:
		return d.ListJobs(in)
	}
}

func (d *GlacierDouble) ListMultipartUploads(i0 *glacier.ListMultipartUploadsInput) (r0 *glacier.ListMultipartUploadsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMultipartUploads", i0)
	r0, _ = returns[0].(*glacier.ListMultipartUploadsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) ListMultipartUploadsPages(i0 *glacier.ListMultipartUploadsInput, i1 func(*glacier.ListMultipartUploadsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMultipartUploadsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *GlacierDouble) fakeListMultipartUploadsPages(in *glacier.ListMultipartUploadsInput, pager func(*glacier.ListMultipartUploadsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListMultipartUploads", paginators, in, pager)
}

func (d *GlacierDouble) ListMultipartUploadsPagesWithContext(i0 context.Context, i1 *glacier.ListMultipartUploadsInput, i2 func(*glacier.ListMultipartUploadsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMultipartUploadsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *GlacierDouble) fakeListMultipartUploadsPagesWithContext(ctx context.Context, in *glacier.ListMultipartUploadsInput, pager func(*glacier.ListMultipartUploadsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListMultipartUploads", paginators, ctx, in, pager, options...)
}

func (d *GlacierDouble) ListMultipartUploadsRequest(i0 *glacier.ListMultipartUploadsInput) (r0 *request.Request, r1 *glacier.ListMultipartUploadsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMultipartUploadsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glacier.ListMultipartUploadsOutput)
	return
}

func (d *GlacierDouble) ListMultipartUploadsWithContext(i0 context.Context, i1 *glacier.ListMultipartUploadsInput, i2 ...request.Option) (r0 *glacier.ListMultipartUploadsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMultipartUploadsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glacier.ListMultipartUploadsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) fakeListMultipartUploadsWithContext(ctx context.Context, in *glacier.ListMultipartUploadsInput, _ ...request.Option) (*glacier.ListMultipartUploadsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListMultipartUploads cancelled", ctx.Err())
	default:
		return d.ListMultipartUploads(in)
	}
}

func (d *GlacierDouble) ListParts(i0 *glacier.ListPartsInput) (r0 *glacier.ListPartsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListParts", i0)
	r0, _ = returns[0].(*glacier.ListPartsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) ListPartsPages(i0 *glacier.ListPartsInput, i1 func(*glacier.ListPartsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPartsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *GlacierDouble) fakeListPartsPages(in *glacier.ListPartsInput, pager func(*glacier.ListPartsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListParts", paginators, in, pager)
}

func (d *GlacierDouble) ListPartsPagesWithContext(i0 context.Context, i1 *glacier.ListPartsInput, i2 func(*glacier.ListPartsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPartsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *GlacierDouble) fakeListPartsPagesWithContext(ctx context.Context, in *glacier.ListPartsInput, pager func(*glacier.ListPartsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListParts", paginators, ctx, in, pager, options...)
}

func (d *GlacierDouble) ListPartsRequest(i0 *glacier.ListPartsInput) (r0 *request.Request, r1 *glacier.ListPartsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPartsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glacier.ListPartsOutput)
	return
}

func (d *GlacierDouble) ListPartsWithContext(i0 context.Context, i1 *glacier.ListPartsInput, i2 ...request.Option) (r0 *glacier.ListPartsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPartsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glacier.ListPartsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) fakeListPartsWithContext(ctx context.Context, in *glacier.ListPartsInput, _ ...request.Option) (*glacier.ListPartsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListParts cancelled", ctx.Err())
	default:
		return d.ListParts(in)
	}
}

func (d *GlacierDouble) ListProvisionedCapacity(i0 *glacier.ListProvisionedCapacityInput) (r0 *glacier.ListProvisionedCapacityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProvisionedCapacity", i0)
	r0, _ = returns[0].(*glacier.ListProvisionedCapacityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) ListProvisionedCapacityRequest(i0 *glacier.ListProvisionedCapacityInput) (r0 *request.Request, r1 *glacier.ListProvisionedCapacityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProvisionedCapacityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glacier.ListProvisionedCapacityOutput)
	return
}

func (d *GlacierDouble) ListProvisionedCapacityWithContext(i0 context.Context, i1 *glacier.ListProvisionedCapacityInput, i2 ...request.Option) (r0 *glacier.ListProvisionedCapacityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProvisionedCapacityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glacier.ListProvisionedCapacityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) fakeListProvisionedCapacityWithContext(ctx context.Context, in *glacier.ListProvisionedCapacityInput, _ ...request.Option) (*glacier.ListProvisionedCapacityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListProvisionedCapacity cancelled", ctx.Err())
	default:
		return d.ListProvisionedCapacity(in)
	}
}

func (d *GlacierDouble) ListTagsForVault(i0 *glacier.ListTagsForVaultInput) (r0 *glacier.ListTagsForVaultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForVault", i0)
	r0, _ = returns[0].(*glacier.ListTagsForVaultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) ListTagsForVaultRequest(i0 *glacier.ListTagsForVaultInput) (r0 *request.Request, r1 *glacier.ListTagsForVaultOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForVaultRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glacier.ListTagsForVaultOutput)
	return
}

func (d *GlacierDouble) ListTagsForVaultWithContext(i0 context.Context, i1 *glacier.ListTagsForVaultInput, i2 ...request.Option) (r0 *glacier.ListTagsForVaultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForVaultWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glacier.ListTagsForVaultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) fakeListTagsForVaultWithContext(ctx context.Context, in *glacier.ListTagsForVaultInput, _ ...request.Option) (*glacier.ListTagsForVaultOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForVault cancelled", ctx.Err())
	default:
		return d.ListTagsForVault(in)
	}
}

func (d *GlacierDouble) ListVaults(i0 *glacier.ListVaultsInput) (r0 *glacier.ListVaultsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVaults", i0)
	r0, _ = returns[0].(*glacier.ListVaultsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) ListVaultsPages(i0 *glacier.ListVaultsInput, i1 func(*glacier.ListVaultsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVaultsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *GlacierDouble) fakeListVaultsPages(in *glacier.ListVaultsInput, pager func(*glacier.ListVaultsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListVaults", paginators, in, pager)
}

func (d *GlacierDouble) ListVaultsPagesWithContext(i0 context.Context, i1 *glacier.ListVaultsInput, i2 func(*glacier.ListVaultsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVaultsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *GlacierDouble) fakeListVaultsPagesWithContext(ctx context.Context, in *glacier.ListVaultsInput, pager func(*glacier.ListVaultsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListVaults", paginators, ctx, in, pager, options...)
}

func (d *GlacierDouble) ListVaultsRequest(i0 *glacier.ListVaultsInput) (r0 *request.Request, r1 *glacier.ListVaultsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVaultsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glacier.ListVaultsOutput)
	return
}

func (d *GlacierDouble) ListVaultsWithContext(i0 context.Context, i1 *glacier.ListVaultsInput, i2 ...request.Option) (r0 *glacier.ListVaultsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVaultsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glacier.ListVaultsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) fakeListVaultsWithContext(ctx context.Context, in *glacier.ListVaultsInput, _ ...request.Option) (*glacier.ListVaultsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListVaults cancelled", ctx.Err())
	default:
		return d.ListVaults(in)
	}
}

func (d *GlacierDouble) PurchaseProvisionedCapacity(i0 *glacier.PurchaseProvisionedCapacityInput) (r0 *glacier.PurchaseProvisionedCapacityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PurchaseProvisionedCapacity", i0)
	r0, _ = returns[0].(*glacier.PurchaseProvisionedCapacityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) PurchaseProvisionedCapacityRequest(i0 *glacier.PurchaseProvisionedCapacityInput) (r0 *request.Request, r1 *glacier.PurchaseProvisionedCapacityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PurchaseProvisionedCapacityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glacier.PurchaseProvisionedCapacityOutput)
	return
}

func (d *GlacierDouble) PurchaseProvisionedCapacityWithContext(i0 context.Context, i1 *glacier.PurchaseProvisionedCapacityInput, i2 ...request.Option) (r0 *glacier.PurchaseProvisionedCapacityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PurchaseProvisionedCapacityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glacier.PurchaseProvisionedCapacityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) fakePurchaseProvisionedCapacityWithContext(ctx context.Context, in *glacier.PurchaseProvisionedCapacityInput, _ ...request.Option) (*glacier.PurchaseProvisionedCapacityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PurchaseProvisionedCapacity cancelled", ctx.Err())
	default:
		return d.PurchaseProvisionedCapacity(in)
	}
}

func (d *GlacierDouble) RemoveTagsFromVault(i0 *glacier.RemoveTagsFromVaultInput) (r0 *glacier.RemoveTagsFromVaultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromVault", i0)
	r0, _ = returns[0].(*glacier.RemoveTagsFromVaultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) RemoveTagsFromVaultRequest(i0 *glacier.RemoveTagsFromVaultInput) (r0 *request.Request, r1 *glacier.RemoveTagsFromVaultOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromVaultRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glacier.RemoveTagsFromVaultOutput)
	return
}

func (d *GlacierDouble) RemoveTagsFromVaultWithContext(i0 context.Context, i1 *glacier.RemoveTagsFromVaultInput, i2 ...request.Option) (r0 *glacier.RemoveTagsFromVaultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromVaultWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glacier.RemoveTagsFromVaultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) fakeRemoveTagsFromVaultWithContext(ctx context.Context, in *glacier.RemoveTagsFromVaultInput, _ ...request.Option) (*glacier.RemoveTagsFromVaultOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveTagsFromVault cancelled", ctx.Err())
	default:
		return d.RemoveTagsFromVault(in)
	}
}

func (d *GlacierDouble) SetDataRetrievalPolicy(i0 *glacier.SetDataRetrievalPolicyInput) (r0 *glacier.SetDataRetrievalPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetDataRetrievalPolicy", i0)
	r0, _ = returns[0].(*glacier.SetDataRetrievalPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) SetDataRetrievalPolicyRequest(i0 *glacier.SetDataRetrievalPolicyInput) (r0 *request.Request, r1 *glacier.SetDataRetrievalPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetDataRetrievalPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glacier.SetDataRetrievalPolicyOutput)
	return
}

func (d *GlacierDouble) SetDataRetrievalPolicyWithContext(i0 context.Context, i1 *glacier.SetDataRetrievalPolicyInput, i2 ...request.Option) (r0 *glacier.SetDataRetrievalPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetDataRetrievalPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glacier.SetDataRetrievalPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) fakeSetDataRetrievalPolicyWithContext(ctx context.Context, in *glacier.SetDataRetrievalPolicyInput, _ ...request.Option) (*glacier.SetDataRetrievalPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetDataRetrievalPolicy cancelled", ctx.Err())
	default:
		return d.SetDataRetrievalPolicy(in)
	}
}

func (d *GlacierDouble) SetVaultAccessPolicy(i0 *glacier.SetVaultAccessPolicyInput) (r0 *glacier.SetVaultAccessPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetVaultAccessPolicy", i0)
	r0, _ = returns[0].(*glacier.SetVaultAccessPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) SetVaultAccessPolicyRequest(i0 *glacier.SetVaultAccessPolicyInput) (r0 *request.Request, r1 *glacier.SetVaultAccessPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetVaultAccessPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glacier.SetVaultAccessPolicyOutput)
	return
}

func (d *GlacierDouble) SetVaultAccessPolicyWithContext(i0 context.Context, i1 *glacier.SetVaultAccessPolicyInput, i2 ...request.Option) (r0 *glacier.SetVaultAccessPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetVaultAccessPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glacier.SetVaultAccessPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) fakeSetVaultAccessPolicyWithContext(ctx context.Context, in *glacier.SetVaultAccessPolicyInput, _ ...request.Option) (*glacier.SetVaultAccessPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetVaultAccessPolicy cancelled", ctx.Err())
	default:
		return d.SetVaultAccessPolicy(in)
	}
}

func (d *GlacierDouble) SetVaultNotifications(i0 *glacier.SetVaultNotificationsInput) (r0 *glacier.SetVaultNotificationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetVaultNotifications", i0)
	r0, _ = returns[0].(*glacier.SetVaultNotificationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) SetVaultNotificationsRequest(i0 *glacier.SetVaultNotificationsInput) (r0 *request.Request, r1 *glacier.SetVaultNotificationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetVaultNotificationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glacier.SetVaultNotificationsOutput)
	return
}

func (d *GlacierDouble) SetVaultNotificationsWithContext(i0 context.Context, i1 *glacier.SetVaultNotificationsInput, i2 ...request.Option) (r0 *glacier.SetVaultNotificationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetVaultNotificationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glacier.SetVaultNotificationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) fakeSetVaultNotificationsWithContext(ctx context.Context, in *glacier.SetVaultNotificationsInput, _ ...request.Option) (*glacier.SetVaultNotificationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetVaultNotifications cancelled", ctx.Err())
	default:
		return d.SetVaultNotifications(in)
	}
}

func (d *GlacierDouble) UploadArchive(i0 *glacier.UploadArchiveInput) (r0 *glacier.ArchiveCreationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UploadArchive", i0)
	r0, _ = returns[0].(*glacier.ArchiveCreationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) UploadArchiveRequest(i0 *glacier.UploadArchiveInput) (r0 *request.Request, r1 *glacier.ArchiveCreationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UploadArchiveRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glacier.ArchiveCreationOutput)
	return
}

func (d *GlacierDouble) UploadArchiveWithContext(i0 context.Context, i1 *glacier.UploadArchiveInput, i2 ...request.Option) (r0 *glacier.ArchiveCreationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UploadArchiveWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glacier.ArchiveCreationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) fakeUploadArchiveWithContext(ctx context.Context, in *glacier.UploadArchiveInput, _ ...request.Option) (*glacier.ArchiveCreationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UploadArchive cancelled", ctx.Err())
	default:
		return d.UploadArchive(in)
	}
}

func (d *GlacierDouble) UploadMultipartPart(i0 *glacier.UploadMultipartPartInput) (r0 *glacier.UploadMultipartPartOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UploadMultipartPart", i0)
	r0, _ = returns[0].(*glacier.UploadMultipartPartOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) UploadMultipartPartRequest(i0 *glacier.UploadMultipartPartInput) (r0 *request.Request, r1 *glacier.UploadMultipartPartOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UploadMultipartPartRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glacier.UploadMultipartPartOutput)
	return
}

func (d *GlacierDouble) UploadMultipartPartWithContext(i0 context.Context, i1 *glacier.UploadMultipartPartInput, i2 ...request.Option) (r0 *glacier.UploadMultipartPartOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UploadMultipartPartWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glacier.UploadMultipartPartOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlacierDouble) fakeUploadMultipartPartWithContext(ctx context.Context, in *glacier.UploadMultipartPartInput, _ ...request.Option) (*glacier.UploadMultipartPartOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UploadMultipartPart cancelled", ctx.Err())
	default:
		return d.UploadMultipartPart(in)
	}
}

func (d *GlacierDouble) WaitUntilVaultExists(i0 *glacier.DescribeVaultInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilVaultExists", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *GlacierDouble) fakeWaitUntilVaultExists(in *glacier.DescribeVaultInput) error {
	return d.WaitUntil("VaultExists", waiters, in)
}

func (d *GlacierDouble) WaitUntilVaultExistsWithContext(i0 context.Context, i1 *glacier.DescribeVaultInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilVaultExistsWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *GlacierDouble) fakeWaitUntilVaultExistsWithContext(ctx context.Context, in *glacier.DescribeVaultInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("VaultExists", waiters, ctx, in, waitOption...)
}

func (d *GlacierDouble) WaitUntilVaultNotExists(i0 *glacier.DescribeVaultInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilVaultNotExists", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *GlacierDouble) fakeWaitUntilVaultNotExists(in *glacier.DescribeVaultInput) error {
	return d.WaitUntil("VaultNotExists", waiters, in)
}

func (d *GlacierDouble) WaitUntilVaultNotExistsWithContext(i0 context.Context, i1 *glacier.DescribeVaultInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilVaultNotExistsWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *GlacierDouble) fakeWaitUntilVaultNotExistsWithContext(ctx context.Context, in *glacier.DescribeVaultInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("VaultNotExists", waiters, ctx, in, waitOption...)
}
