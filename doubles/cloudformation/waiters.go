// Code generated by go awsdoublegen; DO NOT EDIT.
// This file was generated at 2020-01-29T21:22:05+11:00
package cloudformationdouble

import (
	"time"

	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/lwoggardner/awsdouble"
)

var waiters = map[string]*awsdouble.Waiter{

	"ChangeSetCreateComplete": &awsdouble.Waiter{
		OperationName: "DescribeChangeSet",
		Waiter: request.Waiter{
			Name:        "WaitUntilChangeSetCreateComplete",
			MaxAttempts: 120,
			Delay:       request.ConstantWaiterDelay(30 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "Status",
					Expected: "CREATE_COMPLETE",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "Status",
					Expected: "FAILED",
				},
				{
					State:    request.FailureWaiterState,
					Matcher:  request.ErrorWaiterMatch,
					Expected: "ValidationError",
				},
			},
		},
	},

	"StackCreateComplete": &awsdouble.Waiter{
		OperationName: "DescribeStacks",
		Waiter: request.Waiter{
			Name:        "WaitUntilStackCreateComplete",
			MaxAttempts: 120,
			Delay:       request.ConstantWaiterDelay(30 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathAllWaiterMatch, Argument: "Stacks[].StackStatus",
					Expected: "CREATE_COMPLETE",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Stacks[].StackStatus",
					Expected: "CREATE_FAILED",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Stacks[].StackStatus",
					Expected: "DELETE_COMPLETE",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Stacks[].StackStatus",
					Expected: "DELETE_FAILED",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Stacks[].StackStatus",
					Expected: "ROLLBACK_FAILED",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Stacks[].StackStatus",
					Expected: "ROLLBACK_COMPLETE",
				},
				{
					State:    request.FailureWaiterState,
					Matcher:  request.ErrorWaiterMatch,
					Expected: "ValidationError",
				},
			},
		},
	},

	"StackDeleteComplete": &awsdouble.Waiter{
		OperationName: "DescribeStacks",
		Waiter: request.Waiter{
			Name:        "WaitUntilStackDeleteComplete",
			MaxAttempts: 120,
			Delay:       request.ConstantWaiterDelay(30 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathAllWaiterMatch, Argument: "Stacks[].StackStatus",
					Expected: "DELETE_COMPLETE",
				},
				{
					State:    request.SuccessWaiterState,
					Matcher:  request.ErrorWaiterMatch,
					Expected: "ValidationError",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Stacks[].StackStatus",
					Expected: "DELETE_FAILED",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Stacks[].StackStatus",
					Expected: "CREATE_FAILED",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Stacks[].StackStatus",
					Expected: "ROLLBACK_FAILED",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Stacks[].StackStatus",
					Expected: "UPDATE_ROLLBACK_IN_PROGRESS",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Stacks[].StackStatus",
					Expected: "UPDATE_ROLLBACK_FAILED",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Stacks[].StackStatus",
					Expected: "UPDATE_ROLLBACK_COMPLETE",
				},
			},
		},
	},

	"StackExists": &awsdouble.Waiter{
		OperationName: "DescribeStacks",
		Waiter: request.Waiter{
			Name:        "WaitUntilStackExists",
			MaxAttempts: 20,
			Delay:       request.ConstantWaiterDelay(5 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:    request.SuccessWaiterState,
					Matcher:  request.StatusWaiterMatch,
					Expected: 200,
				},
				{
					State:    request.RetryWaiterState,
					Matcher:  request.ErrorWaiterMatch,
					Expected: "ValidationError",
				},
			},
		},
	},

	"StackImportComplete": &awsdouble.Waiter{
		OperationName: "DescribeStacks",
		Waiter: request.Waiter{
			Name:        "WaitUntilStackImportComplete",
			MaxAttempts: 120,
			Delay:       request.ConstantWaiterDelay(30 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathAllWaiterMatch, Argument: "Stacks[].StackStatus",
					Expected: "IMPORT_COMPLETE",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Stacks[].StackStatus",
					Expected: "ROLLBACK_COMPLETE",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Stacks[].StackStatus",
					Expected: "ROLLBACK_FAILED",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Stacks[].StackStatus",
					Expected: "IMPORT_ROLLBACK_IN_PROGRESS",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Stacks[].StackStatus",
					Expected: "IMPORT_ROLLBACK_FAILED",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Stacks[].StackStatus",
					Expected: "IMPORT_ROLLBACK_COMPLETE",
				},
				{
					State:    request.FailureWaiterState,
					Matcher:  request.ErrorWaiterMatch,
					Expected: "ValidationError",
				},
			},
		},
	},

	"StackUpdateComplete": &awsdouble.Waiter{
		OperationName: "DescribeStacks",
		Waiter: request.Waiter{
			Name:        "WaitUntilStackUpdateComplete",
			MaxAttempts: 120,
			Delay:       request.ConstantWaiterDelay(30 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathAllWaiterMatch, Argument: "Stacks[].StackStatus",
					Expected: "UPDATE_COMPLETE",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Stacks[].StackStatus",
					Expected: "UPDATE_FAILED",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Stacks[].StackStatus",
					Expected: "UPDATE_ROLLBACK_FAILED",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Stacks[].StackStatus",
					Expected: "UPDATE_ROLLBACK_COMPLETE",
				},
				{
					State:    request.FailureWaiterState,
					Matcher:  request.ErrorWaiterMatch,
					Expected: "ValidationError",
				},
			},
		},
	},

	"TypeRegistrationComplete": &awsdouble.Waiter{
		OperationName: "DescribeTypeRegistration",
		Waiter: request.Waiter{
			Name:        "WaitUntilTypeRegistrationComplete",
			MaxAttempts: 120,
			Delay:       request.ConstantWaiterDelay(30 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "ProgressStatus",
					Expected: "COMPLETE",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "ProgressStatus",
					Expected: "FAILED",
				},
			},
		},
	},
}
