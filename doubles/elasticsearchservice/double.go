// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:12:40+11:00

// Package elasticsearchservicedouble provides a TestDouble implementation of elasticsearchserviceiface.ElasticsearchServiceAPI
package elasticsearchservicedouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/elasticsearchservice"
	"github.com/aws/aws-sdk-go/service/elasticsearchservice/elasticsearchserviceiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// ElasticsearchServiceDouble is TestDouble for elasticsearchserviceiface.ElasticsearchServiceAPI
type ElasticsearchServiceDouble struct {
	elasticsearchserviceiface.ElasticsearchServiceAPI
	*awsdouble.AWSTestDouble
}

// Constructor for ElasticsearchServiceDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *ElasticsearchServiceDouble {
	result := &ElasticsearchServiceDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*elasticsearchserviceiface.ElasticsearchServiceAPI)(nil), configurators...)
	return result
}

func (d *ElasticsearchServiceDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *ElasticsearchServiceDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AddTagsWithContext":
		return m.Fake(d.fakeAddTagsWithContext)

	case "CancelElasticsearchServiceSoftwareUpdateWithContext":
		return m.Fake(d.fakeCancelElasticsearchServiceSoftwareUpdateWithContext)

	case "CreateElasticsearchDomainWithContext":
		return m.Fake(d.fakeCreateElasticsearchDomainWithContext)

	case "DeleteElasticsearchDomainWithContext":
		return m.Fake(d.fakeDeleteElasticsearchDomainWithContext)

	case "DeleteElasticsearchServiceRoleWithContext":
		return m.Fake(d.fakeDeleteElasticsearchServiceRoleWithContext)

	case "DescribeElasticsearchDomainConfigWithContext":
		return m.Fake(d.fakeDescribeElasticsearchDomainConfigWithContext)

	case "DescribeElasticsearchDomainWithContext":
		return m.Fake(d.fakeDescribeElasticsearchDomainWithContext)

	case "DescribeElasticsearchDomainsWithContext":
		return m.Fake(d.fakeDescribeElasticsearchDomainsWithContext)

	case "DescribeElasticsearchInstanceTypeLimitsWithContext":
		return m.Fake(d.fakeDescribeElasticsearchInstanceTypeLimitsWithContext)

	case "DescribeReservedElasticsearchInstanceOfferingsPages":
		return m.Fake(d.fakeDescribeReservedElasticsearchInstanceOfferingsPages)

	case "DescribeReservedElasticsearchInstanceOfferingsPagesWithContext":
		return m.Fake(d.fakeDescribeReservedElasticsearchInstanceOfferingsPagesWithContext)

	case "DescribeReservedElasticsearchInstanceOfferingsWithContext":
		return m.Fake(d.fakeDescribeReservedElasticsearchInstanceOfferingsWithContext)

	case "DescribeReservedElasticsearchInstancesPages":
		return m.Fake(d.fakeDescribeReservedElasticsearchInstancesPages)

	case "DescribeReservedElasticsearchInstancesPagesWithContext":
		return m.Fake(d.fakeDescribeReservedElasticsearchInstancesPagesWithContext)

	case "DescribeReservedElasticsearchInstancesWithContext":
		return m.Fake(d.fakeDescribeReservedElasticsearchInstancesWithContext)

	case "GetCompatibleElasticsearchVersionsWithContext":
		return m.Fake(d.fakeGetCompatibleElasticsearchVersionsWithContext)

	case "GetUpgradeHistoryPages":
		return m.Fake(d.fakeGetUpgradeHistoryPages)

	case "GetUpgradeHistoryPagesWithContext":
		return m.Fake(d.fakeGetUpgradeHistoryPagesWithContext)

	case "GetUpgradeHistoryWithContext":
		return m.Fake(d.fakeGetUpgradeHistoryWithContext)

	case "GetUpgradeStatusWithContext":
		return m.Fake(d.fakeGetUpgradeStatusWithContext)

	case "ListDomainNamesWithContext":
		return m.Fake(d.fakeListDomainNamesWithContext)

	case "ListElasticsearchInstanceTypesPages":
		return m.Fake(d.fakeListElasticsearchInstanceTypesPages)

	case "ListElasticsearchInstanceTypesPagesWithContext":
		return m.Fake(d.fakeListElasticsearchInstanceTypesPagesWithContext)

	case "ListElasticsearchInstanceTypesWithContext":
		return m.Fake(d.fakeListElasticsearchInstanceTypesWithContext)

	case "ListElasticsearchVersionsPages":
		return m.Fake(d.fakeListElasticsearchVersionsPages)

	case "ListElasticsearchVersionsPagesWithContext":
		return m.Fake(d.fakeListElasticsearchVersionsPagesWithContext)

	case "ListElasticsearchVersionsWithContext":
		return m.Fake(d.fakeListElasticsearchVersionsWithContext)

	case "ListTagsWithContext":
		return m.Fake(d.fakeListTagsWithContext)

	case "PurchaseReservedElasticsearchInstanceOfferingWithContext":
		return m.Fake(d.fakePurchaseReservedElasticsearchInstanceOfferingWithContext)

	case "RemoveTagsWithContext":
		return m.Fake(d.fakeRemoveTagsWithContext)

	case "StartElasticsearchServiceSoftwareUpdateWithContext":
		return m.Fake(d.fakeStartElasticsearchServiceSoftwareUpdateWithContext)

	case "UpdateElasticsearchDomainConfigWithContext":
		return m.Fake(d.fakeUpdateElasticsearchDomainConfigWithContext)

	case "UpgradeElasticsearchDomainWithContext":
		return m.Fake(d.fakeUpgradeElasticsearchDomainWithContext)

	default:
		return nil
	}
}

func (d *ElasticsearchServiceDouble) AddTags(i0 *elasticsearchservice.AddTagsInput) (r0 *elasticsearchservice.AddTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTags", i0)
	r0, _ = returns[0].(*elasticsearchservice.AddTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) AddTagsRequest(i0 *elasticsearchservice.AddTagsInput) (r0 *request.Request, r1 *elasticsearchservice.AddTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticsearchservice.AddTagsOutput)
	return
}

func (d *ElasticsearchServiceDouble) AddTagsWithContext(i0 context.Context, i1 *elasticsearchservice.AddTagsInput, i2 ...request.Option) (r0 *elasticsearchservice.AddTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticsearchservice.AddTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) fakeAddTagsWithContext(ctx context.Context, in *elasticsearchservice.AddTagsInput, _ ...request.Option) (*elasticsearchservice.AddTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddTags cancelled", ctx.Err())
	default:
		return d.AddTags(in)
	}
}

func (d *ElasticsearchServiceDouble) CancelElasticsearchServiceSoftwareUpdate(i0 *elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateInput) (r0 *elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelElasticsearchServiceSoftwareUpdate", i0)
	r0, _ = returns[0].(*elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) CancelElasticsearchServiceSoftwareUpdateRequest(i0 *elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateInput) (r0 *request.Request, r1 *elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelElasticsearchServiceSoftwareUpdateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateOutput)
	return
}

func (d *ElasticsearchServiceDouble) CancelElasticsearchServiceSoftwareUpdateWithContext(i0 context.Context, i1 *elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateInput, i2 ...request.Option) (r0 *elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelElasticsearchServiceSoftwareUpdateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) fakeCancelElasticsearchServiceSoftwareUpdateWithContext(ctx context.Context, in *elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateInput, _ ...request.Option) (*elasticsearchservice.CancelElasticsearchServiceSoftwareUpdateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelElasticsearchServiceSoftwareUpdate cancelled", ctx.Err())
	default:
		return d.CancelElasticsearchServiceSoftwareUpdate(in)
	}
}

func (d *ElasticsearchServiceDouble) CreateElasticsearchDomain(i0 *elasticsearchservice.CreateElasticsearchDomainInput) (r0 *elasticsearchservice.CreateElasticsearchDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateElasticsearchDomain", i0)
	r0, _ = returns[0].(*elasticsearchservice.CreateElasticsearchDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) CreateElasticsearchDomainRequest(i0 *elasticsearchservice.CreateElasticsearchDomainInput) (r0 *request.Request, r1 *elasticsearchservice.CreateElasticsearchDomainOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateElasticsearchDomainRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticsearchservice.CreateElasticsearchDomainOutput)
	return
}

func (d *ElasticsearchServiceDouble) CreateElasticsearchDomainWithContext(i0 context.Context, i1 *elasticsearchservice.CreateElasticsearchDomainInput, i2 ...request.Option) (r0 *elasticsearchservice.CreateElasticsearchDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateElasticsearchDomainWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticsearchservice.CreateElasticsearchDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) fakeCreateElasticsearchDomainWithContext(ctx context.Context, in *elasticsearchservice.CreateElasticsearchDomainInput, _ ...request.Option) (*elasticsearchservice.CreateElasticsearchDomainOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateElasticsearchDomain cancelled", ctx.Err())
	default:
		return d.CreateElasticsearchDomain(in)
	}
}

func (d *ElasticsearchServiceDouble) DeleteElasticsearchDomain(i0 *elasticsearchservice.DeleteElasticsearchDomainInput) (r0 *elasticsearchservice.DeleteElasticsearchDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteElasticsearchDomain", i0)
	r0, _ = returns[0].(*elasticsearchservice.DeleteElasticsearchDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) DeleteElasticsearchDomainRequest(i0 *elasticsearchservice.DeleteElasticsearchDomainInput) (r0 *request.Request, r1 *elasticsearchservice.DeleteElasticsearchDomainOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteElasticsearchDomainRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticsearchservice.DeleteElasticsearchDomainOutput)
	return
}

func (d *ElasticsearchServiceDouble) DeleteElasticsearchDomainWithContext(i0 context.Context, i1 *elasticsearchservice.DeleteElasticsearchDomainInput, i2 ...request.Option) (r0 *elasticsearchservice.DeleteElasticsearchDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteElasticsearchDomainWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticsearchservice.DeleteElasticsearchDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) fakeDeleteElasticsearchDomainWithContext(ctx context.Context, in *elasticsearchservice.DeleteElasticsearchDomainInput, _ ...request.Option) (*elasticsearchservice.DeleteElasticsearchDomainOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteElasticsearchDomain cancelled", ctx.Err())
	default:
		return d.DeleteElasticsearchDomain(in)
	}
}

func (d *ElasticsearchServiceDouble) DeleteElasticsearchServiceRole(i0 *elasticsearchservice.DeleteElasticsearchServiceRoleInput) (r0 *elasticsearchservice.DeleteElasticsearchServiceRoleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteElasticsearchServiceRole", i0)
	r0, _ = returns[0].(*elasticsearchservice.DeleteElasticsearchServiceRoleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) DeleteElasticsearchServiceRoleRequest(i0 *elasticsearchservice.DeleteElasticsearchServiceRoleInput) (r0 *request.Request, r1 *elasticsearchservice.DeleteElasticsearchServiceRoleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteElasticsearchServiceRoleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticsearchservice.DeleteElasticsearchServiceRoleOutput)
	return
}

func (d *ElasticsearchServiceDouble) DeleteElasticsearchServiceRoleWithContext(i0 context.Context, i1 *elasticsearchservice.DeleteElasticsearchServiceRoleInput, i2 ...request.Option) (r0 *elasticsearchservice.DeleteElasticsearchServiceRoleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteElasticsearchServiceRoleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticsearchservice.DeleteElasticsearchServiceRoleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) fakeDeleteElasticsearchServiceRoleWithContext(ctx context.Context, in *elasticsearchservice.DeleteElasticsearchServiceRoleInput, _ ...request.Option) (*elasticsearchservice.DeleteElasticsearchServiceRoleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteElasticsearchServiceRole cancelled", ctx.Err())
	default:
		return d.DeleteElasticsearchServiceRole(in)
	}
}

func (d *ElasticsearchServiceDouble) DescribeElasticsearchDomain(i0 *elasticsearchservice.DescribeElasticsearchDomainInput) (r0 *elasticsearchservice.DescribeElasticsearchDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeElasticsearchDomain", i0)
	r0, _ = returns[0].(*elasticsearchservice.DescribeElasticsearchDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) DescribeElasticsearchDomainConfig(i0 *elasticsearchservice.DescribeElasticsearchDomainConfigInput) (r0 *elasticsearchservice.DescribeElasticsearchDomainConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeElasticsearchDomainConfig", i0)
	r0, _ = returns[0].(*elasticsearchservice.DescribeElasticsearchDomainConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) DescribeElasticsearchDomainConfigRequest(i0 *elasticsearchservice.DescribeElasticsearchDomainConfigInput) (r0 *request.Request, r1 *elasticsearchservice.DescribeElasticsearchDomainConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeElasticsearchDomainConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticsearchservice.DescribeElasticsearchDomainConfigOutput)
	return
}

func (d *ElasticsearchServiceDouble) DescribeElasticsearchDomainConfigWithContext(i0 context.Context, i1 *elasticsearchservice.DescribeElasticsearchDomainConfigInput, i2 ...request.Option) (r0 *elasticsearchservice.DescribeElasticsearchDomainConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeElasticsearchDomainConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticsearchservice.DescribeElasticsearchDomainConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) fakeDescribeElasticsearchDomainConfigWithContext(ctx context.Context, in *elasticsearchservice.DescribeElasticsearchDomainConfigInput, _ ...request.Option) (*elasticsearchservice.DescribeElasticsearchDomainConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeElasticsearchDomainConfig cancelled", ctx.Err())
	default:
		return d.DescribeElasticsearchDomainConfig(in)
	}
}

func (d *ElasticsearchServiceDouble) DescribeElasticsearchDomainRequest(i0 *elasticsearchservice.DescribeElasticsearchDomainInput) (r0 *request.Request, r1 *elasticsearchservice.DescribeElasticsearchDomainOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeElasticsearchDomainRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticsearchservice.DescribeElasticsearchDomainOutput)
	return
}

func (d *ElasticsearchServiceDouble) DescribeElasticsearchDomainWithContext(i0 context.Context, i1 *elasticsearchservice.DescribeElasticsearchDomainInput, i2 ...request.Option) (r0 *elasticsearchservice.DescribeElasticsearchDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeElasticsearchDomainWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticsearchservice.DescribeElasticsearchDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) fakeDescribeElasticsearchDomainWithContext(ctx context.Context, in *elasticsearchservice.DescribeElasticsearchDomainInput, _ ...request.Option) (*elasticsearchservice.DescribeElasticsearchDomainOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeElasticsearchDomain cancelled", ctx.Err())
	default:
		return d.DescribeElasticsearchDomain(in)
	}
}

func (d *ElasticsearchServiceDouble) DescribeElasticsearchDomains(i0 *elasticsearchservice.DescribeElasticsearchDomainsInput) (r0 *elasticsearchservice.DescribeElasticsearchDomainsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeElasticsearchDomains", i0)
	r0, _ = returns[0].(*elasticsearchservice.DescribeElasticsearchDomainsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) DescribeElasticsearchDomainsRequest(i0 *elasticsearchservice.DescribeElasticsearchDomainsInput) (r0 *request.Request, r1 *elasticsearchservice.DescribeElasticsearchDomainsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeElasticsearchDomainsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticsearchservice.DescribeElasticsearchDomainsOutput)
	return
}

func (d *ElasticsearchServiceDouble) DescribeElasticsearchDomainsWithContext(i0 context.Context, i1 *elasticsearchservice.DescribeElasticsearchDomainsInput, i2 ...request.Option) (r0 *elasticsearchservice.DescribeElasticsearchDomainsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeElasticsearchDomainsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticsearchservice.DescribeElasticsearchDomainsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) fakeDescribeElasticsearchDomainsWithContext(ctx context.Context, in *elasticsearchservice.DescribeElasticsearchDomainsInput, _ ...request.Option) (*elasticsearchservice.DescribeElasticsearchDomainsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeElasticsearchDomains cancelled", ctx.Err())
	default:
		return d.DescribeElasticsearchDomains(in)
	}
}

func (d *ElasticsearchServiceDouble) DescribeElasticsearchInstanceTypeLimits(i0 *elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsInput) (r0 *elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeElasticsearchInstanceTypeLimits", i0)
	r0, _ = returns[0].(*elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) DescribeElasticsearchInstanceTypeLimitsRequest(i0 *elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsInput) (r0 *request.Request, r1 *elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeElasticsearchInstanceTypeLimitsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsOutput)
	return
}

func (d *ElasticsearchServiceDouble) DescribeElasticsearchInstanceTypeLimitsWithContext(i0 context.Context, i1 *elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsInput, i2 ...request.Option) (r0 *elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeElasticsearchInstanceTypeLimitsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) fakeDescribeElasticsearchInstanceTypeLimitsWithContext(ctx context.Context, in *elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsInput, _ ...request.Option) (*elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeElasticsearchInstanceTypeLimits cancelled", ctx.Err())
	default:
		return d.DescribeElasticsearchInstanceTypeLimits(in)
	}
}

func (d *ElasticsearchServiceDouble) DescribeReservedElasticsearchInstanceOfferings(i0 *elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsInput) (r0 *elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedElasticsearchInstanceOfferings", i0)
	r0, _ = returns[0].(*elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) DescribeReservedElasticsearchInstanceOfferingsPages(i0 *elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsInput, i1 func(*elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedElasticsearchInstanceOfferingsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ElasticsearchServiceDouble) fakeDescribeReservedElasticsearchInstanceOfferingsPages(in *elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsInput, pager func(*elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeReservedElasticsearchInstanceOfferings", paginators, in, pager)
}

func (d *ElasticsearchServiceDouble) DescribeReservedElasticsearchInstanceOfferingsPagesWithContext(i0 context.Context, i1 *elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsInput, i2 func(*elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedElasticsearchInstanceOfferingsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ElasticsearchServiceDouble) fakeDescribeReservedElasticsearchInstanceOfferingsPagesWithContext(ctx context.Context, in *elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsInput, pager func(*elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeReservedElasticsearchInstanceOfferings", paginators, ctx, in, pager, options...)
}

func (d *ElasticsearchServiceDouble) DescribeReservedElasticsearchInstanceOfferingsRequest(i0 *elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsInput) (r0 *request.Request, r1 *elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedElasticsearchInstanceOfferingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsOutput)
	return
}

func (d *ElasticsearchServiceDouble) DescribeReservedElasticsearchInstanceOfferingsWithContext(i0 context.Context, i1 *elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsInput, i2 ...request.Option) (r0 *elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedElasticsearchInstanceOfferingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) fakeDescribeReservedElasticsearchInstanceOfferingsWithContext(ctx context.Context, in *elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsInput, _ ...request.Option) (*elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeReservedElasticsearchInstanceOfferings cancelled", ctx.Err())
	default:
		return d.DescribeReservedElasticsearchInstanceOfferings(in)
	}
}

func (d *ElasticsearchServiceDouble) DescribeReservedElasticsearchInstances(i0 *elasticsearchservice.DescribeReservedElasticsearchInstancesInput) (r0 *elasticsearchservice.DescribeReservedElasticsearchInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedElasticsearchInstances", i0)
	r0, _ = returns[0].(*elasticsearchservice.DescribeReservedElasticsearchInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) DescribeReservedElasticsearchInstancesPages(i0 *elasticsearchservice.DescribeReservedElasticsearchInstancesInput, i1 func(*elasticsearchservice.DescribeReservedElasticsearchInstancesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedElasticsearchInstancesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ElasticsearchServiceDouble) fakeDescribeReservedElasticsearchInstancesPages(in *elasticsearchservice.DescribeReservedElasticsearchInstancesInput, pager func(*elasticsearchservice.DescribeReservedElasticsearchInstancesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeReservedElasticsearchInstances", paginators, in, pager)
}

func (d *ElasticsearchServiceDouble) DescribeReservedElasticsearchInstancesPagesWithContext(i0 context.Context, i1 *elasticsearchservice.DescribeReservedElasticsearchInstancesInput, i2 func(*elasticsearchservice.DescribeReservedElasticsearchInstancesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedElasticsearchInstancesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ElasticsearchServiceDouble) fakeDescribeReservedElasticsearchInstancesPagesWithContext(ctx context.Context, in *elasticsearchservice.DescribeReservedElasticsearchInstancesInput, pager func(*elasticsearchservice.DescribeReservedElasticsearchInstancesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeReservedElasticsearchInstances", paginators, ctx, in, pager, options...)
}

func (d *ElasticsearchServiceDouble) DescribeReservedElasticsearchInstancesRequest(i0 *elasticsearchservice.DescribeReservedElasticsearchInstancesInput) (r0 *request.Request, r1 *elasticsearchservice.DescribeReservedElasticsearchInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedElasticsearchInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticsearchservice.DescribeReservedElasticsearchInstancesOutput)
	return
}

func (d *ElasticsearchServiceDouble) DescribeReservedElasticsearchInstancesWithContext(i0 context.Context, i1 *elasticsearchservice.DescribeReservedElasticsearchInstancesInput, i2 ...request.Option) (r0 *elasticsearchservice.DescribeReservedElasticsearchInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedElasticsearchInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticsearchservice.DescribeReservedElasticsearchInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) fakeDescribeReservedElasticsearchInstancesWithContext(ctx context.Context, in *elasticsearchservice.DescribeReservedElasticsearchInstancesInput, _ ...request.Option) (*elasticsearchservice.DescribeReservedElasticsearchInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeReservedElasticsearchInstances cancelled", ctx.Err())
	default:
		return d.DescribeReservedElasticsearchInstances(in)
	}
}

func (d *ElasticsearchServiceDouble) GetCompatibleElasticsearchVersions(i0 *elasticsearchservice.GetCompatibleElasticsearchVersionsInput) (r0 *elasticsearchservice.GetCompatibleElasticsearchVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCompatibleElasticsearchVersions", i0)
	r0, _ = returns[0].(*elasticsearchservice.GetCompatibleElasticsearchVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) GetCompatibleElasticsearchVersionsRequest(i0 *elasticsearchservice.GetCompatibleElasticsearchVersionsInput) (r0 *request.Request, r1 *elasticsearchservice.GetCompatibleElasticsearchVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCompatibleElasticsearchVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticsearchservice.GetCompatibleElasticsearchVersionsOutput)
	return
}

func (d *ElasticsearchServiceDouble) GetCompatibleElasticsearchVersionsWithContext(i0 context.Context, i1 *elasticsearchservice.GetCompatibleElasticsearchVersionsInput, i2 ...request.Option) (r0 *elasticsearchservice.GetCompatibleElasticsearchVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCompatibleElasticsearchVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticsearchservice.GetCompatibleElasticsearchVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) fakeGetCompatibleElasticsearchVersionsWithContext(ctx context.Context, in *elasticsearchservice.GetCompatibleElasticsearchVersionsInput, _ ...request.Option) (*elasticsearchservice.GetCompatibleElasticsearchVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetCompatibleElasticsearchVersions cancelled", ctx.Err())
	default:
		return d.GetCompatibleElasticsearchVersions(in)
	}
}

func (d *ElasticsearchServiceDouble) GetUpgradeHistory(i0 *elasticsearchservice.GetUpgradeHistoryInput) (r0 *elasticsearchservice.GetUpgradeHistoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUpgradeHistory", i0)
	r0, _ = returns[0].(*elasticsearchservice.GetUpgradeHistoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) GetUpgradeHistoryPages(i0 *elasticsearchservice.GetUpgradeHistoryInput, i1 func(*elasticsearchservice.GetUpgradeHistoryOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUpgradeHistoryPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ElasticsearchServiceDouble) fakeGetUpgradeHistoryPages(in *elasticsearchservice.GetUpgradeHistoryInput, pager func(*elasticsearchservice.GetUpgradeHistoryOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetUpgradeHistory", paginators, in, pager)
}

func (d *ElasticsearchServiceDouble) GetUpgradeHistoryPagesWithContext(i0 context.Context, i1 *elasticsearchservice.GetUpgradeHistoryInput, i2 func(*elasticsearchservice.GetUpgradeHistoryOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUpgradeHistoryPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ElasticsearchServiceDouble) fakeGetUpgradeHistoryPagesWithContext(ctx context.Context, in *elasticsearchservice.GetUpgradeHistoryInput, pager func(*elasticsearchservice.GetUpgradeHistoryOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetUpgradeHistory", paginators, ctx, in, pager, options...)
}

func (d *ElasticsearchServiceDouble) GetUpgradeHistoryRequest(i0 *elasticsearchservice.GetUpgradeHistoryInput) (r0 *request.Request, r1 *elasticsearchservice.GetUpgradeHistoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUpgradeHistoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticsearchservice.GetUpgradeHistoryOutput)
	return
}

func (d *ElasticsearchServiceDouble) GetUpgradeHistoryWithContext(i0 context.Context, i1 *elasticsearchservice.GetUpgradeHistoryInput, i2 ...request.Option) (r0 *elasticsearchservice.GetUpgradeHistoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUpgradeHistoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticsearchservice.GetUpgradeHistoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) fakeGetUpgradeHistoryWithContext(ctx context.Context, in *elasticsearchservice.GetUpgradeHistoryInput, _ ...request.Option) (*elasticsearchservice.GetUpgradeHistoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetUpgradeHistory cancelled", ctx.Err())
	default:
		return d.GetUpgradeHistory(in)
	}
}

func (d *ElasticsearchServiceDouble) GetUpgradeStatus(i0 *elasticsearchservice.GetUpgradeStatusInput) (r0 *elasticsearchservice.GetUpgradeStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUpgradeStatus", i0)
	r0, _ = returns[0].(*elasticsearchservice.GetUpgradeStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) GetUpgradeStatusRequest(i0 *elasticsearchservice.GetUpgradeStatusInput) (r0 *request.Request, r1 *elasticsearchservice.GetUpgradeStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUpgradeStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticsearchservice.GetUpgradeStatusOutput)
	return
}

func (d *ElasticsearchServiceDouble) GetUpgradeStatusWithContext(i0 context.Context, i1 *elasticsearchservice.GetUpgradeStatusInput, i2 ...request.Option) (r0 *elasticsearchservice.GetUpgradeStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUpgradeStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticsearchservice.GetUpgradeStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) fakeGetUpgradeStatusWithContext(ctx context.Context, in *elasticsearchservice.GetUpgradeStatusInput, _ ...request.Option) (*elasticsearchservice.GetUpgradeStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetUpgradeStatus cancelled", ctx.Err())
	default:
		return d.GetUpgradeStatus(in)
	}
}

func (d *ElasticsearchServiceDouble) ListDomainNames(i0 *elasticsearchservice.ListDomainNamesInput) (r0 *elasticsearchservice.ListDomainNamesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDomainNames", i0)
	r0, _ = returns[0].(*elasticsearchservice.ListDomainNamesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) ListDomainNamesRequest(i0 *elasticsearchservice.ListDomainNamesInput) (r0 *request.Request, r1 *elasticsearchservice.ListDomainNamesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDomainNamesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticsearchservice.ListDomainNamesOutput)
	return
}

func (d *ElasticsearchServiceDouble) ListDomainNamesWithContext(i0 context.Context, i1 *elasticsearchservice.ListDomainNamesInput, i2 ...request.Option) (r0 *elasticsearchservice.ListDomainNamesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDomainNamesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticsearchservice.ListDomainNamesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) fakeListDomainNamesWithContext(ctx context.Context, in *elasticsearchservice.ListDomainNamesInput, _ ...request.Option) (*elasticsearchservice.ListDomainNamesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDomainNames cancelled", ctx.Err())
	default:
		return d.ListDomainNames(in)
	}
}

func (d *ElasticsearchServiceDouble) ListElasticsearchInstanceTypes(i0 *elasticsearchservice.ListElasticsearchInstanceTypesInput) (r0 *elasticsearchservice.ListElasticsearchInstanceTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListElasticsearchInstanceTypes", i0)
	r0, _ = returns[0].(*elasticsearchservice.ListElasticsearchInstanceTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) ListElasticsearchInstanceTypesPages(i0 *elasticsearchservice.ListElasticsearchInstanceTypesInput, i1 func(*elasticsearchservice.ListElasticsearchInstanceTypesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListElasticsearchInstanceTypesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ElasticsearchServiceDouble) fakeListElasticsearchInstanceTypesPages(in *elasticsearchservice.ListElasticsearchInstanceTypesInput, pager func(*elasticsearchservice.ListElasticsearchInstanceTypesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListElasticsearchInstanceTypes", paginators, in, pager)
}

func (d *ElasticsearchServiceDouble) ListElasticsearchInstanceTypesPagesWithContext(i0 context.Context, i1 *elasticsearchservice.ListElasticsearchInstanceTypesInput, i2 func(*elasticsearchservice.ListElasticsearchInstanceTypesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListElasticsearchInstanceTypesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ElasticsearchServiceDouble) fakeListElasticsearchInstanceTypesPagesWithContext(ctx context.Context, in *elasticsearchservice.ListElasticsearchInstanceTypesInput, pager func(*elasticsearchservice.ListElasticsearchInstanceTypesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListElasticsearchInstanceTypes", paginators, ctx, in, pager, options...)
}

func (d *ElasticsearchServiceDouble) ListElasticsearchInstanceTypesRequest(i0 *elasticsearchservice.ListElasticsearchInstanceTypesInput) (r0 *request.Request, r1 *elasticsearchservice.ListElasticsearchInstanceTypesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListElasticsearchInstanceTypesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticsearchservice.ListElasticsearchInstanceTypesOutput)
	return
}

func (d *ElasticsearchServiceDouble) ListElasticsearchInstanceTypesWithContext(i0 context.Context, i1 *elasticsearchservice.ListElasticsearchInstanceTypesInput, i2 ...request.Option) (r0 *elasticsearchservice.ListElasticsearchInstanceTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListElasticsearchInstanceTypesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticsearchservice.ListElasticsearchInstanceTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) fakeListElasticsearchInstanceTypesWithContext(ctx context.Context, in *elasticsearchservice.ListElasticsearchInstanceTypesInput, _ ...request.Option) (*elasticsearchservice.ListElasticsearchInstanceTypesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListElasticsearchInstanceTypes cancelled", ctx.Err())
	default:
		return d.ListElasticsearchInstanceTypes(in)
	}
}

func (d *ElasticsearchServiceDouble) ListElasticsearchVersions(i0 *elasticsearchservice.ListElasticsearchVersionsInput) (r0 *elasticsearchservice.ListElasticsearchVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListElasticsearchVersions", i0)
	r0, _ = returns[0].(*elasticsearchservice.ListElasticsearchVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) ListElasticsearchVersionsPages(i0 *elasticsearchservice.ListElasticsearchVersionsInput, i1 func(*elasticsearchservice.ListElasticsearchVersionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListElasticsearchVersionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ElasticsearchServiceDouble) fakeListElasticsearchVersionsPages(in *elasticsearchservice.ListElasticsearchVersionsInput, pager func(*elasticsearchservice.ListElasticsearchVersionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListElasticsearchVersions", paginators, in, pager)
}

func (d *ElasticsearchServiceDouble) ListElasticsearchVersionsPagesWithContext(i0 context.Context, i1 *elasticsearchservice.ListElasticsearchVersionsInput, i2 func(*elasticsearchservice.ListElasticsearchVersionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListElasticsearchVersionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ElasticsearchServiceDouble) fakeListElasticsearchVersionsPagesWithContext(ctx context.Context, in *elasticsearchservice.ListElasticsearchVersionsInput, pager func(*elasticsearchservice.ListElasticsearchVersionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListElasticsearchVersions", paginators, ctx, in, pager, options...)
}

func (d *ElasticsearchServiceDouble) ListElasticsearchVersionsRequest(i0 *elasticsearchservice.ListElasticsearchVersionsInput) (r0 *request.Request, r1 *elasticsearchservice.ListElasticsearchVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListElasticsearchVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticsearchservice.ListElasticsearchVersionsOutput)
	return
}

func (d *ElasticsearchServiceDouble) ListElasticsearchVersionsWithContext(i0 context.Context, i1 *elasticsearchservice.ListElasticsearchVersionsInput, i2 ...request.Option) (r0 *elasticsearchservice.ListElasticsearchVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListElasticsearchVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticsearchservice.ListElasticsearchVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) fakeListElasticsearchVersionsWithContext(ctx context.Context, in *elasticsearchservice.ListElasticsearchVersionsInput, _ ...request.Option) (*elasticsearchservice.ListElasticsearchVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListElasticsearchVersions cancelled", ctx.Err())
	default:
		return d.ListElasticsearchVersions(in)
	}
}

func (d *ElasticsearchServiceDouble) ListTags(i0 *elasticsearchservice.ListTagsInput) (r0 *elasticsearchservice.ListTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTags", i0)
	r0, _ = returns[0].(*elasticsearchservice.ListTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) ListTagsRequest(i0 *elasticsearchservice.ListTagsInput) (r0 *request.Request, r1 *elasticsearchservice.ListTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticsearchservice.ListTagsOutput)
	return
}

func (d *ElasticsearchServiceDouble) ListTagsWithContext(i0 context.Context, i1 *elasticsearchservice.ListTagsInput, i2 ...request.Option) (r0 *elasticsearchservice.ListTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticsearchservice.ListTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) fakeListTagsWithContext(ctx context.Context, in *elasticsearchservice.ListTagsInput, _ ...request.Option) (*elasticsearchservice.ListTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTags cancelled", ctx.Err())
	default:
		return d.ListTags(in)
	}
}

func (d *ElasticsearchServiceDouble) PurchaseReservedElasticsearchInstanceOffering(i0 *elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingInput) (r0 *elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PurchaseReservedElasticsearchInstanceOffering", i0)
	r0, _ = returns[0].(*elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) PurchaseReservedElasticsearchInstanceOfferingRequest(i0 *elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingInput) (r0 *request.Request, r1 *elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PurchaseReservedElasticsearchInstanceOfferingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingOutput)
	return
}

func (d *ElasticsearchServiceDouble) PurchaseReservedElasticsearchInstanceOfferingWithContext(i0 context.Context, i1 *elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingInput, i2 ...request.Option) (r0 *elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PurchaseReservedElasticsearchInstanceOfferingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) fakePurchaseReservedElasticsearchInstanceOfferingWithContext(ctx context.Context, in *elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingInput, _ ...request.Option) (*elasticsearchservice.PurchaseReservedElasticsearchInstanceOfferingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PurchaseReservedElasticsearchInstanceOffering cancelled", ctx.Err())
	default:
		return d.PurchaseReservedElasticsearchInstanceOffering(in)
	}
}

func (d *ElasticsearchServiceDouble) RemoveTags(i0 *elasticsearchservice.RemoveTagsInput) (r0 *elasticsearchservice.RemoveTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTags", i0)
	r0, _ = returns[0].(*elasticsearchservice.RemoveTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) RemoveTagsRequest(i0 *elasticsearchservice.RemoveTagsInput) (r0 *request.Request, r1 *elasticsearchservice.RemoveTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticsearchservice.RemoveTagsOutput)
	return
}

func (d *ElasticsearchServiceDouble) RemoveTagsWithContext(i0 context.Context, i1 *elasticsearchservice.RemoveTagsInput, i2 ...request.Option) (r0 *elasticsearchservice.RemoveTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticsearchservice.RemoveTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) fakeRemoveTagsWithContext(ctx context.Context, in *elasticsearchservice.RemoveTagsInput, _ ...request.Option) (*elasticsearchservice.RemoveTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveTags cancelled", ctx.Err())
	default:
		return d.RemoveTags(in)
	}
}

func (d *ElasticsearchServiceDouble) StartElasticsearchServiceSoftwareUpdate(i0 *elasticsearchservice.StartElasticsearchServiceSoftwareUpdateInput) (r0 *elasticsearchservice.StartElasticsearchServiceSoftwareUpdateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartElasticsearchServiceSoftwareUpdate", i0)
	r0, _ = returns[0].(*elasticsearchservice.StartElasticsearchServiceSoftwareUpdateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) StartElasticsearchServiceSoftwareUpdateRequest(i0 *elasticsearchservice.StartElasticsearchServiceSoftwareUpdateInput) (r0 *request.Request, r1 *elasticsearchservice.StartElasticsearchServiceSoftwareUpdateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartElasticsearchServiceSoftwareUpdateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticsearchservice.StartElasticsearchServiceSoftwareUpdateOutput)
	return
}

func (d *ElasticsearchServiceDouble) StartElasticsearchServiceSoftwareUpdateWithContext(i0 context.Context, i1 *elasticsearchservice.StartElasticsearchServiceSoftwareUpdateInput, i2 ...request.Option) (r0 *elasticsearchservice.StartElasticsearchServiceSoftwareUpdateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartElasticsearchServiceSoftwareUpdateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticsearchservice.StartElasticsearchServiceSoftwareUpdateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) fakeStartElasticsearchServiceSoftwareUpdateWithContext(ctx context.Context, in *elasticsearchservice.StartElasticsearchServiceSoftwareUpdateInput, _ ...request.Option) (*elasticsearchservice.StartElasticsearchServiceSoftwareUpdateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartElasticsearchServiceSoftwareUpdate cancelled", ctx.Err())
	default:
		return d.StartElasticsearchServiceSoftwareUpdate(in)
	}
}

func (d *ElasticsearchServiceDouble) UpdateElasticsearchDomainConfig(i0 *elasticsearchservice.UpdateElasticsearchDomainConfigInput) (r0 *elasticsearchservice.UpdateElasticsearchDomainConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateElasticsearchDomainConfig", i0)
	r0, _ = returns[0].(*elasticsearchservice.UpdateElasticsearchDomainConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) UpdateElasticsearchDomainConfigRequest(i0 *elasticsearchservice.UpdateElasticsearchDomainConfigInput) (r0 *request.Request, r1 *elasticsearchservice.UpdateElasticsearchDomainConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateElasticsearchDomainConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticsearchservice.UpdateElasticsearchDomainConfigOutput)
	return
}

func (d *ElasticsearchServiceDouble) UpdateElasticsearchDomainConfigWithContext(i0 context.Context, i1 *elasticsearchservice.UpdateElasticsearchDomainConfigInput, i2 ...request.Option) (r0 *elasticsearchservice.UpdateElasticsearchDomainConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateElasticsearchDomainConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticsearchservice.UpdateElasticsearchDomainConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) fakeUpdateElasticsearchDomainConfigWithContext(ctx context.Context, in *elasticsearchservice.UpdateElasticsearchDomainConfigInput, _ ...request.Option) (*elasticsearchservice.UpdateElasticsearchDomainConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateElasticsearchDomainConfig cancelled", ctx.Err())
	default:
		return d.UpdateElasticsearchDomainConfig(in)
	}
}

func (d *ElasticsearchServiceDouble) UpgradeElasticsearchDomain(i0 *elasticsearchservice.UpgradeElasticsearchDomainInput) (r0 *elasticsearchservice.UpgradeElasticsearchDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpgradeElasticsearchDomain", i0)
	r0, _ = returns[0].(*elasticsearchservice.UpgradeElasticsearchDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) UpgradeElasticsearchDomainRequest(i0 *elasticsearchservice.UpgradeElasticsearchDomainInput) (r0 *request.Request, r1 *elasticsearchservice.UpgradeElasticsearchDomainOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpgradeElasticsearchDomainRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticsearchservice.UpgradeElasticsearchDomainOutput)
	return
}

func (d *ElasticsearchServiceDouble) UpgradeElasticsearchDomainWithContext(i0 context.Context, i1 *elasticsearchservice.UpgradeElasticsearchDomainInput, i2 ...request.Option) (r0 *elasticsearchservice.UpgradeElasticsearchDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpgradeElasticsearchDomainWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticsearchservice.UpgradeElasticsearchDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticsearchServiceDouble) fakeUpgradeElasticsearchDomainWithContext(ctx context.Context, in *elasticsearchservice.UpgradeElasticsearchDomainInput, _ ...request.Option) (*elasticsearchservice.UpgradeElasticsearchDomainOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpgradeElasticsearchDomain cancelled", ctx.Err())
	default:
		return d.UpgradeElasticsearchDomain(in)
	}
}
