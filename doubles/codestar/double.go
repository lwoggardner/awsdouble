// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:11:53+11:00

// Package codestardouble provides a TestDouble implementation of codestariface.CodeStarAPI
package codestardouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/codestar"
	"github.com/aws/aws-sdk-go/service/codestar/codestariface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// CodeStarDouble is TestDouble for codestariface.CodeStarAPI
type CodeStarDouble struct {
	codestariface.CodeStarAPI
	*awsdouble.AWSTestDouble
}

// Constructor for CodeStarDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *CodeStarDouble {
	result := &CodeStarDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*codestariface.CodeStarAPI)(nil), configurators...)
	return result
}

func (d *CodeStarDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *CodeStarDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AssociateTeamMemberWithContext":
		return m.Fake(d.fakeAssociateTeamMemberWithContext)

	case "CreateProjectWithContext":
		return m.Fake(d.fakeCreateProjectWithContext)

	case "CreateUserProfileWithContext":
		return m.Fake(d.fakeCreateUserProfileWithContext)

	case "DeleteProjectWithContext":
		return m.Fake(d.fakeDeleteProjectWithContext)

	case "DeleteUserProfileWithContext":
		return m.Fake(d.fakeDeleteUserProfileWithContext)

	case "DescribeProjectWithContext":
		return m.Fake(d.fakeDescribeProjectWithContext)

	case "DescribeUserProfileWithContext":
		return m.Fake(d.fakeDescribeUserProfileWithContext)

	case "DisassociateTeamMemberWithContext":
		return m.Fake(d.fakeDisassociateTeamMemberWithContext)

	case "ListProjectsWithContext":
		return m.Fake(d.fakeListProjectsWithContext)

	case "ListResourcesWithContext":
		return m.Fake(d.fakeListResourcesWithContext)

	case "ListTagsForProjectWithContext":
		return m.Fake(d.fakeListTagsForProjectWithContext)

	case "ListTeamMembersWithContext":
		return m.Fake(d.fakeListTeamMembersWithContext)

	case "ListUserProfilesWithContext":
		return m.Fake(d.fakeListUserProfilesWithContext)

	case "TagProjectWithContext":
		return m.Fake(d.fakeTagProjectWithContext)

	case "UntagProjectWithContext":
		return m.Fake(d.fakeUntagProjectWithContext)

	case "UpdateProjectWithContext":
		return m.Fake(d.fakeUpdateProjectWithContext)

	case "UpdateTeamMemberWithContext":
		return m.Fake(d.fakeUpdateTeamMemberWithContext)

	case "UpdateUserProfileWithContext":
		return m.Fake(d.fakeUpdateUserProfileWithContext)

	default:
		return nil
	}
}

func (d *CodeStarDouble) AssociateTeamMember(i0 *codestar.AssociateTeamMemberInput) (r0 *codestar.AssociateTeamMemberOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateTeamMember", i0)
	r0, _ = returns[0].(*codestar.AssociateTeamMemberOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarDouble) AssociateTeamMemberRequest(i0 *codestar.AssociateTeamMemberInput) (r0 *request.Request, r1 *codestar.AssociateTeamMemberOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateTeamMemberRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codestar.AssociateTeamMemberOutput)
	return
}

func (d *CodeStarDouble) AssociateTeamMemberWithContext(i0 context.Context, i1 *codestar.AssociateTeamMemberInput, i2 ...request.Option) (r0 *codestar.AssociateTeamMemberOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateTeamMemberWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codestar.AssociateTeamMemberOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarDouble) fakeAssociateTeamMemberWithContext(ctx context.Context, in *codestar.AssociateTeamMemberInput, _ ...request.Option) (*codestar.AssociateTeamMemberOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateTeamMember cancelled", ctx.Err())
	default:
		return d.AssociateTeamMember(in)
	}
}

func (d *CodeStarDouble) CreateProject(i0 *codestar.CreateProjectInput) (r0 *codestar.CreateProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProject", i0)
	r0, _ = returns[0].(*codestar.CreateProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarDouble) CreateProjectRequest(i0 *codestar.CreateProjectInput) (r0 *request.Request, r1 *codestar.CreateProjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codestar.CreateProjectOutput)
	return
}

func (d *CodeStarDouble) CreateProjectWithContext(i0 context.Context, i1 *codestar.CreateProjectInput, i2 ...request.Option) (r0 *codestar.CreateProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codestar.CreateProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarDouble) fakeCreateProjectWithContext(ctx context.Context, in *codestar.CreateProjectInput, _ ...request.Option) (*codestar.CreateProjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateProject cancelled", ctx.Err())
	default:
		return d.CreateProject(in)
	}
}

func (d *CodeStarDouble) CreateUserProfile(i0 *codestar.CreateUserProfileInput) (r0 *codestar.CreateUserProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserProfile", i0)
	r0, _ = returns[0].(*codestar.CreateUserProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarDouble) CreateUserProfileRequest(i0 *codestar.CreateUserProfileInput) (r0 *request.Request, r1 *codestar.CreateUserProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codestar.CreateUserProfileOutput)
	return
}

func (d *CodeStarDouble) CreateUserProfileWithContext(i0 context.Context, i1 *codestar.CreateUserProfileInput, i2 ...request.Option) (r0 *codestar.CreateUserProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codestar.CreateUserProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarDouble) fakeCreateUserProfileWithContext(ctx context.Context, in *codestar.CreateUserProfileInput, _ ...request.Option) (*codestar.CreateUserProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateUserProfile cancelled", ctx.Err())
	default:
		return d.CreateUserProfile(in)
	}
}

func (d *CodeStarDouble) DeleteProject(i0 *codestar.DeleteProjectInput) (r0 *codestar.DeleteProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteProject", i0)
	r0, _ = returns[0].(*codestar.DeleteProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarDouble) DeleteProjectRequest(i0 *codestar.DeleteProjectInput) (r0 *request.Request, r1 *codestar.DeleteProjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteProjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codestar.DeleteProjectOutput)
	return
}

func (d *CodeStarDouble) DeleteProjectWithContext(i0 context.Context, i1 *codestar.DeleteProjectInput, i2 ...request.Option) (r0 *codestar.DeleteProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteProjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codestar.DeleteProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarDouble) fakeDeleteProjectWithContext(ctx context.Context, in *codestar.DeleteProjectInput, _ ...request.Option) (*codestar.DeleteProjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteProject cancelled", ctx.Err())
	default:
		return d.DeleteProject(in)
	}
}

func (d *CodeStarDouble) DeleteUserProfile(i0 *codestar.DeleteUserProfileInput) (r0 *codestar.DeleteUserProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserProfile", i0)
	r0, _ = returns[0].(*codestar.DeleteUserProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarDouble) DeleteUserProfileRequest(i0 *codestar.DeleteUserProfileInput) (r0 *request.Request, r1 *codestar.DeleteUserProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codestar.DeleteUserProfileOutput)
	return
}

func (d *CodeStarDouble) DeleteUserProfileWithContext(i0 context.Context, i1 *codestar.DeleteUserProfileInput, i2 ...request.Option) (r0 *codestar.DeleteUserProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codestar.DeleteUserProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarDouble) fakeDeleteUserProfileWithContext(ctx context.Context, in *codestar.DeleteUserProfileInput, _ ...request.Option) (*codestar.DeleteUserProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteUserProfile cancelled", ctx.Err())
	default:
		return d.DeleteUserProfile(in)
	}
}

func (d *CodeStarDouble) DescribeProject(i0 *codestar.DescribeProjectInput) (r0 *codestar.DescribeProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProject", i0)
	r0, _ = returns[0].(*codestar.DescribeProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarDouble) DescribeProjectRequest(i0 *codestar.DescribeProjectInput) (r0 *request.Request, r1 *codestar.DescribeProjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codestar.DescribeProjectOutput)
	return
}

func (d *CodeStarDouble) DescribeProjectWithContext(i0 context.Context, i1 *codestar.DescribeProjectInput, i2 ...request.Option) (r0 *codestar.DescribeProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codestar.DescribeProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarDouble) fakeDescribeProjectWithContext(ctx context.Context, in *codestar.DescribeProjectInput, _ ...request.Option) (*codestar.DescribeProjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeProject cancelled", ctx.Err())
	default:
		return d.DescribeProject(in)
	}
}

func (d *CodeStarDouble) DescribeUserProfile(i0 *codestar.DescribeUserProfileInput) (r0 *codestar.DescribeUserProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserProfile", i0)
	r0, _ = returns[0].(*codestar.DescribeUserProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarDouble) DescribeUserProfileRequest(i0 *codestar.DescribeUserProfileInput) (r0 *request.Request, r1 *codestar.DescribeUserProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codestar.DescribeUserProfileOutput)
	return
}

func (d *CodeStarDouble) DescribeUserProfileWithContext(i0 context.Context, i1 *codestar.DescribeUserProfileInput, i2 ...request.Option) (r0 *codestar.DescribeUserProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codestar.DescribeUserProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarDouble) fakeDescribeUserProfileWithContext(ctx context.Context, in *codestar.DescribeUserProfileInput, _ ...request.Option) (*codestar.DescribeUserProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeUserProfile cancelled", ctx.Err())
	default:
		return d.DescribeUserProfile(in)
	}
}

func (d *CodeStarDouble) DisassociateTeamMember(i0 *codestar.DisassociateTeamMemberInput) (r0 *codestar.DisassociateTeamMemberOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateTeamMember", i0)
	r0, _ = returns[0].(*codestar.DisassociateTeamMemberOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarDouble) DisassociateTeamMemberRequest(i0 *codestar.DisassociateTeamMemberInput) (r0 *request.Request, r1 *codestar.DisassociateTeamMemberOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateTeamMemberRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codestar.DisassociateTeamMemberOutput)
	return
}

func (d *CodeStarDouble) DisassociateTeamMemberWithContext(i0 context.Context, i1 *codestar.DisassociateTeamMemberInput, i2 ...request.Option) (r0 *codestar.DisassociateTeamMemberOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateTeamMemberWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codestar.DisassociateTeamMemberOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarDouble) fakeDisassociateTeamMemberWithContext(ctx context.Context, in *codestar.DisassociateTeamMemberInput, _ ...request.Option) (*codestar.DisassociateTeamMemberOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateTeamMember cancelled", ctx.Err())
	default:
		return d.DisassociateTeamMember(in)
	}
}

func (d *CodeStarDouble) ListProjects(i0 *codestar.ListProjectsInput) (r0 *codestar.ListProjectsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProjects", i0)
	r0, _ = returns[0].(*codestar.ListProjectsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarDouble) ListProjectsRequest(i0 *codestar.ListProjectsInput) (r0 *request.Request, r1 *codestar.ListProjectsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProjectsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codestar.ListProjectsOutput)
	return
}

func (d *CodeStarDouble) ListProjectsWithContext(i0 context.Context, i1 *codestar.ListProjectsInput, i2 ...request.Option) (r0 *codestar.ListProjectsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProjectsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codestar.ListProjectsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarDouble) fakeListProjectsWithContext(ctx context.Context, in *codestar.ListProjectsInput, _ ...request.Option) (*codestar.ListProjectsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListProjects cancelled", ctx.Err())
	default:
		return d.ListProjects(in)
	}
}

func (d *CodeStarDouble) ListResources(i0 *codestar.ListResourcesInput) (r0 *codestar.ListResourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResources", i0)
	r0, _ = returns[0].(*codestar.ListResourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarDouble) ListResourcesRequest(i0 *codestar.ListResourcesInput) (r0 *request.Request, r1 *codestar.ListResourcesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourcesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codestar.ListResourcesOutput)
	return
}

func (d *CodeStarDouble) ListResourcesWithContext(i0 context.Context, i1 *codestar.ListResourcesInput, i2 ...request.Option) (r0 *codestar.ListResourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourcesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codestar.ListResourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarDouble) fakeListResourcesWithContext(ctx context.Context, in *codestar.ListResourcesInput, _ ...request.Option) (*codestar.ListResourcesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListResources cancelled", ctx.Err())
	default:
		return d.ListResources(in)
	}
}

func (d *CodeStarDouble) ListTagsForProject(i0 *codestar.ListTagsForProjectInput) (r0 *codestar.ListTagsForProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForProject", i0)
	r0, _ = returns[0].(*codestar.ListTagsForProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarDouble) ListTagsForProjectRequest(i0 *codestar.ListTagsForProjectInput) (r0 *request.Request, r1 *codestar.ListTagsForProjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForProjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codestar.ListTagsForProjectOutput)
	return
}

func (d *CodeStarDouble) ListTagsForProjectWithContext(i0 context.Context, i1 *codestar.ListTagsForProjectInput, i2 ...request.Option) (r0 *codestar.ListTagsForProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForProjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codestar.ListTagsForProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarDouble) fakeListTagsForProjectWithContext(ctx context.Context, in *codestar.ListTagsForProjectInput, _ ...request.Option) (*codestar.ListTagsForProjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForProject cancelled", ctx.Err())
	default:
		return d.ListTagsForProject(in)
	}
}

func (d *CodeStarDouble) ListTeamMembers(i0 *codestar.ListTeamMembersInput) (r0 *codestar.ListTeamMembersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTeamMembers", i0)
	r0, _ = returns[0].(*codestar.ListTeamMembersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarDouble) ListTeamMembersRequest(i0 *codestar.ListTeamMembersInput) (r0 *request.Request, r1 *codestar.ListTeamMembersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTeamMembersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codestar.ListTeamMembersOutput)
	return
}

func (d *CodeStarDouble) ListTeamMembersWithContext(i0 context.Context, i1 *codestar.ListTeamMembersInput, i2 ...request.Option) (r0 *codestar.ListTeamMembersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTeamMembersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codestar.ListTeamMembersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarDouble) fakeListTeamMembersWithContext(ctx context.Context, in *codestar.ListTeamMembersInput, _ ...request.Option) (*codestar.ListTeamMembersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTeamMembers cancelled", ctx.Err())
	default:
		return d.ListTeamMembers(in)
	}
}

func (d *CodeStarDouble) ListUserProfiles(i0 *codestar.ListUserProfilesInput) (r0 *codestar.ListUserProfilesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUserProfiles", i0)
	r0, _ = returns[0].(*codestar.ListUserProfilesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarDouble) ListUserProfilesRequest(i0 *codestar.ListUserProfilesInput) (r0 *request.Request, r1 *codestar.ListUserProfilesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUserProfilesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codestar.ListUserProfilesOutput)
	return
}

func (d *CodeStarDouble) ListUserProfilesWithContext(i0 context.Context, i1 *codestar.ListUserProfilesInput, i2 ...request.Option) (r0 *codestar.ListUserProfilesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUserProfilesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codestar.ListUserProfilesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarDouble) fakeListUserProfilesWithContext(ctx context.Context, in *codestar.ListUserProfilesInput, _ ...request.Option) (*codestar.ListUserProfilesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListUserProfiles cancelled", ctx.Err())
	default:
		return d.ListUserProfiles(in)
	}
}

func (d *CodeStarDouble) TagProject(i0 *codestar.TagProjectInput) (r0 *codestar.TagProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagProject", i0)
	r0, _ = returns[0].(*codestar.TagProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarDouble) TagProjectRequest(i0 *codestar.TagProjectInput) (r0 *request.Request, r1 *codestar.TagProjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagProjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codestar.TagProjectOutput)
	return
}

func (d *CodeStarDouble) TagProjectWithContext(i0 context.Context, i1 *codestar.TagProjectInput, i2 ...request.Option) (r0 *codestar.TagProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagProjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codestar.TagProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarDouble) fakeTagProjectWithContext(ctx context.Context, in *codestar.TagProjectInput, _ ...request.Option) (*codestar.TagProjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagProject cancelled", ctx.Err())
	default:
		return d.TagProject(in)
	}
}

func (d *CodeStarDouble) UntagProject(i0 *codestar.UntagProjectInput) (r0 *codestar.UntagProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagProject", i0)
	r0, _ = returns[0].(*codestar.UntagProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarDouble) UntagProjectRequest(i0 *codestar.UntagProjectInput) (r0 *request.Request, r1 *codestar.UntagProjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagProjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codestar.UntagProjectOutput)
	return
}

func (d *CodeStarDouble) UntagProjectWithContext(i0 context.Context, i1 *codestar.UntagProjectInput, i2 ...request.Option) (r0 *codestar.UntagProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagProjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codestar.UntagProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarDouble) fakeUntagProjectWithContext(ctx context.Context, in *codestar.UntagProjectInput, _ ...request.Option) (*codestar.UntagProjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagProject cancelled", ctx.Err())
	default:
		return d.UntagProject(in)
	}
}

func (d *CodeStarDouble) UpdateProject(i0 *codestar.UpdateProjectInput) (r0 *codestar.UpdateProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateProject", i0)
	r0, _ = returns[0].(*codestar.UpdateProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarDouble) UpdateProjectRequest(i0 *codestar.UpdateProjectInput) (r0 *request.Request, r1 *codestar.UpdateProjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateProjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codestar.UpdateProjectOutput)
	return
}

func (d *CodeStarDouble) UpdateProjectWithContext(i0 context.Context, i1 *codestar.UpdateProjectInput, i2 ...request.Option) (r0 *codestar.UpdateProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateProjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codestar.UpdateProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarDouble) fakeUpdateProjectWithContext(ctx context.Context, in *codestar.UpdateProjectInput, _ ...request.Option) (*codestar.UpdateProjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateProject cancelled", ctx.Err())
	default:
		return d.UpdateProject(in)
	}
}

func (d *CodeStarDouble) UpdateTeamMember(i0 *codestar.UpdateTeamMemberInput) (r0 *codestar.UpdateTeamMemberOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTeamMember", i0)
	r0, _ = returns[0].(*codestar.UpdateTeamMemberOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarDouble) UpdateTeamMemberRequest(i0 *codestar.UpdateTeamMemberInput) (r0 *request.Request, r1 *codestar.UpdateTeamMemberOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTeamMemberRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codestar.UpdateTeamMemberOutput)
	return
}

func (d *CodeStarDouble) UpdateTeamMemberWithContext(i0 context.Context, i1 *codestar.UpdateTeamMemberInput, i2 ...request.Option) (r0 *codestar.UpdateTeamMemberOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTeamMemberWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codestar.UpdateTeamMemberOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarDouble) fakeUpdateTeamMemberWithContext(ctx context.Context, in *codestar.UpdateTeamMemberInput, _ ...request.Option) (*codestar.UpdateTeamMemberOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateTeamMember cancelled", ctx.Err())
	default:
		return d.UpdateTeamMember(in)
	}
}

func (d *CodeStarDouble) UpdateUserProfile(i0 *codestar.UpdateUserProfileInput) (r0 *codestar.UpdateUserProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserProfile", i0)
	r0, _ = returns[0].(*codestar.UpdateUserProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarDouble) UpdateUserProfileRequest(i0 *codestar.UpdateUserProfileInput) (r0 *request.Request, r1 *codestar.UpdateUserProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codestar.UpdateUserProfileOutput)
	return
}

func (d *CodeStarDouble) UpdateUserProfileWithContext(i0 context.Context, i1 *codestar.UpdateUserProfileInput, i2 ...request.Option) (r0 *codestar.UpdateUserProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codestar.UpdateUserProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeStarDouble) fakeUpdateUserProfileWithContext(ctx context.Context, in *codestar.UpdateUserProfileInput, _ ...request.Option) (*codestar.UpdateUserProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateUserProfile cancelled", ctx.Err())
	default:
		return d.UpdateUserProfile(in)
	}
}
