// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:14:49+11:00

// Package sagemakerdouble provides a TestDouble implementation of sagemakeriface.SageMakerAPI
package sagemakerdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/sagemaker"
	"github.com/aws/aws-sdk-go/service/sagemaker/sagemakeriface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// SageMakerDouble is TestDouble for sagemakeriface.SageMakerAPI
type SageMakerDouble struct {
	sagemakeriface.SageMakerAPI
	*awsdouble.AWSTestDouble
}

// Constructor for SageMakerDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *SageMakerDouble {
	result := &SageMakerDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*sagemakeriface.SageMakerAPI)(nil), configurators...)
	return result
}

func (d *SageMakerDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *SageMakerDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AddTagsWithContext":
		return m.Fake(d.fakeAddTagsWithContext)

	case "AssociateTrialComponentWithContext":
		return m.Fake(d.fakeAssociateTrialComponentWithContext)

	case "CreateAlgorithmWithContext":
		return m.Fake(d.fakeCreateAlgorithmWithContext)

	case "CreateAppWithContext":
		return m.Fake(d.fakeCreateAppWithContext)

	case "CreateAutoMLJobWithContext":
		return m.Fake(d.fakeCreateAutoMLJobWithContext)

	case "CreateCodeRepositoryWithContext":
		return m.Fake(d.fakeCreateCodeRepositoryWithContext)

	case "CreateCompilationJobWithContext":
		return m.Fake(d.fakeCreateCompilationJobWithContext)

	case "CreateDomainWithContext":
		return m.Fake(d.fakeCreateDomainWithContext)

	case "CreateEndpointConfigWithContext":
		return m.Fake(d.fakeCreateEndpointConfigWithContext)

	case "CreateEndpointWithContext":
		return m.Fake(d.fakeCreateEndpointWithContext)

	case "CreateExperimentWithContext":
		return m.Fake(d.fakeCreateExperimentWithContext)

	case "CreateFlowDefinitionWithContext":
		return m.Fake(d.fakeCreateFlowDefinitionWithContext)

	case "CreateHumanTaskUiWithContext":
		return m.Fake(d.fakeCreateHumanTaskUiWithContext)

	case "CreateHyperParameterTuningJobWithContext":
		return m.Fake(d.fakeCreateHyperParameterTuningJobWithContext)

	case "CreateLabelingJobWithContext":
		return m.Fake(d.fakeCreateLabelingJobWithContext)

	case "CreateModelPackageWithContext":
		return m.Fake(d.fakeCreateModelPackageWithContext)

	case "CreateModelWithContext":
		return m.Fake(d.fakeCreateModelWithContext)

	case "CreateMonitoringScheduleWithContext":
		return m.Fake(d.fakeCreateMonitoringScheduleWithContext)

	case "CreateNotebookInstanceLifecycleConfigWithContext":
		return m.Fake(d.fakeCreateNotebookInstanceLifecycleConfigWithContext)

	case "CreateNotebookInstanceWithContext":
		return m.Fake(d.fakeCreateNotebookInstanceWithContext)

	case "CreatePresignedDomainUrlWithContext":
		return m.Fake(d.fakeCreatePresignedDomainUrlWithContext)

	case "CreatePresignedNotebookInstanceUrlWithContext":
		return m.Fake(d.fakeCreatePresignedNotebookInstanceUrlWithContext)

	case "CreateProcessingJobWithContext":
		return m.Fake(d.fakeCreateProcessingJobWithContext)

	case "CreateTrainingJobWithContext":
		return m.Fake(d.fakeCreateTrainingJobWithContext)

	case "CreateTransformJobWithContext":
		return m.Fake(d.fakeCreateTransformJobWithContext)

	case "CreateTrialComponentWithContext":
		return m.Fake(d.fakeCreateTrialComponentWithContext)

	case "CreateTrialWithContext":
		return m.Fake(d.fakeCreateTrialWithContext)

	case "CreateUserProfileWithContext":
		return m.Fake(d.fakeCreateUserProfileWithContext)

	case "CreateWorkteamWithContext":
		return m.Fake(d.fakeCreateWorkteamWithContext)

	case "DeleteAlgorithmWithContext":
		return m.Fake(d.fakeDeleteAlgorithmWithContext)

	case "DeleteAppWithContext":
		return m.Fake(d.fakeDeleteAppWithContext)

	case "DeleteCodeRepositoryWithContext":
		return m.Fake(d.fakeDeleteCodeRepositoryWithContext)

	case "DeleteDomainWithContext":
		return m.Fake(d.fakeDeleteDomainWithContext)

	case "DeleteEndpointConfigWithContext":
		return m.Fake(d.fakeDeleteEndpointConfigWithContext)

	case "DeleteEndpointWithContext":
		return m.Fake(d.fakeDeleteEndpointWithContext)

	case "DeleteExperimentWithContext":
		return m.Fake(d.fakeDeleteExperimentWithContext)

	case "DeleteFlowDefinitionWithContext":
		return m.Fake(d.fakeDeleteFlowDefinitionWithContext)

	case "DeleteModelPackageWithContext":
		return m.Fake(d.fakeDeleteModelPackageWithContext)

	case "DeleteModelWithContext":
		return m.Fake(d.fakeDeleteModelWithContext)

	case "DeleteMonitoringScheduleWithContext":
		return m.Fake(d.fakeDeleteMonitoringScheduleWithContext)

	case "DeleteNotebookInstanceLifecycleConfigWithContext":
		return m.Fake(d.fakeDeleteNotebookInstanceLifecycleConfigWithContext)

	case "DeleteNotebookInstanceWithContext":
		return m.Fake(d.fakeDeleteNotebookInstanceWithContext)

	case "DeleteTagsWithContext":
		return m.Fake(d.fakeDeleteTagsWithContext)

	case "DeleteTrialComponentWithContext":
		return m.Fake(d.fakeDeleteTrialComponentWithContext)

	case "DeleteTrialWithContext":
		return m.Fake(d.fakeDeleteTrialWithContext)

	case "DeleteUserProfileWithContext":
		return m.Fake(d.fakeDeleteUserProfileWithContext)

	case "DeleteWorkteamWithContext":
		return m.Fake(d.fakeDeleteWorkteamWithContext)

	case "DescribeAlgorithmWithContext":
		return m.Fake(d.fakeDescribeAlgorithmWithContext)

	case "DescribeAppWithContext":
		return m.Fake(d.fakeDescribeAppWithContext)

	case "DescribeAutoMLJobWithContext":
		return m.Fake(d.fakeDescribeAutoMLJobWithContext)

	case "DescribeCodeRepositoryWithContext":
		return m.Fake(d.fakeDescribeCodeRepositoryWithContext)

	case "DescribeCompilationJobWithContext":
		return m.Fake(d.fakeDescribeCompilationJobWithContext)

	case "DescribeDomainWithContext":
		return m.Fake(d.fakeDescribeDomainWithContext)

	case "DescribeEndpointConfigWithContext":
		return m.Fake(d.fakeDescribeEndpointConfigWithContext)

	case "DescribeEndpointWithContext":
		return m.Fake(d.fakeDescribeEndpointWithContext)

	case "DescribeExperimentWithContext":
		return m.Fake(d.fakeDescribeExperimentWithContext)

	case "DescribeFlowDefinitionWithContext":
		return m.Fake(d.fakeDescribeFlowDefinitionWithContext)

	case "DescribeHumanTaskUiWithContext":
		return m.Fake(d.fakeDescribeHumanTaskUiWithContext)

	case "DescribeHyperParameterTuningJobWithContext":
		return m.Fake(d.fakeDescribeHyperParameterTuningJobWithContext)

	case "DescribeLabelingJobWithContext":
		return m.Fake(d.fakeDescribeLabelingJobWithContext)

	case "DescribeModelPackageWithContext":
		return m.Fake(d.fakeDescribeModelPackageWithContext)

	case "DescribeModelWithContext":
		return m.Fake(d.fakeDescribeModelWithContext)

	case "DescribeMonitoringScheduleWithContext":
		return m.Fake(d.fakeDescribeMonitoringScheduleWithContext)

	case "DescribeNotebookInstanceLifecycleConfigWithContext":
		return m.Fake(d.fakeDescribeNotebookInstanceLifecycleConfigWithContext)

	case "DescribeNotebookInstanceWithContext":
		return m.Fake(d.fakeDescribeNotebookInstanceWithContext)

	case "DescribeProcessingJobWithContext":
		return m.Fake(d.fakeDescribeProcessingJobWithContext)

	case "DescribeSubscribedWorkteamWithContext":
		return m.Fake(d.fakeDescribeSubscribedWorkteamWithContext)

	case "DescribeTrainingJobWithContext":
		return m.Fake(d.fakeDescribeTrainingJobWithContext)

	case "DescribeTransformJobWithContext":
		return m.Fake(d.fakeDescribeTransformJobWithContext)

	case "DescribeTrialComponentWithContext":
		return m.Fake(d.fakeDescribeTrialComponentWithContext)

	case "DescribeTrialWithContext":
		return m.Fake(d.fakeDescribeTrialWithContext)

	case "DescribeUserProfileWithContext":
		return m.Fake(d.fakeDescribeUserProfileWithContext)

	case "DescribeWorkforceWithContext":
		return m.Fake(d.fakeDescribeWorkforceWithContext)

	case "DescribeWorkteamWithContext":
		return m.Fake(d.fakeDescribeWorkteamWithContext)

	case "DisassociateTrialComponentWithContext":
		return m.Fake(d.fakeDisassociateTrialComponentWithContext)

	case "GetSearchSuggestionsWithContext":
		return m.Fake(d.fakeGetSearchSuggestionsWithContext)

	case "ListAlgorithmsPages":
		return m.Fake(d.fakeListAlgorithmsPages)

	case "ListAlgorithmsPagesWithContext":
		return m.Fake(d.fakeListAlgorithmsPagesWithContext)

	case "ListAlgorithmsWithContext":
		return m.Fake(d.fakeListAlgorithmsWithContext)

	case "ListAppsPages":
		return m.Fake(d.fakeListAppsPages)

	case "ListAppsPagesWithContext":
		return m.Fake(d.fakeListAppsPagesWithContext)

	case "ListAppsWithContext":
		return m.Fake(d.fakeListAppsWithContext)

	case "ListAutoMLJobsPages":
		return m.Fake(d.fakeListAutoMLJobsPages)

	case "ListAutoMLJobsPagesWithContext":
		return m.Fake(d.fakeListAutoMLJobsPagesWithContext)

	case "ListAutoMLJobsWithContext":
		return m.Fake(d.fakeListAutoMLJobsWithContext)

	case "ListCandidatesForAutoMLJobPages":
		return m.Fake(d.fakeListCandidatesForAutoMLJobPages)

	case "ListCandidatesForAutoMLJobPagesWithContext":
		return m.Fake(d.fakeListCandidatesForAutoMLJobPagesWithContext)

	case "ListCandidatesForAutoMLJobWithContext":
		return m.Fake(d.fakeListCandidatesForAutoMLJobWithContext)

	case "ListCodeRepositoriesPages":
		return m.Fake(d.fakeListCodeRepositoriesPages)

	case "ListCodeRepositoriesPagesWithContext":
		return m.Fake(d.fakeListCodeRepositoriesPagesWithContext)

	case "ListCodeRepositoriesWithContext":
		return m.Fake(d.fakeListCodeRepositoriesWithContext)

	case "ListCompilationJobsPages":
		return m.Fake(d.fakeListCompilationJobsPages)

	case "ListCompilationJobsPagesWithContext":
		return m.Fake(d.fakeListCompilationJobsPagesWithContext)

	case "ListCompilationJobsWithContext":
		return m.Fake(d.fakeListCompilationJobsWithContext)

	case "ListDomainsPages":
		return m.Fake(d.fakeListDomainsPages)

	case "ListDomainsPagesWithContext":
		return m.Fake(d.fakeListDomainsPagesWithContext)

	case "ListDomainsWithContext":
		return m.Fake(d.fakeListDomainsWithContext)

	case "ListEndpointConfigsPages":
		return m.Fake(d.fakeListEndpointConfigsPages)

	case "ListEndpointConfigsPagesWithContext":
		return m.Fake(d.fakeListEndpointConfigsPagesWithContext)

	case "ListEndpointConfigsWithContext":
		return m.Fake(d.fakeListEndpointConfigsWithContext)

	case "ListEndpointsPages":
		return m.Fake(d.fakeListEndpointsPages)

	case "ListEndpointsPagesWithContext":
		return m.Fake(d.fakeListEndpointsPagesWithContext)

	case "ListEndpointsWithContext":
		return m.Fake(d.fakeListEndpointsWithContext)

	case "ListExperimentsPages":
		return m.Fake(d.fakeListExperimentsPages)

	case "ListExperimentsPagesWithContext":
		return m.Fake(d.fakeListExperimentsPagesWithContext)

	case "ListExperimentsWithContext":
		return m.Fake(d.fakeListExperimentsWithContext)

	case "ListFlowDefinitionsPages":
		return m.Fake(d.fakeListFlowDefinitionsPages)

	case "ListFlowDefinitionsPagesWithContext":
		return m.Fake(d.fakeListFlowDefinitionsPagesWithContext)

	case "ListFlowDefinitionsWithContext":
		return m.Fake(d.fakeListFlowDefinitionsWithContext)

	case "ListHumanTaskUisPages":
		return m.Fake(d.fakeListHumanTaskUisPages)

	case "ListHumanTaskUisPagesWithContext":
		return m.Fake(d.fakeListHumanTaskUisPagesWithContext)

	case "ListHumanTaskUisWithContext":
		return m.Fake(d.fakeListHumanTaskUisWithContext)

	case "ListHyperParameterTuningJobsPages":
		return m.Fake(d.fakeListHyperParameterTuningJobsPages)

	case "ListHyperParameterTuningJobsPagesWithContext":
		return m.Fake(d.fakeListHyperParameterTuningJobsPagesWithContext)

	case "ListHyperParameterTuningJobsWithContext":
		return m.Fake(d.fakeListHyperParameterTuningJobsWithContext)

	case "ListLabelingJobsForWorkteamPages":
		return m.Fake(d.fakeListLabelingJobsForWorkteamPages)

	case "ListLabelingJobsForWorkteamPagesWithContext":
		return m.Fake(d.fakeListLabelingJobsForWorkteamPagesWithContext)

	case "ListLabelingJobsForWorkteamWithContext":
		return m.Fake(d.fakeListLabelingJobsForWorkteamWithContext)

	case "ListLabelingJobsPages":
		return m.Fake(d.fakeListLabelingJobsPages)

	case "ListLabelingJobsPagesWithContext":
		return m.Fake(d.fakeListLabelingJobsPagesWithContext)

	case "ListLabelingJobsWithContext":
		return m.Fake(d.fakeListLabelingJobsWithContext)

	case "ListModelPackagesPages":
		return m.Fake(d.fakeListModelPackagesPages)

	case "ListModelPackagesPagesWithContext":
		return m.Fake(d.fakeListModelPackagesPagesWithContext)

	case "ListModelPackagesWithContext":
		return m.Fake(d.fakeListModelPackagesWithContext)

	case "ListModelsPages":
		return m.Fake(d.fakeListModelsPages)

	case "ListModelsPagesWithContext":
		return m.Fake(d.fakeListModelsPagesWithContext)

	case "ListModelsWithContext":
		return m.Fake(d.fakeListModelsWithContext)

	case "ListMonitoringExecutionsPages":
		return m.Fake(d.fakeListMonitoringExecutionsPages)

	case "ListMonitoringExecutionsPagesWithContext":
		return m.Fake(d.fakeListMonitoringExecutionsPagesWithContext)

	case "ListMonitoringExecutionsWithContext":
		return m.Fake(d.fakeListMonitoringExecutionsWithContext)

	case "ListMonitoringSchedulesPages":
		return m.Fake(d.fakeListMonitoringSchedulesPages)

	case "ListMonitoringSchedulesPagesWithContext":
		return m.Fake(d.fakeListMonitoringSchedulesPagesWithContext)

	case "ListMonitoringSchedulesWithContext":
		return m.Fake(d.fakeListMonitoringSchedulesWithContext)

	case "ListNotebookInstanceLifecycleConfigsPages":
		return m.Fake(d.fakeListNotebookInstanceLifecycleConfigsPages)

	case "ListNotebookInstanceLifecycleConfigsPagesWithContext":
		return m.Fake(d.fakeListNotebookInstanceLifecycleConfigsPagesWithContext)

	case "ListNotebookInstanceLifecycleConfigsWithContext":
		return m.Fake(d.fakeListNotebookInstanceLifecycleConfigsWithContext)

	case "ListNotebookInstancesPages":
		return m.Fake(d.fakeListNotebookInstancesPages)

	case "ListNotebookInstancesPagesWithContext":
		return m.Fake(d.fakeListNotebookInstancesPagesWithContext)

	case "ListNotebookInstancesWithContext":
		return m.Fake(d.fakeListNotebookInstancesWithContext)

	case "ListProcessingJobsPages":
		return m.Fake(d.fakeListProcessingJobsPages)

	case "ListProcessingJobsPagesWithContext":
		return m.Fake(d.fakeListProcessingJobsPagesWithContext)

	case "ListProcessingJobsWithContext":
		return m.Fake(d.fakeListProcessingJobsWithContext)

	case "ListSubscribedWorkteamsPages":
		return m.Fake(d.fakeListSubscribedWorkteamsPages)

	case "ListSubscribedWorkteamsPagesWithContext":
		return m.Fake(d.fakeListSubscribedWorkteamsPagesWithContext)

	case "ListSubscribedWorkteamsWithContext":
		return m.Fake(d.fakeListSubscribedWorkteamsWithContext)

	case "ListTagsPages":
		return m.Fake(d.fakeListTagsPages)

	case "ListTagsPagesWithContext":
		return m.Fake(d.fakeListTagsPagesWithContext)

	case "ListTagsWithContext":
		return m.Fake(d.fakeListTagsWithContext)

	case "ListTrainingJobsForHyperParameterTuningJobPages":
		return m.Fake(d.fakeListTrainingJobsForHyperParameterTuningJobPages)

	case "ListTrainingJobsForHyperParameterTuningJobPagesWithContext":
		return m.Fake(d.fakeListTrainingJobsForHyperParameterTuningJobPagesWithContext)

	case "ListTrainingJobsForHyperParameterTuningJobWithContext":
		return m.Fake(d.fakeListTrainingJobsForHyperParameterTuningJobWithContext)

	case "ListTrainingJobsPages":
		return m.Fake(d.fakeListTrainingJobsPages)

	case "ListTrainingJobsPagesWithContext":
		return m.Fake(d.fakeListTrainingJobsPagesWithContext)

	case "ListTrainingJobsWithContext":
		return m.Fake(d.fakeListTrainingJobsWithContext)

	case "ListTransformJobsPages":
		return m.Fake(d.fakeListTransformJobsPages)

	case "ListTransformJobsPagesWithContext":
		return m.Fake(d.fakeListTransformJobsPagesWithContext)

	case "ListTransformJobsWithContext":
		return m.Fake(d.fakeListTransformJobsWithContext)

	case "ListTrialComponentsPages":
		return m.Fake(d.fakeListTrialComponentsPages)

	case "ListTrialComponentsPagesWithContext":
		return m.Fake(d.fakeListTrialComponentsPagesWithContext)

	case "ListTrialComponentsWithContext":
		return m.Fake(d.fakeListTrialComponentsWithContext)

	case "ListTrialsPages":
		return m.Fake(d.fakeListTrialsPages)

	case "ListTrialsPagesWithContext":
		return m.Fake(d.fakeListTrialsPagesWithContext)

	case "ListTrialsWithContext":
		return m.Fake(d.fakeListTrialsWithContext)

	case "ListUserProfilesPages":
		return m.Fake(d.fakeListUserProfilesPages)

	case "ListUserProfilesPagesWithContext":
		return m.Fake(d.fakeListUserProfilesPagesWithContext)

	case "ListUserProfilesWithContext":
		return m.Fake(d.fakeListUserProfilesWithContext)

	case "ListWorkteamsPages":
		return m.Fake(d.fakeListWorkteamsPages)

	case "ListWorkteamsPagesWithContext":
		return m.Fake(d.fakeListWorkteamsPagesWithContext)

	case "ListWorkteamsWithContext":
		return m.Fake(d.fakeListWorkteamsWithContext)

	case "RenderUiTemplateWithContext":
		return m.Fake(d.fakeRenderUiTemplateWithContext)

	case "SearchPages":
		return m.Fake(d.fakeSearchPages)

	case "SearchPagesWithContext":
		return m.Fake(d.fakeSearchPagesWithContext)

	case "SearchWithContext":
		return m.Fake(d.fakeSearchWithContext)

	case "StartMonitoringScheduleWithContext":
		return m.Fake(d.fakeStartMonitoringScheduleWithContext)

	case "StartNotebookInstanceWithContext":
		return m.Fake(d.fakeStartNotebookInstanceWithContext)

	case "StopAutoMLJobWithContext":
		return m.Fake(d.fakeStopAutoMLJobWithContext)

	case "StopCompilationJobWithContext":
		return m.Fake(d.fakeStopCompilationJobWithContext)

	case "StopHyperParameterTuningJobWithContext":
		return m.Fake(d.fakeStopHyperParameterTuningJobWithContext)

	case "StopLabelingJobWithContext":
		return m.Fake(d.fakeStopLabelingJobWithContext)

	case "StopMonitoringScheduleWithContext":
		return m.Fake(d.fakeStopMonitoringScheduleWithContext)

	case "StopNotebookInstanceWithContext":
		return m.Fake(d.fakeStopNotebookInstanceWithContext)

	case "StopProcessingJobWithContext":
		return m.Fake(d.fakeStopProcessingJobWithContext)

	case "StopTrainingJobWithContext":
		return m.Fake(d.fakeStopTrainingJobWithContext)

	case "StopTransformJobWithContext":
		return m.Fake(d.fakeStopTransformJobWithContext)

	case "UpdateCodeRepositoryWithContext":
		return m.Fake(d.fakeUpdateCodeRepositoryWithContext)

	case "UpdateDomainWithContext":
		return m.Fake(d.fakeUpdateDomainWithContext)

	case "UpdateEndpointWeightsAndCapacitiesWithContext":
		return m.Fake(d.fakeUpdateEndpointWeightsAndCapacitiesWithContext)

	case "UpdateEndpointWithContext":
		return m.Fake(d.fakeUpdateEndpointWithContext)

	case "UpdateExperimentWithContext":
		return m.Fake(d.fakeUpdateExperimentWithContext)

	case "UpdateMonitoringScheduleWithContext":
		return m.Fake(d.fakeUpdateMonitoringScheduleWithContext)

	case "UpdateNotebookInstanceLifecycleConfigWithContext":
		return m.Fake(d.fakeUpdateNotebookInstanceLifecycleConfigWithContext)

	case "UpdateNotebookInstanceWithContext":
		return m.Fake(d.fakeUpdateNotebookInstanceWithContext)

	case "UpdateTrialComponentWithContext":
		return m.Fake(d.fakeUpdateTrialComponentWithContext)

	case "UpdateTrialWithContext":
		return m.Fake(d.fakeUpdateTrialWithContext)

	case "UpdateUserProfileWithContext":
		return m.Fake(d.fakeUpdateUserProfileWithContext)

	case "UpdateWorkforceWithContext":
		return m.Fake(d.fakeUpdateWorkforceWithContext)

	case "UpdateWorkteamWithContext":
		return m.Fake(d.fakeUpdateWorkteamWithContext)

	case "WaitUntilEndpointDeleted":
		return m.Fake(d.fakeWaitUntilEndpointDeleted)

	case "WaitUntilEndpointDeletedWithContext":
		return m.Fake(d.fakeWaitUntilEndpointDeletedWithContext)

	case "WaitUntilEndpointInService":
		return m.Fake(d.fakeWaitUntilEndpointInService)

	case "WaitUntilEndpointInServiceWithContext":
		return m.Fake(d.fakeWaitUntilEndpointInServiceWithContext)

	case "WaitUntilNotebookInstanceDeleted":
		return m.Fake(d.fakeWaitUntilNotebookInstanceDeleted)

	case "WaitUntilNotebookInstanceDeletedWithContext":
		return m.Fake(d.fakeWaitUntilNotebookInstanceDeletedWithContext)

	case "WaitUntilNotebookInstanceInService":
		return m.Fake(d.fakeWaitUntilNotebookInstanceInService)

	case "WaitUntilNotebookInstanceInServiceWithContext":
		return m.Fake(d.fakeWaitUntilNotebookInstanceInServiceWithContext)

	case "WaitUntilNotebookInstanceStopped":
		return m.Fake(d.fakeWaitUntilNotebookInstanceStopped)

	case "WaitUntilNotebookInstanceStoppedWithContext":
		return m.Fake(d.fakeWaitUntilNotebookInstanceStoppedWithContext)

	case "WaitUntilProcessingJobCompletedOrStopped":
		return m.Fake(d.fakeWaitUntilProcessingJobCompletedOrStopped)

	case "WaitUntilProcessingJobCompletedOrStoppedWithContext":
		return m.Fake(d.fakeWaitUntilProcessingJobCompletedOrStoppedWithContext)

	case "WaitUntilTrainingJobCompletedOrStopped":
		return m.Fake(d.fakeWaitUntilTrainingJobCompletedOrStopped)

	case "WaitUntilTrainingJobCompletedOrStoppedWithContext":
		return m.Fake(d.fakeWaitUntilTrainingJobCompletedOrStoppedWithContext)

	case "WaitUntilTransformJobCompletedOrStopped":
		return m.Fake(d.fakeWaitUntilTransformJobCompletedOrStopped)

	case "WaitUntilTransformJobCompletedOrStoppedWithContext":
		return m.Fake(d.fakeWaitUntilTransformJobCompletedOrStoppedWithContext)

	default:
		return nil
	}
}

func (d *SageMakerDouble) AddTags(i0 *sagemaker.AddTagsInput) (r0 *sagemaker.AddTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTags", i0)
	r0, _ = returns[0].(*sagemaker.AddTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) AddTagsRequest(i0 *sagemaker.AddTagsInput) (r0 *request.Request, r1 *sagemaker.AddTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.AddTagsOutput)
	return
}

func (d *SageMakerDouble) AddTagsWithContext(i0 context.Context, i1 *sagemaker.AddTagsInput, i2 ...request.Option) (r0 *sagemaker.AddTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.AddTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeAddTagsWithContext(ctx context.Context, in *sagemaker.AddTagsInput, _ ...request.Option) (*sagemaker.AddTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddTags cancelled", ctx.Err())
	default:
		return d.AddTags(in)
	}
}

func (d *SageMakerDouble) AssociateTrialComponent(i0 *sagemaker.AssociateTrialComponentInput) (r0 *sagemaker.AssociateTrialComponentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateTrialComponent", i0)
	r0, _ = returns[0].(*sagemaker.AssociateTrialComponentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) AssociateTrialComponentRequest(i0 *sagemaker.AssociateTrialComponentInput) (r0 *request.Request, r1 *sagemaker.AssociateTrialComponentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateTrialComponentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.AssociateTrialComponentOutput)
	return
}

func (d *SageMakerDouble) AssociateTrialComponentWithContext(i0 context.Context, i1 *sagemaker.AssociateTrialComponentInput, i2 ...request.Option) (r0 *sagemaker.AssociateTrialComponentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateTrialComponentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.AssociateTrialComponentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeAssociateTrialComponentWithContext(ctx context.Context, in *sagemaker.AssociateTrialComponentInput, _ ...request.Option) (*sagemaker.AssociateTrialComponentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateTrialComponent cancelled", ctx.Err())
	default:
		return d.AssociateTrialComponent(in)
	}
}

func (d *SageMakerDouble) CreateAlgorithm(i0 *sagemaker.CreateAlgorithmInput) (r0 *sagemaker.CreateAlgorithmOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAlgorithm", i0)
	r0, _ = returns[0].(*sagemaker.CreateAlgorithmOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) CreateAlgorithmRequest(i0 *sagemaker.CreateAlgorithmInput) (r0 *request.Request, r1 *sagemaker.CreateAlgorithmOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAlgorithmRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.CreateAlgorithmOutput)
	return
}

func (d *SageMakerDouble) CreateAlgorithmWithContext(i0 context.Context, i1 *sagemaker.CreateAlgorithmInput, i2 ...request.Option) (r0 *sagemaker.CreateAlgorithmOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAlgorithmWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.CreateAlgorithmOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeCreateAlgorithmWithContext(ctx context.Context, in *sagemaker.CreateAlgorithmInput, _ ...request.Option) (*sagemaker.CreateAlgorithmOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateAlgorithm cancelled", ctx.Err())
	default:
		return d.CreateAlgorithm(in)
	}
}

func (d *SageMakerDouble) CreateApp(i0 *sagemaker.CreateAppInput) (r0 *sagemaker.CreateAppOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApp", i0)
	r0, _ = returns[0].(*sagemaker.CreateAppOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) CreateAppRequest(i0 *sagemaker.CreateAppInput) (r0 *request.Request, r1 *sagemaker.CreateAppOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAppRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.CreateAppOutput)
	return
}

func (d *SageMakerDouble) CreateAppWithContext(i0 context.Context, i1 *sagemaker.CreateAppInput, i2 ...request.Option) (r0 *sagemaker.CreateAppOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAppWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.CreateAppOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeCreateAppWithContext(ctx context.Context, in *sagemaker.CreateAppInput, _ ...request.Option) (*sagemaker.CreateAppOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateApp cancelled", ctx.Err())
	default:
		return d.CreateApp(in)
	}
}

func (d *SageMakerDouble) CreateAutoMLJob(i0 *sagemaker.CreateAutoMLJobInput) (r0 *sagemaker.CreateAutoMLJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAutoMLJob", i0)
	r0, _ = returns[0].(*sagemaker.CreateAutoMLJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) CreateAutoMLJobRequest(i0 *sagemaker.CreateAutoMLJobInput) (r0 *request.Request, r1 *sagemaker.CreateAutoMLJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAutoMLJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.CreateAutoMLJobOutput)
	return
}

func (d *SageMakerDouble) CreateAutoMLJobWithContext(i0 context.Context, i1 *sagemaker.CreateAutoMLJobInput, i2 ...request.Option) (r0 *sagemaker.CreateAutoMLJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAutoMLJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.CreateAutoMLJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeCreateAutoMLJobWithContext(ctx context.Context, in *sagemaker.CreateAutoMLJobInput, _ ...request.Option) (*sagemaker.CreateAutoMLJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateAutoMLJob cancelled", ctx.Err())
	default:
		return d.CreateAutoMLJob(in)
	}
}

func (d *SageMakerDouble) CreateCodeRepository(i0 *sagemaker.CreateCodeRepositoryInput) (r0 *sagemaker.CreateCodeRepositoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCodeRepository", i0)
	r0, _ = returns[0].(*sagemaker.CreateCodeRepositoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) CreateCodeRepositoryRequest(i0 *sagemaker.CreateCodeRepositoryInput) (r0 *request.Request, r1 *sagemaker.CreateCodeRepositoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCodeRepositoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.CreateCodeRepositoryOutput)
	return
}

func (d *SageMakerDouble) CreateCodeRepositoryWithContext(i0 context.Context, i1 *sagemaker.CreateCodeRepositoryInput, i2 ...request.Option) (r0 *sagemaker.CreateCodeRepositoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCodeRepositoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.CreateCodeRepositoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeCreateCodeRepositoryWithContext(ctx context.Context, in *sagemaker.CreateCodeRepositoryInput, _ ...request.Option) (*sagemaker.CreateCodeRepositoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateCodeRepository cancelled", ctx.Err())
	default:
		return d.CreateCodeRepository(in)
	}
}

func (d *SageMakerDouble) CreateCompilationJob(i0 *sagemaker.CreateCompilationJobInput) (r0 *sagemaker.CreateCompilationJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCompilationJob", i0)
	r0, _ = returns[0].(*sagemaker.CreateCompilationJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) CreateCompilationJobRequest(i0 *sagemaker.CreateCompilationJobInput) (r0 *request.Request, r1 *sagemaker.CreateCompilationJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCompilationJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.CreateCompilationJobOutput)
	return
}

func (d *SageMakerDouble) CreateCompilationJobWithContext(i0 context.Context, i1 *sagemaker.CreateCompilationJobInput, i2 ...request.Option) (r0 *sagemaker.CreateCompilationJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCompilationJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.CreateCompilationJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeCreateCompilationJobWithContext(ctx context.Context, in *sagemaker.CreateCompilationJobInput, _ ...request.Option) (*sagemaker.CreateCompilationJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateCompilationJob cancelled", ctx.Err())
	default:
		return d.CreateCompilationJob(in)
	}
}

func (d *SageMakerDouble) CreateDomain(i0 *sagemaker.CreateDomainInput) (r0 *sagemaker.CreateDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDomain", i0)
	r0, _ = returns[0].(*sagemaker.CreateDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) CreateDomainRequest(i0 *sagemaker.CreateDomainInput) (r0 *request.Request, r1 *sagemaker.CreateDomainOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDomainRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.CreateDomainOutput)
	return
}

func (d *SageMakerDouble) CreateDomainWithContext(i0 context.Context, i1 *sagemaker.CreateDomainInput, i2 ...request.Option) (r0 *sagemaker.CreateDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDomainWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.CreateDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeCreateDomainWithContext(ctx context.Context, in *sagemaker.CreateDomainInput, _ ...request.Option) (*sagemaker.CreateDomainOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDomain cancelled", ctx.Err())
	default:
		return d.CreateDomain(in)
	}
}

func (d *SageMakerDouble) CreateEndpoint(i0 *sagemaker.CreateEndpointInput) (r0 *sagemaker.CreateEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEndpoint", i0)
	r0, _ = returns[0].(*sagemaker.CreateEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) CreateEndpointConfig(i0 *sagemaker.CreateEndpointConfigInput) (r0 *sagemaker.CreateEndpointConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEndpointConfig", i0)
	r0, _ = returns[0].(*sagemaker.CreateEndpointConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) CreateEndpointConfigRequest(i0 *sagemaker.CreateEndpointConfigInput) (r0 *request.Request, r1 *sagemaker.CreateEndpointConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEndpointConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.CreateEndpointConfigOutput)
	return
}

func (d *SageMakerDouble) CreateEndpointConfigWithContext(i0 context.Context, i1 *sagemaker.CreateEndpointConfigInput, i2 ...request.Option) (r0 *sagemaker.CreateEndpointConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEndpointConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.CreateEndpointConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeCreateEndpointConfigWithContext(ctx context.Context, in *sagemaker.CreateEndpointConfigInput, _ ...request.Option) (*sagemaker.CreateEndpointConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateEndpointConfig cancelled", ctx.Err())
	default:
		return d.CreateEndpointConfig(in)
	}
}

func (d *SageMakerDouble) CreateEndpointRequest(i0 *sagemaker.CreateEndpointInput) (r0 *request.Request, r1 *sagemaker.CreateEndpointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEndpointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.CreateEndpointOutput)
	return
}

func (d *SageMakerDouble) CreateEndpointWithContext(i0 context.Context, i1 *sagemaker.CreateEndpointInput, i2 ...request.Option) (r0 *sagemaker.CreateEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEndpointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.CreateEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeCreateEndpointWithContext(ctx context.Context, in *sagemaker.CreateEndpointInput, _ ...request.Option) (*sagemaker.CreateEndpointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateEndpoint cancelled", ctx.Err())
	default:
		return d.CreateEndpoint(in)
	}
}

func (d *SageMakerDouble) CreateExperiment(i0 *sagemaker.CreateExperimentInput) (r0 *sagemaker.CreateExperimentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateExperiment", i0)
	r0, _ = returns[0].(*sagemaker.CreateExperimentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) CreateExperimentRequest(i0 *sagemaker.CreateExperimentInput) (r0 *request.Request, r1 *sagemaker.CreateExperimentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateExperimentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.CreateExperimentOutput)
	return
}

func (d *SageMakerDouble) CreateExperimentWithContext(i0 context.Context, i1 *sagemaker.CreateExperimentInput, i2 ...request.Option) (r0 *sagemaker.CreateExperimentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateExperimentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.CreateExperimentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeCreateExperimentWithContext(ctx context.Context, in *sagemaker.CreateExperimentInput, _ ...request.Option) (*sagemaker.CreateExperimentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateExperiment cancelled", ctx.Err())
	default:
		return d.CreateExperiment(in)
	}
}

func (d *SageMakerDouble) CreateFlowDefinition(i0 *sagemaker.CreateFlowDefinitionInput) (r0 *sagemaker.CreateFlowDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFlowDefinition", i0)
	r0, _ = returns[0].(*sagemaker.CreateFlowDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) CreateFlowDefinitionRequest(i0 *sagemaker.CreateFlowDefinitionInput) (r0 *request.Request, r1 *sagemaker.CreateFlowDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFlowDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.CreateFlowDefinitionOutput)
	return
}

func (d *SageMakerDouble) CreateFlowDefinitionWithContext(i0 context.Context, i1 *sagemaker.CreateFlowDefinitionInput, i2 ...request.Option) (r0 *sagemaker.CreateFlowDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFlowDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.CreateFlowDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeCreateFlowDefinitionWithContext(ctx context.Context, in *sagemaker.CreateFlowDefinitionInput, _ ...request.Option) (*sagemaker.CreateFlowDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateFlowDefinition cancelled", ctx.Err())
	default:
		return d.CreateFlowDefinition(in)
	}
}

func (d *SageMakerDouble) CreateHumanTaskUi(i0 *sagemaker.CreateHumanTaskUiInput) (r0 *sagemaker.CreateHumanTaskUiOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHumanTaskUi", i0)
	r0, _ = returns[0].(*sagemaker.CreateHumanTaskUiOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) CreateHumanTaskUiRequest(i0 *sagemaker.CreateHumanTaskUiInput) (r0 *request.Request, r1 *sagemaker.CreateHumanTaskUiOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHumanTaskUiRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.CreateHumanTaskUiOutput)
	return
}

func (d *SageMakerDouble) CreateHumanTaskUiWithContext(i0 context.Context, i1 *sagemaker.CreateHumanTaskUiInput, i2 ...request.Option) (r0 *sagemaker.CreateHumanTaskUiOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHumanTaskUiWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.CreateHumanTaskUiOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeCreateHumanTaskUiWithContext(ctx context.Context, in *sagemaker.CreateHumanTaskUiInput, _ ...request.Option) (*sagemaker.CreateHumanTaskUiOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateHumanTaskUi cancelled", ctx.Err())
	default:
		return d.CreateHumanTaskUi(in)
	}
}

func (d *SageMakerDouble) CreateHyperParameterTuningJob(i0 *sagemaker.CreateHyperParameterTuningJobInput) (r0 *sagemaker.CreateHyperParameterTuningJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHyperParameterTuningJob", i0)
	r0, _ = returns[0].(*sagemaker.CreateHyperParameterTuningJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) CreateHyperParameterTuningJobRequest(i0 *sagemaker.CreateHyperParameterTuningJobInput) (r0 *request.Request, r1 *sagemaker.CreateHyperParameterTuningJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHyperParameterTuningJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.CreateHyperParameterTuningJobOutput)
	return
}

func (d *SageMakerDouble) CreateHyperParameterTuningJobWithContext(i0 context.Context, i1 *sagemaker.CreateHyperParameterTuningJobInput, i2 ...request.Option) (r0 *sagemaker.CreateHyperParameterTuningJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHyperParameterTuningJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.CreateHyperParameterTuningJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeCreateHyperParameterTuningJobWithContext(ctx context.Context, in *sagemaker.CreateHyperParameterTuningJobInput, _ ...request.Option) (*sagemaker.CreateHyperParameterTuningJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateHyperParameterTuningJob cancelled", ctx.Err())
	default:
		return d.CreateHyperParameterTuningJob(in)
	}
}

func (d *SageMakerDouble) CreateLabelingJob(i0 *sagemaker.CreateLabelingJobInput) (r0 *sagemaker.CreateLabelingJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLabelingJob", i0)
	r0, _ = returns[0].(*sagemaker.CreateLabelingJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) CreateLabelingJobRequest(i0 *sagemaker.CreateLabelingJobInput) (r0 *request.Request, r1 *sagemaker.CreateLabelingJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLabelingJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.CreateLabelingJobOutput)
	return
}

func (d *SageMakerDouble) CreateLabelingJobWithContext(i0 context.Context, i1 *sagemaker.CreateLabelingJobInput, i2 ...request.Option) (r0 *sagemaker.CreateLabelingJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLabelingJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.CreateLabelingJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeCreateLabelingJobWithContext(ctx context.Context, in *sagemaker.CreateLabelingJobInput, _ ...request.Option) (*sagemaker.CreateLabelingJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateLabelingJob cancelled", ctx.Err())
	default:
		return d.CreateLabelingJob(in)
	}
}

func (d *SageMakerDouble) CreateModel(i0 *sagemaker.CreateModelInput) (r0 *sagemaker.CreateModelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateModel", i0)
	r0, _ = returns[0].(*sagemaker.CreateModelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) CreateModelPackage(i0 *sagemaker.CreateModelPackageInput) (r0 *sagemaker.CreateModelPackageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateModelPackage", i0)
	r0, _ = returns[0].(*sagemaker.CreateModelPackageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) CreateModelPackageRequest(i0 *sagemaker.CreateModelPackageInput) (r0 *request.Request, r1 *sagemaker.CreateModelPackageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateModelPackageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.CreateModelPackageOutput)
	return
}

func (d *SageMakerDouble) CreateModelPackageWithContext(i0 context.Context, i1 *sagemaker.CreateModelPackageInput, i2 ...request.Option) (r0 *sagemaker.CreateModelPackageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateModelPackageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.CreateModelPackageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeCreateModelPackageWithContext(ctx context.Context, in *sagemaker.CreateModelPackageInput, _ ...request.Option) (*sagemaker.CreateModelPackageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateModelPackage cancelled", ctx.Err())
	default:
		return d.CreateModelPackage(in)
	}
}

func (d *SageMakerDouble) CreateModelRequest(i0 *sagemaker.CreateModelInput) (r0 *request.Request, r1 *sagemaker.CreateModelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateModelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.CreateModelOutput)
	return
}

func (d *SageMakerDouble) CreateModelWithContext(i0 context.Context, i1 *sagemaker.CreateModelInput, i2 ...request.Option) (r0 *sagemaker.CreateModelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateModelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.CreateModelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeCreateModelWithContext(ctx context.Context, in *sagemaker.CreateModelInput, _ ...request.Option) (*sagemaker.CreateModelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateModel cancelled", ctx.Err())
	default:
		return d.CreateModel(in)
	}
}

func (d *SageMakerDouble) CreateMonitoringSchedule(i0 *sagemaker.CreateMonitoringScheduleInput) (r0 *sagemaker.CreateMonitoringScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMonitoringSchedule", i0)
	r0, _ = returns[0].(*sagemaker.CreateMonitoringScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) CreateMonitoringScheduleRequest(i0 *sagemaker.CreateMonitoringScheduleInput) (r0 *request.Request, r1 *sagemaker.CreateMonitoringScheduleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMonitoringScheduleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.CreateMonitoringScheduleOutput)
	return
}

func (d *SageMakerDouble) CreateMonitoringScheduleWithContext(i0 context.Context, i1 *sagemaker.CreateMonitoringScheduleInput, i2 ...request.Option) (r0 *sagemaker.CreateMonitoringScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMonitoringScheduleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.CreateMonitoringScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeCreateMonitoringScheduleWithContext(ctx context.Context, in *sagemaker.CreateMonitoringScheduleInput, _ ...request.Option) (*sagemaker.CreateMonitoringScheduleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateMonitoringSchedule cancelled", ctx.Err())
	default:
		return d.CreateMonitoringSchedule(in)
	}
}

func (d *SageMakerDouble) CreateNotebookInstance(i0 *sagemaker.CreateNotebookInstanceInput) (r0 *sagemaker.CreateNotebookInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNotebookInstance", i0)
	r0, _ = returns[0].(*sagemaker.CreateNotebookInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) CreateNotebookInstanceLifecycleConfig(i0 *sagemaker.CreateNotebookInstanceLifecycleConfigInput) (r0 *sagemaker.CreateNotebookInstanceLifecycleConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNotebookInstanceLifecycleConfig", i0)
	r0, _ = returns[0].(*sagemaker.CreateNotebookInstanceLifecycleConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) CreateNotebookInstanceLifecycleConfigRequest(i0 *sagemaker.CreateNotebookInstanceLifecycleConfigInput) (r0 *request.Request, r1 *sagemaker.CreateNotebookInstanceLifecycleConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNotebookInstanceLifecycleConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.CreateNotebookInstanceLifecycleConfigOutput)
	return
}

func (d *SageMakerDouble) CreateNotebookInstanceLifecycleConfigWithContext(i0 context.Context, i1 *sagemaker.CreateNotebookInstanceLifecycleConfigInput, i2 ...request.Option) (r0 *sagemaker.CreateNotebookInstanceLifecycleConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNotebookInstanceLifecycleConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.CreateNotebookInstanceLifecycleConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeCreateNotebookInstanceLifecycleConfigWithContext(ctx context.Context, in *sagemaker.CreateNotebookInstanceLifecycleConfigInput, _ ...request.Option) (*sagemaker.CreateNotebookInstanceLifecycleConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateNotebookInstanceLifecycleConfig cancelled", ctx.Err())
	default:
		return d.CreateNotebookInstanceLifecycleConfig(in)
	}
}

func (d *SageMakerDouble) CreateNotebookInstanceRequest(i0 *sagemaker.CreateNotebookInstanceInput) (r0 *request.Request, r1 *sagemaker.CreateNotebookInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNotebookInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.CreateNotebookInstanceOutput)
	return
}

func (d *SageMakerDouble) CreateNotebookInstanceWithContext(i0 context.Context, i1 *sagemaker.CreateNotebookInstanceInput, i2 ...request.Option) (r0 *sagemaker.CreateNotebookInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNotebookInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.CreateNotebookInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeCreateNotebookInstanceWithContext(ctx context.Context, in *sagemaker.CreateNotebookInstanceInput, _ ...request.Option) (*sagemaker.CreateNotebookInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateNotebookInstance cancelled", ctx.Err())
	default:
		return d.CreateNotebookInstance(in)
	}
}

func (d *SageMakerDouble) CreatePresignedDomainUrl(i0 *sagemaker.CreatePresignedDomainUrlInput) (r0 *sagemaker.CreatePresignedDomainUrlOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePresignedDomainUrl", i0)
	r0, _ = returns[0].(*sagemaker.CreatePresignedDomainUrlOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) CreatePresignedDomainUrlRequest(i0 *sagemaker.CreatePresignedDomainUrlInput) (r0 *request.Request, r1 *sagemaker.CreatePresignedDomainUrlOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePresignedDomainUrlRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.CreatePresignedDomainUrlOutput)
	return
}

func (d *SageMakerDouble) CreatePresignedDomainUrlWithContext(i0 context.Context, i1 *sagemaker.CreatePresignedDomainUrlInput, i2 ...request.Option) (r0 *sagemaker.CreatePresignedDomainUrlOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePresignedDomainUrlWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.CreatePresignedDomainUrlOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeCreatePresignedDomainUrlWithContext(ctx context.Context, in *sagemaker.CreatePresignedDomainUrlInput, _ ...request.Option) (*sagemaker.CreatePresignedDomainUrlOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreatePresignedDomainUrl cancelled", ctx.Err())
	default:
		return d.CreatePresignedDomainUrl(in)
	}
}

func (d *SageMakerDouble) CreatePresignedNotebookInstanceUrl(i0 *sagemaker.CreatePresignedNotebookInstanceUrlInput) (r0 *sagemaker.CreatePresignedNotebookInstanceUrlOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePresignedNotebookInstanceUrl", i0)
	r0, _ = returns[0].(*sagemaker.CreatePresignedNotebookInstanceUrlOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) CreatePresignedNotebookInstanceUrlRequest(i0 *sagemaker.CreatePresignedNotebookInstanceUrlInput) (r0 *request.Request, r1 *sagemaker.CreatePresignedNotebookInstanceUrlOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePresignedNotebookInstanceUrlRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.CreatePresignedNotebookInstanceUrlOutput)
	return
}

func (d *SageMakerDouble) CreatePresignedNotebookInstanceUrlWithContext(i0 context.Context, i1 *sagemaker.CreatePresignedNotebookInstanceUrlInput, i2 ...request.Option) (r0 *sagemaker.CreatePresignedNotebookInstanceUrlOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePresignedNotebookInstanceUrlWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.CreatePresignedNotebookInstanceUrlOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeCreatePresignedNotebookInstanceUrlWithContext(ctx context.Context, in *sagemaker.CreatePresignedNotebookInstanceUrlInput, _ ...request.Option) (*sagemaker.CreatePresignedNotebookInstanceUrlOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreatePresignedNotebookInstanceUrl cancelled", ctx.Err())
	default:
		return d.CreatePresignedNotebookInstanceUrl(in)
	}
}

func (d *SageMakerDouble) CreateProcessingJob(i0 *sagemaker.CreateProcessingJobInput) (r0 *sagemaker.CreateProcessingJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProcessingJob", i0)
	r0, _ = returns[0].(*sagemaker.CreateProcessingJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) CreateProcessingJobRequest(i0 *sagemaker.CreateProcessingJobInput) (r0 *request.Request, r1 *sagemaker.CreateProcessingJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProcessingJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.CreateProcessingJobOutput)
	return
}

func (d *SageMakerDouble) CreateProcessingJobWithContext(i0 context.Context, i1 *sagemaker.CreateProcessingJobInput, i2 ...request.Option) (r0 *sagemaker.CreateProcessingJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProcessingJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.CreateProcessingJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeCreateProcessingJobWithContext(ctx context.Context, in *sagemaker.CreateProcessingJobInput, _ ...request.Option) (*sagemaker.CreateProcessingJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateProcessingJob cancelled", ctx.Err())
	default:
		return d.CreateProcessingJob(in)
	}
}

func (d *SageMakerDouble) CreateTrainingJob(i0 *sagemaker.CreateTrainingJobInput) (r0 *sagemaker.CreateTrainingJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTrainingJob", i0)
	r0, _ = returns[0].(*sagemaker.CreateTrainingJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) CreateTrainingJobRequest(i0 *sagemaker.CreateTrainingJobInput) (r0 *request.Request, r1 *sagemaker.CreateTrainingJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTrainingJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.CreateTrainingJobOutput)
	return
}

func (d *SageMakerDouble) CreateTrainingJobWithContext(i0 context.Context, i1 *sagemaker.CreateTrainingJobInput, i2 ...request.Option) (r0 *sagemaker.CreateTrainingJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTrainingJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.CreateTrainingJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeCreateTrainingJobWithContext(ctx context.Context, in *sagemaker.CreateTrainingJobInput, _ ...request.Option) (*sagemaker.CreateTrainingJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTrainingJob cancelled", ctx.Err())
	default:
		return d.CreateTrainingJob(in)
	}
}

func (d *SageMakerDouble) CreateTransformJob(i0 *sagemaker.CreateTransformJobInput) (r0 *sagemaker.CreateTransformJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTransformJob", i0)
	r0, _ = returns[0].(*sagemaker.CreateTransformJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) CreateTransformJobRequest(i0 *sagemaker.CreateTransformJobInput) (r0 *request.Request, r1 *sagemaker.CreateTransformJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTransformJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.CreateTransformJobOutput)
	return
}

func (d *SageMakerDouble) CreateTransformJobWithContext(i0 context.Context, i1 *sagemaker.CreateTransformJobInput, i2 ...request.Option) (r0 *sagemaker.CreateTransformJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTransformJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.CreateTransformJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeCreateTransformJobWithContext(ctx context.Context, in *sagemaker.CreateTransformJobInput, _ ...request.Option) (*sagemaker.CreateTransformJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTransformJob cancelled", ctx.Err())
	default:
		return d.CreateTransformJob(in)
	}
}

func (d *SageMakerDouble) CreateTrial(i0 *sagemaker.CreateTrialInput) (r0 *sagemaker.CreateTrialOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTrial", i0)
	r0, _ = returns[0].(*sagemaker.CreateTrialOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) CreateTrialComponent(i0 *sagemaker.CreateTrialComponentInput) (r0 *sagemaker.CreateTrialComponentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTrialComponent", i0)
	r0, _ = returns[0].(*sagemaker.CreateTrialComponentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) CreateTrialComponentRequest(i0 *sagemaker.CreateTrialComponentInput) (r0 *request.Request, r1 *sagemaker.CreateTrialComponentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTrialComponentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.CreateTrialComponentOutput)
	return
}

func (d *SageMakerDouble) CreateTrialComponentWithContext(i0 context.Context, i1 *sagemaker.CreateTrialComponentInput, i2 ...request.Option) (r0 *sagemaker.CreateTrialComponentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTrialComponentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.CreateTrialComponentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeCreateTrialComponentWithContext(ctx context.Context, in *sagemaker.CreateTrialComponentInput, _ ...request.Option) (*sagemaker.CreateTrialComponentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTrialComponent cancelled", ctx.Err())
	default:
		return d.CreateTrialComponent(in)
	}
}

func (d *SageMakerDouble) CreateTrialRequest(i0 *sagemaker.CreateTrialInput) (r0 *request.Request, r1 *sagemaker.CreateTrialOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTrialRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.CreateTrialOutput)
	return
}

func (d *SageMakerDouble) CreateTrialWithContext(i0 context.Context, i1 *sagemaker.CreateTrialInput, i2 ...request.Option) (r0 *sagemaker.CreateTrialOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTrialWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.CreateTrialOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeCreateTrialWithContext(ctx context.Context, in *sagemaker.CreateTrialInput, _ ...request.Option) (*sagemaker.CreateTrialOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTrial cancelled", ctx.Err())
	default:
		return d.CreateTrial(in)
	}
}

func (d *SageMakerDouble) CreateUserProfile(i0 *sagemaker.CreateUserProfileInput) (r0 *sagemaker.CreateUserProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserProfile", i0)
	r0, _ = returns[0].(*sagemaker.CreateUserProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) CreateUserProfileRequest(i0 *sagemaker.CreateUserProfileInput) (r0 *request.Request, r1 *sagemaker.CreateUserProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.CreateUserProfileOutput)
	return
}

func (d *SageMakerDouble) CreateUserProfileWithContext(i0 context.Context, i1 *sagemaker.CreateUserProfileInput, i2 ...request.Option) (r0 *sagemaker.CreateUserProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.CreateUserProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeCreateUserProfileWithContext(ctx context.Context, in *sagemaker.CreateUserProfileInput, _ ...request.Option) (*sagemaker.CreateUserProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateUserProfile cancelled", ctx.Err())
	default:
		return d.CreateUserProfile(in)
	}
}

func (d *SageMakerDouble) CreateWorkteam(i0 *sagemaker.CreateWorkteamInput) (r0 *sagemaker.CreateWorkteamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateWorkteam", i0)
	r0, _ = returns[0].(*sagemaker.CreateWorkteamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) CreateWorkteamRequest(i0 *sagemaker.CreateWorkteamInput) (r0 *request.Request, r1 *sagemaker.CreateWorkteamOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateWorkteamRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.CreateWorkteamOutput)
	return
}

func (d *SageMakerDouble) CreateWorkteamWithContext(i0 context.Context, i1 *sagemaker.CreateWorkteamInput, i2 ...request.Option) (r0 *sagemaker.CreateWorkteamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateWorkteamWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.CreateWorkteamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeCreateWorkteamWithContext(ctx context.Context, in *sagemaker.CreateWorkteamInput, _ ...request.Option) (*sagemaker.CreateWorkteamOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateWorkteam cancelled", ctx.Err())
	default:
		return d.CreateWorkteam(in)
	}
}

func (d *SageMakerDouble) DeleteAlgorithm(i0 *sagemaker.DeleteAlgorithmInput) (r0 *sagemaker.DeleteAlgorithmOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAlgorithm", i0)
	r0, _ = returns[0].(*sagemaker.DeleteAlgorithmOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DeleteAlgorithmRequest(i0 *sagemaker.DeleteAlgorithmInput) (r0 *request.Request, r1 *sagemaker.DeleteAlgorithmOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAlgorithmRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DeleteAlgorithmOutput)
	return
}

func (d *SageMakerDouble) DeleteAlgorithmWithContext(i0 context.Context, i1 *sagemaker.DeleteAlgorithmInput, i2 ...request.Option) (r0 *sagemaker.DeleteAlgorithmOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAlgorithmWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DeleteAlgorithmOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDeleteAlgorithmWithContext(ctx context.Context, in *sagemaker.DeleteAlgorithmInput, _ ...request.Option) (*sagemaker.DeleteAlgorithmOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteAlgorithm cancelled", ctx.Err())
	default:
		return d.DeleteAlgorithm(in)
	}
}

func (d *SageMakerDouble) DeleteApp(i0 *sagemaker.DeleteAppInput) (r0 *sagemaker.DeleteAppOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApp", i0)
	r0, _ = returns[0].(*sagemaker.DeleteAppOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DeleteAppRequest(i0 *sagemaker.DeleteAppInput) (r0 *request.Request, r1 *sagemaker.DeleteAppOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAppRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DeleteAppOutput)
	return
}

func (d *SageMakerDouble) DeleteAppWithContext(i0 context.Context, i1 *sagemaker.DeleteAppInput, i2 ...request.Option) (r0 *sagemaker.DeleteAppOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAppWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DeleteAppOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDeleteAppWithContext(ctx context.Context, in *sagemaker.DeleteAppInput, _ ...request.Option) (*sagemaker.DeleteAppOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteApp cancelled", ctx.Err())
	default:
		return d.DeleteApp(in)
	}
}

func (d *SageMakerDouble) DeleteCodeRepository(i0 *sagemaker.DeleteCodeRepositoryInput) (r0 *sagemaker.DeleteCodeRepositoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCodeRepository", i0)
	r0, _ = returns[0].(*sagemaker.DeleteCodeRepositoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DeleteCodeRepositoryRequest(i0 *sagemaker.DeleteCodeRepositoryInput) (r0 *request.Request, r1 *sagemaker.DeleteCodeRepositoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCodeRepositoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DeleteCodeRepositoryOutput)
	return
}

func (d *SageMakerDouble) DeleteCodeRepositoryWithContext(i0 context.Context, i1 *sagemaker.DeleteCodeRepositoryInput, i2 ...request.Option) (r0 *sagemaker.DeleteCodeRepositoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCodeRepositoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DeleteCodeRepositoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDeleteCodeRepositoryWithContext(ctx context.Context, in *sagemaker.DeleteCodeRepositoryInput, _ ...request.Option) (*sagemaker.DeleteCodeRepositoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteCodeRepository cancelled", ctx.Err())
	default:
		return d.DeleteCodeRepository(in)
	}
}

func (d *SageMakerDouble) DeleteDomain(i0 *sagemaker.DeleteDomainInput) (r0 *sagemaker.DeleteDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDomain", i0)
	r0, _ = returns[0].(*sagemaker.DeleteDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DeleteDomainRequest(i0 *sagemaker.DeleteDomainInput) (r0 *request.Request, r1 *sagemaker.DeleteDomainOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDomainRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DeleteDomainOutput)
	return
}

func (d *SageMakerDouble) DeleteDomainWithContext(i0 context.Context, i1 *sagemaker.DeleteDomainInput, i2 ...request.Option) (r0 *sagemaker.DeleteDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDomainWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DeleteDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDeleteDomainWithContext(ctx context.Context, in *sagemaker.DeleteDomainInput, _ ...request.Option) (*sagemaker.DeleteDomainOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDomain cancelled", ctx.Err())
	default:
		return d.DeleteDomain(in)
	}
}

func (d *SageMakerDouble) DeleteEndpoint(i0 *sagemaker.DeleteEndpointInput) (r0 *sagemaker.DeleteEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEndpoint", i0)
	r0, _ = returns[0].(*sagemaker.DeleteEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DeleteEndpointConfig(i0 *sagemaker.DeleteEndpointConfigInput) (r0 *sagemaker.DeleteEndpointConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEndpointConfig", i0)
	r0, _ = returns[0].(*sagemaker.DeleteEndpointConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DeleteEndpointConfigRequest(i0 *sagemaker.DeleteEndpointConfigInput) (r0 *request.Request, r1 *sagemaker.DeleteEndpointConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEndpointConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DeleteEndpointConfigOutput)
	return
}

func (d *SageMakerDouble) DeleteEndpointConfigWithContext(i0 context.Context, i1 *sagemaker.DeleteEndpointConfigInput, i2 ...request.Option) (r0 *sagemaker.DeleteEndpointConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEndpointConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DeleteEndpointConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDeleteEndpointConfigWithContext(ctx context.Context, in *sagemaker.DeleteEndpointConfigInput, _ ...request.Option) (*sagemaker.DeleteEndpointConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteEndpointConfig cancelled", ctx.Err())
	default:
		return d.DeleteEndpointConfig(in)
	}
}

func (d *SageMakerDouble) DeleteEndpointRequest(i0 *sagemaker.DeleteEndpointInput) (r0 *request.Request, r1 *sagemaker.DeleteEndpointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEndpointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DeleteEndpointOutput)
	return
}

func (d *SageMakerDouble) DeleteEndpointWithContext(i0 context.Context, i1 *sagemaker.DeleteEndpointInput, i2 ...request.Option) (r0 *sagemaker.DeleteEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEndpointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DeleteEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDeleteEndpointWithContext(ctx context.Context, in *sagemaker.DeleteEndpointInput, _ ...request.Option) (*sagemaker.DeleteEndpointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteEndpoint cancelled", ctx.Err())
	default:
		return d.DeleteEndpoint(in)
	}
}

func (d *SageMakerDouble) DeleteExperiment(i0 *sagemaker.DeleteExperimentInput) (r0 *sagemaker.DeleteExperimentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteExperiment", i0)
	r0, _ = returns[0].(*sagemaker.DeleteExperimentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DeleteExperimentRequest(i0 *sagemaker.DeleteExperimentInput) (r0 *request.Request, r1 *sagemaker.DeleteExperimentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteExperimentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DeleteExperimentOutput)
	return
}

func (d *SageMakerDouble) DeleteExperimentWithContext(i0 context.Context, i1 *sagemaker.DeleteExperimentInput, i2 ...request.Option) (r0 *sagemaker.DeleteExperimentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteExperimentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DeleteExperimentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDeleteExperimentWithContext(ctx context.Context, in *sagemaker.DeleteExperimentInput, _ ...request.Option) (*sagemaker.DeleteExperimentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteExperiment cancelled", ctx.Err())
	default:
		return d.DeleteExperiment(in)
	}
}

func (d *SageMakerDouble) DeleteFlowDefinition(i0 *sagemaker.DeleteFlowDefinitionInput) (r0 *sagemaker.DeleteFlowDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFlowDefinition", i0)
	r0, _ = returns[0].(*sagemaker.DeleteFlowDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DeleteFlowDefinitionRequest(i0 *sagemaker.DeleteFlowDefinitionInput) (r0 *request.Request, r1 *sagemaker.DeleteFlowDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFlowDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DeleteFlowDefinitionOutput)
	return
}

func (d *SageMakerDouble) DeleteFlowDefinitionWithContext(i0 context.Context, i1 *sagemaker.DeleteFlowDefinitionInput, i2 ...request.Option) (r0 *sagemaker.DeleteFlowDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFlowDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DeleteFlowDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDeleteFlowDefinitionWithContext(ctx context.Context, in *sagemaker.DeleteFlowDefinitionInput, _ ...request.Option) (*sagemaker.DeleteFlowDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteFlowDefinition cancelled", ctx.Err())
	default:
		return d.DeleteFlowDefinition(in)
	}
}

func (d *SageMakerDouble) DeleteModel(i0 *sagemaker.DeleteModelInput) (r0 *sagemaker.DeleteModelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteModel", i0)
	r0, _ = returns[0].(*sagemaker.DeleteModelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DeleteModelPackage(i0 *sagemaker.DeleteModelPackageInput) (r0 *sagemaker.DeleteModelPackageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteModelPackage", i0)
	r0, _ = returns[0].(*sagemaker.DeleteModelPackageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DeleteModelPackageRequest(i0 *sagemaker.DeleteModelPackageInput) (r0 *request.Request, r1 *sagemaker.DeleteModelPackageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteModelPackageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DeleteModelPackageOutput)
	return
}

func (d *SageMakerDouble) DeleteModelPackageWithContext(i0 context.Context, i1 *sagemaker.DeleteModelPackageInput, i2 ...request.Option) (r0 *sagemaker.DeleteModelPackageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteModelPackageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DeleteModelPackageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDeleteModelPackageWithContext(ctx context.Context, in *sagemaker.DeleteModelPackageInput, _ ...request.Option) (*sagemaker.DeleteModelPackageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteModelPackage cancelled", ctx.Err())
	default:
		return d.DeleteModelPackage(in)
	}
}

func (d *SageMakerDouble) DeleteModelRequest(i0 *sagemaker.DeleteModelInput) (r0 *request.Request, r1 *sagemaker.DeleteModelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteModelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DeleteModelOutput)
	return
}

func (d *SageMakerDouble) DeleteModelWithContext(i0 context.Context, i1 *sagemaker.DeleteModelInput, i2 ...request.Option) (r0 *sagemaker.DeleteModelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteModelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DeleteModelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDeleteModelWithContext(ctx context.Context, in *sagemaker.DeleteModelInput, _ ...request.Option) (*sagemaker.DeleteModelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteModel cancelled", ctx.Err())
	default:
		return d.DeleteModel(in)
	}
}

func (d *SageMakerDouble) DeleteMonitoringSchedule(i0 *sagemaker.DeleteMonitoringScheduleInput) (r0 *sagemaker.DeleteMonitoringScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMonitoringSchedule", i0)
	r0, _ = returns[0].(*sagemaker.DeleteMonitoringScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DeleteMonitoringScheduleRequest(i0 *sagemaker.DeleteMonitoringScheduleInput) (r0 *request.Request, r1 *sagemaker.DeleteMonitoringScheduleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMonitoringScheduleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DeleteMonitoringScheduleOutput)
	return
}

func (d *SageMakerDouble) DeleteMonitoringScheduleWithContext(i0 context.Context, i1 *sagemaker.DeleteMonitoringScheduleInput, i2 ...request.Option) (r0 *sagemaker.DeleteMonitoringScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMonitoringScheduleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DeleteMonitoringScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDeleteMonitoringScheduleWithContext(ctx context.Context, in *sagemaker.DeleteMonitoringScheduleInput, _ ...request.Option) (*sagemaker.DeleteMonitoringScheduleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteMonitoringSchedule cancelled", ctx.Err())
	default:
		return d.DeleteMonitoringSchedule(in)
	}
}

func (d *SageMakerDouble) DeleteNotebookInstance(i0 *sagemaker.DeleteNotebookInstanceInput) (r0 *sagemaker.DeleteNotebookInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNotebookInstance", i0)
	r0, _ = returns[0].(*sagemaker.DeleteNotebookInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DeleteNotebookInstanceLifecycleConfig(i0 *sagemaker.DeleteNotebookInstanceLifecycleConfigInput) (r0 *sagemaker.DeleteNotebookInstanceLifecycleConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNotebookInstanceLifecycleConfig", i0)
	r0, _ = returns[0].(*sagemaker.DeleteNotebookInstanceLifecycleConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DeleteNotebookInstanceLifecycleConfigRequest(i0 *sagemaker.DeleteNotebookInstanceLifecycleConfigInput) (r0 *request.Request, r1 *sagemaker.DeleteNotebookInstanceLifecycleConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNotebookInstanceLifecycleConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DeleteNotebookInstanceLifecycleConfigOutput)
	return
}

func (d *SageMakerDouble) DeleteNotebookInstanceLifecycleConfigWithContext(i0 context.Context, i1 *sagemaker.DeleteNotebookInstanceLifecycleConfigInput, i2 ...request.Option) (r0 *sagemaker.DeleteNotebookInstanceLifecycleConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNotebookInstanceLifecycleConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DeleteNotebookInstanceLifecycleConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDeleteNotebookInstanceLifecycleConfigWithContext(ctx context.Context, in *sagemaker.DeleteNotebookInstanceLifecycleConfigInput, _ ...request.Option) (*sagemaker.DeleteNotebookInstanceLifecycleConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteNotebookInstanceLifecycleConfig cancelled", ctx.Err())
	default:
		return d.DeleteNotebookInstanceLifecycleConfig(in)
	}
}

func (d *SageMakerDouble) DeleteNotebookInstanceRequest(i0 *sagemaker.DeleteNotebookInstanceInput) (r0 *request.Request, r1 *sagemaker.DeleteNotebookInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNotebookInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DeleteNotebookInstanceOutput)
	return
}

func (d *SageMakerDouble) DeleteNotebookInstanceWithContext(i0 context.Context, i1 *sagemaker.DeleteNotebookInstanceInput, i2 ...request.Option) (r0 *sagemaker.DeleteNotebookInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNotebookInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DeleteNotebookInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDeleteNotebookInstanceWithContext(ctx context.Context, in *sagemaker.DeleteNotebookInstanceInput, _ ...request.Option) (*sagemaker.DeleteNotebookInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteNotebookInstance cancelled", ctx.Err())
	default:
		return d.DeleteNotebookInstance(in)
	}
}

func (d *SageMakerDouble) DeleteTags(i0 *sagemaker.DeleteTagsInput) (r0 *sagemaker.DeleteTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTags", i0)
	r0, _ = returns[0].(*sagemaker.DeleteTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DeleteTagsRequest(i0 *sagemaker.DeleteTagsInput) (r0 *request.Request, r1 *sagemaker.DeleteTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DeleteTagsOutput)
	return
}

func (d *SageMakerDouble) DeleteTagsWithContext(i0 context.Context, i1 *sagemaker.DeleteTagsInput, i2 ...request.Option) (r0 *sagemaker.DeleteTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DeleteTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDeleteTagsWithContext(ctx context.Context, in *sagemaker.DeleteTagsInput, _ ...request.Option) (*sagemaker.DeleteTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTags cancelled", ctx.Err())
	default:
		return d.DeleteTags(in)
	}
}

func (d *SageMakerDouble) DeleteTrial(i0 *sagemaker.DeleteTrialInput) (r0 *sagemaker.DeleteTrialOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTrial", i0)
	r0, _ = returns[0].(*sagemaker.DeleteTrialOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DeleteTrialComponent(i0 *sagemaker.DeleteTrialComponentInput) (r0 *sagemaker.DeleteTrialComponentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTrialComponent", i0)
	r0, _ = returns[0].(*sagemaker.DeleteTrialComponentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DeleteTrialComponentRequest(i0 *sagemaker.DeleteTrialComponentInput) (r0 *request.Request, r1 *sagemaker.DeleteTrialComponentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTrialComponentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DeleteTrialComponentOutput)
	return
}

func (d *SageMakerDouble) DeleteTrialComponentWithContext(i0 context.Context, i1 *sagemaker.DeleteTrialComponentInput, i2 ...request.Option) (r0 *sagemaker.DeleteTrialComponentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTrialComponentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DeleteTrialComponentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDeleteTrialComponentWithContext(ctx context.Context, in *sagemaker.DeleteTrialComponentInput, _ ...request.Option) (*sagemaker.DeleteTrialComponentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTrialComponent cancelled", ctx.Err())
	default:
		return d.DeleteTrialComponent(in)
	}
}

func (d *SageMakerDouble) DeleteTrialRequest(i0 *sagemaker.DeleteTrialInput) (r0 *request.Request, r1 *sagemaker.DeleteTrialOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTrialRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DeleteTrialOutput)
	return
}

func (d *SageMakerDouble) DeleteTrialWithContext(i0 context.Context, i1 *sagemaker.DeleteTrialInput, i2 ...request.Option) (r0 *sagemaker.DeleteTrialOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTrialWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DeleteTrialOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDeleteTrialWithContext(ctx context.Context, in *sagemaker.DeleteTrialInput, _ ...request.Option) (*sagemaker.DeleteTrialOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTrial cancelled", ctx.Err())
	default:
		return d.DeleteTrial(in)
	}
}

func (d *SageMakerDouble) DeleteUserProfile(i0 *sagemaker.DeleteUserProfileInput) (r0 *sagemaker.DeleteUserProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserProfile", i0)
	r0, _ = returns[0].(*sagemaker.DeleteUserProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DeleteUserProfileRequest(i0 *sagemaker.DeleteUserProfileInput) (r0 *request.Request, r1 *sagemaker.DeleteUserProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DeleteUserProfileOutput)
	return
}

func (d *SageMakerDouble) DeleteUserProfileWithContext(i0 context.Context, i1 *sagemaker.DeleteUserProfileInput, i2 ...request.Option) (r0 *sagemaker.DeleteUserProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DeleteUserProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDeleteUserProfileWithContext(ctx context.Context, in *sagemaker.DeleteUserProfileInput, _ ...request.Option) (*sagemaker.DeleteUserProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteUserProfile cancelled", ctx.Err())
	default:
		return d.DeleteUserProfile(in)
	}
}

func (d *SageMakerDouble) DeleteWorkteam(i0 *sagemaker.DeleteWorkteamInput) (r0 *sagemaker.DeleteWorkteamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteWorkteam", i0)
	r0, _ = returns[0].(*sagemaker.DeleteWorkteamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DeleteWorkteamRequest(i0 *sagemaker.DeleteWorkteamInput) (r0 *request.Request, r1 *sagemaker.DeleteWorkteamOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteWorkteamRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DeleteWorkteamOutput)
	return
}

func (d *SageMakerDouble) DeleteWorkteamWithContext(i0 context.Context, i1 *sagemaker.DeleteWorkteamInput, i2 ...request.Option) (r0 *sagemaker.DeleteWorkteamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteWorkteamWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DeleteWorkteamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDeleteWorkteamWithContext(ctx context.Context, in *sagemaker.DeleteWorkteamInput, _ ...request.Option) (*sagemaker.DeleteWorkteamOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteWorkteam cancelled", ctx.Err())
	default:
		return d.DeleteWorkteam(in)
	}
}

func (d *SageMakerDouble) DescribeAlgorithm(i0 *sagemaker.DescribeAlgorithmInput) (r0 *sagemaker.DescribeAlgorithmOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAlgorithm", i0)
	r0, _ = returns[0].(*sagemaker.DescribeAlgorithmOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DescribeAlgorithmRequest(i0 *sagemaker.DescribeAlgorithmInput) (r0 *request.Request, r1 *sagemaker.DescribeAlgorithmOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAlgorithmRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DescribeAlgorithmOutput)
	return
}

func (d *SageMakerDouble) DescribeAlgorithmWithContext(i0 context.Context, i1 *sagemaker.DescribeAlgorithmInput, i2 ...request.Option) (r0 *sagemaker.DescribeAlgorithmOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAlgorithmWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DescribeAlgorithmOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDescribeAlgorithmWithContext(ctx context.Context, in *sagemaker.DescribeAlgorithmInput, _ ...request.Option) (*sagemaker.DescribeAlgorithmOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAlgorithm cancelled", ctx.Err())
	default:
		return d.DescribeAlgorithm(in)
	}
}

func (d *SageMakerDouble) DescribeApp(i0 *sagemaker.DescribeAppInput) (r0 *sagemaker.DescribeAppOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeApp", i0)
	r0, _ = returns[0].(*sagemaker.DescribeAppOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DescribeAppRequest(i0 *sagemaker.DescribeAppInput) (r0 *request.Request, r1 *sagemaker.DescribeAppOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAppRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DescribeAppOutput)
	return
}

func (d *SageMakerDouble) DescribeAppWithContext(i0 context.Context, i1 *sagemaker.DescribeAppInput, i2 ...request.Option) (r0 *sagemaker.DescribeAppOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAppWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DescribeAppOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDescribeAppWithContext(ctx context.Context, in *sagemaker.DescribeAppInput, _ ...request.Option) (*sagemaker.DescribeAppOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeApp cancelled", ctx.Err())
	default:
		return d.DescribeApp(in)
	}
}

func (d *SageMakerDouble) DescribeAutoMLJob(i0 *sagemaker.DescribeAutoMLJobInput) (r0 *sagemaker.DescribeAutoMLJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAutoMLJob", i0)
	r0, _ = returns[0].(*sagemaker.DescribeAutoMLJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DescribeAutoMLJobRequest(i0 *sagemaker.DescribeAutoMLJobInput) (r0 *request.Request, r1 *sagemaker.DescribeAutoMLJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAutoMLJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DescribeAutoMLJobOutput)
	return
}

func (d *SageMakerDouble) DescribeAutoMLJobWithContext(i0 context.Context, i1 *sagemaker.DescribeAutoMLJobInput, i2 ...request.Option) (r0 *sagemaker.DescribeAutoMLJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAutoMLJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DescribeAutoMLJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDescribeAutoMLJobWithContext(ctx context.Context, in *sagemaker.DescribeAutoMLJobInput, _ ...request.Option) (*sagemaker.DescribeAutoMLJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAutoMLJob cancelled", ctx.Err())
	default:
		return d.DescribeAutoMLJob(in)
	}
}

func (d *SageMakerDouble) DescribeCodeRepository(i0 *sagemaker.DescribeCodeRepositoryInput) (r0 *sagemaker.DescribeCodeRepositoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCodeRepository", i0)
	r0, _ = returns[0].(*sagemaker.DescribeCodeRepositoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DescribeCodeRepositoryRequest(i0 *sagemaker.DescribeCodeRepositoryInput) (r0 *request.Request, r1 *sagemaker.DescribeCodeRepositoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCodeRepositoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DescribeCodeRepositoryOutput)
	return
}

func (d *SageMakerDouble) DescribeCodeRepositoryWithContext(i0 context.Context, i1 *sagemaker.DescribeCodeRepositoryInput, i2 ...request.Option) (r0 *sagemaker.DescribeCodeRepositoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCodeRepositoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DescribeCodeRepositoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDescribeCodeRepositoryWithContext(ctx context.Context, in *sagemaker.DescribeCodeRepositoryInput, _ ...request.Option) (*sagemaker.DescribeCodeRepositoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeCodeRepository cancelled", ctx.Err())
	default:
		return d.DescribeCodeRepository(in)
	}
}

func (d *SageMakerDouble) DescribeCompilationJob(i0 *sagemaker.DescribeCompilationJobInput) (r0 *sagemaker.DescribeCompilationJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCompilationJob", i0)
	r0, _ = returns[0].(*sagemaker.DescribeCompilationJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DescribeCompilationJobRequest(i0 *sagemaker.DescribeCompilationJobInput) (r0 *request.Request, r1 *sagemaker.DescribeCompilationJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCompilationJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DescribeCompilationJobOutput)
	return
}

func (d *SageMakerDouble) DescribeCompilationJobWithContext(i0 context.Context, i1 *sagemaker.DescribeCompilationJobInput, i2 ...request.Option) (r0 *sagemaker.DescribeCompilationJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCompilationJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DescribeCompilationJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDescribeCompilationJobWithContext(ctx context.Context, in *sagemaker.DescribeCompilationJobInput, _ ...request.Option) (*sagemaker.DescribeCompilationJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeCompilationJob cancelled", ctx.Err())
	default:
		return d.DescribeCompilationJob(in)
	}
}

func (d *SageMakerDouble) DescribeDomain(i0 *sagemaker.DescribeDomainInput) (r0 *sagemaker.DescribeDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDomain", i0)
	r0, _ = returns[0].(*sagemaker.DescribeDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DescribeDomainRequest(i0 *sagemaker.DescribeDomainInput) (r0 *request.Request, r1 *sagemaker.DescribeDomainOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDomainRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DescribeDomainOutput)
	return
}

func (d *SageMakerDouble) DescribeDomainWithContext(i0 context.Context, i1 *sagemaker.DescribeDomainInput, i2 ...request.Option) (r0 *sagemaker.DescribeDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDomainWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DescribeDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDescribeDomainWithContext(ctx context.Context, in *sagemaker.DescribeDomainInput, _ ...request.Option) (*sagemaker.DescribeDomainOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDomain cancelled", ctx.Err())
	default:
		return d.DescribeDomain(in)
	}
}

func (d *SageMakerDouble) DescribeEndpoint(i0 *sagemaker.DescribeEndpointInput) (r0 *sagemaker.DescribeEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEndpoint", i0)
	r0, _ = returns[0].(*sagemaker.DescribeEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DescribeEndpointConfig(i0 *sagemaker.DescribeEndpointConfigInput) (r0 *sagemaker.DescribeEndpointConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEndpointConfig", i0)
	r0, _ = returns[0].(*sagemaker.DescribeEndpointConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DescribeEndpointConfigRequest(i0 *sagemaker.DescribeEndpointConfigInput) (r0 *request.Request, r1 *sagemaker.DescribeEndpointConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEndpointConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DescribeEndpointConfigOutput)
	return
}

func (d *SageMakerDouble) DescribeEndpointConfigWithContext(i0 context.Context, i1 *sagemaker.DescribeEndpointConfigInput, i2 ...request.Option) (r0 *sagemaker.DescribeEndpointConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEndpointConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DescribeEndpointConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDescribeEndpointConfigWithContext(ctx context.Context, in *sagemaker.DescribeEndpointConfigInput, _ ...request.Option) (*sagemaker.DescribeEndpointConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEndpointConfig cancelled", ctx.Err())
	default:
		return d.DescribeEndpointConfig(in)
	}
}

func (d *SageMakerDouble) DescribeEndpointRequest(i0 *sagemaker.DescribeEndpointInput) (r0 *request.Request, r1 *sagemaker.DescribeEndpointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEndpointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DescribeEndpointOutput)
	return
}

func (d *SageMakerDouble) DescribeEndpointWithContext(i0 context.Context, i1 *sagemaker.DescribeEndpointInput, i2 ...request.Option) (r0 *sagemaker.DescribeEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEndpointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DescribeEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDescribeEndpointWithContext(ctx context.Context, in *sagemaker.DescribeEndpointInput, _ ...request.Option) (*sagemaker.DescribeEndpointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEndpoint cancelled", ctx.Err())
	default:
		return d.DescribeEndpoint(in)
	}
}

func (d *SageMakerDouble) DescribeExperiment(i0 *sagemaker.DescribeExperimentInput) (r0 *sagemaker.DescribeExperimentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeExperiment", i0)
	r0, _ = returns[0].(*sagemaker.DescribeExperimentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DescribeExperimentRequest(i0 *sagemaker.DescribeExperimentInput) (r0 *request.Request, r1 *sagemaker.DescribeExperimentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeExperimentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DescribeExperimentOutput)
	return
}

func (d *SageMakerDouble) DescribeExperimentWithContext(i0 context.Context, i1 *sagemaker.DescribeExperimentInput, i2 ...request.Option) (r0 *sagemaker.DescribeExperimentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeExperimentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DescribeExperimentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDescribeExperimentWithContext(ctx context.Context, in *sagemaker.DescribeExperimentInput, _ ...request.Option) (*sagemaker.DescribeExperimentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeExperiment cancelled", ctx.Err())
	default:
		return d.DescribeExperiment(in)
	}
}

func (d *SageMakerDouble) DescribeFlowDefinition(i0 *sagemaker.DescribeFlowDefinitionInput) (r0 *sagemaker.DescribeFlowDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFlowDefinition", i0)
	r0, _ = returns[0].(*sagemaker.DescribeFlowDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DescribeFlowDefinitionRequest(i0 *sagemaker.DescribeFlowDefinitionInput) (r0 *request.Request, r1 *sagemaker.DescribeFlowDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFlowDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DescribeFlowDefinitionOutput)
	return
}

func (d *SageMakerDouble) DescribeFlowDefinitionWithContext(i0 context.Context, i1 *sagemaker.DescribeFlowDefinitionInput, i2 ...request.Option) (r0 *sagemaker.DescribeFlowDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFlowDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DescribeFlowDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDescribeFlowDefinitionWithContext(ctx context.Context, in *sagemaker.DescribeFlowDefinitionInput, _ ...request.Option) (*sagemaker.DescribeFlowDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeFlowDefinition cancelled", ctx.Err())
	default:
		return d.DescribeFlowDefinition(in)
	}
}

func (d *SageMakerDouble) DescribeHumanTaskUi(i0 *sagemaker.DescribeHumanTaskUiInput) (r0 *sagemaker.DescribeHumanTaskUiOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHumanTaskUi", i0)
	r0, _ = returns[0].(*sagemaker.DescribeHumanTaskUiOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DescribeHumanTaskUiRequest(i0 *sagemaker.DescribeHumanTaskUiInput) (r0 *request.Request, r1 *sagemaker.DescribeHumanTaskUiOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHumanTaskUiRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DescribeHumanTaskUiOutput)
	return
}

func (d *SageMakerDouble) DescribeHumanTaskUiWithContext(i0 context.Context, i1 *sagemaker.DescribeHumanTaskUiInput, i2 ...request.Option) (r0 *sagemaker.DescribeHumanTaskUiOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHumanTaskUiWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DescribeHumanTaskUiOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDescribeHumanTaskUiWithContext(ctx context.Context, in *sagemaker.DescribeHumanTaskUiInput, _ ...request.Option) (*sagemaker.DescribeHumanTaskUiOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeHumanTaskUi cancelled", ctx.Err())
	default:
		return d.DescribeHumanTaskUi(in)
	}
}

func (d *SageMakerDouble) DescribeHyperParameterTuningJob(i0 *sagemaker.DescribeHyperParameterTuningJobInput) (r0 *sagemaker.DescribeHyperParameterTuningJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHyperParameterTuningJob", i0)
	r0, _ = returns[0].(*sagemaker.DescribeHyperParameterTuningJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DescribeHyperParameterTuningJobRequest(i0 *sagemaker.DescribeHyperParameterTuningJobInput) (r0 *request.Request, r1 *sagemaker.DescribeHyperParameterTuningJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHyperParameterTuningJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DescribeHyperParameterTuningJobOutput)
	return
}

func (d *SageMakerDouble) DescribeHyperParameterTuningJobWithContext(i0 context.Context, i1 *sagemaker.DescribeHyperParameterTuningJobInput, i2 ...request.Option) (r0 *sagemaker.DescribeHyperParameterTuningJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHyperParameterTuningJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DescribeHyperParameterTuningJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDescribeHyperParameterTuningJobWithContext(ctx context.Context, in *sagemaker.DescribeHyperParameterTuningJobInput, _ ...request.Option) (*sagemaker.DescribeHyperParameterTuningJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeHyperParameterTuningJob cancelled", ctx.Err())
	default:
		return d.DescribeHyperParameterTuningJob(in)
	}
}

func (d *SageMakerDouble) DescribeLabelingJob(i0 *sagemaker.DescribeLabelingJobInput) (r0 *sagemaker.DescribeLabelingJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLabelingJob", i0)
	r0, _ = returns[0].(*sagemaker.DescribeLabelingJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DescribeLabelingJobRequest(i0 *sagemaker.DescribeLabelingJobInput) (r0 *request.Request, r1 *sagemaker.DescribeLabelingJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLabelingJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DescribeLabelingJobOutput)
	return
}

func (d *SageMakerDouble) DescribeLabelingJobWithContext(i0 context.Context, i1 *sagemaker.DescribeLabelingJobInput, i2 ...request.Option) (r0 *sagemaker.DescribeLabelingJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLabelingJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DescribeLabelingJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDescribeLabelingJobWithContext(ctx context.Context, in *sagemaker.DescribeLabelingJobInput, _ ...request.Option) (*sagemaker.DescribeLabelingJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeLabelingJob cancelled", ctx.Err())
	default:
		return d.DescribeLabelingJob(in)
	}
}

func (d *SageMakerDouble) DescribeModel(i0 *sagemaker.DescribeModelInput) (r0 *sagemaker.DescribeModelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeModel", i0)
	r0, _ = returns[0].(*sagemaker.DescribeModelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DescribeModelPackage(i0 *sagemaker.DescribeModelPackageInput) (r0 *sagemaker.DescribeModelPackageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeModelPackage", i0)
	r0, _ = returns[0].(*sagemaker.DescribeModelPackageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DescribeModelPackageRequest(i0 *sagemaker.DescribeModelPackageInput) (r0 *request.Request, r1 *sagemaker.DescribeModelPackageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeModelPackageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DescribeModelPackageOutput)
	return
}

func (d *SageMakerDouble) DescribeModelPackageWithContext(i0 context.Context, i1 *sagemaker.DescribeModelPackageInput, i2 ...request.Option) (r0 *sagemaker.DescribeModelPackageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeModelPackageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DescribeModelPackageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDescribeModelPackageWithContext(ctx context.Context, in *sagemaker.DescribeModelPackageInput, _ ...request.Option) (*sagemaker.DescribeModelPackageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeModelPackage cancelled", ctx.Err())
	default:
		return d.DescribeModelPackage(in)
	}
}

func (d *SageMakerDouble) DescribeModelRequest(i0 *sagemaker.DescribeModelInput) (r0 *request.Request, r1 *sagemaker.DescribeModelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeModelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DescribeModelOutput)
	return
}

func (d *SageMakerDouble) DescribeModelWithContext(i0 context.Context, i1 *sagemaker.DescribeModelInput, i2 ...request.Option) (r0 *sagemaker.DescribeModelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeModelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DescribeModelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDescribeModelWithContext(ctx context.Context, in *sagemaker.DescribeModelInput, _ ...request.Option) (*sagemaker.DescribeModelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeModel cancelled", ctx.Err())
	default:
		return d.DescribeModel(in)
	}
}

func (d *SageMakerDouble) DescribeMonitoringSchedule(i0 *sagemaker.DescribeMonitoringScheduleInput) (r0 *sagemaker.DescribeMonitoringScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMonitoringSchedule", i0)
	r0, _ = returns[0].(*sagemaker.DescribeMonitoringScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DescribeMonitoringScheduleRequest(i0 *sagemaker.DescribeMonitoringScheduleInput) (r0 *request.Request, r1 *sagemaker.DescribeMonitoringScheduleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMonitoringScheduleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DescribeMonitoringScheduleOutput)
	return
}

func (d *SageMakerDouble) DescribeMonitoringScheduleWithContext(i0 context.Context, i1 *sagemaker.DescribeMonitoringScheduleInput, i2 ...request.Option) (r0 *sagemaker.DescribeMonitoringScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMonitoringScheduleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DescribeMonitoringScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDescribeMonitoringScheduleWithContext(ctx context.Context, in *sagemaker.DescribeMonitoringScheduleInput, _ ...request.Option) (*sagemaker.DescribeMonitoringScheduleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeMonitoringSchedule cancelled", ctx.Err())
	default:
		return d.DescribeMonitoringSchedule(in)
	}
}

func (d *SageMakerDouble) DescribeNotebookInstance(i0 *sagemaker.DescribeNotebookInstanceInput) (r0 *sagemaker.DescribeNotebookInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNotebookInstance", i0)
	r0, _ = returns[0].(*sagemaker.DescribeNotebookInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DescribeNotebookInstanceLifecycleConfig(i0 *sagemaker.DescribeNotebookInstanceLifecycleConfigInput) (r0 *sagemaker.DescribeNotebookInstanceLifecycleConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNotebookInstanceLifecycleConfig", i0)
	r0, _ = returns[0].(*sagemaker.DescribeNotebookInstanceLifecycleConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DescribeNotebookInstanceLifecycleConfigRequest(i0 *sagemaker.DescribeNotebookInstanceLifecycleConfigInput) (r0 *request.Request, r1 *sagemaker.DescribeNotebookInstanceLifecycleConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNotebookInstanceLifecycleConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DescribeNotebookInstanceLifecycleConfigOutput)
	return
}

func (d *SageMakerDouble) DescribeNotebookInstanceLifecycleConfigWithContext(i0 context.Context, i1 *sagemaker.DescribeNotebookInstanceLifecycleConfigInput, i2 ...request.Option) (r0 *sagemaker.DescribeNotebookInstanceLifecycleConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNotebookInstanceLifecycleConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DescribeNotebookInstanceLifecycleConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDescribeNotebookInstanceLifecycleConfigWithContext(ctx context.Context, in *sagemaker.DescribeNotebookInstanceLifecycleConfigInput, _ ...request.Option) (*sagemaker.DescribeNotebookInstanceLifecycleConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeNotebookInstanceLifecycleConfig cancelled", ctx.Err())
	default:
		return d.DescribeNotebookInstanceLifecycleConfig(in)
	}
}

func (d *SageMakerDouble) DescribeNotebookInstanceRequest(i0 *sagemaker.DescribeNotebookInstanceInput) (r0 *request.Request, r1 *sagemaker.DescribeNotebookInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNotebookInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DescribeNotebookInstanceOutput)
	return
}

func (d *SageMakerDouble) DescribeNotebookInstanceWithContext(i0 context.Context, i1 *sagemaker.DescribeNotebookInstanceInput, i2 ...request.Option) (r0 *sagemaker.DescribeNotebookInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNotebookInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DescribeNotebookInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDescribeNotebookInstanceWithContext(ctx context.Context, in *sagemaker.DescribeNotebookInstanceInput, _ ...request.Option) (*sagemaker.DescribeNotebookInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeNotebookInstance cancelled", ctx.Err())
	default:
		return d.DescribeNotebookInstance(in)
	}
}

func (d *SageMakerDouble) DescribeProcessingJob(i0 *sagemaker.DescribeProcessingJobInput) (r0 *sagemaker.DescribeProcessingJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProcessingJob", i0)
	r0, _ = returns[0].(*sagemaker.DescribeProcessingJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DescribeProcessingJobRequest(i0 *sagemaker.DescribeProcessingJobInput) (r0 *request.Request, r1 *sagemaker.DescribeProcessingJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProcessingJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DescribeProcessingJobOutput)
	return
}

func (d *SageMakerDouble) DescribeProcessingJobWithContext(i0 context.Context, i1 *sagemaker.DescribeProcessingJobInput, i2 ...request.Option) (r0 *sagemaker.DescribeProcessingJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProcessingJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DescribeProcessingJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDescribeProcessingJobWithContext(ctx context.Context, in *sagemaker.DescribeProcessingJobInput, _ ...request.Option) (*sagemaker.DescribeProcessingJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeProcessingJob cancelled", ctx.Err())
	default:
		return d.DescribeProcessingJob(in)
	}
}

func (d *SageMakerDouble) DescribeSubscribedWorkteam(i0 *sagemaker.DescribeSubscribedWorkteamInput) (r0 *sagemaker.DescribeSubscribedWorkteamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSubscribedWorkteam", i0)
	r0, _ = returns[0].(*sagemaker.DescribeSubscribedWorkteamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DescribeSubscribedWorkteamRequest(i0 *sagemaker.DescribeSubscribedWorkteamInput) (r0 *request.Request, r1 *sagemaker.DescribeSubscribedWorkteamOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSubscribedWorkteamRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DescribeSubscribedWorkteamOutput)
	return
}

func (d *SageMakerDouble) DescribeSubscribedWorkteamWithContext(i0 context.Context, i1 *sagemaker.DescribeSubscribedWorkteamInput, i2 ...request.Option) (r0 *sagemaker.DescribeSubscribedWorkteamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSubscribedWorkteamWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DescribeSubscribedWorkteamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDescribeSubscribedWorkteamWithContext(ctx context.Context, in *sagemaker.DescribeSubscribedWorkteamInput, _ ...request.Option) (*sagemaker.DescribeSubscribedWorkteamOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSubscribedWorkteam cancelled", ctx.Err())
	default:
		return d.DescribeSubscribedWorkteam(in)
	}
}

func (d *SageMakerDouble) DescribeTrainingJob(i0 *sagemaker.DescribeTrainingJobInput) (r0 *sagemaker.DescribeTrainingJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTrainingJob", i0)
	r0, _ = returns[0].(*sagemaker.DescribeTrainingJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DescribeTrainingJobRequest(i0 *sagemaker.DescribeTrainingJobInput) (r0 *request.Request, r1 *sagemaker.DescribeTrainingJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTrainingJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DescribeTrainingJobOutput)
	return
}

func (d *SageMakerDouble) DescribeTrainingJobWithContext(i0 context.Context, i1 *sagemaker.DescribeTrainingJobInput, i2 ...request.Option) (r0 *sagemaker.DescribeTrainingJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTrainingJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DescribeTrainingJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDescribeTrainingJobWithContext(ctx context.Context, in *sagemaker.DescribeTrainingJobInput, _ ...request.Option) (*sagemaker.DescribeTrainingJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTrainingJob cancelled", ctx.Err())
	default:
		return d.DescribeTrainingJob(in)
	}
}

func (d *SageMakerDouble) DescribeTransformJob(i0 *sagemaker.DescribeTransformJobInput) (r0 *sagemaker.DescribeTransformJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTransformJob", i0)
	r0, _ = returns[0].(*sagemaker.DescribeTransformJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DescribeTransformJobRequest(i0 *sagemaker.DescribeTransformJobInput) (r0 *request.Request, r1 *sagemaker.DescribeTransformJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTransformJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DescribeTransformJobOutput)
	return
}

func (d *SageMakerDouble) DescribeTransformJobWithContext(i0 context.Context, i1 *sagemaker.DescribeTransformJobInput, i2 ...request.Option) (r0 *sagemaker.DescribeTransformJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTransformJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DescribeTransformJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDescribeTransformJobWithContext(ctx context.Context, in *sagemaker.DescribeTransformJobInput, _ ...request.Option) (*sagemaker.DescribeTransformJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTransformJob cancelled", ctx.Err())
	default:
		return d.DescribeTransformJob(in)
	}
}

func (d *SageMakerDouble) DescribeTrial(i0 *sagemaker.DescribeTrialInput) (r0 *sagemaker.DescribeTrialOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTrial", i0)
	r0, _ = returns[0].(*sagemaker.DescribeTrialOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DescribeTrialComponent(i0 *sagemaker.DescribeTrialComponentInput) (r0 *sagemaker.DescribeTrialComponentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTrialComponent", i0)
	r0, _ = returns[0].(*sagemaker.DescribeTrialComponentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DescribeTrialComponentRequest(i0 *sagemaker.DescribeTrialComponentInput) (r0 *request.Request, r1 *sagemaker.DescribeTrialComponentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTrialComponentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DescribeTrialComponentOutput)
	return
}

func (d *SageMakerDouble) DescribeTrialComponentWithContext(i0 context.Context, i1 *sagemaker.DescribeTrialComponentInput, i2 ...request.Option) (r0 *sagemaker.DescribeTrialComponentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTrialComponentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DescribeTrialComponentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDescribeTrialComponentWithContext(ctx context.Context, in *sagemaker.DescribeTrialComponentInput, _ ...request.Option) (*sagemaker.DescribeTrialComponentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTrialComponent cancelled", ctx.Err())
	default:
		return d.DescribeTrialComponent(in)
	}
}

func (d *SageMakerDouble) DescribeTrialRequest(i0 *sagemaker.DescribeTrialInput) (r0 *request.Request, r1 *sagemaker.DescribeTrialOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTrialRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DescribeTrialOutput)
	return
}

func (d *SageMakerDouble) DescribeTrialWithContext(i0 context.Context, i1 *sagemaker.DescribeTrialInput, i2 ...request.Option) (r0 *sagemaker.DescribeTrialOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTrialWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DescribeTrialOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDescribeTrialWithContext(ctx context.Context, in *sagemaker.DescribeTrialInput, _ ...request.Option) (*sagemaker.DescribeTrialOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTrial cancelled", ctx.Err())
	default:
		return d.DescribeTrial(in)
	}
}

func (d *SageMakerDouble) DescribeUserProfile(i0 *sagemaker.DescribeUserProfileInput) (r0 *sagemaker.DescribeUserProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserProfile", i0)
	r0, _ = returns[0].(*sagemaker.DescribeUserProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DescribeUserProfileRequest(i0 *sagemaker.DescribeUserProfileInput) (r0 *request.Request, r1 *sagemaker.DescribeUserProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DescribeUserProfileOutput)
	return
}

func (d *SageMakerDouble) DescribeUserProfileWithContext(i0 context.Context, i1 *sagemaker.DescribeUserProfileInput, i2 ...request.Option) (r0 *sagemaker.DescribeUserProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DescribeUserProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDescribeUserProfileWithContext(ctx context.Context, in *sagemaker.DescribeUserProfileInput, _ ...request.Option) (*sagemaker.DescribeUserProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeUserProfile cancelled", ctx.Err())
	default:
		return d.DescribeUserProfile(in)
	}
}

func (d *SageMakerDouble) DescribeWorkforce(i0 *sagemaker.DescribeWorkforceInput) (r0 *sagemaker.DescribeWorkforceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkforce", i0)
	r0, _ = returns[0].(*sagemaker.DescribeWorkforceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DescribeWorkforceRequest(i0 *sagemaker.DescribeWorkforceInput) (r0 *request.Request, r1 *sagemaker.DescribeWorkforceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkforceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DescribeWorkforceOutput)
	return
}

func (d *SageMakerDouble) DescribeWorkforceWithContext(i0 context.Context, i1 *sagemaker.DescribeWorkforceInput, i2 ...request.Option) (r0 *sagemaker.DescribeWorkforceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkforceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DescribeWorkforceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDescribeWorkforceWithContext(ctx context.Context, in *sagemaker.DescribeWorkforceInput, _ ...request.Option) (*sagemaker.DescribeWorkforceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeWorkforce cancelled", ctx.Err())
	default:
		return d.DescribeWorkforce(in)
	}
}

func (d *SageMakerDouble) DescribeWorkteam(i0 *sagemaker.DescribeWorkteamInput) (r0 *sagemaker.DescribeWorkteamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkteam", i0)
	r0, _ = returns[0].(*sagemaker.DescribeWorkteamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DescribeWorkteamRequest(i0 *sagemaker.DescribeWorkteamInput) (r0 *request.Request, r1 *sagemaker.DescribeWorkteamOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkteamRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DescribeWorkteamOutput)
	return
}

func (d *SageMakerDouble) DescribeWorkteamWithContext(i0 context.Context, i1 *sagemaker.DescribeWorkteamInput, i2 ...request.Option) (r0 *sagemaker.DescribeWorkteamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkteamWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DescribeWorkteamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDescribeWorkteamWithContext(ctx context.Context, in *sagemaker.DescribeWorkteamInput, _ ...request.Option) (*sagemaker.DescribeWorkteamOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeWorkteam cancelled", ctx.Err())
	default:
		return d.DescribeWorkteam(in)
	}
}

func (d *SageMakerDouble) DisassociateTrialComponent(i0 *sagemaker.DisassociateTrialComponentInput) (r0 *sagemaker.DisassociateTrialComponentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateTrialComponent", i0)
	r0, _ = returns[0].(*sagemaker.DisassociateTrialComponentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) DisassociateTrialComponentRequest(i0 *sagemaker.DisassociateTrialComponentInput) (r0 *request.Request, r1 *sagemaker.DisassociateTrialComponentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateTrialComponentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.DisassociateTrialComponentOutput)
	return
}

func (d *SageMakerDouble) DisassociateTrialComponentWithContext(i0 context.Context, i1 *sagemaker.DisassociateTrialComponentInput, i2 ...request.Option) (r0 *sagemaker.DisassociateTrialComponentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateTrialComponentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.DisassociateTrialComponentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeDisassociateTrialComponentWithContext(ctx context.Context, in *sagemaker.DisassociateTrialComponentInput, _ ...request.Option) (*sagemaker.DisassociateTrialComponentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateTrialComponent cancelled", ctx.Err())
	default:
		return d.DisassociateTrialComponent(in)
	}
}

func (d *SageMakerDouble) GetSearchSuggestions(i0 *sagemaker.GetSearchSuggestionsInput) (r0 *sagemaker.GetSearchSuggestionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSearchSuggestions", i0)
	r0, _ = returns[0].(*sagemaker.GetSearchSuggestionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) GetSearchSuggestionsRequest(i0 *sagemaker.GetSearchSuggestionsInput) (r0 *request.Request, r1 *sagemaker.GetSearchSuggestionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSearchSuggestionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.GetSearchSuggestionsOutput)
	return
}

func (d *SageMakerDouble) GetSearchSuggestionsWithContext(i0 context.Context, i1 *sagemaker.GetSearchSuggestionsInput, i2 ...request.Option) (r0 *sagemaker.GetSearchSuggestionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSearchSuggestionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.GetSearchSuggestionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeGetSearchSuggestionsWithContext(ctx context.Context, in *sagemaker.GetSearchSuggestionsInput, _ ...request.Option) (*sagemaker.GetSearchSuggestionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetSearchSuggestions cancelled", ctx.Err())
	default:
		return d.GetSearchSuggestions(in)
	}
}

func (d *SageMakerDouble) ListAlgorithms(i0 *sagemaker.ListAlgorithmsInput) (r0 *sagemaker.ListAlgorithmsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAlgorithms", i0)
	r0, _ = returns[0].(*sagemaker.ListAlgorithmsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) ListAlgorithmsPages(i0 *sagemaker.ListAlgorithmsInput, i1 func(*sagemaker.ListAlgorithmsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAlgorithmsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListAlgorithmsPages(in *sagemaker.ListAlgorithmsInput, pager func(*sagemaker.ListAlgorithmsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListAlgorithms", paginators, in, pager)
}

func (d *SageMakerDouble) ListAlgorithmsPagesWithContext(i0 context.Context, i1 *sagemaker.ListAlgorithmsInput, i2 func(*sagemaker.ListAlgorithmsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAlgorithmsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListAlgorithmsPagesWithContext(ctx context.Context, in *sagemaker.ListAlgorithmsInput, pager func(*sagemaker.ListAlgorithmsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListAlgorithms", paginators, ctx, in, pager, options...)
}

func (d *SageMakerDouble) ListAlgorithmsRequest(i0 *sagemaker.ListAlgorithmsInput) (r0 *request.Request, r1 *sagemaker.ListAlgorithmsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAlgorithmsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.ListAlgorithmsOutput)
	return
}

func (d *SageMakerDouble) ListAlgorithmsWithContext(i0 context.Context, i1 *sagemaker.ListAlgorithmsInput, i2 ...request.Option) (r0 *sagemaker.ListAlgorithmsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAlgorithmsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.ListAlgorithmsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeListAlgorithmsWithContext(ctx context.Context, in *sagemaker.ListAlgorithmsInput, _ ...request.Option) (*sagemaker.ListAlgorithmsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAlgorithms cancelled", ctx.Err())
	default:
		return d.ListAlgorithms(in)
	}
}

func (d *SageMakerDouble) ListApps(i0 *sagemaker.ListAppsInput) (r0 *sagemaker.ListAppsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApps", i0)
	r0, _ = returns[0].(*sagemaker.ListAppsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) ListAppsPages(i0 *sagemaker.ListAppsInput, i1 func(*sagemaker.ListAppsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAppsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListAppsPages(in *sagemaker.ListAppsInput, pager func(*sagemaker.ListAppsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListApps", paginators, in, pager)
}

func (d *SageMakerDouble) ListAppsPagesWithContext(i0 context.Context, i1 *sagemaker.ListAppsInput, i2 func(*sagemaker.ListAppsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAppsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListAppsPagesWithContext(ctx context.Context, in *sagemaker.ListAppsInput, pager func(*sagemaker.ListAppsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListApps", paginators, ctx, in, pager, options...)
}

func (d *SageMakerDouble) ListAppsRequest(i0 *sagemaker.ListAppsInput) (r0 *request.Request, r1 *sagemaker.ListAppsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAppsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.ListAppsOutput)
	return
}

func (d *SageMakerDouble) ListAppsWithContext(i0 context.Context, i1 *sagemaker.ListAppsInput, i2 ...request.Option) (r0 *sagemaker.ListAppsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAppsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.ListAppsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeListAppsWithContext(ctx context.Context, in *sagemaker.ListAppsInput, _ ...request.Option) (*sagemaker.ListAppsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListApps cancelled", ctx.Err())
	default:
		return d.ListApps(in)
	}
}

func (d *SageMakerDouble) ListAutoMLJobs(i0 *sagemaker.ListAutoMLJobsInput) (r0 *sagemaker.ListAutoMLJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAutoMLJobs", i0)
	r0, _ = returns[0].(*sagemaker.ListAutoMLJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) ListAutoMLJobsPages(i0 *sagemaker.ListAutoMLJobsInput, i1 func(*sagemaker.ListAutoMLJobsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAutoMLJobsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListAutoMLJobsPages(in *sagemaker.ListAutoMLJobsInput, pager func(*sagemaker.ListAutoMLJobsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListAutoMLJobs", paginators, in, pager)
}

func (d *SageMakerDouble) ListAutoMLJobsPagesWithContext(i0 context.Context, i1 *sagemaker.ListAutoMLJobsInput, i2 func(*sagemaker.ListAutoMLJobsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAutoMLJobsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListAutoMLJobsPagesWithContext(ctx context.Context, in *sagemaker.ListAutoMLJobsInput, pager func(*sagemaker.ListAutoMLJobsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListAutoMLJobs", paginators, ctx, in, pager, options...)
}

func (d *SageMakerDouble) ListAutoMLJobsRequest(i0 *sagemaker.ListAutoMLJobsInput) (r0 *request.Request, r1 *sagemaker.ListAutoMLJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAutoMLJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.ListAutoMLJobsOutput)
	return
}

func (d *SageMakerDouble) ListAutoMLJobsWithContext(i0 context.Context, i1 *sagemaker.ListAutoMLJobsInput, i2 ...request.Option) (r0 *sagemaker.ListAutoMLJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAutoMLJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.ListAutoMLJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeListAutoMLJobsWithContext(ctx context.Context, in *sagemaker.ListAutoMLJobsInput, _ ...request.Option) (*sagemaker.ListAutoMLJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAutoMLJobs cancelled", ctx.Err())
	default:
		return d.ListAutoMLJobs(in)
	}
}

func (d *SageMakerDouble) ListCandidatesForAutoMLJob(i0 *sagemaker.ListCandidatesForAutoMLJobInput) (r0 *sagemaker.ListCandidatesForAutoMLJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCandidatesForAutoMLJob", i0)
	r0, _ = returns[0].(*sagemaker.ListCandidatesForAutoMLJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) ListCandidatesForAutoMLJobPages(i0 *sagemaker.ListCandidatesForAutoMLJobInput, i1 func(*sagemaker.ListCandidatesForAutoMLJobOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCandidatesForAutoMLJobPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListCandidatesForAutoMLJobPages(in *sagemaker.ListCandidatesForAutoMLJobInput, pager func(*sagemaker.ListCandidatesForAutoMLJobOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListCandidatesForAutoMLJob", paginators, in, pager)
}

func (d *SageMakerDouble) ListCandidatesForAutoMLJobPagesWithContext(i0 context.Context, i1 *sagemaker.ListCandidatesForAutoMLJobInput, i2 func(*sagemaker.ListCandidatesForAutoMLJobOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCandidatesForAutoMLJobPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListCandidatesForAutoMLJobPagesWithContext(ctx context.Context, in *sagemaker.ListCandidatesForAutoMLJobInput, pager func(*sagemaker.ListCandidatesForAutoMLJobOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListCandidatesForAutoMLJob", paginators, ctx, in, pager, options...)
}

func (d *SageMakerDouble) ListCandidatesForAutoMLJobRequest(i0 *sagemaker.ListCandidatesForAutoMLJobInput) (r0 *request.Request, r1 *sagemaker.ListCandidatesForAutoMLJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCandidatesForAutoMLJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.ListCandidatesForAutoMLJobOutput)
	return
}

func (d *SageMakerDouble) ListCandidatesForAutoMLJobWithContext(i0 context.Context, i1 *sagemaker.ListCandidatesForAutoMLJobInput, i2 ...request.Option) (r0 *sagemaker.ListCandidatesForAutoMLJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCandidatesForAutoMLJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.ListCandidatesForAutoMLJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeListCandidatesForAutoMLJobWithContext(ctx context.Context, in *sagemaker.ListCandidatesForAutoMLJobInput, _ ...request.Option) (*sagemaker.ListCandidatesForAutoMLJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListCandidatesForAutoMLJob cancelled", ctx.Err())
	default:
		return d.ListCandidatesForAutoMLJob(in)
	}
}

func (d *SageMakerDouble) ListCodeRepositories(i0 *sagemaker.ListCodeRepositoriesInput) (r0 *sagemaker.ListCodeRepositoriesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCodeRepositories", i0)
	r0, _ = returns[0].(*sagemaker.ListCodeRepositoriesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) ListCodeRepositoriesPages(i0 *sagemaker.ListCodeRepositoriesInput, i1 func(*sagemaker.ListCodeRepositoriesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCodeRepositoriesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListCodeRepositoriesPages(in *sagemaker.ListCodeRepositoriesInput, pager func(*sagemaker.ListCodeRepositoriesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListCodeRepositories", paginators, in, pager)
}

func (d *SageMakerDouble) ListCodeRepositoriesPagesWithContext(i0 context.Context, i1 *sagemaker.ListCodeRepositoriesInput, i2 func(*sagemaker.ListCodeRepositoriesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCodeRepositoriesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListCodeRepositoriesPagesWithContext(ctx context.Context, in *sagemaker.ListCodeRepositoriesInput, pager func(*sagemaker.ListCodeRepositoriesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListCodeRepositories", paginators, ctx, in, pager, options...)
}

func (d *SageMakerDouble) ListCodeRepositoriesRequest(i0 *sagemaker.ListCodeRepositoriesInput) (r0 *request.Request, r1 *sagemaker.ListCodeRepositoriesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCodeRepositoriesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.ListCodeRepositoriesOutput)
	return
}

func (d *SageMakerDouble) ListCodeRepositoriesWithContext(i0 context.Context, i1 *sagemaker.ListCodeRepositoriesInput, i2 ...request.Option) (r0 *sagemaker.ListCodeRepositoriesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCodeRepositoriesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.ListCodeRepositoriesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeListCodeRepositoriesWithContext(ctx context.Context, in *sagemaker.ListCodeRepositoriesInput, _ ...request.Option) (*sagemaker.ListCodeRepositoriesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListCodeRepositories cancelled", ctx.Err())
	default:
		return d.ListCodeRepositories(in)
	}
}

func (d *SageMakerDouble) ListCompilationJobs(i0 *sagemaker.ListCompilationJobsInput) (r0 *sagemaker.ListCompilationJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCompilationJobs", i0)
	r0, _ = returns[0].(*sagemaker.ListCompilationJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) ListCompilationJobsPages(i0 *sagemaker.ListCompilationJobsInput, i1 func(*sagemaker.ListCompilationJobsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCompilationJobsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListCompilationJobsPages(in *sagemaker.ListCompilationJobsInput, pager func(*sagemaker.ListCompilationJobsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListCompilationJobs", paginators, in, pager)
}

func (d *SageMakerDouble) ListCompilationJobsPagesWithContext(i0 context.Context, i1 *sagemaker.ListCompilationJobsInput, i2 func(*sagemaker.ListCompilationJobsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCompilationJobsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListCompilationJobsPagesWithContext(ctx context.Context, in *sagemaker.ListCompilationJobsInput, pager func(*sagemaker.ListCompilationJobsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListCompilationJobs", paginators, ctx, in, pager, options...)
}

func (d *SageMakerDouble) ListCompilationJobsRequest(i0 *sagemaker.ListCompilationJobsInput) (r0 *request.Request, r1 *sagemaker.ListCompilationJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCompilationJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.ListCompilationJobsOutput)
	return
}

func (d *SageMakerDouble) ListCompilationJobsWithContext(i0 context.Context, i1 *sagemaker.ListCompilationJobsInput, i2 ...request.Option) (r0 *sagemaker.ListCompilationJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCompilationJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.ListCompilationJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeListCompilationJobsWithContext(ctx context.Context, in *sagemaker.ListCompilationJobsInput, _ ...request.Option) (*sagemaker.ListCompilationJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListCompilationJobs cancelled", ctx.Err())
	default:
		return d.ListCompilationJobs(in)
	}
}

func (d *SageMakerDouble) ListDomains(i0 *sagemaker.ListDomainsInput) (r0 *sagemaker.ListDomainsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDomains", i0)
	r0, _ = returns[0].(*sagemaker.ListDomainsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) ListDomainsPages(i0 *sagemaker.ListDomainsInput, i1 func(*sagemaker.ListDomainsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDomainsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListDomainsPages(in *sagemaker.ListDomainsInput, pager func(*sagemaker.ListDomainsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListDomains", paginators, in, pager)
}

func (d *SageMakerDouble) ListDomainsPagesWithContext(i0 context.Context, i1 *sagemaker.ListDomainsInput, i2 func(*sagemaker.ListDomainsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDomainsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListDomainsPagesWithContext(ctx context.Context, in *sagemaker.ListDomainsInput, pager func(*sagemaker.ListDomainsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListDomains", paginators, ctx, in, pager, options...)
}

func (d *SageMakerDouble) ListDomainsRequest(i0 *sagemaker.ListDomainsInput) (r0 *request.Request, r1 *sagemaker.ListDomainsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDomainsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.ListDomainsOutput)
	return
}

func (d *SageMakerDouble) ListDomainsWithContext(i0 context.Context, i1 *sagemaker.ListDomainsInput, i2 ...request.Option) (r0 *sagemaker.ListDomainsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDomainsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.ListDomainsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeListDomainsWithContext(ctx context.Context, in *sagemaker.ListDomainsInput, _ ...request.Option) (*sagemaker.ListDomainsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDomains cancelled", ctx.Err())
	default:
		return d.ListDomains(in)
	}
}

func (d *SageMakerDouble) ListEndpointConfigs(i0 *sagemaker.ListEndpointConfigsInput) (r0 *sagemaker.ListEndpointConfigsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEndpointConfigs", i0)
	r0, _ = returns[0].(*sagemaker.ListEndpointConfigsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) ListEndpointConfigsPages(i0 *sagemaker.ListEndpointConfigsInput, i1 func(*sagemaker.ListEndpointConfigsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEndpointConfigsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListEndpointConfigsPages(in *sagemaker.ListEndpointConfigsInput, pager func(*sagemaker.ListEndpointConfigsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListEndpointConfigs", paginators, in, pager)
}

func (d *SageMakerDouble) ListEndpointConfigsPagesWithContext(i0 context.Context, i1 *sagemaker.ListEndpointConfigsInput, i2 func(*sagemaker.ListEndpointConfigsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEndpointConfigsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListEndpointConfigsPagesWithContext(ctx context.Context, in *sagemaker.ListEndpointConfigsInput, pager func(*sagemaker.ListEndpointConfigsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListEndpointConfigs", paginators, ctx, in, pager, options...)
}

func (d *SageMakerDouble) ListEndpointConfigsRequest(i0 *sagemaker.ListEndpointConfigsInput) (r0 *request.Request, r1 *sagemaker.ListEndpointConfigsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEndpointConfigsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.ListEndpointConfigsOutput)
	return
}

func (d *SageMakerDouble) ListEndpointConfigsWithContext(i0 context.Context, i1 *sagemaker.ListEndpointConfigsInput, i2 ...request.Option) (r0 *sagemaker.ListEndpointConfigsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEndpointConfigsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.ListEndpointConfigsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeListEndpointConfigsWithContext(ctx context.Context, in *sagemaker.ListEndpointConfigsInput, _ ...request.Option) (*sagemaker.ListEndpointConfigsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListEndpointConfigs cancelled", ctx.Err())
	default:
		return d.ListEndpointConfigs(in)
	}
}

func (d *SageMakerDouble) ListEndpoints(i0 *sagemaker.ListEndpointsInput) (r0 *sagemaker.ListEndpointsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEndpoints", i0)
	r0, _ = returns[0].(*sagemaker.ListEndpointsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) ListEndpointsPages(i0 *sagemaker.ListEndpointsInput, i1 func(*sagemaker.ListEndpointsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEndpointsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListEndpointsPages(in *sagemaker.ListEndpointsInput, pager func(*sagemaker.ListEndpointsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListEndpoints", paginators, in, pager)
}

func (d *SageMakerDouble) ListEndpointsPagesWithContext(i0 context.Context, i1 *sagemaker.ListEndpointsInput, i2 func(*sagemaker.ListEndpointsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEndpointsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListEndpointsPagesWithContext(ctx context.Context, in *sagemaker.ListEndpointsInput, pager func(*sagemaker.ListEndpointsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListEndpoints", paginators, ctx, in, pager, options...)
}

func (d *SageMakerDouble) ListEndpointsRequest(i0 *sagemaker.ListEndpointsInput) (r0 *request.Request, r1 *sagemaker.ListEndpointsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEndpointsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.ListEndpointsOutput)
	return
}

func (d *SageMakerDouble) ListEndpointsWithContext(i0 context.Context, i1 *sagemaker.ListEndpointsInput, i2 ...request.Option) (r0 *sagemaker.ListEndpointsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEndpointsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.ListEndpointsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeListEndpointsWithContext(ctx context.Context, in *sagemaker.ListEndpointsInput, _ ...request.Option) (*sagemaker.ListEndpointsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListEndpoints cancelled", ctx.Err())
	default:
		return d.ListEndpoints(in)
	}
}

func (d *SageMakerDouble) ListExperiments(i0 *sagemaker.ListExperimentsInput) (r0 *sagemaker.ListExperimentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListExperiments", i0)
	r0, _ = returns[0].(*sagemaker.ListExperimentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) ListExperimentsPages(i0 *sagemaker.ListExperimentsInput, i1 func(*sagemaker.ListExperimentsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListExperimentsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListExperimentsPages(in *sagemaker.ListExperimentsInput, pager func(*sagemaker.ListExperimentsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListExperiments", paginators, in, pager)
}

func (d *SageMakerDouble) ListExperimentsPagesWithContext(i0 context.Context, i1 *sagemaker.ListExperimentsInput, i2 func(*sagemaker.ListExperimentsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListExperimentsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListExperimentsPagesWithContext(ctx context.Context, in *sagemaker.ListExperimentsInput, pager func(*sagemaker.ListExperimentsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListExperiments", paginators, ctx, in, pager, options...)
}

func (d *SageMakerDouble) ListExperimentsRequest(i0 *sagemaker.ListExperimentsInput) (r0 *request.Request, r1 *sagemaker.ListExperimentsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListExperimentsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.ListExperimentsOutput)
	return
}

func (d *SageMakerDouble) ListExperimentsWithContext(i0 context.Context, i1 *sagemaker.ListExperimentsInput, i2 ...request.Option) (r0 *sagemaker.ListExperimentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListExperimentsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.ListExperimentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeListExperimentsWithContext(ctx context.Context, in *sagemaker.ListExperimentsInput, _ ...request.Option) (*sagemaker.ListExperimentsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListExperiments cancelled", ctx.Err())
	default:
		return d.ListExperiments(in)
	}
}

func (d *SageMakerDouble) ListFlowDefinitions(i0 *sagemaker.ListFlowDefinitionsInput) (r0 *sagemaker.ListFlowDefinitionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFlowDefinitions", i0)
	r0, _ = returns[0].(*sagemaker.ListFlowDefinitionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) ListFlowDefinitionsPages(i0 *sagemaker.ListFlowDefinitionsInput, i1 func(*sagemaker.ListFlowDefinitionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFlowDefinitionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListFlowDefinitionsPages(in *sagemaker.ListFlowDefinitionsInput, pager func(*sagemaker.ListFlowDefinitionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListFlowDefinitions", paginators, in, pager)
}

func (d *SageMakerDouble) ListFlowDefinitionsPagesWithContext(i0 context.Context, i1 *sagemaker.ListFlowDefinitionsInput, i2 func(*sagemaker.ListFlowDefinitionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFlowDefinitionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListFlowDefinitionsPagesWithContext(ctx context.Context, in *sagemaker.ListFlowDefinitionsInput, pager func(*sagemaker.ListFlowDefinitionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListFlowDefinitions", paginators, ctx, in, pager, options...)
}

func (d *SageMakerDouble) ListFlowDefinitionsRequest(i0 *sagemaker.ListFlowDefinitionsInput) (r0 *request.Request, r1 *sagemaker.ListFlowDefinitionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFlowDefinitionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.ListFlowDefinitionsOutput)
	return
}

func (d *SageMakerDouble) ListFlowDefinitionsWithContext(i0 context.Context, i1 *sagemaker.ListFlowDefinitionsInput, i2 ...request.Option) (r0 *sagemaker.ListFlowDefinitionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFlowDefinitionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.ListFlowDefinitionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeListFlowDefinitionsWithContext(ctx context.Context, in *sagemaker.ListFlowDefinitionsInput, _ ...request.Option) (*sagemaker.ListFlowDefinitionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListFlowDefinitions cancelled", ctx.Err())
	default:
		return d.ListFlowDefinitions(in)
	}
}

func (d *SageMakerDouble) ListHumanTaskUis(i0 *sagemaker.ListHumanTaskUisInput) (r0 *sagemaker.ListHumanTaskUisOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHumanTaskUis", i0)
	r0, _ = returns[0].(*sagemaker.ListHumanTaskUisOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) ListHumanTaskUisPages(i0 *sagemaker.ListHumanTaskUisInput, i1 func(*sagemaker.ListHumanTaskUisOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHumanTaskUisPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListHumanTaskUisPages(in *sagemaker.ListHumanTaskUisInput, pager func(*sagemaker.ListHumanTaskUisOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListHumanTaskUis", paginators, in, pager)
}

func (d *SageMakerDouble) ListHumanTaskUisPagesWithContext(i0 context.Context, i1 *sagemaker.ListHumanTaskUisInput, i2 func(*sagemaker.ListHumanTaskUisOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHumanTaskUisPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListHumanTaskUisPagesWithContext(ctx context.Context, in *sagemaker.ListHumanTaskUisInput, pager func(*sagemaker.ListHumanTaskUisOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListHumanTaskUis", paginators, ctx, in, pager, options...)
}

func (d *SageMakerDouble) ListHumanTaskUisRequest(i0 *sagemaker.ListHumanTaskUisInput) (r0 *request.Request, r1 *sagemaker.ListHumanTaskUisOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHumanTaskUisRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.ListHumanTaskUisOutput)
	return
}

func (d *SageMakerDouble) ListHumanTaskUisWithContext(i0 context.Context, i1 *sagemaker.ListHumanTaskUisInput, i2 ...request.Option) (r0 *sagemaker.ListHumanTaskUisOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHumanTaskUisWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.ListHumanTaskUisOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeListHumanTaskUisWithContext(ctx context.Context, in *sagemaker.ListHumanTaskUisInput, _ ...request.Option) (*sagemaker.ListHumanTaskUisOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListHumanTaskUis cancelled", ctx.Err())
	default:
		return d.ListHumanTaskUis(in)
	}
}

func (d *SageMakerDouble) ListHyperParameterTuningJobs(i0 *sagemaker.ListHyperParameterTuningJobsInput) (r0 *sagemaker.ListHyperParameterTuningJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHyperParameterTuningJobs", i0)
	r0, _ = returns[0].(*sagemaker.ListHyperParameterTuningJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) ListHyperParameterTuningJobsPages(i0 *sagemaker.ListHyperParameterTuningJobsInput, i1 func(*sagemaker.ListHyperParameterTuningJobsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHyperParameterTuningJobsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListHyperParameterTuningJobsPages(in *sagemaker.ListHyperParameterTuningJobsInput, pager func(*sagemaker.ListHyperParameterTuningJobsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListHyperParameterTuningJobs", paginators, in, pager)
}

func (d *SageMakerDouble) ListHyperParameterTuningJobsPagesWithContext(i0 context.Context, i1 *sagemaker.ListHyperParameterTuningJobsInput, i2 func(*sagemaker.ListHyperParameterTuningJobsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHyperParameterTuningJobsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListHyperParameterTuningJobsPagesWithContext(ctx context.Context, in *sagemaker.ListHyperParameterTuningJobsInput, pager func(*sagemaker.ListHyperParameterTuningJobsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListHyperParameterTuningJobs", paginators, ctx, in, pager, options...)
}

func (d *SageMakerDouble) ListHyperParameterTuningJobsRequest(i0 *sagemaker.ListHyperParameterTuningJobsInput) (r0 *request.Request, r1 *sagemaker.ListHyperParameterTuningJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHyperParameterTuningJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.ListHyperParameterTuningJobsOutput)
	return
}

func (d *SageMakerDouble) ListHyperParameterTuningJobsWithContext(i0 context.Context, i1 *sagemaker.ListHyperParameterTuningJobsInput, i2 ...request.Option) (r0 *sagemaker.ListHyperParameterTuningJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHyperParameterTuningJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.ListHyperParameterTuningJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeListHyperParameterTuningJobsWithContext(ctx context.Context, in *sagemaker.ListHyperParameterTuningJobsInput, _ ...request.Option) (*sagemaker.ListHyperParameterTuningJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListHyperParameterTuningJobs cancelled", ctx.Err())
	default:
		return d.ListHyperParameterTuningJobs(in)
	}
}

func (d *SageMakerDouble) ListLabelingJobs(i0 *sagemaker.ListLabelingJobsInput) (r0 *sagemaker.ListLabelingJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLabelingJobs", i0)
	r0, _ = returns[0].(*sagemaker.ListLabelingJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) ListLabelingJobsForWorkteam(i0 *sagemaker.ListLabelingJobsForWorkteamInput) (r0 *sagemaker.ListLabelingJobsForWorkteamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLabelingJobsForWorkteam", i0)
	r0, _ = returns[0].(*sagemaker.ListLabelingJobsForWorkteamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) ListLabelingJobsForWorkteamPages(i0 *sagemaker.ListLabelingJobsForWorkteamInput, i1 func(*sagemaker.ListLabelingJobsForWorkteamOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLabelingJobsForWorkteamPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListLabelingJobsForWorkteamPages(in *sagemaker.ListLabelingJobsForWorkteamInput, pager func(*sagemaker.ListLabelingJobsForWorkteamOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListLabelingJobsForWorkteam", paginators, in, pager)
}

func (d *SageMakerDouble) ListLabelingJobsForWorkteamPagesWithContext(i0 context.Context, i1 *sagemaker.ListLabelingJobsForWorkteamInput, i2 func(*sagemaker.ListLabelingJobsForWorkteamOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLabelingJobsForWorkteamPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListLabelingJobsForWorkteamPagesWithContext(ctx context.Context, in *sagemaker.ListLabelingJobsForWorkteamInput, pager func(*sagemaker.ListLabelingJobsForWorkteamOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListLabelingJobsForWorkteam", paginators, ctx, in, pager, options...)
}

func (d *SageMakerDouble) ListLabelingJobsForWorkteamRequest(i0 *sagemaker.ListLabelingJobsForWorkteamInput) (r0 *request.Request, r1 *sagemaker.ListLabelingJobsForWorkteamOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLabelingJobsForWorkteamRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.ListLabelingJobsForWorkteamOutput)
	return
}

func (d *SageMakerDouble) ListLabelingJobsForWorkteamWithContext(i0 context.Context, i1 *sagemaker.ListLabelingJobsForWorkteamInput, i2 ...request.Option) (r0 *sagemaker.ListLabelingJobsForWorkteamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLabelingJobsForWorkteamWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.ListLabelingJobsForWorkteamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeListLabelingJobsForWorkteamWithContext(ctx context.Context, in *sagemaker.ListLabelingJobsForWorkteamInput, _ ...request.Option) (*sagemaker.ListLabelingJobsForWorkteamOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListLabelingJobsForWorkteam cancelled", ctx.Err())
	default:
		return d.ListLabelingJobsForWorkteam(in)
	}
}

func (d *SageMakerDouble) ListLabelingJobsPages(i0 *sagemaker.ListLabelingJobsInput, i1 func(*sagemaker.ListLabelingJobsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLabelingJobsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListLabelingJobsPages(in *sagemaker.ListLabelingJobsInput, pager func(*sagemaker.ListLabelingJobsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListLabelingJobs", paginators, in, pager)
}

func (d *SageMakerDouble) ListLabelingJobsPagesWithContext(i0 context.Context, i1 *sagemaker.ListLabelingJobsInput, i2 func(*sagemaker.ListLabelingJobsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLabelingJobsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListLabelingJobsPagesWithContext(ctx context.Context, in *sagemaker.ListLabelingJobsInput, pager func(*sagemaker.ListLabelingJobsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListLabelingJobs", paginators, ctx, in, pager, options...)
}

func (d *SageMakerDouble) ListLabelingJobsRequest(i0 *sagemaker.ListLabelingJobsInput) (r0 *request.Request, r1 *sagemaker.ListLabelingJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLabelingJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.ListLabelingJobsOutput)
	return
}

func (d *SageMakerDouble) ListLabelingJobsWithContext(i0 context.Context, i1 *sagemaker.ListLabelingJobsInput, i2 ...request.Option) (r0 *sagemaker.ListLabelingJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLabelingJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.ListLabelingJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeListLabelingJobsWithContext(ctx context.Context, in *sagemaker.ListLabelingJobsInput, _ ...request.Option) (*sagemaker.ListLabelingJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListLabelingJobs cancelled", ctx.Err())
	default:
		return d.ListLabelingJobs(in)
	}
}

func (d *SageMakerDouble) ListModelPackages(i0 *sagemaker.ListModelPackagesInput) (r0 *sagemaker.ListModelPackagesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListModelPackages", i0)
	r0, _ = returns[0].(*sagemaker.ListModelPackagesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) ListModelPackagesPages(i0 *sagemaker.ListModelPackagesInput, i1 func(*sagemaker.ListModelPackagesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListModelPackagesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListModelPackagesPages(in *sagemaker.ListModelPackagesInput, pager func(*sagemaker.ListModelPackagesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListModelPackages", paginators, in, pager)
}

func (d *SageMakerDouble) ListModelPackagesPagesWithContext(i0 context.Context, i1 *sagemaker.ListModelPackagesInput, i2 func(*sagemaker.ListModelPackagesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListModelPackagesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListModelPackagesPagesWithContext(ctx context.Context, in *sagemaker.ListModelPackagesInput, pager func(*sagemaker.ListModelPackagesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListModelPackages", paginators, ctx, in, pager, options...)
}

func (d *SageMakerDouble) ListModelPackagesRequest(i0 *sagemaker.ListModelPackagesInput) (r0 *request.Request, r1 *sagemaker.ListModelPackagesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListModelPackagesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.ListModelPackagesOutput)
	return
}

func (d *SageMakerDouble) ListModelPackagesWithContext(i0 context.Context, i1 *sagemaker.ListModelPackagesInput, i2 ...request.Option) (r0 *sagemaker.ListModelPackagesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListModelPackagesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.ListModelPackagesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeListModelPackagesWithContext(ctx context.Context, in *sagemaker.ListModelPackagesInput, _ ...request.Option) (*sagemaker.ListModelPackagesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListModelPackages cancelled", ctx.Err())
	default:
		return d.ListModelPackages(in)
	}
}

func (d *SageMakerDouble) ListModels(i0 *sagemaker.ListModelsInput) (r0 *sagemaker.ListModelsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListModels", i0)
	r0, _ = returns[0].(*sagemaker.ListModelsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) ListModelsPages(i0 *sagemaker.ListModelsInput, i1 func(*sagemaker.ListModelsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListModelsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListModelsPages(in *sagemaker.ListModelsInput, pager func(*sagemaker.ListModelsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListModels", paginators, in, pager)
}

func (d *SageMakerDouble) ListModelsPagesWithContext(i0 context.Context, i1 *sagemaker.ListModelsInput, i2 func(*sagemaker.ListModelsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListModelsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListModelsPagesWithContext(ctx context.Context, in *sagemaker.ListModelsInput, pager func(*sagemaker.ListModelsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListModels", paginators, ctx, in, pager, options...)
}

func (d *SageMakerDouble) ListModelsRequest(i0 *sagemaker.ListModelsInput) (r0 *request.Request, r1 *sagemaker.ListModelsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListModelsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.ListModelsOutput)
	return
}

func (d *SageMakerDouble) ListModelsWithContext(i0 context.Context, i1 *sagemaker.ListModelsInput, i2 ...request.Option) (r0 *sagemaker.ListModelsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListModelsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.ListModelsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeListModelsWithContext(ctx context.Context, in *sagemaker.ListModelsInput, _ ...request.Option) (*sagemaker.ListModelsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListModels cancelled", ctx.Err())
	default:
		return d.ListModels(in)
	}
}

func (d *SageMakerDouble) ListMonitoringExecutions(i0 *sagemaker.ListMonitoringExecutionsInput) (r0 *sagemaker.ListMonitoringExecutionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMonitoringExecutions", i0)
	r0, _ = returns[0].(*sagemaker.ListMonitoringExecutionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) ListMonitoringExecutionsPages(i0 *sagemaker.ListMonitoringExecutionsInput, i1 func(*sagemaker.ListMonitoringExecutionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMonitoringExecutionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListMonitoringExecutionsPages(in *sagemaker.ListMonitoringExecutionsInput, pager func(*sagemaker.ListMonitoringExecutionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListMonitoringExecutions", paginators, in, pager)
}

func (d *SageMakerDouble) ListMonitoringExecutionsPagesWithContext(i0 context.Context, i1 *sagemaker.ListMonitoringExecutionsInput, i2 func(*sagemaker.ListMonitoringExecutionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMonitoringExecutionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListMonitoringExecutionsPagesWithContext(ctx context.Context, in *sagemaker.ListMonitoringExecutionsInput, pager func(*sagemaker.ListMonitoringExecutionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListMonitoringExecutions", paginators, ctx, in, pager, options...)
}

func (d *SageMakerDouble) ListMonitoringExecutionsRequest(i0 *sagemaker.ListMonitoringExecutionsInput) (r0 *request.Request, r1 *sagemaker.ListMonitoringExecutionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMonitoringExecutionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.ListMonitoringExecutionsOutput)
	return
}

func (d *SageMakerDouble) ListMonitoringExecutionsWithContext(i0 context.Context, i1 *sagemaker.ListMonitoringExecutionsInput, i2 ...request.Option) (r0 *sagemaker.ListMonitoringExecutionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMonitoringExecutionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.ListMonitoringExecutionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeListMonitoringExecutionsWithContext(ctx context.Context, in *sagemaker.ListMonitoringExecutionsInput, _ ...request.Option) (*sagemaker.ListMonitoringExecutionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListMonitoringExecutions cancelled", ctx.Err())
	default:
		return d.ListMonitoringExecutions(in)
	}
}

func (d *SageMakerDouble) ListMonitoringSchedules(i0 *sagemaker.ListMonitoringSchedulesInput) (r0 *sagemaker.ListMonitoringSchedulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMonitoringSchedules", i0)
	r0, _ = returns[0].(*sagemaker.ListMonitoringSchedulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) ListMonitoringSchedulesPages(i0 *sagemaker.ListMonitoringSchedulesInput, i1 func(*sagemaker.ListMonitoringSchedulesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMonitoringSchedulesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListMonitoringSchedulesPages(in *sagemaker.ListMonitoringSchedulesInput, pager func(*sagemaker.ListMonitoringSchedulesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListMonitoringSchedules", paginators, in, pager)
}

func (d *SageMakerDouble) ListMonitoringSchedulesPagesWithContext(i0 context.Context, i1 *sagemaker.ListMonitoringSchedulesInput, i2 func(*sagemaker.ListMonitoringSchedulesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMonitoringSchedulesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListMonitoringSchedulesPagesWithContext(ctx context.Context, in *sagemaker.ListMonitoringSchedulesInput, pager func(*sagemaker.ListMonitoringSchedulesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListMonitoringSchedules", paginators, ctx, in, pager, options...)
}

func (d *SageMakerDouble) ListMonitoringSchedulesRequest(i0 *sagemaker.ListMonitoringSchedulesInput) (r0 *request.Request, r1 *sagemaker.ListMonitoringSchedulesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMonitoringSchedulesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.ListMonitoringSchedulesOutput)
	return
}

func (d *SageMakerDouble) ListMonitoringSchedulesWithContext(i0 context.Context, i1 *sagemaker.ListMonitoringSchedulesInput, i2 ...request.Option) (r0 *sagemaker.ListMonitoringSchedulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMonitoringSchedulesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.ListMonitoringSchedulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeListMonitoringSchedulesWithContext(ctx context.Context, in *sagemaker.ListMonitoringSchedulesInput, _ ...request.Option) (*sagemaker.ListMonitoringSchedulesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListMonitoringSchedules cancelled", ctx.Err())
	default:
		return d.ListMonitoringSchedules(in)
	}
}

func (d *SageMakerDouble) ListNotebookInstanceLifecycleConfigs(i0 *sagemaker.ListNotebookInstanceLifecycleConfigsInput) (r0 *sagemaker.ListNotebookInstanceLifecycleConfigsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListNotebookInstanceLifecycleConfigs", i0)
	r0, _ = returns[0].(*sagemaker.ListNotebookInstanceLifecycleConfigsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) ListNotebookInstanceLifecycleConfigsPages(i0 *sagemaker.ListNotebookInstanceLifecycleConfigsInput, i1 func(*sagemaker.ListNotebookInstanceLifecycleConfigsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListNotebookInstanceLifecycleConfigsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListNotebookInstanceLifecycleConfigsPages(in *sagemaker.ListNotebookInstanceLifecycleConfigsInput, pager func(*sagemaker.ListNotebookInstanceLifecycleConfigsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListNotebookInstanceLifecycleConfigs", paginators, in, pager)
}

func (d *SageMakerDouble) ListNotebookInstanceLifecycleConfigsPagesWithContext(i0 context.Context, i1 *sagemaker.ListNotebookInstanceLifecycleConfigsInput, i2 func(*sagemaker.ListNotebookInstanceLifecycleConfigsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListNotebookInstanceLifecycleConfigsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListNotebookInstanceLifecycleConfigsPagesWithContext(ctx context.Context, in *sagemaker.ListNotebookInstanceLifecycleConfigsInput, pager func(*sagemaker.ListNotebookInstanceLifecycleConfigsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListNotebookInstanceLifecycleConfigs", paginators, ctx, in, pager, options...)
}

func (d *SageMakerDouble) ListNotebookInstanceLifecycleConfigsRequest(i0 *sagemaker.ListNotebookInstanceLifecycleConfigsInput) (r0 *request.Request, r1 *sagemaker.ListNotebookInstanceLifecycleConfigsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListNotebookInstanceLifecycleConfigsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.ListNotebookInstanceLifecycleConfigsOutput)
	return
}

func (d *SageMakerDouble) ListNotebookInstanceLifecycleConfigsWithContext(i0 context.Context, i1 *sagemaker.ListNotebookInstanceLifecycleConfigsInput, i2 ...request.Option) (r0 *sagemaker.ListNotebookInstanceLifecycleConfigsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListNotebookInstanceLifecycleConfigsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.ListNotebookInstanceLifecycleConfigsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeListNotebookInstanceLifecycleConfigsWithContext(ctx context.Context, in *sagemaker.ListNotebookInstanceLifecycleConfigsInput, _ ...request.Option) (*sagemaker.ListNotebookInstanceLifecycleConfigsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListNotebookInstanceLifecycleConfigs cancelled", ctx.Err())
	default:
		return d.ListNotebookInstanceLifecycleConfigs(in)
	}
}

func (d *SageMakerDouble) ListNotebookInstances(i0 *sagemaker.ListNotebookInstancesInput) (r0 *sagemaker.ListNotebookInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListNotebookInstances", i0)
	r0, _ = returns[0].(*sagemaker.ListNotebookInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) ListNotebookInstancesPages(i0 *sagemaker.ListNotebookInstancesInput, i1 func(*sagemaker.ListNotebookInstancesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListNotebookInstancesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListNotebookInstancesPages(in *sagemaker.ListNotebookInstancesInput, pager func(*sagemaker.ListNotebookInstancesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListNotebookInstances", paginators, in, pager)
}

func (d *SageMakerDouble) ListNotebookInstancesPagesWithContext(i0 context.Context, i1 *sagemaker.ListNotebookInstancesInput, i2 func(*sagemaker.ListNotebookInstancesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListNotebookInstancesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListNotebookInstancesPagesWithContext(ctx context.Context, in *sagemaker.ListNotebookInstancesInput, pager func(*sagemaker.ListNotebookInstancesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListNotebookInstances", paginators, ctx, in, pager, options...)
}

func (d *SageMakerDouble) ListNotebookInstancesRequest(i0 *sagemaker.ListNotebookInstancesInput) (r0 *request.Request, r1 *sagemaker.ListNotebookInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListNotebookInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.ListNotebookInstancesOutput)
	return
}

func (d *SageMakerDouble) ListNotebookInstancesWithContext(i0 context.Context, i1 *sagemaker.ListNotebookInstancesInput, i2 ...request.Option) (r0 *sagemaker.ListNotebookInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListNotebookInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.ListNotebookInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeListNotebookInstancesWithContext(ctx context.Context, in *sagemaker.ListNotebookInstancesInput, _ ...request.Option) (*sagemaker.ListNotebookInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListNotebookInstances cancelled", ctx.Err())
	default:
		return d.ListNotebookInstances(in)
	}
}

func (d *SageMakerDouble) ListProcessingJobs(i0 *sagemaker.ListProcessingJobsInput) (r0 *sagemaker.ListProcessingJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProcessingJobs", i0)
	r0, _ = returns[0].(*sagemaker.ListProcessingJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) ListProcessingJobsPages(i0 *sagemaker.ListProcessingJobsInput, i1 func(*sagemaker.ListProcessingJobsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProcessingJobsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListProcessingJobsPages(in *sagemaker.ListProcessingJobsInput, pager func(*sagemaker.ListProcessingJobsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListProcessingJobs", paginators, in, pager)
}

func (d *SageMakerDouble) ListProcessingJobsPagesWithContext(i0 context.Context, i1 *sagemaker.ListProcessingJobsInput, i2 func(*sagemaker.ListProcessingJobsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProcessingJobsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListProcessingJobsPagesWithContext(ctx context.Context, in *sagemaker.ListProcessingJobsInput, pager func(*sagemaker.ListProcessingJobsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListProcessingJobs", paginators, ctx, in, pager, options...)
}

func (d *SageMakerDouble) ListProcessingJobsRequest(i0 *sagemaker.ListProcessingJobsInput) (r0 *request.Request, r1 *sagemaker.ListProcessingJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProcessingJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.ListProcessingJobsOutput)
	return
}

func (d *SageMakerDouble) ListProcessingJobsWithContext(i0 context.Context, i1 *sagemaker.ListProcessingJobsInput, i2 ...request.Option) (r0 *sagemaker.ListProcessingJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProcessingJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.ListProcessingJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeListProcessingJobsWithContext(ctx context.Context, in *sagemaker.ListProcessingJobsInput, _ ...request.Option) (*sagemaker.ListProcessingJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListProcessingJobs cancelled", ctx.Err())
	default:
		return d.ListProcessingJobs(in)
	}
}

func (d *SageMakerDouble) ListSubscribedWorkteams(i0 *sagemaker.ListSubscribedWorkteamsInput) (r0 *sagemaker.ListSubscribedWorkteamsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSubscribedWorkteams", i0)
	r0, _ = returns[0].(*sagemaker.ListSubscribedWorkteamsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) ListSubscribedWorkteamsPages(i0 *sagemaker.ListSubscribedWorkteamsInput, i1 func(*sagemaker.ListSubscribedWorkteamsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSubscribedWorkteamsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListSubscribedWorkteamsPages(in *sagemaker.ListSubscribedWorkteamsInput, pager func(*sagemaker.ListSubscribedWorkteamsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListSubscribedWorkteams", paginators, in, pager)
}

func (d *SageMakerDouble) ListSubscribedWorkteamsPagesWithContext(i0 context.Context, i1 *sagemaker.ListSubscribedWorkteamsInput, i2 func(*sagemaker.ListSubscribedWorkteamsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSubscribedWorkteamsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListSubscribedWorkteamsPagesWithContext(ctx context.Context, in *sagemaker.ListSubscribedWorkteamsInput, pager func(*sagemaker.ListSubscribedWorkteamsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListSubscribedWorkteams", paginators, ctx, in, pager, options...)
}

func (d *SageMakerDouble) ListSubscribedWorkteamsRequest(i0 *sagemaker.ListSubscribedWorkteamsInput) (r0 *request.Request, r1 *sagemaker.ListSubscribedWorkteamsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSubscribedWorkteamsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.ListSubscribedWorkteamsOutput)
	return
}

func (d *SageMakerDouble) ListSubscribedWorkteamsWithContext(i0 context.Context, i1 *sagemaker.ListSubscribedWorkteamsInput, i2 ...request.Option) (r0 *sagemaker.ListSubscribedWorkteamsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSubscribedWorkteamsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.ListSubscribedWorkteamsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeListSubscribedWorkteamsWithContext(ctx context.Context, in *sagemaker.ListSubscribedWorkteamsInput, _ ...request.Option) (*sagemaker.ListSubscribedWorkteamsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListSubscribedWorkteams cancelled", ctx.Err())
	default:
		return d.ListSubscribedWorkteams(in)
	}
}

func (d *SageMakerDouble) ListTags(i0 *sagemaker.ListTagsInput) (r0 *sagemaker.ListTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTags", i0)
	r0, _ = returns[0].(*sagemaker.ListTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) ListTagsPages(i0 *sagemaker.ListTagsInput, i1 func(*sagemaker.ListTagsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListTagsPages(in *sagemaker.ListTagsInput, pager func(*sagemaker.ListTagsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTags", paginators, in, pager)
}

func (d *SageMakerDouble) ListTagsPagesWithContext(i0 context.Context, i1 *sagemaker.ListTagsInput, i2 func(*sagemaker.ListTagsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListTagsPagesWithContext(ctx context.Context, in *sagemaker.ListTagsInput, pager func(*sagemaker.ListTagsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTags", paginators, ctx, in, pager, options...)
}

func (d *SageMakerDouble) ListTagsRequest(i0 *sagemaker.ListTagsInput) (r0 *request.Request, r1 *sagemaker.ListTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.ListTagsOutput)
	return
}

func (d *SageMakerDouble) ListTagsWithContext(i0 context.Context, i1 *sagemaker.ListTagsInput, i2 ...request.Option) (r0 *sagemaker.ListTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.ListTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeListTagsWithContext(ctx context.Context, in *sagemaker.ListTagsInput, _ ...request.Option) (*sagemaker.ListTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTags cancelled", ctx.Err())
	default:
		return d.ListTags(in)
	}
}

func (d *SageMakerDouble) ListTrainingJobs(i0 *sagemaker.ListTrainingJobsInput) (r0 *sagemaker.ListTrainingJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrainingJobs", i0)
	r0, _ = returns[0].(*sagemaker.ListTrainingJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) ListTrainingJobsForHyperParameterTuningJob(i0 *sagemaker.ListTrainingJobsForHyperParameterTuningJobInput) (r0 *sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrainingJobsForHyperParameterTuningJob", i0)
	r0, _ = returns[0].(*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) ListTrainingJobsForHyperParameterTuningJobPages(i0 *sagemaker.ListTrainingJobsForHyperParameterTuningJobInput, i1 func(*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrainingJobsForHyperParameterTuningJobPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListTrainingJobsForHyperParameterTuningJobPages(in *sagemaker.ListTrainingJobsForHyperParameterTuningJobInput, pager func(*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTrainingJobsForHyperParameterTuningJob", paginators, in, pager)
}

func (d *SageMakerDouble) ListTrainingJobsForHyperParameterTuningJobPagesWithContext(i0 context.Context, i1 *sagemaker.ListTrainingJobsForHyperParameterTuningJobInput, i2 func(*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrainingJobsForHyperParameterTuningJobPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListTrainingJobsForHyperParameterTuningJobPagesWithContext(ctx context.Context, in *sagemaker.ListTrainingJobsForHyperParameterTuningJobInput, pager func(*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTrainingJobsForHyperParameterTuningJob", paginators, ctx, in, pager, options...)
}

func (d *SageMakerDouble) ListTrainingJobsForHyperParameterTuningJobRequest(i0 *sagemaker.ListTrainingJobsForHyperParameterTuningJobInput) (r0 *request.Request, r1 *sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrainingJobsForHyperParameterTuningJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput)
	return
}

func (d *SageMakerDouble) ListTrainingJobsForHyperParameterTuningJobWithContext(i0 context.Context, i1 *sagemaker.ListTrainingJobsForHyperParameterTuningJobInput, i2 ...request.Option) (r0 *sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrainingJobsForHyperParameterTuningJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeListTrainingJobsForHyperParameterTuningJobWithContext(ctx context.Context, in *sagemaker.ListTrainingJobsForHyperParameterTuningJobInput, _ ...request.Option) (*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTrainingJobsForHyperParameterTuningJob cancelled", ctx.Err())
	default:
		return d.ListTrainingJobsForHyperParameterTuningJob(in)
	}
}

func (d *SageMakerDouble) ListTrainingJobsPages(i0 *sagemaker.ListTrainingJobsInput, i1 func(*sagemaker.ListTrainingJobsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrainingJobsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListTrainingJobsPages(in *sagemaker.ListTrainingJobsInput, pager func(*sagemaker.ListTrainingJobsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTrainingJobs", paginators, in, pager)
}

func (d *SageMakerDouble) ListTrainingJobsPagesWithContext(i0 context.Context, i1 *sagemaker.ListTrainingJobsInput, i2 func(*sagemaker.ListTrainingJobsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrainingJobsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListTrainingJobsPagesWithContext(ctx context.Context, in *sagemaker.ListTrainingJobsInput, pager func(*sagemaker.ListTrainingJobsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTrainingJobs", paginators, ctx, in, pager, options...)
}

func (d *SageMakerDouble) ListTrainingJobsRequest(i0 *sagemaker.ListTrainingJobsInput) (r0 *request.Request, r1 *sagemaker.ListTrainingJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrainingJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.ListTrainingJobsOutput)
	return
}

func (d *SageMakerDouble) ListTrainingJobsWithContext(i0 context.Context, i1 *sagemaker.ListTrainingJobsInput, i2 ...request.Option) (r0 *sagemaker.ListTrainingJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrainingJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.ListTrainingJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeListTrainingJobsWithContext(ctx context.Context, in *sagemaker.ListTrainingJobsInput, _ ...request.Option) (*sagemaker.ListTrainingJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTrainingJobs cancelled", ctx.Err())
	default:
		return d.ListTrainingJobs(in)
	}
}

func (d *SageMakerDouble) ListTransformJobs(i0 *sagemaker.ListTransformJobsInput) (r0 *sagemaker.ListTransformJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTransformJobs", i0)
	r0, _ = returns[0].(*sagemaker.ListTransformJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) ListTransformJobsPages(i0 *sagemaker.ListTransformJobsInput, i1 func(*sagemaker.ListTransformJobsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTransformJobsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListTransformJobsPages(in *sagemaker.ListTransformJobsInput, pager func(*sagemaker.ListTransformJobsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTransformJobs", paginators, in, pager)
}

func (d *SageMakerDouble) ListTransformJobsPagesWithContext(i0 context.Context, i1 *sagemaker.ListTransformJobsInput, i2 func(*sagemaker.ListTransformJobsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTransformJobsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListTransformJobsPagesWithContext(ctx context.Context, in *sagemaker.ListTransformJobsInput, pager func(*sagemaker.ListTransformJobsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTransformJobs", paginators, ctx, in, pager, options...)
}

func (d *SageMakerDouble) ListTransformJobsRequest(i0 *sagemaker.ListTransformJobsInput) (r0 *request.Request, r1 *sagemaker.ListTransformJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTransformJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.ListTransformJobsOutput)
	return
}

func (d *SageMakerDouble) ListTransformJobsWithContext(i0 context.Context, i1 *sagemaker.ListTransformJobsInput, i2 ...request.Option) (r0 *sagemaker.ListTransformJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTransformJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.ListTransformJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeListTransformJobsWithContext(ctx context.Context, in *sagemaker.ListTransformJobsInput, _ ...request.Option) (*sagemaker.ListTransformJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTransformJobs cancelled", ctx.Err())
	default:
		return d.ListTransformJobs(in)
	}
}

func (d *SageMakerDouble) ListTrialComponents(i0 *sagemaker.ListTrialComponentsInput) (r0 *sagemaker.ListTrialComponentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrialComponents", i0)
	r0, _ = returns[0].(*sagemaker.ListTrialComponentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) ListTrialComponentsPages(i0 *sagemaker.ListTrialComponentsInput, i1 func(*sagemaker.ListTrialComponentsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrialComponentsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListTrialComponentsPages(in *sagemaker.ListTrialComponentsInput, pager func(*sagemaker.ListTrialComponentsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTrialComponents", paginators, in, pager)
}

func (d *SageMakerDouble) ListTrialComponentsPagesWithContext(i0 context.Context, i1 *sagemaker.ListTrialComponentsInput, i2 func(*sagemaker.ListTrialComponentsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrialComponentsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListTrialComponentsPagesWithContext(ctx context.Context, in *sagemaker.ListTrialComponentsInput, pager func(*sagemaker.ListTrialComponentsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTrialComponents", paginators, ctx, in, pager, options...)
}

func (d *SageMakerDouble) ListTrialComponentsRequest(i0 *sagemaker.ListTrialComponentsInput) (r0 *request.Request, r1 *sagemaker.ListTrialComponentsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrialComponentsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.ListTrialComponentsOutput)
	return
}

func (d *SageMakerDouble) ListTrialComponentsWithContext(i0 context.Context, i1 *sagemaker.ListTrialComponentsInput, i2 ...request.Option) (r0 *sagemaker.ListTrialComponentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrialComponentsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.ListTrialComponentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeListTrialComponentsWithContext(ctx context.Context, in *sagemaker.ListTrialComponentsInput, _ ...request.Option) (*sagemaker.ListTrialComponentsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTrialComponents cancelled", ctx.Err())
	default:
		return d.ListTrialComponents(in)
	}
}

func (d *SageMakerDouble) ListTrials(i0 *sagemaker.ListTrialsInput) (r0 *sagemaker.ListTrialsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrials", i0)
	r0, _ = returns[0].(*sagemaker.ListTrialsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) ListTrialsPages(i0 *sagemaker.ListTrialsInput, i1 func(*sagemaker.ListTrialsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrialsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListTrialsPages(in *sagemaker.ListTrialsInput, pager func(*sagemaker.ListTrialsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTrials", paginators, in, pager)
}

func (d *SageMakerDouble) ListTrialsPagesWithContext(i0 context.Context, i1 *sagemaker.ListTrialsInput, i2 func(*sagemaker.ListTrialsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrialsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListTrialsPagesWithContext(ctx context.Context, in *sagemaker.ListTrialsInput, pager func(*sagemaker.ListTrialsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTrials", paginators, ctx, in, pager, options...)
}

func (d *SageMakerDouble) ListTrialsRequest(i0 *sagemaker.ListTrialsInput) (r0 *request.Request, r1 *sagemaker.ListTrialsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrialsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.ListTrialsOutput)
	return
}

func (d *SageMakerDouble) ListTrialsWithContext(i0 context.Context, i1 *sagemaker.ListTrialsInput, i2 ...request.Option) (r0 *sagemaker.ListTrialsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrialsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.ListTrialsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeListTrialsWithContext(ctx context.Context, in *sagemaker.ListTrialsInput, _ ...request.Option) (*sagemaker.ListTrialsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTrials cancelled", ctx.Err())
	default:
		return d.ListTrials(in)
	}
}

func (d *SageMakerDouble) ListUserProfiles(i0 *sagemaker.ListUserProfilesInput) (r0 *sagemaker.ListUserProfilesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUserProfiles", i0)
	r0, _ = returns[0].(*sagemaker.ListUserProfilesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) ListUserProfilesPages(i0 *sagemaker.ListUserProfilesInput, i1 func(*sagemaker.ListUserProfilesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUserProfilesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListUserProfilesPages(in *sagemaker.ListUserProfilesInput, pager func(*sagemaker.ListUserProfilesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListUserProfiles", paginators, in, pager)
}

func (d *SageMakerDouble) ListUserProfilesPagesWithContext(i0 context.Context, i1 *sagemaker.ListUserProfilesInput, i2 func(*sagemaker.ListUserProfilesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUserProfilesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListUserProfilesPagesWithContext(ctx context.Context, in *sagemaker.ListUserProfilesInput, pager func(*sagemaker.ListUserProfilesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListUserProfiles", paginators, ctx, in, pager, options...)
}

func (d *SageMakerDouble) ListUserProfilesRequest(i0 *sagemaker.ListUserProfilesInput) (r0 *request.Request, r1 *sagemaker.ListUserProfilesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUserProfilesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.ListUserProfilesOutput)
	return
}

func (d *SageMakerDouble) ListUserProfilesWithContext(i0 context.Context, i1 *sagemaker.ListUserProfilesInput, i2 ...request.Option) (r0 *sagemaker.ListUserProfilesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUserProfilesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.ListUserProfilesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeListUserProfilesWithContext(ctx context.Context, in *sagemaker.ListUserProfilesInput, _ ...request.Option) (*sagemaker.ListUserProfilesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListUserProfiles cancelled", ctx.Err())
	default:
		return d.ListUserProfiles(in)
	}
}

func (d *SageMakerDouble) ListWorkteams(i0 *sagemaker.ListWorkteamsInput) (r0 *sagemaker.ListWorkteamsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWorkteams", i0)
	r0, _ = returns[0].(*sagemaker.ListWorkteamsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) ListWorkteamsPages(i0 *sagemaker.ListWorkteamsInput, i1 func(*sagemaker.ListWorkteamsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWorkteamsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListWorkteamsPages(in *sagemaker.ListWorkteamsInput, pager func(*sagemaker.ListWorkteamsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListWorkteams", paginators, in, pager)
}

func (d *SageMakerDouble) ListWorkteamsPagesWithContext(i0 context.Context, i1 *sagemaker.ListWorkteamsInput, i2 func(*sagemaker.ListWorkteamsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWorkteamsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeListWorkteamsPagesWithContext(ctx context.Context, in *sagemaker.ListWorkteamsInput, pager func(*sagemaker.ListWorkteamsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListWorkteams", paginators, ctx, in, pager, options...)
}

func (d *SageMakerDouble) ListWorkteamsRequest(i0 *sagemaker.ListWorkteamsInput) (r0 *request.Request, r1 *sagemaker.ListWorkteamsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWorkteamsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.ListWorkteamsOutput)
	return
}

func (d *SageMakerDouble) ListWorkteamsWithContext(i0 context.Context, i1 *sagemaker.ListWorkteamsInput, i2 ...request.Option) (r0 *sagemaker.ListWorkteamsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWorkteamsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.ListWorkteamsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeListWorkteamsWithContext(ctx context.Context, in *sagemaker.ListWorkteamsInput, _ ...request.Option) (*sagemaker.ListWorkteamsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListWorkteams cancelled", ctx.Err())
	default:
		return d.ListWorkteams(in)
	}
}

func (d *SageMakerDouble) RenderUiTemplate(i0 *sagemaker.RenderUiTemplateInput) (r0 *sagemaker.RenderUiTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RenderUiTemplate", i0)
	r0, _ = returns[0].(*sagemaker.RenderUiTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) RenderUiTemplateRequest(i0 *sagemaker.RenderUiTemplateInput) (r0 *request.Request, r1 *sagemaker.RenderUiTemplateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RenderUiTemplateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.RenderUiTemplateOutput)
	return
}

func (d *SageMakerDouble) RenderUiTemplateWithContext(i0 context.Context, i1 *sagemaker.RenderUiTemplateInput, i2 ...request.Option) (r0 *sagemaker.RenderUiTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RenderUiTemplateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.RenderUiTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeRenderUiTemplateWithContext(ctx context.Context, in *sagemaker.RenderUiTemplateInput, _ ...request.Option) (*sagemaker.RenderUiTemplateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RenderUiTemplate cancelled", ctx.Err())
	default:
		return d.RenderUiTemplate(in)
	}
}

func (d *SageMakerDouble) Search(i0 *sagemaker.SearchInput) (r0 *sagemaker.SearchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("Search", i0)
	r0, _ = returns[0].(*sagemaker.SearchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) SearchPages(i0 *sagemaker.SearchInput, i1 func(*sagemaker.SearchOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeSearchPages(in *sagemaker.SearchInput, pager func(*sagemaker.SearchOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("Search", paginators, in, pager)
}

func (d *SageMakerDouble) SearchPagesWithContext(i0 context.Context, i1 *sagemaker.SearchInput, i2 func(*sagemaker.SearchOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeSearchPagesWithContext(ctx context.Context, in *sagemaker.SearchInput, pager func(*sagemaker.SearchOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("Search", paginators, ctx, in, pager, options...)
}

func (d *SageMakerDouble) SearchRequest(i0 *sagemaker.SearchInput) (r0 *request.Request, r1 *sagemaker.SearchOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.SearchOutput)
	return
}

func (d *SageMakerDouble) SearchWithContext(i0 context.Context, i1 *sagemaker.SearchInput, i2 ...request.Option) (r0 *sagemaker.SearchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.SearchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeSearchWithContext(ctx context.Context, in *sagemaker.SearchInput, _ ...request.Option) (*sagemaker.SearchOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "Search cancelled", ctx.Err())
	default:
		return d.Search(in)
	}
}

func (d *SageMakerDouble) StartMonitoringSchedule(i0 *sagemaker.StartMonitoringScheduleInput) (r0 *sagemaker.StartMonitoringScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartMonitoringSchedule", i0)
	r0, _ = returns[0].(*sagemaker.StartMonitoringScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) StartMonitoringScheduleRequest(i0 *sagemaker.StartMonitoringScheduleInput) (r0 *request.Request, r1 *sagemaker.StartMonitoringScheduleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartMonitoringScheduleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.StartMonitoringScheduleOutput)
	return
}

func (d *SageMakerDouble) StartMonitoringScheduleWithContext(i0 context.Context, i1 *sagemaker.StartMonitoringScheduleInput, i2 ...request.Option) (r0 *sagemaker.StartMonitoringScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartMonitoringScheduleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.StartMonitoringScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeStartMonitoringScheduleWithContext(ctx context.Context, in *sagemaker.StartMonitoringScheduleInput, _ ...request.Option) (*sagemaker.StartMonitoringScheduleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartMonitoringSchedule cancelled", ctx.Err())
	default:
		return d.StartMonitoringSchedule(in)
	}
}

func (d *SageMakerDouble) StartNotebookInstance(i0 *sagemaker.StartNotebookInstanceInput) (r0 *sagemaker.StartNotebookInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartNotebookInstance", i0)
	r0, _ = returns[0].(*sagemaker.StartNotebookInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) StartNotebookInstanceRequest(i0 *sagemaker.StartNotebookInstanceInput) (r0 *request.Request, r1 *sagemaker.StartNotebookInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartNotebookInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.StartNotebookInstanceOutput)
	return
}

func (d *SageMakerDouble) StartNotebookInstanceWithContext(i0 context.Context, i1 *sagemaker.StartNotebookInstanceInput, i2 ...request.Option) (r0 *sagemaker.StartNotebookInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartNotebookInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.StartNotebookInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeStartNotebookInstanceWithContext(ctx context.Context, in *sagemaker.StartNotebookInstanceInput, _ ...request.Option) (*sagemaker.StartNotebookInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartNotebookInstance cancelled", ctx.Err())
	default:
		return d.StartNotebookInstance(in)
	}
}

func (d *SageMakerDouble) StopAutoMLJob(i0 *sagemaker.StopAutoMLJobInput) (r0 *sagemaker.StopAutoMLJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopAutoMLJob", i0)
	r0, _ = returns[0].(*sagemaker.StopAutoMLJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) StopAutoMLJobRequest(i0 *sagemaker.StopAutoMLJobInput) (r0 *request.Request, r1 *sagemaker.StopAutoMLJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopAutoMLJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.StopAutoMLJobOutput)
	return
}

func (d *SageMakerDouble) StopAutoMLJobWithContext(i0 context.Context, i1 *sagemaker.StopAutoMLJobInput, i2 ...request.Option) (r0 *sagemaker.StopAutoMLJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopAutoMLJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.StopAutoMLJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeStopAutoMLJobWithContext(ctx context.Context, in *sagemaker.StopAutoMLJobInput, _ ...request.Option) (*sagemaker.StopAutoMLJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopAutoMLJob cancelled", ctx.Err())
	default:
		return d.StopAutoMLJob(in)
	}
}

func (d *SageMakerDouble) StopCompilationJob(i0 *sagemaker.StopCompilationJobInput) (r0 *sagemaker.StopCompilationJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopCompilationJob", i0)
	r0, _ = returns[0].(*sagemaker.StopCompilationJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) StopCompilationJobRequest(i0 *sagemaker.StopCompilationJobInput) (r0 *request.Request, r1 *sagemaker.StopCompilationJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopCompilationJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.StopCompilationJobOutput)
	return
}

func (d *SageMakerDouble) StopCompilationJobWithContext(i0 context.Context, i1 *sagemaker.StopCompilationJobInput, i2 ...request.Option) (r0 *sagemaker.StopCompilationJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopCompilationJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.StopCompilationJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeStopCompilationJobWithContext(ctx context.Context, in *sagemaker.StopCompilationJobInput, _ ...request.Option) (*sagemaker.StopCompilationJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopCompilationJob cancelled", ctx.Err())
	default:
		return d.StopCompilationJob(in)
	}
}

func (d *SageMakerDouble) StopHyperParameterTuningJob(i0 *sagemaker.StopHyperParameterTuningJobInput) (r0 *sagemaker.StopHyperParameterTuningJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopHyperParameterTuningJob", i0)
	r0, _ = returns[0].(*sagemaker.StopHyperParameterTuningJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) StopHyperParameterTuningJobRequest(i0 *sagemaker.StopHyperParameterTuningJobInput) (r0 *request.Request, r1 *sagemaker.StopHyperParameterTuningJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopHyperParameterTuningJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.StopHyperParameterTuningJobOutput)
	return
}

func (d *SageMakerDouble) StopHyperParameterTuningJobWithContext(i0 context.Context, i1 *sagemaker.StopHyperParameterTuningJobInput, i2 ...request.Option) (r0 *sagemaker.StopHyperParameterTuningJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopHyperParameterTuningJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.StopHyperParameterTuningJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeStopHyperParameterTuningJobWithContext(ctx context.Context, in *sagemaker.StopHyperParameterTuningJobInput, _ ...request.Option) (*sagemaker.StopHyperParameterTuningJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopHyperParameterTuningJob cancelled", ctx.Err())
	default:
		return d.StopHyperParameterTuningJob(in)
	}
}

func (d *SageMakerDouble) StopLabelingJob(i0 *sagemaker.StopLabelingJobInput) (r0 *sagemaker.StopLabelingJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopLabelingJob", i0)
	r0, _ = returns[0].(*sagemaker.StopLabelingJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) StopLabelingJobRequest(i0 *sagemaker.StopLabelingJobInput) (r0 *request.Request, r1 *sagemaker.StopLabelingJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopLabelingJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.StopLabelingJobOutput)
	return
}

func (d *SageMakerDouble) StopLabelingJobWithContext(i0 context.Context, i1 *sagemaker.StopLabelingJobInput, i2 ...request.Option) (r0 *sagemaker.StopLabelingJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopLabelingJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.StopLabelingJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeStopLabelingJobWithContext(ctx context.Context, in *sagemaker.StopLabelingJobInput, _ ...request.Option) (*sagemaker.StopLabelingJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopLabelingJob cancelled", ctx.Err())
	default:
		return d.StopLabelingJob(in)
	}
}

func (d *SageMakerDouble) StopMonitoringSchedule(i0 *sagemaker.StopMonitoringScheduleInput) (r0 *sagemaker.StopMonitoringScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopMonitoringSchedule", i0)
	r0, _ = returns[0].(*sagemaker.StopMonitoringScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) StopMonitoringScheduleRequest(i0 *sagemaker.StopMonitoringScheduleInput) (r0 *request.Request, r1 *sagemaker.StopMonitoringScheduleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopMonitoringScheduleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.StopMonitoringScheduleOutput)
	return
}

func (d *SageMakerDouble) StopMonitoringScheduleWithContext(i0 context.Context, i1 *sagemaker.StopMonitoringScheduleInput, i2 ...request.Option) (r0 *sagemaker.StopMonitoringScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopMonitoringScheduleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.StopMonitoringScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeStopMonitoringScheduleWithContext(ctx context.Context, in *sagemaker.StopMonitoringScheduleInput, _ ...request.Option) (*sagemaker.StopMonitoringScheduleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopMonitoringSchedule cancelled", ctx.Err())
	default:
		return d.StopMonitoringSchedule(in)
	}
}

func (d *SageMakerDouble) StopNotebookInstance(i0 *sagemaker.StopNotebookInstanceInput) (r0 *sagemaker.StopNotebookInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopNotebookInstance", i0)
	r0, _ = returns[0].(*sagemaker.StopNotebookInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) StopNotebookInstanceRequest(i0 *sagemaker.StopNotebookInstanceInput) (r0 *request.Request, r1 *sagemaker.StopNotebookInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopNotebookInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.StopNotebookInstanceOutput)
	return
}

func (d *SageMakerDouble) StopNotebookInstanceWithContext(i0 context.Context, i1 *sagemaker.StopNotebookInstanceInput, i2 ...request.Option) (r0 *sagemaker.StopNotebookInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopNotebookInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.StopNotebookInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeStopNotebookInstanceWithContext(ctx context.Context, in *sagemaker.StopNotebookInstanceInput, _ ...request.Option) (*sagemaker.StopNotebookInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopNotebookInstance cancelled", ctx.Err())
	default:
		return d.StopNotebookInstance(in)
	}
}

func (d *SageMakerDouble) StopProcessingJob(i0 *sagemaker.StopProcessingJobInput) (r0 *sagemaker.StopProcessingJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopProcessingJob", i0)
	r0, _ = returns[0].(*sagemaker.StopProcessingJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) StopProcessingJobRequest(i0 *sagemaker.StopProcessingJobInput) (r0 *request.Request, r1 *sagemaker.StopProcessingJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopProcessingJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.StopProcessingJobOutput)
	return
}

func (d *SageMakerDouble) StopProcessingJobWithContext(i0 context.Context, i1 *sagemaker.StopProcessingJobInput, i2 ...request.Option) (r0 *sagemaker.StopProcessingJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopProcessingJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.StopProcessingJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeStopProcessingJobWithContext(ctx context.Context, in *sagemaker.StopProcessingJobInput, _ ...request.Option) (*sagemaker.StopProcessingJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopProcessingJob cancelled", ctx.Err())
	default:
		return d.StopProcessingJob(in)
	}
}

func (d *SageMakerDouble) StopTrainingJob(i0 *sagemaker.StopTrainingJobInput) (r0 *sagemaker.StopTrainingJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopTrainingJob", i0)
	r0, _ = returns[0].(*sagemaker.StopTrainingJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) StopTrainingJobRequest(i0 *sagemaker.StopTrainingJobInput) (r0 *request.Request, r1 *sagemaker.StopTrainingJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopTrainingJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.StopTrainingJobOutput)
	return
}

func (d *SageMakerDouble) StopTrainingJobWithContext(i0 context.Context, i1 *sagemaker.StopTrainingJobInput, i2 ...request.Option) (r0 *sagemaker.StopTrainingJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopTrainingJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.StopTrainingJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeStopTrainingJobWithContext(ctx context.Context, in *sagemaker.StopTrainingJobInput, _ ...request.Option) (*sagemaker.StopTrainingJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopTrainingJob cancelled", ctx.Err())
	default:
		return d.StopTrainingJob(in)
	}
}

func (d *SageMakerDouble) StopTransformJob(i0 *sagemaker.StopTransformJobInput) (r0 *sagemaker.StopTransformJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopTransformJob", i0)
	r0, _ = returns[0].(*sagemaker.StopTransformJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) StopTransformJobRequest(i0 *sagemaker.StopTransformJobInput) (r0 *request.Request, r1 *sagemaker.StopTransformJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopTransformJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.StopTransformJobOutput)
	return
}

func (d *SageMakerDouble) StopTransformJobWithContext(i0 context.Context, i1 *sagemaker.StopTransformJobInput, i2 ...request.Option) (r0 *sagemaker.StopTransformJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopTransformJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.StopTransformJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeStopTransformJobWithContext(ctx context.Context, in *sagemaker.StopTransformJobInput, _ ...request.Option) (*sagemaker.StopTransformJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopTransformJob cancelled", ctx.Err())
	default:
		return d.StopTransformJob(in)
	}
}

func (d *SageMakerDouble) UpdateCodeRepository(i0 *sagemaker.UpdateCodeRepositoryInput) (r0 *sagemaker.UpdateCodeRepositoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCodeRepository", i0)
	r0, _ = returns[0].(*sagemaker.UpdateCodeRepositoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) UpdateCodeRepositoryRequest(i0 *sagemaker.UpdateCodeRepositoryInput) (r0 *request.Request, r1 *sagemaker.UpdateCodeRepositoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCodeRepositoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.UpdateCodeRepositoryOutput)
	return
}

func (d *SageMakerDouble) UpdateCodeRepositoryWithContext(i0 context.Context, i1 *sagemaker.UpdateCodeRepositoryInput, i2 ...request.Option) (r0 *sagemaker.UpdateCodeRepositoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCodeRepositoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.UpdateCodeRepositoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeUpdateCodeRepositoryWithContext(ctx context.Context, in *sagemaker.UpdateCodeRepositoryInput, _ ...request.Option) (*sagemaker.UpdateCodeRepositoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateCodeRepository cancelled", ctx.Err())
	default:
		return d.UpdateCodeRepository(in)
	}
}

func (d *SageMakerDouble) UpdateDomain(i0 *sagemaker.UpdateDomainInput) (r0 *sagemaker.UpdateDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDomain", i0)
	r0, _ = returns[0].(*sagemaker.UpdateDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) UpdateDomainRequest(i0 *sagemaker.UpdateDomainInput) (r0 *request.Request, r1 *sagemaker.UpdateDomainOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDomainRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.UpdateDomainOutput)
	return
}

func (d *SageMakerDouble) UpdateDomainWithContext(i0 context.Context, i1 *sagemaker.UpdateDomainInput, i2 ...request.Option) (r0 *sagemaker.UpdateDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDomainWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.UpdateDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeUpdateDomainWithContext(ctx context.Context, in *sagemaker.UpdateDomainInput, _ ...request.Option) (*sagemaker.UpdateDomainOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDomain cancelled", ctx.Err())
	default:
		return d.UpdateDomain(in)
	}
}

func (d *SageMakerDouble) UpdateEndpoint(i0 *sagemaker.UpdateEndpointInput) (r0 *sagemaker.UpdateEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateEndpoint", i0)
	r0, _ = returns[0].(*sagemaker.UpdateEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) UpdateEndpointRequest(i0 *sagemaker.UpdateEndpointInput) (r0 *request.Request, r1 *sagemaker.UpdateEndpointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateEndpointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.UpdateEndpointOutput)
	return
}

func (d *SageMakerDouble) UpdateEndpointWeightsAndCapacities(i0 *sagemaker.UpdateEndpointWeightsAndCapacitiesInput) (r0 *sagemaker.UpdateEndpointWeightsAndCapacitiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateEndpointWeightsAndCapacities", i0)
	r0, _ = returns[0].(*sagemaker.UpdateEndpointWeightsAndCapacitiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) UpdateEndpointWeightsAndCapacitiesRequest(i0 *sagemaker.UpdateEndpointWeightsAndCapacitiesInput) (r0 *request.Request, r1 *sagemaker.UpdateEndpointWeightsAndCapacitiesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateEndpointWeightsAndCapacitiesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.UpdateEndpointWeightsAndCapacitiesOutput)
	return
}

func (d *SageMakerDouble) UpdateEndpointWeightsAndCapacitiesWithContext(i0 context.Context, i1 *sagemaker.UpdateEndpointWeightsAndCapacitiesInput, i2 ...request.Option) (r0 *sagemaker.UpdateEndpointWeightsAndCapacitiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateEndpointWeightsAndCapacitiesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.UpdateEndpointWeightsAndCapacitiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeUpdateEndpointWeightsAndCapacitiesWithContext(ctx context.Context, in *sagemaker.UpdateEndpointWeightsAndCapacitiesInput, _ ...request.Option) (*sagemaker.UpdateEndpointWeightsAndCapacitiesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateEndpointWeightsAndCapacities cancelled", ctx.Err())
	default:
		return d.UpdateEndpointWeightsAndCapacities(in)
	}
}

func (d *SageMakerDouble) UpdateEndpointWithContext(i0 context.Context, i1 *sagemaker.UpdateEndpointInput, i2 ...request.Option) (r0 *sagemaker.UpdateEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateEndpointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.UpdateEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeUpdateEndpointWithContext(ctx context.Context, in *sagemaker.UpdateEndpointInput, _ ...request.Option) (*sagemaker.UpdateEndpointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateEndpoint cancelled", ctx.Err())
	default:
		return d.UpdateEndpoint(in)
	}
}

func (d *SageMakerDouble) UpdateExperiment(i0 *sagemaker.UpdateExperimentInput) (r0 *sagemaker.UpdateExperimentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateExperiment", i0)
	r0, _ = returns[0].(*sagemaker.UpdateExperimentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) UpdateExperimentRequest(i0 *sagemaker.UpdateExperimentInput) (r0 *request.Request, r1 *sagemaker.UpdateExperimentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateExperimentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.UpdateExperimentOutput)
	return
}

func (d *SageMakerDouble) UpdateExperimentWithContext(i0 context.Context, i1 *sagemaker.UpdateExperimentInput, i2 ...request.Option) (r0 *sagemaker.UpdateExperimentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateExperimentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.UpdateExperimentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeUpdateExperimentWithContext(ctx context.Context, in *sagemaker.UpdateExperimentInput, _ ...request.Option) (*sagemaker.UpdateExperimentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateExperiment cancelled", ctx.Err())
	default:
		return d.UpdateExperiment(in)
	}
}

func (d *SageMakerDouble) UpdateMonitoringSchedule(i0 *sagemaker.UpdateMonitoringScheduleInput) (r0 *sagemaker.UpdateMonitoringScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMonitoringSchedule", i0)
	r0, _ = returns[0].(*sagemaker.UpdateMonitoringScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) UpdateMonitoringScheduleRequest(i0 *sagemaker.UpdateMonitoringScheduleInput) (r0 *request.Request, r1 *sagemaker.UpdateMonitoringScheduleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMonitoringScheduleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.UpdateMonitoringScheduleOutput)
	return
}

func (d *SageMakerDouble) UpdateMonitoringScheduleWithContext(i0 context.Context, i1 *sagemaker.UpdateMonitoringScheduleInput, i2 ...request.Option) (r0 *sagemaker.UpdateMonitoringScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMonitoringScheduleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.UpdateMonitoringScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeUpdateMonitoringScheduleWithContext(ctx context.Context, in *sagemaker.UpdateMonitoringScheduleInput, _ ...request.Option) (*sagemaker.UpdateMonitoringScheduleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateMonitoringSchedule cancelled", ctx.Err())
	default:
		return d.UpdateMonitoringSchedule(in)
	}
}

func (d *SageMakerDouble) UpdateNotebookInstance(i0 *sagemaker.UpdateNotebookInstanceInput) (r0 *sagemaker.UpdateNotebookInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateNotebookInstance", i0)
	r0, _ = returns[0].(*sagemaker.UpdateNotebookInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) UpdateNotebookInstanceLifecycleConfig(i0 *sagemaker.UpdateNotebookInstanceLifecycleConfigInput) (r0 *sagemaker.UpdateNotebookInstanceLifecycleConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateNotebookInstanceLifecycleConfig", i0)
	r0, _ = returns[0].(*sagemaker.UpdateNotebookInstanceLifecycleConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) UpdateNotebookInstanceLifecycleConfigRequest(i0 *sagemaker.UpdateNotebookInstanceLifecycleConfigInput) (r0 *request.Request, r1 *sagemaker.UpdateNotebookInstanceLifecycleConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateNotebookInstanceLifecycleConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.UpdateNotebookInstanceLifecycleConfigOutput)
	return
}

func (d *SageMakerDouble) UpdateNotebookInstanceLifecycleConfigWithContext(i0 context.Context, i1 *sagemaker.UpdateNotebookInstanceLifecycleConfigInput, i2 ...request.Option) (r0 *sagemaker.UpdateNotebookInstanceLifecycleConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateNotebookInstanceLifecycleConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.UpdateNotebookInstanceLifecycleConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeUpdateNotebookInstanceLifecycleConfigWithContext(ctx context.Context, in *sagemaker.UpdateNotebookInstanceLifecycleConfigInput, _ ...request.Option) (*sagemaker.UpdateNotebookInstanceLifecycleConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateNotebookInstanceLifecycleConfig cancelled", ctx.Err())
	default:
		return d.UpdateNotebookInstanceLifecycleConfig(in)
	}
}

func (d *SageMakerDouble) UpdateNotebookInstanceRequest(i0 *sagemaker.UpdateNotebookInstanceInput) (r0 *request.Request, r1 *sagemaker.UpdateNotebookInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateNotebookInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.UpdateNotebookInstanceOutput)
	return
}

func (d *SageMakerDouble) UpdateNotebookInstanceWithContext(i0 context.Context, i1 *sagemaker.UpdateNotebookInstanceInput, i2 ...request.Option) (r0 *sagemaker.UpdateNotebookInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateNotebookInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.UpdateNotebookInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeUpdateNotebookInstanceWithContext(ctx context.Context, in *sagemaker.UpdateNotebookInstanceInput, _ ...request.Option) (*sagemaker.UpdateNotebookInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateNotebookInstance cancelled", ctx.Err())
	default:
		return d.UpdateNotebookInstance(in)
	}
}

func (d *SageMakerDouble) UpdateTrial(i0 *sagemaker.UpdateTrialInput) (r0 *sagemaker.UpdateTrialOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTrial", i0)
	r0, _ = returns[0].(*sagemaker.UpdateTrialOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) UpdateTrialComponent(i0 *sagemaker.UpdateTrialComponentInput) (r0 *sagemaker.UpdateTrialComponentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTrialComponent", i0)
	r0, _ = returns[0].(*sagemaker.UpdateTrialComponentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) UpdateTrialComponentRequest(i0 *sagemaker.UpdateTrialComponentInput) (r0 *request.Request, r1 *sagemaker.UpdateTrialComponentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTrialComponentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.UpdateTrialComponentOutput)
	return
}

func (d *SageMakerDouble) UpdateTrialComponentWithContext(i0 context.Context, i1 *sagemaker.UpdateTrialComponentInput, i2 ...request.Option) (r0 *sagemaker.UpdateTrialComponentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTrialComponentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.UpdateTrialComponentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeUpdateTrialComponentWithContext(ctx context.Context, in *sagemaker.UpdateTrialComponentInput, _ ...request.Option) (*sagemaker.UpdateTrialComponentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateTrialComponent cancelled", ctx.Err())
	default:
		return d.UpdateTrialComponent(in)
	}
}

func (d *SageMakerDouble) UpdateTrialRequest(i0 *sagemaker.UpdateTrialInput) (r0 *request.Request, r1 *sagemaker.UpdateTrialOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTrialRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.UpdateTrialOutput)
	return
}

func (d *SageMakerDouble) UpdateTrialWithContext(i0 context.Context, i1 *sagemaker.UpdateTrialInput, i2 ...request.Option) (r0 *sagemaker.UpdateTrialOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTrialWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.UpdateTrialOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeUpdateTrialWithContext(ctx context.Context, in *sagemaker.UpdateTrialInput, _ ...request.Option) (*sagemaker.UpdateTrialOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateTrial cancelled", ctx.Err())
	default:
		return d.UpdateTrial(in)
	}
}

func (d *SageMakerDouble) UpdateUserProfile(i0 *sagemaker.UpdateUserProfileInput) (r0 *sagemaker.UpdateUserProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserProfile", i0)
	r0, _ = returns[0].(*sagemaker.UpdateUserProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) UpdateUserProfileRequest(i0 *sagemaker.UpdateUserProfileInput) (r0 *request.Request, r1 *sagemaker.UpdateUserProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.UpdateUserProfileOutput)
	return
}

func (d *SageMakerDouble) UpdateUserProfileWithContext(i0 context.Context, i1 *sagemaker.UpdateUserProfileInput, i2 ...request.Option) (r0 *sagemaker.UpdateUserProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.UpdateUserProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeUpdateUserProfileWithContext(ctx context.Context, in *sagemaker.UpdateUserProfileInput, _ ...request.Option) (*sagemaker.UpdateUserProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateUserProfile cancelled", ctx.Err())
	default:
		return d.UpdateUserProfile(in)
	}
}

func (d *SageMakerDouble) UpdateWorkforce(i0 *sagemaker.UpdateWorkforceInput) (r0 *sagemaker.UpdateWorkforceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateWorkforce", i0)
	r0, _ = returns[0].(*sagemaker.UpdateWorkforceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) UpdateWorkforceRequest(i0 *sagemaker.UpdateWorkforceInput) (r0 *request.Request, r1 *sagemaker.UpdateWorkforceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateWorkforceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.UpdateWorkforceOutput)
	return
}

func (d *SageMakerDouble) UpdateWorkforceWithContext(i0 context.Context, i1 *sagemaker.UpdateWorkforceInput, i2 ...request.Option) (r0 *sagemaker.UpdateWorkforceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateWorkforceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.UpdateWorkforceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeUpdateWorkforceWithContext(ctx context.Context, in *sagemaker.UpdateWorkforceInput, _ ...request.Option) (*sagemaker.UpdateWorkforceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateWorkforce cancelled", ctx.Err())
	default:
		return d.UpdateWorkforce(in)
	}
}

func (d *SageMakerDouble) UpdateWorkteam(i0 *sagemaker.UpdateWorkteamInput) (r0 *sagemaker.UpdateWorkteamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateWorkteam", i0)
	r0, _ = returns[0].(*sagemaker.UpdateWorkteamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) UpdateWorkteamRequest(i0 *sagemaker.UpdateWorkteamInput) (r0 *request.Request, r1 *sagemaker.UpdateWorkteamOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateWorkteamRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sagemaker.UpdateWorkteamOutput)
	return
}

func (d *SageMakerDouble) UpdateWorkteamWithContext(i0 context.Context, i1 *sagemaker.UpdateWorkteamInput, i2 ...request.Option) (r0 *sagemaker.UpdateWorkteamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateWorkteamWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sagemaker.UpdateWorkteamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SageMakerDouble) fakeUpdateWorkteamWithContext(ctx context.Context, in *sagemaker.UpdateWorkteamInput, _ ...request.Option) (*sagemaker.UpdateWorkteamOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateWorkteam cancelled", ctx.Err())
	default:
		return d.UpdateWorkteam(in)
	}
}

func (d *SageMakerDouble) WaitUntilEndpointDeleted(i0 *sagemaker.DescribeEndpointInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilEndpointDeleted", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeWaitUntilEndpointDeleted(in *sagemaker.DescribeEndpointInput) error {
	return d.WaitUntil("EndpointDeleted", waiters, in)
}

func (d *SageMakerDouble) WaitUntilEndpointDeletedWithContext(i0 context.Context, i1 *sagemaker.DescribeEndpointInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilEndpointDeletedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeWaitUntilEndpointDeletedWithContext(ctx context.Context, in *sagemaker.DescribeEndpointInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("EndpointDeleted", waiters, ctx, in, waitOption...)
}

func (d *SageMakerDouble) WaitUntilEndpointInService(i0 *sagemaker.DescribeEndpointInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilEndpointInService", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeWaitUntilEndpointInService(in *sagemaker.DescribeEndpointInput) error {
	return d.WaitUntil("EndpointInService", waiters, in)
}

func (d *SageMakerDouble) WaitUntilEndpointInServiceWithContext(i0 context.Context, i1 *sagemaker.DescribeEndpointInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilEndpointInServiceWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeWaitUntilEndpointInServiceWithContext(ctx context.Context, in *sagemaker.DescribeEndpointInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("EndpointInService", waiters, ctx, in, waitOption...)
}

func (d *SageMakerDouble) WaitUntilNotebookInstanceDeleted(i0 *sagemaker.DescribeNotebookInstanceInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilNotebookInstanceDeleted", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeWaitUntilNotebookInstanceDeleted(in *sagemaker.DescribeNotebookInstanceInput) error {
	return d.WaitUntil("NotebookInstanceDeleted", waiters, in)
}

func (d *SageMakerDouble) WaitUntilNotebookInstanceDeletedWithContext(i0 context.Context, i1 *sagemaker.DescribeNotebookInstanceInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilNotebookInstanceDeletedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeWaitUntilNotebookInstanceDeletedWithContext(ctx context.Context, in *sagemaker.DescribeNotebookInstanceInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("NotebookInstanceDeleted", waiters, ctx, in, waitOption...)
}

func (d *SageMakerDouble) WaitUntilNotebookInstanceInService(i0 *sagemaker.DescribeNotebookInstanceInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilNotebookInstanceInService", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeWaitUntilNotebookInstanceInService(in *sagemaker.DescribeNotebookInstanceInput) error {
	return d.WaitUntil("NotebookInstanceInService", waiters, in)
}

func (d *SageMakerDouble) WaitUntilNotebookInstanceInServiceWithContext(i0 context.Context, i1 *sagemaker.DescribeNotebookInstanceInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilNotebookInstanceInServiceWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeWaitUntilNotebookInstanceInServiceWithContext(ctx context.Context, in *sagemaker.DescribeNotebookInstanceInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("NotebookInstanceInService", waiters, ctx, in, waitOption...)
}

func (d *SageMakerDouble) WaitUntilNotebookInstanceStopped(i0 *sagemaker.DescribeNotebookInstanceInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilNotebookInstanceStopped", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeWaitUntilNotebookInstanceStopped(in *sagemaker.DescribeNotebookInstanceInput) error {
	return d.WaitUntil("NotebookInstanceStopped", waiters, in)
}

func (d *SageMakerDouble) WaitUntilNotebookInstanceStoppedWithContext(i0 context.Context, i1 *sagemaker.DescribeNotebookInstanceInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilNotebookInstanceStoppedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeWaitUntilNotebookInstanceStoppedWithContext(ctx context.Context, in *sagemaker.DescribeNotebookInstanceInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("NotebookInstanceStopped", waiters, ctx, in, waitOption...)
}

func (d *SageMakerDouble) WaitUntilProcessingJobCompletedOrStopped(i0 *sagemaker.DescribeProcessingJobInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilProcessingJobCompletedOrStopped", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeWaitUntilProcessingJobCompletedOrStopped(in *sagemaker.DescribeProcessingJobInput) error {
	return d.WaitUntil("ProcessingJobCompletedOrStopped", waiters, in)
}

func (d *SageMakerDouble) WaitUntilProcessingJobCompletedOrStoppedWithContext(i0 context.Context, i1 *sagemaker.DescribeProcessingJobInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilProcessingJobCompletedOrStoppedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeWaitUntilProcessingJobCompletedOrStoppedWithContext(ctx context.Context, in *sagemaker.DescribeProcessingJobInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("ProcessingJobCompletedOrStopped", waiters, ctx, in, waitOption...)
}

func (d *SageMakerDouble) WaitUntilTrainingJobCompletedOrStopped(i0 *sagemaker.DescribeTrainingJobInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilTrainingJobCompletedOrStopped", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeWaitUntilTrainingJobCompletedOrStopped(in *sagemaker.DescribeTrainingJobInput) error {
	return d.WaitUntil("TrainingJobCompletedOrStopped", waiters, in)
}

func (d *SageMakerDouble) WaitUntilTrainingJobCompletedOrStoppedWithContext(i0 context.Context, i1 *sagemaker.DescribeTrainingJobInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilTrainingJobCompletedOrStoppedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeWaitUntilTrainingJobCompletedOrStoppedWithContext(ctx context.Context, in *sagemaker.DescribeTrainingJobInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("TrainingJobCompletedOrStopped", waiters, ctx, in, waitOption...)
}

func (d *SageMakerDouble) WaitUntilTransformJobCompletedOrStopped(i0 *sagemaker.DescribeTransformJobInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilTransformJobCompletedOrStopped", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeWaitUntilTransformJobCompletedOrStopped(in *sagemaker.DescribeTransformJobInput) error {
	return d.WaitUntil("TransformJobCompletedOrStopped", waiters, in)
}

func (d *SageMakerDouble) WaitUntilTransformJobCompletedOrStoppedWithContext(i0 context.Context, i1 *sagemaker.DescribeTransformJobInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilTransformJobCompletedOrStoppedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *SageMakerDouble) fakeWaitUntilTransformJobCompletedOrStoppedWithContext(ctx context.Context, in *sagemaker.DescribeTransformJobInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("TransformJobCompletedOrStopped", waiters, ctx, in, waitOption...)
}
