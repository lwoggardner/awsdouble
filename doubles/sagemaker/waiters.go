// Code generated by go awsdoublegen; DO NOT EDIT.
// This file was generated at 2020-01-29T21:22:05+11:00
package sagemakerdouble

import (
	"time"

	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/lwoggardner/awsdouble"
)

var waiters = map[string]*awsdouble.Waiter{

	"EndpointDeleted": &awsdouble.Waiter{
		OperationName: "DescribeEndpoint",
		Waiter: request.Waiter{
			Name:        "WaitUntilEndpointDeleted",
			MaxAttempts: 60,
			Delay:       request.ConstantWaiterDelay(30 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:    request.SuccessWaiterState,
					Matcher:  request.ErrorWaiterMatch,
					Expected: "ValidationException",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "EndpointStatus",
					Expected: "Failed",
				},
			},
		},
	},

	"EndpointInService": &awsdouble.Waiter{
		OperationName: "DescribeEndpoint",
		Waiter: request.Waiter{
			Name:        "WaitUntilEndpointInService",
			MaxAttempts: 120,
			Delay:       request.ConstantWaiterDelay(30 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "EndpointStatus",
					Expected: "InService",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "EndpointStatus",
					Expected: "Failed",
				},
				{
					State:    request.FailureWaiterState,
					Matcher:  request.ErrorWaiterMatch,
					Expected: "ValidationException",
				},
			},
		},
	},

	"NotebookInstanceDeleted": &awsdouble.Waiter{
		OperationName: "DescribeNotebookInstance",
		Waiter: request.Waiter{
			Name:        "WaitUntilNotebookInstanceDeleted",
			MaxAttempts: 60,
			Delay:       request.ConstantWaiterDelay(30 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:    request.SuccessWaiterState,
					Matcher:  request.ErrorWaiterMatch,
					Expected: "ValidationException",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "NotebookInstanceStatus",
					Expected: "Failed",
				},
			},
		},
	},

	"NotebookInstanceInService": &awsdouble.Waiter{
		OperationName: "DescribeNotebookInstance",
		Waiter: request.Waiter{
			Name:        "WaitUntilNotebookInstanceInService",
			MaxAttempts: 60,
			Delay:       request.ConstantWaiterDelay(30 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "NotebookInstanceStatus",
					Expected: "InService",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "NotebookInstanceStatus",
					Expected: "Failed",
				},
			},
		},
	},

	"NotebookInstanceStopped": &awsdouble.Waiter{
		OperationName: "DescribeNotebookInstance",
		Waiter: request.Waiter{
			Name:        "WaitUntilNotebookInstanceStopped",
			MaxAttempts: 60,
			Delay:       request.ConstantWaiterDelay(30 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "NotebookInstanceStatus",
					Expected: "Stopped",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "NotebookInstanceStatus",
					Expected: "Failed",
				},
			},
		},
	},

	"ProcessingJobCompletedOrStopped": &awsdouble.Waiter{
		OperationName: "DescribeProcessingJob",
		Waiter: request.Waiter{
			Name:        "WaitUntilProcessingJobCompletedOrStopped",
			MaxAttempts: 60,
			Delay:       request.ConstantWaiterDelay(60 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "ProcessingJobStatus",
					Expected: "Completed",
				},
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "ProcessingJobStatus",
					Expected: "Stopped",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "ProcessingJobStatus",
					Expected: "Failed",
				},
				{
					State:    request.FailureWaiterState,
					Matcher:  request.ErrorWaiterMatch,
					Expected: "ValidationException",
				},
			},
		},
	},

	"TrainingJobCompletedOrStopped": &awsdouble.Waiter{
		OperationName: "DescribeTrainingJob",
		Waiter: request.Waiter{
			Name:        "WaitUntilTrainingJobCompletedOrStopped",
			MaxAttempts: 180,
			Delay:       request.ConstantWaiterDelay(120 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "TrainingJobStatus",
					Expected: "Completed",
				},
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "TrainingJobStatus",
					Expected: "Stopped",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "TrainingJobStatus",
					Expected: "Failed",
				},
				{
					State:    request.FailureWaiterState,
					Matcher:  request.ErrorWaiterMatch,
					Expected: "ValidationException",
				},
			},
		},
	},

	"TransformJobCompletedOrStopped": &awsdouble.Waiter{
		OperationName: "DescribeTransformJob",
		Waiter: request.Waiter{
			Name:        "WaitUntilTransformJobCompletedOrStopped",
			MaxAttempts: 60,
			Delay:       request.ConstantWaiterDelay(60 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "TransformJobStatus",
					Expected: "Completed",
				},
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "TransformJobStatus",
					Expected: "Stopped",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "TransformJobStatus",
					Expected: "Failed",
				},
				{
					State:    request.FailureWaiterState,
					Matcher:  request.ErrorWaiterMatch,
					Expected: "ValidationException",
				},
			},
		},
	},
}
