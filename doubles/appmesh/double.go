// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:11:16+11:00

// Package appmeshdouble provides a TestDouble implementation of appmeshiface.AppMeshAPI
package appmeshdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/appmesh"
	"github.com/aws/aws-sdk-go/service/appmesh/appmeshiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// AppMeshDouble is TestDouble for appmeshiface.AppMeshAPI
type AppMeshDouble struct {
	appmeshiface.AppMeshAPI
	*awsdouble.AWSTestDouble
}

// Constructor for AppMeshDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *AppMeshDouble {
	result := &AppMeshDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*appmeshiface.AppMeshAPI)(nil), configurators...)
	return result
}

func (d *AppMeshDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *AppMeshDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CreateMeshWithContext":
		return m.Fake(d.fakeCreateMeshWithContext)

	case "CreateRouteWithContext":
		return m.Fake(d.fakeCreateRouteWithContext)

	case "CreateVirtualNodeWithContext":
		return m.Fake(d.fakeCreateVirtualNodeWithContext)

	case "CreateVirtualRouterWithContext":
		return m.Fake(d.fakeCreateVirtualRouterWithContext)

	case "CreateVirtualServiceWithContext":
		return m.Fake(d.fakeCreateVirtualServiceWithContext)

	case "DeleteMeshWithContext":
		return m.Fake(d.fakeDeleteMeshWithContext)

	case "DeleteRouteWithContext":
		return m.Fake(d.fakeDeleteRouteWithContext)

	case "DeleteVirtualNodeWithContext":
		return m.Fake(d.fakeDeleteVirtualNodeWithContext)

	case "DeleteVirtualRouterWithContext":
		return m.Fake(d.fakeDeleteVirtualRouterWithContext)

	case "DeleteVirtualServiceWithContext":
		return m.Fake(d.fakeDeleteVirtualServiceWithContext)

	case "DescribeMeshWithContext":
		return m.Fake(d.fakeDescribeMeshWithContext)

	case "DescribeRouteWithContext":
		return m.Fake(d.fakeDescribeRouteWithContext)

	case "DescribeVirtualNodeWithContext":
		return m.Fake(d.fakeDescribeVirtualNodeWithContext)

	case "DescribeVirtualRouterWithContext":
		return m.Fake(d.fakeDescribeVirtualRouterWithContext)

	case "DescribeVirtualServiceWithContext":
		return m.Fake(d.fakeDescribeVirtualServiceWithContext)

	case "ListMeshesPages":
		return m.Fake(d.fakeListMeshesPages)

	case "ListMeshesPagesWithContext":
		return m.Fake(d.fakeListMeshesPagesWithContext)

	case "ListMeshesWithContext":
		return m.Fake(d.fakeListMeshesWithContext)

	case "ListRoutesPages":
		return m.Fake(d.fakeListRoutesPages)

	case "ListRoutesPagesWithContext":
		return m.Fake(d.fakeListRoutesPagesWithContext)

	case "ListRoutesWithContext":
		return m.Fake(d.fakeListRoutesWithContext)

	case "ListTagsForResourcePages":
		return m.Fake(d.fakeListTagsForResourcePages)

	case "ListTagsForResourcePagesWithContext":
		return m.Fake(d.fakeListTagsForResourcePagesWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "ListVirtualNodesPages":
		return m.Fake(d.fakeListVirtualNodesPages)

	case "ListVirtualNodesPagesWithContext":
		return m.Fake(d.fakeListVirtualNodesPagesWithContext)

	case "ListVirtualNodesWithContext":
		return m.Fake(d.fakeListVirtualNodesWithContext)

	case "ListVirtualRoutersPages":
		return m.Fake(d.fakeListVirtualRoutersPages)

	case "ListVirtualRoutersPagesWithContext":
		return m.Fake(d.fakeListVirtualRoutersPagesWithContext)

	case "ListVirtualRoutersWithContext":
		return m.Fake(d.fakeListVirtualRoutersWithContext)

	case "ListVirtualServicesPages":
		return m.Fake(d.fakeListVirtualServicesPages)

	case "ListVirtualServicesPagesWithContext":
		return m.Fake(d.fakeListVirtualServicesPagesWithContext)

	case "ListVirtualServicesWithContext":
		return m.Fake(d.fakeListVirtualServicesWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateMeshWithContext":
		return m.Fake(d.fakeUpdateMeshWithContext)

	case "UpdateRouteWithContext":
		return m.Fake(d.fakeUpdateRouteWithContext)

	case "UpdateVirtualNodeWithContext":
		return m.Fake(d.fakeUpdateVirtualNodeWithContext)

	case "UpdateVirtualRouterWithContext":
		return m.Fake(d.fakeUpdateVirtualRouterWithContext)

	case "UpdateVirtualServiceWithContext":
		return m.Fake(d.fakeUpdateVirtualServiceWithContext)

	default:
		return nil
	}
}

func (d *AppMeshDouble) CreateMesh(i0 *appmesh.CreateMeshInput) (r0 *appmesh.CreateMeshOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMesh", i0)
	r0, _ = returns[0].(*appmesh.CreateMeshOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) CreateMeshRequest(i0 *appmesh.CreateMeshInput) (r0 *request.Request, r1 *appmesh.CreateMeshOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMeshRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appmesh.CreateMeshOutput)
	return
}

func (d *AppMeshDouble) CreateMeshWithContext(i0 context.Context, i1 *appmesh.CreateMeshInput, i2 ...request.Option) (r0 *appmesh.CreateMeshOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMeshWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appmesh.CreateMeshOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) fakeCreateMeshWithContext(ctx context.Context, in *appmesh.CreateMeshInput, _ ...request.Option) (*appmesh.CreateMeshOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateMesh cancelled", ctx.Err())
	default:
		return d.CreateMesh(in)
	}
}

func (d *AppMeshDouble) CreateRoute(i0 *appmesh.CreateRouteInput) (r0 *appmesh.CreateRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRoute", i0)
	r0, _ = returns[0].(*appmesh.CreateRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) CreateRouteRequest(i0 *appmesh.CreateRouteInput) (r0 *request.Request, r1 *appmesh.CreateRouteOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRouteRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appmesh.CreateRouteOutput)
	return
}

func (d *AppMeshDouble) CreateRouteWithContext(i0 context.Context, i1 *appmesh.CreateRouteInput, i2 ...request.Option) (r0 *appmesh.CreateRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRouteWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appmesh.CreateRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) fakeCreateRouteWithContext(ctx context.Context, in *appmesh.CreateRouteInput, _ ...request.Option) (*appmesh.CreateRouteOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateRoute cancelled", ctx.Err())
	default:
		return d.CreateRoute(in)
	}
}

func (d *AppMeshDouble) CreateVirtualNode(i0 *appmesh.CreateVirtualNodeInput) (r0 *appmesh.CreateVirtualNodeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVirtualNode", i0)
	r0, _ = returns[0].(*appmesh.CreateVirtualNodeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) CreateVirtualNodeRequest(i0 *appmesh.CreateVirtualNodeInput) (r0 *request.Request, r1 *appmesh.CreateVirtualNodeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVirtualNodeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appmesh.CreateVirtualNodeOutput)
	return
}

func (d *AppMeshDouble) CreateVirtualNodeWithContext(i0 context.Context, i1 *appmesh.CreateVirtualNodeInput, i2 ...request.Option) (r0 *appmesh.CreateVirtualNodeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVirtualNodeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appmesh.CreateVirtualNodeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) fakeCreateVirtualNodeWithContext(ctx context.Context, in *appmesh.CreateVirtualNodeInput, _ ...request.Option) (*appmesh.CreateVirtualNodeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateVirtualNode cancelled", ctx.Err())
	default:
		return d.CreateVirtualNode(in)
	}
}

func (d *AppMeshDouble) CreateVirtualRouter(i0 *appmesh.CreateVirtualRouterInput) (r0 *appmesh.CreateVirtualRouterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVirtualRouter", i0)
	r0, _ = returns[0].(*appmesh.CreateVirtualRouterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) CreateVirtualRouterRequest(i0 *appmesh.CreateVirtualRouterInput) (r0 *request.Request, r1 *appmesh.CreateVirtualRouterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVirtualRouterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appmesh.CreateVirtualRouterOutput)
	return
}

func (d *AppMeshDouble) CreateVirtualRouterWithContext(i0 context.Context, i1 *appmesh.CreateVirtualRouterInput, i2 ...request.Option) (r0 *appmesh.CreateVirtualRouterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVirtualRouterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appmesh.CreateVirtualRouterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) fakeCreateVirtualRouterWithContext(ctx context.Context, in *appmesh.CreateVirtualRouterInput, _ ...request.Option) (*appmesh.CreateVirtualRouterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateVirtualRouter cancelled", ctx.Err())
	default:
		return d.CreateVirtualRouter(in)
	}
}

func (d *AppMeshDouble) CreateVirtualService(i0 *appmesh.CreateVirtualServiceInput) (r0 *appmesh.CreateVirtualServiceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVirtualService", i0)
	r0, _ = returns[0].(*appmesh.CreateVirtualServiceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) CreateVirtualServiceRequest(i0 *appmesh.CreateVirtualServiceInput) (r0 *request.Request, r1 *appmesh.CreateVirtualServiceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVirtualServiceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appmesh.CreateVirtualServiceOutput)
	return
}

func (d *AppMeshDouble) CreateVirtualServiceWithContext(i0 context.Context, i1 *appmesh.CreateVirtualServiceInput, i2 ...request.Option) (r0 *appmesh.CreateVirtualServiceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVirtualServiceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appmesh.CreateVirtualServiceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) fakeCreateVirtualServiceWithContext(ctx context.Context, in *appmesh.CreateVirtualServiceInput, _ ...request.Option) (*appmesh.CreateVirtualServiceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateVirtualService cancelled", ctx.Err())
	default:
		return d.CreateVirtualService(in)
	}
}

func (d *AppMeshDouble) DeleteMesh(i0 *appmesh.DeleteMeshInput) (r0 *appmesh.DeleteMeshOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMesh", i0)
	r0, _ = returns[0].(*appmesh.DeleteMeshOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) DeleteMeshRequest(i0 *appmesh.DeleteMeshInput) (r0 *request.Request, r1 *appmesh.DeleteMeshOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMeshRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appmesh.DeleteMeshOutput)
	return
}

func (d *AppMeshDouble) DeleteMeshWithContext(i0 context.Context, i1 *appmesh.DeleteMeshInput, i2 ...request.Option) (r0 *appmesh.DeleteMeshOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMeshWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appmesh.DeleteMeshOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) fakeDeleteMeshWithContext(ctx context.Context, in *appmesh.DeleteMeshInput, _ ...request.Option) (*appmesh.DeleteMeshOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteMesh cancelled", ctx.Err())
	default:
		return d.DeleteMesh(in)
	}
}

func (d *AppMeshDouble) DeleteRoute(i0 *appmesh.DeleteRouteInput) (r0 *appmesh.DeleteRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRoute", i0)
	r0, _ = returns[0].(*appmesh.DeleteRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) DeleteRouteRequest(i0 *appmesh.DeleteRouteInput) (r0 *request.Request, r1 *appmesh.DeleteRouteOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRouteRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appmesh.DeleteRouteOutput)
	return
}

func (d *AppMeshDouble) DeleteRouteWithContext(i0 context.Context, i1 *appmesh.DeleteRouteInput, i2 ...request.Option) (r0 *appmesh.DeleteRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRouteWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appmesh.DeleteRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) fakeDeleteRouteWithContext(ctx context.Context, in *appmesh.DeleteRouteInput, _ ...request.Option) (*appmesh.DeleteRouteOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRoute cancelled", ctx.Err())
	default:
		return d.DeleteRoute(in)
	}
}

func (d *AppMeshDouble) DeleteVirtualNode(i0 *appmesh.DeleteVirtualNodeInput) (r0 *appmesh.DeleteVirtualNodeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVirtualNode", i0)
	r0, _ = returns[0].(*appmesh.DeleteVirtualNodeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) DeleteVirtualNodeRequest(i0 *appmesh.DeleteVirtualNodeInput) (r0 *request.Request, r1 *appmesh.DeleteVirtualNodeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVirtualNodeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appmesh.DeleteVirtualNodeOutput)
	return
}

func (d *AppMeshDouble) DeleteVirtualNodeWithContext(i0 context.Context, i1 *appmesh.DeleteVirtualNodeInput, i2 ...request.Option) (r0 *appmesh.DeleteVirtualNodeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVirtualNodeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appmesh.DeleteVirtualNodeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) fakeDeleteVirtualNodeWithContext(ctx context.Context, in *appmesh.DeleteVirtualNodeInput, _ ...request.Option) (*appmesh.DeleteVirtualNodeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteVirtualNode cancelled", ctx.Err())
	default:
		return d.DeleteVirtualNode(in)
	}
}

func (d *AppMeshDouble) DeleteVirtualRouter(i0 *appmesh.DeleteVirtualRouterInput) (r0 *appmesh.DeleteVirtualRouterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVirtualRouter", i0)
	r0, _ = returns[0].(*appmesh.DeleteVirtualRouterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) DeleteVirtualRouterRequest(i0 *appmesh.DeleteVirtualRouterInput) (r0 *request.Request, r1 *appmesh.DeleteVirtualRouterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVirtualRouterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appmesh.DeleteVirtualRouterOutput)
	return
}

func (d *AppMeshDouble) DeleteVirtualRouterWithContext(i0 context.Context, i1 *appmesh.DeleteVirtualRouterInput, i2 ...request.Option) (r0 *appmesh.DeleteVirtualRouterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVirtualRouterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appmesh.DeleteVirtualRouterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) fakeDeleteVirtualRouterWithContext(ctx context.Context, in *appmesh.DeleteVirtualRouterInput, _ ...request.Option) (*appmesh.DeleteVirtualRouterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteVirtualRouter cancelled", ctx.Err())
	default:
		return d.DeleteVirtualRouter(in)
	}
}

func (d *AppMeshDouble) DeleteVirtualService(i0 *appmesh.DeleteVirtualServiceInput) (r0 *appmesh.DeleteVirtualServiceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVirtualService", i0)
	r0, _ = returns[0].(*appmesh.DeleteVirtualServiceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) DeleteVirtualServiceRequest(i0 *appmesh.DeleteVirtualServiceInput) (r0 *request.Request, r1 *appmesh.DeleteVirtualServiceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVirtualServiceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appmesh.DeleteVirtualServiceOutput)
	return
}

func (d *AppMeshDouble) DeleteVirtualServiceWithContext(i0 context.Context, i1 *appmesh.DeleteVirtualServiceInput, i2 ...request.Option) (r0 *appmesh.DeleteVirtualServiceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVirtualServiceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appmesh.DeleteVirtualServiceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) fakeDeleteVirtualServiceWithContext(ctx context.Context, in *appmesh.DeleteVirtualServiceInput, _ ...request.Option) (*appmesh.DeleteVirtualServiceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteVirtualService cancelled", ctx.Err())
	default:
		return d.DeleteVirtualService(in)
	}
}

func (d *AppMeshDouble) DescribeMesh(i0 *appmesh.DescribeMeshInput) (r0 *appmesh.DescribeMeshOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMesh", i0)
	r0, _ = returns[0].(*appmesh.DescribeMeshOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) DescribeMeshRequest(i0 *appmesh.DescribeMeshInput) (r0 *request.Request, r1 *appmesh.DescribeMeshOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMeshRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appmesh.DescribeMeshOutput)
	return
}

func (d *AppMeshDouble) DescribeMeshWithContext(i0 context.Context, i1 *appmesh.DescribeMeshInput, i2 ...request.Option) (r0 *appmesh.DescribeMeshOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMeshWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appmesh.DescribeMeshOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) fakeDescribeMeshWithContext(ctx context.Context, in *appmesh.DescribeMeshInput, _ ...request.Option) (*appmesh.DescribeMeshOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeMesh cancelled", ctx.Err())
	default:
		return d.DescribeMesh(in)
	}
}

func (d *AppMeshDouble) DescribeRoute(i0 *appmesh.DescribeRouteInput) (r0 *appmesh.DescribeRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRoute", i0)
	r0, _ = returns[0].(*appmesh.DescribeRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) DescribeRouteRequest(i0 *appmesh.DescribeRouteInput) (r0 *request.Request, r1 *appmesh.DescribeRouteOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRouteRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appmesh.DescribeRouteOutput)
	return
}

func (d *AppMeshDouble) DescribeRouteWithContext(i0 context.Context, i1 *appmesh.DescribeRouteInput, i2 ...request.Option) (r0 *appmesh.DescribeRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRouteWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appmesh.DescribeRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) fakeDescribeRouteWithContext(ctx context.Context, in *appmesh.DescribeRouteInput, _ ...request.Option) (*appmesh.DescribeRouteOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeRoute cancelled", ctx.Err())
	default:
		return d.DescribeRoute(in)
	}
}

func (d *AppMeshDouble) DescribeVirtualNode(i0 *appmesh.DescribeVirtualNodeInput) (r0 *appmesh.DescribeVirtualNodeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVirtualNode", i0)
	r0, _ = returns[0].(*appmesh.DescribeVirtualNodeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) DescribeVirtualNodeRequest(i0 *appmesh.DescribeVirtualNodeInput) (r0 *request.Request, r1 *appmesh.DescribeVirtualNodeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVirtualNodeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appmesh.DescribeVirtualNodeOutput)
	return
}

func (d *AppMeshDouble) DescribeVirtualNodeWithContext(i0 context.Context, i1 *appmesh.DescribeVirtualNodeInput, i2 ...request.Option) (r0 *appmesh.DescribeVirtualNodeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVirtualNodeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appmesh.DescribeVirtualNodeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) fakeDescribeVirtualNodeWithContext(ctx context.Context, in *appmesh.DescribeVirtualNodeInput, _ ...request.Option) (*appmesh.DescribeVirtualNodeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeVirtualNode cancelled", ctx.Err())
	default:
		return d.DescribeVirtualNode(in)
	}
}

func (d *AppMeshDouble) DescribeVirtualRouter(i0 *appmesh.DescribeVirtualRouterInput) (r0 *appmesh.DescribeVirtualRouterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVirtualRouter", i0)
	r0, _ = returns[0].(*appmesh.DescribeVirtualRouterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) DescribeVirtualRouterRequest(i0 *appmesh.DescribeVirtualRouterInput) (r0 *request.Request, r1 *appmesh.DescribeVirtualRouterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVirtualRouterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appmesh.DescribeVirtualRouterOutput)
	return
}

func (d *AppMeshDouble) DescribeVirtualRouterWithContext(i0 context.Context, i1 *appmesh.DescribeVirtualRouterInput, i2 ...request.Option) (r0 *appmesh.DescribeVirtualRouterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVirtualRouterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appmesh.DescribeVirtualRouterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) fakeDescribeVirtualRouterWithContext(ctx context.Context, in *appmesh.DescribeVirtualRouterInput, _ ...request.Option) (*appmesh.DescribeVirtualRouterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeVirtualRouter cancelled", ctx.Err())
	default:
		return d.DescribeVirtualRouter(in)
	}
}

func (d *AppMeshDouble) DescribeVirtualService(i0 *appmesh.DescribeVirtualServiceInput) (r0 *appmesh.DescribeVirtualServiceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVirtualService", i0)
	r0, _ = returns[0].(*appmesh.DescribeVirtualServiceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) DescribeVirtualServiceRequest(i0 *appmesh.DescribeVirtualServiceInput) (r0 *request.Request, r1 *appmesh.DescribeVirtualServiceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVirtualServiceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appmesh.DescribeVirtualServiceOutput)
	return
}

func (d *AppMeshDouble) DescribeVirtualServiceWithContext(i0 context.Context, i1 *appmesh.DescribeVirtualServiceInput, i2 ...request.Option) (r0 *appmesh.DescribeVirtualServiceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVirtualServiceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appmesh.DescribeVirtualServiceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) fakeDescribeVirtualServiceWithContext(ctx context.Context, in *appmesh.DescribeVirtualServiceInput, _ ...request.Option) (*appmesh.DescribeVirtualServiceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeVirtualService cancelled", ctx.Err())
	default:
		return d.DescribeVirtualService(in)
	}
}

func (d *AppMeshDouble) ListMeshes(i0 *appmesh.ListMeshesInput) (r0 *appmesh.ListMeshesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMeshes", i0)
	r0, _ = returns[0].(*appmesh.ListMeshesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) ListMeshesPages(i0 *appmesh.ListMeshesInput, i1 func(*appmesh.ListMeshesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMeshesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AppMeshDouble) fakeListMeshesPages(in *appmesh.ListMeshesInput, pager func(*appmesh.ListMeshesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListMeshes", paginators, in, pager)
}

func (d *AppMeshDouble) ListMeshesPagesWithContext(i0 context.Context, i1 *appmesh.ListMeshesInput, i2 func(*appmesh.ListMeshesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMeshesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AppMeshDouble) fakeListMeshesPagesWithContext(ctx context.Context, in *appmesh.ListMeshesInput, pager func(*appmesh.ListMeshesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListMeshes", paginators, ctx, in, pager, options...)
}

func (d *AppMeshDouble) ListMeshesRequest(i0 *appmesh.ListMeshesInput) (r0 *request.Request, r1 *appmesh.ListMeshesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMeshesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appmesh.ListMeshesOutput)
	return
}

func (d *AppMeshDouble) ListMeshesWithContext(i0 context.Context, i1 *appmesh.ListMeshesInput, i2 ...request.Option) (r0 *appmesh.ListMeshesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMeshesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appmesh.ListMeshesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) fakeListMeshesWithContext(ctx context.Context, in *appmesh.ListMeshesInput, _ ...request.Option) (*appmesh.ListMeshesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListMeshes cancelled", ctx.Err())
	default:
		return d.ListMeshes(in)
	}
}

func (d *AppMeshDouble) ListRoutes(i0 *appmesh.ListRoutesInput) (r0 *appmesh.ListRoutesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRoutes", i0)
	r0, _ = returns[0].(*appmesh.ListRoutesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) ListRoutesPages(i0 *appmesh.ListRoutesInput, i1 func(*appmesh.ListRoutesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRoutesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AppMeshDouble) fakeListRoutesPages(in *appmesh.ListRoutesInput, pager func(*appmesh.ListRoutesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListRoutes", paginators, in, pager)
}

func (d *AppMeshDouble) ListRoutesPagesWithContext(i0 context.Context, i1 *appmesh.ListRoutesInput, i2 func(*appmesh.ListRoutesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRoutesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AppMeshDouble) fakeListRoutesPagesWithContext(ctx context.Context, in *appmesh.ListRoutesInput, pager func(*appmesh.ListRoutesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListRoutes", paginators, ctx, in, pager, options...)
}

func (d *AppMeshDouble) ListRoutesRequest(i0 *appmesh.ListRoutesInput) (r0 *request.Request, r1 *appmesh.ListRoutesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRoutesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appmesh.ListRoutesOutput)
	return
}

func (d *AppMeshDouble) ListRoutesWithContext(i0 context.Context, i1 *appmesh.ListRoutesInput, i2 ...request.Option) (r0 *appmesh.ListRoutesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRoutesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appmesh.ListRoutesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) fakeListRoutesWithContext(ctx context.Context, in *appmesh.ListRoutesInput, _ ...request.Option) (*appmesh.ListRoutesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListRoutes cancelled", ctx.Err())
	default:
		return d.ListRoutes(in)
	}
}

func (d *AppMeshDouble) ListTagsForResource(i0 *appmesh.ListTagsForResourceInput) (r0 *appmesh.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*appmesh.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) ListTagsForResourcePages(i0 *appmesh.ListTagsForResourceInput, i1 func(*appmesh.ListTagsForResourceOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourcePages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AppMeshDouble) fakeListTagsForResourcePages(in *appmesh.ListTagsForResourceInput, pager func(*appmesh.ListTagsForResourceOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTagsForResource", paginators, in, pager)
}

func (d *AppMeshDouble) ListTagsForResourcePagesWithContext(i0 context.Context, i1 *appmesh.ListTagsForResourceInput, i2 func(*appmesh.ListTagsForResourceOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourcePagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AppMeshDouble) fakeListTagsForResourcePagesWithContext(ctx context.Context, in *appmesh.ListTagsForResourceInput, pager func(*appmesh.ListTagsForResourceOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTagsForResource", paginators, ctx, in, pager, options...)
}

func (d *AppMeshDouble) ListTagsForResourceRequest(i0 *appmesh.ListTagsForResourceInput) (r0 *request.Request, r1 *appmesh.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appmesh.ListTagsForResourceOutput)
	return
}

func (d *AppMeshDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *appmesh.ListTagsForResourceInput, i2 ...request.Option) (r0 *appmesh.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appmesh.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *appmesh.ListTagsForResourceInput, _ ...request.Option) (*appmesh.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *AppMeshDouble) ListVirtualNodes(i0 *appmesh.ListVirtualNodesInput) (r0 *appmesh.ListVirtualNodesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVirtualNodes", i0)
	r0, _ = returns[0].(*appmesh.ListVirtualNodesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) ListVirtualNodesPages(i0 *appmesh.ListVirtualNodesInput, i1 func(*appmesh.ListVirtualNodesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVirtualNodesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AppMeshDouble) fakeListVirtualNodesPages(in *appmesh.ListVirtualNodesInput, pager func(*appmesh.ListVirtualNodesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListVirtualNodes", paginators, in, pager)
}

func (d *AppMeshDouble) ListVirtualNodesPagesWithContext(i0 context.Context, i1 *appmesh.ListVirtualNodesInput, i2 func(*appmesh.ListVirtualNodesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVirtualNodesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AppMeshDouble) fakeListVirtualNodesPagesWithContext(ctx context.Context, in *appmesh.ListVirtualNodesInput, pager func(*appmesh.ListVirtualNodesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListVirtualNodes", paginators, ctx, in, pager, options...)
}

func (d *AppMeshDouble) ListVirtualNodesRequest(i0 *appmesh.ListVirtualNodesInput) (r0 *request.Request, r1 *appmesh.ListVirtualNodesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVirtualNodesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appmesh.ListVirtualNodesOutput)
	return
}

func (d *AppMeshDouble) ListVirtualNodesWithContext(i0 context.Context, i1 *appmesh.ListVirtualNodesInput, i2 ...request.Option) (r0 *appmesh.ListVirtualNodesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVirtualNodesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appmesh.ListVirtualNodesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) fakeListVirtualNodesWithContext(ctx context.Context, in *appmesh.ListVirtualNodesInput, _ ...request.Option) (*appmesh.ListVirtualNodesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListVirtualNodes cancelled", ctx.Err())
	default:
		return d.ListVirtualNodes(in)
	}
}

func (d *AppMeshDouble) ListVirtualRouters(i0 *appmesh.ListVirtualRoutersInput) (r0 *appmesh.ListVirtualRoutersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVirtualRouters", i0)
	r0, _ = returns[0].(*appmesh.ListVirtualRoutersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) ListVirtualRoutersPages(i0 *appmesh.ListVirtualRoutersInput, i1 func(*appmesh.ListVirtualRoutersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVirtualRoutersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AppMeshDouble) fakeListVirtualRoutersPages(in *appmesh.ListVirtualRoutersInput, pager func(*appmesh.ListVirtualRoutersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListVirtualRouters", paginators, in, pager)
}

func (d *AppMeshDouble) ListVirtualRoutersPagesWithContext(i0 context.Context, i1 *appmesh.ListVirtualRoutersInput, i2 func(*appmesh.ListVirtualRoutersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVirtualRoutersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AppMeshDouble) fakeListVirtualRoutersPagesWithContext(ctx context.Context, in *appmesh.ListVirtualRoutersInput, pager func(*appmesh.ListVirtualRoutersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListVirtualRouters", paginators, ctx, in, pager, options...)
}

func (d *AppMeshDouble) ListVirtualRoutersRequest(i0 *appmesh.ListVirtualRoutersInput) (r0 *request.Request, r1 *appmesh.ListVirtualRoutersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVirtualRoutersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appmesh.ListVirtualRoutersOutput)
	return
}

func (d *AppMeshDouble) ListVirtualRoutersWithContext(i0 context.Context, i1 *appmesh.ListVirtualRoutersInput, i2 ...request.Option) (r0 *appmesh.ListVirtualRoutersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVirtualRoutersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appmesh.ListVirtualRoutersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) fakeListVirtualRoutersWithContext(ctx context.Context, in *appmesh.ListVirtualRoutersInput, _ ...request.Option) (*appmesh.ListVirtualRoutersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListVirtualRouters cancelled", ctx.Err())
	default:
		return d.ListVirtualRouters(in)
	}
}

func (d *AppMeshDouble) ListVirtualServices(i0 *appmesh.ListVirtualServicesInput) (r0 *appmesh.ListVirtualServicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVirtualServices", i0)
	r0, _ = returns[0].(*appmesh.ListVirtualServicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) ListVirtualServicesPages(i0 *appmesh.ListVirtualServicesInput, i1 func(*appmesh.ListVirtualServicesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVirtualServicesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AppMeshDouble) fakeListVirtualServicesPages(in *appmesh.ListVirtualServicesInput, pager func(*appmesh.ListVirtualServicesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListVirtualServices", paginators, in, pager)
}

func (d *AppMeshDouble) ListVirtualServicesPagesWithContext(i0 context.Context, i1 *appmesh.ListVirtualServicesInput, i2 func(*appmesh.ListVirtualServicesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVirtualServicesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AppMeshDouble) fakeListVirtualServicesPagesWithContext(ctx context.Context, in *appmesh.ListVirtualServicesInput, pager func(*appmesh.ListVirtualServicesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListVirtualServices", paginators, ctx, in, pager, options...)
}

func (d *AppMeshDouble) ListVirtualServicesRequest(i0 *appmesh.ListVirtualServicesInput) (r0 *request.Request, r1 *appmesh.ListVirtualServicesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVirtualServicesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appmesh.ListVirtualServicesOutput)
	return
}

func (d *AppMeshDouble) ListVirtualServicesWithContext(i0 context.Context, i1 *appmesh.ListVirtualServicesInput, i2 ...request.Option) (r0 *appmesh.ListVirtualServicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVirtualServicesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appmesh.ListVirtualServicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) fakeListVirtualServicesWithContext(ctx context.Context, in *appmesh.ListVirtualServicesInput, _ ...request.Option) (*appmesh.ListVirtualServicesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListVirtualServices cancelled", ctx.Err())
	default:
		return d.ListVirtualServices(in)
	}
}

func (d *AppMeshDouble) TagResource(i0 *appmesh.TagResourceInput) (r0 *appmesh.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*appmesh.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) TagResourceRequest(i0 *appmesh.TagResourceInput) (r0 *request.Request, r1 *appmesh.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appmesh.TagResourceOutput)
	return
}

func (d *AppMeshDouble) TagResourceWithContext(i0 context.Context, i1 *appmesh.TagResourceInput, i2 ...request.Option) (r0 *appmesh.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appmesh.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) fakeTagResourceWithContext(ctx context.Context, in *appmesh.TagResourceInput, _ ...request.Option) (*appmesh.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *AppMeshDouble) UntagResource(i0 *appmesh.UntagResourceInput) (r0 *appmesh.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*appmesh.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) UntagResourceRequest(i0 *appmesh.UntagResourceInput) (r0 *request.Request, r1 *appmesh.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appmesh.UntagResourceOutput)
	return
}

func (d *AppMeshDouble) UntagResourceWithContext(i0 context.Context, i1 *appmesh.UntagResourceInput, i2 ...request.Option) (r0 *appmesh.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appmesh.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) fakeUntagResourceWithContext(ctx context.Context, in *appmesh.UntagResourceInput, _ ...request.Option) (*appmesh.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *AppMeshDouble) UpdateMesh(i0 *appmesh.UpdateMeshInput) (r0 *appmesh.UpdateMeshOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMesh", i0)
	r0, _ = returns[0].(*appmesh.UpdateMeshOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) UpdateMeshRequest(i0 *appmesh.UpdateMeshInput) (r0 *request.Request, r1 *appmesh.UpdateMeshOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMeshRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appmesh.UpdateMeshOutput)
	return
}

func (d *AppMeshDouble) UpdateMeshWithContext(i0 context.Context, i1 *appmesh.UpdateMeshInput, i2 ...request.Option) (r0 *appmesh.UpdateMeshOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMeshWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appmesh.UpdateMeshOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) fakeUpdateMeshWithContext(ctx context.Context, in *appmesh.UpdateMeshInput, _ ...request.Option) (*appmesh.UpdateMeshOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateMesh cancelled", ctx.Err())
	default:
		return d.UpdateMesh(in)
	}
}

func (d *AppMeshDouble) UpdateRoute(i0 *appmesh.UpdateRouteInput) (r0 *appmesh.UpdateRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRoute", i0)
	r0, _ = returns[0].(*appmesh.UpdateRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) UpdateRouteRequest(i0 *appmesh.UpdateRouteInput) (r0 *request.Request, r1 *appmesh.UpdateRouteOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRouteRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appmesh.UpdateRouteOutput)
	return
}

func (d *AppMeshDouble) UpdateRouteWithContext(i0 context.Context, i1 *appmesh.UpdateRouteInput, i2 ...request.Option) (r0 *appmesh.UpdateRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRouteWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appmesh.UpdateRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) fakeUpdateRouteWithContext(ctx context.Context, in *appmesh.UpdateRouteInput, _ ...request.Option) (*appmesh.UpdateRouteOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateRoute cancelled", ctx.Err())
	default:
		return d.UpdateRoute(in)
	}
}

func (d *AppMeshDouble) UpdateVirtualNode(i0 *appmesh.UpdateVirtualNodeInput) (r0 *appmesh.UpdateVirtualNodeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateVirtualNode", i0)
	r0, _ = returns[0].(*appmesh.UpdateVirtualNodeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) UpdateVirtualNodeRequest(i0 *appmesh.UpdateVirtualNodeInput) (r0 *request.Request, r1 *appmesh.UpdateVirtualNodeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateVirtualNodeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appmesh.UpdateVirtualNodeOutput)
	return
}

func (d *AppMeshDouble) UpdateVirtualNodeWithContext(i0 context.Context, i1 *appmesh.UpdateVirtualNodeInput, i2 ...request.Option) (r0 *appmesh.UpdateVirtualNodeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateVirtualNodeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appmesh.UpdateVirtualNodeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) fakeUpdateVirtualNodeWithContext(ctx context.Context, in *appmesh.UpdateVirtualNodeInput, _ ...request.Option) (*appmesh.UpdateVirtualNodeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateVirtualNode cancelled", ctx.Err())
	default:
		return d.UpdateVirtualNode(in)
	}
}

func (d *AppMeshDouble) UpdateVirtualRouter(i0 *appmesh.UpdateVirtualRouterInput) (r0 *appmesh.UpdateVirtualRouterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateVirtualRouter", i0)
	r0, _ = returns[0].(*appmesh.UpdateVirtualRouterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) UpdateVirtualRouterRequest(i0 *appmesh.UpdateVirtualRouterInput) (r0 *request.Request, r1 *appmesh.UpdateVirtualRouterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateVirtualRouterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appmesh.UpdateVirtualRouterOutput)
	return
}

func (d *AppMeshDouble) UpdateVirtualRouterWithContext(i0 context.Context, i1 *appmesh.UpdateVirtualRouterInput, i2 ...request.Option) (r0 *appmesh.UpdateVirtualRouterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateVirtualRouterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appmesh.UpdateVirtualRouterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) fakeUpdateVirtualRouterWithContext(ctx context.Context, in *appmesh.UpdateVirtualRouterInput, _ ...request.Option) (*appmesh.UpdateVirtualRouterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateVirtualRouter cancelled", ctx.Err())
	default:
		return d.UpdateVirtualRouter(in)
	}
}

func (d *AppMeshDouble) UpdateVirtualService(i0 *appmesh.UpdateVirtualServiceInput) (r0 *appmesh.UpdateVirtualServiceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateVirtualService", i0)
	r0, _ = returns[0].(*appmesh.UpdateVirtualServiceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) UpdateVirtualServiceRequest(i0 *appmesh.UpdateVirtualServiceInput) (r0 *request.Request, r1 *appmesh.UpdateVirtualServiceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateVirtualServiceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appmesh.UpdateVirtualServiceOutput)
	return
}

func (d *AppMeshDouble) UpdateVirtualServiceWithContext(i0 context.Context, i1 *appmesh.UpdateVirtualServiceInput, i2 ...request.Option) (r0 *appmesh.UpdateVirtualServiceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateVirtualServiceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appmesh.UpdateVirtualServiceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppMeshDouble) fakeUpdateVirtualServiceWithContext(ctx context.Context, in *appmesh.UpdateVirtualServiceInput, _ ...request.Option) (*appmesh.UpdateVirtualServiceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateVirtualService cancelled", ctx.Err())
	default:
		return d.UpdateVirtualService(in)
	}
}
