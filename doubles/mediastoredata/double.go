// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:13:59+11:00

// Package mediastoredatadouble provides a TestDouble implementation of mediastoredataiface.MediaStoreDataAPI
package mediastoredatadouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/mediastoredata"
	"github.com/aws/aws-sdk-go/service/mediastoredata/mediastoredataiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// MediaStoreDataDouble is TestDouble for mediastoredataiface.MediaStoreDataAPI
type MediaStoreDataDouble struct {
	mediastoredataiface.MediaStoreDataAPI
	*awsdouble.AWSTestDouble
}

// Constructor for MediaStoreDataDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *MediaStoreDataDouble {
	result := &MediaStoreDataDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*mediastoredataiface.MediaStoreDataAPI)(nil), configurators...)
	return result
}

func (d *MediaStoreDataDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *MediaStoreDataDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "DeleteObjectWithContext":
		return m.Fake(d.fakeDeleteObjectWithContext)

	case "DescribeObjectWithContext":
		return m.Fake(d.fakeDescribeObjectWithContext)

	case "GetObjectWithContext":
		return m.Fake(d.fakeGetObjectWithContext)

	case "ListItemsPages":
		return m.Fake(d.fakeListItemsPages)

	case "ListItemsPagesWithContext":
		return m.Fake(d.fakeListItemsPagesWithContext)

	case "ListItemsWithContext":
		return m.Fake(d.fakeListItemsWithContext)

	case "PutObjectWithContext":
		return m.Fake(d.fakePutObjectWithContext)

	default:
		return nil
	}
}

func (d *MediaStoreDataDouble) DeleteObject(i0 *mediastoredata.DeleteObjectInput) (r0 *mediastoredata.DeleteObjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteObject", i0)
	r0, _ = returns[0].(*mediastoredata.DeleteObjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaStoreDataDouble) DeleteObjectRequest(i0 *mediastoredata.DeleteObjectInput) (r0 *request.Request, r1 *mediastoredata.DeleteObjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteObjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediastoredata.DeleteObjectOutput)
	return
}

func (d *MediaStoreDataDouble) DeleteObjectWithContext(i0 context.Context, i1 *mediastoredata.DeleteObjectInput, i2 ...request.Option) (r0 *mediastoredata.DeleteObjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteObjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediastoredata.DeleteObjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaStoreDataDouble) fakeDeleteObjectWithContext(ctx context.Context, in *mediastoredata.DeleteObjectInput, _ ...request.Option) (*mediastoredata.DeleteObjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteObject cancelled", ctx.Err())
	default:
		return d.DeleteObject(in)
	}
}

func (d *MediaStoreDataDouble) DescribeObject(i0 *mediastoredata.DescribeObjectInput) (r0 *mediastoredata.DescribeObjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeObject", i0)
	r0, _ = returns[0].(*mediastoredata.DescribeObjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaStoreDataDouble) DescribeObjectRequest(i0 *mediastoredata.DescribeObjectInput) (r0 *request.Request, r1 *mediastoredata.DescribeObjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeObjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediastoredata.DescribeObjectOutput)
	return
}

func (d *MediaStoreDataDouble) DescribeObjectWithContext(i0 context.Context, i1 *mediastoredata.DescribeObjectInput, i2 ...request.Option) (r0 *mediastoredata.DescribeObjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeObjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediastoredata.DescribeObjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaStoreDataDouble) fakeDescribeObjectWithContext(ctx context.Context, in *mediastoredata.DescribeObjectInput, _ ...request.Option) (*mediastoredata.DescribeObjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeObject cancelled", ctx.Err())
	default:
		return d.DescribeObject(in)
	}
}

func (d *MediaStoreDataDouble) GetObject(i0 *mediastoredata.GetObjectInput) (r0 *mediastoredata.GetObjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetObject", i0)
	r0, _ = returns[0].(*mediastoredata.GetObjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaStoreDataDouble) GetObjectRequest(i0 *mediastoredata.GetObjectInput) (r0 *request.Request, r1 *mediastoredata.GetObjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetObjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediastoredata.GetObjectOutput)
	return
}

func (d *MediaStoreDataDouble) GetObjectWithContext(i0 context.Context, i1 *mediastoredata.GetObjectInput, i2 ...request.Option) (r0 *mediastoredata.GetObjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetObjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediastoredata.GetObjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaStoreDataDouble) fakeGetObjectWithContext(ctx context.Context, in *mediastoredata.GetObjectInput, _ ...request.Option) (*mediastoredata.GetObjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetObject cancelled", ctx.Err())
	default:
		return d.GetObject(in)
	}
}

func (d *MediaStoreDataDouble) ListItems(i0 *mediastoredata.ListItemsInput) (r0 *mediastoredata.ListItemsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListItems", i0)
	r0, _ = returns[0].(*mediastoredata.ListItemsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaStoreDataDouble) ListItemsPages(i0 *mediastoredata.ListItemsInput, i1 func(*mediastoredata.ListItemsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListItemsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaStoreDataDouble) fakeListItemsPages(in *mediastoredata.ListItemsInput, pager func(*mediastoredata.ListItemsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListItems", paginators, in, pager)
}

func (d *MediaStoreDataDouble) ListItemsPagesWithContext(i0 context.Context, i1 *mediastoredata.ListItemsInput, i2 func(*mediastoredata.ListItemsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListItemsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaStoreDataDouble) fakeListItemsPagesWithContext(ctx context.Context, in *mediastoredata.ListItemsInput, pager func(*mediastoredata.ListItemsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListItems", paginators, ctx, in, pager, options...)
}

func (d *MediaStoreDataDouble) ListItemsRequest(i0 *mediastoredata.ListItemsInput) (r0 *request.Request, r1 *mediastoredata.ListItemsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListItemsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediastoredata.ListItemsOutput)
	return
}

func (d *MediaStoreDataDouble) ListItemsWithContext(i0 context.Context, i1 *mediastoredata.ListItemsInput, i2 ...request.Option) (r0 *mediastoredata.ListItemsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListItemsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediastoredata.ListItemsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaStoreDataDouble) fakeListItemsWithContext(ctx context.Context, in *mediastoredata.ListItemsInput, _ ...request.Option) (*mediastoredata.ListItemsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListItems cancelled", ctx.Err())
	default:
		return d.ListItems(in)
	}
}

func (d *MediaStoreDataDouble) PutObject(i0 *mediastoredata.PutObjectInput) (r0 *mediastoredata.PutObjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutObject", i0)
	r0, _ = returns[0].(*mediastoredata.PutObjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaStoreDataDouble) PutObjectRequest(i0 *mediastoredata.PutObjectInput) (r0 *request.Request, r1 *mediastoredata.PutObjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutObjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediastoredata.PutObjectOutput)
	return
}

func (d *MediaStoreDataDouble) PutObjectWithContext(i0 context.Context, i1 *mediastoredata.PutObjectInput, i2 ...request.Option) (r0 *mediastoredata.PutObjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutObjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediastoredata.PutObjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaStoreDataDouble) fakePutObjectWithContext(ctx context.Context, in *mediastoredata.PutObjectInput, _ ...request.Option) (*mediastoredata.PutObjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutObject cancelled", ctx.Err())
	default:
		return d.PutObject(in)
	}
}
