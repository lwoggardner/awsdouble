// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:12:30+11:00

// Package ec2instanceconnectdouble provides a TestDouble implementation of ec2instanceconnectiface.EC2InstanceConnectAPI
package ec2instanceconnectdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/ec2instanceconnect"
	"github.com/aws/aws-sdk-go/service/ec2instanceconnect/ec2instanceconnectiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// EC2InstanceConnectDouble is TestDouble for ec2instanceconnectiface.EC2InstanceConnectAPI
type EC2InstanceConnectDouble struct {
	ec2instanceconnectiface.EC2InstanceConnectAPI
	*awsdouble.AWSTestDouble
}

// Constructor for EC2InstanceConnectDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *EC2InstanceConnectDouble {
	result := &EC2InstanceConnectDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*ec2instanceconnectiface.EC2InstanceConnectAPI)(nil), configurators...)
	return result
}

func (d *EC2InstanceConnectDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *EC2InstanceConnectDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "SendSSHPublicKeyWithContext":
		return m.Fake(d.fakeSendSSHPublicKeyWithContext)

	default:
		return nil
	}
}

func (d *EC2InstanceConnectDouble) SendSSHPublicKey(i0 *ec2instanceconnect.SendSSHPublicKeyInput) (r0 *ec2instanceconnect.SendSSHPublicKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendSSHPublicKey", i0)
	r0, _ = returns[0].(*ec2instanceconnect.SendSSHPublicKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2InstanceConnectDouble) SendSSHPublicKeyRequest(i0 *ec2instanceconnect.SendSSHPublicKeyInput) (r0 *request.Request, r1 *ec2instanceconnect.SendSSHPublicKeyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendSSHPublicKeyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2instanceconnect.SendSSHPublicKeyOutput)
	return
}

func (d *EC2InstanceConnectDouble) SendSSHPublicKeyWithContext(i0 context.Context, i1 *ec2instanceconnect.SendSSHPublicKeyInput, i2 ...request.Option) (r0 *ec2instanceconnect.SendSSHPublicKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendSSHPublicKeyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2instanceconnect.SendSSHPublicKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2InstanceConnectDouble) fakeSendSSHPublicKeyWithContext(ctx context.Context, in *ec2instanceconnect.SendSSHPublicKeyInput, _ ...request.Option) (*ec2instanceconnect.SendSSHPublicKeyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SendSSHPublicKey cancelled", ctx.Err())
	default:
		return d.SendSSHPublicKey(in)
	}
}
