// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:12:35+11:00

// Package eksdouble provides a TestDouble implementation of eksiface.EKSAPI
package eksdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/eks"
	"github.com/aws/aws-sdk-go/service/eks/eksiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// EKSDouble is TestDouble for eksiface.EKSAPI
type EKSDouble struct {
	eksiface.EKSAPI
	*awsdouble.AWSTestDouble
}

// Constructor for EKSDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *EKSDouble {
	result := &EKSDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*eksiface.EKSAPI)(nil), configurators...)
	return result
}

func (d *EKSDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *EKSDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CreateClusterWithContext":
		return m.Fake(d.fakeCreateClusterWithContext)

	case "CreateFargateProfileWithContext":
		return m.Fake(d.fakeCreateFargateProfileWithContext)

	case "CreateNodegroupWithContext":
		return m.Fake(d.fakeCreateNodegroupWithContext)

	case "DeleteClusterWithContext":
		return m.Fake(d.fakeDeleteClusterWithContext)

	case "DeleteFargateProfileWithContext":
		return m.Fake(d.fakeDeleteFargateProfileWithContext)

	case "DeleteNodegroupWithContext":
		return m.Fake(d.fakeDeleteNodegroupWithContext)

	case "DescribeClusterWithContext":
		return m.Fake(d.fakeDescribeClusterWithContext)

	case "DescribeFargateProfileWithContext":
		return m.Fake(d.fakeDescribeFargateProfileWithContext)

	case "DescribeNodegroupWithContext":
		return m.Fake(d.fakeDescribeNodegroupWithContext)

	case "DescribeUpdateWithContext":
		return m.Fake(d.fakeDescribeUpdateWithContext)

	case "ListClustersPages":
		return m.Fake(d.fakeListClustersPages)

	case "ListClustersPagesWithContext":
		return m.Fake(d.fakeListClustersPagesWithContext)

	case "ListClustersWithContext":
		return m.Fake(d.fakeListClustersWithContext)

	case "ListFargateProfilesPages":
		return m.Fake(d.fakeListFargateProfilesPages)

	case "ListFargateProfilesPagesWithContext":
		return m.Fake(d.fakeListFargateProfilesPagesWithContext)

	case "ListFargateProfilesWithContext":
		return m.Fake(d.fakeListFargateProfilesWithContext)

	case "ListNodegroupsPages":
		return m.Fake(d.fakeListNodegroupsPages)

	case "ListNodegroupsPagesWithContext":
		return m.Fake(d.fakeListNodegroupsPagesWithContext)

	case "ListNodegroupsWithContext":
		return m.Fake(d.fakeListNodegroupsWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "ListUpdatesPages":
		return m.Fake(d.fakeListUpdatesPages)

	case "ListUpdatesPagesWithContext":
		return m.Fake(d.fakeListUpdatesPagesWithContext)

	case "ListUpdatesWithContext":
		return m.Fake(d.fakeListUpdatesWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateClusterConfigWithContext":
		return m.Fake(d.fakeUpdateClusterConfigWithContext)

	case "UpdateClusterVersionWithContext":
		return m.Fake(d.fakeUpdateClusterVersionWithContext)

	case "UpdateNodegroupConfigWithContext":
		return m.Fake(d.fakeUpdateNodegroupConfigWithContext)

	case "UpdateNodegroupVersionWithContext":
		return m.Fake(d.fakeUpdateNodegroupVersionWithContext)

	case "WaitUntilClusterActive":
		return m.Fake(d.fakeWaitUntilClusterActive)

	case "WaitUntilClusterActiveWithContext":
		return m.Fake(d.fakeWaitUntilClusterActiveWithContext)

	case "WaitUntilClusterDeleted":
		return m.Fake(d.fakeWaitUntilClusterDeleted)

	case "WaitUntilClusterDeletedWithContext":
		return m.Fake(d.fakeWaitUntilClusterDeletedWithContext)

	case "WaitUntilNodegroupActive":
		return m.Fake(d.fakeWaitUntilNodegroupActive)

	case "WaitUntilNodegroupActiveWithContext":
		return m.Fake(d.fakeWaitUntilNodegroupActiveWithContext)

	case "WaitUntilNodegroupDeleted":
		return m.Fake(d.fakeWaitUntilNodegroupDeleted)

	case "WaitUntilNodegroupDeletedWithContext":
		return m.Fake(d.fakeWaitUntilNodegroupDeletedWithContext)

	default:
		return nil
	}
}

func (d *EKSDouble) CreateCluster(i0 *eks.CreateClusterInput) (r0 *eks.CreateClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCluster", i0)
	r0, _ = returns[0].(*eks.CreateClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) CreateClusterRequest(i0 *eks.CreateClusterInput) (r0 *request.Request, r1 *eks.CreateClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eks.CreateClusterOutput)
	return
}

func (d *EKSDouble) CreateClusterWithContext(i0 context.Context, i1 *eks.CreateClusterInput, i2 ...request.Option) (r0 *eks.CreateClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eks.CreateClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) fakeCreateClusterWithContext(ctx context.Context, in *eks.CreateClusterInput, _ ...request.Option) (*eks.CreateClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateCluster cancelled", ctx.Err())
	default:
		return d.CreateCluster(in)
	}
}

func (d *EKSDouble) CreateFargateProfile(i0 *eks.CreateFargateProfileInput) (r0 *eks.CreateFargateProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFargateProfile", i0)
	r0, _ = returns[0].(*eks.CreateFargateProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) CreateFargateProfileRequest(i0 *eks.CreateFargateProfileInput) (r0 *request.Request, r1 *eks.CreateFargateProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFargateProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eks.CreateFargateProfileOutput)
	return
}

func (d *EKSDouble) CreateFargateProfileWithContext(i0 context.Context, i1 *eks.CreateFargateProfileInput, i2 ...request.Option) (r0 *eks.CreateFargateProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFargateProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eks.CreateFargateProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) fakeCreateFargateProfileWithContext(ctx context.Context, in *eks.CreateFargateProfileInput, _ ...request.Option) (*eks.CreateFargateProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateFargateProfile cancelled", ctx.Err())
	default:
		return d.CreateFargateProfile(in)
	}
}

func (d *EKSDouble) CreateNodegroup(i0 *eks.CreateNodegroupInput) (r0 *eks.CreateNodegroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNodegroup", i0)
	r0, _ = returns[0].(*eks.CreateNodegroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) CreateNodegroupRequest(i0 *eks.CreateNodegroupInput) (r0 *request.Request, r1 *eks.CreateNodegroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNodegroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eks.CreateNodegroupOutput)
	return
}

func (d *EKSDouble) CreateNodegroupWithContext(i0 context.Context, i1 *eks.CreateNodegroupInput, i2 ...request.Option) (r0 *eks.CreateNodegroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNodegroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eks.CreateNodegroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) fakeCreateNodegroupWithContext(ctx context.Context, in *eks.CreateNodegroupInput, _ ...request.Option) (*eks.CreateNodegroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateNodegroup cancelled", ctx.Err())
	default:
		return d.CreateNodegroup(in)
	}
}

func (d *EKSDouble) DeleteCluster(i0 *eks.DeleteClusterInput) (r0 *eks.DeleteClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCluster", i0)
	r0, _ = returns[0].(*eks.DeleteClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) DeleteClusterRequest(i0 *eks.DeleteClusterInput) (r0 *request.Request, r1 *eks.DeleteClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eks.DeleteClusterOutput)
	return
}

func (d *EKSDouble) DeleteClusterWithContext(i0 context.Context, i1 *eks.DeleteClusterInput, i2 ...request.Option) (r0 *eks.DeleteClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eks.DeleteClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) fakeDeleteClusterWithContext(ctx context.Context, in *eks.DeleteClusterInput, _ ...request.Option) (*eks.DeleteClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteCluster cancelled", ctx.Err())
	default:
		return d.DeleteCluster(in)
	}
}

func (d *EKSDouble) DeleteFargateProfile(i0 *eks.DeleteFargateProfileInput) (r0 *eks.DeleteFargateProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFargateProfile", i0)
	r0, _ = returns[0].(*eks.DeleteFargateProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) DeleteFargateProfileRequest(i0 *eks.DeleteFargateProfileInput) (r0 *request.Request, r1 *eks.DeleteFargateProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFargateProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eks.DeleteFargateProfileOutput)
	return
}

func (d *EKSDouble) DeleteFargateProfileWithContext(i0 context.Context, i1 *eks.DeleteFargateProfileInput, i2 ...request.Option) (r0 *eks.DeleteFargateProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFargateProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eks.DeleteFargateProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) fakeDeleteFargateProfileWithContext(ctx context.Context, in *eks.DeleteFargateProfileInput, _ ...request.Option) (*eks.DeleteFargateProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteFargateProfile cancelled", ctx.Err())
	default:
		return d.DeleteFargateProfile(in)
	}
}

func (d *EKSDouble) DeleteNodegroup(i0 *eks.DeleteNodegroupInput) (r0 *eks.DeleteNodegroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNodegroup", i0)
	r0, _ = returns[0].(*eks.DeleteNodegroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) DeleteNodegroupRequest(i0 *eks.DeleteNodegroupInput) (r0 *request.Request, r1 *eks.DeleteNodegroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNodegroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eks.DeleteNodegroupOutput)
	return
}

func (d *EKSDouble) DeleteNodegroupWithContext(i0 context.Context, i1 *eks.DeleteNodegroupInput, i2 ...request.Option) (r0 *eks.DeleteNodegroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNodegroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eks.DeleteNodegroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) fakeDeleteNodegroupWithContext(ctx context.Context, in *eks.DeleteNodegroupInput, _ ...request.Option) (*eks.DeleteNodegroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteNodegroup cancelled", ctx.Err())
	default:
		return d.DeleteNodegroup(in)
	}
}

func (d *EKSDouble) DescribeCluster(i0 *eks.DescribeClusterInput) (r0 *eks.DescribeClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCluster", i0)
	r0, _ = returns[0].(*eks.DescribeClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) DescribeClusterRequest(i0 *eks.DescribeClusterInput) (r0 *request.Request, r1 *eks.DescribeClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eks.DescribeClusterOutput)
	return
}

func (d *EKSDouble) DescribeClusterWithContext(i0 context.Context, i1 *eks.DescribeClusterInput, i2 ...request.Option) (r0 *eks.DescribeClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eks.DescribeClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) fakeDescribeClusterWithContext(ctx context.Context, in *eks.DescribeClusterInput, _ ...request.Option) (*eks.DescribeClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeCluster cancelled", ctx.Err())
	default:
		return d.DescribeCluster(in)
	}
}

func (d *EKSDouble) DescribeFargateProfile(i0 *eks.DescribeFargateProfileInput) (r0 *eks.DescribeFargateProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFargateProfile", i0)
	r0, _ = returns[0].(*eks.DescribeFargateProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) DescribeFargateProfileRequest(i0 *eks.DescribeFargateProfileInput) (r0 *request.Request, r1 *eks.DescribeFargateProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFargateProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eks.DescribeFargateProfileOutput)
	return
}

func (d *EKSDouble) DescribeFargateProfileWithContext(i0 context.Context, i1 *eks.DescribeFargateProfileInput, i2 ...request.Option) (r0 *eks.DescribeFargateProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFargateProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eks.DescribeFargateProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) fakeDescribeFargateProfileWithContext(ctx context.Context, in *eks.DescribeFargateProfileInput, _ ...request.Option) (*eks.DescribeFargateProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeFargateProfile cancelled", ctx.Err())
	default:
		return d.DescribeFargateProfile(in)
	}
}

func (d *EKSDouble) DescribeNodegroup(i0 *eks.DescribeNodegroupInput) (r0 *eks.DescribeNodegroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNodegroup", i0)
	r0, _ = returns[0].(*eks.DescribeNodegroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) DescribeNodegroupRequest(i0 *eks.DescribeNodegroupInput) (r0 *request.Request, r1 *eks.DescribeNodegroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNodegroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eks.DescribeNodegroupOutput)
	return
}

func (d *EKSDouble) DescribeNodegroupWithContext(i0 context.Context, i1 *eks.DescribeNodegroupInput, i2 ...request.Option) (r0 *eks.DescribeNodegroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNodegroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eks.DescribeNodegroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) fakeDescribeNodegroupWithContext(ctx context.Context, in *eks.DescribeNodegroupInput, _ ...request.Option) (*eks.DescribeNodegroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeNodegroup cancelled", ctx.Err())
	default:
		return d.DescribeNodegroup(in)
	}
}

func (d *EKSDouble) DescribeUpdate(i0 *eks.DescribeUpdateInput) (r0 *eks.DescribeUpdateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUpdate", i0)
	r0, _ = returns[0].(*eks.DescribeUpdateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) DescribeUpdateRequest(i0 *eks.DescribeUpdateInput) (r0 *request.Request, r1 *eks.DescribeUpdateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUpdateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eks.DescribeUpdateOutput)
	return
}

func (d *EKSDouble) DescribeUpdateWithContext(i0 context.Context, i1 *eks.DescribeUpdateInput, i2 ...request.Option) (r0 *eks.DescribeUpdateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUpdateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eks.DescribeUpdateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) fakeDescribeUpdateWithContext(ctx context.Context, in *eks.DescribeUpdateInput, _ ...request.Option) (*eks.DescribeUpdateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeUpdate cancelled", ctx.Err())
	default:
		return d.DescribeUpdate(in)
	}
}

func (d *EKSDouble) ListClusters(i0 *eks.ListClustersInput) (r0 *eks.ListClustersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListClusters", i0)
	r0, _ = returns[0].(*eks.ListClustersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) ListClustersPages(i0 *eks.ListClustersInput, i1 func(*eks.ListClustersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListClustersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EKSDouble) fakeListClustersPages(in *eks.ListClustersInput, pager func(*eks.ListClustersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListClusters", paginators, in, pager)
}

func (d *EKSDouble) ListClustersPagesWithContext(i0 context.Context, i1 *eks.ListClustersInput, i2 func(*eks.ListClustersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListClustersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EKSDouble) fakeListClustersPagesWithContext(ctx context.Context, in *eks.ListClustersInput, pager func(*eks.ListClustersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListClusters", paginators, ctx, in, pager, options...)
}

func (d *EKSDouble) ListClustersRequest(i0 *eks.ListClustersInput) (r0 *request.Request, r1 *eks.ListClustersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListClustersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eks.ListClustersOutput)
	return
}

func (d *EKSDouble) ListClustersWithContext(i0 context.Context, i1 *eks.ListClustersInput, i2 ...request.Option) (r0 *eks.ListClustersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListClustersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eks.ListClustersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) fakeListClustersWithContext(ctx context.Context, in *eks.ListClustersInput, _ ...request.Option) (*eks.ListClustersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListClusters cancelled", ctx.Err())
	default:
		return d.ListClusters(in)
	}
}

func (d *EKSDouble) ListFargateProfiles(i0 *eks.ListFargateProfilesInput) (r0 *eks.ListFargateProfilesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFargateProfiles", i0)
	r0, _ = returns[0].(*eks.ListFargateProfilesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) ListFargateProfilesPages(i0 *eks.ListFargateProfilesInput, i1 func(*eks.ListFargateProfilesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFargateProfilesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EKSDouble) fakeListFargateProfilesPages(in *eks.ListFargateProfilesInput, pager func(*eks.ListFargateProfilesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListFargateProfiles", paginators, in, pager)
}

func (d *EKSDouble) ListFargateProfilesPagesWithContext(i0 context.Context, i1 *eks.ListFargateProfilesInput, i2 func(*eks.ListFargateProfilesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFargateProfilesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EKSDouble) fakeListFargateProfilesPagesWithContext(ctx context.Context, in *eks.ListFargateProfilesInput, pager func(*eks.ListFargateProfilesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListFargateProfiles", paginators, ctx, in, pager, options...)
}

func (d *EKSDouble) ListFargateProfilesRequest(i0 *eks.ListFargateProfilesInput) (r0 *request.Request, r1 *eks.ListFargateProfilesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFargateProfilesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eks.ListFargateProfilesOutput)
	return
}

func (d *EKSDouble) ListFargateProfilesWithContext(i0 context.Context, i1 *eks.ListFargateProfilesInput, i2 ...request.Option) (r0 *eks.ListFargateProfilesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFargateProfilesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eks.ListFargateProfilesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) fakeListFargateProfilesWithContext(ctx context.Context, in *eks.ListFargateProfilesInput, _ ...request.Option) (*eks.ListFargateProfilesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListFargateProfiles cancelled", ctx.Err())
	default:
		return d.ListFargateProfiles(in)
	}
}

func (d *EKSDouble) ListNodegroups(i0 *eks.ListNodegroupsInput) (r0 *eks.ListNodegroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListNodegroups", i0)
	r0, _ = returns[0].(*eks.ListNodegroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) ListNodegroupsPages(i0 *eks.ListNodegroupsInput, i1 func(*eks.ListNodegroupsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListNodegroupsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EKSDouble) fakeListNodegroupsPages(in *eks.ListNodegroupsInput, pager func(*eks.ListNodegroupsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListNodegroups", paginators, in, pager)
}

func (d *EKSDouble) ListNodegroupsPagesWithContext(i0 context.Context, i1 *eks.ListNodegroupsInput, i2 func(*eks.ListNodegroupsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListNodegroupsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EKSDouble) fakeListNodegroupsPagesWithContext(ctx context.Context, in *eks.ListNodegroupsInput, pager func(*eks.ListNodegroupsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListNodegroups", paginators, ctx, in, pager, options...)
}

func (d *EKSDouble) ListNodegroupsRequest(i0 *eks.ListNodegroupsInput) (r0 *request.Request, r1 *eks.ListNodegroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListNodegroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eks.ListNodegroupsOutput)
	return
}

func (d *EKSDouble) ListNodegroupsWithContext(i0 context.Context, i1 *eks.ListNodegroupsInput, i2 ...request.Option) (r0 *eks.ListNodegroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListNodegroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eks.ListNodegroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) fakeListNodegroupsWithContext(ctx context.Context, in *eks.ListNodegroupsInput, _ ...request.Option) (*eks.ListNodegroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListNodegroups cancelled", ctx.Err())
	default:
		return d.ListNodegroups(in)
	}
}

func (d *EKSDouble) ListTagsForResource(i0 *eks.ListTagsForResourceInput) (r0 *eks.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*eks.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) ListTagsForResourceRequest(i0 *eks.ListTagsForResourceInput) (r0 *request.Request, r1 *eks.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eks.ListTagsForResourceOutput)
	return
}

func (d *EKSDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *eks.ListTagsForResourceInput, i2 ...request.Option) (r0 *eks.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eks.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *eks.ListTagsForResourceInput, _ ...request.Option) (*eks.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *EKSDouble) ListUpdates(i0 *eks.ListUpdatesInput) (r0 *eks.ListUpdatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUpdates", i0)
	r0, _ = returns[0].(*eks.ListUpdatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) ListUpdatesPages(i0 *eks.ListUpdatesInput, i1 func(*eks.ListUpdatesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUpdatesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EKSDouble) fakeListUpdatesPages(in *eks.ListUpdatesInput, pager func(*eks.ListUpdatesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListUpdates", paginators, in, pager)
}

func (d *EKSDouble) ListUpdatesPagesWithContext(i0 context.Context, i1 *eks.ListUpdatesInput, i2 func(*eks.ListUpdatesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUpdatesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EKSDouble) fakeListUpdatesPagesWithContext(ctx context.Context, in *eks.ListUpdatesInput, pager func(*eks.ListUpdatesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListUpdates", paginators, ctx, in, pager, options...)
}

func (d *EKSDouble) ListUpdatesRequest(i0 *eks.ListUpdatesInput) (r0 *request.Request, r1 *eks.ListUpdatesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUpdatesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eks.ListUpdatesOutput)
	return
}

func (d *EKSDouble) ListUpdatesWithContext(i0 context.Context, i1 *eks.ListUpdatesInput, i2 ...request.Option) (r0 *eks.ListUpdatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUpdatesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eks.ListUpdatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) fakeListUpdatesWithContext(ctx context.Context, in *eks.ListUpdatesInput, _ ...request.Option) (*eks.ListUpdatesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListUpdates cancelled", ctx.Err())
	default:
		return d.ListUpdates(in)
	}
}

func (d *EKSDouble) TagResource(i0 *eks.TagResourceInput) (r0 *eks.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*eks.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) TagResourceRequest(i0 *eks.TagResourceInput) (r0 *request.Request, r1 *eks.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eks.TagResourceOutput)
	return
}

func (d *EKSDouble) TagResourceWithContext(i0 context.Context, i1 *eks.TagResourceInput, i2 ...request.Option) (r0 *eks.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eks.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) fakeTagResourceWithContext(ctx context.Context, in *eks.TagResourceInput, _ ...request.Option) (*eks.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *EKSDouble) UntagResource(i0 *eks.UntagResourceInput) (r0 *eks.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*eks.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) UntagResourceRequest(i0 *eks.UntagResourceInput) (r0 *request.Request, r1 *eks.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eks.UntagResourceOutput)
	return
}

func (d *EKSDouble) UntagResourceWithContext(i0 context.Context, i1 *eks.UntagResourceInput, i2 ...request.Option) (r0 *eks.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eks.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) fakeUntagResourceWithContext(ctx context.Context, in *eks.UntagResourceInput, _ ...request.Option) (*eks.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *EKSDouble) UpdateClusterConfig(i0 *eks.UpdateClusterConfigInput) (r0 *eks.UpdateClusterConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateClusterConfig", i0)
	r0, _ = returns[0].(*eks.UpdateClusterConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) UpdateClusterConfigRequest(i0 *eks.UpdateClusterConfigInput) (r0 *request.Request, r1 *eks.UpdateClusterConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateClusterConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eks.UpdateClusterConfigOutput)
	return
}

func (d *EKSDouble) UpdateClusterConfigWithContext(i0 context.Context, i1 *eks.UpdateClusterConfigInput, i2 ...request.Option) (r0 *eks.UpdateClusterConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateClusterConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eks.UpdateClusterConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) fakeUpdateClusterConfigWithContext(ctx context.Context, in *eks.UpdateClusterConfigInput, _ ...request.Option) (*eks.UpdateClusterConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateClusterConfig cancelled", ctx.Err())
	default:
		return d.UpdateClusterConfig(in)
	}
}

func (d *EKSDouble) UpdateClusterVersion(i0 *eks.UpdateClusterVersionInput) (r0 *eks.UpdateClusterVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateClusterVersion", i0)
	r0, _ = returns[0].(*eks.UpdateClusterVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) UpdateClusterVersionRequest(i0 *eks.UpdateClusterVersionInput) (r0 *request.Request, r1 *eks.UpdateClusterVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateClusterVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eks.UpdateClusterVersionOutput)
	return
}

func (d *EKSDouble) UpdateClusterVersionWithContext(i0 context.Context, i1 *eks.UpdateClusterVersionInput, i2 ...request.Option) (r0 *eks.UpdateClusterVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateClusterVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eks.UpdateClusterVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) fakeUpdateClusterVersionWithContext(ctx context.Context, in *eks.UpdateClusterVersionInput, _ ...request.Option) (*eks.UpdateClusterVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateClusterVersion cancelled", ctx.Err())
	default:
		return d.UpdateClusterVersion(in)
	}
}

func (d *EKSDouble) UpdateNodegroupConfig(i0 *eks.UpdateNodegroupConfigInput) (r0 *eks.UpdateNodegroupConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateNodegroupConfig", i0)
	r0, _ = returns[0].(*eks.UpdateNodegroupConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) UpdateNodegroupConfigRequest(i0 *eks.UpdateNodegroupConfigInput) (r0 *request.Request, r1 *eks.UpdateNodegroupConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateNodegroupConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eks.UpdateNodegroupConfigOutput)
	return
}

func (d *EKSDouble) UpdateNodegroupConfigWithContext(i0 context.Context, i1 *eks.UpdateNodegroupConfigInput, i2 ...request.Option) (r0 *eks.UpdateNodegroupConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateNodegroupConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eks.UpdateNodegroupConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) fakeUpdateNodegroupConfigWithContext(ctx context.Context, in *eks.UpdateNodegroupConfigInput, _ ...request.Option) (*eks.UpdateNodegroupConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateNodegroupConfig cancelled", ctx.Err())
	default:
		return d.UpdateNodegroupConfig(in)
	}
}

func (d *EKSDouble) UpdateNodegroupVersion(i0 *eks.UpdateNodegroupVersionInput) (r0 *eks.UpdateNodegroupVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateNodegroupVersion", i0)
	r0, _ = returns[0].(*eks.UpdateNodegroupVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) UpdateNodegroupVersionRequest(i0 *eks.UpdateNodegroupVersionInput) (r0 *request.Request, r1 *eks.UpdateNodegroupVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateNodegroupVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*eks.UpdateNodegroupVersionOutput)
	return
}

func (d *EKSDouble) UpdateNodegroupVersionWithContext(i0 context.Context, i1 *eks.UpdateNodegroupVersionInput, i2 ...request.Option) (r0 *eks.UpdateNodegroupVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateNodegroupVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*eks.UpdateNodegroupVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EKSDouble) fakeUpdateNodegroupVersionWithContext(ctx context.Context, in *eks.UpdateNodegroupVersionInput, _ ...request.Option) (*eks.UpdateNodegroupVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateNodegroupVersion cancelled", ctx.Err())
	default:
		return d.UpdateNodegroupVersion(in)
	}
}

func (d *EKSDouble) WaitUntilClusterActive(i0 *eks.DescribeClusterInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilClusterActive", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EKSDouble) fakeWaitUntilClusterActive(in *eks.DescribeClusterInput) error {
	return d.WaitUntil("ClusterActive", waiters, in)
}

func (d *EKSDouble) WaitUntilClusterActiveWithContext(i0 context.Context, i1 *eks.DescribeClusterInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilClusterActiveWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EKSDouble) fakeWaitUntilClusterActiveWithContext(ctx context.Context, in *eks.DescribeClusterInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("ClusterActive", waiters, ctx, in, waitOption...)
}

func (d *EKSDouble) WaitUntilClusterDeleted(i0 *eks.DescribeClusterInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilClusterDeleted", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EKSDouble) fakeWaitUntilClusterDeleted(in *eks.DescribeClusterInput) error {
	return d.WaitUntil("ClusterDeleted", waiters, in)
}

func (d *EKSDouble) WaitUntilClusterDeletedWithContext(i0 context.Context, i1 *eks.DescribeClusterInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilClusterDeletedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EKSDouble) fakeWaitUntilClusterDeletedWithContext(ctx context.Context, in *eks.DescribeClusterInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("ClusterDeleted", waiters, ctx, in, waitOption...)
}

func (d *EKSDouble) WaitUntilNodegroupActive(i0 *eks.DescribeNodegroupInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilNodegroupActive", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EKSDouble) fakeWaitUntilNodegroupActive(in *eks.DescribeNodegroupInput) error {
	return d.WaitUntil("NodegroupActive", waiters, in)
}

func (d *EKSDouble) WaitUntilNodegroupActiveWithContext(i0 context.Context, i1 *eks.DescribeNodegroupInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilNodegroupActiveWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EKSDouble) fakeWaitUntilNodegroupActiveWithContext(ctx context.Context, in *eks.DescribeNodegroupInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("NodegroupActive", waiters, ctx, in, waitOption...)
}

func (d *EKSDouble) WaitUntilNodegroupDeleted(i0 *eks.DescribeNodegroupInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilNodegroupDeleted", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EKSDouble) fakeWaitUntilNodegroupDeleted(in *eks.DescribeNodegroupInput) error {
	return d.WaitUntil("NodegroupDeleted", waiters, in)
}

func (d *EKSDouble) WaitUntilNodegroupDeletedWithContext(i0 context.Context, i1 *eks.DescribeNodegroupInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilNodegroupDeletedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EKSDouble) fakeWaitUntilNodegroupDeletedWithContext(ctx context.Context, in *eks.DescribeNodegroupInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("NodegroupDeleted", waiters, ctx, in, waitOption...)
}
