// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:11:39+11:00

// Package cloudsearchdomaindouble provides a TestDouble implementation of cloudsearchdomainiface.CloudSearchDomainAPI
package cloudsearchdomaindouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/cloudsearchdomain"
	"github.com/aws/aws-sdk-go/service/cloudsearchdomain/cloudsearchdomainiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// CloudSearchDomainDouble is TestDouble for cloudsearchdomainiface.CloudSearchDomainAPI
type CloudSearchDomainDouble struct {
	cloudsearchdomainiface.CloudSearchDomainAPI
	*awsdouble.AWSTestDouble
}

// Constructor for CloudSearchDomainDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *CloudSearchDomainDouble {
	result := &CloudSearchDomainDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*cloudsearchdomainiface.CloudSearchDomainAPI)(nil), configurators...)
	return result
}

func (d *CloudSearchDomainDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *CloudSearchDomainDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "SearchWithContext":
		return m.Fake(d.fakeSearchWithContext)

	case "SuggestWithContext":
		return m.Fake(d.fakeSuggestWithContext)

	case "UploadDocumentsWithContext":
		return m.Fake(d.fakeUploadDocumentsWithContext)

	default:
		return nil
	}
}

func (d *CloudSearchDomainDouble) Search(i0 *cloudsearchdomain.SearchInput) (r0 *cloudsearchdomain.SearchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("Search", i0)
	r0, _ = returns[0].(*cloudsearchdomain.SearchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDomainDouble) SearchRequest(i0 *cloudsearchdomain.SearchInput) (r0 *request.Request, r1 *cloudsearchdomain.SearchOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudsearchdomain.SearchOutput)
	return
}

func (d *CloudSearchDomainDouble) SearchWithContext(i0 context.Context, i1 *cloudsearchdomain.SearchInput, i2 ...request.Option) (r0 *cloudsearchdomain.SearchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudsearchdomain.SearchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDomainDouble) fakeSearchWithContext(ctx context.Context, in *cloudsearchdomain.SearchInput, _ ...request.Option) (*cloudsearchdomain.SearchOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "Search cancelled", ctx.Err())
	default:
		return d.Search(in)
	}
}

func (d *CloudSearchDomainDouble) Suggest(i0 *cloudsearchdomain.SuggestInput) (r0 *cloudsearchdomain.SuggestOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("Suggest", i0)
	r0, _ = returns[0].(*cloudsearchdomain.SuggestOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDomainDouble) SuggestRequest(i0 *cloudsearchdomain.SuggestInput) (r0 *request.Request, r1 *cloudsearchdomain.SuggestOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SuggestRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudsearchdomain.SuggestOutput)
	return
}

func (d *CloudSearchDomainDouble) SuggestWithContext(i0 context.Context, i1 *cloudsearchdomain.SuggestInput, i2 ...request.Option) (r0 *cloudsearchdomain.SuggestOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SuggestWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudsearchdomain.SuggestOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDomainDouble) fakeSuggestWithContext(ctx context.Context, in *cloudsearchdomain.SuggestInput, _ ...request.Option) (*cloudsearchdomain.SuggestOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "Suggest cancelled", ctx.Err())
	default:
		return d.Suggest(in)
	}
}

func (d *CloudSearchDomainDouble) UploadDocuments(i0 *cloudsearchdomain.UploadDocumentsInput) (r0 *cloudsearchdomain.UploadDocumentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UploadDocuments", i0)
	r0, _ = returns[0].(*cloudsearchdomain.UploadDocumentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDomainDouble) UploadDocumentsRequest(i0 *cloudsearchdomain.UploadDocumentsInput) (r0 *request.Request, r1 *cloudsearchdomain.UploadDocumentsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UploadDocumentsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudsearchdomain.UploadDocumentsOutput)
	return
}

func (d *CloudSearchDomainDouble) UploadDocumentsWithContext(i0 context.Context, i1 *cloudsearchdomain.UploadDocumentsInput, i2 ...request.Option) (r0 *cloudsearchdomain.UploadDocumentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UploadDocumentsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudsearchdomain.UploadDocumentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudSearchDomainDouble) fakeUploadDocumentsWithContext(ctx context.Context, in *cloudsearchdomain.UploadDocumentsInput, _ ...request.Option) (*cloudsearchdomain.UploadDocumentsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UploadDocuments cancelled", ctx.Err())
	default:
		return d.UploadDocuments(in)
	}
}
