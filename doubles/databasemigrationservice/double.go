// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:12:10+11:00

// Package databasemigrationservicedouble provides a TestDouble implementation of databasemigrationserviceiface.DatabaseMigrationServiceAPI
package databasemigrationservicedouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/databasemigrationservice"
	"github.com/aws/aws-sdk-go/service/databasemigrationservice/databasemigrationserviceiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// DatabaseMigrationServiceDouble is TestDouble for databasemigrationserviceiface.DatabaseMigrationServiceAPI
type DatabaseMigrationServiceDouble struct {
	databasemigrationserviceiface.DatabaseMigrationServiceAPI
	*awsdouble.AWSTestDouble
}

// Constructor for DatabaseMigrationServiceDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *DatabaseMigrationServiceDouble {
	result := &DatabaseMigrationServiceDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*databasemigrationserviceiface.DatabaseMigrationServiceAPI)(nil), configurators...)
	return result
}

func (d *DatabaseMigrationServiceDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *DatabaseMigrationServiceDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AddTagsToResourceWithContext":
		return m.Fake(d.fakeAddTagsToResourceWithContext)

	case "ApplyPendingMaintenanceActionWithContext":
		return m.Fake(d.fakeApplyPendingMaintenanceActionWithContext)

	case "CreateEndpointWithContext":
		return m.Fake(d.fakeCreateEndpointWithContext)

	case "CreateEventSubscriptionWithContext":
		return m.Fake(d.fakeCreateEventSubscriptionWithContext)

	case "CreateReplicationInstanceWithContext":
		return m.Fake(d.fakeCreateReplicationInstanceWithContext)

	case "CreateReplicationSubnetGroupWithContext":
		return m.Fake(d.fakeCreateReplicationSubnetGroupWithContext)

	case "CreateReplicationTaskWithContext":
		return m.Fake(d.fakeCreateReplicationTaskWithContext)

	case "DeleteCertificateWithContext":
		return m.Fake(d.fakeDeleteCertificateWithContext)

	case "DeleteConnectionWithContext":
		return m.Fake(d.fakeDeleteConnectionWithContext)

	case "DeleteEndpointWithContext":
		return m.Fake(d.fakeDeleteEndpointWithContext)

	case "DeleteEventSubscriptionWithContext":
		return m.Fake(d.fakeDeleteEventSubscriptionWithContext)

	case "DeleteReplicationInstanceWithContext":
		return m.Fake(d.fakeDeleteReplicationInstanceWithContext)

	case "DeleteReplicationSubnetGroupWithContext":
		return m.Fake(d.fakeDeleteReplicationSubnetGroupWithContext)

	case "DeleteReplicationTaskWithContext":
		return m.Fake(d.fakeDeleteReplicationTaskWithContext)

	case "DescribeAccountAttributesWithContext":
		return m.Fake(d.fakeDescribeAccountAttributesWithContext)

	case "DescribeCertificatesPages":
		return m.Fake(d.fakeDescribeCertificatesPages)

	case "DescribeCertificatesPagesWithContext":
		return m.Fake(d.fakeDescribeCertificatesPagesWithContext)

	case "DescribeCertificatesWithContext":
		return m.Fake(d.fakeDescribeCertificatesWithContext)

	case "DescribeConnectionsPages":
		return m.Fake(d.fakeDescribeConnectionsPages)

	case "DescribeConnectionsPagesWithContext":
		return m.Fake(d.fakeDescribeConnectionsPagesWithContext)

	case "DescribeConnectionsWithContext":
		return m.Fake(d.fakeDescribeConnectionsWithContext)

	case "DescribeEndpointTypesPages":
		return m.Fake(d.fakeDescribeEndpointTypesPages)

	case "DescribeEndpointTypesPagesWithContext":
		return m.Fake(d.fakeDescribeEndpointTypesPagesWithContext)

	case "DescribeEndpointTypesWithContext":
		return m.Fake(d.fakeDescribeEndpointTypesWithContext)

	case "DescribeEndpointsPages":
		return m.Fake(d.fakeDescribeEndpointsPages)

	case "DescribeEndpointsPagesWithContext":
		return m.Fake(d.fakeDescribeEndpointsPagesWithContext)

	case "DescribeEndpointsWithContext":
		return m.Fake(d.fakeDescribeEndpointsWithContext)

	case "DescribeEventCategoriesWithContext":
		return m.Fake(d.fakeDescribeEventCategoriesWithContext)

	case "DescribeEventSubscriptionsPages":
		return m.Fake(d.fakeDescribeEventSubscriptionsPages)

	case "DescribeEventSubscriptionsPagesWithContext":
		return m.Fake(d.fakeDescribeEventSubscriptionsPagesWithContext)

	case "DescribeEventSubscriptionsWithContext":
		return m.Fake(d.fakeDescribeEventSubscriptionsWithContext)

	case "DescribeEventsPages":
		return m.Fake(d.fakeDescribeEventsPages)

	case "DescribeEventsPagesWithContext":
		return m.Fake(d.fakeDescribeEventsPagesWithContext)

	case "DescribeEventsWithContext":
		return m.Fake(d.fakeDescribeEventsWithContext)

	case "DescribeOrderableReplicationInstancesPages":
		return m.Fake(d.fakeDescribeOrderableReplicationInstancesPages)

	case "DescribeOrderableReplicationInstancesPagesWithContext":
		return m.Fake(d.fakeDescribeOrderableReplicationInstancesPagesWithContext)

	case "DescribeOrderableReplicationInstancesWithContext":
		return m.Fake(d.fakeDescribeOrderableReplicationInstancesWithContext)

	case "DescribePendingMaintenanceActionsPages":
		return m.Fake(d.fakeDescribePendingMaintenanceActionsPages)

	case "DescribePendingMaintenanceActionsPagesWithContext":
		return m.Fake(d.fakeDescribePendingMaintenanceActionsPagesWithContext)

	case "DescribePendingMaintenanceActionsWithContext":
		return m.Fake(d.fakeDescribePendingMaintenanceActionsWithContext)

	case "DescribeRefreshSchemasStatusWithContext":
		return m.Fake(d.fakeDescribeRefreshSchemasStatusWithContext)

	case "DescribeReplicationInstanceTaskLogsPages":
		return m.Fake(d.fakeDescribeReplicationInstanceTaskLogsPages)

	case "DescribeReplicationInstanceTaskLogsPagesWithContext":
		return m.Fake(d.fakeDescribeReplicationInstanceTaskLogsPagesWithContext)

	case "DescribeReplicationInstanceTaskLogsWithContext":
		return m.Fake(d.fakeDescribeReplicationInstanceTaskLogsWithContext)

	case "DescribeReplicationInstancesPages":
		return m.Fake(d.fakeDescribeReplicationInstancesPages)

	case "DescribeReplicationInstancesPagesWithContext":
		return m.Fake(d.fakeDescribeReplicationInstancesPagesWithContext)

	case "DescribeReplicationInstancesWithContext":
		return m.Fake(d.fakeDescribeReplicationInstancesWithContext)

	case "DescribeReplicationSubnetGroupsPages":
		return m.Fake(d.fakeDescribeReplicationSubnetGroupsPages)

	case "DescribeReplicationSubnetGroupsPagesWithContext":
		return m.Fake(d.fakeDescribeReplicationSubnetGroupsPagesWithContext)

	case "DescribeReplicationSubnetGroupsWithContext":
		return m.Fake(d.fakeDescribeReplicationSubnetGroupsWithContext)

	case "DescribeReplicationTaskAssessmentResultsPages":
		return m.Fake(d.fakeDescribeReplicationTaskAssessmentResultsPages)

	case "DescribeReplicationTaskAssessmentResultsPagesWithContext":
		return m.Fake(d.fakeDescribeReplicationTaskAssessmentResultsPagesWithContext)

	case "DescribeReplicationTaskAssessmentResultsWithContext":
		return m.Fake(d.fakeDescribeReplicationTaskAssessmentResultsWithContext)

	case "DescribeReplicationTasksPages":
		return m.Fake(d.fakeDescribeReplicationTasksPages)

	case "DescribeReplicationTasksPagesWithContext":
		return m.Fake(d.fakeDescribeReplicationTasksPagesWithContext)

	case "DescribeReplicationTasksWithContext":
		return m.Fake(d.fakeDescribeReplicationTasksWithContext)

	case "DescribeSchemasPages":
		return m.Fake(d.fakeDescribeSchemasPages)

	case "DescribeSchemasPagesWithContext":
		return m.Fake(d.fakeDescribeSchemasPagesWithContext)

	case "DescribeSchemasWithContext":
		return m.Fake(d.fakeDescribeSchemasWithContext)

	case "DescribeTableStatisticsPages":
		return m.Fake(d.fakeDescribeTableStatisticsPages)

	case "DescribeTableStatisticsPagesWithContext":
		return m.Fake(d.fakeDescribeTableStatisticsPagesWithContext)

	case "DescribeTableStatisticsWithContext":
		return m.Fake(d.fakeDescribeTableStatisticsWithContext)

	case "ImportCertificateWithContext":
		return m.Fake(d.fakeImportCertificateWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "ModifyEndpointWithContext":
		return m.Fake(d.fakeModifyEndpointWithContext)

	case "ModifyEventSubscriptionWithContext":
		return m.Fake(d.fakeModifyEventSubscriptionWithContext)

	case "ModifyReplicationInstanceWithContext":
		return m.Fake(d.fakeModifyReplicationInstanceWithContext)

	case "ModifyReplicationSubnetGroupWithContext":
		return m.Fake(d.fakeModifyReplicationSubnetGroupWithContext)

	case "ModifyReplicationTaskWithContext":
		return m.Fake(d.fakeModifyReplicationTaskWithContext)

	case "RebootReplicationInstanceWithContext":
		return m.Fake(d.fakeRebootReplicationInstanceWithContext)

	case "RefreshSchemasWithContext":
		return m.Fake(d.fakeRefreshSchemasWithContext)

	case "ReloadTablesWithContext":
		return m.Fake(d.fakeReloadTablesWithContext)

	case "RemoveTagsFromResourceWithContext":
		return m.Fake(d.fakeRemoveTagsFromResourceWithContext)

	case "StartReplicationTaskAssessmentWithContext":
		return m.Fake(d.fakeStartReplicationTaskAssessmentWithContext)

	case "StartReplicationTaskWithContext":
		return m.Fake(d.fakeStartReplicationTaskWithContext)

	case "StopReplicationTaskWithContext":
		return m.Fake(d.fakeStopReplicationTaskWithContext)

	case "TestConnectionWithContext":
		return m.Fake(d.fakeTestConnectionWithContext)

	case "WaitUntilEndpointDeleted":
		return m.Fake(d.fakeWaitUntilEndpointDeleted)

	case "WaitUntilEndpointDeletedWithContext":
		return m.Fake(d.fakeWaitUntilEndpointDeletedWithContext)

	case "WaitUntilReplicationInstanceAvailable":
		return m.Fake(d.fakeWaitUntilReplicationInstanceAvailable)

	case "WaitUntilReplicationInstanceAvailableWithContext":
		return m.Fake(d.fakeWaitUntilReplicationInstanceAvailableWithContext)

	case "WaitUntilReplicationInstanceDeleted":
		return m.Fake(d.fakeWaitUntilReplicationInstanceDeleted)

	case "WaitUntilReplicationInstanceDeletedWithContext":
		return m.Fake(d.fakeWaitUntilReplicationInstanceDeletedWithContext)

	case "WaitUntilReplicationTaskDeleted":
		return m.Fake(d.fakeWaitUntilReplicationTaskDeleted)

	case "WaitUntilReplicationTaskDeletedWithContext":
		return m.Fake(d.fakeWaitUntilReplicationTaskDeletedWithContext)

	case "WaitUntilReplicationTaskReady":
		return m.Fake(d.fakeWaitUntilReplicationTaskReady)

	case "WaitUntilReplicationTaskReadyWithContext":
		return m.Fake(d.fakeWaitUntilReplicationTaskReadyWithContext)

	case "WaitUntilReplicationTaskRunning":
		return m.Fake(d.fakeWaitUntilReplicationTaskRunning)

	case "WaitUntilReplicationTaskRunningWithContext":
		return m.Fake(d.fakeWaitUntilReplicationTaskRunningWithContext)

	case "WaitUntilReplicationTaskStopped":
		return m.Fake(d.fakeWaitUntilReplicationTaskStopped)

	case "WaitUntilReplicationTaskStoppedWithContext":
		return m.Fake(d.fakeWaitUntilReplicationTaskStoppedWithContext)

	case "WaitUntilTestConnectionSucceeds":
		return m.Fake(d.fakeWaitUntilTestConnectionSucceeds)

	case "WaitUntilTestConnectionSucceedsWithContext":
		return m.Fake(d.fakeWaitUntilTestConnectionSucceedsWithContext)

	default:
		return nil
	}
}

func (d *DatabaseMigrationServiceDouble) AddTagsToResource(i0 *databasemigrationservice.AddTagsToResourceInput) (r0 *databasemigrationservice.AddTagsToResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToResource", i0)
	r0, _ = returns[0].(*databasemigrationservice.AddTagsToResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) AddTagsToResourceRequest(i0 *databasemigrationservice.AddTagsToResourceInput) (r0 *request.Request, r1 *databasemigrationservice.AddTagsToResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.AddTagsToResourceOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) AddTagsToResourceWithContext(i0 context.Context, i1 *databasemigrationservice.AddTagsToResourceInput, i2 ...request.Option) (r0 *databasemigrationservice.AddTagsToResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.AddTagsToResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeAddTagsToResourceWithContext(ctx context.Context, in *databasemigrationservice.AddTagsToResourceInput, _ ...request.Option) (*databasemigrationservice.AddTagsToResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddTagsToResource cancelled", ctx.Err())
	default:
		return d.AddTagsToResource(in)
	}
}

func (d *DatabaseMigrationServiceDouble) ApplyPendingMaintenanceAction(i0 *databasemigrationservice.ApplyPendingMaintenanceActionInput) (r0 *databasemigrationservice.ApplyPendingMaintenanceActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ApplyPendingMaintenanceAction", i0)
	r0, _ = returns[0].(*databasemigrationservice.ApplyPendingMaintenanceActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) ApplyPendingMaintenanceActionRequest(i0 *databasemigrationservice.ApplyPendingMaintenanceActionInput) (r0 *request.Request, r1 *databasemigrationservice.ApplyPendingMaintenanceActionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ApplyPendingMaintenanceActionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.ApplyPendingMaintenanceActionOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) ApplyPendingMaintenanceActionWithContext(i0 context.Context, i1 *databasemigrationservice.ApplyPendingMaintenanceActionInput, i2 ...request.Option) (r0 *databasemigrationservice.ApplyPendingMaintenanceActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ApplyPendingMaintenanceActionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.ApplyPendingMaintenanceActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeApplyPendingMaintenanceActionWithContext(ctx context.Context, in *databasemigrationservice.ApplyPendingMaintenanceActionInput, _ ...request.Option) (*databasemigrationservice.ApplyPendingMaintenanceActionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ApplyPendingMaintenanceAction cancelled", ctx.Err())
	default:
		return d.ApplyPendingMaintenanceAction(in)
	}
}

func (d *DatabaseMigrationServiceDouble) CreateEndpoint(i0 *databasemigrationservice.CreateEndpointInput) (r0 *databasemigrationservice.CreateEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEndpoint", i0)
	r0, _ = returns[0].(*databasemigrationservice.CreateEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) CreateEndpointRequest(i0 *databasemigrationservice.CreateEndpointInput) (r0 *request.Request, r1 *databasemigrationservice.CreateEndpointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEndpointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.CreateEndpointOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) CreateEndpointWithContext(i0 context.Context, i1 *databasemigrationservice.CreateEndpointInput, i2 ...request.Option) (r0 *databasemigrationservice.CreateEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEndpointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.CreateEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeCreateEndpointWithContext(ctx context.Context, in *databasemigrationservice.CreateEndpointInput, _ ...request.Option) (*databasemigrationservice.CreateEndpointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateEndpoint cancelled", ctx.Err())
	default:
		return d.CreateEndpoint(in)
	}
}

func (d *DatabaseMigrationServiceDouble) CreateEventSubscription(i0 *databasemigrationservice.CreateEventSubscriptionInput) (r0 *databasemigrationservice.CreateEventSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEventSubscription", i0)
	r0, _ = returns[0].(*databasemigrationservice.CreateEventSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) CreateEventSubscriptionRequest(i0 *databasemigrationservice.CreateEventSubscriptionInput) (r0 *request.Request, r1 *databasemigrationservice.CreateEventSubscriptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEventSubscriptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.CreateEventSubscriptionOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) CreateEventSubscriptionWithContext(i0 context.Context, i1 *databasemigrationservice.CreateEventSubscriptionInput, i2 ...request.Option) (r0 *databasemigrationservice.CreateEventSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEventSubscriptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.CreateEventSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeCreateEventSubscriptionWithContext(ctx context.Context, in *databasemigrationservice.CreateEventSubscriptionInput, _ ...request.Option) (*databasemigrationservice.CreateEventSubscriptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateEventSubscription cancelled", ctx.Err())
	default:
		return d.CreateEventSubscription(in)
	}
}

func (d *DatabaseMigrationServiceDouble) CreateReplicationInstance(i0 *databasemigrationservice.CreateReplicationInstanceInput) (r0 *databasemigrationservice.CreateReplicationInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateReplicationInstance", i0)
	r0, _ = returns[0].(*databasemigrationservice.CreateReplicationInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) CreateReplicationInstanceRequest(i0 *databasemigrationservice.CreateReplicationInstanceInput) (r0 *request.Request, r1 *databasemigrationservice.CreateReplicationInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateReplicationInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.CreateReplicationInstanceOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) CreateReplicationInstanceWithContext(i0 context.Context, i1 *databasemigrationservice.CreateReplicationInstanceInput, i2 ...request.Option) (r0 *databasemigrationservice.CreateReplicationInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateReplicationInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.CreateReplicationInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeCreateReplicationInstanceWithContext(ctx context.Context, in *databasemigrationservice.CreateReplicationInstanceInput, _ ...request.Option) (*databasemigrationservice.CreateReplicationInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateReplicationInstance cancelled", ctx.Err())
	default:
		return d.CreateReplicationInstance(in)
	}
}

func (d *DatabaseMigrationServiceDouble) CreateReplicationSubnetGroup(i0 *databasemigrationservice.CreateReplicationSubnetGroupInput) (r0 *databasemigrationservice.CreateReplicationSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateReplicationSubnetGroup", i0)
	r0, _ = returns[0].(*databasemigrationservice.CreateReplicationSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) CreateReplicationSubnetGroupRequest(i0 *databasemigrationservice.CreateReplicationSubnetGroupInput) (r0 *request.Request, r1 *databasemigrationservice.CreateReplicationSubnetGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateReplicationSubnetGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.CreateReplicationSubnetGroupOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) CreateReplicationSubnetGroupWithContext(i0 context.Context, i1 *databasemigrationservice.CreateReplicationSubnetGroupInput, i2 ...request.Option) (r0 *databasemigrationservice.CreateReplicationSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateReplicationSubnetGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.CreateReplicationSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeCreateReplicationSubnetGroupWithContext(ctx context.Context, in *databasemigrationservice.CreateReplicationSubnetGroupInput, _ ...request.Option) (*databasemigrationservice.CreateReplicationSubnetGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateReplicationSubnetGroup cancelled", ctx.Err())
	default:
		return d.CreateReplicationSubnetGroup(in)
	}
}

func (d *DatabaseMigrationServiceDouble) CreateReplicationTask(i0 *databasemigrationservice.CreateReplicationTaskInput) (r0 *databasemigrationservice.CreateReplicationTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateReplicationTask", i0)
	r0, _ = returns[0].(*databasemigrationservice.CreateReplicationTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) CreateReplicationTaskRequest(i0 *databasemigrationservice.CreateReplicationTaskInput) (r0 *request.Request, r1 *databasemigrationservice.CreateReplicationTaskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateReplicationTaskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.CreateReplicationTaskOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) CreateReplicationTaskWithContext(i0 context.Context, i1 *databasemigrationservice.CreateReplicationTaskInput, i2 ...request.Option) (r0 *databasemigrationservice.CreateReplicationTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateReplicationTaskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.CreateReplicationTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeCreateReplicationTaskWithContext(ctx context.Context, in *databasemigrationservice.CreateReplicationTaskInput, _ ...request.Option) (*databasemigrationservice.CreateReplicationTaskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateReplicationTask cancelled", ctx.Err())
	default:
		return d.CreateReplicationTask(in)
	}
}

func (d *DatabaseMigrationServiceDouble) DeleteCertificate(i0 *databasemigrationservice.DeleteCertificateInput) (r0 *databasemigrationservice.DeleteCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCertificate", i0)
	r0, _ = returns[0].(*databasemigrationservice.DeleteCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) DeleteCertificateRequest(i0 *databasemigrationservice.DeleteCertificateInput) (r0 *request.Request, r1 *databasemigrationservice.DeleteCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.DeleteCertificateOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) DeleteCertificateWithContext(i0 context.Context, i1 *databasemigrationservice.DeleteCertificateInput, i2 ...request.Option) (r0 *databasemigrationservice.DeleteCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.DeleteCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDeleteCertificateWithContext(ctx context.Context, in *databasemigrationservice.DeleteCertificateInput, _ ...request.Option) (*databasemigrationservice.DeleteCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteCertificate cancelled", ctx.Err())
	default:
		return d.DeleteCertificate(in)
	}
}

func (d *DatabaseMigrationServiceDouble) DeleteConnection(i0 *databasemigrationservice.DeleteConnectionInput) (r0 *databasemigrationservice.DeleteConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteConnection", i0)
	r0, _ = returns[0].(*databasemigrationservice.DeleteConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) DeleteConnectionRequest(i0 *databasemigrationservice.DeleteConnectionInput) (r0 *request.Request, r1 *databasemigrationservice.DeleteConnectionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteConnectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.DeleteConnectionOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) DeleteConnectionWithContext(i0 context.Context, i1 *databasemigrationservice.DeleteConnectionInput, i2 ...request.Option) (r0 *databasemigrationservice.DeleteConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteConnectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.DeleteConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDeleteConnectionWithContext(ctx context.Context, in *databasemigrationservice.DeleteConnectionInput, _ ...request.Option) (*databasemigrationservice.DeleteConnectionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteConnection cancelled", ctx.Err())
	default:
		return d.DeleteConnection(in)
	}
}

func (d *DatabaseMigrationServiceDouble) DeleteEndpoint(i0 *databasemigrationservice.DeleteEndpointInput) (r0 *databasemigrationservice.DeleteEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEndpoint", i0)
	r0, _ = returns[0].(*databasemigrationservice.DeleteEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) DeleteEndpointRequest(i0 *databasemigrationservice.DeleteEndpointInput) (r0 *request.Request, r1 *databasemigrationservice.DeleteEndpointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEndpointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.DeleteEndpointOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) DeleteEndpointWithContext(i0 context.Context, i1 *databasemigrationservice.DeleteEndpointInput, i2 ...request.Option) (r0 *databasemigrationservice.DeleteEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEndpointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.DeleteEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDeleteEndpointWithContext(ctx context.Context, in *databasemigrationservice.DeleteEndpointInput, _ ...request.Option) (*databasemigrationservice.DeleteEndpointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteEndpoint cancelled", ctx.Err())
	default:
		return d.DeleteEndpoint(in)
	}
}

func (d *DatabaseMigrationServiceDouble) DeleteEventSubscription(i0 *databasemigrationservice.DeleteEventSubscriptionInput) (r0 *databasemigrationservice.DeleteEventSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEventSubscription", i0)
	r0, _ = returns[0].(*databasemigrationservice.DeleteEventSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) DeleteEventSubscriptionRequest(i0 *databasemigrationservice.DeleteEventSubscriptionInput) (r0 *request.Request, r1 *databasemigrationservice.DeleteEventSubscriptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEventSubscriptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.DeleteEventSubscriptionOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) DeleteEventSubscriptionWithContext(i0 context.Context, i1 *databasemigrationservice.DeleteEventSubscriptionInput, i2 ...request.Option) (r0 *databasemigrationservice.DeleteEventSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEventSubscriptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.DeleteEventSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDeleteEventSubscriptionWithContext(ctx context.Context, in *databasemigrationservice.DeleteEventSubscriptionInput, _ ...request.Option) (*databasemigrationservice.DeleteEventSubscriptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteEventSubscription cancelled", ctx.Err())
	default:
		return d.DeleteEventSubscription(in)
	}
}

func (d *DatabaseMigrationServiceDouble) DeleteReplicationInstance(i0 *databasemigrationservice.DeleteReplicationInstanceInput) (r0 *databasemigrationservice.DeleteReplicationInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteReplicationInstance", i0)
	r0, _ = returns[0].(*databasemigrationservice.DeleteReplicationInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) DeleteReplicationInstanceRequest(i0 *databasemigrationservice.DeleteReplicationInstanceInput) (r0 *request.Request, r1 *databasemigrationservice.DeleteReplicationInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteReplicationInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.DeleteReplicationInstanceOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) DeleteReplicationInstanceWithContext(i0 context.Context, i1 *databasemigrationservice.DeleteReplicationInstanceInput, i2 ...request.Option) (r0 *databasemigrationservice.DeleteReplicationInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteReplicationInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.DeleteReplicationInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDeleteReplicationInstanceWithContext(ctx context.Context, in *databasemigrationservice.DeleteReplicationInstanceInput, _ ...request.Option) (*databasemigrationservice.DeleteReplicationInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteReplicationInstance cancelled", ctx.Err())
	default:
		return d.DeleteReplicationInstance(in)
	}
}

func (d *DatabaseMigrationServiceDouble) DeleteReplicationSubnetGroup(i0 *databasemigrationservice.DeleteReplicationSubnetGroupInput) (r0 *databasemigrationservice.DeleteReplicationSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteReplicationSubnetGroup", i0)
	r0, _ = returns[0].(*databasemigrationservice.DeleteReplicationSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) DeleteReplicationSubnetGroupRequest(i0 *databasemigrationservice.DeleteReplicationSubnetGroupInput) (r0 *request.Request, r1 *databasemigrationservice.DeleteReplicationSubnetGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteReplicationSubnetGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.DeleteReplicationSubnetGroupOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) DeleteReplicationSubnetGroupWithContext(i0 context.Context, i1 *databasemigrationservice.DeleteReplicationSubnetGroupInput, i2 ...request.Option) (r0 *databasemigrationservice.DeleteReplicationSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteReplicationSubnetGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.DeleteReplicationSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDeleteReplicationSubnetGroupWithContext(ctx context.Context, in *databasemigrationservice.DeleteReplicationSubnetGroupInput, _ ...request.Option) (*databasemigrationservice.DeleteReplicationSubnetGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteReplicationSubnetGroup cancelled", ctx.Err())
	default:
		return d.DeleteReplicationSubnetGroup(in)
	}
}

func (d *DatabaseMigrationServiceDouble) DeleteReplicationTask(i0 *databasemigrationservice.DeleteReplicationTaskInput) (r0 *databasemigrationservice.DeleteReplicationTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteReplicationTask", i0)
	r0, _ = returns[0].(*databasemigrationservice.DeleteReplicationTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) DeleteReplicationTaskRequest(i0 *databasemigrationservice.DeleteReplicationTaskInput) (r0 *request.Request, r1 *databasemigrationservice.DeleteReplicationTaskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteReplicationTaskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.DeleteReplicationTaskOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) DeleteReplicationTaskWithContext(i0 context.Context, i1 *databasemigrationservice.DeleteReplicationTaskInput, i2 ...request.Option) (r0 *databasemigrationservice.DeleteReplicationTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteReplicationTaskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.DeleteReplicationTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDeleteReplicationTaskWithContext(ctx context.Context, in *databasemigrationservice.DeleteReplicationTaskInput, _ ...request.Option) (*databasemigrationservice.DeleteReplicationTaskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteReplicationTask cancelled", ctx.Err())
	default:
		return d.DeleteReplicationTask(in)
	}
}

func (d *DatabaseMigrationServiceDouble) DescribeAccountAttributes(i0 *databasemigrationservice.DescribeAccountAttributesInput) (r0 *databasemigrationservice.DescribeAccountAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAccountAttributes", i0)
	r0, _ = returns[0].(*databasemigrationservice.DescribeAccountAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) DescribeAccountAttributesRequest(i0 *databasemigrationservice.DescribeAccountAttributesInput) (r0 *request.Request, r1 *databasemigrationservice.DescribeAccountAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAccountAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.DescribeAccountAttributesOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) DescribeAccountAttributesWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeAccountAttributesInput, i2 ...request.Option) (r0 *databasemigrationservice.DescribeAccountAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAccountAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.DescribeAccountAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeAccountAttributesWithContext(ctx context.Context, in *databasemigrationservice.DescribeAccountAttributesInput, _ ...request.Option) (*databasemigrationservice.DescribeAccountAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAccountAttributes cancelled", ctx.Err())
	default:
		return d.DescribeAccountAttributes(in)
	}
}

func (d *DatabaseMigrationServiceDouble) DescribeCertificates(i0 *databasemigrationservice.DescribeCertificatesInput) (r0 *databasemigrationservice.DescribeCertificatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCertificates", i0)
	r0, _ = returns[0].(*databasemigrationservice.DescribeCertificatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) DescribeCertificatesPages(i0 *databasemigrationservice.DescribeCertificatesInput, i1 func(*databasemigrationservice.DescribeCertificatesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCertificatesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeCertificatesPages(in *databasemigrationservice.DescribeCertificatesInput, pager func(*databasemigrationservice.DescribeCertificatesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeCertificates", paginators, in, pager)
}

func (d *DatabaseMigrationServiceDouble) DescribeCertificatesPagesWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeCertificatesInput, i2 func(*databasemigrationservice.DescribeCertificatesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCertificatesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeCertificatesPagesWithContext(ctx context.Context, in *databasemigrationservice.DescribeCertificatesInput, pager func(*databasemigrationservice.DescribeCertificatesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeCertificates", paginators, ctx, in, pager, options...)
}

func (d *DatabaseMigrationServiceDouble) DescribeCertificatesRequest(i0 *databasemigrationservice.DescribeCertificatesInput) (r0 *request.Request, r1 *databasemigrationservice.DescribeCertificatesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCertificatesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.DescribeCertificatesOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) DescribeCertificatesWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeCertificatesInput, i2 ...request.Option) (r0 *databasemigrationservice.DescribeCertificatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCertificatesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.DescribeCertificatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeCertificatesWithContext(ctx context.Context, in *databasemigrationservice.DescribeCertificatesInput, _ ...request.Option) (*databasemigrationservice.DescribeCertificatesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeCertificates cancelled", ctx.Err())
	default:
		return d.DescribeCertificates(in)
	}
}

func (d *DatabaseMigrationServiceDouble) DescribeConnections(i0 *databasemigrationservice.DescribeConnectionsInput) (r0 *databasemigrationservice.DescribeConnectionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConnections", i0)
	r0, _ = returns[0].(*databasemigrationservice.DescribeConnectionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) DescribeConnectionsPages(i0 *databasemigrationservice.DescribeConnectionsInput, i1 func(*databasemigrationservice.DescribeConnectionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConnectionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeConnectionsPages(in *databasemigrationservice.DescribeConnectionsInput, pager func(*databasemigrationservice.DescribeConnectionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeConnections", paginators, in, pager)
}

func (d *DatabaseMigrationServiceDouble) DescribeConnectionsPagesWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeConnectionsInput, i2 func(*databasemigrationservice.DescribeConnectionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConnectionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeConnectionsPagesWithContext(ctx context.Context, in *databasemigrationservice.DescribeConnectionsInput, pager func(*databasemigrationservice.DescribeConnectionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeConnections", paginators, ctx, in, pager, options...)
}

func (d *DatabaseMigrationServiceDouble) DescribeConnectionsRequest(i0 *databasemigrationservice.DescribeConnectionsInput) (r0 *request.Request, r1 *databasemigrationservice.DescribeConnectionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConnectionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.DescribeConnectionsOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) DescribeConnectionsWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeConnectionsInput, i2 ...request.Option) (r0 *databasemigrationservice.DescribeConnectionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConnectionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.DescribeConnectionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeConnectionsWithContext(ctx context.Context, in *databasemigrationservice.DescribeConnectionsInput, _ ...request.Option) (*databasemigrationservice.DescribeConnectionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeConnections cancelled", ctx.Err())
	default:
		return d.DescribeConnections(in)
	}
}

func (d *DatabaseMigrationServiceDouble) DescribeEndpointTypes(i0 *databasemigrationservice.DescribeEndpointTypesInput) (r0 *databasemigrationservice.DescribeEndpointTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEndpointTypes", i0)
	r0, _ = returns[0].(*databasemigrationservice.DescribeEndpointTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) DescribeEndpointTypesPages(i0 *databasemigrationservice.DescribeEndpointTypesInput, i1 func(*databasemigrationservice.DescribeEndpointTypesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEndpointTypesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeEndpointTypesPages(in *databasemigrationservice.DescribeEndpointTypesInput, pager func(*databasemigrationservice.DescribeEndpointTypesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeEndpointTypes", paginators, in, pager)
}

func (d *DatabaseMigrationServiceDouble) DescribeEndpointTypesPagesWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeEndpointTypesInput, i2 func(*databasemigrationservice.DescribeEndpointTypesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEndpointTypesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeEndpointTypesPagesWithContext(ctx context.Context, in *databasemigrationservice.DescribeEndpointTypesInput, pager func(*databasemigrationservice.DescribeEndpointTypesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeEndpointTypes", paginators, ctx, in, pager, options...)
}

func (d *DatabaseMigrationServiceDouble) DescribeEndpointTypesRequest(i0 *databasemigrationservice.DescribeEndpointTypesInput) (r0 *request.Request, r1 *databasemigrationservice.DescribeEndpointTypesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEndpointTypesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.DescribeEndpointTypesOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) DescribeEndpointTypesWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeEndpointTypesInput, i2 ...request.Option) (r0 *databasemigrationservice.DescribeEndpointTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEndpointTypesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.DescribeEndpointTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeEndpointTypesWithContext(ctx context.Context, in *databasemigrationservice.DescribeEndpointTypesInput, _ ...request.Option) (*databasemigrationservice.DescribeEndpointTypesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEndpointTypes cancelled", ctx.Err())
	default:
		return d.DescribeEndpointTypes(in)
	}
}

func (d *DatabaseMigrationServiceDouble) DescribeEndpoints(i0 *databasemigrationservice.DescribeEndpointsInput) (r0 *databasemigrationservice.DescribeEndpointsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEndpoints", i0)
	r0, _ = returns[0].(*databasemigrationservice.DescribeEndpointsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) DescribeEndpointsPages(i0 *databasemigrationservice.DescribeEndpointsInput, i1 func(*databasemigrationservice.DescribeEndpointsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEndpointsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeEndpointsPages(in *databasemigrationservice.DescribeEndpointsInput, pager func(*databasemigrationservice.DescribeEndpointsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeEndpoints", paginators, in, pager)
}

func (d *DatabaseMigrationServiceDouble) DescribeEndpointsPagesWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeEndpointsInput, i2 func(*databasemigrationservice.DescribeEndpointsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEndpointsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeEndpointsPagesWithContext(ctx context.Context, in *databasemigrationservice.DescribeEndpointsInput, pager func(*databasemigrationservice.DescribeEndpointsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeEndpoints", paginators, ctx, in, pager, options...)
}

func (d *DatabaseMigrationServiceDouble) DescribeEndpointsRequest(i0 *databasemigrationservice.DescribeEndpointsInput) (r0 *request.Request, r1 *databasemigrationservice.DescribeEndpointsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEndpointsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.DescribeEndpointsOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) DescribeEndpointsWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeEndpointsInput, i2 ...request.Option) (r0 *databasemigrationservice.DescribeEndpointsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEndpointsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.DescribeEndpointsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeEndpointsWithContext(ctx context.Context, in *databasemigrationservice.DescribeEndpointsInput, _ ...request.Option) (*databasemigrationservice.DescribeEndpointsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEndpoints cancelled", ctx.Err())
	default:
		return d.DescribeEndpoints(in)
	}
}

func (d *DatabaseMigrationServiceDouble) DescribeEventCategories(i0 *databasemigrationservice.DescribeEventCategoriesInput) (r0 *databasemigrationservice.DescribeEventCategoriesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventCategories", i0)
	r0, _ = returns[0].(*databasemigrationservice.DescribeEventCategoriesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) DescribeEventCategoriesRequest(i0 *databasemigrationservice.DescribeEventCategoriesInput) (r0 *request.Request, r1 *databasemigrationservice.DescribeEventCategoriesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventCategoriesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.DescribeEventCategoriesOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) DescribeEventCategoriesWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeEventCategoriesInput, i2 ...request.Option) (r0 *databasemigrationservice.DescribeEventCategoriesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventCategoriesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.DescribeEventCategoriesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeEventCategoriesWithContext(ctx context.Context, in *databasemigrationservice.DescribeEventCategoriesInput, _ ...request.Option) (*databasemigrationservice.DescribeEventCategoriesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEventCategories cancelled", ctx.Err())
	default:
		return d.DescribeEventCategories(in)
	}
}

func (d *DatabaseMigrationServiceDouble) DescribeEventSubscriptions(i0 *databasemigrationservice.DescribeEventSubscriptionsInput) (r0 *databasemigrationservice.DescribeEventSubscriptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventSubscriptions", i0)
	r0, _ = returns[0].(*databasemigrationservice.DescribeEventSubscriptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) DescribeEventSubscriptionsPages(i0 *databasemigrationservice.DescribeEventSubscriptionsInput, i1 func(*databasemigrationservice.DescribeEventSubscriptionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventSubscriptionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeEventSubscriptionsPages(in *databasemigrationservice.DescribeEventSubscriptionsInput, pager func(*databasemigrationservice.DescribeEventSubscriptionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeEventSubscriptions", paginators, in, pager)
}

func (d *DatabaseMigrationServiceDouble) DescribeEventSubscriptionsPagesWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeEventSubscriptionsInput, i2 func(*databasemigrationservice.DescribeEventSubscriptionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventSubscriptionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeEventSubscriptionsPagesWithContext(ctx context.Context, in *databasemigrationservice.DescribeEventSubscriptionsInput, pager func(*databasemigrationservice.DescribeEventSubscriptionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeEventSubscriptions", paginators, ctx, in, pager, options...)
}

func (d *DatabaseMigrationServiceDouble) DescribeEventSubscriptionsRequest(i0 *databasemigrationservice.DescribeEventSubscriptionsInput) (r0 *request.Request, r1 *databasemigrationservice.DescribeEventSubscriptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventSubscriptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.DescribeEventSubscriptionsOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) DescribeEventSubscriptionsWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeEventSubscriptionsInput, i2 ...request.Option) (r0 *databasemigrationservice.DescribeEventSubscriptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventSubscriptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.DescribeEventSubscriptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeEventSubscriptionsWithContext(ctx context.Context, in *databasemigrationservice.DescribeEventSubscriptionsInput, _ ...request.Option) (*databasemigrationservice.DescribeEventSubscriptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEventSubscriptions cancelled", ctx.Err())
	default:
		return d.DescribeEventSubscriptions(in)
	}
}

func (d *DatabaseMigrationServiceDouble) DescribeEvents(i0 *databasemigrationservice.DescribeEventsInput) (r0 *databasemigrationservice.DescribeEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEvents", i0)
	r0, _ = returns[0].(*databasemigrationservice.DescribeEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) DescribeEventsPages(i0 *databasemigrationservice.DescribeEventsInput, i1 func(*databasemigrationservice.DescribeEventsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeEventsPages(in *databasemigrationservice.DescribeEventsInput, pager func(*databasemigrationservice.DescribeEventsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeEvents", paginators, in, pager)
}

func (d *DatabaseMigrationServiceDouble) DescribeEventsPagesWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeEventsInput, i2 func(*databasemigrationservice.DescribeEventsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeEventsPagesWithContext(ctx context.Context, in *databasemigrationservice.DescribeEventsInput, pager func(*databasemigrationservice.DescribeEventsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeEvents", paginators, ctx, in, pager, options...)
}

func (d *DatabaseMigrationServiceDouble) DescribeEventsRequest(i0 *databasemigrationservice.DescribeEventsInput) (r0 *request.Request, r1 *databasemigrationservice.DescribeEventsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.DescribeEventsOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) DescribeEventsWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeEventsInput, i2 ...request.Option) (r0 *databasemigrationservice.DescribeEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.DescribeEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeEventsWithContext(ctx context.Context, in *databasemigrationservice.DescribeEventsInput, _ ...request.Option) (*databasemigrationservice.DescribeEventsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEvents cancelled", ctx.Err())
	default:
		return d.DescribeEvents(in)
	}
}

func (d *DatabaseMigrationServiceDouble) DescribeOrderableReplicationInstances(i0 *databasemigrationservice.DescribeOrderableReplicationInstancesInput) (r0 *databasemigrationservice.DescribeOrderableReplicationInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrderableReplicationInstances", i0)
	r0, _ = returns[0].(*databasemigrationservice.DescribeOrderableReplicationInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) DescribeOrderableReplicationInstancesPages(i0 *databasemigrationservice.DescribeOrderableReplicationInstancesInput, i1 func(*databasemigrationservice.DescribeOrderableReplicationInstancesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrderableReplicationInstancesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeOrderableReplicationInstancesPages(in *databasemigrationservice.DescribeOrderableReplicationInstancesInput, pager func(*databasemigrationservice.DescribeOrderableReplicationInstancesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeOrderableReplicationInstances", paginators, in, pager)
}

func (d *DatabaseMigrationServiceDouble) DescribeOrderableReplicationInstancesPagesWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeOrderableReplicationInstancesInput, i2 func(*databasemigrationservice.DescribeOrderableReplicationInstancesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrderableReplicationInstancesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeOrderableReplicationInstancesPagesWithContext(ctx context.Context, in *databasemigrationservice.DescribeOrderableReplicationInstancesInput, pager func(*databasemigrationservice.DescribeOrderableReplicationInstancesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeOrderableReplicationInstances", paginators, ctx, in, pager, options...)
}

func (d *DatabaseMigrationServiceDouble) DescribeOrderableReplicationInstancesRequest(i0 *databasemigrationservice.DescribeOrderableReplicationInstancesInput) (r0 *request.Request, r1 *databasemigrationservice.DescribeOrderableReplicationInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrderableReplicationInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.DescribeOrderableReplicationInstancesOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) DescribeOrderableReplicationInstancesWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeOrderableReplicationInstancesInput, i2 ...request.Option) (r0 *databasemigrationservice.DescribeOrderableReplicationInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrderableReplicationInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.DescribeOrderableReplicationInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeOrderableReplicationInstancesWithContext(ctx context.Context, in *databasemigrationservice.DescribeOrderableReplicationInstancesInput, _ ...request.Option) (*databasemigrationservice.DescribeOrderableReplicationInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeOrderableReplicationInstances cancelled", ctx.Err())
	default:
		return d.DescribeOrderableReplicationInstances(in)
	}
}

func (d *DatabaseMigrationServiceDouble) DescribePendingMaintenanceActions(i0 *databasemigrationservice.DescribePendingMaintenanceActionsInput) (r0 *databasemigrationservice.DescribePendingMaintenanceActionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePendingMaintenanceActions", i0)
	r0, _ = returns[0].(*databasemigrationservice.DescribePendingMaintenanceActionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) DescribePendingMaintenanceActionsPages(i0 *databasemigrationservice.DescribePendingMaintenanceActionsInput, i1 func(*databasemigrationservice.DescribePendingMaintenanceActionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePendingMaintenanceActionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribePendingMaintenanceActionsPages(in *databasemigrationservice.DescribePendingMaintenanceActionsInput, pager func(*databasemigrationservice.DescribePendingMaintenanceActionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribePendingMaintenanceActions", paginators, in, pager)
}

func (d *DatabaseMigrationServiceDouble) DescribePendingMaintenanceActionsPagesWithContext(i0 context.Context, i1 *databasemigrationservice.DescribePendingMaintenanceActionsInput, i2 func(*databasemigrationservice.DescribePendingMaintenanceActionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePendingMaintenanceActionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribePendingMaintenanceActionsPagesWithContext(ctx context.Context, in *databasemigrationservice.DescribePendingMaintenanceActionsInput, pager func(*databasemigrationservice.DescribePendingMaintenanceActionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribePendingMaintenanceActions", paginators, ctx, in, pager, options...)
}

func (d *DatabaseMigrationServiceDouble) DescribePendingMaintenanceActionsRequest(i0 *databasemigrationservice.DescribePendingMaintenanceActionsInput) (r0 *request.Request, r1 *databasemigrationservice.DescribePendingMaintenanceActionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePendingMaintenanceActionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.DescribePendingMaintenanceActionsOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) DescribePendingMaintenanceActionsWithContext(i0 context.Context, i1 *databasemigrationservice.DescribePendingMaintenanceActionsInput, i2 ...request.Option) (r0 *databasemigrationservice.DescribePendingMaintenanceActionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePendingMaintenanceActionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.DescribePendingMaintenanceActionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribePendingMaintenanceActionsWithContext(ctx context.Context, in *databasemigrationservice.DescribePendingMaintenanceActionsInput, _ ...request.Option) (*databasemigrationservice.DescribePendingMaintenanceActionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribePendingMaintenanceActions cancelled", ctx.Err())
	default:
		return d.DescribePendingMaintenanceActions(in)
	}
}

func (d *DatabaseMigrationServiceDouble) DescribeRefreshSchemasStatus(i0 *databasemigrationservice.DescribeRefreshSchemasStatusInput) (r0 *databasemigrationservice.DescribeRefreshSchemasStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRefreshSchemasStatus", i0)
	r0, _ = returns[0].(*databasemigrationservice.DescribeRefreshSchemasStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) DescribeRefreshSchemasStatusRequest(i0 *databasemigrationservice.DescribeRefreshSchemasStatusInput) (r0 *request.Request, r1 *databasemigrationservice.DescribeRefreshSchemasStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRefreshSchemasStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.DescribeRefreshSchemasStatusOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) DescribeRefreshSchemasStatusWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeRefreshSchemasStatusInput, i2 ...request.Option) (r0 *databasemigrationservice.DescribeRefreshSchemasStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRefreshSchemasStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.DescribeRefreshSchemasStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeRefreshSchemasStatusWithContext(ctx context.Context, in *databasemigrationservice.DescribeRefreshSchemasStatusInput, _ ...request.Option) (*databasemigrationservice.DescribeRefreshSchemasStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeRefreshSchemasStatus cancelled", ctx.Err())
	default:
		return d.DescribeRefreshSchemasStatus(in)
	}
}

func (d *DatabaseMigrationServiceDouble) DescribeReplicationInstanceTaskLogs(i0 *databasemigrationservice.DescribeReplicationInstanceTaskLogsInput) (r0 *databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReplicationInstanceTaskLogs", i0)
	r0, _ = returns[0].(*databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) DescribeReplicationInstanceTaskLogsPages(i0 *databasemigrationservice.DescribeReplicationInstanceTaskLogsInput, i1 func(*databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReplicationInstanceTaskLogsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeReplicationInstanceTaskLogsPages(in *databasemigrationservice.DescribeReplicationInstanceTaskLogsInput, pager func(*databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeReplicationInstanceTaskLogs", paginators, in, pager)
}

func (d *DatabaseMigrationServiceDouble) DescribeReplicationInstanceTaskLogsPagesWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeReplicationInstanceTaskLogsInput, i2 func(*databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReplicationInstanceTaskLogsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeReplicationInstanceTaskLogsPagesWithContext(ctx context.Context, in *databasemigrationservice.DescribeReplicationInstanceTaskLogsInput, pager func(*databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeReplicationInstanceTaskLogs", paginators, ctx, in, pager, options...)
}

func (d *DatabaseMigrationServiceDouble) DescribeReplicationInstanceTaskLogsRequest(i0 *databasemigrationservice.DescribeReplicationInstanceTaskLogsInput) (r0 *request.Request, r1 *databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReplicationInstanceTaskLogsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) DescribeReplicationInstanceTaskLogsWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeReplicationInstanceTaskLogsInput, i2 ...request.Option) (r0 *databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReplicationInstanceTaskLogsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeReplicationInstanceTaskLogsWithContext(ctx context.Context, in *databasemigrationservice.DescribeReplicationInstanceTaskLogsInput, _ ...request.Option) (*databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeReplicationInstanceTaskLogs cancelled", ctx.Err())
	default:
		return d.DescribeReplicationInstanceTaskLogs(in)
	}
}

func (d *DatabaseMigrationServiceDouble) DescribeReplicationInstances(i0 *databasemigrationservice.DescribeReplicationInstancesInput) (r0 *databasemigrationservice.DescribeReplicationInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReplicationInstances", i0)
	r0, _ = returns[0].(*databasemigrationservice.DescribeReplicationInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) DescribeReplicationInstancesPages(i0 *databasemigrationservice.DescribeReplicationInstancesInput, i1 func(*databasemigrationservice.DescribeReplicationInstancesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReplicationInstancesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeReplicationInstancesPages(in *databasemigrationservice.DescribeReplicationInstancesInput, pager func(*databasemigrationservice.DescribeReplicationInstancesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeReplicationInstances", paginators, in, pager)
}

func (d *DatabaseMigrationServiceDouble) DescribeReplicationInstancesPagesWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeReplicationInstancesInput, i2 func(*databasemigrationservice.DescribeReplicationInstancesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReplicationInstancesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeReplicationInstancesPagesWithContext(ctx context.Context, in *databasemigrationservice.DescribeReplicationInstancesInput, pager func(*databasemigrationservice.DescribeReplicationInstancesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeReplicationInstances", paginators, ctx, in, pager, options...)
}

func (d *DatabaseMigrationServiceDouble) DescribeReplicationInstancesRequest(i0 *databasemigrationservice.DescribeReplicationInstancesInput) (r0 *request.Request, r1 *databasemigrationservice.DescribeReplicationInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReplicationInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.DescribeReplicationInstancesOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) DescribeReplicationInstancesWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeReplicationInstancesInput, i2 ...request.Option) (r0 *databasemigrationservice.DescribeReplicationInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReplicationInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.DescribeReplicationInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeReplicationInstancesWithContext(ctx context.Context, in *databasemigrationservice.DescribeReplicationInstancesInput, _ ...request.Option) (*databasemigrationservice.DescribeReplicationInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeReplicationInstances cancelled", ctx.Err())
	default:
		return d.DescribeReplicationInstances(in)
	}
}

func (d *DatabaseMigrationServiceDouble) DescribeReplicationSubnetGroups(i0 *databasemigrationservice.DescribeReplicationSubnetGroupsInput) (r0 *databasemigrationservice.DescribeReplicationSubnetGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReplicationSubnetGroups", i0)
	r0, _ = returns[0].(*databasemigrationservice.DescribeReplicationSubnetGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) DescribeReplicationSubnetGroupsPages(i0 *databasemigrationservice.DescribeReplicationSubnetGroupsInput, i1 func(*databasemigrationservice.DescribeReplicationSubnetGroupsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReplicationSubnetGroupsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeReplicationSubnetGroupsPages(in *databasemigrationservice.DescribeReplicationSubnetGroupsInput, pager func(*databasemigrationservice.DescribeReplicationSubnetGroupsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeReplicationSubnetGroups", paginators, in, pager)
}

func (d *DatabaseMigrationServiceDouble) DescribeReplicationSubnetGroupsPagesWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeReplicationSubnetGroupsInput, i2 func(*databasemigrationservice.DescribeReplicationSubnetGroupsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReplicationSubnetGroupsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeReplicationSubnetGroupsPagesWithContext(ctx context.Context, in *databasemigrationservice.DescribeReplicationSubnetGroupsInput, pager func(*databasemigrationservice.DescribeReplicationSubnetGroupsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeReplicationSubnetGroups", paginators, ctx, in, pager, options...)
}

func (d *DatabaseMigrationServiceDouble) DescribeReplicationSubnetGroupsRequest(i0 *databasemigrationservice.DescribeReplicationSubnetGroupsInput) (r0 *request.Request, r1 *databasemigrationservice.DescribeReplicationSubnetGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReplicationSubnetGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.DescribeReplicationSubnetGroupsOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) DescribeReplicationSubnetGroupsWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeReplicationSubnetGroupsInput, i2 ...request.Option) (r0 *databasemigrationservice.DescribeReplicationSubnetGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReplicationSubnetGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.DescribeReplicationSubnetGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeReplicationSubnetGroupsWithContext(ctx context.Context, in *databasemigrationservice.DescribeReplicationSubnetGroupsInput, _ ...request.Option) (*databasemigrationservice.DescribeReplicationSubnetGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeReplicationSubnetGroups cancelled", ctx.Err())
	default:
		return d.DescribeReplicationSubnetGroups(in)
	}
}

func (d *DatabaseMigrationServiceDouble) DescribeReplicationTaskAssessmentResults(i0 *databasemigrationservice.DescribeReplicationTaskAssessmentResultsInput) (r0 *databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReplicationTaskAssessmentResults", i0)
	r0, _ = returns[0].(*databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) DescribeReplicationTaskAssessmentResultsPages(i0 *databasemigrationservice.DescribeReplicationTaskAssessmentResultsInput, i1 func(*databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReplicationTaskAssessmentResultsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeReplicationTaskAssessmentResultsPages(in *databasemigrationservice.DescribeReplicationTaskAssessmentResultsInput, pager func(*databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeReplicationTaskAssessmentResults", paginators, in, pager)
}

func (d *DatabaseMigrationServiceDouble) DescribeReplicationTaskAssessmentResultsPagesWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeReplicationTaskAssessmentResultsInput, i2 func(*databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReplicationTaskAssessmentResultsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeReplicationTaskAssessmentResultsPagesWithContext(ctx context.Context, in *databasemigrationservice.DescribeReplicationTaskAssessmentResultsInput, pager func(*databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeReplicationTaskAssessmentResults", paginators, ctx, in, pager, options...)
}

func (d *DatabaseMigrationServiceDouble) DescribeReplicationTaskAssessmentResultsRequest(i0 *databasemigrationservice.DescribeReplicationTaskAssessmentResultsInput) (r0 *request.Request, r1 *databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReplicationTaskAssessmentResultsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) DescribeReplicationTaskAssessmentResultsWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeReplicationTaskAssessmentResultsInput, i2 ...request.Option) (r0 *databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReplicationTaskAssessmentResultsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeReplicationTaskAssessmentResultsWithContext(ctx context.Context, in *databasemigrationservice.DescribeReplicationTaskAssessmentResultsInput, _ ...request.Option) (*databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeReplicationTaskAssessmentResults cancelled", ctx.Err())
	default:
		return d.DescribeReplicationTaskAssessmentResults(in)
	}
}

func (d *DatabaseMigrationServiceDouble) DescribeReplicationTasks(i0 *databasemigrationservice.DescribeReplicationTasksInput) (r0 *databasemigrationservice.DescribeReplicationTasksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReplicationTasks", i0)
	r0, _ = returns[0].(*databasemigrationservice.DescribeReplicationTasksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) DescribeReplicationTasksPages(i0 *databasemigrationservice.DescribeReplicationTasksInput, i1 func(*databasemigrationservice.DescribeReplicationTasksOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReplicationTasksPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeReplicationTasksPages(in *databasemigrationservice.DescribeReplicationTasksInput, pager func(*databasemigrationservice.DescribeReplicationTasksOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeReplicationTasks", paginators, in, pager)
}

func (d *DatabaseMigrationServiceDouble) DescribeReplicationTasksPagesWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeReplicationTasksInput, i2 func(*databasemigrationservice.DescribeReplicationTasksOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReplicationTasksPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeReplicationTasksPagesWithContext(ctx context.Context, in *databasemigrationservice.DescribeReplicationTasksInput, pager func(*databasemigrationservice.DescribeReplicationTasksOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeReplicationTasks", paginators, ctx, in, pager, options...)
}

func (d *DatabaseMigrationServiceDouble) DescribeReplicationTasksRequest(i0 *databasemigrationservice.DescribeReplicationTasksInput) (r0 *request.Request, r1 *databasemigrationservice.DescribeReplicationTasksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReplicationTasksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.DescribeReplicationTasksOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) DescribeReplicationTasksWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeReplicationTasksInput, i2 ...request.Option) (r0 *databasemigrationservice.DescribeReplicationTasksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReplicationTasksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.DescribeReplicationTasksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeReplicationTasksWithContext(ctx context.Context, in *databasemigrationservice.DescribeReplicationTasksInput, _ ...request.Option) (*databasemigrationservice.DescribeReplicationTasksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeReplicationTasks cancelled", ctx.Err())
	default:
		return d.DescribeReplicationTasks(in)
	}
}

func (d *DatabaseMigrationServiceDouble) DescribeSchemas(i0 *databasemigrationservice.DescribeSchemasInput) (r0 *databasemigrationservice.DescribeSchemasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSchemas", i0)
	r0, _ = returns[0].(*databasemigrationservice.DescribeSchemasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) DescribeSchemasPages(i0 *databasemigrationservice.DescribeSchemasInput, i1 func(*databasemigrationservice.DescribeSchemasOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSchemasPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeSchemasPages(in *databasemigrationservice.DescribeSchemasInput, pager func(*databasemigrationservice.DescribeSchemasOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeSchemas", paginators, in, pager)
}

func (d *DatabaseMigrationServiceDouble) DescribeSchemasPagesWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeSchemasInput, i2 func(*databasemigrationservice.DescribeSchemasOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSchemasPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeSchemasPagesWithContext(ctx context.Context, in *databasemigrationservice.DescribeSchemasInput, pager func(*databasemigrationservice.DescribeSchemasOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeSchemas", paginators, ctx, in, pager, options...)
}

func (d *DatabaseMigrationServiceDouble) DescribeSchemasRequest(i0 *databasemigrationservice.DescribeSchemasInput) (r0 *request.Request, r1 *databasemigrationservice.DescribeSchemasOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSchemasRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.DescribeSchemasOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) DescribeSchemasWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeSchemasInput, i2 ...request.Option) (r0 *databasemigrationservice.DescribeSchemasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSchemasWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.DescribeSchemasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeSchemasWithContext(ctx context.Context, in *databasemigrationservice.DescribeSchemasInput, _ ...request.Option) (*databasemigrationservice.DescribeSchemasOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSchemas cancelled", ctx.Err())
	default:
		return d.DescribeSchemas(in)
	}
}

func (d *DatabaseMigrationServiceDouble) DescribeTableStatistics(i0 *databasemigrationservice.DescribeTableStatisticsInput) (r0 *databasemigrationservice.DescribeTableStatisticsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTableStatistics", i0)
	r0, _ = returns[0].(*databasemigrationservice.DescribeTableStatisticsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) DescribeTableStatisticsPages(i0 *databasemigrationservice.DescribeTableStatisticsInput, i1 func(*databasemigrationservice.DescribeTableStatisticsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTableStatisticsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeTableStatisticsPages(in *databasemigrationservice.DescribeTableStatisticsInput, pager func(*databasemigrationservice.DescribeTableStatisticsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeTableStatistics", paginators, in, pager)
}

func (d *DatabaseMigrationServiceDouble) DescribeTableStatisticsPagesWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeTableStatisticsInput, i2 func(*databasemigrationservice.DescribeTableStatisticsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTableStatisticsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeTableStatisticsPagesWithContext(ctx context.Context, in *databasemigrationservice.DescribeTableStatisticsInput, pager func(*databasemigrationservice.DescribeTableStatisticsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeTableStatistics", paginators, ctx, in, pager, options...)
}

func (d *DatabaseMigrationServiceDouble) DescribeTableStatisticsRequest(i0 *databasemigrationservice.DescribeTableStatisticsInput) (r0 *request.Request, r1 *databasemigrationservice.DescribeTableStatisticsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTableStatisticsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.DescribeTableStatisticsOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) DescribeTableStatisticsWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeTableStatisticsInput, i2 ...request.Option) (r0 *databasemigrationservice.DescribeTableStatisticsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTableStatisticsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.DescribeTableStatisticsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeDescribeTableStatisticsWithContext(ctx context.Context, in *databasemigrationservice.DescribeTableStatisticsInput, _ ...request.Option) (*databasemigrationservice.DescribeTableStatisticsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTableStatistics cancelled", ctx.Err())
	default:
		return d.DescribeTableStatistics(in)
	}
}

func (d *DatabaseMigrationServiceDouble) ImportCertificate(i0 *databasemigrationservice.ImportCertificateInput) (r0 *databasemigrationservice.ImportCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportCertificate", i0)
	r0, _ = returns[0].(*databasemigrationservice.ImportCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) ImportCertificateRequest(i0 *databasemigrationservice.ImportCertificateInput) (r0 *request.Request, r1 *databasemigrationservice.ImportCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.ImportCertificateOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) ImportCertificateWithContext(i0 context.Context, i1 *databasemigrationservice.ImportCertificateInput, i2 ...request.Option) (r0 *databasemigrationservice.ImportCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.ImportCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeImportCertificateWithContext(ctx context.Context, in *databasemigrationservice.ImportCertificateInput, _ ...request.Option) (*databasemigrationservice.ImportCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ImportCertificate cancelled", ctx.Err())
	default:
		return d.ImportCertificate(in)
	}
}

func (d *DatabaseMigrationServiceDouble) ListTagsForResource(i0 *databasemigrationservice.ListTagsForResourceInput) (r0 *databasemigrationservice.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*databasemigrationservice.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) ListTagsForResourceRequest(i0 *databasemigrationservice.ListTagsForResourceInput) (r0 *request.Request, r1 *databasemigrationservice.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.ListTagsForResourceOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *databasemigrationservice.ListTagsForResourceInput, i2 ...request.Option) (r0 *databasemigrationservice.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *databasemigrationservice.ListTagsForResourceInput, _ ...request.Option) (*databasemigrationservice.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *DatabaseMigrationServiceDouble) ModifyEndpoint(i0 *databasemigrationservice.ModifyEndpointInput) (r0 *databasemigrationservice.ModifyEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyEndpoint", i0)
	r0, _ = returns[0].(*databasemigrationservice.ModifyEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) ModifyEndpointRequest(i0 *databasemigrationservice.ModifyEndpointInput) (r0 *request.Request, r1 *databasemigrationservice.ModifyEndpointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyEndpointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.ModifyEndpointOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) ModifyEndpointWithContext(i0 context.Context, i1 *databasemigrationservice.ModifyEndpointInput, i2 ...request.Option) (r0 *databasemigrationservice.ModifyEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyEndpointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.ModifyEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeModifyEndpointWithContext(ctx context.Context, in *databasemigrationservice.ModifyEndpointInput, _ ...request.Option) (*databasemigrationservice.ModifyEndpointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyEndpoint cancelled", ctx.Err())
	default:
		return d.ModifyEndpoint(in)
	}
}

func (d *DatabaseMigrationServiceDouble) ModifyEventSubscription(i0 *databasemigrationservice.ModifyEventSubscriptionInput) (r0 *databasemigrationservice.ModifyEventSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyEventSubscription", i0)
	r0, _ = returns[0].(*databasemigrationservice.ModifyEventSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) ModifyEventSubscriptionRequest(i0 *databasemigrationservice.ModifyEventSubscriptionInput) (r0 *request.Request, r1 *databasemigrationservice.ModifyEventSubscriptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyEventSubscriptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.ModifyEventSubscriptionOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) ModifyEventSubscriptionWithContext(i0 context.Context, i1 *databasemigrationservice.ModifyEventSubscriptionInput, i2 ...request.Option) (r0 *databasemigrationservice.ModifyEventSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyEventSubscriptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.ModifyEventSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeModifyEventSubscriptionWithContext(ctx context.Context, in *databasemigrationservice.ModifyEventSubscriptionInput, _ ...request.Option) (*databasemigrationservice.ModifyEventSubscriptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyEventSubscription cancelled", ctx.Err())
	default:
		return d.ModifyEventSubscription(in)
	}
}

func (d *DatabaseMigrationServiceDouble) ModifyReplicationInstance(i0 *databasemigrationservice.ModifyReplicationInstanceInput) (r0 *databasemigrationservice.ModifyReplicationInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyReplicationInstance", i0)
	r0, _ = returns[0].(*databasemigrationservice.ModifyReplicationInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) ModifyReplicationInstanceRequest(i0 *databasemigrationservice.ModifyReplicationInstanceInput) (r0 *request.Request, r1 *databasemigrationservice.ModifyReplicationInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyReplicationInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.ModifyReplicationInstanceOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) ModifyReplicationInstanceWithContext(i0 context.Context, i1 *databasemigrationservice.ModifyReplicationInstanceInput, i2 ...request.Option) (r0 *databasemigrationservice.ModifyReplicationInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyReplicationInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.ModifyReplicationInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeModifyReplicationInstanceWithContext(ctx context.Context, in *databasemigrationservice.ModifyReplicationInstanceInput, _ ...request.Option) (*databasemigrationservice.ModifyReplicationInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyReplicationInstance cancelled", ctx.Err())
	default:
		return d.ModifyReplicationInstance(in)
	}
}

func (d *DatabaseMigrationServiceDouble) ModifyReplicationSubnetGroup(i0 *databasemigrationservice.ModifyReplicationSubnetGroupInput) (r0 *databasemigrationservice.ModifyReplicationSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyReplicationSubnetGroup", i0)
	r0, _ = returns[0].(*databasemigrationservice.ModifyReplicationSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) ModifyReplicationSubnetGroupRequest(i0 *databasemigrationservice.ModifyReplicationSubnetGroupInput) (r0 *request.Request, r1 *databasemigrationservice.ModifyReplicationSubnetGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyReplicationSubnetGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.ModifyReplicationSubnetGroupOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) ModifyReplicationSubnetGroupWithContext(i0 context.Context, i1 *databasemigrationservice.ModifyReplicationSubnetGroupInput, i2 ...request.Option) (r0 *databasemigrationservice.ModifyReplicationSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyReplicationSubnetGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.ModifyReplicationSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeModifyReplicationSubnetGroupWithContext(ctx context.Context, in *databasemigrationservice.ModifyReplicationSubnetGroupInput, _ ...request.Option) (*databasemigrationservice.ModifyReplicationSubnetGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyReplicationSubnetGroup cancelled", ctx.Err())
	default:
		return d.ModifyReplicationSubnetGroup(in)
	}
}

func (d *DatabaseMigrationServiceDouble) ModifyReplicationTask(i0 *databasemigrationservice.ModifyReplicationTaskInput) (r0 *databasemigrationservice.ModifyReplicationTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyReplicationTask", i0)
	r0, _ = returns[0].(*databasemigrationservice.ModifyReplicationTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) ModifyReplicationTaskRequest(i0 *databasemigrationservice.ModifyReplicationTaskInput) (r0 *request.Request, r1 *databasemigrationservice.ModifyReplicationTaskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyReplicationTaskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.ModifyReplicationTaskOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) ModifyReplicationTaskWithContext(i0 context.Context, i1 *databasemigrationservice.ModifyReplicationTaskInput, i2 ...request.Option) (r0 *databasemigrationservice.ModifyReplicationTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyReplicationTaskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.ModifyReplicationTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeModifyReplicationTaskWithContext(ctx context.Context, in *databasemigrationservice.ModifyReplicationTaskInput, _ ...request.Option) (*databasemigrationservice.ModifyReplicationTaskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyReplicationTask cancelled", ctx.Err())
	default:
		return d.ModifyReplicationTask(in)
	}
}

func (d *DatabaseMigrationServiceDouble) RebootReplicationInstance(i0 *databasemigrationservice.RebootReplicationInstanceInput) (r0 *databasemigrationservice.RebootReplicationInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebootReplicationInstance", i0)
	r0, _ = returns[0].(*databasemigrationservice.RebootReplicationInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) RebootReplicationInstanceRequest(i0 *databasemigrationservice.RebootReplicationInstanceInput) (r0 *request.Request, r1 *databasemigrationservice.RebootReplicationInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebootReplicationInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.RebootReplicationInstanceOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) RebootReplicationInstanceWithContext(i0 context.Context, i1 *databasemigrationservice.RebootReplicationInstanceInput, i2 ...request.Option) (r0 *databasemigrationservice.RebootReplicationInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebootReplicationInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.RebootReplicationInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeRebootReplicationInstanceWithContext(ctx context.Context, in *databasemigrationservice.RebootReplicationInstanceInput, _ ...request.Option) (*databasemigrationservice.RebootReplicationInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RebootReplicationInstance cancelled", ctx.Err())
	default:
		return d.RebootReplicationInstance(in)
	}
}

func (d *DatabaseMigrationServiceDouble) RefreshSchemas(i0 *databasemigrationservice.RefreshSchemasInput) (r0 *databasemigrationservice.RefreshSchemasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RefreshSchemas", i0)
	r0, _ = returns[0].(*databasemigrationservice.RefreshSchemasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) RefreshSchemasRequest(i0 *databasemigrationservice.RefreshSchemasInput) (r0 *request.Request, r1 *databasemigrationservice.RefreshSchemasOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RefreshSchemasRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.RefreshSchemasOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) RefreshSchemasWithContext(i0 context.Context, i1 *databasemigrationservice.RefreshSchemasInput, i2 ...request.Option) (r0 *databasemigrationservice.RefreshSchemasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RefreshSchemasWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.RefreshSchemasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeRefreshSchemasWithContext(ctx context.Context, in *databasemigrationservice.RefreshSchemasInput, _ ...request.Option) (*databasemigrationservice.RefreshSchemasOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RefreshSchemas cancelled", ctx.Err())
	default:
		return d.RefreshSchemas(in)
	}
}

func (d *DatabaseMigrationServiceDouble) ReloadTables(i0 *databasemigrationservice.ReloadTablesInput) (r0 *databasemigrationservice.ReloadTablesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReloadTables", i0)
	r0, _ = returns[0].(*databasemigrationservice.ReloadTablesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) ReloadTablesRequest(i0 *databasemigrationservice.ReloadTablesInput) (r0 *request.Request, r1 *databasemigrationservice.ReloadTablesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReloadTablesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.ReloadTablesOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) ReloadTablesWithContext(i0 context.Context, i1 *databasemigrationservice.ReloadTablesInput, i2 ...request.Option) (r0 *databasemigrationservice.ReloadTablesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReloadTablesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.ReloadTablesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeReloadTablesWithContext(ctx context.Context, in *databasemigrationservice.ReloadTablesInput, _ ...request.Option) (*databasemigrationservice.ReloadTablesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ReloadTables cancelled", ctx.Err())
	default:
		return d.ReloadTables(in)
	}
}

func (d *DatabaseMigrationServiceDouble) RemoveTagsFromResource(i0 *databasemigrationservice.RemoveTagsFromResourceInput) (r0 *databasemigrationservice.RemoveTagsFromResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromResource", i0)
	r0, _ = returns[0].(*databasemigrationservice.RemoveTagsFromResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) RemoveTagsFromResourceRequest(i0 *databasemigrationservice.RemoveTagsFromResourceInput) (r0 *request.Request, r1 *databasemigrationservice.RemoveTagsFromResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.RemoveTagsFromResourceOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) RemoveTagsFromResourceWithContext(i0 context.Context, i1 *databasemigrationservice.RemoveTagsFromResourceInput, i2 ...request.Option) (r0 *databasemigrationservice.RemoveTagsFromResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.RemoveTagsFromResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeRemoveTagsFromResourceWithContext(ctx context.Context, in *databasemigrationservice.RemoveTagsFromResourceInput, _ ...request.Option) (*databasemigrationservice.RemoveTagsFromResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveTagsFromResource cancelled", ctx.Err())
	default:
		return d.RemoveTagsFromResource(in)
	}
}

func (d *DatabaseMigrationServiceDouble) StartReplicationTask(i0 *databasemigrationservice.StartReplicationTaskInput) (r0 *databasemigrationservice.StartReplicationTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartReplicationTask", i0)
	r0, _ = returns[0].(*databasemigrationservice.StartReplicationTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) StartReplicationTaskAssessment(i0 *databasemigrationservice.StartReplicationTaskAssessmentInput) (r0 *databasemigrationservice.StartReplicationTaskAssessmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartReplicationTaskAssessment", i0)
	r0, _ = returns[0].(*databasemigrationservice.StartReplicationTaskAssessmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) StartReplicationTaskAssessmentRequest(i0 *databasemigrationservice.StartReplicationTaskAssessmentInput) (r0 *request.Request, r1 *databasemigrationservice.StartReplicationTaskAssessmentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartReplicationTaskAssessmentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.StartReplicationTaskAssessmentOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) StartReplicationTaskAssessmentWithContext(i0 context.Context, i1 *databasemigrationservice.StartReplicationTaskAssessmentInput, i2 ...request.Option) (r0 *databasemigrationservice.StartReplicationTaskAssessmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartReplicationTaskAssessmentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.StartReplicationTaskAssessmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeStartReplicationTaskAssessmentWithContext(ctx context.Context, in *databasemigrationservice.StartReplicationTaskAssessmentInput, _ ...request.Option) (*databasemigrationservice.StartReplicationTaskAssessmentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartReplicationTaskAssessment cancelled", ctx.Err())
	default:
		return d.StartReplicationTaskAssessment(in)
	}
}

func (d *DatabaseMigrationServiceDouble) StartReplicationTaskRequest(i0 *databasemigrationservice.StartReplicationTaskInput) (r0 *request.Request, r1 *databasemigrationservice.StartReplicationTaskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartReplicationTaskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.StartReplicationTaskOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) StartReplicationTaskWithContext(i0 context.Context, i1 *databasemigrationservice.StartReplicationTaskInput, i2 ...request.Option) (r0 *databasemigrationservice.StartReplicationTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartReplicationTaskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.StartReplicationTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeStartReplicationTaskWithContext(ctx context.Context, in *databasemigrationservice.StartReplicationTaskInput, _ ...request.Option) (*databasemigrationservice.StartReplicationTaskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartReplicationTask cancelled", ctx.Err())
	default:
		return d.StartReplicationTask(in)
	}
}

func (d *DatabaseMigrationServiceDouble) StopReplicationTask(i0 *databasemigrationservice.StopReplicationTaskInput) (r0 *databasemigrationservice.StopReplicationTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopReplicationTask", i0)
	r0, _ = returns[0].(*databasemigrationservice.StopReplicationTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) StopReplicationTaskRequest(i0 *databasemigrationservice.StopReplicationTaskInput) (r0 *request.Request, r1 *databasemigrationservice.StopReplicationTaskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopReplicationTaskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.StopReplicationTaskOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) StopReplicationTaskWithContext(i0 context.Context, i1 *databasemigrationservice.StopReplicationTaskInput, i2 ...request.Option) (r0 *databasemigrationservice.StopReplicationTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopReplicationTaskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.StopReplicationTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeStopReplicationTaskWithContext(ctx context.Context, in *databasemigrationservice.StopReplicationTaskInput, _ ...request.Option) (*databasemigrationservice.StopReplicationTaskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopReplicationTask cancelled", ctx.Err())
	default:
		return d.StopReplicationTask(in)
	}
}

func (d *DatabaseMigrationServiceDouble) TestConnection(i0 *databasemigrationservice.TestConnectionInput) (r0 *databasemigrationservice.TestConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestConnection", i0)
	r0, _ = returns[0].(*databasemigrationservice.TestConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) TestConnectionRequest(i0 *databasemigrationservice.TestConnectionInput) (r0 *request.Request, r1 *databasemigrationservice.TestConnectionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestConnectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*databasemigrationservice.TestConnectionOutput)
	return
}

func (d *DatabaseMigrationServiceDouble) TestConnectionWithContext(i0 context.Context, i1 *databasemigrationservice.TestConnectionInput, i2 ...request.Option) (r0 *databasemigrationservice.TestConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestConnectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*databasemigrationservice.TestConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeTestConnectionWithContext(ctx context.Context, in *databasemigrationservice.TestConnectionInput, _ ...request.Option) (*databasemigrationservice.TestConnectionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TestConnection cancelled", ctx.Err())
	default:
		return d.TestConnection(in)
	}
}

func (d *DatabaseMigrationServiceDouble) WaitUntilEndpointDeleted(i0 *databasemigrationservice.DescribeEndpointsInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilEndpointDeleted", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeWaitUntilEndpointDeleted(in *databasemigrationservice.DescribeEndpointsInput) error {
	return d.WaitUntil("EndpointDeleted", waiters, in)
}

func (d *DatabaseMigrationServiceDouble) WaitUntilEndpointDeletedWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeEndpointsInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilEndpointDeletedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeWaitUntilEndpointDeletedWithContext(ctx context.Context, in *databasemigrationservice.DescribeEndpointsInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("EndpointDeleted", waiters, ctx, in, waitOption...)
}

func (d *DatabaseMigrationServiceDouble) WaitUntilReplicationInstanceAvailable(i0 *databasemigrationservice.DescribeReplicationInstancesInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilReplicationInstanceAvailable", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeWaitUntilReplicationInstanceAvailable(in *databasemigrationservice.DescribeReplicationInstancesInput) error {
	return d.WaitUntil("ReplicationInstanceAvailable", waiters, in)
}

func (d *DatabaseMigrationServiceDouble) WaitUntilReplicationInstanceAvailableWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeReplicationInstancesInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilReplicationInstanceAvailableWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeWaitUntilReplicationInstanceAvailableWithContext(ctx context.Context, in *databasemigrationservice.DescribeReplicationInstancesInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("ReplicationInstanceAvailable", waiters, ctx, in, waitOption...)
}

func (d *DatabaseMigrationServiceDouble) WaitUntilReplicationInstanceDeleted(i0 *databasemigrationservice.DescribeReplicationInstancesInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilReplicationInstanceDeleted", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeWaitUntilReplicationInstanceDeleted(in *databasemigrationservice.DescribeReplicationInstancesInput) error {
	return d.WaitUntil("ReplicationInstanceDeleted", waiters, in)
}

func (d *DatabaseMigrationServiceDouble) WaitUntilReplicationInstanceDeletedWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeReplicationInstancesInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilReplicationInstanceDeletedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeWaitUntilReplicationInstanceDeletedWithContext(ctx context.Context, in *databasemigrationservice.DescribeReplicationInstancesInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("ReplicationInstanceDeleted", waiters, ctx, in, waitOption...)
}

func (d *DatabaseMigrationServiceDouble) WaitUntilReplicationTaskDeleted(i0 *databasemigrationservice.DescribeReplicationTasksInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilReplicationTaskDeleted", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeWaitUntilReplicationTaskDeleted(in *databasemigrationservice.DescribeReplicationTasksInput) error {
	return d.WaitUntil("ReplicationTaskDeleted", waiters, in)
}

func (d *DatabaseMigrationServiceDouble) WaitUntilReplicationTaskDeletedWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeReplicationTasksInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilReplicationTaskDeletedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeWaitUntilReplicationTaskDeletedWithContext(ctx context.Context, in *databasemigrationservice.DescribeReplicationTasksInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("ReplicationTaskDeleted", waiters, ctx, in, waitOption...)
}

func (d *DatabaseMigrationServiceDouble) WaitUntilReplicationTaskReady(i0 *databasemigrationservice.DescribeReplicationTasksInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilReplicationTaskReady", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeWaitUntilReplicationTaskReady(in *databasemigrationservice.DescribeReplicationTasksInput) error {
	return d.WaitUntil("ReplicationTaskReady", waiters, in)
}

func (d *DatabaseMigrationServiceDouble) WaitUntilReplicationTaskReadyWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeReplicationTasksInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilReplicationTaskReadyWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeWaitUntilReplicationTaskReadyWithContext(ctx context.Context, in *databasemigrationservice.DescribeReplicationTasksInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("ReplicationTaskReady", waiters, ctx, in, waitOption...)
}

func (d *DatabaseMigrationServiceDouble) WaitUntilReplicationTaskRunning(i0 *databasemigrationservice.DescribeReplicationTasksInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilReplicationTaskRunning", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeWaitUntilReplicationTaskRunning(in *databasemigrationservice.DescribeReplicationTasksInput) error {
	return d.WaitUntil("ReplicationTaskRunning", waiters, in)
}

func (d *DatabaseMigrationServiceDouble) WaitUntilReplicationTaskRunningWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeReplicationTasksInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilReplicationTaskRunningWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeWaitUntilReplicationTaskRunningWithContext(ctx context.Context, in *databasemigrationservice.DescribeReplicationTasksInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("ReplicationTaskRunning", waiters, ctx, in, waitOption...)
}

func (d *DatabaseMigrationServiceDouble) WaitUntilReplicationTaskStopped(i0 *databasemigrationservice.DescribeReplicationTasksInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilReplicationTaskStopped", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeWaitUntilReplicationTaskStopped(in *databasemigrationservice.DescribeReplicationTasksInput) error {
	return d.WaitUntil("ReplicationTaskStopped", waiters, in)
}

func (d *DatabaseMigrationServiceDouble) WaitUntilReplicationTaskStoppedWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeReplicationTasksInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilReplicationTaskStoppedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeWaitUntilReplicationTaskStoppedWithContext(ctx context.Context, in *databasemigrationservice.DescribeReplicationTasksInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("ReplicationTaskStopped", waiters, ctx, in, waitOption...)
}

func (d *DatabaseMigrationServiceDouble) WaitUntilTestConnectionSucceeds(i0 *databasemigrationservice.DescribeConnectionsInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilTestConnectionSucceeds", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeWaitUntilTestConnectionSucceeds(in *databasemigrationservice.DescribeConnectionsInput) error {
	return d.WaitUntil("TestConnectionSucceeds", waiters, in)
}

func (d *DatabaseMigrationServiceDouble) WaitUntilTestConnectionSucceedsWithContext(i0 context.Context, i1 *databasemigrationservice.DescribeConnectionsInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilTestConnectionSucceedsWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *DatabaseMigrationServiceDouble) fakeWaitUntilTestConnectionSucceedsWithContext(ctx context.Context, in *databasemigrationservice.DescribeConnectionsInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("TestConnectionSucceeds", waiters, ctx, in, waitOption...)
}
