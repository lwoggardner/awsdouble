// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:12:41+11:00

// Package elastictranscoderdouble provides a TestDouble implementation of elastictranscoderiface.ElasticTranscoderAPI
package elastictranscoderdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/elastictranscoder"
	"github.com/aws/aws-sdk-go/service/elastictranscoder/elastictranscoderiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// ElasticTranscoderDouble is TestDouble for elastictranscoderiface.ElasticTranscoderAPI
type ElasticTranscoderDouble struct {
	elastictranscoderiface.ElasticTranscoderAPI
	*awsdouble.AWSTestDouble
}

// Constructor for ElasticTranscoderDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *ElasticTranscoderDouble {
	result := &ElasticTranscoderDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*elastictranscoderiface.ElasticTranscoderAPI)(nil), configurators...)
	return result
}

func (d *ElasticTranscoderDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *ElasticTranscoderDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CancelJobWithContext":
		return m.Fake(d.fakeCancelJobWithContext)

	case "CreateJobWithContext":
		return m.Fake(d.fakeCreateJobWithContext)

	case "CreatePipelineWithContext":
		return m.Fake(d.fakeCreatePipelineWithContext)

	case "CreatePresetWithContext":
		return m.Fake(d.fakeCreatePresetWithContext)

	case "DeletePipelineWithContext":
		return m.Fake(d.fakeDeletePipelineWithContext)

	case "DeletePresetWithContext":
		return m.Fake(d.fakeDeletePresetWithContext)

	case "ListJobsByPipelinePages":
		return m.Fake(d.fakeListJobsByPipelinePages)

	case "ListJobsByPipelinePagesWithContext":
		return m.Fake(d.fakeListJobsByPipelinePagesWithContext)

	case "ListJobsByPipelineWithContext":
		return m.Fake(d.fakeListJobsByPipelineWithContext)

	case "ListJobsByStatusPages":
		return m.Fake(d.fakeListJobsByStatusPages)

	case "ListJobsByStatusPagesWithContext":
		return m.Fake(d.fakeListJobsByStatusPagesWithContext)

	case "ListJobsByStatusWithContext":
		return m.Fake(d.fakeListJobsByStatusWithContext)

	case "ListPipelinesPages":
		return m.Fake(d.fakeListPipelinesPages)

	case "ListPipelinesPagesWithContext":
		return m.Fake(d.fakeListPipelinesPagesWithContext)

	case "ListPipelinesWithContext":
		return m.Fake(d.fakeListPipelinesWithContext)

	case "ListPresetsPages":
		return m.Fake(d.fakeListPresetsPages)

	case "ListPresetsPagesWithContext":
		return m.Fake(d.fakeListPresetsPagesWithContext)

	case "ListPresetsWithContext":
		return m.Fake(d.fakeListPresetsWithContext)

	case "ReadJobWithContext":
		return m.Fake(d.fakeReadJobWithContext)

	case "ReadPipelineWithContext":
		return m.Fake(d.fakeReadPipelineWithContext)

	case "ReadPresetWithContext":
		return m.Fake(d.fakeReadPresetWithContext)

	case "TestRoleWithContext":
		return m.Fake(d.fakeTestRoleWithContext)

	case "UpdatePipelineNotificationsWithContext":
		return m.Fake(d.fakeUpdatePipelineNotificationsWithContext)

	case "UpdatePipelineStatusWithContext":
		return m.Fake(d.fakeUpdatePipelineStatusWithContext)

	case "UpdatePipelineWithContext":
		return m.Fake(d.fakeUpdatePipelineWithContext)

	case "WaitUntilJobComplete":
		return m.Fake(d.fakeWaitUntilJobComplete)

	case "WaitUntilJobCompleteWithContext":
		return m.Fake(d.fakeWaitUntilJobCompleteWithContext)

	default:
		return nil
	}
}

func (d *ElasticTranscoderDouble) CancelJob(i0 *elastictranscoder.CancelJobInput) (r0 *elastictranscoder.CancelJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelJob", i0)
	r0, _ = returns[0].(*elastictranscoder.CancelJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticTranscoderDouble) CancelJobRequest(i0 *elastictranscoder.CancelJobInput) (r0 *request.Request, r1 *elastictranscoder.CancelJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elastictranscoder.CancelJobOutput)
	return
}

func (d *ElasticTranscoderDouble) CancelJobWithContext(i0 context.Context, i1 *elastictranscoder.CancelJobInput, i2 ...request.Option) (r0 *elastictranscoder.CancelJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elastictranscoder.CancelJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticTranscoderDouble) fakeCancelJobWithContext(ctx context.Context, in *elastictranscoder.CancelJobInput, _ ...request.Option) (*elastictranscoder.CancelJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelJob cancelled", ctx.Err())
	default:
		return d.CancelJob(in)
	}
}

func (d *ElasticTranscoderDouble) CreateJob(i0 *elastictranscoder.CreateJobInput) (r0 *elastictranscoder.CreateJobResponse, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateJob", i0)
	r0, _ = returns[0].(*elastictranscoder.CreateJobResponse)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticTranscoderDouble) CreateJobRequest(i0 *elastictranscoder.CreateJobInput) (r0 *request.Request, r1 *elastictranscoder.CreateJobResponse) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elastictranscoder.CreateJobResponse)
	return
}

func (d *ElasticTranscoderDouble) CreateJobWithContext(i0 context.Context, i1 *elastictranscoder.CreateJobInput, i2 ...request.Option) (r0 *elastictranscoder.CreateJobResponse, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elastictranscoder.CreateJobResponse)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticTranscoderDouble) fakeCreateJobWithContext(ctx context.Context, in *elastictranscoder.CreateJobInput, _ ...request.Option) (*elastictranscoder.CreateJobResponse, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateJob cancelled", ctx.Err())
	default:
		return d.CreateJob(in)
	}
}

func (d *ElasticTranscoderDouble) CreatePipeline(i0 *elastictranscoder.CreatePipelineInput) (r0 *elastictranscoder.CreatePipelineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePipeline", i0)
	r0, _ = returns[0].(*elastictranscoder.CreatePipelineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticTranscoderDouble) CreatePipelineRequest(i0 *elastictranscoder.CreatePipelineInput) (r0 *request.Request, r1 *elastictranscoder.CreatePipelineOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePipelineRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elastictranscoder.CreatePipelineOutput)
	return
}

func (d *ElasticTranscoderDouble) CreatePipelineWithContext(i0 context.Context, i1 *elastictranscoder.CreatePipelineInput, i2 ...request.Option) (r0 *elastictranscoder.CreatePipelineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePipelineWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elastictranscoder.CreatePipelineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticTranscoderDouble) fakeCreatePipelineWithContext(ctx context.Context, in *elastictranscoder.CreatePipelineInput, _ ...request.Option) (*elastictranscoder.CreatePipelineOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreatePipeline cancelled", ctx.Err())
	default:
		return d.CreatePipeline(in)
	}
}

func (d *ElasticTranscoderDouble) CreatePreset(i0 *elastictranscoder.CreatePresetInput) (r0 *elastictranscoder.CreatePresetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePreset", i0)
	r0, _ = returns[0].(*elastictranscoder.CreatePresetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticTranscoderDouble) CreatePresetRequest(i0 *elastictranscoder.CreatePresetInput) (r0 *request.Request, r1 *elastictranscoder.CreatePresetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePresetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elastictranscoder.CreatePresetOutput)
	return
}

func (d *ElasticTranscoderDouble) CreatePresetWithContext(i0 context.Context, i1 *elastictranscoder.CreatePresetInput, i2 ...request.Option) (r0 *elastictranscoder.CreatePresetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePresetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elastictranscoder.CreatePresetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticTranscoderDouble) fakeCreatePresetWithContext(ctx context.Context, in *elastictranscoder.CreatePresetInput, _ ...request.Option) (*elastictranscoder.CreatePresetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreatePreset cancelled", ctx.Err())
	default:
		return d.CreatePreset(in)
	}
}

func (d *ElasticTranscoderDouble) DeletePipeline(i0 *elastictranscoder.DeletePipelineInput) (r0 *elastictranscoder.DeletePipelineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePipeline", i0)
	r0, _ = returns[0].(*elastictranscoder.DeletePipelineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticTranscoderDouble) DeletePipelineRequest(i0 *elastictranscoder.DeletePipelineInput) (r0 *request.Request, r1 *elastictranscoder.DeletePipelineOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePipelineRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elastictranscoder.DeletePipelineOutput)
	return
}

func (d *ElasticTranscoderDouble) DeletePipelineWithContext(i0 context.Context, i1 *elastictranscoder.DeletePipelineInput, i2 ...request.Option) (r0 *elastictranscoder.DeletePipelineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePipelineWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elastictranscoder.DeletePipelineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticTranscoderDouble) fakeDeletePipelineWithContext(ctx context.Context, in *elastictranscoder.DeletePipelineInput, _ ...request.Option) (*elastictranscoder.DeletePipelineOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeletePipeline cancelled", ctx.Err())
	default:
		return d.DeletePipeline(in)
	}
}

func (d *ElasticTranscoderDouble) DeletePreset(i0 *elastictranscoder.DeletePresetInput) (r0 *elastictranscoder.DeletePresetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePreset", i0)
	r0, _ = returns[0].(*elastictranscoder.DeletePresetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticTranscoderDouble) DeletePresetRequest(i0 *elastictranscoder.DeletePresetInput) (r0 *request.Request, r1 *elastictranscoder.DeletePresetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePresetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elastictranscoder.DeletePresetOutput)
	return
}

func (d *ElasticTranscoderDouble) DeletePresetWithContext(i0 context.Context, i1 *elastictranscoder.DeletePresetInput, i2 ...request.Option) (r0 *elastictranscoder.DeletePresetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePresetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elastictranscoder.DeletePresetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticTranscoderDouble) fakeDeletePresetWithContext(ctx context.Context, in *elastictranscoder.DeletePresetInput, _ ...request.Option) (*elastictranscoder.DeletePresetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeletePreset cancelled", ctx.Err())
	default:
		return d.DeletePreset(in)
	}
}

func (d *ElasticTranscoderDouble) ListJobsByPipeline(i0 *elastictranscoder.ListJobsByPipelineInput) (r0 *elastictranscoder.ListJobsByPipelineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsByPipeline", i0)
	r0, _ = returns[0].(*elastictranscoder.ListJobsByPipelineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticTranscoderDouble) ListJobsByPipelinePages(i0 *elastictranscoder.ListJobsByPipelineInput, i1 func(*elastictranscoder.ListJobsByPipelineOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsByPipelinePages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ElasticTranscoderDouble) fakeListJobsByPipelinePages(in *elastictranscoder.ListJobsByPipelineInput, pager func(*elastictranscoder.ListJobsByPipelineOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListJobsByPipeline", paginators, in, pager)
}

func (d *ElasticTranscoderDouble) ListJobsByPipelinePagesWithContext(i0 context.Context, i1 *elastictranscoder.ListJobsByPipelineInput, i2 func(*elastictranscoder.ListJobsByPipelineOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsByPipelinePagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ElasticTranscoderDouble) fakeListJobsByPipelinePagesWithContext(ctx context.Context, in *elastictranscoder.ListJobsByPipelineInput, pager func(*elastictranscoder.ListJobsByPipelineOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListJobsByPipeline", paginators, ctx, in, pager, options...)
}

func (d *ElasticTranscoderDouble) ListJobsByPipelineRequest(i0 *elastictranscoder.ListJobsByPipelineInput) (r0 *request.Request, r1 *elastictranscoder.ListJobsByPipelineOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsByPipelineRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elastictranscoder.ListJobsByPipelineOutput)
	return
}

func (d *ElasticTranscoderDouble) ListJobsByPipelineWithContext(i0 context.Context, i1 *elastictranscoder.ListJobsByPipelineInput, i2 ...request.Option) (r0 *elastictranscoder.ListJobsByPipelineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsByPipelineWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elastictranscoder.ListJobsByPipelineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticTranscoderDouble) fakeListJobsByPipelineWithContext(ctx context.Context, in *elastictranscoder.ListJobsByPipelineInput, _ ...request.Option) (*elastictranscoder.ListJobsByPipelineOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListJobsByPipeline cancelled", ctx.Err())
	default:
		return d.ListJobsByPipeline(in)
	}
}

func (d *ElasticTranscoderDouble) ListJobsByStatus(i0 *elastictranscoder.ListJobsByStatusInput) (r0 *elastictranscoder.ListJobsByStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsByStatus", i0)
	r0, _ = returns[0].(*elastictranscoder.ListJobsByStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticTranscoderDouble) ListJobsByStatusPages(i0 *elastictranscoder.ListJobsByStatusInput, i1 func(*elastictranscoder.ListJobsByStatusOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsByStatusPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ElasticTranscoderDouble) fakeListJobsByStatusPages(in *elastictranscoder.ListJobsByStatusInput, pager func(*elastictranscoder.ListJobsByStatusOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListJobsByStatus", paginators, in, pager)
}

func (d *ElasticTranscoderDouble) ListJobsByStatusPagesWithContext(i0 context.Context, i1 *elastictranscoder.ListJobsByStatusInput, i2 func(*elastictranscoder.ListJobsByStatusOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsByStatusPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ElasticTranscoderDouble) fakeListJobsByStatusPagesWithContext(ctx context.Context, in *elastictranscoder.ListJobsByStatusInput, pager func(*elastictranscoder.ListJobsByStatusOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListJobsByStatus", paginators, ctx, in, pager, options...)
}

func (d *ElasticTranscoderDouble) ListJobsByStatusRequest(i0 *elastictranscoder.ListJobsByStatusInput) (r0 *request.Request, r1 *elastictranscoder.ListJobsByStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsByStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elastictranscoder.ListJobsByStatusOutput)
	return
}

func (d *ElasticTranscoderDouble) ListJobsByStatusWithContext(i0 context.Context, i1 *elastictranscoder.ListJobsByStatusInput, i2 ...request.Option) (r0 *elastictranscoder.ListJobsByStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsByStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elastictranscoder.ListJobsByStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticTranscoderDouble) fakeListJobsByStatusWithContext(ctx context.Context, in *elastictranscoder.ListJobsByStatusInput, _ ...request.Option) (*elastictranscoder.ListJobsByStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListJobsByStatus cancelled", ctx.Err())
	default:
		return d.ListJobsByStatus(in)
	}
}

func (d *ElasticTranscoderDouble) ListPipelines(i0 *elastictranscoder.ListPipelinesInput) (r0 *elastictranscoder.ListPipelinesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPipelines", i0)
	r0, _ = returns[0].(*elastictranscoder.ListPipelinesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticTranscoderDouble) ListPipelinesPages(i0 *elastictranscoder.ListPipelinesInput, i1 func(*elastictranscoder.ListPipelinesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPipelinesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ElasticTranscoderDouble) fakeListPipelinesPages(in *elastictranscoder.ListPipelinesInput, pager func(*elastictranscoder.ListPipelinesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListPipelines", paginators, in, pager)
}

func (d *ElasticTranscoderDouble) ListPipelinesPagesWithContext(i0 context.Context, i1 *elastictranscoder.ListPipelinesInput, i2 func(*elastictranscoder.ListPipelinesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPipelinesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ElasticTranscoderDouble) fakeListPipelinesPagesWithContext(ctx context.Context, in *elastictranscoder.ListPipelinesInput, pager func(*elastictranscoder.ListPipelinesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListPipelines", paginators, ctx, in, pager, options...)
}

func (d *ElasticTranscoderDouble) ListPipelinesRequest(i0 *elastictranscoder.ListPipelinesInput) (r0 *request.Request, r1 *elastictranscoder.ListPipelinesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPipelinesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elastictranscoder.ListPipelinesOutput)
	return
}

func (d *ElasticTranscoderDouble) ListPipelinesWithContext(i0 context.Context, i1 *elastictranscoder.ListPipelinesInput, i2 ...request.Option) (r0 *elastictranscoder.ListPipelinesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPipelinesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elastictranscoder.ListPipelinesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticTranscoderDouble) fakeListPipelinesWithContext(ctx context.Context, in *elastictranscoder.ListPipelinesInput, _ ...request.Option) (*elastictranscoder.ListPipelinesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListPipelines cancelled", ctx.Err())
	default:
		return d.ListPipelines(in)
	}
}

func (d *ElasticTranscoderDouble) ListPresets(i0 *elastictranscoder.ListPresetsInput) (r0 *elastictranscoder.ListPresetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPresets", i0)
	r0, _ = returns[0].(*elastictranscoder.ListPresetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticTranscoderDouble) ListPresetsPages(i0 *elastictranscoder.ListPresetsInput, i1 func(*elastictranscoder.ListPresetsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPresetsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ElasticTranscoderDouble) fakeListPresetsPages(in *elastictranscoder.ListPresetsInput, pager func(*elastictranscoder.ListPresetsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListPresets", paginators, in, pager)
}

func (d *ElasticTranscoderDouble) ListPresetsPagesWithContext(i0 context.Context, i1 *elastictranscoder.ListPresetsInput, i2 func(*elastictranscoder.ListPresetsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPresetsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ElasticTranscoderDouble) fakeListPresetsPagesWithContext(ctx context.Context, in *elastictranscoder.ListPresetsInput, pager func(*elastictranscoder.ListPresetsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListPresets", paginators, ctx, in, pager, options...)
}

func (d *ElasticTranscoderDouble) ListPresetsRequest(i0 *elastictranscoder.ListPresetsInput) (r0 *request.Request, r1 *elastictranscoder.ListPresetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPresetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elastictranscoder.ListPresetsOutput)
	return
}

func (d *ElasticTranscoderDouble) ListPresetsWithContext(i0 context.Context, i1 *elastictranscoder.ListPresetsInput, i2 ...request.Option) (r0 *elastictranscoder.ListPresetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPresetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elastictranscoder.ListPresetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticTranscoderDouble) fakeListPresetsWithContext(ctx context.Context, in *elastictranscoder.ListPresetsInput, _ ...request.Option) (*elastictranscoder.ListPresetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListPresets cancelled", ctx.Err())
	default:
		return d.ListPresets(in)
	}
}

func (d *ElasticTranscoderDouble) ReadJob(i0 *elastictranscoder.ReadJobInput) (r0 *elastictranscoder.ReadJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReadJob", i0)
	r0, _ = returns[0].(*elastictranscoder.ReadJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticTranscoderDouble) ReadJobRequest(i0 *elastictranscoder.ReadJobInput) (r0 *request.Request, r1 *elastictranscoder.ReadJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReadJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elastictranscoder.ReadJobOutput)
	return
}

func (d *ElasticTranscoderDouble) ReadJobWithContext(i0 context.Context, i1 *elastictranscoder.ReadJobInput, i2 ...request.Option) (r0 *elastictranscoder.ReadJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReadJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elastictranscoder.ReadJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticTranscoderDouble) fakeReadJobWithContext(ctx context.Context, in *elastictranscoder.ReadJobInput, _ ...request.Option) (*elastictranscoder.ReadJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ReadJob cancelled", ctx.Err())
	default:
		return d.ReadJob(in)
	}
}

func (d *ElasticTranscoderDouble) ReadPipeline(i0 *elastictranscoder.ReadPipelineInput) (r0 *elastictranscoder.ReadPipelineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReadPipeline", i0)
	r0, _ = returns[0].(*elastictranscoder.ReadPipelineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticTranscoderDouble) ReadPipelineRequest(i0 *elastictranscoder.ReadPipelineInput) (r0 *request.Request, r1 *elastictranscoder.ReadPipelineOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReadPipelineRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elastictranscoder.ReadPipelineOutput)
	return
}

func (d *ElasticTranscoderDouble) ReadPipelineWithContext(i0 context.Context, i1 *elastictranscoder.ReadPipelineInput, i2 ...request.Option) (r0 *elastictranscoder.ReadPipelineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReadPipelineWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elastictranscoder.ReadPipelineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticTranscoderDouble) fakeReadPipelineWithContext(ctx context.Context, in *elastictranscoder.ReadPipelineInput, _ ...request.Option) (*elastictranscoder.ReadPipelineOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ReadPipeline cancelled", ctx.Err())
	default:
		return d.ReadPipeline(in)
	}
}

func (d *ElasticTranscoderDouble) ReadPreset(i0 *elastictranscoder.ReadPresetInput) (r0 *elastictranscoder.ReadPresetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReadPreset", i0)
	r0, _ = returns[0].(*elastictranscoder.ReadPresetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticTranscoderDouble) ReadPresetRequest(i0 *elastictranscoder.ReadPresetInput) (r0 *request.Request, r1 *elastictranscoder.ReadPresetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReadPresetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elastictranscoder.ReadPresetOutput)
	return
}

func (d *ElasticTranscoderDouble) ReadPresetWithContext(i0 context.Context, i1 *elastictranscoder.ReadPresetInput, i2 ...request.Option) (r0 *elastictranscoder.ReadPresetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReadPresetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elastictranscoder.ReadPresetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticTranscoderDouble) fakeReadPresetWithContext(ctx context.Context, in *elastictranscoder.ReadPresetInput, _ ...request.Option) (*elastictranscoder.ReadPresetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ReadPreset cancelled", ctx.Err())
	default:
		return d.ReadPreset(in)
	}
}

func (d *ElasticTranscoderDouble) TestRole(i0 *elastictranscoder.TestRoleInput) (r0 *elastictranscoder.TestRoleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestRole", i0)
	r0, _ = returns[0].(*elastictranscoder.TestRoleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticTranscoderDouble) TestRoleRequest(i0 *elastictranscoder.TestRoleInput) (r0 *request.Request, r1 *elastictranscoder.TestRoleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestRoleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elastictranscoder.TestRoleOutput)
	return
}

func (d *ElasticTranscoderDouble) TestRoleWithContext(i0 context.Context, i1 *elastictranscoder.TestRoleInput, i2 ...request.Option) (r0 *elastictranscoder.TestRoleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestRoleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elastictranscoder.TestRoleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticTranscoderDouble) fakeTestRoleWithContext(ctx context.Context, in *elastictranscoder.TestRoleInput, _ ...request.Option) (*elastictranscoder.TestRoleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TestRole cancelled", ctx.Err())
	default:
		return d.TestRole(in)
	}
}

func (d *ElasticTranscoderDouble) UpdatePipeline(i0 *elastictranscoder.UpdatePipelineInput) (r0 *elastictranscoder.UpdatePipelineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePipeline", i0)
	r0, _ = returns[0].(*elastictranscoder.UpdatePipelineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticTranscoderDouble) UpdatePipelineNotifications(i0 *elastictranscoder.UpdatePipelineNotificationsInput) (r0 *elastictranscoder.UpdatePipelineNotificationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePipelineNotifications", i0)
	r0, _ = returns[0].(*elastictranscoder.UpdatePipelineNotificationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticTranscoderDouble) UpdatePipelineNotificationsRequest(i0 *elastictranscoder.UpdatePipelineNotificationsInput) (r0 *request.Request, r1 *elastictranscoder.UpdatePipelineNotificationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePipelineNotificationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elastictranscoder.UpdatePipelineNotificationsOutput)
	return
}

func (d *ElasticTranscoderDouble) UpdatePipelineNotificationsWithContext(i0 context.Context, i1 *elastictranscoder.UpdatePipelineNotificationsInput, i2 ...request.Option) (r0 *elastictranscoder.UpdatePipelineNotificationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePipelineNotificationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elastictranscoder.UpdatePipelineNotificationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticTranscoderDouble) fakeUpdatePipelineNotificationsWithContext(ctx context.Context, in *elastictranscoder.UpdatePipelineNotificationsInput, _ ...request.Option) (*elastictranscoder.UpdatePipelineNotificationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdatePipelineNotifications cancelled", ctx.Err())
	default:
		return d.UpdatePipelineNotifications(in)
	}
}

func (d *ElasticTranscoderDouble) UpdatePipelineRequest(i0 *elastictranscoder.UpdatePipelineInput) (r0 *request.Request, r1 *elastictranscoder.UpdatePipelineOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePipelineRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elastictranscoder.UpdatePipelineOutput)
	return
}

func (d *ElasticTranscoderDouble) UpdatePipelineStatus(i0 *elastictranscoder.UpdatePipelineStatusInput) (r0 *elastictranscoder.UpdatePipelineStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePipelineStatus", i0)
	r0, _ = returns[0].(*elastictranscoder.UpdatePipelineStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticTranscoderDouble) UpdatePipelineStatusRequest(i0 *elastictranscoder.UpdatePipelineStatusInput) (r0 *request.Request, r1 *elastictranscoder.UpdatePipelineStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePipelineStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elastictranscoder.UpdatePipelineStatusOutput)
	return
}

func (d *ElasticTranscoderDouble) UpdatePipelineStatusWithContext(i0 context.Context, i1 *elastictranscoder.UpdatePipelineStatusInput, i2 ...request.Option) (r0 *elastictranscoder.UpdatePipelineStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePipelineStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elastictranscoder.UpdatePipelineStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticTranscoderDouble) fakeUpdatePipelineStatusWithContext(ctx context.Context, in *elastictranscoder.UpdatePipelineStatusInput, _ ...request.Option) (*elastictranscoder.UpdatePipelineStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdatePipelineStatus cancelled", ctx.Err())
	default:
		return d.UpdatePipelineStatus(in)
	}
}

func (d *ElasticTranscoderDouble) UpdatePipelineWithContext(i0 context.Context, i1 *elastictranscoder.UpdatePipelineInput, i2 ...request.Option) (r0 *elastictranscoder.UpdatePipelineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePipelineWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elastictranscoder.UpdatePipelineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticTranscoderDouble) fakeUpdatePipelineWithContext(ctx context.Context, in *elastictranscoder.UpdatePipelineInput, _ ...request.Option) (*elastictranscoder.UpdatePipelineOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdatePipeline cancelled", ctx.Err())
	default:
		return d.UpdatePipeline(in)
	}
}

func (d *ElasticTranscoderDouble) WaitUntilJobComplete(i0 *elastictranscoder.ReadJobInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilJobComplete", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *ElasticTranscoderDouble) fakeWaitUntilJobComplete(in *elastictranscoder.ReadJobInput) error {
	return d.WaitUntil("JobComplete", waiters, in)
}

func (d *ElasticTranscoderDouble) WaitUntilJobCompleteWithContext(i0 context.Context, i1 *elastictranscoder.ReadJobInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilJobCompleteWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *ElasticTranscoderDouble) fakeWaitUntilJobCompleteWithContext(ctx context.Context, in *elastictranscoder.ReadJobInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("JobComplete", waiters, ctx, in, waitOption...)
}
