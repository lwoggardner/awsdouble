// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:11:34+11:00

// Package cloudfrontdouble provides a TestDouble implementation of cloudfrontiface.CloudFrontAPI
package cloudfrontdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/cloudfront"
	"github.com/aws/aws-sdk-go/service/cloudfront/cloudfrontiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// CloudFrontDouble is TestDouble for cloudfrontiface.CloudFrontAPI
type CloudFrontDouble struct {
	cloudfrontiface.CloudFrontAPI
	*awsdouble.AWSTestDouble
}

// Constructor for CloudFrontDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *CloudFrontDouble {
	result := &CloudFrontDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*cloudfrontiface.CloudFrontAPI)(nil), configurators...)
	return result
}

func (d *CloudFrontDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *CloudFrontDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CreateCloudFrontOriginAccessIdentityWithContext":
		return m.Fake(d.fakeCreateCloudFrontOriginAccessIdentityWithContext)

	case "CreateDistributionWithContext":
		return m.Fake(d.fakeCreateDistributionWithContext)

	case "CreateDistributionWithTagsWithContext":
		return m.Fake(d.fakeCreateDistributionWithTagsWithContext)

	case "CreateFieldLevelEncryptionConfigWithContext":
		return m.Fake(d.fakeCreateFieldLevelEncryptionConfigWithContext)

	case "CreateFieldLevelEncryptionProfileWithContext":
		return m.Fake(d.fakeCreateFieldLevelEncryptionProfileWithContext)

	case "CreateInvalidationWithContext":
		return m.Fake(d.fakeCreateInvalidationWithContext)

	case "CreatePublicKeyWithContext":
		return m.Fake(d.fakeCreatePublicKeyWithContext)

	case "CreateStreamingDistributionWithContext":
		return m.Fake(d.fakeCreateStreamingDistributionWithContext)

	case "CreateStreamingDistributionWithTagsWithContext":
		return m.Fake(d.fakeCreateStreamingDistributionWithTagsWithContext)

	case "DeleteCloudFrontOriginAccessIdentityWithContext":
		return m.Fake(d.fakeDeleteCloudFrontOriginAccessIdentityWithContext)

	case "DeleteDistributionWithContext":
		return m.Fake(d.fakeDeleteDistributionWithContext)

	case "DeleteFieldLevelEncryptionConfigWithContext":
		return m.Fake(d.fakeDeleteFieldLevelEncryptionConfigWithContext)

	case "DeleteFieldLevelEncryptionProfileWithContext":
		return m.Fake(d.fakeDeleteFieldLevelEncryptionProfileWithContext)

	case "DeletePublicKeyWithContext":
		return m.Fake(d.fakeDeletePublicKeyWithContext)

	case "DeleteStreamingDistributionWithContext":
		return m.Fake(d.fakeDeleteStreamingDistributionWithContext)

	case "GetCloudFrontOriginAccessIdentityConfigWithContext":
		return m.Fake(d.fakeGetCloudFrontOriginAccessIdentityConfigWithContext)

	case "GetCloudFrontOriginAccessIdentityWithContext":
		return m.Fake(d.fakeGetCloudFrontOriginAccessIdentityWithContext)

	case "GetDistributionConfigWithContext":
		return m.Fake(d.fakeGetDistributionConfigWithContext)

	case "GetDistributionWithContext":
		return m.Fake(d.fakeGetDistributionWithContext)

	case "GetFieldLevelEncryptionConfigWithContext":
		return m.Fake(d.fakeGetFieldLevelEncryptionConfigWithContext)

	case "GetFieldLevelEncryptionProfileConfigWithContext":
		return m.Fake(d.fakeGetFieldLevelEncryptionProfileConfigWithContext)

	case "GetFieldLevelEncryptionProfileWithContext":
		return m.Fake(d.fakeGetFieldLevelEncryptionProfileWithContext)

	case "GetFieldLevelEncryptionWithContext":
		return m.Fake(d.fakeGetFieldLevelEncryptionWithContext)

	case "GetInvalidationWithContext":
		return m.Fake(d.fakeGetInvalidationWithContext)

	case "GetPublicKeyConfigWithContext":
		return m.Fake(d.fakeGetPublicKeyConfigWithContext)

	case "GetPublicKeyWithContext":
		return m.Fake(d.fakeGetPublicKeyWithContext)

	case "GetStreamingDistributionConfigWithContext":
		return m.Fake(d.fakeGetStreamingDistributionConfigWithContext)

	case "GetStreamingDistributionWithContext":
		return m.Fake(d.fakeGetStreamingDistributionWithContext)

	case "ListCloudFrontOriginAccessIdentitiesPages":
		return m.Fake(d.fakeListCloudFrontOriginAccessIdentitiesPages)

	case "ListCloudFrontOriginAccessIdentitiesPagesWithContext":
		return m.Fake(d.fakeListCloudFrontOriginAccessIdentitiesPagesWithContext)

	case "ListCloudFrontOriginAccessIdentitiesWithContext":
		return m.Fake(d.fakeListCloudFrontOriginAccessIdentitiesWithContext)

	case "ListDistributionsByWebACLIdWithContext":
		return m.Fake(d.fakeListDistributionsByWebACLIdWithContext)

	case "ListDistributionsPages":
		return m.Fake(d.fakeListDistributionsPages)

	case "ListDistributionsPagesWithContext":
		return m.Fake(d.fakeListDistributionsPagesWithContext)

	case "ListDistributionsWithContext":
		return m.Fake(d.fakeListDistributionsWithContext)

	case "ListFieldLevelEncryptionConfigsWithContext":
		return m.Fake(d.fakeListFieldLevelEncryptionConfigsWithContext)

	case "ListFieldLevelEncryptionProfilesWithContext":
		return m.Fake(d.fakeListFieldLevelEncryptionProfilesWithContext)

	case "ListInvalidationsPages":
		return m.Fake(d.fakeListInvalidationsPages)

	case "ListInvalidationsPagesWithContext":
		return m.Fake(d.fakeListInvalidationsPagesWithContext)

	case "ListInvalidationsWithContext":
		return m.Fake(d.fakeListInvalidationsWithContext)

	case "ListPublicKeysWithContext":
		return m.Fake(d.fakeListPublicKeysWithContext)

	case "ListStreamingDistributionsPages":
		return m.Fake(d.fakeListStreamingDistributionsPages)

	case "ListStreamingDistributionsPagesWithContext":
		return m.Fake(d.fakeListStreamingDistributionsPagesWithContext)

	case "ListStreamingDistributionsWithContext":
		return m.Fake(d.fakeListStreamingDistributionsWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateCloudFrontOriginAccessIdentityWithContext":
		return m.Fake(d.fakeUpdateCloudFrontOriginAccessIdentityWithContext)

	case "UpdateDistributionWithContext":
		return m.Fake(d.fakeUpdateDistributionWithContext)

	case "UpdateFieldLevelEncryptionConfigWithContext":
		return m.Fake(d.fakeUpdateFieldLevelEncryptionConfigWithContext)

	case "UpdateFieldLevelEncryptionProfileWithContext":
		return m.Fake(d.fakeUpdateFieldLevelEncryptionProfileWithContext)

	case "UpdatePublicKeyWithContext":
		return m.Fake(d.fakeUpdatePublicKeyWithContext)

	case "UpdateStreamingDistributionWithContext":
		return m.Fake(d.fakeUpdateStreamingDistributionWithContext)

	case "WaitUntilDistributionDeployed":
		return m.Fake(d.fakeWaitUntilDistributionDeployed)

	case "WaitUntilDistributionDeployedWithContext":
		return m.Fake(d.fakeWaitUntilDistributionDeployedWithContext)

	case "WaitUntilInvalidationCompleted":
		return m.Fake(d.fakeWaitUntilInvalidationCompleted)

	case "WaitUntilInvalidationCompletedWithContext":
		return m.Fake(d.fakeWaitUntilInvalidationCompletedWithContext)

	case "WaitUntilStreamingDistributionDeployed":
		return m.Fake(d.fakeWaitUntilStreamingDistributionDeployed)

	case "WaitUntilStreamingDistributionDeployedWithContext":
		return m.Fake(d.fakeWaitUntilStreamingDistributionDeployedWithContext)

	default:
		return nil
	}
}

func (d *CloudFrontDouble) CreateCloudFrontOriginAccessIdentity(i0 *cloudfront.CreateCloudFrontOriginAccessIdentityInput) (r0 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCloudFrontOriginAccessIdentity", i0)
	r0, _ = returns[0].(*cloudfront.CreateCloudFrontOriginAccessIdentityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) CreateCloudFrontOriginAccessIdentityRequest(i0 *cloudfront.CreateCloudFrontOriginAccessIdentityInput) (r0 *request.Request, r1 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCloudFrontOriginAccessIdentityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.CreateCloudFrontOriginAccessIdentityOutput)
	return
}

func (d *CloudFrontDouble) CreateCloudFrontOriginAccessIdentityWithContext(i0 context.Context, i1 *cloudfront.CreateCloudFrontOriginAccessIdentityInput, i2 ...request.Option) (r0 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCloudFrontOriginAccessIdentityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.CreateCloudFrontOriginAccessIdentityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeCreateCloudFrontOriginAccessIdentityWithContext(ctx context.Context, in *cloudfront.CreateCloudFrontOriginAccessIdentityInput, _ ...request.Option) (*cloudfront.CreateCloudFrontOriginAccessIdentityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateCloudFrontOriginAccessIdentity cancelled", ctx.Err())
	default:
		return d.CreateCloudFrontOriginAccessIdentity(in)
	}
}

func (d *CloudFrontDouble) CreateDistribution(i0 *cloudfront.CreateDistributionInput) (r0 *cloudfront.CreateDistributionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDistribution", i0)
	r0, _ = returns[0].(*cloudfront.CreateDistributionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) CreateDistributionRequest(i0 *cloudfront.CreateDistributionInput) (r0 *request.Request, r1 *cloudfront.CreateDistributionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDistributionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.CreateDistributionOutput)
	return
}

func (d *CloudFrontDouble) CreateDistributionWithContext(i0 context.Context, i1 *cloudfront.CreateDistributionInput, i2 ...request.Option) (r0 *cloudfront.CreateDistributionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDistributionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.CreateDistributionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeCreateDistributionWithContext(ctx context.Context, in *cloudfront.CreateDistributionInput, _ ...request.Option) (*cloudfront.CreateDistributionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDistribution cancelled", ctx.Err())
	default:
		return d.CreateDistribution(in)
	}
}

func (d *CloudFrontDouble) CreateDistributionWithTags(i0 *cloudfront.CreateDistributionWithTagsInput) (r0 *cloudfront.CreateDistributionWithTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDistributionWithTags", i0)
	r0, _ = returns[0].(*cloudfront.CreateDistributionWithTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) CreateDistributionWithTagsRequest(i0 *cloudfront.CreateDistributionWithTagsInput) (r0 *request.Request, r1 *cloudfront.CreateDistributionWithTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDistributionWithTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.CreateDistributionWithTagsOutput)
	return
}

func (d *CloudFrontDouble) CreateDistributionWithTagsWithContext(i0 context.Context, i1 *cloudfront.CreateDistributionWithTagsInput, i2 ...request.Option) (r0 *cloudfront.CreateDistributionWithTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDistributionWithTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.CreateDistributionWithTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeCreateDistributionWithTagsWithContext(ctx context.Context, in *cloudfront.CreateDistributionWithTagsInput, _ ...request.Option) (*cloudfront.CreateDistributionWithTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDistributionWithTags cancelled", ctx.Err())
	default:
		return d.CreateDistributionWithTags(in)
	}
}

func (d *CloudFrontDouble) CreateFieldLevelEncryptionConfig(i0 *cloudfront.CreateFieldLevelEncryptionConfigInput) (r0 *cloudfront.CreateFieldLevelEncryptionConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFieldLevelEncryptionConfig", i0)
	r0, _ = returns[0].(*cloudfront.CreateFieldLevelEncryptionConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) CreateFieldLevelEncryptionConfigRequest(i0 *cloudfront.CreateFieldLevelEncryptionConfigInput) (r0 *request.Request, r1 *cloudfront.CreateFieldLevelEncryptionConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFieldLevelEncryptionConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.CreateFieldLevelEncryptionConfigOutput)
	return
}

func (d *CloudFrontDouble) CreateFieldLevelEncryptionConfigWithContext(i0 context.Context, i1 *cloudfront.CreateFieldLevelEncryptionConfigInput, i2 ...request.Option) (r0 *cloudfront.CreateFieldLevelEncryptionConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFieldLevelEncryptionConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.CreateFieldLevelEncryptionConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeCreateFieldLevelEncryptionConfigWithContext(ctx context.Context, in *cloudfront.CreateFieldLevelEncryptionConfigInput, _ ...request.Option) (*cloudfront.CreateFieldLevelEncryptionConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateFieldLevelEncryptionConfig cancelled", ctx.Err())
	default:
		return d.CreateFieldLevelEncryptionConfig(in)
	}
}

func (d *CloudFrontDouble) CreateFieldLevelEncryptionProfile(i0 *cloudfront.CreateFieldLevelEncryptionProfileInput) (r0 *cloudfront.CreateFieldLevelEncryptionProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFieldLevelEncryptionProfile", i0)
	r0, _ = returns[0].(*cloudfront.CreateFieldLevelEncryptionProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) CreateFieldLevelEncryptionProfileRequest(i0 *cloudfront.CreateFieldLevelEncryptionProfileInput) (r0 *request.Request, r1 *cloudfront.CreateFieldLevelEncryptionProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFieldLevelEncryptionProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.CreateFieldLevelEncryptionProfileOutput)
	return
}

func (d *CloudFrontDouble) CreateFieldLevelEncryptionProfileWithContext(i0 context.Context, i1 *cloudfront.CreateFieldLevelEncryptionProfileInput, i2 ...request.Option) (r0 *cloudfront.CreateFieldLevelEncryptionProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFieldLevelEncryptionProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.CreateFieldLevelEncryptionProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeCreateFieldLevelEncryptionProfileWithContext(ctx context.Context, in *cloudfront.CreateFieldLevelEncryptionProfileInput, _ ...request.Option) (*cloudfront.CreateFieldLevelEncryptionProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateFieldLevelEncryptionProfile cancelled", ctx.Err())
	default:
		return d.CreateFieldLevelEncryptionProfile(in)
	}
}

func (d *CloudFrontDouble) CreateInvalidation(i0 *cloudfront.CreateInvalidationInput) (r0 *cloudfront.CreateInvalidationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInvalidation", i0)
	r0, _ = returns[0].(*cloudfront.CreateInvalidationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) CreateInvalidationRequest(i0 *cloudfront.CreateInvalidationInput) (r0 *request.Request, r1 *cloudfront.CreateInvalidationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInvalidationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.CreateInvalidationOutput)
	return
}

func (d *CloudFrontDouble) CreateInvalidationWithContext(i0 context.Context, i1 *cloudfront.CreateInvalidationInput, i2 ...request.Option) (r0 *cloudfront.CreateInvalidationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInvalidationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.CreateInvalidationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeCreateInvalidationWithContext(ctx context.Context, in *cloudfront.CreateInvalidationInput, _ ...request.Option) (*cloudfront.CreateInvalidationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateInvalidation cancelled", ctx.Err())
	default:
		return d.CreateInvalidation(in)
	}
}

func (d *CloudFrontDouble) CreatePublicKey(i0 *cloudfront.CreatePublicKeyInput) (r0 *cloudfront.CreatePublicKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePublicKey", i0)
	r0, _ = returns[0].(*cloudfront.CreatePublicKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) CreatePublicKeyRequest(i0 *cloudfront.CreatePublicKeyInput) (r0 *request.Request, r1 *cloudfront.CreatePublicKeyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePublicKeyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.CreatePublicKeyOutput)
	return
}

func (d *CloudFrontDouble) CreatePublicKeyWithContext(i0 context.Context, i1 *cloudfront.CreatePublicKeyInput, i2 ...request.Option) (r0 *cloudfront.CreatePublicKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePublicKeyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.CreatePublicKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeCreatePublicKeyWithContext(ctx context.Context, in *cloudfront.CreatePublicKeyInput, _ ...request.Option) (*cloudfront.CreatePublicKeyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreatePublicKey cancelled", ctx.Err())
	default:
		return d.CreatePublicKey(in)
	}
}

func (d *CloudFrontDouble) CreateStreamingDistribution(i0 *cloudfront.CreateStreamingDistributionInput) (r0 *cloudfront.CreateStreamingDistributionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStreamingDistribution", i0)
	r0, _ = returns[0].(*cloudfront.CreateStreamingDistributionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) CreateStreamingDistributionRequest(i0 *cloudfront.CreateStreamingDistributionInput) (r0 *request.Request, r1 *cloudfront.CreateStreamingDistributionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStreamingDistributionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.CreateStreamingDistributionOutput)
	return
}

func (d *CloudFrontDouble) CreateStreamingDistributionWithContext(i0 context.Context, i1 *cloudfront.CreateStreamingDistributionInput, i2 ...request.Option) (r0 *cloudfront.CreateStreamingDistributionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStreamingDistributionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.CreateStreamingDistributionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeCreateStreamingDistributionWithContext(ctx context.Context, in *cloudfront.CreateStreamingDistributionInput, _ ...request.Option) (*cloudfront.CreateStreamingDistributionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateStreamingDistribution cancelled", ctx.Err())
	default:
		return d.CreateStreamingDistribution(in)
	}
}

func (d *CloudFrontDouble) CreateStreamingDistributionWithTags(i0 *cloudfront.CreateStreamingDistributionWithTagsInput) (r0 *cloudfront.CreateStreamingDistributionWithTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStreamingDistributionWithTags", i0)
	r0, _ = returns[0].(*cloudfront.CreateStreamingDistributionWithTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) CreateStreamingDistributionWithTagsRequest(i0 *cloudfront.CreateStreamingDistributionWithTagsInput) (r0 *request.Request, r1 *cloudfront.CreateStreamingDistributionWithTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStreamingDistributionWithTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.CreateStreamingDistributionWithTagsOutput)
	return
}

func (d *CloudFrontDouble) CreateStreamingDistributionWithTagsWithContext(i0 context.Context, i1 *cloudfront.CreateStreamingDistributionWithTagsInput, i2 ...request.Option) (r0 *cloudfront.CreateStreamingDistributionWithTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStreamingDistributionWithTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.CreateStreamingDistributionWithTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeCreateStreamingDistributionWithTagsWithContext(ctx context.Context, in *cloudfront.CreateStreamingDistributionWithTagsInput, _ ...request.Option) (*cloudfront.CreateStreamingDistributionWithTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateStreamingDistributionWithTags cancelled", ctx.Err())
	default:
		return d.CreateStreamingDistributionWithTags(in)
	}
}

func (d *CloudFrontDouble) DeleteCloudFrontOriginAccessIdentity(i0 *cloudfront.DeleteCloudFrontOriginAccessIdentityInput) (r0 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCloudFrontOriginAccessIdentity", i0)
	r0, _ = returns[0].(*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) DeleteCloudFrontOriginAccessIdentityRequest(i0 *cloudfront.DeleteCloudFrontOriginAccessIdentityInput) (r0 *request.Request, r1 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCloudFrontOriginAccessIdentityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput)
	return
}

func (d *CloudFrontDouble) DeleteCloudFrontOriginAccessIdentityWithContext(i0 context.Context, i1 *cloudfront.DeleteCloudFrontOriginAccessIdentityInput, i2 ...request.Option) (r0 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCloudFrontOriginAccessIdentityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeDeleteCloudFrontOriginAccessIdentityWithContext(ctx context.Context, in *cloudfront.DeleteCloudFrontOriginAccessIdentityInput, _ ...request.Option) (*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteCloudFrontOriginAccessIdentity cancelled", ctx.Err())
	default:
		return d.DeleteCloudFrontOriginAccessIdentity(in)
	}
}

func (d *CloudFrontDouble) DeleteDistribution(i0 *cloudfront.DeleteDistributionInput) (r0 *cloudfront.DeleteDistributionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDistribution", i0)
	r0, _ = returns[0].(*cloudfront.DeleteDistributionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) DeleteDistributionRequest(i0 *cloudfront.DeleteDistributionInput) (r0 *request.Request, r1 *cloudfront.DeleteDistributionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDistributionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.DeleteDistributionOutput)
	return
}

func (d *CloudFrontDouble) DeleteDistributionWithContext(i0 context.Context, i1 *cloudfront.DeleteDistributionInput, i2 ...request.Option) (r0 *cloudfront.DeleteDistributionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDistributionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.DeleteDistributionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeDeleteDistributionWithContext(ctx context.Context, in *cloudfront.DeleteDistributionInput, _ ...request.Option) (*cloudfront.DeleteDistributionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDistribution cancelled", ctx.Err())
	default:
		return d.DeleteDistribution(in)
	}
}

func (d *CloudFrontDouble) DeleteFieldLevelEncryptionConfig(i0 *cloudfront.DeleteFieldLevelEncryptionConfigInput) (r0 *cloudfront.DeleteFieldLevelEncryptionConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFieldLevelEncryptionConfig", i0)
	r0, _ = returns[0].(*cloudfront.DeleteFieldLevelEncryptionConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) DeleteFieldLevelEncryptionConfigRequest(i0 *cloudfront.DeleteFieldLevelEncryptionConfigInput) (r0 *request.Request, r1 *cloudfront.DeleteFieldLevelEncryptionConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFieldLevelEncryptionConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.DeleteFieldLevelEncryptionConfigOutput)
	return
}

func (d *CloudFrontDouble) DeleteFieldLevelEncryptionConfigWithContext(i0 context.Context, i1 *cloudfront.DeleteFieldLevelEncryptionConfigInput, i2 ...request.Option) (r0 *cloudfront.DeleteFieldLevelEncryptionConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFieldLevelEncryptionConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.DeleteFieldLevelEncryptionConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeDeleteFieldLevelEncryptionConfigWithContext(ctx context.Context, in *cloudfront.DeleteFieldLevelEncryptionConfigInput, _ ...request.Option) (*cloudfront.DeleteFieldLevelEncryptionConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteFieldLevelEncryptionConfig cancelled", ctx.Err())
	default:
		return d.DeleteFieldLevelEncryptionConfig(in)
	}
}

func (d *CloudFrontDouble) DeleteFieldLevelEncryptionProfile(i0 *cloudfront.DeleteFieldLevelEncryptionProfileInput) (r0 *cloudfront.DeleteFieldLevelEncryptionProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFieldLevelEncryptionProfile", i0)
	r0, _ = returns[0].(*cloudfront.DeleteFieldLevelEncryptionProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) DeleteFieldLevelEncryptionProfileRequest(i0 *cloudfront.DeleteFieldLevelEncryptionProfileInput) (r0 *request.Request, r1 *cloudfront.DeleteFieldLevelEncryptionProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFieldLevelEncryptionProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.DeleteFieldLevelEncryptionProfileOutput)
	return
}

func (d *CloudFrontDouble) DeleteFieldLevelEncryptionProfileWithContext(i0 context.Context, i1 *cloudfront.DeleteFieldLevelEncryptionProfileInput, i2 ...request.Option) (r0 *cloudfront.DeleteFieldLevelEncryptionProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFieldLevelEncryptionProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.DeleteFieldLevelEncryptionProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeDeleteFieldLevelEncryptionProfileWithContext(ctx context.Context, in *cloudfront.DeleteFieldLevelEncryptionProfileInput, _ ...request.Option) (*cloudfront.DeleteFieldLevelEncryptionProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteFieldLevelEncryptionProfile cancelled", ctx.Err())
	default:
		return d.DeleteFieldLevelEncryptionProfile(in)
	}
}

func (d *CloudFrontDouble) DeletePublicKey(i0 *cloudfront.DeletePublicKeyInput) (r0 *cloudfront.DeletePublicKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePublicKey", i0)
	r0, _ = returns[0].(*cloudfront.DeletePublicKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) DeletePublicKeyRequest(i0 *cloudfront.DeletePublicKeyInput) (r0 *request.Request, r1 *cloudfront.DeletePublicKeyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePublicKeyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.DeletePublicKeyOutput)
	return
}

func (d *CloudFrontDouble) DeletePublicKeyWithContext(i0 context.Context, i1 *cloudfront.DeletePublicKeyInput, i2 ...request.Option) (r0 *cloudfront.DeletePublicKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePublicKeyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.DeletePublicKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeDeletePublicKeyWithContext(ctx context.Context, in *cloudfront.DeletePublicKeyInput, _ ...request.Option) (*cloudfront.DeletePublicKeyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeletePublicKey cancelled", ctx.Err())
	default:
		return d.DeletePublicKey(in)
	}
}

func (d *CloudFrontDouble) DeleteStreamingDistribution(i0 *cloudfront.DeleteStreamingDistributionInput) (r0 *cloudfront.DeleteStreamingDistributionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteStreamingDistribution", i0)
	r0, _ = returns[0].(*cloudfront.DeleteStreamingDistributionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) DeleteStreamingDistributionRequest(i0 *cloudfront.DeleteStreamingDistributionInput) (r0 *request.Request, r1 *cloudfront.DeleteStreamingDistributionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteStreamingDistributionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.DeleteStreamingDistributionOutput)
	return
}

func (d *CloudFrontDouble) DeleteStreamingDistributionWithContext(i0 context.Context, i1 *cloudfront.DeleteStreamingDistributionInput, i2 ...request.Option) (r0 *cloudfront.DeleteStreamingDistributionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteStreamingDistributionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.DeleteStreamingDistributionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeDeleteStreamingDistributionWithContext(ctx context.Context, in *cloudfront.DeleteStreamingDistributionInput, _ ...request.Option) (*cloudfront.DeleteStreamingDistributionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteStreamingDistribution cancelled", ctx.Err())
	default:
		return d.DeleteStreamingDistribution(in)
	}
}

func (d *CloudFrontDouble) GetCloudFrontOriginAccessIdentity(i0 *cloudfront.GetCloudFrontOriginAccessIdentityInput) (r0 *cloudfront.GetCloudFrontOriginAccessIdentityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCloudFrontOriginAccessIdentity", i0)
	r0, _ = returns[0].(*cloudfront.GetCloudFrontOriginAccessIdentityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) GetCloudFrontOriginAccessIdentityConfig(i0 *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput) (r0 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCloudFrontOriginAccessIdentityConfig", i0)
	r0, _ = returns[0].(*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) GetCloudFrontOriginAccessIdentityConfigRequest(i0 *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput) (r0 *request.Request, r1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCloudFrontOriginAccessIdentityConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput)
	return
}

func (d *CloudFrontDouble) GetCloudFrontOriginAccessIdentityConfigWithContext(i0 context.Context, i1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput, i2 ...request.Option) (r0 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCloudFrontOriginAccessIdentityConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeGetCloudFrontOriginAccessIdentityConfigWithContext(ctx context.Context, in *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput, _ ...request.Option) (*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetCloudFrontOriginAccessIdentityConfig cancelled", ctx.Err())
	default:
		return d.GetCloudFrontOriginAccessIdentityConfig(in)
	}
}

func (d *CloudFrontDouble) GetCloudFrontOriginAccessIdentityRequest(i0 *cloudfront.GetCloudFrontOriginAccessIdentityInput) (r0 *request.Request, r1 *cloudfront.GetCloudFrontOriginAccessIdentityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCloudFrontOriginAccessIdentityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.GetCloudFrontOriginAccessIdentityOutput)
	return
}

func (d *CloudFrontDouble) GetCloudFrontOriginAccessIdentityWithContext(i0 context.Context, i1 *cloudfront.GetCloudFrontOriginAccessIdentityInput, i2 ...request.Option) (r0 *cloudfront.GetCloudFrontOriginAccessIdentityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCloudFrontOriginAccessIdentityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.GetCloudFrontOriginAccessIdentityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeGetCloudFrontOriginAccessIdentityWithContext(ctx context.Context, in *cloudfront.GetCloudFrontOriginAccessIdentityInput, _ ...request.Option) (*cloudfront.GetCloudFrontOriginAccessIdentityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetCloudFrontOriginAccessIdentity cancelled", ctx.Err())
	default:
		return d.GetCloudFrontOriginAccessIdentity(in)
	}
}

func (d *CloudFrontDouble) GetDistribution(i0 *cloudfront.GetDistributionInput) (r0 *cloudfront.GetDistributionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDistribution", i0)
	r0, _ = returns[0].(*cloudfront.GetDistributionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) GetDistributionConfig(i0 *cloudfront.GetDistributionConfigInput) (r0 *cloudfront.GetDistributionConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDistributionConfig", i0)
	r0, _ = returns[0].(*cloudfront.GetDistributionConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) GetDistributionConfigRequest(i0 *cloudfront.GetDistributionConfigInput) (r0 *request.Request, r1 *cloudfront.GetDistributionConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDistributionConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.GetDistributionConfigOutput)
	return
}

func (d *CloudFrontDouble) GetDistributionConfigWithContext(i0 context.Context, i1 *cloudfront.GetDistributionConfigInput, i2 ...request.Option) (r0 *cloudfront.GetDistributionConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDistributionConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.GetDistributionConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeGetDistributionConfigWithContext(ctx context.Context, in *cloudfront.GetDistributionConfigInput, _ ...request.Option) (*cloudfront.GetDistributionConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDistributionConfig cancelled", ctx.Err())
	default:
		return d.GetDistributionConfig(in)
	}
}

func (d *CloudFrontDouble) GetDistributionRequest(i0 *cloudfront.GetDistributionInput) (r0 *request.Request, r1 *cloudfront.GetDistributionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDistributionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.GetDistributionOutput)
	return
}

func (d *CloudFrontDouble) GetDistributionWithContext(i0 context.Context, i1 *cloudfront.GetDistributionInput, i2 ...request.Option) (r0 *cloudfront.GetDistributionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDistributionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.GetDistributionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeGetDistributionWithContext(ctx context.Context, in *cloudfront.GetDistributionInput, _ ...request.Option) (*cloudfront.GetDistributionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDistribution cancelled", ctx.Err())
	default:
		return d.GetDistribution(in)
	}
}

func (d *CloudFrontDouble) GetFieldLevelEncryption(i0 *cloudfront.GetFieldLevelEncryptionInput) (r0 *cloudfront.GetFieldLevelEncryptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFieldLevelEncryption", i0)
	r0, _ = returns[0].(*cloudfront.GetFieldLevelEncryptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) GetFieldLevelEncryptionConfig(i0 *cloudfront.GetFieldLevelEncryptionConfigInput) (r0 *cloudfront.GetFieldLevelEncryptionConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFieldLevelEncryptionConfig", i0)
	r0, _ = returns[0].(*cloudfront.GetFieldLevelEncryptionConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) GetFieldLevelEncryptionConfigRequest(i0 *cloudfront.GetFieldLevelEncryptionConfigInput) (r0 *request.Request, r1 *cloudfront.GetFieldLevelEncryptionConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFieldLevelEncryptionConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.GetFieldLevelEncryptionConfigOutput)
	return
}

func (d *CloudFrontDouble) GetFieldLevelEncryptionConfigWithContext(i0 context.Context, i1 *cloudfront.GetFieldLevelEncryptionConfigInput, i2 ...request.Option) (r0 *cloudfront.GetFieldLevelEncryptionConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFieldLevelEncryptionConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.GetFieldLevelEncryptionConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeGetFieldLevelEncryptionConfigWithContext(ctx context.Context, in *cloudfront.GetFieldLevelEncryptionConfigInput, _ ...request.Option) (*cloudfront.GetFieldLevelEncryptionConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetFieldLevelEncryptionConfig cancelled", ctx.Err())
	default:
		return d.GetFieldLevelEncryptionConfig(in)
	}
}

func (d *CloudFrontDouble) GetFieldLevelEncryptionProfile(i0 *cloudfront.GetFieldLevelEncryptionProfileInput) (r0 *cloudfront.GetFieldLevelEncryptionProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFieldLevelEncryptionProfile", i0)
	r0, _ = returns[0].(*cloudfront.GetFieldLevelEncryptionProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) GetFieldLevelEncryptionProfileConfig(i0 *cloudfront.GetFieldLevelEncryptionProfileConfigInput) (r0 *cloudfront.GetFieldLevelEncryptionProfileConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFieldLevelEncryptionProfileConfig", i0)
	r0, _ = returns[0].(*cloudfront.GetFieldLevelEncryptionProfileConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) GetFieldLevelEncryptionProfileConfigRequest(i0 *cloudfront.GetFieldLevelEncryptionProfileConfigInput) (r0 *request.Request, r1 *cloudfront.GetFieldLevelEncryptionProfileConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFieldLevelEncryptionProfileConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.GetFieldLevelEncryptionProfileConfigOutput)
	return
}

func (d *CloudFrontDouble) GetFieldLevelEncryptionProfileConfigWithContext(i0 context.Context, i1 *cloudfront.GetFieldLevelEncryptionProfileConfigInput, i2 ...request.Option) (r0 *cloudfront.GetFieldLevelEncryptionProfileConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFieldLevelEncryptionProfileConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.GetFieldLevelEncryptionProfileConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeGetFieldLevelEncryptionProfileConfigWithContext(ctx context.Context, in *cloudfront.GetFieldLevelEncryptionProfileConfigInput, _ ...request.Option) (*cloudfront.GetFieldLevelEncryptionProfileConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetFieldLevelEncryptionProfileConfig cancelled", ctx.Err())
	default:
		return d.GetFieldLevelEncryptionProfileConfig(in)
	}
}

func (d *CloudFrontDouble) GetFieldLevelEncryptionProfileRequest(i0 *cloudfront.GetFieldLevelEncryptionProfileInput) (r0 *request.Request, r1 *cloudfront.GetFieldLevelEncryptionProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFieldLevelEncryptionProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.GetFieldLevelEncryptionProfileOutput)
	return
}

func (d *CloudFrontDouble) GetFieldLevelEncryptionProfileWithContext(i0 context.Context, i1 *cloudfront.GetFieldLevelEncryptionProfileInput, i2 ...request.Option) (r0 *cloudfront.GetFieldLevelEncryptionProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFieldLevelEncryptionProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.GetFieldLevelEncryptionProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeGetFieldLevelEncryptionProfileWithContext(ctx context.Context, in *cloudfront.GetFieldLevelEncryptionProfileInput, _ ...request.Option) (*cloudfront.GetFieldLevelEncryptionProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetFieldLevelEncryptionProfile cancelled", ctx.Err())
	default:
		return d.GetFieldLevelEncryptionProfile(in)
	}
}

func (d *CloudFrontDouble) GetFieldLevelEncryptionRequest(i0 *cloudfront.GetFieldLevelEncryptionInput) (r0 *request.Request, r1 *cloudfront.GetFieldLevelEncryptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFieldLevelEncryptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.GetFieldLevelEncryptionOutput)
	return
}

func (d *CloudFrontDouble) GetFieldLevelEncryptionWithContext(i0 context.Context, i1 *cloudfront.GetFieldLevelEncryptionInput, i2 ...request.Option) (r0 *cloudfront.GetFieldLevelEncryptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFieldLevelEncryptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.GetFieldLevelEncryptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeGetFieldLevelEncryptionWithContext(ctx context.Context, in *cloudfront.GetFieldLevelEncryptionInput, _ ...request.Option) (*cloudfront.GetFieldLevelEncryptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetFieldLevelEncryption cancelled", ctx.Err())
	default:
		return d.GetFieldLevelEncryption(in)
	}
}

func (d *CloudFrontDouble) GetInvalidation(i0 *cloudfront.GetInvalidationInput) (r0 *cloudfront.GetInvalidationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInvalidation", i0)
	r0, _ = returns[0].(*cloudfront.GetInvalidationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) GetInvalidationRequest(i0 *cloudfront.GetInvalidationInput) (r0 *request.Request, r1 *cloudfront.GetInvalidationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInvalidationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.GetInvalidationOutput)
	return
}

func (d *CloudFrontDouble) GetInvalidationWithContext(i0 context.Context, i1 *cloudfront.GetInvalidationInput, i2 ...request.Option) (r0 *cloudfront.GetInvalidationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInvalidationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.GetInvalidationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeGetInvalidationWithContext(ctx context.Context, in *cloudfront.GetInvalidationInput, _ ...request.Option) (*cloudfront.GetInvalidationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetInvalidation cancelled", ctx.Err())
	default:
		return d.GetInvalidation(in)
	}
}

func (d *CloudFrontDouble) GetPublicKey(i0 *cloudfront.GetPublicKeyInput) (r0 *cloudfront.GetPublicKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPublicKey", i0)
	r0, _ = returns[0].(*cloudfront.GetPublicKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) GetPublicKeyConfig(i0 *cloudfront.GetPublicKeyConfigInput) (r0 *cloudfront.GetPublicKeyConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPublicKeyConfig", i0)
	r0, _ = returns[0].(*cloudfront.GetPublicKeyConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) GetPublicKeyConfigRequest(i0 *cloudfront.GetPublicKeyConfigInput) (r0 *request.Request, r1 *cloudfront.GetPublicKeyConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPublicKeyConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.GetPublicKeyConfigOutput)
	return
}

func (d *CloudFrontDouble) GetPublicKeyConfigWithContext(i0 context.Context, i1 *cloudfront.GetPublicKeyConfigInput, i2 ...request.Option) (r0 *cloudfront.GetPublicKeyConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPublicKeyConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.GetPublicKeyConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeGetPublicKeyConfigWithContext(ctx context.Context, in *cloudfront.GetPublicKeyConfigInput, _ ...request.Option) (*cloudfront.GetPublicKeyConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetPublicKeyConfig cancelled", ctx.Err())
	default:
		return d.GetPublicKeyConfig(in)
	}
}

func (d *CloudFrontDouble) GetPublicKeyRequest(i0 *cloudfront.GetPublicKeyInput) (r0 *request.Request, r1 *cloudfront.GetPublicKeyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPublicKeyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.GetPublicKeyOutput)
	return
}

func (d *CloudFrontDouble) GetPublicKeyWithContext(i0 context.Context, i1 *cloudfront.GetPublicKeyInput, i2 ...request.Option) (r0 *cloudfront.GetPublicKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPublicKeyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.GetPublicKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeGetPublicKeyWithContext(ctx context.Context, in *cloudfront.GetPublicKeyInput, _ ...request.Option) (*cloudfront.GetPublicKeyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetPublicKey cancelled", ctx.Err())
	default:
		return d.GetPublicKey(in)
	}
}

func (d *CloudFrontDouble) GetStreamingDistribution(i0 *cloudfront.GetStreamingDistributionInput) (r0 *cloudfront.GetStreamingDistributionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetStreamingDistribution", i0)
	r0, _ = returns[0].(*cloudfront.GetStreamingDistributionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) GetStreamingDistributionConfig(i0 *cloudfront.GetStreamingDistributionConfigInput) (r0 *cloudfront.GetStreamingDistributionConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetStreamingDistributionConfig", i0)
	r0, _ = returns[0].(*cloudfront.GetStreamingDistributionConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) GetStreamingDistributionConfigRequest(i0 *cloudfront.GetStreamingDistributionConfigInput) (r0 *request.Request, r1 *cloudfront.GetStreamingDistributionConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetStreamingDistributionConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.GetStreamingDistributionConfigOutput)
	return
}

func (d *CloudFrontDouble) GetStreamingDistributionConfigWithContext(i0 context.Context, i1 *cloudfront.GetStreamingDistributionConfigInput, i2 ...request.Option) (r0 *cloudfront.GetStreamingDistributionConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetStreamingDistributionConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.GetStreamingDistributionConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeGetStreamingDistributionConfigWithContext(ctx context.Context, in *cloudfront.GetStreamingDistributionConfigInput, _ ...request.Option) (*cloudfront.GetStreamingDistributionConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetStreamingDistributionConfig cancelled", ctx.Err())
	default:
		return d.GetStreamingDistributionConfig(in)
	}
}

func (d *CloudFrontDouble) GetStreamingDistributionRequest(i0 *cloudfront.GetStreamingDistributionInput) (r0 *request.Request, r1 *cloudfront.GetStreamingDistributionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetStreamingDistributionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.GetStreamingDistributionOutput)
	return
}

func (d *CloudFrontDouble) GetStreamingDistributionWithContext(i0 context.Context, i1 *cloudfront.GetStreamingDistributionInput, i2 ...request.Option) (r0 *cloudfront.GetStreamingDistributionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetStreamingDistributionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.GetStreamingDistributionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeGetStreamingDistributionWithContext(ctx context.Context, in *cloudfront.GetStreamingDistributionInput, _ ...request.Option) (*cloudfront.GetStreamingDistributionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetStreamingDistribution cancelled", ctx.Err())
	default:
		return d.GetStreamingDistribution(in)
	}
}

func (d *CloudFrontDouble) ListCloudFrontOriginAccessIdentities(i0 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput) (r0 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCloudFrontOriginAccessIdentities", i0)
	r0, _ = returns[0].(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) ListCloudFrontOriginAccessIdentitiesPages(i0 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, i1 func(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCloudFrontOriginAccessIdentitiesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudFrontDouble) fakeListCloudFrontOriginAccessIdentitiesPages(in *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, pager func(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListCloudFrontOriginAccessIdentities", paginators, in, pager)
}

func (d *CloudFrontDouble) ListCloudFrontOriginAccessIdentitiesPagesWithContext(i0 context.Context, i1 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, i2 func(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCloudFrontOriginAccessIdentitiesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudFrontDouble) fakeListCloudFrontOriginAccessIdentitiesPagesWithContext(ctx context.Context, in *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, pager func(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListCloudFrontOriginAccessIdentities", paginators, ctx, in, pager, options...)
}

func (d *CloudFrontDouble) ListCloudFrontOriginAccessIdentitiesRequest(i0 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput) (r0 *request.Request, r1 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCloudFrontOriginAccessIdentitiesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput)
	return
}

func (d *CloudFrontDouble) ListCloudFrontOriginAccessIdentitiesWithContext(i0 context.Context, i1 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, i2 ...request.Option) (r0 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCloudFrontOriginAccessIdentitiesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeListCloudFrontOriginAccessIdentitiesWithContext(ctx context.Context, in *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, _ ...request.Option) (*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListCloudFrontOriginAccessIdentities cancelled", ctx.Err())
	default:
		return d.ListCloudFrontOriginAccessIdentities(in)
	}
}

func (d *CloudFrontDouble) ListDistributions(i0 *cloudfront.ListDistributionsInput) (r0 *cloudfront.ListDistributionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDistributions", i0)
	r0, _ = returns[0].(*cloudfront.ListDistributionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) ListDistributionsByWebACLId(i0 *cloudfront.ListDistributionsByWebACLIdInput) (r0 *cloudfront.ListDistributionsByWebACLIdOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDistributionsByWebACLId", i0)
	r0, _ = returns[0].(*cloudfront.ListDistributionsByWebACLIdOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) ListDistributionsByWebACLIdRequest(i0 *cloudfront.ListDistributionsByWebACLIdInput) (r0 *request.Request, r1 *cloudfront.ListDistributionsByWebACLIdOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDistributionsByWebACLIdRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.ListDistributionsByWebACLIdOutput)
	return
}

func (d *CloudFrontDouble) ListDistributionsByWebACLIdWithContext(i0 context.Context, i1 *cloudfront.ListDistributionsByWebACLIdInput, i2 ...request.Option) (r0 *cloudfront.ListDistributionsByWebACLIdOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDistributionsByWebACLIdWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.ListDistributionsByWebACLIdOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeListDistributionsByWebACLIdWithContext(ctx context.Context, in *cloudfront.ListDistributionsByWebACLIdInput, _ ...request.Option) (*cloudfront.ListDistributionsByWebACLIdOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDistributionsByWebACLId cancelled", ctx.Err())
	default:
		return d.ListDistributionsByWebACLId(in)
	}
}

func (d *CloudFrontDouble) ListDistributionsPages(i0 *cloudfront.ListDistributionsInput, i1 func(*cloudfront.ListDistributionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDistributionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudFrontDouble) fakeListDistributionsPages(in *cloudfront.ListDistributionsInput, pager func(*cloudfront.ListDistributionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListDistributions", paginators, in, pager)
}

func (d *CloudFrontDouble) ListDistributionsPagesWithContext(i0 context.Context, i1 *cloudfront.ListDistributionsInput, i2 func(*cloudfront.ListDistributionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDistributionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudFrontDouble) fakeListDistributionsPagesWithContext(ctx context.Context, in *cloudfront.ListDistributionsInput, pager func(*cloudfront.ListDistributionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListDistributions", paginators, ctx, in, pager, options...)
}

func (d *CloudFrontDouble) ListDistributionsRequest(i0 *cloudfront.ListDistributionsInput) (r0 *request.Request, r1 *cloudfront.ListDistributionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDistributionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.ListDistributionsOutput)
	return
}

func (d *CloudFrontDouble) ListDistributionsWithContext(i0 context.Context, i1 *cloudfront.ListDistributionsInput, i2 ...request.Option) (r0 *cloudfront.ListDistributionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDistributionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.ListDistributionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeListDistributionsWithContext(ctx context.Context, in *cloudfront.ListDistributionsInput, _ ...request.Option) (*cloudfront.ListDistributionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDistributions cancelled", ctx.Err())
	default:
		return d.ListDistributions(in)
	}
}

func (d *CloudFrontDouble) ListFieldLevelEncryptionConfigs(i0 *cloudfront.ListFieldLevelEncryptionConfigsInput) (r0 *cloudfront.ListFieldLevelEncryptionConfigsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFieldLevelEncryptionConfigs", i0)
	r0, _ = returns[0].(*cloudfront.ListFieldLevelEncryptionConfigsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) ListFieldLevelEncryptionConfigsRequest(i0 *cloudfront.ListFieldLevelEncryptionConfigsInput) (r0 *request.Request, r1 *cloudfront.ListFieldLevelEncryptionConfigsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFieldLevelEncryptionConfigsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.ListFieldLevelEncryptionConfigsOutput)
	return
}

func (d *CloudFrontDouble) ListFieldLevelEncryptionConfigsWithContext(i0 context.Context, i1 *cloudfront.ListFieldLevelEncryptionConfigsInput, i2 ...request.Option) (r0 *cloudfront.ListFieldLevelEncryptionConfigsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFieldLevelEncryptionConfigsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.ListFieldLevelEncryptionConfigsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeListFieldLevelEncryptionConfigsWithContext(ctx context.Context, in *cloudfront.ListFieldLevelEncryptionConfigsInput, _ ...request.Option) (*cloudfront.ListFieldLevelEncryptionConfigsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListFieldLevelEncryptionConfigs cancelled", ctx.Err())
	default:
		return d.ListFieldLevelEncryptionConfigs(in)
	}
}

func (d *CloudFrontDouble) ListFieldLevelEncryptionProfiles(i0 *cloudfront.ListFieldLevelEncryptionProfilesInput) (r0 *cloudfront.ListFieldLevelEncryptionProfilesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFieldLevelEncryptionProfiles", i0)
	r0, _ = returns[0].(*cloudfront.ListFieldLevelEncryptionProfilesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) ListFieldLevelEncryptionProfilesRequest(i0 *cloudfront.ListFieldLevelEncryptionProfilesInput) (r0 *request.Request, r1 *cloudfront.ListFieldLevelEncryptionProfilesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFieldLevelEncryptionProfilesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.ListFieldLevelEncryptionProfilesOutput)
	return
}

func (d *CloudFrontDouble) ListFieldLevelEncryptionProfilesWithContext(i0 context.Context, i1 *cloudfront.ListFieldLevelEncryptionProfilesInput, i2 ...request.Option) (r0 *cloudfront.ListFieldLevelEncryptionProfilesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFieldLevelEncryptionProfilesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.ListFieldLevelEncryptionProfilesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeListFieldLevelEncryptionProfilesWithContext(ctx context.Context, in *cloudfront.ListFieldLevelEncryptionProfilesInput, _ ...request.Option) (*cloudfront.ListFieldLevelEncryptionProfilesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListFieldLevelEncryptionProfiles cancelled", ctx.Err())
	default:
		return d.ListFieldLevelEncryptionProfiles(in)
	}
}

func (d *CloudFrontDouble) ListInvalidations(i0 *cloudfront.ListInvalidationsInput) (r0 *cloudfront.ListInvalidationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInvalidations", i0)
	r0, _ = returns[0].(*cloudfront.ListInvalidationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) ListInvalidationsPages(i0 *cloudfront.ListInvalidationsInput, i1 func(*cloudfront.ListInvalidationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInvalidationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudFrontDouble) fakeListInvalidationsPages(in *cloudfront.ListInvalidationsInput, pager func(*cloudfront.ListInvalidationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListInvalidations", paginators, in, pager)
}

func (d *CloudFrontDouble) ListInvalidationsPagesWithContext(i0 context.Context, i1 *cloudfront.ListInvalidationsInput, i2 func(*cloudfront.ListInvalidationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInvalidationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudFrontDouble) fakeListInvalidationsPagesWithContext(ctx context.Context, in *cloudfront.ListInvalidationsInput, pager func(*cloudfront.ListInvalidationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListInvalidations", paginators, ctx, in, pager, options...)
}

func (d *CloudFrontDouble) ListInvalidationsRequest(i0 *cloudfront.ListInvalidationsInput) (r0 *request.Request, r1 *cloudfront.ListInvalidationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInvalidationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.ListInvalidationsOutput)
	return
}

func (d *CloudFrontDouble) ListInvalidationsWithContext(i0 context.Context, i1 *cloudfront.ListInvalidationsInput, i2 ...request.Option) (r0 *cloudfront.ListInvalidationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInvalidationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.ListInvalidationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeListInvalidationsWithContext(ctx context.Context, in *cloudfront.ListInvalidationsInput, _ ...request.Option) (*cloudfront.ListInvalidationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListInvalidations cancelled", ctx.Err())
	default:
		return d.ListInvalidations(in)
	}
}

func (d *CloudFrontDouble) ListPublicKeys(i0 *cloudfront.ListPublicKeysInput) (r0 *cloudfront.ListPublicKeysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPublicKeys", i0)
	r0, _ = returns[0].(*cloudfront.ListPublicKeysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) ListPublicKeysRequest(i0 *cloudfront.ListPublicKeysInput) (r0 *request.Request, r1 *cloudfront.ListPublicKeysOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPublicKeysRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.ListPublicKeysOutput)
	return
}

func (d *CloudFrontDouble) ListPublicKeysWithContext(i0 context.Context, i1 *cloudfront.ListPublicKeysInput, i2 ...request.Option) (r0 *cloudfront.ListPublicKeysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPublicKeysWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.ListPublicKeysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeListPublicKeysWithContext(ctx context.Context, in *cloudfront.ListPublicKeysInput, _ ...request.Option) (*cloudfront.ListPublicKeysOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListPublicKeys cancelled", ctx.Err())
	default:
		return d.ListPublicKeys(in)
	}
}

func (d *CloudFrontDouble) ListStreamingDistributions(i0 *cloudfront.ListStreamingDistributionsInput) (r0 *cloudfront.ListStreamingDistributionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStreamingDistributions", i0)
	r0, _ = returns[0].(*cloudfront.ListStreamingDistributionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) ListStreamingDistributionsPages(i0 *cloudfront.ListStreamingDistributionsInput, i1 func(*cloudfront.ListStreamingDistributionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStreamingDistributionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudFrontDouble) fakeListStreamingDistributionsPages(in *cloudfront.ListStreamingDistributionsInput, pager func(*cloudfront.ListStreamingDistributionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListStreamingDistributions", paginators, in, pager)
}

func (d *CloudFrontDouble) ListStreamingDistributionsPagesWithContext(i0 context.Context, i1 *cloudfront.ListStreamingDistributionsInput, i2 func(*cloudfront.ListStreamingDistributionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStreamingDistributionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudFrontDouble) fakeListStreamingDistributionsPagesWithContext(ctx context.Context, in *cloudfront.ListStreamingDistributionsInput, pager func(*cloudfront.ListStreamingDistributionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListStreamingDistributions", paginators, ctx, in, pager, options...)
}

func (d *CloudFrontDouble) ListStreamingDistributionsRequest(i0 *cloudfront.ListStreamingDistributionsInput) (r0 *request.Request, r1 *cloudfront.ListStreamingDistributionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStreamingDistributionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.ListStreamingDistributionsOutput)
	return
}

func (d *CloudFrontDouble) ListStreamingDistributionsWithContext(i0 context.Context, i1 *cloudfront.ListStreamingDistributionsInput, i2 ...request.Option) (r0 *cloudfront.ListStreamingDistributionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStreamingDistributionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.ListStreamingDistributionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeListStreamingDistributionsWithContext(ctx context.Context, in *cloudfront.ListStreamingDistributionsInput, _ ...request.Option) (*cloudfront.ListStreamingDistributionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListStreamingDistributions cancelled", ctx.Err())
	default:
		return d.ListStreamingDistributions(in)
	}
}

func (d *CloudFrontDouble) ListTagsForResource(i0 *cloudfront.ListTagsForResourceInput) (r0 *cloudfront.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*cloudfront.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) ListTagsForResourceRequest(i0 *cloudfront.ListTagsForResourceInput) (r0 *request.Request, r1 *cloudfront.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.ListTagsForResourceOutput)
	return
}

func (d *CloudFrontDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *cloudfront.ListTagsForResourceInput, i2 ...request.Option) (r0 *cloudfront.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *cloudfront.ListTagsForResourceInput, _ ...request.Option) (*cloudfront.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *CloudFrontDouble) TagResource(i0 *cloudfront.TagResourceInput) (r0 *cloudfront.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*cloudfront.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) TagResourceRequest(i0 *cloudfront.TagResourceInput) (r0 *request.Request, r1 *cloudfront.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.TagResourceOutput)
	return
}

func (d *CloudFrontDouble) TagResourceWithContext(i0 context.Context, i1 *cloudfront.TagResourceInput, i2 ...request.Option) (r0 *cloudfront.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeTagResourceWithContext(ctx context.Context, in *cloudfront.TagResourceInput, _ ...request.Option) (*cloudfront.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *CloudFrontDouble) UntagResource(i0 *cloudfront.UntagResourceInput) (r0 *cloudfront.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*cloudfront.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) UntagResourceRequest(i0 *cloudfront.UntagResourceInput) (r0 *request.Request, r1 *cloudfront.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.UntagResourceOutput)
	return
}

func (d *CloudFrontDouble) UntagResourceWithContext(i0 context.Context, i1 *cloudfront.UntagResourceInput, i2 ...request.Option) (r0 *cloudfront.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeUntagResourceWithContext(ctx context.Context, in *cloudfront.UntagResourceInput, _ ...request.Option) (*cloudfront.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *CloudFrontDouble) UpdateCloudFrontOriginAccessIdentity(i0 *cloudfront.UpdateCloudFrontOriginAccessIdentityInput) (r0 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCloudFrontOriginAccessIdentity", i0)
	r0, _ = returns[0].(*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) UpdateCloudFrontOriginAccessIdentityRequest(i0 *cloudfront.UpdateCloudFrontOriginAccessIdentityInput) (r0 *request.Request, r1 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCloudFrontOriginAccessIdentityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput)
	return
}

func (d *CloudFrontDouble) UpdateCloudFrontOriginAccessIdentityWithContext(i0 context.Context, i1 *cloudfront.UpdateCloudFrontOriginAccessIdentityInput, i2 ...request.Option) (r0 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCloudFrontOriginAccessIdentityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeUpdateCloudFrontOriginAccessIdentityWithContext(ctx context.Context, in *cloudfront.UpdateCloudFrontOriginAccessIdentityInput, _ ...request.Option) (*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateCloudFrontOriginAccessIdentity cancelled", ctx.Err())
	default:
		return d.UpdateCloudFrontOriginAccessIdentity(in)
	}
}

func (d *CloudFrontDouble) UpdateDistribution(i0 *cloudfront.UpdateDistributionInput) (r0 *cloudfront.UpdateDistributionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDistribution", i0)
	r0, _ = returns[0].(*cloudfront.UpdateDistributionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) UpdateDistributionRequest(i0 *cloudfront.UpdateDistributionInput) (r0 *request.Request, r1 *cloudfront.UpdateDistributionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDistributionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.UpdateDistributionOutput)
	return
}

func (d *CloudFrontDouble) UpdateDistributionWithContext(i0 context.Context, i1 *cloudfront.UpdateDistributionInput, i2 ...request.Option) (r0 *cloudfront.UpdateDistributionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDistributionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.UpdateDistributionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeUpdateDistributionWithContext(ctx context.Context, in *cloudfront.UpdateDistributionInput, _ ...request.Option) (*cloudfront.UpdateDistributionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDistribution cancelled", ctx.Err())
	default:
		return d.UpdateDistribution(in)
	}
}

func (d *CloudFrontDouble) UpdateFieldLevelEncryptionConfig(i0 *cloudfront.UpdateFieldLevelEncryptionConfigInput) (r0 *cloudfront.UpdateFieldLevelEncryptionConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFieldLevelEncryptionConfig", i0)
	r0, _ = returns[0].(*cloudfront.UpdateFieldLevelEncryptionConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) UpdateFieldLevelEncryptionConfigRequest(i0 *cloudfront.UpdateFieldLevelEncryptionConfigInput) (r0 *request.Request, r1 *cloudfront.UpdateFieldLevelEncryptionConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFieldLevelEncryptionConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.UpdateFieldLevelEncryptionConfigOutput)
	return
}

func (d *CloudFrontDouble) UpdateFieldLevelEncryptionConfigWithContext(i0 context.Context, i1 *cloudfront.UpdateFieldLevelEncryptionConfigInput, i2 ...request.Option) (r0 *cloudfront.UpdateFieldLevelEncryptionConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFieldLevelEncryptionConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.UpdateFieldLevelEncryptionConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeUpdateFieldLevelEncryptionConfigWithContext(ctx context.Context, in *cloudfront.UpdateFieldLevelEncryptionConfigInput, _ ...request.Option) (*cloudfront.UpdateFieldLevelEncryptionConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateFieldLevelEncryptionConfig cancelled", ctx.Err())
	default:
		return d.UpdateFieldLevelEncryptionConfig(in)
	}
}

func (d *CloudFrontDouble) UpdateFieldLevelEncryptionProfile(i0 *cloudfront.UpdateFieldLevelEncryptionProfileInput) (r0 *cloudfront.UpdateFieldLevelEncryptionProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFieldLevelEncryptionProfile", i0)
	r0, _ = returns[0].(*cloudfront.UpdateFieldLevelEncryptionProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) UpdateFieldLevelEncryptionProfileRequest(i0 *cloudfront.UpdateFieldLevelEncryptionProfileInput) (r0 *request.Request, r1 *cloudfront.UpdateFieldLevelEncryptionProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFieldLevelEncryptionProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.UpdateFieldLevelEncryptionProfileOutput)
	return
}

func (d *CloudFrontDouble) UpdateFieldLevelEncryptionProfileWithContext(i0 context.Context, i1 *cloudfront.UpdateFieldLevelEncryptionProfileInput, i2 ...request.Option) (r0 *cloudfront.UpdateFieldLevelEncryptionProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFieldLevelEncryptionProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.UpdateFieldLevelEncryptionProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeUpdateFieldLevelEncryptionProfileWithContext(ctx context.Context, in *cloudfront.UpdateFieldLevelEncryptionProfileInput, _ ...request.Option) (*cloudfront.UpdateFieldLevelEncryptionProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateFieldLevelEncryptionProfile cancelled", ctx.Err())
	default:
		return d.UpdateFieldLevelEncryptionProfile(in)
	}
}

func (d *CloudFrontDouble) UpdatePublicKey(i0 *cloudfront.UpdatePublicKeyInput) (r0 *cloudfront.UpdatePublicKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePublicKey", i0)
	r0, _ = returns[0].(*cloudfront.UpdatePublicKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) UpdatePublicKeyRequest(i0 *cloudfront.UpdatePublicKeyInput) (r0 *request.Request, r1 *cloudfront.UpdatePublicKeyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePublicKeyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.UpdatePublicKeyOutput)
	return
}

func (d *CloudFrontDouble) UpdatePublicKeyWithContext(i0 context.Context, i1 *cloudfront.UpdatePublicKeyInput, i2 ...request.Option) (r0 *cloudfront.UpdatePublicKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePublicKeyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.UpdatePublicKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeUpdatePublicKeyWithContext(ctx context.Context, in *cloudfront.UpdatePublicKeyInput, _ ...request.Option) (*cloudfront.UpdatePublicKeyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdatePublicKey cancelled", ctx.Err())
	default:
		return d.UpdatePublicKey(in)
	}
}

func (d *CloudFrontDouble) UpdateStreamingDistribution(i0 *cloudfront.UpdateStreamingDistributionInput) (r0 *cloudfront.UpdateStreamingDistributionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateStreamingDistribution", i0)
	r0, _ = returns[0].(*cloudfront.UpdateStreamingDistributionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) UpdateStreamingDistributionRequest(i0 *cloudfront.UpdateStreamingDistributionInput) (r0 *request.Request, r1 *cloudfront.UpdateStreamingDistributionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateStreamingDistributionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudfront.UpdateStreamingDistributionOutput)
	return
}

func (d *CloudFrontDouble) UpdateStreamingDistributionWithContext(i0 context.Context, i1 *cloudfront.UpdateStreamingDistributionInput, i2 ...request.Option) (r0 *cloudfront.UpdateStreamingDistributionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateStreamingDistributionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudfront.UpdateStreamingDistributionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudFrontDouble) fakeUpdateStreamingDistributionWithContext(ctx context.Context, in *cloudfront.UpdateStreamingDistributionInput, _ ...request.Option) (*cloudfront.UpdateStreamingDistributionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateStreamingDistribution cancelled", ctx.Err())
	default:
		return d.UpdateStreamingDistribution(in)
	}
}

func (d *CloudFrontDouble) WaitUntilDistributionDeployed(i0 *cloudfront.GetDistributionInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilDistributionDeployed", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudFrontDouble) fakeWaitUntilDistributionDeployed(in *cloudfront.GetDistributionInput) error {
	return d.WaitUntil("DistributionDeployed", waiters, in)
}

func (d *CloudFrontDouble) WaitUntilDistributionDeployedWithContext(i0 context.Context, i1 *cloudfront.GetDistributionInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilDistributionDeployedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudFrontDouble) fakeWaitUntilDistributionDeployedWithContext(ctx context.Context, in *cloudfront.GetDistributionInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("DistributionDeployed", waiters, ctx, in, waitOption...)
}

func (d *CloudFrontDouble) WaitUntilInvalidationCompleted(i0 *cloudfront.GetInvalidationInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilInvalidationCompleted", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudFrontDouble) fakeWaitUntilInvalidationCompleted(in *cloudfront.GetInvalidationInput) error {
	return d.WaitUntil("InvalidationCompleted", waiters, in)
}

func (d *CloudFrontDouble) WaitUntilInvalidationCompletedWithContext(i0 context.Context, i1 *cloudfront.GetInvalidationInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilInvalidationCompletedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudFrontDouble) fakeWaitUntilInvalidationCompletedWithContext(ctx context.Context, in *cloudfront.GetInvalidationInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("InvalidationCompleted", waiters, ctx, in, waitOption...)
}

func (d *CloudFrontDouble) WaitUntilStreamingDistributionDeployed(i0 *cloudfront.GetStreamingDistributionInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilStreamingDistributionDeployed", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudFrontDouble) fakeWaitUntilStreamingDistributionDeployed(in *cloudfront.GetStreamingDistributionInput) error {
	return d.WaitUntil("StreamingDistributionDeployed", waiters, in)
}

func (d *CloudFrontDouble) WaitUntilStreamingDistributionDeployedWithContext(i0 context.Context, i1 *cloudfront.GetStreamingDistributionInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilStreamingDistributionDeployedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudFrontDouble) fakeWaitUntilStreamingDistributionDeployedWithContext(ctx context.Context, in *cloudfront.GetStreamingDistributionInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("StreamingDistributionDeployed", waiters, ctx, in, waitOption...)
}
