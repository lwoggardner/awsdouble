// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:14:34+11:00

// Package rdsdataservicedouble provides a TestDouble implementation of rdsdataserviceiface.RDSDataServiceAPI
package rdsdataservicedouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/rdsdataservice"
	"github.com/aws/aws-sdk-go/service/rdsdataservice/rdsdataserviceiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// RDSDataServiceDouble is TestDouble for rdsdataserviceiface.RDSDataServiceAPI
type RDSDataServiceDouble struct {
	rdsdataserviceiface.RDSDataServiceAPI
	*awsdouble.AWSTestDouble
}

// Constructor for RDSDataServiceDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *RDSDataServiceDouble {
	result := &RDSDataServiceDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*rdsdataserviceiface.RDSDataServiceAPI)(nil), configurators...)
	return result
}

func (d *RDSDataServiceDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *RDSDataServiceDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "BatchExecuteStatementWithContext":
		return m.Fake(d.fakeBatchExecuteStatementWithContext)

	case "BeginTransactionWithContext":
		return m.Fake(d.fakeBeginTransactionWithContext)

	case "CommitTransactionWithContext":
		return m.Fake(d.fakeCommitTransactionWithContext)

	case "ExecuteSqlWithContext":
		return m.Fake(d.fakeExecuteSqlWithContext)

	case "ExecuteStatementWithContext":
		return m.Fake(d.fakeExecuteStatementWithContext)

	case "RollbackTransactionWithContext":
		return m.Fake(d.fakeRollbackTransactionWithContext)

	default:
		return nil
	}
}

func (d *RDSDataServiceDouble) BatchExecuteStatement(i0 *rdsdataservice.BatchExecuteStatementInput) (r0 *rdsdataservice.BatchExecuteStatementOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchExecuteStatement", i0)
	r0, _ = returns[0].(*rdsdataservice.BatchExecuteStatementOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDataServiceDouble) BatchExecuteStatementRequest(i0 *rdsdataservice.BatchExecuteStatementInput) (r0 *request.Request, r1 *rdsdataservice.BatchExecuteStatementOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchExecuteStatementRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rdsdataservice.BatchExecuteStatementOutput)
	return
}

func (d *RDSDataServiceDouble) BatchExecuteStatementWithContext(i0 context.Context, i1 *rdsdataservice.BatchExecuteStatementInput, i2 ...request.Option) (r0 *rdsdataservice.BatchExecuteStatementOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchExecuteStatementWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rdsdataservice.BatchExecuteStatementOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDataServiceDouble) fakeBatchExecuteStatementWithContext(ctx context.Context, in *rdsdataservice.BatchExecuteStatementInput, _ ...request.Option) (*rdsdataservice.BatchExecuteStatementOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchExecuteStatement cancelled", ctx.Err())
	default:
		return d.BatchExecuteStatement(in)
	}
}

func (d *RDSDataServiceDouble) BeginTransaction(i0 *rdsdataservice.BeginTransactionInput) (r0 *rdsdataservice.BeginTransactionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BeginTransaction", i0)
	r0, _ = returns[0].(*rdsdataservice.BeginTransactionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDataServiceDouble) BeginTransactionRequest(i0 *rdsdataservice.BeginTransactionInput) (r0 *request.Request, r1 *rdsdataservice.BeginTransactionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BeginTransactionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rdsdataservice.BeginTransactionOutput)
	return
}

func (d *RDSDataServiceDouble) BeginTransactionWithContext(i0 context.Context, i1 *rdsdataservice.BeginTransactionInput, i2 ...request.Option) (r0 *rdsdataservice.BeginTransactionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BeginTransactionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rdsdataservice.BeginTransactionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDataServiceDouble) fakeBeginTransactionWithContext(ctx context.Context, in *rdsdataservice.BeginTransactionInput, _ ...request.Option) (*rdsdataservice.BeginTransactionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BeginTransaction cancelled", ctx.Err())
	default:
		return d.BeginTransaction(in)
	}
}

func (d *RDSDataServiceDouble) CommitTransaction(i0 *rdsdataservice.CommitTransactionInput) (r0 *rdsdataservice.CommitTransactionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CommitTransaction", i0)
	r0, _ = returns[0].(*rdsdataservice.CommitTransactionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDataServiceDouble) CommitTransactionRequest(i0 *rdsdataservice.CommitTransactionInput) (r0 *request.Request, r1 *rdsdataservice.CommitTransactionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CommitTransactionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rdsdataservice.CommitTransactionOutput)
	return
}

func (d *RDSDataServiceDouble) CommitTransactionWithContext(i0 context.Context, i1 *rdsdataservice.CommitTransactionInput, i2 ...request.Option) (r0 *rdsdataservice.CommitTransactionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CommitTransactionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rdsdataservice.CommitTransactionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDataServiceDouble) fakeCommitTransactionWithContext(ctx context.Context, in *rdsdataservice.CommitTransactionInput, _ ...request.Option) (*rdsdataservice.CommitTransactionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CommitTransaction cancelled", ctx.Err())
	default:
		return d.CommitTransaction(in)
	}
}

func (d *RDSDataServiceDouble) ExecuteSql(i0 *rdsdataservice.ExecuteSqlInput) (r0 *rdsdataservice.ExecuteSqlOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExecuteSql", i0)
	r0, _ = returns[0].(*rdsdataservice.ExecuteSqlOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDataServiceDouble) ExecuteSqlRequest(i0 *rdsdataservice.ExecuteSqlInput) (r0 *request.Request, r1 *rdsdataservice.ExecuteSqlOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExecuteSqlRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rdsdataservice.ExecuteSqlOutput)
	return
}

func (d *RDSDataServiceDouble) ExecuteSqlWithContext(i0 context.Context, i1 *rdsdataservice.ExecuteSqlInput, i2 ...request.Option) (r0 *rdsdataservice.ExecuteSqlOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExecuteSqlWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rdsdataservice.ExecuteSqlOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDataServiceDouble) fakeExecuteSqlWithContext(ctx context.Context, in *rdsdataservice.ExecuteSqlInput, _ ...request.Option) (*rdsdataservice.ExecuteSqlOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ExecuteSql cancelled", ctx.Err())
	default:
		return d.ExecuteSql(in)
	}
}

func (d *RDSDataServiceDouble) ExecuteStatement(i0 *rdsdataservice.ExecuteStatementInput) (r0 *rdsdataservice.ExecuteStatementOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExecuteStatement", i0)
	r0, _ = returns[0].(*rdsdataservice.ExecuteStatementOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDataServiceDouble) ExecuteStatementRequest(i0 *rdsdataservice.ExecuteStatementInput) (r0 *request.Request, r1 *rdsdataservice.ExecuteStatementOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExecuteStatementRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rdsdataservice.ExecuteStatementOutput)
	return
}

func (d *RDSDataServiceDouble) ExecuteStatementWithContext(i0 context.Context, i1 *rdsdataservice.ExecuteStatementInput, i2 ...request.Option) (r0 *rdsdataservice.ExecuteStatementOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExecuteStatementWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rdsdataservice.ExecuteStatementOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDataServiceDouble) fakeExecuteStatementWithContext(ctx context.Context, in *rdsdataservice.ExecuteStatementInput, _ ...request.Option) (*rdsdataservice.ExecuteStatementOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ExecuteStatement cancelled", ctx.Err())
	default:
		return d.ExecuteStatement(in)
	}
}

func (d *RDSDataServiceDouble) RollbackTransaction(i0 *rdsdataservice.RollbackTransactionInput) (r0 *rdsdataservice.RollbackTransactionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RollbackTransaction", i0)
	r0, _ = returns[0].(*rdsdataservice.RollbackTransactionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDataServiceDouble) RollbackTransactionRequest(i0 *rdsdataservice.RollbackTransactionInput) (r0 *request.Request, r1 *rdsdataservice.RollbackTransactionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RollbackTransactionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rdsdataservice.RollbackTransactionOutput)
	return
}

func (d *RDSDataServiceDouble) RollbackTransactionWithContext(i0 context.Context, i1 *rdsdataservice.RollbackTransactionInput, i2 ...request.Option) (r0 *rdsdataservice.RollbackTransactionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RollbackTransactionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rdsdataservice.RollbackTransactionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDataServiceDouble) fakeRollbackTransactionWithContext(ctx context.Context, in *rdsdataservice.RollbackTransactionInput, _ ...request.Option) (*rdsdataservice.RollbackTransactionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RollbackTransaction cancelled", ctx.Err())
	default:
		return d.RollbackTransaction(in)
	}
}
