// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:12:31+11:00

// Package ecrdouble provides a TestDouble implementation of ecriface.ECRAPI
package ecrdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/ecr"
	"github.com/aws/aws-sdk-go/service/ecr/ecriface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// ECRDouble is TestDouble for ecriface.ECRAPI
type ECRDouble struct {
	ecriface.ECRAPI
	*awsdouble.AWSTestDouble
}

// Constructor for ECRDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *ECRDouble {
	result := &ECRDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*ecriface.ECRAPI)(nil), configurators...)
	return result
}

func (d *ECRDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *ECRDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "BatchCheckLayerAvailabilityWithContext":
		return m.Fake(d.fakeBatchCheckLayerAvailabilityWithContext)

	case "BatchDeleteImageWithContext":
		return m.Fake(d.fakeBatchDeleteImageWithContext)

	case "BatchGetImageWithContext":
		return m.Fake(d.fakeBatchGetImageWithContext)

	case "CompleteLayerUploadWithContext":
		return m.Fake(d.fakeCompleteLayerUploadWithContext)

	case "CreateRepositoryWithContext":
		return m.Fake(d.fakeCreateRepositoryWithContext)

	case "DeleteLifecyclePolicyWithContext":
		return m.Fake(d.fakeDeleteLifecyclePolicyWithContext)

	case "DeleteRepositoryPolicyWithContext":
		return m.Fake(d.fakeDeleteRepositoryPolicyWithContext)

	case "DeleteRepositoryWithContext":
		return m.Fake(d.fakeDeleteRepositoryWithContext)

	case "DescribeImageScanFindingsPages":
		return m.Fake(d.fakeDescribeImageScanFindingsPages)

	case "DescribeImageScanFindingsPagesWithContext":
		return m.Fake(d.fakeDescribeImageScanFindingsPagesWithContext)

	case "DescribeImageScanFindingsWithContext":
		return m.Fake(d.fakeDescribeImageScanFindingsWithContext)

	case "DescribeImagesPages":
		return m.Fake(d.fakeDescribeImagesPages)

	case "DescribeImagesPagesWithContext":
		return m.Fake(d.fakeDescribeImagesPagesWithContext)

	case "DescribeImagesWithContext":
		return m.Fake(d.fakeDescribeImagesWithContext)

	case "DescribeRepositoriesPages":
		return m.Fake(d.fakeDescribeRepositoriesPages)

	case "DescribeRepositoriesPagesWithContext":
		return m.Fake(d.fakeDescribeRepositoriesPagesWithContext)

	case "DescribeRepositoriesWithContext":
		return m.Fake(d.fakeDescribeRepositoriesWithContext)

	case "GetAuthorizationTokenWithContext":
		return m.Fake(d.fakeGetAuthorizationTokenWithContext)

	case "GetDownloadUrlForLayerWithContext":
		return m.Fake(d.fakeGetDownloadUrlForLayerWithContext)

	case "GetLifecyclePolicyPreviewPages":
		return m.Fake(d.fakeGetLifecyclePolicyPreviewPages)

	case "GetLifecyclePolicyPreviewPagesWithContext":
		return m.Fake(d.fakeGetLifecyclePolicyPreviewPagesWithContext)

	case "GetLifecyclePolicyPreviewWithContext":
		return m.Fake(d.fakeGetLifecyclePolicyPreviewWithContext)

	case "GetLifecyclePolicyWithContext":
		return m.Fake(d.fakeGetLifecyclePolicyWithContext)

	case "GetRepositoryPolicyWithContext":
		return m.Fake(d.fakeGetRepositoryPolicyWithContext)

	case "InitiateLayerUploadWithContext":
		return m.Fake(d.fakeInitiateLayerUploadWithContext)

	case "ListImagesPages":
		return m.Fake(d.fakeListImagesPages)

	case "ListImagesPagesWithContext":
		return m.Fake(d.fakeListImagesPagesWithContext)

	case "ListImagesWithContext":
		return m.Fake(d.fakeListImagesWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "PutImageScanningConfigurationWithContext":
		return m.Fake(d.fakePutImageScanningConfigurationWithContext)

	case "PutImageTagMutabilityWithContext":
		return m.Fake(d.fakePutImageTagMutabilityWithContext)

	case "PutImageWithContext":
		return m.Fake(d.fakePutImageWithContext)

	case "PutLifecyclePolicyWithContext":
		return m.Fake(d.fakePutLifecyclePolicyWithContext)

	case "SetRepositoryPolicyWithContext":
		return m.Fake(d.fakeSetRepositoryPolicyWithContext)

	case "StartImageScanWithContext":
		return m.Fake(d.fakeStartImageScanWithContext)

	case "StartLifecyclePolicyPreviewWithContext":
		return m.Fake(d.fakeStartLifecyclePolicyPreviewWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UploadLayerPartWithContext":
		return m.Fake(d.fakeUploadLayerPartWithContext)

	case "WaitUntilImageScanComplete":
		return m.Fake(d.fakeWaitUntilImageScanComplete)

	case "WaitUntilImageScanCompleteWithContext":
		return m.Fake(d.fakeWaitUntilImageScanCompleteWithContext)

	case "WaitUntilLifecyclePolicyPreviewComplete":
		return m.Fake(d.fakeWaitUntilLifecyclePolicyPreviewComplete)

	case "WaitUntilLifecyclePolicyPreviewCompleteWithContext":
		return m.Fake(d.fakeWaitUntilLifecyclePolicyPreviewCompleteWithContext)

	default:
		return nil
	}
}

func (d *ECRDouble) BatchCheckLayerAvailability(i0 *ecr.BatchCheckLayerAvailabilityInput) (r0 *ecr.BatchCheckLayerAvailabilityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchCheckLayerAvailability", i0)
	r0, _ = returns[0].(*ecr.BatchCheckLayerAvailabilityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) BatchCheckLayerAvailabilityRequest(i0 *ecr.BatchCheckLayerAvailabilityInput) (r0 *request.Request, r1 *ecr.BatchCheckLayerAvailabilityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchCheckLayerAvailabilityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecr.BatchCheckLayerAvailabilityOutput)
	return
}

func (d *ECRDouble) BatchCheckLayerAvailabilityWithContext(i0 context.Context, i1 *ecr.BatchCheckLayerAvailabilityInput, i2 ...request.Option) (r0 *ecr.BatchCheckLayerAvailabilityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchCheckLayerAvailabilityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecr.BatchCheckLayerAvailabilityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) fakeBatchCheckLayerAvailabilityWithContext(ctx context.Context, in *ecr.BatchCheckLayerAvailabilityInput, _ ...request.Option) (*ecr.BatchCheckLayerAvailabilityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchCheckLayerAvailability cancelled", ctx.Err())
	default:
		return d.BatchCheckLayerAvailability(in)
	}
}

func (d *ECRDouble) BatchDeleteImage(i0 *ecr.BatchDeleteImageInput) (r0 *ecr.BatchDeleteImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDeleteImage", i0)
	r0, _ = returns[0].(*ecr.BatchDeleteImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) BatchDeleteImageRequest(i0 *ecr.BatchDeleteImageInput) (r0 *request.Request, r1 *ecr.BatchDeleteImageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDeleteImageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecr.BatchDeleteImageOutput)
	return
}

func (d *ECRDouble) BatchDeleteImageWithContext(i0 context.Context, i1 *ecr.BatchDeleteImageInput, i2 ...request.Option) (r0 *ecr.BatchDeleteImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDeleteImageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecr.BatchDeleteImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) fakeBatchDeleteImageWithContext(ctx context.Context, in *ecr.BatchDeleteImageInput, _ ...request.Option) (*ecr.BatchDeleteImageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchDeleteImage cancelled", ctx.Err())
	default:
		return d.BatchDeleteImage(in)
	}
}

func (d *ECRDouble) BatchGetImage(i0 *ecr.BatchGetImageInput) (r0 *ecr.BatchGetImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetImage", i0)
	r0, _ = returns[0].(*ecr.BatchGetImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) BatchGetImageRequest(i0 *ecr.BatchGetImageInput) (r0 *request.Request, r1 *ecr.BatchGetImageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetImageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecr.BatchGetImageOutput)
	return
}

func (d *ECRDouble) BatchGetImageWithContext(i0 context.Context, i1 *ecr.BatchGetImageInput, i2 ...request.Option) (r0 *ecr.BatchGetImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetImageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecr.BatchGetImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) fakeBatchGetImageWithContext(ctx context.Context, in *ecr.BatchGetImageInput, _ ...request.Option) (*ecr.BatchGetImageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchGetImage cancelled", ctx.Err())
	default:
		return d.BatchGetImage(in)
	}
}

func (d *ECRDouble) CompleteLayerUpload(i0 *ecr.CompleteLayerUploadInput) (r0 *ecr.CompleteLayerUploadOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CompleteLayerUpload", i0)
	r0, _ = returns[0].(*ecr.CompleteLayerUploadOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) CompleteLayerUploadRequest(i0 *ecr.CompleteLayerUploadInput) (r0 *request.Request, r1 *ecr.CompleteLayerUploadOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CompleteLayerUploadRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecr.CompleteLayerUploadOutput)
	return
}

func (d *ECRDouble) CompleteLayerUploadWithContext(i0 context.Context, i1 *ecr.CompleteLayerUploadInput, i2 ...request.Option) (r0 *ecr.CompleteLayerUploadOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CompleteLayerUploadWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecr.CompleteLayerUploadOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) fakeCompleteLayerUploadWithContext(ctx context.Context, in *ecr.CompleteLayerUploadInput, _ ...request.Option) (*ecr.CompleteLayerUploadOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CompleteLayerUpload cancelled", ctx.Err())
	default:
		return d.CompleteLayerUpload(in)
	}
}

func (d *ECRDouble) CreateRepository(i0 *ecr.CreateRepositoryInput) (r0 *ecr.CreateRepositoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRepository", i0)
	r0, _ = returns[0].(*ecr.CreateRepositoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) CreateRepositoryRequest(i0 *ecr.CreateRepositoryInput) (r0 *request.Request, r1 *ecr.CreateRepositoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRepositoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecr.CreateRepositoryOutput)
	return
}

func (d *ECRDouble) CreateRepositoryWithContext(i0 context.Context, i1 *ecr.CreateRepositoryInput, i2 ...request.Option) (r0 *ecr.CreateRepositoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRepositoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecr.CreateRepositoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) fakeCreateRepositoryWithContext(ctx context.Context, in *ecr.CreateRepositoryInput, _ ...request.Option) (*ecr.CreateRepositoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateRepository cancelled", ctx.Err())
	default:
		return d.CreateRepository(in)
	}
}

func (d *ECRDouble) DeleteLifecyclePolicy(i0 *ecr.DeleteLifecyclePolicyInput) (r0 *ecr.DeleteLifecyclePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLifecyclePolicy", i0)
	r0, _ = returns[0].(*ecr.DeleteLifecyclePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) DeleteLifecyclePolicyRequest(i0 *ecr.DeleteLifecyclePolicyInput) (r0 *request.Request, r1 *ecr.DeleteLifecyclePolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLifecyclePolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecr.DeleteLifecyclePolicyOutput)
	return
}

func (d *ECRDouble) DeleteLifecyclePolicyWithContext(i0 context.Context, i1 *ecr.DeleteLifecyclePolicyInput, i2 ...request.Option) (r0 *ecr.DeleteLifecyclePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLifecyclePolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecr.DeleteLifecyclePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) fakeDeleteLifecyclePolicyWithContext(ctx context.Context, in *ecr.DeleteLifecyclePolicyInput, _ ...request.Option) (*ecr.DeleteLifecyclePolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteLifecyclePolicy cancelled", ctx.Err())
	default:
		return d.DeleteLifecyclePolicy(in)
	}
}

func (d *ECRDouble) DeleteRepository(i0 *ecr.DeleteRepositoryInput) (r0 *ecr.DeleteRepositoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRepository", i0)
	r0, _ = returns[0].(*ecr.DeleteRepositoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) DeleteRepositoryPolicy(i0 *ecr.DeleteRepositoryPolicyInput) (r0 *ecr.DeleteRepositoryPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRepositoryPolicy", i0)
	r0, _ = returns[0].(*ecr.DeleteRepositoryPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) DeleteRepositoryPolicyRequest(i0 *ecr.DeleteRepositoryPolicyInput) (r0 *request.Request, r1 *ecr.DeleteRepositoryPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRepositoryPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecr.DeleteRepositoryPolicyOutput)
	return
}

func (d *ECRDouble) DeleteRepositoryPolicyWithContext(i0 context.Context, i1 *ecr.DeleteRepositoryPolicyInput, i2 ...request.Option) (r0 *ecr.DeleteRepositoryPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRepositoryPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecr.DeleteRepositoryPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) fakeDeleteRepositoryPolicyWithContext(ctx context.Context, in *ecr.DeleteRepositoryPolicyInput, _ ...request.Option) (*ecr.DeleteRepositoryPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRepositoryPolicy cancelled", ctx.Err())
	default:
		return d.DeleteRepositoryPolicy(in)
	}
}

func (d *ECRDouble) DeleteRepositoryRequest(i0 *ecr.DeleteRepositoryInput) (r0 *request.Request, r1 *ecr.DeleteRepositoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRepositoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecr.DeleteRepositoryOutput)
	return
}

func (d *ECRDouble) DeleteRepositoryWithContext(i0 context.Context, i1 *ecr.DeleteRepositoryInput, i2 ...request.Option) (r0 *ecr.DeleteRepositoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRepositoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecr.DeleteRepositoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) fakeDeleteRepositoryWithContext(ctx context.Context, in *ecr.DeleteRepositoryInput, _ ...request.Option) (*ecr.DeleteRepositoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRepository cancelled", ctx.Err())
	default:
		return d.DeleteRepository(in)
	}
}

func (d *ECRDouble) DescribeImageScanFindings(i0 *ecr.DescribeImageScanFindingsInput) (r0 *ecr.DescribeImageScanFindingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImageScanFindings", i0)
	r0, _ = returns[0].(*ecr.DescribeImageScanFindingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) DescribeImageScanFindingsPages(i0 *ecr.DescribeImageScanFindingsInput, i1 func(*ecr.DescribeImageScanFindingsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImageScanFindingsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ECRDouble) fakeDescribeImageScanFindingsPages(in *ecr.DescribeImageScanFindingsInput, pager func(*ecr.DescribeImageScanFindingsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeImageScanFindings", paginators, in, pager)
}

func (d *ECRDouble) DescribeImageScanFindingsPagesWithContext(i0 context.Context, i1 *ecr.DescribeImageScanFindingsInput, i2 func(*ecr.DescribeImageScanFindingsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImageScanFindingsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ECRDouble) fakeDescribeImageScanFindingsPagesWithContext(ctx context.Context, in *ecr.DescribeImageScanFindingsInput, pager func(*ecr.DescribeImageScanFindingsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeImageScanFindings", paginators, ctx, in, pager, options...)
}

func (d *ECRDouble) DescribeImageScanFindingsRequest(i0 *ecr.DescribeImageScanFindingsInput) (r0 *request.Request, r1 *ecr.DescribeImageScanFindingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImageScanFindingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecr.DescribeImageScanFindingsOutput)
	return
}

func (d *ECRDouble) DescribeImageScanFindingsWithContext(i0 context.Context, i1 *ecr.DescribeImageScanFindingsInput, i2 ...request.Option) (r0 *ecr.DescribeImageScanFindingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImageScanFindingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecr.DescribeImageScanFindingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) fakeDescribeImageScanFindingsWithContext(ctx context.Context, in *ecr.DescribeImageScanFindingsInput, _ ...request.Option) (*ecr.DescribeImageScanFindingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeImageScanFindings cancelled", ctx.Err())
	default:
		return d.DescribeImageScanFindings(in)
	}
}

func (d *ECRDouble) DescribeImages(i0 *ecr.DescribeImagesInput) (r0 *ecr.DescribeImagesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImages", i0)
	r0, _ = returns[0].(*ecr.DescribeImagesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) DescribeImagesPages(i0 *ecr.DescribeImagesInput, i1 func(*ecr.DescribeImagesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImagesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ECRDouble) fakeDescribeImagesPages(in *ecr.DescribeImagesInput, pager func(*ecr.DescribeImagesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeImages", paginators, in, pager)
}

func (d *ECRDouble) DescribeImagesPagesWithContext(i0 context.Context, i1 *ecr.DescribeImagesInput, i2 func(*ecr.DescribeImagesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImagesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ECRDouble) fakeDescribeImagesPagesWithContext(ctx context.Context, in *ecr.DescribeImagesInput, pager func(*ecr.DescribeImagesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeImages", paginators, ctx, in, pager, options...)
}

func (d *ECRDouble) DescribeImagesRequest(i0 *ecr.DescribeImagesInput) (r0 *request.Request, r1 *ecr.DescribeImagesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImagesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecr.DescribeImagesOutput)
	return
}

func (d *ECRDouble) DescribeImagesWithContext(i0 context.Context, i1 *ecr.DescribeImagesInput, i2 ...request.Option) (r0 *ecr.DescribeImagesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImagesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecr.DescribeImagesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) fakeDescribeImagesWithContext(ctx context.Context, in *ecr.DescribeImagesInput, _ ...request.Option) (*ecr.DescribeImagesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeImages cancelled", ctx.Err())
	default:
		return d.DescribeImages(in)
	}
}

func (d *ECRDouble) DescribeRepositories(i0 *ecr.DescribeRepositoriesInput) (r0 *ecr.DescribeRepositoriesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRepositories", i0)
	r0, _ = returns[0].(*ecr.DescribeRepositoriesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) DescribeRepositoriesPages(i0 *ecr.DescribeRepositoriesInput, i1 func(*ecr.DescribeRepositoriesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRepositoriesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ECRDouble) fakeDescribeRepositoriesPages(in *ecr.DescribeRepositoriesInput, pager func(*ecr.DescribeRepositoriesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeRepositories", paginators, in, pager)
}

func (d *ECRDouble) DescribeRepositoriesPagesWithContext(i0 context.Context, i1 *ecr.DescribeRepositoriesInput, i2 func(*ecr.DescribeRepositoriesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRepositoriesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ECRDouble) fakeDescribeRepositoriesPagesWithContext(ctx context.Context, in *ecr.DescribeRepositoriesInput, pager func(*ecr.DescribeRepositoriesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeRepositories", paginators, ctx, in, pager, options...)
}

func (d *ECRDouble) DescribeRepositoriesRequest(i0 *ecr.DescribeRepositoriesInput) (r0 *request.Request, r1 *ecr.DescribeRepositoriesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRepositoriesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecr.DescribeRepositoriesOutput)
	return
}

func (d *ECRDouble) DescribeRepositoriesWithContext(i0 context.Context, i1 *ecr.DescribeRepositoriesInput, i2 ...request.Option) (r0 *ecr.DescribeRepositoriesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRepositoriesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecr.DescribeRepositoriesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) fakeDescribeRepositoriesWithContext(ctx context.Context, in *ecr.DescribeRepositoriesInput, _ ...request.Option) (*ecr.DescribeRepositoriesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeRepositories cancelled", ctx.Err())
	default:
		return d.DescribeRepositories(in)
	}
}

func (d *ECRDouble) GetAuthorizationToken(i0 *ecr.GetAuthorizationTokenInput) (r0 *ecr.GetAuthorizationTokenOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAuthorizationToken", i0)
	r0, _ = returns[0].(*ecr.GetAuthorizationTokenOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) GetAuthorizationTokenRequest(i0 *ecr.GetAuthorizationTokenInput) (r0 *request.Request, r1 *ecr.GetAuthorizationTokenOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAuthorizationTokenRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecr.GetAuthorizationTokenOutput)
	return
}

func (d *ECRDouble) GetAuthorizationTokenWithContext(i0 context.Context, i1 *ecr.GetAuthorizationTokenInput, i2 ...request.Option) (r0 *ecr.GetAuthorizationTokenOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAuthorizationTokenWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecr.GetAuthorizationTokenOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) fakeGetAuthorizationTokenWithContext(ctx context.Context, in *ecr.GetAuthorizationTokenInput, _ ...request.Option) (*ecr.GetAuthorizationTokenOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetAuthorizationToken cancelled", ctx.Err())
	default:
		return d.GetAuthorizationToken(in)
	}
}

func (d *ECRDouble) GetDownloadUrlForLayer(i0 *ecr.GetDownloadUrlForLayerInput) (r0 *ecr.GetDownloadUrlForLayerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDownloadUrlForLayer", i0)
	r0, _ = returns[0].(*ecr.GetDownloadUrlForLayerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) GetDownloadUrlForLayerRequest(i0 *ecr.GetDownloadUrlForLayerInput) (r0 *request.Request, r1 *ecr.GetDownloadUrlForLayerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDownloadUrlForLayerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecr.GetDownloadUrlForLayerOutput)
	return
}

func (d *ECRDouble) GetDownloadUrlForLayerWithContext(i0 context.Context, i1 *ecr.GetDownloadUrlForLayerInput, i2 ...request.Option) (r0 *ecr.GetDownloadUrlForLayerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDownloadUrlForLayerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecr.GetDownloadUrlForLayerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) fakeGetDownloadUrlForLayerWithContext(ctx context.Context, in *ecr.GetDownloadUrlForLayerInput, _ ...request.Option) (*ecr.GetDownloadUrlForLayerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDownloadUrlForLayer cancelled", ctx.Err())
	default:
		return d.GetDownloadUrlForLayer(in)
	}
}

func (d *ECRDouble) GetLifecyclePolicy(i0 *ecr.GetLifecyclePolicyInput) (r0 *ecr.GetLifecyclePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLifecyclePolicy", i0)
	r0, _ = returns[0].(*ecr.GetLifecyclePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) GetLifecyclePolicyPreview(i0 *ecr.GetLifecyclePolicyPreviewInput) (r0 *ecr.GetLifecyclePolicyPreviewOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLifecyclePolicyPreview", i0)
	r0, _ = returns[0].(*ecr.GetLifecyclePolicyPreviewOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) GetLifecyclePolicyPreviewPages(i0 *ecr.GetLifecyclePolicyPreviewInput, i1 func(*ecr.GetLifecyclePolicyPreviewOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLifecyclePolicyPreviewPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ECRDouble) fakeGetLifecyclePolicyPreviewPages(in *ecr.GetLifecyclePolicyPreviewInput, pager func(*ecr.GetLifecyclePolicyPreviewOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetLifecyclePolicyPreview", paginators, in, pager)
}

func (d *ECRDouble) GetLifecyclePolicyPreviewPagesWithContext(i0 context.Context, i1 *ecr.GetLifecyclePolicyPreviewInput, i2 func(*ecr.GetLifecyclePolicyPreviewOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLifecyclePolicyPreviewPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ECRDouble) fakeGetLifecyclePolicyPreviewPagesWithContext(ctx context.Context, in *ecr.GetLifecyclePolicyPreviewInput, pager func(*ecr.GetLifecyclePolicyPreviewOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetLifecyclePolicyPreview", paginators, ctx, in, pager, options...)
}

func (d *ECRDouble) GetLifecyclePolicyPreviewRequest(i0 *ecr.GetLifecyclePolicyPreviewInput) (r0 *request.Request, r1 *ecr.GetLifecyclePolicyPreviewOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLifecyclePolicyPreviewRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecr.GetLifecyclePolicyPreviewOutput)
	return
}

func (d *ECRDouble) GetLifecyclePolicyPreviewWithContext(i0 context.Context, i1 *ecr.GetLifecyclePolicyPreviewInput, i2 ...request.Option) (r0 *ecr.GetLifecyclePolicyPreviewOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLifecyclePolicyPreviewWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecr.GetLifecyclePolicyPreviewOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) fakeGetLifecyclePolicyPreviewWithContext(ctx context.Context, in *ecr.GetLifecyclePolicyPreviewInput, _ ...request.Option) (*ecr.GetLifecyclePolicyPreviewOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetLifecyclePolicyPreview cancelled", ctx.Err())
	default:
		return d.GetLifecyclePolicyPreview(in)
	}
}

func (d *ECRDouble) GetLifecyclePolicyRequest(i0 *ecr.GetLifecyclePolicyInput) (r0 *request.Request, r1 *ecr.GetLifecyclePolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLifecyclePolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecr.GetLifecyclePolicyOutput)
	return
}

func (d *ECRDouble) GetLifecyclePolicyWithContext(i0 context.Context, i1 *ecr.GetLifecyclePolicyInput, i2 ...request.Option) (r0 *ecr.GetLifecyclePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLifecyclePolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecr.GetLifecyclePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) fakeGetLifecyclePolicyWithContext(ctx context.Context, in *ecr.GetLifecyclePolicyInput, _ ...request.Option) (*ecr.GetLifecyclePolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetLifecyclePolicy cancelled", ctx.Err())
	default:
		return d.GetLifecyclePolicy(in)
	}
}

func (d *ECRDouble) GetRepositoryPolicy(i0 *ecr.GetRepositoryPolicyInput) (r0 *ecr.GetRepositoryPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRepositoryPolicy", i0)
	r0, _ = returns[0].(*ecr.GetRepositoryPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) GetRepositoryPolicyRequest(i0 *ecr.GetRepositoryPolicyInput) (r0 *request.Request, r1 *ecr.GetRepositoryPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRepositoryPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecr.GetRepositoryPolicyOutput)
	return
}

func (d *ECRDouble) GetRepositoryPolicyWithContext(i0 context.Context, i1 *ecr.GetRepositoryPolicyInput, i2 ...request.Option) (r0 *ecr.GetRepositoryPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRepositoryPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecr.GetRepositoryPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) fakeGetRepositoryPolicyWithContext(ctx context.Context, in *ecr.GetRepositoryPolicyInput, _ ...request.Option) (*ecr.GetRepositoryPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRepositoryPolicy cancelled", ctx.Err())
	default:
		return d.GetRepositoryPolicy(in)
	}
}

func (d *ECRDouble) InitiateLayerUpload(i0 *ecr.InitiateLayerUploadInput) (r0 *ecr.InitiateLayerUploadOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("InitiateLayerUpload", i0)
	r0, _ = returns[0].(*ecr.InitiateLayerUploadOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) InitiateLayerUploadRequest(i0 *ecr.InitiateLayerUploadInput) (r0 *request.Request, r1 *ecr.InitiateLayerUploadOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("InitiateLayerUploadRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecr.InitiateLayerUploadOutput)
	return
}

func (d *ECRDouble) InitiateLayerUploadWithContext(i0 context.Context, i1 *ecr.InitiateLayerUploadInput, i2 ...request.Option) (r0 *ecr.InitiateLayerUploadOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("InitiateLayerUploadWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecr.InitiateLayerUploadOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) fakeInitiateLayerUploadWithContext(ctx context.Context, in *ecr.InitiateLayerUploadInput, _ ...request.Option) (*ecr.InitiateLayerUploadOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "InitiateLayerUpload cancelled", ctx.Err())
	default:
		return d.InitiateLayerUpload(in)
	}
}

func (d *ECRDouble) ListImages(i0 *ecr.ListImagesInput) (r0 *ecr.ListImagesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListImages", i0)
	r0, _ = returns[0].(*ecr.ListImagesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) ListImagesPages(i0 *ecr.ListImagesInput, i1 func(*ecr.ListImagesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListImagesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ECRDouble) fakeListImagesPages(in *ecr.ListImagesInput, pager func(*ecr.ListImagesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListImages", paginators, in, pager)
}

func (d *ECRDouble) ListImagesPagesWithContext(i0 context.Context, i1 *ecr.ListImagesInput, i2 func(*ecr.ListImagesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListImagesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ECRDouble) fakeListImagesPagesWithContext(ctx context.Context, in *ecr.ListImagesInput, pager func(*ecr.ListImagesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListImages", paginators, ctx, in, pager, options...)
}

func (d *ECRDouble) ListImagesRequest(i0 *ecr.ListImagesInput) (r0 *request.Request, r1 *ecr.ListImagesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListImagesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecr.ListImagesOutput)
	return
}

func (d *ECRDouble) ListImagesWithContext(i0 context.Context, i1 *ecr.ListImagesInput, i2 ...request.Option) (r0 *ecr.ListImagesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListImagesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecr.ListImagesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) fakeListImagesWithContext(ctx context.Context, in *ecr.ListImagesInput, _ ...request.Option) (*ecr.ListImagesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListImages cancelled", ctx.Err())
	default:
		return d.ListImages(in)
	}
}

func (d *ECRDouble) ListTagsForResource(i0 *ecr.ListTagsForResourceInput) (r0 *ecr.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*ecr.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) ListTagsForResourceRequest(i0 *ecr.ListTagsForResourceInput) (r0 *request.Request, r1 *ecr.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecr.ListTagsForResourceOutput)
	return
}

func (d *ECRDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *ecr.ListTagsForResourceInput, i2 ...request.Option) (r0 *ecr.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecr.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *ecr.ListTagsForResourceInput, _ ...request.Option) (*ecr.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *ECRDouble) PutImage(i0 *ecr.PutImageInput) (r0 *ecr.PutImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutImage", i0)
	r0, _ = returns[0].(*ecr.PutImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) PutImageRequest(i0 *ecr.PutImageInput) (r0 *request.Request, r1 *ecr.PutImageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutImageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecr.PutImageOutput)
	return
}

func (d *ECRDouble) PutImageScanningConfiguration(i0 *ecr.PutImageScanningConfigurationInput) (r0 *ecr.PutImageScanningConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutImageScanningConfiguration", i0)
	r0, _ = returns[0].(*ecr.PutImageScanningConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) PutImageScanningConfigurationRequest(i0 *ecr.PutImageScanningConfigurationInput) (r0 *request.Request, r1 *ecr.PutImageScanningConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutImageScanningConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecr.PutImageScanningConfigurationOutput)
	return
}

func (d *ECRDouble) PutImageScanningConfigurationWithContext(i0 context.Context, i1 *ecr.PutImageScanningConfigurationInput, i2 ...request.Option) (r0 *ecr.PutImageScanningConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutImageScanningConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecr.PutImageScanningConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) fakePutImageScanningConfigurationWithContext(ctx context.Context, in *ecr.PutImageScanningConfigurationInput, _ ...request.Option) (*ecr.PutImageScanningConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutImageScanningConfiguration cancelled", ctx.Err())
	default:
		return d.PutImageScanningConfiguration(in)
	}
}

func (d *ECRDouble) PutImageTagMutability(i0 *ecr.PutImageTagMutabilityInput) (r0 *ecr.PutImageTagMutabilityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutImageTagMutability", i0)
	r0, _ = returns[0].(*ecr.PutImageTagMutabilityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) PutImageTagMutabilityRequest(i0 *ecr.PutImageTagMutabilityInput) (r0 *request.Request, r1 *ecr.PutImageTagMutabilityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutImageTagMutabilityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecr.PutImageTagMutabilityOutput)
	return
}

func (d *ECRDouble) PutImageTagMutabilityWithContext(i0 context.Context, i1 *ecr.PutImageTagMutabilityInput, i2 ...request.Option) (r0 *ecr.PutImageTagMutabilityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutImageTagMutabilityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecr.PutImageTagMutabilityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) fakePutImageTagMutabilityWithContext(ctx context.Context, in *ecr.PutImageTagMutabilityInput, _ ...request.Option) (*ecr.PutImageTagMutabilityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutImageTagMutability cancelled", ctx.Err())
	default:
		return d.PutImageTagMutability(in)
	}
}

func (d *ECRDouble) PutImageWithContext(i0 context.Context, i1 *ecr.PutImageInput, i2 ...request.Option) (r0 *ecr.PutImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutImageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecr.PutImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) fakePutImageWithContext(ctx context.Context, in *ecr.PutImageInput, _ ...request.Option) (*ecr.PutImageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutImage cancelled", ctx.Err())
	default:
		return d.PutImage(in)
	}
}

func (d *ECRDouble) PutLifecyclePolicy(i0 *ecr.PutLifecyclePolicyInput) (r0 *ecr.PutLifecyclePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutLifecyclePolicy", i0)
	r0, _ = returns[0].(*ecr.PutLifecyclePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) PutLifecyclePolicyRequest(i0 *ecr.PutLifecyclePolicyInput) (r0 *request.Request, r1 *ecr.PutLifecyclePolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutLifecyclePolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecr.PutLifecyclePolicyOutput)
	return
}

func (d *ECRDouble) PutLifecyclePolicyWithContext(i0 context.Context, i1 *ecr.PutLifecyclePolicyInput, i2 ...request.Option) (r0 *ecr.PutLifecyclePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutLifecyclePolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecr.PutLifecyclePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) fakePutLifecyclePolicyWithContext(ctx context.Context, in *ecr.PutLifecyclePolicyInput, _ ...request.Option) (*ecr.PutLifecyclePolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutLifecyclePolicy cancelled", ctx.Err())
	default:
		return d.PutLifecyclePolicy(in)
	}
}

func (d *ECRDouble) SetRepositoryPolicy(i0 *ecr.SetRepositoryPolicyInput) (r0 *ecr.SetRepositoryPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetRepositoryPolicy", i0)
	r0, _ = returns[0].(*ecr.SetRepositoryPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) SetRepositoryPolicyRequest(i0 *ecr.SetRepositoryPolicyInput) (r0 *request.Request, r1 *ecr.SetRepositoryPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetRepositoryPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecr.SetRepositoryPolicyOutput)
	return
}

func (d *ECRDouble) SetRepositoryPolicyWithContext(i0 context.Context, i1 *ecr.SetRepositoryPolicyInput, i2 ...request.Option) (r0 *ecr.SetRepositoryPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetRepositoryPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecr.SetRepositoryPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) fakeSetRepositoryPolicyWithContext(ctx context.Context, in *ecr.SetRepositoryPolicyInput, _ ...request.Option) (*ecr.SetRepositoryPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetRepositoryPolicy cancelled", ctx.Err())
	default:
		return d.SetRepositoryPolicy(in)
	}
}

func (d *ECRDouble) StartImageScan(i0 *ecr.StartImageScanInput) (r0 *ecr.StartImageScanOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartImageScan", i0)
	r0, _ = returns[0].(*ecr.StartImageScanOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) StartImageScanRequest(i0 *ecr.StartImageScanInput) (r0 *request.Request, r1 *ecr.StartImageScanOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartImageScanRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecr.StartImageScanOutput)
	return
}

func (d *ECRDouble) StartImageScanWithContext(i0 context.Context, i1 *ecr.StartImageScanInput, i2 ...request.Option) (r0 *ecr.StartImageScanOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartImageScanWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecr.StartImageScanOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) fakeStartImageScanWithContext(ctx context.Context, in *ecr.StartImageScanInput, _ ...request.Option) (*ecr.StartImageScanOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartImageScan cancelled", ctx.Err())
	default:
		return d.StartImageScan(in)
	}
}

func (d *ECRDouble) StartLifecyclePolicyPreview(i0 *ecr.StartLifecyclePolicyPreviewInput) (r0 *ecr.StartLifecyclePolicyPreviewOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartLifecyclePolicyPreview", i0)
	r0, _ = returns[0].(*ecr.StartLifecyclePolicyPreviewOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) StartLifecyclePolicyPreviewRequest(i0 *ecr.StartLifecyclePolicyPreviewInput) (r0 *request.Request, r1 *ecr.StartLifecyclePolicyPreviewOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartLifecyclePolicyPreviewRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecr.StartLifecyclePolicyPreviewOutput)
	return
}

func (d *ECRDouble) StartLifecyclePolicyPreviewWithContext(i0 context.Context, i1 *ecr.StartLifecyclePolicyPreviewInput, i2 ...request.Option) (r0 *ecr.StartLifecyclePolicyPreviewOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartLifecyclePolicyPreviewWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecr.StartLifecyclePolicyPreviewOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) fakeStartLifecyclePolicyPreviewWithContext(ctx context.Context, in *ecr.StartLifecyclePolicyPreviewInput, _ ...request.Option) (*ecr.StartLifecyclePolicyPreviewOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartLifecyclePolicyPreview cancelled", ctx.Err())
	default:
		return d.StartLifecyclePolicyPreview(in)
	}
}

func (d *ECRDouble) TagResource(i0 *ecr.TagResourceInput) (r0 *ecr.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*ecr.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) TagResourceRequest(i0 *ecr.TagResourceInput) (r0 *request.Request, r1 *ecr.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecr.TagResourceOutput)
	return
}

func (d *ECRDouble) TagResourceWithContext(i0 context.Context, i1 *ecr.TagResourceInput, i2 ...request.Option) (r0 *ecr.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecr.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) fakeTagResourceWithContext(ctx context.Context, in *ecr.TagResourceInput, _ ...request.Option) (*ecr.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *ECRDouble) UntagResource(i0 *ecr.UntagResourceInput) (r0 *ecr.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*ecr.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) UntagResourceRequest(i0 *ecr.UntagResourceInput) (r0 *request.Request, r1 *ecr.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecr.UntagResourceOutput)
	return
}

func (d *ECRDouble) UntagResourceWithContext(i0 context.Context, i1 *ecr.UntagResourceInput, i2 ...request.Option) (r0 *ecr.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecr.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) fakeUntagResourceWithContext(ctx context.Context, in *ecr.UntagResourceInput, _ ...request.Option) (*ecr.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *ECRDouble) UploadLayerPart(i0 *ecr.UploadLayerPartInput) (r0 *ecr.UploadLayerPartOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UploadLayerPart", i0)
	r0, _ = returns[0].(*ecr.UploadLayerPartOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) UploadLayerPartRequest(i0 *ecr.UploadLayerPartInput) (r0 *request.Request, r1 *ecr.UploadLayerPartOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UploadLayerPartRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecr.UploadLayerPartOutput)
	return
}

func (d *ECRDouble) UploadLayerPartWithContext(i0 context.Context, i1 *ecr.UploadLayerPartInput, i2 ...request.Option) (r0 *ecr.UploadLayerPartOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UploadLayerPartWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecr.UploadLayerPartOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECRDouble) fakeUploadLayerPartWithContext(ctx context.Context, in *ecr.UploadLayerPartInput, _ ...request.Option) (*ecr.UploadLayerPartOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UploadLayerPart cancelled", ctx.Err())
	default:
		return d.UploadLayerPart(in)
	}
}

func (d *ECRDouble) WaitUntilImageScanComplete(i0 *ecr.DescribeImageScanFindingsInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilImageScanComplete", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *ECRDouble) fakeWaitUntilImageScanComplete(in *ecr.DescribeImageScanFindingsInput) error {
	return d.WaitUntil("ImageScanComplete", waiters, in)
}

func (d *ECRDouble) WaitUntilImageScanCompleteWithContext(i0 context.Context, i1 *ecr.DescribeImageScanFindingsInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilImageScanCompleteWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *ECRDouble) fakeWaitUntilImageScanCompleteWithContext(ctx context.Context, in *ecr.DescribeImageScanFindingsInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("ImageScanComplete", waiters, ctx, in, waitOption...)
}

func (d *ECRDouble) WaitUntilLifecyclePolicyPreviewComplete(i0 *ecr.GetLifecyclePolicyPreviewInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilLifecyclePolicyPreviewComplete", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *ECRDouble) fakeWaitUntilLifecyclePolicyPreviewComplete(in *ecr.GetLifecyclePolicyPreviewInput) error {
	return d.WaitUntil("LifecyclePolicyPreviewComplete", waiters, in)
}

func (d *ECRDouble) WaitUntilLifecyclePolicyPreviewCompleteWithContext(i0 context.Context, i1 *ecr.GetLifecyclePolicyPreviewInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilLifecyclePolicyPreviewCompleteWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *ECRDouble) fakeWaitUntilLifecyclePolicyPreviewCompleteWithContext(ctx context.Context, in *ecr.GetLifecyclePolicyPreviewInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("LifecyclePolicyPreviewComplete", waiters, ctx, in, waitOption...)
}
