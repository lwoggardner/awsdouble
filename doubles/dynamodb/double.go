// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:12:24+11:00

// Package dynamodbdouble provides a TestDouble implementation of dynamodbiface.DynamoDBAPI
package dynamodbdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/aws/aws-sdk-go/service/dynamodb/dynamodbiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// DynamoDBDouble is TestDouble for dynamodbiface.DynamoDBAPI
type DynamoDBDouble struct {
	dynamodbiface.DynamoDBAPI
	*awsdouble.AWSTestDouble
}

// Constructor for DynamoDBDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *DynamoDBDouble {
	result := &DynamoDBDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*dynamodbiface.DynamoDBAPI)(nil), configurators...)
	return result
}

func (d *DynamoDBDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *DynamoDBDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "BatchGetItemPages":
		return m.Fake(d.fakeBatchGetItemPages)

	case "BatchGetItemPagesWithContext":
		return m.Fake(d.fakeBatchGetItemPagesWithContext)

	case "BatchGetItemWithContext":
		return m.Fake(d.fakeBatchGetItemWithContext)

	case "BatchWriteItemWithContext":
		return m.Fake(d.fakeBatchWriteItemWithContext)

	case "CreateBackupWithContext":
		return m.Fake(d.fakeCreateBackupWithContext)

	case "CreateGlobalTableWithContext":
		return m.Fake(d.fakeCreateGlobalTableWithContext)

	case "CreateTableWithContext":
		return m.Fake(d.fakeCreateTableWithContext)

	case "DeleteBackupWithContext":
		return m.Fake(d.fakeDeleteBackupWithContext)

	case "DeleteItemWithContext":
		return m.Fake(d.fakeDeleteItemWithContext)

	case "DeleteTableWithContext":
		return m.Fake(d.fakeDeleteTableWithContext)

	case "DescribeBackupWithContext":
		return m.Fake(d.fakeDescribeBackupWithContext)

	case "DescribeContinuousBackupsWithContext":
		return m.Fake(d.fakeDescribeContinuousBackupsWithContext)

	case "DescribeContributorInsightsWithContext":
		return m.Fake(d.fakeDescribeContributorInsightsWithContext)

	case "DescribeEndpointsWithContext":
		return m.Fake(d.fakeDescribeEndpointsWithContext)

	case "DescribeGlobalTableSettingsWithContext":
		return m.Fake(d.fakeDescribeGlobalTableSettingsWithContext)

	case "DescribeGlobalTableWithContext":
		return m.Fake(d.fakeDescribeGlobalTableWithContext)

	case "DescribeLimitsWithContext":
		return m.Fake(d.fakeDescribeLimitsWithContext)

	case "DescribeTableReplicaAutoScalingWithContext":
		return m.Fake(d.fakeDescribeTableReplicaAutoScalingWithContext)

	case "DescribeTableWithContext":
		return m.Fake(d.fakeDescribeTableWithContext)

	case "DescribeTimeToLiveWithContext":
		return m.Fake(d.fakeDescribeTimeToLiveWithContext)

	case "GetItemWithContext":
		return m.Fake(d.fakeGetItemWithContext)

	case "ListBackupsWithContext":
		return m.Fake(d.fakeListBackupsWithContext)

	case "ListContributorInsightsPages":
		return m.Fake(d.fakeListContributorInsightsPages)

	case "ListContributorInsightsPagesWithContext":
		return m.Fake(d.fakeListContributorInsightsPagesWithContext)

	case "ListContributorInsightsWithContext":
		return m.Fake(d.fakeListContributorInsightsWithContext)

	case "ListGlobalTablesWithContext":
		return m.Fake(d.fakeListGlobalTablesWithContext)

	case "ListTablesPages":
		return m.Fake(d.fakeListTablesPages)

	case "ListTablesPagesWithContext":
		return m.Fake(d.fakeListTablesPagesWithContext)

	case "ListTablesWithContext":
		return m.Fake(d.fakeListTablesWithContext)

	case "ListTagsOfResourceWithContext":
		return m.Fake(d.fakeListTagsOfResourceWithContext)

	case "PutItemWithContext":
		return m.Fake(d.fakePutItemWithContext)

	case "QueryPages":
		return m.Fake(d.fakeQueryPages)

	case "QueryPagesWithContext":
		return m.Fake(d.fakeQueryPagesWithContext)

	case "QueryWithContext":
		return m.Fake(d.fakeQueryWithContext)

	case "RestoreTableFromBackupWithContext":
		return m.Fake(d.fakeRestoreTableFromBackupWithContext)

	case "RestoreTableToPointInTimeWithContext":
		return m.Fake(d.fakeRestoreTableToPointInTimeWithContext)

	case "ScanPages":
		return m.Fake(d.fakeScanPages)

	case "ScanPagesWithContext":
		return m.Fake(d.fakeScanPagesWithContext)

	case "ScanWithContext":
		return m.Fake(d.fakeScanWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "TransactGetItemsWithContext":
		return m.Fake(d.fakeTransactGetItemsWithContext)

	case "TransactWriteItemsWithContext":
		return m.Fake(d.fakeTransactWriteItemsWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateContinuousBackupsWithContext":
		return m.Fake(d.fakeUpdateContinuousBackupsWithContext)

	case "UpdateContributorInsightsWithContext":
		return m.Fake(d.fakeUpdateContributorInsightsWithContext)

	case "UpdateGlobalTableSettingsWithContext":
		return m.Fake(d.fakeUpdateGlobalTableSettingsWithContext)

	case "UpdateGlobalTableWithContext":
		return m.Fake(d.fakeUpdateGlobalTableWithContext)

	case "UpdateItemWithContext":
		return m.Fake(d.fakeUpdateItemWithContext)

	case "UpdateTableReplicaAutoScalingWithContext":
		return m.Fake(d.fakeUpdateTableReplicaAutoScalingWithContext)

	case "UpdateTableWithContext":
		return m.Fake(d.fakeUpdateTableWithContext)

	case "UpdateTimeToLiveWithContext":
		return m.Fake(d.fakeUpdateTimeToLiveWithContext)

	case "WaitUntilTableExists":
		return m.Fake(d.fakeWaitUntilTableExists)

	case "WaitUntilTableExistsWithContext":
		return m.Fake(d.fakeWaitUntilTableExistsWithContext)

	case "WaitUntilTableNotExists":
		return m.Fake(d.fakeWaitUntilTableNotExists)

	case "WaitUntilTableNotExistsWithContext":
		return m.Fake(d.fakeWaitUntilTableNotExistsWithContext)

	default:
		return nil
	}
}

func (d *DynamoDBDouble) BatchGetItem(i0 *dynamodb.BatchGetItemInput) (r0 *dynamodb.BatchGetItemOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetItem", i0)
	r0, _ = returns[0].(*dynamodb.BatchGetItemOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) BatchGetItemPages(i0 *dynamodb.BatchGetItemInput, i1 func(*dynamodb.BatchGetItemOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetItemPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DynamoDBDouble) fakeBatchGetItemPages(in *dynamodb.BatchGetItemInput, pager func(*dynamodb.BatchGetItemOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("BatchGetItem", paginators, in, pager)
}

func (d *DynamoDBDouble) BatchGetItemPagesWithContext(i0 context.Context, i1 *dynamodb.BatchGetItemInput, i2 func(*dynamodb.BatchGetItemOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetItemPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DynamoDBDouble) fakeBatchGetItemPagesWithContext(ctx context.Context, in *dynamodb.BatchGetItemInput, pager func(*dynamodb.BatchGetItemOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("BatchGetItem", paginators, ctx, in, pager, options...)
}

func (d *DynamoDBDouble) BatchGetItemRequest(i0 *dynamodb.BatchGetItemInput) (r0 *request.Request, r1 *dynamodb.BatchGetItemOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetItemRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.BatchGetItemOutput)
	return
}

func (d *DynamoDBDouble) BatchGetItemWithContext(i0 context.Context, i1 *dynamodb.BatchGetItemInput, i2 ...request.Option) (r0 *dynamodb.BatchGetItemOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetItemWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.BatchGetItemOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeBatchGetItemWithContext(ctx context.Context, in *dynamodb.BatchGetItemInput, _ ...request.Option) (*dynamodb.BatchGetItemOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchGetItem cancelled", ctx.Err())
	default:
		return d.BatchGetItem(in)
	}
}

func (d *DynamoDBDouble) BatchWriteItem(i0 *dynamodb.BatchWriteItemInput) (r0 *dynamodb.BatchWriteItemOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchWriteItem", i0)
	r0, _ = returns[0].(*dynamodb.BatchWriteItemOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) BatchWriteItemRequest(i0 *dynamodb.BatchWriteItemInput) (r0 *request.Request, r1 *dynamodb.BatchWriteItemOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchWriteItemRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.BatchWriteItemOutput)
	return
}

func (d *DynamoDBDouble) BatchWriteItemWithContext(i0 context.Context, i1 *dynamodb.BatchWriteItemInput, i2 ...request.Option) (r0 *dynamodb.BatchWriteItemOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchWriteItemWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.BatchWriteItemOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeBatchWriteItemWithContext(ctx context.Context, in *dynamodb.BatchWriteItemInput, _ ...request.Option) (*dynamodb.BatchWriteItemOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchWriteItem cancelled", ctx.Err())
	default:
		return d.BatchWriteItem(in)
	}
}

func (d *DynamoDBDouble) CreateBackup(i0 *dynamodb.CreateBackupInput) (r0 *dynamodb.CreateBackupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBackup", i0)
	r0, _ = returns[0].(*dynamodb.CreateBackupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) CreateBackupRequest(i0 *dynamodb.CreateBackupInput) (r0 *request.Request, r1 *dynamodb.CreateBackupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBackupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.CreateBackupOutput)
	return
}

func (d *DynamoDBDouble) CreateBackupWithContext(i0 context.Context, i1 *dynamodb.CreateBackupInput, i2 ...request.Option) (r0 *dynamodb.CreateBackupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBackupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.CreateBackupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeCreateBackupWithContext(ctx context.Context, in *dynamodb.CreateBackupInput, _ ...request.Option) (*dynamodb.CreateBackupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateBackup cancelled", ctx.Err())
	default:
		return d.CreateBackup(in)
	}
}

func (d *DynamoDBDouble) CreateGlobalTable(i0 *dynamodb.CreateGlobalTableInput) (r0 *dynamodb.CreateGlobalTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGlobalTable", i0)
	r0, _ = returns[0].(*dynamodb.CreateGlobalTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) CreateGlobalTableRequest(i0 *dynamodb.CreateGlobalTableInput) (r0 *request.Request, r1 *dynamodb.CreateGlobalTableOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGlobalTableRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.CreateGlobalTableOutput)
	return
}

func (d *DynamoDBDouble) CreateGlobalTableWithContext(i0 context.Context, i1 *dynamodb.CreateGlobalTableInput, i2 ...request.Option) (r0 *dynamodb.CreateGlobalTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGlobalTableWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.CreateGlobalTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeCreateGlobalTableWithContext(ctx context.Context, in *dynamodb.CreateGlobalTableInput, _ ...request.Option) (*dynamodb.CreateGlobalTableOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateGlobalTable cancelled", ctx.Err())
	default:
		return d.CreateGlobalTable(in)
	}
}

func (d *DynamoDBDouble) CreateTable(i0 *dynamodb.CreateTableInput) (r0 *dynamodb.CreateTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTable", i0)
	r0, _ = returns[0].(*dynamodb.CreateTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) CreateTableRequest(i0 *dynamodb.CreateTableInput) (r0 *request.Request, r1 *dynamodb.CreateTableOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTableRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.CreateTableOutput)
	return
}

func (d *DynamoDBDouble) CreateTableWithContext(i0 context.Context, i1 *dynamodb.CreateTableInput, i2 ...request.Option) (r0 *dynamodb.CreateTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTableWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.CreateTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeCreateTableWithContext(ctx context.Context, in *dynamodb.CreateTableInput, _ ...request.Option) (*dynamodb.CreateTableOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTable cancelled", ctx.Err())
	default:
		return d.CreateTable(in)
	}
}

func (d *DynamoDBDouble) DeleteBackup(i0 *dynamodb.DeleteBackupInput) (r0 *dynamodb.DeleteBackupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBackup", i0)
	r0, _ = returns[0].(*dynamodb.DeleteBackupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) DeleteBackupRequest(i0 *dynamodb.DeleteBackupInput) (r0 *request.Request, r1 *dynamodb.DeleteBackupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBackupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.DeleteBackupOutput)
	return
}

func (d *DynamoDBDouble) DeleteBackupWithContext(i0 context.Context, i1 *dynamodb.DeleteBackupInput, i2 ...request.Option) (r0 *dynamodb.DeleteBackupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBackupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.DeleteBackupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeDeleteBackupWithContext(ctx context.Context, in *dynamodb.DeleteBackupInput, _ ...request.Option) (*dynamodb.DeleteBackupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteBackup cancelled", ctx.Err())
	default:
		return d.DeleteBackup(in)
	}
}

func (d *DynamoDBDouble) DeleteItem(i0 *dynamodb.DeleteItemInput) (r0 *dynamodb.DeleteItemOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteItem", i0)
	r0, _ = returns[0].(*dynamodb.DeleteItemOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) DeleteItemRequest(i0 *dynamodb.DeleteItemInput) (r0 *request.Request, r1 *dynamodb.DeleteItemOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteItemRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.DeleteItemOutput)
	return
}

func (d *DynamoDBDouble) DeleteItemWithContext(i0 context.Context, i1 *dynamodb.DeleteItemInput, i2 ...request.Option) (r0 *dynamodb.DeleteItemOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteItemWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.DeleteItemOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeDeleteItemWithContext(ctx context.Context, in *dynamodb.DeleteItemInput, _ ...request.Option) (*dynamodb.DeleteItemOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteItem cancelled", ctx.Err())
	default:
		return d.DeleteItem(in)
	}
}

func (d *DynamoDBDouble) DeleteTable(i0 *dynamodb.DeleteTableInput) (r0 *dynamodb.DeleteTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTable", i0)
	r0, _ = returns[0].(*dynamodb.DeleteTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) DeleteTableRequest(i0 *dynamodb.DeleteTableInput) (r0 *request.Request, r1 *dynamodb.DeleteTableOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTableRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.DeleteTableOutput)
	return
}

func (d *DynamoDBDouble) DeleteTableWithContext(i0 context.Context, i1 *dynamodb.DeleteTableInput, i2 ...request.Option) (r0 *dynamodb.DeleteTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTableWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.DeleteTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeDeleteTableWithContext(ctx context.Context, in *dynamodb.DeleteTableInput, _ ...request.Option) (*dynamodb.DeleteTableOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTable cancelled", ctx.Err())
	default:
		return d.DeleteTable(in)
	}
}

func (d *DynamoDBDouble) DescribeBackup(i0 *dynamodb.DescribeBackupInput) (r0 *dynamodb.DescribeBackupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBackup", i0)
	r0, _ = returns[0].(*dynamodb.DescribeBackupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) DescribeBackupRequest(i0 *dynamodb.DescribeBackupInput) (r0 *request.Request, r1 *dynamodb.DescribeBackupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBackupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.DescribeBackupOutput)
	return
}

func (d *DynamoDBDouble) DescribeBackupWithContext(i0 context.Context, i1 *dynamodb.DescribeBackupInput, i2 ...request.Option) (r0 *dynamodb.DescribeBackupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBackupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.DescribeBackupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeDescribeBackupWithContext(ctx context.Context, in *dynamodb.DescribeBackupInput, _ ...request.Option) (*dynamodb.DescribeBackupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeBackup cancelled", ctx.Err())
	default:
		return d.DescribeBackup(in)
	}
}

func (d *DynamoDBDouble) DescribeContinuousBackups(i0 *dynamodb.DescribeContinuousBackupsInput) (r0 *dynamodb.DescribeContinuousBackupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeContinuousBackups", i0)
	r0, _ = returns[0].(*dynamodb.DescribeContinuousBackupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) DescribeContinuousBackupsRequest(i0 *dynamodb.DescribeContinuousBackupsInput) (r0 *request.Request, r1 *dynamodb.DescribeContinuousBackupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeContinuousBackupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.DescribeContinuousBackupsOutput)
	return
}

func (d *DynamoDBDouble) DescribeContinuousBackupsWithContext(i0 context.Context, i1 *dynamodb.DescribeContinuousBackupsInput, i2 ...request.Option) (r0 *dynamodb.DescribeContinuousBackupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeContinuousBackupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.DescribeContinuousBackupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeDescribeContinuousBackupsWithContext(ctx context.Context, in *dynamodb.DescribeContinuousBackupsInput, _ ...request.Option) (*dynamodb.DescribeContinuousBackupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeContinuousBackups cancelled", ctx.Err())
	default:
		return d.DescribeContinuousBackups(in)
	}
}

func (d *DynamoDBDouble) DescribeContributorInsights(i0 *dynamodb.DescribeContributorInsightsInput) (r0 *dynamodb.DescribeContributorInsightsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeContributorInsights", i0)
	r0, _ = returns[0].(*dynamodb.DescribeContributorInsightsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) DescribeContributorInsightsRequest(i0 *dynamodb.DescribeContributorInsightsInput) (r0 *request.Request, r1 *dynamodb.DescribeContributorInsightsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeContributorInsightsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.DescribeContributorInsightsOutput)
	return
}

func (d *DynamoDBDouble) DescribeContributorInsightsWithContext(i0 context.Context, i1 *dynamodb.DescribeContributorInsightsInput, i2 ...request.Option) (r0 *dynamodb.DescribeContributorInsightsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeContributorInsightsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.DescribeContributorInsightsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeDescribeContributorInsightsWithContext(ctx context.Context, in *dynamodb.DescribeContributorInsightsInput, _ ...request.Option) (*dynamodb.DescribeContributorInsightsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeContributorInsights cancelled", ctx.Err())
	default:
		return d.DescribeContributorInsights(in)
	}
}

func (d *DynamoDBDouble) DescribeEndpoints(i0 *dynamodb.DescribeEndpointsInput) (r0 *dynamodb.DescribeEndpointsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEndpoints", i0)
	r0, _ = returns[0].(*dynamodb.DescribeEndpointsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) DescribeEndpointsRequest(i0 *dynamodb.DescribeEndpointsInput) (r0 *request.Request, r1 *dynamodb.DescribeEndpointsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEndpointsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.DescribeEndpointsOutput)
	return
}

func (d *DynamoDBDouble) DescribeEndpointsWithContext(i0 context.Context, i1 *dynamodb.DescribeEndpointsInput, i2 ...request.Option) (r0 *dynamodb.DescribeEndpointsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEndpointsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.DescribeEndpointsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeDescribeEndpointsWithContext(ctx context.Context, in *dynamodb.DescribeEndpointsInput, _ ...request.Option) (*dynamodb.DescribeEndpointsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEndpoints cancelled", ctx.Err())
	default:
		return d.DescribeEndpoints(in)
	}
}

func (d *DynamoDBDouble) DescribeGlobalTable(i0 *dynamodb.DescribeGlobalTableInput) (r0 *dynamodb.DescribeGlobalTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGlobalTable", i0)
	r0, _ = returns[0].(*dynamodb.DescribeGlobalTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) DescribeGlobalTableRequest(i0 *dynamodb.DescribeGlobalTableInput) (r0 *request.Request, r1 *dynamodb.DescribeGlobalTableOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGlobalTableRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.DescribeGlobalTableOutput)
	return
}

func (d *DynamoDBDouble) DescribeGlobalTableSettings(i0 *dynamodb.DescribeGlobalTableSettingsInput) (r0 *dynamodb.DescribeGlobalTableSettingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGlobalTableSettings", i0)
	r0, _ = returns[0].(*dynamodb.DescribeGlobalTableSettingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) DescribeGlobalTableSettingsRequest(i0 *dynamodb.DescribeGlobalTableSettingsInput) (r0 *request.Request, r1 *dynamodb.DescribeGlobalTableSettingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGlobalTableSettingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.DescribeGlobalTableSettingsOutput)
	return
}

func (d *DynamoDBDouble) DescribeGlobalTableSettingsWithContext(i0 context.Context, i1 *dynamodb.DescribeGlobalTableSettingsInput, i2 ...request.Option) (r0 *dynamodb.DescribeGlobalTableSettingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGlobalTableSettingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.DescribeGlobalTableSettingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeDescribeGlobalTableSettingsWithContext(ctx context.Context, in *dynamodb.DescribeGlobalTableSettingsInput, _ ...request.Option) (*dynamodb.DescribeGlobalTableSettingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeGlobalTableSettings cancelled", ctx.Err())
	default:
		return d.DescribeGlobalTableSettings(in)
	}
}

func (d *DynamoDBDouble) DescribeGlobalTableWithContext(i0 context.Context, i1 *dynamodb.DescribeGlobalTableInput, i2 ...request.Option) (r0 *dynamodb.DescribeGlobalTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGlobalTableWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.DescribeGlobalTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeDescribeGlobalTableWithContext(ctx context.Context, in *dynamodb.DescribeGlobalTableInput, _ ...request.Option) (*dynamodb.DescribeGlobalTableOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeGlobalTable cancelled", ctx.Err())
	default:
		return d.DescribeGlobalTable(in)
	}
}

func (d *DynamoDBDouble) DescribeLimits(i0 *dynamodb.DescribeLimitsInput) (r0 *dynamodb.DescribeLimitsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLimits", i0)
	r0, _ = returns[0].(*dynamodb.DescribeLimitsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) DescribeLimitsRequest(i0 *dynamodb.DescribeLimitsInput) (r0 *request.Request, r1 *dynamodb.DescribeLimitsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLimitsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.DescribeLimitsOutput)
	return
}

func (d *DynamoDBDouble) DescribeLimitsWithContext(i0 context.Context, i1 *dynamodb.DescribeLimitsInput, i2 ...request.Option) (r0 *dynamodb.DescribeLimitsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLimitsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.DescribeLimitsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeDescribeLimitsWithContext(ctx context.Context, in *dynamodb.DescribeLimitsInput, _ ...request.Option) (*dynamodb.DescribeLimitsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeLimits cancelled", ctx.Err())
	default:
		return d.DescribeLimits(in)
	}
}

func (d *DynamoDBDouble) DescribeTable(i0 *dynamodb.DescribeTableInput) (r0 *dynamodb.DescribeTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTable", i0)
	r0, _ = returns[0].(*dynamodb.DescribeTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) DescribeTableReplicaAutoScaling(i0 *dynamodb.DescribeTableReplicaAutoScalingInput) (r0 *dynamodb.DescribeTableReplicaAutoScalingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTableReplicaAutoScaling", i0)
	r0, _ = returns[0].(*dynamodb.DescribeTableReplicaAutoScalingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) DescribeTableReplicaAutoScalingRequest(i0 *dynamodb.DescribeTableReplicaAutoScalingInput) (r0 *request.Request, r1 *dynamodb.DescribeTableReplicaAutoScalingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTableReplicaAutoScalingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.DescribeTableReplicaAutoScalingOutput)
	return
}

func (d *DynamoDBDouble) DescribeTableReplicaAutoScalingWithContext(i0 context.Context, i1 *dynamodb.DescribeTableReplicaAutoScalingInput, i2 ...request.Option) (r0 *dynamodb.DescribeTableReplicaAutoScalingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTableReplicaAutoScalingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.DescribeTableReplicaAutoScalingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeDescribeTableReplicaAutoScalingWithContext(ctx context.Context, in *dynamodb.DescribeTableReplicaAutoScalingInput, _ ...request.Option) (*dynamodb.DescribeTableReplicaAutoScalingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTableReplicaAutoScaling cancelled", ctx.Err())
	default:
		return d.DescribeTableReplicaAutoScaling(in)
	}
}

func (d *DynamoDBDouble) DescribeTableRequest(i0 *dynamodb.DescribeTableInput) (r0 *request.Request, r1 *dynamodb.DescribeTableOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTableRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.DescribeTableOutput)
	return
}

func (d *DynamoDBDouble) DescribeTableWithContext(i0 context.Context, i1 *dynamodb.DescribeTableInput, i2 ...request.Option) (r0 *dynamodb.DescribeTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTableWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.DescribeTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeDescribeTableWithContext(ctx context.Context, in *dynamodb.DescribeTableInput, _ ...request.Option) (*dynamodb.DescribeTableOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTable cancelled", ctx.Err())
	default:
		return d.DescribeTable(in)
	}
}

func (d *DynamoDBDouble) DescribeTimeToLive(i0 *dynamodb.DescribeTimeToLiveInput) (r0 *dynamodb.DescribeTimeToLiveOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTimeToLive", i0)
	r0, _ = returns[0].(*dynamodb.DescribeTimeToLiveOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) DescribeTimeToLiveRequest(i0 *dynamodb.DescribeTimeToLiveInput) (r0 *request.Request, r1 *dynamodb.DescribeTimeToLiveOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTimeToLiveRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.DescribeTimeToLiveOutput)
	return
}

func (d *DynamoDBDouble) DescribeTimeToLiveWithContext(i0 context.Context, i1 *dynamodb.DescribeTimeToLiveInput, i2 ...request.Option) (r0 *dynamodb.DescribeTimeToLiveOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTimeToLiveWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.DescribeTimeToLiveOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeDescribeTimeToLiveWithContext(ctx context.Context, in *dynamodb.DescribeTimeToLiveInput, _ ...request.Option) (*dynamodb.DescribeTimeToLiveOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTimeToLive cancelled", ctx.Err())
	default:
		return d.DescribeTimeToLive(in)
	}
}

func (d *DynamoDBDouble) GetItem(i0 *dynamodb.GetItemInput) (r0 *dynamodb.GetItemOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetItem", i0)
	r0, _ = returns[0].(*dynamodb.GetItemOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) GetItemRequest(i0 *dynamodb.GetItemInput) (r0 *request.Request, r1 *dynamodb.GetItemOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetItemRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.GetItemOutput)
	return
}

func (d *DynamoDBDouble) GetItemWithContext(i0 context.Context, i1 *dynamodb.GetItemInput, i2 ...request.Option) (r0 *dynamodb.GetItemOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetItemWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.GetItemOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeGetItemWithContext(ctx context.Context, in *dynamodb.GetItemInput, _ ...request.Option) (*dynamodb.GetItemOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetItem cancelled", ctx.Err())
	default:
		return d.GetItem(in)
	}
}

func (d *DynamoDBDouble) ListBackups(i0 *dynamodb.ListBackupsInput) (r0 *dynamodb.ListBackupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBackups", i0)
	r0, _ = returns[0].(*dynamodb.ListBackupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) ListBackupsRequest(i0 *dynamodb.ListBackupsInput) (r0 *request.Request, r1 *dynamodb.ListBackupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBackupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.ListBackupsOutput)
	return
}

func (d *DynamoDBDouble) ListBackupsWithContext(i0 context.Context, i1 *dynamodb.ListBackupsInput, i2 ...request.Option) (r0 *dynamodb.ListBackupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBackupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.ListBackupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeListBackupsWithContext(ctx context.Context, in *dynamodb.ListBackupsInput, _ ...request.Option) (*dynamodb.ListBackupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListBackups cancelled", ctx.Err())
	default:
		return d.ListBackups(in)
	}
}

func (d *DynamoDBDouble) ListContributorInsights(i0 *dynamodb.ListContributorInsightsInput) (r0 *dynamodb.ListContributorInsightsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListContributorInsights", i0)
	r0, _ = returns[0].(*dynamodb.ListContributorInsightsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) ListContributorInsightsPages(i0 *dynamodb.ListContributorInsightsInput, i1 func(*dynamodb.ListContributorInsightsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListContributorInsightsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DynamoDBDouble) fakeListContributorInsightsPages(in *dynamodb.ListContributorInsightsInput, pager func(*dynamodb.ListContributorInsightsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListContributorInsights", paginators, in, pager)
}

func (d *DynamoDBDouble) ListContributorInsightsPagesWithContext(i0 context.Context, i1 *dynamodb.ListContributorInsightsInput, i2 func(*dynamodb.ListContributorInsightsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListContributorInsightsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DynamoDBDouble) fakeListContributorInsightsPagesWithContext(ctx context.Context, in *dynamodb.ListContributorInsightsInput, pager func(*dynamodb.ListContributorInsightsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListContributorInsights", paginators, ctx, in, pager, options...)
}

func (d *DynamoDBDouble) ListContributorInsightsRequest(i0 *dynamodb.ListContributorInsightsInput) (r0 *request.Request, r1 *dynamodb.ListContributorInsightsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListContributorInsightsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.ListContributorInsightsOutput)
	return
}

func (d *DynamoDBDouble) ListContributorInsightsWithContext(i0 context.Context, i1 *dynamodb.ListContributorInsightsInput, i2 ...request.Option) (r0 *dynamodb.ListContributorInsightsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListContributorInsightsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.ListContributorInsightsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeListContributorInsightsWithContext(ctx context.Context, in *dynamodb.ListContributorInsightsInput, _ ...request.Option) (*dynamodb.ListContributorInsightsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListContributorInsights cancelled", ctx.Err())
	default:
		return d.ListContributorInsights(in)
	}
}

func (d *DynamoDBDouble) ListGlobalTables(i0 *dynamodb.ListGlobalTablesInput) (r0 *dynamodb.ListGlobalTablesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGlobalTables", i0)
	r0, _ = returns[0].(*dynamodb.ListGlobalTablesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) ListGlobalTablesRequest(i0 *dynamodb.ListGlobalTablesInput) (r0 *request.Request, r1 *dynamodb.ListGlobalTablesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGlobalTablesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.ListGlobalTablesOutput)
	return
}

func (d *DynamoDBDouble) ListGlobalTablesWithContext(i0 context.Context, i1 *dynamodb.ListGlobalTablesInput, i2 ...request.Option) (r0 *dynamodb.ListGlobalTablesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGlobalTablesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.ListGlobalTablesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeListGlobalTablesWithContext(ctx context.Context, in *dynamodb.ListGlobalTablesInput, _ ...request.Option) (*dynamodb.ListGlobalTablesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListGlobalTables cancelled", ctx.Err())
	default:
		return d.ListGlobalTables(in)
	}
}

func (d *DynamoDBDouble) ListTables(i0 *dynamodb.ListTablesInput) (r0 *dynamodb.ListTablesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTables", i0)
	r0, _ = returns[0].(*dynamodb.ListTablesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) ListTablesPages(i0 *dynamodb.ListTablesInput, i1 func(*dynamodb.ListTablesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTablesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DynamoDBDouble) fakeListTablesPages(in *dynamodb.ListTablesInput, pager func(*dynamodb.ListTablesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTables", paginators, in, pager)
}

func (d *DynamoDBDouble) ListTablesPagesWithContext(i0 context.Context, i1 *dynamodb.ListTablesInput, i2 func(*dynamodb.ListTablesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTablesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DynamoDBDouble) fakeListTablesPagesWithContext(ctx context.Context, in *dynamodb.ListTablesInput, pager func(*dynamodb.ListTablesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTables", paginators, ctx, in, pager, options...)
}

func (d *DynamoDBDouble) ListTablesRequest(i0 *dynamodb.ListTablesInput) (r0 *request.Request, r1 *dynamodb.ListTablesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTablesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.ListTablesOutput)
	return
}

func (d *DynamoDBDouble) ListTablesWithContext(i0 context.Context, i1 *dynamodb.ListTablesInput, i2 ...request.Option) (r0 *dynamodb.ListTablesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTablesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.ListTablesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeListTablesWithContext(ctx context.Context, in *dynamodb.ListTablesInput, _ ...request.Option) (*dynamodb.ListTablesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTables cancelled", ctx.Err())
	default:
		return d.ListTables(in)
	}
}

func (d *DynamoDBDouble) ListTagsOfResource(i0 *dynamodb.ListTagsOfResourceInput) (r0 *dynamodb.ListTagsOfResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsOfResource", i0)
	r0, _ = returns[0].(*dynamodb.ListTagsOfResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) ListTagsOfResourceRequest(i0 *dynamodb.ListTagsOfResourceInput) (r0 *request.Request, r1 *dynamodb.ListTagsOfResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsOfResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.ListTagsOfResourceOutput)
	return
}

func (d *DynamoDBDouble) ListTagsOfResourceWithContext(i0 context.Context, i1 *dynamodb.ListTagsOfResourceInput, i2 ...request.Option) (r0 *dynamodb.ListTagsOfResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsOfResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.ListTagsOfResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeListTagsOfResourceWithContext(ctx context.Context, in *dynamodb.ListTagsOfResourceInput, _ ...request.Option) (*dynamodb.ListTagsOfResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsOfResource cancelled", ctx.Err())
	default:
		return d.ListTagsOfResource(in)
	}
}

func (d *DynamoDBDouble) PutItem(i0 *dynamodb.PutItemInput) (r0 *dynamodb.PutItemOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutItem", i0)
	r0, _ = returns[0].(*dynamodb.PutItemOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) PutItemRequest(i0 *dynamodb.PutItemInput) (r0 *request.Request, r1 *dynamodb.PutItemOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutItemRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.PutItemOutput)
	return
}

func (d *DynamoDBDouble) PutItemWithContext(i0 context.Context, i1 *dynamodb.PutItemInput, i2 ...request.Option) (r0 *dynamodb.PutItemOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutItemWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.PutItemOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakePutItemWithContext(ctx context.Context, in *dynamodb.PutItemInput, _ ...request.Option) (*dynamodb.PutItemOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutItem cancelled", ctx.Err())
	default:
		return d.PutItem(in)
	}
}

func (d *DynamoDBDouble) Query(i0 *dynamodb.QueryInput) (r0 *dynamodb.QueryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("Query", i0)
	r0, _ = returns[0].(*dynamodb.QueryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) QueryPages(i0 *dynamodb.QueryInput, i1 func(*dynamodb.QueryOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("QueryPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DynamoDBDouble) fakeQueryPages(in *dynamodb.QueryInput, pager func(*dynamodb.QueryOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("Query", paginators, in, pager)
}

func (d *DynamoDBDouble) QueryPagesWithContext(i0 context.Context, i1 *dynamodb.QueryInput, i2 func(*dynamodb.QueryOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("QueryPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DynamoDBDouble) fakeQueryPagesWithContext(ctx context.Context, in *dynamodb.QueryInput, pager func(*dynamodb.QueryOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("Query", paginators, ctx, in, pager, options...)
}

func (d *DynamoDBDouble) QueryRequest(i0 *dynamodb.QueryInput) (r0 *request.Request, r1 *dynamodb.QueryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("QueryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.QueryOutput)
	return
}

func (d *DynamoDBDouble) QueryWithContext(i0 context.Context, i1 *dynamodb.QueryInput, i2 ...request.Option) (r0 *dynamodb.QueryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("QueryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.QueryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeQueryWithContext(ctx context.Context, in *dynamodb.QueryInput, _ ...request.Option) (*dynamodb.QueryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "Query cancelled", ctx.Err())
	default:
		return d.Query(in)
	}
}

func (d *DynamoDBDouble) RestoreTableFromBackup(i0 *dynamodb.RestoreTableFromBackupInput) (r0 *dynamodb.RestoreTableFromBackupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreTableFromBackup", i0)
	r0, _ = returns[0].(*dynamodb.RestoreTableFromBackupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) RestoreTableFromBackupRequest(i0 *dynamodb.RestoreTableFromBackupInput) (r0 *request.Request, r1 *dynamodb.RestoreTableFromBackupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreTableFromBackupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.RestoreTableFromBackupOutput)
	return
}

func (d *DynamoDBDouble) RestoreTableFromBackupWithContext(i0 context.Context, i1 *dynamodb.RestoreTableFromBackupInput, i2 ...request.Option) (r0 *dynamodb.RestoreTableFromBackupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreTableFromBackupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.RestoreTableFromBackupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeRestoreTableFromBackupWithContext(ctx context.Context, in *dynamodb.RestoreTableFromBackupInput, _ ...request.Option) (*dynamodb.RestoreTableFromBackupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RestoreTableFromBackup cancelled", ctx.Err())
	default:
		return d.RestoreTableFromBackup(in)
	}
}

func (d *DynamoDBDouble) RestoreTableToPointInTime(i0 *dynamodb.RestoreTableToPointInTimeInput) (r0 *dynamodb.RestoreTableToPointInTimeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreTableToPointInTime", i0)
	r0, _ = returns[0].(*dynamodb.RestoreTableToPointInTimeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) RestoreTableToPointInTimeRequest(i0 *dynamodb.RestoreTableToPointInTimeInput) (r0 *request.Request, r1 *dynamodb.RestoreTableToPointInTimeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreTableToPointInTimeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.RestoreTableToPointInTimeOutput)
	return
}

func (d *DynamoDBDouble) RestoreTableToPointInTimeWithContext(i0 context.Context, i1 *dynamodb.RestoreTableToPointInTimeInput, i2 ...request.Option) (r0 *dynamodb.RestoreTableToPointInTimeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreTableToPointInTimeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.RestoreTableToPointInTimeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeRestoreTableToPointInTimeWithContext(ctx context.Context, in *dynamodb.RestoreTableToPointInTimeInput, _ ...request.Option) (*dynamodb.RestoreTableToPointInTimeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RestoreTableToPointInTime cancelled", ctx.Err())
	default:
		return d.RestoreTableToPointInTime(in)
	}
}

func (d *DynamoDBDouble) Scan(i0 *dynamodb.ScanInput) (r0 *dynamodb.ScanOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("Scan", i0)
	r0, _ = returns[0].(*dynamodb.ScanOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) ScanPages(i0 *dynamodb.ScanInput, i1 func(*dynamodb.ScanOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ScanPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DynamoDBDouble) fakeScanPages(in *dynamodb.ScanInput, pager func(*dynamodb.ScanOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("Scan", paginators, in, pager)
}

func (d *DynamoDBDouble) ScanPagesWithContext(i0 context.Context, i1 *dynamodb.ScanInput, i2 func(*dynamodb.ScanOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ScanPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DynamoDBDouble) fakeScanPagesWithContext(ctx context.Context, in *dynamodb.ScanInput, pager func(*dynamodb.ScanOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("Scan", paginators, ctx, in, pager, options...)
}

func (d *DynamoDBDouble) ScanRequest(i0 *dynamodb.ScanInput) (r0 *request.Request, r1 *dynamodb.ScanOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ScanRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.ScanOutput)
	return
}

func (d *DynamoDBDouble) ScanWithContext(i0 context.Context, i1 *dynamodb.ScanInput, i2 ...request.Option) (r0 *dynamodb.ScanOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ScanWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.ScanOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeScanWithContext(ctx context.Context, in *dynamodb.ScanInput, _ ...request.Option) (*dynamodb.ScanOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "Scan cancelled", ctx.Err())
	default:
		return d.Scan(in)
	}
}

func (d *DynamoDBDouble) TagResource(i0 *dynamodb.TagResourceInput) (r0 *dynamodb.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*dynamodb.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) TagResourceRequest(i0 *dynamodb.TagResourceInput) (r0 *request.Request, r1 *dynamodb.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.TagResourceOutput)
	return
}

func (d *DynamoDBDouble) TagResourceWithContext(i0 context.Context, i1 *dynamodb.TagResourceInput, i2 ...request.Option) (r0 *dynamodb.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeTagResourceWithContext(ctx context.Context, in *dynamodb.TagResourceInput, _ ...request.Option) (*dynamodb.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *DynamoDBDouble) TransactGetItems(i0 *dynamodb.TransactGetItemsInput) (r0 *dynamodb.TransactGetItemsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TransactGetItems", i0)
	r0, _ = returns[0].(*dynamodb.TransactGetItemsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) TransactGetItemsRequest(i0 *dynamodb.TransactGetItemsInput) (r0 *request.Request, r1 *dynamodb.TransactGetItemsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TransactGetItemsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.TransactGetItemsOutput)
	return
}

func (d *DynamoDBDouble) TransactGetItemsWithContext(i0 context.Context, i1 *dynamodb.TransactGetItemsInput, i2 ...request.Option) (r0 *dynamodb.TransactGetItemsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TransactGetItemsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.TransactGetItemsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeTransactGetItemsWithContext(ctx context.Context, in *dynamodb.TransactGetItemsInput, _ ...request.Option) (*dynamodb.TransactGetItemsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TransactGetItems cancelled", ctx.Err())
	default:
		return d.TransactGetItems(in)
	}
}

func (d *DynamoDBDouble) TransactWriteItems(i0 *dynamodb.TransactWriteItemsInput) (r0 *dynamodb.TransactWriteItemsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TransactWriteItems", i0)
	r0, _ = returns[0].(*dynamodb.TransactWriteItemsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) TransactWriteItemsRequest(i0 *dynamodb.TransactWriteItemsInput) (r0 *request.Request, r1 *dynamodb.TransactWriteItemsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TransactWriteItemsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.TransactWriteItemsOutput)
	return
}

func (d *DynamoDBDouble) TransactWriteItemsWithContext(i0 context.Context, i1 *dynamodb.TransactWriteItemsInput, i2 ...request.Option) (r0 *dynamodb.TransactWriteItemsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TransactWriteItemsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.TransactWriteItemsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeTransactWriteItemsWithContext(ctx context.Context, in *dynamodb.TransactWriteItemsInput, _ ...request.Option) (*dynamodb.TransactWriteItemsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TransactWriteItems cancelled", ctx.Err())
	default:
		return d.TransactWriteItems(in)
	}
}

func (d *DynamoDBDouble) UntagResource(i0 *dynamodb.UntagResourceInput) (r0 *dynamodb.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*dynamodb.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) UntagResourceRequest(i0 *dynamodb.UntagResourceInput) (r0 *request.Request, r1 *dynamodb.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.UntagResourceOutput)
	return
}

func (d *DynamoDBDouble) UntagResourceWithContext(i0 context.Context, i1 *dynamodb.UntagResourceInput, i2 ...request.Option) (r0 *dynamodb.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeUntagResourceWithContext(ctx context.Context, in *dynamodb.UntagResourceInput, _ ...request.Option) (*dynamodb.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *DynamoDBDouble) UpdateContinuousBackups(i0 *dynamodb.UpdateContinuousBackupsInput) (r0 *dynamodb.UpdateContinuousBackupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateContinuousBackups", i0)
	r0, _ = returns[0].(*dynamodb.UpdateContinuousBackupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) UpdateContinuousBackupsRequest(i0 *dynamodb.UpdateContinuousBackupsInput) (r0 *request.Request, r1 *dynamodb.UpdateContinuousBackupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateContinuousBackupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.UpdateContinuousBackupsOutput)
	return
}

func (d *DynamoDBDouble) UpdateContinuousBackupsWithContext(i0 context.Context, i1 *dynamodb.UpdateContinuousBackupsInput, i2 ...request.Option) (r0 *dynamodb.UpdateContinuousBackupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateContinuousBackupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.UpdateContinuousBackupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeUpdateContinuousBackupsWithContext(ctx context.Context, in *dynamodb.UpdateContinuousBackupsInput, _ ...request.Option) (*dynamodb.UpdateContinuousBackupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateContinuousBackups cancelled", ctx.Err())
	default:
		return d.UpdateContinuousBackups(in)
	}
}

func (d *DynamoDBDouble) UpdateContributorInsights(i0 *dynamodb.UpdateContributorInsightsInput) (r0 *dynamodb.UpdateContributorInsightsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateContributorInsights", i0)
	r0, _ = returns[0].(*dynamodb.UpdateContributorInsightsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) UpdateContributorInsightsRequest(i0 *dynamodb.UpdateContributorInsightsInput) (r0 *request.Request, r1 *dynamodb.UpdateContributorInsightsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateContributorInsightsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.UpdateContributorInsightsOutput)
	return
}

func (d *DynamoDBDouble) UpdateContributorInsightsWithContext(i0 context.Context, i1 *dynamodb.UpdateContributorInsightsInput, i2 ...request.Option) (r0 *dynamodb.UpdateContributorInsightsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateContributorInsightsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.UpdateContributorInsightsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeUpdateContributorInsightsWithContext(ctx context.Context, in *dynamodb.UpdateContributorInsightsInput, _ ...request.Option) (*dynamodb.UpdateContributorInsightsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateContributorInsights cancelled", ctx.Err())
	default:
		return d.UpdateContributorInsights(in)
	}
}

func (d *DynamoDBDouble) UpdateGlobalTable(i0 *dynamodb.UpdateGlobalTableInput) (r0 *dynamodb.UpdateGlobalTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGlobalTable", i0)
	r0, _ = returns[0].(*dynamodb.UpdateGlobalTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) UpdateGlobalTableRequest(i0 *dynamodb.UpdateGlobalTableInput) (r0 *request.Request, r1 *dynamodb.UpdateGlobalTableOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGlobalTableRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.UpdateGlobalTableOutput)
	return
}

func (d *DynamoDBDouble) UpdateGlobalTableSettings(i0 *dynamodb.UpdateGlobalTableSettingsInput) (r0 *dynamodb.UpdateGlobalTableSettingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGlobalTableSettings", i0)
	r0, _ = returns[0].(*dynamodb.UpdateGlobalTableSettingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) UpdateGlobalTableSettingsRequest(i0 *dynamodb.UpdateGlobalTableSettingsInput) (r0 *request.Request, r1 *dynamodb.UpdateGlobalTableSettingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGlobalTableSettingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.UpdateGlobalTableSettingsOutput)
	return
}

func (d *DynamoDBDouble) UpdateGlobalTableSettingsWithContext(i0 context.Context, i1 *dynamodb.UpdateGlobalTableSettingsInput, i2 ...request.Option) (r0 *dynamodb.UpdateGlobalTableSettingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGlobalTableSettingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.UpdateGlobalTableSettingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeUpdateGlobalTableSettingsWithContext(ctx context.Context, in *dynamodb.UpdateGlobalTableSettingsInput, _ ...request.Option) (*dynamodb.UpdateGlobalTableSettingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateGlobalTableSettings cancelled", ctx.Err())
	default:
		return d.UpdateGlobalTableSettings(in)
	}
}

func (d *DynamoDBDouble) UpdateGlobalTableWithContext(i0 context.Context, i1 *dynamodb.UpdateGlobalTableInput, i2 ...request.Option) (r0 *dynamodb.UpdateGlobalTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGlobalTableWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.UpdateGlobalTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeUpdateGlobalTableWithContext(ctx context.Context, in *dynamodb.UpdateGlobalTableInput, _ ...request.Option) (*dynamodb.UpdateGlobalTableOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateGlobalTable cancelled", ctx.Err())
	default:
		return d.UpdateGlobalTable(in)
	}
}

func (d *DynamoDBDouble) UpdateItem(i0 *dynamodb.UpdateItemInput) (r0 *dynamodb.UpdateItemOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateItem", i0)
	r0, _ = returns[0].(*dynamodb.UpdateItemOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) UpdateItemRequest(i0 *dynamodb.UpdateItemInput) (r0 *request.Request, r1 *dynamodb.UpdateItemOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateItemRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.UpdateItemOutput)
	return
}

func (d *DynamoDBDouble) UpdateItemWithContext(i0 context.Context, i1 *dynamodb.UpdateItemInput, i2 ...request.Option) (r0 *dynamodb.UpdateItemOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateItemWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.UpdateItemOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeUpdateItemWithContext(ctx context.Context, in *dynamodb.UpdateItemInput, _ ...request.Option) (*dynamodb.UpdateItemOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateItem cancelled", ctx.Err())
	default:
		return d.UpdateItem(in)
	}
}

func (d *DynamoDBDouble) UpdateTable(i0 *dynamodb.UpdateTableInput) (r0 *dynamodb.UpdateTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTable", i0)
	r0, _ = returns[0].(*dynamodb.UpdateTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) UpdateTableReplicaAutoScaling(i0 *dynamodb.UpdateTableReplicaAutoScalingInput) (r0 *dynamodb.UpdateTableReplicaAutoScalingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTableReplicaAutoScaling", i0)
	r0, _ = returns[0].(*dynamodb.UpdateTableReplicaAutoScalingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) UpdateTableReplicaAutoScalingRequest(i0 *dynamodb.UpdateTableReplicaAutoScalingInput) (r0 *request.Request, r1 *dynamodb.UpdateTableReplicaAutoScalingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTableReplicaAutoScalingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.UpdateTableReplicaAutoScalingOutput)
	return
}

func (d *DynamoDBDouble) UpdateTableReplicaAutoScalingWithContext(i0 context.Context, i1 *dynamodb.UpdateTableReplicaAutoScalingInput, i2 ...request.Option) (r0 *dynamodb.UpdateTableReplicaAutoScalingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTableReplicaAutoScalingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.UpdateTableReplicaAutoScalingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeUpdateTableReplicaAutoScalingWithContext(ctx context.Context, in *dynamodb.UpdateTableReplicaAutoScalingInput, _ ...request.Option) (*dynamodb.UpdateTableReplicaAutoScalingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateTableReplicaAutoScaling cancelled", ctx.Err())
	default:
		return d.UpdateTableReplicaAutoScaling(in)
	}
}

func (d *DynamoDBDouble) UpdateTableRequest(i0 *dynamodb.UpdateTableInput) (r0 *request.Request, r1 *dynamodb.UpdateTableOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTableRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.UpdateTableOutput)
	return
}

func (d *DynamoDBDouble) UpdateTableWithContext(i0 context.Context, i1 *dynamodb.UpdateTableInput, i2 ...request.Option) (r0 *dynamodb.UpdateTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTableWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.UpdateTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeUpdateTableWithContext(ctx context.Context, in *dynamodb.UpdateTableInput, _ ...request.Option) (*dynamodb.UpdateTableOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateTable cancelled", ctx.Err())
	default:
		return d.UpdateTable(in)
	}
}

func (d *DynamoDBDouble) UpdateTimeToLive(i0 *dynamodb.UpdateTimeToLiveInput) (r0 *dynamodb.UpdateTimeToLiveOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTimeToLive", i0)
	r0, _ = returns[0].(*dynamodb.UpdateTimeToLiveOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) UpdateTimeToLiveRequest(i0 *dynamodb.UpdateTimeToLiveInput) (r0 *request.Request, r1 *dynamodb.UpdateTimeToLiveOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTimeToLiveRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodb.UpdateTimeToLiveOutput)
	return
}

func (d *DynamoDBDouble) UpdateTimeToLiveWithContext(i0 context.Context, i1 *dynamodb.UpdateTimeToLiveInput, i2 ...request.Option) (r0 *dynamodb.UpdateTimeToLiveOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTimeToLiveWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodb.UpdateTimeToLiveOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBDouble) fakeUpdateTimeToLiveWithContext(ctx context.Context, in *dynamodb.UpdateTimeToLiveInput, _ ...request.Option) (*dynamodb.UpdateTimeToLiveOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateTimeToLive cancelled", ctx.Err())
	default:
		return d.UpdateTimeToLive(in)
	}
}

func (d *DynamoDBDouble) WaitUntilTableExists(i0 *dynamodb.DescribeTableInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilTableExists", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *DynamoDBDouble) fakeWaitUntilTableExists(in *dynamodb.DescribeTableInput) error {
	return d.WaitUntil("TableExists", waiters, in)
}

func (d *DynamoDBDouble) WaitUntilTableExistsWithContext(i0 context.Context, i1 *dynamodb.DescribeTableInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilTableExistsWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *DynamoDBDouble) fakeWaitUntilTableExistsWithContext(ctx context.Context, in *dynamodb.DescribeTableInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("TableExists", waiters, ctx, in, waitOption...)
}

func (d *DynamoDBDouble) WaitUntilTableNotExists(i0 *dynamodb.DescribeTableInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilTableNotExists", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *DynamoDBDouble) fakeWaitUntilTableNotExists(in *dynamodb.DescribeTableInput) error {
	return d.WaitUntil("TableNotExists", waiters, in)
}

func (d *DynamoDBDouble) WaitUntilTableNotExistsWithContext(i0 context.Context, i1 *dynamodb.DescribeTableInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilTableNotExistsWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *DynamoDBDouble) fakeWaitUntilTableNotExistsWithContext(ctx context.Context, in *dynamodb.DescribeTableInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("TableNotExists", waiters, ctx, in, waitOption...)
}
