// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:12:56+11:00

// Package gameliftdouble provides a TestDouble implementation of gameliftiface.GameLiftAPI
package gameliftdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/gamelift"
	"github.com/aws/aws-sdk-go/service/gamelift/gameliftiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// GameLiftDouble is TestDouble for gameliftiface.GameLiftAPI
type GameLiftDouble struct {
	gameliftiface.GameLiftAPI
	*awsdouble.AWSTestDouble
}

// Constructor for GameLiftDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *GameLiftDouble {
	result := &GameLiftDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*gameliftiface.GameLiftAPI)(nil), configurators...)
	return result
}

func (d *GameLiftDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *GameLiftDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AcceptMatchWithContext":
		return m.Fake(d.fakeAcceptMatchWithContext)

	case "CreateAliasWithContext":
		return m.Fake(d.fakeCreateAliasWithContext)

	case "CreateBuildWithContext":
		return m.Fake(d.fakeCreateBuildWithContext)

	case "CreateFleetWithContext":
		return m.Fake(d.fakeCreateFleetWithContext)

	case "CreateGameSessionQueueWithContext":
		return m.Fake(d.fakeCreateGameSessionQueueWithContext)

	case "CreateGameSessionWithContext":
		return m.Fake(d.fakeCreateGameSessionWithContext)

	case "CreateMatchmakingConfigurationWithContext":
		return m.Fake(d.fakeCreateMatchmakingConfigurationWithContext)

	case "CreateMatchmakingRuleSetWithContext":
		return m.Fake(d.fakeCreateMatchmakingRuleSetWithContext)

	case "CreatePlayerSessionWithContext":
		return m.Fake(d.fakeCreatePlayerSessionWithContext)

	case "CreatePlayerSessionsWithContext":
		return m.Fake(d.fakeCreatePlayerSessionsWithContext)

	case "CreateScriptWithContext":
		return m.Fake(d.fakeCreateScriptWithContext)

	case "CreateVpcPeeringAuthorizationWithContext":
		return m.Fake(d.fakeCreateVpcPeeringAuthorizationWithContext)

	case "CreateVpcPeeringConnectionWithContext":
		return m.Fake(d.fakeCreateVpcPeeringConnectionWithContext)

	case "DeleteAliasWithContext":
		return m.Fake(d.fakeDeleteAliasWithContext)

	case "DeleteBuildWithContext":
		return m.Fake(d.fakeDeleteBuildWithContext)

	case "DeleteFleetWithContext":
		return m.Fake(d.fakeDeleteFleetWithContext)

	case "DeleteGameSessionQueueWithContext":
		return m.Fake(d.fakeDeleteGameSessionQueueWithContext)

	case "DeleteMatchmakingConfigurationWithContext":
		return m.Fake(d.fakeDeleteMatchmakingConfigurationWithContext)

	case "DeleteMatchmakingRuleSetWithContext":
		return m.Fake(d.fakeDeleteMatchmakingRuleSetWithContext)

	case "DeleteScalingPolicyWithContext":
		return m.Fake(d.fakeDeleteScalingPolicyWithContext)

	case "DeleteScriptWithContext":
		return m.Fake(d.fakeDeleteScriptWithContext)

	case "DeleteVpcPeeringAuthorizationWithContext":
		return m.Fake(d.fakeDeleteVpcPeeringAuthorizationWithContext)

	case "DeleteVpcPeeringConnectionWithContext":
		return m.Fake(d.fakeDeleteVpcPeeringConnectionWithContext)

	case "DescribeAliasWithContext":
		return m.Fake(d.fakeDescribeAliasWithContext)

	case "DescribeBuildWithContext":
		return m.Fake(d.fakeDescribeBuildWithContext)

	case "DescribeEC2InstanceLimitsWithContext":
		return m.Fake(d.fakeDescribeEC2InstanceLimitsWithContext)

	case "DescribeFleetAttributesWithContext":
		return m.Fake(d.fakeDescribeFleetAttributesWithContext)

	case "DescribeFleetCapacityWithContext":
		return m.Fake(d.fakeDescribeFleetCapacityWithContext)

	case "DescribeFleetEventsWithContext":
		return m.Fake(d.fakeDescribeFleetEventsWithContext)

	case "DescribeFleetPortSettingsWithContext":
		return m.Fake(d.fakeDescribeFleetPortSettingsWithContext)

	case "DescribeFleetUtilizationWithContext":
		return m.Fake(d.fakeDescribeFleetUtilizationWithContext)

	case "DescribeGameSessionDetailsWithContext":
		return m.Fake(d.fakeDescribeGameSessionDetailsWithContext)

	case "DescribeGameSessionPlacementWithContext":
		return m.Fake(d.fakeDescribeGameSessionPlacementWithContext)

	case "DescribeGameSessionQueuesWithContext":
		return m.Fake(d.fakeDescribeGameSessionQueuesWithContext)

	case "DescribeGameSessionsWithContext":
		return m.Fake(d.fakeDescribeGameSessionsWithContext)

	case "DescribeInstancesWithContext":
		return m.Fake(d.fakeDescribeInstancesWithContext)

	case "DescribeMatchmakingConfigurationsWithContext":
		return m.Fake(d.fakeDescribeMatchmakingConfigurationsWithContext)

	case "DescribeMatchmakingRuleSetsWithContext":
		return m.Fake(d.fakeDescribeMatchmakingRuleSetsWithContext)

	case "DescribeMatchmakingWithContext":
		return m.Fake(d.fakeDescribeMatchmakingWithContext)

	case "DescribePlayerSessionsWithContext":
		return m.Fake(d.fakeDescribePlayerSessionsWithContext)

	case "DescribeRuntimeConfigurationWithContext":
		return m.Fake(d.fakeDescribeRuntimeConfigurationWithContext)

	case "DescribeScalingPoliciesWithContext":
		return m.Fake(d.fakeDescribeScalingPoliciesWithContext)

	case "DescribeScriptWithContext":
		return m.Fake(d.fakeDescribeScriptWithContext)

	case "DescribeVpcPeeringAuthorizationsWithContext":
		return m.Fake(d.fakeDescribeVpcPeeringAuthorizationsWithContext)

	case "DescribeVpcPeeringConnectionsWithContext":
		return m.Fake(d.fakeDescribeVpcPeeringConnectionsWithContext)

	case "GetGameSessionLogUrlWithContext":
		return m.Fake(d.fakeGetGameSessionLogUrlWithContext)

	case "GetInstanceAccessWithContext":
		return m.Fake(d.fakeGetInstanceAccessWithContext)

	case "ListAliasesWithContext":
		return m.Fake(d.fakeListAliasesWithContext)

	case "ListBuildsWithContext":
		return m.Fake(d.fakeListBuildsWithContext)

	case "ListFleetsWithContext":
		return m.Fake(d.fakeListFleetsWithContext)

	case "ListScriptsWithContext":
		return m.Fake(d.fakeListScriptsWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "PutScalingPolicyWithContext":
		return m.Fake(d.fakePutScalingPolicyWithContext)

	case "RequestUploadCredentialsWithContext":
		return m.Fake(d.fakeRequestUploadCredentialsWithContext)

	case "ResolveAliasWithContext":
		return m.Fake(d.fakeResolveAliasWithContext)

	case "SearchGameSessionsWithContext":
		return m.Fake(d.fakeSearchGameSessionsWithContext)

	case "StartFleetActionsWithContext":
		return m.Fake(d.fakeStartFleetActionsWithContext)

	case "StartGameSessionPlacementWithContext":
		return m.Fake(d.fakeStartGameSessionPlacementWithContext)

	case "StartMatchBackfillWithContext":
		return m.Fake(d.fakeStartMatchBackfillWithContext)

	case "StartMatchmakingWithContext":
		return m.Fake(d.fakeStartMatchmakingWithContext)

	case "StopFleetActionsWithContext":
		return m.Fake(d.fakeStopFleetActionsWithContext)

	case "StopGameSessionPlacementWithContext":
		return m.Fake(d.fakeStopGameSessionPlacementWithContext)

	case "StopMatchmakingWithContext":
		return m.Fake(d.fakeStopMatchmakingWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateAliasWithContext":
		return m.Fake(d.fakeUpdateAliasWithContext)

	case "UpdateBuildWithContext":
		return m.Fake(d.fakeUpdateBuildWithContext)

	case "UpdateFleetAttributesWithContext":
		return m.Fake(d.fakeUpdateFleetAttributesWithContext)

	case "UpdateFleetCapacityWithContext":
		return m.Fake(d.fakeUpdateFleetCapacityWithContext)

	case "UpdateFleetPortSettingsWithContext":
		return m.Fake(d.fakeUpdateFleetPortSettingsWithContext)

	case "UpdateGameSessionQueueWithContext":
		return m.Fake(d.fakeUpdateGameSessionQueueWithContext)

	case "UpdateGameSessionWithContext":
		return m.Fake(d.fakeUpdateGameSessionWithContext)

	case "UpdateMatchmakingConfigurationWithContext":
		return m.Fake(d.fakeUpdateMatchmakingConfigurationWithContext)

	case "UpdateRuntimeConfigurationWithContext":
		return m.Fake(d.fakeUpdateRuntimeConfigurationWithContext)

	case "UpdateScriptWithContext":
		return m.Fake(d.fakeUpdateScriptWithContext)

	case "ValidateMatchmakingRuleSetWithContext":
		return m.Fake(d.fakeValidateMatchmakingRuleSetWithContext)

	default:
		return nil
	}
}

func (d *GameLiftDouble) AcceptMatch(i0 *gamelift.AcceptMatchInput) (r0 *gamelift.AcceptMatchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptMatch", i0)
	r0, _ = returns[0].(*gamelift.AcceptMatchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) AcceptMatchRequest(i0 *gamelift.AcceptMatchInput) (r0 *request.Request, r1 *gamelift.AcceptMatchOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptMatchRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.AcceptMatchOutput)
	return
}

func (d *GameLiftDouble) AcceptMatchWithContext(i0 context.Context, i1 *gamelift.AcceptMatchInput, i2 ...request.Option) (r0 *gamelift.AcceptMatchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptMatchWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.AcceptMatchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeAcceptMatchWithContext(ctx context.Context, in *gamelift.AcceptMatchInput, _ ...request.Option) (*gamelift.AcceptMatchOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AcceptMatch cancelled", ctx.Err())
	default:
		return d.AcceptMatch(in)
	}
}

func (d *GameLiftDouble) CreateAlias(i0 *gamelift.CreateAliasInput) (r0 *gamelift.CreateAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAlias", i0)
	r0, _ = returns[0].(*gamelift.CreateAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) CreateAliasRequest(i0 *gamelift.CreateAliasInput) (r0 *request.Request, r1 *gamelift.CreateAliasOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAliasRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.CreateAliasOutput)
	return
}

func (d *GameLiftDouble) CreateAliasWithContext(i0 context.Context, i1 *gamelift.CreateAliasInput, i2 ...request.Option) (r0 *gamelift.CreateAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAliasWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.CreateAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeCreateAliasWithContext(ctx context.Context, in *gamelift.CreateAliasInput, _ ...request.Option) (*gamelift.CreateAliasOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateAlias cancelled", ctx.Err())
	default:
		return d.CreateAlias(in)
	}
}

func (d *GameLiftDouble) CreateBuild(i0 *gamelift.CreateBuildInput) (r0 *gamelift.CreateBuildOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBuild", i0)
	r0, _ = returns[0].(*gamelift.CreateBuildOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) CreateBuildRequest(i0 *gamelift.CreateBuildInput) (r0 *request.Request, r1 *gamelift.CreateBuildOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBuildRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.CreateBuildOutput)
	return
}

func (d *GameLiftDouble) CreateBuildWithContext(i0 context.Context, i1 *gamelift.CreateBuildInput, i2 ...request.Option) (r0 *gamelift.CreateBuildOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBuildWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.CreateBuildOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeCreateBuildWithContext(ctx context.Context, in *gamelift.CreateBuildInput, _ ...request.Option) (*gamelift.CreateBuildOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateBuild cancelled", ctx.Err())
	default:
		return d.CreateBuild(in)
	}
}

func (d *GameLiftDouble) CreateFleet(i0 *gamelift.CreateFleetInput) (r0 *gamelift.CreateFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFleet", i0)
	r0, _ = returns[0].(*gamelift.CreateFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) CreateFleetRequest(i0 *gamelift.CreateFleetInput) (r0 *request.Request, r1 *gamelift.CreateFleetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFleetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.CreateFleetOutput)
	return
}

func (d *GameLiftDouble) CreateFleetWithContext(i0 context.Context, i1 *gamelift.CreateFleetInput, i2 ...request.Option) (r0 *gamelift.CreateFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFleetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.CreateFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeCreateFleetWithContext(ctx context.Context, in *gamelift.CreateFleetInput, _ ...request.Option) (*gamelift.CreateFleetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateFleet cancelled", ctx.Err())
	default:
		return d.CreateFleet(in)
	}
}

func (d *GameLiftDouble) CreateGameSession(i0 *gamelift.CreateGameSessionInput) (r0 *gamelift.CreateGameSessionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGameSession", i0)
	r0, _ = returns[0].(*gamelift.CreateGameSessionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) CreateGameSessionQueue(i0 *gamelift.CreateGameSessionQueueInput) (r0 *gamelift.CreateGameSessionQueueOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGameSessionQueue", i0)
	r0, _ = returns[0].(*gamelift.CreateGameSessionQueueOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) CreateGameSessionQueueRequest(i0 *gamelift.CreateGameSessionQueueInput) (r0 *request.Request, r1 *gamelift.CreateGameSessionQueueOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGameSessionQueueRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.CreateGameSessionQueueOutput)
	return
}

func (d *GameLiftDouble) CreateGameSessionQueueWithContext(i0 context.Context, i1 *gamelift.CreateGameSessionQueueInput, i2 ...request.Option) (r0 *gamelift.CreateGameSessionQueueOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGameSessionQueueWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.CreateGameSessionQueueOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeCreateGameSessionQueueWithContext(ctx context.Context, in *gamelift.CreateGameSessionQueueInput, _ ...request.Option) (*gamelift.CreateGameSessionQueueOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateGameSessionQueue cancelled", ctx.Err())
	default:
		return d.CreateGameSessionQueue(in)
	}
}

func (d *GameLiftDouble) CreateGameSessionRequest(i0 *gamelift.CreateGameSessionInput) (r0 *request.Request, r1 *gamelift.CreateGameSessionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGameSessionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.CreateGameSessionOutput)
	return
}

func (d *GameLiftDouble) CreateGameSessionWithContext(i0 context.Context, i1 *gamelift.CreateGameSessionInput, i2 ...request.Option) (r0 *gamelift.CreateGameSessionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGameSessionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.CreateGameSessionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeCreateGameSessionWithContext(ctx context.Context, in *gamelift.CreateGameSessionInput, _ ...request.Option) (*gamelift.CreateGameSessionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateGameSession cancelled", ctx.Err())
	default:
		return d.CreateGameSession(in)
	}
}

func (d *GameLiftDouble) CreateMatchmakingConfiguration(i0 *gamelift.CreateMatchmakingConfigurationInput) (r0 *gamelift.CreateMatchmakingConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMatchmakingConfiguration", i0)
	r0, _ = returns[0].(*gamelift.CreateMatchmakingConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) CreateMatchmakingConfigurationRequest(i0 *gamelift.CreateMatchmakingConfigurationInput) (r0 *request.Request, r1 *gamelift.CreateMatchmakingConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMatchmakingConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.CreateMatchmakingConfigurationOutput)
	return
}

func (d *GameLiftDouble) CreateMatchmakingConfigurationWithContext(i0 context.Context, i1 *gamelift.CreateMatchmakingConfigurationInput, i2 ...request.Option) (r0 *gamelift.CreateMatchmakingConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMatchmakingConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.CreateMatchmakingConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeCreateMatchmakingConfigurationWithContext(ctx context.Context, in *gamelift.CreateMatchmakingConfigurationInput, _ ...request.Option) (*gamelift.CreateMatchmakingConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateMatchmakingConfiguration cancelled", ctx.Err())
	default:
		return d.CreateMatchmakingConfiguration(in)
	}
}

func (d *GameLiftDouble) CreateMatchmakingRuleSet(i0 *gamelift.CreateMatchmakingRuleSetInput) (r0 *gamelift.CreateMatchmakingRuleSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMatchmakingRuleSet", i0)
	r0, _ = returns[0].(*gamelift.CreateMatchmakingRuleSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) CreateMatchmakingRuleSetRequest(i0 *gamelift.CreateMatchmakingRuleSetInput) (r0 *request.Request, r1 *gamelift.CreateMatchmakingRuleSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMatchmakingRuleSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.CreateMatchmakingRuleSetOutput)
	return
}

func (d *GameLiftDouble) CreateMatchmakingRuleSetWithContext(i0 context.Context, i1 *gamelift.CreateMatchmakingRuleSetInput, i2 ...request.Option) (r0 *gamelift.CreateMatchmakingRuleSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMatchmakingRuleSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.CreateMatchmakingRuleSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeCreateMatchmakingRuleSetWithContext(ctx context.Context, in *gamelift.CreateMatchmakingRuleSetInput, _ ...request.Option) (*gamelift.CreateMatchmakingRuleSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateMatchmakingRuleSet cancelled", ctx.Err())
	default:
		return d.CreateMatchmakingRuleSet(in)
	}
}

func (d *GameLiftDouble) CreatePlayerSession(i0 *gamelift.CreatePlayerSessionInput) (r0 *gamelift.CreatePlayerSessionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePlayerSession", i0)
	r0, _ = returns[0].(*gamelift.CreatePlayerSessionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) CreatePlayerSessionRequest(i0 *gamelift.CreatePlayerSessionInput) (r0 *request.Request, r1 *gamelift.CreatePlayerSessionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePlayerSessionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.CreatePlayerSessionOutput)
	return
}

func (d *GameLiftDouble) CreatePlayerSessionWithContext(i0 context.Context, i1 *gamelift.CreatePlayerSessionInput, i2 ...request.Option) (r0 *gamelift.CreatePlayerSessionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePlayerSessionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.CreatePlayerSessionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeCreatePlayerSessionWithContext(ctx context.Context, in *gamelift.CreatePlayerSessionInput, _ ...request.Option) (*gamelift.CreatePlayerSessionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreatePlayerSession cancelled", ctx.Err())
	default:
		return d.CreatePlayerSession(in)
	}
}

func (d *GameLiftDouble) CreatePlayerSessions(i0 *gamelift.CreatePlayerSessionsInput) (r0 *gamelift.CreatePlayerSessionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePlayerSessions", i0)
	r0, _ = returns[0].(*gamelift.CreatePlayerSessionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) CreatePlayerSessionsRequest(i0 *gamelift.CreatePlayerSessionsInput) (r0 *request.Request, r1 *gamelift.CreatePlayerSessionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePlayerSessionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.CreatePlayerSessionsOutput)
	return
}

func (d *GameLiftDouble) CreatePlayerSessionsWithContext(i0 context.Context, i1 *gamelift.CreatePlayerSessionsInput, i2 ...request.Option) (r0 *gamelift.CreatePlayerSessionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePlayerSessionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.CreatePlayerSessionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeCreatePlayerSessionsWithContext(ctx context.Context, in *gamelift.CreatePlayerSessionsInput, _ ...request.Option) (*gamelift.CreatePlayerSessionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreatePlayerSessions cancelled", ctx.Err())
	default:
		return d.CreatePlayerSessions(in)
	}
}

func (d *GameLiftDouble) CreateScript(i0 *gamelift.CreateScriptInput) (r0 *gamelift.CreateScriptOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateScript", i0)
	r0, _ = returns[0].(*gamelift.CreateScriptOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) CreateScriptRequest(i0 *gamelift.CreateScriptInput) (r0 *request.Request, r1 *gamelift.CreateScriptOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateScriptRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.CreateScriptOutput)
	return
}

func (d *GameLiftDouble) CreateScriptWithContext(i0 context.Context, i1 *gamelift.CreateScriptInput, i2 ...request.Option) (r0 *gamelift.CreateScriptOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateScriptWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.CreateScriptOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeCreateScriptWithContext(ctx context.Context, in *gamelift.CreateScriptInput, _ ...request.Option) (*gamelift.CreateScriptOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateScript cancelled", ctx.Err())
	default:
		return d.CreateScript(in)
	}
}

func (d *GameLiftDouble) CreateVpcPeeringAuthorization(i0 *gamelift.CreateVpcPeeringAuthorizationInput) (r0 *gamelift.CreateVpcPeeringAuthorizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVpcPeeringAuthorization", i0)
	r0, _ = returns[0].(*gamelift.CreateVpcPeeringAuthorizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) CreateVpcPeeringAuthorizationRequest(i0 *gamelift.CreateVpcPeeringAuthorizationInput) (r0 *request.Request, r1 *gamelift.CreateVpcPeeringAuthorizationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVpcPeeringAuthorizationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.CreateVpcPeeringAuthorizationOutput)
	return
}

func (d *GameLiftDouble) CreateVpcPeeringAuthorizationWithContext(i0 context.Context, i1 *gamelift.CreateVpcPeeringAuthorizationInput, i2 ...request.Option) (r0 *gamelift.CreateVpcPeeringAuthorizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVpcPeeringAuthorizationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.CreateVpcPeeringAuthorizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeCreateVpcPeeringAuthorizationWithContext(ctx context.Context, in *gamelift.CreateVpcPeeringAuthorizationInput, _ ...request.Option) (*gamelift.CreateVpcPeeringAuthorizationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateVpcPeeringAuthorization cancelled", ctx.Err())
	default:
		return d.CreateVpcPeeringAuthorization(in)
	}
}

func (d *GameLiftDouble) CreateVpcPeeringConnection(i0 *gamelift.CreateVpcPeeringConnectionInput) (r0 *gamelift.CreateVpcPeeringConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVpcPeeringConnection", i0)
	r0, _ = returns[0].(*gamelift.CreateVpcPeeringConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) CreateVpcPeeringConnectionRequest(i0 *gamelift.CreateVpcPeeringConnectionInput) (r0 *request.Request, r1 *gamelift.CreateVpcPeeringConnectionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVpcPeeringConnectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.CreateVpcPeeringConnectionOutput)
	return
}

func (d *GameLiftDouble) CreateVpcPeeringConnectionWithContext(i0 context.Context, i1 *gamelift.CreateVpcPeeringConnectionInput, i2 ...request.Option) (r0 *gamelift.CreateVpcPeeringConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVpcPeeringConnectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.CreateVpcPeeringConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeCreateVpcPeeringConnectionWithContext(ctx context.Context, in *gamelift.CreateVpcPeeringConnectionInput, _ ...request.Option) (*gamelift.CreateVpcPeeringConnectionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateVpcPeeringConnection cancelled", ctx.Err())
	default:
		return d.CreateVpcPeeringConnection(in)
	}
}

func (d *GameLiftDouble) DeleteAlias(i0 *gamelift.DeleteAliasInput) (r0 *gamelift.DeleteAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAlias", i0)
	r0, _ = returns[0].(*gamelift.DeleteAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) DeleteAliasRequest(i0 *gamelift.DeleteAliasInput) (r0 *request.Request, r1 *gamelift.DeleteAliasOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAliasRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.DeleteAliasOutput)
	return
}

func (d *GameLiftDouble) DeleteAliasWithContext(i0 context.Context, i1 *gamelift.DeleteAliasInput, i2 ...request.Option) (r0 *gamelift.DeleteAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAliasWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.DeleteAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeDeleteAliasWithContext(ctx context.Context, in *gamelift.DeleteAliasInput, _ ...request.Option) (*gamelift.DeleteAliasOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteAlias cancelled", ctx.Err())
	default:
		return d.DeleteAlias(in)
	}
}

func (d *GameLiftDouble) DeleteBuild(i0 *gamelift.DeleteBuildInput) (r0 *gamelift.DeleteBuildOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBuild", i0)
	r0, _ = returns[0].(*gamelift.DeleteBuildOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) DeleteBuildRequest(i0 *gamelift.DeleteBuildInput) (r0 *request.Request, r1 *gamelift.DeleteBuildOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBuildRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.DeleteBuildOutput)
	return
}

func (d *GameLiftDouble) DeleteBuildWithContext(i0 context.Context, i1 *gamelift.DeleteBuildInput, i2 ...request.Option) (r0 *gamelift.DeleteBuildOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBuildWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.DeleteBuildOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeDeleteBuildWithContext(ctx context.Context, in *gamelift.DeleteBuildInput, _ ...request.Option) (*gamelift.DeleteBuildOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteBuild cancelled", ctx.Err())
	default:
		return d.DeleteBuild(in)
	}
}

func (d *GameLiftDouble) DeleteFleet(i0 *gamelift.DeleteFleetInput) (r0 *gamelift.DeleteFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFleet", i0)
	r0, _ = returns[0].(*gamelift.DeleteFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) DeleteFleetRequest(i0 *gamelift.DeleteFleetInput) (r0 *request.Request, r1 *gamelift.DeleteFleetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFleetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.DeleteFleetOutput)
	return
}

func (d *GameLiftDouble) DeleteFleetWithContext(i0 context.Context, i1 *gamelift.DeleteFleetInput, i2 ...request.Option) (r0 *gamelift.DeleteFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFleetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.DeleteFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeDeleteFleetWithContext(ctx context.Context, in *gamelift.DeleteFleetInput, _ ...request.Option) (*gamelift.DeleteFleetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteFleet cancelled", ctx.Err())
	default:
		return d.DeleteFleet(in)
	}
}

func (d *GameLiftDouble) DeleteGameSessionQueue(i0 *gamelift.DeleteGameSessionQueueInput) (r0 *gamelift.DeleteGameSessionQueueOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGameSessionQueue", i0)
	r0, _ = returns[0].(*gamelift.DeleteGameSessionQueueOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) DeleteGameSessionQueueRequest(i0 *gamelift.DeleteGameSessionQueueInput) (r0 *request.Request, r1 *gamelift.DeleteGameSessionQueueOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGameSessionQueueRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.DeleteGameSessionQueueOutput)
	return
}

func (d *GameLiftDouble) DeleteGameSessionQueueWithContext(i0 context.Context, i1 *gamelift.DeleteGameSessionQueueInput, i2 ...request.Option) (r0 *gamelift.DeleteGameSessionQueueOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGameSessionQueueWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.DeleteGameSessionQueueOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeDeleteGameSessionQueueWithContext(ctx context.Context, in *gamelift.DeleteGameSessionQueueInput, _ ...request.Option) (*gamelift.DeleteGameSessionQueueOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteGameSessionQueue cancelled", ctx.Err())
	default:
		return d.DeleteGameSessionQueue(in)
	}
}

func (d *GameLiftDouble) DeleteMatchmakingConfiguration(i0 *gamelift.DeleteMatchmakingConfigurationInput) (r0 *gamelift.DeleteMatchmakingConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMatchmakingConfiguration", i0)
	r0, _ = returns[0].(*gamelift.DeleteMatchmakingConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) DeleteMatchmakingConfigurationRequest(i0 *gamelift.DeleteMatchmakingConfigurationInput) (r0 *request.Request, r1 *gamelift.DeleteMatchmakingConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMatchmakingConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.DeleteMatchmakingConfigurationOutput)
	return
}

func (d *GameLiftDouble) DeleteMatchmakingConfigurationWithContext(i0 context.Context, i1 *gamelift.DeleteMatchmakingConfigurationInput, i2 ...request.Option) (r0 *gamelift.DeleteMatchmakingConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMatchmakingConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.DeleteMatchmakingConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeDeleteMatchmakingConfigurationWithContext(ctx context.Context, in *gamelift.DeleteMatchmakingConfigurationInput, _ ...request.Option) (*gamelift.DeleteMatchmakingConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteMatchmakingConfiguration cancelled", ctx.Err())
	default:
		return d.DeleteMatchmakingConfiguration(in)
	}
}

func (d *GameLiftDouble) DeleteMatchmakingRuleSet(i0 *gamelift.DeleteMatchmakingRuleSetInput) (r0 *gamelift.DeleteMatchmakingRuleSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMatchmakingRuleSet", i0)
	r0, _ = returns[0].(*gamelift.DeleteMatchmakingRuleSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) DeleteMatchmakingRuleSetRequest(i0 *gamelift.DeleteMatchmakingRuleSetInput) (r0 *request.Request, r1 *gamelift.DeleteMatchmakingRuleSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMatchmakingRuleSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.DeleteMatchmakingRuleSetOutput)
	return
}

func (d *GameLiftDouble) DeleteMatchmakingRuleSetWithContext(i0 context.Context, i1 *gamelift.DeleteMatchmakingRuleSetInput, i2 ...request.Option) (r0 *gamelift.DeleteMatchmakingRuleSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMatchmakingRuleSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.DeleteMatchmakingRuleSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeDeleteMatchmakingRuleSetWithContext(ctx context.Context, in *gamelift.DeleteMatchmakingRuleSetInput, _ ...request.Option) (*gamelift.DeleteMatchmakingRuleSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteMatchmakingRuleSet cancelled", ctx.Err())
	default:
		return d.DeleteMatchmakingRuleSet(in)
	}
}

func (d *GameLiftDouble) DeleteScalingPolicy(i0 *gamelift.DeleteScalingPolicyInput) (r0 *gamelift.DeleteScalingPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteScalingPolicy", i0)
	r0, _ = returns[0].(*gamelift.DeleteScalingPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) DeleteScalingPolicyRequest(i0 *gamelift.DeleteScalingPolicyInput) (r0 *request.Request, r1 *gamelift.DeleteScalingPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteScalingPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.DeleteScalingPolicyOutput)
	return
}

func (d *GameLiftDouble) DeleteScalingPolicyWithContext(i0 context.Context, i1 *gamelift.DeleteScalingPolicyInput, i2 ...request.Option) (r0 *gamelift.DeleteScalingPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteScalingPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.DeleteScalingPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeDeleteScalingPolicyWithContext(ctx context.Context, in *gamelift.DeleteScalingPolicyInput, _ ...request.Option) (*gamelift.DeleteScalingPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteScalingPolicy cancelled", ctx.Err())
	default:
		return d.DeleteScalingPolicy(in)
	}
}

func (d *GameLiftDouble) DeleteScript(i0 *gamelift.DeleteScriptInput) (r0 *gamelift.DeleteScriptOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteScript", i0)
	r0, _ = returns[0].(*gamelift.DeleteScriptOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) DeleteScriptRequest(i0 *gamelift.DeleteScriptInput) (r0 *request.Request, r1 *gamelift.DeleteScriptOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteScriptRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.DeleteScriptOutput)
	return
}

func (d *GameLiftDouble) DeleteScriptWithContext(i0 context.Context, i1 *gamelift.DeleteScriptInput, i2 ...request.Option) (r0 *gamelift.DeleteScriptOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteScriptWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.DeleteScriptOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeDeleteScriptWithContext(ctx context.Context, in *gamelift.DeleteScriptInput, _ ...request.Option) (*gamelift.DeleteScriptOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteScript cancelled", ctx.Err())
	default:
		return d.DeleteScript(in)
	}
}

func (d *GameLiftDouble) DeleteVpcPeeringAuthorization(i0 *gamelift.DeleteVpcPeeringAuthorizationInput) (r0 *gamelift.DeleteVpcPeeringAuthorizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVpcPeeringAuthorization", i0)
	r0, _ = returns[0].(*gamelift.DeleteVpcPeeringAuthorizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) DeleteVpcPeeringAuthorizationRequest(i0 *gamelift.DeleteVpcPeeringAuthorizationInput) (r0 *request.Request, r1 *gamelift.DeleteVpcPeeringAuthorizationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVpcPeeringAuthorizationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.DeleteVpcPeeringAuthorizationOutput)
	return
}

func (d *GameLiftDouble) DeleteVpcPeeringAuthorizationWithContext(i0 context.Context, i1 *gamelift.DeleteVpcPeeringAuthorizationInput, i2 ...request.Option) (r0 *gamelift.DeleteVpcPeeringAuthorizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVpcPeeringAuthorizationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.DeleteVpcPeeringAuthorizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeDeleteVpcPeeringAuthorizationWithContext(ctx context.Context, in *gamelift.DeleteVpcPeeringAuthorizationInput, _ ...request.Option) (*gamelift.DeleteVpcPeeringAuthorizationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteVpcPeeringAuthorization cancelled", ctx.Err())
	default:
		return d.DeleteVpcPeeringAuthorization(in)
	}
}

func (d *GameLiftDouble) DeleteVpcPeeringConnection(i0 *gamelift.DeleteVpcPeeringConnectionInput) (r0 *gamelift.DeleteVpcPeeringConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVpcPeeringConnection", i0)
	r0, _ = returns[0].(*gamelift.DeleteVpcPeeringConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) DeleteVpcPeeringConnectionRequest(i0 *gamelift.DeleteVpcPeeringConnectionInput) (r0 *request.Request, r1 *gamelift.DeleteVpcPeeringConnectionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVpcPeeringConnectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.DeleteVpcPeeringConnectionOutput)
	return
}

func (d *GameLiftDouble) DeleteVpcPeeringConnectionWithContext(i0 context.Context, i1 *gamelift.DeleteVpcPeeringConnectionInput, i2 ...request.Option) (r0 *gamelift.DeleteVpcPeeringConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVpcPeeringConnectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.DeleteVpcPeeringConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeDeleteVpcPeeringConnectionWithContext(ctx context.Context, in *gamelift.DeleteVpcPeeringConnectionInput, _ ...request.Option) (*gamelift.DeleteVpcPeeringConnectionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteVpcPeeringConnection cancelled", ctx.Err())
	default:
		return d.DeleteVpcPeeringConnection(in)
	}
}

func (d *GameLiftDouble) DescribeAlias(i0 *gamelift.DescribeAliasInput) (r0 *gamelift.DescribeAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAlias", i0)
	r0, _ = returns[0].(*gamelift.DescribeAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) DescribeAliasRequest(i0 *gamelift.DescribeAliasInput) (r0 *request.Request, r1 *gamelift.DescribeAliasOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAliasRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.DescribeAliasOutput)
	return
}

func (d *GameLiftDouble) DescribeAliasWithContext(i0 context.Context, i1 *gamelift.DescribeAliasInput, i2 ...request.Option) (r0 *gamelift.DescribeAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAliasWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.DescribeAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeDescribeAliasWithContext(ctx context.Context, in *gamelift.DescribeAliasInput, _ ...request.Option) (*gamelift.DescribeAliasOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAlias cancelled", ctx.Err())
	default:
		return d.DescribeAlias(in)
	}
}

func (d *GameLiftDouble) DescribeBuild(i0 *gamelift.DescribeBuildInput) (r0 *gamelift.DescribeBuildOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBuild", i0)
	r0, _ = returns[0].(*gamelift.DescribeBuildOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) DescribeBuildRequest(i0 *gamelift.DescribeBuildInput) (r0 *request.Request, r1 *gamelift.DescribeBuildOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBuildRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.DescribeBuildOutput)
	return
}

func (d *GameLiftDouble) DescribeBuildWithContext(i0 context.Context, i1 *gamelift.DescribeBuildInput, i2 ...request.Option) (r0 *gamelift.DescribeBuildOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBuildWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.DescribeBuildOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeDescribeBuildWithContext(ctx context.Context, in *gamelift.DescribeBuildInput, _ ...request.Option) (*gamelift.DescribeBuildOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeBuild cancelled", ctx.Err())
	default:
		return d.DescribeBuild(in)
	}
}

func (d *GameLiftDouble) DescribeEC2InstanceLimits(i0 *gamelift.DescribeEC2InstanceLimitsInput) (r0 *gamelift.DescribeEC2InstanceLimitsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEC2InstanceLimits", i0)
	r0, _ = returns[0].(*gamelift.DescribeEC2InstanceLimitsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) DescribeEC2InstanceLimitsRequest(i0 *gamelift.DescribeEC2InstanceLimitsInput) (r0 *request.Request, r1 *gamelift.DescribeEC2InstanceLimitsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEC2InstanceLimitsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.DescribeEC2InstanceLimitsOutput)
	return
}

func (d *GameLiftDouble) DescribeEC2InstanceLimitsWithContext(i0 context.Context, i1 *gamelift.DescribeEC2InstanceLimitsInput, i2 ...request.Option) (r0 *gamelift.DescribeEC2InstanceLimitsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEC2InstanceLimitsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.DescribeEC2InstanceLimitsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeDescribeEC2InstanceLimitsWithContext(ctx context.Context, in *gamelift.DescribeEC2InstanceLimitsInput, _ ...request.Option) (*gamelift.DescribeEC2InstanceLimitsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEC2InstanceLimits cancelled", ctx.Err())
	default:
		return d.DescribeEC2InstanceLimits(in)
	}
}

func (d *GameLiftDouble) DescribeFleetAttributes(i0 *gamelift.DescribeFleetAttributesInput) (r0 *gamelift.DescribeFleetAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFleetAttributes", i0)
	r0, _ = returns[0].(*gamelift.DescribeFleetAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) DescribeFleetAttributesRequest(i0 *gamelift.DescribeFleetAttributesInput) (r0 *request.Request, r1 *gamelift.DescribeFleetAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFleetAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.DescribeFleetAttributesOutput)
	return
}

func (d *GameLiftDouble) DescribeFleetAttributesWithContext(i0 context.Context, i1 *gamelift.DescribeFleetAttributesInput, i2 ...request.Option) (r0 *gamelift.DescribeFleetAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFleetAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.DescribeFleetAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeDescribeFleetAttributesWithContext(ctx context.Context, in *gamelift.DescribeFleetAttributesInput, _ ...request.Option) (*gamelift.DescribeFleetAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeFleetAttributes cancelled", ctx.Err())
	default:
		return d.DescribeFleetAttributes(in)
	}
}

func (d *GameLiftDouble) DescribeFleetCapacity(i0 *gamelift.DescribeFleetCapacityInput) (r0 *gamelift.DescribeFleetCapacityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFleetCapacity", i0)
	r0, _ = returns[0].(*gamelift.DescribeFleetCapacityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) DescribeFleetCapacityRequest(i0 *gamelift.DescribeFleetCapacityInput) (r0 *request.Request, r1 *gamelift.DescribeFleetCapacityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFleetCapacityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.DescribeFleetCapacityOutput)
	return
}

func (d *GameLiftDouble) DescribeFleetCapacityWithContext(i0 context.Context, i1 *gamelift.DescribeFleetCapacityInput, i2 ...request.Option) (r0 *gamelift.DescribeFleetCapacityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFleetCapacityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.DescribeFleetCapacityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeDescribeFleetCapacityWithContext(ctx context.Context, in *gamelift.DescribeFleetCapacityInput, _ ...request.Option) (*gamelift.DescribeFleetCapacityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeFleetCapacity cancelled", ctx.Err())
	default:
		return d.DescribeFleetCapacity(in)
	}
}

func (d *GameLiftDouble) DescribeFleetEvents(i0 *gamelift.DescribeFleetEventsInput) (r0 *gamelift.DescribeFleetEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFleetEvents", i0)
	r0, _ = returns[0].(*gamelift.DescribeFleetEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) DescribeFleetEventsRequest(i0 *gamelift.DescribeFleetEventsInput) (r0 *request.Request, r1 *gamelift.DescribeFleetEventsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFleetEventsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.DescribeFleetEventsOutput)
	return
}

func (d *GameLiftDouble) DescribeFleetEventsWithContext(i0 context.Context, i1 *gamelift.DescribeFleetEventsInput, i2 ...request.Option) (r0 *gamelift.DescribeFleetEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFleetEventsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.DescribeFleetEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeDescribeFleetEventsWithContext(ctx context.Context, in *gamelift.DescribeFleetEventsInput, _ ...request.Option) (*gamelift.DescribeFleetEventsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeFleetEvents cancelled", ctx.Err())
	default:
		return d.DescribeFleetEvents(in)
	}
}

func (d *GameLiftDouble) DescribeFleetPortSettings(i0 *gamelift.DescribeFleetPortSettingsInput) (r0 *gamelift.DescribeFleetPortSettingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFleetPortSettings", i0)
	r0, _ = returns[0].(*gamelift.DescribeFleetPortSettingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) DescribeFleetPortSettingsRequest(i0 *gamelift.DescribeFleetPortSettingsInput) (r0 *request.Request, r1 *gamelift.DescribeFleetPortSettingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFleetPortSettingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.DescribeFleetPortSettingsOutput)
	return
}

func (d *GameLiftDouble) DescribeFleetPortSettingsWithContext(i0 context.Context, i1 *gamelift.DescribeFleetPortSettingsInput, i2 ...request.Option) (r0 *gamelift.DescribeFleetPortSettingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFleetPortSettingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.DescribeFleetPortSettingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeDescribeFleetPortSettingsWithContext(ctx context.Context, in *gamelift.DescribeFleetPortSettingsInput, _ ...request.Option) (*gamelift.DescribeFleetPortSettingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeFleetPortSettings cancelled", ctx.Err())
	default:
		return d.DescribeFleetPortSettings(in)
	}
}

func (d *GameLiftDouble) DescribeFleetUtilization(i0 *gamelift.DescribeFleetUtilizationInput) (r0 *gamelift.DescribeFleetUtilizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFleetUtilization", i0)
	r0, _ = returns[0].(*gamelift.DescribeFleetUtilizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) DescribeFleetUtilizationRequest(i0 *gamelift.DescribeFleetUtilizationInput) (r0 *request.Request, r1 *gamelift.DescribeFleetUtilizationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFleetUtilizationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.DescribeFleetUtilizationOutput)
	return
}

func (d *GameLiftDouble) DescribeFleetUtilizationWithContext(i0 context.Context, i1 *gamelift.DescribeFleetUtilizationInput, i2 ...request.Option) (r0 *gamelift.DescribeFleetUtilizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFleetUtilizationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.DescribeFleetUtilizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeDescribeFleetUtilizationWithContext(ctx context.Context, in *gamelift.DescribeFleetUtilizationInput, _ ...request.Option) (*gamelift.DescribeFleetUtilizationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeFleetUtilization cancelled", ctx.Err())
	default:
		return d.DescribeFleetUtilization(in)
	}
}

func (d *GameLiftDouble) DescribeGameSessionDetails(i0 *gamelift.DescribeGameSessionDetailsInput) (r0 *gamelift.DescribeGameSessionDetailsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGameSessionDetails", i0)
	r0, _ = returns[0].(*gamelift.DescribeGameSessionDetailsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) DescribeGameSessionDetailsRequest(i0 *gamelift.DescribeGameSessionDetailsInput) (r0 *request.Request, r1 *gamelift.DescribeGameSessionDetailsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGameSessionDetailsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.DescribeGameSessionDetailsOutput)
	return
}

func (d *GameLiftDouble) DescribeGameSessionDetailsWithContext(i0 context.Context, i1 *gamelift.DescribeGameSessionDetailsInput, i2 ...request.Option) (r0 *gamelift.DescribeGameSessionDetailsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGameSessionDetailsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.DescribeGameSessionDetailsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeDescribeGameSessionDetailsWithContext(ctx context.Context, in *gamelift.DescribeGameSessionDetailsInput, _ ...request.Option) (*gamelift.DescribeGameSessionDetailsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeGameSessionDetails cancelled", ctx.Err())
	default:
		return d.DescribeGameSessionDetails(in)
	}
}

func (d *GameLiftDouble) DescribeGameSessionPlacement(i0 *gamelift.DescribeGameSessionPlacementInput) (r0 *gamelift.DescribeGameSessionPlacementOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGameSessionPlacement", i0)
	r0, _ = returns[0].(*gamelift.DescribeGameSessionPlacementOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) DescribeGameSessionPlacementRequest(i0 *gamelift.DescribeGameSessionPlacementInput) (r0 *request.Request, r1 *gamelift.DescribeGameSessionPlacementOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGameSessionPlacementRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.DescribeGameSessionPlacementOutput)
	return
}

func (d *GameLiftDouble) DescribeGameSessionPlacementWithContext(i0 context.Context, i1 *gamelift.DescribeGameSessionPlacementInput, i2 ...request.Option) (r0 *gamelift.DescribeGameSessionPlacementOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGameSessionPlacementWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.DescribeGameSessionPlacementOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeDescribeGameSessionPlacementWithContext(ctx context.Context, in *gamelift.DescribeGameSessionPlacementInput, _ ...request.Option) (*gamelift.DescribeGameSessionPlacementOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeGameSessionPlacement cancelled", ctx.Err())
	default:
		return d.DescribeGameSessionPlacement(in)
	}
}

func (d *GameLiftDouble) DescribeGameSessionQueues(i0 *gamelift.DescribeGameSessionQueuesInput) (r0 *gamelift.DescribeGameSessionQueuesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGameSessionQueues", i0)
	r0, _ = returns[0].(*gamelift.DescribeGameSessionQueuesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) DescribeGameSessionQueuesRequest(i0 *gamelift.DescribeGameSessionQueuesInput) (r0 *request.Request, r1 *gamelift.DescribeGameSessionQueuesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGameSessionQueuesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.DescribeGameSessionQueuesOutput)
	return
}

func (d *GameLiftDouble) DescribeGameSessionQueuesWithContext(i0 context.Context, i1 *gamelift.DescribeGameSessionQueuesInput, i2 ...request.Option) (r0 *gamelift.DescribeGameSessionQueuesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGameSessionQueuesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.DescribeGameSessionQueuesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeDescribeGameSessionQueuesWithContext(ctx context.Context, in *gamelift.DescribeGameSessionQueuesInput, _ ...request.Option) (*gamelift.DescribeGameSessionQueuesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeGameSessionQueues cancelled", ctx.Err())
	default:
		return d.DescribeGameSessionQueues(in)
	}
}

func (d *GameLiftDouble) DescribeGameSessions(i0 *gamelift.DescribeGameSessionsInput) (r0 *gamelift.DescribeGameSessionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGameSessions", i0)
	r0, _ = returns[0].(*gamelift.DescribeGameSessionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) DescribeGameSessionsRequest(i0 *gamelift.DescribeGameSessionsInput) (r0 *request.Request, r1 *gamelift.DescribeGameSessionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGameSessionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.DescribeGameSessionsOutput)
	return
}

func (d *GameLiftDouble) DescribeGameSessionsWithContext(i0 context.Context, i1 *gamelift.DescribeGameSessionsInput, i2 ...request.Option) (r0 *gamelift.DescribeGameSessionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGameSessionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.DescribeGameSessionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeDescribeGameSessionsWithContext(ctx context.Context, in *gamelift.DescribeGameSessionsInput, _ ...request.Option) (*gamelift.DescribeGameSessionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeGameSessions cancelled", ctx.Err())
	default:
		return d.DescribeGameSessions(in)
	}
}

func (d *GameLiftDouble) DescribeInstances(i0 *gamelift.DescribeInstancesInput) (r0 *gamelift.DescribeInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstances", i0)
	r0, _ = returns[0].(*gamelift.DescribeInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) DescribeInstancesRequest(i0 *gamelift.DescribeInstancesInput) (r0 *request.Request, r1 *gamelift.DescribeInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.DescribeInstancesOutput)
	return
}

func (d *GameLiftDouble) DescribeInstancesWithContext(i0 context.Context, i1 *gamelift.DescribeInstancesInput, i2 ...request.Option) (r0 *gamelift.DescribeInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.DescribeInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeDescribeInstancesWithContext(ctx context.Context, in *gamelift.DescribeInstancesInput, _ ...request.Option) (*gamelift.DescribeInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeInstances cancelled", ctx.Err())
	default:
		return d.DescribeInstances(in)
	}
}

func (d *GameLiftDouble) DescribeMatchmaking(i0 *gamelift.DescribeMatchmakingInput) (r0 *gamelift.DescribeMatchmakingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMatchmaking", i0)
	r0, _ = returns[0].(*gamelift.DescribeMatchmakingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) DescribeMatchmakingConfigurations(i0 *gamelift.DescribeMatchmakingConfigurationsInput) (r0 *gamelift.DescribeMatchmakingConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMatchmakingConfigurations", i0)
	r0, _ = returns[0].(*gamelift.DescribeMatchmakingConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) DescribeMatchmakingConfigurationsRequest(i0 *gamelift.DescribeMatchmakingConfigurationsInput) (r0 *request.Request, r1 *gamelift.DescribeMatchmakingConfigurationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMatchmakingConfigurationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.DescribeMatchmakingConfigurationsOutput)
	return
}

func (d *GameLiftDouble) DescribeMatchmakingConfigurationsWithContext(i0 context.Context, i1 *gamelift.DescribeMatchmakingConfigurationsInput, i2 ...request.Option) (r0 *gamelift.DescribeMatchmakingConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMatchmakingConfigurationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.DescribeMatchmakingConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeDescribeMatchmakingConfigurationsWithContext(ctx context.Context, in *gamelift.DescribeMatchmakingConfigurationsInput, _ ...request.Option) (*gamelift.DescribeMatchmakingConfigurationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeMatchmakingConfigurations cancelled", ctx.Err())
	default:
		return d.DescribeMatchmakingConfigurations(in)
	}
}

func (d *GameLiftDouble) DescribeMatchmakingRequest(i0 *gamelift.DescribeMatchmakingInput) (r0 *request.Request, r1 *gamelift.DescribeMatchmakingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMatchmakingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.DescribeMatchmakingOutput)
	return
}

func (d *GameLiftDouble) DescribeMatchmakingRuleSets(i0 *gamelift.DescribeMatchmakingRuleSetsInput) (r0 *gamelift.DescribeMatchmakingRuleSetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMatchmakingRuleSets", i0)
	r0, _ = returns[0].(*gamelift.DescribeMatchmakingRuleSetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) DescribeMatchmakingRuleSetsRequest(i0 *gamelift.DescribeMatchmakingRuleSetsInput) (r0 *request.Request, r1 *gamelift.DescribeMatchmakingRuleSetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMatchmakingRuleSetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.DescribeMatchmakingRuleSetsOutput)
	return
}

func (d *GameLiftDouble) DescribeMatchmakingRuleSetsWithContext(i0 context.Context, i1 *gamelift.DescribeMatchmakingRuleSetsInput, i2 ...request.Option) (r0 *gamelift.DescribeMatchmakingRuleSetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMatchmakingRuleSetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.DescribeMatchmakingRuleSetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeDescribeMatchmakingRuleSetsWithContext(ctx context.Context, in *gamelift.DescribeMatchmakingRuleSetsInput, _ ...request.Option) (*gamelift.DescribeMatchmakingRuleSetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeMatchmakingRuleSets cancelled", ctx.Err())
	default:
		return d.DescribeMatchmakingRuleSets(in)
	}
}

func (d *GameLiftDouble) DescribeMatchmakingWithContext(i0 context.Context, i1 *gamelift.DescribeMatchmakingInput, i2 ...request.Option) (r0 *gamelift.DescribeMatchmakingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMatchmakingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.DescribeMatchmakingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeDescribeMatchmakingWithContext(ctx context.Context, in *gamelift.DescribeMatchmakingInput, _ ...request.Option) (*gamelift.DescribeMatchmakingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeMatchmaking cancelled", ctx.Err())
	default:
		return d.DescribeMatchmaking(in)
	}
}

func (d *GameLiftDouble) DescribePlayerSessions(i0 *gamelift.DescribePlayerSessionsInput) (r0 *gamelift.DescribePlayerSessionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePlayerSessions", i0)
	r0, _ = returns[0].(*gamelift.DescribePlayerSessionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) DescribePlayerSessionsRequest(i0 *gamelift.DescribePlayerSessionsInput) (r0 *request.Request, r1 *gamelift.DescribePlayerSessionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePlayerSessionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.DescribePlayerSessionsOutput)
	return
}

func (d *GameLiftDouble) DescribePlayerSessionsWithContext(i0 context.Context, i1 *gamelift.DescribePlayerSessionsInput, i2 ...request.Option) (r0 *gamelift.DescribePlayerSessionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePlayerSessionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.DescribePlayerSessionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeDescribePlayerSessionsWithContext(ctx context.Context, in *gamelift.DescribePlayerSessionsInput, _ ...request.Option) (*gamelift.DescribePlayerSessionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribePlayerSessions cancelled", ctx.Err())
	default:
		return d.DescribePlayerSessions(in)
	}
}

func (d *GameLiftDouble) DescribeRuntimeConfiguration(i0 *gamelift.DescribeRuntimeConfigurationInput) (r0 *gamelift.DescribeRuntimeConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRuntimeConfiguration", i0)
	r0, _ = returns[0].(*gamelift.DescribeRuntimeConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) DescribeRuntimeConfigurationRequest(i0 *gamelift.DescribeRuntimeConfigurationInput) (r0 *request.Request, r1 *gamelift.DescribeRuntimeConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRuntimeConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.DescribeRuntimeConfigurationOutput)
	return
}

func (d *GameLiftDouble) DescribeRuntimeConfigurationWithContext(i0 context.Context, i1 *gamelift.DescribeRuntimeConfigurationInput, i2 ...request.Option) (r0 *gamelift.DescribeRuntimeConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRuntimeConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.DescribeRuntimeConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeDescribeRuntimeConfigurationWithContext(ctx context.Context, in *gamelift.DescribeRuntimeConfigurationInput, _ ...request.Option) (*gamelift.DescribeRuntimeConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeRuntimeConfiguration cancelled", ctx.Err())
	default:
		return d.DescribeRuntimeConfiguration(in)
	}
}

func (d *GameLiftDouble) DescribeScalingPolicies(i0 *gamelift.DescribeScalingPoliciesInput) (r0 *gamelift.DescribeScalingPoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScalingPolicies", i0)
	r0, _ = returns[0].(*gamelift.DescribeScalingPoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) DescribeScalingPoliciesRequest(i0 *gamelift.DescribeScalingPoliciesInput) (r0 *request.Request, r1 *gamelift.DescribeScalingPoliciesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScalingPoliciesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.DescribeScalingPoliciesOutput)
	return
}

func (d *GameLiftDouble) DescribeScalingPoliciesWithContext(i0 context.Context, i1 *gamelift.DescribeScalingPoliciesInput, i2 ...request.Option) (r0 *gamelift.DescribeScalingPoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScalingPoliciesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.DescribeScalingPoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeDescribeScalingPoliciesWithContext(ctx context.Context, in *gamelift.DescribeScalingPoliciesInput, _ ...request.Option) (*gamelift.DescribeScalingPoliciesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeScalingPolicies cancelled", ctx.Err())
	default:
		return d.DescribeScalingPolicies(in)
	}
}

func (d *GameLiftDouble) DescribeScript(i0 *gamelift.DescribeScriptInput) (r0 *gamelift.DescribeScriptOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScript", i0)
	r0, _ = returns[0].(*gamelift.DescribeScriptOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) DescribeScriptRequest(i0 *gamelift.DescribeScriptInput) (r0 *request.Request, r1 *gamelift.DescribeScriptOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScriptRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.DescribeScriptOutput)
	return
}

func (d *GameLiftDouble) DescribeScriptWithContext(i0 context.Context, i1 *gamelift.DescribeScriptInput, i2 ...request.Option) (r0 *gamelift.DescribeScriptOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScriptWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.DescribeScriptOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeDescribeScriptWithContext(ctx context.Context, in *gamelift.DescribeScriptInput, _ ...request.Option) (*gamelift.DescribeScriptOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeScript cancelled", ctx.Err())
	default:
		return d.DescribeScript(in)
	}
}

func (d *GameLiftDouble) DescribeVpcPeeringAuthorizations(i0 *gamelift.DescribeVpcPeeringAuthorizationsInput) (r0 *gamelift.DescribeVpcPeeringAuthorizationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcPeeringAuthorizations", i0)
	r0, _ = returns[0].(*gamelift.DescribeVpcPeeringAuthorizationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) DescribeVpcPeeringAuthorizationsRequest(i0 *gamelift.DescribeVpcPeeringAuthorizationsInput) (r0 *request.Request, r1 *gamelift.DescribeVpcPeeringAuthorizationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcPeeringAuthorizationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.DescribeVpcPeeringAuthorizationsOutput)
	return
}

func (d *GameLiftDouble) DescribeVpcPeeringAuthorizationsWithContext(i0 context.Context, i1 *gamelift.DescribeVpcPeeringAuthorizationsInput, i2 ...request.Option) (r0 *gamelift.DescribeVpcPeeringAuthorizationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcPeeringAuthorizationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.DescribeVpcPeeringAuthorizationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeDescribeVpcPeeringAuthorizationsWithContext(ctx context.Context, in *gamelift.DescribeVpcPeeringAuthorizationsInput, _ ...request.Option) (*gamelift.DescribeVpcPeeringAuthorizationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeVpcPeeringAuthorizations cancelled", ctx.Err())
	default:
		return d.DescribeVpcPeeringAuthorizations(in)
	}
}

func (d *GameLiftDouble) DescribeVpcPeeringConnections(i0 *gamelift.DescribeVpcPeeringConnectionsInput) (r0 *gamelift.DescribeVpcPeeringConnectionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcPeeringConnections", i0)
	r0, _ = returns[0].(*gamelift.DescribeVpcPeeringConnectionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) DescribeVpcPeeringConnectionsRequest(i0 *gamelift.DescribeVpcPeeringConnectionsInput) (r0 *request.Request, r1 *gamelift.DescribeVpcPeeringConnectionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcPeeringConnectionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.DescribeVpcPeeringConnectionsOutput)
	return
}

func (d *GameLiftDouble) DescribeVpcPeeringConnectionsWithContext(i0 context.Context, i1 *gamelift.DescribeVpcPeeringConnectionsInput, i2 ...request.Option) (r0 *gamelift.DescribeVpcPeeringConnectionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcPeeringConnectionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.DescribeVpcPeeringConnectionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeDescribeVpcPeeringConnectionsWithContext(ctx context.Context, in *gamelift.DescribeVpcPeeringConnectionsInput, _ ...request.Option) (*gamelift.DescribeVpcPeeringConnectionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeVpcPeeringConnections cancelled", ctx.Err())
	default:
		return d.DescribeVpcPeeringConnections(in)
	}
}

func (d *GameLiftDouble) GetGameSessionLogUrl(i0 *gamelift.GetGameSessionLogUrlInput) (r0 *gamelift.GetGameSessionLogUrlOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGameSessionLogUrl", i0)
	r0, _ = returns[0].(*gamelift.GetGameSessionLogUrlOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) GetGameSessionLogUrlRequest(i0 *gamelift.GetGameSessionLogUrlInput) (r0 *request.Request, r1 *gamelift.GetGameSessionLogUrlOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGameSessionLogUrlRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.GetGameSessionLogUrlOutput)
	return
}

func (d *GameLiftDouble) GetGameSessionLogUrlWithContext(i0 context.Context, i1 *gamelift.GetGameSessionLogUrlInput, i2 ...request.Option) (r0 *gamelift.GetGameSessionLogUrlOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGameSessionLogUrlWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.GetGameSessionLogUrlOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeGetGameSessionLogUrlWithContext(ctx context.Context, in *gamelift.GetGameSessionLogUrlInput, _ ...request.Option) (*gamelift.GetGameSessionLogUrlOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetGameSessionLogUrl cancelled", ctx.Err())
	default:
		return d.GetGameSessionLogUrl(in)
	}
}

func (d *GameLiftDouble) GetInstanceAccess(i0 *gamelift.GetInstanceAccessInput) (r0 *gamelift.GetInstanceAccessOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstanceAccess", i0)
	r0, _ = returns[0].(*gamelift.GetInstanceAccessOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) GetInstanceAccessRequest(i0 *gamelift.GetInstanceAccessInput) (r0 *request.Request, r1 *gamelift.GetInstanceAccessOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstanceAccessRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.GetInstanceAccessOutput)
	return
}

func (d *GameLiftDouble) GetInstanceAccessWithContext(i0 context.Context, i1 *gamelift.GetInstanceAccessInput, i2 ...request.Option) (r0 *gamelift.GetInstanceAccessOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstanceAccessWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.GetInstanceAccessOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeGetInstanceAccessWithContext(ctx context.Context, in *gamelift.GetInstanceAccessInput, _ ...request.Option) (*gamelift.GetInstanceAccessOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetInstanceAccess cancelled", ctx.Err())
	default:
		return d.GetInstanceAccess(in)
	}
}

func (d *GameLiftDouble) ListAliases(i0 *gamelift.ListAliasesInput) (r0 *gamelift.ListAliasesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAliases", i0)
	r0, _ = returns[0].(*gamelift.ListAliasesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) ListAliasesRequest(i0 *gamelift.ListAliasesInput) (r0 *request.Request, r1 *gamelift.ListAliasesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAliasesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.ListAliasesOutput)
	return
}

func (d *GameLiftDouble) ListAliasesWithContext(i0 context.Context, i1 *gamelift.ListAliasesInput, i2 ...request.Option) (r0 *gamelift.ListAliasesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAliasesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.ListAliasesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeListAliasesWithContext(ctx context.Context, in *gamelift.ListAliasesInput, _ ...request.Option) (*gamelift.ListAliasesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAliases cancelled", ctx.Err())
	default:
		return d.ListAliases(in)
	}
}

func (d *GameLiftDouble) ListBuilds(i0 *gamelift.ListBuildsInput) (r0 *gamelift.ListBuildsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBuilds", i0)
	r0, _ = returns[0].(*gamelift.ListBuildsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) ListBuildsRequest(i0 *gamelift.ListBuildsInput) (r0 *request.Request, r1 *gamelift.ListBuildsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBuildsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.ListBuildsOutput)
	return
}

func (d *GameLiftDouble) ListBuildsWithContext(i0 context.Context, i1 *gamelift.ListBuildsInput, i2 ...request.Option) (r0 *gamelift.ListBuildsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBuildsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.ListBuildsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeListBuildsWithContext(ctx context.Context, in *gamelift.ListBuildsInput, _ ...request.Option) (*gamelift.ListBuildsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListBuilds cancelled", ctx.Err())
	default:
		return d.ListBuilds(in)
	}
}

func (d *GameLiftDouble) ListFleets(i0 *gamelift.ListFleetsInput) (r0 *gamelift.ListFleetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFleets", i0)
	r0, _ = returns[0].(*gamelift.ListFleetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) ListFleetsRequest(i0 *gamelift.ListFleetsInput) (r0 *request.Request, r1 *gamelift.ListFleetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFleetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.ListFleetsOutput)
	return
}

func (d *GameLiftDouble) ListFleetsWithContext(i0 context.Context, i1 *gamelift.ListFleetsInput, i2 ...request.Option) (r0 *gamelift.ListFleetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFleetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.ListFleetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeListFleetsWithContext(ctx context.Context, in *gamelift.ListFleetsInput, _ ...request.Option) (*gamelift.ListFleetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListFleets cancelled", ctx.Err())
	default:
		return d.ListFleets(in)
	}
}

func (d *GameLiftDouble) ListScripts(i0 *gamelift.ListScriptsInput) (r0 *gamelift.ListScriptsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListScripts", i0)
	r0, _ = returns[0].(*gamelift.ListScriptsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) ListScriptsRequest(i0 *gamelift.ListScriptsInput) (r0 *request.Request, r1 *gamelift.ListScriptsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListScriptsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.ListScriptsOutput)
	return
}

func (d *GameLiftDouble) ListScriptsWithContext(i0 context.Context, i1 *gamelift.ListScriptsInput, i2 ...request.Option) (r0 *gamelift.ListScriptsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListScriptsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.ListScriptsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeListScriptsWithContext(ctx context.Context, in *gamelift.ListScriptsInput, _ ...request.Option) (*gamelift.ListScriptsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListScripts cancelled", ctx.Err())
	default:
		return d.ListScripts(in)
	}
}

func (d *GameLiftDouble) ListTagsForResource(i0 *gamelift.ListTagsForResourceInput) (r0 *gamelift.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*gamelift.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) ListTagsForResourceRequest(i0 *gamelift.ListTagsForResourceInput) (r0 *request.Request, r1 *gamelift.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.ListTagsForResourceOutput)
	return
}

func (d *GameLiftDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *gamelift.ListTagsForResourceInput, i2 ...request.Option) (r0 *gamelift.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *gamelift.ListTagsForResourceInput, _ ...request.Option) (*gamelift.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *GameLiftDouble) PutScalingPolicy(i0 *gamelift.PutScalingPolicyInput) (r0 *gamelift.PutScalingPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutScalingPolicy", i0)
	r0, _ = returns[0].(*gamelift.PutScalingPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) PutScalingPolicyRequest(i0 *gamelift.PutScalingPolicyInput) (r0 *request.Request, r1 *gamelift.PutScalingPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutScalingPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.PutScalingPolicyOutput)
	return
}

func (d *GameLiftDouble) PutScalingPolicyWithContext(i0 context.Context, i1 *gamelift.PutScalingPolicyInput, i2 ...request.Option) (r0 *gamelift.PutScalingPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutScalingPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.PutScalingPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakePutScalingPolicyWithContext(ctx context.Context, in *gamelift.PutScalingPolicyInput, _ ...request.Option) (*gamelift.PutScalingPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutScalingPolicy cancelled", ctx.Err())
	default:
		return d.PutScalingPolicy(in)
	}
}

func (d *GameLiftDouble) RequestUploadCredentials(i0 *gamelift.RequestUploadCredentialsInput) (r0 *gamelift.RequestUploadCredentialsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RequestUploadCredentials", i0)
	r0, _ = returns[0].(*gamelift.RequestUploadCredentialsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) RequestUploadCredentialsRequest(i0 *gamelift.RequestUploadCredentialsInput) (r0 *request.Request, r1 *gamelift.RequestUploadCredentialsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RequestUploadCredentialsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.RequestUploadCredentialsOutput)
	return
}

func (d *GameLiftDouble) RequestUploadCredentialsWithContext(i0 context.Context, i1 *gamelift.RequestUploadCredentialsInput, i2 ...request.Option) (r0 *gamelift.RequestUploadCredentialsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RequestUploadCredentialsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.RequestUploadCredentialsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeRequestUploadCredentialsWithContext(ctx context.Context, in *gamelift.RequestUploadCredentialsInput, _ ...request.Option) (*gamelift.RequestUploadCredentialsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RequestUploadCredentials cancelled", ctx.Err())
	default:
		return d.RequestUploadCredentials(in)
	}
}

func (d *GameLiftDouble) ResolveAlias(i0 *gamelift.ResolveAliasInput) (r0 *gamelift.ResolveAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResolveAlias", i0)
	r0, _ = returns[0].(*gamelift.ResolveAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) ResolveAliasRequest(i0 *gamelift.ResolveAliasInput) (r0 *request.Request, r1 *gamelift.ResolveAliasOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResolveAliasRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.ResolveAliasOutput)
	return
}

func (d *GameLiftDouble) ResolveAliasWithContext(i0 context.Context, i1 *gamelift.ResolveAliasInput, i2 ...request.Option) (r0 *gamelift.ResolveAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResolveAliasWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.ResolveAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeResolveAliasWithContext(ctx context.Context, in *gamelift.ResolveAliasInput, _ ...request.Option) (*gamelift.ResolveAliasOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ResolveAlias cancelled", ctx.Err())
	default:
		return d.ResolveAlias(in)
	}
}

func (d *GameLiftDouble) SearchGameSessions(i0 *gamelift.SearchGameSessionsInput) (r0 *gamelift.SearchGameSessionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchGameSessions", i0)
	r0, _ = returns[0].(*gamelift.SearchGameSessionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) SearchGameSessionsRequest(i0 *gamelift.SearchGameSessionsInput) (r0 *request.Request, r1 *gamelift.SearchGameSessionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchGameSessionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.SearchGameSessionsOutput)
	return
}

func (d *GameLiftDouble) SearchGameSessionsWithContext(i0 context.Context, i1 *gamelift.SearchGameSessionsInput, i2 ...request.Option) (r0 *gamelift.SearchGameSessionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchGameSessionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.SearchGameSessionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeSearchGameSessionsWithContext(ctx context.Context, in *gamelift.SearchGameSessionsInput, _ ...request.Option) (*gamelift.SearchGameSessionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SearchGameSessions cancelled", ctx.Err())
	default:
		return d.SearchGameSessions(in)
	}
}

func (d *GameLiftDouble) StartFleetActions(i0 *gamelift.StartFleetActionsInput) (r0 *gamelift.StartFleetActionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartFleetActions", i0)
	r0, _ = returns[0].(*gamelift.StartFleetActionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) StartFleetActionsRequest(i0 *gamelift.StartFleetActionsInput) (r0 *request.Request, r1 *gamelift.StartFleetActionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartFleetActionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.StartFleetActionsOutput)
	return
}

func (d *GameLiftDouble) StartFleetActionsWithContext(i0 context.Context, i1 *gamelift.StartFleetActionsInput, i2 ...request.Option) (r0 *gamelift.StartFleetActionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartFleetActionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.StartFleetActionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeStartFleetActionsWithContext(ctx context.Context, in *gamelift.StartFleetActionsInput, _ ...request.Option) (*gamelift.StartFleetActionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartFleetActions cancelled", ctx.Err())
	default:
		return d.StartFleetActions(in)
	}
}

func (d *GameLiftDouble) StartGameSessionPlacement(i0 *gamelift.StartGameSessionPlacementInput) (r0 *gamelift.StartGameSessionPlacementOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartGameSessionPlacement", i0)
	r0, _ = returns[0].(*gamelift.StartGameSessionPlacementOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) StartGameSessionPlacementRequest(i0 *gamelift.StartGameSessionPlacementInput) (r0 *request.Request, r1 *gamelift.StartGameSessionPlacementOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartGameSessionPlacementRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.StartGameSessionPlacementOutput)
	return
}

func (d *GameLiftDouble) StartGameSessionPlacementWithContext(i0 context.Context, i1 *gamelift.StartGameSessionPlacementInput, i2 ...request.Option) (r0 *gamelift.StartGameSessionPlacementOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartGameSessionPlacementWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.StartGameSessionPlacementOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeStartGameSessionPlacementWithContext(ctx context.Context, in *gamelift.StartGameSessionPlacementInput, _ ...request.Option) (*gamelift.StartGameSessionPlacementOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartGameSessionPlacement cancelled", ctx.Err())
	default:
		return d.StartGameSessionPlacement(in)
	}
}

func (d *GameLiftDouble) StartMatchBackfill(i0 *gamelift.StartMatchBackfillInput) (r0 *gamelift.StartMatchBackfillOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartMatchBackfill", i0)
	r0, _ = returns[0].(*gamelift.StartMatchBackfillOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) StartMatchBackfillRequest(i0 *gamelift.StartMatchBackfillInput) (r0 *request.Request, r1 *gamelift.StartMatchBackfillOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartMatchBackfillRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.StartMatchBackfillOutput)
	return
}

func (d *GameLiftDouble) StartMatchBackfillWithContext(i0 context.Context, i1 *gamelift.StartMatchBackfillInput, i2 ...request.Option) (r0 *gamelift.StartMatchBackfillOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartMatchBackfillWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.StartMatchBackfillOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeStartMatchBackfillWithContext(ctx context.Context, in *gamelift.StartMatchBackfillInput, _ ...request.Option) (*gamelift.StartMatchBackfillOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartMatchBackfill cancelled", ctx.Err())
	default:
		return d.StartMatchBackfill(in)
	}
}

func (d *GameLiftDouble) StartMatchmaking(i0 *gamelift.StartMatchmakingInput) (r0 *gamelift.StartMatchmakingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartMatchmaking", i0)
	r0, _ = returns[0].(*gamelift.StartMatchmakingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) StartMatchmakingRequest(i0 *gamelift.StartMatchmakingInput) (r0 *request.Request, r1 *gamelift.StartMatchmakingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartMatchmakingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.StartMatchmakingOutput)
	return
}

func (d *GameLiftDouble) StartMatchmakingWithContext(i0 context.Context, i1 *gamelift.StartMatchmakingInput, i2 ...request.Option) (r0 *gamelift.StartMatchmakingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartMatchmakingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.StartMatchmakingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeStartMatchmakingWithContext(ctx context.Context, in *gamelift.StartMatchmakingInput, _ ...request.Option) (*gamelift.StartMatchmakingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartMatchmaking cancelled", ctx.Err())
	default:
		return d.StartMatchmaking(in)
	}
}

func (d *GameLiftDouble) StopFleetActions(i0 *gamelift.StopFleetActionsInput) (r0 *gamelift.StopFleetActionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopFleetActions", i0)
	r0, _ = returns[0].(*gamelift.StopFleetActionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) StopFleetActionsRequest(i0 *gamelift.StopFleetActionsInput) (r0 *request.Request, r1 *gamelift.StopFleetActionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopFleetActionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.StopFleetActionsOutput)
	return
}

func (d *GameLiftDouble) StopFleetActionsWithContext(i0 context.Context, i1 *gamelift.StopFleetActionsInput, i2 ...request.Option) (r0 *gamelift.StopFleetActionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopFleetActionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.StopFleetActionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeStopFleetActionsWithContext(ctx context.Context, in *gamelift.StopFleetActionsInput, _ ...request.Option) (*gamelift.StopFleetActionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopFleetActions cancelled", ctx.Err())
	default:
		return d.StopFleetActions(in)
	}
}

func (d *GameLiftDouble) StopGameSessionPlacement(i0 *gamelift.StopGameSessionPlacementInput) (r0 *gamelift.StopGameSessionPlacementOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopGameSessionPlacement", i0)
	r0, _ = returns[0].(*gamelift.StopGameSessionPlacementOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) StopGameSessionPlacementRequest(i0 *gamelift.StopGameSessionPlacementInput) (r0 *request.Request, r1 *gamelift.StopGameSessionPlacementOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopGameSessionPlacementRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.StopGameSessionPlacementOutput)
	return
}

func (d *GameLiftDouble) StopGameSessionPlacementWithContext(i0 context.Context, i1 *gamelift.StopGameSessionPlacementInput, i2 ...request.Option) (r0 *gamelift.StopGameSessionPlacementOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopGameSessionPlacementWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.StopGameSessionPlacementOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeStopGameSessionPlacementWithContext(ctx context.Context, in *gamelift.StopGameSessionPlacementInput, _ ...request.Option) (*gamelift.StopGameSessionPlacementOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopGameSessionPlacement cancelled", ctx.Err())
	default:
		return d.StopGameSessionPlacement(in)
	}
}

func (d *GameLiftDouble) StopMatchmaking(i0 *gamelift.StopMatchmakingInput) (r0 *gamelift.StopMatchmakingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopMatchmaking", i0)
	r0, _ = returns[0].(*gamelift.StopMatchmakingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) StopMatchmakingRequest(i0 *gamelift.StopMatchmakingInput) (r0 *request.Request, r1 *gamelift.StopMatchmakingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopMatchmakingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.StopMatchmakingOutput)
	return
}

func (d *GameLiftDouble) StopMatchmakingWithContext(i0 context.Context, i1 *gamelift.StopMatchmakingInput, i2 ...request.Option) (r0 *gamelift.StopMatchmakingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopMatchmakingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.StopMatchmakingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeStopMatchmakingWithContext(ctx context.Context, in *gamelift.StopMatchmakingInput, _ ...request.Option) (*gamelift.StopMatchmakingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopMatchmaking cancelled", ctx.Err())
	default:
		return d.StopMatchmaking(in)
	}
}

func (d *GameLiftDouble) TagResource(i0 *gamelift.TagResourceInput) (r0 *gamelift.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*gamelift.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) TagResourceRequest(i0 *gamelift.TagResourceInput) (r0 *request.Request, r1 *gamelift.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.TagResourceOutput)
	return
}

func (d *GameLiftDouble) TagResourceWithContext(i0 context.Context, i1 *gamelift.TagResourceInput, i2 ...request.Option) (r0 *gamelift.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeTagResourceWithContext(ctx context.Context, in *gamelift.TagResourceInput, _ ...request.Option) (*gamelift.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *GameLiftDouble) UntagResource(i0 *gamelift.UntagResourceInput) (r0 *gamelift.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*gamelift.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) UntagResourceRequest(i0 *gamelift.UntagResourceInput) (r0 *request.Request, r1 *gamelift.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.UntagResourceOutput)
	return
}

func (d *GameLiftDouble) UntagResourceWithContext(i0 context.Context, i1 *gamelift.UntagResourceInput, i2 ...request.Option) (r0 *gamelift.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeUntagResourceWithContext(ctx context.Context, in *gamelift.UntagResourceInput, _ ...request.Option) (*gamelift.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *GameLiftDouble) UpdateAlias(i0 *gamelift.UpdateAliasInput) (r0 *gamelift.UpdateAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAlias", i0)
	r0, _ = returns[0].(*gamelift.UpdateAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) UpdateAliasRequest(i0 *gamelift.UpdateAliasInput) (r0 *request.Request, r1 *gamelift.UpdateAliasOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAliasRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.UpdateAliasOutput)
	return
}

func (d *GameLiftDouble) UpdateAliasWithContext(i0 context.Context, i1 *gamelift.UpdateAliasInput, i2 ...request.Option) (r0 *gamelift.UpdateAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAliasWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.UpdateAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeUpdateAliasWithContext(ctx context.Context, in *gamelift.UpdateAliasInput, _ ...request.Option) (*gamelift.UpdateAliasOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateAlias cancelled", ctx.Err())
	default:
		return d.UpdateAlias(in)
	}
}

func (d *GameLiftDouble) UpdateBuild(i0 *gamelift.UpdateBuildInput) (r0 *gamelift.UpdateBuildOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateBuild", i0)
	r0, _ = returns[0].(*gamelift.UpdateBuildOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) UpdateBuildRequest(i0 *gamelift.UpdateBuildInput) (r0 *request.Request, r1 *gamelift.UpdateBuildOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateBuildRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.UpdateBuildOutput)
	return
}

func (d *GameLiftDouble) UpdateBuildWithContext(i0 context.Context, i1 *gamelift.UpdateBuildInput, i2 ...request.Option) (r0 *gamelift.UpdateBuildOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateBuildWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.UpdateBuildOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeUpdateBuildWithContext(ctx context.Context, in *gamelift.UpdateBuildInput, _ ...request.Option) (*gamelift.UpdateBuildOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateBuild cancelled", ctx.Err())
	default:
		return d.UpdateBuild(in)
	}
}

func (d *GameLiftDouble) UpdateFleetAttributes(i0 *gamelift.UpdateFleetAttributesInput) (r0 *gamelift.UpdateFleetAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFleetAttributes", i0)
	r0, _ = returns[0].(*gamelift.UpdateFleetAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) UpdateFleetAttributesRequest(i0 *gamelift.UpdateFleetAttributesInput) (r0 *request.Request, r1 *gamelift.UpdateFleetAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFleetAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.UpdateFleetAttributesOutput)
	return
}

func (d *GameLiftDouble) UpdateFleetAttributesWithContext(i0 context.Context, i1 *gamelift.UpdateFleetAttributesInput, i2 ...request.Option) (r0 *gamelift.UpdateFleetAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFleetAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.UpdateFleetAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeUpdateFleetAttributesWithContext(ctx context.Context, in *gamelift.UpdateFleetAttributesInput, _ ...request.Option) (*gamelift.UpdateFleetAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateFleetAttributes cancelled", ctx.Err())
	default:
		return d.UpdateFleetAttributes(in)
	}
}

func (d *GameLiftDouble) UpdateFleetCapacity(i0 *gamelift.UpdateFleetCapacityInput) (r0 *gamelift.UpdateFleetCapacityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFleetCapacity", i0)
	r0, _ = returns[0].(*gamelift.UpdateFleetCapacityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) UpdateFleetCapacityRequest(i0 *gamelift.UpdateFleetCapacityInput) (r0 *request.Request, r1 *gamelift.UpdateFleetCapacityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFleetCapacityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.UpdateFleetCapacityOutput)
	return
}

func (d *GameLiftDouble) UpdateFleetCapacityWithContext(i0 context.Context, i1 *gamelift.UpdateFleetCapacityInput, i2 ...request.Option) (r0 *gamelift.UpdateFleetCapacityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFleetCapacityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.UpdateFleetCapacityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeUpdateFleetCapacityWithContext(ctx context.Context, in *gamelift.UpdateFleetCapacityInput, _ ...request.Option) (*gamelift.UpdateFleetCapacityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateFleetCapacity cancelled", ctx.Err())
	default:
		return d.UpdateFleetCapacity(in)
	}
}

func (d *GameLiftDouble) UpdateFleetPortSettings(i0 *gamelift.UpdateFleetPortSettingsInput) (r0 *gamelift.UpdateFleetPortSettingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFleetPortSettings", i0)
	r0, _ = returns[0].(*gamelift.UpdateFleetPortSettingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) UpdateFleetPortSettingsRequest(i0 *gamelift.UpdateFleetPortSettingsInput) (r0 *request.Request, r1 *gamelift.UpdateFleetPortSettingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFleetPortSettingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.UpdateFleetPortSettingsOutput)
	return
}

func (d *GameLiftDouble) UpdateFleetPortSettingsWithContext(i0 context.Context, i1 *gamelift.UpdateFleetPortSettingsInput, i2 ...request.Option) (r0 *gamelift.UpdateFleetPortSettingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFleetPortSettingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.UpdateFleetPortSettingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeUpdateFleetPortSettingsWithContext(ctx context.Context, in *gamelift.UpdateFleetPortSettingsInput, _ ...request.Option) (*gamelift.UpdateFleetPortSettingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateFleetPortSettings cancelled", ctx.Err())
	default:
		return d.UpdateFleetPortSettings(in)
	}
}

func (d *GameLiftDouble) UpdateGameSession(i0 *gamelift.UpdateGameSessionInput) (r0 *gamelift.UpdateGameSessionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGameSession", i0)
	r0, _ = returns[0].(*gamelift.UpdateGameSessionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) UpdateGameSessionQueue(i0 *gamelift.UpdateGameSessionQueueInput) (r0 *gamelift.UpdateGameSessionQueueOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGameSessionQueue", i0)
	r0, _ = returns[0].(*gamelift.UpdateGameSessionQueueOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) UpdateGameSessionQueueRequest(i0 *gamelift.UpdateGameSessionQueueInput) (r0 *request.Request, r1 *gamelift.UpdateGameSessionQueueOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGameSessionQueueRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.UpdateGameSessionQueueOutput)
	return
}

func (d *GameLiftDouble) UpdateGameSessionQueueWithContext(i0 context.Context, i1 *gamelift.UpdateGameSessionQueueInput, i2 ...request.Option) (r0 *gamelift.UpdateGameSessionQueueOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGameSessionQueueWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.UpdateGameSessionQueueOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeUpdateGameSessionQueueWithContext(ctx context.Context, in *gamelift.UpdateGameSessionQueueInput, _ ...request.Option) (*gamelift.UpdateGameSessionQueueOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateGameSessionQueue cancelled", ctx.Err())
	default:
		return d.UpdateGameSessionQueue(in)
	}
}

func (d *GameLiftDouble) UpdateGameSessionRequest(i0 *gamelift.UpdateGameSessionInput) (r0 *request.Request, r1 *gamelift.UpdateGameSessionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGameSessionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.UpdateGameSessionOutput)
	return
}

func (d *GameLiftDouble) UpdateGameSessionWithContext(i0 context.Context, i1 *gamelift.UpdateGameSessionInput, i2 ...request.Option) (r0 *gamelift.UpdateGameSessionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGameSessionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.UpdateGameSessionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeUpdateGameSessionWithContext(ctx context.Context, in *gamelift.UpdateGameSessionInput, _ ...request.Option) (*gamelift.UpdateGameSessionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateGameSession cancelled", ctx.Err())
	default:
		return d.UpdateGameSession(in)
	}
}

func (d *GameLiftDouble) UpdateMatchmakingConfiguration(i0 *gamelift.UpdateMatchmakingConfigurationInput) (r0 *gamelift.UpdateMatchmakingConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMatchmakingConfiguration", i0)
	r0, _ = returns[0].(*gamelift.UpdateMatchmakingConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) UpdateMatchmakingConfigurationRequest(i0 *gamelift.UpdateMatchmakingConfigurationInput) (r0 *request.Request, r1 *gamelift.UpdateMatchmakingConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMatchmakingConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.UpdateMatchmakingConfigurationOutput)
	return
}

func (d *GameLiftDouble) UpdateMatchmakingConfigurationWithContext(i0 context.Context, i1 *gamelift.UpdateMatchmakingConfigurationInput, i2 ...request.Option) (r0 *gamelift.UpdateMatchmakingConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMatchmakingConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.UpdateMatchmakingConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeUpdateMatchmakingConfigurationWithContext(ctx context.Context, in *gamelift.UpdateMatchmakingConfigurationInput, _ ...request.Option) (*gamelift.UpdateMatchmakingConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateMatchmakingConfiguration cancelled", ctx.Err())
	default:
		return d.UpdateMatchmakingConfiguration(in)
	}
}

func (d *GameLiftDouble) UpdateRuntimeConfiguration(i0 *gamelift.UpdateRuntimeConfigurationInput) (r0 *gamelift.UpdateRuntimeConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRuntimeConfiguration", i0)
	r0, _ = returns[0].(*gamelift.UpdateRuntimeConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) UpdateRuntimeConfigurationRequest(i0 *gamelift.UpdateRuntimeConfigurationInput) (r0 *request.Request, r1 *gamelift.UpdateRuntimeConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRuntimeConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.UpdateRuntimeConfigurationOutput)
	return
}

func (d *GameLiftDouble) UpdateRuntimeConfigurationWithContext(i0 context.Context, i1 *gamelift.UpdateRuntimeConfigurationInput, i2 ...request.Option) (r0 *gamelift.UpdateRuntimeConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRuntimeConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.UpdateRuntimeConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeUpdateRuntimeConfigurationWithContext(ctx context.Context, in *gamelift.UpdateRuntimeConfigurationInput, _ ...request.Option) (*gamelift.UpdateRuntimeConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateRuntimeConfiguration cancelled", ctx.Err())
	default:
		return d.UpdateRuntimeConfiguration(in)
	}
}

func (d *GameLiftDouble) UpdateScript(i0 *gamelift.UpdateScriptInput) (r0 *gamelift.UpdateScriptOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateScript", i0)
	r0, _ = returns[0].(*gamelift.UpdateScriptOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) UpdateScriptRequest(i0 *gamelift.UpdateScriptInput) (r0 *request.Request, r1 *gamelift.UpdateScriptOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateScriptRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.UpdateScriptOutput)
	return
}

func (d *GameLiftDouble) UpdateScriptWithContext(i0 context.Context, i1 *gamelift.UpdateScriptInput, i2 ...request.Option) (r0 *gamelift.UpdateScriptOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateScriptWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.UpdateScriptOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeUpdateScriptWithContext(ctx context.Context, in *gamelift.UpdateScriptInput, _ ...request.Option) (*gamelift.UpdateScriptOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateScript cancelled", ctx.Err())
	default:
		return d.UpdateScript(in)
	}
}

func (d *GameLiftDouble) ValidateMatchmakingRuleSet(i0 *gamelift.ValidateMatchmakingRuleSetInput) (r0 *gamelift.ValidateMatchmakingRuleSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ValidateMatchmakingRuleSet", i0)
	r0, _ = returns[0].(*gamelift.ValidateMatchmakingRuleSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) ValidateMatchmakingRuleSetRequest(i0 *gamelift.ValidateMatchmakingRuleSetInput) (r0 *request.Request, r1 *gamelift.ValidateMatchmakingRuleSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ValidateMatchmakingRuleSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*gamelift.ValidateMatchmakingRuleSetOutput)
	return
}

func (d *GameLiftDouble) ValidateMatchmakingRuleSetWithContext(i0 context.Context, i1 *gamelift.ValidateMatchmakingRuleSetInput, i2 ...request.Option) (r0 *gamelift.ValidateMatchmakingRuleSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ValidateMatchmakingRuleSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*gamelift.ValidateMatchmakingRuleSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GameLiftDouble) fakeValidateMatchmakingRuleSetWithContext(ctx context.Context, in *gamelift.ValidateMatchmakingRuleSetInput, _ ...request.Option) (*gamelift.ValidateMatchmakingRuleSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ValidateMatchmakingRuleSet cancelled", ctx.Err())
	default:
		return d.ValidateMatchmakingRuleSet(in)
	}
}
