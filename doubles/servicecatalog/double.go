// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:14:57+11:00

// Package servicecatalogdouble provides a TestDouble implementation of servicecatalogiface.ServiceCatalogAPI
package servicecatalogdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/servicecatalog"
	"github.com/aws/aws-sdk-go/service/servicecatalog/servicecatalogiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// ServiceCatalogDouble is TestDouble for servicecatalogiface.ServiceCatalogAPI
type ServiceCatalogDouble struct {
	servicecatalogiface.ServiceCatalogAPI
	*awsdouble.AWSTestDouble
}

// Constructor for ServiceCatalogDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *ServiceCatalogDouble {
	result := &ServiceCatalogDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*servicecatalogiface.ServiceCatalogAPI)(nil), configurators...)
	return result
}

func (d *ServiceCatalogDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *ServiceCatalogDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AcceptPortfolioShareWithContext":
		return m.Fake(d.fakeAcceptPortfolioShareWithContext)

	case "AssociateBudgetWithResourceWithContext":
		return m.Fake(d.fakeAssociateBudgetWithResourceWithContext)

	case "AssociatePrincipalWithPortfolioWithContext":
		return m.Fake(d.fakeAssociatePrincipalWithPortfolioWithContext)

	case "AssociateProductWithPortfolioWithContext":
		return m.Fake(d.fakeAssociateProductWithPortfolioWithContext)

	case "AssociateServiceActionWithProvisioningArtifactWithContext":
		return m.Fake(d.fakeAssociateServiceActionWithProvisioningArtifactWithContext)

	case "AssociateTagOptionWithResourceWithContext":
		return m.Fake(d.fakeAssociateTagOptionWithResourceWithContext)

	case "BatchAssociateServiceActionWithProvisioningArtifactWithContext":
		return m.Fake(d.fakeBatchAssociateServiceActionWithProvisioningArtifactWithContext)

	case "BatchDisassociateServiceActionFromProvisioningArtifactWithContext":
		return m.Fake(d.fakeBatchDisassociateServiceActionFromProvisioningArtifactWithContext)

	case "CopyProductWithContext":
		return m.Fake(d.fakeCopyProductWithContext)

	case "CreateConstraintWithContext":
		return m.Fake(d.fakeCreateConstraintWithContext)

	case "CreatePortfolioShareWithContext":
		return m.Fake(d.fakeCreatePortfolioShareWithContext)

	case "CreatePortfolioWithContext":
		return m.Fake(d.fakeCreatePortfolioWithContext)

	case "CreateProductWithContext":
		return m.Fake(d.fakeCreateProductWithContext)

	case "CreateProvisionedProductPlanWithContext":
		return m.Fake(d.fakeCreateProvisionedProductPlanWithContext)

	case "CreateProvisioningArtifactWithContext":
		return m.Fake(d.fakeCreateProvisioningArtifactWithContext)

	case "CreateServiceActionWithContext":
		return m.Fake(d.fakeCreateServiceActionWithContext)

	case "CreateTagOptionWithContext":
		return m.Fake(d.fakeCreateTagOptionWithContext)

	case "DeleteConstraintWithContext":
		return m.Fake(d.fakeDeleteConstraintWithContext)

	case "DeletePortfolioShareWithContext":
		return m.Fake(d.fakeDeletePortfolioShareWithContext)

	case "DeletePortfolioWithContext":
		return m.Fake(d.fakeDeletePortfolioWithContext)

	case "DeleteProductWithContext":
		return m.Fake(d.fakeDeleteProductWithContext)

	case "DeleteProvisionedProductPlanWithContext":
		return m.Fake(d.fakeDeleteProvisionedProductPlanWithContext)

	case "DeleteProvisioningArtifactWithContext":
		return m.Fake(d.fakeDeleteProvisioningArtifactWithContext)

	case "DeleteServiceActionWithContext":
		return m.Fake(d.fakeDeleteServiceActionWithContext)

	case "DeleteTagOptionWithContext":
		return m.Fake(d.fakeDeleteTagOptionWithContext)

	case "DescribeConstraintWithContext":
		return m.Fake(d.fakeDescribeConstraintWithContext)

	case "DescribeCopyProductStatusWithContext":
		return m.Fake(d.fakeDescribeCopyProductStatusWithContext)

	case "DescribePortfolioShareStatusWithContext":
		return m.Fake(d.fakeDescribePortfolioShareStatusWithContext)

	case "DescribePortfolioWithContext":
		return m.Fake(d.fakeDescribePortfolioWithContext)

	case "DescribeProductAsAdminWithContext":
		return m.Fake(d.fakeDescribeProductAsAdminWithContext)

	case "DescribeProductViewWithContext":
		return m.Fake(d.fakeDescribeProductViewWithContext)

	case "DescribeProductWithContext":
		return m.Fake(d.fakeDescribeProductWithContext)

	case "DescribeProvisionedProductPlanWithContext":
		return m.Fake(d.fakeDescribeProvisionedProductPlanWithContext)

	case "DescribeProvisionedProductWithContext":
		return m.Fake(d.fakeDescribeProvisionedProductWithContext)

	case "DescribeProvisioningArtifactWithContext":
		return m.Fake(d.fakeDescribeProvisioningArtifactWithContext)

	case "DescribeProvisioningParametersWithContext":
		return m.Fake(d.fakeDescribeProvisioningParametersWithContext)

	case "DescribeRecordWithContext":
		return m.Fake(d.fakeDescribeRecordWithContext)

	case "DescribeServiceActionExecutionParametersWithContext":
		return m.Fake(d.fakeDescribeServiceActionExecutionParametersWithContext)

	case "DescribeServiceActionWithContext":
		return m.Fake(d.fakeDescribeServiceActionWithContext)

	case "DescribeTagOptionWithContext":
		return m.Fake(d.fakeDescribeTagOptionWithContext)

	case "DisableAWSOrganizationsAccessWithContext":
		return m.Fake(d.fakeDisableAWSOrganizationsAccessWithContext)

	case "DisassociateBudgetFromResourceWithContext":
		return m.Fake(d.fakeDisassociateBudgetFromResourceWithContext)

	case "DisassociatePrincipalFromPortfolioWithContext":
		return m.Fake(d.fakeDisassociatePrincipalFromPortfolioWithContext)

	case "DisassociateProductFromPortfolioWithContext":
		return m.Fake(d.fakeDisassociateProductFromPortfolioWithContext)

	case "DisassociateServiceActionFromProvisioningArtifactWithContext":
		return m.Fake(d.fakeDisassociateServiceActionFromProvisioningArtifactWithContext)

	case "DisassociateTagOptionFromResourceWithContext":
		return m.Fake(d.fakeDisassociateTagOptionFromResourceWithContext)

	case "EnableAWSOrganizationsAccessWithContext":
		return m.Fake(d.fakeEnableAWSOrganizationsAccessWithContext)

	case "ExecuteProvisionedProductPlanWithContext":
		return m.Fake(d.fakeExecuteProvisionedProductPlanWithContext)

	case "ExecuteProvisionedProductServiceActionWithContext":
		return m.Fake(d.fakeExecuteProvisionedProductServiceActionWithContext)

	case "GetAWSOrganizationsAccessStatusWithContext":
		return m.Fake(d.fakeGetAWSOrganizationsAccessStatusWithContext)

	case "ListAcceptedPortfolioSharesPages":
		return m.Fake(d.fakeListAcceptedPortfolioSharesPages)

	case "ListAcceptedPortfolioSharesPagesWithContext":
		return m.Fake(d.fakeListAcceptedPortfolioSharesPagesWithContext)

	case "ListAcceptedPortfolioSharesWithContext":
		return m.Fake(d.fakeListAcceptedPortfolioSharesWithContext)

	case "ListBudgetsForResourcePages":
		return m.Fake(d.fakeListBudgetsForResourcePages)

	case "ListBudgetsForResourcePagesWithContext":
		return m.Fake(d.fakeListBudgetsForResourcePagesWithContext)

	case "ListBudgetsForResourceWithContext":
		return m.Fake(d.fakeListBudgetsForResourceWithContext)

	case "ListConstraintsForPortfolioPages":
		return m.Fake(d.fakeListConstraintsForPortfolioPages)

	case "ListConstraintsForPortfolioPagesWithContext":
		return m.Fake(d.fakeListConstraintsForPortfolioPagesWithContext)

	case "ListConstraintsForPortfolioWithContext":
		return m.Fake(d.fakeListConstraintsForPortfolioWithContext)

	case "ListLaunchPathsPages":
		return m.Fake(d.fakeListLaunchPathsPages)

	case "ListLaunchPathsPagesWithContext":
		return m.Fake(d.fakeListLaunchPathsPagesWithContext)

	case "ListLaunchPathsWithContext":
		return m.Fake(d.fakeListLaunchPathsWithContext)

	case "ListOrganizationPortfolioAccessPages":
		return m.Fake(d.fakeListOrganizationPortfolioAccessPages)

	case "ListOrganizationPortfolioAccessPagesWithContext":
		return m.Fake(d.fakeListOrganizationPortfolioAccessPagesWithContext)

	case "ListOrganizationPortfolioAccessWithContext":
		return m.Fake(d.fakeListOrganizationPortfolioAccessWithContext)

	case "ListPortfolioAccessWithContext":
		return m.Fake(d.fakeListPortfolioAccessWithContext)

	case "ListPortfoliosForProductPages":
		return m.Fake(d.fakeListPortfoliosForProductPages)

	case "ListPortfoliosForProductPagesWithContext":
		return m.Fake(d.fakeListPortfoliosForProductPagesWithContext)

	case "ListPortfoliosForProductWithContext":
		return m.Fake(d.fakeListPortfoliosForProductWithContext)

	case "ListPortfoliosPages":
		return m.Fake(d.fakeListPortfoliosPages)

	case "ListPortfoliosPagesWithContext":
		return m.Fake(d.fakeListPortfoliosPagesWithContext)

	case "ListPortfoliosWithContext":
		return m.Fake(d.fakeListPortfoliosWithContext)

	case "ListPrincipalsForPortfolioPages":
		return m.Fake(d.fakeListPrincipalsForPortfolioPages)

	case "ListPrincipalsForPortfolioPagesWithContext":
		return m.Fake(d.fakeListPrincipalsForPortfolioPagesWithContext)

	case "ListPrincipalsForPortfolioWithContext":
		return m.Fake(d.fakeListPrincipalsForPortfolioWithContext)

	case "ListProvisionedProductPlansWithContext":
		return m.Fake(d.fakeListProvisionedProductPlansWithContext)

	case "ListProvisioningArtifactsForServiceActionPages":
		return m.Fake(d.fakeListProvisioningArtifactsForServiceActionPages)

	case "ListProvisioningArtifactsForServiceActionPagesWithContext":
		return m.Fake(d.fakeListProvisioningArtifactsForServiceActionPagesWithContext)

	case "ListProvisioningArtifactsForServiceActionWithContext":
		return m.Fake(d.fakeListProvisioningArtifactsForServiceActionWithContext)

	case "ListProvisioningArtifactsWithContext":
		return m.Fake(d.fakeListProvisioningArtifactsWithContext)

	case "ListRecordHistoryWithContext":
		return m.Fake(d.fakeListRecordHistoryWithContext)

	case "ListResourcesForTagOptionPages":
		return m.Fake(d.fakeListResourcesForTagOptionPages)

	case "ListResourcesForTagOptionPagesWithContext":
		return m.Fake(d.fakeListResourcesForTagOptionPagesWithContext)

	case "ListResourcesForTagOptionWithContext":
		return m.Fake(d.fakeListResourcesForTagOptionWithContext)

	case "ListServiceActionsForProvisioningArtifactPages":
		return m.Fake(d.fakeListServiceActionsForProvisioningArtifactPages)

	case "ListServiceActionsForProvisioningArtifactPagesWithContext":
		return m.Fake(d.fakeListServiceActionsForProvisioningArtifactPagesWithContext)

	case "ListServiceActionsForProvisioningArtifactWithContext":
		return m.Fake(d.fakeListServiceActionsForProvisioningArtifactWithContext)

	case "ListServiceActionsPages":
		return m.Fake(d.fakeListServiceActionsPages)

	case "ListServiceActionsPagesWithContext":
		return m.Fake(d.fakeListServiceActionsPagesWithContext)

	case "ListServiceActionsWithContext":
		return m.Fake(d.fakeListServiceActionsWithContext)

	case "ListStackInstancesForProvisionedProductWithContext":
		return m.Fake(d.fakeListStackInstancesForProvisionedProductWithContext)

	case "ListTagOptionsPages":
		return m.Fake(d.fakeListTagOptionsPages)

	case "ListTagOptionsPagesWithContext":
		return m.Fake(d.fakeListTagOptionsPagesWithContext)

	case "ListTagOptionsWithContext":
		return m.Fake(d.fakeListTagOptionsWithContext)

	case "ProvisionProductWithContext":
		return m.Fake(d.fakeProvisionProductWithContext)

	case "RejectPortfolioShareWithContext":
		return m.Fake(d.fakeRejectPortfolioShareWithContext)

	case "ScanProvisionedProductsWithContext":
		return m.Fake(d.fakeScanProvisionedProductsWithContext)

	case "SearchProductsAsAdminPages":
		return m.Fake(d.fakeSearchProductsAsAdminPages)

	case "SearchProductsAsAdminPagesWithContext":
		return m.Fake(d.fakeSearchProductsAsAdminPagesWithContext)

	case "SearchProductsAsAdminWithContext":
		return m.Fake(d.fakeSearchProductsAsAdminWithContext)

	case "SearchProductsPages":
		return m.Fake(d.fakeSearchProductsPages)

	case "SearchProductsPagesWithContext":
		return m.Fake(d.fakeSearchProductsPagesWithContext)

	case "SearchProductsWithContext":
		return m.Fake(d.fakeSearchProductsWithContext)

	case "SearchProvisionedProductsPages":
		return m.Fake(d.fakeSearchProvisionedProductsPages)

	case "SearchProvisionedProductsPagesWithContext":
		return m.Fake(d.fakeSearchProvisionedProductsPagesWithContext)

	case "SearchProvisionedProductsWithContext":
		return m.Fake(d.fakeSearchProvisionedProductsWithContext)

	case "TerminateProvisionedProductWithContext":
		return m.Fake(d.fakeTerminateProvisionedProductWithContext)

	case "UpdateConstraintWithContext":
		return m.Fake(d.fakeUpdateConstraintWithContext)

	case "UpdatePortfolioWithContext":
		return m.Fake(d.fakeUpdatePortfolioWithContext)

	case "UpdateProductWithContext":
		return m.Fake(d.fakeUpdateProductWithContext)

	case "UpdateProvisionedProductPropertiesWithContext":
		return m.Fake(d.fakeUpdateProvisionedProductPropertiesWithContext)

	case "UpdateProvisionedProductWithContext":
		return m.Fake(d.fakeUpdateProvisionedProductWithContext)

	case "UpdateProvisioningArtifactWithContext":
		return m.Fake(d.fakeUpdateProvisioningArtifactWithContext)

	case "UpdateServiceActionWithContext":
		return m.Fake(d.fakeUpdateServiceActionWithContext)

	case "UpdateTagOptionWithContext":
		return m.Fake(d.fakeUpdateTagOptionWithContext)

	default:
		return nil
	}
}

func (d *ServiceCatalogDouble) AcceptPortfolioShare(i0 *servicecatalog.AcceptPortfolioShareInput) (r0 *servicecatalog.AcceptPortfolioShareOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptPortfolioShare", i0)
	r0, _ = returns[0].(*servicecatalog.AcceptPortfolioShareOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) AcceptPortfolioShareRequest(i0 *servicecatalog.AcceptPortfolioShareInput) (r0 *request.Request, r1 *servicecatalog.AcceptPortfolioShareOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptPortfolioShareRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.AcceptPortfolioShareOutput)
	return
}

func (d *ServiceCatalogDouble) AcceptPortfolioShareWithContext(i0 context.Context, i1 *servicecatalog.AcceptPortfolioShareInput, i2 ...request.Option) (r0 *servicecatalog.AcceptPortfolioShareOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptPortfolioShareWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.AcceptPortfolioShareOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeAcceptPortfolioShareWithContext(ctx context.Context, in *servicecatalog.AcceptPortfolioShareInput, _ ...request.Option) (*servicecatalog.AcceptPortfolioShareOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AcceptPortfolioShare cancelled", ctx.Err())
	default:
		return d.AcceptPortfolioShare(in)
	}
}

func (d *ServiceCatalogDouble) AssociateBudgetWithResource(i0 *servicecatalog.AssociateBudgetWithResourceInput) (r0 *servicecatalog.AssociateBudgetWithResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateBudgetWithResource", i0)
	r0, _ = returns[0].(*servicecatalog.AssociateBudgetWithResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) AssociateBudgetWithResourceRequest(i0 *servicecatalog.AssociateBudgetWithResourceInput) (r0 *request.Request, r1 *servicecatalog.AssociateBudgetWithResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateBudgetWithResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.AssociateBudgetWithResourceOutput)
	return
}

func (d *ServiceCatalogDouble) AssociateBudgetWithResourceWithContext(i0 context.Context, i1 *servicecatalog.AssociateBudgetWithResourceInput, i2 ...request.Option) (r0 *servicecatalog.AssociateBudgetWithResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateBudgetWithResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.AssociateBudgetWithResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeAssociateBudgetWithResourceWithContext(ctx context.Context, in *servicecatalog.AssociateBudgetWithResourceInput, _ ...request.Option) (*servicecatalog.AssociateBudgetWithResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateBudgetWithResource cancelled", ctx.Err())
	default:
		return d.AssociateBudgetWithResource(in)
	}
}

func (d *ServiceCatalogDouble) AssociatePrincipalWithPortfolio(i0 *servicecatalog.AssociatePrincipalWithPortfolioInput) (r0 *servicecatalog.AssociatePrincipalWithPortfolioOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociatePrincipalWithPortfolio", i0)
	r0, _ = returns[0].(*servicecatalog.AssociatePrincipalWithPortfolioOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) AssociatePrincipalWithPortfolioRequest(i0 *servicecatalog.AssociatePrincipalWithPortfolioInput) (r0 *request.Request, r1 *servicecatalog.AssociatePrincipalWithPortfolioOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociatePrincipalWithPortfolioRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.AssociatePrincipalWithPortfolioOutput)
	return
}

func (d *ServiceCatalogDouble) AssociatePrincipalWithPortfolioWithContext(i0 context.Context, i1 *servicecatalog.AssociatePrincipalWithPortfolioInput, i2 ...request.Option) (r0 *servicecatalog.AssociatePrincipalWithPortfolioOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociatePrincipalWithPortfolioWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.AssociatePrincipalWithPortfolioOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeAssociatePrincipalWithPortfolioWithContext(ctx context.Context, in *servicecatalog.AssociatePrincipalWithPortfolioInput, _ ...request.Option) (*servicecatalog.AssociatePrincipalWithPortfolioOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociatePrincipalWithPortfolio cancelled", ctx.Err())
	default:
		return d.AssociatePrincipalWithPortfolio(in)
	}
}

func (d *ServiceCatalogDouble) AssociateProductWithPortfolio(i0 *servicecatalog.AssociateProductWithPortfolioInput) (r0 *servicecatalog.AssociateProductWithPortfolioOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateProductWithPortfolio", i0)
	r0, _ = returns[0].(*servicecatalog.AssociateProductWithPortfolioOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) AssociateProductWithPortfolioRequest(i0 *servicecatalog.AssociateProductWithPortfolioInput) (r0 *request.Request, r1 *servicecatalog.AssociateProductWithPortfolioOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateProductWithPortfolioRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.AssociateProductWithPortfolioOutput)
	return
}

func (d *ServiceCatalogDouble) AssociateProductWithPortfolioWithContext(i0 context.Context, i1 *servicecatalog.AssociateProductWithPortfolioInput, i2 ...request.Option) (r0 *servicecatalog.AssociateProductWithPortfolioOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateProductWithPortfolioWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.AssociateProductWithPortfolioOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeAssociateProductWithPortfolioWithContext(ctx context.Context, in *servicecatalog.AssociateProductWithPortfolioInput, _ ...request.Option) (*servicecatalog.AssociateProductWithPortfolioOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateProductWithPortfolio cancelled", ctx.Err())
	default:
		return d.AssociateProductWithPortfolio(in)
	}
}

func (d *ServiceCatalogDouble) AssociateServiceActionWithProvisioningArtifact(i0 *servicecatalog.AssociateServiceActionWithProvisioningArtifactInput) (r0 *servicecatalog.AssociateServiceActionWithProvisioningArtifactOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateServiceActionWithProvisioningArtifact", i0)
	r0, _ = returns[0].(*servicecatalog.AssociateServiceActionWithProvisioningArtifactOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) AssociateServiceActionWithProvisioningArtifactRequest(i0 *servicecatalog.AssociateServiceActionWithProvisioningArtifactInput) (r0 *request.Request, r1 *servicecatalog.AssociateServiceActionWithProvisioningArtifactOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateServiceActionWithProvisioningArtifactRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.AssociateServiceActionWithProvisioningArtifactOutput)
	return
}

func (d *ServiceCatalogDouble) AssociateServiceActionWithProvisioningArtifactWithContext(i0 context.Context, i1 *servicecatalog.AssociateServiceActionWithProvisioningArtifactInput, i2 ...request.Option) (r0 *servicecatalog.AssociateServiceActionWithProvisioningArtifactOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateServiceActionWithProvisioningArtifactWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.AssociateServiceActionWithProvisioningArtifactOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeAssociateServiceActionWithProvisioningArtifactWithContext(ctx context.Context, in *servicecatalog.AssociateServiceActionWithProvisioningArtifactInput, _ ...request.Option) (*servicecatalog.AssociateServiceActionWithProvisioningArtifactOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateServiceActionWithProvisioningArtifact cancelled", ctx.Err())
	default:
		return d.AssociateServiceActionWithProvisioningArtifact(in)
	}
}

func (d *ServiceCatalogDouble) AssociateTagOptionWithResource(i0 *servicecatalog.AssociateTagOptionWithResourceInput) (r0 *servicecatalog.AssociateTagOptionWithResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateTagOptionWithResource", i0)
	r0, _ = returns[0].(*servicecatalog.AssociateTagOptionWithResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) AssociateTagOptionWithResourceRequest(i0 *servicecatalog.AssociateTagOptionWithResourceInput) (r0 *request.Request, r1 *servicecatalog.AssociateTagOptionWithResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateTagOptionWithResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.AssociateTagOptionWithResourceOutput)
	return
}

func (d *ServiceCatalogDouble) AssociateTagOptionWithResourceWithContext(i0 context.Context, i1 *servicecatalog.AssociateTagOptionWithResourceInput, i2 ...request.Option) (r0 *servicecatalog.AssociateTagOptionWithResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateTagOptionWithResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.AssociateTagOptionWithResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeAssociateTagOptionWithResourceWithContext(ctx context.Context, in *servicecatalog.AssociateTagOptionWithResourceInput, _ ...request.Option) (*servicecatalog.AssociateTagOptionWithResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateTagOptionWithResource cancelled", ctx.Err())
	default:
		return d.AssociateTagOptionWithResource(in)
	}
}

func (d *ServiceCatalogDouble) BatchAssociateServiceActionWithProvisioningArtifact(i0 *servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactInput) (r0 *servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchAssociateServiceActionWithProvisioningArtifact", i0)
	r0, _ = returns[0].(*servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) BatchAssociateServiceActionWithProvisioningArtifactRequest(i0 *servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactInput) (r0 *request.Request, r1 *servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchAssociateServiceActionWithProvisioningArtifactRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactOutput)
	return
}

func (d *ServiceCatalogDouble) BatchAssociateServiceActionWithProvisioningArtifactWithContext(i0 context.Context, i1 *servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactInput, i2 ...request.Option) (r0 *servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchAssociateServiceActionWithProvisioningArtifactWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeBatchAssociateServiceActionWithProvisioningArtifactWithContext(ctx context.Context, in *servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactInput, _ ...request.Option) (*servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchAssociateServiceActionWithProvisioningArtifact cancelled", ctx.Err())
	default:
		return d.BatchAssociateServiceActionWithProvisioningArtifact(in)
	}
}

func (d *ServiceCatalogDouble) BatchDisassociateServiceActionFromProvisioningArtifact(i0 *servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactInput) (r0 *servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDisassociateServiceActionFromProvisioningArtifact", i0)
	r0, _ = returns[0].(*servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) BatchDisassociateServiceActionFromProvisioningArtifactRequest(i0 *servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactInput) (r0 *request.Request, r1 *servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDisassociateServiceActionFromProvisioningArtifactRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactOutput)
	return
}

func (d *ServiceCatalogDouble) BatchDisassociateServiceActionFromProvisioningArtifactWithContext(i0 context.Context, i1 *servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactInput, i2 ...request.Option) (r0 *servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDisassociateServiceActionFromProvisioningArtifactWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeBatchDisassociateServiceActionFromProvisioningArtifactWithContext(ctx context.Context, in *servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactInput, _ ...request.Option) (*servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchDisassociateServiceActionFromProvisioningArtifact cancelled", ctx.Err())
	default:
		return d.BatchDisassociateServiceActionFromProvisioningArtifact(in)
	}
}

func (d *ServiceCatalogDouble) CopyProduct(i0 *servicecatalog.CopyProductInput) (r0 *servicecatalog.CopyProductOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyProduct", i0)
	r0, _ = returns[0].(*servicecatalog.CopyProductOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) CopyProductRequest(i0 *servicecatalog.CopyProductInput) (r0 *request.Request, r1 *servicecatalog.CopyProductOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyProductRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.CopyProductOutput)
	return
}

func (d *ServiceCatalogDouble) CopyProductWithContext(i0 context.Context, i1 *servicecatalog.CopyProductInput, i2 ...request.Option) (r0 *servicecatalog.CopyProductOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyProductWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.CopyProductOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeCopyProductWithContext(ctx context.Context, in *servicecatalog.CopyProductInput, _ ...request.Option) (*servicecatalog.CopyProductOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CopyProduct cancelled", ctx.Err())
	default:
		return d.CopyProduct(in)
	}
}

func (d *ServiceCatalogDouble) CreateConstraint(i0 *servicecatalog.CreateConstraintInput) (r0 *servicecatalog.CreateConstraintOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateConstraint", i0)
	r0, _ = returns[0].(*servicecatalog.CreateConstraintOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) CreateConstraintRequest(i0 *servicecatalog.CreateConstraintInput) (r0 *request.Request, r1 *servicecatalog.CreateConstraintOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateConstraintRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.CreateConstraintOutput)
	return
}

func (d *ServiceCatalogDouble) CreateConstraintWithContext(i0 context.Context, i1 *servicecatalog.CreateConstraintInput, i2 ...request.Option) (r0 *servicecatalog.CreateConstraintOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateConstraintWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.CreateConstraintOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeCreateConstraintWithContext(ctx context.Context, in *servicecatalog.CreateConstraintInput, _ ...request.Option) (*servicecatalog.CreateConstraintOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateConstraint cancelled", ctx.Err())
	default:
		return d.CreateConstraint(in)
	}
}

func (d *ServiceCatalogDouble) CreatePortfolio(i0 *servicecatalog.CreatePortfolioInput) (r0 *servicecatalog.CreatePortfolioOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePortfolio", i0)
	r0, _ = returns[0].(*servicecatalog.CreatePortfolioOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) CreatePortfolioRequest(i0 *servicecatalog.CreatePortfolioInput) (r0 *request.Request, r1 *servicecatalog.CreatePortfolioOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePortfolioRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.CreatePortfolioOutput)
	return
}

func (d *ServiceCatalogDouble) CreatePortfolioShare(i0 *servicecatalog.CreatePortfolioShareInput) (r0 *servicecatalog.CreatePortfolioShareOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePortfolioShare", i0)
	r0, _ = returns[0].(*servicecatalog.CreatePortfolioShareOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) CreatePortfolioShareRequest(i0 *servicecatalog.CreatePortfolioShareInput) (r0 *request.Request, r1 *servicecatalog.CreatePortfolioShareOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePortfolioShareRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.CreatePortfolioShareOutput)
	return
}

func (d *ServiceCatalogDouble) CreatePortfolioShareWithContext(i0 context.Context, i1 *servicecatalog.CreatePortfolioShareInput, i2 ...request.Option) (r0 *servicecatalog.CreatePortfolioShareOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePortfolioShareWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.CreatePortfolioShareOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeCreatePortfolioShareWithContext(ctx context.Context, in *servicecatalog.CreatePortfolioShareInput, _ ...request.Option) (*servicecatalog.CreatePortfolioShareOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreatePortfolioShare cancelled", ctx.Err())
	default:
		return d.CreatePortfolioShare(in)
	}
}

func (d *ServiceCatalogDouble) CreatePortfolioWithContext(i0 context.Context, i1 *servicecatalog.CreatePortfolioInput, i2 ...request.Option) (r0 *servicecatalog.CreatePortfolioOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePortfolioWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.CreatePortfolioOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeCreatePortfolioWithContext(ctx context.Context, in *servicecatalog.CreatePortfolioInput, _ ...request.Option) (*servicecatalog.CreatePortfolioOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreatePortfolio cancelled", ctx.Err())
	default:
		return d.CreatePortfolio(in)
	}
}

func (d *ServiceCatalogDouble) CreateProduct(i0 *servicecatalog.CreateProductInput) (r0 *servicecatalog.CreateProductOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProduct", i0)
	r0, _ = returns[0].(*servicecatalog.CreateProductOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) CreateProductRequest(i0 *servicecatalog.CreateProductInput) (r0 *request.Request, r1 *servicecatalog.CreateProductOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProductRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.CreateProductOutput)
	return
}

func (d *ServiceCatalogDouble) CreateProductWithContext(i0 context.Context, i1 *servicecatalog.CreateProductInput, i2 ...request.Option) (r0 *servicecatalog.CreateProductOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProductWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.CreateProductOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeCreateProductWithContext(ctx context.Context, in *servicecatalog.CreateProductInput, _ ...request.Option) (*servicecatalog.CreateProductOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateProduct cancelled", ctx.Err())
	default:
		return d.CreateProduct(in)
	}
}

func (d *ServiceCatalogDouble) CreateProvisionedProductPlan(i0 *servicecatalog.CreateProvisionedProductPlanInput) (r0 *servicecatalog.CreateProvisionedProductPlanOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProvisionedProductPlan", i0)
	r0, _ = returns[0].(*servicecatalog.CreateProvisionedProductPlanOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) CreateProvisionedProductPlanRequest(i0 *servicecatalog.CreateProvisionedProductPlanInput) (r0 *request.Request, r1 *servicecatalog.CreateProvisionedProductPlanOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProvisionedProductPlanRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.CreateProvisionedProductPlanOutput)
	return
}

func (d *ServiceCatalogDouble) CreateProvisionedProductPlanWithContext(i0 context.Context, i1 *servicecatalog.CreateProvisionedProductPlanInput, i2 ...request.Option) (r0 *servicecatalog.CreateProvisionedProductPlanOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProvisionedProductPlanWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.CreateProvisionedProductPlanOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeCreateProvisionedProductPlanWithContext(ctx context.Context, in *servicecatalog.CreateProvisionedProductPlanInput, _ ...request.Option) (*servicecatalog.CreateProvisionedProductPlanOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateProvisionedProductPlan cancelled", ctx.Err())
	default:
		return d.CreateProvisionedProductPlan(in)
	}
}

func (d *ServiceCatalogDouble) CreateProvisioningArtifact(i0 *servicecatalog.CreateProvisioningArtifactInput) (r0 *servicecatalog.CreateProvisioningArtifactOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProvisioningArtifact", i0)
	r0, _ = returns[0].(*servicecatalog.CreateProvisioningArtifactOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) CreateProvisioningArtifactRequest(i0 *servicecatalog.CreateProvisioningArtifactInput) (r0 *request.Request, r1 *servicecatalog.CreateProvisioningArtifactOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProvisioningArtifactRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.CreateProvisioningArtifactOutput)
	return
}

func (d *ServiceCatalogDouble) CreateProvisioningArtifactWithContext(i0 context.Context, i1 *servicecatalog.CreateProvisioningArtifactInput, i2 ...request.Option) (r0 *servicecatalog.CreateProvisioningArtifactOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProvisioningArtifactWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.CreateProvisioningArtifactOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeCreateProvisioningArtifactWithContext(ctx context.Context, in *servicecatalog.CreateProvisioningArtifactInput, _ ...request.Option) (*servicecatalog.CreateProvisioningArtifactOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateProvisioningArtifact cancelled", ctx.Err())
	default:
		return d.CreateProvisioningArtifact(in)
	}
}

func (d *ServiceCatalogDouble) CreateServiceAction(i0 *servicecatalog.CreateServiceActionInput) (r0 *servicecatalog.CreateServiceActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateServiceAction", i0)
	r0, _ = returns[0].(*servicecatalog.CreateServiceActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) CreateServiceActionRequest(i0 *servicecatalog.CreateServiceActionInput) (r0 *request.Request, r1 *servicecatalog.CreateServiceActionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateServiceActionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.CreateServiceActionOutput)
	return
}

func (d *ServiceCatalogDouble) CreateServiceActionWithContext(i0 context.Context, i1 *servicecatalog.CreateServiceActionInput, i2 ...request.Option) (r0 *servicecatalog.CreateServiceActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateServiceActionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.CreateServiceActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeCreateServiceActionWithContext(ctx context.Context, in *servicecatalog.CreateServiceActionInput, _ ...request.Option) (*servicecatalog.CreateServiceActionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateServiceAction cancelled", ctx.Err())
	default:
		return d.CreateServiceAction(in)
	}
}

func (d *ServiceCatalogDouble) CreateTagOption(i0 *servicecatalog.CreateTagOptionInput) (r0 *servicecatalog.CreateTagOptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTagOption", i0)
	r0, _ = returns[0].(*servicecatalog.CreateTagOptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) CreateTagOptionRequest(i0 *servicecatalog.CreateTagOptionInput) (r0 *request.Request, r1 *servicecatalog.CreateTagOptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTagOptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.CreateTagOptionOutput)
	return
}

func (d *ServiceCatalogDouble) CreateTagOptionWithContext(i0 context.Context, i1 *servicecatalog.CreateTagOptionInput, i2 ...request.Option) (r0 *servicecatalog.CreateTagOptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTagOptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.CreateTagOptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeCreateTagOptionWithContext(ctx context.Context, in *servicecatalog.CreateTagOptionInput, _ ...request.Option) (*servicecatalog.CreateTagOptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTagOption cancelled", ctx.Err())
	default:
		return d.CreateTagOption(in)
	}
}

func (d *ServiceCatalogDouble) DeleteConstraint(i0 *servicecatalog.DeleteConstraintInput) (r0 *servicecatalog.DeleteConstraintOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteConstraint", i0)
	r0, _ = returns[0].(*servicecatalog.DeleteConstraintOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) DeleteConstraintRequest(i0 *servicecatalog.DeleteConstraintInput) (r0 *request.Request, r1 *servicecatalog.DeleteConstraintOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteConstraintRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.DeleteConstraintOutput)
	return
}

func (d *ServiceCatalogDouble) DeleteConstraintWithContext(i0 context.Context, i1 *servicecatalog.DeleteConstraintInput, i2 ...request.Option) (r0 *servicecatalog.DeleteConstraintOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteConstraintWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.DeleteConstraintOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeDeleteConstraintWithContext(ctx context.Context, in *servicecatalog.DeleteConstraintInput, _ ...request.Option) (*servicecatalog.DeleteConstraintOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteConstraint cancelled", ctx.Err())
	default:
		return d.DeleteConstraint(in)
	}
}

func (d *ServiceCatalogDouble) DeletePortfolio(i0 *servicecatalog.DeletePortfolioInput) (r0 *servicecatalog.DeletePortfolioOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePortfolio", i0)
	r0, _ = returns[0].(*servicecatalog.DeletePortfolioOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) DeletePortfolioRequest(i0 *servicecatalog.DeletePortfolioInput) (r0 *request.Request, r1 *servicecatalog.DeletePortfolioOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePortfolioRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.DeletePortfolioOutput)
	return
}

func (d *ServiceCatalogDouble) DeletePortfolioShare(i0 *servicecatalog.DeletePortfolioShareInput) (r0 *servicecatalog.DeletePortfolioShareOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePortfolioShare", i0)
	r0, _ = returns[0].(*servicecatalog.DeletePortfolioShareOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) DeletePortfolioShareRequest(i0 *servicecatalog.DeletePortfolioShareInput) (r0 *request.Request, r1 *servicecatalog.DeletePortfolioShareOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePortfolioShareRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.DeletePortfolioShareOutput)
	return
}

func (d *ServiceCatalogDouble) DeletePortfolioShareWithContext(i0 context.Context, i1 *servicecatalog.DeletePortfolioShareInput, i2 ...request.Option) (r0 *servicecatalog.DeletePortfolioShareOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePortfolioShareWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.DeletePortfolioShareOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeDeletePortfolioShareWithContext(ctx context.Context, in *servicecatalog.DeletePortfolioShareInput, _ ...request.Option) (*servicecatalog.DeletePortfolioShareOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeletePortfolioShare cancelled", ctx.Err())
	default:
		return d.DeletePortfolioShare(in)
	}
}

func (d *ServiceCatalogDouble) DeletePortfolioWithContext(i0 context.Context, i1 *servicecatalog.DeletePortfolioInput, i2 ...request.Option) (r0 *servicecatalog.DeletePortfolioOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePortfolioWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.DeletePortfolioOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeDeletePortfolioWithContext(ctx context.Context, in *servicecatalog.DeletePortfolioInput, _ ...request.Option) (*servicecatalog.DeletePortfolioOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeletePortfolio cancelled", ctx.Err())
	default:
		return d.DeletePortfolio(in)
	}
}

func (d *ServiceCatalogDouble) DeleteProduct(i0 *servicecatalog.DeleteProductInput) (r0 *servicecatalog.DeleteProductOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteProduct", i0)
	r0, _ = returns[0].(*servicecatalog.DeleteProductOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) DeleteProductRequest(i0 *servicecatalog.DeleteProductInput) (r0 *request.Request, r1 *servicecatalog.DeleteProductOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteProductRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.DeleteProductOutput)
	return
}

func (d *ServiceCatalogDouble) DeleteProductWithContext(i0 context.Context, i1 *servicecatalog.DeleteProductInput, i2 ...request.Option) (r0 *servicecatalog.DeleteProductOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteProductWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.DeleteProductOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeDeleteProductWithContext(ctx context.Context, in *servicecatalog.DeleteProductInput, _ ...request.Option) (*servicecatalog.DeleteProductOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteProduct cancelled", ctx.Err())
	default:
		return d.DeleteProduct(in)
	}
}

func (d *ServiceCatalogDouble) DeleteProvisionedProductPlan(i0 *servicecatalog.DeleteProvisionedProductPlanInput) (r0 *servicecatalog.DeleteProvisionedProductPlanOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteProvisionedProductPlan", i0)
	r0, _ = returns[0].(*servicecatalog.DeleteProvisionedProductPlanOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) DeleteProvisionedProductPlanRequest(i0 *servicecatalog.DeleteProvisionedProductPlanInput) (r0 *request.Request, r1 *servicecatalog.DeleteProvisionedProductPlanOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteProvisionedProductPlanRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.DeleteProvisionedProductPlanOutput)
	return
}

func (d *ServiceCatalogDouble) DeleteProvisionedProductPlanWithContext(i0 context.Context, i1 *servicecatalog.DeleteProvisionedProductPlanInput, i2 ...request.Option) (r0 *servicecatalog.DeleteProvisionedProductPlanOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteProvisionedProductPlanWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.DeleteProvisionedProductPlanOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeDeleteProvisionedProductPlanWithContext(ctx context.Context, in *servicecatalog.DeleteProvisionedProductPlanInput, _ ...request.Option) (*servicecatalog.DeleteProvisionedProductPlanOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteProvisionedProductPlan cancelled", ctx.Err())
	default:
		return d.DeleteProvisionedProductPlan(in)
	}
}

func (d *ServiceCatalogDouble) DeleteProvisioningArtifact(i0 *servicecatalog.DeleteProvisioningArtifactInput) (r0 *servicecatalog.DeleteProvisioningArtifactOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteProvisioningArtifact", i0)
	r0, _ = returns[0].(*servicecatalog.DeleteProvisioningArtifactOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) DeleteProvisioningArtifactRequest(i0 *servicecatalog.DeleteProvisioningArtifactInput) (r0 *request.Request, r1 *servicecatalog.DeleteProvisioningArtifactOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteProvisioningArtifactRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.DeleteProvisioningArtifactOutput)
	return
}

func (d *ServiceCatalogDouble) DeleteProvisioningArtifactWithContext(i0 context.Context, i1 *servicecatalog.DeleteProvisioningArtifactInput, i2 ...request.Option) (r0 *servicecatalog.DeleteProvisioningArtifactOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteProvisioningArtifactWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.DeleteProvisioningArtifactOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeDeleteProvisioningArtifactWithContext(ctx context.Context, in *servicecatalog.DeleteProvisioningArtifactInput, _ ...request.Option) (*servicecatalog.DeleteProvisioningArtifactOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteProvisioningArtifact cancelled", ctx.Err())
	default:
		return d.DeleteProvisioningArtifact(in)
	}
}

func (d *ServiceCatalogDouble) DeleteServiceAction(i0 *servicecatalog.DeleteServiceActionInput) (r0 *servicecatalog.DeleteServiceActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteServiceAction", i0)
	r0, _ = returns[0].(*servicecatalog.DeleteServiceActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) DeleteServiceActionRequest(i0 *servicecatalog.DeleteServiceActionInput) (r0 *request.Request, r1 *servicecatalog.DeleteServiceActionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteServiceActionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.DeleteServiceActionOutput)
	return
}

func (d *ServiceCatalogDouble) DeleteServiceActionWithContext(i0 context.Context, i1 *servicecatalog.DeleteServiceActionInput, i2 ...request.Option) (r0 *servicecatalog.DeleteServiceActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteServiceActionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.DeleteServiceActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeDeleteServiceActionWithContext(ctx context.Context, in *servicecatalog.DeleteServiceActionInput, _ ...request.Option) (*servicecatalog.DeleteServiceActionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteServiceAction cancelled", ctx.Err())
	default:
		return d.DeleteServiceAction(in)
	}
}

func (d *ServiceCatalogDouble) DeleteTagOption(i0 *servicecatalog.DeleteTagOptionInput) (r0 *servicecatalog.DeleteTagOptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTagOption", i0)
	r0, _ = returns[0].(*servicecatalog.DeleteTagOptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) DeleteTagOptionRequest(i0 *servicecatalog.DeleteTagOptionInput) (r0 *request.Request, r1 *servicecatalog.DeleteTagOptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTagOptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.DeleteTagOptionOutput)
	return
}

func (d *ServiceCatalogDouble) DeleteTagOptionWithContext(i0 context.Context, i1 *servicecatalog.DeleteTagOptionInput, i2 ...request.Option) (r0 *servicecatalog.DeleteTagOptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTagOptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.DeleteTagOptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeDeleteTagOptionWithContext(ctx context.Context, in *servicecatalog.DeleteTagOptionInput, _ ...request.Option) (*servicecatalog.DeleteTagOptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTagOption cancelled", ctx.Err())
	default:
		return d.DeleteTagOption(in)
	}
}

func (d *ServiceCatalogDouble) DescribeConstraint(i0 *servicecatalog.DescribeConstraintInput) (r0 *servicecatalog.DescribeConstraintOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConstraint", i0)
	r0, _ = returns[0].(*servicecatalog.DescribeConstraintOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) DescribeConstraintRequest(i0 *servicecatalog.DescribeConstraintInput) (r0 *request.Request, r1 *servicecatalog.DescribeConstraintOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConstraintRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.DescribeConstraintOutput)
	return
}

func (d *ServiceCatalogDouble) DescribeConstraintWithContext(i0 context.Context, i1 *servicecatalog.DescribeConstraintInput, i2 ...request.Option) (r0 *servicecatalog.DescribeConstraintOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConstraintWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.DescribeConstraintOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeDescribeConstraintWithContext(ctx context.Context, in *servicecatalog.DescribeConstraintInput, _ ...request.Option) (*servicecatalog.DescribeConstraintOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeConstraint cancelled", ctx.Err())
	default:
		return d.DescribeConstraint(in)
	}
}

func (d *ServiceCatalogDouble) DescribeCopyProductStatus(i0 *servicecatalog.DescribeCopyProductStatusInput) (r0 *servicecatalog.DescribeCopyProductStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCopyProductStatus", i0)
	r0, _ = returns[0].(*servicecatalog.DescribeCopyProductStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) DescribeCopyProductStatusRequest(i0 *servicecatalog.DescribeCopyProductStatusInput) (r0 *request.Request, r1 *servicecatalog.DescribeCopyProductStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCopyProductStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.DescribeCopyProductStatusOutput)
	return
}

func (d *ServiceCatalogDouble) DescribeCopyProductStatusWithContext(i0 context.Context, i1 *servicecatalog.DescribeCopyProductStatusInput, i2 ...request.Option) (r0 *servicecatalog.DescribeCopyProductStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCopyProductStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.DescribeCopyProductStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeDescribeCopyProductStatusWithContext(ctx context.Context, in *servicecatalog.DescribeCopyProductStatusInput, _ ...request.Option) (*servicecatalog.DescribeCopyProductStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeCopyProductStatus cancelled", ctx.Err())
	default:
		return d.DescribeCopyProductStatus(in)
	}
}

func (d *ServiceCatalogDouble) DescribePortfolio(i0 *servicecatalog.DescribePortfolioInput) (r0 *servicecatalog.DescribePortfolioOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePortfolio", i0)
	r0, _ = returns[0].(*servicecatalog.DescribePortfolioOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) DescribePortfolioRequest(i0 *servicecatalog.DescribePortfolioInput) (r0 *request.Request, r1 *servicecatalog.DescribePortfolioOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePortfolioRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.DescribePortfolioOutput)
	return
}

func (d *ServiceCatalogDouble) DescribePortfolioShareStatus(i0 *servicecatalog.DescribePortfolioShareStatusInput) (r0 *servicecatalog.DescribePortfolioShareStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePortfolioShareStatus", i0)
	r0, _ = returns[0].(*servicecatalog.DescribePortfolioShareStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) DescribePortfolioShareStatusRequest(i0 *servicecatalog.DescribePortfolioShareStatusInput) (r0 *request.Request, r1 *servicecatalog.DescribePortfolioShareStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePortfolioShareStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.DescribePortfolioShareStatusOutput)
	return
}

func (d *ServiceCatalogDouble) DescribePortfolioShareStatusWithContext(i0 context.Context, i1 *servicecatalog.DescribePortfolioShareStatusInput, i2 ...request.Option) (r0 *servicecatalog.DescribePortfolioShareStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePortfolioShareStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.DescribePortfolioShareStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeDescribePortfolioShareStatusWithContext(ctx context.Context, in *servicecatalog.DescribePortfolioShareStatusInput, _ ...request.Option) (*servicecatalog.DescribePortfolioShareStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribePortfolioShareStatus cancelled", ctx.Err())
	default:
		return d.DescribePortfolioShareStatus(in)
	}
}

func (d *ServiceCatalogDouble) DescribePortfolioWithContext(i0 context.Context, i1 *servicecatalog.DescribePortfolioInput, i2 ...request.Option) (r0 *servicecatalog.DescribePortfolioOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePortfolioWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.DescribePortfolioOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeDescribePortfolioWithContext(ctx context.Context, in *servicecatalog.DescribePortfolioInput, _ ...request.Option) (*servicecatalog.DescribePortfolioOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribePortfolio cancelled", ctx.Err())
	default:
		return d.DescribePortfolio(in)
	}
}

func (d *ServiceCatalogDouble) DescribeProduct(i0 *servicecatalog.DescribeProductInput) (r0 *servicecatalog.DescribeProductOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProduct", i0)
	r0, _ = returns[0].(*servicecatalog.DescribeProductOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) DescribeProductAsAdmin(i0 *servicecatalog.DescribeProductAsAdminInput) (r0 *servicecatalog.DescribeProductAsAdminOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProductAsAdmin", i0)
	r0, _ = returns[0].(*servicecatalog.DescribeProductAsAdminOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) DescribeProductAsAdminRequest(i0 *servicecatalog.DescribeProductAsAdminInput) (r0 *request.Request, r1 *servicecatalog.DescribeProductAsAdminOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProductAsAdminRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.DescribeProductAsAdminOutput)
	return
}

func (d *ServiceCatalogDouble) DescribeProductAsAdminWithContext(i0 context.Context, i1 *servicecatalog.DescribeProductAsAdminInput, i2 ...request.Option) (r0 *servicecatalog.DescribeProductAsAdminOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProductAsAdminWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.DescribeProductAsAdminOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeDescribeProductAsAdminWithContext(ctx context.Context, in *servicecatalog.DescribeProductAsAdminInput, _ ...request.Option) (*servicecatalog.DescribeProductAsAdminOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeProductAsAdmin cancelled", ctx.Err())
	default:
		return d.DescribeProductAsAdmin(in)
	}
}

func (d *ServiceCatalogDouble) DescribeProductRequest(i0 *servicecatalog.DescribeProductInput) (r0 *request.Request, r1 *servicecatalog.DescribeProductOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProductRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.DescribeProductOutput)
	return
}

func (d *ServiceCatalogDouble) DescribeProductView(i0 *servicecatalog.DescribeProductViewInput) (r0 *servicecatalog.DescribeProductViewOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProductView", i0)
	r0, _ = returns[0].(*servicecatalog.DescribeProductViewOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) DescribeProductViewRequest(i0 *servicecatalog.DescribeProductViewInput) (r0 *request.Request, r1 *servicecatalog.DescribeProductViewOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProductViewRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.DescribeProductViewOutput)
	return
}

func (d *ServiceCatalogDouble) DescribeProductViewWithContext(i0 context.Context, i1 *servicecatalog.DescribeProductViewInput, i2 ...request.Option) (r0 *servicecatalog.DescribeProductViewOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProductViewWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.DescribeProductViewOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeDescribeProductViewWithContext(ctx context.Context, in *servicecatalog.DescribeProductViewInput, _ ...request.Option) (*servicecatalog.DescribeProductViewOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeProductView cancelled", ctx.Err())
	default:
		return d.DescribeProductView(in)
	}
}

func (d *ServiceCatalogDouble) DescribeProductWithContext(i0 context.Context, i1 *servicecatalog.DescribeProductInput, i2 ...request.Option) (r0 *servicecatalog.DescribeProductOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProductWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.DescribeProductOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeDescribeProductWithContext(ctx context.Context, in *servicecatalog.DescribeProductInput, _ ...request.Option) (*servicecatalog.DescribeProductOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeProduct cancelled", ctx.Err())
	default:
		return d.DescribeProduct(in)
	}
}

func (d *ServiceCatalogDouble) DescribeProvisionedProduct(i0 *servicecatalog.DescribeProvisionedProductInput) (r0 *servicecatalog.DescribeProvisionedProductOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProvisionedProduct", i0)
	r0, _ = returns[0].(*servicecatalog.DescribeProvisionedProductOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) DescribeProvisionedProductPlan(i0 *servicecatalog.DescribeProvisionedProductPlanInput) (r0 *servicecatalog.DescribeProvisionedProductPlanOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProvisionedProductPlan", i0)
	r0, _ = returns[0].(*servicecatalog.DescribeProvisionedProductPlanOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) DescribeProvisionedProductPlanRequest(i0 *servicecatalog.DescribeProvisionedProductPlanInput) (r0 *request.Request, r1 *servicecatalog.DescribeProvisionedProductPlanOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProvisionedProductPlanRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.DescribeProvisionedProductPlanOutput)
	return
}

func (d *ServiceCatalogDouble) DescribeProvisionedProductPlanWithContext(i0 context.Context, i1 *servicecatalog.DescribeProvisionedProductPlanInput, i2 ...request.Option) (r0 *servicecatalog.DescribeProvisionedProductPlanOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProvisionedProductPlanWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.DescribeProvisionedProductPlanOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeDescribeProvisionedProductPlanWithContext(ctx context.Context, in *servicecatalog.DescribeProvisionedProductPlanInput, _ ...request.Option) (*servicecatalog.DescribeProvisionedProductPlanOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeProvisionedProductPlan cancelled", ctx.Err())
	default:
		return d.DescribeProvisionedProductPlan(in)
	}
}

func (d *ServiceCatalogDouble) DescribeProvisionedProductRequest(i0 *servicecatalog.DescribeProvisionedProductInput) (r0 *request.Request, r1 *servicecatalog.DescribeProvisionedProductOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProvisionedProductRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.DescribeProvisionedProductOutput)
	return
}

func (d *ServiceCatalogDouble) DescribeProvisionedProductWithContext(i0 context.Context, i1 *servicecatalog.DescribeProvisionedProductInput, i2 ...request.Option) (r0 *servicecatalog.DescribeProvisionedProductOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProvisionedProductWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.DescribeProvisionedProductOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeDescribeProvisionedProductWithContext(ctx context.Context, in *servicecatalog.DescribeProvisionedProductInput, _ ...request.Option) (*servicecatalog.DescribeProvisionedProductOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeProvisionedProduct cancelled", ctx.Err())
	default:
		return d.DescribeProvisionedProduct(in)
	}
}

func (d *ServiceCatalogDouble) DescribeProvisioningArtifact(i0 *servicecatalog.DescribeProvisioningArtifactInput) (r0 *servicecatalog.DescribeProvisioningArtifactOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProvisioningArtifact", i0)
	r0, _ = returns[0].(*servicecatalog.DescribeProvisioningArtifactOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) DescribeProvisioningArtifactRequest(i0 *servicecatalog.DescribeProvisioningArtifactInput) (r0 *request.Request, r1 *servicecatalog.DescribeProvisioningArtifactOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProvisioningArtifactRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.DescribeProvisioningArtifactOutput)
	return
}

func (d *ServiceCatalogDouble) DescribeProvisioningArtifactWithContext(i0 context.Context, i1 *servicecatalog.DescribeProvisioningArtifactInput, i2 ...request.Option) (r0 *servicecatalog.DescribeProvisioningArtifactOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProvisioningArtifactWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.DescribeProvisioningArtifactOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeDescribeProvisioningArtifactWithContext(ctx context.Context, in *servicecatalog.DescribeProvisioningArtifactInput, _ ...request.Option) (*servicecatalog.DescribeProvisioningArtifactOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeProvisioningArtifact cancelled", ctx.Err())
	default:
		return d.DescribeProvisioningArtifact(in)
	}
}

func (d *ServiceCatalogDouble) DescribeProvisioningParameters(i0 *servicecatalog.DescribeProvisioningParametersInput) (r0 *servicecatalog.DescribeProvisioningParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProvisioningParameters", i0)
	r0, _ = returns[0].(*servicecatalog.DescribeProvisioningParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) DescribeProvisioningParametersRequest(i0 *servicecatalog.DescribeProvisioningParametersInput) (r0 *request.Request, r1 *servicecatalog.DescribeProvisioningParametersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProvisioningParametersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.DescribeProvisioningParametersOutput)
	return
}

func (d *ServiceCatalogDouble) DescribeProvisioningParametersWithContext(i0 context.Context, i1 *servicecatalog.DescribeProvisioningParametersInput, i2 ...request.Option) (r0 *servicecatalog.DescribeProvisioningParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProvisioningParametersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.DescribeProvisioningParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeDescribeProvisioningParametersWithContext(ctx context.Context, in *servicecatalog.DescribeProvisioningParametersInput, _ ...request.Option) (*servicecatalog.DescribeProvisioningParametersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeProvisioningParameters cancelled", ctx.Err())
	default:
		return d.DescribeProvisioningParameters(in)
	}
}

func (d *ServiceCatalogDouble) DescribeRecord(i0 *servicecatalog.DescribeRecordInput) (r0 *servicecatalog.DescribeRecordOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRecord", i0)
	r0, _ = returns[0].(*servicecatalog.DescribeRecordOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) DescribeRecordRequest(i0 *servicecatalog.DescribeRecordInput) (r0 *request.Request, r1 *servicecatalog.DescribeRecordOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRecordRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.DescribeRecordOutput)
	return
}

func (d *ServiceCatalogDouble) DescribeRecordWithContext(i0 context.Context, i1 *servicecatalog.DescribeRecordInput, i2 ...request.Option) (r0 *servicecatalog.DescribeRecordOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRecordWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.DescribeRecordOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeDescribeRecordWithContext(ctx context.Context, in *servicecatalog.DescribeRecordInput, _ ...request.Option) (*servicecatalog.DescribeRecordOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeRecord cancelled", ctx.Err())
	default:
		return d.DescribeRecord(in)
	}
}

func (d *ServiceCatalogDouble) DescribeServiceAction(i0 *servicecatalog.DescribeServiceActionInput) (r0 *servicecatalog.DescribeServiceActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeServiceAction", i0)
	r0, _ = returns[0].(*servicecatalog.DescribeServiceActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) DescribeServiceActionExecutionParameters(i0 *servicecatalog.DescribeServiceActionExecutionParametersInput) (r0 *servicecatalog.DescribeServiceActionExecutionParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeServiceActionExecutionParameters", i0)
	r0, _ = returns[0].(*servicecatalog.DescribeServiceActionExecutionParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) DescribeServiceActionExecutionParametersRequest(i0 *servicecatalog.DescribeServiceActionExecutionParametersInput) (r0 *request.Request, r1 *servicecatalog.DescribeServiceActionExecutionParametersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeServiceActionExecutionParametersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.DescribeServiceActionExecutionParametersOutput)
	return
}

func (d *ServiceCatalogDouble) DescribeServiceActionExecutionParametersWithContext(i0 context.Context, i1 *servicecatalog.DescribeServiceActionExecutionParametersInput, i2 ...request.Option) (r0 *servicecatalog.DescribeServiceActionExecutionParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeServiceActionExecutionParametersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.DescribeServiceActionExecutionParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeDescribeServiceActionExecutionParametersWithContext(ctx context.Context, in *servicecatalog.DescribeServiceActionExecutionParametersInput, _ ...request.Option) (*servicecatalog.DescribeServiceActionExecutionParametersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeServiceActionExecutionParameters cancelled", ctx.Err())
	default:
		return d.DescribeServiceActionExecutionParameters(in)
	}
}

func (d *ServiceCatalogDouble) DescribeServiceActionRequest(i0 *servicecatalog.DescribeServiceActionInput) (r0 *request.Request, r1 *servicecatalog.DescribeServiceActionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeServiceActionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.DescribeServiceActionOutput)
	return
}

func (d *ServiceCatalogDouble) DescribeServiceActionWithContext(i0 context.Context, i1 *servicecatalog.DescribeServiceActionInput, i2 ...request.Option) (r0 *servicecatalog.DescribeServiceActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeServiceActionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.DescribeServiceActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeDescribeServiceActionWithContext(ctx context.Context, in *servicecatalog.DescribeServiceActionInput, _ ...request.Option) (*servicecatalog.DescribeServiceActionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeServiceAction cancelled", ctx.Err())
	default:
		return d.DescribeServiceAction(in)
	}
}

func (d *ServiceCatalogDouble) DescribeTagOption(i0 *servicecatalog.DescribeTagOptionInput) (r0 *servicecatalog.DescribeTagOptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTagOption", i0)
	r0, _ = returns[0].(*servicecatalog.DescribeTagOptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) DescribeTagOptionRequest(i0 *servicecatalog.DescribeTagOptionInput) (r0 *request.Request, r1 *servicecatalog.DescribeTagOptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTagOptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.DescribeTagOptionOutput)
	return
}

func (d *ServiceCatalogDouble) DescribeTagOptionWithContext(i0 context.Context, i1 *servicecatalog.DescribeTagOptionInput, i2 ...request.Option) (r0 *servicecatalog.DescribeTagOptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTagOptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.DescribeTagOptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeDescribeTagOptionWithContext(ctx context.Context, in *servicecatalog.DescribeTagOptionInput, _ ...request.Option) (*servicecatalog.DescribeTagOptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTagOption cancelled", ctx.Err())
	default:
		return d.DescribeTagOption(in)
	}
}

func (d *ServiceCatalogDouble) DisableAWSOrganizationsAccess(i0 *servicecatalog.DisableAWSOrganizationsAccessInput) (r0 *servicecatalog.DisableAWSOrganizationsAccessOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableAWSOrganizationsAccess", i0)
	r0, _ = returns[0].(*servicecatalog.DisableAWSOrganizationsAccessOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) DisableAWSOrganizationsAccessRequest(i0 *servicecatalog.DisableAWSOrganizationsAccessInput) (r0 *request.Request, r1 *servicecatalog.DisableAWSOrganizationsAccessOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableAWSOrganizationsAccessRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.DisableAWSOrganizationsAccessOutput)
	return
}

func (d *ServiceCatalogDouble) DisableAWSOrganizationsAccessWithContext(i0 context.Context, i1 *servicecatalog.DisableAWSOrganizationsAccessInput, i2 ...request.Option) (r0 *servicecatalog.DisableAWSOrganizationsAccessOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableAWSOrganizationsAccessWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.DisableAWSOrganizationsAccessOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeDisableAWSOrganizationsAccessWithContext(ctx context.Context, in *servicecatalog.DisableAWSOrganizationsAccessInput, _ ...request.Option) (*servicecatalog.DisableAWSOrganizationsAccessOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisableAWSOrganizationsAccess cancelled", ctx.Err())
	default:
		return d.DisableAWSOrganizationsAccess(in)
	}
}

func (d *ServiceCatalogDouble) DisassociateBudgetFromResource(i0 *servicecatalog.DisassociateBudgetFromResourceInput) (r0 *servicecatalog.DisassociateBudgetFromResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateBudgetFromResource", i0)
	r0, _ = returns[0].(*servicecatalog.DisassociateBudgetFromResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) DisassociateBudgetFromResourceRequest(i0 *servicecatalog.DisassociateBudgetFromResourceInput) (r0 *request.Request, r1 *servicecatalog.DisassociateBudgetFromResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateBudgetFromResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.DisassociateBudgetFromResourceOutput)
	return
}

func (d *ServiceCatalogDouble) DisassociateBudgetFromResourceWithContext(i0 context.Context, i1 *servicecatalog.DisassociateBudgetFromResourceInput, i2 ...request.Option) (r0 *servicecatalog.DisassociateBudgetFromResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateBudgetFromResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.DisassociateBudgetFromResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeDisassociateBudgetFromResourceWithContext(ctx context.Context, in *servicecatalog.DisassociateBudgetFromResourceInput, _ ...request.Option) (*servicecatalog.DisassociateBudgetFromResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateBudgetFromResource cancelled", ctx.Err())
	default:
		return d.DisassociateBudgetFromResource(in)
	}
}

func (d *ServiceCatalogDouble) DisassociatePrincipalFromPortfolio(i0 *servicecatalog.DisassociatePrincipalFromPortfolioInput) (r0 *servicecatalog.DisassociatePrincipalFromPortfolioOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociatePrincipalFromPortfolio", i0)
	r0, _ = returns[0].(*servicecatalog.DisassociatePrincipalFromPortfolioOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) DisassociatePrincipalFromPortfolioRequest(i0 *servicecatalog.DisassociatePrincipalFromPortfolioInput) (r0 *request.Request, r1 *servicecatalog.DisassociatePrincipalFromPortfolioOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociatePrincipalFromPortfolioRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.DisassociatePrincipalFromPortfolioOutput)
	return
}

func (d *ServiceCatalogDouble) DisassociatePrincipalFromPortfolioWithContext(i0 context.Context, i1 *servicecatalog.DisassociatePrincipalFromPortfolioInput, i2 ...request.Option) (r0 *servicecatalog.DisassociatePrincipalFromPortfolioOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociatePrincipalFromPortfolioWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.DisassociatePrincipalFromPortfolioOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeDisassociatePrincipalFromPortfolioWithContext(ctx context.Context, in *servicecatalog.DisassociatePrincipalFromPortfolioInput, _ ...request.Option) (*servicecatalog.DisassociatePrincipalFromPortfolioOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociatePrincipalFromPortfolio cancelled", ctx.Err())
	default:
		return d.DisassociatePrincipalFromPortfolio(in)
	}
}

func (d *ServiceCatalogDouble) DisassociateProductFromPortfolio(i0 *servicecatalog.DisassociateProductFromPortfolioInput) (r0 *servicecatalog.DisassociateProductFromPortfolioOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateProductFromPortfolio", i0)
	r0, _ = returns[0].(*servicecatalog.DisassociateProductFromPortfolioOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) DisassociateProductFromPortfolioRequest(i0 *servicecatalog.DisassociateProductFromPortfolioInput) (r0 *request.Request, r1 *servicecatalog.DisassociateProductFromPortfolioOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateProductFromPortfolioRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.DisassociateProductFromPortfolioOutput)
	return
}

func (d *ServiceCatalogDouble) DisassociateProductFromPortfolioWithContext(i0 context.Context, i1 *servicecatalog.DisassociateProductFromPortfolioInput, i2 ...request.Option) (r0 *servicecatalog.DisassociateProductFromPortfolioOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateProductFromPortfolioWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.DisassociateProductFromPortfolioOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeDisassociateProductFromPortfolioWithContext(ctx context.Context, in *servicecatalog.DisassociateProductFromPortfolioInput, _ ...request.Option) (*servicecatalog.DisassociateProductFromPortfolioOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateProductFromPortfolio cancelled", ctx.Err())
	default:
		return d.DisassociateProductFromPortfolio(in)
	}
}

func (d *ServiceCatalogDouble) DisassociateServiceActionFromProvisioningArtifact(i0 *servicecatalog.DisassociateServiceActionFromProvisioningArtifactInput) (r0 *servicecatalog.DisassociateServiceActionFromProvisioningArtifactOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateServiceActionFromProvisioningArtifact", i0)
	r0, _ = returns[0].(*servicecatalog.DisassociateServiceActionFromProvisioningArtifactOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) DisassociateServiceActionFromProvisioningArtifactRequest(i0 *servicecatalog.DisassociateServiceActionFromProvisioningArtifactInput) (r0 *request.Request, r1 *servicecatalog.DisassociateServiceActionFromProvisioningArtifactOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateServiceActionFromProvisioningArtifactRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.DisassociateServiceActionFromProvisioningArtifactOutput)
	return
}

func (d *ServiceCatalogDouble) DisassociateServiceActionFromProvisioningArtifactWithContext(i0 context.Context, i1 *servicecatalog.DisassociateServiceActionFromProvisioningArtifactInput, i2 ...request.Option) (r0 *servicecatalog.DisassociateServiceActionFromProvisioningArtifactOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateServiceActionFromProvisioningArtifactWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.DisassociateServiceActionFromProvisioningArtifactOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeDisassociateServiceActionFromProvisioningArtifactWithContext(ctx context.Context, in *servicecatalog.DisassociateServiceActionFromProvisioningArtifactInput, _ ...request.Option) (*servicecatalog.DisassociateServiceActionFromProvisioningArtifactOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateServiceActionFromProvisioningArtifact cancelled", ctx.Err())
	default:
		return d.DisassociateServiceActionFromProvisioningArtifact(in)
	}
}

func (d *ServiceCatalogDouble) DisassociateTagOptionFromResource(i0 *servicecatalog.DisassociateTagOptionFromResourceInput) (r0 *servicecatalog.DisassociateTagOptionFromResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateTagOptionFromResource", i0)
	r0, _ = returns[0].(*servicecatalog.DisassociateTagOptionFromResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) DisassociateTagOptionFromResourceRequest(i0 *servicecatalog.DisassociateTagOptionFromResourceInput) (r0 *request.Request, r1 *servicecatalog.DisassociateTagOptionFromResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateTagOptionFromResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.DisassociateTagOptionFromResourceOutput)
	return
}

func (d *ServiceCatalogDouble) DisassociateTagOptionFromResourceWithContext(i0 context.Context, i1 *servicecatalog.DisassociateTagOptionFromResourceInput, i2 ...request.Option) (r0 *servicecatalog.DisassociateTagOptionFromResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateTagOptionFromResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.DisassociateTagOptionFromResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeDisassociateTagOptionFromResourceWithContext(ctx context.Context, in *servicecatalog.DisassociateTagOptionFromResourceInput, _ ...request.Option) (*servicecatalog.DisassociateTagOptionFromResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateTagOptionFromResource cancelled", ctx.Err())
	default:
		return d.DisassociateTagOptionFromResource(in)
	}
}

func (d *ServiceCatalogDouble) EnableAWSOrganizationsAccess(i0 *servicecatalog.EnableAWSOrganizationsAccessInput) (r0 *servicecatalog.EnableAWSOrganizationsAccessOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableAWSOrganizationsAccess", i0)
	r0, _ = returns[0].(*servicecatalog.EnableAWSOrganizationsAccessOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) EnableAWSOrganizationsAccessRequest(i0 *servicecatalog.EnableAWSOrganizationsAccessInput) (r0 *request.Request, r1 *servicecatalog.EnableAWSOrganizationsAccessOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableAWSOrganizationsAccessRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.EnableAWSOrganizationsAccessOutput)
	return
}

func (d *ServiceCatalogDouble) EnableAWSOrganizationsAccessWithContext(i0 context.Context, i1 *servicecatalog.EnableAWSOrganizationsAccessInput, i2 ...request.Option) (r0 *servicecatalog.EnableAWSOrganizationsAccessOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableAWSOrganizationsAccessWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.EnableAWSOrganizationsAccessOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeEnableAWSOrganizationsAccessWithContext(ctx context.Context, in *servicecatalog.EnableAWSOrganizationsAccessInput, _ ...request.Option) (*servicecatalog.EnableAWSOrganizationsAccessOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "EnableAWSOrganizationsAccess cancelled", ctx.Err())
	default:
		return d.EnableAWSOrganizationsAccess(in)
	}
}

func (d *ServiceCatalogDouble) ExecuteProvisionedProductPlan(i0 *servicecatalog.ExecuteProvisionedProductPlanInput) (r0 *servicecatalog.ExecuteProvisionedProductPlanOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExecuteProvisionedProductPlan", i0)
	r0, _ = returns[0].(*servicecatalog.ExecuteProvisionedProductPlanOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) ExecuteProvisionedProductPlanRequest(i0 *servicecatalog.ExecuteProvisionedProductPlanInput) (r0 *request.Request, r1 *servicecatalog.ExecuteProvisionedProductPlanOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExecuteProvisionedProductPlanRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.ExecuteProvisionedProductPlanOutput)
	return
}

func (d *ServiceCatalogDouble) ExecuteProvisionedProductPlanWithContext(i0 context.Context, i1 *servicecatalog.ExecuteProvisionedProductPlanInput, i2 ...request.Option) (r0 *servicecatalog.ExecuteProvisionedProductPlanOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExecuteProvisionedProductPlanWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.ExecuteProvisionedProductPlanOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeExecuteProvisionedProductPlanWithContext(ctx context.Context, in *servicecatalog.ExecuteProvisionedProductPlanInput, _ ...request.Option) (*servicecatalog.ExecuteProvisionedProductPlanOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ExecuteProvisionedProductPlan cancelled", ctx.Err())
	default:
		return d.ExecuteProvisionedProductPlan(in)
	}
}

func (d *ServiceCatalogDouble) ExecuteProvisionedProductServiceAction(i0 *servicecatalog.ExecuteProvisionedProductServiceActionInput) (r0 *servicecatalog.ExecuteProvisionedProductServiceActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExecuteProvisionedProductServiceAction", i0)
	r0, _ = returns[0].(*servicecatalog.ExecuteProvisionedProductServiceActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) ExecuteProvisionedProductServiceActionRequest(i0 *servicecatalog.ExecuteProvisionedProductServiceActionInput) (r0 *request.Request, r1 *servicecatalog.ExecuteProvisionedProductServiceActionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExecuteProvisionedProductServiceActionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.ExecuteProvisionedProductServiceActionOutput)
	return
}

func (d *ServiceCatalogDouble) ExecuteProvisionedProductServiceActionWithContext(i0 context.Context, i1 *servicecatalog.ExecuteProvisionedProductServiceActionInput, i2 ...request.Option) (r0 *servicecatalog.ExecuteProvisionedProductServiceActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExecuteProvisionedProductServiceActionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.ExecuteProvisionedProductServiceActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeExecuteProvisionedProductServiceActionWithContext(ctx context.Context, in *servicecatalog.ExecuteProvisionedProductServiceActionInput, _ ...request.Option) (*servicecatalog.ExecuteProvisionedProductServiceActionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ExecuteProvisionedProductServiceAction cancelled", ctx.Err())
	default:
		return d.ExecuteProvisionedProductServiceAction(in)
	}
}

func (d *ServiceCatalogDouble) GetAWSOrganizationsAccessStatus(i0 *servicecatalog.GetAWSOrganizationsAccessStatusInput) (r0 *servicecatalog.GetAWSOrganizationsAccessStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAWSOrganizationsAccessStatus", i0)
	r0, _ = returns[0].(*servicecatalog.GetAWSOrganizationsAccessStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) GetAWSOrganizationsAccessStatusRequest(i0 *servicecatalog.GetAWSOrganizationsAccessStatusInput) (r0 *request.Request, r1 *servicecatalog.GetAWSOrganizationsAccessStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAWSOrganizationsAccessStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.GetAWSOrganizationsAccessStatusOutput)
	return
}

func (d *ServiceCatalogDouble) GetAWSOrganizationsAccessStatusWithContext(i0 context.Context, i1 *servicecatalog.GetAWSOrganizationsAccessStatusInput, i2 ...request.Option) (r0 *servicecatalog.GetAWSOrganizationsAccessStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAWSOrganizationsAccessStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.GetAWSOrganizationsAccessStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeGetAWSOrganizationsAccessStatusWithContext(ctx context.Context, in *servicecatalog.GetAWSOrganizationsAccessStatusInput, _ ...request.Option) (*servicecatalog.GetAWSOrganizationsAccessStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetAWSOrganizationsAccessStatus cancelled", ctx.Err())
	default:
		return d.GetAWSOrganizationsAccessStatus(in)
	}
}

func (d *ServiceCatalogDouble) ListAcceptedPortfolioShares(i0 *servicecatalog.ListAcceptedPortfolioSharesInput) (r0 *servicecatalog.ListAcceptedPortfolioSharesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAcceptedPortfolioShares", i0)
	r0, _ = returns[0].(*servicecatalog.ListAcceptedPortfolioSharesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) ListAcceptedPortfolioSharesPages(i0 *servicecatalog.ListAcceptedPortfolioSharesInput, i1 func(*servicecatalog.ListAcceptedPortfolioSharesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAcceptedPortfolioSharesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListAcceptedPortfolioSharesPages(in *servicecatalog.ListAcceptedPortfolioSharesInput, pager func(*servicecatalog.ListAcceptedPortfolioSharesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListAcceptedPortfolioShares", paginators, in, pager)
}

func (d *ServiceCatalogDouble) ListAcceptedPortfolioSharesPagesWithContext(i0 context.Context, i1 *servicecatalog.ListAcceptedPortfolioSharesInput, i2 func(*servicecatalog.ListAcceptedPortfolioSharesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAcceptedPortfolioSharesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListAcceptedPortfolioSharesPagesWithContext(ctx context.Context, in *servicecatalog.ListAcceptedPortfolioSharesInput, pager func(*servicecatalog.ListAcceptedPortfolioSharesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListAcceptedPortfolioShares", paginators, ctx, in, pager, options...)
}

func (d *ServiceCatalogDouble) ListAcceptedPortfolioSharesRequest(i0 *servicecatalog.ListAcceptedPortfolioSharesInput) (r0 *request.Request, r1 *servicecatalog.ListAcceptedPortfolioSharesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAcceptedPortfolioSharesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.ListAcceptedPortfolioSharesOutput)
	return
}

func (d *ServiceCatalogDouble) ListAcceptedPortfolioSharesWithContext(i0 context.Context, i1 *servicecatalog.ListAcceptedPortfolioSharesInput, i2 ...request.Option) (r0 *servicecatalog.ListAcceptedPortfolioSharesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAcceptedPortfolioSharesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.ListAcceptedPortfolioSharesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListAcceptedPortfolioSharesWithContext(ctx context.Context, in *servicecatalog.ListAcceptedPortfolioSharesInput, _ ...request.Option) (*servicecatalog.ListAcceptedPortfolioSharesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAcceptedPortfolioShares cancelled", ctx.Err())
	default:
		return d.ListAcceptedPortfolioShares(in)
	}
}

func (d *ServiceCatalogDouble) ListBudgetsForResource(i0 *servicecatalog.ListBudgetsForResourceInput) (r0 *servicecatalog.ListBudgetsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBudgetsForResource", i0)
	r0, _ = returns[0].(*servicecatalog.ListBudgetsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) ListBudgetsForResourcePages(i0 *servicecatalog.ListBudgetsForResourceInput, i1 func(*servicecatalog.ListBudgetsForResourceOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBudgetsForResourcePages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListBudgetsForResourcePages(in *servicecatalog.ListBudgetsForResourceInput, pager func(*servicecatalog.ListBudgetsForResourceOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListBudgetsForResource", paginators, in, pager)
}

func (d *ServiceCatalogDouble) ListBudgetsForResourcePagesWithContext(i0 context.Context, i1 *servicecatalog.ListBudgetsForResourceInput, i2 func(*servicecatalog.ListBudgetsForResourceOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBudgetsForResourcePagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListBudgetsForResourcePagesWithContext(ctx context.Context, in *servicecatalog.ListBudgetsForResourceInput, pager func(*servicecatalog.ListBudgetsForResourceOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListBudgetsForResource", paginators, ctx, in, pager, options...)
}

func (d *ServiceCatalogDouble) ListBudgetsForResourceRequest(i0 *servicecatalog.ListBudgetsForResourceInput) (r0 *request.Request, r1 *servicecatalog.ListBudgetsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBudgetsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.ListBudgetsForResourceOutput)
	return
}

func (d *ServiceCatalogDouble) ListBudgetsForResourceWithContext(i0 context.Context, i1 *servicecatalog.ListBudgetsForResourceInput, i2 ...request.Option) (r0 *servicecatalog.ListBudgetsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBudgetsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.ListBudgetsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListBudgetsForResourceWithContext(ctx context.Context, in *servicecatalog.ListBudgetsForResourceInput, _ ...request.Option) (*servicecatalog.ListBudgetsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListBudgetsForResource cancelled", ctx.Err())
	default:
		return d.ListBudgetsForResource(in)
	}
}

func (d *ServiceCatalogDouble) ListConstraintsForPortfolio(i0 *servicecatalog.ListConstraintsForPortfolioInput) (r0 *servicecatalog.ListConstraintsForPortfolioOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListConstraintsForPortfolio", i0)
	r0, _ = returns[0].(*servicecatalog.ListConstraintsForPortfolioOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) ListConstraintsForPortfolioPages(i0 *servicecatalog.ListConstraintsForPortfolioInput, i1 func(*servicecatalog.ListConstraintsForPortfolioOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListConstraintsForPortfolioPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListConstraintsForPortfolioPages(in *servicecatalog.ListConstraintsForPortfolioInput, pager func(*servicecatalog.ListConstraintsForPortfolioOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListConstraintsForPortfolio", paginators, in, pager)
}

func (d *ServiceCatalogDouble) ListConstraintsForPortfolioPagesWithContext(i0 context.Context, i1 *servicecatalog.ListConstraintsForPortfolioInput, i2 func(*servicecatalog.ListConstraintsForPortfolioOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListConstraintsForPortfolioPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListConstraintsForPortfolioPagesWithContext(ctx context.Context, in *servicecatalog.ListConstraintsForPortfolioInput, pager func(*servicecatalog.ListConstraintsForPortfolioOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListConstraintsForPortfolio", paginators, ctx, in, pager, options...)
}

func (d *ServiceCatalogDouble) ListConstraintsForPortfolioRequest(i0 *servicecatalog.ListConstraintsForPortfolioInput) (r0 *request.Request, r1 *servicecatalog.ListConstraintsForPortfolioOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListConstraintsForPortfolioRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.ListConstraintsForPortfolioOutput)
	return
}

func (d *ServiceCatalogDouble) ListConstraintsForPortfolioWithContext(i0 context.Context, i1 *servicecatalog.ListConstraintsForPortfolioInput, i2 ...request.Option) (r0 *servicecatalog.ListConstraintsForPortfolioOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListConstraintsForPortfolioWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.ListConstraintsForPortfolioOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListConstraintsForPortfolioWithContext(ctx context.Context, in *servicecatalog.ListConstraintsForPortfolioInput, _ ...request.Option) (*servicecatalog.ListConstraintsForPortfolioOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListConstraintsForPortfolio cancelled", ctx.Err())
	default:
		return d.ListConstraintsForPortfolio(in)
	}
}

func (d *ServiceCatalogDouble) ListLaunchPaths(i0 *servicecatalog.ListLaunchPathsInput) (r0 *servicecatalog.ListLaunchPathsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLaunchPaths", i0)
	r0, _ = returns[0].(*servicecatalog.ListLaunchPathsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) ListLaunchPathsPages(i0 *servicecatalog.ListLaunchPathsInput, i1 func(*servicecatalog.ListLaunchPathsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLaunchPathsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListLaunchPathsPages(in *servicecatalog.ListLaunchPathsInput, pager func(*servicecatalog.ListLaunchPathsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListLaunchPaths", paginators, in, pager)
}

func (d *ServiceCatalogDouble) ListLaunchPathsPagesWithContext(i0 context.Context, i1 *servicecatalog.ListLaunchPathsInput, i2 func(*servicecatalog.ListLaunchPathsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLaunchPathsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListLaunchPathsPagesWithContext(ctx context.Context, in *servicecatalog.ListLaunchPathsInput, pager func(*servicecatalog.ListLaunchPathsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListLaunchPaths", paginators, ctx, in, pager, options...)
}

func (d *ServiceCatalogDouble) ListLaunchPathsRequest(i0 *servicecatalog.ListLaunchPathsInput) (r0 *request.Request, r1 *servicecatalog.ListLaunchPathsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLaunchPathsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.ListLaunchPathsOutput)
	return
}

func (d *ServiceCatalogDouble) ListLaunchPathsWithContext(i0 context.Context, i1 *servicecatalog.ListLaunchPathsInput, i2 ...request.Option) (r0 *servicecatalog.ListLaunchPathsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLaunchPathsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.ListLaunchPathsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListLaunchPathsWithContext(ctx context.Context, in *servicecatalog.ListLaunchPathsInput, _ ...request.Option) (*servicecatalog.ListLaunchPathsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListLaunchPaths cancelled", ctx.Err())
	default:
		return d.ListLaunchPaths(in)
	}
}

func (d *ServiceCatalogDouble) ListOrganizationPortfolioAccess(i0 *servicecatalog.ListOrganizationPortfolioAccessInput) (r0 *servicecatalog.ListOrganizationPortfolioAccessOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOrganizationPortfolioAccess", i0)
	r0, _ = returns[0].(*servicecatalog.ListOrganizationPortfolioAccessOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) ListOrganizationPortfolioAccessPages(i0 *servicecatalog.ListOrganizationPortfolioAccessInput, i1 func(*servicecatalog.ListOrganizationPortfolioAccessOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOrganizationPortfolioAccessPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListOrganizationPortfolioAccessPages(in *servicecatalog.ListOrganizationPortfolioAccessInput, pager func(*servicecatalog.ListOrganizationPortfolioAccessOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListOrganizationPortfolioAccess", paginators, in, pager)
}

func (d *ServiceCatalogDouble) ListOrganizationPortfolioAccessPagesWithContext(i0 context.Context, i1 *servicecatalog.ListOrganizationPortfolioAccessInput, i2 func(*servicecatalog.ListOrganizationPortfolioAccessOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOrganizationPortfolioAccessPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListOrganizationPortfolioAccessPagesWithContext(ctx context.Context, in *servicecatalog.ListOrganizationPortfolioAccessInput, pager func(*servicecatalog.ListOrganizationPortfolioAccessOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListOrganizationPortfolioAccess", paginators, ctx, in, pager, options...)
}

func (d *ServiceCatalogDouble) ListOrganizationPortfolioAccessRequest(i0 *servicecatalog.ListOrganizationPortfolioAccessInput) (r0 *request.Request, r1 *servicecatalog.ListOrganizationPortfolioAccessOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOrganizationPortfolioAccessRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.ListOrganizationPortfolioAccessOutput)
	return
}

func (d *ServiceCatalogDouble) ListOrganizationPortfolioAccessWithContext(i0 context.Context, i1 *servicecatalog.ListOrganizationPortfolioAccessInput, i2 ...request.Option) (r0 *servicecatalog.ListOrganizationPortfolioAccessOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOrganizationPortfolioAccessWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.ListOrganizationPortfolioAccessOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListOrganizationPortfolioAccessWithContext(ctx context.Context, in *servicecatalog.ListOrganizationPortfolioAccessInput, _ ...request.Option) (*servicecatalog.ListOrganizationPortfolioAccessOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListOrganizationPortfolioAccess cancelled", ctx.Err())
	default:
		return d.ListOrganizationPortfolioAccess(in)
	}
}

func (d *ServiceCatalogDouble) ListPortfolioAccess(i0 *servicecatalog.ListPortfolioAccessInput) (r0 *servicecatalog.ListPortfolioAccessOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPortfolioAccess", i0)
	r0, _ = returns[0].(*servicecatalog.ListPortfolioAccessOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) ListPortfolioAccessRequest(i0 *servicecatalog.ListPortfolioAccessInput) (r0 *request.Request, r1 *servicecatalog.ListPortfolioAccessOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPortfolioAccessRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.ListPortfolioAccessOutput)
	return
}

func (d *ServiceCatalogDouble) ListPortfolioAccessWithContext(i0 context.Context, i1 *servicecatalog.ListPortfolioAccessInput, i2 ...request.Option) (r0 *servicecatalog.ListPortfolioAccessOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPortfolioAccessWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.ListPortfolioAccessOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListPortfolioAccessWithContext(ctx context.Context, in *servicecatalog.ListPortfolioAccessInput, _ ...request.Option) (*servicecatalog.ListPortfolioAccessOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListPortfolioAccess cancelled", ctx.Err())
	default:
		return d.ListPortfolioAccess(in)
	}
}

func (d *ServiceCatalogDouble) ListPortfolios(i0 *servicecatalog.ListPortfoliosInput) (r0 *servicecatalog.ListPortfoliosOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPortfolios", i0)
	r0, _ = returns[0].(*servicecatalog.ListPortfoliosOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) ListPortfoliosForProduct(i0 *servicecatalog.ListPortfoliosForProductInput) (r0 *servicecatalog.ListPortfoliosForProductOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPortfoliosForProduct", i0)
	r0, _ = returns[0].(*servicecatalog.ListPortfoliosForProductOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) ListPortfoliosForProductPages(i0 *servicecatalog.ListPortfoliosForProductInput, i1 func(*servicecatalog.ListPortfoliosForProductOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPortfoliosForProductPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListPortfoliosForProductPages(in *servicecatalog.ListPortfoliosForProductInput, pager func(*servicecatalog.ListPortfoliosForProductOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListPortfoliosForProduct", paginators, in, pager)
}

func (d *ServiceCatalogDouble) ListPortfoliosForProductPagesWithContext(i0 context.Context, i1 *servicecatalog.ListPortfoliosForProductInput, i2 func(*servicecatalog.ListPortfoliosForProductOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPortfoliosForProductPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListPortfoliosForProductPagesWithContext(ctx context.Context, in *servicecatalog.ListPortfoliosForProductInput, pager func(*servicecatalog.ListPortfoliosForProductOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListPortfoliosForProduct", paginators, ctx, in, pager, options...)
}

func (d *ServiceCatalogDouble) ListPortfoliosForProductRequest(i0 *servicecatalog.ListPortfoliosForProductInput) (r0 *request.Request, r1 *servicecatalog.ListPortfoliosForProductOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPortfoliosForProductRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.ListPortfoliosForProductOutput)
	return
}

func (d *ServiceCatalogDouble) ListPortfoliosForProductWithContext(i0 context.Context, i1 *servicecatalog.ListPortfoliosForProductInput, i2 ...request.Option) (r0 *servicecatalog.ListPortfoliosForProductOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPortfoliosForProductWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.ListPortfoliosForProductOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListPortfoliosForProductWithContext(ctx context.Context, in *servicecatalog.ListPortfoliosForProductInput, _ ...request.Option) (*servicecatalog.ListPortfoliosForProductOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListPortfoliosForProduct cancelled", ctx.Err())
	default:
		return d.ListPortfoliosForProduct(in)
	}
}

func (d *ServiceCatalogDouble) ListPortfoliosPages(i0 *servicecatalog.ListPortfoliosInput, i1 func(*servicecatalog.ListPortfoliosOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPortfoliosPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListPortfoliosPages(in *servicecatalog.ListPortfoliosInput, pager func(*servicecatalog.ListPortfoliosOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListPortfolios", paginators, in, pager)
}

func (d *ServiceCatalogDouble) ListPortfoliosPagesWithContext(i0 context.Context, i1 *servicecatalog.ListPortfoliosInput, i2 func(*servicecatalog.ListPortfoliosOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPortfoliosPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListPortfoliosPagesWithContext(ctx context.Context, in *servicecatalog.ListPortfoliosInput, pager func(*servicecatalog.ListPortfoliosOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListPortfolios", paginators, ctx, in, pager, options...)
}

func (d *ServiceCatalogDouble) ListPortfoliosRequest(i0 *servicecatalog.ListPortfoliosInput) (r0 *request.Request, r1 *servicecatalog.ListPortfoliosOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPortfoliosRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.ListPortfoliosOutput)
	return
}

func (d *ServiceCatalogDouble) ListPortfoliosWithContext(i0 context.Context, i1 *servicecatalog.ListPortfoliosInput, i2 ...request.Option) (r0 *servicecatalog.ListPortfoliosOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPortfoliosWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.ListPortfoliosOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListPortfoliosWithContext(ctx context.Context, in *servicecatalog.ListPortfoliosInput, _ ...request.Option) (*servicecatalog.ListPortfoliosOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListPortfolios cancelled", ctx.Err())
	default:
		return d.ListPortfolios(in)
	}
}

func (d *ServiceCatalogDouble) ListPrincipalsForPortfolio(i0 *servicecatalog.ListPrincipalsForPortfolioInput) (r0 *servicecatalog.ListPrincipalsForPortfolioOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPrincipalsForPortfolio", i0)
	r0, _ = returns[0].(*servicecatalog.ListPrincipalsForPortfolioOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) ListPrincipalsForPortfolioPages(i0 *servicecatalog.ListPrincipalsForPortfolioInput, i1 func(*servicecatalog.ListPrincipalsForPortfolioOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPrincipalsForPortfolioPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListPrincipalsForPortfolioPages(in *servicecatalog.ListPrincipalsForPortfolioInput, pager func(*servicecatalog.ListPrincipalsForPortfolioOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListPrincipalsForPortfolio", paginators, in, pager)
}

func (d *ServiceCatalogDouble) ListPrincipalsForPortfolioPagesWithContext(i0 context.Context, i1 *servicecatalog.ListPrincipalsForPortfolioInput, i2 func(*servicecatalog.ListPrincipalsForPortfolioOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPrincipalsForPortfolioPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListPrincipalsForPortfolioPagesWithContext(ctx context.Context, in *servicecatalog.ListPrincipalsForPortfolioInput, pager func(*servicecatalog.ListPrincipalsForPortfolioOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListPrincipalsForPortfolio", paginators, ctx, in, pager, options...)
}

func (d *ServiceCatalogDouble) ListPrincipalsForPortfolioRequest(i0 *servicecatalog.ListPrincipalsForPortfolioInput) (r0 *request.Request, r1 *servicecatalog.ListPrincipalsForPortfolioOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPrincipalsForPortfolioRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.ListPrincipalsForPortfolioOutput)
	return
}

func (d *ServiceCatalogDouble) ListPrincipalsForPortfolioWithContext(i0 context.Context, i1 *servicecatalog.ListPrincipalsForPortfolioInput, i2 ...request.Option) (r0 *servicecatalog.ListPrincipalsForPortfolioOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPrincipalsForPortfolioWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.ListPrincipalsForPortfolioOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListPrincipalsForPortfolioWithContext(ctx context.Context, in *servicecatalog.ListPrincipalsForPortfolioInput, _ ...request.Option) (*servicecatalog.ListPrincipalsForPortfolioOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListPrincipalsForPortfolio cancelled", ctx.Err())
	default:
		return d.ListPrincipalsForPortfolio(in)
	}
}

func (d *ServiceCatalogDouble) ListProvisionedProductPlans(i0 *servicecatalog.ListProvisionedProductPlansInput) (r0 *servicecatalog.ListProvisionedProductPlansOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProvisionedProductPlans", i0)
	r0, _ = returns[0].(*servicecatalog.ListProvisionedProductPlansOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) ListProvisionedProductPlansRequest(i0 *servicecatalog.ListProvisionedProductPlansInput) (r0 *request.Request, r1 *servicecatalog.ListProvisionedProductPlansOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProvisionedProductPlansRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.ListProvisionedProductPlansOutput)
	return
}

func (d *ServiceCatalogDouble) ListProvisionedProductPlansWithContext(i0 context.Context, i1 *servicecatalog.ListProvisionedProductPlansInput, i2 ...request.Option) (r0 *servicecatalog.ListProvisionedProductPlansOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProvisionedProductPlansWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.ListProvisionedProductPlansOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListProvisionedProductPlansWithContext(ctx context.Context, in *servicecatalog.ListProvisionedProductPlansInput, _ ...request.Option) (*servicecatalog.ListProvisionedProductPlansOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListProvisionedProductPlans cancelled", ctx.Err())
	default:
		return d.ListProvisionedProductPlans(in)
	}
}

func (d *ServiceCatalogDouble) ListProvisioningArtifacts(i0 *servicecatalog.ListProvisioningArtifactsInput) (r0 *servicecatalog.ListProvisioningArtifactsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProvisioningArtifacts", i0)
	r0, _ = returns[0].(*servicecatalog.ListProvisioningArtifactsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) ListProvisioningArtifactsForServiceAction(i0 *servicecatalog.ListProvisioningArtifactsForServiceActionInput) (r0 *servicecatalog.ListProvisioningArtifactsForServiceActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProvisioningArtifactsForServiceAction", i0)
	r0, _ = returns[0].(*servicecatalog.ListProvisioningArtifactsForServiceActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) ListProvisioningArtifactsForServiceActionPages(i0 *servicecatalog.ListProvisioningArtifactsForServiceActionInput, i1 func(*servicecatalog.ListProvisioningArtifactsForServiceActionOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProvisioningArtifactsForServiceActionPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListProvisioningArtifactsForServiceActionPages(in *servicecatalog.ListProvisioningArtifactsForServiceActionInput, pager func(*servicecatalog.ListProvisioningArtifactsForServiceActionOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListProvisioningArtifactsForServiceAction", paginators, in, pager)
}

func (d *ServiceCatalogDouble) ListProvisioningArtifactsForServiceActionPagesWithContext(i0 context.Context, i1 *servicecatalog.ListProvisioningArtifactsForServiceActionInput, i2 func(*servicecatalog.ListProvisioningArtifactsForServiceActionOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProvisioningArtifactsForServiceActionPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListProvisioningArtifactsForServiceActionPagesWithContext(ctx context.Context, in *servicecatalog.ListProvisioningArtifactsForServiceActionInput, pager func(*servicecatalog.ListProvisioningArtifactsForServiceActionOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListProvisioningArtifactsForServiceAction", paginators, ctx, in, pager, options...)
}

func (d *ServiceCatalogDouble) ListProvisioningArtifactsForServiceActionRequest(i0 *servicecatalog.ListProvisioningArtifactsForServiceActionInput) (r0 *request.Request, r1 *servicecatalog.ListProvisioningArtifactsForServiceActionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProvisioningArtifactsForServiceActionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.ListProvisioningArtifactsForServiceActionOutput)
	return
}

func (d *ServiceCatalogDouble) ListProvisioningArtifactsForServiceActionWithContext(i0 context.Context, i1 *servicecatalog.ListProvisioningArtifactsForServiceActionInput, i2 ...request.Option) (r0 *servicecatalog.ListProvisioningArtifactsForServiceActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProvisioningArtifactsForServiceActionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.ListProvisioningArtifactsForServiceActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListProvisioningArtifactsForServiceActionWithContext(ctx context.Context, in *servicecatalog.ListProvisioningArtifactsForServiceActionInput, _ ...request.Option) (*servicecatalog.ListProvisioningArtifactsForServiceActionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListProvisioningArtifactsForServiceAction cancelled", ctx.Err())
	default:
		return d.ListProvisioningArtifactsForServiceAction(in)
	}
}

func (d *ServiceCatalogDouble) ListProvisioningArtifactsRequest(i0 *servicecatalog.ListProvisioningArtifactsInput) (r0 *request.Request, r1 *servicecatalog.ListProvisioningArtifactsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProvisioningArtifactsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.ListProvisioningArtifactsOutput)
	return
}

func (d *ServiceCatalogDouble) ListProvisioningArtifactsWithContext(i0 context.Context, i1 *servicecatalog.ListProvisioningArtifactsInput, i2 ...request.Option) (r0 *servicecatalog.ListProvisioningArtifactsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProvisioningArtifactsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.ListProvisioningArtifactsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListProvisioningArtifactsWithContext(ctx context.Context, in *servicecatalog.ListProvisioningArtifactsInput, _ ...request.Option) (*servicecatalog.ListProvisioningArtifactsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListProvisioningArtifacts cancelled", ctx.Err())
	default:
		return d.ListProvisioningArtifacts(in)
	}
}

func (d *ServiceCatalogDouble) ListRecordHistory(i0 *servicecatalog.ListRecordHistoryInput) (r0 *servicecatalog.ListRecordHistoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRecordHistory", i0)
	r0, _ = returns[0].(*servicecatalog.ListRecordHistoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) ListRecordHistoryRequest(i0 *servicecatalog.ListRecordHistoryInput) (r0 *request.Request, r1 *servicecatalog.ListRecordHistoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRecordHistoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.ListRecordHistoryOutput)
	return
}

func (d *ServiceCatalogDouble) ListRecordHistoryWithContext(i0 context.Context, i1 *servicecatalog.ListRecordHistoryInput, i2 ...request.Option) (r0 *servicecatalog.ListRecordHistoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRecordHistoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.ListRecordHistoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListRecordHistoryWithContext(ctx context.Context, in *servicecatalog.ListRecordHistoryInput, _ ...request.Option) (*servicecatalog.ListRecordHistoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListRecordHistory cancelled", ctx.Err())
	default:
		return d.ListRecordHistory(in)
	}
}

func (d *ServiceCatalogDouble) ListResourcesForTagOption(i0 *servicecatalog.ListResourcesForTagOptionInput) (r0 *servicecatalog.ListResourcesForTagOptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourcesForTagOption", i0)
	r0, _ = returns[0].(*servicecatalog.ListResourcesForTagOptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) ListResourcesForTagOptionPages(i0 *servicecatalog.ListResourcesForTagOptionInput, i1 func(*servicecatalog.ListResourcesForTagOptionOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourcesForTagOptionPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListResourcesForTagOptionPages(in *servicecatalog.ListResourcesForTagOptionInput, pager func(*servicecatalog.ListResourcesForTagOptionOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListResourcesForTagOption", paginators, in, pager)
}

func (d *ServiceCatalogDouble) ListResourcesForTagOptionPagesWithContext(i0 context.Context, i1 *servicecatalog.ListResourcesForTagOptionInput, i2 func(*servicecatalog.ListResourcesForTagOptionOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourcesForTagOptionPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListResourcesForTagOptionPagesWithContext(ctx context.Context, in *servicecatalog.ListResourcesForTagOptionInput, pager func(*servicecatalog.ListResourcesForTagOptionOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListResourcesForTagOption", paginators, ctx, in, pager, options...)
}

func (d *ServiceCatalogDouble) ListResourcesForTagOptionRequest(i0 *servicecatalog.ListResourcesForTagOptionInput) (r0 *request.Request, r1 *servicecatalog.ListResourcesForTagOptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourcesForTagOptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.ListResourcesForTagOptionOutput)
	return
}

func (d *ServiceCatalogDouble) ListResourcesForTagOptionWithContext(i0 context.Context, i1 *servicecatalog.ListResourcesForTagOptionInput, i2 ...request.Option) (r0 *servicecatalog.ListResourcesForTagOptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourcesForTagOptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.ListResourcesForTagOptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListResourcesForTagOptionWithContext(ctx context.Context, in *servicecatalog.ListResourcesForTagOptionInput, _ ...request.Option) (*servicecatalog.ListResourcesForTagOptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListResourcesForTagOption cancelled", ctx.Err())
	default:
		return d.ListResourcesForTagOption(in)
	}
}

func (d *ServiceCatalogDouble) ListServiceActions(i0 *servicecatalog.ListServiceActionsInput) (r0 *servicecatalog.ListServiceActionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListServiceActions", i0)
	r0, _ = returns[0].(*servicecatalog.ListServiceActionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) ListServiceActionsForProvisioningArtifact(i0 *servicecatalog.ListServiceActionsForProvisioningArtifactInput) (r0 *servicecatalog.ListServiceActionsForProvisioningArtifactOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListServiceActionsForProvisioningArtifact", i0)
	r0, _ = returns[0].(*servicecatalog.ListServiceActionsForProvisioningArtifactOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) ListServiceActionsForProvisioningArtifactPages(i0 *servicecatalog.ListServiceActionsForProvisioningArtifactInput, i1 func(*servicecatalog.ListServiceActionsForProvisioningArtifactOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListServiceActionsForProvisioningArtifactPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListServiceActionsForProvisioningArtifactPages(in *servicecatalog.ListServiceActionsForProvisioningArtifactInput, pager func(*servicecatalog.ListServiceActionsForProvisioningArtifactOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListServiceActionsForProvisioningArtifact", paginators, in, pager)
}

func (d *ServiceCatalogDouble) ListServiceActionsForProvisioningArtifactPagesWithContext(i0 context.Context, i1 *servicecatalog.ListServiceActionsForProvisioningArtifactInput, i2 func(*servicecatalog.ListServiceActionsForProvisioningArtifactOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListServiceActionsForProvisioningArtifactPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListServiceActionsForProvisioningArtifactPagesWithContext(ctx context.Context, in *servicecatalog.ListServiceActionsForProvisioningArtifactInput, pager func(*servicecatalog.ListServiceActionsForProvisioningArtifactOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListServiceActionsForProvisioningArtifact", paginators, ctx, in, pager, options...)
}

func (d *ServiceCatalogDouble) ListServiceActionsForProvisioningArtifactRequest(i0 *servicecatalog.ListServiceActionsForProvisioningArtifactInput) (r0 *request.Request, r1 *servicecatalog.ListServiceActionsForProvisioningArtifactOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListServiceActionsForProvisioningArtifactRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.ListServiceActionsForProvisioningArtifactOutput)
	return
}

func (d *ServiceCatalogDouble) ListServiceActionsForProvisioningArtifactWithContext(i0 context.Context, i1 *servicecatalog.ListServiceActionsForProvisioningArtifactInput, i2 ...request.Option) (r0 *servicecatalog.ListServiceActionsForProvisioningArtifactOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListServiceActionsForProvisioningArtifactWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.ListServiceActionsForProvisioningArtifactOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListServiceActionsForProvisioningArtifactWithContext(ctx context.Context, in *servicecatalog.ListServiceActionsForProvisioningArtifactInput, _ ...request.Option) (*servicecatalog.ListServiceActionsForProvisioningArtifactOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListServiceActionsForProvisioningArtifact cancelled", ctx.Err())
	default:
		return d.ListServiceActionsForProvisioningArtifact(in)
	}
}

func (d *ServiceCatalogDouble) ListServiceActionsPages(i0 *servicecatalog.ListServiceActionsInput, i1 func(*servicecatalog.ListServiceActionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListServiceActionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListServiceActionsPages(in *servicecatalog.ListServiceActionsInput, pager func(*servicecatalog.ListServiceActionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListServiceActions", paginators, in, pager)
}

func (d *ServiceCatalogDouble) ListServiceActionsPagesWithContext(i0 context.Context, i1 *servicecatalog.ListServiceActionsInput, i2 func(*servicecatalog.ListServiceActionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListServiceActionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListServiceActionsPagesWithContext(ctx context.Context, in *servicecatalog.ListServiceActionsInput, pager func(*servicecatalog.ListServiceActionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListServiceActions", paginators, ctx, in, pager, options...)
}

func (d *ServiceCatalogDouble) ListServiceActionsRequest(i0 *servicecatalog.ListServiceActionsInput) (r0 *request.Request, r1 *servicecatalog.ListServiceActionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListServiceActionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.ListServiceActionsOutput)
	return
}

func (d *ServiceCatalogDouble) ListServiceActionsWithContext(i0 context.Context, i1 *servicecatalog.ListServiceActionsInput, i2 ...request.Option) (r0 *servicecatalog.ListServiceActionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListServiceActionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.ListServiceActionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListServiceActionsWithContext(ctx context.Context, in *servicecatalog.ListServiceActionsInput, _ ...request.Option) (*servicecatalog.ListServiceActionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListServiceActions cancelled", ctx.Err())
	default:
		return d.ListServiceActions(in)
	}
}

func (d *ServiceCatalogDouble) ListStackInstancesForProvisionedProduct(i0 *servicecatalog.ListStackInstancesForProvisionedProductInput) (r0 *servicecatalog.ListStackInstancesForProvisionedProductOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStackInstancesForProvisionedProduct", i0)
	r0, _ = returns[0].(*servicecatalog.ListStackInstancesForProvisionedProductOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) ListStackInstancesForProvisionedProductRequest(i0 *servicecatalog.ListStackInstancesForProvisionedProductInput) (r0 *request.Request, r1 *servicecatalog.ListStackInstancesForProvisionedProductOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStackInstancesForProvisionedProductRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.ListStackInstancesForProvisionedProductOutput)
	return
}

func (d *ServiceCatalogDouble) ListStackInstancesForProvisionedProductWithContext(i0 context.Context, i1 *servicecatalog.ListStackInstancesForProvisionedProductInput, i2 ...request.Option) (r0 *servicecatalog.ListStackInstancesForProvisionedProductOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStackInstancesForProvisionedProductWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.ListStackInstancesForProvisionedProductOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListStackInstancesForProvisionedProductWithContext(ctx context.Context, in *servicecatalog.ListStackInstancesForProvisionedProductInput, _ ...request.Option) (*servicecatalog.ListStackInstancesForProvisionedProductOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListStackInstancesForProvisionedProduct cancelled", ctx.Err())
	default:
		return d.ListStackInstancesForProvisionedProduct(in)
	}
}

func (d *ServiceCatalogDouble) ListTagOptions(i0 *servicecatalog.ListTagOptionsInput) (r0 *servicecatalog.ListTagOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagOptions", i0)
	r0, _ = returns[0].(*servicecatalog.ListTagOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) ListTagOptionsPages(i0 *servicecatalog.ListTagOptionsInput, i1 func(*servicecatalog.ListTagOptionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagOptionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListTagOptionsPages(in *servicecatalog.ListTagOptionsInput, pager func(*servicecatalog.ListTagOptionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTagOptions", paginators, in, pager)
}

func (d *ServiceCatalogDouble) ListTagOptionsPagesWithContext(i0 context.Context, i1 *servicecatalog.ListTagOptionsInput, i2 func(*servicecatalog.ListTagOptionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagOptionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListTagOptionsPagesWithContext(ctx context.Context, in *servicecatalog.ListTagOptionsInput, pager func(*servicecatalog.ListTagOptionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTagOptions", paginators, ctx, in, pager, options...)
}

func (d *ServiceCatalogDouble) ListTagOptionsRequest(i0 *servicecatalog.ListTagOptionsInput) (r0 *request.Request, r1 *servicecatalog.ListTagOptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagOptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.ListTagOptionsOutput)
	return
}

func (d *ServiceCatalogDouble) ListTagOptionsWithContext(i0 context.Context, i1 *servicecatalog.ListTagOptionsInput, i2 ...request.Option) (r0 *servicecatalog.ListTagOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagOptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.ListTagOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeListTagOptionsWithContext(ctx context.Context, in *servicecatalog.ListTagOptionsInput, _ ...request.Option) (*servicecatalog.ListTagOptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagOptions cancelled", ctx.Err())
	default:
		return d.ListTagOptions(in)
	}
}

func (d *ServiceCatalogDouble) ProvisionProduct(i0 *servicecatalog.ProvisionProductInput) (r0 *servicecatalog.ProvisionProductOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ProvisionProduct", i0)
	r0, _ = returns[0].(*servicecatalog.ProvisionProductOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) ProvisionProductRequest(i0 *servicecatalog.ProvisionProductInput) (r0 *request.Request, r1 *servicecatalog.ProvisionProductOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ProvisionProductRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.ProvisionProductOutput)
	return
}

func (d *ServiceCatalogDouble) ProvisionProductWithContext(i0 context.Context, i1 *servicecatalog.ProvisionProductInput, i2 ...request.Option) (r0 *servicecatalog.ProvisionProductOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ProvisionProductWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.ProvisionProductOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeProvisionProductWithContext(ctx context.Context, in *servicecatalog.ProvisionProductInput, _ ...request.Option) (*servicecatalog.ProvisionProductOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ProvisionProduct cancelled", ctx.Err())
	default:
		return d.ProvisionProduct(in)
	}
}

func (d *ServiceCatalogDouble) RejectPortfolioShare(i0 *servicecatalog.RejectPortfolioShareInput) (r0 *servicecatalog.RejectPortfolioShareOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RejectPortfolioShare", i0)
	r0, _ = returns[0].(*servicecatalog.RejectPortfolioShareOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) RejectPortfolioShareRequest(i0 *servicecatalog.RejectPortfolioShareInput) (r0 *request.Request, r1 *servicecatalog.RejectPortfolioShareOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RejectPortfolioShareRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.RejectPortfolioShareOutput)
	return
}

func (d *ServiceCatalogDouble) RejectPortfolioShareWithContext(i0 context.Context, i1 *servicecatalog.RejectPortfolioShareInput, i2 ...request.Option) (r0 *servicecatalog.RejectPortfolioShareOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RejectPortfolioShareWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.RejectPortfolioShareOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeRejectPortfolioShareWithContext(ctx context.Context, in *servicecatalog.RejectPortfolioShareInput, _ ...request.Option) (*servicecatalog.RejectPortfolioShareOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RejectPortfolioShare cancelled", ctx.Err())
	default:
		return d.RejectPortfolioShare(in)
	}
}

func (d *ServiceCatalogDouble) ScanProvisionedProducts(i0 *servicecatalog.ScanProvisionedProductsInput) (r0 *servicecatalog.ScanProvisionedProductsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ScanProvisionedProducts", i0)
	r0, _ = returns[0].(*servicecatalog.ScanProvisionedProductsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) ScanProvisionedProductsRequest(i0 *servicecatalog.ScanProvisionedProductsInput) (r0 *request.Request, r1 *servicecatalog.ScanProvisionedProductsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ScanProvisionedProductsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.ScanProvisionedProductsOutput)
	return
}

func (d *ServiceCatalogDouble) ScanProvisionedProductsWithContext(i0 context.Context, i1 *servicecatalog.ScanProvisionedProductsInput, i2 ...request.Option) (r0 *servicecatalog.ScanProvisionedProductsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ScanProvisionedProductsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.ScanProvisionedProductsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeScanProvisionedProductsWithContext(ctx context.Context, in *servicecatalog.ScanProvisionedProductsInput, _ ...request.Option) (*servicecatalog.ScanProvisionedProductsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ScanProvisionedProducts cancelled", ctx.Err())
	default:
		return d.ScanProvisionedProducts(in)
	}
}

func (d *ServiceCatalogDouble) SearchProducts(i0 *servicecatalog.SearchProductsInput) (r0 *servicecatalog.SearchProductsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchProducts", i0)
	r0, _ = returns[0].(*servicecatalog.SearchProductsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) SearchProductsAsAdmin(i0 *servicecatalog.SearchProductsAsAdminInput) (r0 *servicecatalog.SearchProductsAsAdminOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchProductsAsAdmin", i0)
	r0, _ = returns[0].(*servicecatalog.SearchProductsAsAdminOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) SearchProductsAsAdminPages(i0 *servicecatalog.SearchProductsAsAdminInput, i1 func(*servicecatalog.SearchProductsAsAdminOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchProductsAsAdminPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceCatalogDouble) fakeSearchProductsAsAdminPages(in *servicecatalog.SearchProductsAsAdminInput, pager func(*servicecatalog.SearchProductsAsAdminOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("SearchProductsAsAdmin", paginators, in, pager)
}

func (d *ServiceCatalogDouble) SearchProductsAsAdminPagesWithContext(i0 context.Context, i1 *servicecatalog.SearchProductsAsAdminInput, i2 func(*servicecatalog.SearchProductsAsAdminOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchProductsAsAdminPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceCatalogDouble) fakeSearchProductsAsAdminPagesWithContext(ctx context.Context, in *servicecatalog.SearchProductsAsAdminInput, pager func(*servicecatalog.SearchProductsAsAdminOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("SearchProductsAsAdmin", paginators, ctx, in, pager, options...)
}

func (d *ServiceCatalogDouble) SearchProductsAsAdminRequest(i0 *servicecatalog.SearchProductsAsAdminInput) (r0 *request.Request, r1 *servicecatalog.SearchProductsAsAdminOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchProductsAsAdminRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.SearchProductsAsAdminOutput)
	return
}

func (d *ServiceCatalogDouble) SearchProductsAsAdminWithContext(i0 context.Context, i1 *servicecatalog.SearchProductsAsAdminInput, i2 ...request.Option) (r0 *servicecatalog.SearchProductsAsAdminOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchProductsAsAdminWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.SearchProductsAsAdminOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeSearchProductsAsAdminWithContext(ctx context.Context, in *servicecatalog.SearchProductsAsAdminInput, _ ...request.Option) (*servicecatalog.SearchProductsAsAdminOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SearchProductsAsAdmin cancelled", ctx.Err())
	default:
		return d.SearchProductsAsAdmin(in)
	}
}

func (d *ServiceCatalogDouble) SearchProductsPages(i0 *servicecatalog.SearchProductsInput, i1 func(*servicecatalog.SearchProductsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchProductsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceCatalogDouble) fakeSearchProductsPages(in *servicecatalog.SearchProductsInput, pager func(*servicecatalog.SearchProductsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("SearchProducts", paginators, in, pager)
}

func (d *ServiceCatalogDouble) SearchProductsPagesWithContext(i0 context.Context, i1 *servicecatalog.SearchProductsInput, i2 func(*servicecatalog.SearchProductsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchProductsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceCatalogDouble) fakeSearchProductsPagesWithContext(ctx context.Context, in *servicecatalog.SearchProductsInput, pager func(*servicecatalog.SearchProductsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("SearchProducts", paginators, ctx, in, pager, options...)
}

func (d *ServiceCatalogDouble) SearchProductsRequest(i0 *servicecatalog.SearchProductsInput) (r0 *request.Request, r1 *servicecatalog.SearchProductsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchProductsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.SearchProductsOutput)
	return
}

func (d *ServiceCatalogDouble) SearchProductsWithContext(i0 context.Context, i1 *servicecatalog.SearchProductsInput, i2 ...request.Option) (r0 *servicecatalog.SearchProductsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchProductsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.SearchProductsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeSearchProductsWithContext(ctx context.Context, in *servicecatalog.SearchProductsInput, _ ...request.Option) (*servicecatalog.SearchProductsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SearchProducts cancelled", ctx.Err())
	default:
		return d.SearchProducts(in)
	}
}

func (d *ServiceCatalogDouble) SearchProvisionedProducts(i0 *servicecatalog.SearchProvisionedProductsInput) (r0 *servicecatalog.SearchProvisionedProductsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchProvisionedProducts", i0)
	r0, _ = returns[0].(*servicecatalog.SearchProvisionedProductsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) SearchProvisionedProductsPages(i0 *servicecatalog.SearchProvisionedProductsInput, i1 func(*servicecatalog.SearchProvisionedProductsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchProvisionedProductsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceCatalogDouble) fakeSearchProvisionedProductsPages(in *servicecatalog.SearchProvisionedProductsInput, pager func(*servicecatalog.SearchProvisionedProductsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("SearchProvisionedProducts", paginators, in, pager)
}

func (d *ServiceCatalogDouble) SearchProvisionedProductsPagesWithContext(i0 context.Context, i1 *servicecatalog.SearchProvisionedProductsInput, i2 func(*servicecatalog.SearchProvisionedProductsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchProvisionedProductsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceCatalogDouble) fakeSearchProvisionedProductsPagesWithContext(ctx context.Context, in *servicecatalog.SearchProvisionedProductsInput, pager func(*servicecatalog.SearchProvisionedProductsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("SearchProvisionedProducts", paginators, ctx, in, pager, options...)
}

func (d *ServiceCatalogDouble) SearchProvisionedProductsRequest(i0 *servicecatalog.SearchProvisionedProductsInput) (r0 *request.Request, r1 *servicecatalog.SearchProvisionedProductsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchProvisionedProductsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.SearchProvisionedProductsOutput)
	return
}

func (d *ServiceCatalogDouble) SearchProvisionedProductsWithContext(i0 context.Context, i1 *servicecatalog.SearchProvisionedProductsInput, i2 ...request.Option) (r0 *servicecatalog.SearchProvisionedProductsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchProvisionedProductsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.SearchProvisionedProductsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeSearchProvisionedProductsWithContext(ctx context.Context, in *servicecatalog.SearchProvisionedProductsInput, _ ...request.Option) (*servicecatalog.SearchProvisionedProductsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SearchProvisionedProducts cancelled", ctx.Err())
	default:
		return d.SearchProvisionedProducts(in)
	}
}

func (d *ServiceCatalogDouble) TerminateProvisionedProduct(i0 *servicecatalog.TerminateProvisionedProductInput) (r0 *servicecatalog.TerminateProvisionedProductOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TerminateProvisionedProduct", i0)
	r0, _ = returns[0].(*servicecatalog.TerminateProvisionedProductOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) TerminateProvisionedProductRequest(i0 *servicecatalog.TerminateProvisionedProductInput) (r0 *request.Request, r1 *servicecatalog.TerminateProvisionedProductOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TerminateProvisionedProductRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.TerminateProvisionedProductOutput)
	return
}

func (d *ServiceCatalogDouble) TerminateProvisionedProductWithContext(i0 context.Context, i1 *servicecatalog.TerminateProvisionedProductInput, i2 ...request.Option) (r0 *servicecatalog.TerminateProvisionedProductOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TerminateProvisionedProductWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.TerminateProvisionedProductOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeTerminateProvisionedProductWithContext(ctx context.Context, in *servicecatalog.TerminateProvisionedProductInput, _ ...request.Option) (*servicecatalog.TerminateProvisionedProductOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TerminateProvisionedProduct cancelled", ctx.Err())
	default:
		return d.TerminateProvisionedProduct(in)
	}
}

func (d *ServiceCatalogDouble) UpdateConstraint(i0 *servicecatalog.UpdateConstraintInput) (r0 *servicecatalog.UpdateConstraintOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateConstraint", i0)
	r0, _ = returns[0].(*servicecatalog.UpdateConstraintOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) UpdateConstraintRequest(i0 *servicecatalog.UpdateConstraintInput) (r0 *request.Request, r1 *servicecatalog.UpdateConstraintOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateConstraintRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.UpdateConstraintOutput)
	return
}

func (d *ServiceCatalogDouble) UpdateConstraintWithContext(i0 context.Context, i1 *servicecatalog.UpdateConstraintInput, i2 ...request.Option) (r0 *servicecatalog.UpdateConstraintOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateConstraintWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.UpdateConstraintOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeUpdateConstraintWithContext(ctx context.Context, in *servicecatalog.UpdateConstraintInput, _ ...request.Option) (*servicecatalog.UpdateConstraintOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateConstraint cancelled", ctx.Err())
	default:
		return d.UpdateConstraint(in)
	}
}

func (d *ServiceCatalogDouble) UpdatePortfolio(i0 *servicecatalog.UpdatePortfolioInput) (r0 *servicecatalog.UpdatePortfolioOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePortfolio", i0)
	r0, _ = returns[0].(*servicecatalog.UpdatePortfolioOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) UpdatePortfolioRequest(i0 *servicecatalog.UpdatePortfolioInput) (r0 *request.Request, r1 *servicecatalog.UpdatePortfolioOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePortfolioRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.UpdatePortfolioOutput)
	return
}

func (d *ServiceCatalogDouble) UpdatePortfolioWithContext(i0 context.Context, i1 *servicecatalog.UpdatePortfolioInput, i2 ...request.Option) (r0 *servicecatalog.UpdatePortfolioOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePortfolioWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.UpdatePortfolioOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeUpdatePortfolioWithContext(ctx context.Context, in *servicecatalog.UpdatePortfolioInput, _ ...request.Option) (*servicecatalog.UpdatePortfolioOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdatePortfolio cancelled", ctx.Err())
	default:
		return d.UpdatePortfolio(in)
	}
}

func (d *ServiceCatalogDouble) UpdateProduct(i0 *servicecatalog.UpdateProductInput) (r0 *servicecatalog.UpdateProductOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateProduct", i0)
	r0, _ = returns[0].(*servicecatalog.UpdateProductOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) UpdateProductRequest(i0 *servicecatalog.UpdateProductInput) (r0 *request.Request, r1 *servicecatalog.UpdateProductOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateProductRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.UpdateProductOutput)
	return
}

func (d *ServiceCatalogDouble) UpdateProductWithContext(i0 context.Context, i1 *servicecatalog.UpdateProductInput, i2 ...request.Option) (r0 *servicecatalog.UpdateProductOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateProductWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.UpdateProductOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeUpdateProductWithContext(ctx context.Context, in *servicecatalog.UpdateProductInput, _ ...request.Option) (*servicecatalog.UpdateProductOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateProduct cancelled", ctx.Err())
	default:
		return d.UpdateProduct(in)
	}
}

func (d *ServiceCatalogDouble) UpdateProvisionedProduct(i0 *servicecatalog.UpdateProvisionedProductInput) (r0 *servicecatalog.UpdateProvisionedProductOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateProvisionedProduct", i0)
	r0, _ = returns[0].(*servicecatalog.UpdateProvisionedProductOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) UpdateProvisionedProductProperties(i0 *servicecatalog.UpdateProvisionedProductPropertiesInput) (r0 *servicecatalog.UpdateProvisionedProductPropertiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateProvisionedProductProperties", i0)
	r0, _ = returns[0].(*servicecatalog.UpdateProvisionedProductPropertiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) UpdateProvisionedProductPropertiesRequest(i0 *servicecatalog.UpdateProvisionedProductPropertiesInput) (r0 *request.Request, r1 *servicecatalog.UpdateProvisionedProductPropertiesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateProvisionedProductPropertiesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.UpdateProvisionedProductPropertiesOutput)
	return
}

func (d *ServiceCatalogDouble) UpdateProvisionedProductPropertiesWithContext(i0 context.Context, i1 *servicecatalog.UpdateProvisionedProductPropertiesInput, i2 ...request.Option) (r0 *servicecatalog.UpdateProvisionedProductPropertiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateProvisionedProductPropertiesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.UpdateProvisionedProductPropertiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeUpdateProvisionedProductPropertiesWithContext(ctx context.Context, in *servicecatalog.UpdateProvisionedProductPropertiesInput, _ ...request.Option) (*servicecatalog.UpdateProvisionedProductPropertiesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateProvisionedProductProperties cancelled", ctx.Err())
	default:
		return d.UpdateProvisionedProductProperties(in)
	}
}

func (d *ServiceCatalogDouble) UpdateProvisionedProductRequest(i0 *servicecatalog.UpdateProvisionedProductInput) (r0 *request.Request, r1 *servicecatalog.UpdateProvisionedProductOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateProvisionedProductRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.UpdateProvisionedProductOutput)
	return
}

func (d *ServiceCatalogDouble) UpdateProvisionedProductWithContext(i0 context.Context, i1 *servicecatalog.UpdateProvisionedProductInput, i2 ...request.Option) (r0 *servicecatalog.UpdateProvisionedProductOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateProvisionedProductWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.UpdateProvisionedProductOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeUpdateProvisionedProductWithContext(ctx context.Context, in *servicecatalog.UpdateProvisionedProductInput, _ ...request.Option) (*servicecatalog.UpdateProvisionedProductOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateProvisionedProduct cancelled", ctx.Err())
	default:
		return d.UpdateProvisionedProduct(in)
	}
}

func (d *ServiceCatalogDouble) UpdateProvisioningArtifact(i0 *servicecatalog.UpdateProvisioningArtifactInput) (r0 *servicecatalog.UpdateProvisioningArtifactOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateProvisioningArtifact", i0)
	r0, _ = returns[0].(*servicecatalog.UpdateProvisioningArtifactOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) UpdateProvisioningArtifactRequest(i0 *servicecatalog.UpdateProvisioningArtifactInput) (r0 *request.Request, r1 *servicecatalog.UpdateProvisioningArtifactOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateProvisioningArtifactRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.UpdateProvisioningArtifactOutput)
	return
}

func (d *ServiceCatalogDouble) UpdateProvisioningArtifactWithContext(i0 context.Context, i1 *servicecatalog.UpdateProvisioningArtifactInput, i2 ...request.Option) (r0 *servicecatalog.UpdateProvisioningArtifactOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateProvisioningArtifactWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.UpdateProvisioningArtifactOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeUpdateProvisioningArtifactWithContext(ctx context.Context, in *servicecatalog.UpdateProvisioningArtifactInput, _ ...request.Option) (*servicecatalog.UpdateProvisioningArtifactOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateProvisioningArtifact cancelled", ctx.Err())
	default:
		return d.UpdateProvisioningArtifact(in)
	}
}

func (d *ServiceCatalogDouble) UpdateServiceAction(i0 *servicecatalog.UpdateServiceActionInput) (r0 *servicecatalog.UpdateServiceActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateServiceAction", i0)
	r0, _ = returns[0].(*servicecatalog.UpdateServiceActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) UpdateServiceActionRequest(i0 *servicecatalog.UpdateServiceActionInput) (r0 *request.Request, r1 *servicecatalog.UpdateServiceActionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateServiceActionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.UpdateServiceActionOutput)
	return
}

func (d *ServiceCatalogDouble) UpdateServiceActionWithContext(i0 context.Context, i1 *servicecatalog.UpdateServiceActionInput, i2 ...request.Option) (r0 *servicecatalog.UpdateServiceActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateServiceActionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.UpdateServiceActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeUpdateServiceActionWithContext(ctx context.Context, in *servicecatalog.UpdateServiceActionInput, _ ...request.Option) (*servicecatalog.UpdateServiceActionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateServiceAction cancelled", ctx.Err())
	default:
		return d.UpdateServiceAction(in)
	}
}

func (d *ServiceCatalogDouble) UpdateTagOption(i0 *servicecatalog.UpdateTagOptionInput) (r0 *servicecatalog.UpdateTagOptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTagOption", i0)
	r0, _ = returns[0].(*servicecatalog.UpdateTagOptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) UpdateTagOptionRequest(i0 *servicecatalog.UpdateTagOptionInput) (r0 *request.Request, r1 *servicecatalog.UpdateTagOptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTagOptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicecatalog.UpdateTagOptionOutput)
	return
}

func (d *ServiceCatalogDouble) UpdateTagOptionWithContext(i0 context.Context, i1 *servicecatalog.UpdateTagOptionInput, i2 ...request.Option) (r0 *servicecatalog.UpdateTagOptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTagOptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicecatalog.UpdateTagOptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceCatalogDouble) fakeUpdateTagOptionWithContext(ctx context.Context, in *servicecatalog.UpdateTagOptionInput, _ ...request.Option) (*servicecatalog.UpdateTagOptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateTagOption cancelled", ctx.Err())
	default:
		return d.UpdateTagOption(in)
	}
}
