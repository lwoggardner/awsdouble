// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:11:25+11:00

// Package backupdouble provides a TestDouble implementation of backupiface.BackupAPI
package backupdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/backup"
	"github.com/aws/aws-sdk-go/service/backup/backupiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// BackupDouble is TestDouble for backupiface.BackupAPI
type BackupDouble struct {
	backupiface.BackupAPI
	*awsdouble.AWSTestDouble
}

// Constructor for BackupDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *BackupDouble {
	result := &BackupDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*backupiface.BackupAPI)(nil), configurators...)
	return result
}

func (d *BackupDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *BackupDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CreateBackupPlanWithContext":
		return m.Fake(d.fakeCreateBackupPlanWithContext)

	case "CreateBackupSelectionWithContext":
		return m.Fake(d.fakeCreateBackupSelectionWithContext)

	case "CreateBackupVaultWithContext":
		return m.Fake(d.fakeCreateBackupVaultWithContext)

	case "DeleteBackupPlanWithContext":
		return m.Fake(d.fakeDeleteBackupPlanWithContext)

	case "DeleteBackupSelectionWithContext":
		return m.Fake(d.fakeDeleteBackupSelectionWithContext)

	case "DeleteBackupVaultAccessPolicyWithContext":
		return m.Fake(d.fakeDeleteBackupVaultAccessPolicyWithContext)

	case "DeleteBackupVaultNotificationsWithContext":
		return m.Fake(d.fakeDeleteBackupVaultNotificationsWithContext)

	case "DeleteBackupVaultWithContext":
		return m.Fake(d.fakeDeleteBackupVaultWithContext)

	case "DeleteRecoveryPointWithContext":
		return m.Fake(d.fakeDeleteRecoveryPointWithContext)

	case "DescribeBackupJobWithContext":
		return m.Fake(d.fakeDescribeBackupJobWithContext)

	case "DescribeBackupVaultWithContext":
		return m.Fake(d.fakeDescribeBackupVaultWithContext)

	case "DescribeCopyJobWithContext":
		return m.Fake(d.fakeDescribeCopyJobWithContext)

	case "DescribeProtectedResourceWithContext":
		return m.Fake(d.fakeDescribeProtectedResourceWithContext)

	case "DescribeRecoveryPointWithContext":
		return m.Fake(d.fakeDescribeRecoveryPointWithContext)

	case "DescribeRestoreJobWithContext":
		return m.Fake(d.fakeDescribeRestoreJobWithContext)

	case "ExportBackupPlanTemplateWithContext":
		return m.Fake(d.fakeExportBackupPlanTemplateWithContext)

	case "GetBackupPlanFromJSONWithContext":
		return m.Fake(d.fakeGetBackupPlanFromJSONWithContext)

	case "GetBackupPlanFromTemplateWithContext":
		return m.Fake(d.fakeGetBackupPlanFromTemplateWithContext)

	case "GetBackupPlanWithContext":
		return m.Fake(d.fakeGetBackupPlanWithContext)

	case "GetBackupSelectionWithContext":
		return m.Fake(d.fakeGetBackupSelectionWithContext)

	case "GetBackupVaultAccessPolicyWithContext":
		return m.Fake(d.fakeGetBackupVaultAccessPolicyWithContext)

	case "GetBackupVaultNotificationsWithContext":
		return m.Fake(d.fakeGetBackupVaultNotificationsWithContext)

	case "GetRecoveryPointRestoreMetadataWithContext":
		return m.Fake(d.fakeGetRecoveryPointRestoreMetadataWithContext)

	case "GetSupportedResourceTypesWithContext":
		return m.Fake(d.fakeGetSupportedResourceTypesWithContext)

	case "ListBackupJobsPages":
		return m.Fake(d.fakeListBackupJobsPages)

	case "ListBackupJobsPagesWithContext":
		return m.Fake(d.fakeListBackupJobsPagesWithContext)

	case "ListBackupJobsWithContext":
		return m.Fake(d.fakeListBackupJobsWithContext)

	case "ListBackupPlanTemplatesPages":
		return m.Fake(d.fakeListBackupPlanTemplatesPages)

	case "ListBackupPlanTemplatesPagesWithContext":
		return m.Fake(d.fakeListBackupPlanTemplatesPagesWithContext)

	case "ListBackupPlanTemplatesWithContext":
		return m.Fake(d.fakeListBackupPlanTemplatesWithContext)

	case "ListBackupPlanVersionsPages":
		return m.Fake(d.fakeListBackupPlanVersionsPages)

	case "ListBackupPlanVersionsPagesWithContext":
		return m.Fake(d.fakeListBackupPlanVersionsPagesWithContext)

	case "ListBackupPlanVersionsWithContext":
		return m.Fake(d.fakeListBackupPlanVersionsWithContext)

	case "ListBackupPlansPages":
		return m.Fake(d.fakeListBackupPlansPages)

	case "ListBackupPlansPagesWithContext":
		return m.Fake(d.fakeListBackupPlansPagesWithContext)

	case "ListBackupPlansWithContext":
		return m.Fake(d.fakeListBackupPlansWithContext)

	case "ListBackupSelectionsPages":
		return m.Fake(d.fakeListBackupSelectionsPages)

	case "ListBackupSelectionsPagesWithContext":
		return m.Fake(d.fakeListBackupSelectionsPagesWithContext)

	case "ListBackupSelectionsWithContext":
		return m.Fake(d.fakeListBackupSelectionsWithContext)

	case "ListBackupVaultsPages":
		return m.Fake(d.fakeListBackupVaultsPages)

	case "ListBackupVaultsPagesWithContext":
		return m.Fake(d.fakeListBackupVaultsPagesWithContext)

	case "ListBackupVaultsWithContext":
		return m.Fake(d.fakeListBackupVaultsWithContext)

	case "ListCopyJobsPages":
		return m.Fake(d.fakeListCopyJobsPages)

	case "ListCopyJobsPagesWithContext":
		return m.Fake(d.fakeListCopyJobsPagesWithContext)

	case "ListCopyJobsWithContext":
		return m.Fake(d.fakeListCopyJobsWithContext)

	case "ListProtectedResourcesPages":
		return m.Fake(d.fakeListProtectedResourcesPages)

	case "ListProtectedResourcesPagesWithContext":
		return m.Fake(d.fakeListProtectedResourcesPagesWithContext)

	case "ListProtectedResourcesWithContext":
		return m.Fake(d.fakeListProtectedResourcesWithContext)

	case "ListRecoveryPointsByBackupVaultPages":
		return m.Fake(d.fakeListRecoveryPointsByBackupVaultPages)

	case "ListRecoveryPointsByBackupVaultPagesWithContext":
		return m.Fake(d.fakeListRecoveryPointsByBackupVaultPagesWithContext)

	case "ListRecoveryPointsByBackupVaultWithContext":
		return m.Fake(d.fakeListRecoveryPointsByBackupVaultWithContext)

	case "ListRecoveryPointsByResourcePages":
		return m.Fake(d.fakeListRecoveryPointsByResourcePages)

	case "ListRecoveryPointsByResourcePagesWithContext":
		return m.Fake(d.fakeListRecoveryPointsByResourcePagesWithContext)

	case "ListRecoveryPointsByResourceWithContext":
		return m.Fake(d.fakeListRecoveryPointsByResourceWithContext)

	case "ListRestoreJobsPages":
		return m.Fake(d.fakeListRestoreJobsPages)

	case "ListRestoreJobsPagesWithContext":
		return m.Fake(d.fakeListRestoreJobsPagesWithContext)

	case "ListRestoreJobsWithContext":
		return m.Fake(d.fakeListRestoreJobsWithContext)

	case "ListTagsPages":
		return m.Fake(d.fakeListTagsPages)

	case "ListTagsPagesWithContext":
		return m.Fake(d.fakeListTagsPagesWithContext)

	case "ListTagsWithContext":
		return m.Fake(d.fakeListTagsWithContext)

	case "PutBackupVaultAccessPolicyWithContext":
		return m.Fake(d.fakePutBackupVaultAccessPolicyWithContext)

	case "PutBackupVaultNotificationsWithContext":
		return m.Fake(d.fakePutBackupVaultNotificationsWithContext)

	case "StartBackupJobWithContext":
		return m.Fake(d.fakeStartBackupJobWithContext)

	case "StartCopyJobWithContext":
		return m.Fake(d.fakeStartCopyJobWithContext)

	case "StartRestoreJobWithContext":
		return m.Fake(d.fakeStartRestoreJobWithContext)

	case "StopBackupJobWithContext":
		return m.Fake(d.fakeStopBackupJobWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateBackupPlanWithContext":
		return m.Fake(d.fakeUpdateBackupPlanWithContext)

	case "UpdateRecoveryPointLifecycleWithContext":
		return m.Fake(d.fakeUpdateRecoveryPointLifecycleWithContext)

	default:
		return nil
	}
}

func (d *BackupDouble) CreateBackupPlan(i0 *backup.CreateBackupPlanInput) (r0 *backup.CreateBackupPlanOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBackupPlan", i0)
	r0, _ = returns[0].(*backup.CreateBackupPlanOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) CreateBackupPlanRequest(i0 *backup.CreateBackupPlanInput) (r0 *request.Request, r1 *backup.CreateBackupPlanOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBackupPlanRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.CreateBackupPlanOutput)
	return
}

func (d *BackupDouble) CreateBackupPlanWithContext(i0 context.Context, i1 *backup.CreateBackupPlanInput, i2 ...request.Option) (r0 *backup.CreateBackupPlanOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBackupPlanWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.CreateBackupPlanOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeCreateBackupPlanWithContext(ctx context.Context, in *backup.CreateBackupPlanInput, _ ...request.Option) (*backup.CreateBackupPlanOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateBackupPlan cancelled", ctx.Err())
	default:
		return d.CreateBackupPlan(in)
	}
}

func (d *BackupDouble) CreateBackupSelection(i0 *backup.CreateBackupSelectionInput) (r0 *backup.CreateBackupSelectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBackupSelection", i0)
	r0, _ = returns[0].(*backup.CreateBackupSelectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) CreateBackupSelectionRequest(i0 *backup.CreateBackupSelectionInput) (r0 *request.Request, r1 *backup.CreateBackupSelectionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBackupSelectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.CreateBackupSelectionOutput)
	return
}

func (d *BackupDouble) CreateBackupSelectionWithContext(i0 context.Context, i1 *backup.CreateBackupSelectionInput, i2 ...request.Option) (r0 *backup.CreateBackupSelectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBackupSelectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.CreateBackupSelectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeCreateBackupSelectionWithContext(ctx context.Context, in *backup.CreateBackupSelectionInput, _ ...request.Option) (*backup.CreateBackupSelectionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateBackupSelection cancelled", ctx.Err())
	default:
		return d.CreateBackupSelection(in)
	}
}

func (d *BackupDouble) CreateBackupVault(i0 *backup.CreateBackupVaultInput) (r0 *backup.CreateBackupVaultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBackupVault", i0)
	r0, _ = returns[0].(*backup.CreateBackupVaultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) CreateBackupVaultRequest(i0 *backup.CreateBackupVaultInput) (r0 *request.Request, r1 *backup.CreateBackupVaultOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBackupVaultRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.CreateBackupVaultOutput)
	return
}

func (d *BackupDouble) CreateBackupVaultWithContext(i0 context.Context, i1 *backup.CreateBackupVaultInput, i2 ...request.Option) (r0 *backup.CreateBackupVaultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBackupVaultWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.CreateBackupVaultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeCreateBackupVaultWithContext(ctx context.Context, in *backup.CreateBackupVaultInput, _ ...request.Option) (*backup.CreateBackupVaultOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateBackupVault cancelled", ctx.Err())
	default:
		return d.CreateBackupVault(in)
	}
}

func (d *BackupDouble) DeleteBackupPlan(i0 *backup.DeleteBackupPlanInput) (r0 *backup.DeleteBackupPlanOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBackupPlan", i0)
	r0, _ = returns[0].(*backup.DeleteBackupPlanOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) DeleteBackupPlanRequest(i0 *backup.DeleteBackupPlanInput) (r0 *request.Request, r1 *backup.DeleteBackupPlanOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBackupPlanRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.DeleteBackupPlanOutput)
	return
}

func (d *BackupDouble) DeleteBackupPlanWithContext(i0 context.Context, i1 *backup.DeleteBackupPlanInput, i2 ...request.Option) (r0 *backup.DeleteBackupPlanOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBackupPlanWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.DeleteBackupPlanOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeDeleteBackupPlanWithContext(ctx context.Context, in *backup.DeleteBackupPlanInput, _ ...request.Option) (*backup.DeleteBackupPlanOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteBackupPlan cancelled", ctx.Err())
	default:
		return d.DeleteBackupPlan(in)
	}
}

func (d *BackupDouble) DeleteBackupSelection(i0 *backup.DeleteBackupSelectionInput) (r0 *backup.DeleteBackupSelectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBackupSelection", i0)
	r0, _ = returns[0].(*backup.DeleteBackupSelectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) DeleteBackupSelectionRequest(i0 *backup.DeleteBackupSelectionInput) (r0 *request.Request, r1 *backup.DeleteBackupSelectionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBackupSelectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.DeleteBackupSelectionOutput)
	return
}

func (d *BackupDouble) DeleteBackupSelectionWithContext(i0 context.Context, i1 *backup.DeleteBackupSelectionInput, i2 ...request.Option) (r0 *backup.DeleteBackupSelectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBackupSelectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.DeleteBackupSelectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeDeleteBackupSelectionWithContext(ctx context.Context, in *backup.DeleteBackupSelectionInput, _ ...request.Option) (*backup.DeleteBackupSelectionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteBackupSelection cancelled", ctx.Err())
	default:
		return d.DeleteBackupSelection(in)
	}
}

func (d *BackupDouble) DeleteBackupVault(i0 *backup.DeleteBackupVaultInput) (r0 *backup.DeleteBackupVaultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBackupVault", i0)
	r0, _ = returns[0].(*backup.DeleteBackupVaultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) DeleteBackupVaultAccessPolicy(i0 *backup.DeleteBackupVaultAccessPolicyInput) (r0 *backup.DeleteBackupVaultAccessPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBackupVaultAccessPolicy", i0)
	r0, _ = returns[0].(*backup.DeleteBackupVaultAccessPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) DeleteBackupVaultAccessPolicyRequest(i0 *backup.DeleteBackupVaultAccessPolicyInput) (r0 *request.Request, r1 *backup.DeleteBackupVaultAccessPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBackupVaultAccessPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.DeleteBackupVaultAccessPolicyOutput)
	return
}

func (d *BackupDouble) DeleteBackupVaultAccessPolicyWithContext(i0 context.Context, i1 *backup.DeleteBackupVaultAccessPolicyInput, i2 ...request.Option) (r0 *backup.DeleteBackupVaultAccessPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBackupVaultAccessPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.DeleteBackupVaultAccessPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeDeleteBackupVaultAccessPolicyWithContext(ctx context.Context, in *backup.DeleteBackupVaultAccessPolicyInput, _ ...request.Option) (*backup.DeleteBackupVaultAccessPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteBackupVaultAccessPolicy cancelled", ctx.Err())
	default:
		return d.DeleteBackupVaultAccessPolicy(in)
	}
}

func (d *BackupDouble) DeleteBackupVaultNotifications(i0 *backup.DeleteBackupVaultNotificationsInput) (r0 *backup.DeleteBackupVaultNotificationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBackupVaultNotifications", i0)
	r0, _ = returns[0].(*backup.DeleteBackupVaultNotificationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) DeleteBackupVaultNotificationsRequest(i0 *backup.DeleteBackupVaultNotificationsInput) (r0 *request.Request, r1 *backup.DeleteBackupVaultNotificationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBackupVaultNotificationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.DeleteBackupVaultNotificationsOutput)
	return
}

func (d *BackupDouble) DeleteBackupVaultNotificationsWithContext(i0 context.Context, i1 *backup.DeleteBackupVaultNotificationsInput, i2 ...request.Option) (r0 *backup.DeleteBackupVaultNotificationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBackupVaultNotificationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.DeleteBackupVaultNotificationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeDeleteBackupVaultNotificationsWithContext(ctx context.Context, in *backup.DeleteBackupVaultNotificationsInput, _ ...request.Option) (*backup.DeleteBackupVaultNotificationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteBackupVaultNotifications cancelled", ctx.Err())
	default:
		return d.DeleteBackupVaultNotifications(in)
	}
}

func (d *BackupDouble) DeleteBackupVaultRequest(i0 *backup.DeleteBackupVaultInput) (r0 *request.Request, r1 *backup.DeleteBackupVaultOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBackupVaultRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.DeleteBackupVaultOutput)
	return
}

func (d *BackupDouble) DeleteBackupVaultWithContext(i0 context.Context, i1 *backup.DeleteBackupVaultInput, i2 ...request.Option) (r0 *backup.DeleteBackupVaultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBackupVaultWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.DeleteBackupVaultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeDeleteBackupVaultWithContext(ctx context.Context, in *backup.DeleteBackupVaultInput, _ ...request.Option) (*backup.DeleteBackupVaultOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteBackupVault cancelled", ctx.Err())
	default:
		return d.DeleteBackupVault(in)
	}
}

func (d *BackupDouble) DeleteRecoveryPoint(i0 *backup.DeleteRecoveryPointInput) (r0 *backup.DeleteRecoveryPointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRecoveryPoint", i0)
	r0, _ = returns[0].(*backup.DeleteRecoveryPointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) DeleteRecoveryPointRequest(i0 *backup.DeleteRecoveryPointInput) (r0 *request.Request, r1 *backup.DeleteRecoveryPointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRecoveryPointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.DeleteRecoveryPointOutput)
	return
}

func (d *BackupDouble) DeleteRecoveryPointWithContext(i0 context.Context, i1 *backup.DeleteRecoveryPointInput, i2 ...request.Option) (r0 *backup.DeleteRecoveryPointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRecoveryPointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.DeleteRecoveryPointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeDeleteRecoveryPointWithContext(ctx context.Context, in *backup.DeleteRecoveryPointInput, _ ...request.Option) (*backup.DeleteRecoveryPointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRecoveryPoint cancelled", ctx.Err())
	default:
		return d.DeleteRecoveryPoint(in)
	}
}

func (d *BackupDouble) DescribeBackupJob(i0 *backup.DescribeBackupJobInput) (r0 *backup.DescribeBackupJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBackupJob", i0)
	r0, _ = returns[0].(*backup.DescribeBackupJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) DescribeBackupJobRequest(i0 *backup.DescribeBackupJobInput) (r0 *request.Request, r1 *backup.DescribeBackupJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBackupJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.DescribeBackupJobOutput)
	return
}

func (d *BackupDouble) DescribeBackupJobWithContext(i0 context.Context, i1 *backup.DescribeBackupJobInput, i2 ...request.Option) (r0 *backup.DescribeBackupJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBackupJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.DescribeBackupJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeDescribeBackupJobWithContext(ctx context.Context, in *backup.DescribeBackupJobInput, _ ...request.Option) (*backup.DescribeBackupJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeBackupJob cancelled", ctx.Err())
	default:
		return d.DescribeBackupJob(in)
	}
}

func (d *BackupDouble) DescribeBackupVault(i0 *backup.DescribeBackupVaultInput) (r0 *backup.DescribeBackupVaultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBackupVault", i0)
	r0, _ = returns[0].(*backup.DescribeBackupVaultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) DescribeBackupVaultRequest(i0 *backup.DescribeBackupVaultInput) (r0 *request.Request, r1 *backup.DescribeBackupVaultOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBackupVaultRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.DescribeBackupVaultOutput)
	return
}

func (d *BackupDouble) DescribeBackupVaultWithContext(i0 context.Context, i1 *backup.DescribeBackupVaultInput, i2 ...request.Option) (r0 *backup.DescribeBackupVaultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBackupVaultWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.DescribeBackupVaultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeDescribeBackupVaultWithContext(ctx context.Context, in *backup.DescribeBackupVaultInput, _ ...request.Option) (*backup.DescribeBackupVaultOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeBackupVault cancelled", ctx.Err())
	default:
		return d.DescribeBackupVault(in)
	}
}

func (d *BackupDouble) DescribeCopyJob(i0 *backup.DescribeCopyJobInput) (r0 *backup.DescribeCopyJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCopyJob", i0)
	r0, _ = returns[0].(*backup.DescribeCopyJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) DescribeCopyJobRequest(i0 *backup.DescribeCopyJobInput) (r0 *request.Request, r1 *backup.DescribeCopyJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCopyJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.DescribeCopyJobOutput)
	return
}

func (d *BackupDouble) DescribeCopyJobWithContext(i0 context.Context, i1 *backup.DescribeCopyJobInput, i2 ...request.Option) (r0 *backup.DescribeCopyJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCopyJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.DescribeCopyJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeDescribeCopyJobWithContext(ctx context.Context, in *backup.DescribeCopyJobInput, _ ...request.Option) (*backup.DescribeCopyJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeCopyJob cancelled", ctx.Err())
	default:
		return d.DescribeCopyJob(in)
	}
}

func (d *BackupDouble) DescribeProtectedResource(i0 *backup.DescribeProtectedResourceInput) (r0 *backup.DescribeProtectedResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProtectedResource", i0)
	r0, _ = returns[0].(*backup.DescribeProtectedResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) DescribeProtectedResourceRequest(i0 *backup.DescribeProtectedResourceInput) (r0 *request.Request, r1 *backup.DescribeProtectedResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProtectedResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.DescribeProtectedResourceOutput)
	return
}

func (d *BackupDouble) DescribeProtectedResourceWithContext(i0 context.Context, i1 *backup.DescribeProtectedResourceInput, i2 ...request.Option) (r0 *backup.DescribeProtectedResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProtectedResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.DescribeProtectedResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeDescribeProtectedResourceWithContext(ctx context.Context, in *backup.DescribeProtectedResourceInput, _ ...request.Option) (*backup.DescribeProtectedResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeProtectedResource cancelled", ctx.Err())
	default:
		return d.DescribeProtectedResource(in)
	}
}

func (d *BackupDouble) DescribeRecoveryPoint(i0 *backup.DescribeRecoveryPointInput) (r0 *backup.DescribeRecoveryPointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRecoveryPoint", i0)
	r0, _ = returns[0].(*backup.DescribeRecoveryPointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) DescribeRecoveryPointRequest(i0 *backup.DescribeRecoveryPointInput) (r0 *request.Request, r1 *backup.DescribeRecoveryPointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRecoveryPointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.DescribeRecoveryPointOutput)
	return
}

func (d *BackupDouble) DescribeRecoveryPointWithContext(i0 context.Context, i1 *backup.DescribeRecoveryPointInput, i2 ...request.Option) (r0 *backup.DescribeRecoveryPointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRecoveryPointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.DescribeRecoveryPointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeDescribeRecoveryPointWithContext(ctx context.Context, in *backup.DescribeRecoveryPointInput, _ ...request.Option) (*backup.DescribeRecoveryPointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeRecoveryPoint cancelled", ctx.Err())
	default:
		return d.DescribeRecoveryPoint(in)
	}
}

func (d *BackupDouble) DescribeRestoreJob(i0 *backup.DescribeRestoreJobInput) (r0 *backup.DescribeRestoreJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRestoreJob", i0)
	r0, _ = returns[0].(*backup.DescribeRestoreJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) DescribeRestoreJobRequest(i0 *backup.DescribeRestoreJobInput) (r0 *request.Request, r1 *backup.DescribeRestoreJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRestoreJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.DescribeRestoreJobOutput)
	return
}

func (d *BackupDouble) DescribeRestoreJobWithContext(i0 context.Context, i1 *backup.DescribeRestoreJobInput, i2 ...request.Option) (r0 *backup.DescribeRestoreJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRestoreJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.DescribeRestoreJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeDescribeRestoreJobWithContext(ctx context.Context, in *backup.DescribeRestoreJobInput, _ ...request.Option) (*backup.DescribeRestoreJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeRestoreJob cancelled", ctx.Err())
	default:
		return d.DescribeRestoreJob(in)
	}
}

func (d *BackupDouble) ExportBackupPlanTemplate(i0 *backup.ExportBackupPlanTemplateInput) (r0 *backup.ExportBackupPlanTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExportBackupPlanTemplate", i0)
	r0, _ = returns[0].(*backup.ExportBackupPlanTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) ExportBackupPlanTemplateRequest(i0 *backup.ExportBackupPlanTemplateInput) (r0 *request.Request, r1 *backup.ExportBackupPlanTemplateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExportBackupPlanTemplateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.ExportBackupPlanTemplateOutput)
	return
}

func (d *BackupDouble) ExportBackupPlanTemplateWithContext(i0 context.Context, i1 *backup.ExportBackupPlanTemplateInput, i2 ...request.Option) (r0 *backup.ExportBackupPlanTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExportBackupPlanTemplateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.ExportBackupPlanTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeExportBackupPlanTemplateWithContext(ctx context.Context, in *backup.ExportBackupPlanTemplateInput, _ ...request.Option) (*backup.ExportBackupPlanTemplateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ExportBackupPlanTemplate cancelled", ctx.Err())
	default:
		return d.ExportBackupPlanTemplate(in)
	}
}

func (d *BackupDouble) GetBackupPlan(i0 *backup.GetBackupPlanInput) (r0 *backup.GetBackupPlanOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBackupPlan", i0)
	r0, _ = returns[0].(*backup.GetBackupPlanOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) GetBackupPlanFromJSON(i0 *backup.GetBackupPlanFromJSONInput) (r0 *backup.GetBackupPlanFromJSONOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBackupPlanFromJSON", i0)
	r0, _ = returns[0].(*backup.GetBackupPlanFromJSONOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) GetBackupPlanFromJSONRequest(i0 *backup.GetBackupPlanFromJSONInput) (r0 *request.Request, r1 *backup.GetBackupPlanFromJSONOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBackupPlanFromJSONRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.GetBackupPlanFromJSONOutput)
	return
}

func (d *BackupDouble) GetBackupPlanFromJSONWithContext(i0 context.Context, i1 *backup.GetBackupPlanFromJSONInput, i2 ...request.Option) (r0 *backup.GetBackupPlanFromJSONOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBackupPlanFromJSONWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.GetBackupPlanFromJSONOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeGetBackupPlanFromJSONWithContext(ctx context.Context, in *backup.GetBackupPlanFromJSONInput, _ ...request.Option) (*backup.GetBackupPlanFromJSONOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBackupPlanFromJSON cancelled", ctx.Err())
	default:
		return d.GetBackupPlanFromJSON(in)
	}
}

func (d *BackupDouble) GetBackupPlanFromTemplate(i0 *backup.GetBackupPlanFromTemplateInput) (r0 *backup.GetBackupPlanFromTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBackupPlanFromTemplate", i0)
	r0, _ = returns[0].(*backup.GetBackupPlanFromTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) GetBackupPlanFromTemplateRequest(i0 *backup.GetBackupPlanFromTemplateInput) (r0 *request.Request, r1 *backup.GetBackupPlanFromTemplateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBackupPlanFromTemplateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.GetBackupPlanFromTemplateOutput)
	return
}

func (d *BackupDouble) GetBackupPlanFromTemplateWithContext(i0 context.Context, i1 *backup.GetBackupPlanFromTemplateInput, i2 ...request.Option) (r0 *backup.GetBackupPlanFromTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBackupPlanFromTemplateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.GetBackupPlanFromTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeGetBackupPlanFromTemplateWithContext(ctx context.Context, in *backup.GetBackupPlanFromTemplateInput, _ ...request.Option) (*backup.GetBackupPlanFromTemplateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBackupPlanFromTemplate cancelled", ctx.Err())
	default:
		return d.GetBackupPlanFromTemplate(in)
	}
}

func (d *BackupDouble) GetBackupPlanRequest(i0 *backup.GetBackupPlanInput) (r0 *request.Request, r1 *backup.GetBackupPlanOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBackupPlanRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.GetBackupPlanOutput)
	return
}

func (d *BackupDouble) GetBackupPlanWithContext(i0 context.Context, i1 *backup.GetBackupPlanInput, i2 ...request.Option) (r0 *backup.GetBackupPlanOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBackupPlanWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.GetBackupPlanOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeGetBackupPlanWithContext(ctx context.Context, in *backup.GetBackupPlanInput, _ ...request.Option) (*backup.GetBackupPlanOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBackupPlan cancelled", ctx.Err())
	default:
		return d.GetBackupPlan(in)
	}
}

func (d *BackupDouble) GetBackupSelection(i0 *backup.GetBackupSelectionInput) (r0 *backup.GetBackupSelectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBackupSelection", i0)
	r0, _ = returns[0].(*backup.GetBackupSelectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) GetBackupSelectionRequest(i0 *backup.GetBackupSelectionInput) (r0 *request.Request, r1 *backup.GetBackupSelectionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBackupSelectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.GetBackupSelectionOutput)
	return
}

func (d *BackupDouble) GetBackupSelectionWithContext(i0 context.Context, i1 *backup.GetBackupSelectionInput, i2 ...request.Option) (r0 *backup.GetBackupSelectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBackupSelectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.GetBackupSelectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeGetBackupSelectionWithContext(ctx context.Context, in *backup.GetBackupSelectionInput, _ ...request.Option) (*backup.GetBackupSelectionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBackupSelection cancelled", ctx.Err())
	default:
		return d.GetBackupSelection(in)
	}
}

func (d *BackupDouble) GetBackupVaultAccessPolicy(i0 *backup.GetBackupVaultAccessPolicyInput) (r0 *backup.GetBackupVaultAccessPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBackupVaultAccessPolicy", i0)
	r0, _ = returns[0].(*backup.GetBackupVaultAccessPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) GetBackupVaultAccessPolicyRequest(i0 *backup.GetBackupVaultAccessPolicyInput) (r0 *request.Request, r1 *backup.GetBackupVaultAccessPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBackupVaultAccessPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.GetBackupVaultAccessPolicyOutput)
	return
}

func (d *BackupDouble) GetBackupVaultAccessPolicyWithContext(i0 context.Context, i1 *backup.GetBackupVaultAccessPolicyInput, i2 ...request.Option) (r0 *backup.GetBackupVaultAccessPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBackupVaultAccessPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.GetBackupVaultAccessPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeGetBackupVaultAccessPolicyWithContext(ctx context.Context, in *backup.GetBackupVaultAccessPolicyInput, _ ...request.Option) (*backup.GetBackupVaultAccessPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBackupVaultAccessPolicy cancelled", ctx.Err())
	default:
		return d.GetBackupVaultAccessPolicy(in)
	}
}

func (d *BackupDouble) GetBackupVaultNotifications(i0 *backup.GetBackupVaultNotificationsInput) (r0 *backup.GetBackupVaultNotificationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBackupVaultNotifications", i0)
	r0, _ = returns[0].(*backup.GetBackupVaultNotificationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) GetBackupVaultNotificationsRequest(i0 *backup.GetBackupVaultNotificationsInput) (r0 *request.Request, r1 *backup.GetBackupVaultNotificationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBackupVaultNotificationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.GetBackupVaultNotificationsOutput)
	return
}

func (d *BackupDouble) GetBackupVaultNotificationsWithContext(i0 context.Context, i1 *backup.GetBackupVaultNotificationsInput, i2 ...request.Option) (r0 *backup.GetBackupVaultNotificationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBackupVaultNotificationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.GetBackupVaultNotificationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeGetBackupVaultNotificationsWithContext(ctx context.Context, in *backup.GetBackupVaultNotificationsInput, _ ...request.Option) (*backup.GetBackupVaultNotificationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBackupVaultNotifications cancelled", ctx.Err())
	default:
		return d.GetBackupVaultNotifications(in)
	}
}

func (d *BackupDouble) GetRecoveryPointRestoreMetadata(i0 *backup.GetRecoveryPointRestoreMetadataInput) (r0 *backup.GetRecoveryPointRestoreMetadataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRecoveryPointRestoreMetadata", i0)
	r0, _ = returns[0].(*backup.GetRecoveryPointRestoreMetadataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) GetRecoveryPointRestoreMetadataRequest(i0 *backup.GetRecoveryPointRestoreMetadataInput) (r0 *request.Request, r1 *backup.GetRecoveryPointRestoreMetadataOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRecoveryPointRestoreMetadataRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.GetRecoveryPointRestoreMetadataOutput)
	return
}

func (d *BackupDouble) GetRecoveryPointRestoreMetadataWithContext(i0 context.Context, i1 *backup.GetRecoveryPointRestoreMetadataInput, i2 ...request.Option) (r0 *backup.GetRecoveryPointRestoreMetadataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRecoveryPointRestoreMetadataWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.GetRecoveryPointRestoreMetadataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeGetRecoveryPointRestoreMetadataWithContext(ctx context.Context, in *backup.GetRecoveryPointRestoreMetadataInput, _ ...request.Option) (*backup.GetRecoveryPointRestoreMetadataOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRecoveryPointRestoreMetadata cancelled", ctx.Err())
	default:
		return d.GetRecoveryPointRestoreMetadata(in)
	}
}

func (d *BackupDouble) GetSupportedResourceTypes(i0 *backup.GetSupportedResourceTypesInput) (r0 *backup.GetSupportedResourceTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSupportedResourceTypes", i0)
	r0, _ = returns[0].(*backup.GetSupportedResourceTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) GetSupportedResourceTypesRequest(i0 *backup.GetSupportedResourceTypesInput) (r0 *request.Request, r1 *backup.GetSupportedResourceTypesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSupportedResourceTypesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.GetSupportedResourceTypesOutput)
	return
}

func (d *BackupDouble) GetSupportedResourceTypesWithContext(i0 context.Context, i1 *backup.GetSupportedResourceTypesInput, i2 ...request.Option) (r0 *backup.GetSupportedResourceTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSupportedResourceTypesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.GetSupportedResourceTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeGetSupportedResourceTypesWithContext(ctx context.Context, in *backup.GetSupportedResourceTypesInput, _ ...request.Option) (*backup.GetSupportedResourceTypesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetSupportedResourceTypes cancelled", ctx.Err())
	default:
		return d.GetSupportedResourceTypes(in)
	}
}

func (d *BackupDouble) ListBackupJobs(i0 *backup.ListBackupJobsInput) (r0 *backup.ListBackupJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBackupJobs", i0)
	r0, _ = returns[0].(*backup.ListBackupJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) ListBackupJobsPages(i0 *backup.ListBackupJobsInput, i1 func(*backup.ListBackupJobsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBackupJobsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *BackupDouble) fakeListBackupJobsPages(in *backup.ListBackupJobsInput, pager func(*backup.ListBackupJobsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListBackupJobs", paginators, in, pager)
}

func (d *BackupDouble) ListBackupJobsPagesWithContext(i0 context.Context, i1 *backup.ListBackupJobsInput, i2 func(*backup.ListBackupJobsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBackupJobsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *BackupDouble) fakeListBackupJobsPagesWithContext(ctx context.Context, in *backup.ListBackupJobsInput, pager func(*backup.ListBackupJobsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListBackupJobs", paginators, ctx, in, pager, options...)
}

func (d *BackupDouble) ListBackupJobsRequest(i0 *backup.ListBackupJobsInput) (r0 *request.Request, r1 *backup.ListBackupJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBackupJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.ListBackupJobsOutput)
	return
}

func (d *BackupDouble) ListBackupJobsWithContext(i0 context.Context, i1 *backup.ListBackupJobsInput, i2 ...request.Option) (r0 *backup.ListBackupJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBackupJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.ListBackupJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeListBackupJobsWithContext(ctx context.Context, in *backup.ListBackupJobsInput, _ ...request.Option) (*backup.ListBackupJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListBackupJobs cancelled", ctx.Err())
	default:
		return d.ListBackupJobs(in)
	}
}

func (d *BackupDouble) ListBackupPlanTemplates(i0 *backup.ListBackupPlanTemplatesInput) (r0 *backup.ListBackupPlanTemplatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBackupPlanTemplates", i0)
	r0, _ = returns[0].(*backup.ListBackupPlanTemplatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) ListBackupPlanTemplatesPages(i0 *backup.ListBackupPlanTemplatesInput, i1 func(*backup.ListBackupPlanTemplatesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBackupPlanTemplatesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *BackupDouble) fakeListBackupPlanTemplatesPages(in *backup.ListBackupPlanTemplatesInput, pager func(*backup.ListBackupPlanTemplatesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListBackupPlanTemplates", paginators, in, pager)
}

func (d *BackupDouble) ListBackupPlanTemplatesPagesWithContext(i0 context.Context, i1 *backup.ListBackupPlanTemplatesInput, i2 func(*backup.ListBackupPlanTemplatesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBackupPlanTemplatesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *BackupDouble) fakeListBackupPlanTemplatesPagesWithContext(ctx context.Context, in *backup.ListBackupPlanTemplatesInput, pager func(*backup.ListBackupPlanTemplatesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListBackupPlanTemplates", paginators, ctx, in, pager, options...)
}

func (d *BackupDouble) ListBackupPlanTemplatesRequest(i0 *backup.ListBackupPlanTemplatesInput) (r0 *request.Request, r1 *backup.ListBackupPlanTemplatesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBackupPlanTemplatesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.ListBackupPlanTemplatesOutput)
	return
}

func (d *BackupDouble) ListBackupPlanTemplatesWithContext(i0 context.Context, i1 *backup.ListBackupPlanTemplatesInput, i2 ...request.Option) (r0 *backup.ListBackupPlanTemplatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBackupPlanTemplatesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.ListBackupPlanTemplatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeListBackupPlanTemplatesWithContext(ctx context.Context, in *backup.ListBackupPlanTemplatesInput, _ ...request.Option) (*backup.ListBackupPlanTemplatesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListBackupPlanTemplates cancelled", ctx.Err())
	default:
		return d.ListBackupPlanTemplates(in)
	}
}

func (d *BackupDouble) ListBackupPlanVersions(i0 *backup.ListBackupPlanVersionsInput) (r0 *backup.ListBackupPlanVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBackupPlanVersions", i0)
	r0, _ = returns[0].(*backup.ListBackupPlanVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) ListBackupPlanVersionsPages(i0 *backup.ListBackupPlanVersionsInput, i1 func(*backup.ListBackupPlanVersionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBackupPlanVersionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *BackupDouble) fakeListBackupPlanVersionsPages(in *backup.ListBackupPlanVersionsInput, pager func(*backup.ListBackupPlanVersionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListBackupPlanVersions", paginators, in, pager)
}

func (d *BackupDouble) ListBackupPlanVersionsPagesWithContext(i0 context.Context, i1 *backup.ListBackupPlanVersionsInput, i2 func(*backup.ListBackupPlanVersionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBackupPlanVersionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *BackupDouble) fakeListBackupPlanVersionsPagesWithContext(ctx context.Context, in *backup.ListBackupPlanVersionsInput, pager func(*backup.ListBackupPlanVersionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListBackupPlanVersions", paginators, ctx, in, pager, options...)
}

func (d *BackupDouble) ListBackupPlanVersionsRequest(i0 *backup.ListBackupPlanVersionsInput) (r0 *request.Request, r1 *backup.ListBackupPlanVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBackupPlanVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.ListBackupPlanVersionsOutput)
	return
}

func (d *BackupDouble) ListBackupPlanVersionsWithContext(i0 context.Context, i1 *backup.ListBackupPlanVersionsInput, i2 ...request.Option) (r0 *backup.ListBackupPlanVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBackupPlanVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.ListBackupPlanVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeListBackupPlanVersionsWithContext(ctx context.Context, in *backup.ListBackupPlanVersionsInput, _ ...request.Option) (*backup.ListBackupPlanVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListBackupPlanVersions cancelled", ctx.Err())
	default:
		return d.ListBackupPlanVersions(in)
	}
}

func (d *BackupDouble) ListBackupPlans(i0 *backup.ListBackupPlansInput) (r0 *backup.ListBackupPlansOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBackupPlans", i0)
	r0, _ = returns[0].(*backup.ListBackupPlansOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) ListBackupPlansPages(i0 *backup.ListBackupPlansInput, i1 func(*backup.ListBackupPlansOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBackupPlansPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *BackupDouble) fakeListBackupPlansPages(in *backup.ListBackupPlansInput, pager func(*backup.ListBackupPlansOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListBackupPlans", paginators, in, pager)
}

func (d *BackupDouble) ListBackupPlansPagesWithContext(i0 context.Context, i1 *backup.ListBackupPlansInput, i2 func(*backup.ListBackupPlansOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBackupPlansPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *BackupDouble) fakeListBackupPlansPagesWithContext(ctx context.Context, in *backup.ListBackupPlansInput, pager func(*backup.ListBackupPlansOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListBackupPlans", paginators, ctx, in, pager, options...)
}

func (d *BackupDouble) ListBackupPlansRequest(i0 *backup.ListBackupPlansInput) (r0 *request.Request, r1 *backup.ListBackupPlansOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBackupPlansRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.ListBackupPlansOutput)
	return
}

func (d *BackupDouble) ListBackupPlansWithContext(i0 context.Context, i1 *backup.ListBackupPlansInput, i2 ...request.Option) (r0 *backup.ListBackupPlansOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBackupPlansWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.ListBackupPlansOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeListBackupPlansWithContext(ctx context.Context, in *backup.ListBackupPlansInput, _ ...request.Option) (*backup.ListBackupPlansOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListBackupPlans cancelled", ctx.Err())
	default:
		return d.ListBackupPlans(in)
	}
}

func (d *BackupDouble) ListBackupSelections(i0 *backup.ListBackupSelectionsInput) (r0 *backup.ListBackupSelectionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBackupSelections", i0)
	r0, _ = returns[0].(*backup.ListBackupSelectionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) ListBackupSelectionsPages(i0 *backup.ListBackupSelectionsInput, i1 func(*backup.ListBackupSelectionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBackupSelectionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *BackupDouble) fakeListBackupSelectionsPages(in *backup.ListBackupSelectionsInput, pager func(*backup.ListBackupSelectionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListBackupSelections", paginators, in, pager)
}

func (d *BackupDouble) ListBackupSelectionsPagesWithContext(i0 context.Context, i1 *backup.ListBackupSelectionsInput, i2 func(*backup.ListBackupSelectionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBackupSelectionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *BackupDouble) fakeListBackupSelectionsPagesWithContext(ctx context.Context, in *backup.ListBackupSelectionsInput, pager func(*backup.ListBackupSelectionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListBackupSelections", paginators, ctx, in, pager, options...)
}

func (d *BackupDouble) ListBackupSelectionsRequest(i0 *backup.ListBackupSelectionsInput) (r0 *request.Request, r1 *backup.ListBackupSelectionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBackupSelectionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.ListBackupSelectionsOutput)
	return
}

func (d *BackupDouble) ListBackupSelectionsWithContext(i0 context.Context, i1 *backup.ListBackupSelectionsInput, i2 ...request.Option) (r0 *backup.ListBackupSelectionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBackupSelectionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.ListBackupSelectionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeListBackupSelectionsWithContext(ctx context.Context, in *backup.ListBackupSelectionsInput, _ ...request.Option) (*backup.ListBackupSelectionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListBackupSelections cancelled", ctx.Err())
	default:
		return d.ListBackupSelections(in)
	}
}

func (d *BackupDouble) ListBackupVaults(i0 *backup.ListBackupVaultsInput) (r0 *backup.ListBackupVaultsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBackupVaults", i0)
	r0, _ = returns[0].(*backup.ListBackupVaultsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) ListBackupVaultsPages(i0 *backup.ListBackupVaultsInput, i1 func(*backup.ListBackupVaultsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBackupVaultsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *BackupDouble) fakeListBackupVaultsPages(in *backup.ListBackupVaultsInput, pager func(*backup.ListBackupVaultsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListBackupVaults", paginators, in, pager)
}

func (d *BackupDouble) ListBackupVaultsPagesWithContext(i0 context.Context, i1 *backup.ListBackupVaultsInput, i2 func(*backup.ListBackupVaultsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBackupVaultsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *BackupDouble) fakeListBackupVaultsPagesWithContext(ctx context.Context, in *backup.ListBackupVaultsInput, pager func(*backup.ListBackupVaultsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListBackupVaults", paginators, ctx, in, pager, options...)
}

func (d *BackupDouble) ListBackupVaultsRequest(i0 *backup.ListBackupVaultsInput) (r0 *request.Request, r1 *backup.ListBackupVaultsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBackupVaultsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.ListBackupVaultsOutput)
	return
}

func (d *BackupDouble) ListBackupVaultsWithContext(i0 context.Context, i1 *backup.ListBackupVaultsInput, i2 ...request.Option) (r0 *backup.ListBackupVaultsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBackupVaultsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.ListBackupVaultsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeListBackupVaultsWithContext(ctx context.Context, in *backup.ListBackupVaultsInput, _ ...request.Option) (*backup.ListBackupVaultsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListBackupVaults cancelled", ctx.Err())
	default:
		return d.ListBackupVaults(in)
	}
}

func (d *BackupDouble) ListCopyJobs(i0 *backup.ListCopyJobsInput) (r0 *backup.ListCopyJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCopyJobs", i0)
	r0, _ = returns[0].(*backup.ListCopyJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) ListCopyJobsPages(i0 *backup.ListCopyJobsInput, i1 func(*backup.ListCopyJobsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCopyJobsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *BackupDouble) fakeListCopyJobsPages(in *backup.ListCopyJobsInput, pager func(*backup.ListCopyJobsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListCopyJobs", paginators, in, pager)
}

func (d *BackupDouble) ListCopyJobsPagesWithContext(i0 context.Context, i1 *backup.ListCopyJobsInput, i2 func(*backup.ListCopyJobsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCopyJobsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *BackupDouble) fakeListCopyJobsPagesWithContext(ctx context.Context, in *backup.ListCopyJobsInput, pager func(*backup.ListCopyJobsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListCopyJobs", paginators, ctx, in, pager, options...)
}

func (d *BackupDouble) ListCopyJobsRequest(i0 *backup.ListCopyJobsInput) (r0 *request.Request, r1 *backup.ListCopyJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCopyJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.ListCopyJobsOutput)
	return
}

func (d *BackupDouble) ListCopyJobsWithContext(i0 context.Context, i1 *backup.ListCopyJobsInput, i2 ...request.Option) (r0 *backup.ListCopyJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCopyJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.ListCopyJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeListCopyJobsWithContext(ctx context.Context, in *backup.ListCopyJobsInput, _ ...request.Option) (*backup.ListCopyJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListCopyJobs cancelled", ctx.Err())
	default:
		return d.ListCopyJobs(in)
	}
}

func (d *BackupDouble) ListProtectedResources(i0 *backup.ListProtectedResourcesInput) (r0 *backup.ListProtectedResourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProtectedResources", i0)
	r0, _ = returns[0].(*backup.ListProtectedResourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) ListProtectedResourcesPages(i0 *backup.ListProtectedResourcesInput, i1 func(*backup.ListProtectedResourcesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProtectedResourcesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *BackupDouble) fakeListProtectedResourcesPages(in *backup.ListProtectedResourcesInput, pager func(*backup.ListProtectedResourcesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListProtectedResources", paginators, in, pager)
}

func (d *BackupDouble) ListProtectedResourcesPagesWithContext(i0 context.Context, i1 *backup.ListProtectedResourcesInput, i2 func(*backup.ListProtectedResourcesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProtectedResourcesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *BackupDouble) fakeListProtectedResourcesPagesWithContext(ctx context.Context, in *backup.ListProtectedResourcesInput, pager func(*backup.ListProtectedResourcesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListProtectedResources", paginators, ctx, in, pager, options...)
}

func (d *BackupDouble) ListProtectedResourcesRequest(i0 *backup.ListProtectedResourcesInput) (r0 *request.Request, r1 *backup.ListProtectedResourcesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProtectedResourcesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.ListProtectedResourcesOutput)
	return
}

func (d *BackupDouble) ListProtectedResourcesWithContext(i0 context.Context, i1 *backup.ListProtectedResourcesInput, i2 ...request.Option) (r0 *backup.ListProtectedResourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProtectedResourcesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.ListProtectedResourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeListProtectedResourcesWithContext(ctx context.Context, in *backup.ListProtectedResourcesInput, _ ...request.Option) (*backup.ListProtectedResourcesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListProtectedResources cancelled", ctx.Err())
	default:
		return d.ListProtectedResources(in)
	}
}

func (d *BackupDouble) ListRecoveryPointsByBackupVault(i0 *backup.ListRecoveryPointsByBackupVaultInput) (r0 *backup.ListRecoveryPointsByBackupVaultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRecoveryPointsByBackupVault", i0)
	r0, _ = returns[0].(*backup.ListRecoveryPointsByBackupVaultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) ListRecoveryPointsByBackupVaultPages(i0 *backup.ListRecoveryPointsByBackupVaultInput, i1 func(*backup.ListRecoveryPointsByBackupVaultOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRecoveryPointsByBackupVaultPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *BackupDouble) fakeListRecoveryPointsByBackupVaultPages(in *backup.ListRecoveryPointsByBackupVaultInput, pager func(*backup.ListRecoveryPointsByBackupVaultOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListRecoveryPointsByBackupVault", paginators, in, pager)
}

func (d *BackupDouble) ListRecoveryPointsByBackupVaultPagesWithContext(i0 context.Context, i1 *backup.ListRecoveryPointsByBackupVaultInput, i2 func(*backup.ListRecoveryPointsByBackupVaultOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRecoveryPointsByBackupVaultPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *BackupDouble) fakeListRecoveryPointsByBackupVaultPagesWithContext(ctx context.Context, in *backup.ListRecoveryPointsByBackupVaultInput, pager func(*backup.ListRecoveryPointsByBackupVaultOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListRecoveryPointsByBackupVault", paginators, ctx, in, pager, options...)
}

func (d *BackupDouble) ListRecoveryPointsByBackupVaultRequest(i0 *backup.ListRecoveryPointsByBackupVaultInput) (r0 *request.Request, r1 *backup.ListRecoveryPointsByBackupVaultOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRecoveryPointsByBackupVaultRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.ListRecoveryPointsByBackupVaultOutput)
	return
}

func (d *BackupDouble) ListRecoveryPointsByBackupVaultWithContext(i0 context.Context, i1 *backup.ListRecoveryPointsByBackupVaultInput, i2 ...request.Option) (r0 *backup.ListRecoveryPointsByBackupVaultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRecoveryPointsByBackupVaultWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.ListRecoveryPointsByBackupVaultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeListRecoveryPointsByBackupVaultWithContext(ctx context.Context, in *backup.ListRecoveryPointsByBackupVaultInput, _ ...request.Option) (*backup.ListRecoveryPointsByBackupVaultOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListRecoveryPointsByBackupVault cancelled", ctx.Err())
	default:
		return d.ListRecoveryPointsByBackupVault(in)
	}
}

func (d *BackupDouble) ListRecoveryPointsByResource(i0 *backup.ListRecoveryPointsByResourceInput) (r0 *backup.ListRecoveryPointsByResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRecoveryPointsByResource", i0)
	r0, _ = returns[0].(*backup.ListRecoveryPointsByResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) ListRecoveryPointsByResourcePages(i0 *backup.ListRecoveryPointsByResourceInput, i1 func(*backup.ListRecoveryPointsByResourceOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRecoveryPointsByResourcePages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *BackupDouble) fakeListRecoveryPointsByResourcePages(in *backup.ListRecoveryPointsByResourceInput, pager func(*backup.ListRecoveryPointsByResourceOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListRecoveryPointsByResource", paginators, in, pager)
}

func (d *BackupDouble) ListRecoveryPointsByResourcePagesWithContext(i0 context.Context, i1 *backup.ListRecoveryPointsByResourceInput, i2 func(*backup.ListRecoveryPointsByResourceOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRecoveryPointsByResourcePagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *BackupDouble) fakeListRecoveryPointsByResourcePagesWithContext(ctx context.Context, in *backup.ListRecoveryPointsByResourceInput, pager func(*backup.ListRecoveryPointsByResourceOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListRecoveryPointsByResource", paginators, ctx, in, pager, options...)
}

func (d *BackupDouble) ListRecoveryPointsByResourceRequest(i0 *backup.ListRecoveryPointsByResourceInput) (r0 *request.Request, r1 *backup.ListRecoveryPointsByResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRecoveryPointsByResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.ListRecoveryPointsByResourceOutput)
	return
}

func (d *BackupDouble) ListRecoveryPointsByResourceWithContext(i0 context.Context, i1 *backup.ListRecoveryPointsByResourceInput, i2 ...request.Option) (r0 *backup.ListRecoveryPointsByResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRecoveryPointsByResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.ListRecoveryPointsByResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeListRecoveryPointsByResourceWithContext(ctx context.Context, in *backup.ListRecoveryPointsByResourceInput, _ ...request.Option) (*backup.ListRecoveryPointsByResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListRecoveryPointsByResource cancelled", ctx.Err())
	default:
		return d.ListRecoveryPointsByResource(in)
	}
}

func (d *BackupDouble) ListRestoreJobs(i0 *backup.ListRestoreJobsInput) (r0 *backup.ListRestoreJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRestoreJobs", i0)
	r0, _ = returns[0].(*backup.ListRestoreJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) ListRestoreJobsPages(i0 *backup.ListRestoreJobsInput, i1 func(*backup.ListRestoreJobsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRestoreJobsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *BackupDouble) fakeListRestoreJobsPages(in *backup.ListRestoreJobsInput, pager func(*backup.ListRestoreJobsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListRestoreJobs", paginators, in, pager)
}

func (d *BackupDouble) ListRestoreJobsPagesWithContext(i0 context.Context, i1 *backup.ListRestoreJobsInput, i2 func(*backup.ListRestoreJobsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRestoreJobsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *BackupDouble) fakeListRestoreJobsPagesWithContext(ctx context.Context, in *backup.ListRestoreJobsInput, pager func(*backup.ListRestoreJobsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListRestoreJobs", paginators, ctx, in, pager, options...)
}

func (d *BackupDouble) ListRestoreJobsRequest(i0 *backup.ListRestoreJobsInput) (r0 *request.Request, r1 *backup.ListRestoreJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRestoreJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.ListRestoreJobsOutput)
	return
}

func (d *BackupDouble) ListRestoreJobsWithContext(i0 context.Context, i1 *backup.ListRestoreJobsInput, i2 ...request.Option) (r0 *backup.ListRestoreJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRestoreJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.ListRestoreJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeListRestoreJobsWithContext(ctx context.Context, in *backup.ListRestoreJobsInput, _ ...request.Option) (*backup.ListRestoreJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListRestoreJobs cancelled", ctx.Err())
	default:
		return d.ListRestoreJobs(in)
	}
}

func (d *BackupDouble) ListTags(i0 *backup.ListTagsInput) (r0 *backup.ListTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTags", i0)
	r0, _ = returns[0].(*backup.ListTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) ListTagsPages(i0 *backup.ListTagsInput, i1 func(*backup.ListTagsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *BackupDouble) fakeListTagsPages(in *backup.ListTagsInput, pager func(*backup.ListTagsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTags", paginators, in, pager)
}

func (d *BackupDouble) ListTagsPagesWithContext(i0 context.Context, i1 *backup.ListTagsInput, i2 func(*backup.ListTagsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *BackupDouble) fakeListTagsPagesWithContext(ctx context.Context, in *backup.ListTagsInput, pager func(*backup.ListTagsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTags", paginators, ctx, in, pager, options...)
}

func (d *BackupDouble) ListTagsRequest(i0 *backup.ListTagsInput) (r0 *request.Request, r1 *backup.ListTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.ListTagsOutput)
	return
}

func (d *BackupDouble) ListTagsWithContext(i0 context.Context, i1 *backup.ListTagsInput, i2 ...request.Option) (r0 *backup.ListTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.ListTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeListTagsWithContext(ctx context.Context, in *backup.ListTagsInput, _ ...request.Option) (*backup.ListTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTags cancelled", ctx.Err())
	default:
		return d.ListTags(in)
	}
}

func (d *BackupDouble) PutBackupVaultAccessPolicy(i0 *backup.PutBackupVaultAccessPolicyInput) (r0 *backup.PutBackupVaultAccessPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBackupVaultAccessPolicy", i0)
	r0, _ = returns[0].(*backup.PutBackupVaultAccessPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) PutBackupVaultAccessPolicyRequest(i0 *backup.PutBackupVaultAccessPolicyInput) (r0 *request.Request, r1 *backup.PutBackupVaultAccessPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBackupVaultAccessPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.PutBackupVaultAccessPolicyOutput)
	return
}

func (d *BackupDouble) PutBackupVaultAccessPolicyWithContext(i0 context.Context, i1 *backup.PutBackupVaultAccessPolicyInput, i2 ...request.Option) (r0 *backup.PutBackupVaultAccessPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBackupVaultAccessPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.PutBackupVaultAccessPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakePutBackupVaultAccessPolicyWithContext(ctx context.Context, in *backup.PutBackupVaultAccessPolicyInput, _ ...request.Option) (*backup.PutBackupVaultAccessPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutBackupVaultAccessPolicy cancelled", ctx.Err())
	default:
		return d.PutBackupVaultAccessPolicy(in)
	}
}

func (d *BackupDouble) PutBackupVaultNotifications(i0 *backup.PutBackupVaultNotificationsInput) (r0 *backup.PutBackupVaultNotificationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBackupVaultNotifications", i0)
	r0, _ = returns[0].(*backup.PutBackupVaultNotificationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) PutBackupVaultNotificationsRequest(i0 *backup.PutBackupVaultNotificationsInput) (r0 *request.Request, r1 *backup.PutBackupVaultNotificationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBackupVaultNotificationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.PutBackupVaultNotificationsOutput)
	return
}

func (d *BackupDouble) PutBackupVaultNotificationsWithContext(i0 context.Context, i1 *backup.PutBackupVaultNotificationsInput, i2 ...request.Option) (r0 *backup.PutBackupVaultNotificationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBackupVaultNotificationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.PutBackupVaultNotificationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakePutBackupVaultNotificationsWithContext(ctx context.Context, in *backup.PutBackupVaultNotificationsInput, _ ...request.Option) (*backup.PutBackupVaultNotificationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutBackupVaultNotifications cancelled", ctx.Err())
	default:
		return d.PutBackupVaultNotifications(in)
	}
}

func (d *BackupDouble) StartBackupJob(i0 *backup.StartBackupJobInput) (r0 *backup.StartBackupJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartBackupJob", i0)
	r0, _ = returns[0].(*backup.StartBackupJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) StartBackupJobRequest(i0 *backup.StartBackupJobInput) (r0 *request.Request, r1 *backup.StartBackupJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartBackupJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.StartBackupJobOutput)
	return
}

func (d *BackupDouble) StartBackupJobWithContext(i0 context.Context, i1 *backup.StartBackupJobInput, i2 ...request.Option) (r0 *backup.StartBackupJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartBackupJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.StartBackupJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeStartBackupJobWithContext(ctx context.Context, in *backup.StartBackupJobInput, _ ...request.Option) (*backup.StartBackupJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartBackupJob cancelled", ctx.Err())
	default:
		return d.StartBackupJob(in)
	}
}

func (d *BackupDouble) StartCopyJob(i0 *backup.StartCopyJobInput) (r0 *backup.StartCopyJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartCopyJob", i0)
	r0, _ = returns[0].(*backup.StartCopyJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) StartCopyJobRequest(i0 *backup.StartCopyJobInput) (r0 *request.Request, r1 *backup.StartCopyJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartCopyJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.StartCopyJobOutput)
	return
}

func (d *BackupDouble) StartCopyJobWithContext(i0 context.Context, i1 *backup.StartCopyJobInput, i2 ...request.Option) (r0 *backup.StartCopyJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartCopyJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.StartCopyJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeStartCopyJobWithContext(ctx context.Context, in *backup.StartCopyJobInput, _ ...request.Option) (*backup.StartCopyJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartCopyJob cancelled", ctx.Err())
	default:
		return d.StartCopyJob(in)
	}
}

func (d *BackupDouble) StartRestoreJob(i0 *backup.StartRestoreJobInput) (r0 *backup.StartRestoreJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartRestoreJob", i0)
	r0, _ = returns[0].(*backup.StartRestoreJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) StartRestoreJobRequest(i0 *backup.StartRestoreJobInput) (r0 *request.Request, r1 *backup.StartRestoreJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartRestoreJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.StartRestoreJobOutput)
	return
}

func (d *BackupDouble) StartRestoreJobWithContext(i0 context.Context, i1 *backup.StartRestoreJobInput, i2 ...request.Option) (r0 *backup.StartRestoreJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartRestoreJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.StartRestoreJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeStartRestoreJobWithContext(ctx context.Context, in *backup.StartRestoreJobInput, _ ...request.Option) (*backup.StartRestoreJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartRestoreJob cancelled", ctx.Err())
	default:
		return d.StartRestoreJob(in)
	}
}

func (d *BackupDouble) StopBackupJob(i0 *backup.StopBackupJobInput) (r0 *backup.StopBackupJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopBackupJob", i0)
	r0, _ = returns[0].(*backup.StopBackupJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) StopBackupJobRequest(i0 *backup.StopBackupJobInput) (r0 *request.Request, r1 *backup.StopBackupJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopBackupJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.StopBackupJobOutput)
	return
}

func (d *BackupDouble) StopBackupJobWithContext(i0 context.Context, i1 *backup.StopBackupJobInput, i2 ...request.Option) (r0 *backup.StopBackupJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopBackupJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.StopBackupJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeStopBackupJobWithContext(ctx context.Context, in *backup.StopBackupJobInput, _ ...request.Option) (*backup.StopBackupJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopBackupJob cancelled", ctx.Err())
	default:
		return d.StopBackupJob(in)
	}
}

func (d *BackupDouble) TagResource(i0 *backup.TagResourceInput) (r0 *backup.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*backup.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) TagResourceRequest(i0 *backup.TagResourceInput) (r0 *request.Request, r1 *backup.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.TagResourceOutput)
	return
}

func (d *BackupDouble) TagResourceWithContext(i0 context.Context, i1 *backup.TagResourceInput, i2 ...request.Option) (r0 *backup.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeTagResourceWithContext(ctx context.Context, in *backup.TagResourceInput, _ ...request.Option) (*backup.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *BackupDouble) UntagResource(i0 *backup.UntagResourceInput) (r0 *backup.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*backup.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) UntagResourceRequest(i0 *backup.UntagResourceInput) (r0 *request.Request, r1 *backup.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.UntagResourceOutput)
	return
}

func (d *BackupDouble) UntagResourceWithContext(i0 context.Context, i1 *backup.UntagResourceInput, i2 ...request.Option) (r0 *backup.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeUntagResourceWithContext(ctx context.Context, in *backup.UntagResourceInput, _ ...request.Option) (*backup.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *BackupDouble) UpdateBackupPlan(i0 *backup.UpdateBackupPlanInput) (r0 *backup.UpdateBackupPlanOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateBackupPlan", i0)
	r0, _ = returns[0].(*backup.UpdateBackupPlanOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) UpdateBackupPlanRequest(i0 *backup.UpdateBackupPlanInput) (r0 *request.Request, r1 *backup.UpdateBackupPlanOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateBackupPlanRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.UpdateBackupPlanOutput)
	return
}

func (d *BackupDouble) UpdateBackupPlanWithContext(i0 context.Context, i1 *backup.UpdateBackupPlanInput, i2 ...request.Option) (r0 *backup.UpdateBackupPlanOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateBackupPlanWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.UpdateBackupPlanOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeUpdateBackupPlanWithContext(ctx context.Context, in *backup.UpdateBackupPlanInput, _ ...request.Option) (*backup.UpdateBackupPlanOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateBackupPlan cancelled", ctx.Err())
	default:
		return d.UpdateBackupPlan(in)
	}
}

func (d *BackupDouble) UpdateRecoveryPointLifecycle(i0 *backup.UpdateRecoveryPointLifecycleInput) (r0 *backup.UpdateRecoveryPointLifecycleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRecoveryPointLifecycle", i0)
	r0, _ = returns[0].(*backup.UpdateRecoveryPointLifecycleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) UpdateRecoveryPointLifecycleRequest(i0 *backup.UpdateRecoveryPointLifecycleInput) (r0 *request.Request, r1 *backup.UpdateRecoveryPointLifecycleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRecoveryPointLifecycleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*backup.UpdateRecoveryPointLifecycleOutput)
	return
}

func (d *BackupDouble) UpdateRecoveryPointLifecycleWithContext(i0 context.Context, i1 *backup.UpdateRecoveryPointLifecycleInput, i2 ...request.Option) (r0 *backup.UpdateRecoveryPointLifecycleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRecoveryPointLifecycleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*backup.UpdateRecoveryPointLifecycleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BackupDouble) fakeUpdateRecoveryPointLifecycleWithContext(ctx context.Context, in *backup.UpdateRecoveryPointLifecycleInput, _ ...request.Option) (*backup.UpdateRecoveryPointLifecycleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateRecoveryPointLifecycle cancelled", ctx.Err())
	default:
		return d.UpdateRecoveryPointLifecycle(in)
	}
}
