// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:12:43+11:00

// Package elbdouble provides a TestDouble implementation of elbiface.ELBAPI
package elbdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/elb"
	"github.com/aws/aws-sdk-go/service/elb/elbiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// ELBDouble is TestDouble for elbiface.ELBAPI
type ELBDouble struct {
	elbiface.ELBAPI
	*awsdouble.AWSTestDouble
}

// Constructor for ELBDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *ELBDouble {
	result := &ELBDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*elbiface.ELBAPI)(nil), configurators...)
	return result
}

func (d *ELBDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *ELBDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AddTagsWithContext":
		return m.Fake(d.fakeAddTagsWithContext)

	case "ApplySecurityGroupsToLoadBalancerWithContext":
		return m.Fake(d.fakeApplySecurityGroupsToLoadBalancerWithContext)

	case "AttachLoadBalancerToSubnetsWithContext":
		return m.Fake(d.fakeAttachLoadBalancerToSubnetsWithContext)

	case "ConfigureHealthCheckWithContext":
		return m.Fake(d.fakeConfigureHealthCheckWithContext)

	case "CreateAppCookieStickinessPolicyWithContext":
		return m.Fake(d.fakeCreateAppCookieStickinessPolicyWithContext)

	case "CreateLBCookieStickinessPolicyWithContext":
		return m.Fake(d.fakeCreateLBCookieStickinessPolicyWithContext)

	case "CreateLoadBalancerListenersWithContext":
		return m.Fake(d.fakeCreateLoadBalancerListenersWithContext)

	case "CreateLoadBalancerPolicyWithContext":
		return m.Fake(d.fakeCreateLoadBalancerPolicyWithContext)

	case "CreateLoadBalancerWithContext":
		return m.Fake(d.fakeCreateLoadBalancerWithContext)

	case "DeleteLoadBalancerListenersWithContext":
		return m.Fake(d.fakeDeleteLoadBalancerListenersWithContext)

	case "DeleteLoadBalancerPolicyWithContext":
		return m.Fake(d.fakeDeleteLoadBalancerPolicyWithContext)

	case "DeleteLoadBalancerWithContext":
		return m.Fake(d.fakeDeleteLoadBalancerWithContext)

	case "DeregisterInstancesFromLoadBalancerWithContext":
		return m.Fake(d.fakeDeregisterInstancesFromLoadBalancerWithContext)

	case "DescribeAccountLimitsWithContext":
		return m.Fake(d.fakeDescribeAccountLimitsWithContext)

	case "DescribeInstanceHealthWithContext":
		return m.Fake(d.fakeDescribeInstanceHealthWithContext)

	case "DescribeLoadBalancerAttributesWithContext":
		return m.Fake(d.fakeDescribeLoadBalancerAttributesWithContext)

	case "DescribeLoadBalancerPoliciesWithContext":
		return m.Fake(d.fakeDescribeLoadBalancerPoliciesWithContext)

	case "DescribeLoadBalancerPolicyTypesWithContext":
		return m.Fake(d.fakeDescribeLoadBalancerPolicyTypesWithContext)

	case "DescribeLoadBalancersPages":
		return m.Fake(d.fakeDescribeLoadBalancersPages)

	case "DescribeLoadBalancersPagesWithContext":
		return m.Fake(d.fakeDescribeLoadBalancersPagesWithContext)

	case "DescribeLoadBalancersWithContext":
		return m.Fake(d.fakeDescribeLoadBalancersWithContext)

	case "DescribeTagsWithContext":
		return m.Fake(d.fakeDescribeTagsWithContext)

	case "DetachLoadBalancerFromSubnetsWithContext":
		return m.Fake(d.fakeDetachLoadBalancerFromSubnetsWithContext)

	case "DisableAvailabilityZonesForLoadBalancerWithContext":
		return m.Fake(d.fakeDisableAvailabilityZonesForLoadBalancerWithContext)

	case "EnableAvailabilityZonesForLoadBalancerWithContext":
		return m.Fake(d.fakeEnableAvailabilityZonesForLoadBalancerWithContext)

	case "ModifyLoadBalancerAttributesWithContext":
		return m.Fake(d.fakeModifyLoadBalancerAttributesWithContext)

	case "RegisterInstancesWithLoadBalancerWithContext":
		return m.Fake(d.fakeRegisterInstancesWithLoadBalancerWithContext)

	case "RemoveTagsWithContext":
		return m.Fake(d.fakeRemoveTagsWithContext)

	case "SetLoadBalancerListenerSSLCertificateWithContext":
		return m.Fake(d.fakeSetLoadBalancerListenerSSLCertificateWithContext)

	case "SetLoadBalancerPoliciesForBackendServerWithContext":
		return m.Fake(d.fakeSetLoadBalancerPoliciesForBackendServerWithContext)

	case "SetLoadBalancerPoliciesOfListenerWithContext":
		return m.Fake(d.fakeSetLoadBalancerPoliciesOfListenerWithContext)

	case "WaitUntilAnyInstanceInService":
		return m.Fake(d.fakeWaitUntilAnyInstanceInService)

	case "WaitUntilAnyInstanceInServiceWithContext":
		return m.Fake(d.fakeWaitUntilAnyInstanceInServiceWithContext)

	case "WaitUntilInstanceDeregistered":
		return m.Fake(d.fakeWaitUntilInstanceDeregistered)

	case "WaitUntilInstanceDeregisteredWithContext":
		return m.Fake(d.fakeWaitUntilInstanceDeregisteredWithContext)

	case "WaitUntilInstanceInService":
		return m.Fake(d.fakeWaitUntilInstanceInService)

	case "WaitUntilInstanceInServiceWithContext":
		return m.Fake(d.fakeWaitUntilInstanceInServiceWithContext)

	default:
		return nil
	}
}

func (d *ELBDouble) AddTags(i0 *elb.AddTagsInput) (r0 *elb.AddTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTags", i0)
	r0, _ = returns[0].(*elb.AddTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) AddTagsRequest(i0 *elb.AddTagsInput) (r0 *request.Request, r1 *elb.AddTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elb.AddTagsOutput)
	return
}

func (d *ELBDouble) AddTagsWithContext(i0 context.Context, i1 *elb.AddTagsInput, i2 ...request.Option) (r0 *elb.AddTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elb.AddTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) fakeAddTagsWithContext(ctx context.Context, in *elb.AddTagsInput, _ ...request.Option) (*elb.AddTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddTags cancelled", ctx.Err())
	default:
		return d.AddTags(in)
	}
}

func (d *ELBDouble) ApplySecurityGroupsToLoadBalancer(i0 *elb.ApplySecurityGroupsToLoadBalancerInput) (r0 *elb.ApplySecurityGroupsToLoadBalancerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ApplySecurityGroupsToLoadBalancer", i0)
	r0, _ = returns[0].(*elb.ApplySecurityGroupsToLoadBalancerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) ApplySecurityGroupsToLoadBalancerRequest(i0 *elb.ApplySecurityGroupsToLoadBalancerInput) (r0 *request.Request, r1 *elb.ApplySecurityGroupsToLoadBalancerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ApplySecurityGroupsToLoadBalancerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elb.ApplySecurityGroupsToLoadBalancerOutput)
	return
}

func (d *ELBDouble) ApplySecurityGroupsToLoadBalancerWithContext(i0 context.Context, i1 *elb.ApplySecurityGroupsToLoadBalancerInput, i2 ...request.Option) (r0 *elb.ApplySecurityGroupsToLoadBalancerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ApplySecurityGroupsToLoadBalancerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elb.ApplySecurityGroupsToLoadBalancerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) fakeApplySecurityGroupsToLoadBalancerWithContext(ctx context.Context, in *elb.ApplySecurityGroupsToLoadBalancerInput, _ ...request.Option) (*elb.ApplySecurityGroupsToLoadBalancerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ApplySecurityGroupsToLoadBalancer cancelled", ctx.Err())
	default:
		return d.ApplySecurityGroupsToLoadBalancer(in)
	}
}

func (d *ELBDouble) AttachLoadBalancerToSubnets(i0 *elb.AttachLoadBalancerToSubnetsInput) (r0 *elb.AttachLoadBalancerToSubnetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachLoadBalancerToSubnets", i0)
	r0, _ = returns[0].(*elb.AttachLoadBalancerToSubnetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) AttachLoadBalancerToSubnetsRequest(i0 *elb.AttachLoadBalancerToSubnetsInput) (r0 *request.Request, r1 *elb.AttachLoadBalancerToSubnetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachLoadBalancerToSubnetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elb.AttachLoadBalancerToSubnetsOutput)
	return
}

func (d *ELBDouble) AttachLoadBalancerToSubnetsWithContext(i0 context.Context, i1 *elb.AttachLoadBalancerToSubnetsInput, i2 ...request.Option) (r0 *elb.AttachLoadBalancerToSubnetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachLoadBalancerToSubnetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elb.AttachLoadBalancerToSubnetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) fakeAttachLoadBalancerToSubnetsWithContext(ctx context.Context, in *elb.AttachLoadBalancerToSubnetsInput, _ ...request.Option) (*elb.AttachLoadBalancerToSubnetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AttachLoadBalancerToSubnets cancelled", ctx.Err())
	default:
		return d.AttachLoadBalancerToSubnets(in)
	}
}

func (d *ELBDouble) ConfigureHealthCheck(i0 *elb.ConfigureHealthCheckInput) (r0 *elb.ConfigureHealthCheckOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ConfigureHealthCheck", i0)
	r0, _ = returns[0].(*elb.ConfigureHealthCheckOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) ConfigureHealthCheckRequest(i0 *elb.ConfigureHealthCheckInput) (r0 *request.Request, r1 *elb.ConfigureHealthCheckOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ConfigureHealthCheckRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elb.ConfigureHealthCheckOutput)
	return
}

func (d *ELBDouble) ConfigureHealthCheckWithContext(i0 context.Context, i1 *elb.ConfigureHealthCheckInput, i2 ...request.Option) (r0 *elb.ConfigureHealthCheckOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ConfigureHealthCheckWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elb.ConfigureHealthCheckOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) fakeConfigureHealthCheckWithContext(ctx context.Context, in *elb.ConfigureHealthCheckInput, _ ...request.Option) (*elb.ConfigureHealthCheckOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ConfigureHealthCheck cancelled", ctx.Err())
	default:
		return d.ConfigureHealthCheck(in)
	}
}

func (d *ELBDouble) CreateAppCookieStickinessPolicy(i0 *elb.CreateAppCookieStickinessPolicyInput) (r0 *elb.CreateAppCookieStickinessPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAppCookieStickinessPolicy", i0)
	r0, _ = returns[0].(*elb.CreateAppCookieStickinessPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) CreateAppCookieStickinessPolicyRequest(i0 *elb.CreateAppCookieStickinessPolicyInput) (r0 *request.Request, r1 *elb.CreateAppCookieStickinessPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAppCookieStickinessPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elb.CreateAppCookieStickinessPolicyOutput)
	return
}

func (d *ELBDouble) CreateAppCookieStickinessPolicyWithContext(i0 context.Context, i1 *elb.CreateAppCookieStickinessPolicyInput, i2 ...request.Option) (r0 *elb.CreateAppCookieStickinessPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAppCookieStickinessPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elb.CreateAppCookieStickinessPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) fakeCreateAppCookieStickinessPolicyWithContext(ctx context.Context, in *elb.CreateAppCookieStickinessPolicyInput, _ ...request.Option) (*elb.CreateAppCookieStickinessPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateAppCookieStickinessPolicy cancelled", ctx.Err())
	default:
		return d.CreateAppCookieStickinessPolicy(in)
	}
}

func (d *ELBDouble) CreateLBCookieStickinessPolicy(i0 *elb.CreateLBCookieStickinessPolicyInput) (r0 *elb.CreateLBCookieStickinessPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLBCookieStickinessPolicy", i0)
	r0, _ = returns[0].(*elb.CreateLBCookieStickinessPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) CreateLBCookieStickinessPolicyRequest(i0 *elb.CreateLBCookieStickinessPolicyInput) (r0 *request.Request, r1 *elb.CreateLBCookieStickinessPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLBCookieStickinessPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elb.CreateLBCookieStickinessPolicyOutput)
	return
}

func (d *ELBDouble) CreateLBCookieStickinessPolicyWithContext(i0 context.Context, i1 *elb.CreateLBCookieStickinessPolicyInput, i2 ...request.Option) (r0 *elb.CreateLBCookieStickinessPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLBCookieStickinessPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elb.CreateLBCookieStickinessPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) fakeCreateLBCookieStickinessPolicyWithContext(ctx context.Context, in *elb.CreateLBCookieStickinessPolicyInput, _ ...request.Option) (*elb.CreateLBCookieStickinessPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateLBCookieStickinessPolicy cancelled", ctx.Err())
	default:
		return d.CreateLBCookieStickinessPolicy(in)
	}
}

func (d *ELBDouble) CreateLoadBalancer(i0 *elb.CreateLoadBalancerInput) (r0 *elb.CreateLoadBalancerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLoadBalancer", i0)
	r0, _ = returns[0].(*elb.CreateLoadBalancerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) CreateLoadBalancerListeners(i0 *elb.CreateLoadBalancerListenersInput) (r0 *elb.CreateLoadBalancerListenersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLoadBalancerListeners", i0)
	r0, _ = returns[0].(*elb.CreateLoadBalancerListenersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) CreateLoadBalancerListenersRequest(i0 *elb.CreateLoadBalancerListenersInput) (r0 *request.Request, r1 *elb.CreateLoadBalancerListenersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLoadBalancerListenersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elb.CreateLoadBalancerListenersOutput)
	return
}

func (d *ELBDouble) CreateLoadBalancerListenersWithContext(i0 context.Context, i1 *elb.CreateLoadBalancerListenersInput, i2 ...request.Option) (r0 *elb.CreateLoadBalancerListenersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLoadBalancerListenersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elb.CreateLoadBalancerListenersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) fakeCreateLoadBalancerListenersWithContext(ctx context.Context, in *elb.CreateLoadBalancerListenersInput, _ ...request.Option) (*elb.CreateLoadBalancerListenersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateLoadBalancerListeners cancelled", ctx.Err())
	default:
		return d.CreateLoadBalancerListeners(in)
	}
}

func (d *ELBDouble) CreateLoadBalancerPolicy(i0 *elb.CreateLoadBalancerPolicyInput) (r0 *elb.CreateLoadBalancerPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLoadBalancerPolicy", i0)
	r0, _ = returns[0].(*elb.CreateLoadBalancerPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) CreateLoadBalancerPolicyRequest(i0 *elb.CreateLoadBalancerPolicyInput) (r0 *request.Request, r1 *elb.CreateLoadBalancerPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLoadBalancerPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elb.CreateLoadBalancerPolicyOutput)
	return
}

func (d *ELBDouble) CreateLoadBalancerPolicyWithContext(i0 context.Context, i1 *elb.CreateLoadBalancerPolicyInput, i2 ...request.Option) (r0 *elb.CreateLoadBalancerPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLoadBalancerPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elb.CreateLoadBalancerPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) fakeCreateLoadBalancerPolicyWithContext(ctx context.Context, in *elb.CreateLoadBalancerPolicyInput, _ ...request.Option) (*elb.CreateLoadBalancerPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateLoadBalancerPolicy cancelled", ctx.Err())
	default:
		return d.CreateLoadBalancerPolicy(in)
	}
}

func (d *ELBDouble) CreateLoadBalancerRequest(i0 *elb.CreateLoadBalancerInput) (r0 *request.Request, r1 *elb.CreateLoadBalancerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLoadBalancerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elb.CreateLoadBalancerOutput)
	return
}

func (d *ELBDouble) CreateLoadBalancerWithContext(i0 context.Context, i1 *elb.CreateLoadBalancerInput, i2 ...request.Option) (r0 *elb.CreateLoadBalancerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLoadBalancerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elb.CreateLoadBalancerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) fakeCreateLoadBalancerWithContext(ctx context.Context, in *elb.CreateLoadBalancerInput, _ ...request.Option) (*elb.CreateLoadBalancerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateLoadBalancer cancelled", ctx.Err())
	default:
		return d.CreateLoadBalancer(in)
	}
}

func (d *ELBDouble) DeleteLoadBalancer(i0 *elb.DeleteLoadBalancerInput) (r0 *elb.DeleteLoadBalancerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLoadBalancer", i0)
	r0, _ = returns[0].(*elb.DeleteLoadBalancerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) DeleteLoadBalancerListeners(i0 *elb.DeleteLoadBalancerListenersInput) (r0 *elb.DeleteLoadBalancerListenersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLoadBalancerListeners", i0)
	r0, _ = returns[0].(*elb.DeleteLoadBalancerListenersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) DeleteLoadBalancerListenersRequest(i0 *elb.DeleteLoadBalancerListenersInput) (r0 *request.Request, r1 *elb.DeleteLoadBalancerListenersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLoadBalancerListenersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elb.DeleteLoadBalancerListenersOutput)
	return
}

func (d *ELBDouble) DeleteLoadBalancerListenersWithContext(i0 context.Context, i1 *elb.DeleteLoadBalancerListenersInput, i2 ...request.Option) (r0 *elb.DeleteLoadBalancerListenersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLoadBalancerListenersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elb.DeleteLoadBalancerListenersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) fakeDeleteLoadBalancerListenersWithContext(ctx context.Context, in *elb.DeleteLoadBalancerListenersInput, _ ...request.Option) (*elb.DeleteLoadBalancerListenersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteLoadBalancerListeners cancelled", ctx.Err())
	default:
		return d.DeleteLoadBalancerListeners(in)
	}
}

func (d *ELBDouble) DeleteLoadBalancerPolicy(i0 *elb.DeleteLoadBalancerPolicyInput) (r0 *elb.DeleteLoadBalancerPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLoadBalancerPolicy", i0)
	r0, _ = returns[0].(*elb.DeleteLoadBalancerPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) DeleteLoadBalancerPolicyRequest(i0 *elb.DeleteLoadBalancerPolicyInput) (r0 *request.Request, r1 *elb.DeleteLoadBalancerPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLoadBalancerPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elb.DeleteLoadBalancerPolicyOutput)
	return
}

func (d *ELBDouble) DeleteLoadBalancerPolicyWithContext(i0 context.Context, i1 *elb.DeleteLoadBalancerPolicyInput, i2 ...request.Option) (r0 *elb.DeleteLoadBalancerPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLoadBalancerPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elb.DeleteLoadBalancerPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) fakeDeleteLoadBalancerPolicyWithContext(ctx context.Context, in *elb.DeleteLoadBalancerPolicyInput, _ ...request.Option) (*elb.DeleteLoadBalancerPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteLoadBalancerPolicy cancelled", ctx.Err())
	default:
		return d.DeleteLoadBalancerPolicy(in)
	}
}

func (d *ELBDouble) DeleteLoadBalancerRequest(i0 *elb.DeleteLoadBalancerInput) (r0 *request.Request, r1 *elb.DeleteLoadBalancerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLoadBalancerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elb.DeleteLoadBalancerOutput)
	return
}

func (d *ELBDouble) DeleteLoadBalancerWithContext(i0 context.Context, i1 *elb.DeleteLoadBalancerInput, i2 ...request.Option) (r0 *elb.DeleteLoadBalancerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLoadBalancerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elb.DeleteLoadBalancerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) fakeDeleteLoadBalancerWithContext(ctx context.Context, in *elb.DeleteLoadBalancerInput, _ ...request.Option) (*elb.DeleteLoadBalancerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteLoadBalancer cancelled", ctx.Err())
	default:
		return d.DeleteLoadBalancer(in)
	}
}

func (d *ELBDouble) DeregisterInstancesFromLoadBalancer(i0 *elb.DeregisterInstancesFromLoadBalancerInput) (r0 *elb.DeregisterInstancesFromLoadBalancerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterInstancesFromLoadBalancer", i0)
	r0, _ = returns[0].(*elb.DeregisterInstancesFromLoadBalancerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) DeregisterInstancesFromLoadBalancerRequest(i0 *elb.DeregisterInstancesFromLoadBalancerInput) (r0 *request.Request, r1 *elb.DeregisterInstancesFromLoadBalancerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterInstancesFromLoadBalancerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elb.DeregisterInstancesFromLoadBalancerOutput)
	return
}

func (d *ELBDouble) DeregisterInstancesFromLoadBalancerWithContext(i0 context.Context, i1 *elb.DeregisterInstancesFromLoadBalancerInput, i2 ...request.Option) (r0 *elb.DeregisterInstancesFromLoadBalancerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterInstancesFromLoadBalancerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elb.DeregisterInstancesFromLoadBalancerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) fakeDeregisterInstancesFromLoadBalancerWithContext(ctx context.Context, in *elb.DeregisterInstancesFromLoadBalancerInput, _ ...request.Option) (*elb.DeregisterInstancesFromLoadBalancerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeregisterInstancesFromLoadBalancer cancelled", ctx.Err())
	default:
		return d.DeregisterInstancesFromLoadBalancer(in)
	}
}

func (d *ELBDouble) DescribeAccountLimits(i0 *elb.DescribeAccountLimitsInput) (r0 *elb.DescribeAccountLimitsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAccountLimits", i0)
	r0, _ = returns[0].(*elb.DescribeAccountLimitsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) DescribeAccountLimitsRequest(i0 *elb.DescribeAccountLimitsInput) (r0 *request.Request, r1 *elb.DescribeAccountLimitsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAccountLimitsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elb.DescribeAccountLimitsOutput)
	return
}

func (d *ELBDouble) DescribeAccountLimitsWithContext(i0 context.Context, i1 *elb.DescribeAccountLimitsInput, i2 ...request.Option) (r0 *elb.DescribeAccountLimitsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAccountLimitsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elb.DescribeAccountLimitsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) fakeDescribeAccountLimitsWithContext(ctx context.Context, in *elb.DescribeAccountLimitsInput, _ ...request.Option) (*elb.DescribeAccountLimitsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAccountLimits cancelled", ctx.Err())
	default:
		return d.DescribeAccountLimits(in)
	}
}

func (d *ELBDouble) DescribeInstanceHealth(i0 *elb.DescribeInstanceHealthInput) (r0 *elb.DescribeInstanceHealthOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstanceHealth", i0)
	r0, _ = returns[0].(*elb.DescribeInstanceHealthOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) DescribeInstanceHealthRequest(i0 *elb.DescribeInstanceHealthInput) (r0 *request.Request, r1 *elb.DescribeInstanceHealthOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstanceHealthRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elb.DescribeInstanceHealthOutput)
	return
}

func (d *ELBDouble) DescribeInstanceHealthWithContext(i0 context.Context, i1 *elb.DescribeInstanceHealthInput, i2 ...request.Option) (r0 *elb.DescribeInstanceHealthOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstanceHealthWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elb.DescribeInstanceHealthOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) fakeDescribeInstanceHealthWithContext(ctx context.Context, in *elb.DescribeInstanceHealthInput, _ ...request.Option) (*elb.DescribeInstanceHealthOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeInstanceHealth cancelled", ctx.Err())
	default:
		return d.DescribeInstanceHealth(in)
	}
}

func (d *ELBDouble) DescribeLoadBalancerAttributes(i0 *elb.DescribeLoadBalancerAttributesInput) (r0 *elb.DescribeLoadBalancerAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoadBalancerAttributes", i0)
	r0, _ = returns[0].(*elb.DescribeLoadBalancerAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) DescribeLoadBalancerAttributesRequest(i0 *elb.DescribeLoadBalancerAttributesInput) (r0 *request.Request, r1 *elb.DescribeLoadBalancerAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoadBalancerAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elb.DescribeLoadBalancerAttributesOutput)
	return
}

func (d *ELBDouble) DescribeLoadBalancerAttributesWithContext(i0 context.Context, i1 *elb.DescribeLoadBalancerAttributesInput, i2 ...request.Option) (r0 *elb.DescribeLoadBalancerAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoadBalancerAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elb.DescribeLoadBalancerAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) fakeDescribeLoadBalancerAttributesWithContext(ctx context.Context, in *elb.DescribeLoadBalancerAttributesInput, _ ...request.Option) (*elb.DescribeLoadBalancerAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeLoadBalancerAttributes cancelled", ctx.Err())
	default:
		return d.DescribeLoadBalancerAttributes(in)
	}
}

func (d *ELBDouble) DescribeLoadBalancerPolicies(i0 *elb.DescribeLoadBalancerPoliciesInput) (r0 *elb.DescribeLoadBalancerPoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoadBalancerPolicies", i0)
	r0, _ = returns[0].(*elb.DescribeLoadBalancerPoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) DescribeLoadBalancerPoliciesRequest(i0 *elb.DescribeLoadBalancerPoliciesInput) (r0 *request.Request, r1 *elb.DescribeLoadBalancerPoliciesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoadBalancerPoliciesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elb.DescribeLoadBalancerPoliciesOutput)
	return
}

func (d *ELBDouble) DescribeLoadBalancerPoliciesWithContext(i0 context.Context, i1 *elb.DescribeLoadBalancerPoliciesInput, i2 ...request.Option) (r0 *elb.DescribeLoadBalancerPoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoadBalancerPoliciesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elb.DescribeLoadBalancerPoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) fakeDescribeLoadBalancerPoliciesWithContext(ctx context.Context, in *elb.DescribeLoadBalancerPoliciesInput, _ ...request.Option) (*elb.DescribeLoadBalancerPoliciesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeLoadBalancerPolicies cancelled", ctx.Err())
	default:
		return d.DescribeLoadBalancerPolicies(in)
	}
}

func (d *ELBDouble) DescribeLoadBalancerPolicyTypes(i0 *elb.DescribeLoadBalancerPolicyTypesInput) (r0 *elb.DescribeLoadBalancerPolicyTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoadBalancerPolicyTypes", i0)
	r0, _ = returns[0].(*elb.DescribeLoadBalancerPolicyTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) DescribeLoadBalancerPolicyTypesRequest(i0 *elb.DescribeLoadBalancerPolicyTypesInput) (r0 *request.Request, r1 *elb.DescribeLoadBalancerPolicyTypesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoadBalancerPolicyTypesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elb.DescribeLoadBalancerPolicyTypesOutput)
	return
}

func (d *ELBDouble) DescribeLoadBalancerPolicyTypesWithContext(i0 context.Context, i1 *elb.DescribeLoadBalancerPolicyTypesInput, i2 ...request.Option) (r0 *elb.DescribeLoadBalancerPolicyTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoadBalancerPolicyTypesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elb.DescribeLoadBalancerPolicyTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) fakeDescribeLoadBalancerPolicyTypesWithContext(ctx context.Context, in *elb.DescribeLoadBalancerPolicyTypesInput, _ ...request.Option) (*elb.DescribeLoadBalancerPolicyTypesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeLoadBalancerPolicyTypes cancelled", ctx.Err())
	default:
		return d.DescribeLoadBalancerPolicyTypes(in)
	}
}

func (d *ELBDouble) DescribeLoadBalancers(i0 *elb.DescribeLoadBalancersInput) (r0 *elb.DescribeLoadBalancersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoadBalancers", i0)
	r0, _ = returns[0].(*elb.DescribeLoadBalancersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) DescribeLoadBalancersPages(i0 *elb.DescribeLoadBalancersInput, i1 func(*elb.DescribeLoadBalancersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoadBalancersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ELBDouble) fakeDescribeLoadBalancersPages(in *elb.DescribeLoadBalancersInput, pager func(*elb.DescribeLoadBalancersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeLoadBalancers", paginators, in, pager)
}

func (d *ELBDouble) DescribeLoadBalancersPagesWithContext(i0 context.Context, i1 *elb.DescribeLoadBalancersInput, i2 func(*elb.DescribeLoadBalancersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoadBalancersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ELBDouble) fakeDescribeLoadBalancersPagesWithContext(ctx context.Context, in *elb.DescribeLoadBalancersInput, pager func(*elb.DescribeLoadBalancersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeLoadBalancers", paginators, ctx, in, pager, options...)
}

func (d *ELBDouble) DescribeLoadBalancersRequest(i0 *elb.DescribeLoadBalancersInput) (r0 *request.Request, r1 *elb.DescribeLoadBalancersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoadBalancersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elb.DescribeLoadBalancersOutput)
	return
}

func (d *ELBDouble) DescribeLoadBalancersWithContext(i0 context.Context, i1 *elb.DescribeLoadBalancersInput, i2 ...request.Option) (r0 *elb.DescribeLoadBalancersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoadBalancersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elb.DescribeLoadBalancersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) fakeDescribeLoadBalancersWithContext(ctx context.Context, in *elb.DescribeLoadBalancersInput, _ ...request.Option) (*elb.DescribeLoadBalancersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeLoadBalancers cancelled", ctx.Err())
	default:
		return d.DescribeLoadBalancers(in)
	}
}

func (d *ELBDouble) DescribeTags(i0 *elb.DescribeTagsInput) (r0 *elb.DescribeTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTags", i0)
	r0, _ = returns[0].(*elb.DescribeTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) DescribeTagsRequest(i0 *elb.DescribeTagsInput) (r0 *request.Request, r1 *elb.DescribeTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elb.DescribeTagsOutput)
	return
}

func (d *ELBDouble) DescribeTagsWithContext(i0 context.Context, i1 *elb.DescribeTagsInput, i2 ...request.Option) (r0 *elb.DescribeTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elb.DescribeTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) fakeDescribeTagsWithContext(ctx context.Context, in *elb.DescribeTagsInput, _ ...request.Option) (*elb.DescribeTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTags cancelled", ctx.Err())
	default:
		return d.DescribeTags(in)
	}
}

func (d *ELBDouble) DetachLoadBalancerFromSubnets(i0 *elb.DetachLoadBalancerFromSubnetsInput) (r0 *elb.DetachLoadBalancerFromSubnetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachLoadBalancerFromSubnets", i0)
	r0, _ = returns[0].(*elb.DetachLoadBalancerFromSubnetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) DetachLoadBalancerFromSubnetsRequest(i0 *elb.DetachLoadBalancerFromSubnetsInput) (r0 *request.Request, r1 *elb.DetachLoadBalancerFromSubnetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachLoadBalancerFromSubnetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elb.DetachLoadBalancerFromSubnetsOutput)
	return
}

func (d *ELBDouble) DetachLoadBalancerFromSubnetsWithContext(i0 context.Context, i1 *elb.DetachLoadBalancerFromSubnetsInput, i2 ...request.Option) (r0 *elb.DetachLoadBalancerFromSubnetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachLoadBalancerFromSubnetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elb.DetachLoadBalancerFromSubnetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) fakeDetachLoadBalancerFromSubnetsWithContext(ctx context.Context, in *elb.DetachLoadBalancerFromSubnetsInput, _ ...request.Option) (*elb.DetachLoadBalancerFromSubnetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DetachLoadBalancerFromSubnets cancelled", ctx.Err())
	default:
		return d.DetachLoadBalancerFromSubnets(in)
	}
}

func (d *ELBDouble) DisableAvailabilityZonesForLoadBalancer(i0 *elb.DisableAvailabilityZonesForLoadBalancerInput) (r0 *elb.DisableAvailabilityZonesForLoadBalancerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableAvailabilityZonesForLoadBalancer", i0)
	r0, _ = returns[0].(*elb.DisableAvailabilityZonesForLoadBalancerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) DisableAvailabilityZonesForLoadBalancerRequest(i0 *elb.DisableAvailabilityZonesForLoadBalancerInput) (r0 *request.Request, r1 *elb.DisableAvailabilityZonesForLoadBalancerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableAvailabilityZonesForLoadBalancerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elb.DisableAvailabilityZonesForLoadBalancerOutput)
	return
}

func (d *ELBDouble) DisableAvailabilityZonesForLoadBalancerWithContext(i0 context.Context, i1 *elb.DisableAvailabilityZonesForLoadBalancerInput, i2 ...request.Option) (r0 *elb.DisableAvailabilityZonesForLoadBalancerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableAvailabilityZonesForLoadBalancerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elb.DisableAvailabilityZonesForLoadBalancerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) fakeDisableAvailabilityZonesForLoadBalancerWithContext(ctx context.Context, in *elb.DisableAvailabilityZonesForLoadBalancerInput, _ ...request.Option) (*elb.DisableAvailabilityZonesForLoadBalancerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisableAvailabilityZonesForLoadBalancer cancelled", ctx.Err())
	default:
		return d.DisableAvailabilityZonesForLoadBalancer(in)
	}
}

func (d *ELBDouble) EnableAvailabilityZonesForLoadBalancer(i0 *elb.EnableAvailabilityZonesForLoadBalancerInput) (r0 *elb.EnableAvailabilityZonesForLoadBalancerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableAvailabilityZonesForLoadBalancer", i0)
	r0, _ = returns[0].(*elb.EnableAvailabilityZonesForLoadBalancerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) EnableAvailabilityZonesForLoadBalancerRequest(i0 *elb.EnableAvailabilityZonesForLoadBalancerInput) (r0 *request.Request, r1 *elb.EnableAvailabilityZonesForLoadBalancerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableAvailabilityZonesForLoadBalancerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elb.EnableAvailabilityZonesForLoadBalancerOutput)
	return
}

func (d *ELBDouble) EnableAvailabilityZonesForLoadBalancerWithContext(i0 context.Context, i1 *elb.EnableAvailabilityZonesForLoadBalancerInput, i2 ...request.Option) (r0 *elb.EnableAvailabilityZonesForLoadBalancerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableAvailabilityZonesForLoadBalancerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elb.EnableAvailabilityZonesForLoadBalancerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) fakeEnableAvailabilityZonesForLoadBalancerWithContext(ctx context.Context, in *elb.EnableAvailabilityZonesForLoadBalancerInput, _ ...request.Option) (*elb.EnableAvailabilityZonesForLoadBalancerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "EnableAvailabilityZonesForLoadBalancer cancelled", ctx.Err())
	default:
		return d.EnableAvailabilityZonesForLoadBalancer(in)
	}
}

func (d *ELBDouble) ModifyLoadBalancerAttributes(i0 *elb.ModifyLoadBalancerAttributesInput) (r0 *elb.ModifyLoadBalancerAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyLoadBalancerAttributes", i0)
	r0, _ = returns[0].(*elb.ModifyLoadBalancerAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) ModifyLoadBalancerAttributesRequest(i0 *elb.ModifyLoadBalancerAttributesInput) (r0 *request.Request, r1 *elb.ModifyLoadBalancerAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyLoadBalancerAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elb.ModifyLoadBalancerAttributesOutput)
	return
}

func (d *ELBDouble) ModifyLoadBalancerAttributesWithContext(i0 context.Context, i1 *elb.ModifyLoadBalancerAttributesInput, i2 ...request.Option) (r0 *elb.ModifyLoadBalancerAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyLoadBalancerAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elb.ModifyLoadBalancerAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) fakeModifyLoadBalancerAttributesWithContext(ctx context.Context, in *elb.ModifyLoadBalancerAttributesInput, _ ...request.Option) (*elb.ModifyLoadBalancerAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyLoadBalancerAttributes cancelled", ctx.Err())
	default:
		return d.ModifyLoadBalancerAttributes(in)
	}
}

func (d *ELBDouble) RegisterInstancesWithLoadBalancer(i0 *elb.RegisterInstancesWithLoadBalancerInput) (r0 *elb.RegisterInstancesWithLoadBalancerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterInstancesWithLoadBalancer", i0)
	r0, _ = returns[0].(*elb.RegisterInstancesWithLoadBalancerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) RegisterInstancesWithLoadBalancerRequest(i0 *elb.RegisterInstancesWithLoadBalancerInput) (r0 *request.Request, r1 *elb.RegisterInstancesWithLoadBalancerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterInstancesWithLoadBalancerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elb.RegisterInstancesWithLoadBalancerOutput)
	return
}

func (d *ELBDouble) RegisterInstancesWithLoadBalancerWithContext(i0 context.Context, i1 *elb.RegisterInstancesWithLoadBalancerInput, i2 ...request.Option) (r0 *elb.RegisterInstancesWithLoadBalancerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterInstancesWithLoadBalancerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elb.RegisterInstancesWithLoadBalancerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) fakeRegisterInstancesWithLoadBalancerWithContext(ctx context.Context, in *elb.RegisterInstancesWithLoadBalancerInput, _ ...request.Option) (*elb.RegisterInstancesWithLoadBalancerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterInstancesWithLoadBalancer cancelled", ctx.Err())
	default:
		return d.RegisterInstancesWithLoadBalancer(in)
	}
}

func (d *ELBDouble) RemoveTags(i0 *elb.RemoveTagsInput) (r0 *elb.RemoveTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTags", i0)
	r0, _ = returns[0].(*elb.RemoveTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) RemoveTagsRequest(i0 *elb.RemoveTagsInput) (r0 *request.Request, r1 *elb.RemoveTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elb.RemoveTagsOutput)
	return
}

func (d *ELBDouble) RemoveTagsWithContext(i0 context.Context, i1 *elb.RemoveTagsInput, i2 ...request.Option) (r0 *elb.RemoveTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elb.RemoveTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) fakeRemoveTagsWithContext(ctx context.Context, in *elb.RemoveTagsInput, _ ...request.Option) (*elb.RemoveTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveTags cancelled", ctx.Err())
	default:
		return d.RemoveTags(in)
	}
}

func (d *ELBDouble) SetLoadBalancerListenerSSLCertificate(i0 *elb.SetLoadBalancerListenerSSLCertificateInput) (r0 *elb.SetLoadBalancerListenerSSLCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetLoadBalancerListenerSSLCertificate", i0)
	r0, _ = returns[0].(*elb.SetLoadBalancerListenerSSLCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) SetLoadBalancerListenerSSLCertificateRequest(i0 *elb.SetLoadBalancerListenerSSLCertificateInput) (r0 *request.Request, r1 *elb.SetLoadBalancerListenerSSLCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetLoadBalancerListenerSSLCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elb.SetLoadBalancerListenerSSLCertificateOutput)
	return
}

func (d *ELBDouble) SetLoadBalancerListenerSSLCertificateWithContext(i0 context.Context, i1 *elb.SetLoadBalancerListenerSSLCertificateInput, i2 ...request.Option) (r0 *elb.SetLoadBalancerListenerSSLCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetLoadBalancerListenerSSLCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elb.SetLoadBalancerListenerSSLCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) fakeSetLoadBalancerListenerSSLCertificateWithContext(ctx context.Context, in *elb.SetLoadBalancerListenerSSLCertificateInput, _ ...request.Option) (*elb.SetLoadBalancerListenerSSLCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetLoadBalancerListenerSSLCertificate cancelled", ctx.Err())
	default:
		return d.SetLoadBalancerListenerSSLCertificate(in)
	}
}

func (d *ELBDouble) SetLoadBalancerPoliciesForBackendServer(i0 *elb.SetLoadBalancerPoliciesForBackendServerInput) (r0 *elb.SetLoadBalancerPoliciesForBackendServerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetLoadBalancerPoliciesForBackendServer", i0)
	r0, _ = returns[0].(*elb.SetLoadBalancerPoliciesForBackendServerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) SetLoadBalancerPoliciesForBackendServerRequest(i0 *elb.SetLoadBalancerPoliciesForBackendServerInput) (r0 *request.Request, r1 *elb.SetLoadBalancerPoliciesForBackendServerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetLoadBalancerPoliciesForBackendServerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elb.SetLoadBalancerPoliciesForBackendServerOutput)
	return
}

func (d *ELBDouble) SetLoadBalancerPoliciesForBackendServerWithContext(i0 context.Context, i1 *elb.SetLoadBalancerPoliciesForBackendServerInput, i2 ...request.Option) (r0 *elb.SetLoadBalancerPoliciesForBackendServerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetLoadBalancerPoliciesForBackendServerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elb.SetLoadBalancerPoliciesForBackendServerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) fakeSetLoadBalancerPoliciesForBackendServerWithContext(ctx context.Context, in *elb.SetLoadBalancerPoliciesForBackendServerInput, _ ...request.Option) (*elb.SetLoadBalancerPoliciesForBackendServerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetLoadBalancerPoliciesForBackendServer cancelled", ctx.Err())
	default:
		return d.SetLoadBalancerPoliciesForBackendServer(in)
	}
}

func (d *ELBDouble) SetLoadBalancerPoliciesOfListener(i0 *elb.SetLoadBalancerPoliciesOfListenerInput) (r0 *elb.SetLoadBalancerPoliciesOfListenerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetLoadBalancerPoliciesOfListener", i0)
	r0, _ = returns[0].(*elb.SetLoadBalancerPoliciesOfListenerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) SetLoadBalancerPoliciesOfListenerRequest(i0 *elb.SetLoadBalancerPoliciesOfListenerInput) (r0 *request.Request, r1 *elb.SetLoadBalancerPoliciesOfListenerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetLoadBalancerPoliciesOfListenerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elb.SetLoadBalancerPoliciesOfListenerOutput)
	return
}

func (d *ELBDouble) SetLoadBalancerPoliciesOfListenerWithContext(i0 context.Context, i1 *elb.SetLoadBalancerPoliciesOfListenerInput, i2 ...request.Option) (r0 *elb.SetLoadBalancerPoliciesOfListenerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetLoadBalancerPoliciesOfListenerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elb.SetLoadBalancerPoliciesOfListenerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBDouble) fakeSetLoadBalancerPoliciesOfListenerWithContext(ctx context.Context, in *elb.SetLoadBalancerPoliciesOfListenerInput, _ ...request.Option) (*elb.SetLoadBalancerPoliciesOfListenerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetLoadBalancerPoliciesOfListener cancelled", ctx.Err())
	default:
		return d.SetLoadBalancerPoliciesOfListener(in)
	}
}

func (d *ELBDouble) WaitUntilAnyInstanceInService(i0 *elb.DescribeInstanceHealthInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilAnyInstanceInService", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *ELBDouble) fakeWaitUntilAnyInstanceInService(in *elb.DescribeInstanceHealthInput) error {
	return d.WaitUntil("AnyInstanceInService", waiters, in)
}

func (d *ELBDouble) WaitUntilAnyInstanceInServiceWithContext(i0 context.Context, i1 *elb.DescribeInstanceHealthInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilAnyInstanceInServiceWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *ELBDouble) fakeWaitUntilAnyInstanceInServiceWithContext(ctx context.Context, in *elb.DescribeInstanceHealthInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("AnyInstanceInService", waiters, ctx, in, waitOption...)
}

func (d *ELBDouble) WaitUntilInstanceDeregistered(i0 *elb.DescribeInstanceHealthInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilInstanceDeregistered", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *ELBDouble) fakeWaitUntilInstanceDeregistered(in *elb.DescribeInstanceHealthInput) error {
	return d.WaitUntil("InstanceDeregistered", waiters, in)
}

func (d *ELBDouble) WaitUntilInstanceDeregisteredWithContext(i0 context.Context, i1 *elb.DescribeInstanceHealthInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilInstanceDeregisteredWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *ELBDouble) fakeWaitUntilInstanceDeregisteredWithContext(ctx context.Context, in *elb.DescribeInstanceHealthInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("InstanceDeregistered", waiters, ctx, in, waitOption...)
}

func (d *ELBDouble) WaitUntilInstanceInService(i0 *elb.DescribeInstanceHealthInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilInstanceInService", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *ELBDouble) fakeWaitUntilInstanceInService(in *elb.DescribeInstanceHealthInput) error {
	return d.WaitUntil("InstanceInService", waiters, in)
}

func (d *ELBDouble) WaitUntilInstanceInServiceWithContext(i0 context.Context, i1 *elb.DescribeInstanceHealthInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilInstanceInServiceWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *ELBDouble) fakeWaitUntilInstanceInServiceWithContext(ctx context.Context, in *elb.DescribeInstanceHealthInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("InstanceInService", waiters, ctx, in, waitOption...)
}
