// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:11:21+11:00

// Package augmentedairuntimedouble provides a TestDouble implementation of augmentedairuntimeiface.AugmentedAIRuntimeAPI
package augmentedairuntimedouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/augmentedairuntime"
	"github.com/aws/aws-sdk-go/service/augmentedairuntime/augmentedairuntimeiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// AugmentedAIRuntimeDouble is TestDouble for augmentedairuntimeiface.AugmentedAIRuntimeAPI
type AugmentedAIRuntimeDouble struct {
	augmentedairuntimeiface.AugmentedAIRuntimeAPI
	*awsdouble.AWSTestDouble
}

// Constructor for AugmentedAIRuntimeDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *AugmentedAIRuntimeDouble {
	result := &AugmentedAIRuntimeDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*augmentedairuntimeiface.AugmentedAIRuntimeAPI)(nil), configurators...)
	return result
}

func (d *AugmentedAIRuntimeDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *AugmentedAIRuntimeDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "DeleteHumanLoopWithContext":
		return m.Fake(d.fakeDeleteHumanLoopWithContext)

	case "DescribeHumanLoopWithContext":
		return m.Fake(d.fakeDescribeHumanLoopWithContext)

	case "ListHumanLoopsPages":
		return m.Fake(d.fakeListHumanLoopsPages)

	case "ListHumanLoopsPagesWithContext":
		return m.Fake(d.fakeListHumanLoopsPagesWithContext)

	case "ListHumanLoopsWithContext":
		return m.Fake(d.fakeListHumanLoopsWithContext)

	case "StartHumanLoopWithContext":
		return m.Fake(d.fakeStartHumanLoopWithContext)

	case "StopHumanLoopWithContext":
		return m.Fake(d.fakeStopHumanLoopWithContext)

	default:
		return nil
	}
}

func (d *AugmentedAIRuntimeDouble) DeleteHumanLoop(i0 *augmentedairuntime.DeleteHumanLoopInput) (r0 *augmentedairuntime.DeleteHumanLoopOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteHumanLoop", i0)
	r0, _ = returns[0].(*augmentedairuntime.DeleteHumanLoopOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AugmentedAIRuntimeDouble) DeleteHumanLoopRequest(i0 *augmentedairuntime.DeleteHumanLoopInput) (r0 *request.Request, r1 *augmentedairuntime.DeleteHumanLoopOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteHumanLoopRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*augmentedairuntime.DeleteHumanLoopOutput)
	return
}

func (d *AugmentedAIRuntimeDouble) DeleteHumanLoopWithContext(i0 context.Context, i1 *augmentedairuntime.DeleteHumanLoopInput, i2 ...request.Option) (r0 *augmentedairuntime.DeleteHumanLoopOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteHumanLoopWithContext", i0, i1, i2)
	r0, _ = returns[0].(*augmentedairuntime.DeleteHumanLoopOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AugmentedAIRuntimeDouble) fakeDeleteHumanLoopWithContext(ctx context.Context, in *augmentedairuntime.DeleteHumanLoopInput, _ ...request.Option) (*augmentedairuntime.DeleteHumanLoopOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteHumanLoop cancelled", ctx.Err())
	default:
		return d.DeleteHumanLoop(in)
	}
}

func (d *AugmentedAIRuntimeDouble) DescribeHumanLoop(i0 *augmentedairuntime.DescribeHumanLoopInput) (r0 *augmentedairuntime.DescribeHumanLoopOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHumanLoop", i0)
	r0, _ = returns[0].(*augmentedairuntime.DescribeHumanLoopOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AugmentedAIRuntimeDouble) DescribeHumanLoopRequest(i0 *augmentedairuntime.DescribeHumanLoopInput) (r0 *request.Request, r1 *augmentedairuntime.DescribeHumanLoopOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHumanLoopRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*augmentedairuntime.DescribeHumanLoopOutput)
	return
}

func (d *AugmentedAIRuntimeDouble) DescribeHumanLoopWithContext(i0 context.Context, i1 *augmentedairuntime.DescribeHumanLoopInput, i2 ...request.Option) (r0 *augmentedairuntime.DescribeHumanLoopOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHumanLoopWithContext", i0, i1, i2)
	r0, _ = returns[0].(*augmentedairuntime.DescribeHumanLoopOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AugmentedAIRuntimeDouble) fakeDescribeHumanLoopWithContext(ctx context.Context, in *augmentedairuntime.DescribeHumanLoopInput, _ ...request.Option) (*augmentedairuntime.DescribeHumanLoopOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeHumanLoop cancelled", ctx.Err())
	default:
		return d.DescribeHumanLoop(in)
	}
}

func (d *AugmentedAIRuntimeDouble) ListHumanLoops(i0 *augmentedairuntime.ListHumanLoopsInput) (r0 *augmentedairuntime.ListHumanLoopsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHumanLoops", i0)
	r0, _ = returns[0].(*augmentedairuntime.ListHumanLoopsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AugmentedAIRuntimeDouble) ListHumanLoopsPages(i0 *augmentedairuntime.ListHumanLoopsInput, i1 func(*augmentedairuntime.ListHumanLoopsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHumanLoopsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AugmentedAIRuntimeDouble) fakeListHumanLoopsPages(in *augmentedairuntime.ListHumanLoopsInput, pager func(*augmentedairuntime.ListHumanLoopsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListHumanLoops", paginators, in, pager)
}

func (d *AugmentedAIRuntimeDouble) ListHumanLoopsPagesWithContext(i0 context.Context, i1 *augmentedairuntime.ListHumanLoopsInput, i2 func(*augmentedairuntime.ListHumanLoopsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHumanLoopsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AugmentedAIRuntimeDouble) fakeListHumanLoopsPagesWithContext(ctx context.Context, in *augmentedairuntime.ListHumanLoopsInput, pager func(*augmentedairuntime.ListHumanLoopsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListHumanLoops", paginators, ctx, in, pager, options...)
}

func (d *AugmentedAIRuntimeDouble) ListHumanLoopsRequest(i0 *augmentedairuntime.ListHumanLoopsInput) (r0 *request.Request, r1 *augmentedairuntime.ListHumanLoopsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHumanLoopsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*augmentedairuntime.ListHumanLoopsOutput)
	return
}

func (d *AugmentedAIRuntimeDouble) ListHumanLoopsWithContext(i0 context.Context, i1 *augmentedairuntime.ListHumanLoopsInput, i2 ...request.Option) (r0 *augmentedairuntime.ListHumanLoopsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHumanLoopsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*augmentedairuntime.ListHumanLoopsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AugmentedAIRuntimeDouble) fakeListHumanLoopsWithContext(ctx context.Context, in *augmentedairuntime.ListHumanLoopsInput, _ ...request.Option) (*augmentedairuntime.ListHumanLoopsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListHumanLoops cancelled", ctx.Err())
	default:
		return d.ListHumanLoops(in)
	}
}

func (d *AugmentedAIRuntimeDouble) StartHumanLoop(i0 *augmentedairuntime.StartHumanLoopInput) (r0 *augmentedairuntime.StartHumanLoopOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartHumanLoop", i0)
	r0, _ = returns[0].(*augmentedairuntime.StartHumanLoopOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AugmentedAIRuntimeDouble) StartHumanLoopRequest(i0 *augmentedairuntime.StartHumanLoopInput) (r0 *request.Request, r1 *augmentedairuntime.StartHumanLoopOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartHumanLoopRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*augmentedairuntime.StartHumanLoopOutput)
	return
}

func (d *AugmentedAIRuntimeDouble) StartHumanLoopWithContext(i0 context.Context, i1 *augmentedairuntime.StartHumanLoopInput, i2 ...request.Option) (r0 *augmentedairuntime.StartHumanLoopOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartHumanLoopWithContext", i0, i1, i2)
	r0, _ = returns[0].(*augmentedairuntime.StartHumanLoopOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AugmentedAIRuntimeDouble) fakeStartHumanLoopWithContext(ctx context.Context, in *augmentedairuntime.StartHumanLoopInput, _ ...request.Option) (*augmentedairuntime.StartHumanLoopOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartHumanLoop cancelled", ctx.Err())
	default:
		return d.StartHumanLoop(in)
	}
}

func (d *AugmentedAIRuntimeDouble) StopHumanLoop(i0 *augmentedairuntime.StopHumanLoopInput) (r0 *augmentedairuntime.StopHumanLoopOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopHumanLoop", i0)
	r0, _ = returns[0].(*augmentedairuntime.StopHumanLoopOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AugmentedAIRuntimeDouble) StopHumanLoopRequest(i0 *augmentedairuntime.StopHumanLoopInput) (r0 *request.Request, r1 *augmentedairuntime.StopHumanLoopOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopHumanLoopRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*augmentedairuntime.StopHumanLoopOutput)
	return
}

func (d *AugmentedAIRuntimeDouble) StopHumanLoopWithContext(i0 context.Context, i1 *augmentedairuntime.StopHumanLoopInput, i2 ...request.Option) (r0 *augmentedairuntime.StopHumanLoopOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopHumanLoopWithContext", i0, i1, i2)
	r0, _ = returns[0].(*augmentedairuntime.StopHumanLoopOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AugmentedAIRuntimeDouble) fakeStopHumanLoopWithContext(ctx context.Context, in *augmentedairuntime.StopHumanLoopInput, _ ...request.Option) (*augmentedairuntime.StopHumanLoopOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopHumanLoop cancelled", ctx.Err())
	default:
		return d.StopHumanLoop(in)
	}
}
