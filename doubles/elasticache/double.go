// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:12:36+11:00

// Package elasticachedouble provides a TestDouble implementation of elasticacheiface.ElastiCacheAPI
package elasticachedouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/elasticache"
	"github.com/aws/aws-sdk-go/service/elasticache/elasticacheiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// ElastiCacheDouble is TestDouble for elasticacheiface.ElastiCacheAPI
type ElastiCacheDouble struct {
	elasticacheiface.ElastiCacheAPI
	*awsdouble.AWSTestDouble
}

// Constructor for ElastiCacheDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *ElastiCacheDouble {
	result := &ElastiCacheDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*elasticacheiface.ElastiCacheAPI)(nil), configurators...)
	return result
}

func (d *ElastiCacheDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *ElastiCacheDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AddTagsToResourceWithContext":
		return m.Fake(d.fakeAddTagsToResourceWithContext)

	case "AuthorizeCacheSecurityGroupIngressWithContext":
		return m.Fake(d.fakeAuthorizeCacheSecurityGroupIngressWithContext)

	case "BatchApplyUpdateActionWithContext":
		return m.Fake(d.fakeBatchApplyUpdateActionWithContext)

	case "BatchStopUpdateActionWithContext":
		return m.Fake(d.fakeBatchStopUpdateActionWithContext)

	case "CompleteMigrationWithContext":
		return m.Fake(d.fakeCompleteMigrationWithContext)

	case "CopySnapshotWithContext":
		return m.Fake(d.fakeCopySnapshotWithContext)

	case "CreateCacheClusterWithContext":
		return m.Fake(d.fakeCreateCacheClusterWithContext)

	case "CreateCacheParameterGroupWithContext":
		return m.Fake(d.fakeCreateCacheParameterGroupWithContext)

	case "CreateCacheSecurityGroupWithContext":
		return m.Fake(d.fakeCreateCacheSecurityGroupWithContext)

	case "CreateCacheSubnetGroupWithContext":
		return m.Fake(d.fakeCreateCacheSubnetGroupWithContext)

	case "CreateReplicationGroupWithContext":
		return m.Fake(d.fakeCreateReplicationGroupWithContext)

	case "CreateSnapshotWithContext":
		return m.Fake(d.fakeCreateSnapshotWithContext)

	case "DecreaseReplicaCountWithContext":
		return m.Fake(d.fakeDecreaseReplicaCountWithContext)

	case "DeleteCacheClusterWithContext":
		return m.Fake(d.fakeDeleteCacheClusterWithContext)

	case "DeleteCacheParameterGroupWithContext":
		return m.Fake(d.fakeDeleteCacheParameterGroupWithContext)

	case "DeleteCacheSecurityGroupWithContext":
		return m.Fake(d.fakeDeleteCacheSecurityGroupWithContext)

	case "DeleteCacheSubnetGroupWithContext":
		return m.Fake(d.fakeDeleteCacheSubnetGroupWithContext)

	case "DeleteReplicationGroupWithContext":
		return m.Fake(d.fakeDeleteReplicationGroupWithContext)

	case "DeleteSnapshotWithContext":
		return m.Fake(d.fakeDeleteSnapshotWithContext)

	case "DescribeCacheClustersPages":
		return m.Fake(d.fakeDescribeCacheClustersPages)

	case "DescribeCacheClustersPagesWithContext":
		return m.Fake(d.fakeDescribeCacheClustersPagesWithContext)

	case "DescribeCacheClustersWithContext":
		return m.Fake(d.fakeDescribeCacheClustersWithContext)

	case "DescribeCacheEngineVersionsPages":
		return m.Fake(d.fakeDescribeCacheEngineVersionsPages)

	case "DescribeCacheEngineVersionsPagesWithContext":
		return m.Fake(d.fakeDescribeCacheEngineVersionsPagesWithContext)

	case "DescribeCacheEngineVersionsWithContext":
		return m.Fake(d.fakeDescribeCacheEngineVersionsWithContext)

	case "DescribeCacheParameterGroupsPages":
		return m.Fake(d.fakeDescribeCacheParameterGroupsPages)

	case "DescribeCacheParameterGroupsPagesWithContext":
		return m.Fake(d.fakeDescribeCacheParameterGroupsPagesWithContext)

	case "DescribeCacheParameterGroupsWithContext":
		return m.Fake(d.fakeDescribeCacheParameterGroupsWithContext)

	case "DescribeCacheParametersPages":
		return m.Fake(d.fakeDescribeCacheParametersPages)

	case "DescribeCacheParametersPagesWithContext":
		return m.Fake(d.fakeDescribeCacheParametersPagesWithContext)

	case "DescribeCacheParametersWithContext":
		return m.Fake(d.fakeDescribeCacheParametersWithContext)

	case "DescribeCacheSecurityGroupsPages":
		return m.Fake(d.fakeDescribeCacheSecurityGroupsPages)

	case "DescribeCacheSecurityGroupsPagesWithContext":
		return m.Fake(d.fakeDescribeCacheSecurityGroupsPagesWithContext)

	case "DescribeCacheSecurityGroupsWithContext":
		return m.Fake(d.fakeDescribeCacheSecurityGroupsWithContext)

	case "DescribeCacheSubnetGroupsPages":
		return m.Fake(d.fakeDescribeCacheSubnetGroupsPages)

	case "DescribeCacheSubnetGroupsPagesWithContext":
		return m.Fake(d.fakeDescribeCacheSubnetGroupsPagesWithContext)

	case "DescribeCacheSubnetGroupsWithContext":
		return m.Fake(d.fakeDescribeCacheSubnetGroupsWithContext)

	case "DescribeEngineDefaultParametersPages":
		return m.Fake(d.fakeDescribeEngineDefaultParametersPages)

	case "DescribeEngineDefaultParametersPagesWithContext":
		return m.Fake(d.fakeDescribeEngineDefaultParametersPagesWithContext)

	case "DescribeEngineDefaultParametersWithContext":
		return m.Fake(d.fakeDescribeEngineDefaultParametersWithContext)

	case "DescribeEventsPages":
		return m.Fake(d.fakeDescribeEventsPages)

	case "DescribeEventsPagesWithContext":
		return m.Fake(d.fakeDescribeEventsPagesWithContext)

	case "DescribeEventsWithContext":
		return m.Fake(d.fakeDescribeEventsWithContext)

	case "DescribeReplicationGroupsPages":
		return m.Fake(d.fakeDescribeReplicationGroupsPages)

	case "DescribeReplicationGroupsPagesWithContext":
		return m.Fake(d.fakeDescribeReplicationGroupsPagesWithContext)

	case "DescribeReplicationGroupsWithContext":
		return m.Fake(d.fakeDescribeReplicationGroupsWithContext)

	case "DescribeReservedCacheNodesOfferingsPages":
		return m.Fake(d.fakeDescribeReservedCacheNodesOfferingsPages)

	case "DescribeReservedCacheNodesOfferingsPagesWithContext":
		return m.Fake(d.fakeDescribeReservedCacheNodesOfferingsPagesWithContext)

	case "DescribeReservedCacheNodesOfferingsWithContext":
		return m.Fake(d.fakeDescribeReservedCacheNodesOfferingsWithContext)

	case "DescribeReservedCacheNodesPages":
		return m.Fake(d.fakeDescribeReservedCacheNodesPages)

	case "DescribeReservedCacheNodesPagesWithContext":
		return m.Fake(d.fakeDescribeReservedCacheNodesPagesWithContext)

	case "DescribeReservedCacheNodesWithContext":
		return m.Fake(d.fakeDescribeReservedCacheNodesWithContext)

	case "DescribeServiceUpdatesPages":
		return m.Fake(d.fakeDescribeServiceUpdatesPages)

	case "DescribeServiceUpdatesPagesWithContext":
		return m.Fake(d.fakeDescribeServiceUpdatesPagesWithContext)

	case "DescribeServiceUpdatesWithContext":
		return m.Fake(d.fakeDescribeServiceUpdatesWithContext)

	case "DescribeSnapshotsPages":
		return m.Fake(d.fakeDescribeSnapshotsPages)

	case "DescribeSnapshotsPagesWithContext":
		return m.Fake(d.fakeDescribeSnapshotsPagesWithContext)

	case "DescribeSnapshotsWithContext":
		return m.Fake(d.fakeDescribeSnapshotsWithContext)

	case "DescribeUpdateActionsPages":
		return m.Fake(d.fakeDescribeUpdateActionsPages)

	case "DescribeUpdateActionsPagesWithContext":
		return m.Fake(d.fakeDescribeUpdateActionsPagesWithContext)

	case "DescribeUpdateActionsWithContext":
		return m.Fake(d.fakeDescribeUpdateActionsWithContext)

	case "IncreaseReplicaCountWithContext":
		return m.Fake(d.fakeIncreaseReplicaCountWithContext)

	case "ListAllowedNodeTypeModificationsWithContext":
		return m.Fake(d.fakeListAllowedNodeTypeModificationsWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "ModifyCacheClusterWithContext":
		return m.Fake(d.fakeModifyCacheClusterWithContext)

	case "ModifyCacheParameterGroupWithContext":
		return m.Fake(d.fakeModifyCacheParameterGroupWithContext)

	case "ModifyCacheSubnetGroupWithContext":
		return m.Fake(d.fakeModifyCacheSubnetGroupWithContext)

	case "ModifyReplicationGroupShardConfigurationWithContext":
		return m.Fake(d.fakeModifyReplicationGroupShardConfigurationWithContext)

	case "ModifyReplicationGroupWithContext":
		return m.Fake(d.fakeModifyReplicationGroupWithContext)

	case "PurchaseReservedCacheNodesOfferingWithContext":
		return m.Fake(d.fakePurchaseReservedCacheNodesOfferingWithContext)

	case "RebootCacheClusterWithContext":
		return m.Fake(d.fakeRebootCacheClusterWithContext)

	case "RemoveTagsFromResourceWithContext":
		return m.Fake(d.fakeRemoveTagsFromResourceWithContext)

	case "ResetCacheParameterGroupWithContext":
		return m.Fake(d.fakeResetCacheParameterGroupWithContext)

	case "RevokeCacheSecurityGroupIngressWithContext":
		return m.Fake(d.fakeRevokeCacheSecurityGroupIngressWithContext)

	case "StartMigrationWithContext":
		return m.Fake(d.fakeStartMigrationWithContext)

	case "TestFailoverWithContext":
		return m.Fake(d.fakeTestFailoverWithContext)

	case "WaitUntilCacheClusterAvailable":
		return m.Fake(d.fakeWaitUntilCacheClusterAvailable)

	case "WaitUntilCacheClusterAvailableWithContext":
		return m.Fake(d.fakeWaitUntilCacheClusterAvailableWithContext)

	case "WaitUntilCacheClusterDeleted":
		return m.Fake(d.fakeWaitUntilCacheClusterDeleted)

	case "WaitUntilCacheClusterDeletedWithContext":
		return m.Fake(d.fakeWaitUntilCacheClusterDeletedWithContext)

	case "WaitUntilReplicationGroupAvailable":
		return m.Fake(d.fakeWaitUntilReplicationGroupAvailable)

	case "WaitUntilReplicationGroupAvailableWithContext":
		return m.Fake(d.fakeWaitUntilReplicationGroupAvailableWithContext)

	case "WaitUntilReplicationGroupDeleted":
		return m.Fake(d.fakeWaitUntilReplicationGroupDeleted)

	case "WaitUntilReplicationGroupDeletedWithContext":
		return m.Fake(d.fakeWaitUntilReplicationGroupDeletedWithContext)

	default:
		return nil
	}
}

func (d *ElastiCacheDouble) AddTagsToResource(i0 *elasticache.AddTagsToResourceInput) (r0 *elasticache.TagListMessage, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToResource", i0)
	r0, _ = returns[0].(*elasticache.TagListMessage)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) AddTagsToResourceRequest(i0 *elasticache.AddTagsToResourceInput) (r0 *request.Request, r1 *elasticache.TagListMessage) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.TagListMessage)
	return
}

func (d *ElastiCacheDouble) AddTagsToResourceWithContext(i0 context.Context, i1 *elasticache.AddTagsToResourceInput, i2 ...request.Option) (r0 *elasticache.TagListMessage, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.TagListMessage)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeAddTagsToResourceWithContext(ctx context.Context, in *elasticache.AddTagsToResourceInput, _ ...request.Option) (*elasticache.TagListMessage, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddTagsToResource cancelled", ctx.Err())
	default:
		return d.AddTagsToResource(in)
	}
}

func (d *ElastiCacheDouble) AuthorizeCacheSecurityGroupIngress(i0 *elasticache.AuthorizeCacheSecurityGroupIngressInput) (r0 *elasticache.AuthorizeCacheSecurityGroupIngressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AuthorizeCacheSecurityGroupIngress", i0)
	r0, _ = returns[0].(*elasticache.AuthorizeCacheSecurityGroupIngressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) AuthorizeCacheSecurityGroupIngressRequest(i0 *elasticache.AuthorizeCacheSecurityGroupIngressInput) (r0 *request.Request, r1 *elasticache.AuthorizeCacheSecurityGroupIngressOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AuthorizeCacheSecurityGroupIngressRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.AuthorizeCacheSecurityGroupIngressOutput)
	return
}

func (d *ElastiCacheDouble) AuthorizeCacheSecurityGroupIngressWithContext(i0 context.Context, i1 *elasticache.AuthorizeCacheSecurityGroupIngressInput, i2 ...request.Option) (r0 *elasticache.AuthorizeCacheSecurityGroupIngressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AuthorizeCacheSecurityGroupIngressWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.AuthorizeCacheSecurityGroupIngressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeAuthorizeCacheSecurityGroupIngressWithContext(ctx context.Context, in *elasticache.AuthorizeCacheSecurityGroupIngressInput, _ ...request.Option) (*elasticache.AuthorizeCacheSecurityGroupIngressOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AuthorizeCacheSecurityGroupIngress cancelled", ctx.Err())
	default:
		return d.AuthorizeCacheSecurityGroupIngress(in)
	}
}

func (d *ElastiCacheDouble) BatchApplyUpdateAction(i0 *elasticache.BatchApplyUpdateActionInput) (r0 *elasticache.BatchApplyUpdateActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchApplyUpdateAction", i0)
	r0, _ = returns[0].(*elasticache.BatchApplyUpdateActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) BatchApplyUpdateActionRequest(i0 *elasticache.BatchApplyUpdateActionInput) (r0 *request.Request, r1 *elasticache.BatchApplyUpdateActionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchApplyUpdateActionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.BatchApplyUpdateActionOutput)
	return
}

func (d *ElastiCacheDouble) BatchApplyUpdateActionWithContext(i0 context.Context, i1 *elasticache.BatchApplyUpdateActionInput, i2 ...request.Option) (r0 *elasticache.BatchApplyUpdateActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchApplyUpdateActionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.BatchApplyUpdateActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeBatchApplyUpdateActionWithContext(ctx context.Context, in *elasticache.BatchApplyUpdateActionInput, _ ...request.Option) (*elasticache.BatchApplyUpdateActionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchApplyUpdateAction cancelled", ctx.Err())
	default:
		return d.BatchApplyUpdateAction(in)
	}
}

func (d *ElastiCacheDouble) BatchStopUpdateAction(i0 *elasticache.BatchStopUpdateActionInput) (r0 *elasticache.BatchStopUpdateActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchStopUpdateAction", i0)
	r0, _ = returns[0].(*elasticache.BatchStopUpdateActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) BatchStopUpdateActionRequest(i0 *elasticache.BatchStopUpdateActionInput) (r0 *request.Request, r1 *elasticache.BatchStopUpdateActionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchStopUpdateActionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.BatchStopUpdateActionOutput)
	return
}

func (d *ElastiCacheDouble) BatchStopUpdateActionWithContext(i0 context.Context, i1 *elasticache.BatchStopUpdateActionInput, i2 ...request.Option) (r0 *elasticache.BatchStopUpdateActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchStopUpdateActionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.BatchStopUpdateActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeBatchStopUpdateActionWithContext(ctx context.Context, in *elasticache.BatchStopUpdateActionInput, _ ...request.Option) (*elasticache.BatchStopUpdateActionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchStopUpdateAction cancelled", ctx.Err())
	default:
		return d.BatchStopUpdateAction(in)
	}
}

func (d *ElastiCacheDouble) CompleteMigration(i0 *elasticache.CompleteMigrationInput) (r0 *elasticache.CompleteMigrationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CompleteMigration", i0)
	r0, _ = returns[0].(*elasticache.CompleteMigrationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) CompleteMigrationRequest(i0 *elasticache.CompleteMigrationInput) (r0 *request.Request, r1 *elasticache.CompleteMigrationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CompleteMigrationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.CompleteMigrationOutput)
	return
}

func (d *ElastiCacheDouble) CompleteMigrationWithContext(i0 context.Context, i1 *elasticache.CompleteMigrationInput, i2 ...request.Option) (r0 *elasticache.CompleteMigrationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CompleteMigrationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.CompleteMigrationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeCompleteMigrationWithContext(ctx context.Context, in *elasticache.CompleteMigrationInput, _ ...request.Option) (*elasticache.CompleteMigrationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CompleteMigration cancelled", ctx.Err())
	default:
		return d.CompleteMigration(in)
	}
}

func (d *ElastiCacheDouble) CopySnapshot(i0 *elasticache.CopySnapshotInput) (r0 *elasticache.CopySnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopySnapshot", i0)
	r0, _ = returns[0].(*elasticache.CopySnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) CopySnapshotRequest(i0 *elasticache.CopySnapshotInput) (r0 *request.Request, r1 *elasticache.CopySnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopySnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.CopySnapshotOutput)
	return
}

func (d *ElastiCacheDouble) CopySnapshotWithContext(i0 context.Context, i1 *elasticache.CopySnapshotInput, i2 ...request.Option) (r0 *elasticache.CopySnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopySnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.CopySnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeCopySnapshotWithContext(ctx context.Context, in *elasticache.CopySnapshotInput, _ ...request.Option) (*elasticache.CopySnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CopySnapshot cancelled", ctx.Err())
	default:
		return d.CopySnapshot(in)
	}
}

func (d *ElastiCacheDouble) CreateCacheCluster(i0 *elasticache.CreateCacheClusterInput) (r0 *elasticache.CreateCacheClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCacheCluster", i0)
	r0, _ = returns[0].(*elasticache.CreateCacheClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) CreateCacheClusterRequest(i0 *elasticache.CreateCacheClusterInput) (r0 *request.Request, r1 *elasticache.CreateCacheClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCacheClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.CreateCacheClusterOutput)
	return
}

func (d *ElastiCacheDouble) CreateCacheClusterWithContext(i0 context.Context, i1 *elasticache.CreateCacheClusterInput, i2 ...request.Option) (r0 *elasticache.CreateCacheClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCacheClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.CreateCacheClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeCreateCacheClusterWithContext(ctx context.Context, in *elasticache.CreateCacheClusterInput, _ ...request.Option) (*elasticache.CreateCacheClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateCacheCluster cancelled", ctx.Err())
	default:
		return d.CreateCacheCluster(in)
	}
}

func (d *ElastiCacheDouble) CreateCacheParameterGroup(i0 *elasticache.CreateCacheParameterGroupInput) (r0 *elasticache.CreateCacheParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCacheParameterGroup", i0)
	r0, _ = returns[0].(*elasticache.CreateCacheParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) CreateCacheParameterGroupRequest(i0 *elasticache.CreateCacheParameterGroupInput) (r0 *request.Request, r1 *elasticache.CreateCacheParameterGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCacheParameterGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.CreateCacheParameterGroupOutput)
	return
}

func (d *ElastiCacheDouble) CreateCacheParameterGroupWithContext(i0 context.Context, i1 *elasticache.CreateCacheParameterGroupInput, i2 ...request.Option) (r0 *elasticache.CreateCacheParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCacheParameterGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.CreateCacheParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeCreateCacheParameterGroupWithContext(ctx context.Context, in *elasticache.CreateCacheParameterGroupInput, _ ...request.Option) (*elasticache.CreateCacheParameterGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateCacheParameterGroup cancelled", ctx.Err())
	default:
		return d.CreateCacheParameterGroup(in)
	}
}

func (d *ElastiCacheDouble) CreateCacheSecurityGroup(i0 *elasticache.CreateCacheSecurityGroupInput) (r0 *elasticache.CreateCacheSecurityGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCacheSecurityGroup", i0)
	r0, _ = returns[0].(*elasticache.CreateCacheSecurityGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) CreateCacheSecurityGroupRequest(i0 *elasticache.CreateCacheSecurityGroupInput) (r0 *request.Request, r1 *elasticache.CreateCacheSecurityGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCacheSecurityGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.CreateCacheSecurityGroupOutput)
	return
}

func (d *ElastiCacheDouble) CreateCacheSecurityGroupWithContext(i0 context.Context, i1 *elasticache.CreateCacheSecurityGroupInput, i2 ...request.Option) (r0 *elasticache.CreateCacheSecurityGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCacheSecurityGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.CreateCacheSecurityGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeCreateCacheSecurityGroupWithContext(ctx context.Context, in *elasticache.CreateCacheSecurityGroupInput, _ ...request.Option) (*elasticache.CreateCacheSecurityGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateCacheSecurityGroup cancelled", ctx.Err())
	default:
		return d.CreateCacheSecurityGroup(in)
	}
}

func (d *ElastiCacheDouble) CreateCacheSubnetGroup(i0 *elasticache.CreateCacheSubnetGroupInput) (r0 *elasticache.CreateCacheSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCacheSubnetGroup", i0)
	r0, _ = returns[0].(*elasticache.CreateCacheSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) CreateCacheSubnetGroupRequest(i0 *elasticache.CreateCacheSubnetGroupInput) (r0 *request.Request, r1 *elasticache.CreateCacheSubnetGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCacheSubnetGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.CreateCacheSubnetGroupOutput)
	return
}

func (d *ElastiCacheDouble) CreateCacheSubnetGroupWithContext(i0 context.Context, i1 *elasticache.CreateCacheSubnetGroupInput, i2 ...request.Option) (r0 *elasticache.CreateCacheSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCacheSubnetGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.CreateCacheSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeCreateCacheSubnetGroupWithContext(ctx context.Context, in *elasticache.CreateCacheSubnetGroupInput, _ ...request.Option) (*elasticache.CreateCacheSubnetGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateCacheSubnetGroup cancelled", ctx.Err())
	default:
		return d.CreateCacheSubnetGroup(in)
	}
}

func (d *ElastiCacheDouble) CreateReplicationGroup(i0 *elasticache.CreateReplicationGroupInput) (r0 *elasticache.CreateReplicationGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateReplicationGroup", i0)
	r0, _ = returns[0].(*elasticache.CreateReplicationGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) CreateReplicationGroupRequest(i0 *elasticache.CreateReplicationGroupInput) (r0 *request.Request, r1 *elasticache.CreateReplicationGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateReplicationGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.CreateReplicationGroupOutput)
	return
}

func (d *ElastiCacheDouble) CreateReplicationGroupWithContext(i0 context.Context, i1 *elasticache.CreateReplicationGroupInput, i2 ...request.Option) (r0 *elasticache.CreateReplicationGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateReplicationGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.CreateReplicationGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeCreateReplicationGroupWithContext(ctx context.Context, in *elasticache.CreateReplicationGroupInput, _ ...request.Option) (*elasticache.CreateReplicationGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateReplicationGroup cancelled", ctx.Err())
	default:
		return d.CreateReplicationGroup(in)
	}
}

func (d *ElastiCacheDouble) CreateSnapshot(i0 *elasticache.CreateSnapshotInput) (r0 *elasticache.CreateSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSnapshot", i0)
	r0, _ = returns[0].(*elasticache.CreateSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) CreateSnapshotRequest(i0 *elasticache.CreateSnapshotInput) (r0 *request.Request, r1 *elasticache.CreateSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.CreateSnapshotOutput)
	return
}

func (d *ElastiCacheDouble) CreateSnapshotWithContext(i0 context.Context, i1 *elasticache.CreateSnapshotInput, i2 ...request.Option) (r0 *elasticache.CreateSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.CreateSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeCreateSnapshotWithContext(ctx context.Context, in *elasticache.CreateSnapshotInput, _ ...request.Option) (*elasticache.CreateSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateSnapshot cancelled", ctx.Err())
	default:
		return d.CreateSnapshot(in)
	}
}

func (d *ElastiCacheDouble) DecreaseReplicaCount(i0 *elasticache.DecreaseReplicaCountInput) (r0 *elasticache.DecreaseReplicaCountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DecreaseReplicaCount", i0)
	r0, _ = returns[0].(*elasticache.DecreaseReplicaCountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) DecreaseReplicaCountRequest(i0 *elasticache.DecreaseReplicaCountInput) (r0 *request.Request, r1 *elasticache.DecreaseReplicaCountOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DecreaseReplicaCountRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.DecreaseReplicaCountOutput)
	return
}

func (d *ElastiCacheDouble) DecreaseReplicaCountWithContext(i0 context.Context, i1 *elasticache.DecreaseReplicaCountInput, i2 ...request.Option) (r0 *elasticache.DecreaseReplicaCountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DecreaseReplicaCountWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.DecreaseReplicaCountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeDecreaseReplicaCountWithContext(ctx context.Context, in *elasticache.DecreaseReplicaCountInput, _ ...request.Option) (*elasticache.DecreaseReplicaCountOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DecreaseReplicaCount cancelled", ctx.Err())
	default:
		return d.DecreaseReplicaCount(in)
	}
}

func (d *ElastiCacheDouble) DeleteCacheCluster(i0 *elasticache.DeleteCacheClusterInput) (r0 *elasticache.DeleteCacheClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCacheCluster", i0)
	r0, _ = returns[0].(*elasticache.DeleteCacheClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) DeleteCacheClusterRequest(i0 *elasticache.DeleteCacheClusterInput) (r0 *request.Request, r1 *elasticache.DeleteCacheClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCacheClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.DeleteCacheClusterOutput)
	return
}

func (d *ElastiCacheDouble) DeleteCacheClusterWithContext(i0 context.Context, i1 *elasticache.DeleteCacheClusterInput, i2 ...request.Option) (r0 *elasticache.DeleteCacheClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCacheClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.DeleteCacheClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeDeleteCacheClusterWithContext(ctx context.Context, in *elasticache.DeleteCacheClusterInput, _ ...request.Option) (*elasticache.DeleteCacheClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteCacheCluster cancelled", ctx.Err())
	default:
		return d.DeleteCacheCluster(in)
	}
}

func (d *ElastiCacheDouble) DeleteCacheParameterGroup(i0 *elasticache.DeleteCacheParameterGroupInput) (r0 *elasticache.DeleteCacheParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCacheParameterGroup", i0)
	r0, _ = returns[0].(*elasticache.DeleteCacheParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) DeleteCacheParameterGroupRequest(i0 *elasticache.DeleteCacheParameterGroupInput) (r0 *request.Request, r1 *elasticache.DeleteCacheParameterGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCacheParameterGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.DeleteCacheParameterGroupOutput)
	return
}

func (d *ElastiCacheDouble) DeleteCacheParameterGroupWithContext(i0 context.Context, i1 *elasticache.DeleteCacheParameterGroupInput, i2 ...request.Option) (r0 *elasticache.DeleteCacheParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCacheParameterGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.DeleteCacheParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeDeleteCacheParameterGroupWithContext(ctx context.Context, in *elasticache.DeleteCacheParameterGroupInput, _ ...request.Option) (*elasticache.DeleteCacheParameterGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteCacheParameterGroup cancelled", ctx.Err())
	default:
		return d.DeleteCacheParameterGroup(in)
	}
}

func (d *ElastiCacheDouble) DeleteCacheSecurityGroup(i0 *elasticache.DeleteCacheSecurityGroupInput) (r0 *elasticache.DeleteCacheSecurityGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCacheSecurityGroup", i0)
	r0, _ = returns[0].(*elasticache.DeleteCacheSecurityGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) DeleteCacheSecurityGroupRequest(i0 *elasticache.DeleteCacheSecurityGroupInput) (r0 *request.Request, r1 *elasticache.DeleteCacheSecurityGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCacheSecurityGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.DeleteCacheSecurityGroupOutput)
	return
}

func (d *ElastiCacheDouble) DeleteCacheSecurityGroupWithContext(i0 context.Context, i1 *elasticache.DeleteCacheSecurityGroupInput, i2 ...request.Option) (r0 *elasticache.DeleteCacheSecurityGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCacheSecurityGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.DeleteCacheSecurityGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeDeleteCacheSecurityGroupWithContext(ctx context.Context, in *elasticache.DeleteCacheSecurityGroupInput, _ ...request.Option) (*elasticache.DeleteCacheSecurityGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteCacheSecurityGroup cancelled", ctx.Err())
	default:
		return d.DeleteCacheSecurityGroup(in)
	}
}

func (d *ElastiCacheDouble) DeleteCacheSubnetGroup(i0 *elasticache.DeleteCacheSubnetGroupInput) (r0 *elasticache.DeleteCacheSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCacheSubnetGroup", i0)
	r0, _ = returns[0].(*elasticache.DeleteCacheSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) DeleteCacheSubnetGroupRequest(i0 *elasticache.DeleteCacheSubnetGroupInput) (r0 *request.Request, r1 *elasticache.DeleteCacheSubnetGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCacheSubnetGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.DeleteCacheSubnetGroupOutput)
	return
}

func (d *ElastiCacheDouble) DeleteCacheSubnetGroupWithContext(i0 context.Context, i1 *elasticache.DeleteCacheSubnetGroupInput, i2 ...request.Option) (r0 *elasticache.DeleteCacheSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCacheSubnetGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.DeleteCacheSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeDeleteCacheSubnetGroupWithContext(ctx context.Context, in *elasticache.DeleteCacheSubnetGroupInput, _ ...request.Option) (*elasticache.DeleteCacheSubnetGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteCacheSubnetGroup cancelled", ctx.Err())
	default:
		return d.DeleteCacheSubnetGroup(in)
	}
}

func (d *ElastiCacheDouble) DeleteReplicationGroup(i0 *elasticache.DeleteReplicationGroupInput) (r0 *elasticache.DeleteReplicationGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteReplicationGroup", i0)
	r0, _ = returns[0].(*elasticache.DeleteReplicationGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) DeleteReplicationGroupRequest(i0 *elasticache.DeleteReplicationGroupInput) (r0 *request.Request, r1 *elasticache.DeleteReplicationGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteReplicationGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.DeleteReplicationGroupOutput)
	return
}

func (d *ElastiCacheDouble) DeleteReplicationGroupWithContext(i0 context.Context, i1 *elasticache.DeleteReplicationGroupInput, i2 ...request.Option) (r0 *elasticache.DeleteReplicationGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteReplicationGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.DeleteReplicationGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeDeleteReplicationGroupWithContext(ctx context.Context, in *elasticache.DeleteReplicationGroupInput, _ ...request.Option) (*elasticache.DeleteReplicationGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteReplicationGroup cancelled", ctx.Err())
	default:
		return d.DeleteReplicationGroup(in)
	}
}

func (d *ElastiCacheDouble) DeleteSnapshot(i0 *elasticache.DeleteSnapshotInput) (r0 *elasticache.DeleteSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSnapshot", i0)
	r0, _ = returns[0].(*elasticache.DeleteSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) DeleteSnapshotRequest(i0 *elasticache.DeleteSnapshotInput) (r0 *request.Request, r1 *elasticache.DeleteSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.DeleteSnapshotOutput)
	return
}

func (d *ElastiCacheDouble) DeleteSnapshotWithContext(i0 context.Context, i1 *elasticache.DeleteSnapshotInput, i2 ...request.Option) (r0 *elasticache.DeleteSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.DeleteSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeDeleteSnapshotWithContext(ctx context.Context, in *elasticache.DeleteSnapshotInput, _ ...request.Option) (*elasticache.DeleteSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteSnapshot cancelled", ctx.Err())
	default:
		return d.DeleteSnapshot(in)
	}
}

func (d *ElastiCacheDouble) DescribeCacheClusters(i0 *elasticache.DescribeCacheClustersInput) (r0 *elasticache.DescribeCacheClustersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCacheClusters", i0)
	r0, _ = returns[0].(*elasticache.DescribeCacheClustersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) DescribeCacheClustersPages(i0 *elasticache.DescribeCacheClustersInput, i1 func(*elasticache.DescribeCacheClustersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCacheClustersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeCacheClustersPages(in *elasticache.DescribeCacheClustersInput, pager func(*elasticache.DescribeCacheClustersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeCacheClusters", paginators, in, pager)
}

func (d *ElastiCacheDouble) DescribeCacheClustersPagesWithContext(i0 context.Context, i1 *elasticache.DescribeCacheClustersInput, i2 func(*elasticache.DescribeCacheClustersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCacheClustersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeCacheClustersPagesWithContext(ctx context.Context, in *elasticache.DescribeCacheClustersInput, pager func(*elasticache.DescribeCacheClustersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeCacheClusters", paginators, ctx, in, pager, options...)
}

func (d *ElastiCacheDouble) DescribeCacheClustersRequest(i0 *elasticache.DescribeCacheClustersInput) (r0 *request.Request, r1 *elasticache.DescribeCacheClustersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCacheClustersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.DescribeCacheClustersOutput)
	return
}

func (d *ElastiCacheDouble) DescribeCacheClustersWithContext(i0 context.Context, i1 *elasticache.DescribeCacheClustersInput, i2 ...request.Option) (r0 *elasticache.DescribeCacheClustersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCacheClustersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.DescribeCacheClustersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeCacheClustersWithContext(ctx context.Context, in *elasticache.DescribeCacheClustersInput, _ ...request.Option) (*elasticache.DescribeCacheClustersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeCacheClusters cancelled", ctx.Err())
	default:
		return d.DescribeCacheClusters(in)
	}
}

func (d *ElastiCacheDouble) DescribeCacheEngineVersions(i0 *elasticache.DescribeCacheEngineVersionsInput) (r0 *elasticache.DescribeCacheEngineVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCacheEngineVersions", i0)
	r0, _ = returns[0].(*elasticache.DescribeCacheEngineVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) DescribeCacheEngineVersionsPages(i0 *elasticache.DescribeCacheEngineVersionsInput, i1 func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCacheEngineVersionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeCacheEngineVersionsPages(in *elasticache.DescribeCacheEngineVersionsInput, pager func(*elasticache.DescribeCacheEngineVersionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeCacheEngineVersions", paginators, in, pager)
}

func (d *ElastiCacheDouble) DescribeCacheEngineVersionsPagesWithContext(i0 context.Context, i1 *elasticache.DescribeCacheEngineVersionsInput, i2 func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCacheEngineVersionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeCacheEngineVersionsPagesWithContext(ctx context.Context, in *elasticache.DescribeCacheEngineVersionsInput, pager func(*elasticache.DescribeCacheEngineVersionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeCacheEngineVersions", paginators, ctx, in, pager, options...)
}

func (d *ElastiCacheDouble) DescribeCacheEngineVersionsRequest(i0 *elasticache.DescribeCacheEngineVersionsInput) (r0 *request.Request, r1 *elasticache.DescribeCacheEngineVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCacheEngineVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.DescribeCacheEngineVersionsOutput)
	return
}

func (d *ElastiCacheDouble) DescribeCacheEngineVersionsWithContext(i0 context.Context, i1 *elasticache.DescribeCacheEngineVersionsInput, i2 ...request.Option) (r0 *elasticache.DescribeCacheEngineVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCacheEngineVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.DescribeCacheEngineVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeCacheEngineVersionsWithContext(ctx context.Context, in *elasticache.DescribeCacheEngineVersionsInput, _ ...request.Option) (*elasticache.DescribeCacheEngineVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeCacheEngineVersions cancelled", ctx.Err())
	default:
		return d.DescribeCacheEngineVersions(in)
	}
}

func (d *ElastiCacheDouble) DescribeCacheParameterGroups(i0 *elasticache.DescribeCacheParameterGroupsInput) (r0 *elasticache.DescribeCacheParameterGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCacheParameterGroups", i0)
	r0, _ = returns[0].(*elasticache.DescribeCacheParameterGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) DescribeCacheParameterGroupsPages(i0 *elasticache.DescribeCacheParameterGroupsInput, i1 func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCacheParameterGroupsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeCacheParameterGroupsPages(in *elasticache.DescribeCacheParameterGroupsInput, pager func(*elasticache.DescribeCacheParameterGroupsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeCacheParameterGroups", paginators, in, pager)
}

func (d *ElastiCacheDouble) DescribeCacheParameterGroupsPagesWithContext(i0 context.Context, i1 *elasticache.DescribeCacheParameterGroupsInput, i2 func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCacheParameterGroupsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeCacheParameterGroupsPagesWithContext(ctx context.Context, in *elasticache.DescribeCacheParameterGroupsInput, pager func(*elasticache.DescribeCacheParameterGroupsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeCacheParameterGroups", paginators, ctx, in, pager, options...)
}

func (d *ElastiCacheDouble) DescribeCacheParameterGroupsRequest(i0 *elasticache.DescribeCacheParameterGroupsInput) (r0 *request.Request, r1 *elasticache.DescribeCacheParameterGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCacheParameterGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.DescribeCacheParameterGroupsOutput)
	return
}

func (d *ElastiCacheDouble) DescribeCacheParameterGroupsWithContext(i0 context.Context, i1 *elasticache.DescribeCacheParameterGroupsInput, i2 ...request.Option) (r0 *elasticache.DescribeCacheParameterGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCacheParameterGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.DescribeCacheParameterGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeCacheParameterGroupsWithContext(ctx context.Context, in *elasticache.DescribeCacheParameterGroupsInput, _ ...request.Option) (*elasticache.DescribeCacheParameterGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeCacheParameterGroups cancelled", ctx.Err())
	default:
		return d.DescribeCacheParameterGroups(in)
	}
}

func (d *ElastiCacheDouble) DescribeCacheParameters(i0 *elasticache.DescribeCacheParametersInput) (r0 *elasticache.DescribeCacheParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCacheParameters", i0)
	r0, _ = returns[0].(*elasticache.DescribeCacheParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) DescribeCacheParametersPages(i0 *elasticache.DescribeCacheParametersInput, i1 func(*elasticache.DescribeCacheParametersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCacheParametersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeCacheParametersPages(in *elasticache.DescribeCacheParametersInput, pager func(*elasticache.DescribeCacheParametersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeCacheParameters", paginators, in, pager)
}

func (d *ElastiCacheDouble) DescribeCacheParametersPagesWithContext(i0 context.Context, i1 *elasticache.DescribeCacheParametersInput, i2 func(*elasticache.DescribeCacheParametersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCacheParametersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeCacheParametersPagesWithContext(ctx context.Context, in *elasticache.DescribeCacheParametersInput, pager func(*elasticache.DescribeCacheParametersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeCacheParameters", paginators, ctx, in, pager, options...)
}

func (d *ElastiCacheDouble) DescribeCacheParametersRequest(i0 *elasticache.DescribeCacheParametersInput) (r0 *request.Request, r1 *elasticache.DescribeCacheParametersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCacheParametersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.DescribeCacheParametersOutput)
	return
}

func (d *ElastiCacheDouble) DescribeCacheParametersWithContext(i0 context.Context, i1 *elasticache.DescribeCacheParametersInput, i2 ...request.Option) (r0 *elasticache.DescribeCacheParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCacheParametersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.DescribeCacheParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeCacheParametersWithContext(ctx context.Context, in *elasticache.DescribeCacheParametersInput, _ ...request.Option) (*elasticache.DescribeCacheParametersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeCacheParameters cancelled", ctx.Err())
	default:
		return d.DescribeCacheParameters(in)
	}
}

func (d *ElastiCacheDouble) DescribeCacheSecurityGroups(i0 *elasticache.DescribeCacheSecurityGroupsInput) (r0 *elasticache.DescribeCacheSecurityGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCacheSecurityGroups", i0)
	r0, _ = returns[0].(*elasticache.DescribeCacheSecurityGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) DescribeCacheSecurityGroupsPages(i0 *elasticache.DescribeCacheSecurityGroupsInput, i1 func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCacheSecurityGroupsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeCacheSecurityGroupsPages(in *elasticache.DescribeCacheSecurityGroupsInput, pager func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeCacheSecurityGroups", paginators, in, pager)
}

func (d *ElastiCacheDouble) DescribeCacheSecurityGroupsPagesWithContext(i0 context.Context, i1 *elasticache.DescribeCacheSecurityGroupsInput, i2 func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCacheSecurityGroupsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeCacheSecurityGroupsPagesWithContext(ctx context.Context, in *elasticache.DescribeCacheSecurityGroupsInput, pager func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeCacheSecurityGroups", paginators, ctx, in, pager, options...)
}

func (d *ElastiCacheDouble) DescribeCacheSecurityGroupsRequest(i0 *elasticache.DescribeCacheSecurityGroupsInput) (r0 *request.Request, r1 *elasticache.DescribeCacheSecurityGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCacheSecurityGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.DescribeCacheSecurityGroupsOutput)
	return
}

func (d *ElastiCacheDouble) DescribeCacheSecurityGroupsWithContext(i0 context.Context, i1 *elasticache.DescribeCacheSecurityGroupsInput, i2 ...request.Option) (r0 *elasticache.DescribeCacheSecurityGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCacheSecurityGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.DescribeCacheSecurityGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeCacheSecurityGroupsWithContext(ctx context.Context, in *elasticache.DescribeCacheSecurityGroupsInput, _ ...request.Option) (*elasticache.DescribeCacheSecurityGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeCacheSecurityGroups cancelled", ctx.Err())
	default:
		return d.DescribeCacheSecurityGroups(in)
	}
}

func (d *ElastiCacheDouble) DescribeCacheSubnetGroups(i0 *elasticache.DescribeCacheSubnetGroupsInput) (r0 *elasticache.DescribeCacheSubnetGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCacheSubnetGroups", i0)
	r0, _ = returns[0].(*elasticache.DescribeCacheSubnetGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) DescribeCacheSubnetGroupsPages(i0 *elasticache.DescribeCacheSubnetGroupsInput, i1 func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCacheSubnetGroupsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeCacheSubnetGroupsPages(in *elasticache.DescribeCacheSubnetGroupsInput, pager func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeCacheSubnetGroups", paginators, in, pager)
}

func (d *ElastiCacheDouble) DescribeCacheSubnetGroupsPagesWithContext(i0 context.Context, i1 *elasticache.DescribeCacheSubnetGroupsInput, i2 func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCacheSubnetGroupsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeCacheSubnetGroupsPagesWithContext(ctx context.Context, in *elasticache.DescribeCacheSubnetGroupsInput, pager func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeCacheSubnetGroups", paginators, ctx, in, pager, options...)
}

func (d *ElastiCacheDouble) DescribeCacheSubnetGroupsRequest(i0 *elasticache.DescribeCacheSubnetGroupsInput) (r0 *request.Request, r1 *elasticache.DescribeCacheSubnetGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCacheSubnetGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.DescribeCacheSubnetGroupsOutput)
	return
}

func (d *ElastiCacheDouble) DescribeCacheSubnetGroupsWithContext(i0 context.Context, i1 *elasticache.DescribeCacheSubnetGroupsInput, i2 ...request.Option) (r0 *elasticache.DescribeCacheSubnetGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCacheSubnetGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.DescribeCacheSubnetGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeCacheSubnetGroupsWithContext(ctx context.Context, in *elasticache.DescribeCacheSubnetGroupsInput, _ ...request.Option) (*elasticache.DescribeCacheSubnetGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeCacheSubnetGroups cancelled", ctx.Err())
	default:
		return d.DescribeCacheSubnetGroups(in)
	}
}

func (d *ElastiCacheDouble) DescribeEngineDefaultParameters(i0 *elasticache.DescribeEngineDefaultParametersInput) (r0 *elasticache.DescribeEngineDefaultParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEngineDefaultParameters", i0)
	r0, _ = returns[0].(*elasticache.DescribeEngineDefaultParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) DescribeEngineDefaultParametersPages(i0 *elasticache.DescribeEngineDefaultParametersInput, i1 func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEngineDefaultParametersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeEngineDefaultParametersPages(in *elasticache.DescribeEngineDefaultParametersInput, pager func(*elasticache.DescribeEngineDefaultParametersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeEngineDefaultParameters", paginators, in, pager)
}

func (d *ElastiCacheDouble) DescribeEngineDefaultParametersPagesWithContext(i0 context.Context, i1 *elasticache.DescribeEngineDefaultParametersInput, i2 func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEngineDefaultParametersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeEngineDefaultParametersPagesWithContext(ctx context.Context, in *elasticache.DescribeEngineDefaultParametersInput, pager func(*elasticache.DescribeEngineDefaultParametersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeEngineDefaultParameters", paginators, ctx, in, pager, options...)
}

func (d *ElastiCacheDouble) DescribeEngineDefaultParametersRequest(i0 *elasticache.DescribeEngineDefaultParametersInput) (r0 *request.Request, r1 *elasticache.DescribeEngineDefaultParametersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEngineDefaultParametersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.DescribeEngineDefaultParametersOutput)
	return
}

func (d *ElastiCacheDouble) DescribeEngineDefaultParametersWithContext(i0 context.Context, i1 *elasticache.DescribeEngineDefaultParametersInput, i2 ...request.Option) (r0 *elasticache.DescribeEngineDefaultParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEngineDefaultParametersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.DescribeEngineDefaultParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeEngineDefaultParametersWithContext(ctx context.Context, in *elasticache.DescribeEngineDefaultParametersInput, _ ...request.Option) (*elasticache.DescribeEngineDefaultParametersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEngineDefaultParameters cancelled", ctx.Err())
	default:
		return d.DescribeEngineDefaultParameters(in)
	}
}

func (d *ElastiCacheDouble) DescribeEvents(i0 *elasticache.DescribeEventsInput) (r0 *elasticache.DescribeEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEvents", i0)
	r0, _ = returns[0].(*elasticache.DescribeEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) DescribeEventsPages(i0 *elasticache.DescribeEventsInput, i1 func(*elasticache.DescribeEventsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeEventsPages(in *elasticache.DescribeEventsInput, pager func(*elasticache.DescribeEventsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeEvents", paginators, in, pager)
}

func (d *ElastiCacheDouble) DescribeEventsPagesWithContext(i0 context.Context, i1 *elasticache.DescribeEventsInput, i2 func(*elasticache.DescribeEventsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeEventsPagesWithContext(ctx context.Context, in *elasticache.DescribeEventsInput, pager func(*elasticache.DescribeEventsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeEvents", paginators, ctx, in, pager, options...)
}

func (d *ElastiCacheDouble) DescribeEventsRequest(i0 *elasticache.DescribeEventsInput) (r0 *request.Request, r1 *elasticache.DescribeEventsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.DescribeEventsOutput)
	return
}

func (d *ElastiCacheDouble) DescribeEventsWithContext(i0 context.Context, i1 *elasticache.DescribeEventsInput, i2 ...request.Option) (r0 *elasticache.DescribeEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.DescribeEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeEventsWithContext(ctx context.Context, in *elasticache.DescribeEventsInput, _ ...request.Option) (*elasticache.DescribeEventsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEvents cancelled", ctx.Err())
	default:
		return d.DescribeEvents(in)
	}
}

func (d *ElastiCacheDouble) DescribeReplicationGroups(i0 *elasticache.DescribeReplicationGroupsInput) (r0 *elasticache.DescribeReplicationGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReplicationGroups", i0)
	r0, _ = returns[0].(*elasticache.DescribeReplicationGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) DescribeReplicationGroupsPages(i0 *elasticache.DescribeReplicationGroupsInput, i1 func(*elasticache.DescribeReplicationGroupsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReplicationGroupsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeReplicationGroupsPages(in *elasticache.DescribeReplicationGroupsInput, pager func(*elasticache.DescribeReplicationGroupsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeReplicationGroups", paginators, in, pager)
}

func (d *ElastiCacheDouble) DescribeReplicationGroupsPagesWithContext(i0 context.Context, i1 *elasticache.DescribeReplicationGroupsInput, i2 func(*elasticache.DescribeReplicationGroupsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReplicationGroupsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeReplicationGroupsPagesWithContext(ctx context.Context, in *elasticache.DescribeReplicationGroupsInput, pager func(*elasticache.DescribeReplicationGroupsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeReplicationGroups", paginators, ctx, in, pager, options...)
}

func (d *ElastiCacheDouble) DescribeReplicationGroupsRequest(i0 *elasticache.DescribeReplicationGroupsInput) (r0 *request.Request, r1 *elasticache.DescribeReplicationGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReplicationGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.DescribeReplicationGroupsOutput)
	return
}

func (d *ElastiCacheDouble) DescribeReplicationGroupsWithContext(i0 context.Context, i1 *elasticache.DescribeReplicationGroupsInput, i2 ...request.Option) (r0 *elasticache.DescribeReplicationGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReplicationGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.DescribeReplicationGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeReplicationGroupsWithContext(ctx context.Context, in *elasticache.DescribeReplicationGroupsInput, _ ...request.Option) (*elasticache.DescribeReplicationGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeReplicationGroups cancelled", ctx.Err())
	default:
		return d.DescribeReplicationGroups(in)
	}
}

func (d *ElastiCacheDouble) DescribeReservedCacheNodes(i0 *elasticache.DescribeReservedCacheNodesInput) (r0 *elasticache.DescribeReservedCacheNodesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedCacheNodes", i0)
	r0, _ = returns[0].(*elasticache.DescribeReservedCacheNodesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) DescribeReservedCacheNodesOfferings(i0 *elasticache.DescribeReservedCacheNodesOfferingsInput) (r0 *elasticache.DescribeReservedCacheNodesOfferingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedCacheNodesOfferings", i0)
	r0, _ = returns[0].(*elasticache.DescribeReservedCacheNodesOfferingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) DescribeReservedCacheNodesOfferingsPages(i0 *elasticache.DescribeReservedCacheNodesOfferingsInput, i1 func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedCacheNodesOfferingsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeReservedCacheNodesOfferingsPages(in *elasticache.DescribeReservedCacheNodesOfferingsInput, pager func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeReservedCacheNodesOfferings", paginators, in, pager)
}

func (d *ElastiCacheDouble) DescribeReservedCacheNodesOfferingsPagesWithContext(i0 context.Context, i1 *elasticache.DescribeReservedCacheNodesOfferingsInput, i2 func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedCacheNodesOfferingsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeReservedCacheNodesOfferingsPagesWithContext(ctx context.Context, in *elasticache.DescribeReservedCacheNodesOfferingsInput, pager func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeReservedCacheNodesOfferings", paginators, ctx, in, pager, options...)
}

func (d *ElastiCacheDouble) DescribeReservedCacheNodesOfferingsRequest(i0 *elasticache.DescribeReservedCacheNodesOfferingsInput) (r0 *request.Request, r1 *elasticache.DescribeReservedCacheNodesOfferingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedCacheNodesOfferingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.DescribeReservedCacheNodesOfferingsOutput)
	return
}

func (d *ElastiCacheDouble) DescribeReservedCacheNodesOfferingsWithContext(i0 context.Context, i1 *elasticache.DescribeReservedCacheNodesOfferingsInput, i2 ...request.Option) (r0 *elasticache.DescribeReservedCacheNodesOfferingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedCacheNodesOfferingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.DescribeReservedCacheNodesOfferingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeReservedCacheNodesOfferingsWithContext(ctx context.Context, in *elasticache.DescribeReservedCacheNodesOfferingsInput, _ ...request.Option) (*elasticache.DescribeReservedCacheNodesOfferingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeReservedCacheNodesOfferings cancelled", ctx.Err())
	default:
		return d.DescribeReservedCacheNodesOfferings(in)
	}
}

func (d *ElastiCacheDouble) DescribeReservedCacheNodesPages(i0 *elasticache.DescribeReservedCacheNodesInput, i1 func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedCacheNodesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeReservedCacheNodesPages(in *elasticache.DescribeReservedCacheNodesInput, pager func(*elasticache.DescribeReservedCacheNodesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeReservedCacheNodes", paginators, in, pager)
}

func (d *ElastiCacheDouble) DescribeReservedCacheNodesPagesWithContext(i0 context.Context, i1 *elasticache.DescribeReservedCacheNodesInput, i2 func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedCacheNodesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeReservedCacheNodesPagesWithContext(ctx context.Context, in *elasticache.DescribeReservedCacheNodesInput, pager func(*elasticache.DescribeReservedCacheNodesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeReservedCacheNodes", paginators, ctx, in, pager, options...)
}

func (d *ElastiCacheDouble) DescribeReservedCacheNodesRequest(i0 *elasticache.DescribeReservedCacheNodesInput) (r0 *request.Request, r1 *elasticache.DescribeReservedCacheNodesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedCacheNodesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.DescribeReservedCacheNodesOutput)
	return
}

func (d *ElastiCacheDouble) DescribeReservedCacheNodesWithContext(i0 context.Context, i1 *elasticache.DescribeReservedCacheNodesInput, i2 ...request.Option) (r0 *elasticache.DescribeReservedCacheNodesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedCacheNodesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.DescribeReservedCacheNodesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeReservedCacheNodesWithContext(ctx context.Context, in *elasticache.DescribeReservedCacheNodesInput, _ ...request.Option) (*elasticache.DescribeReservedCacheNodesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeReservedCacheNodes cancelled", ctx.Err())
	default:
		return d.DescribeReservedCacheNodes(in)
	}
}

func (d *ElastiCacheDouble) DescribeServiceUpdates(i0 *elasticache.DescribeServiceUpdatesInput) (r0 *elasticache.DescribeServiceUpdatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeServiceUpdates", i0)
	r0, _ = returns[0].(*elasticache.DescribeServiceUpdatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) DescribeServiceUpdatesPages(i0 *elasticache.DescribeServiceUpdatesInput, i1 func(*elasticache.DescribeServiceUpdatesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeServiceUpdatesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeServiceUpdatesPages(in *elasticache.DescribeServiceUpdatesInput, pager func(*elasticache.DescribeServiceUpdatesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeServiceUpdates", paginators, in, pager)
}

func (d *ElastiCacheDouble) DescribeServiceUpdatesPagesWithContext(i0 context.Context, i1 *elasticache.DescribeServiceUpdatesInput, i2 func(*elasticache.DescribeServiceUpdatesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeServiceUpdatesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeServiceUpdatesPagesWithContext(ctx context.Context, in *elasticache.DescribeServiceUpdatesInput, pager func(*elasticache.DescribeServiceUpdatesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeServiceUpdates", paginators, ctx, in, pager, options...)
}

func (d *ElastiCacheDouble) DescribeServiceUpdatesRequest(i0 *elasticache.DescribeServiceUpdatesInput) (r0 *request.Request, r1 *elasticache.DescribeServiceUpdatesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeServiceUpdatesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.DescribeServiceUpdatesOutput)
	return
}

func (d *ElastiCacheDouble) DescribeServiceUpdatesWithContext(i0 context.Context, i1 *elasticache.DescribeServiceUpdatesInput, i2 ...request.Option) (r0 *elasticache.DescribeServiceUpdatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeServiceUpdatesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.DescribeServiceUpdatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeServiceUpdatesWithContext(ctx context.Context, in *elasticache.DescribeServiceUpdatesInput, _ ...request.Option) (*elasticache.DescribeServiceUpdatesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeServiceUpdates cancelled", ctx.Err())
	default:
		return d.DescribeServiceUpdates(in)
	}
}

func (d *ElastiCacheDouble) DescribeSnapshots(i0 *elasticache.DescribeSnapshotsInput) (r0 *elasticache.DescribeSnapshotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSnapshots", i0)
	r0, _ = returns[0].(*elasticache.DescribeSnapshotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) DescribeSnapshotsPages(i0 *elasticache.DescribeSnapshotsInput, i1 func(*elasticache.DescribeSnapshotsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSnapshotsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeSnapshotsPages(in *elasticache.DescribeSnapshotsInput, pager func(*elasticache.DescribeSnapshotsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeSnapshots", paginators, in, pager)
}

func (d *ElastiCacheDouble) DescribeSnapshotsPagesWithContext(i0 context.Context, i1 *elasticache.DescribeSnapshotsInput, i2 func(*elasticache.DescribeSnapshotsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSnapshotsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeSnapshotsPagesWithContext(ctx context.Context, in *elasticache.DescribeSnapshotsInput, pager func(*elasticache.DescribeSnapshotsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeSnapshots", paginators, ctx, in, pager, options...)
}

func (d *ElastiCacheDouble) DescribeSnapshotsRequest(i0 *elasticache.DescribeSnapshotsInput) (r0 *request.Request, r1 *elasticache.DescribeSnapshotsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSnapshotsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.DescribeSnapshotsOutput)
	return
}

func (d *ElastiCacheDouble) DescribeSnapshotsWithContext(i0 context.Context, i1 *elasticache.DescribeSnapshotsInput, i2 ...request.Option) (r0 *elasticache.DescribeSnapshotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSnapshotsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.DescribeSnapshotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeSnapshotsWithContext(ctx context.Context, in *elasticache.DescribeSnapshotsInput, _ ...request.Option) (*elasticache.DescribeSnapshotsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSnapshots cancelled", ctx.Err())
	default:
		return d.DescribeSnapshots(in)
	}
}

func (d *ElastiCacheDouble) DescribeUpdateActions(i0 *elasticache.DescribeUpdateActionsInput) (r0 *elasticache.DescribeUpdateActionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUpdateActions", i0)
	r0, _ = returns[0].(*elasticache.DescribeUpdateActionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) DescribeUpdateActionsPages(i0 *elasticache.DescribeUpdateActionsInput, i1 func(*elasticache.DescribeUpdateActionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUpdateActionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeUpdateActionsPages(in *elasticache.DescribeUpdateActionsInput, pager func(*elasticache.DescribeUpdateActionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeUpdateActions", paginators, in, pager)
}

func (d *ElastiCacheDouble) DescribeUpdateActionsPagesWithContext(i0 context.Context, i1 *elasticache.DescribeUpdateActionsInput, i2 func(*elasticache.DescribeUpdateActionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUpdateActionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeUpdateActionsPagesWithContext(ctx context.Context, in *elasticache.DescribeUpdateActionsInput, pager func(*elasticache.DescribeUpdateActionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeUpdateActions", paginators, ctx, in, pager, options...)
}

func (d *ElastiCacheDouble) DescribeUpdateActionsRequest(i0 *elasticache.DescribeUpdateActionsInput) (r0 *request.Request, r1 *elasticache.DescribeUpdateActionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUpdateActionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.DescribeUpdateActionsOutput)
	return
}

func (d *ElastiCacheDouble) DescribeUpdateActionsWithContext(i0 context.Context, i1 *elasticache.DescribeUpdateActionsInput, i2 ...request.Option) (r0 *elasticache.DescribeUpdateActionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUpdateActionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.DescribeUpdateActionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeDescribeUpdateActionsWithContext(ctx context.Context, in *elasticache.DescribeUpdateActionsInput, _ ...request.Option) (*elasticache.DescribeUpdateActionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeUpdateActions cancelled", ctx.Err())
	default:
		return d.DescribeUpdateActions(in)
	}
}

func (d *ElastiCacheDouble) IncreaseReplicaCount(i0 *elasticache.IncreaseReplicaCountInput) (r0 *elasticache.IncreaseReplicaCountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("IncreaseReplicaCount", i0)
	r0, _ = returns[0].(*elasticache.IncreaseReplicaCountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) IncreaseReplicaCountRequest(i0 *elasticache.IncreaseReplicaCountInput) (r0 *request.Request, r1 *elasticache.IncreaseReplicaCountOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("IncreaseReplicaCountRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.IncreaseReplicaCountOutput)
	return
}

func (d *ElastiCacheDouble) IncreaseReplicaCountWithContext(i0 context.Context, i1 *elasticache.IncreaseReplicaCountInput, i2 ...request.Option) (r0 *elasticache.IncreaseReplicaCountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("IncreaseReplicaCountWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.IncreaseReplicaCountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeIncreaseReplicaCountWithContext(ctx context.Context, in *elasticache.IncreaseReplicaCountInput, _ ...request.Option) (*elasticache.IncreaseReplicaCountOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "IncreaseReplicaCount cancelled", ctx.Err())
	default:
		return d.IncreaseReplicaCount(in)
	}
}

func (d *ElastiCacheDouble) ListAllowedNodeTypeModifications(i0 *elasticache.ListAllowedNodeTypeModificationsInput) (r0 *elasticache.ListAllowedNodeTypeModificationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAllowedNodeTypeModifications", i0)
	r0, _ = returns[0].(*elasticache.ListAllowedNodeTypeModificationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) ListAllowedNodeTypeModificationsRequest(i0 *elasticache.ListAllowedNodeTypeModificationsInput) (r0 *request.Request, r1 *elasticache.ListAllowedNodeTypeModificationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAllowedNodeTypeModificationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.ListAllowedNodeTypeModificationsOutput)
	return
}

func (d *ElastiCacheDouble) ListAllowedNodeTypeModificationsWithContext(i0 context.Context, i1 *elasticache.ListAllowedNodeTypeModificationsInput, i2 ...request.Option) (r0 *elasticache.ListAllowedNodeTypeModificationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAllowedNodeTypeModificationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.ListAllowedNodeTypeModificationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeListAllowedNodeTypeModificationsWithContext(ctx context.Context, in *elasticache.ListAllowedNodeTypeModificationsInput, _ ...request.Option) (*elasticache.ListAllowedNodeTypeModificationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAllowedNodeTypeModifications cancelled", ctx.Err())
	default:
		return d.ListAllowedNodeTypeModifications(in)
	}
}

func (d *ElastiCacheDouble) ListTagsForResource(i0 *elasticache.ListTagsForResourceInput) (r0 *elasticache.TagListMessage, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*elasticache.TagListMessage)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) ListTagsForResourceRequest(i0 *elasticache.ListTagsForResourceInput) (r0 *request.Request, r1 *elasticache.TagListMessage) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.TagListMessage)
	return
}

func (d *ElastiCacheDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *elasticache.ListTagsForResourceInput, i2 ...request.Option) (r0 *elasticache.TagListMessage, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.TagListMessage)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *elasticache.ListTagsForResourceInput, _ ...request.Option) (*elasticache.TagListMessage, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *ElastiCacheDouble) ModifyCacheCluster(i0 *elasticache.ModifyCacheClusterInput) (r0 *elasticache.ModifyCacheClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyCacheCluster", i0)
	r0, _ = returns[0].(*elasticache.ModifyCacheClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) ModifyCacheClusterRequest(i0 *elasticache.ModifyCacheClusterInput) (r0 *request.Request, r1 *elasticache.ModifyCacheClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyCacheClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.ModifyCacheClusterOutput)
	return
}

func (d *ElastiCacheDouble) ModifyCacheClusterWithContext(i0 context.Context, i1 *elasticache.ModifyCacheClusterInput, i2 ...request.Option) (r0 *elasticache.ModifyCacheClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyCacheClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.ModifyCacheClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeModifyCacheClusterWithContext(ctx context.Context, in *elasticache.ModifyCacheClusterInput, _ ...request.Option) (*elasticache.ModifyCacheClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyCacheCluster cancelled", ctx.Err())
	default:
		return d.ModifyCacheCluster(in)
	}
}

func (d *ElastiCacheDouble) ModifyCacheParameterGroup(i0 *elasticache.ModifyCacheParameterGroupInput) (r0 *elasticache.CacheParameterGroupNameMessage, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyCacheParameterGroup", i0)
	r0, _ = returns[0].(*elasticache.CacheParameterGroupNameMessage)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) ModifyCacheParameterGroupRequest(i0 *elasticache.ModifyCacheParameterGroupInput) (r0 *request.Request, r1 *elasticache.CacheParameterGroupNameMessage) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyCacheParameterGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.CacheParameterGroupNameMessage)
	return
}

func (d *ElastiCacheDouble) ModifyCacheParameterGroupWithContext(i0 context.Context, i1 *elasticache.ModifyCacheParameterGroupInput, i2 ...request.Option) (r0 *elasticache.CacheParameterGroupNameMessage, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyCacheParameterGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.CacheParameterGroupNameMessage)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeModifyCacheParameterGroupWithContext(ctx context.Context, in *elasticache.ModifyCacheParameterGroupInput, _ ...request.Option) (*elasticache.CacheParameterGroupNameMessage, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyCacheParameterGroup cancelled", ctx.Err())
	default:
		return d.ModifyCacheParameterGroup(in)
	}
}

func (d *ElastiCacheDouble) ModifyCacheSubnetGroup(i0 *elasticache.ModifyCacheSubnetGroupInput) (r0 *elasticache.ModifyCacheSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyCacheSubnetGroup", i0)
	r0, _ = returns[0].(*elasticache.ModifyCacheSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) ModifyCacheSubnetGroupRequest(i0 *elasticache.ModifyCacheSubnetGroupInput) (r0 *request.Request, r1 *elasticache.ModifyCacheSubnetGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyCacheSubnetGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.ModifyCacheSubnetGroupOutput)
	return
}

func (d *ElastiCacheDouble) ModifyCacheSubnetGroupWithContext(i0 context.Context, i1 *elasticache.ModifyCacheSubnetGroupInput, i2 ...request.Option) (r0 *elasticache.ModifyCacheSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyCacheSubnetGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.ModifyCacheSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeModifyCacheSubnetGroupWithContext(ctx context.Context, in *elasticache.ModifyCacheSubnetGroupInput, _ ...request.Option) (*elasticache.ModifyCacheSubnetGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyCacheSubnetGroup cancelled", ctx.Err())
	default:
		return d.ModifyCacheSubnetGroup(in)
	}
}

func (d *ElastiCacheDouble) ModifyReplicationGroup(i0 *elasticache.ModifyReplicationGroupInput) (r0 *elasticache.ModifyReplicationGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyReplicationGroup", i0)
	r0, _ = returns[0].(*elasticache.ModifyReplicationGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) ModifyReplicationGroupRequest(i0 *elasticache.ModifyReplicationGroupInput) (r0 *request.Request, r1 *elasticache.ModifyReplicationGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyReplicationGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.ModifyReplicationGroupOutput)
	return
}

func (d *ElastiCacheDouble) ModifyReplicationGroupShardConfiguration(i0 *elasticache.ModifyReplicationGroupShardConfigurationInput) (r0 *elasticache.ModifyReplicationGroupShardConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyReplicationGroupShardConfiguration", i0)
	r0, _ = returns[0].(*elasticache.ModifyReplicationGroupShardConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) ModifyReplicationGroupShardConfigurationRequest(i0 *elasticache.ModifyReplicationGroupShardConfigurationInput) (r0 *request.Request, r1 *elasticache.ModifyReplicationGroupShardConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyReplicationGroupShardConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.ModifyReplicationGroupShardConfigurationOutput)
	return
}

func (d *ElastiCacheDouble) ModifyReplicationGroupShardConfigurationWithContext(i0 context.Context, i1 *elasticache.ModifyReplicationGroupShardConfigurationInput, i2 ...request.Option) (r0 *elasticache.ModifyReplicationGroupShardConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyReplicationGroupShardConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.ModifyReplicationGroupShardConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeModifyReplicationGroupShardConfigurationWithContext(ctx context.Context, in *elasticache.ModifyReplicationGroupShardConfigurationInput, _ ...request.Option) (*elasticache.ModifyReplicationGroupShardConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyReplicationGroupShardConfiguration cancelled", ctx.Err())
	default:
		return d.ModifyReplicationGroupShardConfiguration(in)
	}
}

func (d *ElastiCacheDouble) ModifyReplicationGroupWithContext(i0 context.Context, i1 *elasticache.ModifyReplicationGroupInput, i2 ...request.Option) (r0 *elasticache.ModifyReplicationGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyReplicationGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.ModifyReplicationGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeModifyReplicationGroupWithContext(ctx context.Context, in *elasticache.ModifyReplicationGroupInput, _ ...request.Option) (*elasticache.ModifyReplicationGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyReplicationGroup cancelled", ctx.Err())
	default:
		return d.ModifyReplicationGroup(in)
	}
}

func (d *ElastiCacheDouble) PurchaseReservedCacheNodesOffering(i0 *elasticache.PurchaseReservedCacheNodesOfferingInput) (r0 *elasticache.PurchaseReservedCacheNodesOfferingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PurchaseReservedCacheNodesOffering", i0)
	r0, _ = returns[0].(*elasticache.PurchaseReservedCacheNodesOfferingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) PurchaseReservedCacheNodesOfferingRequest(i0 *elasticache.PurchaseReservedCacheNodesOfferingInput) (r0 *request.Request, r1 *elasticache.PurchaseReservedCacheNodesOfferingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PurchaseReservedCacheNodesOfferingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.PurchaseReservedCacheNodesOfferingOutput)
	return
}

func (d *ElastiCacheDouble) PurchaseReservedCacheNodesOfferingWithContext(i0 context.Context, i1 *elasticache.PurchaseReservedCacheNodesOfferingInput, i2 ...request.Option) (r0 *elasticache.PurchaseReservedCacheNodesOfferingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PurchaseReservedCacheNodesOfferingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.PurchaseReservedCacheNodesOfferingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakePurchaseReservedCacheNodesOfferingWithContext(ctx context.Context, in *elasticache.PurchaseReservedCacheNodesOfferingInput, _ ...request.Option) (*elasticache.PurchaseReservedCacheNodesOfferingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PurchaseReservedCacheNodesOffering cancelled", ctx.Err())
	default:
		return d.PurchaseReservedCacheNodesOffering(in)
	}
}

func (d *ElastiCacheDouble) RebootCacheCluster(i0 *elasticache.RebootCacheClusterInput) (r0 *elasticache.RebootCacheClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebootCacheCluster", i0)
	r0, _ = returns[0].(*elasticache.RebootCacheClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) RebootCacheClusterRequest(i0 *elasticache.RebootCacheClusterInput) (r0 *request.Request, r1 *elasticache.RebootCacheClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebootCacheClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.RebootCacheClusterOutput)
	return
}

func (d *ElastiCacheDouble) RebootCacheClusterWithContext(i0 context.Context, i1 *elasticache.RebootCacheClusterInput, i2 ...request.Option) (r0 *elasticache.RebootCacheClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebootCacheClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.RebootCacheClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeRebootCacheClusterWithContext(ctx context.Context, in *elasticache.RebootCacheClusterInput, _ ...request.Option) (*elasticache.RebootCacheClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RebootCacheCluster cancelled", ctx.Err())
	default:
		return d.RebootCacheCluster(in)
	}
}

func (d *ElastiCacheDouble) RemoveTagsFromResource(i0 *elasticache.RemoveTagsFromResourceInput) (r0 *elasticache.TagListMessage, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromResource", i0)
	r0, _ = returns[0].(*elasticache.TagListMessage)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) RemoveTagsFromResourceRequest(i0 *elasticache.RemoveTagsFromResourceInput) (r0 *request.Request, r1 *elasticache.TagListMessage) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.TagListMessage)
	return
}

func (d *ElastiCacheDouble) RemoveTagsFromResourceWithContext(i0 context.Context, i1 *elasticache.RemoveTagsFromResourceInput, i2 ...request.Option) (r0 *elasticache.TagListMessage, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.TagListMessage)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeRemoveTagsFromResourceWithContext(ctx context.Context, in *elasticache.RemoveTagsFromResourceInput, _ ...request.Option) (*elasticache.TagListMessage, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveTagsFromResource cancelled", ctx.Err())
	default:
		return d.RemoveTagsFromResource(in)
	}
}

func (d *ElastiCacheDouble) ResetCacheParameterGroup(i0 *elasticache.ResetCacheParameterGroupInput) (r0 *elasticache.CacheParameterGroupNameMessage, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetCacheParameterGroup", i0)
	r0, _ = returns[0].(*elasticache.CacheParameterGroupNameMessage)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) ResetCacheParameterGroupRequest(i0 *elasticache.ResetCacheParameterGroupInput) (r0 *request.Request, r1 *elasticache.CacheParameterGroupNameMessage) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetCacheParameterGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.CacheParameterGroupNameMessage)
	return
}

func (d *ElastiCacheDouble) ResetCacheParameterGroupWithContext(i0 context.Context, i1 *elasticache.ResetCacheParameterGroupInput, i2 ...request.Option) (r0 *elasticache.CacheParameterGroupNameMessage, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetCacheParameterGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.CacheParameterGroupNameMessage)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeResetCacheParameterGroupWithContext(ctx context.Context, in *elasticache.ResetCacheParameterGroupInput, _ ...request.Option) (*elasticache.CacheParameterGroupNameMessage, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ResetCacheParameterGroup cancelled", ctx.Err())
	default:
		return d.ResetCacheParameterGroup(in)
	}
}

func (d *ElastiCacheDouble) RevokeCacheSecurityGroupIngress(i0 *elasticache.RevokeCacheSecurityGroupIngressInput) (r0 *elasticache.RevokeCacheSecurityGroupIngressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeCacheSecurityGroupIngress", i0)
	r0, _ = returns[0].(*elasticache.RevokeCacheSecurityGroupIngressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) RevokeCacheSecurityGroupIngressRequest(i0 *elasticache.RevokeCacheSecurityGroupIngressInput) (r0 *request.Request, r1 *elasticache.RevokeCacheSecurityGroupIngressOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeCacheSecurityGroupIngressRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.RevokeCacheSecurityGroupIngressOutput)
	return
}

func (d *ElastiCacheDouble) RevokeCacheSecurityGroupIngressWithContext(i0 context.Context, i1 *elasticache.RevokeCacheSecurityGroupIngressInput, i2 ...request.Option) (r0 *elasticache.RevokeCacheSecurityGroupIngressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeCacheSecurityGroupIngressWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.RevokeCacheSecurityGroupIngressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeRevokeCacheSecurityGroupIngressWithContext(ctx context.Context, in *elasticache.RevokeCacheSecurityGroupIngressInput, _ ...request.Option) (*elasticache.RevokeCacheSecurityGroupIngressOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RevokeCacheSecurityGroupIngress cancelled", ctx.Err())
	default:
		return d.RevokeCacheSecurityGroupIngress(in)
	}
}

func (d *ElastiCacheDouble) StartMigration(i0 *elasticache.StartMigrationInput) (r0 *elasticache.StartMigrationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartMigration", i0)
	r0, _ = returns[0].(*elasticache.StartMigrationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) StartMigrationRequest(i0 *elasticache.StartMigrationInput) (r0 *request.Request, r1 *elasticache.StartMigrationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartMigrationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.StartMigrationOutput)
	return
}

func (d *ElastiCacheDouble) StartMigrationWithContext(i0 context.Context, i1 *elasticache.StartMigrationInput, i2 ...request.Option) (r0 *elasticache.StartMigrationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartMigrationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.StartMigrationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeStartMigrationWithContext(ctx context.Context, in *elasticache.StartMigrationInput, _ ...request.Option) (*elasticache.StartMigrationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartMigration cancelled", ctx.Err())
	default:
		return d.StartMigration(in)
	}
}

func (d *ElastiCacheDouble) TestFailover(i0 *elasticache.TestFailoverInput) (r0 *elasticache.TestFailoverOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestFailover", i0)
	r0, _ = returns[0].(*elasticache.TestFailoverOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) TestFailoverRequest(i0 *elasticache.TestFailoverInput) (r0 *request.Request, r1 *elasticache.TestFailoverOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestFailoverRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticache.TestFailoverOutput)
	return
}

func (d *ElastiCacheDouble) TestFailoverWithContext(i0 context.Context, i1 *elasticache.TestFailoverInput, i2 ...request.Option) (r0 *elasticache.TestFailoverOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestFailoverWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticache.TestFailoverOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElastiCacheDouble) fakeTestFailoverWithContext(ctx context.Context, in *elasticache.TestFailoverInput, _ ...request.Option) (*elasticache.TestFailoverOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TestFailover cancelled", ctx.Err())
	default:
		return d.TestFailover(in)
	}
}

func (d *ElastiCacheDouble) WaitUntilCacheClusterAvailable(i0 *elasticache.DescribeCacheClustersInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilCacheClusterAvailable", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *ElastiCacheDouble) fakeWaitUntilCacheClusterAvailable(in *elasticache.DescribeCacheClustersInput) error {
	return d.WaitUntil("CacheClusterAvailable", waiters, in)
}

func (d *ElastiCacheDouble) WaitUntilCacheClusterAvailableWithContext(i0 context.Context, i1 *elasticache.DescribeCacheClustersInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilCacheClusterAvailableWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *ElastiCacheDouble) fakeWaitUntilCacheClusterAvailableWithContext(ctx context.Context, in *elasticache.DescribeCacheClustersInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("CacheClusterAvailable", waiters, ctx, in, waitOption...)
}

func (d *ElastiCacheDouble) WaitUntilCacheClusterDeleted(i0 *elasticache.DescribeCacheClustersInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilCacheClusterDeleted", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *ElastiCacheDouble) fakeWaitUntilCacheClusterDeleted(in *elasticache.DescribeCacheClustersInput) error {
	return d.WaitUntil("CacheClusterDeleted", waiters, in)
}

func (d *ElastiCacheDouble) WaitUntilCacheClusterDeletedWithContext(i0 context.Context, i1 *elasticache.DescribeCacheClustersInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilCacheClusterDeletedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *ElastiCacheDouble) fakeWaitUntilCacheClusterDeletedWithContext(ctx context.Context, in *elasticache.DescribeCacheClustersInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("CacheClusterDeleted", waiters, ctx, in, waitOption...)
}

func (d *ElastiCacheDouble) WaitUntilReplicationGroupAvailable(i0 *elasticache.DescribeReplicationGroupsInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilReplicationGroupAvailable", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *ElastiCacheDouble) fakeWaitUntilReplicationGroupAvailable(in *elasticache.DescribeReplicationGroupsInput) error {
	return d.WaitUntil("ReplicationGroupAvailable", waiters, in)
}

func (d *ElastiCacheDouble) WaitUntilReplicationGroupAvailableWithContext(i0 context.Context, i1 *elasticache.DescribeReplicationGroupsInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilReplicationGroupAvailableWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *ElastiCacheDouble) fakeWaitUntilReplicationGroupAvailableWithContext(ctx context.Context, in *elasticache.DescribeReplicationGroupsInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("ReplicationGroupAvailable", waiters, ctx, in, waitOption...)
}

func (d *ElastiCacheDouble) WaitUntilReplicationGroupDeleted(i0 *elasticache.DescribeReplicationGroupsInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilReplicationGroupDeleted", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *ElastiCacheDouble) fakeWaitUntilReplicationGroupDeleted(in *elasticache.DescribeReplicationGroupsInput) error {
	return d.WaitUntil("ReplicationGroupDeleted", waiters, in)
}

func (d *ElastiCacheDouble) WaitUntilReplicationGroupDeletedWithContext(i0 context.Context, i1 *elasticache.DescribeReplicationGroupsInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilReplicationGroupDeletedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *ElastiCacheDouble) fakeWaitUntilReplicationGroupDeletedWithContext(ctx context.Context, in *elasticache.DescribeReplicationGroupsInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("ReplicationGroupDeleted", waiters, ctx, in, waitOption...)
}
