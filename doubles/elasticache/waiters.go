// Code generated by go awsdoublegen; DO NOT EDIT.
// This file was generated at 2020-01-29T21:22:05+11:00
package elasticachedouble

import (
	"time"

	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/lwoggardner/awsdouble"
)

var waiters = map[string]*awsdouble.Waiter{

	"CacheClusterAvailable": &awsdouble.Waiter{
		OperationName: "DescribeCacheClusters",
		Waiter: request.Waiter{
			Name:        "WaitUntilCacheClusterAvailable",
			MaxAttempts: 40,
			Delay:       request.ConstantWaiterDelay(15 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathAllWaiterMatch, Argument: "CacheClusters[].CacheClusterStatus",
					Expected: "available",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "CacheClusters[].CacheClusterStatus",
					Expected: "deleted",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "CacheClusters[].CacheClusterStatus",
					Expected: "deleting",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "CacheClusters[].CacheClusterStatus",
					Expected: "incompatible-network",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "CacheClusters[].CacheClusterStatus",
					Expected: "restore-failed",
				},
			},
		},
	},

	"CacheClusterDeleted": &awsdouble.Waiter{
		OperationName: "DescribeCacheClusters",
		Waiter: request.Waiter{
			Name:        "WaitUntilCacheClusterDeleted",
			MaxAttempts: 40,
			Delay:       request.ConstantWaiterDelay(15 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathAllWaiterMatch, Argument: "CacheClusters[].CacheClusterStatus",
					Expected: "deleted",
				},
				{
					State:    request.SuccessWaiterState,
					Matcher:  request.ErrorWaiterMatch,
					Expected: "CacheClusterNotFound",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "CacheClusters[].CacheClusterStatus",
					Expected: "available",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "CacheClusters[].CacheClusterStatus",
					Expected: "creating",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "CacheClusters[].CacheClusterStatus",
					Expected: "incompatible-network",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "CacheClusters[].CacheClusterStatus",
					Expected: "modifying",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "CacheClusters[].CacheClusterStatus",
					Expected: "restore-failed",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "CacheClusters[].CacheClusterStatus",
					Expected: "snapshotting",
				},
			},
		},
	},

	"ReplicationGroupAvailable": &awsdouble.Waiter{
		OperationName: "DescribeReplicationGroups",
		Waiter: request.Waiter{
			Name:        "WaitUntilReplicationGroupAvailable",
			MaxAttempts: 40,
			Delay:       request.ConstantWaiterDelay(15 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathAllWaiterMatch, Argument: "ReplicationGroups[].Status",
					Expected: "available",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "ReplicationGroups[].Status",
					Expected: "deleted",
				},
			},
		},
	},

	"ReplicationGroupDeleted": &awsdouble.Waiter{
		OperationName: "DescribeReplicationGroups",
		Waiter: request.Waiter{
			Name:        "WaitUntilReplicationGroupDeleted",
			MaxAttempts: 40,
			Delay:       request.ConstantWaiterDelay(15 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathAllWaiterMatch, Argument: "ReplicationGroups[].Status",
					Expected: "deleted",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "ReplicationGroups[].Status",
					Expected: "available",
				},
				{
					State:    request.SuccessWaiterState,
					Matcher:  request.ErrorWaiterMatch,
					Expected: "ReplicationGroupNotFoundFault",
				},
			},
		},
	},
}
