// Code generated by go awsdoublegen; DO NOT EDIT.
// This file was generated at 2020-01-29T21:22:05+11:00
package lambdadouble

import (
	"time"

	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/lwoggardner/awsdouble"
)

var waiters = map[string]*awsdouble.Waiter{

	"FunctionActive": &awsdouble.Waiter{
		OperationName: "GetFunctionConfiguration",
		Waiter: request.Waiter{
			Name:        "WaitUntilFunctionActive",
			MaxAttempts: 60,
			Delay:       request.ConstantWaiterDelay(5 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "State",
					Expected: "Active",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "State",
					Expected: "Failed",
				},
				{
					State:   request.RetryWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "State",
					Expected: "Pending",
				},
			},
		},
	},

	"FunctionExists": &awsdouble.Waiter{
		OperationName: "GetFunction",
		Waiter: request.Waiter{
			Name:        "WaitUntilFunctionExists",
			MaxAttempts: 20,
			Delay:       request.ConstantWaiterDelay(1 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:    request.SuccessWaiterState,
					Matcher:  request.StatusWaiterMatch,
					Expected: 200,
				},
				{
					State:    request.RetryWaiterState,
					Matcher:  request.ErrorWaiterMatch,
					Expected: "ResourceNotFoundException",
				},
			},
		},
	},

	"FunctionUpdated": &awsdouble.Waiter{
		OperationName: "GetFunctionConfiguration",
		Waiter: request.Waiter{
			Name:        "WaitUntilFunctionUpdated",
			MaxAttempts: 60,
			Delay:       request.ConstantWaiterDelay(5 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "LastUpdateStatus",
					Expected: "Successful",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "LastUpdateStatus",
					Expected: "Failed",
				},
				{
					State:   request.RetryWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "LastUpdateStatus",
					Expected: "InProgress",
				},
			},
		},
	},
}
