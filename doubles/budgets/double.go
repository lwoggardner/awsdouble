// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:11:27+11:00

// Package budgetsdouble provides a TestDouble implementation of budgetsiface.BudgetsAPI
package budgetsdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/budgets"
	"github.com/aws/aws-sdk-go/service/budgets/budgetsiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// BudgetsDouble is TestDouble for budgetsiface.BudgetsAPI
type BudgetsDouble struct {
	budgetsiface.BudgetsAPI
	*awsdouble.AWSTestDouble
}

// Constructor for BudgetsDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *BudgetsDouble {
	result := &BudgetsDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*budgetsiface.BudgetsAPI)(nil), configurators...)
	return result
}

func (d *BudgetsDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *BudgetsDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CreateBudgetWithContext":
		return m.Fake(d.fakeCreateBudgetWithContext)

	case "CreateNotificationWithContext":
		return m.Fake(d.fakeCreateNotificationWithContext)

	case "CreateSubscriberWithContext":
		return m.Fake(d.fakeCreateSubscriberWithContext)

	case "DeleteBudgetWithContext":
		return m.Fake(d.fakeDeleteBudgetWithContext)

	case "DeleteNotificationWithContext":
		return m.Fake(d.fakeDeleteNotificationWithContext)

	case "DeleteSubscriberWithContext":
		return m.Fake(d.fakeDeleteSubscriberWithContext)

	case "DescribeBudgetPerformanceHistoryWithContext":
		return m.Fake(d.fakeDescribeBudgetPerformanceHistoryWithContext)

	case "DescribeBudgetWithContext":
		return m.Fake(d.fakeDescribeBudgetWithContext)

	case "DescribeBudgetsWithContext":
		return m.Fake(d.fakeDescribeBudgetsWithContext)

	case "DescribeNotificationsForBudgetWithContext":
		return m.Fake(d.fakeDescribeNotificationsForBudgetWithContext)

	case "DescribeSubscribersForNotificationWithContext":
		return m.Fake(d.fakeDescribeSubscribersForNotificationWithContext)

	case "UpdateBudgetWithContext":
		return m.Fake(d.fakeUpdateBudgetWithContext)

	case "UpdateNotificationWithContext":
		return m.Fake(d.fakeUpdateNotificationWithContext)

	case "UpdateSubscriberWithContext":
		return m.Fake(d.fakeUpdateSubscriberWithContext)

	default:
		return nil
	}
}

func (d *BudgetsDouble) CreateBudget(i0 *budgets.CreateBudgetInput) (r0 *budgets.CreateBudgetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBudget", i0)
	r0, _ = returns[0].(*budgets.CreateBudgetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BudgetsDouble) CreateBudgetRequest(i0 *budgets.CreateBudgetInput) (r0 *request.Request, r1 *budgets.CreateBudgetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBudgetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*budgets.CreateBudgetOutput)
	return
}

func (d *BudgetsDouble) CreateBudgetWithContext(i0 context.Context, i1 *budgets.CreateBudgetInput, i2 ...request.Option) (r0 *budgets.CreateBudgetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBudgetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*budgets.CreateBudgetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BudgetsDouble) fakeCreateBudgetWithContext(ctx context.Context, in *budgets.CreateBudgetInput, _ ...request.Option) (*budgets.CreateBudgetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateBudget cancelled", ctx.Err())
	default:
		return d.CreateBudget(in)
	}
}

func (d *BudgetsDouble) CreateNotification(i0 *budgets.CreateNotificationInput) (r0 *budgets.CreateNotificationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNotification", i0)
	r0, _ = returns[0].(*budgets.CreateNotificationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BudgetsDouble) CreateNotificationRequest(i0 *budgets.CreateNotificationInput) (r0 *request.Request, r1 *budgets.CreateNotificationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNotificationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*budgets.CreateNotificationOutput)
	return
}

func (d *BudgetsDouble) CreateNotificationWithContext(i0 context.Context, i1 *budgets.CreateNotificationInput, i2 ...request.Option) (r0 *budgets.CreateNotificationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNotificationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*budgets.CreateNotificationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BudgetsDouble) fakeCreateNotificationWithContext(ctx context.Context, in *budgets.CreateNotificationInput, _ ...request.Option) (*budgets.CreateNotificationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateNotification cancelled", ctx.Err())
	default:
		return d.CreateNotification(in)
	}
}

func (d *BudgetsDouble) CreateSubscriber(i0 *budgets.CreateSubscriberInput) (r0 *budgets.CreateSubscriberOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSubscriber", i0)
	r0, _ = returns[0].(*budgets.CreateSubscriberOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BudgetsDouble) CreateSubscriberRequest(i0 *budgets.CreateSubscriberInput) (r0 *request.Request, r1 *budgets.CreateSubscriberOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSubscriberRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*budgets.CreateSubscriberOutput)
	return
}

func (d *BudgetsDouble) CreateSubscriberWithContext(i0 context.Context, i1 *budgets.CreateSubscriberInput, i2 ...request.Option) (r0 *budgets.CreateSubscriberOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSubscriberWithContext", i0, i1, i2)
	r0, _ = returns[0].(*budgets.CreateSubscriberOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BudgetsDouble) fakeCreateSubscriberWithContext(ctx context.Context, in *budgets.CreateSubscriberInput, _ ...request.Option) (*budgets.CreateSubscriberOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateSubscriber cancelled", ctx.Err())
	default:
		return d.CreateSubscriber(in)
	}
}

func (d *BudgetsDouble) DeleteBudget(i0 *budgets.DeleteBudgetInput) (r0 *budgets.DeleteBudgetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBudget", i0)
	r0, _ = returns[0].(*budgets.DeleteBudgetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BudgetsDouble) DeleteBudgetRequest(i0 *budgets.DeleteBudgetInput) (r0 *request.Request, r1 *budgets.DeleteBudgetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBudgetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*budgets.DeleteBudgetOutput)
	return
}

func (d *BudgetsDouble) DeleteBudgetWithContext(i0 context.Context, i1 *budgets.DeleteBudgetInput, i2 ...request.Option) (r0 *budgets.DeleteBudgetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBudgetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*budgets.DeleteBudgetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BudgetsDouble) fakeDeleteBudgetWithContext(ctx context.Context, in *budgets.DeleteBudgetInput, _ ...request.Option) (*budgets.DeleteBudgetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteBudget cancelled", ctx.Err())
	default:
		return d.DeleteBudget(in)
	}
}

func (d *BudgetsDouble) DeleteNotification(i0 *budgets.DeleteNotificationInput) (r0 *budgets.DeleteNotificationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNotification", i0)
	r0, _ = returns[0].(*budgets.DeleteNotificationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BudgetsDouble) DeleteNotificationRequest(i0 *budgets.DeleteNotificationInput) (r0 *request.Request, r1 *budgets.DeleteNotificationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNotificationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*budgets.DeleteNotificationOutput)
	return
}

func (d *BudgetsDouble) DeleteNotificationWithContext(i0 context.Context, i1 *budgets.DeleteNotificationInput, i2 ...request.Option) (r0 *budgets.DeleteNotificationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNotificationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*budgets.DeleteNotificationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BudgetsDouble) fakeDeleteNotificationWithContext(ctx context.Context, in *budgets.DeleteNotificationInput, _ ...request.Option) (*budgets.DeleteNotificationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteNotification cancelled", ctx.Err())
	default:
		return d.DeleteNotification(in)
	}
}

func (d *BudgetsDouble) DeleteSubscriber(i0 *budgets.DeleteSubscriberInput) (r0 *budgets.DeleteSubscriberOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSubscriber", i0)
	r0, _ = returns[0].(*budgets.DeleteSubscriberOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BudgetsDouble) DeleteSubscriberRequest(i0 *budgets.DeleteSubscriberInput) (r0 *request.Request, r1 *budgets.DeleteSubscriberOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSubscriberRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*budgets.DeleteSubscriberOutput)
	return
}

func (d *BudgetsDouble) DeleteSubscriberWithContext(i0 context.Context, i1 *budgets.DeleteSubscriberInput, i2 ...request.Option) (r0 *budgets.DeleteSubscriberOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSubscriberWithContext", i0, i1, i2)
	r0, _ = returns[0].(*budgets.DeleteSubscriberOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BudgetsDouble) fakeDeleteSubscriberWithContext(ctx context.Context, in *budgets.DeleteSubscriberInput, _ ...request.Option) (*budgets.DeleteSubscriberOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteSubscriber cancelled", ctx.Err())
	default:
		return d.DeleteSubscriber(in)
	}
}

func (d *BudgetsDouble) DescribeBudget(i0 *budgets.DescribeBudgetInput) (r0 *budgets.DescribeBudgetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBudget", i0)
	r0, _ = returns[0].(*budgets.DescribeBudgetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BudgetsDouble) DescribeBudgetPerformanceHistory(i0 *budgets.DescribeBudgetPerformanceHistoryInput) (r0 *budgets.DescribeBudgetPerformanceHistoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBudgetPerformanceHistory", i0)
	r0, _ = returns[0].(*budgets.DescribeBudgetPerformanceHistoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BudgetsDouble) DescribeBudgetPerformanceHistoryRequest(i0 *budgets.DescribeBudgetPerformanceHistoryInput) (r0 *request.Request, r1 *budgets.DescribeBudgetPerformanceHistoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBudgetPerformanceHistoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*budgets.DescribeBudgetPerformanceHistoryOutput)
	return
}

func (d *BudgetsDouble) DescribeBudgetPerformanceHistoryWithContext(i0 context.Context, i1 *budgets.DescribeBudgetPerformanceHistoryInput, i2 ...request.Option) (r0 *budgets.DescribeBudgetPerformanceHistoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBudgetPerformanceHistoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*budgets.DescribeBudgetPerformanceHistoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BudgetsDouble) fakeDescribeBudgetPerformanceHistoryWithContext(ctx context.Context, in *budgets.DescribeBudgetPerformanceHistoryInput, _ ...request.Option) (*budgets.DescribeBudgetPerformanceHistoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeBudgetPerformanceHistory cancelled", ctx.Err())
	default:
		return d.DescribeBudgetPerformanceHistory(in)
	}
}

func (d *BudgetsDouble) DescribeBudgetRequest(i0 *budgets.DescribeBudgetInput) (r0 *request.Request, r1 *budgets.DescribeBudgetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBudgetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*budgets.DescribeBudgetOutput)
	return
}

func (d *BudgetsDouble) DescribeBudgetWithContext(i0 context.Context, i1 *budgets.DescribeBudgetInput, i2 ...request.Option) (r0 *budgets.DescribeBudgetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBudgetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*budgets.DescribeBudgetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BudgetsDouble) fakeDescribeBudgetWithContext(ctx context.Context, in *budgets.DescribeBudgetInput, _ ...request.Option) (*budgets.DescribeBudgetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeBudget cancelled", ctx.Err())
	default:
		return d.DescribeBudget(in)
	}
}

func (d *BudgetsDouble) DescribeBudgets(i0 *budgets.DescribeBudgetsInput) (r0 *budgets.DescribeBudgetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBudgets", i0)
	r0, _ = returns[0].(*budgets.DescribeBudgetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BudgetsDouble) DescribeBudgetsRequest(i0 *budgets.DescribeBudgetsInput) (r0 *request.Request, r1 *budgets.DescribeBudgetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBudgetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*budgets.DescribeBudgetsOutput)
	return
}

func (d *BudgetsDouble) DescribeBudgetsWithContext(i0 context.Context, i1 *budgets.DescribeBudgetsInput, i2 ...request.Option) (r0 *budgets.DescribeBudgetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBudgetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*budgets.DescribeBudgetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BudgetsDouble) fakeDescribeBudgetsWithContext(ctx context.Context, in *budgets.DescribeBudgetsInput, _ ...request.Option) (*budgets.DescribeBudgetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeBudgets cancelled", ctx.Err())
	default:
		return d.DescribeBudgets(in)
	}
}

func (d *BudgetsDouble) DescribeNotificationsForBudget(i0 *budgets.DescribeNotificationsForBudgetInput) (r0 *budgets.DescribeNotificationsForBudgetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNotificationsForBudget", i0)
	r0, _ = returns[0].(*budgets.DescribeNotificationsForBudgetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BudgetsDouble) DescribeNotificationsForBudgetRequest(i0 *budgets.DescribeNotificationsForBudgetInput) (r0 *request.Request, r1 *budgets.DescribeNotificationsForBudgetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNotificationsForBudgetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*budgets.DescribeNotificationsForBudgetOutput)
	return
}

func (d *BudgetsDouble) DescribeNotificationsForBudgetWithContext(i0 context.Context, i1 *budgets.DescribeNotificationsForBudgetInput, i2 ...request.Option) (r0 *budgets.DescribeNotificationsForBudgetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNotificationsForBudgetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*budgets.DescribeNotificationsForBudgetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BudgetsDouble) fakeDescribeNotificationsForBudgetWithContext(ctx context.Context, in *budgets.DescribeNotificationsForBudgetInput, _ ...request.Option) (*budgets.DescribeNotificationsForBudgetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeNotificationsForBudget cancelled", ctx.Err())
	default:
		return d.DescribeNotificationsForBudget(in)
	}
}

func (d *BudgetsDouble) DescribeSubscribersForNotification(i0 *budgets.DescribeSubscribersForNotificationInput) (r0 *budgets.DescribeSubscribersForNotificationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSubscribersForNotification", i0)
	r0, _ = returns[0].(*budgets.DescribeSubscribersForNotificationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BudgetsDouble) DescribeSubscribersForNotificationRequest(i0 *budgets.DescribeSubscribersForNotificationInput) (r0 *request.Request, r1 *budgets.DescribeSubscribersForNotificationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSubscribersForNotificationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*budgets.DescribeSubscribersForNotificationOutput)
	return
}

func (d *BudgetsDouble) DescribeSubscribersForNotificationWithContext(i0 context.Context, i1 *budgets.DescribeSubscribersForNotificationInput, i2 ...request.Option) (r0 *budgets.DescribeSubscribersForNotificationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSubscribersForNotificationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*budgets.DescribeSubscribersForNotificationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BudgetsDouble) fakeDescribeSubscribersForNotificationWithContext(ctx context.Context, in *budgets.DescribeSubscribersForNotificationInput, _ ...request.Option) (*budgets.DescribeSubscribersForNotificationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSubscribersForNotification cancelled", ctx.Err())
	default:
		return d.DescribeSubscribersForNotification(in)
	}
}

func (d *BudgetsDouble) UpdateBudget(i0 *budgets.UpdateBudgetInput) (r0 *budgets.UpdateBudgetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateBudget", i0)
	r0, _ = returns[0].(*budgets.UpdateBudgetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BudgetsDouble) UpdateBudgetRequest(i0 *budgets.UpdateBudgetInput) (r0 *request.Request, r1 *budgets.UpdateBudgetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateBudgetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*budgets.UpdateBudgetOutput)
	return
}

func (d *BudgetsDouble) UpdateBudgetWithContext(i0 context.Context, i1 *budgets.UpdateBudgetInput, i2 ...request.Option) (r0 *budgets.UpdateBudgetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateBudgetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*budgets.UpdateBudgetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BudgetsDouble) fakeUpdateBudgetWithContext(ctx context.Context, in *budgets.UpdateBudgetInput, _ ...request.Option) (*budgets.UpdateBudgetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateBudget cancelled", ctx.Err())
	default:
		return d.UpdateBudget(in)
	}
}

func (d *BudgetsDouble) UpdateNotification(i0 *budgets.UpdateNotificationInput) (r0 *budgets.UpdateNotificationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateNotification", i0)
	r0, _ = returns[0].(*budgets.UpdateNotificationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BudgetsDouble) UpdateNotificationRequest(i0 *budgets.UpdateNotificationInput) (r0 *request.Request, r1 *budgets.UpdateNotificationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateNotificationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*budgets.UpdateNotificationOutput)
	return
}

func (d *BudgetsDouble) UpdateNotificationWithContext(i0 context.Context, i1 *budgets.UpdateNotificationInput, i2 ...request.Option) (r0 *budgets.UpdateNotificationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateNotificationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*budgets.UpdateNotificationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BudgetsDouble) fakeUpdateNotificationWithContext(ctx context.Context, in *budgets.UpdateNotificationInput, _ ...request.Option) (*budgets.UpdateNotificationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateNotification cancelled", ctx.Err())
	default:
		return d.UpdateNotification(in)
	}
}

func (d *BudgetsDouble) UpdateSubscriber(i0 *budgets.UpdateSubscriberInput) (r0 *budgets.UpdateSubscriberOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSubscriber", i0)
	r0, _ = returns[0].(*budgets.UpdateSubscriberOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BudgetsDouble) UpdateSubscriberRequest(i0 *budgets.UpdateSubscriberInput) (r0 *request.Request, r1 *budgets.UpdateSubscriberOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSubscriberRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*budgets.UpdateSubscriberOutput)
	return
}

func (d *BudgetsDouble) UpdateSubscriberWithContext(i0 context.Context, i1 *budgets.UpdateSubscriberInput, i2 ...request.Option) (r0 *budgets.UpdateSubscriberOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSubscriberWithContext", i0, i1, i2)
	r0, _ = returns[0].(*budgets.UpdateSubscriberOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BudgetsDouble) fakeUpdateSubscriberWithContext(ctx context.Context, in *budgets.UpdateSubscriberInput, _ ...request.Option) (*budgets.UpdateSubscriberOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateSubscriber cancelled", ctx.Err())
	default:
		return d.UpdateSubscriber(in)
	}
}
