// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:15:34+11:00

// Package worklinkdouble provides a TestDouble implementation of worklinkiface.WorkLinkAPI
package worklinkdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/worklink"
	"github.com/aws/aws-sdk-go/service/worklink/worklinkiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// WorkLinkDouble is TestDouble for worklinkiface.WorkLinkAPI
type WorkLinkDouble struct {
	worklinkiface.WorkLinkAPI
	*awsdouble.AWSTestDouble
}

// Constructor for WorkLinkDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *WorkLinkDouble {
	result := &WorkLinkDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*worklinkiface.WorkLinkAPI)(nil), configurators...)
	return result
}

func (d *WorkLinkDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *WorkLinkDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AssociateDomainWithContext":
		return m.Fake(d.fakeAssociateDomainWithContext)

	case "AssociateWebsiteAuthorizationProviderWithContext":
		return m.Fake(d.fakeAssociateWebsiteAuthorizationProviderWithContext)

	case "AssociateWebsiteCertificateAuthorityWithContext":
		return m.Fake(d.fakeAssociateWebsiteCertificateAuthorityWithContext)

	case "CreateFleetWithContext":
		return m.Fake(d.fakeCreateFleetWithContext)

	case "DeleteFleetWithContext":
		return m.Fake(d.fakeDeleteFleetWithContext)

	case "DescribeAuditStreamConfigurationWithContext":
		return m.Fake(d.fakeDescribeAuditStreamConfigurationWithContext)

	case "DescribeCompanyNetworkConfigurationWithContext":
		return m.Fake(d.fakeDescribeCompanyNetworkConfigurationWithContext)

	case "DescribeDevicePolicyConfigurationWithContext":
		return m.Fake(d.fakeDescribeDevicePolicyConfigurationWithContext)

	case "DescribeDeviceWithContext":
		return m.Fake(d.fakeDescribeDeviceWithContext)

	case "DescribeDomainWithContext":
		return m.Fake(d.fakeDescribeDomainWithContext)

	case "DescribeFleetMetadataWithContext":
		return m.Fake(d.fakeDescribeFleetMetadataWithContext)

	case "DescribeIdentityProviderConfigurationWithContext":
		return m.Fake(d.fakeDescribeIdentityProviderConfigurationWithContext)

	case "DescribeWebsiteCertificateAuthorityWithContext":
		return m.Fake(d.fakeDescribeWebsiteCertificateAuthorityWithContext)

	case "DisassociateDomainWithContext":
		return m.Fake(d.fakeDisassociateDomainWithContext)

	case "DisassociateWebsiteAuthorizationProviderWithContext":
		return m.Fake(d.fakeDisassociateWebsiteAuthorizationProviderWithContext)

	case "DisassociateWebsiteCertificateAuthorityWithContext":
		return m.Fake(d.fakeDisassociateWebsiteCertificateAuthorityWithContext)

	case "ListDevicesPages":
		return m.Fake(d.fakeListDevicesPages)

	case "ListDevicesPagesWithContext":
		return m.Fake(d.fakeListDevicesPagesWithContext)

	case "ListDevicesWithContext":
		return m.Fake(d.fakeListDevicesWithContext)

	case "ListDomainsPages":
		return m.Fake(d.fakeListDomainsPages)

	case "ListDomainsPagesWithContext":
		return m.Fake(d.fakeListDomainsPagesWithContext)

	case "ListDomainsWithContext":
		return m.Fake(d.fakeListDomainsWithContext)

	case "ListFleetsPages":
		return m.Fake(d.fakeListFleetsPages)

	case "ListFleetsPagesWithContext":
		return m.Fake(d.fakeListFleetsPagesWithContext)

	case "ListFleetsWithContext":
		return m.Fake(d.fakeListFleetsWithContext)

	case "ListWebsiteAuthorizationProvidersPages":
		return m.Fake(d.fakeListWebsiteAuthorizationProvidersPages)

	case "ListWebsiteAuthorizationProvidersPagesWithContext":
		return m.Fake(d.fakeListWebsiteAuthorizationProvidersPagesWithContext)

	case "ListWebsiteAuthorizationProvidersWithContext":
		return m.Fake(d.fakeListWebsiteAuthorizationProvidersWithContext)

	case "ListWebsiteCertificateAuthoritiesPages":
		return m.Fake(d.fakeListWebsiteCertificateAuthoritiesPages)

	case "ListWebsiteCertificateAuthoritiesPagesWithContext":
		return m.Fake(d.fakeListWebsiteCertificateAuthoritiesPagesWithContext)

	case "ListWebsiteCertificateAuthoritiesWithContext":
		return m.Fake(d.fakeListWebsiteCertificateAuthoritiesWithContext)

	case "RestoreDomainAccessWithContext":
		return m.Fake(d.fakeRestoreDomainAccessWithContext)

	case "RevokeDomainAccessWithContext":
		return m.Fake(d.fakeRevokeDomainAccessWithContext)

	case "SignOutUserWithContext":
		return m.Fake(d.fakeSignOutUserWithContext)

	case "UpdateAuditStreamConfigurationWithContext":
		return m.Fake(d.fakeUpdateAuditStreamConfigurationWithContext)

	case "UpdateCompanyNetworkConfigurationWithContext":
		return m.Fake(d.fakeUpdateCompanyNetworkConfigurationWithContext)

	case "UpdateDevicePolicyConfigurationWithContext":
		return m.Fake(d.fakeUpdateDevicePolicyConfigurationWithContext)

	case "UpdateDomainMetadataWithContext":
		return m.Fake(d.fakeUpdateDomainMetadataWithContext)

	case "UpdateFleetMetadataWithContext":
		return m.Fake(d.fakeUpdateFleetMetadataWithContext)

	case "UpdateIdentityProviderConfigurationWithContext":
		return m.Fake(d.fakeUpdateIdentityProviderConfigurationWithContext)

	default:
		return nil
	}
}

func (d *WorkLinkDouble) AssociateDomain(i0 *worklink.AssociateDomainInput) (r0 *worklink.AssociateDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateDomain", i0)
	r0, _ = returns[0].(*worklink.AssociateDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) AssociateDomainRequest(i0 *worklink.AssociateDomainInput) (r0 *request.Request, r1 *worklink.AssociateDomainOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateDomainRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*worklink.AssociateDomainOutput)
	return
}

func (d *WorkLinkDouble) AssociateDomainWithContext(i0 context.Context, i1 *worklink.AssociateDomainInput, i2 ...request.Option) (r0 *worklink.AssociateDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateDomainWithContext", i0, i1, i2)
	r0, _ = returns[0].(*worklink.AssociateDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) fakeAssociateDomainWithContext(ctx context.Context, in *worklink.AssociateDomainInput, _ ...request.Option) (*worklink.AssociateDomainOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateDomain cancelled", ctx.Err())
	default:
		return d.AssociateDomain(in)
	}
}

func (d *WorkLinkDouble) AssociateWebsiteAuthorizationProvider(i0 *worklink.AssociateWebsiteAuthorizationProviderInput) (r0 *worklink.AssociateWebsiteAuthorizationProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateWebsiteAuthorizationProvider", i0)
	r0, _ = returns[0].(*worklink.AssociateWebsiteAuthorizationProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) AssociateWebsiteAuthorizationProviderRequest(i0 *worklink.AssociateWebsiteAuthorizationProviderInput) (r0 *request.Request, r1 *worklink.AssociateWebsiteAuthorizationProviderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateWebsiteAuthorizationProviderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*worklink.AssociateWebsiteAuthorizationProviderOutput)
	return
}

func (d *WorkLinkDouble) AssociateWebsiteAuthorizationProviderWithContext(i0 context.Context, i1 *worklink.AssociateWebsiteAuthorizationProviderInput, i2 ...request.Option) (r0 *worklink.AssociateWebsiteAuthorizationProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateWebsiteAuthorizationProviderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*worklink.AssociateWebsiteAuthorizationProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) fakeAssociateWebsiteAuthorizationProviderWithContext(ctx context.Context, in *worklink.AssociateWebsiteAuthorizationProviderInput, _ ...request.Option) (*worklink.AssociateWebsiteAuthorizationProviderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateWebsiteAuthorizationProvider cancelled", ctx.Err())
	default:
		return d.AssociateWebsiteAuthorizationProvider(in)
	}
}

func (d *WorkLinkDouble) AssociateWebsiteCertificateAuthority(i0 *worklink.AssociateWebsiteCertificateAuthorityInput) (r0 *worklink.AssociateWebsiteCertificateAuthorityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateWebsiteCertificateAuthority", i0)
	r0, _ = returns[0].(*worklink.AssociateWebsiteCertificateAuthorityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) AssociateWebsiteCertificateAuthorityRequest(i0 *worklink.AssociateWebsiteCertificateAuthorityInput) (r0 *request.Request, r1 *worklink.AssociateWebsiteCertificateAuthorityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateWebsiteCertificateAuthorityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*worklink.AssociateWebsiteCertificateAuthorityOutput)
	return
}

func (d *WorkLinkDouble) AssociateWebsiteCertificateAuthorityWithContext(i0 context.Context, i1 *worklink.AssociateWebsiteCertificateAuthorityInput, i2 ...request.Option) (r0 *worklink.AssociateWebsiteCertificateAuthorityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateWebsiteCertificateAuthorityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*worklink.AssociateWebsiteCertificateAuthorityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) fakeAssociateWebsiteCertificateAuthorityWithContext(ctx context.Context, in *worklink.AssociateWebsiteCertificateAuthorityInput, _ ...request.Option) (*worklink.AssociateWebsiteCertificateAuthorityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateWebsiteCertificateAuthority cancelled", ctx.Err())
	default:
		return d.AssociateWebsiteCertificateAuthority(in)
	}
}

func (d *WorkLinkDouble) CreateFleet(i0 *worklink.CreateFleetInput) (r0 *worklink.CreateFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFleet", i0)
	r0, _ = returns[0].(*worklink.CreateFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) CreateFleetRequest(i0 *worklink.CreateFleetInput) (r0 *request.Request, r1 *worklink.CreateFleetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFleetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*worklink.CreateFleetOutput)
	return
}

func (d *WorkLinkDouble) CreateFleetWithContext(i0 context.Context, i1 *worklink.CreateFleetInput, i2 ...request.Option) (r0 *worklink.CreateFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFleetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*worklink.CreateFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) fakeCreateFleetWithContext(ctx context.Context, in *worklink.CreateFleetInput, _ ...request.Option) (*worklink.CreateFleetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateFleet cancelled", ctx.Err())
	default:
		return d.CreateFleet(in)
	}
}

func (d *WorkLinkDouble) DeleteFleet(i0 *worklink.DeleteFleetInput) (r0 *worklink.DeleteFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFleet", i0)
	r0, _ = returns[0].(*worklink.DeleteFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) DeleteFleetRequest(i0 *worklink.DeleteFleetInput) (r0 *request.Request, r1 *worklink.DeleteFleetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFleetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*worklink.DeleteFleetOutput)
	return
}

func (d *WorkLinkDouble) DeleteFleetWithContext(i0 context.Context, i1 *worklink.DeleteFleetInput, i2 ...request.Option) (r0 *worklink.DeleteFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFleetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*worklink.DeleteFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) fakeDeleteFleetWithContext(ctx context.Context, in *worklink.DeleteFleetInput, _ ...request.Option) (*worklink.DeleteFleetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteFleet cancelled", ctx.Err())
	default:
		return d.DeleteFleet(in)
	}
}

func (d *WorkLinkDouble) DescribeAuditStreamConfiguration(i0 *worklink.DescribeAuditStreamConfigurationInput) (r0 *worklink.DescribeAuditStreamConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAuditStreamConfiguration", i0)
	r0, _ = returns[0].(*worklink.DescribeAuditStreamConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) DescribeAuditStreamConfigurationRequest(i0 *worklink.DescribeAuditStreamConfigurationInput) (r0 *request.Request, r1 *worklink.DescribeAuditStreamConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAuditStreamConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*worklink.DescribeAuditStreamConfigurationOutput)
	return
}

func (d *WorkLinkDouble) DescribeAuditStreamConfigurationWithContext(i0 context.Context, i1 *worklink.DescribeAuditStreamConfigurationInput, i2 ...request.Option) (r0 *worklink.DescribeAuditStreamConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAuditStreamConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*worklink.DescribeAuditStreamConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) fakeDescribeAuditStreamConfigurationWithContext(ctx context.Context, in *worklink.DescribeAuditStreamConfigurationInput, _ ...request.Option) (*worklink.DescribeAuditStreamConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAuditStreamConfiguration cancelled", ctx.Err())
	default:
		return d.DescribeAuditStreamConfiguration(in)
	}
}

func (d *WorkLinkDouble) DescribeCompanyNetworkConfiguration(i0 *worklink.DescribeCompanyNetworkConfigurationInput) (r0 *worklink.DescribeCompanyNetworkConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCompanyNetworkConfiguration", i0)
	r0, _ = returns[0].(*worklink.DescribeCompanyNetworkConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) DescribeCompanyNetworkConfigurationRequest(i0 *worklink.DescribeCompanyNetworkConfigurationInput) (r0 *request.Request, r1 *worklink.DescribeCompanyNetworkConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCompanyNetworkConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*worklink.DescribeCompanyNetworkConfigurationOutput)
	return
}

func (d *WorkLinkDouble) DescribeCompanyNetworkConfigurationWithContext(i0 context.Context, i1 *worklink.DescribeCompanyNetworkConfigurationInput, i2 ...request.Option) (r0 *worklink.DescribeCompanyNetworkConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCompanyNetworkConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*worklink.DescribeCompanyNetworkConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) fakeDescribeCompanyNetworkConfigurationWithContext(ctx context.Context, in *worklink.DescribeCompanyNetworkConfigurationInput, _ ...request.Option) (*worklink.DescribeCompanyNetworkConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeCompanyNetworkConfiguration cancelled", ctx.Err())
	default:
		return d.DescribeCompanyNetworkConfiguration(in)
	}
}

func (d *WorkLinkDouble) DescribeDevice(i0 *worklink.DescribeDeviceInput) (r0 *worklink.DescribeDeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDevice", i0)
	r0, _ = returns[0].(*worklink.DescribeDeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) DescribeDevicePolicyConfiguration(i0 *worklink.DescribeDevicePolicyConfigurationInput) (r0 *worklink.DescribeDevicePolicyConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDevicePolicyConfiguration", i0)
	r0, _ = returns[0].(*worklink.DescribeDevicePolicyConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) DescribeDevicePolicyConfigurationRequest(i0 *worklink.DescribeDevicePolicyConfigurationInput) (r0 *request.Request, r1 *worklink.DescribeDevicePolicyConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDevicePolicyConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*worklink.DescribeDevicePolicyConfigurationOutput)
	return
}

func (d *WorkLinkDouble) DescribeDevicePolicyConfigurationWithContext(i0 context.Context, i1 *worklink.DescribeDevicePolicyConfigurationInput, i2 ...request.Option) (r0 *worklink.DescribeDevicePolicyConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDevicePolicyConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*worklink.DescribeDevicePolicyConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) fakeDescribeDevicePolicyConfigurationWithContext(ctx context.Context, in *worklink.DescribeDevicePolicyConfigurationInput, _ ...request.Option) (*worklink.DescribeDevicePolicyConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDevicePolicyConfiguration cancelled", ctx.Err())
	default:
		return d.DescribeDevicePolicyConfiguration(in)
	}
}

func (d *WorkLinkDouble) DescribeDeviceRequest(i0 *worklink.DescribeDeviceInput) (r0 *request.Request, r1 *worklink.DescribeDeviceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDeviceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*worklink.DescribeDeviceOutput)
	return
}

func (d *WorkLinkDouble) DescribeDeviceWithContext(i0 context.Context, i1 *worklink.DescribeDeviceInput, i2 ...request.Option) (r0 *worklink.DescribeDeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDeviceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*worklink.DescribeDeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) fakeDescribeDeviceWithContext(ctx context.Context, in *worklink.DescribeDeviceInput, _ ...request.Option) (*worklink.DescribeDeviceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDevice cancelled", ctx.Err())
	default:
		return d.DescribeDevice(in)
	}
}

func (d *WorkLinkDouble) DescribeDomain(i0 *worklink.DescribeDomainInput) (r0 *worklink.DescribeDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDomain", i0)
	r0, _ = returns[0].(*worklink.DescribeDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) DescribeDomainRequest(i0 *worklink.DescribeDomainInput) (r0 *request.Request, r1 *worklink.DescribeDomainOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDomainRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*worklink.DescribeDomainOutput)
	return
}

func (d *WorkLinkDouble) DescribeDomainWithContext(i0 context.Context, i1 *worklink.DescribeDomainInput, i2 ...request.Option) (r0 *worklink.DescribeDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDomainWithContext", i0, i1, i2)
	r0, _ = returns[0].(*worklink.DescribeDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) fakeDescribeDomainWithContext(ctx context.Context, in *worklink.DescribeDomainInput, _ ...request.Option) (*worklink.DescribeDomainOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDomain cancelled", ctx.Err())
	default:
		return d.DescribeDomain(in)
	}
}

func (d *WorkLinkDouble) DescribeFleetMetadata(i0 *worklink.DescribeFleetMetadataInput) (r0 *worklink.DescribeFleetMetadataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFleetMetadata", i0)
	r0, _ = returns[0].(*worklink.DescribeFleetMetadataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) DescribeFleetMetadataRequest(i0 *worklink.DescribeFleetMetadataInput) (r0 *request.Request, r1 *worklink.DescribeFleetMetadataOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFleetMetadataRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*worklink.DescribeFleetMetadataOutput)
	return
}

func (d *WorkLinkDouble) DescribeFleetMetadataWithContext(i0 context.Context, i1 *worklink.DescribeFleetMetadataInput, i2 ...request.Option) (r0 *worklink.DescribeFleetMetadataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFleetMetadataWithContext", i0, i1, i2)
	r0, _ = returns[0].(*worklink.DescribeFleetMetadataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) fakeDescribeFleetMetadataWithContext(ctx context.Context, in *worklink.DescribeFleetMetadataInput, _ ...request.Option) (*worklink.DescribeFleetMetadataOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeFleetMetadata cancelled", ctx.Err())
	default:
		return d.DescribeFleetMetadata(in)
	}
}

func (d *WorkLinkDouble) DescribeIdentityProviderConfiguration(i0 *worklink.DescribeIdentityProviderConfigurationInput) (r0 *worklink.DescribeIdentityProviderConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIdentityProviderConfiguration", i0)
	r0, _ = returns[0].(*worklink.DescribeIdentityProviderConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) DescribeIdentityProviderConfigurationRequest(i0 *worklink.DescribeIdentityProviderConfigurationInput) (r0 *request.Request, r1 *worklink.DescribeIdentityProviderConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIdentityProviderConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*worklink.DescribeIdentityProviderConfigurationOutput)
	return
}

func (d *WorkLinkDouble) DescribeIdentityProviderConfigurationWithContext(i0 context.Context, i1 *worklink.DescribeIdentityProviderConfigurationInput, i2 ...request.Option) (r0 *worklink.DescribeIdentityProviderConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIdentityProviderConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*worklink.DescribeIdentityProviderConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) fakeDescribeIdentityProviderConfigurationWithContext(ctx context.Context, in *worklink.DescribeIdentityProviderConfigurationInput, _ ...request.Option) (*worklink.DescribeIdentityProviderConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeIdentityProviderConfiguration cancelled", ctx.Err())
	default:
		return d.DescribeIdentityProviderConfiguration(in)
	}
}

func (d *WorkLinkDouble) DescribeWebsiteCertificateAuthority(i0 *worklink.DescribeWebsiteCertificateAuthorityInput) (r0 *worklink.DescribeWebsiteCertificateAuthorityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWebsiteCertificateAuthority", i0)
	r0, _ = returns[0].(*worklink.DescribeWebsiteCertificateAuthorityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) DescribeWebsiteCertificateAuthorityRequest(i0 *worklink.DescribeWebsiteCertificateAuthorityInput) (r0 *request.Request, r1 *worklink.DescribeWebsiteCertificateAuthorityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWebsiteCertificateAuthorityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*worklink.DescribeWebsiteCertificateAuthorityOutput)
	return
}

func (d *WorkLinkDouble) DescribeWebsiteCertificateAuthorityWithContext(i0 context.Context, i1 *worklink.DescribeWebsiteCertificateAuthorityInput, i2 ...request.Option) (r0 *worklink.DescribeWebsiteCertificateAuthorityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWebsiteCertificateAuthorityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*worklink.DescribeWebsiteCertificateAuthorityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) fakeDescribeWebsiteCertificateAuthorityWithContext(ctx context.Context, in *worklink.DescribeWebsiteCertificateAuthorityInput, _ ...request.Option) (*worklink.DescribeWebsiteCertificateAuthorityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeWebsiteCertificateAuthority cancelled", ctx.Err())
	default:
		return d.DescribeWebsiteCertificateAuthority(in)
	}
}

func (d *WorkLinkDouble) DisassociateDomain(i0 *worklink.DisassociateDomainInput) (r0 *worklink.DisassociateDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateDomain", i0)
	r0, _ = returns[0].(*worklink.DisassociateDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) DisassociateDomainRequest(i0 *worklink.DisassociateDomainInput) (r0 *request.Request, r1 *worklink.DisassociateDomainOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateDomainRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*worklink.DisassociateDomainOutput)
	return
}

func (d *WorkLinkDouble) DisassociateDomainWithContext(i0 context.Context, i1 *worklink.DisassociateDomainInput, i2 ...request.Option) (r0 *worklink.DisassociateDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateDomainWithContext", i0, i1, i2)
	r0, _ = returns[0].(*worklink.DisassociateDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) fakeDisassociateDomainWithContext(ctx context.Context, in *worklink.DisassociateDomainInput, _ ...request.Option) (*worklink.DisassociateDomainOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateDomain cancelled", ctx.Err())
	default:
		return d.DisassociateDomain(in)
	}
}

func (d *WorkLinkDouble) DisassociateWebsiteAuthorizationProvider(i0 *worklink.DisassociateWebsiteAuthorizationProviderInput) (r0 *worklink.DisassociateWebsiteAuthorizationProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateWebsiteAuthorizationProvider", i0)
	r0, _ = returns[0].(*worklink.DisassociateWebsiteAuthorizationProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) DisassociateWebsiteAuthorizationProviderRequest(i0 *worklink.DisassociateWebsiteAuthorizationProviderInput) (r0 *request.Request, r1 *worklink.DisassociateWebsiteAuthorizationProviderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateWebsiteAuthorizationProviderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*worklink.DisassociateWebsiteAuthorizationProviderOutput)
	return
}

func (d *WorkLinkDouble) DisassociateWebsiteAuthorizationProviderWithContext(i0 context.Context, i1 *worklink.DisassociateWebsiteAuthorizationProviderInput, i2 ...request.Option) (r0 *worklink.DisassociateWebsiteAuthorizationProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateWebsiteAuthorizationProviderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*worklink.DisassociateWebsiteAuthorizationProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) fakeDisassociateWebsiteAuthorizationProviderWithContext(ctx context.Context, in *worklink.DisassociateWebsiteAuthorizationProviderInput, _ ...request.Option) (*worklink.DisassociateWebsiteAuthorizationProviderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateWebsiteAuthorizationProvider cancelled", ctx.Err())
	default:
		return d.DisassociateWebsiteAuthorizationProvider(in)
	}
}

func (d *WorkLinkDouble) DisassociateWebsiteCertificateAuthority(i0 *worklink.DisassociateWebsiteCertificateAuthorityInput) (r0 *worklink.DisassociateWebsiteCertificateAuthorityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateWebsiteCertificateAuthority", i0)
	r0, _ = returns[0].(*worklink.DisassociateWebsiteCertificateAuthorityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) DisassociateWebsiteCertificateAuthorityRequest(i0 *worklink.DisassociateWebsiteCertificateAuthorityInput) (r0 *request.Request, r1 *worklink.DisassociateWebsiteCertificateAuthorityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateWebsiteCertificateAuthorityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*worklink.DisassociateWebsiteCertificateAuthorityOutput)
	return
}

func (d *WorkLinkDouble) DisassociateWebsiteCertificateAuthorityWithContext(i0 context.Context, i1 *worklink.DisassociateWebsiteCertificateAuthorityInput, i2 ...request.Option) (r0 *worklink.DisassociateWebsiteCertificateAuthorityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateWebsiteCertificateAuthorityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*worklink.DisassociateWebsiteCertificateAuthorityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) fakeDisassociateWebsiteCertificateAuthorityWithContext(ctx context.Context, in *worklink.DisassociateWebsiteCertificateAuthorityInput, _ ...request.Option) (*worklink.DisassociateWebsiteCertificateAuthorityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateWebsiteCertificateAuthority cancelled", ctx.Err())
	default:
		return d.DisassociateWebsiteCertificateAuthority(in)
	}
}

func (d *WorkLinkDouble) ListDevices(i0 *worklink.ListDevicesInput) (r0 *worklink.ListDevicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDevices", i0)
	r0, _ = returns[0].(*worklink.ListDevicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) ListDevicesPages(i0 *worklink.ListDevicesInput, i1 func(*worklink.ListDevicesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDevicesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkLinkDouble) fakeListDevicesPages(in *worklink.ListDevicesInput, pager func(*worklink.ListDevicesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListDevices", paginators, in, pager)
}

func (d *WorkLinkDouble) ListDevicesPagesWithContext(i0 context.Context, i1 *worklink.ListDevicesInput, i2 func(*worklink.ListDevicesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDevicesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkLinkDouble) fakeListDevicesPagesWithContext(ctx context.Context, in *worklink.ListDevicesInput, pager func(*worklink.ListDevicesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListDevices", paginators, ctx, in, pager, options...)
}

func (d *WorkLinkDouble) ListDevicesRequest(i0 *worklink.ListDevicesInput) (r0 *request.Request, r1 *worklink.ListDevicesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDevicesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*worklink.ListDevicesOutput)
	return
}

func (d *WorkLinkDouble) ListDevicesWithContext(i0 context.Context, i1 *worklink.ListDevicesInput, i2 ...request.Option) (r0 *worklink.ListDevicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDevicesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*worklink.ListDevicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) fakeListDevicesWithContext(ctx context.Context, in *worklink.ListDevicesInput, _ ...request.Option) (*worklink.ListDevicesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDevices cancelled", ctx.Err())
	default:
		return d.ListDevices(in)
	}
}

func (d *WorkLinkDouble) ListDomains(i0 *worklink.ListDomainsInput) (r0 *worklink.ListDomainsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDomains", i0)
	r0, _ = returns[0].(*worklink.ListDomainsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) ListDomainsPages(i0 *worklink.ListDomainsInput, i1 func(*worklink.ListDomainsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDomainsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkLinkDouble) fakeListDomainsPages(in *worklink.ListDomainsInput, pager func(*worklink.ListDomainsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListDomains", paginators, in, pager)
}

func (d *WorkLinkDouble) ListDomainsPagesWithContext(i0 context.Context, i1 *worklink.ListDomainsInput, i2 func(*worklink.ListDomainsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDomainsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkLinkDouble) fakeListDomainsPagesWithContext(ctx context.Context, in *worklink.ListDomainsInput, pager func(*worklink.ListDomainsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListDomains", paginators, ctx, in, pager, options...)
}

func (d *WorkLinkDouble) ListDomainsRequest(i0 *worklink.ListDomainsInput) (r0 *request.Request, r1 *worklink.ListDomainsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDomainsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*worklink.ListDomainsOutput)
	return
}

func (d *WorkLinkDouble) ListDomainsWithContext(i0 context.Context, i1 *worklink.ListDomainsInput, i2 ...request.Option) (r0 *worklink.ListDomainsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDomainsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*worklink.ListDomainsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) fakeListDomainsWithContext(ctx context.Context, in *worklink.ListDomainsInput, _ ...request.Option) (*worklink.ListDomainsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDomains cancelled", ctx.Err())
	default:
		return d.ListDomains(in)
	}
}

func (d *WorkLinkDouble) ListFleets(i0 *worklink.ListFleetsInput) (r0 *worklink.ListFleetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFleets", i0)
	r0, _ = returns[0].(*worklink.ListFleetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) ListFleetsPages(i0 *worklink.ListFleetsInput, i1 func(*worklink.ListFleetsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFleetsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkLinkDouble) fakeListFleetsPages(in *worklink.ListFleetsInput, pager func(*worklink.ListFleetsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListFleets", paginators, in, pager)
}

func (d *WorkLinkDouble) ListFleetsPagesWithContext(i0 context.Context, i1 *worklink.ListFleetsInput, i2 func(*worklink.ListFleetsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFleetsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkLinkDouble) fakeListFleetsPagesWithContext(ctx context.Context, in *worklink.ListFleetsInput, pager func(*worklink.ListFleetsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListFleets", paginators, ctx, in, pager, options...)
}

func (d *WorkLinkDouble) ListFleetsRequest(i0 *worklink.ListFleetsInput) (r0 *request.Request, r1 *worklink.ListFleetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFleetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*worklink.ListFleetsOutput)
	return
}

func (d *WorkLinkDouble) ListFleetsWithContext(i0 context.Context, i1 *worklink.ListFleetsInput, i2 ...request.Option) (r0 *worklink.ListFleetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFleetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*worklink.ListFleetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) fakeListFleetsWithContext(ctx context.Context, in *worklink.ListFleetsInput, _ ...request.Option) (*worklink.ListFleetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListFleets cancelled", ctx.Err())
	default:
		return d.ListFleets(in)
	}
}

func (d *WorkLinkDouble) ListWebsiteAuthorizationProviders(i0 *worklink.ListWebsiteAuthorizationProvidersInput) (r0 *worklink.ListWebsiteAuthorizationProvidersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWebsiteAuthorizationProviders", i0)
	r0, _ = returns[0].(*worklink.ListWebsiteAuthorizationProvidersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) ListWebsiteAuthorizationProvidersPages(i0 *worklink.ListWebsiteAuthorizationProvidersInput, i1 func(*worklink.ListWebsiteAuthorizationProvidersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWebsiteAuthorizationProvidersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkLinkDouble) fakeListWebsiteAuthorizationProvidersPages(in *worklink.ListWebsiteAuthorizationProvidersInput, pager func(*worklink.ListWebsiteAuthorizationProvidersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListWebsiteAuthorizationProviders", paginators, in, pager)
}

func (d *WorkLinkDouble) ListWebsiteAuthorizationProvidersPagesWithContext(i0 context.Context, i1 *worklink.ListWebsiteAuthorizationProvidersInput, i2 func(*worklink.ListWebsiteAuthorizationProvidersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWebsiteAuthorizationProvidersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkLinkDouble) fakeListWebsiteAuthorizationProvidersPagesWithContext(ctx context.Context, in *worklink.ListWebsiteAuthorizationProvidersInput, pager func(*worklink.ListWebsiteAuthorizationProvidersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListWebsiteAuthorizationProviders", paginators, ctx, in, pager, options...)
}

func (d *WorkLinkDouble) ListWebsiteAuthorizationProvidersRequest(i0 *worklink.ListWebsiteAuthorizationProvidersInput) (r0 *request.Request, r1 *worklink.ListWebsiteAuthorizationProvidersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWebsiteAuthorizationProvidersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*worklink.ListWebsiteAuthorizationProvidersOutput)
	return
}

func (d *WorkLinkDouble) ListWebsiteAuthorizationProvidersWithContext(i0 context.Context, i1 *worklink.ListWebsiteAuthorizationProvidersInput, i2 ...request.Option) (r0 *worklink.ListWebsiteAuthorizationProvidersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWebsiteAuthorizationProvidersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*worklink.ListWebsiteAuthorizationProvidersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) fakeListWebsiteAuthorizationProvidersWithContext(ctx context.Context, in *worklink.ListWebsiteAuthorizationProvidersInput, _ ...request.Option) (*worklink.ListWebsiteAuthorizationProvidersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListWebsiteAuthorizationProviders cancelled", ctx.Err())
	default:
		return d.ListWebsiteAuthorizationProviders(in)
	}
}

func (d *WorkLinkDouble) ListWebsiteCertificateAuthorities(i0 *worklink.ListWebsiteCertificateAuthoritiesInput) (r0 *worklink.ListWebsiteCertificateAuthoritiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWebsiteCertificateAuthorities", i0)
	r0, _ = returns[0].(*worklink.ListWebsiteCertificateAuthoritiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) ListWebsiteCertificateAuthoritiesPages(i0 *worklink.ListWebsiteCertificateAuthoritiesInput, i1 func(*worklink.ListWebsiteCertificateAuthoritiesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWebsiteCertificateAuthoritiesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkLinkDouble) fakeListWebsiteCertificateAuthoritiesPages(in *worklink.ListWebsiteCertificateAuthoritiesInput, pager func(*worklink.ListWebsiteCertificateAuthoritiesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListWebsiteCertificateAuthorities", paginators, in, pager)
}

func (d *WorkLinkDouble) ListWebsiteCertificateAuthoritiesPagesWithContext(i0 context.Context, i1 *worklink.ListWebsiteCertificateAuthoritiesInput, i2 func(*worklink.ListWebsiteCertificateAuthoritiesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWebsiteCertificateAuthoritiesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkLinkDouble) fakeListWebsiteCertificateAuthoritiesPagesWithContext(ctx context.Context, in *worklink.ListWebsiteCertificateAuthoritiesInput, pager func(*worklink.ListWebsiteCertificateAuthoritiesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListWebsiteCertificateAuthorities", paginators, ctx, in, pager, options...)
}

func (d *WorkLinkDouble) ListWebsiteCertificateAuthoritiesRequest(i0 *worklink.ListWebsiteCertificateAuthoritiesInput) (r0 *request.Request, r1 *worklink.ListWebsiteCertificateAuthoritiesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWebsiteCertificateAuthoritiesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*worklink.ListWebsiteCertificateAuthoritiesOutput)
	return
}

func (d *WorkLinkDouble) ListWebsiteCertificateAuthoritiesWithContext(i0 context.Context, i1 *worklink.ListWebsiteCertificateAuthoritiesInput, i2 ...request.Option) (r0 *worklink.ListWebsiteCertificateAuthoritiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWebsiteCertificateAuthoritiesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*worklink.ListWebsiteCertificateAuthoritiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) fakeListWebsiteCertificateAuthoritiesWithContext(ctx context.Context, in *worklink.ListWebsiteCertificateAuthoritiesInput, _ ...request.Option) (*worklink.ListWebsiteCertificateAuthoritiesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListWebsiteCertificateAuthorities cancelled", ctx.Err())
	default:
		return d.ListWebsiteCertificateAuthorities(in)
	}
}

func (d *WorkLinkDouble) RestoreDomainAccess(i0 *worklink.RestoreDomainAccessInput) (r0 *worklink.RestoreDomainAccessOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreDomainAccess", i0)
	r0, _ = returns[0].(*worklink.RestoreDomainAccessOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) RestoreDomainAccessRequest(i0 *worklink.RestoreDomainAccessInput) (r0 *request.Request, r1 *worklink.RestoreDomainAccessOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreDomainAccessRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*worklink.RestoreDomainAccessOutput)
	return
}

func (d *WorkLinkDouble) RestoreDomainAccessWithContext(i0 context.Context, i1 *worklink.RestoreDomainAccessInput, i2 ...request.Option) (r0 *worklink.RestoreDomainAccessOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreDomainAccessWithContext", i0, i1, i2)
	r0, _ = returns[0].(*worklink.RestoreDomainAccessOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) fakeRestoreDomainAccessWithContext(ctx context.Context, in *worklink.RestoreDomainAccessInput, _ ...request.Option) (*worklink.RestoreDomainAccessOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RestoreDomainAccess cancelled", ctx.Err())
	default:
		return d.RestoreDomainAccess(in)
	}
}

func (d *WorkLinkDouble) RevokeDomainAccess(i0 *worklink.RevokeDomainAccessInput) (r0 *worklink.RevokeDomainAccessOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeDomainAccess", i0)
	r0, _ = returns[0].(*worklink.RevokeDomainAccessOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) RevokeDomainAccessRequest(i0 *worklink.RevokeDomainAccessInput) (r0 *request.Request, r1 *worklink.RevokeDomainAccessOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeDomainAccessRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*worklink.RevokeDomainAccessOutput)
	return
}

func (d *WorkLinkDouble) RevokeDomainAccessWithContext(i0 context.Context, i1 *worklink.RevokeDomainAccessInput, i2 ...request.Option) (r0 *worklink.RevokeDomainAccessOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeDomainAccessWithContext", i0, i1, i2)
	r0, _ = returns[0].(*worklink.RevokeDomainAccessOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) fakeRevokeDomainAccessWithContext(ctx context.Context, in *worklink.RevokeDomainAccessInput, _ ...request.Option) (*worklink.RevokeDomainAccessOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RevokeDomainAccess cancelled", ctx.Err())
	default:
		return d.RevokeDomainAccess(in)
	}
}

func (d *WorkLinkDouble) SignOutUser(i0 *worklink.SignOutUserInput) (r0 *worklink.SignOutUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SignOutUser", i0)
	r0, _ = returns[0].(*worklink.SignOutUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) SignOutUserRequest(i0 *worklink.SignOutUserInput) (r0 *request.Request, r1 *worklink.SignOutUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SignOutUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*worklink.SignOutUserOutput)
	return
}

func (d *WorkLinkDouble) SignOutUserWithContext(i0 context.Context, i1 *worklink.SignOutUserInput, i2 ...request.Option) (r0 *worklink.SignOutUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SignOutUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*worklink.SignOutUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) fakeSignOutUserWithContext(ctx context.Context, in *worklink.SignOutUserInput, _ ...request.Option) (*worklink.SignOutUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SignOutUser cancelled", ctx.Err())
	default:
		return d.SignOutUser(in)
	}
}

func (d *WorkLinkDouble) UpdateAuditStreamConfiguration(i0 *worklink.UpdateAuditStreamConfigurationInput) (r0 *worklink.UpdateAuditStreamConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAuditStreamConfiguration", i0)
	r0, _ = returns[0].(*worklink.UpdateAuditStreamConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) UpdateAuditStreamConfigurationRequest(i0 *worklink.UpdateAuditStreamConfigurationInput) (r0 *request.Request, r1 *worklink.UpdateAuditStreamConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAuditStreamConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*worklink.UpdateAuditStreamConfigurationOutput)
	return
}

func (d *WorkLinkDouble) UpdateAuditStreamConfigurationWithContext(i0 context.Context, i1 *worklink.UpdateAuditStreamConfigurationInput, i2 ...request.Option) (r0 *worklink.UpdateAuditStreamConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAuditStreamConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*worklink.UpdateAuditStreamConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) fakeUpdateAuditStreamConfigurationWithContext(ctx context.Context, in *worklink.UpdateAuditStreamConfigurationInput, _ ...request.Option) (*worklink.UpdateAuditStreamConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateAuditStreamConfiguration cancelled", ctx.Err())
	default:
		return d.UpdateAuditStreamConfiguration(in)
	}
}

func (d *WorkLinkDouble) UpdateCompanyNetworkConfiguration(i0 *worklink.UpdateCompanyNetworkConfigurationInput) (r0 *worklink.UpdateCompanyNetworkConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCompanyNetworkConfiguration", i0)
	r0, _ = returns[0].(*worklink.UpdateCompanyNetworkConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) UpdateCompanyNetworkConfigurationRequest(i0 *worklink.UpdateCompanyNetworkConfigurationInput) (r0 *request.Request, r1 *worklink.UpdateCompanyNetworkConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCompanyNetworkConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*worklink.UpdateCompanyNetworkConfigurationOutput)
	return
}

func (d *WorkLinkDouble) UpdateCompanyNetworkConfigurationWithContext(i0 context.Context, i1 *worklink.UpdateCompanyNetworkConfigurationInput, i2 ...request.Option) (r0 *worklink.UpdateCompanyNetworkConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCompanyNetworkConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*worklink.UpdateCompanyNetworkConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) fakeUpdateCompanyNetworkConfigurationWithContext(ctx context.Context, in *worklink.UpdateCompanyNetworkConfigurationInput, _ ...request.Option) (*worklink.UpdateCompanyNetworkConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateCompanyNetworkConfiguration cancelled", ctx.Err())
	default:
		return d.UpdateCompanyNetworkConfiguration(in)
	}
}

func (d *WorkLinkDouble) UpdateDevicePolicyConfiguration(i0 *worklink.UpdateDevicePolicyConfigurationInput) (r0 *worklink.UpdateDevicePolicyConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDevicePolicyConfiguration", i0)
	r0, _ = returns[0].(*worklink.UpdateDevicePolicyConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) UpdateDevicePolicyConfigurationRequest(i0 *worklink.UpdateDevicePolicyConfigurationInput) (r0 *request.Request, r1 *worklink.UpdateDevicePolicyConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDevicePolicyConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*worklink.UpdateDevicePolicyConfigurationOutput)
	return
}

func (d *WorkLinkDouble) UpdateDevicePolicyConfigurationWithContext(i0 context.Context, i1 *worklink.UpdateDevicePolicyConfigurationInput, i2 ...request.Option) (r0 *worklink.UpdateDevicePolicyConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDevicePolicyConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*worklink.UpdateDevicePolicyConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) fakeUpdateDevicePolicyConfigurationWithContext(ctx context.Context, in *worklink.UpdateDevicePolicyConfigurationInput, _ ...request.Option) (*worklink.UpdateDevicePolicyConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDevicePolicyConfiguration cancelled", ctx.Err())
	default:
		return d.UpdateDevicePolicyConfiguration(in)
	}
}

func (d *WorkLinkDouble) UpdateDomainMetadata(i0 *worklink.UpdateDomainMetadataInput) (r0 *worklink.UpdateDomainMetadataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDomainMetadata", i0)
	r0, _ = returns[0].(*worklink.UpdateDomainMetadataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) UpdateDomainMetadataRequest(i0 *worklink.UpdateDomainMetadataInput) (r0 *request.Request, r1 *worklink.UpdateDomainMetadataOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDomainMetadataRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*worklink.UpdateDomainMetadataOutput)
	return
}

func (d *WorkLinkDouble) UpdateDomainMetadataWithContext(i0 context.Context, i1 *worklink.UpdateDomainMetadataInput, i2 ...request.Option) (r0 *worklink.UpdateDomainMetadataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDomainMetadataWithContext", i0, i1, i2)
	r0, _ = returns[0].(*worklink.UpdateDomainMetadataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) fakeUpdateDomainMetadataWithContext(ctx context.Context, in *worklink.UpdateDomainMetadataInput, _ ...request.Option) (*worklink.UpdateDomainMetadataOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDomainMetadata cancelled", ctx.Err())
	default:
		return d.UpdateDomainMetadata(in)
	}
}

func (d *WorkLinkDouble) UpdateFleetMetadata(i0 *worklink.UpdateFleetMetadataInput) (r0 *worklink.UpdateFleetMetadataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFleetMetadata", i0)
	r0, _ = returns[0].(*worklink.UpdateFleetMetadataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) UpdateFleetMetadataRequest(i0 *worklink.UpdateFleetMetadataInput) (r0 *request.Request, r1 *worklink.UpdateFleetMetadataOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFleetMetadataRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*worklink.UpdateFleetMetadataOutput)
	return
}

func (d *WorkLinkDouble) UpdateFleetMetadataWithContext(i0 context.Context, i1 *worklink.UpdateFleetMetadataInput, i2 ...request.Option) (r0 *worklink.UpdateFleetMetadataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFleetMetadataWithContext", i0, i1, i2)
	r0, _ = returns[0].(*worklink.UpdateFleetMetadataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) fakeUpdateFleetMetadataWithContext(ctx context.Context, in *worklink.UpdateFleetMetadataInput, _ ...request.Option) (*worklink.UpdateFleetMetadataOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateFleetMetadata cancelled", ctx.Err())
	default:
		return d.UpdateFleetMetadata(in)
	}
}

func (d *WorkLinkDouble) UpdateIdentityProviderConfiguration(i0 *worklink.UpdateIdentityProviderConfigurationInput) (r0 *worklink.UpdateIdentityProviderConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateIdentityProviderConfiguration", i0)
	r0, _ = returns[0].(*worklink.UpdateIdentityProviderConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) UpdateIdentityProviderConfigurationRequest(i0 *worklink.UpdateIdentityProviderConfigurationInput) (r0 *request.Request, r1 *worklink.UpdateIdentityProviderConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateIdentityProviderConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*worklink.UpdateIdentityProviderConfigurationOutput)
	return
}

func (d *WorkLinkDouble) UpdateIdentityProviderConfigurationWithContext(i0 context.Context, i1 *worklink.UpdateIdentityProviderConfigurationInput, i2 ...request.Option) (r0 *worklink.UpdateIdentityProviderConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateIdentityProviderConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*worklink.UpdateIdentityProviderConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkLinkDouble) fakeUpdateIdentityProviderConfigurationWithContext(ctx context.Context, in *worklink.UpdateIdentityProviderConfigurationInput, _ ...request.Option) (*worklink.UpdateIdentityProviderConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateIdentityProviderConfiguration cancelled", ctx.Err())
	default:
		return d.UpdateIdentityProviderConfiguration(in)
	}
}
