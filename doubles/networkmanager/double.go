// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:14:10+11:00

// Package networkmanagerdouble provides a TestDouble implementation of networkmanageriface.NetworkManagerAPI
package networkmanagerdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/networkmanager"
	"github.com/aws/aws-sdk-go/service/networkmanager/networkmanageriface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// NetworkManagerDouble is TestDouble for networkmanageriface.NetworkManagerAPI
type NetworkManagerDouble struct {
	networkmanageriface.NetworkManagerAPI
	*awsdouble.AWSTestDouble
}

// Constructor for NetworkManagerDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *NetworkManagerDouble {
	result := &NetworkManagerDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*networkmanageriface.NetworkManagerAPI)(nil), configurators...)
	return result
}

func (d *NetworkManagerDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *NetworkManagerDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AssociateCustomerGatewayWithContext":
		return m.Fake(d.fakeAssociateCustomerGatewayWithContext)

	case "AssociateLinkWithContext":
		return m.Fake(d.fakeAssociateLinkWithContext)

	case "CreateDeviceWithContext":
		return m.Fake(d.fakeCreateDeviceWithContext)

	case "CreateGlobalNetworkWithContext":
		return m.Fake(d.fakeCreateGlobalNetworkWithContext)

	case "CreateLinkWithContext":
		return m.Fake(d.fakeCreateLinkWithContext)

	case "CreateSiteWithContext":
		return m.Fake(d.fakeCreateSiteWithContext)

	case "DeleteDeviceWithContext":
		return m.Fake(d.fakeDeleteDeviceWithContext)

	case "DeleteGlobalNetworkWithContext":
		return m.Fake(d.fakeDeleteGlobalNetworkWithContext)

	case "DeleteLinkWithContext":
		return m.Fake(d.fakeDeleteLinkWithContext)

	case "DeleteSiteWithContext":
		return m.Fake(d.fakeDeleteSiteWithContext)

	case "DeregisterTransitGatewayWithContext":
		return m.Fake(d.fakeDeregisterTransitGatewayWithContext)

	case "DescribeGlobalNetworksPages":
		return m.Fake(d.fakeDescribeGlobalNetworksPages)

	case "DescribeGlobalNetworksPagesWithContext":
		return m.Fake(d.fakeDescribeGlobalNetworksPagesWithContext)

	case "DescribeGlobalNetworksWithContext":
		return m.Fake(d.fakeDescribeGlobalNetworksWithContext)

	case "DisassociateCustomerGatewayWithContext":
		return m.Fake(d.fakeDisassociateCustomerGatewayWithContext)

	case "DisassociateLinkWithContext":
		return m.Fake(d.fakeDisassociateLinkWithContext)

	case "GetCustomerGatewayAssociationsPages":
		return m.Fake(d.fakeGetCustomerGatewayAssociationsPages)

	case "GetCustomerGatewayAssociationsPagesWithContext":
		return m.Fake(d.fakeGetCustomerGatewayAssociationsPagesWithContext)

	case "GetCustomerGatewayAssociationsWithContext":
		return m.Fake(d.fakeGetCustomerGatewayAssociationsWithContext)

	case "GetDevicesPages":
		return m.Fake(d.fakeGetDevicesPages)

	case "GetDevicesPagesWithContext":
		return m.Fake(d.fakeGetDevicesPagesWithContext)

	case "GetDevicesWithContext":
		return m.Fake(d.fakeGetDevicesWithContext)

	case "GetLinkAssociationsPages":
		return m.Fake(d.fakeGetLinkAssociationsPages)

	case "GetLinkAssociationsPagesWithContext":
		return m.Fake(d.fakeGetLinkAssociationsPagesWithContext)

	case "GetLinkAssociationsWithContext":
		return m.Fake(d.fakeGetLinkAssociationsWithContext)

	case "GetLinksPages":
		return m.Fake(d.fakeGetLinksPages)

	case "GetLinksPagesWithContext":
		return m.Fake(d.fakeGetLinksPagesWithContext)

	case "GetLinksWithContext":
		return m.Fake(d.fakeGetLinksWithContext)

	case "GetSitesPages":
		return m.Fake(d.fakeGetSitesPages)

	case "GetSitesPagesWithContext":
		return m.Fake(d.fakeGetSitesPagesWithContext)

	case "GetSitesWithContext":
		return m.Fake(d.fakeGetSitesWithContext)

	case "GetTransitGatewayRegistrationsPages":
		return m.Fake(d.fakeGetTransitGatewayRegistrationsPages)

	case "GetTransitGatewayRegistrationsPagesWithContext":
		return m.Fake(d.fakeGetTransitGatewayRegistrationsPagesWithContext)

	case "GetTransitGatewayRegistrationsWithContext":
		return m.Fake(d.fakeGetTransitGatewayRegistrationsWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "RegisterTransitGatewayWithContext":
		return m.Fake(d.fakeRegisterTransitGatewayWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateDeviceWithContext":
		return m.Fake(d.fakeUpdateDeviceWithContext)

	case "UpdateGlobalNetworkWithContext":
		return m.Fake(d.fakeUpdateGlobalNetworkWithContext)

	case "UpdateLinkWithContext":
		return m.Fake(d.fakeUpdateLinkWithContext)

	case "UpdateSiteWithContext":
		return m.Fake(d.fakeUpdateSiteWithContext)

	default:
		return nil
	}
}

func (d *NetworkManagerDouble) AssociateCustomerGateway(i0 *networkmanager.AssociateCustomerGatewayInput) (r0 *networkmanager.AssociateCustomerGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateCustomerGateway", i0)
	r0, _ = returns[0].(*networkmanager.AssociateCustomerGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) AssociateCustomerGatewayRequest(i0 *networkmanager.AssociateCustomerGatewayInput) (r0 *request.Request, r1 *networkmanager.AssociateCustomerGatewayOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateCustomerGatewayRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*networkmanager.AssociateCustomerGatewayOutput)
	return
}

func (d *NetworkManagerDouble) AssociateCustomerGatewayWithContext(i0 context.Context, i1 *networkmanager.AssociateCustomerGatewayInput, i2 ...request.Option) (r0 *networkmanager.AssociateCustomerGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateCustomerGatewayWithContext", i0, i1, i2)
	r0, _ = returns[0].(*networkmanager.AssociateCustomerGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) fakeAssociateCustomerGatewayWithContext(ctx context.Context, in *networkmanager.AssociateCustomerGatewayInput, _ ...request.Option) (*networkmanager.AssociateCustomerGatewayOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateCustomerGateway cancelled", ctx.Err())
	default:
		return d.AssociateCustomerGateway(in)
	}
}

func (d *NetworkManagerDouble) AssociateLink(i0 *networkmanager.AssociateLinkInput) (r0 *networkmanager.AssociateLinkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateLink", i0)
	r0, _ = returns[0].(*networkmanager.AssociateLinkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) AssociateLinkRequest(i0 *networkmanager.AssociateLinkInput) (r0 *request.Request, r1 *networkmanager.AssociateLinkOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateLinkRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*networkmanager.AssociateLinkOutput)
	return
}

func (d *NetworkManagerDouble) AssociateLinkWithContext(i0 context.Context, i1 *networkmanager.AssociateLinkInput, i2 ...request.Option) (r0 *networkmanager.AssociateLinkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateLinkWithContext", i0, i1, i2)
	r0, _ = returns[0].(*networkmanager.AssociateLinkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) fakeAssociateLinkWithContext(ctx context.Context, in *networkmanager.AssociateLinkInput, _ ...request.Option) (*networkmanager.AssociateLinkOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateLink cancelled", ctx.Err())
	default:
		return d.AssociateLink(in)
	}
}

func (d *NetworkManagerDouble) CreateDevice(i0 *networkmanager.CreateDeviceInput) (r0 *networkmanager.CreateDeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDevice", i0)
	r0, _ = returns[0].(*networkmanager.CreateDeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) CreateDeviceRequest(i0 *networkmanager.CreateDeviceInput) (r0 *request.Request, r1 *networkmanager.CreateDeviceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDeviceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*networkmanager.CreateDeviceOutput)
	return
}

func (d *NetworkManagerDouble) CreateDeviceWithContext(i0 context.Context, i1 *networkmanager.CreateDeviceInput, i2 ...request.Option) (r0 *networkmanager.CreateDeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDeviceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*networkmanager.CreateDeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) fakeCreateDeviceWithContext(ctx context.Context, in *networkmanager.CreateDeviceInput, _ ...request.Option) (*networkmanager.CreateDeviceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDevice cancelled", ctx.Err())
	default:
		return d.CreateDevice(in)
	}
}

func (d *NetworkManagerDouble) CreateGlobalNetwork(i0 *networkmanager.CreateGlobalNetworkInput) (r0 *networkmanager.CreateGlobalNetworkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGlobalNetwork", i0)
	r0, _ = returns[0].(*networkmanager.CreateGlobalNetworkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) CreateGlobalNetworkRequest(i0 *networkmanager.CreateGlobalNetworkInput) (r0 *request.Request, r1 *networkmanager.CreateGlobalNetworkOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGlobalNetworkRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*networkmanager.CreateGlobalNetworkOutput)
	return
}

func (d *NetworkManagerDouble) CreateGlobalNetworkWithContext(i0 context.Context, i1 *networkmanager.CreateGlobalNetworkInput, i2 ...request.Option) (r0 *networkmanager.CreateGlobalNetworkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGlobalNetworkWithContext", i0, i1, i2)
	r0, _ = returns[0].(*networkmanager.CreateGlobalNetworkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) fakeCreateGlobalNetworkWithContext(ctx context.Context, in *networkmanager.CreateGlobalNetworkInput, _ ...request.Option) (*networkmanager.CreateGlobalNetworkOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateGlobalNetwork cancelled", ctx.Err())
	default:
		return d.CreateGlobalNetwork(in)
	}
}

func (d *NetworkManagerDouble) CreateLink(i0 *networkmanager.CreateLinkInput) (r0 *networkmanager.CreateLinkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLink", i0)
	r0, _ = returns[0].(*networkmanager.CreateLinkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) CreateLinkRequest(i0 *networkmanager.CreateLinkInput) (r0 *request.Request, r1 *networkmanager.CreateLinkOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLinkRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*networkmanager.CreateLinkOutput)
	return
}

func (d *NetworkManagerDouble) CreateLinkWithContext(i0 context.Context, i1 *networkmanager.CreateLinkInput, i2 ...request.Option) (r0 *networkmanager.CreateLinkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLinkWithContext", i0, i1, i2)
	r0, _ = returns[0].(*networkmanager.CreateLinkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) fakeCreateLinkWithContext(ctx context.Context, in *networkmanager.CreateLinkInput, _ ...request.Option) (*networkmanager.CreateLinkOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateLink cancelled", ctx.Err())
	default:
		return d.CreateLink(in)
	}
}

func (d *NetworkManagerDouble) CreateSite(i0 *networkmanager.CreateSiteInput) (r0 *networkmanager.CreateSiteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSite", i0)
	r0, _ = returns[0].(*networkmanager.CreateSiteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) CreateSiteRequest(i0 *networkmanager.CreateSiteInput) (r0 *request.Request, r1 *networkmanager.CreateSiteOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSiteRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*networkmanager.CreateSiteOutput)
	return
}

func (d *NetworkManagerDouble) CreateSiteWithContext(i0 context.Context, i1 *networkmanager.CreateSiteInput, i2 ...request.Option) (r0 *networkmanager.CreateSiteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSiteWithContext", i0, i1, i2)
	r0, _ = returns[0].(*networkmanager.CreateSiteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) fakeCreateSiteWithContext(ctx context.Context, in *networkmanager.CreateSiteInput, _ ...request.Option) (*networkmanager.CreateSiteOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateSite cancelled", ctx.Err())
	default:
		return d.CreateSite(in)
	}
}

func (d *NetworkManagerDouble) DeleteDevice(i0 *networkmanager.DeleteDeviceInput) (r0 *networkmanager.DeleteDeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDevice", i0)
	r0, _ = returns[0].(*networkmanager.DeleteDeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) DeleteDeviceRequest(i0 *networkmanager.DeleteDeviceInput) (r0 *request.Request, r1 *networkmanager.DeleteDeviceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDeviceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*networkmanager.DeleteDeviceOutput)
	return
}

func (d *NetworkManagerDouble) DeleteDeviceWithContext(i0 context.Context, i1 *networkmanager.DeleteDeviceInput, i2 ...request.Option) (r0 *networkmanager.DeleteDeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDeviceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*networkmanager.DeleteDeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) fakeDeleteDeviceWithContext(ctx context.Context, in *networkmanager.DeleteDeviceInput, _ ...request.Option) (*networkmanager.DeleteDeviceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDevice cancelled", ctx.Err())
	default:
		return d.DeleteDevice(in)
	}
}

func (d *NetworkManagerDouble) DeleteGlobalNetwork(i0 *networkmanager.DeleteGlobalNetworkInput) (r0 *networkmanager.DeleteGlobalNetworkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGlobalNetwork", i0)
	r0, _ = returns[0].(*networkmanager.DeleteGlobalNetworkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) DeleteGlobalNetworkRequest(i0 *networkmanager.DeleteGlobalNetworkInput) (r0 *request.Request, r1 *networkmanager.DeleteGlobalNetworkOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGlobalNetworkRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*networkmanager.DeleteGlobalNetworkOutput)
	return
}

func (d *NetworkManagerDouble) DeleteGlobalNetworkWithContext(i0 context.Context, i1 *networkmanager.DeleteGlobalNetworkInput, i2 ...request.Option) (r0 *networkmanager.DeleteGlobalNetworkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGlobalNetworkWithContext", i0, i1, i2)
	r0, _ = returns[0].(*networkmanager.DeleteGlobalNetworkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) fakeDeleteGlobalNetworkWithContext(ctx context.Context, in *networkmanager.DeleteGlobalNetworkInput, _ ...request.Option) (*networkmanager.DeleteGlobalNetworkOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteGlobalNetwork cancelled", ctx.Err())
	default:
		return d.DeleteGlobalNetwork(in)
	}
}

func (d *NetworkManagerDouble) DeleteLink(i0 *networkmanager.DeleteLinkInput) (r0 *networkmanager.DeleteLinkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLink", i0)
	r0, _ = returns[0].(*networkmanager.DeleteLinkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) DeleteLinkRequest(i0 *networkmanager.DeleteLinkInput) (r0 *request.Request, r1 *networkmanager.DeleteLinkOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLinkRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*networkmanager.DeleteLinkOutput)
	return
}

func (d *NetworkManagerDouble) DeleteLinkWithContext(i0 context.Context, i1 *networkmanager.DeleteLinkInput, i2 ...request.Option) (r0 *networkmanager.DeleteLinkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLinkWithContext", i0, i1, i2)
	r0, _ = returns[0].(*networkmanager.DeleteLinkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) fakeDeleteLinkWithContext(ctx context.Context, in *networkmanager.DeleteLinkInput, _ ...request.Option) (*networkmanager.DeleteLinkOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteLink cancelled", ctx.Err())
	default:
		return d.DeleteLink(in)
	}
}

func (d *NetworkManagerDouble) DeleteSite(i0 *networkmanager.DeleteSiteInput) (r0 *networkmanager.DeleteSiteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSite", i0)
	r0, _ = returns[0].(*networkmanager.DeleteSiteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) DeleteSiteRequest(i0 *networkmanager.DeleteSiteInput) (r0 *request.Request, r1 *networkmanager.DeleteSiteOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSiteRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*networkmanager.DeleteSiteOutput)
	return
}

func (d *NetworkManagerDouble) DeleteSiteWithContext(i0 context.Context, i1 *networkmanager.DeleteSiteInput, i2 ...request.Option) (r0 *networkmanager.DeleteSiteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSiteWithContext", i0, i1, i2)
	r0, _ = returns[0].(*networkmanager.DeleteSiteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) fakeDeleteSiteWithContext(ctx context.Context, in *networkmanager.DeleteSiteInput, _ ...request.Option) (*networkmanager.DeleteSiteOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteSite cancelled", ctx.Err())
	default:
		return d.DeleteSite(in)
	}
}

func (d *NetworkManagerDouble) DeregisterTransitGateway(i0 *networkmanager.DeregisterTransitGatewayInput) (r0 *networkmanager.DeregisterTransitGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterTransitGateway", i0)
	r0, _ = returns[0].(*networkmanager.DeregisterTransitGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) DeregisterTransitGatewayRequest(i0 *networkmanager.DeregisterTransitGatewayInput) (r0 *request.Request, r1 *networkmanager.DeregisterTransitGatewayOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterTransitGatewayRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*networkmanager.DeregisterTransitGatewayOutput)
	return
}

func (d *NetworkManagerDouble) DeregisterTransitGatewayWithContext(i0 context.Context, i1 *networkmanager.DeregisterTransitGatewayInput, i2 ...request.Option) (r0 *networkmanager.DeregisterTransitGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterTransitGatewayWithContext", i0, i1, i2)
	r0, _ = returns[0].(*networkmanager.DeregisterTransitGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) fakeDeregisterTransitGatewayWithContext(ctx context.Context, in *networkmanager.DeregisterTransitGatewayInput, _ ...request.Option) (*networkmanager.DeregisterTransitGatewayOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeregisterTransitGateway cancelled", ctx.Err())
	default:
		return d.DeregisterTransitGateway(in)
	}
}

func (d *NetworkManagerDouble) DescribeGlobalNetworks(i0 *networkmanager.DescribeGlobalNetworksInput) (r0 *networkmanager.DescribeGlobalNetworksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGlobalNetworks", i0)
	r0, _ = returns[0].(*networkmanager.DescribeGlobalNetworksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) DescribeGlobalNetworksPages(i0 *networkmanager.DescribeGlobalNetworksInput, i1 func(*networkmanager.DescribeGlobalNetworksOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGlobalNetworksPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *NetworkManagerDouble) fakeDescribeGlobalNetworksPages(in *networkmanager.DescribeGlobalNetworksInput, pager func(*networkmanager.DescribeGlobalNetworksOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeGlobalNetworks", paginators, in, pager)
}

func (d *NetworkManagerDouble) DescribeGlobalNetworksPagesWithContext(i0 context.Context, i1 *networkmanager.DescribeGlobalNetworksInput, i2 func(*networkmanager.DescribeGlobalNetworksOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGlobalNetworksPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *NetworkManagerDouble) fakeDescribeGlobalNetworksPagesWithContext(ctx context.Context, in *networkmanager.DescribeGlobalNetworksInput, pager func(*networkmanager.DescribeGlobalNetworksOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeGlobalNetworks", paginators, ctx, in, pager, options...)
}

func (d *NetworkManagerDouble) DescribeGlobalNetworksRequest(i0 *networkmanager.DescribeGlobalNetworksInput) (r0 *request.Request, r1 *networkmanager.DescribeGlobalNetworksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGlobalNetworksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*networkmanager.DescribeGlobalNetworksOutput)
	return
}

func (d *NetworkManagerDouble) DescribeGlobalNetworksWithContext(i0 context.Context, i1 *networkmanager.DescribeGlobalNetworksInput, i2 ...request.Option) (r0 *networkmanager.DescribeGlobalNetworksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGlobalNetworksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*networkmanager.DescribeGlobalNetworksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) fakeDescribeGlobalNetworksWithContext(ctx context.Context, in *networkmanager.DescribeGlobalNetworksInput, _ ...request.Option) (*networkmanager.DescribeGlobalNetworksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeGlobalNetworks cancelled", ctx.Err())
	default:
		return d.DescribeGlobalNetworks(in)
	}
}

func (d *NetworkManagerDouble) DisassociateCustomerGateway(i0 *networkmanager.DisassociateCustomerGatewayInput) (r0 *networkmanager.DisassociateCustomerGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateCustomerGateway", i0)
	r0, _ = returns[0].(*networkmanager.DisassociateCustomerGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) DisassociateCustomerGatewayRequest(i0 *networkmanager.DisassociateCustomerGatewayInput) (r0 *request.Request, r1 *networkmanager.DisassociateCustomerGatewayOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateCustomerGatewayRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*networkmanager.DisassociateCustomerGatewayOutput)
	return
}

func (d *NetworkManagerDouble) DisassociateCustomerGatewayWithContext(i0 context.Context, i1 *networkmanager.DisassociateCustomerGatewayInput, i2 ...request.Option) (r0 *networkmanager.DisassociateCustomerGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateCustomerGatewayWithContext", i0, i1, i2)
	r0, _ = returns[0].(*networkmanager.DisassociateCustomerGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) fakeDisassociateCustomerGatewayWithContext(ctx context.Context, in *networkmanager.DisassociateCustomerGatewayInput, _ ...request.Option) (*networkmanager.DisassociateCustomerGatewayOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateCustomerGateway cancelled", ctx.Err())
	default:
		return d.DisassociateCustomerGateway(in)
	}
}

func (d *NetworkManagerDouble) DisassociateLink(i0 *networkmanager.DisassociateLinkInput) (r0 *networkmanager.DisassociateLinkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateLink", i0)
	r0, _ = returns[0].(*networkmanager.DisassociateLinkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) DisassociateLinkRequest(i0 *networkmanager.DisassociateLinkInput) (r0 *request.Request, r1 *networkmanager.DisassociateLinkOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateLinkRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*networkmanager.DisassociateLinkOutput)
	return
}

func (d *NetworkManagerDouble) DisassociateLinkWithContext(i0 context.Context, i1 *networkmanager.DisassociateLinkInput, i2 ...request.Option) (r0 *networkmanager.DisassociateLinkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateLinkWithContext", i0, i1, i2)
	r0, _ = returns[0].(*networkmanager.DisassociateLinkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) fakeDisassociateLinkWithContext(ctx context.Context, in *networkmanager.DisassociateLinkInput, _ ...request.Option) (*networkmanager.DisassociateLinkOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateLink cancelled", ctx.Err())
	default:
		return d.DisassociateLink(in)
	}
}

func (d *NetworkManagerDouble) GetCustomerGatewayAssociations(i0 *networkmanager.GetCustomerGatewayAssociationsInput) (r0 *networkmanager.GetCustomerGatewayAssociationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCustomerGatewayAssociations", i0)
	r0, _ = returns[0].(*networkmanager.GetCustomerGatewayAssociationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) GetCustomerGatewayAssociationsPages(i0 *networkmanager.GetCustomerGatewayAssociationsInput, i1 func(*networkmanager.GetCustomerGatewayAssociationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCustomerGatewayAssociationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *NetworkManagerDouble) fakeGetCustomerGatewayAssociationsPages(in *networkmanager.GetCustomerGatewayAssociationsInput, pager func(*networkmanager.GetCustomerGatewayAssociationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetCustomerGatewayAssociations", paginators, in, pager)
}

func (d *NetworkManagerDouble) GetCustomerGatewayAssociationsPagesWithContext(i0 context.Context, i1 *networkmanager.GetCustomerGatewayAssociationsInput, i2 func(*networkmanager.GetCustomerGatewayAssociationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCustomerGatewayAssociationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *NetworkManagerDouble) fakeGetCustomerGatewayAssociationsPagesWithContext(ctx context.Context, in *networkmanager.GetCustomerGatewayAssociationsInput, pager func(*networkmanager.GetCustomerGatewayAssociationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetCustomerGatewayAssociations", paginators, ctx, in, pager, options...)
}

func (d *NetworkManagerDouble) GetCustomerGatewayAssociationsRequest(i0 *networkmanager.GetCustomerGatewayAssociationsInput) (r0 *request.Request, r1 *networkmanager.GetCustomerGatewayAssociationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCustomerGatewayAssociationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*networkmanager.GetCustomerGatewayAssociationsOutput)
	return
}

func (d *NetworkManagerDouble) GetCustomerGatewayAssociationsWithContext(i0 context.Context, i1 *networkmanager.GetCustomerGatewayAssociationsInput, i2 ...request.Option) (r0 *networkmanager.GetCustomerGatewayAssociationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCustomerGatewayAssociationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*networkmanager.GetCustomerGatewayAssociationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) fakeGetCustomerGatewayAssociationsWithContext(ctx context.Context, in *networkmanager.GetCustomerGatewayAssociationsInput, _ ...request.Option) (*networkmanager.GetCustomerGatewayAssociationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetCustomerGatewayAssociations cancelled", ctx.Err())
	default:
		return d.GetCustomerGatewayAssociations(in)
	}
}

func (d *NetworkManagerDouble) GetDevices(i0 *networkmanager.GetDevicesInput) (r0 *networkmanager.GetDevicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDevices", i0)
	r0, _ = returns[0].(*networkmanager.GetDevicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) GetDevicesPages(i0 *networkmanager.GetDevicesInput, i1 func(*networkmanager.GetDevicesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDevicesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *NetworkManagerDouble) fakeGetDevicesPages(in *networkmanager.GetDevicesInput, pager func(*networkmanager.GetDevicesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetDevices", paginators, in, pager)
}

func (d *NetworkManagerDouble) GetDevicesPagesWithContext(i0 context.Context, i1 *networkmanager.GetDevicesInput, i2 func(*networkmanager.GetDevicesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDevicesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *NetworkManagerDouble) fakeGetDevicesPagesWithContext(ctx context.Context, in *networkmanager.GetDevicesInput, pager func(*networkmanager.GetDevicesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetDevices", paginators, ctx, in, pager, options...)
}

func (d *NetworkManagerDouble) GetDevicesRequest(i0 *networkmanager.GetDevicesInput) (r0 *request.Request, r1 *networkmanager.GetDevicesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDevicesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*networkmanager.GetDevicesOutput)
	return
}

func (d *NetworkManagerDouble) GetDevicesWithContext(i0 context.Context, i1 *networkmanager.GetDevicesInput, i2 ...request.Option) (r0 *networkmanager.GetDevicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDevicesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*networkmanager.GetDevicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) fakeGetDevicesWithContext(ctx context.Context, in *networkmanager.GetDevicesInput, _ ...request.Option) (*networkmanager.GetDevicesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDevices cancelled", ctx.Err())
	default:
		return d.GetDevices(in)
	}
}

func (d *NetworkManagerDouble) GetLinkAssociations(i0 *networkmanager.GetLinkAssociationsInput) (r0 *networkmanager.GetLinkAssociationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLinkAssociations", i0)
	r0, _ = returns[0].(*networkmanager.GetLinkAssociationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) GetLinkAssociationsPages(i0 *networkmanager.GetLinkAssociationsInput, i1 func(*networkmanager.GetLinkAssociationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLinkAssociationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *NetworkManagerDouble) fakeGetLinkAssociationsPages(in *networkmanager.GetLinkAssociationsInput, pager func(*networkmanager.GetLinkAssociationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetLinkAssociations", paginators, in, pager)
}

func (d *NetworkManagerDouble) GetLinkAssociationsPagesWithContext(i0 context.Context, i1 *networkmanager.GetLinkAssociationsInput, i2 func(*networkmanager.GetLinkAssociationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLinkAssociationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *NetworkManagerDouble) fakeGetLinkAssociationsPagesWithContext(ctx context.Context, in *networkmanager.GetLinkAssociationsInput, pager func(*networkmanager.GetLinkAssociationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetLinkAssociations", paginators, ctx, in, pager, options...)
}

func (d *NetworkManagerDouble) GetLinkAssociationsRequest(i0 *networkmanager.GetLinkAssociationsInput) (r0 *request.Request, r1 *networkmanager.GetLinkAssociationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLinkAssociationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*networkmanager.GetLinkAssociationsOutput)
	return
}

func (d *NetworkManagerDouble) GetLinkAssociationsWithContext(i0 context.Context, i1 *networkmanager.GetLinkAssociationsInput, i2 ...request.Option) (r0 *networkmanager.GetLinkAssociationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLinkAssociationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*networkmanager.GetLinkAssociationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) fakeGetLinkAssociationsWithContext(ctx context.Context, in *networkmanager.GetLinkAssociationsInput, _ ...request.Option) (*networkmanager.GetLinkAssociationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetLinkAssociations cancelled", ctx.Err())
	default:
		return d.GetLinkAssociations(in)
	}
}

func (d *NetworkManagerDouble) GetLinks(i0 *networkmanager.GetLinksInput) (r0 *networkmanager.GetLinksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLinks", i0)
	r0, _ = returns[0].(*networkmanager.GetLinksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) GetLinksPages(i0 *networkmanager.GetLinksInput, i1 func(*networkmanager.GetLinksOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLinksPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *NetworkManagerDouble) fakeGetLinksPages(in *networkmanager.GetLinksInput, pager func(*networkmanager.GetLinksOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetLinks", paginators, in, pager)
}

func (d *NetworkManagerDouble) GetLinksPagesWithContext(i0 context.Context, i1 *networkmanager.GetLinksInput, i2 func(*networkmanager.GetLinksOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLinksPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *NetworkManagerDouble) fakeGetLinksPagesWithContext(ctx context.Context, in *networkmanager.GetLinksInput, pager func(*networkmanager.GetLinksOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetLinks", paginators, ctx, in, pager, options...)
}

func (d *NetworkManagerDouble) GetLinksRequest(i0 *networkmanager.GetLinksInput) (r0 *request.Request, r1 *networkmanager.GetLinksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLinksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*networkmanager.GetLinksOutput)
	return
}

func (d *NetworkManagerDouble) GetLinksWithContext(i0 context.Context, i1 *networkmanager.GetLinksInput, i2 ...request.Option) (r0 *networkmanager.GetLinksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLinksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*networkmanager.GetLinksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) fakeGetLinksWithContext(ctx context.Context, in *networkmanager.GetLinksInput, _ ...request.Option) (*networkmanager.GetLinksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetLinks cancelled", ctx.Err())
	default:
		return d.GetLinks(in)
	}
}

func (d *NetworkManagerDouble) GetSites(i0 *networkmanager.GetSitesInput) (r0 *networkmanager.GetSitesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSites", i0)
	r0, _ = returns[0].(*networkmanager.GetSitesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) GetSitesPages(i0 *networkmanager.GetSitesInput, i1 func(*networkmanager.GetSitesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSitesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *NetworkManagerDouble) fakeGetSitesPages(in *networkmanager.GetSitesInput, pager func(*networkmanager.GetSitesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetSites", paginators, in, pager)
}

func (d *NetworkManagerDouble) GetSitesPagesWithContext(i0 context.Context, i1 *networkmanager.GetSitesInput, i2 func(*networkmanager.GetSitesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSitesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *NetworkManagerDouble) fakeGetSitesPagesWithContext(ctx context.Context, in *networkmanager.GetSitesInput, pager func(*networkmanager.GetSitesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetSites", paginators, ctx, in, pager, options...)
}

func (d *NetworkManagerDouble) GetSitesRequest(i0 *networkmanager.GetSitesInput) (r0 *request.Request, r1 *networkmanager.GetSitesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSitesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*networkmanager.GetSitesOutput)
	return
}

func (d *NetworkManagerDouble) GetSitesWithContext(i0 context.Context, i1 *networkmanager.GetSitesInput, i2 ...request.Option) (r0 *networkmanager.GetSitesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSitesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*networkmanager.GetSitesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) fakeGetSitesWithContext(ctx context.Context, in *networkmanager.GetSitesInput, _ ...request.Option) (*networkmanager.GetSitesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetSites cancelled", ctx.Err())
	default:
		return d.GetSites(in)
	}
}

func (d *NetworkManagerDouble) GetTransitGatewayRegistrations(i0 *networkmanager.GetTransitGatewayRegistrationsInput) (r0 *networkmanager.GetTransitGatewayRegistrationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTransitGatewayRegistrations", i0)
	r0, _ = returns[0].(*networkmanager.GetTransitGatewayRegistrationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) GetTransitGatewayRegistrationsPages(i0 *networkmanager.GetTransitGatewayRegistrationsInput, i1 func(*networkmanager.GetTransitGatewayRegistrationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTransitGatewayRegistrationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *NetworkManagerDouble) fakeGetTransitGatewayRegistrationsPages(in *networkmanager.GetTransitGatewayRegistrationsInput, pager func(*networkmanager.GetTransitGatewayRegistrationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetTransitGatewayRegistrations", paginators, in, pager)
}

func (d *NetworkManagerDouble) GetTransitGatewayRegistrationsPagesWithContext(i0 context.Context, i1 *networkmanager.GetTransitGatewayRegistrationsInput, i2 func(*networkmanager.GetTransitGatewayRegistrationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTransitGatewayRegistrationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *NetworkManagerDouble) fakeGetTransitGatewayRegistrationsPagesWithContext(ctx context.Context, in *networkmanager.GetTransitGatewayRegistrationsInput, pager func(*networkmanager.GetTransitGatewayRegistrationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetTransitGatewayRegistrations", paginators, ctx, in, pager, options...)
}

func (d *NetworkManagerDouble) GetTransitGatewayRegistrationsRequest(i0 *networkmanager.GetTransitGatewayRegistrationsInput) (r0 *request.Request, r1 *networkmanager.GetTransitGatewayRegistrationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTransitGatewayRegistrationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*networkmanager.GetTransitGatewayRegistrationsOutput)
	return
}

func (d *NetworkManagerDouble) GetTransitGatewayRegistrationsWithContext(i0 context.Context, i1 *networkmanager.GetTransitGatewayRegistrationsInput, i2 ...request.Option) (r0 *networkmanager.GetTransitGatewayRegistrationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTransitGatewayRegistrationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*networkmanager.GetTransitGatewayRegistrationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) fakeGetTransitGatewayRegistrationsWithContext(ctx context.Context, in *networkmanager.GetTransitGatewayRegistrationsInput, _ ...request.Option) (*networkmanager.GetTransitGatewayRegistrationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetTransitGatewayRegistrations cancelled", ctx.Err())
	default:
		return d.GetTransitGatewayRegistrations(in)
	}
}

func (d *NetworkManagerDouble) ListTagsForResource(i0 *networkmanager.ListTagsForResourceInput) (r0 *networkmanager.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*networkmanager.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) ListTagsForResourceRequest(i0 *networkmanager.ListTagsForResourceInput) (r0 *request.Request, r1 *networkmanager.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*networkmanager.ListTagsForResourceOutput)
	return
}

func (d *NetworkManagerDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *networkmanager.ListTagsForResourceInput, i2 ...request.Option) (r0 *networkmanager.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*networkmanager.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *networkmanager.ListTagsForResourceInput, _ ...request.Option) (*networkmanager.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *NetworkManagerDouble) RegisterTransitGateway(i0 *networkmanager.RegisterTransitGatewayInput) (r0 *networkmanager.RegisterTransitGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterTransitGateway", i0)
	r0, _ = returns[0].(*networkmanager.RegisterTransitGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) RegisterTransitGatewayRequest(i0 *networkmanager.RegisterTransitGatewayInput) (r0 *request.Request, r1 *networkmanager.RegisterTransitGatewayOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterTransitGatewayRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*networkmanager.RegisterTransitGatewayOutput)
	return
}

func (d *NetworkManagerDouble) RegisterTransitGatewayWithContext(i0 context.Context, i1 *networkmanager.RegisterTransitGatewayInput, i2 ...request.Option) (r0 *networkmanager.RegisterTransitGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterTransitGatewayWithContext", i0, i1, i2)
	r0, _ = returns[0].(*networkmanager.RegisterTransitGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) fakeRegisterTransitGatewayWithContext(ctx context.Context, in *networkmanager.RegisterTransitGatewayInput, _ ...request.Option) (*networkmanager.RegisterTransitGatewayOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterTransitGateway cancelled", ctx.Err())
	default:
		return d.RegisterTransitGateway(in)
	}
}

func (d *NetworkManagerDouble) TagResource(i0 *networkmanager.TagResourceInput) (r0 *networkmanager.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*networkmanager.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) TagResourceRequest(i0 *networkmanager.TagResourceInput) (r0 *request.Request, r1 *networkmanager.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*networkmanager.TagResourceOutput)
	return
}

func (d *NetworkManagerDouble) TagResourceWithContext(i0 context.Context, i1 *networkmanager.TagResourceInput, i2 ...request.Option) (r0 *networkmanager.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*networkmanager.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) fakeTagResourceWithContext(ctx context.Context, in *networkmanager.TagResourceInput, _ ...request.Option) (*networkmanager.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *NetworkManagerDouble) UntagResource(i0 *networkmanager.UntagResourceInput) (r0 *networkmanager.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*networkmanager.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) UntagResourceRequest(i0 *networkmanager.UntagResourceInput) (r0 *request.Request, r1 *networkmanager.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*networkmanager.UntagResourceOutput)
	return
}

func (d *NetworkManagerDouble) UntagResourceWithContext(i0 context.Context, i1 *networkmanager.UntagResourceInput, i2 ...request.Option) (r0 *networkmanager.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*networkmanager.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) fakeUntagResourceWithContext(ctx context.Context, in *networkmanager.UntagResourceInput, _ ...request.Option) (*networkmanager.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *NetworkManagerDouble) UpdateDevice(i0 *networkmanager.UpdateDeviceInput) (r0 *networkmanager.UpdateDeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDevice", i0)
	r0, _ = returns[0].(*networkmanager.UpdateDeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) UpdateDeviceRequest(i0 *networkmanager.UpdateDeviceInput) (r0 *request.Request, r1 *networkmanager.UpdateDeviceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDeviceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*networkmanager.UpdateDeviceOutput)
	return
}

func (d *NetworkManagerDouble) UpdateDeviceWithContext(i0 context.Context, i1 *networkmanager.UpdateDeviceInput, i2 ...request.Option) (r0 *networkmanager.UpdateDeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDeviceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*networkmanager.UpdateDeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) fakeUpdateDeviceWithContext(ctx context.Context, in *networkmanager.UpdateDeviceInput, _ ...request.Option) (*networkmanager.UpdateDeviceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDevice cancelled", ctx.Err())
	default:
		return d.UpdateDevice(in)
	}
}

func (d *NetworkManagerDouble) UpdateGlobalNetwork(i0 *networkmanager.UpdateGlobalNetworkInput) (r0 *networkmanager.UpdateGlobalNetworkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGlobalNetwork", i0)
	r0, _ = returns[0].(*networkmanager.UpdateGlobalNetworkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) UpdateGlobalNetworkRequest(i0 *networkmanager.UpdateGlobalNetworkInput) (r0 *request.Request, r1 *networkmanager.UpdateGlobalNetworkOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGlobalNetworkRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*networkmanager.UpdateGlobalNetworkOutput)
	return
}

func (d *NetworkManagerDouble) UpdateGlobalNetworkWithContext(i0 context.Context, i1 *networkmanager.UpdateGlobalNetworkInput, i2 ...request.Option) (r0 *networkmanager.UpdateGlobalNetworkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGlobalNetworkWithContext", i0, i1, i2)
	r0, _ = returns[0].(*networkmanager.UpdateGlobalNetworkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) fakeUpdateGlobalNetworkWithContext(ctx context.Context, in *networkmanager.UpdateGlobalNetworkInput, _ ...request.Option) (*networkmanager.UpdateGlobalNetworkOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateGlobalNetwork cancelled", ctx.Err())
	default:
		return d.UpdateGlobalNetwork(in)
	}
}

func (d *NetworkManagerDouble) UpdateLink(i0 *networkmanager.UpdateLinkInput) (r0 *networkmanager.UpdateLinkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateLink", i0)
	r0, _ = returns[0].(*networkmanager.UpdateLinkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) UpdateLinkRequest(i0 *networkmanager.UpdateLinkInput) (r0 *request.Request, r1 *networkmanager.UpdateLinkOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateLinkRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*networkmanager.UpdateLinkOutput)
	return
}

func (d *NetworkManagerDouble) UpdateLinkWithContext(i0 context.Context, i1 *networkmanager.UpdateLinkInput, i2 ...request.Option) (r0 *networkmanager.UpdateLinkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateLinkWithContext", i0, i1, i2)
	r0, _ = returns[0].(*networkmanager.UpdateLinkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) fakeUpdateLinkWithContext(ctx context.Context, in *networkmanager.UpdateLinkInput, _ ...request.Option) (*networkmanager.UpdateLinkOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateLink cancelled", ctx.Err())
	default:
		return d.UpdateLink(in)
	}
}

func (d *NetworkManagerDouble) UpdateSite(i0 *networkmanager.UpdateSiteInput) (r0 *networkmanager.UpdateSiteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSite", i0)
	r0, _ = returns[0].(*networkmanager.UpdateSiteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) UpdateSiteRequest(i0 *networkmanager.UpdateSiteInput) (r0 *request.Request, r1 *networkmanager.UpdateSiteOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSiteRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*networkmanager.UpdateSiteOutput)
	return
}

func (d *NetworkManagerDouble) UpdateSiteWithContext(i0 context.Context, i1 *networkmanager.UpdateSiteInput, i2 ...request.Option) (r0 *networkmanager.UpdateSiteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSiteWithContext", i0, i1, i2)
	r0, _ = returns[0].(*networkmanager.UpdateSiteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NetworkManagerDouble) fakeUpdateSiteWithContext(ctx context.Context, in *networkmanager.UpdateSiteInput, _ ...request.Option) (*networkmanager.UpdateSiteOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateSite cancelled", ctx.Err())
	default:
		return d.UpdateSite(in)
	}
}
