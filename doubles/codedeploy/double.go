// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:11:48+11:00

// Package codedeploydouble provides a TestDouble implementation of codedeployiface.CodeDeployAPI
package codedeploydouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/codedeploy"
	"github.com/aws/aws-sdk-go/service/codedeploy/codedeployiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// CodeDeployDouble is TestDouble for codedeployiface.CodeDeployAPI
type CodeDeployDouble struct {
	codedeployiface.CodeDeployAPI
	*awsdouble.AWSTestDouble
}

// Constructor for CodeDeployDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *CodeDeployDouble {
	result := &CodeDeployDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*codedeployiface.CodeDeployAPI)(nil), configurators...)
	return result
}

func (d *CodeDeployDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *CodeDeployDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AddTagsToOnPremisesInstancesWithContext":
		return m.Fake(d.fakeAddTagsToOnPremisesInstancesWithContext)

	case "BatchGetApplicationRevisionsWithContext":
		return m.Fake(d.fakeBatchGetApplicationRevisionsWithContext)

	case "BatchGetApplicationsWithContext":
		return m.Fake(d.fakeBatchGetApplicationsWithContext)

	case "BatchGetDeploymentGroupsWithContext":
		return m.Fake(d.fakeBatchGetDeploymentGroupsWithContext)

	case "BatchGetDeploymentInstancesWithContext":
		return m.Fake(d.fakeBatchGetDeploymentInstancesWithContext)

	case "BatchGetDeploymentTargetsWithContext":
		return m.Fake(d.fakeBatchGetDeploymentTargetsWithContext)

	case "BatchGetDeploymentsWithContext":
		return m.Fake(d.fakeBatchGetDeploymentsWithContext)

	case "BatchGetOnPremisesInstancesWithContext":
		return m.Fake(d.fakeBatchGetOnPremisesInstancesWithContext)

	case "ContinueDeploymentWithContext":
		return m.Fake(d.fakeContinueDeploymentWithContext)

	case "CreateApplicationWithContext":
		return m.Fake(d.fakeCreateApplicationWithContext)

	case "CreateDeploymentConfigWithContext":
		return m.Fake(d.fakeCreateDeploymentConfigWithContext)

	case "CreateDeploymentGroupWithContext":
		return m.Fake(d.fakeCreateDeploymentGroupWithContext)

	case "CreateDeploymentWithContext":
		return m.Fake(d.fakeCreateDeploymentWithContext)

	case "DeleteApplicationWithContext":
		return m.Fake(d.fakeDeleteApplicationWithContext)

	case "DeleteDeploymentConfigWithContext":
		return m.Fake(d.fakeDeleteDeploymentConfigWithContext)

	case "DeleteDeploymentGroupWithContext":
		return m.Fake(d.fakeDeleteDeploymentGroupWithContext)

	case "DeleteGitHubAccountTokenWithContext":
		return m.Fake(d.fakeDeleteGitHubAccountTokenWithContext)

	case "DeregisterOnPremisesInstanceWithContext":
		return m.Fake(d.fakeDeregisterOnPremisesInstanceWithContext)

	case "GetApplicationRevisionWithContext":
		return m.Fake(d.fakeGetApplicationRevisionWithContext)

	case "GetApplicationWithContext":
		return m.Fake(d.fakeGetApplicationWithContext)

	case "GetDeploymentConfigWithContext":
		return m.Fake(d.fakeGetDeploymentConfigWithContext)

	case "GetDeploymentGroupWithContext":
		return m.Fake(d.fakeGetDeploymentGroupWithContext)

	case "GetDeploymentInstanceWithContext":
		return m.Fake(d.fakeGetDeploymentInstanceWithContext)

	case "GetDeploymentTargetWithContext":
		return m.Fake(d.fakeGetDeploymentTargetWithContext)

	case "GetDeploymentWithContext":
		return m.Fake(d.fakeGetDeploymentWithContext)

	case "GetOnPremisesInstanceWithContext":
		return m.Fake(d.fakeGetOnPremisesInstanceWithContext)

	case "ListApplicationRevisionsPages":
		return m.Fake(d.fakeListApplicationRevisionsPages)

	case "ListApplicationRevisionsPagesWithContext":
		return m.Fake(d.fakeListApplicationRevisionsPagesWithContext)

	case "ListApplicationRevisionsWithContext":
		return m.Fake(d.fakeListApplicationRevisionsWithContext)

	case "ListApplicationsPages":
		return m.Fake(d.fakeListApplicationsPages)

	case "ListApplicationsPagesWithContext":
		return m.Fake(d.fakeListApplicationsPagesWithContext)

	case "ListApplicationsWithContext":
		return m.Fake(d.fakeListApplicationsWithContext)

	case "ListDeploymentConfigsPages":
		return m.Fake(d.fakeListDeploymentConfigsPages)

	case "ListDeploymentConfigsPagesWithContext":
		return m.Fake(d.fakeListDeploymentConfigsPagesWithContext)

	case "ListDeploymentConfigsWithContext":
		return m.Fake(d.fakeListDeploymentConfigsWithContext)

	case "ListDeploymentGroupsPages":
		return m.Fake(d.fakeListDeploymentGroupsPages)

	case "ListDeploymentGroupsPagesWithContext":
		return m.Fake(d.fakeListDeploymentGroupsPagesWithContext)

	case "ListDeploymentGroupsWithContext":
		return m.Fake(d.fakeListDeploymentGroupsWithContext)

	case "ListDeploymentInstancesPages":
		return m.Fake(d.fakeListDeploymentInstancesPages)

	case "ListDeploymentInstancesPagesWithContext":
		return m.Fake(d.fakeListDeploymentInstancesPagesWithContext)

	case "ListDeploymentInstancesWithContext":
		return m.Fake(d.fakeListDeploymentInstancesWithContext)

	case "ListDeploymentTargetsWithContext":
		return m.Fake(d.fakeListDeploymentTargetsWithContext)

	case "ListDeploymentsPages":
		return m.Fake(d.fakeListDeploymentsPages)

	case "ListDeploymentsPagesWithContext":
		return m.Fake(d.fakeListDeploymentsPagesWithContext)

	case "ListDeploymentsWithContext":
		return m.Fake(d.fakeListDeploymentsWithContext)

	case "ListGitHubAccountTokenNamesWithContext":
		return m.Fake(d.fakeListGitHubAccountTokenNamesWithContext)

	case "ListOnPremisesInstancesWithContext":
		return m.Fake(d.fakeListOnPremisesInstancesWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "PutLifecycleEventHookExecutionStatusWithContext":
		return m.Fake(d.fakePutLifecycleEventHookExecutionStatusWithContext)

	case "RegisterApplicationRevisionWithContext":
		return m.Fake(d.fakeRegisterApplicationRevisionWithContext)

	case "RegisterOnPremisesInstanceWithContext":
		return m.Fake(d.fakeRegisterOnPremisesInstanceWithContext)

	case "RemoveTagsFromOnPremisesInstancesWithContext":
		return m.Fake(d.fakeRemoveTagsFromOnPremisesInstancesWithContext)

	case "SkipWaitTimeForInstanceTerminationWithContext":
		return m.Fake(d.fakeSkipWaitTimeForInstanceTerminationWithContext)

	case "StopDeploymentWithContext":
		return m.Fake(d.fakeStopDeploymentWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateApplicationWithContext":
		return m.Fake(d.fakeUpdateApplicationWithContext)

	case "UpdateDeploymentGroupWithContext":
		return m.Fake(d.fakeUpdateDeploymentGroupWithContext)

	case "WaitUntilDeploymentSuccessful":
		return m.Fake(d.fakeWaitUntilDeploymentSuccessful)

	case "WaitUntilDeploymentSuccessfulWithContext":
		return m.Fake(d.fakeWaitUntilDeploymentSuccessfulWithContext)

	default:
		return nil
	}
}

func (d *CodeDeployDouble) AddTagsToOnPremisesInstances(i0 *codedeploy.AddTagsToOnPremisesInstancesInput) (r0 *codedeploy.AddTagsToOnPremisesInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToOnPremisesInstances", i0)
	r0, _ = returns[0].(*codedeploy.AddTagsToOnPremisesInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) AddTagsToOnPremisesInstancesRequest(i0 *codedeploy.AddTagsToOnPremisesInstancesInput) (r0 *request.Request, r1 *codedeploy.AddTagsToOnPremisesInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToOnPremisesInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.AddTagsToOnPremisesInstancesOutput)
	return
}

func (d *CodeDeployDouble) AddTagsToOnPremisesInstancesWithContext(i0 context.Context, i1 *codedeploy.AddTagsToOnPremisesInstancesInput, i2 ...request.Option) (r0 *codedeploy.AddTagsToOnPremisesInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToOnPremisesInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.AddTagsToOnPremisesInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeAddTagsToOnPremisesInstancesWithContext(ctx context.Context, in *codedeploy.AddTagsToOnPremisesInstancesInput, _ ...request.Option) (*codedeploy.AddTagsToOnPremisesInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddTagsToOnPremisesInstances cancelled", ctx.Err())
	default:
		return d.AddTagsToOnPremisesInstances(in)
	}
}

func (d *CodeDeployDouble) BatchGetApplicationRevisions(i0 *codedeploy.BatchGetApplicationRevisionsInput) (r0 *codedeploy.BatchGetApplicationRevisionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetApplicationRevisions", i0)
	r0, _ = returns[0].(*codedeploy.BatchGetApplicationRevisionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) BatchGetApplicationRevisionsRequest(i0 *codedeploy.BatchGetApplicationRevisionsInput) (r0 *request.Request, r1 *codedeploy.BatchGetApplicationRevisionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetApplicationRevisionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.BatchGetApplicationRevisionsOutput)
	return
}

func (d *CodeDeployDouble) BatchGetApplicationRevisionsWithContext(i0 context.Context, i1 *codedeploy.BatchGetApplicationRevisionsInput, i2 ...request.Option) (r0 *codedeploy.BatchGetApplicationRevisionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetApplicationRevisionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.BatchGetApplicationRevisionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeBatchGetApplicationRevisionsWithContext(ctx context.Context, in *codedeploy.BatchGetApplicationRevisionsInput, _ ...request.Option) (*codedeploy.BatchGetApplicationRevisionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchGetApplicationRevisions cancelled", ctx.Err())
	default:
		return d.BatchGetApplicationRevisions(in)
	}
}

func (d *CodeDeployDouble) BatchGetApplications(i0 *codedeploy.BatchGetApplicationsInput) (r0 *codedeploy.BatchGetApplicationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetApplications", i0)
	r0, _ = returns[0].(*codedeploy.BatchGetApplicationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) BatchGetApplicationsRequest(i0 *codedeploy.BatchGetApplicationsInput) (r0 *request.Request, r1 *codedeploy.BatchGetApplicationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetApplicationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.BatchGetApplicationsOutput)
	return
}

func (d *CodeDeployDouble) BatchGetApplicationsWithContext(i0 context.Context, i1 *codedeploy.BatchGetApplicationsInput, i2 ...request.Option) (r0 *codedeploy.BatchGetApplicationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetApplicationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.BatchGetApplicationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeBatchGetApplicationsWithContext(ctx context.Context, in *codedeploy.BatchGetApplicationsInput, _ ...request.Option) (*codedeploy.BatchGetApplicationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchGetApplications cancelled", ctx.Err())
	default:
		return d.BatchGetApplications(in)
	}
}

func (d *CodeDeployDouble) BatchGetDeploymentGroups(i0 *codedeploy.BatchGetDeploymentGroupsInput) (r0 *codedeploy.BatchGetDeploymentGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetDeploymentGroups", i0)
	r0, _ = returns[0].(*codedeploy.BatchGetDeploymentGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) BatchGetDeploymentGroupsRequest(i0 *codedeploy.BatchGetDeploymentGroupsInput) (r0 *request.Request, r1 *codedeploy.BatchGetDeploymentGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetDeploymentGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.BatchGetDeploymentGroupsOutput)
	return
}

func (d *CodeDeployDouble) BatchGetDeploymentGroupsWithContext(i0 context.Context, i1 *codedeploy.BatchGetDeploymentGroupsInput, i2 ...request.Option) (r0 *codedeploy.BatchGetDeploymentGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetDeploymentGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.BatchGetDeploymentGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeBatchGetDeploymentGroupsWithContext(ctx context.Context, in *codedeploy.BatchGetDeploymentGroupsInput, _ ...request.Option) (*codedeploy.BatchGetDeploymentGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchGetDeploymentGroups cancelled", ctx.Err())
	default:
		return d.BatchGetDeploymentGroups(in)
	}
}

func (d *CodeDeployDouble) BatchGetDeploymentInstances(i0 *codedeploy.BatchGetDeploymentInstancesInput) (r0 *codedeploy.BatchGetDeploymentInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetDeploymentInstances", i0)
	r0, _ = returns[0].(*codedeploy.BatchGetDeploymentInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) BatchGetDeploymentInstancesRequest(i0 *codedeploy.BatchGetDeploymentInstancesInput) (r0 *request.Request, r1 *codedeploy.BatchGetDeploymentInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetDeploymentInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.BatchGetDeploymentInstancesOutput)
	return
}

func (d *CodeDeployDouble) BatchGetDeploymentInstancesWithContext(i0 context.Context, i1 *codedeploy.BatchGetDeploymentInstancesInput, i2 ...request.Option) (r0 *codedeploy.BatchGetDeploymentInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetDeploymentInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.BatchGetDeploymentInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeBatchGetDeploymentInstancesWithContext(ctx context.Context, in *codedeploy.BatchGetDeploymentInstancesInput, _ ...request.Option) (*codedeploy.BatchGetDeploymentInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchGetDeploymentInstances cancelled", ctx.Err())
	default:
		return d.BatchGetDeploymentInstances(in)
	}
}

func (d *CodeDeployDouble) BatchGetDeploymentTargets(i0 *codedeploy.BatchGetDeploymentTargetsInput) (r0 *codedeploy.BatchGetDeploymentTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetDeploymentTargets", i0)
	r0, _ = returns[0].(*codedeploy.BatchGetDeploymentTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) BatchGetDeploymentTargetsRequest(i0 *codedeploy.BatchGetDeploymentTargetsInput) (r0 *request.Request, r1 *codedeploy.BatchGetDeploymentTargetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetDeploymentTargetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.BatchGetDeploymentTargetsOutput)
	return
}

func (d *CodeDeployDouble) BatchGetDeploymentTargetsWithContext(i0 context.Context, i1 *codedeploy.BatchGetDeploymentTargetsInput, i2 ...request.Option) (r0 *codedeploy.BatchGetDeploymentTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetDeploymentTargetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.BatchGetDeploymentTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeBatchGetDeploymentTargetsWithContext(ctx context.Context, in *codedeploy.BatchGetDeploymentTargetsInput, _ ...request.Option) (*codedeploy.BatchGetDeploymentTargetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchGetDeploymentTargets cancelled", ctx.Err())
	default:
		return d.BatchGetDeploymentTargets(in)
	}
}

func (d *CodeDeployDouble) BatchGetDeployments(i0 *codedeploy.BatchGetDeploymentsInput) (r0 *codedeploy.BatchGetDeploymentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetDeployments", i0)
	r0, _ = returns[0].(*codedeploy.BatchGetDeploymentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) BatchGetDeploymentsRequest(i0 *codedeploy.BatchGetDeploymentsInput) (r0 *request.Request, r1 *codedeploy.BatchGetDeploymentsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetDeploymentsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.BatchGetDeploymentsOutput)
	return
}

func (d *CodeDeployDouble) BatchGetDeploymentsWithContext(i0 context.Context, i1 *codedeploy.BatchGetDeploymentsInput, i2 ...request.Option) (r0 *codedeploy.BatchGetDeploymentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetDeploymentsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.BatchGetDeploymentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeBatchGetDeploymentsWithContext(ctx context.Context, in *codedeploy.BatchGetDeploymentsInput, _ ...request.Option) (*codedeploy.BatchGetDeploymentsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchGetDeployments cancelled", ctx.Err())
	default:
		return d.BatchGetDeployments(in)
	}
}

func (d *CodeDeployDouble) BatchGetOnPremisesInstances(i0 *codedeploy.BatchGetOnPremisesInstancesInput) (r0 *codedeploy.BatchGetOnPremisesInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetOnPremisesInstances", i0)
	r0, _ = returns[0].(*codedeploy.BatchGetOnPremisesInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) BatchGetOnPremisesInstancesRequest(i0 *codedeploy.BatchGetOnPremisesInstancesInput) (r0 *request.Request, r1 *codedeploy.BatchGetOnPremisesInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetOnPremisesInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.BatchGetOnPremisesInstancesOutput)
	return
}

func (d *CodeDeployDouble) BatchGetOnPremisesInstancesWithContext(i0 context.Context, i1 *codedeploy.BatchGetOnPremisesInstancesInput, i2 ...request.Option) (r0 *codedeploy.BatchGetOnPremisesInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetOnPremisesInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.BatchGetOnPremisesInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeBatchGetOnPremisesInstancesWithContext(ctx context.Context, in *codedeploy.BatchGetOnPremisesInstancesInput, _ ...request.Option) (*codedeploy.BatchGetOnPremisesInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchGetOnPremisesInstances cancelled", ctx.Err())
	default:
		return d.BatchGetOnPremisesInstances(in)
	}
}

func (d *CodeDeployDouble) ContinueDeployment(i0 *codedeploy.ContinueDeploymentInput) (r0 *codedeploy.ContinueDeploymentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ContinueDeployment", i0)
	r0, _ = returns[0].(*codedeploy.ContinueDeploymentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) ContinueDeploymentRequest(i0 *codedeploy.ContinueDeploymentInput) (r0 *request.Request, r1 *codedeploy.ContinueDeploymentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ContinueDeploymentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.ContinueDeploymentOutput)
	return
}

func (d *CodeDeployDouble) ContinueDeploymentWithContext(i0 context.Context, i1 *codedeploy.ContinueDeploymentInput, i2 ...request.Option) (r0 *codedeploy.ContinueDeploymentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ContinueDeploymentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.ContinueDeploymentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeContinueDeploymentWithContext(ctx context.Context, in *codedeploy.ContinueDeploymentInput, _ ...request.Option) (*codedeploy.ContinueDeploymentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ContinueDeployment cancelled", ctx.Err())
	default:
		return d.ContinueDeployment(in)
	}
}

func (d *CodeDeployDouble) CreateApplication(i0 *codedeploy.CreateApplicationInput) (r0 *codedeploy.CreateApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApplication", i0)
	r0, _ = returns[0].(*codedeploy.CreateApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) CreateApplicationRequest(i0 *codedeploy.CreateApplicationInput) (r0 *request.Request, r1 *codedeploy.CreateApplicationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApplicationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.CreateApplicationOutput)
	return
}

func (d *CodeDeployDouble) CreateApplicationWithContext(i0 context.Context, i1 *codedeploy.CreateApplicationInput, i2 ...request.Option) (r0 *codedeploy.CreateApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApplicationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.CreateApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeCreateApplicationWithContext(ctx context.Context, in *codedeploy.CreateApplicationInput, _ ...request.Option) (*codedeploy.CreateApplicationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateApplication cancelled", ctx.Err())
	default:
		return d.CreateApplication(in)
	}
}

func (d *CodeDeployDouble) CreateDeployment(i0 *codedeploy.CreateDeploymentInput) (r0 *codedeploy.CreateDeploymentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDeployment", i0)
	r0, _ = returns[0].(*codedeploy.CreateDeploymentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) CreateDeploymentConfig(i0 *codedeploy.CreateDeploymentConfigInput) (r0 *codedeploy.CreateDeploymentConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDeploymentConfig", i0)
	r0, _ = returns[0].(*codedeploy.CreateDeploymentConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) CreateDeploymentConfigRequest(i0 *codedeploy.CreateDeploymentConfigInput) (r0 *request.Request, r1 *codedeploy.CreateDeploymentConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDeploymentConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.CreateDeploymentConfigOutput)
	return
}

func (d *CodeDeployDouble) CreateDeploymentConfigWithContext(i0 context.Context, i1 *codedeploy.CreateDeploymentConfigInput, i2 ...request.Option) (r0 *codedeploy.CreateDeploymentConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDeploymentConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.CreateDeploymentConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeCreateDeploymentConfigWithContext(ctx context.Context, in *codedeploy.CreateDeploymentConfigInput, _ ...request.Option) (*codedeploy.CreateDeploymentConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDeploymentConfig cancelled", ctx.Err())
	default:
		return d.CreateDeploymentConfig(in)
	}
}

func (d *CodeDeployDouble) CreateDeploymentGroup(i0 *codedeploy.CreateDeploymentGroupInput) (r0 *codedeploy.CreateDeploymentGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDeploymentGroup", i0)
	r0, _ = returns[0].(*codedeploy.CreateDeploymentGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) CreateDeploymentGroupRequest(i0 *codedeploy.CreateDeploymentGroupInput) (r0 *request.Request, r1 *codedeploy.CreateDeploymentGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDeploymentGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.CreateDeploymentGroupOutput)
	return
}

func (d *CodeDeployDouble) CreateDeploymentGroupWithContext(i0 context.Context, i1 *codedeploy.CreateDeploymentGroupInput, i2 ...request.Option) (r0 *codedeploy.CreateDeploymentGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDeploymentGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.CreateDeploymentGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeCreateDeploymentGroupWithContext(ctx context.Context, in *codedeploy.CreateDeploymentGroupInput, _ ...request.Option) (*codedeploy.CreateDeploymentGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDeploymentGroup cancelled", ctx.Err())
	default:
		return d.CreateDeploymentGroup(in)
	}
}

func (d *CodeDeployDouble) CreateDeploymentRequest(i0 *codedeploy.CreateDeploymentInput) (r0 *request.Request, r1 *codedeploy.CreateDeploymentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDeploymentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.CreateDeploymentOutput)
	return
}

func (d *CodeDeployDouble) CreateDeploymentWithContext(i0 context.Context, i1 *codedeploy.CreateDeploymentInput, i2 ...request.Option) (r0 *codedeploy.CreateDeploymentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDeploymentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.CreateDeploymentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeCreateDeploymentWithContext(ctx context.Context, in *codedeploy.CreateDeploymentInput, _ ...request.Option) (*codedeploy.CreateDeploymentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDeployment cancelled", ctx.Err())
	default:
		return d.CreateDeployment(in)
	}
}

func (d *CodeDeployDouble) DeleteApplication(i0 *codedeploy.DeleteApplicationInput) (r0 *codedeploy.DeleteApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApplication", i0)
	r0, _ = returns[0].(*codedeploy.DeleteApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) DeleteApplicationRequest(i0 *codedeploy.DeleteApplicationInput) (r0 *request.Request, r1 *codedeploy.DeleteApplicationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApplicationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.DeleteApplicationOutput)
	return
}

func (d *CodeDeployDouble) DeleteApplicationWithContext(i0 context.Context, i1 *codedeploy.DeleteApplicationInput, i2 ...request.Option) (r0 *codedeploy.DeleteApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApplicationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.DeleteApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeDeleteApplicationWithContext(ctx context.Context, in *codedeploy.DeleteApplicationInput, _ ...request.Option) (*codedeploy.DeleteApplicationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteApplication cancelled", ctx.Err())
	default:
		return d.DeleteApplication(in)
	}
}

func (d *CodeDeployDouble) DeleteDeploymentConfig(i0 *codedeploy.DeleteDeploymentConfigInput) (r0 *codedeploy.DeleteDeploymentConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDeploymentConfig", i0)
	r0, _ = returns[0].(*codedeploy.DeleteDeploymentConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) DeleteDeploymentConfigRequest(i0 *codedeploy.DeleteDeploymentConfigInput) (r0 *request.Request, r1 *codedeploy.DeleteDeploymentConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDeploymentConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.DeleteDeploymentConfigOutput)
	return
}

func (d *CodeDeployDouble) DeleteDeploymentConfigWithContext(i0 context.Context, i1 *codedeploy.DeleteDeploymentConfigInput, i2 ...request.Option) (r0 *codedeploy.DeleteDeploymentConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDeploymentConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.DeleteDeploymentConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeDeleteDeploymentConfigWithContext(ctx context.Context, in *codedeploy.DeleteDeploymentConfigInput, _ ...request.Option) (*codedeploy.DeleteDeploymentConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDeploymentConfig cancelled", ctx.Err())
	default:
		return d.DeleteDeploymentConfig(in)
	}
}

func (d *CodeDeployDouble) DeleteDeploymentGroup(i0 *codedeploy.DeleteDeploymentGroupInput) (r0 *codedeploy.DeleteDeploymentGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDeploymentGroup", i0)
	r0, _ = returns[0].(*codedeploy.DeleteDeploymentGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) DeleteDeploymentGroupRequest(i0 *codedeploy.DeleteDeploymentGroupInput) (r0 *request.Request, r1 *codedeploy.DeleteDeploymentGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDeploymentGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.DeleteDeploymentGroupOutput)
	return
}

func (d *CodeDeployDouble) DeleteDeploymentGroupWithContext(i0 context.Context, i1 *codedeploy.DeleteDeploymentGroupInput, i2 ...request.Option) (r0 *codedeploy.DeleteDeploymentGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDeploymentGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.DeleteDeploymentGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeDeleteDeploymentGroupWithContext(ctx context.Context, in *codedeploy.DeleteDeploymentGroupInput, _ ...request.Option) (*codedeploy.DeleteDeploymentGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDeploymentGroup cancelled", ctx.Err())
	default:
		return d.DeleteDeploymentGroup(in)
	}
}

func (d *CodeDeployDouble) DeleteGitHubAccountToken(i0 *codedeploy.DeleteGitHubAccountTokenInput) (r0 *codedeploy.DeleteGitHubAccountTokenOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGitHubAccountToken", i0)
	r0, _ = returns[0].(*codedeploy.DeleteGitHubAccountTokenOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) DeleteGitHubAccountTokenRequest(i0 *codedeploy.DeleteGitHubAccountTokenInput) (r0 *request.Request, r1 *codedeploy.DeleteGitHubAccountTokenOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGitHubAccountTokenRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.DeleteGitHubAccountTokenOutput)
	return
}

func (d *CodeDeployDouble) DeleteGitHubAccountTokenWithContext(i0 context.Context, i1 *codedeploy.DeleteGitHubAccountTokenInput, i2 ...request.Option) (r0 *codedeploy.DeleteGitHubAccountTokenOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGitHubAccountTokenWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.DeleteGitHubAccountTokenOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeDeleteGitHubAccountTokenWithContext(ctx context.Context, in *codedeploy.DeleteGitHubAccountTokenInput, _ ...request.Option) (*codedeploy.DeleteGitHubAccountTokenOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteGitHubAccountToken cancelled", ctx.Err())
	default:
		return d.DeleteGitHubAccountToken(in)
	}
}

func (d *CodeDeployDouble) DeregisterOnPremisesInstance(i0 *codedeploy.DeregisterOnPremisesInstanceInput) (r0 *codedeploy.DeregisterOnPremisesInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterOnPremisesInstance", i0)
	r0, _ = returns[0].(*codedeploy.DeregisterOnPremisesInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) DeregisterOnPremisesInstanceRequest(i0 *codedeploy.DeregisterOnPremisesInstanceInput) (r0 *request.Request, r1 *codedeploy.DeregisterOnPremisesInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterOnPremisesInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.DeregisterOnPremisesInstanceOutput)
	return
}

func (d *CodeDeployDouble) DeregisterOnPremisesInstanceWithContext(i0 context.Context, i1 *codedeploy.DeregisterOnPremisesInstanceInput, i2 ...request.Option) (r0 *codedeploy.DeregisterOnPremisesInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterOnPremisesInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.DeregisterOnPremisesInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeDeregisterOnPremisesInstanceWithContext(ctx context.Context, in *codedeploy.DeregisterOnPremisesInstanceInput, _ ...request.Option) (*codedeploy.DeregisterOnPremisesInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeregisterOnPremisesInstance cancelled", ctx.Err())
	default:
		return d.DeregisterOnPremisesInstance(in)
	}
}

func (d *CodeDeployDouble) GetApplication(i0 *codedeploy.GetApplicationInput) (r0 *codedeploy.GetApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApplication", i0)
	r0, _ = returns[0].(*codedeploy.GetApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) GetApplicationRequest(i0 *codedeploy.GetApplicationInput) (r0 *request.Request, r1 *codedeploy.GetApplicationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApplicationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.GetApplicationOutput)
	return
}

func (d *CodeDeployDouble) GetApplicationRevision(i0 *codedeploy.GetApplicationRevisionInput) (r0 *codedeploy.GetApplicationRevisionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApplicationRevision", i0)
	r0, _ = returns[0].(*codedeploy.GetApplicationRevisionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) GetApplicationRevisionRequest(i0 *codedeploy.GetApplicationRevisionInput) (r0 *request.Request, r1 *codedeploy.GetApplicationRevisionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApplicationRevisionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.GetApplicationRevisionOutput)
	return
}

func (d *CodeDeployDouble) GetApplicationRevisionWithContext(i0 context.Context, i1 *codedeploy.GetApplicationRevisionInput, i2 ...request.Option) (r0 *codedeploy.GetApplicationRevisionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApplicationRevisionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.GetApplicationRevisionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeGetApplicationRevisionWithContext(ctx context.Context, in *codedeploy.GetApplicationRevisionInput, _ ...request.Option) (*codedeploy.GetApplicationRevisionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetApplicationRevision cancelled", ctx.Err())
	default:
		return d.GetApplicationRevision(in)
	}
}

func (d *CodeDeployDouble) GetApplicationWithContext(i0 context.Context, i1 *codedeploy.GetApplicationInput, i2 ...request.Option) (r0 *codedeploy.GetApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApplicationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.GetApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeGetApplicationWithContext(ctx context.Context, in *codedeploy.GetApplicationInput, _ ...request.Option) (*codedeploy.GetApplicationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetApplication cancelled", ctx.Err())
	default:
		return d.GetApplication(in)
	}
}

func (d *CodeDeployDouble) GetDeployment(i0 *codedeploy.GetDeploymentInput) (r0 *codedeploy.GetDeploymentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeployment", i0)
	r0, _ = returns[0].(*codedeploy.GetDeploymentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) GetDeploymentConfig(i0 *codedeploy.GetDeploymentConfigInput) (r0 *codedeploy.GetDeploymentConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeploymentConfig", i0)
	r0, _ = returns[0].(*codedeploy.GetDeploymentConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) GetDeploymentConfigRequest(i0 *codedeploy.GetDeploymentConfigInput) (r0 *request.Request, r1 *codedeploy.GetDeploymentConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeploymentConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.GetDeploymentConfigOutput)
	return
}

func (d *CodeDeployDouble) GetDeploymentConfigWithContext(i0 context.Context, i1 *codedeploy.GetDeploymentConfigInput, i2 ...request.Option) (r0 *codedeploy.GetDeploymentConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeploymentConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.GetDeploymentConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeGetDeploymentConfigWithContext(ctx context.Context, in *codedeploy.GetDeploymentConfigInput, _ ...request.Option) (*codedeploy.GetDeploymentConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDeploymentConfig cancelled", ctx.Err())
	default:
		return d.GetDeploymentConfig(in)
	}
}

func (d *CodeDeployDouble) GetDeploymentGroup(i0 *codedeploy.GetDeploymentGroupInput) (r0 *codedeploy.GetDeploymentGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeploymentGroup", i0)
	r0, _ = returns[0].(*codedeploy.GetDeploymentGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) GetDeploymentGroupRequest(i0 *codedeploy.GetDeploymentGroupInput) (r0 *request.Request, r1 *codedeploy.GetDeploymentGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeploymentGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.GetDeploymentGroupOutput)
	return
}

func (d *CodeDeployDouble) GetDeploymentGroupWithContext(i0 context.Context, i1 *codedeploy.GetDeploymentGroupInput, i2 ...request.Option) (r0 *codedeploy.GetDeploymentGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeploymentGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.GetDeploymentGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeGetDeploymentGroupWithContext(ctx context.Context, in *codedeploy.GetDeploymentGroupInput, _ ...request.Option) (*codedeploy.GetDeploymentGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDeploymentGroup cancelled", ctx.Err())
	default:
		return d.GetDeploymentGroup(in)
	}
}

func (d *CodeDeployDouble) GetDeploymentInstance(i0 *codedeploy.GetDeploymentInstanceInput) (r0 *codedeploy.GetDeploymentInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeploymentInstance", i0)
	r0, _ = returns[0].(*codedeploy.GetDeploymentInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) GetDeploymentInstanceRequest(i0 *codedeploy.GetDeploymentInstanceInput) (r0 *request.Request, r1 *codedeploy.GetDeploymentInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeploymentInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.GetDeploymentInstanceOutput)
	return
}

func (d *CodeDeployDouble) GetDeploymentInstanceWithContext(i0 context.Context, i1 *codedeploy.GetDeploymentInstanceInput, i2 ...request.Option) (r0 *codedeploy.GetDeploymentInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeploymentInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.GetDeploymentInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeGetDeploymentInstanceWithContext(ctx context.Context, in *codedeploy.GetDeploymentInstanceInput, _ ...request.Option) (*codedeploy.GetDeploymentInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDeploymentInstance cancelled", ctx.Err())
	default:
		return d.GetDeploymentInstance(in)
	}
}

func (d *CodeDeployDouble) GetDeploymentRequest(i0 *codedeploy.GetDeploymentInput) (r0 *request.Request, r1 *codedeploy.GetDeploymentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeploymentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.GetDeploymentOutput)
	return
}

func (d *CodeDeployDouble) GetDeploymentTarget(i0 *codedeploy.GetDeploymentTargetInput) (r0 *codedeploy.GetDeploymentTargetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeploymentTarget", i0)
	r0, _ = returns[0].(*codedeploy.GetDeploymentTargetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) GetDeploymentTargetRequest(i0 *codedeploy.GetDeploymentTargetInput) (r0 *request.Request, r1 *codedeploy.GetDeploymentTargetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeploymentTargetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.GetDeploymentTargetOutput)
	return
}

func (d *CodeDeployDouble) GetDeploymentTargetWithContext(i0 context.Context, i1 *codedeploy.GetDeploymentTargetInput, i2 ...request.Option) (r0 *codedeploy.GetDeploymentTargetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeploymentTargetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.GetDeploymentTargetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeGetDeploymentTargetWithContext(ctx context.Context, in *codedeploy.GetDeploymentTargetInput, _ ...request.Option) (*codedeploy.GetDeploymentTargetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDeploymentTarget cancelled", ctx.Err())
	default:
		return d.GetDeploymentTarget(in)
	}
}

func (d *CodeDeployDouble) GetDeploymentWithContext(i0 context.Context, i1 *codedeploy.GetDeploymentInput, i2 ...request.Option) (r0 *codedeploy.GetDeploymentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeploymentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.GetDeploymentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeGetDeploymentWithContext(ctx context.Context, in *codedeploy.GetDeploymentInput, _ ...request.Option) (*codedeploy.GetDeploymentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDeployment cancelled", ctx.Err())
	default:
		return d.GetDeployment(in)
	}
}

func (d *CodeDeployDouble) GetOnPremisesInstance(i0 *codedeploy.GetOnPremisesInstanceInput) (r0 *codedeploy.GetOnPremisesInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOnPremisesInstance", i0)
	r0, _ = returns[0].(*codedeploy.GetOnPremisesInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) GetOnPremisesInstanceRequest(i0 *codedeploy.GetOnPremisesInstanceInput) (r0 *request.Request, r1 *codedeploy.GetOnPremisesInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOnPremisesInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.GetOnPremisesInstanceOutput)
	return
}

func (d *CodeDeployDouble) GetOnPremisesInstanceWithContext(i0 context.Context, i1 *codedeploy.GetOnPremisesInstanceInput, i2 ...request.Option) (r0 *codedeploy.GetOnPremisesInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOnPremisesInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.GetOnPremisesInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeGetOnPremisesInstanceWithContext(ctx context.Context, in *codedeploy.GetOnPremisesInstanceInput, _ ...request.Option) (*codedeploy.GetOnPremisesInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetOnPremisesInstance cancelled", ctx.Err())
	default:
		return d.GetOnPremisesInstance(in)
	}
}

func (d *CodeDeployDouble) ListApplicationRevisions(i0 *codedeploy.ListApplicationRevisionsInput) (r0 *codedeploy.ListApplicationRevisionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApplicationRevisions", i0)
	r0, _ = returns[0].(*codedeploy.ListApplicationRevisionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) ListApplicationRevisionsPages(i0 *codedeploy.ListApplicationRevisionsInput, i1 func(*codedeploy.ListApplicationRevisionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApplicationRevisionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeDeployDouble) fakeListApplicationRevisionsPages(in *codedeploy.ListApplicationRevisionsInput, pager func(*codedeploy.ListApplicationRevisionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListApplicationRevisions", paginators, in, pager)
}

func (d *CodeDeployDouble) ListApplicationRevisionsPagesWithContext(i0 context.Context, i1 *codedeploy.ListApplicationRevisionsInput, i2 func(*codedeploy.ListApplicationRevisionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApplicationRevisionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeDeployDouble) fakeListApplicationRevisionsPagesWithContext(ctx context.Context, in *codedeploy.ListApplicationRevisionsInput, pager func(*codedeploy.ListApplicationRevisionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListApplicationRevisions", paginators, ctx, in, pager, options...)
}

func (d *CodeDeployDouble) ListApplicationRevisionsRequest(i0 *codedeploy.ListApplicationRevisionsInput) (r0 *request.Request, r1 *codedeploy.ListApplicationRevisionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApplicationRevisionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.ListApplicationRevisionsOutput)
	return
}

func (d *CodeDeployDouble) ListApplicationRevisionsWithContext(i0 context.Context, i1 *codedeploy.ListApplicationRevisionsInput, i2 ...request.Option) (r0 *codedeploy.ListApplicationRevisionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApplicationRevisionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.ListApplicationRevisionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeListApplicationRevisionsWithContext(ctx context.Context, in *codedeploy.ListApplicationRevisionsInput, _ ...request.Option) (*codedeploy.ListApplicationRevisionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListApplicationRevisions cancelled", ctx.Err())
	default:
		return d.ListApplicationRevisions(in)
	}
}

func (d *CodeDeployDouble) ListApplications(i0 *codedeploy.ListApplicationsInput) (r0 *codedeploy.ListApplicationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApplications", i0)
	r0, _ = returns[0].(*codedeploy.ListApplicationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) ListApplicationsPages(i0 *codedeploy.ListApplicationsInput, i1 func(*codedeploy.ListApplicationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApplicationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeDeployDouble) fakeListApplicationsPages(in *codedeploy.ListApplicationsInput, pager func(*codedeploy.ListApplicationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListApplications", paginators, in, pager)
}

func (d *CodeDeployDouble) ListApplicationsPagesWithContext(i0 context.Context, i1 *codedeploy.ListApplicationsInput, i2 func(*codedeploy.ListApplicationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApplicationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeDeployDouble) fakeListApplicationsPagesWithContext(ctx context.Context, in *codedeploy.ListApplicationsInput, pager func(*codedeploy.ListApplicationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListApplications", paginators, ctx, in, pager, options...)
}

func (d *CodeDeployDouble) ListApplicationsRequest(i0 *codedeploy.ListApplicationsInput) (r0 *request.Request, r1 *codedeploy.ListApplicationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApplicationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.ListApplicationsOutput)
	return
}

func (d *CodeDeployDouble) ListApplicationsWithContext(i0 context.Context, i1 *codedeploy.ListApplicationsInput, i2 ...request.Option) (r0 *codedeploy.ListApplicationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApplicationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.ListApplicationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeListApplicationsWithContext(ctx context.Context, in *codedeploy.ListApplicationsInput, _ ...request.Option) (*codedeploy.ListApplicationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListApplications cancelled", ctx.Err())
	default:
		return d.ListApplications(in)
	}
}

func (d *CodeDeployDouble) ListDeploymentConfigs(i0 *codedeploy.ListDeploymentConfigsInput) (r0 *codedeploy.ListDeploymentConfigsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeploymentConfigs", i0)
	r0, _ = returns[0].(*codedeploy.ListDeploymentConfigsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) ListDeploymentConfigsPages(i0 *codedeploy.ListDeploymentConfigsInput, i1 func(*codedeploy.ListDeploymentConfigsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeploymentConfigsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeDeployDouble) fakeListDeploymentConfigsPages(in *codedeploy.ListDeploymentConfigsInput, pager func(*codedeploy.ListDeploymentConfigsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListDeploymentConfigs", paginators, in, pager)
}

func (d *CodeDeployDouble) ListDeploymentConfigsPagesWithContext(i0 context.Context, i1 *codedeploy.ListDeploymentConfigsInput, i2 func(*codedeploy.ListDeploymentConfigsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeploymentConfigsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeDeployDouble) fakeListDeploymentConfigsPagesWithContext(ctx context.Context, in *codedeploy.ListDeploymentConfigsInput, pager func(*codedeploy.ListDeploymentConfigsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListDeploymentConfigs", paginators, ctx, in, pager, options...)
}

func (d *CodeDeployDouble) ListDeploymentConfigsRequest(i0 *codedeploy.ListDeploymentConfigsInput) (r0 *request.Request, r1 *codedeploy.ListDeploymentConfigsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeploymentConfigsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.ListDeploymentConfigsOutput)
	return
}

func (d *CodeDeployDouble) ListDeploymentConfigsWithContext(i0 context.Context, i1 *codedeploy.ListDeploymentConfigsInput, i2 ...request.Option) (r0 *codedeploy.ListDeploymentConfigsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeploymentConfigsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.ListDeploymentConfigsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeListDeploymentConfigsWithContext(ctx context.Context, in *codedeploy.ListDeploymentConfigsInput, _ ...request.Option) (*codedeploy.ListDeploymentConfigsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDeploymentConfigs cancelled", ctx.Err())
	default:
		return d.ListDeploymentConfigs(in)
	}
}

func (d *CodeDeployDouble) ListDeploymentGroups(i0 *codedeploy.ListDeploymentGroupsInput) (r0 *codedeploy.ListDeploymentGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeploymentGroups", i0)
	r0, _ = returns[0].(*codedeploy.ListDeploymentGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) ListDeploymentGroupsPages(i0 *codedeploy.ListDeploymentGroupsInput, i1 func(*codedeploy.ListDeploymentGroupsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeploymentGroupsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeDeployDouble) fakeListDeploymentGroupsPages(in *codedeploy.ListDeploymentGroupsInput, pager func(*codedeploy.ListDeploymentGroupsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListDeploymentGroups", paginators, in, pager)
}

func (d *CodeDeployDouble) ListDeploymentGroupsPagesWithContext(i0 context.Context, i1 *codedeploy.ListDeploymentGroupsInput, i2 func(*codedeploy.ListDeploymentGroupsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeploymentGroupsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeDeployDouble) fakeListDeploymentGroupsPagesWithContext(ctx context.Context, in *codedeploy.ListDeploymentGroupsInput, pager func(*codedeploy.ListDeploymentGroupsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListDeploymentGroups", paginators, ctx, in, pager, options...)
}

func (d *CodeDeployDouble) ListDeploymentGroupsRequest(i0 *codedeploy.ListDeploymentGroupsInput) (r0 *request.Request, r1 *codedeploy.ListDeploymentGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeploymentGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.ListDeploymentGroupsOutput)
	return
}

func (d *CodeDeployDouble) ListDeploymentGroupsWithContext(i0 context.Context, i1 *codedeploy.ListDeploymentGroupsInput, i2 ...request.Option) (r0 *codedeploy.ListDeploymentGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeploymentGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.ListDeploymentGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeListDeploymentGroupsWithContext(ctx context.Context, in *codedeploy.ListDeploymentGroupsInput, _ ...request.Option) (*codedeploy.ListDeploymentGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDeploymentGroups cancelled", ctx.Err())
	default:
		return d.ListDeploymentGroups(in)
	}
}

func (d *CodeDeployDouble) ListDeploymentInstances(i0 *codedeploy.ListDeploymentInstancesInput) (r0 *codedeploy.ListDeploymentInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeploymentInstances", i0)
	r0, _ = returns[0].(*codedeploy.ListDeploymentInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) ListDeploymentInstancesPages(i0 *codedeploy.ListDeploymentInstancesInput, i1 func(*codedeploy.ListDeploymentInstancesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeploymentInstancesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeDeployDouble) fakeListDeploymentInstancesPages(in *codedeploy.ListDeploymentInstancesInput, pager func(*codedeploy.ListDeploymentInstancesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListDeploymentInstances", paginators, in, pager)
}

func (d *CodeDeployDouble) ListDeploymentInstancesPagesWithContext(i0 context.Context, i1 *codedeploy.ListDeploymentInstancesInput, i2 func(*codedeploy.ListDeploymentInstancesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeploymentInstancesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeDeployDouble) fakeListDeploymentInstancesPagesWithContext(ctx context.Context, in *codedeploy.ListDeploymentInstancesInput, pager func(*codedeploy.ListDeploymentInstancesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListDeploymentInstances", paginators, ctx, in, pager, options...)
}

func (d *CodeDeployDouble) ListDeploymentInstancesRequest(i0 *codedeploy.ListDeploymentInstancesInput) (r0 *request.Request, r1 *codedeploy.ListDeploymentInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeploymentInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.ListDeploymentInstancesOutput)
	return
}

func (d *CodeDeployDouble) ListDeploymentInstancesWithContext(i0 context.Context, i1 *codedeploy.ListDeploymentInstancesInput, i2 ...request.Option) (r0 *codedeploy.ListDeploymentInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeploymentInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.ListDeploymentInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeListDeploymentInstancesWithContext(ctx context.Context, in *codedeploy.ListDeploymentInstancesInput, _ ...request.Option) (*codedeploy.ListDeploymentInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDeploymentInstances cancelled", ctx.Err())
	default:
		return d.ListDeploymentInstances(in)
	}
}

func (d *CodeDeployDouble) ListDeploymentTargets(i0 *codedeploy.ListDeploymentTargetsInput) (r0 *codedeploy.ListDeploymentTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeploymentTargets", i0)
	r0, _ = returns[0].(*codedeploy.ListDeploymentTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) ListDeploymentTargetsRequest(i0 *codedeploy.ListDeploymentTargetsInput) (r0 *request.Request, r1 *codedeploy.ListDeploymentTargetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeploymentTargetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.ListDeploymentTargetsOutput)
	return
}

func (d *CodeDeployDouble) ListDeploymentTargetsWithContext(i0 context.Context, i1 *codedeploy.ListDeploymentTargetsInput, i2 ...request.Option) (r0 *codedeploy.ListDeploymentTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeploymentTargetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.ListDeploymentTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeListDeploymentTargetsWithContext(ctx context.Context, in *codedeploy.ListDeploymentTargetsInput, _ ...request.Option) (*codedeploy.ListDeploymentTargetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDeploymentTargets cancelled", ctx.Err())
	default:
		return d.ListDeploymentTargets(in)
	}
}

func (d *CodeDeployDouble) ListDeployments(i0 *codedeploy.ListDeploymentsInput) (r0 *codedeploy.ListDeploymentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeployments", i0)
	r0, _ = returns[0].(*codedeploy.ListDeploymentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) ListDeploymentsPages(i0 *codedeploy.ListDeploymentsInput, i1 func(*codedeploy.ListDeploymentsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeploymentsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeDeployDouble) fakeListDeploymentsPages(in *codedeploy.ListDeploymentsInput, pager func(*codedeploy.ListDeploymentsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListDeployments", paginators, in, pager)
}

func (d *CodeDeployDouble) ListDeploymentsPagesWithContext(i0 context.Context, i1 *codedeploy.ListDeploymentsInput, i2 func(*codedeploy.ListDeploymentsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeploymentsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeDeployDouble) fakeListDeploymentsPagesWithContext(ctx context.Context, in *codedeploy.ListDeploymentsInput, pager func(*codedeploy.ListDeploymentsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListDeployments", paginators, ctx, in, pager, options...)
}

func (d *CodeDeployDouble) ListDeploymentsRequest(i0 *codedeploy.ListDeploymentsInput) (r0 *request.Request, r1 *codedeploy.ListDeploymentsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeploymentsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.ListDeploymentsOutput)
	return
}

func (d *CodeDeployDouble) ListDeploymentsWithContext(i0 context.Context, i1 *codedeploy.ListDeploymentsInput, i2 ...request.Option) (r0 *codedeploy.ListDeploymentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeploymentsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.ListDeploymentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeListDeploymentsWithContext(ctx context.Context, in *codedeploy.ListDeploymentsInput, _ ...request.Option) (*codedeploy.ListDeploymentsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDeployments cancelled", ctx.Err())
	default:
		return d.ListDeployments(in)
	}
}

func (d *CodeDeployDouble) ListGitHubAccountTokenNames(i0 *codedeploy.ListGitHubAccountTokenNamesInput) (r0 *codedeploy.ListGitHubAccountTokenNamesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGitHubAccountTokenNames", i0)
	r0, _ = returns[0].(*codedeploy.ListGitHubAccountTokenNamesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) ListGitHubAccountTokenNamesRequest(i0 *codedeploy.ListGitHubAccountTokenNamesInput) (r0 *request.Request, r1 *codedeploy.ListGitHubAccountTokenNamesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGitHubAccountTokenNamesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.ListGitHubAccountTokenNamesOutput)
	return
}

func (d *CodeDeployDouble) ListGitHubAccountTokenNamesWithContext(i0 context.Context, i1 *codedeploy.ListGitHubAccountTokenNamesInput, i2 ...request.Option) (r0 *codedeploy.ListGitHubAccountTokenNamesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGitHubAccountTokenNamesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.ListGitHubAccountTokenNamesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeListGitHubAccountTokenNamesWithContext(ctx context.Context, in *codedeploy.ListGitHubAccountTokenNamesInput, _ ...request.Option) (*codedeploy.ListGitHubAccountTokenNamesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListGitHubAccountTokenNames cancelled", ctx.Err())
	default:
		return d.ListGitHubAccountTokenNames(in)
	}
}

func (d *CodeDeployDouble) ListOnPremisesInstances(i0 *codedeploy.ListOnPremisesInstancesInput) (r0 *codedeploy.ListOnPremisesInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOnPremisesInstances", i0)
	r0, _ = returns[0].(*codedeploy.ListOnPremisesInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) ListOnPremisesInstancesRequest(i0 *codedeploy.ListOnPremisesInstancesInput) (r0 *request.Request, r1 *codedeploy.ListOnPremisesInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOnPremisesInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.ListOnPremisesInstancesOutput)
	return
}

func (d *CodeDeployDouble) ListOnPremisesInstancesWithContext(i0 context.Context, i1 *codedeploy.ListOnPremisesInstancesInput, i2 ...request.Option) (r0 *codedeploy.ListOnPremisesInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOnPremisesInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.ListOnPremisesInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeListOnPremisesInstancesWithContext(ctx context.Context, in *codedeploy.ListOnPremisesInstancesInput, _ ...request.Option) (*codedeploy.ListOnPremisesInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListOnPremisesInstances cancelled", ctx.Err())
	default:
		return d.ListOnPremisesInstances(in)
	}
}

func (d *CodeDeployDouble) ListTagsForResource(i0 *codedeploy.ListTagsForResourceInput) (r0 *codedeploy.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*codedeploy.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) ListTagsForResourceRequest(i0 *codedeploy.ListTagsForResourceInput) (r0 *request.Request, r1 *codedeploy.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.ListTagsForResourceOutput)
	return
}

func (d *CodeDeployDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *codedeploy.ListTagsForResourceInput, i2 ...request.Option) (r0 *codedeploy.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *codedeploy.ListTagsForResourceInput, _ ...request.Option) (*codedeploy.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *CodeDeployDouble) PutLifecycleEventHookExecutionStatus(i0 *codedeploy.PutLifecycleEventHookExecutionStatusInput) (r0 *codedeploy.PutLifecycleEventHookExecutionStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutLifecycleEventHookExecutionStatus", i0)
	r0, _ = returns[0].(*codedeploy.PutLifecycleEventHookExecutionStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) PutLifecycleEventHookExecutionStatusRequest(i0 *codedeploy.PutLifecycleEventHookExecutionStatusInput) (r0 *request.Request, r1 *codedeploy.PutLifecycleEventHookExecutionStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutLifecycleEventHookExecutionStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.PutLifecycleEventHookExecutionStatusOutput)
	return
}

func (d *CodeDeployDouble) PutLifecycleEventHookExecutionStatusWithContext(i0 context.Context, i1 *codedeploy.PutLifecycleEventHookExecutionStatusInput, i2 ...request.Option) (r0 *codedeploy.PutLifecycleEventHookExecutionStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutLifecycleEventHookExecutionStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.PutLifecycleEventHookExecutionStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakePutLifecycleEventHookExecutionStatusWithContext(ctx context.Context, in *codedeploy.PutLifecycleEventHookExecutionStatusInput, _ ...request.Option) (*codedeploy.PutLifecycleEventHookExecutionStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutLifecycleEventHookExecutionStatus cancelled", ctx.Err())
	default:
		return d.PutLifecycleEventHookExecutionStatus(in)
	}
}

func (d *CodeDeployDouble) RegisterApplicationRevision(i0 *codedeploy.RegisterApplicationRevisionInput) (r0 *codedeploy.RegisterApplicationRevisionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterApplicationRevision", i0)
	r0, _ = returns[0].(*codedeploy.RegisterApplicationRevisionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) RegisterApplicationRevisionRequest(i0 *codedeploy.RegisterApplicationRevisionInput) (r0 *request.Request, r1 *codedeploy.RegisterApplicationRevisionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterApplicationRevisionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.RegisterApplicationRevisionOutput)
	return
}

func (d *CodeDeployDouble) RegisterApplicationRevisionWithContext(i0 context.Context, i1 *codedeploy.RegisterApplicationRevisionInput, i2 ...request.Option) (r0 *codedeploy.RegisterApplicationRevisionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterApplicationRevisionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.RegisterApplicationRevisionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeRegisterApplicationRevisionWithContext(ctx context.Context, in *codedeploy.RegisterApplicationRevisionInput, _ ...request.Option) (*codedeploy.RegisterApplicationRevisionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterApplicationRevision cancelled", ctx.Err())
	default:
		return d.RegisterApplicationRevision(in)
	}
}

func (d *CodeDeployDouble) RegisterOnPremisesInstance(i0 *codedeploy.RegisterOnPremisesInstanceInput) (r0 *codedeploy.RegisterOnPremisesInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterOnPremisesInstance", i0)
	r0, _ = returns[0].(*codedeploy.RegisterOnPremisesInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) RegisterOnPremisesInstanceRequest(i0 *codedeploy.RegisterOnPremisesInstanceInput) (r0 *request.Request, r1 *codedeploy.RegisterOnPremisesInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterOnPremisesInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.RegisterOnPremisesInstanceOutput)
	return
}

func (d *CodeDeployDouble) RegisterOnPremisesInstanceWithContext(i0 context.Context, i1 *codedeploy.RegisterOnPremisesInstanceInput, i2 ...request.Option) (r0 *codedeploy.RegisterOnPremisesInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterOnPremisesInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.RegisterOnPremisesInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeRegisterOnPremisesInstanceWithContext(ctx context.Context, in *codedeploy.RegisterOnPremisesInstanceInput, _ ...request.Option) (*codedeploy.RegisterOnPremisesInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterOnPremisesInstance cancelled", ctx.Err())
	default:
		return d.RegisterOnPremisesInstance(in)
	}
}

func (d *CodeDeployDouble) RemoveTagsFromOnPremisesInstances(i0 *codedeploy.RemoveTagsFromOnPremisesInstancesInput) (r0 *codedeploy.RemoveTagsFromOnPremisesInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromOnPremisesInstances", i0)
	r0, _ = returns[0].(*codedeploy.RemoveTagsFromOnPremisesInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) RemoveTagsFromOnPremisesInstancesRequest(i0 *codedeploy.RemoveTagsFromOnPremisesInstancesInput) (r0 *request.Request, r1 *codedeploy.RemoveTagsFromOnPremisesInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromOnPremisesInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.RemoveTagsFromOnPremisesInstancesOutput)
	return
}

func (d *CodeDeployDouble) RemoveTagsFromOnPremisesInstancesWithContext(i0 context.Context, i1 *codedeploy.RemoveTagsFromOnPremisesInstancesInput, i2 ...request.Option) (r0 *codedeploy.RemoveTagsFromOnPremisesInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromOnPremisesInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.RemoveTagsFromOnPremisesInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeRemoveTagsFromOnPremisesInstancesWithContext(ctx context.Context, in *codedeploy.RemoveTagsFromOnPremisesInstancesInput, _ ...request.Option) (*codedeploy.RemoveTagsFromOnPremisesInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveTagsFromOnPremisesInstances cancelled", ctx.Err())
	default:
		return d.RemoveTagsFromOnPremisesInstances(in)
	}
}

func (d *CodeDeployDouble) SkipWaitTimeForInstanceTermination(i0 *codedeploy.SkipWaitTimeForInstanceTerminationInput) (r0 *codedeploy.SkipWaitTimeForInstanceTerminationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SkipWaitTimeForInstanceTermination", i0)
	r0, _ = returns[0].(*codedeploy.SkipWaitTimeForInstanceTerminationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) SkipWaitTimeForInstanceTerminationRequest(i0 *codedeploy.SkipWaitTimeForInstanceTerminationInput) (r0 *request.Request, r1 *codedeploy.SkipWaitTimeForInstanceTerminationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SkipWaitTimeForInstanceTerminationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.SkipWaitTimeForInstanceTerminationOutput)
	return
}

func (d *CodeDeployDouble) SkipWaitTimeForInstanceTerminationWithContext(i0 context.Context, i1 *codedeploy.SkipWaitTimeForInstanceTerminationInput, i2 ...request.Option) (r0 *codedeploy.SkipWaitTimeForInstanceTerminationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SkipWaitTimeForInstanceTerminationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.SkipWaitTimeForInstanceTerminationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeSkipWaitTimeForInstanceTerminationWithContext(ctx context.Context, in *codedeploy.SkipWaitTimeForInstanceTerminationInput, _ ...request.Option) (*codedeploy.SkipWaitTimeForInstanceTerminationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SkipWaitTimeForInstanceTermination cancelled", ctx.Err())
	default:
		return d.SkipWaitTimeForInstanceTermination(in)
	}
}

func (d *CodeDeployDouble) StopDeployment(i0 *codedeploy.StopDeploymentInput) (r0 *codedeploy.StopDeploymentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopDeployment", i0)
	r0, _ = returns[0].(*codedeploy.StopDeploymentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) StopDeploymentRequest(i0 *codedeploy.StopDeploymentInput) (r0 *request.Request, r1 *codedeploy.StopDeploymentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopDeploymentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.StopDeploymentOutput)
	return
}

func (d *CodeDeployDouble) StopDeploymentWithContext(i0 context.Context, i1 *codedeploy.StopDeploymentInput, i2 ...request.Option) (r0 *codedeploy.StopDeploymentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopDeploymentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.StopDeploymentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeStopDeploymentWithContext(ctx context.Context, in *codedeploy.StopDeploymentInput, _ ...request.Option) (*codedeploy.StopDeploymentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopDeployment cancelled", ctx.Err())
	default:
		return d.StopDeployment(in)
	}
}

func (d *CodeDeployDouble) TagResource(i0 *codedeploy.TagResourceInput) (r0 *codedeploy.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*codedeploy.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) TagResourceRequest(i0 *codedeploy.TagResourceInput) (r0 *request.Request, r1 *codedeploy.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.TagResourceOutput)
	return
}

func (d *CodeDeployDouble) TagResourceWithContext(i0 context.Context, i1 *codedeploy.TagResourceInput, i2 ...request.Option) (r0 *codedeploy.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeTagResourceWithContext(ctx context.Context, in *codedeploy.TagResourceInput, _ ...request.Option) (*codedeploy.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *CodeDeployDouble) UntagResource(i0 *codedeploy.UntagResourceInput) (r0 *codedeploy.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*codedeploy.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) UntagResourceRequest(i0 *codedeploy.UntagResourceInput) (r0 *request.Request, r1 *codedeploy.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.UntagResourceOutput)
	return
}

func (d *CodeDeployDouble) UntagResourceWithContext(i0 context.Context, i1 *codedeploy.UntagResourceInput, i2 ...request.Option) (r0 *codedeploy.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeUntagResourceWithContext(ctx context.Context, in *codedeploy.UntagResourceInput, _ ...request.Option) (*codedeploy.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *CodeDeployDouble) UpdateApplication(i0 *codedeploy.UpdateApplicationInput) (r0 *codedeploy.UpdateApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApplication", i0)
	r0, _ = returns[0].(*codedeploy.UpdateApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) UpdateApplicationRequest(i0 *codedeploy.UpdateApplicationInput) (r0 *request.Request, r1 *codedeploy.UpdateApplicationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApplicationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.UpdateApplicationOutput)
	return
}

func (d *CodeDeployDouble) UpdateApplicationWithContext(i0 context.Context, i1 *codedeploy.UpdateApplicationInput, i2 ...request.Option) (r0 *codedeploy.UpdateApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApplicationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.UpdateApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeUpdateApplicationWithContext(ctx context.Context, in *codedeploy.UpdateApplicationInput, _ ...request.Option) (*codedeploy.UpdateApplicationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateApplication cancelled", ctx.Err())
	default:
		return d.UpdateApplication(in)
	}
}

func (d *CodeDeployDouble) UpdateDeploymentGroup(i0 *codedeploy.UpdateDeploymentGroupInput) (r0 *codedeploy.UpdateDeploymentGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDeploymentGroup", i0)
	r0, _ = returns[0].(*codedeploy.UpdateDeploymentGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) UpdateDeploymentGroupRequest(i0 *codedeploy.UpdateDeploymentGroupInput) (r0 *request.Request, r1 *codedeploy.UpdateDeploymentGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDeploymentGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codedeploy.UpdateDeploymentGroupOutput)
	return
}

func (d *CodeDeployDouble) UpdateDeploymentGroupWithContext(i0 context.Context, i1 *codedeploy.UpdateDeploymentGroupInput, i2 ...request.Option) (r0 *codedeploy.UpdateDeploymentGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDeploymentGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codedeploy.UpdateDeploymentGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeDeployDouble) fakeUpdateDeploymentGroupWithContext(ctx context.Context, in *codedeploy.UpdateDeploymentGroupInput, _ ...request.Option) (*codedeploy.UpdateDeploymentGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDeploymentGroup cancelled", ctx.Err())
	default:
		return d.UpdateDeploymentGroup(in)
	}
}

func (d *CodeDeployDouble) WaitUntilDeploymentSuccessful(i0 *codedeploy.GetDeploymentInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilDeploymentSuccessful", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeDeployDouble) fakeWaitUntilDeploymentSuccessful(in *codedeploy.GetDeploymentInput) error {
	return d.WaitUntil("DeploymentSuccessful", waiters, in)
}

func (d *CodeDeployDouble) WaitUntilDeploymentSuccessfulWithContext(i0 context.Context, i1 *codedeploy.GetDeploymentInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilDeploymentSuccessfulWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeDeployDouble) fakeWaitUntilDeploymentSuccessfulWithContext(ctx context.Context, in *codedeploy.GetDeploymentInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("DeploymentSuccessful", waiters, ctx, in, waitOption...)
}
