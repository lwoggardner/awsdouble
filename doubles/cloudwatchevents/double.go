// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:11:43+11:00

// Package cloudwatcheventsdouble provides a TestDouble implementation of cloudwatcheventsiface.CloudWatchEventsAPI
package cloudwatcheventsdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/cloudwatchevents"
	"github.com/aws/aws-sdk-go/service/cloudwatchevents/cloudwatcheventsiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// CloudWatchEventsDouble is TestDouble for cloudwatcheventsiface.CloudWatchEventsAPI
type CloudWatchEventsDouble struct {
	cloudwatcheventsiface.CloudWatchEventsAPI
	*awsdouble.AWSTestDouble
}

// Constructor for CloudWatchEventsDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *CloudWatchEventsDouble {
	result := &CloudWatchEventsDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*cloudwatcheventsiface.CloudWatchEventsAPI)(nil), configurators...)
	return result
}

func (d *CloudWatchEventsDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *CloudWatchEventsDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "ActivateEventSourceWithContext":
		return m.Fake(d.fakeActivateEventSourceWithContext)

	case "CreateEventBusWithContext":
		return m.Fake(d.fakeCreateEventBusWithContext)

	case "CreatePartnerEventSourceWithContext":
		return m.Fake(d.fakeCreatePartnerEventSourceWithContext)

	case "DeactivateEventSourceWithContext":
		return m.Fake(d.fakeDeactivateEventSourceWithContext)

	case "DeleteEventBusWithContext":
		return m.Fake(d.fakeDeleteEventBusWithContext)

	case "DeletePartnerEventSourceWithContext":
		return m.Fake(d.fakeDeletePartnerEventSourceWithContext)

	case "DeleteRuleWithContext":
		return m.Fake(d.fakeDeleteRuleWithContext)

	case "DescribeEventBusWithContext":
		return m.Fake(d.fakeDescribeEventBusWithContext)

	case "DescribeEventSourceWithContext":
		return m.Fake(d.fakeDescribeEventSourceWithContext)

	case "DescribePartnerEventSourceWithContext":
		return m.Fake(d.fakeDescribePartnerEventSourceWithContext)

	case "DescribeRuleWithContext":
		return m.Fake(d.fakeDescribeRuleWithContext)

	case "DisableRuleWithContext":
		return m.Fake(d.fakeDisableRuleWithContext)

	case "EnableRuleWithContext":
		return m.Fake(d.fakeEnableRuleWithContext)

	case "ListEventBusesWithContext":
		return m.Fake(d.fakeListEventBusesWithContext)

	case "ListEventSourcesWithContext":
		return m.Fake(d.fakeListEventSourcesWithContext)

	case "ListPartnerEventSourceAccountsWithContext":
		return m.Fake(d.fakeListPartnerEventSourceAccountsWithContext)

	case "ListPartnerEventSourcesWithContext":
		return m.Fake(d.fakeListPartnerEventSourcesWithContext)

	case "ListRuleNamesByTargetWithContext":
		return m.Fake(d.fakeListRuleNamesByTargetWithContext)

	case "ListRulesWithContext":
		return m.Fake(d.fakeListRulesWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "ListTargetsByRuleWithContext":
		return m.Fake(d.fakeListTargetsByRuleWithContext)

	case "PutEventsWithContext":
		return m.Fake(d.fakePutEventsWithContext)

	case "PutPartnerEventsWithContext":
		return m.Fake(d.fakePutPartnerEventsWithContext)

	case "PutPermissionWithContext":
		return m.Fake(d.fakePutPermissionWithContext)

	case "PutRuleWithContext":
		return m.Fake(d.fakePutRuleWithContext)

	case "PutTargetsWithContext":
		return m.Fake(d.fakePutTargetsWithContext)

	case "RemovePermissionWithContext":
		return m.Fake(d.fakeRemovePermissionWithContext)

	case "RemoveTargetsWithContext":
		return m.Fake(d.fakeRemoveTargetsWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "TestEventPatternWithContext":
		return m.Fake(d.fakeTestEventPatternWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	default:
		return nil
	}
}

func (d *CloudWatchEventsDouble) ActivateEventSource(i0 *cloudwatchevents.ActivateEventSourceInput) (r0 *cloudwatchevents.ActivateEventSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ActivateEventSource", i0)
	r0, _ = returns[0].(*cloudwatchevents.ActivateEventSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) ActivateEventSourceRequest(i0 *cloudwatchevents.ActivateEventSourceInput) (r0 *request.Request, r1 *cloudwatchevents.ActivateEventSourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ActivateEventSourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchevents.ActivateEventSourceOutput)
	return
}

func (d *CloudWatchEventsDouble) ActivateEventSourceWithContext(i0 context.Context, i1 *cloudwatchevents.ActivateEventSourceInput, i2 ...request.Option) (r0 *cloudwatchevents.ActivateEventSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ActivateEventSourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchevents.ActivateEventSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) fakeActivateEventSourceWithContext(ctx context.Context, in *cloudwatchevents.ActivateEventSourceInput, _ ...request.Option) (*cloudwatchevents.ActivateEventSourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ActivateEventSource cancelled", ctx.Err())
	default:
		return d.ActivateEventSource(in)
	}
}

func (d *CloudWatchEventsDouble) CreateEventBus(i0 *cloudwatchevents.CreateEventBusInput) (r0 *cloudwatchevents.CreateEventBusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEventBus", i0)
	r0, _ = returns[0].(*cloudwatchevents.CreateEventBusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) CreateEventBusRequest(i0 *cloudwatchevents.CreateEventBusInput) (r0 *request.Request, r1 *cloudwatchevents.CreateEventBusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEventBusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchevents.CreateEventBusOutput)
	return
}

func (d *CloudWatchEventsDouble) CreateEventBusWithContext(i0 context.Context, i1 *cloudwatchevents.CreateEventBusInput, i2 ...request.Option) (r0 *cloudwatchevents.CreateEventBusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEventBusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchevents.CreateEventBusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) fakeCreateEventBusWithContext(ctx context.Context, in *cloudwatchevents.CreateEventBusInput, _ ...request.Option) (*cloudwatchevents.CreateEventBusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateEventBus cancelled", ctx.Err())
	default:
		return d.CreateEventBus(in)
	}
}

func (d *CloudWatchEventsDouble) CreatePartnerEventSource(i0 *cloudwatchevents.CreatePartnerEventSourceInput) (r0 *cloudwatchevents.CreatePartnerEventSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePartnerEventSource", i0)
	r0, _ = returns[0].(*cloudwatchevents.CreatePartnerEventSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) CreatePartnerEventSourceRequest(i0 *cloudwatchevents.CreatePartnerEventSourceInput) (r0 *request.Request, r1 *cloudwatchevents.CreatePartnerEventSourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePartnerEventSourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchevents.CreatePartnerEventSourceOutput)
	return
}

func (d *CloudWatchEventsDouble) CreatePartnerEventSourceWithContext(i0 context.Context, i1 *cloudwatchevents.CreatePartnerEventSourceInput, i2 ...request.Option) (r0 *cloudwatchevents.CreatePartnerEventSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePartnerEventSourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchevents.CreatePartnerEventSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) fakeCreatePartnerEventSourceWithContext(ctx context.Context, in *cloudwatchevents.CreatePartnerEventSourceInput, _ ...request.Option) (*cloudwatchevents.CreatePartnerEventSourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreatePartnerEventSource cancelled", ctx.Err())
	default:
		return d.CreatePartnerEventSource(in)
	}
}

func (d *CloudWatchEventsDouble) DeactivateEventSource(i0 *cloudwatchevents.DeactivateEventSourceInput) (r0 *cloudwatchevents.DeactivateEventSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeactivateEventSource", i0)
	r0, _ = returns[0].(*cloudwatchevents.DeactivateEventSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) DeactivateEventSourceRequest(i0 *cloudwatchevents.DeactivateEventSourceInput) (r0 *request.Request, r1 *cloudwatchevents.DeactivateEventSourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeactivateEventSourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchevents.DeactivateEventSourceOutput)
	return
}

func (d *CloudWatchEventsDouble) DeactivateEventSourceWithContext(i0 context.Context, i1 *cloudwatchevents.DeactivateEventSourceInput, i2 ...request.Option) (r0 *cloudwatchevents.DeactivateEventSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeactivateEventSourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchevents.DeactivateEventSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) fakeDeactivateEventSourceWithContext(ctx context.Context, in *cloudwatchevents.DeactivateEventSourceInput, _ ...request.Option) (*cloudwatchevents.DeactivateEventSourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeactivateEventSource cancelled", ctx.Err())
	default:
		return d.DeactivateEventSource(in)
	}
}

func (d *CloudWatchEventsDouble) DeleteEventBus(i0 *cloudwatchevents.DeleteEventBusInput) (r0 *cloudwatchevents.DeleteEventBusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEventBus", i0)
	r0, _ = returns[0].(*cloudwatchevents.DeleteEventBusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) DeleteEventBusRequest(i0 *cloudwatchevents.DeleteEventBusInput) (r0 *request.Request, r1 *cloudwatchevents.DeleteEventBusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEventBusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchevents.DeleteEventBusOutput)
	return
}

func (d *CloudWatchEventsDouble) DeleteEventBusWithContext(i0 context.Context, i1 *cloudwatchevents.DeleteEventBusInput, i2 ...request.Option) (r0 *cloudwatchevents.DeleteEventBusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEventBusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchevents.DeleteEventBusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) fakeDeleteEventBusWithContext(ctx context.Context, in *cloudwatchevents.DeleteEventBusInput, _ ...request.Option) (*cloudwatchevents.DeleteEventBusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteEventBus cancelled", ctx.Err())
	default:
		return d.DeleteEventBus(in)
	}
}

func (d *CloudWatchEventsDouble) DeletePartnerEventSource(i0 *cloudwatchevents.DeletePartnerEventSourceInput) (r0 *cloudwatchevents.DeletePartnerEventSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePartnerEventSource", i0)
	r0, _ = returns[0].(*cloudwatchevents.DeletePartnerEventSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) DeletePartnerEventSourceRequest(i0 *cloudwatchevents.DeletePartnerEventSourceInput) (r0 *request.Request, r1 *cloudwatchevents.DeletePartnerEventSourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePartnerEventSourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchevents.DeletePartnerEventSourceOutput)
	return
}

func (d *CloudWatchEventsDouble) DeletePartnerEventSourceWithContext(i0 context.Context, i1 *cloudwatchevents.DeletePartnerEventSourceInput, i2 ...request.Option) (r0 *cloudwatchevents.DeletePartnerEventSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePartnerEventSourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchevents.DeletePartnerEventSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) fakeDeletePartnerEventSourceWithContext(ctx context.Context, in *cloudwatchevents.DeletePartnerEventSourceInput, _ ...request.Option) (*cloudwatchevents.DeletePartnerEventSourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeletePartnerEventSource cancelled", ctx.Err())
	default:
		return d.DeletePartnerEventSource(in)
	}
}

func (d *CloudWatchEventsDouble) DeleteRule(i0 *cloudwatchevents.DeleteRuleInput) (r0 *cloudwatchevents.DeleteRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRule", i0)
	r0, _ = returns[0].(*cloudwatchevents.DeleteRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) DeleteRuleRequest(i0 *cloudwatchevents.DeleteRuleInput) (r0 *request.Request, r1 *cloudwatchevents.DeleteRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchevents.DeleteRuleOutput)
	return
}

func (d *CloudWatchEventsDouble) DeleteRuleWithContext(i0 context.Context, i1 *cloudwatchevents.DeleteRuleInput, i2 ...request.Option) (r0 *cloudwatchevents.DeleteRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchevents.DeleteRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) fakeDeleteRuleWithContext(ctx context.Context, in *cloudwatchevents.DeleteRuleInput, _ ...request.Option) (*cloudwatchevents.DeleteRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRule cancelled", ctx.Err())
	default:
		return d.DeleteRule(in)
	}
}

func (d *CloudWatchEventsDouble) DescribeEventBus(i0 *cloudwatchevents.DescribeEventBusInput) (r0 *cloudwatchevents.DescribeEventBusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventBus", i0)
	r0, _ = returns[0].(*cloudwatchevents.DescribeEventBusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) DescribeEventBusRequest(i0 *cloudwatchevents.DescribeEventBusInput) (r0 *request.Request, r1 *cloudwatchevents.DescribeEventBusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventBusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchevents.DescribeEventBusOutput)
	return
}

func (d *CloudWatchEventsDouble) DescribeEventBusWithContext(i0 context.Context, i1 *cloudwatchevents.DescribeEventBusInput, i2 ...request.Option) (r0 *cloudwatchevents.DescribeEventBusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventBusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchevents.DescribeEventBusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) fakeDescribeEventBusWithContext(ctx context.Context, in *cloudwatchevents.DescribeEventBusInput, _ ...request.Option) (*cloudwatchevents.DescribeEventBusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEventBus cancelled", ctx.Err())
	default:
		return d.DescribeEventBus(in)
	}
}

func (d *CloudWatchEventsDouble) DescribeEventSource(i0 *cloudwatchevents.DescribeEventSourceInput) (r0 *cloudwatchevents.DescribeEventSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventSource", i0)
	r0, _ = returns[0].(*cloudwatchevents.DescribeEventSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) DescribeEventSourceRequest(i0 *cloudwatchevents.DescribeEventSourceInput) (r0 *request.Request, r1 *cloudwatchevents.DescribeEventSourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventSourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchevents.DescribeEventSourceOutput)
	return
}

func (d *CloudWatchEventsDouble) DescribeEventSourceWithContext(i0 context.Context, i1 *cloudwatchevents.DescribeEventSourceInput, i2 ...request.Option) (r0 *cloudwatchevents.DescribeEventSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventSourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchevents.DescribeEventSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) fakeDescribeEventSourceWithContext(ctx context.Context, in *cloudwatchevents.DescribeEventSourceInput, _ ...request.Option) (*cloudwatchevents.DescribeEventSourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEventSource cancelled", ctx.Err())
	default:
		return d.DescribeEventSource(in)
	}
}

func (d *CloudWatchEventsDouble) DescribePartnerEventSource(i0 *cloudwatchevents.DescribePartnerEventSourceInput) (r0 *cloudwatchevents.DescribePartnerEventSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePartnerEventSource", i0)
	r0, _ = returns[0].(*cloudwatchevents.DescribePartnerEventSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) DescribePartnerEventSourceRequest(i0 *cloudwatchevents.DescribePartnerEventSourceInput) (r0 *request.Request, r1 *cloudwatchevents.DescribePartnerEventSourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePartnerEventSourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchevents.DescribePartnerEventSourceOutput)
	return
}

func (d *CloudWatchEventsDouble) DescribePartnerEventSourceWithContext(i0 context.Context, i1 *cloudwatchevents.DescribePartnerEventSourceInput, i2 ...request.Option) (r0 *cloudwatchevents.DescribePartnerEventSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePartnerEventSourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchevents.DescribePartnerEventSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) fakeDescribePartnerEventSourceWithContext(ctx context.Context, in *cloudwatchevents.DescribePartnerEventSourceInput, _ ...request.Option) (*cloudwatchevents.DescribePartnerEventSourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribePartnerEventSource cancelled", ctx.Err())
	default:
		return d.DescribePartnerEventSource(in)
	}
}

func (d *CloudWatchEventsDouble) DescribeRule(i0 *cloudwatchevents.DescribeRuleInput) (r0 *cloudwatchevents.DescribeRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRule", i0)
	r0, _ = returns[0].(*cloudwatchevents.DescribeRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) DescribeRuleRequest(i0 *cloudwatchevents.DescribeRuleInput) (r0 *request.Request, r1 *cloudwatchevents.DescribeRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchevents.DescribeRuleOutput)
	return
}

func (d *CloudWatchEventsDouble) DescribeRuleWithContext(i0 context.Context, i1 *cloudwatchevents.DescribeRuleInput, i2 ...request.Option) (r0 *cloudwatchevents.DescribeRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchevents.DescribeRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) fakeDescribeRuleWithContext(ctx context.Context, in *cloudwatchevents.DescribeRuleInput, _ ...request.Option) (*cloudwatchevents.DescribeRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeRule cancelled", ctx.Err())
	default:
		return d.DescribeRule(in)
	}
}

func (d *CloudWatchEventsDouble) DisableRule(i0 *cloudwatchevents.DisableRuleInput) (r0 *cloudwatchevents.DisableRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableRule", i0)
	r0, _ = returns[0].(*cloudwatchevents.DisableRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) DisableRuleRequest(i0 *cloudwatchevents.DisableRuleInput) (r0 *request.Request, r1 *cloudwatchevents.DisableRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchevents.DisableRuleOutput)
	return
}

func (d *CloudWatchEventsDouble) DisableRuleWithContext(i0 context.Context, i1 *cloudwatchevents.DisableRuleInput, i2 ...request.Option) (r0 *cloudwatchevents.DisableRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchevents.DisableRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) fakeDisableRuleWithContext(ctx context.Context, in *cloudwatchevents.DisableRuleInput, _ ...request.Option) (*cloudwatchevents.DisableRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisableRule cancelled", ctx.Err())
	default:
		return d.DisableRule(in)
	}
}

func (d *CloudWatchEventsDouble) EnableRule(i0 *cloudwatchevents.EnableRuleInput) (r0 *cloudwatchevents.EnableRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableRule", i0)
	r0, _ = returns[0].(*cloudwatchevents.EnableRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) EnableRuleRequest(i0 *cloudwatchevents.EnableRuleInput) (r0 *request.Request, r1 *cloudwatchevents.EnableRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchevents.EnableRuleOutput)
	return
}

func (d *CloudWatchEventsDouble) EnableRuleWithContext(i0 context.Context, i1 *cloudwatchevents.EnableRuleInput, i2 ...request.Option) (r0 *cloudwatchevents.EnableRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchevents.EnableRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) fakeEnableRuleWithContext(ctx context.Context, in *cloudwatchevents.EnableRuleInput, _ ...request.Option) (*cloudwatchevents.EnableRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "EnableRule cancelled", ctx.Err())
	default:
		return d.EnableRule(in)
	}
}

func (d *CloudWatchEventsDouble) ListEventBuses(i0 *cloudwatchevents.ListEventBusesInput) (r0 *cloudwatchevents.ListEventBusesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEventBuses", i0)
	r0, _ = returns[0].(*cloudwatchevents.ListEventBusesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) ListEventBusesRequest(i0 *cloudwatchevents.ListEventBusesInput) (r0 *request.Request, r1 *cloudwatchevents.ListEventBusesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEventBusesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchevents.ListEventBusesOutput)
	return
}

func (d *CloudWatchEventsDouble) ListEventBusesWithContext(i0 context.Context, i1 *cloudwatchevents.ListEventBusesInput, i2 ...request.Option) (r0 *cloudwatchevents.ListEventBusesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEventBusesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchevents.ListEventBusesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) fakeListEventBusesWithContext(ctx context.Context, in *cloudwatchevents.ListEventBusesInput, _ ...request.Option) (*cloudwatchevents.ListEventBusesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListEventBuses cancelled", ctx.Err())
	default:
		return d.ListEventBuses(in)
	}
}

func (d *CloudWatchEventsDouble) ListEventSources(i0 *cloudwatchevents.ListEventSourcesInput) (r0 *cloudwatchevents.ListEventSourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEventSources", i0)
	r0, _ = returns[0].(*cloudwatchevents.ListEventSourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) ListEventSourcesRequest(i0 *cloudwatchevents.ListEventSourcesInput) (r0 *request.Request, r1 *cloudwatchevents.ListEventSourcesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEventSourcesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchevents.ListEventSourcesOutput)
	return
}

func (d *CloudWatchEventsDouble) ListEventSourcesWithContext(i0 context.Context, i1 *cloudwatchevents.ListEventSourcesInput, i2 ...request.Option) (r0 *cloudwatchevents.ListEventSourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEventSourcesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchevents.ListEventSourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) fakeListEventSourcesWithContext(ctx context.Context, in *cloudwatchevents.ListEventSourcesInput, _ ...request.Option) (*cloudwatchevents.ListEventSourcesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListEventSources cancelled", ctx.Err())
	default:
		return d.ListEventSources(in)
	}
}

func (d *CloudWatchEventsDouble) ListPartnerEventSourceAccounts(i0 *cloudwatchevents.ListPartnerEventSourceAccountsInput) (r0 *cloudwatchevents.ListPartnerEventSourceAccountsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPartnerEventSourceAccounts", i0)
	r0, _ = returns[0].(*cloudwatchevents.ListPartnerEventSourceAccountsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) ListPartnerEventSourceAccountsRequest(i0 *cloudwatchevents.ListPartnerEventSourceAccountsInput) (r0 *request.Request, r1 *cloudwatchevents.ListPartnerEventSourceAccountsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPartnerEventSourceAccountsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchevents.ListPartnerEventSourceAccountsOutput)
	return
}

func (d *CloudWatchEventsDouble) ListPartnerEventSourceAccountsWithContext(i0 context.Context, i1 *cloudwatchevents.ListPartnerEventSourceAccountsInput, i2 ...request.Option) (r0 *cloudwatchevents.ListPartnerEventSourceAccountsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPartnerEventSourceAccountsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchevents.ListPartnerEventSourceAccountsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) fakeListPartnerEventSourceAccountsWithContext(ctx context.Context, in *cloudwatchevents.ListPartnerEventSourceAccountsInput, _ ...request.Option) (*cloudwatchevents.ListPartnerEventSourceAccountsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListPartnerEventSourceAccounts cancelled", ctx.Err())
	default:
		return d.ListPartnerEventSourceAccounts(in)
	}
}

func (d *CloudWatchEventsDouble) ListPartnerEventSources(i0 *cloudwatchevents.ListPartnerEventSourcesInput) (r0 *cloudwatchevents.ListPartnerEventSourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPartnerEventSources", i0)
	r0, _ = returns[0].(*cloudwatchevents.ListPartnerEventSourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) ListPartnerEventSourcesRequest(i0 *cloudwatchevents.ListPartnerEventSourcesInput) (r0 *request.Request, r1 *cloudwatchevents.ListPartnerEventSourcesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPartnerEventSourcesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchevents.ListPartnerEventSourcesOutput)
	return
}

func (d *CloudWatchEventsDouble) ListPartnerEventSourcesWithContext(i0 context.Context, i1 *cloudwatchevents.ListPartnerEventSourcesInput, i2 ...request.Option) (r0 *cloudwatchevents.ListPartnerEventSourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPartnerEventSourcesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchevents.ListPartnerEventSourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) fakeListPartnerEventSourcesWithContext(ctx context.Context, in *cloudwatchevents.ListPartnerEventSourcesInput, _ ...request.Option) (*cloudwatchevents.ListPartnerEventSourcesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListPartnerEventSources cancelled", ctx.Err())
	default:
		return d.ListPartnerEventSources(in)
	}
}

func (d *CloudWatchEventsDouble) ListRuleNamesByTarget(i0 *cloudwatchevents.ListRuleNamesByTargetInput) (r0 *cloudwatchevents.ListRuleNamesByTargetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRuleNamesByTarget", i0)
	r0, _ = returns[0].(*cloudwatchevents.ListRuleNamesByTargetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) ListRuleNamesByTargetRequest(i0 *cloudwatchevents.ListRuleNamesByTargetInput) (r0 *request.Request, r1 *cloudwatchevents.ListRuleNamesByTargetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRuleNamesByTargetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchevents.ListRuleNamesByTargetOutput)
	return
}

func (d *CloudWatchEventsDouble) ListRuleNamesByTargetWithContext(i0 context.Context, i1 *cloudwatchevents.ListRuleNamesByTargetInput, i2 ...request.Option) (r0 *cloudwatchevents.ListRuleNamesByTargetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRuleNamesByTargetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchevents.ListRuleNamesByTargetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) fakeListRuleNamesByTargetWithContext(ctx context.Context, in *cloudwatchevents.ListRuleNamesByTargetInput, _ ...request.Option) (*cloudwatchevents.ListRuleNamesByTargetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListRuleNamesByTarget cancelled", ctx.Err())
	default:
		return d.ListRuleNamesByTarget(in)
	}
}

func (d *CloudWatchEventsDouble) ListRules(i0 *cloudwatchevents.ListRulesInput) (r0 *cloudwatchevents.ListRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRules", i0)
	r0, _ = returns[0].(*cloudwatchevents.ListRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) ListRulesRequest(i0 *cloudwatchevents.ListRulesInput) (r0 *request.Request, r1 *cloudwatchevents.ListRulesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRulesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchevents.ListRulesOutput)
	return
}

func (d *CloudWatchEventsDouble) ListRulesWithContext(i0 context.Context, i1 *cloudwatchevents.ListRulesInput, i2 ...request.Option) (r0 *cloudwatchevents.ListRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRulesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchevents.ListRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) fakeListRulesWithContext(ctx context.Context, in *cloudwatchevents.ListRulesInput, _ ...request.Option) (*cloudwatchevents.ListRulesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListRules cancelled", ctx.Err())
	default:
		return d.ListRules(in)
	}
}

func (d *CloudWatchEventsDouble) ListTagsForResource(i0 *cloudwatchevents.ListTagsForResourceInput) (r0 *cloudwatchevents.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*cloudwatchevents.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) ListTagsForResourceRequest(i0 *cloudwatchevents.ListTagsForResourceInput) (r0 *request.Request, r1 *cloudwatchevents.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchevents.ListTagsForResourceOutput)
	return
}

func (d *CloudWatchEventsDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *cloudwatchevents.ListTagsForResourceInput, i2 ...request.Option) (r0 *cloudwatchevents.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchevents.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *cloudwatchevents.ListTagsForResourceInput, _ ...request.Option) (*cloudwatchevents.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *CloudWatchEventsDouble) ListTargetsByRule(i0 *cloudwatchevents.ListTargetsByRuleInput) (r0 *cloudwatchevents.ListTargetsByRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTargetsByRule", i0)
	r0, _ = returns[0].(*cloudwatchevents.ListTargetsByRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) ListTargetsByRuleRequest(i0 *cloudwatchevents.ListTargetsByRuleInput) (r0 *request.Request, r1 *cloudwatchevents.ListTargetsByRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTargetsByRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchevents.ListTargetsByRuleOutput)
	return
}

func (d *CloudWatchEventsDouble) ListTargetsByRuleWithContext(i0 context.Context, i1 *cloudwatchevents.ListTargetsByRuleInput, i2 ...request.Option) (r0 *cloudwatchevents.ListTargetsByRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTargetsByRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchevents.ListTargetsByRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) fakeListTargetsByRuleWithContext(ctx context.Context, in *cloudwatchevents.ListTargetsByRuleInput, _ ...request.Option) (*cloudwatchevents.ListTargetsByRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTargetsByRule cancelled", ctx.Err())
	default:
		return d.ListTargetsByRule(in)
	}
}

func (d *CloudWatchEventsDouble) PutEvents(i0 *cloudwatchevents.PutEventsInput) (r0 *cloudwatchevents.PutEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutEvents", i0)
	r0, _ = returns[0].(*cloudwatchevents.PutEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) PutEventsRequest(i0 *cloudwatchevents.PutEventsInput) (r0 *request.Request, r1 *cloudwatchevents.PutEventsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutEventsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchevents.PutEventsOutput)
	return
}

func (d *CloudWatchEventsDouble) PutEventsWithContext(i0 context.Context, i1 *cloudwatchevents.PutEventsInput, i2 ...request.Option) (r0 *cloudwatchevents.PutEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutEventsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchevents.PutEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) fakePutEventsWithContext(ctx context.Context, in *cloudwatchevents.PutEventsInput, _ ...request.Option) (*cloudwatchevents.PutEventsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutEvents cancelled", ctx.Err())
	default:
		return d.PutEvents(in)
	}
}

func (d *CloudWatchEventsDouble) PutPartnerEvents(i0 *cloudwatchevents.PutPartnerEventsInput) (r0 *cloudwatchevents.PutPartnerEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutPartnerEvents", i0)
	r0, _ = returns[0].(*cloudwatchevents.PutPartnerEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) PutPartnerEventsRequest(i0 *cloudwatchevents.PutPartnerEventsInput) (r0 *request.Request, r1 *cloudwatchevents.PutPartnerEventsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutPartnerEventsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchevents.PutPartnerEventsOutput)
	return
}

func (d *CloudWatchEventsDouble) PutPartnerEventsWithContext(i0 context.Context, i1 *cloudwatchevents.PutPartnerEventsInput, i2 ...request.Option) (r0 *cloudwatchevents.PutPartnerEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutPartnerEventsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchevents.PutPartnerEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) fakePutPartnerEventsWithContext(ctx context.Context, in *cloudwatchevents.PutPartnerEventsInput, _ ...request.Option) (*cloudwatchevents.PutPartnerEventsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutPartnerEvents cancelled", ctx.Err())
	default:
		return d.PutPartnerEvents(in)
	}
}

func (d *CloudWatchEventsDouble) PutPermission(i0 *cloudwatchevents.PutPermissionInput) (r0 *cloudwatchevents.PutPermissionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutPermission", i0)
	r0, _ = returns[0].(*cloudwatchevents.PutPermissionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) PutPermissionRequest(i0 *cloudwatchevents.PutPermissionInput) (r0 *request.Request, r1 *cloudwatchevents.PutPermissionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutPermissionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchevents.PutPermissionOutput)
	return
}

func (d *CloudWatchEventsDouble) PutPermissionWithContext(i0 context.Context, i1 *cloudwatchevents.PutPermissionInput, i2 ...request.Option) (r0 *cloudwatchevents.PutPermissionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutPermissionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchevents.PutPermissionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) fakePutPermissionWithContext(ctx context.Context, in *cloudwatchevents.PutPermissionInput, _ ...request.Option) (*cloudwatchevents.PutPermissionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutPermission cancelled", ctx.Err())
	default:
		return d.PutPermission(in)
	}
}

func (d *CloudWatchEventsDouble) PutRule(i0 *cloudwatchevents.PutRuleInput) (r0 *cloudwatchevents.PutRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRule", i0)
	r0, _ = returns[0].(*cloudwatchevents.PutRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) PutRuleRequest(i0 *cloudwatchevents.PutRuleInput) (r0 *request.Request, r1 *cloudwatchevents.PutRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchevents.PutRuleOutput)
	return
}

func (d *CloudWatchEventsDouble) PutRuleWithContext(i0 context.Context, i1 *cloudwatchevents.PutRuleInput, i2 ...request.Option) (r0 *cloudwatchevents.PutRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchevents.PutRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) fakePutRuleWithContext(ctx context.Context, in *cloudwatchevents.PutRuleInput, _ ...request.Option) (*cloudwatchevents.PutRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutRule cancelled", ctx.Err())
	default:
		return d.PutRule(in)
	}
}

func (d *CloudWatchEventsDouble) PutTargets(i0 *cloudwatchevents.PutTargetsInput) (r0 *cloudwatchevents.PutTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutTargets", i0)
	r0, _ = returns[0].(*cloudwatchevents.PutTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) PutTargetsRequest(i0 *cloudwatchevents.PutTargetsInput) (r0 *request.Request, r1 *cloudwatchevents.PutTargetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutTargetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchevents.PutTargetsOutput)
	return
}

func (d *CloudWatchEventsDouble) PutTargetsWithContext(i0 context.Context, i1 *cloudwatchevents.PutTargetsInput, i2 ...request.Option) (r0 *cloudwatchevents.PutTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutTargetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchevents.PutTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) fakePutTargetsWithContext(ctx context.Context, in *cloudwatchevents.PutTargetsInput, _ ...request.Option) (*cloudwatchevents.PutTargetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutTargets cancelled", ctx.Err())
	default:
		return d.PutTargets(in)
	}
}

func (d *CloudWatchEventsDouble) RemovePermission(i0 *cloudwatchevents.RemovePermissionInput) (r0 *cloudwatchevents.RemovePermissionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemovePermission", i0)
	r0, _ = returns[0].(*cloudwatchevents.RemovePermissionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) RemovePermissionRequest(i0 *cloudwatchevents.RemovePermissionInput) (r0 *request.Request, r1 *cloudwatchevents.RemovePermissionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemovePermissionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchevents.RemovePermissionOutput)
	return
}

func (d *CloudWatchEventsDouble) RemovePermissionWithContext(i0 context.Context, i1 *cloudwatchevents.RemovePermissionInput, i2 ...request.Option) (r0 *cloudwatchevents.RemovePermissionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemovePermissionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchevents.RemovePermissionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) fakeRemovePermissionWithContext(ctx context.Context, in *cloudwatchevents.RemovePermissionInput, _ ...request.Option) (*cloudwatchevents.RemovePermissionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemovePermission cancelled", ctx.Err())
	default:
		return d.RemovePermission(in)
	}
}

func (d *CloudWatchEventsDouble) RemoveTargets(i0 *cloudwatchevents.RemoveTargetsInput) (r0 *cloudwatchevents.RemoveTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTargets", i0)
	r0, _ = returns[0].(*cloudwatchevents.RemoveTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) RemoveTargetsRequest(i0 *cloudwatchevents.RemoveTargetsInput) (r0 *request.Request, r1 *cloudwatchevents.RemoveTargetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTargetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchevents.RemoveTargetsOutput)
	return
}

func (d *CloudWatchEventsDouble) RemoveTargetsWithContext(i0 context.Context, i1 *cloudwatchevents.RemoveTargetsInput, i2 ...request.Option) (r0 *cloudwatchevents.RemoveTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTargetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchevents.RemoveTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) fakeRemoveTargetsWithContext(ctx context.Context, in *cloudwatchevents.RemoveTargetsInput, _ ...request.Option) (*cloudwatchevents.RemoveTargetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveTargets cancelled", ctx.Err())
	default:
		return d.RemoveTargets(in)
	}
}

func (d *CloudWatchEventsDouble) TagResource(i0 *cloudwatchevents.TagResourceInput) (r0 *cloudwatchevents.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*cloudwatchevents.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) TagResourceRequest(i0 *cloudwatchevents.TagResourceInput) (r0 *request.Request, r1 *cloudwatchevents.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchevents.TagResourceOutput)
	return
}

func (d *CloudWatchEventsDouble) TagResourceWithContext(i0 context.Context, i1 *cloudwatchevents.TagResourceInput, i2 ...request.Option) (r0 *cloudwatchevents.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchevents.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) fakeTagResourceWithContext(ctx context.Context, in *cloudwatchevents.TagResourceInput, _ ...request.Option) (*cloudwatchevents.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *CloudWatchEventsDouble) TestEventPattern(i0 *cloudwatchevents.TestEventPatternInput) (r0 *cloudwatchevents.TestEventPatternOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestEventPattern", i0)
	r0, _ = returns[0].(*cloudwatchevents.TestEventPatternOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) TestEventPatternRequest(i0 *cloudwatchevents.TestEventPatternInput) (r0 *request.Request, r1 *cloudwatchevents.TestEventPatternOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestEventPatternRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchevents.TestEventPatternOutput)
	return
}

func (d *CloudWatchEventsDouble) TestEventPatternWithContext(i0 context.Context, i1 *cloudwatchevents.TestEventPatternInput, i2 ...request.Option) (r0 *cloudwatchevents.TestEventPatternOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestEventPatternWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchevents.TestEventPatternOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) fakeTestEventPatternWithContext(ctx context.Context, in *cloudwatchevents.TestEventPatternInput, _ ...request.Option) (*cloudwatchevents.TestEventPatternOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TestEventPattern cancelled", ctx.Err())
	default:
		return d.TestEventPattern(in)
	}
}

func (d *CloudWatchEventsDouble) UntagResource(i0 *cloudwatchevents.UntagResourceInput) (r0 *cloudwatchevents.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*cloudwatchevents.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) UntagResourceRequest(i0 *cloudwatchevents.UntagResourceInput) (r0 *request.Request, r1 *cloudwatchevents.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatchevents.UntagResourceOutput)
	return
}

func (d *CloudWatchEventsDouble) UntagResourceWithContext(i0 context.Context, i1 *cloudwatchevents.UntagResourceInput, i2 ...request.Option) (r0 *cloudwatchevents.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatchevents.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchEventsDouble) fakeUntagResourceWithContext(ctx context.Context, in *cloudwatchevents.UntagResourceInput, _ ...request.Option) (*cloudwatchevents.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}
