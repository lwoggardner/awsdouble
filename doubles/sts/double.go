// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:15:19+11:00

// Package stsdouble provides a TestDouble implementation of stsiface.STSAPI
package stsdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/sts"
	"github.com/aws/aws-sdk-go/service/sts/stsiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// STSDouble is TestDouble for stsiface.STSAPI
type STSDouble struct {
	stsiface.STSAPI
	*awsdouble.AWSTestDouble
}

// Constructor for STSDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *STSDouble {
	result := &STSDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*stsiface.STSAPI)(nil), configurators...)
	return result
}

func (d *STSDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *STSDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AssumeRoleWithContext":
		return m.Fake(d.fakeAssumeRoleWithContext)

	case "AssumeRoleWithSAMLWithContext":
		return m.Fake(d.fakeAssumeRoleWithSAMLWithContext)

	case "AssumeRoleWithWebIdentityWithContext":
		return m.Fake(d.fakeAssumeRoleWithWebIdentityWithContext)

	case "DecodeAuthorizationMessageWithContext":
		return m.Fake(d.fakeDecodeAuthorizationMessageWithContext)

	case "GetAccessKeyInfoWithContext":
		return m.Fake(d.fakeGetAccessKeyInfoWithContext)

	case "GetCallerIdentityWithContext":
		return m.Fake(d.fakeGetCallerIdentityWithContext)

	case "GetFederationTokenWithContext":
		return m.Fake(d.fakeGetFederationTokenWithContext)

	case "GetSessionTokenWithContext":
		return m.Fake(d.fakeGetSessionTokenWithContext)

	default:
		return nil
	}
}

func (d *STSDouble) AssumeRole(i0 *sts.AssumeRoleInput) (r0 *sts.AssumeRoleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssumeRole", i0)
	r0, _ = returns[0].(*sts.AssumeRoleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *STSDouble) AssumeRoleRequest(i0 *sts.AssumeRoleInput) (r0 *request.Request, r1 *sts.AssumeRoleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssumeRoleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sts.AssumeRoleOutput)
	return
}

func (d *STSDouble) AssumeRoleWithContext(i0 context.Context, i1 *sts.AssumeRoleInput, i2 ...request.Option) (r0 *sts.AssumeRoleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssumeRoleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sts.AssumeRoleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *STSDouble) fakeAssumeRoleWithContext(ctx context.Context, in *sts.AssumeRoleInput, _ ...request.Option) (*sts.AssumeRoleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssumeRole cancelled", ctx.Err())
	default:
		return d.AssumeRole(in)
	}
}

func (d *STSDouble) AssumeRoleWithSAML(i0 *sts.AssumeRoleWithSAMLInput) (r0 *sts.AssumeRoleWithSAMLOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssumeRoleWithSAML", i0)
	r0, _ = returns[0].(*sts.AssumeRoleWithSAMLOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *STSDouble) AssumeRoleWithSAMLRequest(i0 *sts.AssumeRoleWithSAMLInput) (r0 *request.Request, r1 *sts.AssumeRoleWithSAMLOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssumeRoleWithSAMLRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sts.AssumeRoleWithSAMLOutput)
	return
}

func (d *STSDouble) AssumeRoleWithSAMLWithContext(i0 context.Context, i1 *sts.AssumeRoleWithSAMLInput, i2 ...request.Option) (r0 *sts.AssumeRoleWithSAMLOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssumeRoleWithSAMLWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sts.AssumeRoleWithSAMLOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *STSDouble) fakeAssumeRoleWithSAMLWithContext(ctx context.Context, in *sts.AssumeRoleWithSAMLInput, _ ...request.Option) (*sts.AssumeRoleWithSAMLOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssumeRoleWithSAML cancelled", ctx.Err())
	default:
		return d.AssumeRoleWithSAML(in)
	}
}

func (d *STSDouble) AssumeRoleWithWebIdentity(i0 *sts.AssumeRoleWithWebIdentityInput) (r0 *sts.AssumeRoleWithWebIdentityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssumeRoleWithWebIdentity", i0)
	r0, _ = returns[0].(*sts.AssumeRoleWithWebIdentityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *STSDouble) AssumeRoleWithWebIdentityRequest(i0 *sts.AssumeRoleWithWebIdentityInput) (r0 *request.Request, r1 *sts.AssumeRoleWithWebIdentityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssumeRoleWithWebIdentityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sts.AssumeRoleWithWebIdentityOutput)
	return
}

func (d *STSDouble) AssumeRoleWithWebIdentityWithContext(i0 context.Context, i1 *sts.AssumeRoleWithWebIdentityInput, i2 ...request.Option) (r0 *sts.AssumeRoleWithWebIdentityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssumeRoleWithWebIdentityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sts.AssumeRoleWithWebIdentityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *STSDouble) fakeAssumeRoleWithWebIdentityWithContext(ctx context.Context, in *sts.AssumeRoleWithWebIdentityInput, _ ...request.Option) (*sts.AssumeRoleWithWebIdentityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssumeRoleWithWebIdentity cancelled", ctx.Err())
	default:
		return d.AssumeRoleWithWebIdentity(in)
	}
}

func (d *STSDouble) DecodeAuthorizationMessage(i0 *sts.DecodeAuthorizationMessageInput) (r0 *sts.DecodeAuthorizationMessageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DecodeAuthorizationMessage", i0)
	r0, _ = returns[0].(*sts.DecodeAuthorizationMessageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *STSDouble) DecodeAuthorizationMessageRequest(i0 *sts.DecodeAuthorizationMessageInput) (r0 *request.Request, r1 *sts.DecodeAuthorizationMessageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DecodeAuthorizationMessageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sts.DecodeAuthorizationMessageOutput)
	return
}

func (d *STSDouble) DecodeAuthorizationMessageWithContext(i0 context.Context, i1 *sts.DecodeAuthorizationMessageInput, i2 ...request.Option) (r0 *sts.DecodeAuthorizationMessageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DecodeAuthorizationMessageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sts.DecodeAuthorizationMessageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *STSDouble) fakeDecodeAuthorizationMessageWithContext(ctx context.Context, in *sts.DecodeAuthorizationMessageInput, _ ...request.Option) (*sts.DecodeAuthorizationMessageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DecodeAuthorizationMessage cancelled", ctx.Err())
	default:
		return d.DecodeAuthorizationMessage(in)
	}
}

func (d *STSDouble) GetAccessKeyInfo(i0 *sts.GetAccessKeyInfoInput) (r0 *sts.GetAccessKeyInfoOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAccessKeyInfo", i0)
	r0, _ = returns[0].(*sts.GetAccessKeyInfoOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *STSDouble) GetAccessKeyInfoRequest(i0 *sts.GetAccessKeyInfoInput) (r0 *request.Request, r1 *sts.GetAccessKeyInfoOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAccessKeyInfoRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sts.GetAccessKeyInfoOutput)
	return
}

func (d *STSDouble) GetAccessKeyInfoWithContext(i0 context.Context, i1 *sts.GetAccessKeyInfoInput, i2 ...request.Option) (r0 *sts.GetAccessKeyInfoOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAccessKeyInfoWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sts.GetAccessKeyInfoOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *STSDouble) fakeGetAccessKeyInfoWithContext(ctx context.Context, in *sts.GetAccessKeyInfoInput, _ ...request.Option) (*sts.GetAccessKeyInfoOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetAccessKeyInfo cancelled", ctx.Err())
	default:
		return d.GetAccessKeyInfo(in)
	}
}

func (d *STSDouble) GetCallerIdentity(i0 *sts.GetCallerIdentityInput) (r0 *sts.GetCallerIdentityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCallerIdentity", i0)
	r0, _ = returns[0].(*sts.GetCallerIdentityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *STSDouble) GetCallerIdentityRequest(i0 *sts.GetCallerIdentityInput) (r0 *request.Request, r1 *sts.GetCallerIdentityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCallerIdentityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sts.GetCallerIdentityOutput)
	return
}

func (d *STSDouble) GetCallerIdentityWithContext(i0 context.Context, i1 *sts.GetCallerIdentityInput, i2 ...request.Option) (r0 *sts.GetCallerIdentityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCallerIdentityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sts.GetCallerIdentityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *STSDouble) fakeGetCallerIdentityWithContext(ctx context.Context, in *sts.GetCallerIdentityInput, _ ...request.Option) (*sts.GetCallerIdentityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetCallerIdentity cancelled", ctx.Err())
	default:
		return d.GetCallerIdentity(in)
	}
}

func (d *STSDouble) GetFederationToken(i0 *sts.GetFederationTokenInput) (r0 *sts.GetFederationTokenOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFederationToken", i0)
	r0, _ = returns[0].(*sts.GetFederationTokenOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *STSDouble) GetFederationTokenRequest(i0 *sts.GetFederationTokenInput) (r0 *request.Request, r1 *sts.GetFederationTokenOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFederationTokenRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sts.GetFederationTokenOutput)
	return
}

func (d *STSDouble) GetFederationTokenWithContext(i0 context.Context, i1 *sts.GetFederationTokenInput, i2 ...request.Option) (r0 *sts.GetFederationTokenOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFederationTokenWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sts.GetFederationTokenOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *STSDouble) fakeGetFederationTokenWithContext(ctx context.Context, in *sts.GetFederationTokenInput, _ ...request.Option) (*sts.GetFederationTokenOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetFederationToken cancelled", ctx.Err())
	default:
		return d.GetFederationToken(in)
	}
}

func (d *STSDouble) GetSessionToken(i0 *sts.GetSessionTokenInput) (r0 *sts.GetSessionTokenOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSessionToken", i0)
	r0, _ = returns[0].(*sts.GetSessionTokenOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *STSDouble) GetSessionTokenRequest(i0 *sts.GetSessionTokenInput) (r0 *request.Request, r1 *sts.GetSessionTokenOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSessionTokenRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sts.GetSessionTokenOutput)
	return
}

func (d *STSDouble) GetSessionTokenWithContext(i0 context.Context, i1 *sts.GetSessionTokenInput, i2 ...request.Option) (r0 *sts.GetSessionTokenOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSessionTokenWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sts.GetSessionTokenOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *STSDouble) fakeGetSessionTokenWithContext(ctx context.Context, in *sts.GetSessionTokenInput, _ ...request.Option) (*sts.GetSessionTokenOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetSessionToken cancelled", ctx.Err())
	default:
		return d.GetSessionToken(in)
	}
}
