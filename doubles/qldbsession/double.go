// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:14:29+11:00

// Package qldbsessiondouble provides a TestDouble implementation of qldbsessioniface.QLDBSessionAPI
package qldbsessiondouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/qldbsession"
	"github.com/aws/aws-sdk-go/service/qldbsession/qldbsessioniface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// QLDBSessionDouble is TestDouble for qldbsessioniface.QLDBSessionAPI
type QLDBSessionDouble struct {
	qldbsessioniface.QLDBSessionAPI
	*awsdouble.AWSTestDouble
}

// Constructor for QLDBSessionDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *QLDBSessionDouble {
	result := &QLDBSessionDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*qldbsessioniface.QLDBSessionAPI)(nil), configurators...)
	return result
}

func (d *QLDBSessionDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *QLDBSessionDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "SendCommandWithContext":
		return m.Fake(d.fakeSendCommandWithContext)

	default:
		return nil
	}
}

func (d *QLDBSessionDouble) SendCommand(i0 *qldbsession.SendCommandInput) (r0 *qldbsession.SendCommandOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendCommand", i0)
	r0, _ = returns[0].(*qldbsession.SendCommandOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QLDBSessionDouble) SendCommandRequest(i0 *qldbsession.SendCommandInput) (r0 *request.Request, r1 *qldbsession.SendCommandOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendCommandRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*qldbsession.SendCommandOutput)
	return
}

func (d *QLDBSessionDouble) SendCommandWithContext(i0 context.Context, i1 *qldbsession.SendCommandInput, i2 ...request.Option) (r0 *qldbsession.SendCommandOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendCommandWithContext", i0, i1, i2)
	r0, _ = returns[0].(*qldbsession.SendCommandOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QLDBSessionDouble) fakeSendCommandWithContext(ctx context.Context, in *qldbsession.SendCommandInput, _ ...request.Option) (*qldbsession.SendCommandOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SendCommand cancelled", ctx.Err())
	default:
		return d.SendCommand(in)
	}
}
