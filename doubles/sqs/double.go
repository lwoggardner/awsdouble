// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:15:12+11:00

// Package sqsdouble provides a TestDouble implementation of sqsiface.SQSAPI
package sqsdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/sqs"
	"github.com/aws/aws-sdk-go/service/sqs/sqsiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// SQSDouble is TestDouble for sqsiface.SQSAPI
type SQSDouble struct {
	sqsiface.SQSAPI
	*awsdouble.AWSTestDouble
}

// Constructor for SQSDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *SQSDouble {
	result := &SQSDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*sqsiface.SQSAPI)(nil), configurators...)
	return result
}

func (d *SQSDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *SQSDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AddPermissionWithContext":
		return m.Fake(d.fakeAddPermissionWithContext)

	case "ChangeMessageVisibilityBatchWithContext":
		return m.Fake(d.fakeChangeMessageVisibilityBatchWithContext)

	case "ChangeMessageVisibilityWithContext":
		return m.Fake(d.fakeChangeMessageVisibilityWithContext)

	case "CreateQueueWithContext":
		return m.Fake(d.fakeCreateQueueWithContext)

	case "DeleteMessageBatchWithContext":
		return m.Fake(d.fakeDeleteMessageBatchWithContext)

	case "DeleteMessageWithContext":
		return m.Fake(d.fakeDeleteMessageWithContext)

	case "DeleteQueueWithContext":
		return m.Fake(d.fakeDeleteQueueWithContext)

	case "GetQueueAttributesWithContext":
		return m.Fake(d.fakeGetQueueAttributesWithContext)

	case "GetQueueUrlWithContext":
		return m.Fake(d.fakeGetQueueUrlWithContext)

	case "ListDeadLetterSourceQueuesWithContext":
		return m.Fake(d.fakeListDeadLetterSourceQueuesWithContext)

	case "ListQueueTagsWithContext":
		return m.Fake(d.fakeListQueueTagsWithContext)

	case "ListQueuesWithContext":
		return m.Fake(d.fakeListQueuesWithContext)

	case "PurgeQueueWithContext":
		return m.Fake(d.fakePurgeQueueWithContext)

	case "ReceiveMessageWithContext":
		return m.Fake(d.fakeReceiveMessageWithContext)

	case "RemovePermissionWithContext":
		return m.Fake(d.fakeRemovePermissionWithContext)

	case "SendMessageBatchWithContext":
		return m.Fake(d.fakeSendMessageBatchWithContext)

	case "SendMessageWithContext":
		return m.Fake(d.fakeSendMessageWithContext)

	case "SetQueueAttributesWithContext":
		return m.Fake(d.fakeSetQueueAttributesWithContext)

	case "TagQueueWithContext":
		return m.Fake(d.fakeTagQueueWithContext)

	case "UntagQueueWithContext":
		return m.Fake(d.fakeUntagQueueWithContext)

	default:
		return nil
	}
}

func (d *SQSDouble) AddPermission(i0 *sqs.AddPermissionInput) (r0 *sqs.AddPermissionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddPermission", i0)
	r0, _ = returns[0].(*sqs.AddPermissionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) AddPermissionRequest(i0 *sqs.AddPermissionInput) (r0 *request.Request, r1 *sqs.AddPermissionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddPermissionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sqs.AddPermissionOutput)
	return
}

func (d *SQSDouble) AddPermissionWithContext(i0 context.Context, i1 *sqs.AddPermissionInput, i2 ...request.Option) (r0 *sqs.AddPermissionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddPermissionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sqs.AddPermissionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) fakeAddPermissionWithContext(ctx context.Context, in *sqs.AddPermissionInput, _ ...request.Option) (*sqs.AddPermissionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddPermission cancelled", ctx.Err())
	default:
		return d.AddPermission(in)
	}
}

func (d *SQSDouble) ChangeMessageVisibility(i0 *sqs.ChangeMessageVisibilityInput) (r0 *sqs.ChangeMessageVisibilityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ChangeMessageVisibility", i0)
	r0, _ = returns[0].(*sqs.ChangeMessageVisibilityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) ChangeMessageVisibilityBatch(i0 *sqs.ChangeMessageVisibilityBatchInput) (r0 *sqs.ChangeMessageVisibilityBatchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ChangeMessageVisibilityBatch", i0)
	r0, _ = returns[0].(*sqs.ChangeMessageVisibilityBatchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) ChangeMessageVisibilityBatchRequest(i0 *sqs.ChangeMessageVisibilityBatchInput) (r0 *request.Request, r1 *sqs.ChangeMessageVisibilityBatchOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ChangeMessageVisibilityBatchRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sqs.ChangeMessageVisibilityBatchOutput)
	return
}

func (d *SQSDouble) ChangeMessageVisibilityBatchWithContext(i0 context.Context, i1 *sqs.ChangeMessageVisibilityBatchInput, i2 ...request.Option) (r0 *sqs.ChangeMessageVisibilityBatchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ChangeMessageVisibilityBatchWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sqs.ChangeMessageVisibilityBatchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) fakeChangeMessageVisibilityBatchWithContext(ctx context.Context, in *sqs.ChangeMessageVisibilityBatchInput, _ ...request.Option) (*sqs.ChangeMessageVisibilityBatchOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ChangeMessageVisibilityBatch cancelled", ctx.Err())
	default:
		return d.ChangeMessageVisibilityBatch(in)
	}
}

func (d *SQSDouble) ChangeMessageVisibilityRequest(i0 *sqs.ChangeMessageVisibilityInput) (r0 *request.Request, r1 *sqs.ChangeMessageVisibilityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ChangeMessageVisibilityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sqs.ChangeMessageVisibilityOutput)
	return
}

func (d *SQSDouble) ChangeMessageVisibilityWithContext(i0 context.Context, i1 *sqs.ChangeMessageVisibilityInput, i2 ...request.Option) (r0 *sqs.ChangeMessageVisibilityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ChangeMessageVisibilityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sqs.ChangeMessageVisibilityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) fakeChangeMessageVisibilityWithContext(ctx context.Context, in *sqs.ChangeMessageVisibilityInput, _ ...request.Option) (*sqs.ChangeMessageVisibilityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ChangeMessageVisibility cancelled", ctx.Err())
	default:
		return d.ChangeMessageVisibility(in)
	}
}

func (d *SQSDouble) CreateQueue(i0 *sqs.CreateQueueInput) (r0 *sqs.CreateQueueOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateQueue", i0)
	r0, _ = returns[0].(*sqs.CreateQueueOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) CreateQueueRequest(i0 *sqs.CreateQueueInput) (r0 *request.Request, r1 *sqs.CreateQueueOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateQueueRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sqs.CreateQueueOutput)
	return
}

func (d *SQSDouble) CreateQueueWithContext(i0 context.Context, i1 *sqs.CreateQueueInput, i2 ...request.Option) (r0 *sqs.CreateQueueOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateQueueWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sqs.CreateQueueOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) fakeCreateQueueWithContext(ctx context.Context, in *sqs.CreateQueueInput, _ ...request.Option) (*sqs.CreateQueueOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateQueue cancelled", ctx.Err())
	default:
		return d.CreateQueue(in)
	}
}

func (d *SQSDouble) DeleteMessage(i0 *sqs.DeleteMessageInput) (r0 *sqs.DeleteMessageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMessage", i0)
	r0, _ = returns[0].(*sqs.DeleteMessageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) DeleteMessageBatch(i0 *sqs.DeleteMessageBatchInput) (r0 *sqs.DeleteMessageBatchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMessageBatch", i0)
	r0, _ = returns[0].(*sqs.DeleteMessageBatchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) DeleteMessageBatchRequest(i0 *sqs.DeleteMessageBatchInput) (r0 *request.Request, r1 *sqs.DeleteMessageBatchOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMessageBatchRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sqs.DeleteMessageBatchOutput)
	return
}

func (d *SQSDouble) DeleteMessageBatchWithContext(i0 context.Context, i1 *sqs.DeleteMessageBatchInput, i2 ...request.Option) (r0 *sqs.DeleteMessageBatchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMessageBatchWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sqs.DeleteMessageBatchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) fakeDeleteMessageBatchWithContext(ctx context.Context, in *sqs.DeleteMessageBatchInput, _ ...request.Option) (*sqs.DeleteMessageBatchOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteMessageBatch cancelled", ctx.Err())
	default:
		return d.DeleteMessageBatch(in)
	}
}

func (d *SQSDouble) DeleteMessageRequest(i0 *sqs.DeleteMessageInput) (r0 *request.Request, r1 *sqs.DeleteMessageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMessageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sqs.DeleteMessageOutput)
	return
}

func (d *SQSDouble) DeleteMessageWithContext(i0 context.Context, i1 *sqs.DeleteMessageInput, i2 ...request.Option) (r0 *sqs.DeleteMessageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMessageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sqs.DeleteMessageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) fakeDeleteMessageWithContext(ctx context.Context, in *sqs.DeleteMessageInput, _ ...request.Option) (*sqs.DeleteMessageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteMessage cancelled", ctx.Err())
	default:
		return d.DeleteMessage(in)
	}
}

func (d *SQSDouble) DeleteQueue(i0 *sqs.DeleteQueueInput) (r0 *sqs.DeleteQueueOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteQueue", i0)
	r0, _ = returns[0].(*sqs.DeleteQueueOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) DeleteQueueRequest(i0 *sqs.DeleteQueueInput) (r0 *request.Request, r1 *sqs.DeleteQueueOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteQueueRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sqs.DeleteQueueOutput)
	return
}

func (d *SQSDouble) DeleteQueueWithContext(i0 context.Context, i1 *sqs.DeleteQueueInput, i2 ...request.Option) (r0 *sqs.DeleteQueueOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteQueueWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sqs.DeleteQueueOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) fakeDeleteQueueWithContext(ctx context.Context, in *sqs.DeleteQueueInput, _ ...request.Option) (*sqs.DeleteQueueOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteQueue cancelled", ctx.Err())
	default:
		return d.DeleteQueue(in)
	}
}

func (d *SQSDouble) GetQueueAttributes(i0 *sqs.GetQueueAttributesInput) (r0 *sqs.GetQueueAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetQueueAttributes", i0)
	r0, _ = returns[0].(*sqs.GetQueueAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) GetQueueAttributesRequest(i0 *sqs.GetQueueAttributesInput) (r0 *request.Request, r1 *sqs.GetQueueAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetQueueAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sqs.GetQueueAttributesOutput)
	return
}

func (d *SQSDouble) GetQueueAttributesWithContext(i0 context.Context, i1 *sqs.GetQueueAttributesInput, i2 ...request.Option) (r0 *sqs.GetQueueAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetQueueAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sqs.GetQueueAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) fakeGetQueueAttributesWithContext(ctx context.Context, in *sqs.GetQueueAttributesInput, _ ...request.Option) (*sqs.GetQueueAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetQueueAttributes cancelled", ctx.Err())
	default:
		return d.GetQueueAttributes(in)
	}
}

func (d *SQSDouble) GetQueueUrl(i0 *sqs.GetQueueUrlInput) (r0 *sqs.GetQueueUrlOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetQueueUrl", i0)
	r0, _ = returns[0].(*sqs.GetQueueUrlOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) GetQueueUrlRequest(i0 *sqs.GetQueueUrlInput) (r0 *request.Request, r1 *sqs.GetQueueUrlOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetQueueUrlRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sqs.GetQueueUrlOutput)
	return
}

func (d *SQSDouble) GetQueueUrlWithContext(i0 context.Context, i1 *sqs.GetQueueUrlInput, i2 ...request.Option) (r0 *sqs.GetQueueUrlOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetQueueUrlWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sqs.GetQueueUrlOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) fakeGetQueueUrlWithContext(ctx context.Context, in *sqs.GetQueueUrlInput, _ ...request.Option) (*sqs.GetQueueUrlOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetQueueUrl cancelled", ctx.Err())
	default:
		return d.GetQueueUrl(in)
	}
}

func (d *SQSDouble) ListDeadLetterSourceQueues(i0 *sqs.ListDeadLetterSourceQueuesInput) (r0 *sqs.ListDeadLetterSourceQueuesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeadLetterSourceQueues", i0)
	r0, _ = returns[0].(*sqs.ListDeadLetterSourceQueuesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) ListDeadLetterSourceQueuesRequest(i0 *sqs.ListDeadLetterSourceQueuesInput) (r0 *request.Request, r1 *sqs.ListDeadLetterSourceQueuesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeadLetterSourceQueuesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sqs.ListDeadLetterSourceQueuesOutput)
	return
}

func (d *SQSDouble) ListDeadLetterSourceQueuesWithContext(i0 context.Context, i1 *sqs.ListDeadLetterSourceQueuesInput, i2 ...request.Option) (r0 *sqs.ListDeadLetterSourceQueuesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeadLetterSourceQueuesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sqs.ListDeadLetterSourceQueuesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) fakeListDeadLetterSourceQueuesWithContext(ctx context.Context, in *sqs.ListDeadLetterSourceQueuesInput, _ ...request.Option) (*sqs.ListDeadLetterSourceQueuesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDeadLetterSourceQueues cancelled", ctx.Err())
	default:
		return d.ListDeadLetterSourceQueues(in)
	}
}

func (d *SQSDouble) ListQueueTags(i0 *sqs.ListQueueTagsInput) (r0 *sqs.ListQueueTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListQueueTags", i0)
	r0, _ = returns[0].(*sqs.ListQueueTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) ListQueueTagsRequest(i0 *sqs.ListQueueTagsInput) (r0 *request.Request, r1 *sqs.ListQueueTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListQueueTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sqs.ListQueueTagsOutput)
	return
}

func (d *SQSDouble) ListQueueTagsWithContext(i0 context.Context, i1 *sqs.ListQueueTagsInput, i2 ...request.Option) (r0 *sqs.ListQueueTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListQueueTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sqs.ListQueueTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) fakeListQueueTagsWithContext(ctx context.Context, in *sqs.ListQueueTagsInput, _ ...request.Option) (*sqs.ListQueueTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListQueueTags cancelled", ctx.Err())
	default:
		return d.ListQueueTags(in)
	}
}

func (d *SQSDouble) ListQueues(i0 *sqs.ListQueuesInput) (r0 *sqs.ListQueuesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListQueues", i0)
	r0, _ = returns[0].(*sqs.ListQueuesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) ListQueuesRequest(i0 *sqs.ListQueuesInput) (r0 *request.Request, r1 *sqs.ListQueuesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListQueuesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sqs.ListQueuesOutput)
	return
}

func (d *SQSDouble) ListQueuesWithContext(i0 context.Context, i1 *sqs.ListQueuesInput, i2 ...request.Option) (r0 *sqs.ListQueuesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListQueuesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sqs.ListQueuesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) fakeListQueuesWithContext(ctx context.Context, in *sqs.ListQueuesInput, _ ...request.Option) (*sqs.ListQueuesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListQueues cancelled", ctx.Err())
	default:
		return d.ListQueues(in)
	}
}

func (d *SQSDouble) PurgeQueue(i0 *sqs.PurgeQueueInput) (r0 *sqs.PurgeQueueOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PurgeQueue", i0)
	r0, _ = returns[0].(*sqs.PurgeQueueOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) PurgeQueueRequest(i0 *sqs.PurgeQueueInput) (r0 *request.Request, r1 *sqs.PurgeQueueOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PurgeQueueRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sqs.PurgeQueueOutput)
	return
}

func (d *SQSDouble) PurgeQueueWithContext(i0 context.Context, i1 *sqs.PurgeQueueInput, i2 ...request.Option) (r0 *sqs.PurgeQueueOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PurgeQueueWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sqs.PurgeQueueOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) fakePurgeQueueWithContext(ctx context.Context, in *sqs.PurgeQueueInput, _ ...request.Option) (*sqs.PurgeQueueOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PurgeQueue cancelled", ctx.Err())
	default:
		return d.PurgeQueue(in)
	}
}

func (d *SQSDouble) ReceiveMessage(i0 *sqs.ReceiveMessageInput) (r0 *sqs.ReceiveMessageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReceiveMessage", i0)
	r0, _ = returns[0].(*sqs.ReceiveMessageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) ReceiveMessageRequest(i0 *sqs.ReceiveMessageInput) (r0 *request.Request, r1 *sqs.ReceiveMessageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReceiveMessageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sqs.ReceiveMessageOutput)
	return
}

func (d *SQSDouble) ReceiveMessageWithContext(i0 context.Context, i1 *sqs.ReceiveMessageInput, i2 ...request.Option) (r0 *sqs.ReceiveMessageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReceiveMessageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sqs.ReceiveMessageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) fakeReceiveMessageWithContext(ctx context.Context, in *sqs.ReceiveMessageInput, _ ...request.Option) (*sqs.ReceiveMessageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ReceiveMessage cancelled", ctx.Err())
	default:
		return d.ReceiveMessage(in)
	}
}

func (d *SQSDouble) RemovePermission(i0 *sqs.RemovePermissionInput) (r0 *sqs.RemovePermissionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemovePermission", i0)
	r0, _ = returns[0].(*sqs.RemovePermissionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) RemovePermissionRequest(i0 *sqs.RemovePermissionInput) (r0 *request.Request, r1 *sqs.RemovePermissionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemovePermissionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sqs.RemovePermissionOutput)
	return
}

func (d *SQSDouble) RemovePermissionWithContext(i0 context.Context, i1 *sqs.RemovePermissionInput, i2 ...request.Option) (r0 *sqs.RemovePermissionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemovePermissionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sqs.RemovePermissionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) fakeRemovePermissionWithContext(ctx context.Context, in *sqs.RemovePermissionInput, _ ...request.Option) (*sqs.RemovePermissionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemovePermission cancelled", ctx.Err())
	default:
		return d.RemovePermission(in)
	}
}

func (d *SQSDouble) SendMessage(i0 *sqs.SendMessageInput) (r0 *sqs.SendMessageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendMessage", i0)
	r0, _ = returns[0].(*sqs.SendMessageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) SendMessageBatch(i0 *sqs.SendMessageBatchInput) (r0 *sqs.SendMessageBatchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendMessageBatch", i0)
	r0, _ = returns[0].(*sqs.SendMessageBatchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) SendMessageBatchRequest(i0 *sqs.SendMessageBatchInput) (r0 *request.Request, r1 *sqs.SendMessageBatchOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendMessageBatchRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sqs.SendMessageBatchOutput)
	return
}

func (d *SQSDouble) SendMessageBatchWithContext(i0 context.Context, i1 *sqs.SendMessageBatchInput, i2 ...request.Option) (r0 *sqs.SendMessageBatchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendMessageBatchWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sqs.SendMessageBatchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) fakeSendMessageBatchWithContext(ctx context.Context, in *sqs.SendMessageBatchInput, _ ...request.Option) (*sqs.SendMessageBatchOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SendMessageBatch cancelled", ctx.Err())
	default:
		return d.SendMessageBatch(in)
	}
}

func (d *SQSDouble) SendMessageRequest(i0 *sqs.SendMessageInput) (r0 *request.Request, r1 *sqs.SendMessageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendMessageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sqs.SendMessageOutput)
	return
}

func (d *SQSDouble) SendMessageWithContext(i0 context.Context, i1 *sqs.SendMessageInput, i2 ...request.Option) (r0 *sqs.SendMessageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendMessageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sqs.SendMessageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) fakeSendMessageWithContext(ctx context.Context, in *sqs.SendMessageInput, _ ...request.Option) (*sqs.SendMessageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SendMessage cancelled", ctx.Err())
	default:
		return d.SendMessage(in)
	}
}

func (d *SQSDouble) SetQueueAttributes(i0 *sqs.SetQueueAttributesInput) (r0 *sqs.SetQueueAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetQueueAttributes", i0)
	r0, _ = returns[0].(*sqs.SetQueueAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) SetQueueAttributesRequest(i0 *sqs.SetQueueAttributesInput) (r0 *request.Request, r1 *sqs.SetQueueAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetQueueAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sqs.SetQueueAttributesOutput)
	return
}

func (d *SQSDouble) SetQueueAttributesWithContext(i0 context.Context, i1 *sqs.SetQueueAttributesInput, i2 ...request.Option) (r0 *sqs.SetQueueAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetQueueAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sqs.SetQueueAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) fakeSetQueueAttributesWithContext(ctx context.Context, in *sqs.SetQueueAttributesInput, _ ...request.Option) (*sqs.SetQueueAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetQueueAttributes cancelled", ctx.Err())
	default:
		return d.SetQueueAttributes(in)
	}
}

func (d *SQSDouble) TagQueue(i0 *sqs.TagQueueInput) (r0 *sqs.TagQueueOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagQueue", i0)
	r0, _ = returns[0].(*sqs.TagQueueOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) TagQueueRequest(i0 *sqs.TagQueueInput) (r0 *request.Request, r1 *sqs.TagQueueOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagQueueRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sqs.TagQueueOutput)
	return
}

func (d *SQSDouble) TagQueueWithContext(i0 context.Context, i1 *sqs.TagQueueInput, i2 ...request.Option) (r0 *sqs.TagQueueOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagQueueWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sqs.TagQueueOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) fakeTagQueueWithContext(ctx context.Context, in *sqs.TagQueueInput, _ ...request.Option) (*sqs.TagQueueOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagQueue cancelled", ctx.Err())
	default:
		return d.TagQueue(in)
	}
}

func (d *SQSDouble) UntagQueue(i0 *sqs.UntagQueueInput) (r0 *sqs.UntagQueueOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagQueue", i0)
	r0, _ = returns[0].(*sqs.UntagQueueOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) UntagQueueRequest(i0 *sqs.UntagQueueInput) (r0 *request.Request, r1 *sqs.UntagQueueOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagQueueRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sqs.UntagQueueOutput)
	return
}

func (d *SQSDouble) UntagQueueWithContext(i0 context.Context, i1 *sqs.UntagQueueInput, i2 ...request.Option) (r0 *sqs.UntagQueueOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagQueueWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sqs.UntagQueueOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SQSDouble) fakeUntagQueueWithContext(ctx context.Context, in *sqs.UntagQueueInput, _ ...request.Option) (*sqs.UntagQueueOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagQueue cancelled", ctx.Err())
	default:
		return d.UntagQueue(in)
	}
}
