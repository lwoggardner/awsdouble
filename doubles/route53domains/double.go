// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:14:43+11:00

// Package route53domainsdouble provides a TestDouble implementation of route53domainsiface.Route53DomainsAPI
package route53domainsdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/route53domains"
	"github.com/aws/aws-sdk-go/service/route53domains/route53domainsiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// Route53DomainsDouble is TestDouble for route53domainsiface.Route53DomainsAPI
type Route53DomainsDouble struct {
	route53domainsiface.Route53DomainsAPI
	*awsdouble.AWSTestDouble
}

// Constructor for Route53DomainsDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *Route53DomainsDouble {
	result := &Route53DomainsDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*route53domainsiface.Route53DomainsAPI)(nil), configurators...)
	return result
}

func (d *Route53DomainsDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *Route53DomainsDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CheckDomainAvailabilityWithContext":
		return m.Fake(d.fakeCheckDomainAvailabilityWithContext)

	case "CheckDomainTransferabilityWithContext":
		return m.Fake(d.fakeCheckDomainTransferabilityWithContext)

	case "DeleteTagsForDomainWithContext":
		return m.Fake(d.fakeDeleteTagsForDomainWithContext)

	case "DisableDomainAutoRenewWithContext":
		return m.Fake(d.fakeDisableDomainAutoRenewWithContext)

	case "DisableDomainTransferLockWithContext":
		return m.Fake(d.fakeDisableDomainTransferLockWithContext)

	case "EnableDomainAutoRenewWithContext":
		return m.Fake(d.fakeEnableDomainAutoRenewWithContext)

	case "EnableDomainTransferLockWithContext":
		return m.Fake(d.fakeEnableDomainTransferLockWithContext)

	case "GetContactReachabilityStatusWithContext":
		return m.Fake(d.fakeGetContactReachabilityStatusWithContext)

	case "GetDomainDetailWithContext":
		return m.Fake(d.fakeGetDomainDetailWithContext)

	case "GetDomainSuggestionsWithContext":
		return m.Fake(d.fakeGetDomainSuggestionsWithContext)

	case "GetOperationDetailWithContext":
		return m.Fake(d.fakeGetOperationDetailWithContext)

	case "ListDomainsPages":
		return m.Fake(d.fakeListDomainsPages)

	case "ListDomainsPagesWithContext":
		return m.Fake(d.fakeListDomainsPagesWithContext)

	case "ListDomainsWithContext":
		return m.Fake(d.fakeListDomainsWithContext)

	case "ListOperationsPages":
		return m.Fake(d.fakeListOperationsPages)

	case "ListOperationsPagesWithContext":
		return m.Fake(d.fakeListOperationsPagesWithContext)

	case "ListOperationsWithContext":
		return m.Fake(d.fakeListOperationsWithContext)

	case "ListTagsForDomainWithContext":
		return m.Fake(d.fakeListTagsForDomainWithContext)

	case "RegisterDomainWithContext":
		return m.Fake(d.fakeRegisterDomainWithContext)

	case "RenewDomainWithContext":
		return m.Fake(d.fakeRenewDomainWithContext)

	case "ResendContactReachabilityEmailWithContext":
		return m.Fake(d.fakeResendContactReachabilityEmailWithContext)

	case "RetrieveDomainAuthCodeWithContext":
		return m.Fake(d.fakeRetrieveDomainAuthCodeWithContext)

	case "TransferDomainWithContext":
		return m.Fake(d.fakeTransferDomainWithContext)

	case "UpdateDomainContactPrivacyWithContext":
		return m.Fake(d.fakeUpdateDomainContactPrivacyWithContext)

	case "UpdateDomainContactWithContext":
		return m.Fake(d.fakeUpdateDomainContactWithContext)

	case "UpdateDomainNameserversWithContext":
		return m.Fake(d.fakeUpdateDomainNameserversWithContext)

	case "UpdateTagsForDomainWithContext":
		return m.Fake(d.fakeUpdateTagsForDomainWithContext)

	case "ViewBillingWithContext":
		return m.Fake(d.fakeViewBillingWithContext)

	default:
		return nil
	}
}

func (d *Route53DomainsDouble) CheckDomainAvailability(i0 *route53domains.CheckDomainAvailabilityInput) (r0 *route53domains.CheckDomainAvailabilityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CheckDomainAvailability", i0)
	r0, _ = returns[0].(*route53domains.CheckDomainAvailabilityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) CheckDomainAvailabilityRequest(i0 *route53domains.CheckDomainAvailabilityInput) (r0 *request.Request, r1 *route53domains.CheckDomainAvailabilityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CheckDomainAvailabilityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53domains.CheckDomainAvailabilityOutput)
	return
}

func (d *Route53DomainsDouble) CheckDomainAvailabilityWithContext(i0 context.Context, i1 *route53domains.CheckDomainAvailabilityInput, i2 ...request.Option) (r0 *route53domains.CheckDomainAvailabilityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CheckDomainAvailabilityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53domains.CheckDomainAvailabilityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) fakeCheckDomainAvailabilityWithContext(ctx context.Context, in *route53domains.CheckDomainAvailabilityInput, _ ...request.Option) (*route53domains.CheckDomainAvailabilityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CheckDomainAvailability cancelled", ctx.Err())
	default:
		return d.CheckDomainAvailability(in)
	}
}

func (d *Route53DomainsDouble) CheckDomainTransferability(i0 *route53domains.CheckDomainTransferabilityInput) (r0 *route53domains.CheckDomainTransferabilityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CheckDomainTransferability", i0)
	r0, _ = returns[0].(*route53domains.CheckDomainTransferabilityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) CheckDomainTransferabilityRequest(i0 *route53domains.CheckDomainTransferabilityInput) (r0 *request.Request, r1 *route53domains.CheckDomainTransferabilityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CheckDomainTransferabilityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53domains.CheckDomainTransferabilityOutput)
	return
}

func (d *Route53DomainsDouble) CheckDomainTransferabilityWithContext(i0 context.Context, i1 *route53domains.CheckDomainTransferabilityInput, i2 ...request.Option) (r0 *route53domains.CheckDomainTransferabilityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CheckDomainTransferabilityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53domains.CheckDomainTransferabilityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) fakeCheckDomainTransferabilityWithContext(ctx context.Context, in *route53domains.CheckDomainTransferabilityInput, _ ...request.Option) (*route53domains.CheckDomainTransferabilityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CheckDomainTransferability cancelled", ctx.Err())
	default:
		return d.CheckDomainTransferability(in)
	}
}

func (d *Route53DomainsDouble) DeleteTagsForDomain(i0 *route53domains.DeleteTagsForDomainInput) (r0 *route53domains.DeleteTagsForDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTagsForDomain", i0)
	r0, _ = returns[0].(*route53domains.DeleteTagsForDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) DeleteTagsForDomainRequest(i0 *route53domains.DeleteTagsForDomainInput) (r0 *request.Request, r1 *route53domains.DeleteTagsForDomainOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTagsForDomainRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53domains.DeleteTagsForDomainOutput)
	return
}

func (d *Route53DomainsDouble) DeleteTagsForDomainWithContext(i0 context.Context, i1 *route53domains.DeleteTagsForDomainInput, i2 ...request.Option) (r0 *route53domains.DeleteTagsForDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTagsForDomainWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53domains.DeleteTagsForDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) fakeDeleteTagsForDomainWithContext(ctx context.Context, in *route53domains.DeleteTagsForDomainInput, _ ...request.Option) (*route53domains.DeleteTagsForDomainOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTagsForDomain cancelled", ctx.Err())
	default:
		return d.DeleteTagsForDomain(in)
	}
}

func (d *Route53DomainsDouble) DisableDomainAutoRenew(i0 *route53domains.DisableDomainAutoRenewInput) (r0 *route53domains.DisableDomainAutoRenewOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableDomainAutoRenew", i0)
	r0, _ = returns[0].(*route53domains.DisableDomainAutoRenewOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) DisableDomainAutoRenewRequest(i0 *route53domains.DisableDomainAutoRenewInput) (r0 *request.Request, r1 *route53domains.DisableDomainAutoRenewOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableDomainAutoRenewRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53domains.DisableDomainAutoRenewOutput)
	return
}

func (d *Route53DomainsDouble) DisableDomainAutoRenewWithContext(i0 context.Context, i1 *route53domains.DisableDomainAutoRenewInput, i2 ...request.Option) (r0 *route53domains.DisableDomainAutoRenewOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableDomainAutoRenewWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53domains.DisableDomainAutoRenewOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) fakeDisableDomainAutoRenewWithContext(ctx context.Context, in *route53domains.DisableDomainAutoRenewInput, _ ...request.Option) (*route53domains.DisableDomainAutoRenewOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisableDomainAutoRenew cancelled", ctx.Err())
	default:
		return d.DisableDomainAutoRenew(in)
	}
}

func (d *Route53DomainsDouble) DisableDomainTransferLock(i0 *route53domains.DisableDomainTransferLockInput) (r0 *route53domains.DisableDomainTransferLockOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableDomainTransferLock", i0)
	r0, _ = returns[0].(*route53domains.DisableDomainTransferLockOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) DisableDomainTransferLockRequest(i0 *route53domains.DisableDomainTransferLockInput) (r0 *request.Request, r1 *route53domains.DisableDomainTransferLockOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableDomainTransferLockRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53domains.DisableDomainTransferLockOutput)
	return
}

func (d *Route53DomainsDouble) DisableDomainTransferLockWithContext(i0 context.Context, i1 *route53domains.DisableDomainTransferLockInput, i2 ...request.Option) (r0 *route53domains.DisableDomainTransferLockOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableDomainTransferLockWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53domains.DisableDomainTransferLockOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) fakeDisableDomainTransferLockWithContext(ctx context.Context, in *route53domains.DisableDomainTransferLockInput, _ ...request.Option) (*route53domains.DisableDomainTransferLockOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisableDomainTransferLock cancelled", ctx.Err())
	default:
		return d.DisableDomainTransferLock(in)
	}
}

func (d *Route53DomainsDouble) EnableDomainAutoRenew(i0 *route53domains.EnableDomainAutoRenewInput) (r0 *route53domains.EnableDomainAutoRenewOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableDomainAutoRenew", i0)
	r0, _ = returns[0].(*route53domains.EnableDomainAutoRenewOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) EnableDomainAutoRenewRequest(i0 *route53domains.EnableDomainAutoRenewInput) (r0 *request.Request, r1 *route53domains.EnableDomainAutoRenewOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableDomainAutoRenewRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53domains.EnableDomainAutoRenewOutput)
	return
}

func (d *Route53DomainsDouble) EnableDomainAutoRenewWithContext(i0 context.Context, i1 *route53domains.EnableDomainAutoRenewInput, i2 ...request.Option) (r0 *route53domains.EnableDomainAutoRenewOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableDomainAutoRenewWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53domains.EnableDomainAutoRenewOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) fakeEnableDomainAutoRenewWithContext(ctx context.Context, in *route53domains.EnableDomainAutoRenewInput, _ ...request.Option) (*route53domains.EnableDomainAutoRenewOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "EnableDomainAutoRenew cancelled", ctx.Err())
	default:
		return d.EnableDomainAutoRenew(in)
	}
}

func (d *Route53DomainsDouble) EnableDomainTransferLock(i0 *route53domains.EnableDomainTransferLockInput) (r0 *route53domains.EnableDomainTransferLockOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableDomainTransferLock", i0)
	r0, _ = returns[0].(*route53domains.EnableDomainTransferLockOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) EnableDomainTransferLockRequest(i0 *route53domains.EnableDomainTransferLockInput) (r0 *request.Request, r1 *route53domains.EnableDomainTransferLockOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableDomainTransferLockRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53domains.EnableDomainTransferLockOutput)
	return
}

func (d *Route53DomainsDouble) EnableDomainTransferLockWithContext(i0 context.Context, i1 *route53domains.EnableDomainTransferLockInput, i2 ...request.Option) (r0 *route53domains.EnableDomainTransferLockOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableDomainTransferLockWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53domains.EnableDomainTransferLockOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) fakeEnableDomainTransferLockWithContext(ctx context.Context, in *route53domains.EnableDomainTransferLockInput, _ ...request.Option) (*route53domains.EnableDomainTransferLockOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "EnableDomainTransferLock cancelled", ctx.Err())
	default:
		return d.EnableDomainTransferLock(in)
	}
}

func (d *Route53DomainsDouble) GetContactReachabilityStatus(i0 *route53domains.GetContactReachabilityStatusInput) (r0 *route53domains.GetContactReachabilityStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetContactReachabilityStatus", i0)
	r0, _ = returns[0].(*route53domains.GetContactReachabilityStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) GetContactReachabilityStatusRequest(i0 *route53domains.GetContactReachabilityStatusInput) (r0 *request.Request, r1 *route53domains.GetContactReachabilityStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetContactReachabilityStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53domains.GetContactReachabilityStatusOutput)
	return
}

func (d *Route53DomainsDouble) GetContactReachabilityStatusWithContext(i0 context.Context, i1 *route53domains.GetContactReachabilityStatusInput, i2 ...request.Option) (r0 *route53domains.GetContactReachabilityStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetContactReachabilityStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53domains.GetContactReachabilityStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) fakeGetContactReachabilityStatusWithContext(ctx context.Context, in *route53domains.GetContactReachabilityStatusInput, _ ...request.Option) (*route53domains.GetContactReachabilityStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetContactReachabilityStatus cancelled", ctx.Err())
	default:
		return d.GetContactReachabilityStatus(in)
	}
}

func (d *Route53DomainsDouble) GetDomainDetail(i0 *route53domains.GetDomainDetailInput) (r0 *route53domains.GetDomainDetailOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDomainDetail", i0)
	r0, _ = returns[0].(*route53domains.GetDomainDetailOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) GetDomainDetailRequest(i0 *route53domains.GetDomainDetailInput) (r0 *request.Request, r1 *route53domains.GetDomainDetailOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDomainDetailRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53domains.GetDomainDetailOutput)
	return
}

func (d *Route53DomainsDouble) GetDomainDetailWithContext(i0 context.Context, i1 *route53domains.GetDomainDetailInput, i2 ...request.Option) (r0 *route53domains.GetDomainDetailOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDomainDetailWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53domains.GetDomainDetailOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) fakeGetDomainDetailWithContext(ctx context.Context, in *route53domains.GetDomainDetailInput, _ ...request.Option) (*route53domains.GetDomainDetailOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDomainDetail cancelled", ctx.Err())
	default:
		return d.GetDomainDetail(in)
	}
}

func (d *Route53DomainsDouble) GetDomainSuggestions(i0 *route53domains.GetDomainSuggestionsInput) (r0 *route53domains.GetDomainSuggestionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDomainSuggestions", i0)
	r0, _ = returns[0].(*route53domains.GetDomainSuggestionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) GetDomainSuggestionsRequest(i0 *route53domains.GetDomainSuggestionsInput) (r0 *request.Request, r1 *route53domains.GetDomainSuggestionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDomainSuggestionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53domains.GetDomainSuggestionsOutput)
	return
}

func (d *Route53DomainsDouble) GetDomainSuggestionsWithContext(i0 context.Context, i1 *route53domains.GetDomainSuggestionsInput, i2 ...request.Option) (r0 *route53domains.GetDomainSuggestionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDomainSuggestionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53domains.GetDomainSuggestionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) fakeGetDomainSuggestionsWithContext(ctx context.Context, in *route53domains.GetDomainSuggestionsInput, _ ...request.Option) (*route53domains.GetDomainSuggestionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDomainSuggestions cancelled", ctx.Err())
	default:
		return d.GetDomainSuggestions(in)
	}
}

func (d *Route53DomainsDouble) GetOperationDetail(i0 *route53domains.GetOperationDetailInput) (r0 *route53domains.GetOperationDetailOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOperationDetail", i0)
	r0, _ = returns[0].(*route53domains.GetOperationDetailOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) GetOperationDetailRequest(i0 *route53domains.GetOperationDetailInput) (r0 *request.Request, r1 *route53domains.GetOperationDetailOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOperationDetailRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53domains.GetOperationDetailOutput)
	return
}

func (d *Route53DomainsDouble) GetOperationDetailWithContext(i0 context.Context, i1 *route53domains.GetOperationDetailInput, i2 ...request.Option) (r0 *route53domains.GetOperationDetailOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOperationDetailWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53domains.GetOperationDetailOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) fakeGetOperationDetailWithContext(ctx context.Context, in *route53domains.GetOperationDetailInput, _ ...request.Option) (*route53domains.GetOperationDetailOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetOperationDetail cancelled", ctx.Err())
	default:
		return d.GetOperationDetail(in)
	}
}

func (d *Route53DomainsDouble) ListDomains(i0 *route53domains.ListDomainsInput) (r0 *route53domains.ListDomainsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDomains", i0)
	r0, _ = returns[0].(*route53domains.ListDomainsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) ListDomainsPages(i0 *route53domains.ListDomainsInput, i1 func(*route53domains.ListDomainsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDomainsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *Route53DomainsDouble) fakeListDomainsPages(in *route53domains.ListDomainsInput, pager func(*route53domains.ListDomainsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListDomains", paginators, in, pager)
}

func (d *Route53DomainsDouble) ListDomainsPagesWithContext(i0 context.Context, i1 *route53domains.ListDomainsInput, i2 func(*route53domains.ListDomainsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDomainsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *Route53DomainsDouble) fakeListDomainsPagesWithContext(ctx context.Context, in *route53domains.ListDomainsInput, pager func(*route53domains.ListDomainsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListDomains", paginators, ctx, in, pager, options...)
}

func (d *Route53DomainsDouble) ListDomainsRequest(i0 *route53domains.ListDomainsInput) (r0 *request.Request, r1 *route53domains.ListDomainsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDomainsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53domains.ListDomainsOutput)
	return
}

func (d *Route53DomainsDouble) ListDomainsWithContext(i0 context.Context, i1 *route53domains.ListDomainsInput, i2 ...request.Option) (r0 *route53domains.ListDomainsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDomainsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53domains.ListDomainsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) fakeListDomainsWithContext(ctx context.Context, in *route53domains.ListDomainsInput, _ ...request.Option) (*route53domains.ListDomainsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDomains cancelled", ctx.Err())
	default:
		return d.ListDomains(in)
	}
}

func (d *Route53DomainsDouble) ListOperations(i0 *route53domains.ListOperationsInput) (r0 *route53domains.ListOperationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOperations", i0)
	r0, _ = returns[0].(*route53domains.ListOperationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) ListOperationsPages(i0 *route53domains.ListOperationsInput, i1 func(*route53domains.ListOperationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOperationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *Route53DomainsDouble) fakeListOperationsPages(in *route53domains.ListOperationsInput, pager func(*route53domains.ListOperationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListOperations", paginators, in, pager)
}

func (d *Route53DomainsDouble) ListOperationsPagesWithContext(i0 context.Context, i1 *route53domains.ListOperationsInput, i2 func(*route53domains.ListOperationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOperationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *Route53DomainsDouble) fakeListOperationsPagesWithContext(ctx context.Context, in *route53domains.ListOperationsInput, pager func(*route53domains.ListOperationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListOperations", paginators, ctx, in, pager, options...)
}

func (d *Route53DomainsDouble) ListOperationsRequest(i0 *route53domains.ListOperationsInput) (r0 *request.Request, r1 *route53domains.ListOperationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOperationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53domains.ListOperationsOutput)
	return
}

func (d *Route53DomainsDouble) ListOperationsWithContext(i0 context.Context, i1 *route53domains.ListOperationsInput, i2 ...request.Option) (r0 *route53domains.ListOperationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOperationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53domains.ListOperationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) fakeListOperationsWithContext(ctx context.Context, in *route53domains.ListOperationsInput, _ ...request.Option) (*route53domains.ListOperationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListOperations cancelled", ctx.Err())
	default:
		return d.ListOperations(in)
	}
}

func (d *Route53DomainsDouble) ListTagsForDomain(i0 *route53domains.ListTagsForDomainInput) (r0 *route53domains.ListTagsForDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForDomain", i0)
	r0, _ = returns[0].(*route53domains.ListTagsForDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) ListTagsForDomainRequest(i0 *route53domains.ListTagsForDomainInput) (r0 *request.Request, r1 *route53domains.ListTagsForDomainOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForDomainRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53domains.ListTagsForDomainOutput)
	return
}

func (d *Route53DomainsDouble) ListTagsForDomainWithContext(i0 context.Context, i1 *route53domains.ListTagsForDomainInput, i2 ...request.Option) (r0 *route53domains.ListTagsForDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForDomainWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53domains.ListTagsForDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) fakeListTagsForDomainWithContext(ctx context.Context, in *route53domains.ListTagsForDomainInput, _ ...request.Option) (*route53domains.ListTagsForDomainOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForDomain cancelled", ctx.Err())
	default:
		return d.ListTagsForDomain(in)
	}
}

func (d *Route53DomainsDouble) RegisterDomain(i0 *route53domains.RegisterDomainInput) (r0 *route53domains.RegisterDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterDomain", i0)
	r0, _ = returns[0].(*route53domains.RegisterDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) RegisterDomainRequest(i0 *route53domains.RegisterDomainInput) (r0 *request.Request, r1 *route53domains.RegisterDomainOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterDomainRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53domains.RegisterDomainOutput)
	return
}

func (d *Route53DomainsDouble) RegisterDomainWithContext(i0 context.Context, i1 *route53domains.RegisterDomainInput, i2 ...request.Option) (r0 *route53domains.RegisterDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterDomainWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53domains.RegisterDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) fakeRegisterDomainWithContext(ctx context.Context, in *route53domains.RegisterDomainInput, _ ...request.Option) (*route53domains.RegisterDomainOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterDomain cancelled", ctx.Err())
	default:
		return d.RegisterDomain(in)
	}
}

func (d *Route53DomainsDouble) RenewDomain(i0 *route53domains.RenewDomainInput) (r0 *route53domains.RenewDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RenewDomain", i0)
	r0, _ = returns[0].(*route53domains.RenewDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) RenewDomainRequest(i0 *route53domains.RenewDomainInput) (r0 *request.Request, r1 *route53domains.RenewDomainOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RenewDomainRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53domains.RenewDomainOutput)
	return
}

func (d *Route53DomainsDouble) RenewDomainWithContext(i0 context.Context, i1 *route53domains.RenewDomainInput, i2 ...request.Option) (r0 *route53domains.RenewDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RenewDomainWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53domains.RenewDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) fakeRenewDomainWithContext(ctx context.Context, in *route53domains.RenewDomainInput, _ ...request.Option) (*route53domains.RenewDomainOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RenewDomain cancelled", ctx.Err())
	default:
		return d.RenewDomain(in)
	}
}

func (d *Route53DomainsDouble) ResendContactReachabilityEmail(i0 *route53domains.ResendContactReachabilityEmailInput) (r0 *route53domains.ResendContactReachabilityEmailOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResendContactReachabilityEmail", i0)
	r0, _ = returns[0].(*route53domains.ResendContactReachabilityEmailOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) ResendContactReachabilityEmailRequest(i0 *route53domains.ResendContactReachabilityEmailInput) (r0 *request.Request, r1 *route53domains.ResendContactReachabilityEmailOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResendContactReachabilityEmailRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53domains.ResendContactReachabilityEmailOutput)
	return
}

func (d *Route53DomainsDouble) ResendContactReachabilityEmailWithContext(i0 context.Context, i1 *route53domains.ResendContactReachabilityEmailInput, i2 ...request.Option) (r0 *route53domains.ResendContactReachabilityEmailOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResendContactReachabilityEmailWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53domains.ResendContactReachabilityEmailOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) fakeResendContactReachabilityEmailWithContext(ctx context.Context, in *route53domains.ResendContactReachabilityEmailInput, _ ...request.Option) (*route53domains.ResendContactReachabilityEmailOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ResendContactReachabilityEmail cancelled", ctx.Err())
	default:
		return d.ResendContactReachabilityEmail(in)
	}
}

func (d *Route53DomainsDouble) RetrieveDomainAuthCode(i0 *route53domains.RetrieveDomainAuthCodeInput) (r0 *route53domains.RetrieveDomainAuthCodeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RetrieveDomainAuthCode", i0)
	r0, _ = returns[0].(*route53domains.RetrieveDomainAuthCodeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) RetrieveDomainAuthCodeRequest(i0 *route53domains.RetrieveDomainAuthCodeInput) (r0 *request.Request, r1 *route53domains.RetrieveDomainAuthCodeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RetrieveDomainAuthCodeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53domains.RetrieveDomainAuthCodeOutput)
	return
}

func (d *Route53DomainsDouble) RetrieveDomainAuthCodeWithContext(i0 context.Context, i1 *route53domains.RetrieveDomainAuthCodeInput, i2 ...request.Option) (r0 *route53domains.RetrieveDomainAuthCodeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RetrieveDomainAuthCodeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53domains.RetrieveDomainAuthCodeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) fakeRetrieveDomainAuthCodeWithContext(ctx context.Context, in *route53domains.RetrieveDomainAuthCodeInput, _ ...request.Option) (*route53domains.RetrieveDomainAuthCodeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RetrieveDomainAuthCode cancelled", ctx.Err())
	default:
		return d.RetrieveDomainAuthCode(in)
	}
}

func (d *Route53DomainsDouble) TransferDomain(i0 *route53domains.TransferDomainInput) (r0 *route53domains.TransferDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TransferDomain", i0)
	r0, _ = returns[0].(*route53domains.TransferDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) TransferDomainRequest(i0 *route53domains.TransferDomainInput) (r0 *request.Request, r1 *route53domains.TransferDomainOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TransferDomainRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53domains.TransferDomainOutput)
	return
}

func (d *Route53DomainsDouble) TransferDomainWithContext(i0 context.Context, i1 *route53domains.TransferDomainInput, i2 ...request.Option) (r0 *route53domains.TransferDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TransferDomainWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53domains.TransferDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) fakeTransferDomainWithContext(ctx context.Context, in *route53domains.TransferDomainInput, _ ...request.Option) (*route53domains.TransferDomainOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TransferDomain cancelled", ctx.Err())
	default:
		return d.TransferDomain(in)
	}
}

func (d *Route53DomainsDouble) UpdateDomainContact(i0 *route53domains.UpdateDomainContactInput) (r0 *route53domains.UpdateDomainContactOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDomainContact", i0)
	r0, _ = returns[0].(*route53domains.UpdateDomainContactOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) UpdateDomainContactPrivacy(i0 *route53domains.UpdateDomainContactPrivacyInput) (r0 *route53domains.UpdateDomainContactPrivacyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDomainContactPrivacy", i0)
	r0, _ = returns[0].(*route53domains.UpdateDomainContactPrivacyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) UpdateDomainContactPrivacyRequest(i0 *route53domains.UpdateDomainContactPrivacyInput) (r0 *request.Request, r1 *route53domains.UpdateDomainContactPrivacyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDomainContactPrivacyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53domains.UpdateDomainContactPrivacyOutput)
	return
}

func (d *Route53DomainsDouble) UpdateDomainContactPrivacyWithContext(i0 context.Context, i1 *route53domains.UpdateDomainContactPrivacyInput, i2 ...request.Option) (r0 *route53domains.UpdateDomainContactPrivacyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDomainContactPrivacyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53domains.UpdateDomainContactPrivacyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) fakeUpdateDomainContactPrivacyWithContext(ctx context.Context, in *route53domains.UpdateDomainContactPrivacyInput, _ ...request.Option) (*route53domains.UpdateDomainContactPrivacyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDomainContactPrivacy cancelled", ctx.Err())
	default:
		return d.UpdateDomainContactPrivacy(in)
	}
}

func (d *Route53DomainsDouble) UpdateDomainContactRequest(i0 *route53domains.UpdateDomainContactInput) (r0 *request.Request, r1 *route53domains.UpdateDomainContactOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDomainContactRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53domains.UpdateDomainContactOutput)
	return
}

func (d *Route53DomainsDouble) UpdateDomainContactWithContext(i0 context.Context, i1 *route53domains.UpdateDomainContactInput, i2 ...request.Option) (r0 *route53domains.UpdateDomainContactOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDomainContactWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53domains.UpdateDomainContactOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) fakeUpdateDomainContactWithContext(ctx context.Context, in *route53domains.UpdateDomainContactInput, _ ...request.Option) (*route53domains.UpdateDomainContactOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDomainContact cancelled", ctx.Err())
	default:
		return d.UpdateDomainContact(in)
	}
}

func (d *Route53DomainsDouble) UpdateDomainNameservers(i0 *route53domains.UpdateDomainNameserversInput) (r0 *route53domains.UpdateDomainNameserversOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDomainNameservers", i0)
	r0, _ = returns[0].(*route53domains.UpdateDomainNameserversOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) UpdateDomainNameserversRequest(i0 *route53domains.UpdateDomainNameserversInput) (r0 *request.Request, r1 *route53domains.UpdateDomainNameserversOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDomainNameserversRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53domains.UpdateDomainNameserversOutput)
	return
}

func (d *Route53DomainsDouble) UpdateDomainNameserversWithContext(i0 context.Context, i1 *route53domains.UpdateDomainNameserversInput, i2 ...request.Option) (r0 *route53domains.UpdateDomainNameserversOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDomainNameserversWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53domains.UpdateDomainNameserversOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) fakeUpdateDomainNameserversWithContext(ctx context.Context, in *route53domains.UpdateDomainNameserversInput, _ ...request.Option) (*route53domains.UpdateDomainNameserversOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDomainNameservers cancelled", ctx.Err())
	default:
		return d.UpdateDomainNameservers(in)
	}
}

func (d *Route53DomainsDouble) UpdateTagsForDomain(i0 *route53domains.UpdateTagsForDomainInput) (r0 *route53domains.UpdateTagsForDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTagsForDomain", i0)
	r0, _ = returns[0].(*route53domains.UpdateTagsForDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) UpdateTagsForDomainRequest(i0 *route53domains.UpdateTagsForDomainInput) (r0 *request.Request, r1 *route53domains.UpdateTagsForDomainOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTagsForDomainRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53domains.UpdateTagsForDomainOutput)
	return
}

func (d *Route53DomainsDouble) UpdateTagsForDomainWithContext(i0 context.Context, i1 *route53domains.UpdateTagsForDomainInput, i2 ...request.Option) (r0 *route53domains.UpdateTagsForDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTagsForDomainWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53domains.UpdateTagsForDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) fakeUpdateTagsForDomainWithContext(ctx context.Context, in *route53domains.UpdateTagsForDomainInput, _ ...request.Option) (*route53domains.UpdateTagsForDomainOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateTagsForDomain cancelled", ctx.Err())
	default:
		return d.UpdateTagsForDomain(in)
	}
}

func (d *Route53DomainsDouble) ViewBilling(i0 *route53domains.ViewBillingInput) (r0 *route53domains.ViewBillingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ViewBilling", i0)
	r0, _ = returns[0].(*route53domains.ViewBillingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) ViewBillingRequest(i0 *route53domains.ViewBillingInput) (r0 *request.Request, r1 *route53domains.ViewBillingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ViewBillingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53domains.ViewBillingOutput)
	return
}

func (d *Route53DomainsDouble) ViewBillingWithContext(i0 context.Context, i1 *route53domains.ViewBillingInput, i2 ...request.Option) (r0 *route53domains.ViewBillingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ViewBillingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53domains.ViewBillingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53DomainsDouble) fakeViewBillingWithContext(ctx context.Context, in *route53domains.ViewBillingInput, _ ...request.Option) (*route53domains.ViewBillingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ViewBilling cancelled", ctx.Err())
	default:
		return d.ViewBilling(in)
	}
}
