// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:15:35+11:00

// Package workmaildouble provides a TestDouble implementation of workmailiface.WorkMailAPI
package workmaildouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/workmail"
	"github.com/aws/aws-sdk-go/service/workmail/workmailiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// WorkMailDouble is TestDouble for workmailiface.WorkMailAPI
type WorkMailDouble struct {
	workmailiface.WorkMailAPI
	*awsdouble.AWSTestDouble
}

// Constructor for WorkMailDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *WorkMailDouble {
	result := &WorkMailDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*workmailiface.WorkMailAPI)(nil), configurators...)
	return result
}

func (d *WorkMailDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *WorkMailDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AssociateDelegateToResourceWithContext":
		return m.Fake(d.fakeAssociateDelegateToResourceWithContext)

	case "AssociateMemberToGroupWithContext":
		return m.Fake(d.fakeAssociateMemberToGroupWithContext)

	case "CreateAliasWithContext":
		return m.Fake(d.fakeCreateAliasWithContext)

	case "CreateGroupWithContext":
		return m.Fake(d.fakeCreateGroupWithContext)

	case "CreateResourceWithContext":
		return m.Fake(d.fakeCreateResourceWithContext)

	case "CreateUserWithContext":
		return m.Fake(d.fakeCreateUserWithContext)

	case "DeleteAliasWithContext":
		return m.Fake(d.fakeDeleteAliasWithContext)

	case "DeleteGroupWithContext":
		return m.Fake(d.fakeDeleteGroupWithContext)

	case "DeleteMailboxPermissionsWithContext":
		return m.Fake(d.fakeDeleteMailboxPermissionsWithContext)

	case "DeleteResourceWithContext":
		return m.Fake(d.fakeDeleteResourceWithContext)

	case "DeleteUserWithContext":
		return m.Fake(d.fakeDeleteUserWithContext)

	case "DeregisterFromWorkMailWithContext":
		return m.Fake(d.fakeDeregisterFromWorkMailWithContext)

	case "DescribeGroupWithContext":
		return m.Fake(d.fakeDescribeGroupWithContext)

	case "DescribeOrganizationWithContext":
		return m.Fake(d.fakeDescribeOrganizationWithContext)

	case "DescribeResourceWithContext":
		return m.Fake(d.fakeDescribeResourceWithContext)

	case "DescribeUserWithContext":
		return m.Fake(d.fakeDescribeUserWithContext)

	case "DisassociateDelegateFromResourceWithContext":
		return m.Fake(d.fakeDisassociateDelegateFromResourceWithContext)

	case "DisassociateMemberFromGroupWithContext":
		return m.Fake(d.fakeDisassociateMemberFromGroupWithContext)

	case "GetMailboxDetailsWithContext":
		return m.Fake(d.fakeGetMailboxDetailsWithContext)

	case "ListAliasesPages":
		return m.Fake(d.fakeListAliasesPages)

	case "ListAliasesPagesWithContext":
		return m.Fake(d.fakeListAliasesPagesWithContext)

	case "ListAliasesWithContext":
		return m.Fake(d.fakeListAliasesWithContext)

	case "ListGroupMembersPages":
		return m.Fake(d.fakeListGroupMembersPages)

	case "ListGroupMembersPagesWithContext":
		return m.Fake(d.fakeListGroupMembersPagesWithContext)

	case "ListGroupMembersWithContext":
		return m.Fake(d.fakeListGroupMembersWithContext)

	case "ListGroupsPages":
		return m.Fake(d.fakeListGroupsPages)

	case "ListGroupsPagesWithContext":
		return m.Fake(d.fakeListGroupsPagesWithContext)

	case "ListGroupsWithContext":
		return m.Fake(d.fakeListGroupsWithContext)

	case "ListMailboxPermissionsPages":
		return m.Fake(d.fakeListMailboxPermissionsPages)

	case "ListMailboxPermissionsPagesWithContext":
		return m.Fake(d.fakeListMailboxPermissionsPagesWithContext)

	case "ListMailboxPermissionsWithContext":
		return m.Fake(d.fakeListMailboxPermissionsWithContext)

	case "ListOrganizationsPages":
		return m.Fake(d.fakeListOrganizationsPages)

	case "ListOrganizationsPagesWithContext":
		return m.Fake(d.fakeListOrganizationsPagesWithContext)

	case "ListOrganizationsWithContext":
		return m.Fake(d.fakeListOrganizationsWithContext)

	case "ListResourceDelegatesPages":
		return m.Fake(d.fakeListResourceDelegatesPages)

	case "ListResourceDelegatesPagesWithContext":
		return m.Fake(d.fakeListResourceDelegatesPagesWithContext)

	case "ListResourceDelegatesWithContext":
		return m.Fake(d.fakeListResourceDelegatesWithContext)

	case "ListResourcesPages":
		return m.Fake(d.fakeListResourcesPages)

	case "ListResourcesPagesWithContext":
		return m.Fake(d.fakeListResourcesPagesWithContext)

	case "ListResourcesWithContext":
		return m.Fake(d.fakeListResourcesWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "ListUsersPages":
		return m.Fake(d.fakeListUsersPages)

	case "ListUsersPagesWithContext":
		return m.Fake(d.fakeListUsersPagesWithContext)

	case "ListUsersWithContext":
		return m.Fake(d.fakeListUsersWithContext)

	case "PutMailboxPermissionsWithContext":
		return m.Fake(d.fakePutMailboxPermissionsWithContext)

	case "RegisterToWorkMailWithContext":
		return m.Fake(d.fakeRegisterToWorkMailWithContext)

	case "ResetPasswordWithContext":
		return m.Fake(d.fakeResetPasswordWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateMailboxQuotaWithContext":
		return m.Fake(d.fakeUpdateMailboxQuotaWithContext)

	case "UpdatePrimaryEmailAddressWithContext":
		return m.Fake(d.fakeUpdatePrimaryEmailAddressWithContext)

	case "UpdateResourceWithContext":
		return m.Fake(d.fakeUpdateResourceWithContext)

	default:
		return nil
	}
}

func (d *WorkMailDouble) AssociateDelegateToResource(i0 *workmail.AssociateDelegateToResourceInput) (r0 *workmail.AssociateDelegateToResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateDelegateToResource", i0)
	r0, _ = returns[0].(*workmail.AssociateDelegateToResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) AssociateDelegateToResourceRequest(i0 *workmail.AssociateDelegateToResourceInput) (r0 *request.Request, r1 *workmail.AssociateDelegateToResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateDelegateToResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workmail.AssociateDelegateToResourceOutput)
	return
}

func (d *WorkMailDouble) AssociateDelegateToResourceWithContext(i0 context.Context, i1 *workmail.AssociateDelegateToResourceInput, i2 ...request.Option) (r0 *workmail.AssociateDelegateToResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateDelegateToResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workmail.AssociateDelegateToResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) fakeAssociateDelegateToResourceWithContext(ctx context.Context, in *workmail.AssociateDelegateToResourceInput, _ ...request.Option) (*workmail.AssociateDelegateToResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateDelegateToResource cancelled", ctx.Err())
	default:
		return d.AssociateDelegateToResource(in)
	}
}

func (d *WorkMailDouble) AssociateMemberToGroup(i0 *workmail.AssociateMemberToGroupInput) (r0 *workmail.AssociateMemberToGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateMemberToGroup", i0)
	r0, _ = returns[0].(*workmail.AssociateMemberToGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) AssociateMemberToGroupRequest(i0 *workmail.AssociateMemberToGroupInput) (r0 *request.Request, r1 *workmail.AssociateMemberToGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateMemberToGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workmail.AssociateMemberToGroupOutput)
	return
}

func (d *WorkMailDouble) AssociateMemberToGroupWithContext(i0 context.Context, i1 *workmail.AssociateMemberToGroupInput, i2 ...request.Option) (r0 *workmail.AssociateMemberToGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateMemberToGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workmail.AssociateMemberToGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) fakeAssociateMemberToGroupWithContext(ctx context.Context, in *workmail.AssociateMemberToGroupInput, _ ...request.Option) (*workmail.AssociateMemberToGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateMemberToGroup cancelled", ctx.Err())
	default:
		return d.AssociateMemberToGroup(in)
	}
}

func (d *WorkMailDouble) CreateAlias(i0 *workmail.CreateAliasInput) (r0 *workmail.CreateAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAlias", i0)
	r0, _ = returns[0].(*workmail.CreateAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) CreateAliasRequest(i0 *workmail.CreateAliasInput) (r0 *request.Request, r1 *workmail.CreateAliasOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAliasRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workmail.CreateAliasOutput)
	return
}

func (d *WorkMailDouble) CreateAliasWithContext(i0 context.Context, i1 *workmail.CreateAliasInput, i2 ...request.Option) (r0 *workmail.CreateAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAliasWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workmail.CreateAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) fakeCreateAliasWithContext(ctx context.Context, in *workmail.CreateAliasInput, _ ...request.Option) (*workmail.CreateAliasOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateAlias cancelled", ctx.Err())
	default:
		return d.CreateAlias(in)
	}
}

func (d *WorkMailDouble) CreateGroup(i0 *workmail.CreateGroupInput) (r0 *workmail.CreateGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGroup", i0)
	r0, _ = returns[0].(*workmail.CreateGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) CreateGroupRequest(i0 *workmail.CreateGroupInput) (r0 *request.Request, r1 *workmail.CreateGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workmail.CreateGroupOutput)
	return
}

func (d *WorkMailDouble) CreateGroupWithContext(i0 context.Context, i1 *workmail.CreateGroupInput, i2 ...request.Option) (r0 *workmail.CreateGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workmail.CreateGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) fakeCreateGroupWithContext(ctx context.Context, in *workmail.CreateGroupInput, _ ...request.Option) (*workmail.CreateGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateGroup cancelled", ctx.Err())
	default:
		return d.CreateGroup(in)
	}
}

func (d *WorkMailDouble) CreateResource(i0 *workmail.CreateResourceInput) (r0 *workmail.CreateResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateResource", i0)
	r0, _ = returns[0].(*workmail.CreateResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) CreateResourceRequest(i0 *workmail.CreateResourceInput) (r0 *request.Request, r1 *workmail.CreateResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workmail.CreateResourceOutput)
	return
}

func (d *WorkMailDouble) CreateResourceWithContext(i0 context.Context, i1 *workmail.CreateResourceInput, i2 ...request.Option) (r0 *workmail.CreateResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workmail.CreateResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) fakeCreateResourceWithContext(ctx context.Context, in *workmail.CreateResourceInput, _ ...request.Option) (*workmail.CreateResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateResource cancelled", ctx.Err())
	default:
		return d.CreateResource(in)
	}
}

func (d *WorkMailDouble) CreateUser(i0 *workmail.CreateUserInput) (r0 *workmail.CreateUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUser", i0)
	r0, _ = returns[0].(*workmail.CreateUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) CreateUserRequest(i0 *workmail.CreateUserInput) (r0 *request.Request, r1 *workmail.CreateUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workmail.CreateUserOutput)
	return
}

func (d *WorkMailDouble) CreateUserWithContext(i0 context.Context, i1 *workmail.CreateUserInput, i2 ...request.Option) (r0 *workmail.CreateUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workmail.CreateUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) fakeCreateUserWithContext(ctx context.Context, in *workmail.CreateUserInput, _ ...request.Option) (*workmail.CreateUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateUser cancelled", ctx.Err())
	default:
		return d.CreateUser(in)
	}
}

func (d *WorkMailDouble) DeleteAlias(i0 *workmail.DeleteAliasInput) (r0 *workmail.DeleteAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAlias", i0)
	r0, _ = returns[0].(*workmail.DeleteAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) DeleteAliasRequest(i0 *workmail.DeleteAliasInput) (r0 *request.Request, r1 *workmail.DeleteAliasOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAliasRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workmail.DeleteAliasOutput)
	return
}

func (d *WorkMailDouble) DeleteAliasWithContext(i0 context.Context, i1 *workmail.DeleteAliasInput, i2 ...request.Option) (r0 *workmail.DeleteAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAliasWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workmail.DeleteAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) fakeDeleteAliasWithContext(ctx context.Context, in *workmail.DeleteAliasInput, _ ...request.Option) (*workmail.DeleteAliasOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteAlias cancelled", ctx.Err())
	default:
		return d.DeleteAlias(in)
	}
}

func (d *WorkMailDouble) DeleteGroup(i0 *workmail.DeleteGroupInput) (r0 *workmail.DeleteGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGroup", i0)
	r0, _ = returns[0].(*workmail.DeleteGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) DeleteGroupRequest(i0 *workmail.DeleteGroupInput) (r0 *request.Request, r1 *workmail.DeleteGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workmail.DeleteGroupOutput)
	return
}

func (d *WorkMailDouble) DeleteGroupWithContext(i0 context.Context, i1 *workmail.DeleteGroupInput, i2 ...request.Option) (r0 *workmail.DeleteGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workmail.DeleteGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) fakeDeleteGroupWithContext(ctx context.Context, in *workmail.DeleteGroupInput, _ ...request.Option) (*workmail.DeleteGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteGroup cancelled", ctx.Err())
	default:
		return d.DeleteGroup(in)
	}
}

func (d *WorkMailDouble) DeleteMailboxPermissions(i0 *workmail.DeleteMailboxPermissionsInput) (r0 *workmail.DeleteMailboxPermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMailboxPermissions", i0)
	r0, _ = returns[0].(*workmail.DeleteMailboxPermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) DeleteMailboxPermissionsRequest(i0 *workmail.DeleteMailboxPermissionsInput) (r0 *request.Request, r1 *workmail.DeleteMailboxPermissionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMailboxPermissionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workmail.DeleteMailboxPermissionsOutput)
	return
}

func (d *WorkMailDouble) DeleteMailboxPermissionsWithContext(i0 context.Context, i1 *workmail.DeleteMailboxPermissionsInput, i2 ...request.Option) (r0 *workmail.DeleteMailboxPermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMailboxPermissionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workmail.DeleteMailboxPermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) fakeDeleteMailboxPermissionsWithContext(ctx context.Context, in *workmail.DeleteMailboxPermissionsInput, _ ...request.Option) (*workmail.DeleteMailboxPermissionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteMailboxPermissions cancelled", ctx.Err())
	default:
		return d.DeleteMailboxPermissions(in)
	}
}

func (d *WorkMailDouble) DeleteResource(i0 *workmail.DeleteResourceInput) (r0 *workmail.DeleteResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResource", i0)
	r0, _ = returns[0].(*workmail.DeleteResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) DeleteResourceRequest(i0 *workmail.DeleteResourceInput) (r0 *request.Request, r1 *workmail.DeleteResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workmail.DeleteResourceOutput)
	return
}

func (d *WorkMailDouble) DeleteResourceWithContext(i0 context.Context, i1 *workmail.DeleteResourceInput, i2 ...request.Option) (r0 *workmail.DeleteResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workmail.DeleteResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) fakeDeleteResourceWithContext(ctx context.Context, in *workmail.DeleteResourceInput, _ ...request.Option) (*workmail.DeleteResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteResource cancelled", ctx.Err())
	default:
		return d.DeleteResource(in)
	}
}

func (d *WorkMailDouble) DeleteUser(i0 *workmail.DeleteUserInput) (r0 *workmail.DeleteUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUser", i0)
	r0, _ = returns[0].(*workmail.DeleteUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) DeleteUserRequest(i0 *workmail.DeleteUserInput) (r0 *request.Request, r1 *workmail.DeleteUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workmail.DeleteUserOutput)
	return
}

func (d *WorkMailDouble) DeleteUserWithContext(i0 context.Context, i1 *workmail.DeleteUserInput, i2 ...request.Option) (r0 *workmail.DeleteUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workmail.DeleteUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) fakeDeleteUserWithContext(ctx context.Context, in *workmail.DeleteUserInput, _ ...request.Option) (*workmail.DeleteUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteUser cancelled", ctx.Err())
	default:
		return d.DeleteUser(in)
	}
}

func (d *WorkMailDouble) DeregisterFromWorkMail(i0 *workmail.DeregisterFromWorkMailInput) (r0 *workmail.DeregisterFromWorkMailOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterFromWorkMail", i0)
	r0, _ = returns[0].(*workmail.DeregisterFromWorkMailOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) DeregisterFromWorkMailRequest(i0 *workmail.DeregisterFromWorkMailInput) (r0 *request.Request, r1 *workmail.DeregisterFromWorkMailOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterFromWorkMailRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workmail.DeregisterFromWorkMailOutput)
	return
}

func (d *WorkMailDouble) DeregisterFromWorkMailWithContext(i0 context.Context, i1 *workmail.DeregisterFromWorkMailInput, i2 ...request.Option) (r0 *workmail.DeregisterFromWorkMailOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterFromWorkMailWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workmail.DeregisterFromWorkMailOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) fakeDeregisterFromWorkMailWithContext(ctx context.Context, in *workmail.DeregisterFromWorkMailInput, _ ...request.Option) (*workmail.DeregisterFromWorkMailOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeregisterFromWorkMail cancelled", ctx.Err())
	default:
		return d.DeregisterFromWorkMail(in)
	}
}

func (d *WorkMailDouble) DescribeGroup(i0 *workmail.DescribeGroupInput) (r0 *workmail.DescribeGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGroup", i0)
	r0, _ = returns[0].(*workmail.DescribeGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) DescribeGroupRequest(i0 *workmail.DescribeGroupInput) (r0 *request.Request, r1 *workmail.DescribeGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workmail.DescribeGroupOutput)
	return
}

func (d *WorkMailDouble) DescribeGroupWithContext(i0 context.Context, i1 *workmail.DescribeGroupInput, i2 ...request.Option) (r0 *workmail.DescribeGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workmail.DescribeGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) fakeDescribeGroupWithContext(ctx context.Context, in *workmail.DescribeGroupInput, _ ...request.Option) (*workmail.DescribeGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeGroup cancelled", ctx.Err())
	default:
		return d.DescribeGroup(in)
	}
}

func (d *WorkMailDouble) DescribeOrganization(i0 *workmail.DescribeOrganizationInput) (r0 *workmail.DescribeOrganizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrganization", i0)
	r0, _ = returns[0].(*workmail.DescribeOrganizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) DescribeOrganizationRequest(i0 *workmail.DescribeOrganizationInput) (r0 *request.Request, r1 *workmail.DescribeOrganizationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrganizationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workmail.DescribeOrganizationOutput)
	return
}

func (d *WorkMailDouble) DescribeOrganizationWithContext(i0 context.Context, i1 *workmail.DescribeOrganizationInput, i2 ...request.Option) (r0 *workmail.DescribeOrganizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrganizationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workmail.DescribeOrganizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) fakeDescribeOrganizationWithContext(ctx context.Context, in *workmail.DescribeOrganizationInput, _ ...request.Option) (*workmail.DescribeOrganizationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeOrganization cancelled", ctx.Err())
	default:
		return d.DescribeOrganization(in)
	}
}

func (d *WorkMailDouble) DescribeResource(i0 *workmail.DescribeResourceInput) (r0 *workmail.DescribeResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeResource", i0)
	r0, _ = returns[0].(*workmail.DescribeResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) DescribeResourceRequest(i0 *workmail.DescribeResourceInput) (r0 *request.Request, r1 *workmail.DescribeResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workmail.DescribeResourceOutput)
	return
}

func (d *WorkMailDouble) DescribeResourceWithContext(i0 context.Context, i1 *workmail.DescribeResourceInput, i2 ...request.Option) (r0 *workmail.DescribeResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workmail.DescribeResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) fakeDescribeResourceWithContext(ctx context.Context, in *workmail.DescribeResourceInput, _ ...request.Option) (*workmail.DescribeResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeResource cancelled", ctx.Err())
	default:
		return d.DescribeResource(in)
	}
}

func (d *WorkMailDouble) DescribeUser(i0 *workmail.DescribeUserInput) (r0 *workmail.DescribeUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUser", i0)
	r0, _ = returns[0].(*workmail.DescribeUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) DescribeUserRequest(i0 *workmail.DescribeUserInput) (r0 *request.Request, r1 *workmail.DescribeUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workmail.DescribeUserOutput)
	return
}

func (d *WorkMailDouble) DescribeUserWithContext(i0 context.Context, i1 *workmail.DescribeUserInput, i2 ...request.Option) (r0 *workmail.DescribeUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workmail.DescribeUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) fakeDescribeUserWithContext(ctx context.Context, in *workmail.DescribeUserInput, _ ...request.Option) (*workmail.DescribeUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeUser cancelled", ctx.Err())
	default:
		return d.DescribeUser(in)
	}
}

func (d *WorkMailDouble) DisassociateDelegateFromResource(i0 *workmail.DisassociateDelegateFromResourceInput) (r0 *workmail.DisassociateDelegateFromResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateDelegateFromResource", i0)
	r0, _ = returns[0].(*workmail.DisassociateDelegateFromResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) DisassociateDelegateFromResourceRequest(i0 *workmail.DisassociateDelegateFromResourceInput) (r0 *request.Request, r1 *workmail.DisassociateDelegateFromResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateDelegateFromResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workmail.DisassociateDelegateFromResourceOutput)
	return
}

func (d *WorkMailDouble) DisassociateDelegateFromResourceWithContext(i0 context.Context, i1 *workmail.DisassociateDelegateFromResourceInput, i2 ...request.Option) (r0 *workmail.DisassociateDelegateFromResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateDelegateFromResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workmail.DisassociateDelegateFromResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) fakeDisassociateDelegateFromResourceWithContext(ctx context.Context, in *workmail.DisassociateDelegateFromResourceInput, _ ...request.Option) (*workmail.DisassociateDelegateFromResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateDelegateFromResource cancelled", ctx.Err())
	default:
		return d.DisassociateDelegateFromResource(in)
	}
}

func (d *WorkMailDouble) DisassociateMemberFromGroup(i0 *workmail.DisassociateMemberFromGroupInput) (r0 *workmail.DisassociateMemberFromGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateMemberFromGroup", i0)
	r0, _ = returns[0].(*workmail.DisassociateMemberFromGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) DisassociateMemberFromGroupRequest(i0 *workmail.DisassociateMemberFromGroupInput) (r0 *request.Request, r1 *workmail.DisassociateMemberFromGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateMemberFromGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workmail.DisassociateMemberFromGroupOutput)
	return
}

func (d *WorkMailDouble) DisassociateMemberFromGroupWithContext(i0 context.Context, i1 *workmail.DisassociateMemberFromGroupInput, i2 ...request.Option) (r0 *workmail.DisassociateMemberFromGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateMemberFromGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workmail.DisassociateMemberFromGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) fakeDisassociateMemberFromGroupWithContext(ctx context.Context, in *workmail.DisassociateMemberFromGroupInput, _ ...request.Option) (*workmail.DisassociateMemberFromGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateMemberFromGroup cancelled", ctx.Err())
	default:
		return d.DisassociateMemberFromGroup(in)
	}
}

func (d *WorkMailDouble) GetMailboxDetails(i0 *workmail.GetMailboxDetailsInput) (r0 *workmail.GetMailboxDetailsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMailboxDetails", i0)
	r0, _ = returns[0].(*workmail.GetMailboxDetailsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) GetMailboxDetailsRequest(i0 *workmail.GetMailboxDetailsInput) (r0 *request.Request, r1 *workmail.GetMailboxDetailsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMailboxDetailsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workmail.GetMailboxDetailsOutput)
	return
}

func (d *WorkMailDouble) GetMailboxDetailsWithContext(i0 context.Context, i1 *workmail.GetMailboxDetailsInput, i2 ...request.Option) (r0 *workmail.GetMailboxDetailsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMailboxDetailsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workmail.GetMailboxDetailsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) fakeGetMailboxDetailsWithContext(ctx context.Context, in *workmail.GetMailboxDetailsInput, _ ...request.Option) (*workmail.GetMailboxDetailsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetMailboxDetails cancelled", ctx.Err())
	default:
		return d.GetMailboxDetails(in)
	}
}

func (d *WorkMailDouble) ListAliases(i0 *workmail.ListAliasesInput) (r0 *workmail.ListAliasesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAliases", i0)
	r0, _ = returns[0].(*workmail.ListAliasesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) ListAliasesPages(i0 *workmail.ListAliasesInput, i1 func(*workmail.ListAliasesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAliasesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkMailDouble) fakeListAliasesPages(in *workmail.ListAliasesInput, pager func(*workmail.ListAliasesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListAliases", paginators, in, pager)
}

func (d *WorkMailDouble) ListAliasesPagesWithContext(i0 context.Context, i1 *workmail.ListAliasesInput, i2 func(*workmail.ListAliasesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAliasesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkMailDouble) fakeListAliasesPagesWithContext(ctx context.Context, in *workmail.ListAliasesInput, pager func(*workmail.ListAliasesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListAliases", paginators, ctx, in, pager, options...)
}

func (d *WorkMailDouble) ListAliasesRequest(i0 *workmail.ListAliasesInput) (r0 *request.Request, r1 *workmail.ListAliasesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAliasesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workmail.ListAliasesOutput)
	return
}

func (d *WorkMailDouble) ListAliasesWithContext(i0 context.Context, i1 *workmail.ListAliasesInput, i2 ...request.Option) (r0 *workmail.ListAliasesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAliasesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workmail.ListAliasesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) fakeListAliasesWithContext(ctx context.Context, in *workmail.ListAliasesInput, _ ...request.Option) (*workmail.ListAliasesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAliases cancelled", ctx.Err())
	default:
		return d.ListAliases(in)
	}
}

func (d *WorkMailDouble) ListGroupMembers(i0 *workmail.ListGroupMembersInput) (r0 *workmail.ListGroupMembersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupMembers", i0)
	r0, _ = returns[0].(*workmail.ListGroupMembersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) ListGroupMembersPages(i0 *workmail.ListGroupMembersInput, i1 func(*workmail.ListGroupMembersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupMembersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkMailDouble) fakeListGroupMembersPages(in *workmail.ListGroupMembersInput, pager func(*workmail.ListGroupMembersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListGroupMembers", paginators, in, pager)
}

func (d *WorkMailDouble) ListGroupMembersPagesWithContext(i0 context.Context, i1 *workmail.ListGroupMembersInput, i2 func(*workmail.ListGroupMembersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupMembersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkMailDouble) fakeListGroupMembersPagesWithContext(ctx context.Context, in *workmail.ListGroupMembersInput, pager func(*workmail.ListGroupMembersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListGroupMembers", paginators, ctx, in, pager, options...)
}

func (d *WorkMailDouble) ListGroupMembersRequest(i0 *workmail.ListGroupMembersInput) (r0 *request.Request, r1 *workmail.ListGroupMembersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupMembersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workmail.ListGroupMembersOutput)
	return
}

func (d *WorkMailDouble) ListGroupMembersWithContext(i0 context.Context, i1 *workmail.ListGroupMembersInput, i2 ...request.Option) (r0 *workmail.ListGroupMembersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupMembersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workmail.ListGroupMembersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) fakeListGroupMembersWithContext(ctx context.Context, in *workmail.ListGroupMembersInput, _ ...request.Option) (*workmail.ListGroupMembersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListGroupMembers cancelled", ctx.Err())
	default:
		return d.ListGroupMembers(in)
	}
}

func (d *WorkMailDouble) ListGroups(i0 *workmail.ListGroupsInput) (r0 *workmail.ListGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroups", i0)
	r0, _ = returns[0].(*workmail.ListGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) ListGroupsPages(i0 *workmail.ListGroupsInput, i1 func(*workmail.ListGroupsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkMailDouble) fakeListGroupsPages(in *workmail.ListGroupsInput, pager func(*workmail.ListGroupsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListGroups", paginators, in, pager)
}

func (d *WorkMailDouble) ListGroupsPagesWithContext(i0 context.Context, i1 *workmail.ListGroupsInput, i2 func(*workmail.ListGroupsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkMailDouble) fakeListGroupsPagesWithContext(ctx context.Context, in *workmail.ListGroupsInput, pager func(*workmail.ListGroupsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListGroups", paginators, ctx, in, pager, options...)
}

func (d *WorkMailDouble) ListGroupsRequest(i0 *workmail.ListGroupsInput) (r0 *request.Request, r1 *workmail.ListGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workmail.ListGroupsOutput)
	return
}

func (d *WorkMailDouble) ListGroupsWithContext(i0 context.Context, i1 *workmail.ListGroupsInput, i2 ...request.Option) (r0 *workmail.ListGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workmail.ListGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) fakeListGroupsWithContext(ctx context.Context, in *workmail.ListGroupsInput, _ ...request.Option) (*workmail.ListGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListGroups cancelled", ctx.Err())
	default:
		return d.ListGroups(in)
	}
}

func (d *WorkMailDouble) ListMailboxPermissions(i0 *workmail.ListMailboxPermissionsInput) (r0 *workmail.ListMailboxPermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMailboxPermissions", i0)
	r0, _ = returns[0].(*workmail.ListMailboxPermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) ListMailboxPermissionsPages(i0 *workmail.ListMailboxPermissionsInput, i1 func(*workmail.ListMailboxPermissionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMailboxPermissionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkMailDouble) fakeListMailboxPermissionsPages(in *workmail.ListMailboxPermissionsInput, pager func(*workmail.ListMailboxPermissionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListMailboxPermissions", paginators, in, pager)
}

func (d *WorkMailDouble) ListMailboxPermissionsPagesWithContext(i0 context.Context, i1 *workmail.ListMailboxPermissionsInput, i2 func(*workmail.ListMailboxPermissionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMailboxPermissionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkMailDouble) fakeListMailboxPermissionsPagesWithContext(ctx context.Context, in *workmail.ListMailboxPermissionsInput, pager func(*workmail.ListMailboxPermissionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListMailboxPermissions", paginators, ctx, in, pager, options...)
}

func (d *WorkMailDouble) ListMailboxPermissionsRequest(i0 *workmail.ListMailboxPermissionsInput) (r0 *request.Request, r1 *workmail.ListMailboxPermissionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMailboxPermissionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workmail.ListMailboxPermissionsOutput)
	return
}

func (d *WorkMailDouble) ListMailboxPermissionsWithContext(i0 context.Context, i1 *workmail.ListMailboxPermissionsInput, i2 ...request.Option) (r0 *workmail.ListMailboxPermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMailboxPermissionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workmail.ListMailboxPermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) fakeListMailboxPermissionsWithContext(ctx context.Context, in *workmail.ListMailboxPermissionsInput, _ ...request.Option) (*workmail.ListMailboxPermissionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListMailboxPermissions cancelled", ctx.Err())
	default:
		return d.ListMailboxPermissions(in)
	}
}

func (d *WorkMailDouble) ListOrganizations(i0 *workmail.ListOrganizationsInput) (r0 *workmail.ListOrganizationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOrganizations", i0)
	r0, _ = returns[0].(*workmail.ListOrganizationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) ListOrganizationsPages(i0 *workmail.ListOrganizationsInput, i1 func(*workmail.ListOrganizationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOrganizationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkMailDouble) fakeListOrganizationsPages(in *workmail.ListOrganizationsInput, pager func(*workmail.ListOrganizationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListOrganizations", paginators, in, pager)
}

func (d *WorkMailDouble) ListOrganizationsPagesWithContext(i0 context.Context, i1 *workmail.ListOrganizationsInput, i2 func(*workmail.ListOrganizationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOrganizationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkMailDouble) fakeListOrganizationsPagesWithContext(ctx context.Context, in *workmail.ListOrganizationsInput, pager func(*workmail.ListOrganizationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListOrganizations", paginators, ctx, in, pager, options...)
}

func (d *WorkMailDouble) ListOrganizationsRequest(i0 *workmail.ListOrganizationsInput) (r0 *request.Request, r1 *workmail.ListOrganizationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOrganizationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workmail.ListOrganizationsOutput)
	return
}

func (d *WorkMailDouble) ListOrganizationsWithContext(i0 context.Context, i1 *workmail.ListOrganizationsInput, i2 ...request.Option) (r0 *workmail.ListOrganizationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOrganizationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workmail.ListOrganizationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) fakeListOrganizationsWithContext(ctx context.Context, in *workmail.ListOrganizationsInput, _ ...request.Option) (*workmail.ListOrganizationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListOrganizations cancelled", ctx.Err())
	default:
		return d.ListOrganizations(in)
	}
}

func (d *WorkMailDouble) ListResourceDelegates(i0 *workmail.ListResourceDelegatesInput) (r0 *workmail.ListResourceDelegatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourceDelegates", i0)
	r0, _ = returns[0].(*workmail.ListResourceDelegatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) ListResourceDelegatesPages(i0 *workmail.ListResourceDelegatesInput, i1 func(*workmail.ListResourceDelegatesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourceDelegatesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkMailDouble) fakeListResourceDelegatesPages(in *workmail.ListResourceDelegatesInput, pager func(*workmail.ListResourceDelegatesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListResourceDelegates", paginators, in, pager)
}

func (d *WorkMailDouble) ListResourceDelegatesPagesWithContext(i0 context.Context, i1 *workmail.ListResourceDelegatesInput, i2 func(*workmail.ListResourceDelegatesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourceDelegatesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkMailDouble) fakeListResourceDelegatesPagesWithContext(ctx context.Context, in *workmail.ListResourceDelegatesInput, pager func(*workmail.ListResourceDelegatesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListResourceDelegates", paginators, ctx, in, pager, options...)
}

func (d *WorkMailDouble) ListResourceDelegatesRequest(i0 *workmail.ListResourceDelegatesInput) (r0 *request.Request, r1 *workmail.ListResourceDelegatesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourceDelegatesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workmail.ListResourceDelegatesOutput)
	return
}

func (d *WorkMailDouble) ListResourceDelegatesWithContext(i0 context.Context, i1 *workmail.ListResourceDelegatesInput, i2 ...request.Option) (r0 *workmail.ListResourceDelegatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourceDelegatesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workmail.ListResourceDelegatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) fakeListResourceDelegatesWithContext(ctx context.Context, in *workmail.ListResourceDelegatesInput, _ ...request.Option) (*workmail.ListResourceDelegatesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListResourceDelegates cancelled", ctx.Err())
	default:
		return d.ListResourceDelegates(in)
	}
}

func (d *WorkMailDouble) ListResources(i0 *workmail.ListResourcesInput) (r0 *workmail.ListResourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResources", i0)
	r0, _ = returns[0].(*workmail.ListResourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) ListResourcesPages(i0 *workmail.ListResourcesInput, i1 func(*workmail.ListResourcesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourcesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkMailDouble) fakeListResourcesPages(in *workmail.ListResourcesInput, pager func(*workmail.ListResourcesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListResources", paginators, in, pager)
}

func (d *WorkMailDouble) ListResourcesPagesWithContext(i0 context.Context, i1 *workmail.ListResourcesInput, i2 func(*workmail.ListResourcesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourcesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkMailDouble) fakeListResourcesPagesWithContext(ctx context.Context, in *workmail.ListResourcesInput, pager func(*workmail.ListResourcesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListResources", paginators, ctx, in, pager, options...)
}

func (d *WorkMailDouble) ListResourcesRequest(i0 *workmail.ListResourcesInput) (r0 *request.Request, r1 *workmail.ListResourcesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourcesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workmail.ListResourcesOutput)
	return
}

func (d *WorkMailDouble) ListResourcesWithContext(i0 context.Context, i1 *workmail.ListResourcesInput, i2 ...request.Option) (r0 *workmail.ListResourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourcesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workmail.ListResourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) fakeListResourcesWithContext(ctx context.Context, in *workmail.ListResourcesInput, _ ...request.Option) (*workmail.ListResourcesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListResources cancelled", ctx.Err())
	default:
		return d.ListResources(in)
	}
}

func (d *WorkMailDouble) ListTagsForResource(i0 *workmail.ListTagsForResourceInput) (r0 *workmail.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*workmail.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) ListTagsForResourceRequest(i0 *workmail.ListTagsForResourceInput) (r0 *request.Request, r1 *workmail.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workmail.ListTagsForResourceOutput)
	return
}

func (d *WorkMailDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *workmail.ListTagsForResourceInput, i2 ...request.Option) (r0 *workmail.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workmail.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *workmail.ListTagsForResourceInput, _ ...request.Option) (*workmail.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *WorkMailDouble) ListUsers(i0 *workmail.ListUsersInput) (r0 *workmail.ListUsersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUsers", i0)
	r0, _ = returns[0].(*workmail.ListUsersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) ListUsersPages(i0 *workmail.ListUsersInput, i1 func(*workmail.ListUsersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUsersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkMailDouble) fakeListUsersPages(in *workmail.ListUsersInput, pager func(*workmail.ListUsersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListUsers", paginators, in, pager)
}

func (d *WorkMailDouble) ListUsersPagesWithContext(i0 context.Context, i1 *workmail.ListUsersInput, i2 func(*workmail.ListUsersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUsersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkMailDouble) fakeListUsersPagesWithContext(ctx context.Context, in *workmail.ListUsersInput, pager func(*workmail.ListUsersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListUsers", paginators, ctx, in, pager, options...)
}

func (d *WorkMailDouble) ListUsersRequest(i0 *workmail.ListUsersInput) (r0 *request.Request, r1 *workmail.ListUsersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUsersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workmail.ListUsersOutput)
	return
}

func (d *WorkMailDouble) ListUsersWithContext(i0 context.Context, i1 *workmail.ListUsersInput, i2 ...request.Option) (r0 *workmail.ListUsersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUsersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workmail.ListUsersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) fakeListUsersWithContext(ctx context.Context, in *workmail.ListUsersInput, _ ...request.Option) (*workmail.ListUsersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListUsers cancelled", ctx.Err())
	default:
		return d.ListUsers(in)
	}
}

func (d *WorkMailDouble) PutMailboxPermissions(i0 *workmail.PutMailboxPermissionsInput) (r0 *workmail.PutMailboxPermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutMailboxPermissions", i0)
	r0, _ = returns[0].(*workmail.PutMailboxPermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) PutMailboxPermissionsRequest(i0 *workmail.PutMailboxPermissionsInput) (r0 *request.Request, r1 *workmail.PutMailboxPermissionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutMailboxPermissionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workmail.PutMailboxPermissionsOutput)
	return
}

func (d *WorkMailDouble) PutMailboxPermissionsWithContext(i0 context.Context, i1 *workmail.PutMailboxPermissionsInput, i2 ...request.Option) (r0 *workmail.PutMailboxPermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutMailboxPermissionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workmail.PutMailboxPermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) fakePutMailboxPermissionsWithContext(ctx context.Context, in *workmail.PutMailboxPermissionsInput, _ ...request.Option) (*workmail.PutMailboxPermissionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutMailboxPermissions cancelled", ctx.Err())
	default:
		return d.PutMailboxPermissions(in)
	}
}

func (d *WorkMailDouble) RegisterToWorkMail(i0 *workmail.RegisterToWorkMailInput) (r0 *workmail.RegisterToWorkMailOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterToWorkMail", i0)
	r0, _ = returns[0].(*workmail.RegisterToWorkMailOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) RegisterToWorkMailRequest(i0 *workmail.RegisterToWorkMailInput) (r0 *request.Request, r1 *workmail.RegisterToWorkMailOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterToWorkMailRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workmail.RegisterToWorkMailOutput)
	return
}

func (d *WorkMailDouble) RegisterToWorkMailWithContext(i0 context.Context, i1 *workmail.RegisterToWorkMailInput, i2 ...request.Option) (r0 *workmail.RegisterToWorkMailOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterToWorkMailWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workmail.RegisterToWorkMailOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) fakeRegisterToWorkMailWithContext(ctx context.Context, in *workmail.RegisterToWorkMailInput, _ ...request.Option) (*workmail.RegisterToWorkMailOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterToWorkMail cancelled", ctx.Err())
	default:
		return d.RegisterToWorkMail(in)
	}
}

func (d *WorkMailDouble) ResetPassword(i0 *workmail.ResetPasswordInput) (r0 *workmail.ResetPasswordOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetPassword", i0)
	r0, _ = returns[0].(*workmail.ResetPasswordOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) ResetPasswordRequest(i0 *workmail.ResetPasswordInput) (r0 *request.Request, r1 *workmail.ResetPasswordOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetPasswordRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workmail.ResetPasswordOutput)
	return
}

func (d *WorkMailDouble) ResetPasswordWithContext(i0 context.Context, i1 *workmail.ResetPasswordInput, i2 ...request.Option) (r0 *workmail.ResetPasswordOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetPasswordWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workmail.ResetPasswordOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) fakeResetPasswordWithContext(ctx context.Context, in *workmail.ResetPasswordInput, _ ...request.Option) (*workmail.ResetPasswordOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ResetPassword cancelled", ctx.Err())
	default:
		return d.ResetPassword(in)
	}
}

func (d *WorkMailDouble) TagResource(i0 *workmail.TagResourceInput) (r0 *workmail.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*workmail.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) TagResourceRequest(i0 *workmail.TagResourceInput) (r0 *request.Request, r1 *workmail.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workmail.TagResourceOutput)
	return
}

func (d *WorkMailDouble) TagResourceWithContext(i0 context.Context, i1 *workmail.TagResourceInput, i2 ...request.Option) (r0 *workmail.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workmail.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) fakeTagResourceWithContext(ctx context.Context, in *workmail.TagResourceInput, _ ...request.Option) (*workmail.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *WorkMailDouble) UntagResource(i0 *workmail.UntagResourceInput) (r0 *workmail.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*workmail.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) UntagResourceRequest(i0 *workmail.UntagResourceInput) (r0 *request.Request, r1 *workmail.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workmail.UntagResourceOutput)
	return
}

func (d *WorkMailDouble) UntagResourceWithContext(i0 context.Context, i1 *workmail.UntagResourceInput, i2 ...request.Option) (r0 *workmail.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workmail.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) fakeUntagResourceWithContext(ctx context.Context, in *workmail.UntagResourceInput, _ ...request.Option) (*workmail.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *WorkMailDouble) UpdateMailboxQuota(i0 *workmail.UpdateMailboxQuotaInput) (r0 *workmail.UpdateMailboxQuotaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMailboxQuota", i0)
	r0, _ = returns[0].(*workmail.UpdateMailboxQuotaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) UpdateMailboxQuotaRequest(i0 *workmail.UpdateMailboxQuotaInput) (r0 *request.Request, r1 *workmail.UpdateMailboxQuotaOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMailboxQuotaRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workmail.UpdateMailboxQuotaOutput)
	return
}

func (d *WorkMailDouble) UpdateMailboxQuotaWithContext(i0 context.Context, i1 *workmail.UpdateMailboxQuotaInput, i2 ...request.Option) (r0 *workmail.UpdateMailboxQuotaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMailboxQuotaWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workmail.UpdateMailboxQuotaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) fakeUpdateMailboxQuotaWithContext(ctx context.Context, in *workmail.UpdateMailboxQuotaInput, _ ...request.Option) (*workmail.UpdateMailboxQuotaOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateMailboxQuota cancelled", ctx.Err())
	default:
		return d.UpdateMailboxQuota(in)
	}
}

func (d *WorkMailDouble) UpdatePrimaryEmailAddress(i0 *workmail.UpdatePrimaryEmailAddressInput) (r0 *workmail.UpdatePrimaryEmailAddressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePrimaryEmailAddress", i0)
	r0, _ = returns[0].(*workmail.UpdatePrimaryEmailAddressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) UpdatePrimaryEmailAddressRequest(i0 *workmail.UpdatePrimaryEmailAddressInput) (r0 *request.Request, r1 *workmail.UpdatePrimaryEmailAddressOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePrimaryEmailAddressRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workmail.UpdatePrimaryEmailAddressOutput)
	return
}

func (d *WorkMailDouble) UpdatePrimaryEmailAddressWithContext(i0 context.Context, i1 *workmail.UpdatePrimaryEmailAddressInput, i2 ...request.Option) (r0 *workmail.UpdatePrimaryEmailAddressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePrimaryEmailAddressWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workmail.UpdatePrimaryEmailAddressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) fakeUpdatePrimaryEmailAddressWithContext(ctx context.Context, in *workmail.UpdatePrimaryEmailAddressInput, _ ...request.Option) (*workmail.UpdatePrimaryEmailAddressOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdatePrimaryEmailAddress cancelled", ctx.Err())
	default:
		return d.UpdatePrimaryEmailAddress(in)
	}
}

func (d *WorkMailDouble) UpdateResource(i0 *workmail.UpdateResourceInput) (r0 *workmail.UpdateResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateResource", i0)
	r0, _ = returns[0].(*workmail.UpdateResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) UpdateResourceRequest(i0 *workmail.UpdateResourceInput) (r0 *request.Request, r1 *workmail.UpdateResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workmail.UpdateResourceOutput)
	return
}

func (d *WorkMailDouble) UpdateResourceWithContext(i0 context.Context, i1 *workmail.UpdateResourceInput, i2 ...request.Option) (r0 *workmail.UpdateResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workmail.UpdateResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkMailDouble) fakeUpdateResourceWithContext(ctx context.Context, in *workmail.UpdateResourceInput, _ ...request.Option) (*workmail.UpdateResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateResource cancelled", ctx.Err())
	default:
		return d.UpdateResource(in)
	}
}
