// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:11:52+11:00

// Package codepipelinedouble provides a TestDouble implementation of codepipelineiface.CodePipelineAPI
package codepipelinedouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/codepipeline"
	"github.com/aws/aws-sdk-go/service/codepipeline/codepipelineiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// CodePipelineDouble is TestDouble for codepipelineiface.CodePipelineAPI
type CodePipelineDouble struct {
	codepipelineiface.CodePipelineAPI
	*awsdouble.AWSTestDouble
}

// Constructor for CodePipelineDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *CodePipelineDouble {
	result := &CodePipelineDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*codepipelineiface.CodePipelineAPI)(nil), configurators...)
	return result
}

func (d *CodePipelineDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *CodePipelineDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AcknowledgeJobWithContext":
		return m.Fake(d.fakeAcknowledgeJobWithContext)

	case "AcknowledgeThirdPartyJobWithContext":
		return m.Fake(d.fakeAcknowledgeThirdPartyJobWithContext)

	case "CreateCustomActionTypeWithContext":
		return m.Fake(d.fakeCreateCustomActionTypeWithContext)

	case "CreatePipelineWithContext":
		return m.Fake(d.fakeCreatePipelineWithContext)

	case "DeleteCustomActionTypeWithContext":
		return m.Fake(d.fakeDeleteCustomActionTypeWithContext)

	case "DeletePipelineWithContext":
		return m.Fake(d.fakeDeletePipelineWithContext)

	case "DeleteWebhookWithContext":
		return m.Fake(d.fakeDeleteWebhookWithContext)

	case "DeregisterWebhookWithThirdPartyWithContext":
		return m.Fake(d.fakeDeregisterWebhookWithThirdPartyWithContext)

	case "DisableStageTransitionWithContext":
		return m.Fake(d.fakeDisableStageTransitionWithContext)

	case "EnableStageTransitionWithContext":
		return m.Fake(d.fakeEnableStageTransitionWithContext)

	case "GetJobDetailsWithContext":
		return m.Fake(d.fakeGetJobDetailsWithContext)

	case "GetPipelineExecutionWithContext":
		return m.Fake(d.fakeGetPipelineExecutionWithContext)

	case "GetPipelineStateWithContext":
		return m.Fake(d.fakeGetPipelineStateWithContext)

	case "GetPipelineWithContext":
		return m.Fake(d.fakeGetPipelineWithContext)

	case "GetThirdPartyJobDetailsWithContext":
		return m.Fake(d.fakeGetThirdPartyJobDetailsWithContext)

	case "ListActionExecutionsPages":
		return m.Fake(d.fakeListActionExecutionsPages)

	case "ListActionExecutionsPagesWithContext":
		return m.Fake(d.fakeListActionExecutionsPagesWithContext)

	case "ListActionExecutionsWithContext":
		return m.Fake(d.fakeListActionExecutionsWithContext)

	case "ListActionTypesPages":
		return m.Fake(d.fakeListActionTypesPages)

	case "ListActionTypesPagesWithContext":
		return m.Fake(d.fakeListActionTypesPagesWithContext)

	case "ListActionTypesWithContext":
		return m.Fake(d.fakeListActionTypesWithContext)

	case "ListPipelineExecutionsPages":
		return m.Fake(d.fakeListPipelineExecutionsPages)

	case "ListPipelineExecutionsPagesWithContext":
		return m.Fake(d.fakeListPipelineExecutionsPagesWithContext)

	case "ListPipelineExecutionsWithContext":
		return m.Fake(d.fakeListPipelineExecutionsWithContext)

	case "ListPipelinesPages":
		return m.Fake(d.fakeListPipelinesPages)

	case "ListPipelinesPagesWithContext":
		return m.Fake(d.fakeListPipelinesPagesWithContext)

	case "ListPipelinesWithContext":
		return m.Fake(d.fakeListPipelinesWithContext)

	case "ListTagsForResourcePages":
		return m.Fake(d.fakeListTagsForResourcePages)

	case "ListTagsForResourcePagesWithContext":
		return m.Fake(d.fakeListTagsForResourcePagesWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "ListWebhooksPages":
		return m.Fake(d.fakeListWebhooksPages)

	case "ListWebhooksPagesWithContext":
		return m.Fake(d.fakeListWebhooksPagesWithContext)

	case "ListWebhooksWithContext":
		return m.Fake(d.fakeListWebhooksWithContext)

	case "PollForJobsWithContext":
		return m.Fake(d.fakePollForJobsWithContext)

	case "PollForThirdPartyJobsWithContext":
		return m.Fake(d.fakePollForThirdPartyJobsWithContext)

	case "PutActionRevisionWithContext":
		return m.Fake(d.fakePutActionRevisionWithContext)

	case "PutApprovalResultWithContext":
		return m.Fake(d.fakePutApprovalResultWithContext)

	case "PutJobFailureResultWithContext":
		return m.Fake(d.fakePutJobFailureResultWithContext)

	case "PutJobSuccessResultWithContext":
		return m.Fake(d.fakePutJobSuccessResultWithContext)

	case "PutThirdPartyJobFailureResultWithContext":
		return m.Fake(d.fakePutThirdPartyJobFailureResultWithContext)

	case "PutThirdPartyJobSuccessResultWithContext":
		return m.Fake(d.fakePutThirdPartyJobSuccessResultWithContext)

	case "PutWebhookWithContext":
		return m.Fake(d.fakePutWebhookWithContext)

	case "RegisterWebhookWithThirdPartyWithContext":
		return m.Fake(d.fakeRegisterWebhookWithThirdPartyWithContext)

	case "RetryStageExecutionWithContext":
		return m.Fake(d.fakeRetryStageExecutionWithContext)

	case "StartPipelineExecutionWithContext":
		return m.Fake(d.fakeStartPipelineExecutionWithContext)

	case "StopPipelineExecutionWithContext":
		return m.Fake(d.fakeStopPipelineExecutionWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdatePipelineWithContext":
		return m.Fake(d.fakeUpdatePipelineWithContext)

	default:
		return nil
	}
}

func (d *CodePipelineDouble) AcknowledgeJob(i0 *codepipeline.AcknowledgeJobInput) (r0 *codepipeline.AcknowledgeJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcknowledgeJob", i0)
	r0, _ = returns[0].(*codepipeline.AcknowledgeJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) AcknowledgeJobRequest(i0 *codepipeline.AcknowledgeJobInput) (r0 *request.Request, r1 *codepipeline.AcknowledgeJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcknowledgeJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codepipeline.AcknowledgeJobOutput)
	return
}

func (d *CodePipelineDouble) AcknowledgeJobWithContext(i0 context.Context, i1 *codepipeline.AcknowledgeJobInput, i2 ...request.Option) (r0 *codepipeline.AcknowledgeJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcknowledgeJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codepipeline.AcknowledgeJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) fakeAcknowledgeJobWithContext(ctx context.Context, in *codepipeline.AcknowledgeJobInput, _ ...request.Option) (*codepipeline.AcknowledgeJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AcknowledgeJob cancelled", ctx.Err())
	default:
		return d.AcknowledgeJob(in)
	}
}

func (d *CodePipelineDouble) AcknowledgeThirdPartyJob(i0 *codepipeline.AcknowledgeThirdPartyJobInput) (r0 *codepipeline.AcknowledgeThirdPartyJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcknowledgeThirdPartyJob", i0)
	r0, _ = returns[0].(*codepipeline.AcknowledgeThirdPartyJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) AcknowledgeThirdPartyJobRequest(i0 *codepipeline.AcknowledgeThirdPartyJobInput) (r0 *request.Request, r1 *codepipeline.AcknowledgeThirdPartyJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcknowledgeThirdPartyJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codepipeline.AcknowledgeThirdPartyJobOutput)
	return
}

func (d *CodePipelineDouble) AcknowledgeThirdPartyJobWithContext(i0 context.Context, i1 *codepipeline.AcknowledgeThirdPartyJobInput, i2 ...request.Option) (r0 *codepipeline.AcknowledgeThirdPartyJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcknowledgeThirdPartyJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codepipeline.AcknowledgeThirdPartyJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) fakeAcknowledgeThirdPartyJobWithContext(ctx context.Context, in *codepipeline.AcknowledgeThirdPartyJobInput, _ ...request.Option) (*codepipeline.AcknowledgeThirdPartyJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AcknowledgeThirdPartyJob cancelled", ctx.Err())
	default:
		return d.AcknowledgeThirdPartyJob(in)
	}
}

func (d *CodePipelineDouble) CreateCustomActionType(i0 *codepipeline.CreateCustomActionTypeInput) (r0 *codepipeline.CreateCustomActionTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCustomActionType", i0)
	r0, _ = returns[0].(*codepipeline.CreateCustomActionTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) CreateCustomActionTypeRequest(i0 *codepipeline.CreateCustomActionTypeInput) (r0 *request.Request, r1 *codepipeline.CreateCustomActionTypeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCustomActionTypeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codepipeline.CreateCustomActionTypeOutput)
	return
}

func (d *CodePipelineDouble) CreateCustomActionTypeWithContext(i0 context.Context, i1 *codepipeline.CreateCustomActionTypeInput, i2 ...request.Option) (r0 *codepipeline.CreateCustomActionTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCustomActionTypeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codepipeline.CreateCustomActionTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) fakeCreateCustomActionTypeWithContext(ctx context.Context, in *codepipeline.CreateCustomActionTypeInput, _ ...request.Option) (*codepipeline.CreateCustomActionTypeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateCustomActionType cancelled", ctx.Err())
	default:
		return d.CreateCustomActionType(in)
	}
}

func (d *CodePipelineDouble) CreatePipeline(i0 *codepipeline.CreatePipelineInput) (r0 *codepipeline.CreatePipelineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePipeline", i0)
	r0, _ = returns[0].(*codepipeline.CreatePipelineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) CreatePipelineRequest(i0 *codepipeline.CreatePipelineInput) (r0 *request.Request, r1 *codepipeline.CreatePipelineOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePipelineRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codepipeline.CreatePipelineOutput)
	return
}

func (d *CodePipelineDouble) CreatePipelineWithContext(i0 context.Context, i1 *codepipeline.CreatePipelineInput, i2 ...request.Option) (r0 *codepipeline.CreatePipelineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePipelineWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codepipeline.CreatePipelineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) fakeCreatePipelineWithContext(ctx context.Context, in *codepipeline.CreatePipelineInput, _ ...request.Option) (*codepipeline.CreatePipelineOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreatePipeline cancelled", ctx.Err())
	default:
		return d.CreatePipeline(in)
	}
}

func (d *CodePipelineDouble) DeleteCustomActionType(i0 *codepipeline.DeleteCustomActionTypeInput) (r0 *codepipeline.DeleteCustomActionTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCustomActionType", i0)
	r0, _ = returns[0].(*codepipeline.DeleteCustomActionTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) DeleteCustomActionTypeRequest(i0 *codepipeline.DeleteCustomActionTypeInput) (r0 *request.Request, r1 *codepipeline.DeleteCustomActionTypeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCustomActionTypeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codepipeline.DeleteCustomActionTypeOutput)
	return
}

func (d *CodePipelineDouble) DeleteCustomActionTypeWithContext(i0 context.Context, i1 *codepipeline.DeleteCustomActionTypeInput, i2 ...request.Option) (r0 *codepipeline.DeleteCustomActionTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCustomActionTypeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codepipeline.DeleteCustomActionTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) fakeDeleteCustomActionTypeWithContext(ctx context.Context, in *codepipeline.DeleteCustomActionTypeInput, _ ...request.Option) (*codepipeline.DeleteCustomActionTypeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteCustomActionType cancelled", ctx.Err())
	default:
		return d.DeleteCustomActionType(in)
	}
}

func (d *CodePipelineDouble) DeletePipeline(i0 *codepipeline.DeletePipelineInput) (r0 *codepipeline.DeletePipelineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePipeline", i0)
	r0, _ = returns[0].(*codepipeline.DeletePipelineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) DeletePipelineRequest(i0 *codepipeline.DeletePipelineInput) (r0 *request.Request, r1 *codepipeline.DeletePipelineOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePipelineRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codepipeline.DeletePipelineOutput)
	return
}

func (d *CodePipelineDouble) DeletePipelineWithContext(i0 context.Context, i1 *codepipeline.DeletePipelineInput, i2 ...request.Option) (r0 *codepipeline.DeletePipelineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePipelineWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codepipeline.DeletePipelineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) fakeDeletePipelineWithContext(ctx context.Context, in *codepipeline.DeletePipelineInput, _ ...request.Option) (*codepipeline.DeletePipelineOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeletePipeline cancelled", ctx.Err())
	default:
		return d.DeletePipeline(in)
	}
}

func (d *CodePipelineDouble) DeleteWebhook(i0 *codepipeline.DeleteWebhookInput) (r0 *codepipeline.DeleteWebhookOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteWebhook", i0)
	r0, _ = returns[0].(*codepipeline.DeleteWebhookOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) DeleteWebhookRequest(i0 *codepipeline.DeleteWebhookInput) (r0 *request.Request, r1 *codepipeline.DeleteWebhookOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteWebhookRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codepipeline.DeleteWebhookOutput)
	return
}

func (d *CodePipelineDouble) DeleteWebhookWithContext(i0 context.Context, i1 *codepipeline.DeleteWebhookInput, i2 ...request.Option) (r0 *codepipeline.DeleteWebhookOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteWebhookWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codepipeline.DeleteWebhookOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) fakeDeleteWebhookWithContext(ctx context.Context, in *codepipeline.DeleteWebhookInput, _ ...request.Option) (*codepipeline.DeleteWebhookOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteWebhook cancelled", ctx.Err())
	default:
		return d.DeleteWebhook(in)
	}
}

func (d *CodePipelineDouble) DeregisterWebhookWithThirdParty(i0 *codepipeline.DeregisterWebhookWithThirdPartyInput) (r0 *codepipeline.DeregisterWebhookWithThirdPartyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterWebhookWithThirdParty", i0)
	r0, _ = returns[0].(*codepipeline.DeregisterWebhookWithThirdPartyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) DeregisterWebhookWithThirdPartyRequest(i0 *codepipeline.DeregisterWebhookWithThirdPartyInput) (r0 *request.Request, r1 *codepipeline.DeregisterWebhookWithThirdPartyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterWebhookWithThirdPartyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codepipeline.DeregisterWebhookWithThirdPartyOutput)
	return
}

func (d *CodePipelineDouble) DeregisterWebhookWithThirdPartyWithContext(i0 context.Context, i1 *codepipeline.DeregisterWebhookWithThirdPartyInput, i2 ...request.Option) (r0 *codepipeline.DeregisterWebhookWithThirdPartyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterWebhookWithThirdPartyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codepipeline.DeregisterWebhookWithThirdPartyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) fakeDeregisterWebhookWithThirdPartyWithContext(ctx context.Context, in *codepipeline.DeregisterWebhookWithThirdPartyInput, _ ...request.Option) (*codepipeline.DeregisterWebhookWithThirdPartyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeregisterWebhookWithThirdParty cancelled", ctx.Err())
	default:
		return d.DeregisterWebhookWithThirdParty(in)
	}
}

func (d *CodePipelineDouble) DisableStageTransition(i0 *codepipeline.DisableStageTransitionInput) (r0 *codepipeline.DisableStageTransitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableStageTransition", i0)
	r0, _ = returns[0].(*codepipeline.DisableStageTransitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) DisableStageTransitionRequest(i0 *codepipeline.DisableStageTransitionInput) (r0 *request.Request, r1 *codepipeline.DisableStageTransitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableStageTransitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codepipeline.DisableStageTransitionOutput)
	return
}

func (d *CodePipelineDouble) DisableStageTransitionWithContext(i0 context.Context, i1 *codepipeline.DisableStageTransitionInput, i2 ...request.Option) (r0 *codepipeline.DisableStageTransitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableStageTransitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codepipeline.DisableStageTransitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) fakeDisableStageTransitionWithContext(ctx context.Context, in *codepipeline.DisableStageTransitionInput, _ ...request.Option) (*codepipeline.DisableStageTransitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisableStageTransition cancelled", ctx.Err())
	default:
		return d.DisableStageTransition(in)
	}
}

func (d *CodePipelineDouble) EnableStageTransition(i0 *codepipeline.EnableStageTransitionInput) (r0 *codepipeline.EnableStageTransitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableStageTransition", i0)
	r0, _ = returns[0].(*codepipeline.EnableStageTransitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) EnableStageTransitionRequest(i0 *codepipeline.EnableStageTransitionInput) (r0 *request.Request, r1 *codepipeline.EnableStageTransitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableStageTransitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codepipeline.EnableStageTransitionOutput)
	return
}

func (d *CodePipelineDouble) EnableStageTransitionWithContext(i0 context.Context, i1 *codepipeline.EnableStageTransitionInput, i2 ...request.Option) (r0 *codepipeline.EnableStageTransitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableStageTransitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codepipeline.EnableStageTransitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) fakeEnableStageTransitionWithContext(ctx context.Context, in *codepipeline.EnableStageTransitionInput, _ ...request.Option) (*codepipeline.EnableStageTransitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "EnableStageTransition cancelled", ctx.Err())
	default:
		return d.EnableStageTransition(in)
	}
}

func (d *CodePipelineDouble) GetJobDetails(i0 *codepipeline.GetJobDetailsInput) (r0 *codepipeline.GetJobDetailsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobDetails", i0)
	r0, _ = returns[0].(*codepipeline.GetJobDetailsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) GetJobDetailsRequest(i0 *codepipeline.GetJobDetailsInput) (r0 *request.Request, r1 *codepipeline.GetJobDetailsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobDetailsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codepipeline.GetJobDetailsOutput)
	return
}

func (d *CodePipelineDouble) GetJobDetailsWithContext(i0 context.Context, i1 *codepipeline.GetJobDetailsInput, i2 ...request.Option) (r0 *codepipeline.GetJobDetailsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobDetailsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codepipeline.GetJobDetailsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) fakeGetJobDetailsWithContext(ctx context.Context, in *codepipeline.GetJobDetailsInput, _ ...request.Option) (*codepipeline.GetJobDetailsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetJobDetails cancelled", ctx.Err())
	default:
		return d.GetJobDetails(in)
	}
}

func (d *CodePipelineDouble) GetPipeline(i0 *codepipeline.GetPipelineInput) (r0 *codepipeline.GetPipelineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPipeline", i0)
	r0, _ = returns[0].(*codepipeline.GetPipelineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) GetPipelineExecution(i0 *codepipeline.GetPipelineExecutionInput) (r0 *codepipeline.GetPipelineExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPipelineExecution", i0)
	r0, _ = returns[0].(*codepipeline.GetPipelineExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) GetPipelineExecutionRequest(i0 *codepipeline.GetPipelineExecutionInput) (r0 *request.Request, r1 *codepipeline.GetPipelineExecutionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPipelineExecutionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codepipeline.GetPipelineExecutionOutput)
	return
}

func (d *CodePipelineDouble) GetPipelineExecutionWithContext(i0 context.Context, i1 *codepipeline.GetPipelineExecutionInput, i2 ...request.Option) (r0 *codepipeline.GetPipelineExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPipelineExecutionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codepipeline.GetPipelineExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) fakeGetPipelineExecutionWithContext(ctx context.Context, in *codepipeline.GetPipelineExecutionInput, _ ...request.Option) (*codepipeline.GetPipelineExecutionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetPipelineExecution cancelled", ctx.Err())
	default:
		return d.GetPipelineExecution(in)
	}
}

func (d *CodePipelineDouble) GetPipelineRequest(i0 *codepipeline.GetPipelineInput) (r0 *request.Request, r1 *codepipeline.GetPipelineOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPipelineRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codepipeline.GetPipelineOutput)
	return
}

func (d *CodePipelineDouble) GetPipelineState(i0 *codepipeline.GetPipelineStateInput) (r0 *codepipeline.GetPipelineStateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPipelineState", i0)
	r0, _ = returns[0].(*codepipeline.GetPipelineStateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) GetPipelineStateRequest(i0 *codepipeline.GetPipelineStateInput) (r0 *request.Request, r1 *codepipeline.GetPipelineStateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPipelineStateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codepipeline.GetPipelineStateOutput)
	return
}

func (d *CodePipelineDouble) GetPipelineStateWithContext(i0 context.Context, i1 *codepipeline.GetPipelineStateInput, i2 ...request.Option) (r0 *codepipeline.GetPipelineStateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPipelineStateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codepipeline.GetPipelineStateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) fakeGetPipelineStateWithContext(ctx context.Context, in *codepipeline.GetPipelineStateInput, _ ...request.Option) (*codepipeline.GetPipelineStateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetPipelineState cancelled", ctx.Err())
	default:
		return d.GetPipelineState(in)
	}
}

func (d *CodePipelineDouble) GetPipelineWithContext(i0 context.Context, i1 *codepipeline.GetPipelineInput, i2 ...request.Option) (r0 *codepipeline.GetPipelineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPipelineWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codepipeline.GetPipelineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) fakeGetPipelineWithContext(ctx context.Context, in *codepipeline.GetPipelineInput, _ ...request.Option) (*codepipeline.GetPipelineOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetPipeline cancelled", ctx.Err())
	default:
		return d.GetPipeline(in)
	}
}

func (d *CodePipelineDouble) GetThirdPartyJobDetails(i0 *codepipeline.GetThirdPartyJobDetailsInput) (r0 *codepipeline.GetThirdPartyJobDetailsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetThirdPartyJobDetails", i0)
	r0, _ = returns[0].(*codepipeline.GetThirdPartyJobDetailsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) GetThirdPartyJobDetailsRequest(i0 *codepipeline.GetThirdPartyJobDetailsInput) (r0 *request.Request, r1 *codepipeline.GetThirdPartyJobDetailsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetThirdPartyJobDetailsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codepipeline.GetThirdPartyJobDetailsOutput)
	return
}

func (d *CodePipelineDouble) GetThirdPartyJobDetailsWithContext(i0 context.Context, i1 *codepipeline.GetThirdPartyJobDetailsInput, i2 ...request.Option) (r0 *codepipeline.GetThirdPartyJobDetailsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetThirdPartyJobDetailsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codepipeline.GetThirdPartyJobDetailsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) fakeGetThirdPartyJobDetailsWithContext(ctx context.Context, in *codepipeline.GetThirdPartyJobDetailsInput, _ ...request.Option) (*codepipeline.GetThirdPartyJobDetailsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetThirdPartyJobDetails cancelled", ctx.Err())
	default:
		return d.GetThirdPartyJobDetails(in)
	}
}

func (d *CodePipelineDouble) ListActionExecutions(i0 *codepipeline.ListActionExecutionsInput) (r0 *codepipeline.ListActionExecutionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListActionExecutions", i0)
	r0, _ = returns[0].(*codepipeline.ListActionExecutionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) ListActionExecutionsPages(i0 *codepipeline.ListActionExecutionsInput, i1 func(*codepipeline.ListActionExecutionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListActionExecutionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CodePipelineDouble) fakeListActionExecutionsPages(in *codepipeline.ListActionExecutionsInput, pager func(*codepipeline.ListActionExecutionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListActionExecutions", paginators, in, pager)
}

func (d *CodePipelineDouble) ListActionExecutionsPagesWithContext(i0 context.Context, i1 *codepipeline.ListActionExecutionsInput, i2 func(*codepipeline.ListActionExecutionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListActionExecutionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CodePipelineDouble) fakeListActionExecutionsPagesWithContext(ctx context.Context, in *codepipeline.ListActionExecutionsInput, pager func(*codepipeline.ListActionExecutionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListActionExecutions", paginators, ctx, in, pager, options...)
}

func (d *CodePipelineDouble) ListActionExecutionsRequest(i0 *codepipeline.ListActionExecutionsInput) (r0 *request.Request, r1 *codepipeline.ListActionExecutionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListActionExecutionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codepipeline.ListActionExecutionsOutput)
	return
}

func (d *CodePipelineDouble) ListActionExecutionsWithContext(i0 context.Context, i1 *codepipeline.ListActionExecutionsInput, i2 ...request.Option) (r0 *codepipeline.ListActionExecutionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListActionExecutionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codepipeline.ListActionExecutionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) fakeListActionExecutionsWithContext(ctx context.Context, in *codepipeline.ListActionExecutionsInput, _ ...request.Option) (*codepipeline.ListActionExecutionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListActionExecutions cancelled", ctx.Err())
	default:
		return d.ListActionExecutions(in)
	}
}

func (d *CodePipelineDouble) ListActionTypes(i0 *codepipeline.ListActionTypesInput) (r0 *codepipeline.ListActionTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListActionTypes", i0)
	r0, _ = returns[0].(*codepipeline.ListActionTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) ListActionTypesPages(i0 *codepipeline.ListActionTypesInput, i1 func(*codepipeline.ListActionTypesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListActionTypesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CodePipelineDouble) fakeListActionTypesPages(in *codepipeline.ListActionTypesInput, pager func(*codepipeline.ListActionTypesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListActionTypes", paginators, in, pager)
}

func (d *CodePipelineDouble) ListActionTypesPagesWithContext(i0 context.Context, i1 *codepipeline.ListActionTypesInput, i2 func(*codepipeline.ListActionTypesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListActionTypesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CodePipelineDouble) fakeListActionTypesPagesWithContext(ctx context.Context, in *codepipeline.ListActionTypesInput, pager func(*codepipeline.ListActionTypesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListActionTypes", paginators, ctx, in, pager, options...)
}

func (d *CodePipelineDouble) ListActionTypesRequest(i0 *codepipeline.ListActionTypesInput) (r0 *request.Request, r1 *codepipeline.ListActionTypesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListActionTypesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codepipeline.ListActionTypesOutput)
	return
}

func (d *CodePipelineDouble) ListActionTypesWithContext(i0 context.Context, i1 *codepipeline.ListActionTypesInput, i2 ...request.Option) (r0 *codepipeline.ListActionTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListActionTypesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codepipeline.ListActionTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) fakeListActionTypesWithContext(ctx context.Context, in *codepipeline.ListActionTypesInput, _ ...request.Option) (*codepipeline.ListActionTypesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListActionTypes cancelled", ctx.Err())
	default:
		return d.ListActionTypes(in)
	}
}

func (d *CodePipelineDouble) ListPipelineExecutions(i0 *codepipeline.ListPipelineExecutionsInput) (r0 *codepipeline.ListPipelineExecutionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPipelineExecutions", i0)
	r0, _ = returns[0].(*codepipeline.ListPipelineExecutionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) ListPipelineExecutionsPages(i0 *codepipeline.ListPipelineExecutionsInput, i1 func(*codepipeline.ListPipelineExecutionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPipelineExecutionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CodePipelineDouble) fakeListPipelineExecutionsPages(in *codepipeline.ListPipelineExecutionsInput, pager func(*codepipeline.ListPipelineExecutionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListPipelineExecutions", paginators, in, pager)
}

func (d *CodePipelineDouble) ListPipelineExecutionsPagesWithContext(i0 context.Context, i1 *codepipeline.ListPipelineExecutionsInput, i2 func(*codepipeline.ListPipelineExecutionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPipelineExecutionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CodePipelineDouble) fakeListPipelineExecutionsPagesWithContext(ctx context.Context, in *codepipeline.ListPipelineExecutionsInput, pager func(*codepipeline.ListPipelineExecutionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListPipelineExecutions", paginators, ctx, in, pager, options...)
}

func (d *CodePipelineDouble) ListPipelineExecutionsRequest(i0 *codepipeline.ListPipelineExecutionsInput) (r0 *request.Request, r1 *codepipeline.ListPipelineExecutionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPipelineExecutionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codepipeline.ListPipelineExecutionsOutput)
	return
}

func (d *CodePipelineDouble) ListPipelineExecutionsWithContext(i0 context.Context, i1 *codepipeline.ListPipelineExecutionsInput, i2 ...request.Option) (r0 *codepipeline.ListPipelineExecutionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPipelineExecutionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codepipeline.ListPipelineExecutionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) fakeListPipelineExecutionsWithContext(ctx context.Context, in *codepipeline.ListPipelineExecutionsInput, _ ...request.Option) (*codepipeline.ListPipelineExecutionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListPipelineExecutions cancelled", ctx.Err())
	default:
		return d.ListPipelineExecutions(in)
	}
}

func (d *CodePipelineDouble) ListPipelines(i0 *codepipeline.ListPipelinesInput) (r0 *codepipeline.ListPipelinesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPipelines", i0)
	r0, _ = returns[0].(*codepipeline.ListPipelinesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) ListPipelinesPages(i0 *codepipeline.ListPipelinesInput, i1 func(*codepipeline.ListPipelinesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPipelinesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CodePipelineDouble) fakeListPipelinesPages(in *codepipeline.ListPipelinesInput, pager func(*codepipeline.ListPipelinesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListPipelines", paginators, in, pager)
}

func (d *CodePipelineDouble) ListPipelinesPagesWithContext(i0 context.Context, i1 *codepipeline.ListPipelinesInput, i2 func(*codepipeline.ListPipelinesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPipelinesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CodePipelineDouble) fakeListPipelinesPagesWithContext(ctx context.Context, in *codepipeline.ListPipelinesInput, pager func(*codepipeline.ListPipelinesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListPipelines", paginators, ctx, in, pager, options...)
}

func (d *CodePipelineDouble) ListPipelinesRequest(i0 *codepipeline.ListPipelinesInput) (r0 *request.Request, r1 *codepipeline.ListPipelinesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPipelinesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codepipeline.ListPipelinesOutput)
	return
}

func (d *CodePipelineDouble) ListPipelinesWithContext(i0 context.Context, i1 *codepipeline.ListPipelinesInput, i2 ...request.Option) (r0 *codepipeline.ListPipelinesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPipelinesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codepipeline.ListPipelinesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) fakeListPipelinesWithContext(ctx context.Context, in *codepipeline.ListPipelinesInput, _ ...request.Option) (*codepipeline.ListPipelinesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListPipelines cancelled", ctx.Err())
	default:
		return d.ListPipelines(in)
	}
}

func (d *CodePipelineDouble) ListTagsForResource(i0 *codepipeline.ListTagsForResourceInput) (r0 *codepipeline.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*codepipeline.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) ListTagsForResourcePages(i0 *codepipeline.ListTagsForResourceInput, i1 func(*codepipeline.ListTagsForResourceOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourcePages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CodePipelineDouble) fakeListTagsForResourcePages(in *codepipeline.ListTagsForResourceInput, pager func(*codepipeline.ListTagsForResourceOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTagsForResource", paginators, in, pager)
}

func (d *CodePipelineDouble) ListTagsForResourcePagesWithContext(i0 context.Context, i1 *codepipeline.ListTagsForResourceInput, i2 func(*codepipeline.ListTagsForResourceOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourcePagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CodePipelineDouble) fakeListTagsForResourcePagesWithContext(ctx context.Context, in *codepipeline.ListTagsForResourceInput, pager func(*codepipeline.ListTagsForResourceOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTagsForResource", paginators, ctx, in, pager, options...)
}

func (d *CodePipelineDouble) ListTagsForResourceRequest(i0 *codepipeline.ListTagsForResourceInput) (r0 *request.Request, r1 *codepipeline.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codepipeline.ListTagsForResourceOutput)
	return
}

func (d *CodePipelineDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *codepipeline.ListTagsForResourceInput, i2 ...request.Option) (r0 *codepipeline.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codepipeline.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *codepipeline.ListTagsForResourceInput, _ ...request.Option) (*codepipeline.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *CodePipelineDouble) ListWebhooks(i0 *codepipeline.ListWebhooksInput) (r0 *codepipeline.ListWebhooksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWebhooks", i0)
	r0, _ = returns[0].(*codepipeline.ListWebhooksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) ListWebhooksPages(i0 *codepipeline.ListWebhooksInput, i1 func(*codepipeline.ListWebhooksOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWebhooksPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CodePipelineDouble) fakeListWebhooksPages(in *codepipeline.ListWebhooksInput, pager func(*codepipeline.ListWebhooksOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListWebhooks", paginators, in, pager)
}

func (d *CodePipelineDouble) ListWebhooksPagesWithContext(i0 context.Context, i1 *codepipeline.ListWebhooksInput, i2 func(*codepipeline.ListWebhooksOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWebhooksPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CodePipelineDouble) fakeListWebhooksPagesWithContext(ctx context.Context, in *codepipeline.ListWebhooksInput, pager func(*codepipeline.ListWebhooksOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListWebhooks", paginators, ctx, in, pager, options...)
}

func (d *CodePipelineDouble) ListWebhooksRequest(i0 *codepipeline.ListWebhooksInput) (r0 *request.Request, r1 *codepipeline.ListWebhooksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWebhooksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codepipeline.ListWebhooksOutput)
	return
}

func (d *CodePipelineDouble) ListWebhooksWithContext(i0 context.Context, i1 *codepipeline.ListWebhooksInput, i2 ...request.Option) (r0 *codepipeline.ListWebhooksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWebhooksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codepipeline.ListWebhooksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) fakeListWebhooksWithContext(ctx context.Context, in *codepipeline.ListWebhooksInput, _ ...request.Option) (*codepipeline.ListWebhooksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListWebhooks cancelled", ctx.Err())
	default:
		return d.ListWebhooks(in)
	}
}

func (d *CodePipelineDouble) PollForJobs(i0 *codepipeline.PollForJobsInput) (r0 *codepipeline.PollForJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PollForJobs", i0)
	r0, _ = returns[0].(*codepipeline.PollForJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) PollForJobsRequest(i0 *codepipeline.PollForJobsInput) (r0 *request.Request, r1 *codepipeline.PollForJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PollForJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codepipeline.PollForJobsOutput)
	return
}

func (d *CodePipelineDouble) PollForJobsWithContext(i0 context.Context, i1 *codepipeline.PollForJobsInput, i2 ...request.Option) (r0 *codepipeline.PollForJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PollForJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codepipeline.PollForJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) fakePollForJobsWithContext(ctx context.Context, in *codepipeline.PollForJobsInput, _ ...request.Option) (*codepipeline.PollForJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PollForJobs cancelled", ctx.Err())
	default:
		return d.PollForJobs(in)
	}
}

func (d *CodePipelineDouble) PollForThirdPartyJobs(i0 *codepipeline.PollForThirdPartyJobsInput) (r0 *codepipeline.PollForThirdPartyJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PollForThirdPartyJobs", i0)
	r0, _ = returns[0].(*codepipeline.PollForThirdPartyJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) PollForThirdPartyJobsRequest(i0 *codepipeline.PollForThirdPartyJobsInput) (r0 *request.Request, r1 *codepipeline.PollForThirdPartyJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PollForThirdPartyJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codepipeline.PollForThirdPartyJobsOutput)
	return
}

func (d *CodePipelineDouble) PollForThirdPartyJobsWithContext(i0 context.Context, i1 *codepipeline.PollForThirdPartyJobsInput, i2 ...request.Option) (r0 *codepipeline.PollForThirdPartyJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PollForThirdPartyJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codepipeline.PollForThirdPartyJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) fakePollForThirdPartyJobsWithContext(ctx context.Context, in *codepipeline.PollForThirdPartyJobsInput, _ ...request.Option) (*codepipeline.PollForThirdPartyJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PollForThirdPartyJobs cancelled", ctx.Err())
	default:
		return d.PollForThirdPartyJobs(in)
	}
}

func (d *CodePipelineDouble) PutActionRevision(i0 *codepipeline.PutActionRevisionInput) (r0 *codepipeline.PutActionRevisionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutActionRevision", i0)
	r0, _ = returns[0].(*codepipeline.PutActionRevisionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) PutActionRevisionRequest(i0 *codepipeline.PutActionRevisionInput) (r0 *request.Request, r1 *codepipeline.PutActionRevisionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutActionRevisionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codepipeline.PutActionRevisionOutput)
	return
}

func (d *CodePipelineDouble) PutActionRevisionWithContext(i0 context.Context, i1 *codepipeline.PutActionRevisionInput, i2 ...request.Option) (r0 *codepipeline.PutActionRevisionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutActionRevisionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codepipeline.PutActionRevisionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) fakePutActionRevisionWithContext(ctx context.Context, in *codepipeline.PutActionRevisionInput, _ ...request.Option) (*codepipeline.PutActionRevisionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutActionRevision cancelled", ctx.Err())
	default:
		return d.PutActionRevision(in)
	}
}

func (d *CodePipelineDouble) PutApprovalResult(i0 *codepipeline.PutApprovalResultInput) (r0 *codepipeline.PutApprovalResultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutApprovalResult", i0)
	r0, _ = returns[0].(*codepipeline.PutApprovalResultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) PutApprovalResultRequest(i0 *codepipeline.PutApprovalResultInput) (r0 *request.Request, r1 *codepipeline.PutApprovalResultOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutApprovalResultRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codepipeline.PutApprovalResultOutput)
	return
}

func (d *CodePipelineDouble) PutApprovalResultWithContext(i0 context.Context, i1 *codepipeline.PutApprovalResultInput, i2 ...request.Option) (r0 *codepipeline.PutApprovalResultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutApprovalResultWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codepipeline.PutApprovalResultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) fakePutApprovalResultWithContext(ctx context.Context, in *codepipeline.PutApprovalResultInput, _ ...request.Option) (*codepipeline.PutApprovalResultOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutApprovalResult cancelled", ctx.Err())
	default:
		return d.PutApprovalResult(in)
	}
}

func (d *CodePipelineDouble) PutJobFailureResult(i0 *codepipeline.PutJobFailureResultInput) (r0 *codepipeline.PutJobFailureResultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutJobFailureResult", i0)
	r0, _ = returns[0].(*codepipeline.PutJobFailureResultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) PutJobFailureResultRequest(i0 *codepipeline.PutJobFailureResultInput) (r0 *request.Request, r1 *codepipeline.PutJobFailureResultOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutJobFailureResultRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codepipeline.PutJobFailureResultOutput)
	return
}

func (d *CodePipelineDouble) PutJobFailureResultWithContext(i0 context.Context, i1 *codepipeline.PutJobFailureResultInput, i2 ...request.Option) (r0 *codepipeline.PutJobFailureResultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutJobFailureResultWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codepipeline.PutJobFailureResultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) fakePutJobFailureResultWithContext(ctx context.Context, in *codepipeline.PutJobFailureResultInput, _ ...request.Option) (*codepipeline.PutJobFailureResultOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutJobFailureResult cancelled", ctx.Err())
	default:
		return d.PutJobFailureResult(in)
	}
}

func (d *CodePipelineDouble) PutJobSuccessResult(i0 *codepipeline.PutJobSuccessResultInput) (r0 *codepipeline.PutJobSuccessResultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutJobSuccessResult", i0)
	r0, _ = returns[0].(*codepipeline.PutJobSuccessResultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) PutJobSuccessResultRequest(i0 *codepipeline.PutJobSuccessResultInput) (r0 *request.Request, r1 *codepipeline.PutJobSuccessResultOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutJobSuccessResultRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codepipeline.PutJobSuccessResultOutput)
	return
}

func (d *CodePipelineDouble) PutJobSuccessResultWithContext(i0 context.Context, i1 *codepipeline.PutJobSuccessResultInput, i2 ...request.Option) (r0 *codepipeline.PutJobSuccessResultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutJobSuccessResultWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codepipeline.PutJobSuccessResultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) fakePutJobSuccessResultWithContext(ctx context.Context, in *codepipeline.PutJobSuccessResultInput, _ ...request.Option) (*codepipeline.PutJobSuccessResultOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutJobSuccessResult cancelled", ctx.Err())
	default:
		return d.PutJobSuccessResult(in)
	}
}

func (d *CodePipelineDouble) PutThirdPartyJobFailureResult(i0 *codepipeline.PutThirdPartyJobFailureResultInput) (r0 *codepipeline.PutThirdPartyJobFailureResultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutThirdPartyJobFailureResult", i0)
	r0, _ = returns[0].(*codepipeline.PutThirdPartyJobFailureResultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) PutThirdPartyJobFailureResultRequest(i0 *codepipeline.PutThirdPartyJobFailureResultInput) (r0 *request.Request, r1 *codepipeline.PutThirdPartyJobFailureResultOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutThirdPartyJobFailureResultRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codepipeline.PutThirdPartyJobFailureResultOutput)
	return
}

func (d *CodePipelineDouble) PutThirdPartyJobFailureResultWithContext(i0 context.Context, i1 *codepipeline.PutThirdPartyJobFailureResultInput, i2 ...request.Option) (r0 *codepipeline.PutThirdPartyJobFailureResultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutThirdPartyJobFailureResultWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codepipeline.PutThirdPartyJobFailureResultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) fakePutThirdPartyJobFailureResultWithContext(ctx context.Context, in *codepipeline.PutThirdPartyJobFailureResultInput, _ ...request.Option) (*codepipeline.PutThirdPartyJobFailureResultOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutThirdPartyJobFailureResult cancelled", ctx.Err())
	default:
		return d.PutThirdPartyJobFailureResult(in)
	}
}

func (d *CodePipelineDouble) PutThirdPartyJobSuccessResult(i0 *codepipeline.PutThirdPartyJobSuccessResultInput) (r0 *codepipeline.PutThirdPartyJobSuccessResultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutThirdPartyJobSuccessResult", i0)
	r0, _ = returns[0].(*codepipeline.PutThirdPartyJobSuccessResultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) PutThirdPartyJobSuccessResultRequest(i0 *codepipeline.PutThirdPartyJobSuccessResultInput) (r0 *request.Request, r1 *codepipeline.PutThirdPartyJobSuccessResultOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutThirdPartyJobSuccessResultRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codepipeline.PutThirdPartyJobSuccessResultOutput)
	return
}

func (d *CodePipelineDouble) PutThirdPartyJobSuccessResultWithContext(i0 context.Context, i1 *codepipeline.PutThirdPartyJobSuccessResultInput, i2 ...request.Option) (r0 *codepipeline.PutThirdPartyJobSuccessResultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutThirdPartyJobSuccessResultWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codepipeline.PutThirdPartyJobSuccessResultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) fakePutThirdPartyJobSuccessResultWithContext(ctx context.Context, in *codepipeline.PutThirdPartyJobSuccessResultInput, _ ...request.Option) (*codepipeline.PutThirdPartyJobSuccessResultOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutThirdPartyJobSuccessResult cancelled", ctx.Err())
	default:
		return d.PutThirdPartyJobSuccessResult(in)
	}
}

func (d *CodePipelineDouble) PutWebhook(i0 *codepipeline.PutWebhookInput) (r0 *codepipeline.PutWebhookOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutWebhook", i0)
	r0, _ = returns[0].(*codepipeline.PutWebhookOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) PutWebhookRequest(i0 *codepipeline.PutWebhookInput) (r0 *request.Request, r1 *codepipeline.PutWebhookOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutWebhookRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codepipeline.PutWebhookOutput)
	return
}

func (d *CodePipelineDouble) PutWebhookWithContext(i0 context.Context, i1 *codepipeline.PutWebhookInput, i2 ...request.Option) (r0 *codepipeline.PutWebhookOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutWebhookWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codepipeline.PutWebhookOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) fakePutWebhookWithContext(ctx context.Context, in *codepipeline.PutWebhookInput, _ ...request.Option) (*codepipeline.PutWebhookOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutWebhook cancelled", ctx.Err())
	default:
		return d.PutWebhook(in)
	}
}

func (d *CodePipelineDouble) RegisterWebhookWithThirdParty(i0 *codepipeline.RegisterWebhookWithThirdPartyInput) (r0 *codepipeline.RegisterWebhookWithThirdPartyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterWebhookWithThirdParty", i0)
	r0, _ = returns[0].(*codepipeline.RegisterWebhookWithThirdPartyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) RegisterWebhookWithThirdPartyRequest(i0 *codepipeline.RegisterWebhookWithThirdPartyInput) (r0 *request.Request, r1 *codepipeline.RegisterWebhookWithThirdPartyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterWebhookWithThirdPartyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codepipeline.RegisterWebhookWithThirdPartyOutput)
	return
}

func (d *CodePipelineDouble) RegisterWebhookWithThirdPartyWithContext(i0 context.Context, i1 *codepipeline.RegisterWebhookWithThirdPartyInput, i2 ...request.Option) (r0 *codepipeline.RegisterWebhookWithThirdPartyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterWebhookWithThirdPartyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codepipeline.RegisterWebhookWithThirdPartyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) fakeRegisterWebhookWithThirdPartyWithContext(ctx context.Context, in *codepipeline.RegisterWebhookWithThirdPartyInput, _ ...request.Option) (*codepipeline.RegisterWebhookWithThirdPartyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterWebhookWithThirdParty cancelled", ctx.Err())
	default:
		return d.RegisterWebhookWithThirdParty(in)
	}
}

func (d *CodePipelineDouble) RetryStageExecution(i0 *codepipeline.RetryStageExecutionInput) (r0 *codepipeline.RetryStageExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RetryStageExecution", i0)
	r0, _ = returns[0].(*codepipeline.RetryStageExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) RetryStageExecutionRequest(i0 *codepipeline.RetryStageExecutionInput) (r0 *request.Request, r1 *codepipeline.RetryStageExecutionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RetryStageExecutionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codepipeline.RetryStageExecutionOutput)
	return
}

func (d *CodePipelineDouble) RetryStageExecutionWithContext(i0 context.Context, i1 *codepipeline.RetryStageExecutionInput, i2 ...request.Option) (r0 *codepipeline.RetryStageExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RetryStageExecutionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codepipeline.RetryStageExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) fakeRetryStageExecutionWithContext(ctx context.Context, in *codepipeline.RetryStageExecutionInput, _ ...request.Option) (*codepipeline.RetryStageExecutionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RetryStageExecution cancelled", ctx.Err())
	default:
		return d.RetryStageExecution(in)
	}
}

func (d *CodePipelineDouble) StartPipelineExecution(i0 *codepipeline.StartPipelineExecutionInput) (r0 *codepipeline.StartPipelineExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartPipelineExecution", i0)
	r0, _ = returns[0].(*codepipeline.StartPipelineExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) StartPipelineExecutionRequest(i0 *codepipeline.StartPipelineExecutionInput) (r0 *request.Request, r1 *codepipeline.StartPipelineExecutionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartPipelineExecutionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codepipeline.StartPipelineExecutionOutput)
	return
}

func (d *CodePipelineDouble) StartPipelineExecutionWithContext(i0 context.Context, i1 *codepipeline.StartPipelineExecutionInput, i2 ...request.Option) (r0 *codepipeline.StartPipelineExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartPipelineExecutionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codepipeline.StartPipelineExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) fakeStartPipelineExecutionWithContext(ctx context.Context, in *codepipeline.StartPipelineExecutionInput, _ ...request.Option) (*codepipeline.StartPipelineExecutionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartPipelineExecution cancelled", ctx.Err())
	default:
		return d.StartPipelineExecution(in)
	}
}

func (d *CodePipelineDouble) StopPipelineExecution(i0 *codepipeline.StopPipelineExecutionInput) (r0 *codepipeline.StopPipelineExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopPipelineExecution", i0)
	r0, _ = returns[0].(*codepipeline.StopPipelineExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) StopPipelineExecutionRequest(i0 *codepipeline.StopPipelineExecutionInput) (r0 *request.Request, r1 *codepipeline.StopPipelineExecutionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopPipelineExecutionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codepipeline.StopPipelineExecutionOutput)
	return
}

func (d *CodePipelineDouble) StopPipelineExecutionWithContext(i0 context.Context, i1 *codepipeline.StopPipelineExecutionInput, i2 ...request.Option) (r0 *codepipeline.StopPipelineExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopPipelineExecutionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codepipeline.StopPipelineExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) fakeStopPipelineExecutionWithContext(ctx context.Context, in *codepipeline.StopPipelineExecutionInput, _ ...request.Option) (*codepipeline.StopPipelineExecutionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopPipelineExecution cancelled", ctx.Err())
	default:
		return d.StopPipelineExecution(in)
	}
}

func (d *CodePipelineDouble) TagResource(i0 *codepipeline.TagResourceInput) (r0 *codepipeline.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*codepipeline.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) TagResourceRequest(i0 *codepipeline.TagResourceInput) (r0 *request.Request, r1 *codepipeline.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codepipeline.TagResourceOutput)
	return
}

func (d *CodePipelineDouble) TagResourceWithContext(i0 context.Context, i1 *codepipeline.TagResourceInput, i2 ...request.Option) (r0 *codepipeline.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codepipeline.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) fakeTagResourceWithContext(ctx context.Context, in *codepipeline.TagResourceInput, _ ...request.Option) (*codepipeline.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *CodePipelineDouble) UntagResource(i0 *codepipeline.UntagResourceInput) (r0 *codepipeline.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*codepipeline.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) UntagResourceRequest(i0 *codepipeline.UntagResourceInput) (r0 *request.Request, r1 *codepipeline.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codepipeline.UntagResourceOutput)
	return
}

func (d *CodePipelineDouble) UntagResourceWithContext(i0 context.Context, i1 *codepipeline.UntagResourceInput, i2 ...request.Option) (r0 *codepipeline.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codepipeline.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) fakeUntagResourceWithContext(ctx context.Context, in *codepipeline.UntagResourceInput, _ ...request.Option) (*codepipeline.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *CodePipelineDouble) UpdatePipeline(i0 *codepipeline.UpdatePipelineInput) (r0 *codepipeline.UpdatePipelineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePipeline", i0)
	r0, _ = returns[0].(*codepipeline.UpdatePipelineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) UpdatePipelineRequest(i0 *codepipeline.UpdatePipelineInput) (r0 *request.Request, r1 *codepipeline.UpdatePipelineOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePipelineRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codepipeline.UpdatePipelineOutput)
	return
}

func (d *CodePipelineDouble) UpdatePipelineWithContext(i0 context.Context, i1 *codepipeline.UpdatePipelineInput, i2 ...request.Option) (r0 *codepipeline.UpdatePipelineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePipelineWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codepipeline.UpdatePipelineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodePipelineDouble) fakeUpdatePipelineWithContext(ctx context.Context, in *codepipeline.UpdatePipelineInput, _ ...request.Option) (*codepipeline.UpdatePipelineOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdatePipeline cancelled", ctx.Err())
	default:
		return d.UpdatePipeline(in)
	}
}
