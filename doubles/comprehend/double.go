// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:12:00+11:00

// Package comprehenddouble provides a TestDouble implementation of comprehendiface.ComprehendAPI
package comprehenddouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/comprehend"
	"github.com/aws/aws-sdk-go/service/comprehend/comprehendiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// ComprehendDouble is TestDouble for comprehendiface.ComprehendAPI
type ComprehendDouble struct {
	comprehendiface.ComprehendAPI
	*awsdouble.AWSTestDouble
}

// Constructor for ComprehendDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *ComprehendDouble {
	result := &ComprehendDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*comprehendiface.ComprehendAPI)(nil), configurators...)
	return result
}

func (d *ComprehendDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *ComprehendDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "BatchDetectDominantLanguageWithContext":
		return m.Fake(d.fakeBatchDetectDominantLanguageWithContext)

	case "BatchDetectEntitiesWithContext":
		return m.Fake(d.fakeBatchDetectEntitiesWithContext)

	case "BatchDetectKeyPhrasesWithContext":
		return m.Fake(d.fakeBatchDetectKeyPhrasesWithContext)

	case "BatchDetectSentimentWithContext":
		return m.Fake(d.fakeBatchDetectSentimentWithContext)

	case "BatchDetectSyntaxWithContext":
		return m.Fake(d.fakeBatchDetectSyntaxWithContext)

	case "ClassifyDocumentWithContext":
		return m.Fake(d.fakeClassifyDocumentWithContext)

	case "CreateDocumentClassifierWithContext":
		return m.Fake(d.fakeCreateDocumentClassifierWithContext)

	case "CreateEndpointWithContext":
		return m.Fake(d.fakeCreateEndpointWithContext)

	case "CreateEntityRecognizerWithContext":
		return m.Fake(d.fakeCreateEntityRecognizerWithContext)

	case "DeleteDocumentClassifierWithContext":
		return m.Fake(d.fakeDeleteDocumentClassifierWithContext)

	case "DeleteEndpointWithContext":
		return m.Fake(d.fakeDeleteEndpointWithContext)

	case "DeleteEntityRecognizerWithContext":
		return m.Fake(d.fakeDeleteEntityRecognizerWithContext)

	case "DescribeDocumentClassificationJobWithContext":
		return m.Fake(d.fakeDescribeDocumentClassificationJobWithContext)

	case "DescribeDocumentClassifierWithContext":
		return m.Fake(d.fakeDescribeDocumentClassifierWithContext)

	case "DescribeDominantLanguageDetectionJobWithContext":
		return m.Fake(d.fakeDescribeDominantLanguageDetectionJobWithContext)

	case "DescribeEndpointWithContext":
		return m.Fake(d.fakeDescribeEndpointWithContext)

	case "DescribeEntitiesDetectionJobWithContext":
		return m.Fake(d.fakeDescribeEntitiesDetectionJobWithContext)

	case "DescribeEntityRecognizerWithContext":
		return m.Fake(d.fakeDescribeEntityRecognizerWithContext)

	case "DescribeKeyPhrasesDetectionJobWithContext":
		return m.Fake(d.fakeDescribeKeyPhrasesDetectionJobWithContext)

	case "DescribeSentimentDetectionJobWithContext":
		return m.Fake(d.fakeDescribeSentimentDetectionJobWithContext)

	case "DescribeTopicsDetectionJobWithContext":
		return m.Fake(d.fakeDescribeTopicsDetectionJobWithContext)

	case "DetectDominantLanguageWithContext":
		return m.Fake(d.fakeDetectDominantLanguageWithContext)

	case "DetectEntitiesWithContext":
		return m.Fake(d.fakeDetectEntitiesWithContext)

	case "DetectKeyPhrasesWithContext":
		return m.Fake(d.fakeDetectKeyPhrasesWithContext)

	case "DetectSentimentWithContext":
		return m.Fake(d.fakeDetectSentimentWithContext)

	case "DetectSyntaxWithContext":
		return m.Fake(d.fakeDetectSyntaxWithContext)

	case "ListDocumentClassificationJobsPages":
		return m.Fake(d.fakeListDocumentClassificationJobsPages)

	case "ListDocumentClassificationJobsPagesWithContext":
		return m.Fake(d.fakeListDocumentClassificationJobsPagesWithContext)

	case "ListDocumentClassificationJobsWithContext":
		return m.Fake(d.fakeListDocumentClassificationJobsWithContext)

	case "ListDocumentClassifiersPages":
		return m.Fake(d.fakeListDocumentClassifiersPages)

	case "ListDocumentClassifiersPagesWithContext":
		return m.Fake(d.fakeListDocumentClassifiersPagesWithContext)

	case "ListDocumentClassifiersWithContext":
		return m.Fake(d.fakeListDocumentClassifiersWithContext)

	case "ListDominantLanguageDetectionJobsPages":
		return m.Fake(d.fakeListDominantLanguageDetectionJobsPages)

	case "ListDominantLanguageDetectionJobsPagesWithContext":
		return m.Fake(d.fakeListDominantLanguageDetectionJobsPagesWithContext)

	case "ListDominantLanguageDetectionJobsWithContext":
		return m.Fake(d.fakeListDominantLanguageDetectionJobsWithContext)

	case "ListEndpointsWithContext":
		return m.Fake(d.fakeListEndpointsWithContext)

	case "ListEntitiesDetectionJobsPages":
		return m.Fake(d.fakeListEntitiesDetectionJobsPages)

	case "ListEntitiesDetectionJobsPagesWithContext":
		return m.Fake(d.fakeListEntitiesDetectionJobsPagesWithContext)

	case "ListEntitiesDetectionJobsWithContext":
		return m.Fake(d.fakeListEntitiesDetectionJobsWithContext)

	case "ListEntityRecognizersPages":
		return m.Fake(d.fakeListEntityRecognizersPages)

	case "ListEntityRecognizersPagesWithContext":
		return m.Fake(d.fakeListEntityRecognizersPagesWithContext)

	case "ListEntityRecognizersWithContext":
		return m.Fake(d.fakeListEntityRecognizersWithContext)

	case "ListKeyPhrasesDetectionJobsPages":
		return m.Fake(d.fakeListKeyPhrasesDetectionJobsPages)

	case "ListKeyPhrasesDetectionJobsPagesWithContext":
		return m.Fake(d.fakeListKeyPhrasesDetectionJobsPagesWithContext)

	case "ListKeyPhrasesDetectionJobsWithContext":
		return m.Fake(d.fakeListKeyPhrasesDetectionJobsWithContext)

	case "ListSentimentDetectionJobsPages":
		return m.Fake(d.fakeListSentimentDetectionJobsPages)

	case "ListSentimentDetectionJobsPagesWithContext":
		return m.Fake(d.fakeListSentimentDetectionJobsPagesWithContext)

	case "ListSentimentDetectionJobsWithContext":
		return m.Fake(d.fakeListSentimentDetectionJobsWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "ListTopicsDetectionJobsPages":
		return m.Fake(d.fakeListTopicsDetectionJobsPages)

	case "ListTopicsDetectionJobsPagesWithContext":
		return m.Fake(d.fakeListTopicsDetectionJobsPagesWithContext)

	case "ListTopicsDetectionJobsWithContext":
		return m.Fake(d.fakeListTopicsDetectionJobsWithContext)

	case "StartDocumentClassificationJobWithContext":
		return m.Fake(d.fakeStartDocumentClassificationJobWithContext)

	case "StartDominantLanguageDetectionJobWithContext":
		return m.Fake(d.fakeStartDominantLanguageDetectionJobWithContext)

	case "StartEntitiesDetectionJobWithContext":
		return m.Fake(d.fakeStartEntitiesDetectionJobWithContext)

	case "StartKeyPhrasesDetectionJobWithContext":
		return m.Fake(d.fakeStartKeyPhrasesDetectionJobWithContext)

	case "StartSentimentDetectionJobWithContext":
		return m.Fake(d.fakeStartSentimentDetectionJobWithContext)

	case "StartTopicsDetectionJobWithContext":
		return m.Fake(d.fakeStartTopicsDetectionJobWithContext)

	case "StopDominantLanguageDetectionJobWithContext":
		return m.Fake(d.fakeStopDominantLanguageDetectionJobWithContext)

	case "StopEntitiesDetectionJobWithContext":
		return m.Fake(d.fakeStopEntitiesDetectionJobWithContext)

	case "StopKeyPhrasesDetectionJobWithContext":
		return m.Fake(d.fakeStopKeyPhrasesDetectionJobWithContext)

	case "StopSentimentDetectionJobWithContext":
		return m.Fake(d.fakeStopSentimentDetectionJobWithContext)

	case "StopTrainingDocumentClassifierWithContext":
		return m.Fake(d.fakeStopTrainingDocumentClassifierWithContext)

	case "StopTrainingEntityRecognizerWithContext":
		return m.Fake(d.fakeStopTrainingEntityRecognizerWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateEndpointWithContext":
		return m.Fake(d.fakeUpdateEndpointWithContext)

	default:
		return nil
	}
}

func (d *ComprehendDouble) BatchDetectDominantLanguage(i0 *comprehend.BatchDetectDominantLanguageInput) (r0 *comprehend.BatchDetectDominantLanguageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDetectDominantLanguage", i0)
	r0, _ = returns[0].(*comprehend.BatchDetectDominantLanguageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) BatchDetectDominantLanguageRequest(i0 *comprehend.BatchDetectDominantLanguageInput) (r0 *request.Request, r1 *comprehend.BatchDetectDominantLanguageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDetectDominantLanguageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.BatchDetectDominantLanguageOutput)
	return
}

func (d *ComprehendDouble) BatchDetectDominantLanguageWithContext(i0 context.Context, i1 *comprehend.BatchDetectDominantLanguageInput, i2 ...request.Option) (r0 *comprehend.BatchDetectDominantLanguageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDetectDominantLanguageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.BatchDetectDominantLanguageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeBatchDetectDominantLanguageWithContext(ctx context.Context, in *comprehend.BatchDetectDominantLanguageInput, _ ...request.Option) (*comprehend.BatchDetectDominantLanguageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchDetectDominantLanguage cancelled", ctx.Err())
	default:
		return d.BatchDetectDominantLanguage(in)
	}
}

func (d *ComprehendDouble) BatchDetectEntities(i0 *comprehend.BatchDetectEntitiesInput) (r0 *comprehend.BatchDetectEntitiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDetectEntities", i0)
	r0, _ = returns[0].(*comprehend.BatchDetectEntitiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) BatchDetectEntitiesRequest(i0 *comprehend.BatchDetectEntitiesInput) (r0 *request.Request, r1 *comprehend.BatchDetectEntitiesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDetectEntitiesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.BatchDetectEntitiesOutput)
	return
}

func (d *ComprehendDouble) BatchDetectEntitiesWithContext(i0 context.Context, i1 *comprehend.BatchDetectEntitiesInput, i2 ...request.Option) (r0 *comprehend.BatchDetectEntitiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDetectEntitiesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.BatchDetectEntitiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeBatchDetectEntitiesWithContext(ctx context.Context, in *comprehend.BatchDetectEntitiesInput, _ ...request.Option) (*comprehend.BatchDetectEntitiesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchDetectEntities cancelled", ctx.Err())
	default:
		return d.BatchDetectEntities(in)
	}
}

func (d *ComprehendDouble) BatchDetectKeyPhrases(i0 *comprehend.BatchDetectKeyPhrasesInput) (r0 *comprehend.BatchDetectKeyPhrasesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDetectKeyPhrases", i0)
	r0, _ = returns[0].(*comprehend.BatchDetectKeyPhrasesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) BatchDetectKeyPhrasesRequest(i0 *comprehend.BatchDetectKeyPhrasesInput) (r0 *request.Request, r1 *comprehend.BatchDetectKeyPhrasesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDetectKeyPhrasesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.BatchDetectKeyPhrasesOutput)
	return
}

func (d *ComprehendDouble) BatchDetectKeyPhrasesWithContext(i0 context.Context, i1 *comprehend.BatchDetectKeyPhrasesInput, i2 ...request.Option) (r0 *comprehend.BatchDetectKeyPhrasesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDetectKeyPhrasesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.BatchDetectKeyPhrasesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeBatchDetectKeyPhrasesWithContext(ctx context.Context, in *comprehend.BatchDetectKeyPhrasesInput, _ ...request.Option) (*comprehend.BatchDetectKeyPhrasesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchDetectKeyPhrases cancelled", ctx.Err())
	default:
		return d.BatchDetectKeyPhrases(in)
	}
}

func (d *ComprehendDouble) BatchDetectSentiment(i0 *comprehend.BatchDetectSentimentInput) (r0 *comprehend.BatchDetectSentimentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDetectSentiment", i0)
	r0, _ = returns[0].(*comprehend.BatchDetectSentimentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) BatchDetectSentimentRequest(i0 *comprehend.BatchDetectSentimentInput) (r0 *request.Request, r1 *comprehend.BatchDetectSentimentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDetectSentimentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.BatchDetectSentimentOutput)
	return
}

func (d *ComprehendDouble) BatchDetectSentimentWithContext(i0 context.Context, i1 *comprehend.BatchDetectSentimentInput, i2 ...request.Option) (r0 *comprehend.BatchDetectSentimentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDetectSentimentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.BatchDetectSentimentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeBatchDetectSentimentWithContext(ctx context.Context, in *comprehend.BatchDetectSentimentInput, _ ...request.Option) (*comprehend.BatchDetectSentimentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchDetectSentiment cancelled", ctx.Err())
	default:
		return d.BatchDetectSentiment(in)
	}
}

func (d *ComprehendDouble) BatchDetectSyntax(i0 *comprehend.BatchDetectSyntaxInput) (r0 *comprehend.BatchDetectSyntaxOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDetectSyntax", i0)
	r0, _ = returns[0].(*comprehend.BatchDetectSyntaxOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) BatchDetectSyntaxRequest(i0 *comprehend.BatchDetectSyntaxInput) (r0 *request.Request, r1 *comprehend.BatchDetectSyntaxOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDetectSyntaxRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.BatchDetectSyntaxOutput)
	return
}

func (d *ComprehendDouble) BatchDetectSyntaxWithContext(i0 context.Context, i1 *comprehend.BatchDetectSyntaxInput, i2 ...request.Option) (r0 *comprehend.BatchDetectSyntaxOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDetectSyntaxWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.BatchDetectSyntaxOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeBatchDetectSyntaxWithContext(ctx context.Context, in *comprehend.BatchDetectSyntaxInput, _ ...request.Option) (*comprehend.BatchDetectSyntaxOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchDetectSyntax cancelled", ctx.Err())
	default:
		return d.BatchDetectSyntax(in)
	}
}

func (d *ComprehendDouble) ClassifyDocument(i0 *comprehend.ClassifyDocumentInput) (r0 *comprehend.ClassifyDocumentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ClassifyDocument", i0)
	r0, _ = returns[0].(*comprehend.ClassifyDocumentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) ClassifyDocumentRequest(i0 *comprehend.ClassifyDocumentInput) (r0 *request.Request, r1 *comprehend.ClassifyDocumentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ClassifyDocumentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.ClassifyDocumentOutput)
	return
}

func (d *ComprehendDouble) ClassifyDocumentWithContext(i0 context.Context, i1 *comprehend.ClassifyDocumentInput, i2 ...request.Option) (r0 *comprehend.ClassifyDocumentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ClassifyDocumentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.ClassifyDocumentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeClassifyDocumentWithContext(ctx context.Context, in *comprehend.ClassifyDocumentInput, _ ...request.Option) (*comprehend.ClassifyDocumentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ClassifyDocument cancelled", ctx.Err())
	default:
		return d.ClassifyDocument(in)
	}
}

func (d *ComprehendDouble) CreateDocumentClassifier(i0 *comprehend.CreateDocumentClassifierInput) (r0 *comprehend.CreateDocumentClassifierOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDocumentClassifier", i0)
	r0, _ = returns[0].(*comprehend.CreateDocumentClassifierOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) CreateDocumentClassifierRequest(i0 *comprehend.CreateDocumentClassifierInput) (r0 *request.Request, r1 *comprehend.CreateDocumentClassifierOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDocumentClassifierRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.CreateDocumentClassifierOutput)
	return
}

func (d *ComprehendDouble) CreateDocumentClassifierWithContext(i0 context.Context, i1 *comprehend.CreateDocumentClassifierInput, i2 ...request.Option) (r0 *comprehend.CreateDocumentClassifierOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDocumentClassifierWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.CreateDocumentClassifierOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeCreateDocumentClassifierWithContext(ctx context.Context, in *comprehend.CreateDocumentClassifierInput, _ ...request.Option) (*comprehend.CreateDocumentClassifierOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDocumentClassifier cancelled", ctx.Err())
	default:
		return d.CreateDocumentClassifier(in)
	}
}

func (d *ComprehendDouble) CreateEndpoint(i0 *comprehend.CreateEndpointInput) (r0 *comprehend.CreateEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEndpoint", i0)
	r0, _ = returns[0].(*comprehend.CreateEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) CreateEndpointRequest(i0 *comprehend.CreateEndpointInput) (r0 *request.Request, r1 *comprehend.CreateEndpointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEndpointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.CreateEndpointOutput)
	return
}

func (d *ComprehendDouble) CreateEndpointWithContext(i0 context.Context, i1 *comprehend.CreateEndpointInput, i2 ...request.Option) (r0 *comprehend.CreateEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEndpointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.CreateEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeCreateEndpointWithContext(ctx context.Context, in *comprehend.CreateEndpointInput, _ ...request.Option) (*comprehend.CreateEndpointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateEndpoint cancelled", ctx.Err())
	default:
		return d.CreateEndpoint(in)
	}
}

func (d *ComprehendDouble) CreateEntityRecognizer(i0 *comprehend.CreateEntityRecognizerInput) (r0 *comprehend.CreateEntityRecognizerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEntityRecognizer", i0)
	r0, _ = returns[0].(*comprehend.CreateEntityRecognizerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) CreateEntityRecognizerRequest(i0 *comprehend.CreateEntityRecognizerInput) (r0 *request.Request, r1 *comprehend.CreateEntityRecognizerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEntityRecognizerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.CreateEntityRecognizerOutput)
	return
}

func (d *ComprehendDouble) CreateEntityRecognizerWithContext(i0 context.Context, i1 *comprehend.CreateEntityRecognizerInput, i2 ...request.Option) (r0 *comprehend.CreateEntityRecognizerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEntityRecognizerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.CreateEntityRecognizerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeCreateEntityRecognizerWithContext(ctx context.Context, in *comprehend.CreateEntityRecognizerInput, _ ...request.Option) (*comprehend.CreateEntityRecognizerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateEntityRecognizer cancelled", ctx.Err())
	default:
		return d.CreateEntityRecognizer(in)
	}
}

func (d *ComprehendDouble) DeleteDocumentClassifier(i0 *comprehend.DeleteDocumentClassifierInput) (r0 *comprehend.DeleteDocumentClassifierOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDocumentClassifier", i0)
	r0, _ = returns[0].(*comprehend.DeleteDocumentClassifierOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) DeleteDocumentClassifierRequest(i0 *comprehend.DeleteDocumentClassifierInput) (r0 *request.Request, r1 *comprehend.DeleteDocumentClassifierOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDocumentClassifierRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.DeleteDocumentClassifierOutput)
	return
}

func (d *ComprehendDouble) DeleteDocumentClassifierWithContext(i0 context.Context, i1 *comprehend.DeleteDocumentClassifierInput, i2 ...request.Option) (r0 *comprehend.DeleteDocumentClassifierOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDocumentClassifierWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.DeleteDocumentClassifierOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeDeleteDocumentClassifierWithContext(ctx context.Context, in *comprehend.DeleteDocumentClassifierInput, _ ...request.Option) (*comprehend.DeleteDocumentClassifierOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDocumentClassifier cancelled", ctx.Err())
	default:
		return d.DeleteDocumentClassifier(in)
	}
}

func (d *ComprehendDouble) DeleteEndpoint(i0 *comprehend.DeleteEndpointInput) (r0 *comprehend.DeleteEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEndpoint", i0)
	r0, _ = returns[0].(*comprehend.DeleteEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) DeleteEndpointRequest(i0 *comprehend.DeleteEndpointInput) (r0 *request.Request, r1 *comprehend.DeleteEndpointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEndpointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.DeleteEndpointOutput)
	return
}

func (d *ComprehendDouble) DeleteEndpointWithContext(i0 context.Context, i1 *comprehend.DeleteEndpointInput, i2 ...request.Option) (r0 *comprehend.DeleteEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEndpointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.DeleteEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeDeleteEndpointWithContext(ctx context.Context, in *comprehend.DeleteEndpointInput, _ ...request.Option) (*comprehend.DeleteEndpointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteEndpoint cancelled", ctx.Err())
	default:
		return d.DeleteEndpoint(in)
	}
}

func (d *ComprehendDouble) DeleteEntityRecognizer(i0 *comprehend.DeleteEntityRecognizerInput) (r0 *comprehend.DeleteEntityRecognizerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEntityRecognizer", i0)
	r0, _ = returns[0].(*comprehend.DeleteEntityRecognizerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) DeleteEntityRecognizerRequest(i0 *comprehend.DeleteEntityRecognizerInput) (r0 *request.Request, r1 *comprehend.DeleteEntityRecognizerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEntityRecognizerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.DeleteEntityRecognizerOutput)
	return
}

func (d *ComprehendDouble) DeleteEntityRecognizerWithContext(i0 context.Context, i1 *comprehend.DeleteEntityRecognizerInput, i2 ...request.Option) (r0 *comprehend.DeleteEntityRecognizerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEntityRecognizerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.DeleteEntityRecognizerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeDeleteEntityRecognizerWithContext(ctx context.Context, in *comprehend.DeleteEntityRecognizerInput, _ ...request.Option) (*comprehend.DeleteEntityRecognizerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteEntityRecognizer cancelled", ctx.Err())
	default:
		return d.DeleteEntityRecognizer(in)
	}
}

func (d *ComprehendDouble) DescribeDocumentClassificationJob(i0 *comprehend.DescribeDocumentClassificationJobInput) (r0 *comprehend.DescribeDocumentClassificationJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDocumentClassificationJob", i0)
	r0, _ = returns[0].(*comprehend.DescribeDocumentClassificationJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) DescribeDocumentClassificationJobRequest(i0 *comprehend.DescribeDocumentClassificationJobInput) (r0 *request.Request, r1 *comprehend.DescribeDocumentClassificationJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDocumentClassificationJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.DescribeDocumentClassificationJobOutput)
	return
}

func (d *ComprehendDouble) DescribeDocumentClassificationJobWithContext(i0 context.Context, i1 *comprehend.DescribeDocumentClassificationJobInput, i2 ...request.Option) (r0 *comprehend.DescribeDocumentClassificationJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDocumentClassificationJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.DescribeDocumentClassificationJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeDescribeDocumentClassificationJobWithContext(ctx context.Context, in *comprehend.DescribeDocumentClassificationJobInput, _ ...request.Option) (*comprehend.DescribeDocumentClassificationJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDocumentClassificationJob cancelled", ctx.Err())
	default:
		return d.DescribeDocumentClassificationJob(in)
	}
}

func (d *ComprehendDouble) DescribeDocumentClassifier(i0 *comprehend.DescribeDocumentClassifierInput) (r0 *comprehend.DescribeDocumentClassifierOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDocumentClassifier", i0)
	r0, _ = returns[0].(*comprehend.DescribeDocumentClassifierOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) DescribeDocumentClassifierRequest(i0 *comprehend.DescribeDocumentClassifierInput) (r0 *request.Request, r1 *comprehend.DescribeDocumentClassifierOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDocumentClassifierRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.DescribeDocumentClassifierOutput)
	return
}

func (d *ComprehendDouble) DescribeDocumentClassifierWithContext(i0 context.Context, i1 *comprehend.DescribeDocumentClassifierInput, i2 ...request.Option) (r0 *comprehend.DescribeDocumentClassifierOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDocumentClassifierWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.DescribeDocumentClassifierOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeDescribeDocumentClassifierWithContext(ctx context.Context, in *comprehend.DescribeDocumentClassifierInput, _ ...request.Option) (*comprehend.DescribeDocumentClassifierOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDocumentClassifier cancelled", ctx.Err())
	default:
		return d.DescribeDocumentClassifier(in)
	}
}

func (d *ComprehendDouble) DescribeDominantLanguageDetectionJob(i0 *comprehend.DescribeDominantLanguageDetectionJobInput) (r0 *comprehend.DescribeDominantLanguageDetectionJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDominantLanguageDetectionJob", i0)
	r0, _ = returns[0].(*comprehend.DescribeDominantLanguageDetectionJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) DescribeDominantLanguageDetectionJobRequest(i0 *comprehend.DescribeDominantLanguageDetectionJobInput) (r0 *request.Request, r1 *comprehend.DescribeDominantLanguageDetectionJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDominantLanguageDetectionJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.DescribeDominantLanguageDetectionJobOutput)
	return
}

func (d *ComprehendDouble) DescribeDominantLanguageDetectionJobWithContext(i0 context.Context, i1 *comprehend.DescribeDominantLanguageDetectionJobInput, i2 ...request.Option) (r0 *comprehend.DescribeDominantLanguageDetectionJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDominantLanguageDetectionJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.DescribeDominantLanguageDetectionJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeDescribeDominantLanguageDetectionJobWithContext(ctx context.Context, in *comprehend.DescribeDominantLanguageDetectionJobInput, _ ...request.Option) (*comprehend.DescribeDominantLanguageDetectionJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDominantLanguageDetectionJob cancelled", ctx.Err())
	default:
		return d.DescribeDominantLanguageDetectionJob(in)
	}
}

func (d *ComprehendDouble) DescribeEndpoint(i0 *comprehend.DescribeEndpointInput) (r0 *comprehend.DescribeEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEndpoint", i0)
	r0, _ = returns[0].(*comprehend.DescribeEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) DescribeEndpointRequest(i0 *comprehend.DescribeEndpointInput) (r0 *request.Request, r1 *comprehend.DescribeEndpointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEndpointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.DescribeEndpointOutput)
	return
}

func (d *ComprehendDouble) DescribeEndpointWithContext(i0 context.Context, i1 *comprehend.DescribeEndpointInput, i2 ...request.Option) (r0 *comprehend.DescribeEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEndpointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.DescribeEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeDescribeEndpointWithContext(ctx context.Context, in *comprehend.DescribeEndpointInput, _ ...request.Option) (*comprehend.DescribeEndpointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEndpoint cancelled", ctx.Err())
	default:
		return d.DescribeEndpoint(in)
	}
}

func (d *ComprehendDouble) DescribeEntitiesDetectionJob(i0 *comprehend.DescribeEntitiesDetectionJobInput) (r0 *comprehend.DescribeEntitiesDetectionJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEntitiesDetectionJob", i0)
	r0, _ = returns[0].(*comprehend.DescribeEntitiesDetectionJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) DescribeEntitiesDetectionJobRequest(i0 *comprehend.DescribeEntitiesDetectionJobInput) (r0 *request.Request, r1 *comprehend.DescribeEntitiesDetectionJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEntitiesDetectionJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.DescribeEntitiesDetectionJobOutput)
	return
}

func (d *ComprehendDouble) DescribeEntitiesDetectionJobWithContext(i0 context.Context, i1 *comprehend.DescribeEntitiesDetectionJobInput, i2 ...request.Option) (r0 *comprehend.DescribeEntitiesDetectionJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEntitiesDetectionJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.DescribeEntitiesDetectionJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeDescribeEntitiesDetectionJobWithContext(ctx context.Context, in *comprehend.DescribeEntitiesDetectionJobInput, _ ...request.Option) (*comprehend.DescribeEntitiesDetectionJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEntitiesDetectionJob cancelled", ctx.Err())
	default:
		return d.DescribeEntitiesDetectionJob(in)
	}
}

func (d *ComprehendDouble) DescribeEntityRecognizer(i0 *comprehend.DescribeEntityRecognizerInput) (r0 *comprehend.DescribeEntityRecognizerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEntityRecognizer", i0)
	r0, _ = returns[0].(*comprehend.DescribeEntityRecognizerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) DescribeEntityRecognizerRequest(i0 *comprehend.DescribeEntityRecognizerInput) (r0 *request.Request, r1 *comprehend.DescribeEntityRecognizerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEntityRecognizerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.DescribeEntityRecognizerOutput)
	return
}

func (d *ComprehendDouble) DescribeEntityRecognizerWithContext(i0 context.Context, i1 *comprehend.DescribeEntityRecognizerInput, i2 ...request.Option) (r0 *comprehend.DescribeEntityRecognizerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEntityRecognizerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.DescribeEntityRecognizerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeDescribeEntityRecognizerWithContext(ctx context.Context, in *comprehend.DescribeEntityRecognizerInput, _ ...request.Option) (*comprehend.DescribeEntityRecognizerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEntityRecognizer cancelled", ctx.Err())
	default:
		return d.DescribeEntityRecognizer(in)
	}
}

func (d *ComprehendDouble) DescribeKeyPhrasesDetectionJob(i0 *comprehend.DescribeKeyPhrasesDetectionJobInput) (r0 *comprehend.DescribeKeyPhrasesDetectionJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeKeyPhrasesDetectionJob", i0)
	r0, _ = returns[0].(*comprehend.DescribeKeyPhrasesDetectionJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) DescribeKeyPhrasesDetectionJobRequest(i0 *comprehend.DescribeKeyPhrasesDetectionJobInput) (r0 *request.Request, r1 *comprehend.DescribeKeyPhrasesDetectionJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeKeyPhrasesDetectionJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.DescribeKeyPhrasesDetectionJobOutput)
	return
}

func (d *ComprehendDouble) DescribeKeyPhrasesDetectionJobWithContext(i0 context.Context, i1 *comprehend.DescribeKeyPhrasesDetectionJobInput, i2 ...request.Option) (r0 *comprehend.DescribeKeyPhrasesDetectionJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeKeyPhrasesDetectionJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.DescribeKeyPhrasesDetectionJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeDescribeKeyPhrasesDetectionJobWithContext(ctx context.Context, in *comprehend.DescribeKeyPhrasesDetectionJobInput, _ ...request.Option) (*comprehend.DescribeKeyPhrasesDetectionJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeKeyPhrasesDetectionJob cancelled", ctx.Err())
	default:
		return d.DescribeKeyPhrasesDetectionJob(in)
	}
}

func (d *ComprehendDouble) DescribeSentimentDetectionJob(i0 *comprehend.DescribeSentimentDetectionJobInput) (r0 *comprehend.DescribeSentimentDetectionJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSentimentDetectionJob", i0)
	r0, _ = returns[0].(*comprehend.DescribeSentimentDetectionJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) DescribeSentimentDetectionJobRequest(i0 *comprehend.DescribeSentimentDetectionJobInput) (r0 *request.Request, r1 *comprehend.DescribeSentimentDetectionJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSentimentDetectionJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.DescribeSentimentDetectionJobOutput)
	return
}

func (d *ComprehendDouble) DescribeSentimentDetectionJobWithContext(i0 context.Context, i1 *comprehend.DescribeSentimentDetectionJobInput, i2 ...request.Option) (r0 *comprehend.DescribeSentimentDetectionJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSentimentDetectionJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.DescribeSentimentDetectionJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeDescribeSentimentDetectionJobWithContext(ctx context.Context, in *comprehend.DescribeSentimentDetectionJobInput, _ ...request.Option) (*comprehend.DescribeSentimentDetectionJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSentimentDetectionJob cancelled", ctx.Err())
	default:
		return d.DescribeSentimentDetectionJob(in)
	}
}

func (d *ComprehendDouble) DescribeTopicsDetectionJob(i0 *comprehend.DescribeTopicsDetectionJobInput) (r0 *comprehend.DescribeTopicsDetectionJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTopicsDetectionJob", i0)
	r0, _ = returns[0].(*comprehend.DescribeTopicsDetectionJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) DescribeTopicsDetectionJobRequest(i0 *comprehend.DescribeTopicsDetectionJobInput) (r0 *request.Request, r1 *comprehend.DescribeTopicsDetectionJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTopicsDetectionJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.DescribeTopicsDetectionJobOutput)
	return
}

func (d *ComprehendDouble) DescribeTopicsDetectionJobWithContext(i0 context.Context, i1 *comprehend.DescribeTopicsDetectionJobInput, i2 ...request.Option) (r0 *comprehend.DescribeTopicsDetectionJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTopicsDetectionJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.DescribeTopicsDetectionJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeDescribeTopicsDetectionJobWithContext(ctx context.Context, in *comprehend.DescribeTopicsDetectionJobInput, _ ...request.Option) (*comprehend.DescribeTopicsDetectionJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTopicsDetectionJob cancelled", ctx.Err())
	default:
		return d.DescribeTopicsDetectionJob(in)
	}
}

func (d *ComprehendDouble) DetectDominantLanguage(i0 *comprehend.DetectDominantLanguageInput) (r0 *comprehend.DetectDominantLanguageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetectDominantLanguage", i0)
	r0, _ = returns[0].(*comprehend.DetectDominantLanguageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) DetectDominantLanguageRequest(i0 *comprehend.DetectDominantLanguageInput) (r0 *request.Request, r1 *comprehend.DetectDominantLanguageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetectDominantLanguageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.DetectDominantLanguageOutput)
	return
}

func (d *ComprehendDouble) DetectDominantLanguageWithContext(i0 context.Context, i1 *comprehend.DetectDominantLanguageInput, i2 ...request.Option) (r0 *comprehend.DetectDominantLanguageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetectDominantLanguageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.DetectDominantLanguageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeDetectDominantLanguageWithContext(ctx context.Context, in *comprehend.DetectDominantLanguageInput, _ ...request.Option) (*comprehend.DetectDominantLanguageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DetectDominantLanguage cancelled", ctx.Err())
	default:
		return d.DetectDominantLanguage(in)
	}
}

func (d *ComprehendDouble) DetectEntities(i0 *comprehend.DetectEntitiesInput) (r0 *comprehend.DetectEntitiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetectEntities", i0)
	r0, _ = returns[0].(*comprehend.DetectEntitiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) DetectEntitiesRequest(i0 *comprehend.DetectEntitiesInput) (r0 *request.Request, r1 *comprehend.DetectEntitiesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetectEntitiesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.DetectEntitiesOutput)
	return
}

func (d *ComprehendDouble) DetectEntitiesWithContext(i0 context.Context, i1 *comprehend.DetectEntitiesInput, i2 ...request.Option) (r0 *comprehend.DetectEntitiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetectEntitiesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.DetectEntitiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeDetectEntitiesWithContext(ctx context.Context, in *comprehend.DetectEntitiesInput, _ ...request.Option) (*comprehend.DetectEntitiesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DetectEntities cancelled", ctx.Err())
	default:
		return d.DetectEntities(in)
	}
}

func (d *ComprehendDouble) DetectKeyPhrases(i0 *comprehend.DetectKeyPhrasesInput) (r0 *comprehend.DetectKeyPhrasesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetectKeyPhrases", i0)
	r0, _ = returns[0].(*comprehend.DetectKeyPhrasesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) DetectKeyPhrasesRequest(i0 *comprehend.DetectKeyPhrasesInput) (r0 *request.Request, r1 *comprehend.DetectKeyPhrasesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetectKeyPhrasesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.DetectKeyPhrasesOutput)
	return
}

func (d *ComprehendDouble) DetectKeyPhrasesWithContext(i0 context.Context, i1 *comprehend.DetectKeyPhrasesInput, i2 ...request.Option) (r0 *comprehend.DetectKeyPhrasesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetectKeyPhrasesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.DetectKeyPhrasesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeDetectKeyPhrasesWithContext(ctx context.Context, in *comprehend.DetectKeyPhrasesInput, _ ...request.Option) (*comprehend.DetectKeyPhrasesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DetectKeyPhrases cancelled", ctx.Err())
	default:
		return d.DetectKeyPhrases(in)
	}
}

func (d *ComprehendDouble) DetectSentiment(i0 *comprehend.DetectSentimentInput) (r0 *comprehend.DetectSentimentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetectSentiment", i0)
	r0, _ = returns[0].(*comprehend.DetectSentimentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) DetectSentimentRequest(i0 *comprehend.DetectSentimentInput) (r0 *request.Request, r1 *comprehend.DetectSentimentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetectSentimentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.DetectSentimentOutput)
	return
}

func (d *ComprehendDouble) DetectSentimentWithContext(i0 context.Context, i1 *comprehend.DetectSentimentInput, i2 ...request.Option) (r0 *comprehend.DetectSentimentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetectSentimentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.DetectSentimentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeDetectSentimentWithContext(ctx context.Context, in *comprehend.DetectSentimentInput, _ ...request.Option) (*comprehend.DetectSentimentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DetectSentiment cancelled", ctx.Err())
	default:
		return d.DetectSentiment(in)
	}
}

func (d *ComprehendDouble) DetectSyntax(i0 *comprehend.DetectSyntaxInput) (r0 *comprehend.DetectSyntaxOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetectSyntax", i0)
	r0, _ = returns[0].(*comprehend.DetectSyntaxOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) DetectSyntaxRequest(i0 *comprehend.DetectSyntaxInput) (r0 *request.Request, r1 *comprehend.DetectSyntaxOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetectSyntaxRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.DetectSyntaxOutput)
	return
}

func (d *ComprehendDouble) DetectSyntaxWithContext(i0 context.Context, i1 *comprehend.DetectSyntaxInput, i2 ...request.Option) (r0 *comprehend.DetectSyntaxOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetectSyntaxWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.DetectSyntaxOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeDetectSyntaxWithContext(ctx context.Context, in *comprehend.DetectSyntaxInput, _ ...request.Option) (*comprehend.DetectSyntaxOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DetectSyntax cancelled", ctx.Err())
	default:
		return d.DetectSyntax(in)
	}
}

func (d *ComprehendDouble) ListDocumentClassificationJobs(i0 *comprehend.ListDocumentClassificationJobsInput) (r0 *comprehend.ListDocumentClassificationJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDocumentClassificationJobs", i0)
	r0, _ = returns[0].(*comprehend.ListDocumentClassificationJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) ListDocumentClassificationJobsPages(i0 *comprehend.ListDocumentClassificationJobsInput, i1 func(*comprehend.ListDocumentClassificationJobsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDocumentClassificationJobsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ComprehendDouble) fakeListDocumentClassificationJobsPages(in *comprehend.ListDocumentClassificationJobsInput, pager func(*comprehend.ListDocumentClassificationJobsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListDocumentClassificationJobs", paginators, in, pager)
}

func (d *ComprehendDouble) ListDocumentClassificationJobsPagesWithContext(i0 context.Context, i1 *comprehend.ListDocumentClassificationJobsInput, i2 func(*comprehend.ListDocumentClassificationJobsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDocumentClassificationJobsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ComprehendDouble) fakeListDocumentClassificationJobsPagesWithContext(ctx context.Context, in *comprehend.ListDocumentClassificationJobsInput, pager func(*comprehend.ListDocumentClassificationJobsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListDocumentClassificationJobs", paginators, ctx, in, pager, options...)
}

func (d *ComprehendDouble) ListDocumentClassificationJobsRequest(i0 *comprehend.ListDocumentClassificationJobsInput) (r0 *request.Request, r1 *comprehend.ListDocumentClassificationJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDocumentClassificationJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.ListDocumentClassificationJobsOutput)
	return
}

func (d *ComprehendDouble) ListDocumentClassificationJobsWithContext(i0 context.Context, i1 *comprehend.ListDocumentClassificationJobsInput, i2 ...request.Option) (r0 *comprehend.ListDocumentClassificationJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDocumentClassificationJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.ListDocumentClassificationJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeListDocumentClassificationJobsWithContext(ctx context.Context, in *comprehend.ListDocumentClassificationJobsInput, _ ...request.Option) (*comprehend.ListDocumentClassificationJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDocumentClassificationJobs cancelled", ctx.Err())
	default:
		return d.ListDocumentClassificationJobs(in)
	}
}

func (d *ComprehendDouble) ListDocumentClassifiers(i0 *comprehend.ListDocumentClassifiersInput) (r0 *comprehend.ListDocumentClassifiersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDocumentClassifiers", i0)
	r0, _ = returns[0].(*comprehend.ListDocumentClassifiersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) ListDocumentClassifiersPages(i0 *comprehend.ListDocumentClassifiersInput, i1 func(*comprehend.ListDocumentClassifiersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDocumentClassifiersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ComprehendDouble) fakeListDocumentClassifiersPages(in *comprehend.ListDocumentClassifiersInput, pager func(*comprehend.ListDocumentClassifiersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListDocumentClassifiers", paginators, in, pager)
}

func (d *ComprehendDouble) ListDocumentClassifiersPagesWithContext(i0 context.Context, i1 *comprehend.ListDocumentClassifiersInput, i2 func(*comprehend.ListDocumentClassifiersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDocumentClassifiersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ComprehendDouble) fakeListDocumentClassifiersPagesWithContext(ctx context.Context, in *comprehend.ListDocumentClassifiersInput, pager func(*comprehend.ListDocumentClassifiersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListDocumentClassifiers", paginators, ctx, in, pager, options...)
}

func (d *ComprehendDouble) ListDocumentClassifiersRequest(i0 *comprehend.ListDocumentClassifiersInput) (r0 *request.Request, r1 *comprehend.ListDocumentClassifiersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDocumentClassifiersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.ListDocumentClassifiersOutput)
	return
}

func (d *ComprehendDouble) ListDocumentClassifiersWithContext(i0 context.Context, i1 *comprehend.ListDocumentClassifiersInput, i2 ...request.Option) (r0 *comprehend.ListDocumentClassifiersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDocumentClassifiersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.ListDocumentClassifiersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeListDocumentClassifiersWithContext(ctx context.Context, in *comprehend.ListDocumentClassifiersInput, _ ...request.Option) (*comprehend.ListDocumentClassifiersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDocumentClassifiers cancelled", ctx.Err())
	default:
		return d.ListDocumentClassifiers(in)
	}
}

func (d *ComprehendDouble) ListDominantLanguageDetectionJobs(i0 *comprehend.ListDominantLanguageDetectionJobsInput) (r0 *comprehend.ListDominantLanguageDetectionJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDominantLanguageDetectionJobs", i0)
	r0, _ = returns[0].(*comprehend.ListDominantLanguageDetectionJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) ListDominantLanguageDetectionJobsPages(i0 *comprehend.ListDominantLanguageDetectionJobsInput, i1 func(*comprehend.ListDominantLanguageDetectionJobsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDominantLanguageDetectionJobsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ComprehendDouble) fakeListDominantLanguageDetectionJobsPages(in *comprehend.ListDominantLanguageDetectionJobsInput, pager func(*comprehend.ListDominantLanguageDetectionJobsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListDominantLanguageDetectionJobs", paginators, in, pager)
}

func (d *ComprehendDouble) ListDominantLanguageDetectionJobsPagesWithContext(i0 context.Context, i1 *comprehend.ListDominantLanguageDetectionJobsInput, i2 func(*comprehend.ListDominantLanguageDetectionJobsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDominantLanguageDetectionJobsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ComprehendDouble) fakeListDominantLanguageDetectionJobsPagesWithContext(ctx context.Context, in *comprehend.ListDominantLanguageDetectionJobsInput, pager func(*comprehend.ListDominantLanguageDetectionJobsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListDominantLanguageDetectionJobs", paginators, ctx, in, pager, options...)
}

func (d *ComprehendDouble) ListDominantLanguageDetectionJobsRequest(i0 *comprehend.ListDominantLanguageDetectionJobsInput) (r0 *request.Request, r1 *comprehend.ListDominantLanguageDetectionJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDominantLanguageDetectionJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.ListDominantLanguageDetectionJobsOutput)
	return
}

func (d *ComprehendDouble) ListDominantLanguageDetectionJobsWithContext(i0 context.Context, i1 *comprehend.ListDominantLanguageDetectionJobsInput, i2 ...request.Option) (r0 *comprehend.ListDominantLanguageDetectionJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDominantLanguageDetectionJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.ListDominantLanguageDetectionJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeListDominantLanguageDetectionJobsWithContext(ctx context.Context, in *comprehend.ListDominantLanguageDetectionJobsInput, _ ...request.Option) (*comprehend.ListDominantLanguageDetectionJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDominantLanguageDetectionJobs cancelled", ctx.Err())
	default:
		return d.ListDominantLanguageDetectionJobs(in)
	}
}

func (d *ComprehendDouble) ListEndpoints(i0 *comprehend.ListEndpointsInput) (r0 *comprehend.ListEndpointsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEndpoints", i0)
	r0, _ = returns[0].(*comprehend.ListEndpointsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) ListEndpointsRequest(i0 *comprehend.ListEndpointsInput) (r0 *request.Request, r1 *comprehend.ListEndpointsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEndpointsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.ListEndpointsOutput)
	return
}

func (d *ComprehendDouble) ListEndpointsWithContext(i0 context.Context, i1 *comprehend.ListEndpointsInput, i2 ...request.Option) (r0 *comprehend.ListEndpointsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEndpointsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.ListEndpointsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeListEndpointsWithContext(ctx context.Context, in *comprehend.ListEndpointsInput, _ ...request.Option) (*comprehend.ListEndpointsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListEndpoints cancelled", ctx.Err())
	default:
		return d.ListEndpoints(in)
	}
}

func (d *ComprehendDouble) ListEntitiesDetectionJobs(i0 *comprehend.ListEntitiesDetectionJobsInput) (r0 *comprehend.ListEntitiesDetectionJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEntitiesDetectionJobs", i0)
	r0, _ = returns[0].(*comprehend.ListEntitiesDetectionJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) ListEntitiesDetectionJobsPages(i0 *comprehend.ListEntitiesDetectionJobsInput, i1 func(*comprehend.ListEntitiesDetectionJobsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEntitiesDetectionJobsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ComprehendDouble) fakeListEntitiesDetectionJobsPages(in *comprehend.ListEntitiesDetectionJobsInput, pager func(*comprehend.ListEntitiesDetectionJobsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListEntitiesDetectionJobs", paginators, in, pager)
}

func (d *ComprehendDouble) ListEntitiesDetectionJobsPagesWithContext(i0 context.Context, i1 *comprehend.ListEntitiesDetectionJobsInput, i2 func(*comprehend.ListEntitiesDetectionJobsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEntitiesDetectionJobsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ComprehendDouble) fakeListEntitiesDetectionJobsPagesWithContext(ctx context.Context, in *comprehend.ListEntitiesDetectionJobsInput, pager func(*comprehend.ListEntitiesDetectionJobsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListEntitiesDetectionJobs", paginators, ctx, in, pager, options...)
}

func (d *ComprehendDouble) ListEntitiesDetectionJobsRequest(i0 *comprehend.ListEntitiesDetectionJobsInput) (r0 *request.Request, r1 *comprehend.ListEntitiesDetectionJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEntitiesDetectionJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.ListEntitiesDetectionJobsOutput)
	return
}

func (d *ComprehendDouble) ListEntitiesDetectionJobsWithContext(i0 context.Context, i1 *comprehend.ListEntitiesDetectionJobsInput, i2 ...request.Option) (r0 *comprehend.ListEntitiesDetectionJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEntitiesDetectionJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.ListEntitiesDetectionJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeListEntitiesDetectionJobsWithContext(ctx context.Context, in *comprehend.ListEntitiesDetectionJobsInput, _ ...request.Option) (*comprehend.ListEntitiesDetectionJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListEntitiesDetectionJobs cancelled", ctx.Err())
	default:
		return d.ListEntitiesDetectionJobs(in)
	}
}

func (d *ComprehendDouble) ListEntityRecognizers(i0 *comprehend.ListEntityRecognizersInput) (r0 *comprehend.ListEntityRecognizersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEntityRecognizers", i0)
	r0, _ = returns[0].(*comprehend.ListEntityRecognizersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) ListEntityRecognizersPages(i0 *comprehend.ListEntityRecognizersInput, i1 func(*comprehend.ListEntityRecognizersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEntityRecognizersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ComprehendDouble) fakeListEntityRecognizersPages(in *comprehend.ListEntityRecognizersInput, pager func(*comprehend.ListEntityRecognizersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListEntityRecognizers", paginators, in, pager)
}

func (d *ComprehendDouble) ListEntityRecognizersPagesWithContext(i0 context.Context, i1 *comprehend.ListEntityRecognizersInput, i2 func(*comprehend.ListEntityRecognizersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEntityRecognizersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ComprehendDouble) fakeListEntityRecognizersPagesWithContext(ctx context.Context, in *comprehend.ListEntityRecognizersInput, pager func(*comprehend.ListEntityRecognizersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListEntityRecognizers", paginators, ctx, in, pager, options...)
}

func (d *ComprehendDouble) ListEntityRecognizersRequest(i0 *comprehend.ListEntityRecognizersInput) (r0 *request.Request, r1 *comprehend.ListEntityRecognizersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEntityRecognizersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.ListEntityRecognizersOutput)
	return
}

func (d *ComprehendDouble) ListEntityRecognizersWithContext(i0 context.Context, i1 *comprehend.ListEntityRecognizersInput, i2 ...request.Option) (r0 *comprehend.ListEntityRecognizersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEntityRecognizersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.ListEntityRecognizersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeListEntityRecognizersWithContext(ctx context.Context, in *comprehend.ListEntityRecognizersInput, _ ...request.Option) (*comprehend.ListEntityRecognizersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListEntityRecognizers cancelled", ctx.Err())
	default:
		return d.ListEntityRecognizers(in)
	}
}

func (d *ComprehendDouble) ListKeyPhrasesDetectionJobs(i0 *comprehend.ListKeyPhrasesDetectionJobsInput) (r0 *comprehend.ListKeyPhrasesDetectionJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListKeyPhrasesDetectionJobs", i0)
	r0, _ = returns[0].(*comprehend.ListKeyPhrasesDetectionJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) ListKeyPhrasesDetectionJobsPages(i0 *comprehend.ListKeyPhrasesDetectionJobsInput, i1 func(*comprehend.ListKeyPhrasesDetectionJobsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListKeyPhrasesDetectionJobsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ComprehendDouble) fakeListKeyPhrasesDetectionJobsPages(in *comprehend.ListKeyPhrasesDetectionJobsInput, pager func(*comprehend.ListKeyPhrasesDetectionJobsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListKeyPhrasesDetectionJobs", paginators, in, pager)
}

func (d *ComprehendDouble) ListKeyPhrasesDetectionJobsPagesWithContext(i0 context.Context, i1 *comprehend.ListKeyPhrasesDetectionJobsInput, i2 func(*comprehend.ListKeyPhrasesDetectionJobsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListKeyPhrasesDetectionJobsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ComprehendDouble) fakeListKeyPhrasesDetectionJobsPagesWithContext(ctx context.Context, in *comprehend.ListKeyPhrasesDetectionJobsInput, pager func(*comprehend.ListKeyPhrasesDetectionJobsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListKeyPhrasesDetectionJobs", paginators, ctx, in, pager, options...)
}

func (d *ComprehendDouble) ListKeyPhrasesDetectionJobsRequest(i0 *comprehend.ListKeyPhrasesDetectionJobsInput) (r0 *request.Request, r1 *comprehend.ListKeyPhrasesDetectionJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListKeyPhrasesDetectionJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.ListKeyPhrasesDetectionJobsOutput)
	return
}

func (d *ComprehendDouble) ListKeyPhrasesDetectionJobsWithContext(i0 context.Context, i1 *comprehend.ListKeyPhrasesDetectionJobsInput, i2 ...request.Option) (r0 *comprehend.ListKeyPhrasesDetectionJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListKeyPhrasesDetectionJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.ListKeyPhrasesDetectionJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeListKeyPhrasesDetectionJobsWithContext(ctx context.Context, in *comprehend.ListKeyPhrasesDetectionJobsInput, _ ...request.Option) (*comprehend.ListKeyPhrasesDetectionJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListKeyPhrasesDetectionJobs cancelled", ctx.Err())
	default:
		return d.ListKeyPhrasesDetectionJobs(in)
	}
}

func (d *ComprehendDouble) ListSentimentDetectionJobs(i0 *comprehend.ListSentimentDetectionJobsInput) (r0 *comprehend.ListSentimentDetectionJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSentimentDetectionJobs", i0)
	r0, _ = returns[0].(*comprehend.ListSentimentDetectionJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) ListSentimentDetectionJobsPages(i0 *comprehend.ListSentimentDetectionJobsInput, i1 func(*comprehend.ListSentimentDetectionJobsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSentimentDetectionJobsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ComprehendDouble) fakeListSentimentDetectionJobsPages(in *comprehend.ListSentimentDetectionJobsInput, pager func(*comprehend.ListSentimentDetectionJobsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListSentimentDetectionJobs", paginators, in, pager)
}

func (d *ComprehendDouble) ListSentimentDetectionJobsPagesWithContext(i0 context.Context, i1 *comprehend.ListSentimentDetectionJobsInput, i2 func(*comprehend.ListSentimentDetectionJobsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSentimentDetectionJobsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ComprehendDouble) fakeListSentimentDetectionJobsPagesWithContext(ctx context.Context, in *comprehend.ListSentimentDetectionJobsInput, pager func(*comprehend.ListSentimentDetectionJobsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListSentimentDetectionJobs", paginators, ctx, in, pager, options...)
}

func (d *ComprehendDouble) ListSentimentDetectionJobsRequest(i0 *comprehend.ListSentimentDetectionJobsInput) (r0 *request.Request, r1 *comprehend.ListSentimentDetectionJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSentimentDetectionJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.ListSentimentDetectionJobsOutput)
	return
}

func (d *ComprehendDouble) ListSentimentDetectionJobsWithContext(i0 context.Context, i1 *comprehend.ListSentimentDetectionJobsInput, i2 ...request.Option) (r0 *comprehend.ListSentimentDetectionJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSentimentDetectionJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.ListSentimentDetectionJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeListSentimentDetectionJobsWithContext(ctx context.Context, in *comprehend.ListSentimentDetectionJobsInput, _ ...request.Option) (*comprehend.ListSentimentDetectionJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListSentimentDetectionJobs cancelled", ctx.Err())
	default:
		return d.ListSentimentDetectionJobs(in)
	}
}

func (d *ComprehendDouble) ListTagsForResource(i0 *comprehend.ListTagsForResourceInput) (r0 *comprehend.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*comprehend.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) ListTagsForResourceRequest(i0 *comprehend.ListTagsForResourceInput) (r0 *request.Request, r1 *comprehend.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.ListTagsForResourceOutput)
	return
}

func (d *ComprehendDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *comprehend.ListTagsForResourceInput, i2 ...request.Option) (r0 *comprehend.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *comprehend.ListTagsForResourceInput, _ ...request.Option) (*comprehend.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *ComprehendDouble) ListTopicsDetectionJobs(i0 *comprehend.ListTopicsDetectionJobsInput) (r0 *comprehend.ListTopicsDetectionJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTopicsDetectionJobs", i0)
	r0, _ = returns[0].(*comprehend.ListTopicsDetectionJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) ListTopicsDetectionJobsPages(i0 *comprehend.ListTopicsDetectionJobsInput, i1 func(*comprehend.ListTopicsDetectionJobsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTopicsDetectionJobsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ComprehendDouble) fakeListTopicsDetectionJobsPages(in *comprehend.ListTopicsDetectionJobsInput, pager func(*comprehend.ListTopicsDetectionJobsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTopicsDetectionJobs", paginators, in, pager)
}

func (d *ComprehendDouble) ListTopicsDetectionJobsPagesWithContext(i0 context.Context, i1 *comprehend.ListTopicsDetectionJobsInput, i2 func(*comprehend.ListTopicsDetectionJobsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTopicsDetectionJobsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ComprehendDouble) fakeListTopicsDetectionJobsPagesWithContext(ctx context.Context, in *comprehend.ListTopicsDetectionJobsInput, pager func(*comprehend.ListTopicsDetectionJobsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTopicsDetectionJobs", paginators, ctx, in, pager, options...)
}

func (d *ComprehendDouble) ListTopicsDetectionJobsRequest(i0 *comprehend.ListTopicsDetectionJobsInput) (r0 *request.Request, r1 *comprehend.ListTopicsDetectionJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTopicsDetectionJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.ListTopicsDetectionJobsOutput)
	return
}

func (d *ComprehendDouble) ListTopicsDetectionJobsWithContext(i0 context.Context, i1 *comprehend.ListTopicsDetectionJobsInput, i2 ...request.Option) (r0 *comprehend.ListTopicsDetectionJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTopicsDetectionJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.ListTopicsDetectionJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeListTopicsDetectionJobsWithContext(ctx context.Context, in *comprehend.ListTopicsDetectionJobsInput, _ ...request.Option) (*comprehend.ListTopicsDetectionJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTopicsDetectionJobs cancelled", ctx.Err())
	default:
		return d.ListTopicsDetectionJobs(in)
	}
}

func (d *ComprehendDouble) StartDocumentClassificationJob(i0 *comprehend.StartDocumentClassificationJobInput) (r0 *comprehend.StartDocumentClassificationJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartDocumentClassificationJob", i0)
	r0, _ = returns[0].(*comprehend.StartDocumentClassificationJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) StartDocumentClassificationJobRequest(i0 *comprehend.StartDocumentClassificationJobInput) (r0 *request.Request, r1 *comprehend.StartDocumentClassificationJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartDocumentClassificationJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.StartDocumentClassificationJobOutput)
	return
}

func (d *ComprehendDouble) StartDocumentClassificationJobWithContext(i0 context.Context, i1 *comprehend.StartDocumentClassificationJobInput, i2 ...request.Option) (r0 *comprehend.StartDocumentClassificationJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartDocumentClassificationJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.StartDocumentClassificationJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeStartDocumentClassificationJobWithContext(ctx context.Context, in *comprehend.StartDocumentClassificationJobInput, _ ...request.Option) (*comprehend.StartDocumentClassificationJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartDocumentClassificationJob cancelled", ctx.Err())
	default:
		return d.StartDocumentClassificationJob(in)
	}
}

func (d *ComprehendDouble) StartDominantLanguageDetectionJob(i0 *comprehend.StartDominantLanguageDetectionJobInput) (r0 *comprehend.StartDominantLanguageDetectionJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartDominantLanguageDetectionJob", i0)
	r0, _ = returns[0].(*comprehend.StartDominantLanguageDetectionJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) StartDominantLanguageDetectionJobRequest(i0 *comprehend.StartDominantLanguageDetectionJobInput) (r0 *request.Request, r1 *comprehend.StartDominantLanguageDetectionJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartDominantLanguageDetectionJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.StartDominantLanguageDetectionJobOutput)
	return
}

func (d *ComprehendDouble) StartDominantLanguageDetectionJobWithContext(i0 context.Context, i1 *comprehend.StartDominantLanguageDetectionJobInput, i2 ...request.Option) (r0 *comprehend.StartDominantLanguageDetectionJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartDominantLanguageDetectionJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.StartDominantLanguageDetectionJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeStartDominantLanguageDetectionJobWithContext(ctx context.Context, in *comprehend.StartDominantLanguageDetectionJobInput, _ ...request.Option) (*comprehend.StartDominantLanguageDetectionJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartDominantLanguageDetectionJob cancelled", ctx.Err())
	default:
		return d.StartDominantLanguageDetectionJob(in)
	}
}

func (d *ComprehendDouble) StartEntitiesDetectionJob(i0 *comprehend.StartEntitiesDetectionJobInput) (r0 *comprehend.StartEntitiesDetectionJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartEntitiesDetectionJob", i0)
	r0, _ = returns[0].(*comprehend.StartEntitiesDetectionJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) StartEntitiesDetectionJobRequest(i0 *comprehend.StartEntitiesDetectionJobInput) (r0 *request.Request, r1 *comprehend.StartEntitiesDetectionJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartEntitiesDetectionJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.StartEntitiesDetectionJobOutput)
	return
}

func (d *ComprehendDouble) StartEntitiesDetectionJobWithContext(i0 context.Context, i1 *comprehend.StartEntitiesDetectionJobInput, i2 ...request.Option) (r0 *comprehend.StartEntitiesDetectionJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartEntitiesDetectionJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.StartEntitiesDetectionJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeStartEntitiesDetectionJobWithContext(ctx context.Context, in *comprehend.StartEntitiesDetectionJobInput, _ ...request.Option) (*comprehend.StartEntitiesDetectionJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartEntitiesDetectionJob cancelled", ctx.Err())
	default:
		return d.StartEntitiesDetectionJob(in)
	}
}

func (d *ComprehendDouble) StartKeyPhrasesDetectionJob(i0 *comprehend.StartKeyPhrasesDetectionJobInput) (r0 *comprehend.StartKeyPhrasesDetectionJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartKeyPhrasesDetectionJob", i0)
	r0, _ = returns[0].(*comprehend.StartKeyPhrasesDetectionJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) StartKeyPhrasesDetectionJobRequest(i0 *comprehend.StartKeyPhrasesDetectionJobInput) (r0 *request.Request, r1 *comprehend.StartKeyPhrasesDetectionJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartKeyPhrasesDetectionJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.StartKeyPhrasesDetectionJobOutput)
	return
}

func (d *ComprehendDouble) StartKeyPhrasesDetectionJobWithContext(i0 context.Context, i1 *comprehend.StartKeyPhrasesDetectionJobInput, i2 ...request.Option) (r0 *comprehend.StartKeyPhrasesDetectionJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartKeyPhrasesDetectionJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.StartKeyPhrasesDetectionJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeStartKeyPhrasesDetectionJobWithContext(ctx context.Context, in *comprehend.StartKeyPhrasesDetectionJobInput, _ ...request.Option) (*comprehend.StartKeyPhrasesDetectionJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartKeyPhrasesDetectionJob cancelled", ctx.Err())
	default:
		return d.StartKeyPhrasesDetectionJob(in)
	}
}

func (d *ComprehendDouble) StartSentimentDetectionJob(i0 *comprehend.StartSentimentDetectionJobInput) (r0 *comprehend.StartSentimentDetectionJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartSentimentDetectionJob", i0)
	r0, _ = returns[0].(*comprehend.StartSentimentDetectionJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) StartSentimentDetectionJobRequest(i0 *comprehend.StartSentimentDetectionJobInput) (r0 *request.Request, r1 *comprehend.StartSentimentDetectionJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartSentimentDetectionJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.StartSentimentDetectionJobOutput)
	return
}

func (d *ComprehendDouble) StartSentimentDetectionJobWithContext(i0 context.Context, i1 *comprehend.StartSentimentDetectionJobInput, i2 ...request.Option) (r0 *comprehend.StartSentimentDetectionJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartSentimentDetectionJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.StartSentimentDetectionJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeStartSentimentDetectionJobWithContext(ctx context.Context, in *comprehend.StartSentimentDetectionJobInput, _ ...request.Option) (*comprehend.StartSentimentDetectionJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartSentimentDetectionJob cancelled", ctx.Err())
	default:
		return d.StartSentimentDetectionJob(in)
	}
}

func (d *ComprehendDouble) StartTopicsDetectionJob(i0 *comprehend.StartTopicsDetectionJobInput) (r0 *comprehend.StartTopicsDetectionJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartTopicsDetectionJob", i0)
	r0, _ = returns[0].(*comprehend.StartTopicsDetectionJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) StartTopicsDetectionJobRequest(i0 *comprehend.StartTopicsDetectionJobInput) (r0 *request.Request, r1 *comprehend.StartTopicsDetectionJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartTopicsDetectionJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.StartTopicsDetectionJobOutput)
	return
}

func (d *ComprehendDouble) StartTopicsDetectionJobWithContext(i0 context.Context, i1 *comprehend.StartTopicsDetectionJobInput, i2 ...request.Option) (r0 *comprehend.StartTopicsDetectionJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartTopicsDetectionJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.StartTopicsDetectionJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeStartTopicsDetectionJobWithContext(ctx context.Context, in *comprehend.StartTopicsDetectionJobInput, _ ...request.Option) (*comprehend.StartTopicsDetectionJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartTopicsDetectionJob cancelled", ctx.Err())
	default:
		return d.StartTopicsDetectionJob(in)
	}
}

func (d *ComprehendDouble) StopDominantLanguageDetectionJob(i0 *comprehend.StopDominantLanguageDetectionJobInput) (r0 *comprehend.StopDominantLanguageDetectionJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopDominantLanguageDetectionJob", i0)
	r0, _ = returns[0].(*comprehend.StopDominantLanguageDetectionJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) StopDominantLanguageDetectionJobRequest(i0 *comprehend.StopDominantLanguageDetectionJobInput) (r0 *request.Request, r1 *comprehend.StopDominantLanguageDetectionJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopDominantLanguageDetectionJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.StopDominantLanguageDetectionJobOutput)
	return
}

func (d *ComprehendDouble) StopDominantLanguageDetectionJobWithContext(i0 context.Context, i1 *comprehend.StopDominantLanguageDetectionJobInput, i2 ...request.Option) (r0 *comprehend.StopDominantLanguageDetectionJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopDominantLanguageDetectionJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.StopDominantLanguageDetectionJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeStopDominantLanguageDetectionJobWithContext(ctx context.Context, in *comprehend.StopDominantLanguageDetectionJobInput, _ ...request.Option) (*comprehend.StopDominantLanguageDetectionJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopDominantLanguageDetectionJob cancelled", ctx.Err())
	default:
		return d.StopDominantLanguageDetectionJob(in)
	}
}

func (d *ComprehendDouble) StopEntitiesDetectionJob(i0 *comprehend.StopEntitiesDetectionJobInput) (r0 *comprehend.StopEntitiesDetectionJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopEntitiesDetectionJob", i0)
	r0, _ = returns[0].(*comprehend.StopEntitiesDetectionJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) StopEntitiesDetectionJobRequest(i0 *comprehend.StopEntitiesDetectionJobInput) (r0 *request.Request, r1 *comprehend.StopEntitiesDetectionJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopEntitiesDetectionJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.StopEntitiesDetectionJobOutput)
	return
}

func (d *ComprehendDouble) StopEntitiesDetectionJobWithContext(i0 context.Context, i1 *comprehend.StopEntitiesDetectionJobInput, i2 ...request.Option) (r0 *comprehend.StopEntitiesDetectionJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopEntitiesDetectionJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.StopEntitiesDetectionJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeStopEntitiesDetectionJobWithContext(ctx context.Context, in *comprehend.StopEntitiesDetectionJobInput, _ ...request.Option) (*comprehend.StopEntitiesDetectionJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopEntitiesDetectionJob cancelled", ctx.Err())
	default:
		return d.StopEntitiesDetectionJob(in)
	}
}

func (d *ComprehendDouble) StopKeyPhrasesDetectionJob(i0 *comprehend.StopKeyPhrasesDetectionJobInput) (r0 *comprehend.StopKeyPhrasesDetectionJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopKeyPhrasesDetectionJob", i0)
	r0, _ = returns[0].(*comprehend.StopKeyPhrasesDetectionJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) StopKeyPhrasesDetectionJobRequest(i0 *comprehend.StopKeyPhrasesDetectionJobInput) (r0 *request.Request, r1 *comprehend.StopKeyPhrasesDetectionJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopKeyPhrasesDetectionJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.StopKeyPhrasesDetectionJobOutput)
	return
}

func (d *ComprehendDouble) StopKeyPhrasesDetectionJobWithContext(i0 context.Context, i1 *comprehend.StopKeyPhrasesDetectionJobInput, i2 ...request.Option) (r0 *comprehend.StopKeyPhrasesDetectionJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopKeyPhrasesDetectionJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.StopKeyPhrasesDetectionJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeStopKeyPhrasesDetectionJobWithContext(ctx context.Context, in *comprehend.StopKeyPhrasesDetectionJobInput, _ ...request.Option) (*comprehend.StopKeyPhrasesDetectionJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopKeyPhrasesDetectionJob cancelled", ctx.Err())
	default:
		return d.StopKeyPhrasesDetectionJob(in)
	}
}

func (d *ComprehendDouble) StopSentimentDetectionJob(i0 *comprehend.StopSentimentDetectionJobInput) (r0 *comprehend.StopSentimentDetectionJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopSentimentDetectionJob", i0)
	r0, _ = returns[0].(*comprehend.StopSentimentDetectionJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) StopSentimentDetectionJobRequest(i0 *comprehend.StopSentimentDetectionJobInput) (r0 *request.Request, r1 *comprehend.StopSentimentDetectionJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopSentimentDetectionJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.StopSentimentDetectionJobOutput)
	return
}

func (d *ComprehendDouble) StopSentimentDetectionJobWithContext(i0 context.Context, i1 *comprehend.StopSentimentDetectionJobInput, i2 ...request.Option) (r0 *comprehend.StopSentimentDetectionJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopSentimentDetectionJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.StopSentimentDetectionJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeStopSentimentDetectionJobWithContext(ctx context.Context, in *comprehend.StopSentimentDetectionJobInput, _ ...request.Option) (*comprehend.StopSentimentDetectionJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopSentimentDetectionJob cancelled", ctx.Err())
	default:
		return d.StopSentimentDetectionJob(in)
	}
}

func (d *ComprehendDouble) StopTrainingDocumentClassifier(i0 *comprehend.StopTrainingDocumentClassifierInput) (r0 *comprehend.StopTrainingDocumentClassifierOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopTrainingDocumentClassifier", i0)
	r0, _ = returns[0].(*comprehend.StopTrainingDocumentClassifierOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) StopTrainingDocumentClassifierRequest(i0 *comprehend.StopTrainingDocumentClassifierInput) (r0 *request.Request, r1 *comprehend.StopTrainingDocumentClassifierOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopTrainingDocumentClassifierRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.StopTrainingDocumentClassifierOutput)
	return
}

func (d *ComprehendDouble) StopTrainingDocumentClassifierWithContext(i0 context.Context, i1 *comprehend.StopTrainingDocumentClassifierInput, i2 ...request.Option) (r0 *comprehend.StopTrainingDocumentClassifierOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopTrainingDocumentClassifierWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.StopTrainingDocumentClassifierOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeStopTrainingDocumentClassifierWithContext(ctx context.Context, in *comprehend.StopTrainingDocumentClassifierInput, _ ...request.Option) (*comprehend.StopTrainingDocumentClassifierOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopTrainingDocumentClassifier cancelled", ctx.Err())
	default:
		return d.StopTrainingDocumentClassifier(in)
	}
}

func (d *ComprehendDouble) StopTrainingEntityRecognizer(i0 *comprehend.StopTrainingEntityRecognizerInput) (r0 *comprehend.StopTrainingEntityRecognizerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopTrainingEntityRecognizer", i0)
	r0, _ = returns[0].(*comprehend.StopTrainingEntityRecognizerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) StopTrainingEntityRecognizerRequest(i0 *comprehend.StopTrainingEntityRecognizerInput) (r0 *request.Request, r1 *comprehend.StopTrainingEntityRecognizerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopTrainingEntityRecognizerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.StopTrainingEntityRecognizerOutput)
	return
}

func (d *ComprehendDouble) StopTrainingEntityRecognizerWithContext(i0 context.Context, i1 *comprehend.StopTrainingEntityRecognizerInput, i2 ...request.Option) (r0 *comprehend.StopTrainingEntityRecognizerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopTrainingEntityRecognizerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.StopTrainingEntityRecognizerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeStopTrainingEntityRecognizerWithContext(ctx context.Context, in *comprehend.StopTrainingEntityRecognizerInput, _ ...request.Option) (*comprehend.StopTrainingEntityRecognizerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopTrainingEntityRecognizer cancelled", ctx.Err())
	default:
		return d.StopTrainingEntityRecognizer(in)
	}
}

func (d *ComprehendDouble) TagResource(i0 *comprehend.TagResourceInput) (r0 *comprehend.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*comprehend.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) TagResourceRequest(i0 *comprehend.TagResourceInput) (r0 *request.Request, r1 *comprehend.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.TagResourceOutput)
	return
}

func (d *ComprehendDouble) TagResourceWithContext(i0 context.Context, i1 *comprehend.TagResourceInput, i2 ...request.Option) (r0 *comprehend.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeTagResourceWithContext(ctx context.Context, in *comprehend.TagResourceInput, _ ...request.Option) (*comprehend.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *ComprehendDouble) UntagResource(i0 *comprehend.UntagResourceInput) (r0 *comprehend.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*comprehend.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) UntagResourceRequest(i0 *comprehend.UntagResourceInput) (r0 *request.Request, r1 *comprehend.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.UntagResourceOutput)
	return
}

func (d *ComprehendDouble) UntagResourceWithContext(i0 context.Context, i1 *comprehend.UntagResourceInput, i2 ...request.Option) (r0 *comprehend.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeUntagResourceWithContext(ctx context.Context, in *comprehend.UntagResourceInput, _ ...request.Option) (*comprehend.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *ComprehendDouble) UpdateEndpoint(i0 *comprehend.UpdateEndpointInput) (r0 *comprehend.UpdateEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateEndpoint", i0)
	r0, _ = returns[0].(*comprehend.UpdateEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) UpdateEndpointRequest(i0 *comprehend.UpdateEndpointInput) (r0 *request.Request, r1 *comprehend.UpdateEndpointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateEndpointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*comprehend.UpdateEndpointOutput)
	return
}

func (d *ComprehendDouble) UpdateEndpointWithContext(i0 context.Context, i1 *comprehend.UpdateEndpointInput, i2 ...request.Option) (r0 *comprehend.UpdateEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateEndpointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*comprehend.UpdateEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ComprehendDouble) fakeUpdateEndpointWithContext(ctx context.Context, in *comprehend.UpdateEndpointInput, _ ...request.Option) (*comprehend.UpdateEndpointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateEndpoint cancelled", ctx.Err())
	default:
		return d.UpdateEndpoint(in)
	}
}
