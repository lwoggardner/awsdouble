// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:13:44+11:00

// Package maciedouble provides a TestDouble implementation of macieiface.MacieAPI
package maciedouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/macie"
	"github.com/aws/aws-sdk-go/service/macie/macieiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// MacieDouble is TestDouble for macieiface.MacieAPI
type MacieDouble struct {
	macieiface.MacieAPI
	*awsdouble.AWSTestDouble
}

// Constructor for MacieDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *MacieDouble {
	result := &MacieDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*macieiface.MacieAPI)(nil), configurators...)
	return result
}

func (d *MacieDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *MacieDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AssociateMemberAccountWithContext":
		return m.Fake(d.fakeAssociateMemberAccountWithContext)

	case "AssociateS3ResourcesWithContext":
		return m.Fake(d.fakeAssociateS3ResourcesWithContext)

	case "DisassociateMemberAccountWithContext":
		return m.Fake(d.fakeDisassociateMemberAccountWithContext)

	case "DisassociateS3ResourcesWithContext":
		return m.Fake(d.fakeDisassociateS3ResourcesWithContext)

	case "ListMemberAccountsPages":
		return m.Fake(d.fakeListMemberAccountsPages)

	case "ListMemberAccountsPagesWithContext":
		return m.Fake(d.fakeListMemberAccountsPagesWithContext)

	case "ListMemberAccountsWithContext":
		return m.Fake(d.fakeListMemberAccountsWithContext)

	case "ListS3ResourcesPages":
		return m.Fake(d.fakeListS3ResourcesPages)

	case "ListS3ResourcesPagesWithContext":
		return m.Fake(d.fakeListS3ResourcesPagesWithContext)

	case "ListS3ResourcesWithContext":
		return m.Fake(d.fakeListS3ResourcesWithContext)

	case "UpdateS3ResourcesWithContext":
		return m.Fake(d.fakeUpdateS3ResourcesWithContext)

	default:
		return nil
	}
}

func (d *MacieDouble) AssociateMemberAccount(i0 *macie.AssociateMemberAccountInput) (r0 *macie.AssociateMemberAccountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateMemberAccount", i0)
	r0, _ = returns[0].(*macie.AssociateMemberAccountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MacieDouble) AssociateMemberAccountRequest(i0 *macie.AssociateMemberAccountInput) (r0 *request.Request, r1 *macie.AssociateMemberAccountOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateMemberAccountRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*macie.AssociateMemberAccountOutput)
	return
}

func (d *MacieDouble) AssociateMemberAccountWithContext(i0 context.Context, i1 *macie.AssociateMemberAccountInput, i2 ...request.Option) (r0 *macie.AssociateMemberAccountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateMemberAccountWithContext", i0, i1, i2)
	r0, _ = returns[0].(*macie.AssociateMemberAccountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MacieDouble) fakeAssociateMemberAccountWithContext(ctx context.Context, in *macie.AssociateMemberAccountInput, _ ...request.Option) (*macie.AssociateMemberAccountOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateMemberAccount cancelled", ctx.Err())
	default:
		return d.AssociateMemberAccount(in)
	}
}

func (d *MacieDouble) AssociateS3Resources(i0 *macie.AssociateS3ResourcesInput) (r0 *macie.AssociateS3ResourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateS3Resources", i0)
	r0, _ = returns[0].(*macie.AssociateS3ResourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MacieDouble) AssociateS3ResourcesRequest(i0 *macie.AssociateS3ResourcesInput) (r0 *request.Request, r1 *macie.AssociateS3ResourcesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateS3ResourcesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*macie.AssociateS3ResourcesOutput)
	return
}

func (d *MacieDouble) AssociateS3ResourcesWithContext(i0 context.Context, i1 *macie.AssociateS3ResourcesInput, i2 ...request.Option) (r0 *macie.AssociateS3ResourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateS3ResourcesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*macie.AssociateS3ResourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MacieDouble) fakeAssociateS3ResourcesWithContext(ctx context.Context, in *macie.AssociateS3ResourcesInput, _ ...request.Option) (*macie.AssociateS3ResourcesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateS3Resources cancelled", ctx.Err())
	default:
		return d.AssociateS3Resources(in)
	}
}

func (d *MacieDouble) DisassociateMemberAccount(i0 *macie.DisassociateMemberAccountInput) (r0 *macie.DisassociateMemberAccountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateMemberAccount", i0)
	r0, _ = returns[0].(*macie.DisassociateMemberAccountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MacieDouble) DisassociateMemberAccountRequest(i0 *macie.DisassociateMemberAccountInput) (r0 *request.Request, r1 *macie.DisassociateMemberAccountOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateMemberAccountRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*macie.DisassociateMemberAccountOutput)
	return
}

func (d *MacieDouble) DisassociateMemberAccountWithContext(i0 context.Context, i1 *macie.DisassociateMemberAccountInput, i2 ...request.Option) (r0 *macie.DisassociateMemberAccountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateMemberAccountWithContext", i0, i1, i2)
	r0, _ = returns[0].(*macie.DisassociateMemberAccountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MacieDouble) fakeDisassociateMemberAccountWithContext(ctx context.Context, in *macie.DisassociateMemberAccountInput, _ ...request.Option) (*macie.DisassociateMemberAccountOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateMemberAccount cancelled", ctx.Err())
	default:
		return d.DisassociateMemberAccount(in)
	}
}

func (d *MacieDouble) DisassociateS3Resources(i0 *macie.DisassociateS3ResourcesInput) (r0 *macie.DisassociateS3ResourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateS3Resources", i0)
	r0, _ = returns[0].(*macie.DisassociateS3ResourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MacieDouble) DisassociateS3ResourcesRequest(i0 *macie.DisassociateS3ResourcesInput) (r0 *request.Request, r1 *macie.DisassociateS3ResourcesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateS3ResourcesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*macie.DisassociateS3ResourcesOutput)
	return
}

func (d *MacieDouble) DisassociateS3ResourcesWithContext(i0 context.Context, i1 *macie.DisassociateS3ResourcesInput, i2 ...request.Option) (r0 *macie.DisassociateS3ResourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateS3ResourcesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*macie.DisassociateS3ResourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MacieDouble) fakeDisassociateS3ResourcesWithContext(ctx context.Context, in *macie.DisassociateS3ResourcesInput, _ ...request.Option) (*macie.DisassociateS3ResourcesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateS3Resources cancelled", ctx.Err())
	default:
		return d.DisassociateS3Resources(in)
	}
}

func (d *MacieDouble) ListMemberAccounts(i0 *macie.ListMemberAccountsInput) (r0 *macie.ListMemberAccountsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMemberAccounts", i0)
	r0, _ = returns[0].(*macie.ListMemberAccountsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MacieDouble) ListMemberAccountsPages(i0 *macie.ListMemberAccountsInput, i1 func(*macie.ListMemberAccountsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMemberAccountsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MacieDouble) fakeListMemberAccountsPages(in *macie.ListMemberAccountsInput, pager func(*macie.ListMemberAccountsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListMemberAccounts", paginators, in, pager)
}

func (d *MacieDouble) ListMemberAccountsPagesWithContext(i0 context.Context, i1 *macie.ListMemberAccountsInput, i2 func(*macie.ListMemberAccountsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMemberAccountsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MacieDouble) fakeListMemberAccountsPagesWithContext(ctx context.Context, in *macie.ListMemberAccountsInput, pager func(*macie.ListMemberAccountsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListMemberAccounts", paginators, ctx, in, pager, options...)
}

func (d *MacieDouble) ListMemberAccountsRequest(i0 *macie.ListMemberAccountsInput) (r0 *request.Request, r1 *macie.ListMemberAccountsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMemberAccountsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*macie.ListMemberAccountsOutput)
	return
}

func (d *MacieDouble) ListMemberAccountsWithContext(i0 context.Context, i1 *macie.ListMemberAccountsInput, i2 ...request.Option) (r0 *macie.ListMemberAccountsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMemberAccountsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*macie.ListMemberAccountsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MacieDouble) fakeListMemberAccountsWithContext(ctx context.Context, in *macie.ListMemberAccountsInput, _ ...request.Option) (*macie.ListMemberAccountsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListMemberAccounts cancelled", ctx.Err())
	default:
		return d.ListMemberAccounts(in)
	}
}

func (d *MacieDouble) ListS3Resources(i0 *macie.ListS3ResourcesInput) (r0 *macie.ListS3ResourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListS3Resources", i0)
	r0, _ = returns[0].(*macie.ListS3ResourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MacieDouble) ListS3ResourcesPages(i0 *macie.ListS3ResourcesInput, i1 func(*macie.ListS3ResourcesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListS3ResourcesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MacieDouble) fakeListS3ResourcesPages(in *macie.ListS3ResourcesInput, pager func(*macie.ListS3ResourcesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListS3Resources", paginators, in, pager)
}

func (d *MacieDouble) ListS3ResourcesPagesWithContext(i0 context.Context, i1 *macie.ListS3ResourcesInput, i2 func(*macie.ListS3ResourcesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListS3ResourcesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MacieDouble) fakeListS3ResourcesPagesWithContext(ctx context.Context, in *macie.ListS3ResourcesInput, pager func(*macie.ListS3ResourcesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListS3Resources", paginators, ctx, in, pager, options...)
}

func (d *MacieDouble) ListS3ResourcesRequest(i0 *macie.ListS3ResourcesInput) (r0 *request.Request, r1 *macie.ListS3ResourcesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListS3ResourcesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*macie.ListS3ResourcesOutput)
	return
}

func (d *MacieDouble) ListS3ResourcesWithContext(i0 context.Context, i1 *macie.ListS3ResourcesInput, i2 ...request.Option) (r0 *macie.ListS3ResourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListS3ResourcesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*macie.ListS3ResourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MacieDouble) fakeListS3ResourcesWithContext(ctx context.Context, in *macie.ListS3ResourcesInput, _ ...request.Option) (*macie.ListS3ResourcesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListS3Resources cancelled", ctx.Err())
	default:
		return d.ListS3Resources(in)
	}
}

func (d *MacieDouble) UpdateS3Resources(i0 *macie.UpdateS3ResourcesInput) (r0 *macie.UpdateS3ResourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateS3Resources", i0)
	r0, _ = returns[0].(*macie.UpdateS3ResourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MacieDouble) UpdateS3ResourcesRequest(i0 *macie.UpdateS3ResourcesInput) (r0 *request.Request, r1 *macie.UpdateS3ResourcesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateS3ResourcesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*macie.UpdateS3ResourcesOutput)
	return
}

func (d *MacieDouble) UpdateS3ResourcesWithContext(i0 context.Context, i1 *macie.UpdateS3ResourcesInput, i2 ...request.Option) (r0 *macie.UpdateS3ResourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateS3ResourcesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*macie.UpdateS3ResourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MacieDouble) fakeUpdateS3ResourcesWithContext(ctx context.Context, in *macie.UpdateS3ResourcesInput, _ ...request.Option) (*macie.UpdateS3ResourcesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateS3Resources cancelled", ctx.Err())
	default:
		return d.UpdateS3Resources(in)
	}
}
