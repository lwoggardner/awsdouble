// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:14:14+11:00

// Package organizationsdouble provides a TestDouble implementation of organizationsiface.OrganizationsAPI
package organizationsdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/organizations"
	"github.com/aws/aws-sdk-go/service/organizations/organizationsiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// OrganizationsDouble is TestDouble for organizationsiface.OrganizationsAPI
type OrganizationsDouble struct {
	organizationsiface.OrganizationsAPI
	*awsdouble.AWSTestDouble
}

// Constructor for OrganizationsDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *OrganizationsDouble {
	result := &OrganizationsDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*organizationsiface.OrganizationsAPI)(nil), configurators...)
	return result
}

func (d *OrganizationsDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *OrganizationsDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AcceptHandshakeWithContext":
		return m.Fake(d.fakeAcceptHandshakeWithContext)

	case "AttachPolicyWithContext":
		return m.Fake(d.fakeAttachPolicyWithContext)

	case "CancelHandshakeWithContext":
		return m.Fake(d.fakeCancelHandshakeWithContext)

	case "CreateAccountWithContext":
		return m.Fake(d.fakeCreateAccountWithContext)

	case "CreateGovCloudAccountWithContext":
		return m.Fake(d.fakeCreateGovCloudAccountWithContext)

	case "CreateOrganizationWithContext":
		return m.Fake(d.fakeCreateOrganizationWithContext)

	case "CreateOrganizationalUnitWithContext":
		return m.Fake(d.fakeCreateOrganizationalUnitWithContext)

	case "CreatePolicyWithContext":
		return m.Fake(d.fakeCreatePolicyWithContext)

	case "DeclineHandshakeWithContext":
		return m.Fake(d.fakeDeclineHandshakeWithContext)

	case "DeleteOrganizationWithContext":
		return m.Fake(d.fakeDeleteOrganizationWithContext)

	case "DeleteOrganizationalUnitWithContext":
		return m.Fake(d.fakeDeleteOrganizationalUnitWithContext)

	case "DeletePolicyWithContext":
		return m.Fake(d.fakeDeletePolicyWithContext)

	case "DescribeAccountWithContext":
		return m.Fake(d.fakeDescribeAccountWithContext)

	case "DescribeCreateAccountStatusWithContext":
		return m.Fake(d.fakeDescribeCreateAccountStatusWithContext)

	case "DescribeEffectivePolicyWithContext":
		return m.Fake(d.fakeDescribeEffectivePolicyWithContext)

	case "DescribeHandshakeWithContext":
		return m.Fake(d.fakeDescribeHandshakeWithContext)

	case "DescribeOrganizationWithContext":
		return m.Fake(d.fakeDescribeOrganizationWithContext)

	case "DescribeOrganizationalUnitWithContext":
		return m.Fake(d.fakeDescribeOrganizationalUnitWithContext)

	case "DescribePolicyWithContext":
		return m.Fake(d.fakeDescribePolicyWithContext)

	case "DetachPolicyWithContext":
		return m.Fake(d.fakeDetachPolicyWithContext)

	case "DisableAWSServiceAccessWithContext":
		return m.Fake(d.fakeDisableAWSServiceAccessWithContext)

	case "DisablePolicyTypeWithContext":
		return m.Fake(d.fakeDisablePolicyTypeWithContext)

	case "EnableAWSServiceAccessWithContext":
		return m.Fake(d.fakeEnableAWSServiceAccessWithContext)

	case "EnableAllFeaturesWithContext":
		return m.Fake(d.fakeEnableAllFeaturesWithContext)

	case "EnablePolicyTypeWithContext":
		return m.Fake(d.fakeEnablePolicyTypeWithContext)

	case "InviteAccountToOrganizationWithContext":
		return m.Fake(d.fakeInviteAccountToOrganizationWithContext)

	case "LeaveOrganizationWithContext":
		return m.Fake(d.fakeLeaveOrganizationWithContext)

	case "ListAWSServiceAccessForOrganizationPages":
		return m.Fake(d.fakeListAWSServiceAccessForOrganizationPages)

	case "ListAWSServiceAccessForOrganizationPagesWithContext":
		return m.Fake(d.fakeListAWSServiceAccessForOrganizationPagesWithContext)

	case "ListAWSServiceAccessForOrganizationWithContext":
		return m.Fake(d.fakeListAWSServiceAccessForOrganizationWithContext)

	case "ListAccountsForParentPages":
		return m.Fake(d.fakeListAccountsForParentPages)

	case "ListAccountsForParentPagesWithContext":
		return m.Fake(d.fakeListAccountsForParentPagesWithContext)

	case "ListAccountsForParentWithContext":
		return m.Fake(d.fakeListAccountsForParentWithContext)

	case "ListAccountsPages":
		return m.Fake(d.fakeListAccountsPages)

	case "ListAccountsPagesWithContext":
		return m.Fake(d.fakeListAccountsPagesWithContext)

	case "ListAccountsWithContext":
		return m.Fake(d.fakeListAccountsWithContext)

	case "ListChildrenPages":
		return m.Fake(d.fakeListChildrenPages)

	case "ListChildrenPagesWithContext":
		return m.Fake(d.fakeListChildrenPagesWithContext)

	case "ListChildrenWithContext":
		return m.Fake(d.fakeListChildrenWithContext)

	case "ListCreateAccountStatusPages":
		return m.Fake(d.fakeListCreateAccountStatusPages)

	case "ListCreateAccountStatusPagesWithContext":
		return m.Fake(d.fakeListCreateAccountStatusPagesWithContext)

	case "ListCreateAccountStatusWithContext":
		return m.Fake(d.fakeListCreateAccountStatusWithContext)

	case "ListHandshakesForAccountPages":
		return m.Fake(d.fakeListHandshakesForAccountPages)

	case "ListHandshakesForAccountPagesWithContext":
		return m.Fake(d.fakeListHandshakesForAccountPagesWithContext)

	case "ListHandshakesForAccountWithContext":
		return m.Fake(d.fakeListHandshakesForAccountWithContext)

	case "ListHandshakesForOrganizationPages":
		return m.Fake(d.fakeListHandshakesForOrganizationPages)

	case "ListHandshakesForOrganizationPagesWithContext":
		return m.Fake(d.fakeListHandshakesForOrganizationPagesWithContext)

	case "ListHandshakesForOrganizationWithContext":
		return m.Fake(d.fakeListHandshakesForOrganizationWithContext)

	case "ListOrganizationalUnitsForParentPages":
		return m.Fake(d.fakeListOrganizationalUnitsForParentPages)

	case "ListOrganizationalUnitsForParentPagesWithContext":
		return m.Fake(d.fakeListOrganizationalUnitsForParentPagesWithContext)

	case "ListOrganizationalUnitsForParentWithContext":
		return m.Fake(d.fakeListOrganizationalUnitsForParentWithContext)

	case "ListParentsPages":
		return m.Fake(d.fakeListParentsPages)

	case "ListParentsPagesWithContext":
		return m.Fake(d.fakeListParentsPagesWithContext)

	case "ListParentsWithContext":
		return m.Fake(d.fakeListParentsWithContext)

	case "ListPoliciesForTargetPages":
		return m.Fake(d.fakeListPoliciesForTargetPages)

	case "ListPoliciesForTargetPagesWithContext":
		return m.Fake(d.fakeListPoliciesForTargetPagesWithContext)

	case "ListPoliciesForTargetWithContext":
		return m.Fake(d.fakeListPoliciesForTargetWithContext)

	case "ListPoliciesPages":
		return m.Fake(d.fakeListPoliciesPages)

	case "ListPoliciesPagesWithContext":
		return m.Fake(d.fakeListPoliciesPagesWithContext)

	case "ListPoliciesWithContext":
		return m.Fake(d.fakeListPoliciesWithContext)

	case "ListRootsPages":
		return m.Fake(d.fakeListRootsPages)

	case "ListRootsPagesWithContext":
		return m.Fake(d.fakeListRootsPagesWithContext)

	case "ListRootsWithContext":
		return m.Fake(d.fakeListRootsWithContext)

	case "ListTagsForResourcePages":
		return m.Fake(d.fakeListTagsForResourcePages)

	case "ListTagsForResourcePagesWithContext":
		return m.Fake(d.fakeListTagsForResourcePagesWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "ListTargetsForPolicyPages":
		return m.Fake(d.fakeListTargetsForPolicyPages)

	case "ListTargetsForPolicyPagesWithContext":
		return m.Fake(d.fakeListTargetsForPolicyPagesWithContext)

	case "ListTargetsForPolicyWithContext":
		return m.Fake(d.fakeListTargetsForPolicyWithContext)

	case "MoveAccountWithContext":
		return m.Fake(d.fakeMoveAccountWithContext)

	case "RemoveAccountFromOrganizationWithContext":
		return m.Fake(d.fakeRemoveAccountFromOrganizationWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateOrganizationalUnitWithContext":
		return m.Fake(d.fakeUpdateOrganizationalUnitWithContext)

	case "UpdatePolicyWithContext":
		return m.Fake(d.fakeUpdatePolicyWithContext)

	default:
		return nil
	}
}

func (d *OrganizationsDouble) AcceptHandshake(i0 *organizations.AcceptHandshakeInput) (r0 *organizations.AcceptHandshakeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptHandshake", i0)
	r0, _ = returns[0].(*organizations.AcceptHandshakeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) AcceptHandshakeRequest(i0 *organizations.AcceptHandshakeInput) (r0 *request.Request, r1 *organizations.AcceptHandshakeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptHandshakeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.AcceptHandshakeOutput)
	return
}

func (d *OrganizationsDouble) AcceptHandshakeWithContext(i0 context.Context, i1 *organizations.AcceptHandshakeInput, i2 ...request.Option) (r0 *organizations.AcceptHandshakeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptHandshakeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.AcceptHandshakeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeAcceptHandshakeWithContext(ctx context.Context, in *organizations.AcceptHandshakeInput, _ ...request.Option) (*organizations.AcceptHandshakeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AcceptHandshake cancelled", ctx.Err())
	default:
		return d.AcceptHandshake(in)
	}
}

func (d *OrganizationsDouble) AttachPolicy(i0 *organizations.AttachPolicyInput) (r0 *organizations.AttachPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachPolicy", i0)
	r0, _ = returns[0].(*organizations.AttachPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) AttachPolicyRequest(i0 *organizations.AttachPolicyInput) (r0 *request.Request, r1 *organizations.AttachPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.AttachPolicyOutput)
	return
}

func (d *OrganizationsDouble) AttachPolicyWithContext(i0 context.Context, i1 *organizations.AttachPolicyInput, i2 ...request.Option) (r0 *organizations.AttachPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.AttachPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeAttachPolicyWithContext(ctx context.Context, in *organizations.AttachPolicyInput, _ ...request.Option) (*organizations.AttachPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AttachPolicy cancelled", ctx.Err())
	default:
		return d.AttachPolicy(in)
	}
}

func (d *OrganizationsDouble) CancelHandshake(i0 *organizations.CancelHandshakeInput) (r0 *organizations.CancelHandshakeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelHandshake", i0)
	r0, _ = returns[0].(*organizations.CancelHandshakeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) CancelHandshakeRequest(i0 *organizations.CancelHandshakeInput) (r0 *request.Request, r1 *organizations.CancelHandshakeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelHandshakeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.CancelHandshakeOutput)
	return
}

func (d *OrganizationsDouble) CancelHandshakeWithContext(i0 context.Context, i1 *organizations.CancelHandshakeInput, i2 ...request.Option) (r0 *organizations.CancelHandshakeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelHandshakeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.CancelHandshakeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeCancelHandshakeWithContext(ctx context.Context, in *organizations.CancelHandshakeInput, _ ...request.Option) (*organizations.CancelHandshakeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelHandshake cancelled", ctx.Err())
	default:
		return d.CancelHandshake(in)
	}
}

func (d *OrganizationsDouble) CreateAccount(i0 *organizations.CreateAccountInput) (r0 *organizations.CreateAccountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAccount", i0)
	r0, _ = returns[0].(*organizations.CreateAccountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) CreateAccountRequest(i0 *organizations.CreateAccountInput) (r0 *request.Request, r1 *organizations.CreateAccountOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAccountRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.CreateAccountOutput)
	return
}

func (d *OrganizationsDouble) CreateAccountWithContext(i0 context.Context, i1 *organizations.CreateAccountInput, i2 ...request.Option) (r0 *organizations.CreateAccountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAccountWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.CreateAccountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeCreateAccountWithContext(ctx context.Context, in *organizations.CreateAccountInput, _ ...request.Option) (*organizations.CreateAccountOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateAccount cancelled", ctx.Err())
	default:
		return d.CreateAccount(in)
	}
}

func (d *OrganizationsDouble) CreateGovCloudAccount(i0 *organizations.CreateGovCloudAccountInput) (r0 *organizations.CreateGovCloudAccountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGovCloudAccount", i0)
	r0, _ = returns[0].(*organizations.CreateGovCloudAccountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) CreateGovCloudAccountRequest(i0 *organizations.CreateGovCloudAccountInput) (r0 *request.Request, r1 *organizations.CreateGovCloudAccountOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGovCloudAccountRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.CreateGovCloudAccountOutput)
	return
}

func (d *OrganizationsDouble) CreateGovCloudAccountWithContext(i0 context.Context, i1 *organizations.CreateGovCloudAccountInput, i2 ...request.Option) (r0 *organizations.CreateGovCloudAccountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGovCloudAccountWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.CreateGovCloudAccountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeCreateGovCloudAccountWithContext(ctx context.Context, in *organizations.CreateGovCloudAccountInput, _ ...request.Option) (*organizations.CreateGovCloudAccountOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateGovCloudAccount cancelled", ctx.Err())
	default:
		return d.CreateGovCloudAccount(in)
	}
}

func (d *OrganizationsDouble) CreateOrganization(i0 *organizations.CreateOrganizationInput) (r0 *organizations.CreateOrganizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateOrganization", i0)
	r0, _ = returns[0].(*organizations.CreateOrganizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) CreateOrganizationRequest(i0 *organizations.CreateOrganizationInput) (r0 *request.Request, r1 *organizations.CreateOrganizationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateOrganizationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.CreateOrganizationOutput)
	return
}

func (d *OrganizationsDouble) CreateOrganizationWithContext(i0 context.Context, i1 *organizations.CreateOrganizationInput, i2 ...request.Option) (r0 *organizations.CreateOrganizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateOrganizationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.CreateOrganizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeCreateOrganizationWithContext(ctx context.Context, in *organizations.CreateOrganizationInput, _ ...request.Option) (*organizations.CreateOrganizationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateOrganization cancelled", ctx.Err())
	default:
		return d.CreateOrganization(in)
	}
}

func (d *OrganizationsDouble) CreateOrganizationalUnit(i0 *organizations.CreateOrganizationalUnitInput) (r0 *organizations.CreateOrganizationalUnitOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateOrganizationalUnit", i0)
	r0, _ = returns[0].(*organizations.CreateOrganizationalUnitOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) CreateOrganizationalUnitRequest(i0 *organizations.CreateOrganizationalUnitInput) (r0 *request.Request, r1 *organizations.CreateOrganizationalUnitOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateOrganizationalUnitRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.CreateOrganizationalUnitOutput)
	return
}

func (d *OrganizationsDouble) CreateOrganizationalUnitWithContext(i0 context.Context, i1 *organizations.CreateOrganizationalUnitInput, i2 ...request.Option) (r0 *organizations.CreateOrganizationalUnitOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateOrganizationalUnitWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.CreateOrganizationalUnitOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeCreateOrganizationalUnitWithContext(ctx context.Context, in *organizations.CreateOrganizationalUnitInput, _ ...request.Option) (*organizations.CreateOrganizationalUnitOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateOrganizationalUnit cancelled", ctx.Err())
	default:
		return d.CreateOrganizationalUnit(in)
	}
}

func (d *OrganizationsDouble) CreatePolicy(i0 *organizations.CreatePolicyInput) (r0 *organizations.CreatePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePolicy", i0)
	r0, _ = returns[0].(*organizations.CreatePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) CreatePolicyRequest(i0 *organizations.CreatePolicyInput) (r0 *request.Request, r1 *organizations.CreatePolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.CreatePolicyOutput)
	return
}

func (d *OrganizationsDouble) CreatePolicyWithContext(i0 context.Context, i1 *organizations.CreatePolicyInput, i2 ...request.Option) (r0 *organizations.CreatePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.CreatePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeCreatePolicyWithContext(ctx context.Context, in *organizations.CreatePolicyInput, _ ...request.Option) (*organizations.CreatePolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreatePolicy cancelled", ctx.Err())
	default:
		return d.CreatePolicy(in)
	}
}

func (d *OrganizationsDouble) DeclineHandshake(i0 *organizations.DeclineHandshakeInput) (r0 *organizations.DeclineHandshakeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeclineHandshake", i0)
	r0, _ = returns[0].(*organizations.DeclineHandshakeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) DeclineHandshakeRequest(i0 *organizations.DeclineHandshakeInput) (r0 *request.Request, r1 *organizations.DeclineHandshakeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeclineHandshakeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.DeclineHandshakeOutput)
	return
}

func (d *OrganizationsDouble) DeclineHandshakeWithContext(i0 context.Context, i1 *organizations.DeclineHandshakeInput, i2 ...request.Option) (r0 *organizations.DeclineHandshakeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeclineHandshakeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.DeclineHandshakeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeDeclineHandshakeWithContext(ctx context.Context, in *organizations.DeclineHandshakeInput, _ ...request.Option) (*organizations.DeclineHandshakeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeclineHandshake cancelled", ctx.Err())
	default:
		return d.DeclineHandshake(in)
	}
}

func (d *OrganizationsDouble) DeleteOrganization(i0 *organizations.DeleteOrganizationInput) (r0 *organizations.DeleteOrganizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteOrganization", i0)
	r0, _ = returns[0].(*organizations.DeleteOrganizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) DeleteOrganizationRequest(i0 *organizations.DeleteOrganizationInput) (r0 *request.Request, r1 *organizations.DeleteOrganizationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteOrganizationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.DeleteOrganizationOutput)
	return
}

func (d *OrganizationsDouble) DeleteOrganizationWithContext(i0 context.Context, i1 *organizations.DeleteOrganizationInput, i2 ...request.Option) (r0 *organizations.DeleteOrganizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteOrganizationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.DeleteOrganizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeDeleteOrganizationWithContext(ctx context.Context, in *organizations.DeleteOrganizationInput, _ ...request.Option) (*organizations.DeleteOrganizationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteOrganization cancelled", ctx.Err())
	default:
		return d.DeleteOrganization(in)
	}
}

func (d *OrganizationsDouble) DeleteOrganizationalUnit(i0 *organizations.DeleteOrganizationalUnitInput) (r0 *organizations.DeleteOrganizationalUnitOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteOrganizationalUnit", i0)
	r0, _ = returns[0].(*organizations.DeleteOrganizationalUnitOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) DeleteOrganizationalUnitRequest(i0 *organizations.DeleteOrganizationalUnitInput) (r0 *request.Request, r1 *organizations.DeleteOrganizationalUnitOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteOrganizationalUnitRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.DeleteOrganizationalUnitOutput)
	return
}

func (d *OrganizationsDouble) DeleteOrganizationalUnitWithContext(i0 context.Context, i1 *organizations.DeleteOrganizationalUnitInput, i2 ...request.Option) (r0 *organizations.DeleteOrganizationalUnitOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteOrganizationalUnitWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.DeleteOrganizationalUnitOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeDeleteOrganizationalUnitWithContext(ctx context.Context, in *organizations.DeleteOrganizationalUnitInput, _ ...request.Option) (*organizations.DeleteOrganizationalUnitOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteOrganizationalUnit cancelled", ctx.Err())
	default:
		return d.DeleteOrganizationalUnit(in)
	}
}

func (d *OrganizationsDouble) DeletePolicy(i0 *organizations.DeletePolicyInput) (r0 *organizations.DeletePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePolicy", i0)
	r0, _ = returns[0].(*organizations.DeletePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) DeletePolicyRequest(i0 *organizations.DeletePolicyInput) (r0 *request.Request, r1 *organizations.DeletePolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.DeletePolicyOutput)
	return
}

func (d *OrganizationsDouble) DeletePolicyWithContext(i0 context.Context, i1 *organizations.DeletePolicyInput, i2 ...request.Option) (r0 *organizations.DeletePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.DeletePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeDeletePolicyWithContext(ctx context.Context, in *organizations.DeletePolicyInput, _ ...request.Option) (*organizations.DeletePolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeletePolicy cancelled", ctx.Err())
	default:
		return d.DeletePolicy(in)
	}
}

func (d *OrganizationsDouble) DescribeAccount(i0 *organizations.DescribeAccountInput) (r0 *organizations.DescribeAccountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAccount", i0)
	r0, _ = returns[0].(*organizations.DescribeAccountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) DescribeAccountRequest(i0 *organizations.DescribeAccountInput) (r0 *request.Request, r1 *organizations.DescribeAccountOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAccountRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.DescribeAccountOutput)
	return
}

func (d *OrganizationsDouble) DescribeAccountWithContext(i0 context.Context, i1 *organizations.DescribeAccountInput, i2 ...request.Option) (r0 *organizations.DescribeAccountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAccountWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.DescribeAccountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeDescribeAccountWithContext(ctx context.Context, in *organizations.DescribeAccountInput, _ ...request.Option) (*organizations.DescribeAccountOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAccount cancelled", ctx.Err())
	default:
		return d.DescribeAccount(in)
	}
}

func (d *OrganizationsDouble) DescribeCreateAccountStatus(i0 *organizations.DescribeCreateAccountStatusInput) (r0 *organizations.DescribeCreateAccountStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCreateAccountStatus", i0)
	r0, _ = returns[0].(*organizations.DescribeCreateAccountStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) DescribeCreateAccountStatusRequest(i0 *organizations.DescribeCreateAccountStatusInput) (r0 *request.Request, r1 *organizations.DescribeCreateAccountStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCreateAccountStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.DescribeCreateAccountStatusOutput)
	return
}

func (d *OrganizationsDouble) DescribeCreateAccountStatusWithContext(i0 context.Context, i1 *organizations.DescribeCreateAccountStatusInput, i2 ...request.Option) (r0 *organizations.DescribeCreateAccountStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCreateAccountStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.DescribeCreateAccountStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeDescribeCreateAccountStatusWithContext(ctx context.Context, in *organizations.DescribeCreateAccountStatusInput, _ ...request.Option) (*organizations.DescribeCreateAccountStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeCreateAccountStatus cancelled", ctx.Err())
	default:
		return d.DescribeCreateAccountStatus(in)
	}
}

func (d *OrganizationsDouble) DescribeEffectivePolicy(i0 *organizations.DescribeEffectivePolicyInput) (r0 *organizations.DescribeEffectivePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEffectivePolicy", i0)
	r0, _ = returns[0].(*organizations.DescribeEffectivePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) DescribeEffectivePolicyRequest(i0 *organizations.DescribeEffectivePolicyInput) (r0 *request.Request, r1 *organizations.DescribeEffectivePolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEffectivePolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.DescribeEffectivePolicyOutput)
	return
}

func (d *OrganizationsDouble) DescribeEffectivePolicyWithContext(i0 context.Context, i1 *organizations.DescribeEffectivePolicyInput, i2 ...request.Option) (r0 *organizations.DescribeEffectivePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEffectivePolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.DescribeEffectivePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeDescribeEffectivePolicyWithContext(ctx context.Context, in *organizations.DescribeEffectivePolicyInput, _ ...request.Option) (*organizations.DescribeEffectivePolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEffectivePolicy cancelled", ctx.Err())
	default:
		return d.DescribeEffectivePolicy(in)
	}
}

func (d *OrganizationsDouble) DescribeHandshake(i0 *organizations.DescribeHandshakeInput) (r0 *organizations.DescribeHandshakeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHandshake", i0)
	r0, _ = returns[0].(*organizations.DescribeHandshakeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) DescribeHandshakeRequest(i0 *organizations.DescribeHandshakeInput) (r0 *request.Request, r1 *organizations.DescribeHandshakeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHandshakeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.DescribeHandshakeOutput)
	return
}

func (d *OrganizationsDouble) DescribeHandshakeWithContext(i0 context.Context, i1 *organizations.DescribeHandshakeInput, i2 ...request.Option) (r0 *organizations.DescribeHandshakeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHandshakeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.DescribeHandshakeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeDescribeHandshakeWithContext(ctx context.Context, in *organizations.DescribeHandshakeInput, _ ...request.Option) (*organizations.DescribeHandshakeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeHandshake cancelled", ctx.Err())
	default:
		return d.DescribeHandshake(in)
	}
}

func (d *OrganizationsDouble) DescribeOrganization(i0 *organizations.DescribeOrganizationInput) (r0 *organizations.DescribeOrganizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrganization", i0)
	r0, _ = returns[0].(*organizations.DescribeOrganizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) DescribeOrganizationRequest(i0 *organizations.DescribeOrganizationInput) (r0 *request.Request, r1 *organizations.DescribeOrganizationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrganizationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.DescribeOrganizationOutput)
	return
}

func (d *OrganizationsDouble) DescribeOrganizationWithContext(i0 context.Context, i1 *organizations.DescribeOrganizationInput, i2 ...request.Option) (r0 *organizations.DescribeOrganizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrganizationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.DescribeOrganizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeDescribeOrganizationWithContext(ctx context.Context, in *organizations.DescribeOrganizationInput, _ ...request.Option) (*organizations.DescribeOrganizationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeOrganization cancelled", ctx.Err())
	default:
		return d.DescribeOrganization(in)
	}
}

func (d *OrganizationsDouble) DescribeOrganizationalUnit(i0 *organizations.DescribeOrganizationalUnitInput) (r0 *organizations.DescribeOrganizationalUnitOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrganizationalUnit", i0)
	r0, _ = returns[0].(*organizations.DescribeOrganizationalUnitOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) DescribeOrganizationalUnitRequest(i0 *organizations.DescribeOrganizationalUnitInput) (r0 *request.Request, r1 *organizations.DescribeOrganizationalUnitOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrganizationalUnitRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.DescribeOrganizationalUnitOutput)
	return
}

func (d *OrganizationsDouble) DescribeOrganizationalUnitWithContext(i0 context.Context, i1 *organizations.DescribeOrganizationalUnitInput, i2 ...request.Option) (r0 *organizations.DescribeOrganizationalUnitOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrganizationalUnitWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.DescribeOrganizationalUnitOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeDescribeOrganizationalUnitWithContext(ctx context.Context, in *organizations.DescribeOrganizationalUnitInput, _ ...request.Option) (*organizations.DescribeOrganizationalUnitOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeOrganizationalUnit cancelled", ctx.Err())
	default:
		return d.DescribeOrganizationalUnit(in)
	}
}

func (d *OrganizationsDouble) DescribePolicy(i0 *organizations.DescribePolicyInput) (r0 *organizations.DescribePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePolicy", i0)
	r0, _ = returns[0].(*organizations.DescribePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) DescribePolicyRequest(i0 *organizations.DescribePolicyInput) (r0 *request.Request, r1 *organizations.DescribePolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.DescribePolicyOutput)
	return
}

func (d *OrganizationsDouble) DescribePolicyWithContext(i0 context.Context, i1 *organizations.DescribePolicyInput, i2 ...request.Option) (r0 *organizations.DescribePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.DescribePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeDescribePolicyWithContext(ctx context.Context, in *organizations.DescribePolicyInput, _ ...request.Option) (*organizations.DescribePolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribePolicy cancelled", ctx.Err())
	default:
		return d.DescribePolicy(in)
	}
}

func (d *OrganizationsDouble) DetachPolicy(i0 *organizations.DetachPolicyInput) (r0 *organizations.DetachPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachPolicy", i0)
	r0, _ = returns[0].(*organizations.DetachPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) DetachPolicyRequest(i0 *organizations.DetachPolicyInput) (r0 *request.Request, r1 *organizations.DetachPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.DetachPolicyOutput)
	return
}

func (d *OrganizationsDouble) DetachPolicyWithContext(i0 context.Context, i1 *organizations.DetachPolicyInput, i2 ...request.Option) (r0 *organizations.DetachPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.DetachPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeDetachPolicyWithContext(ctx context.Context, in *organizations.DetachPolicyInput, _ ...request.Option) (*organizations.DetachPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DetachPolicy cancelled", ctx.Err())
	default:
		return d.DetachPolicy(in)
	}
}

func (d *OrganizationsDouble) DisableAWSServiceAccess(i0 *organizations.DisableAWSServiceAccessInput) (r0 *organizations.DisableAWSServiceAccessOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableAWSServiceAccess", i0)
	r0, _ = returns[0].(*organizations.DisableAWSServiceAccessOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) DisableAWSServiceAccessRequest(i0 *organizations.DisableAWSServiceAccessInput) (r0 *request.Request, r1 *organizations.DisableAWSServiceAccessOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableAWSServiceAccessRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.DisableAWSServiceAccessOutput)
	return
}

func (d *OrganizationsDouble) DisableAWSServiceAccessWithContext(i0 context.Context, i1 *organizations.DisableAWSServiceAccessInput, i2 ...request.Option) (r0 *organizations.DisableAWSServiceAccessOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableAWSServiceAccessWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.DisableAWSServiceAccessOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeDisableAWSServiceAccessWithContext(ctx context.Context, in *organizations.DisableAWSServiceAccessInput, _ ...request.Option) (*organizations.DisableAWSServiceAccessOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisableAWSServiceAccess cancelled", ctx.Err())
	default:
		return d.DisableAWSServiceAccess(in)
	}
}

func (d *OrganizationsDouble) DisablePolicyType(i0 *organizations.DisablePolicyTypeInput) (r0 *organizations.DisablePolicyTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisablePolicyType", i0)
	r0, _ = returns[0].(*organizations.DisablePolicyTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) DisablePolicyTypeRequest(i0 *organizations.DisablePolicyTypeInput) (r0 *request.Request, r1 *organizations.DisablePolicyTypeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisablePolicyTypeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.DisablePolicyTypeOutput)
	return
}

func (d *OrganizationsDouble) DisablePolicyTypeWithContext(i0 context.Context, i1 *organizations.DisablePolicyTypeInput, i2 ...request.Option) (r0 *organizations.DisablePolicyTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisablePolicyTypeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.DisablePolicyTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeDisablePolicyTypeWithContext(ctx context.Context, in *organizations.DisablePolicyTypeInput, _ ...request.Option) (*organizations.DisablePolicyTypeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisablePolicyType cancelled", ctx.Err())
	default:
		return d.DisablePolicyType(in)
	}
}

func (d *OrganizationsDouble) EnableAWSServiceAccess(i0 *organizations.EnableAWSServiceAccessInput) (r0 *organizations.EnableAWSServiceAccessOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableAWSServiceAccess", i0)
	r0, _ = returns[0].(*organizations.EnableAWSServiceAccessOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) EnableAWSServiceAccessRequest(i0 *organizations.EnableAWSServiceAccessInput) (r0 *request.Request, r1 *organizations.EnableAWSServiceAccessOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableAWSServiceAccessRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.EnableAWSServiceAccessOutput)
	return
}

func (d *OrganizationsDouble) EnableAWSServiceAccessWithContext(i0 context.Context, i1 *organizations.EnableAWSServiceAccessInput, i2 ...request.Option) (r0 *organizations.EnableAWSServiceAccessOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableAWSServiceAccessWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.EnableAWSServiceAccessOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeEnableAWSServiceAccessWithContext(ctx context.Context, in *organizations.EnableAWSServiceAccessInput, _ ...request.Option) (*organizations.EnableAWSServiceAccessOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "EnableAWSServiceAccess cancelled", ctx.Err())
	default:
		return d.EnableAWSServiceAccess(in)
	}
}

func (d *OrganizationsDouble) EnableAllFeatures(i0 *organizations.EnableAllFeaturesInput) (r0 *organizations.EnableAllFeaturesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableAllFeatures", i0)
	r0, _ = returns[0].(*organizations.EnableAllFeaturesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) EnableAllFeaturesRequest(i0 *organizations.EnableAllFeaturesInput) (r0 *request.Request, r1 *organizations.EnableAllFeaturesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableAllFeaturesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.EnableAllFeaturesOutput)
	return
}

func (d *OrganizationsDouble) EnableAllFeaturesWithContext(i0 context.Context, i1 *organizations.EnableAllFeaturesInput, i2 ...request.Option) (r0 *organizations.EnableAllFeaturesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableAllFeaturesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.EnableAllFeaturesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeEnableAllFeaturesWithContext(ctx context.Context, in *organizations.EnableAllFeaturesInput, _ ...request.Option) (*organizations.EnableAllFeaturesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "EnableAllFeatures cancelled", ctx.Err())
	default:
		return d.EnableAllFeatures(in)
	}
}

func (d *OrganizationsDouble) EnablePolicyType(i0 *organizations.EnablePolicyTypeInput) (r0 *organizations.EnablePolicyTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnablePolicyType", i0)
	r0, _ = returns[0].(*organizations.EnablePolicyTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) EnablePolicyTypeRequest(i0 *organizations.EnablePolicyTypeInput) (r0 *request.Request, r1 *organizations.EnablePolicyTypeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnablePolicyTypeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.EnablePolicyTypeOutput)
	return
}

func (d *OrganizationsDouble) EnablePolicyTypeWithContext(i0 context.Context, i1 *organizations.EnablePolicyTypeInput, i2 ...request.Option) (r0 *organizations.EnablePolicyTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnablePolicyTypeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.EnablePolicyTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeEnablePolicyTypeWithContext(ctx context.Context, in *organizations.EnablePolicyTypeInput, _ ...request.Option) (*organizations.EnablePolicyTypeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "EnablePolicyType cancelled", ctx.Err())
	default:
		return d.EnablePolicyType(in)
	}
}

func (d *OrganizationsDouble) InviteAccountToOrganization(i0 *organizations.InviteAccountToOrganizationInput) (r0 *organizations.InviteAccountToOrganizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("InviteAccountToOrganization", i0)
	r0, _ = returns[0].(*organizations.InviteAccountToOrganizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) InviteAccountToOrganizationRequest(i0 *organizations.InviteAccountToOrganizationInput) (r0 *request.Request, r1 *organizations.InviteAccountToOrganizationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("InviteAccountToOrganizationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.InviteAccountToOrganizationOutput)
	return
}

func (d *OrganizationsDouble) InviteAccountToOrganizationWithContext(i0 context.Context, i1 *organizations.InviteAccountToOrganizationInput, i2 ...request.Option) (r0 *organizations.InviteAccountToOrganizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("InviteAccountToOrganizationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.InviteAccountToOrganizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeInviteAccountToOrganizationWithContext(ctx context.Context, in *organizations.InviteAccountToOrganizationInput, _ ...request.Option) (*organizations.InviteAccountToOrganizationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "InviteAccountToOrganization cancelled", ctx.Err())
	default:
		return d.InviteAccountToOrganization(in)
	}
}

func (d *OrganizationsDouble) LeaveOrganization(i0 *organizations.LeaveOrganizationInput) (r0 *organizations.LeaveOrganizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("LeaveOrganization", i0)
	r0, _ = returns[0].(*organizations.LeaveOrganizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) LeaveOrganizationRequest(i0 *organizations.LeaveOrganizationInput) (r0 *request.Request, r1 *organizations.LeaveOrganizationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("LeaveOrganizationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.LeaveOrganizationOutput)
	return
}

func (d *OrganizationsDouble) LeaveOrganizationWithContext(i0 context.Context, i1 *organizations.LeaveOrganizationInput, i2 ...request.Option) (r0 *organizations.LeaveOrganizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("LeaveOrganizationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.LeaveOrganizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeLeaveOrganizationWithContext(ctx context.Context, in *organizations.LeaveOrganizationInput, _ ...request.Option) (*organizations.LeaveOrganizationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "LeaveOrganization cancelled", ctx.Err())
	default:
		return d.LeaveOrganization(in)
	}
}

func (d *OrganizationsDouble) ListAWSServiceAccessForOrganization(i0 *organizations.ListAWSServiceAccessForOrganizationInput) (r0 *organizations.ListAWSServiceAccessForOrganizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAWSServiceAccessForOrganization", i0)
	r0, _ = returns[0].(*organizations.ListAWSServiceAccessForOrganizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) ListAWSServiceAccessForOrganizationPages(i0 *organizations.ListAWSServiceAccessForOrganizationInput, i1 func(*organizations.ListAWSServiceAccessForOrganizationOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAWSServiceAccessForOrganizationPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *OrganizationsDouble) fakeListAWSServiceAccessForOrganizationPages(in *organizations.ListAWSServiceAccessForOrganizationInput, pager func(*organizations.ListAWSServiceAccessForOrganizationOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListAWSServiceAccessForOrganization", paginators, in, pager)
}

func (d *OrganizationsDouble) ListAWSServiceAccessForOrganizationPagesWithContext(i0 context.Context, i1 *organizations.ListAWSServiceAccessForOrganizationInput, i2 func(*organizations.ListAWSServiceAccessForOrganizationOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAWSServiceAccessForOrganizationPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *OrganizationsDouble) fakeListAWSServiceAccessForOrganizationPagesWithContext(ctx context.Context, in *organizations.ListAWSServiceAccessForOrganizationInput, pager func(*organizations.ListAWSServiceAccessForOrganizationOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListAWSServiceAccessForOrganization", paginators, ctx, in, pager, options...)
}

func (d *OrganizationsDouble) ListAWSServiceAccessForOrganizationRequest(i0 *organizations.ListAWSServiceAccessForOrganizationInput) (r0 *request.Request, r1 *organizations.ListAWSServiceAccessForOrganizationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAWSServiceAccessForOrganizationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.ListAWSServiceAccessForOrganizationOutput)
	return
}

func (d *OrganizationsDouble) ListAWSServiceAccessForOrganizationWithContext(i0 context.Context, i1 *organizations.ListAWSServiceAccessForOrganizationInput, i2 ...request.Option) (r0 *organizations.ListAWSServiceAccessForOrganizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAWSServiceAccessForOrganizationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.ListAWSServiceAccessForOrganizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeListAWSServiceAccessForOrganizationWithContext(ctx context.Context, in *organizations.ListAWSServiceAccessForOrganizationInput, _ ...request.Option) (*organizations.ListAWSServiceAccessForOrganizationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAWSServiceAccessForOrganization cancelled", ctx.Err())
	default:
		return d.ListAWSServiceAccessForOrganization(in)
	}
}

func (d *OrganizationsDouble) ListAccounts(i0 *organizations.ListAccountsInput) (r0 *organizations.ListAccountsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAccounts", i0)
	r0, _ = returns[0].(*organizations.ListAccountsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) ListAccountsForParent(i0 *organizations.ListAccountsForParentInput) (r0 *organizations.ListAccountsForParentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAccountsForParent", i0)
	r0, _ = returns[0].(*organizations.ListAccountsForParentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) ListAccountsForParentPages(i0 *organizations.ListAccountsForParentInput, i1 func(*organizations.ListAccountsForParentOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAccountsForParentPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *OrganizationsDouble) fakeListAccountsForParentPages(in *organizations.ListAccountsForParentInput, pager func(*organizations.ListAccountsForParentOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListAccountsForParent", paginators, in, pager)
}

func (d *OrganizationsDouble) ListAccountsForParentPagesWithContext(i0 context.Context, i1 *organizations.ListAccountsForParentInput, i2 func(*organizations.ListAccountsForParentOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAccountsForParentPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *OrganizationsDouble) fakeListAccountsForParentPagesWithContext(ctx context.Context, in *organizations.ListAccountsForParentInput, pager func(*organizations.ListAccountsForParentOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListAccountsForParent", paginators, ctx, in, pager, options...)
}

func (d *OrganizationsDouble) ListAccountsForParentRequest(i0 *organizations.ListAccountsForParentInput) (r0 *request.Request, r1 *organizations.ListAccountsForParentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAccountsForParentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.ListAccountsForParentOutput)
	return
}

func (d *OrganizationsDouble) ListAccountsForParentWithContext(i0 context.Context, i1 *organizations.ListAccountsForParentInput, i2 ...request.Option) (r0 *organizations.ListAccountsForParentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAccountsForParentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.ListAccountsForParentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeListAccountsForParentWithContext(ctx context.Context, in *organizations.ListAccountsForParentInput, _ ...request.Option) (*organizations.ListAccountsForParentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAccountsForParent cancelled", ctx.Err())
	default:
		return d.ListAccountsForParent(in)
	}
}

func (d *OrganizationsDouble) ListAccountsPages(i0 *organizations.ListAccountsInput, i1 func(*organizations.ListAccountsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAccountsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *OrganizationsDouble) fakeListAccountsPages(in *organizations.ListAccountsInput, pager func(*organizations.ListAccountsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListAccounts", paginators, in, pager)
}

func (d *OrganizationsDouble) ListAccountsPagesWithContext(i0 context.Context, i1 *organizations.ListAccountsInput, i2 func(*organizations.ListAccountsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAccountsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *OrganizationsDouble) fakeListAccountsPagesWithContext(ctx context.Context, in *organizations.ListAccountsInput, pager func(*organizations.ListAccountsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListAccounts", paginators, ctx, in, pager, options...)
}

func (d *OrganizationsDouble) ListAccountsRequest(i0 *organizations.ListAccountsInput) (r0 *request.Request, r1 *organizations.ListAccountsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAccountsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.ListAccountsOutput)
	return
}

func (d *OrganizationsDouble) ListAccountsWithContext(i0 context.Context, i1 *organizations.ListAccountsInput, i2 ...request.Option) (r0 *organizations.ListAccountsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAccountsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.ListAccountsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeListAccountsWithContext(ctx context.Context, in *organizations.ListAccountsInput, _ ...request.Option) (*organizations.ListAccountsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAccounts cancelled", ctx.Err())
	default:
		return d.ListAccounts(in)
	}
}

func (d *OrganizationsDouble) ListChildren(i0 *organizations.ListChildrenInput) (r0 *organizations.ListChildrenOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListChildren", i0)
	r0, _ = returns[0].(*organizations.ListChildrenOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) ListChildrenPages(i0 *organizations.ListChildrenInput, i1 func(*organizations.ListChildrenOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListChildrenPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *OrganizationsDouble) fakeListChildrenPages(in *organizations.ListChildrenInput, pager func(*organizations.ListChildrenOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListChildren", paginators, in, pager)
}

func (d *OrganizationsDouble) ListChildrenPagesWithContext(i0 context.Context, i1 *organizations.ListChildrenInput, i2 func(*organizations.ListChildrenOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListChildrenPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *OrganizationsDouble) fakeListChildrenPagesWithContext(ctx context.Context, in *organizations.ListChildrenInput, pager func(*organizations.ListChildrenOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListChildren", paginators, ctx, in, pager, options...)
}

func (d *OrganizationsDouble) ListChildrenRequest(i0 *organizations.ListChildrenInput) (r0 *request.Request, r1 *organizations.ListChildrenOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListChildrenRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.ListChildrenOutput)
	return
}

func (d *OrganizationsDouble) ListChildrenWithContext(i0 context.Context, i1 *organizations.ListChildrenInput, i2 ...request.Option) (r0 *organizations.ListChildrenOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListChildrenWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.ListChildrenOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeListChildrenWithContext(ctx context.Context, in *organizations.ListChildrenInput, _ ...request.Option) (*organizations.ListChildrenOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListChildren cancelled", ctx.Err())
	default:
		return d.ListChildren(in)
	}
}

func (d *OrganizationsDouble) ListCreateAccountStatus(i0 *organizations.ListCreateAccountStatusInput) (r0 *organizations.ListCreateAccountStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCreateAccountStatus", i0)
	r0, _ = returns[0].(*organizations.ListCreateAccountStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) ListCreateAccountStatusPages(i0 *organizations.ListCreateAccountStatusInput, i1 func(*organizations.ListCreateAccountStatusOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCreateAccountStatusPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *OrganizationsDouble) fakeListCreateAccountStatusPages(in *organizations.ListCreateAccountStatusInput, pager func(*organizations.ListCreateAccountStatusOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListCreateAccountStatus", paginators, in, pager)
}

func (d *OrganizationsDouble) ListCreateAccountStatusPagesWithContext(i0 context.Context, i1 *organizations.ListCreateAccountStatusInput, i2 func(*organizations.ListCreateAccountStatusOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCreateAccountStatusPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *OrganizationsDouble) fakeListCreateAccountStatusPagesWithContext(ctx context.Context, in *organizations.ListCreateAccountStatusInput, pager func(*organizations.ListCreateAccountStatusOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListCreateAccountStatus", paginators, ctx, in, pager, options...)
}

func (d *OrganizationsDouble) ListCreateAccountStatusRequest(i0 *organizations.ListCreateAccountStatusInput) (r0 *request.Request, r1 *organizations.ListCreateAccountStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCreateAccountStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.ListCreateAccountStatusOutput)
	return
}

func (d *OrganizationsDouble) ListCreateAccountStatusWithContext(i0 context.Context, i1 *organizations.ListCreateAccountStatusInput, i2 ...request.Option) (r0 *organizations.ListCreateAccountStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCreateAccountStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.ListCreateAccountStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeListCreateAccountStatusWithContext(ctx context.Context, in *organizations.ListCreateAccountStatusInput, _ ...request.Option) (*organizations.ListCreateAccountStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListCreateAccountStatus cancelled", ctx.Err())
	default:
		return d.ListCreateAccountStatus(in)
	}
}

func (d *OrganizationsDouble) ListHandshakesForAccount(i0 *organizations.ListHandshakesForAccountInput) (r0 *organizations.ListHandshakesForAccountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHandshakesForAccount", i0)
	r0, _ = returns[0].(*organizations.ListHandshakesForAccountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) ListHandshakesForAccountPages(i0 *organizations.ListHandshakesForAccountInput, i1 func(*organizations.ListHandshakesForAccountOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHandshakesForAccountPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *OrganizationsDouble) fakeListHandshakesForAccountPages(in *organizations.ListHandshakesForAccountInput, pager func(*organizations.ListHandshakesForAccountOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListHandshakesForAccount", paginators, in, pager)
}

func (d *OrganizationsDouble) ListHandshakesForAccountPagesWithContext(i0 context.Context, i1 *organizations.ListHandshakesForAccountInput, i2 func(*organizations.ListHandshakesForAccountOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHandshakesForAccountPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *OrganizationsDouble) fakeListHandshakesForAccountPagesWithContext(ctx context.Context, in *organizations.ListHandshakesForAccountInput, pager func(*organizations.ListHandshakesForAccountOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListHandshakesForAccount", paginators, ctx, in, pager, options...)
}

func (d *OrganizationsDouble) ListHandshakesForAccountRequest(i0 *organizations.ListHandshakesForAccountInput) (r0 *request.Request, r1 *organizations.ListHandshakesForAccountOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHandshakesForAccountRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.ListHandshakesForAccountOutput)
	return
}

func (d *OrganizationsDouble) ListHandshakesForAccountWithContext(i0 context.Context, i1 *organizations.ListHandshakesForAccountInput, i2 ...request.Option) (r0 *organizations.ListHandshakesForAccountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHandshakesForAccountWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.ListHandshakesForAccountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeListHandshakesForAccountWithContext(ctx context.Context, in *organizations.ListHandshakesForAccountInput, _ ...request.Option) (*organizations.ListHandshakesForAccountOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListHandshakesForAccount cancelled", ctx.Err())
	default:
		return d.ListHandshakesForAccount(in)
	}
}

func (d *OrganizationsDouble) ListHandshakesForOrganization(i0 *organizations.ListHandshakesForOrganizationInput) (r0 *organizations.ListHandshakesForOrganizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHandshakesForOrganization", i0)
	r0, _ = returns[0].(*organizations.ListHandshakesForOrganizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) ListHandshakesForOrganizationPages(i0 *organizations.ListHandshakesForOrganizationInput, i1 func(*organizations.ListHandshakesForOrganizationOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHandshakesForOrganizationPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *OrganizationsDouble) fakeListHandshakesForOrganizationPages(in *organizations.ListHandshakesForOrganizationInput, pager func(*organizations.ListHandshakesForOrganizationOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListHandshakesForOrganization", paginators, in, pager)
}

func (d *OrganizationsDouble) ListHandshakesForOrganizationPagesWithContext(i0 context.Context, i1 *organizations.ListHandshakesForOrganizationInput, i2 func(*organizations.ListHandshakesForOrganizationOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHandshakesForOrganizationPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *OrganizationsDouble) fakeListHandshakesForOrganizationPagesWithContext(ctx context.Context, in *organizations.ListHandshakesForOrganizationInput, pager func(*organizations.ListHandshakesForOrganizationOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListHandshakesForOrganization", paginators, ctx, in, pager, options...)
}

func (d *OrganizationsDouble) ListHandshakesForOrganizationRequest(i0 *organizations.ListHandshakesForOrganizationInput) (r0 *request.Request, r1 *organizations.ListHandshakesForOrganizationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHandshakesForOrganizationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.ListHandshakesForOrganizationOutput)
	return
}

func (d *OrganizationsDouble) ListHandshakesForOrganizationWithContext(i0 context.Context, i1 *organizations.ListHandshakesForOrganizationInput, i2 ...request.Option) (r0 *organizations.ListHandshakesForOrganizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHandshakesForOrganizationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.ListHandshakesForOrganizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeListHandshakesForOrganizationWithContext(ctx context.Context, in *organizations.ListHandshakesForOrganizationInput, _ ...request.Option) (*organizations.ListHandshakesForOrganizationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListHandshakesForOrganization cancelled", ctx.Err())
	default:
		return d.ListHandshakesForOrganization(in)
	}
}

func (d *OrganizationsDouble) ListOrganizationalUnitsForParent(i0 *organizations.ListOrganizationalUnitsForParentInput) (r0 *organizations.ListOrganizationalUnitsForParentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOrganizationalUnitsForParent", i0)
	r0, _ = returns[0].(*organizations.ListOrganizationalUnitsForParentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) ListOrganizationalUnitsForParentPages(i0 *organizations.ListOrganizationalUnitsForParentInput, i1 func(*organizations.ListOrganizationalUnitsForParentOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOrganizationalUnitsForParentPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *OrganizationsDouble) fakeListOrganizationalUnitsForParentPages(in *organizations.ListOrganizationalUnitsForParentInput, pager func(*organizations.ListOrganizationalUnitsForParentOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListOrganizationalUnitsForParent", paginators, in, pager)
}

func (d *OrganizationsDouble) ListOrganizationalUnitsForParentPagesWithContext(i0 context.Context, i1 *organizations.ListOrganizationalUnitsForParentInput, i2 func(*organizations.ListOrganizationalUnitsForParentOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOrganizationalUnitsForParentPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *OrganizationsDouble) fakeListOrganizationalUnitsForParentPagesWithContext(ctx context.Context, in *organizations.ListOrganizationalUnitsForParentInput, pager func(*organizations.ListOrganizationalUnitsForParentOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListOrganizationalUnitsForParent", paginators, ctx, in, pager, options...)
}

func (d *OrganizationsDouble) ListOrganizationalUnitsForParentRequest(i0 *organizations.ListOrganizationalUnitsForParentInput) (r0 *request.Request, r1 *organizations.ListOrganizationalUnitsForParentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOrganizationalUnitsForParentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.ListOrganizationalUnitsForParentOutput)
	return
}

func (d *OrganizationsDouble) ListOrganizationalUnitsForParentWithContext(i0 context.Context, i1 *organizations.ListOrganizationalUnitsForParentInput, i2 ...request.Option) (r0 *organizations.ListOrganizationalUnitsForParentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOrganizationalUnitsForParentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.ListOrganizationalUnitsForParentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeListOrganizationalUnitsForParentWithContext(ctx context.Context, in *organizations.ListOrganizationalUnitsForParentInput, _ ...request.Option) (*organizations.ListOrganizationalUnitsForParentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListOrganizationalUnitsForParent cancelled", ctx.Err())
	default:
		return d.ListOrganizationalUnitsForParent(in)
	}
}

func (d *OrganizationsDouble) ListParents(i0 *organizations.ListParentsInput) (r0 *organizations.ListParentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListParents", i0)
	r0, _ = returns[0].(*organizations.ListParentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) ListParentsPages(i0 *organizations.ListParentsInput, i1 func(*organizations.ListParentsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListParentsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *OrganizationsDouble) fakeListParentsPages(in *organizations.ListParentsInput, pager func(*organizations.ListParentsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListParents", paginators, in, pager)
}

func (d *OrganizationsDouble) ListParentsPagesWithContext(i0 context.Context, i1 *organizations.ListParentsInput, i2 func(*organizations.ListParentsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListParentsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *OrganizationsDouble) fakeListParentsPagesWithContext(ctx context.Context, in *organizations.ListParentsInput, pager func(*organizations.ListParentsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListParents", paginators, ctx, in, pager, options...)
}

func (d *OrganizationsDouble) ListParentsRequest(i0 *organizations.ListParentsInput) (r0 *request.Request, r1 *organizations.ListParentsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListParentsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.ListParentsOutput)
	return
}

func (d *OrganizationsDouble) ListParentsWithContext(i0 context.Context, i1 *organizations.ListParentsInput, i2 ...request.Option) (r0 *organizations.ListParentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListParentsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.ListParentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeListParentsWithContext(ctx context.Context, in *organizations.ListParentsInput, _ ...request.Option) (*organizations.ListParentsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListParents cancelled", ctx.Err())
	default:
		return d.ListParents(in)
	}
}

func (d *OrganizationsDouble) ListPolicies(i0 *organizations.ListPoliciesInput) (r0 *organizations.ListPoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPolicies", i0)
	r0, _ = returns[0].(*organizations.ListPoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) ListPoliciesForTarget(i0 *organizations.ListPoliciesForTargetInput) (r0 *organizations.ListPoliciesForTargetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPoliciesForTarget", i0)
	r0, _ = returns[0].(*organizations.ListPoliciesForTargetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) ListPoliciesForTargetPages(i0 *organizations.ListPoliciesForTargetInput, i1 func(*organizations.ListPoliciesForTargetOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPoliciesForTargetPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *OrganizationsDouble) fakeListPoliciesForTargetPages(in *organizations.ListPoliciesForTargetInput, pager func(*organizations.ListPoliciesForTargetOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListPoliciesForTarget", paginators, in, pager)
}

func (d *OrganizationsDouble) ListPoliciesForTargetPagesWithContext(i0 context.Context, i1 *organizations.ListPoliciesForTargetInput, i2 func(*organizations.ListPoliciesForTargetOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPoliciesForTargetPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *OrganizationsDouble) fakeListPoliciesForTargetPagesWithContext(ctx context.Context, in *organizations.ListPoliciesForTargetInput, pager func(*organizations.ListPoliciesForTargetOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListPoliciesForTarget", paginators, ctx, in, pager, options...)
}

func (d *OrganizationsDouble) ListPoliciesForTargetRequest(i0 *organizations.ListPoliciesForTargetInput) (r0 *request.Request, r1 *organizations.ListPoliciesForTargetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPoliciesForTargetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.ListPoliciesForTargetOutput)
	return
}

func (d *OrganizationsDouble) ListPoliciesForTargetWithContext(i0 context.Context, i1 *organizations.ListPoliciesForTargetInput, i2 ...request.Option) (r0 *organizations.ListPoliciesForTargetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPoliciesForTargetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.ListPoliciesForTargetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeListPoliciesForTargetWithContext(ctx context.Context, in *organizations.ListPoliciesForTargetInput, _ ...request.Option) (*organizations.ListPoliciesForTargetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListPoliciesForTarget cancelled", ctx.Err())
	default:
		return d.ListPoliciesForTarget(in)
	}
}

func (d *OrganizationsDouble) ListPoliciesPages(i0 *organizations.ListPoliciesInput, i1 func(*organizations.ListPoliciesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPoliciesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *OrganizationsDouble) fakeListPoliciesPages(in *organizations.ListPoliciesInput, pager func(*organizations.ListPoliciesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListPolicies", paginators, in, pager)
}

func (d *OrganizationsDouble) ListPoliciesPagesWithContext(i0 context.Context, i1 *organizations.ListPoliciesInput, i2 func(*organizations.ListPoliciesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPoliciesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *OrganizationsDouble) fakeListPoliciesPagesWithContext(ctx context.Context, in *organizations.ListPoliciesInput, pager func(*organizations.ListPoliciesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListPolicies", paginators, ctx, in, pager, options...)
}

func (d *OrganizationsDouble) ListPoliciesRequest(i0 *organizations.ListPoliciesInput) (r0 *request.Request, r1 *organizations.ListPoliciesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPoliciesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.ListPoliciesOutput)
	return
}

func (d *OrganizationsDouble) ListPoliciesWithContext(i0 context.Context, i1 *organizations.ListPoliciesInput, i2 ...request.Option) (r0 *organizations.ListPoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPoliciesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.ListPoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeListPoliciesWithContext(ctx context.Context, in *organizations.ListPoliciesInput, _ ...request.Option) (*organizations.ListPoliciesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListPolicies cancelled", ctx.Err())
	default:
		return d.ListPolicies(in)
	}
}

func (d *OrganizationsDouble) ListRoots(i0 *organizations.ListRootsInput) (r0 *organizations.ListRootsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRoots", i0)
	r0, _ = returns[0].(*organizations.ListRootsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) ListRootsPages(i0 *organizations.ListRootsInput, i1 func(*organizations.ListRootsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRootsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *OrganizationsDouble) fakeListRootsPages(in *organizations.ListRootsInput, pager func(*organizations.ListRootsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListRoots", paginators, in, pager)
}

func (d *OrganizationsDouble) ListRootsPagesWithContext(i0 context.Context, i1 *organizations.ListRootsInput, i2 func(*organizations.ListRootsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRootsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *OrganizationsDouble) fakeListRootsPagesWithContext(ctx context.Context, in *organizations.ListRootsInput, pager func(*organizations.ListRootsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListRoots", paginators, ctx, in, pager, options...)
}

func (d *OrganizationsDouble) ListRootsRequest(i0 *organizations.ListRootsInput) (r0 *request.Request, r1 *organizations.ListRootsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRootsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.ListRootsOutput)
	return
}

func (d *OrganizationsDouble) ListRootsWithContext(i0 context.Context, i1 *organizations.ListRootsInput, i2 ...request.Option) (r0 *organizations.ListRootsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRootsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.ListRootsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeListRootsWithContext(ctx context.Context, in *organizations.ListRootsInput, _ ...request.Option) (*organizations.ListRootsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListRoots cancelled", ctx.Err())
	default:
		return d.ListRoots(in)
	}
}

func (d *OrganizationsDouble) ListTagsForResource(i0 *organizations.ListTagsForResourceInput) (r0 *organizations.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*organizations.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) ListTagsForResourcePages(i0 *organizations.ListTagsForResourceInput, i1 func(*organizations.ListTagsForResourceOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourcePages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *OrganizationsDouble) fakeListTagsForResourcePages(in *organizations.ListTagsForResourceInput, pager func(*organizations.ListTagsForResourceOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTagsForResource", paginators, in, pager)
}

func (d *OrganizationsDouble) ListTagsForResourcePagesWithContext(i0 context.Context, i1 *organizations.ListTagsForResourceInput, i2 func(*organizations.ListTagsForResourceOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourcePagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *OrganizationsDouble) fakeListTagsForResourcePagesWithContext(ctx context.Context, in *organizations.ListTagsForResourceInput, pager func(*organizations.ListTagsForResourceOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTagsForResource", paginators, ctx, in, pager, options...)
}

func (d *OrganizationsDouble) ListTagsForResourceRequest(i0 *organizations.ListTagsForResourceInput) (r0 *request.Request, r1 *organizations.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.ListTagsForResourceOutput)
	return
}

func (d *OrganizationsDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *organizations.ListTagsForResourceInput, i2 ...request.Option) (r0 *organizations.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *organizations.ListTagsForResourceInput, _ ...request.Option) (*organizations.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *OrganizationsDouble) ListTargetsForPolicy(i0 *organizations.ListTargetsForPolicyInput) (r0 *organizations.ListTargetsForPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTargetsForPolicy", i0)
	r0, _ = returns[0].(*organizations.ListTargetsForPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) ListTargetsForPolicyPages(i0 *organizations.ListTargetsForPolicyInput, i1 func(*organizations.ListTargetsForPolicyOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTargetsForPolicyPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *OrganizationsDouble) fakeListTargetsForPolicyPages(in *organizations.ListTargetsForPolicyInput, pager func(*organizations.ListTargetsForPolicyOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTargetsForPolicy", paginators, in, pager)
}

func (d *OrganizationsDouble) ListTargetsForPolicyPagesWithContext(i0 context.Context, i1 *organizations.ListTargetsForPolicyInput, i2 func(*organizations.ListTargetsForPolicyOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTargetsForPolicyPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *OrganizationsDouble) fakeListTargetsForPolicyPagesWithContext(ctx context.Context, in *organizations.ListTargetsForPolicyInput, pager func(*organizations.ListTargetsForPolicyOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTargetsForPolicy", paginators, ctx, in, pager, options...)
}

func (d *OrganizationsDouble) ListTargetsForPolicyRequest(i0 *organizations.ListTargetsForPolicyInput) (r0 *request.Request, r1 *organizations.ListTargetsForPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTargetsForPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.ListTargetsForPolicyOutput)
	return
}

func (d *OrganizationsDouble) ListTargetsForPolicyWithContext(i0 context.Context, i1 *organizations.ListTargetsForPolicyInput, i2 ...request.Option) (r0 *organizations.ListTargetsForPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTargetsForPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.ListTargetsForPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeListTargetsForPolicyWithContext(ctx context.Context, in *organizations.ListTargetsForPolicyInput, _ ...request.Option) (*organizations.ListTargetsForPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTargetsForPolicy cancelled", ctx.Err())
	default:
		return d.ListTargetsForPolicy(in)
	}
}

func (d *OrganizationsDouble) MoveAccount(i0 *organizations.MoveAccountInput) (r0 *organizations.MoveAccountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("MoveAccount", i0)
	r0, _ = returns[0].(*organizations.MoveAccountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) MoveAccountRequest(i0 *organizations.MoveAccountInput) (r0 *request.Request, r1 *organizations.MoveAccountOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("MoveAccountRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.MoveAccountOutput)
	return
}

func (d *OrganizationsDouble) MoveAccountWithContext(i0 context.Context, i1 *organizations.MoveAccountInput, i2 ...request.Option) (r0 *organizations.MoveAccountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("MoveAccountWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.MoveAccountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeMoveAccountWithContext(ctx context.Context, in *organizations.MoveAccountInput, _ ...request.Option) (*organizations.MoveAccountOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "MoveAccount cancelled", ctx.Err())
	default:
		return d.MoveAccount(in)
	}
}

func (d *OrganizationsDouble) RemoveAccountFromOrganization(i0 *organizations.RemoveAccountFromOrganizationInput) (r0 *organizations.RemoveAccountFromOrganizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveAccountFromOrganization", i0)
	r0, _ = returns[0].(*organizations.RemoveAccountFromOrganizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) RemoveAccountFromOrganizationRequest(i0 *organizations.RemoveAccountFromOrganizationInput) (r0 *request.Request, r1 *organizations.RemoveAccountFromOrganizationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveAccountFromOrganizationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.RemoveAccountFromOrganizationOutput)
	return
}

func (d *OrganizationsDouble) RemoveAccountFromOrganizationWithContext(i0 context.Context, i1 *organizations.RemoveAccountFromOrganizationInput, i2 ...request.Option) (r0 *organizations.RemoveAccountFromOrganizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveAccountFromOrganizationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.RemoveAccountFromOrganizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeRemoveAccountFromOrganizationWithContext(ctx context.Context, in *organizations.RemoveAccountFromOrganizationInput, _ ...request.Option) (*organizations.RemoveAccountFromOrganizationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveAccountFromOrganization cancelled", ctx.Err())
	default:
		return d.RemoveAccountFromOrganization(in)
	}
}

func (d *OrganizationsDouble) TagResource(i0 *organizations.TagResourceInput) (r0 *organizations.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*organizations.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) TagResourceRequest(i0 *organizations.TagResourceInput) (r0 *request.Request, r1 *organizations.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.TagResourceOutput)
	return
}

func (d *OrganizationsDouble) TagResourceWithContext(i0 context.Context, i1 *organizations.TagResourceInput, i2 ...request.Option) (r0 *organizations.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeTagResourceWithContext(ctx context.Context, in *organizations.TagResourceInput, _ ...request.Option) (*organizations.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *OrganizationsDouble) UntagResource(i0 *organizations.UntagResourceInput) (r0 *organizations.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*organizations.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) UntagResourceRequest(i0 *organizations.UntagResourceInput) (r0 *request.Request, r1 *organizations.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.UntagResourceOutput)
	return
}

func (d *OrganizationsDouble) UntagResourceWithContext(i0 context.Context, i1 *organizations.UntagResourceInput, i2 ...request.Option) (r0 *organizations.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeUntagResourceWithContext(ctx context.Context, in *organizations.UntagResourceInput, _ ...request.Option) (*organizations.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *OrganizationsDouble) UpdateOrganizationalUnit(i0 *organizations.UpdateOrganizationalUnitInput) (r0 *organizations.UpdateOrganizationalUnitOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateOrganizationalUnit", i0)
	r0, _ = returns[0].(*organizations.UpdateOrganizationalUnitOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) UpdateOrganizationalUnitRequest(i0 *organizations.UpdateOrganizationalUnitInput) (r0 *request.Request, r1 *organizations.UpdateOrganizationalUnitOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateOrganizationalUnitRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.UpdateOrganizationalUnitOutput)
	return
}

func (d *OrganizationsDouble) UpdateOrganizationalUnitWithContext(i0 context.Context, i1 *organizations.UpdateOrganizationalUnitInput, i2 ...request.Option) (r0 *organizations.UpdateOrganizationalUnitOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateOrganizationalUnitWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.UpdateOrganizationalUnitOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeUpdateOrganizationalUnitWithContext(ctx context.Context, in *organizations.UpdateOrganizationalUnitInput, _ ...request.Option) (*organizations.UpdateOrganizationalUnitOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateOrganizationalUnit cancelled", ctx.Err())
	default:
		return d.UpdateOrganizationalUnit(in)
	}
}

func (d *OrganizationsDouble) UpdatePolicy(i0 *organizations.UpdatePolicyInput) (r0 *organizations.UpdatePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePolicy", i0)
	r0, _ = returns[0].(*organizations.UpdatePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) UpdatePolicyRequest(i0 *organizations.UpdatePolicyInput) (r0 *request.Request, r1 *organizations.UpdatePolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*organizations.UpdatePolicyOutput)
	return
}

func (d *OrganizationsDouble) UpdatePolicyWithContext(i0 context.Context, i1 *organizations.UpdatePolicyInput, i2 ...request.Option) (r0 *organizations.UpdatePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*organizations.UpdatePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OrganizationsDouble) fakeUpdatePolicyWithContext(ctx context.Context, in *organizations.UpdatePolicyInput, _ ...request.Option) (*organizations.UpdatePolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdatePolicy cancelled", ctx.Err())
	default:
		return d.UpdatePolicy(in)
	}
}
