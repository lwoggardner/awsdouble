// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:11:14+11:00

// Package applicationinsightsdouble provides a TestDouble implementation of applicationinsightsiface.ApplicationInsightsAPI
package applicationinsightsdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/applicationinsights"
	"github.com/aws/aws-sdk-go/service/applicationinsights/applicationinsightsiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// ApplicationInsightsDouble is TestDouble for applicationinsightsiface.ApplicationInsightsAPI
type ApplicationInsightsDouble struct {
	applicationinsightsiface.ApplicationInsightsAPI
	*awsdouble.AWSTestDouble
}

// Constructor for ApplicationInsightsDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *ApplicationInsightsDouble {
	result := &ApplicationInsightsDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*applicationinsightsiface.ApplicationInsightsAPI)(nil), configurators...)
	return result
}

func (d *ApplicationInsightsDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *ApplicationInsightsDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CreateApplicationWithContext":
		return m.Fake(d.fakeCreateApplicationWithContext)

	case "CreateComponentWithContext":
		return m.Fake(d.fakeCreateComponentWithContext)

	case "CreateLogPatternWithContext":
		return m.Fake(d.fakeCreateLogPatternWithContext)

	case "DeleteApplicationWithContext":
		return m.Fake(d.fakeDeleteApplicationWithContext)

	case "DeleteComponentWithContext":
		return m.Fake(d.fakeDeleteComponentWithContext)

	case "DeleteLogPatternWithContext":
		return m.Fake(d.fakeDeleteLogPatternWithContext)

	case "DescribeApplicationWithContext":
		return m.Fake(d.fakeDescribeApplicationWithContext)

	case "DescribeComponentConfigurationRecommendationWithContext":
		return m.Fake(d.fakeDescribeComponentConfigurationRecommendationWithContext)

	case "DescribeComponentConfigurationWithContext":
		return m.Fake(d.fakeDescribeComponentConfigurationWithContext)

	case "DescribeComponentWithContext":
		return m.Fake(d.fakeDescribeComponentWithContext)

	case "DescribeLogPatternWithContext":
		return m.Fake(d.fakeDescribeLogPatternWithContext)

	case "DescribeObservationWithContext":
		return m.Fake(d.fakeDescribeObservationWithContext)

	case "DescribeProblemObservationsWithContext":
		return m.Fake(d.fakeDescribeProblemObservationsWithContext)

	case "DescribeProblemWithContext":
		return m.Fake(d.fakeDescribeProblemWithContext)

	case "ListApplicationsPages":
		return m.Fake(d.fakeListApplicationsPages)

	case "ListApplicationsPagesWithContext":
		return m.Fake(d.fakeListApplicationsPagesWithContext)

	case "ListApplicationsWithContext":
		return m.Fake(d.fakeListApplicationsWithContext)

	case "ListComponentsPages":
		return m.Fake(d.fakeListComponentsPages)

	case "ListComponentsPagesWithContext":
		return m.Fake(d.fakeListComponentsPagesWithContext)

	case "ListComponentsWithContext":
		return m.Fake(d.fakeListComponentsWithContext)

	case "ListConfigurationHistoryPages":
		return m.Fake(d.fakeListConfigurationHistoryPages)

	case "ListConfigurationHistoryPagesWithContext":
		return m.Fake(d.fakeListConfigurationHistoryPagesWithContext)

	case "ListConfigurationHistoryWithContext":
		return m.Fake(d.fakeListConfigurationHistoryWithContext)

	case "ListLogPatternSetsPages":
		return m.Fake(d.fakeListLogPatternSetsPages)

	case "ListLogPatternSetsPagesWithContext":
		return m.Fake(d.fakeListLogPatternSetsPagesWithContext)

	case "ListLogPatternSetsWithContext":
		return m.Fake(d.fakeListLogPatternSetsWithContext)

	case "ListLogPatternsPages":
		return m.Fake(d.fakeListLogPatternsPages)

	case "ListLogPatternsPagesWithContext":
		return m.Fake(d.fakeListLogPatternsPagesWithContext)

	case "ListLogPatternsWithContext":
		return m.Fake(d.fakeListLogPatternsWithContext)

	case "ListProblemsPages":
		return m.Fake(d.fakeListProblemsPages)

	case "ListProblemsPagesWithContext":
		return m.Fake(d.fakeListProblemsPagesWithContext)

	case "ListProblemsWithContext":
		return m.Fake(d.fakeListProblemsWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateApplicationWithContext":
		return m.Fake(d.fakeUpdateApplicationWithContext)

	case "UpdateComponentConfigurationWithContext":
		return m.Fake(d.fakeUpdateComponentConfigurationWithContext)

	case "UpdateComponentWithContext":
		return m.Fake(d.fakeUpdateComponentWithContext)

	case "UpdateLogPatternWithContext":
		return m.Fake(d.fakeUpdateLogPatternWithContext)

	default:
		return nil
	}
}

func (d *ApplicationInsightsDouble) CreateApplication(i0 *applicationinsights.CreateApplicationInput) (r0 *applicationinsights.CreateApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApplication", i0)
	r0, _ = returns[0].(*applicationinsights.CreateApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) CreateApplicationRequest(i0 *applicationinsights.CreateApplicationInput) (r0 *request.Request, r1 *applicationinsights.CreateApplicationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApplicationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*applicationinsights.CreateApplicationOutput)
	return
}

func (d *ApplicationInsightsDouble) CreateApplicationWithContext(i0 context.Context, i1 *applicationinsights.CreateApplicationInput, i2 ...request.Option) (r0 *applicationinsights.CreateApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApplicationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*applicationinsights.CreateApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeCreateApplicationWithContext(ctx context.Context, in *applicationinsights.CreateApplicationInput, _ ...request.Option) (*applicationinsights.CreateApplicationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateApplication cancelled", ctx.Err())
	default:
		return d.CreateApplication(in)
	}
}

func (d *ApplicationInsightsDouble) CreateComponent(i0 *applicationinsights.CreateComponentInput) (r0 *applicationinsights.CreateComponentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateComponent", i0)
	r0, _ = returns[0].(*applicationinsights.CreateComponentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) CreateComponentRequest(i0 *applicationinsights.CreateComponentInput) (r0 *request.Request, r1 *applicationinsights.CreateComponentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateComponentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*applicationinsights.CreateComponentOutput)
	return
}

func (d *ApplicationInsightsDouble) CreateComponentWithContext(i0 context.Context, i1 *applicationinsights.CreateComponentInput, i2 ...request.Option) (r0 *applicationinsights.CreateComponentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateComponentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*applicationinsights.CreateComponentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeCreateComponentWithContext(ctx context.Context, in *applicationinsights.CreateComponentInput, _ ...request.Option) (*applicationinsights.CreateComponentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateComponent cancelled", ctx.Err())
	default:
		return d.CreateComponent(in)
	}
}

func (d *ApplicationInsightsDouble) CreateLogPattern(i0 *applicationinsights.CreateLogPatternInput) (r0 *applicationinsights.CreateLogPatternOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLogPattern", i0)
	r0, _ = returns[0].(*applicationinsights.CreateLogPatternOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) CreateLogPatternRequest(i0 *applicationinsights.CreateLogPatternInput) (r0 *request.Request, r1 *applicationinsights.CreateLogPatternOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLogPatternRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*applicationinsights.CreateLogPatternOutput)
	return
}

func (d *ApplicationInsightsDouble) CreateLogPatternWithContext(i0 context.Context, i1 *applicationinsights.CreateLogPatternInput, i2 ...request.Option) (r0 *applicationinsights.CreateLogPatternOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLogPatternWithContext", i0, i1, i2)
	r0, _ = returns[0].(*applicationinsights.CreateLogPatternOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeCreateLogPatternWithContext(ctx context.Context, in *applicationinsights.CreateLogPatternInput, _ ...request.Option) (*applicationinsights.CreateLogPatternOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateLogPattern cancelled", ctx.Err())
	default:
		return d.CreateLogPattern(in)
	}
}

func (d *ApplicationInsightsDouble) DeleteApplication(i0 *applicationinsights.DeleteApplicationInput) (r0 *applicationinsights.DeleteApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApplication", i0)
	r0, _ = returns[0].(*applicationinsights.DeleteApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) DeleteApplicationRequest(i0 *applicationinsights.DeleteApplicationInput) (r0 *request.Request, r1 *applicationinsights.DeleteApplicationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApplicationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*applicationinsights.DeleteApplicationOutput)
	return
}

func (d *ApplicationInsightsDouble) DeleteApplicationWithContext(i0 context.Context, i1 *applicationinsights.DeleteApplicationInput, i2 ...request.Option) (r0 *applicationinsights.DeleteApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApplicationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*applicationinsights.DeleteApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeDeleteApplicationWithContext(ctx context.Context, in *applicationinsights.DeleteApplicationInput, _ ...request.Option) (*applicationinsights.DeleteApplicationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteApplication cancelled", ctx.Err())
	default:
		return d.DeleteApplication(in)
	}
}

func (d *ApplicationInsightsDouble) DeleteComponent(i0 *applicationinsights.DeleteComponentInput) (r0 *applicationinsights.DeleteComponentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteComponent", i0)
	r0, _ = returns[0].(*applicationinsights.DeleteComponentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) DeleteComponentRequest(i0 *applicationinsights.DeleteComponentInput) (r0 *request.Request, r1 *applicationinsights.DeleteComponentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteComponentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*applicationinsights.DeleteComponentOutput)
	return
}

func (d *ApplicationInsightsDouble) DeleteComponentWithContext(i0 context.Context, i1 *applicationinsights.DeleteComponentInput, i2 ...request.Option) (r0 *applicationinsights.DeleteComponentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteComponentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*applicationinsights.DeleteComponentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeDeleteComponentWithContext(ctx context.Context, in *applicationinsights.DeleteComponentInput, _ ...request.Option) (*applicationinsights.DeleteComponentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteComponent cancelled", ctx.Err())
	default:
		return d.DeleteComponent(in)
	}
}

func (d *ApplicationInsightsDouble) DeleteLogPattern(i0 *applicationinsights.DeleteLogPatternInput) (r0 *applicationinsights.DeleteLogPatternOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLogPattern", i0)
	r0, _ = returns[0].(*applicationinsights.DeleteLogPatternOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) DeleteLogPatternRequest(i0 *applicationinsights.DeleteLogPatternInput) (r0 *request.Request, r1 *applicationinsights.DeleteLogPatternOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLogPatternRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*applicationinsights.DeleteLogPatternOutput)
	return
}

func (d *ApplicationInsightsDouble) DeleteLogPatternWithContext(i0 context.Context, i1 *applicationinsights.DeleteLogPatternInput, i2 ...request.Option) (r0 *applicationinsights.DeleteLogPatternOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLogPatternWithContext", i0, i1, i2)
	r0, _ = returns[0].(*applicationinsights.DeleteLogPatternOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeDeleteLogPatternWithContext(ctx context.Context, in *applicationinsights.DeleteLogPatternInput, _ ...request.Option) (*applicationinsights.DeleteLogPatternOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteLogPattern cancelled", ctx.Err())
	default:
		return d.DeleteLogPattern(in)
	}
}

func (d *ApplicationInsightsDouble) DescribeApplication(i0 *applicationinsights.DescribeApplicationInput) (r0 *applicationinsights.DescribeApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeApplication", i0)
	r0, _ = returns[0].(*applicationinsights.DescribeApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) DescribeApplicationRequest(i0 *applicationinsights.DescribeApplicationInput) (r0 *request.Request, r1 *applicationinsights.DescribeApplicationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeApplicationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*applicationinsights.DescribeApplicationOutput)
	return
}

func (d *ApplicationInsightsDouble) DescribeApplicationWithContext(i0 context.Context, i1 *applicationinsights.DescribeApplicationInput, i2 ...request.Option) (r0 *applicationinsights.DescribeApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeApplicationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*applicationinsights.DescribeApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeDescribeApplicationWithContext(ctx context.Context, in *applicationinsights.DescribeApplicationInput, _ ...request.Option) (*applicationinsights.DescribeApplicationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeApplication cancelled", ctx.Err())
	default:
		return d.DescribeApplication(in)
	}
}

func (d *ApplicationInsightsDouble) DescribeComponent(i0 *applicationinsights.DescribeComponentInput) (r0 *applicationinsights.DescribeComponentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeComponent", i0)
	r0, _ = returns[0].(*applicationinsights.DescribeComponentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) DescribeComponentConfiguration(i0 *applicationinsights.DescribeComponentConfigurationInput) (r0 *applicationinsights.DescribeComponentConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeComponentConfiguration", i0)
	r0, _ = returns[0].(*applicationinsights.DescribeComponentConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) DescribeComponentConfigurationRecommendation(i0 *applicationinsights.DescribeComponentConfigurationRecommendationInput) (r0 *applicationinsights.DescribeComponentConfigurationRecommendationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeComponentConfigurationRecommendation", i0)
	r0, _ = returns[0].(*applicationinsights.DescribeComponentConfigurationRecommendationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) DescribeComponentConfigurationRecommendationRequest(i0 *applicationinsights.DescribeComponentConfigurationRecommendationInput) (r0 *request.Request, r1 *applicationinsights.DescribeComponentConfigurationRecommendationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeComponentConfigurationRecommendationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*applicationinsights.DescribeComponentConfigurationRecommendationOutput)
	return
}

func (d *ApplicationInsightsDouble) DescribeComponentConfigurationRecommendationWithContext(i0 context.Context, i1 *applicationinsights.DescribeComponentConfigurationRecommendationInput, i2 ...request.Option) (r0 *applicationinsights.DescribeComponentConfigurationRecommendationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeComponentConfigurationRecommendationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*applicationinsights.DescribeComponentConfigurationRecommendationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeDescribeComponentConfigurationRecommendationWithContext(ctx context.Context, in *applicationinsights.DescribeComponentConfigurationRecommendationInput, _ ...request.Option) (*applicationinsights.DescribeComponentConfigurationRecommendationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeComponentConfigurationRecommendation cancelled", ctx.Err())
	default:
		return d.DescribeComponentConfigurationRecommendation(in)
	}
}

func (d *ApplicationInsightsDouble) DescribeComponentConfigurationRequest(i0 *applicationinsights.DescribeComponentConfigurationInput) (r0 *request.Request, r1 *applicationinsights.DescribeComponentConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeComponentConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*applicationinsights.DescribeComponentConfigurationOutput)
	return
}

func (d *ApplicationInsightsDouble) DescribeComponentConfigurationWithContext(i0 context.Context, i1 *applicationinsights.DescribeComponentConfigurationInput, i2 ...request.Option) (r0 *applicationinsights.DescribeComponentConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeComponentConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*applicationinsights.DescribeComponentConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeDescribeComponentConfigurationWithContext(ctx context.Context, in *applicationinsights.DescribeComponentConfigurationInput, _ ...request.Option) (*applicationinsights.DescribeComponentConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeComponentConfiguration cancelled", ctx.Err())
	default:
		return d.DescribeComponentConfiguration(in)
	}
}

func (d *ApplicationInsightsDouble) DescribeComponentRequest(i0 *applicationinsights.DescribeComponentInput) (r0 *request.Request, r1 *applicationinsights.DescribeComponentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeComponentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*applicationinsights.DescribeComponentOutput)
	return
}

func (d *ApplicationInsightsDouble) DescribeComponentWithContext(i0 context.Context, i1 *applicationinsights.DescribeComponentInput, i2 ...request.Option) (r0 *applicationinsights.DescribeComponentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeComponentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*applicationinsights.DescribeComponentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeDescribeComponentWithContext(ctx context.Context, in *applicationinsights.DescribeComponentInput, _ ...request.Option) (*applicationinsights.DescribeComponentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeComponent cancelled", ctx.Err())
	default:
		return d.DescribeComponent(in)
	}
}

func (d *ApplicationInsightsDouble) DescribeLogPattern(i0 *applicationinsights.DescribeLogPatternInput) (r0 *applicationinsights.DescribeLogPatternOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLogPattern", i0)
	r0, _ = returns[0].(*applicationinsights.DescribeLogPatternOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) DescribeLogPatternRequest(i0 *applicationinsights.DescribeLogPatternInput) (r0 *request.Request, r1 *applicationinsights.DescribeLogPatternOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLogPatternRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*applicationinsights.DescribeLogPatternOutput)
	return
}

func (d *ApplicationInsightsDouble) DescribeLogPatternWithContext(i0 context.Context, i1 *applicationinsights.DescribeLogPatternInput, i2 ...request.Option) (r0 *applicationinsights.DescribeLogPatternOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLogPatternWithContext", i0, i1, i2)
	r0, _ = returns[0].(*applicationinsights.DescribeLogPatternOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeDescribeLogPatternWithContext(ctx context.Context, in *applicationinsights.DescribeLogPatternInput, _ ...request.Option) (*applicationinsights.DescribeLogPatternOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeLogPattern cancelled", ctx.Err())
	default:
		return d.DescribeLogPattern(in)
	}
}

func (d *ApplicationInsightsDouble) DescribeObservation(i0 *applicationinsights.DescribeObservationInput) (r0 *applicationinsights.DescribeObservationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeObservation", i0)
	r0, _ = returns[0].(*applicationinsights.DescribeObservationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) DescribeObservationRequest(i0 *applicationinsights.DescribeObservationInput) (r0 *request.Request, r1 *applicationinsights.DescribeObservationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeObservationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*applicationinsights.DescribeObservationOutput)
	return
}

func (d *ApplicationInsightsDouble) DescribeObservationWithContext(i0 context.Context, i1 *applicationinsights.DescribeObservationInput, i2 ...request.Option) (r0 *applicationinsights.DescribeObservationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeObservationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*applicationinsights.DescribeObservationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeDescribeObservationWithContext(ctx context.Context, in *applicationinsights.DescribeObservationInput, _ ...request.Option) (*applicationinsights.DescribeObservationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeObservation cancelled", ctx.Err())
	default:
		return d.DescribeObservation(in)
	}
}

func (d *ApplicationInsightsDouble) DescribeProblem(i0 *applicationinsights.DescribeProblemInput) (r0 *applicationinsights.DescribeProblemOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProblem", i0)
	r0, _ = returns[0].(*applicationinsights.DescribeProblemOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) DescribeProblemObservations(i0 *applicationinsights.DescribeProblemObservationsInput) (r0 *applicationinsights.DescribeProblemObservationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProblemObservations", i0)
	r0, _ = returns[0].(*applicationinsights.DescribeProblemObservationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) DescribeProblemObservationsRequest(i0 *applicationinsights.DescribeProblemObservationsInput) (r0 *request.Request, r1 *applicationinsights.DescribeProblemObservationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProblemObservationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*applicationinsights.DescribeProblemObservationsOutput)
	return
}

func (d *ApplicationInsightsDouble) DescribeProblemObservationsWithContext(i0 context.Context, i1 *applicationinsights.DescribeProblemObservationsInput, i2 ...request.Option) (r0 *applicationinsights.DescribeProblemObservationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProblemObservationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*applicationinsights.DescribeProblemObservationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeDescribeProblemObservationsWithContext(ctx context.Context, in *applicationinsights.DescribeProblemObservationsInput, _ ...request.Option) (*applicationinsights.DescribeProblemObservationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeProblemObservations cancelled", ctx.Err())
	default:
		return d.DescribeProblemObservations(in)
	}
}

func (d *ApplicationInsightsDouble) DescribeProblemRequest(i0 *applicationinsights.DescribeProblemInput) (r0 *request.Request, r1 *applicationinsights.DescribeProblemOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProblemRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*applicationinsights.DescribeProblemOutput)
	return
}

func (d *ApplicationInsightsDouble) DescribeProblemWithContext(i0 context.Context, i1 *applicationinsights.DescribeProblemInput, i2 ...request.Option) (r0 *applicationinsights.DescribeProblemOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProblemWithContext", i0, i1, i2)
	r0, _ = returns[0].(*applicationinsights.DescribeProblemOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeDescribeProblemWithContext(ctx context.Context, in *applicationinsights.DescribeProblemInput, _ ...request.Option) (*applicationinsights.DescribeProblemOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeProblem cancelled", ctx.Err())
	default:
		return d.DescribeProblem(in)
	}
}

func (d *ApplicationInsightsDouble) ListApplications(i0 *applicationinsights.ListApplicationsInput) (r0 *applicationinsights.ListApplicationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApplications", i0)
	r0, _ = returns[0].(*applicationinsights.ListApplicationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) ListApplicationsPages(i0 *applicationinsights.ListApplicationsInput, i1 func(*applicationinsights.ListApplicationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApplicationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeListApplicationsPages(in *applicationinsights.ListApplicationsInput, pager func(*applicationinsights.ListApplicationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListApplications", paginators, in, pager)
}

func (d *ApplicationInsightsDouble) ListApplicationsPagesWithContext(i0 context.Context, i1 *applicationinsights.ListApplicationsInput, i2 func(*applicationinsights.ListApplicationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApplicationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeListApplicationsPagesWithContext(ctx context.Context, in *applicationinsights.ListApplicationsInput, pager func(*applicationinsights.ListApplicationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListApplications", paginators, ctx, in, pager, options...)
}

func (d *ApplicationInsightsDouble) ListApplicationsRequest(i0 *applicationinsights.ListApplicationsInput) (r0 *request.Request, r1 *applicationinsights.ListApplicationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApplicationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*applicationinsights.ListApplicationsOutput)
	return
}

func (d *ApplicationInsightsDouble) ListApplicationsWithContext(i0 context.Context, i1 *applicationinsights.ListApplicationsInput, i2 ...request.Option) (r0 *applicationinsights.ListApplicationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApplicationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*applicationinsights.ListApplicationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeListApplicationsWithContext(ctx context.Context, in *applicationinsights.ListApplicationsInput, _ ...request.Option) (*applicationinsights.ListApplicationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListApplications cancelled", ctx.Err())
	default:
		return d.ListApplications(in)
	}
}

func (d *ApplicationInsightsDouble) ListComponents(i0 *applicationinsights.ListComponentsInput) (r0 *applicationinsights.ListComponentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListComponents", i0)
	r0, _ = returns[0].(*applicationinsights.ListComponentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) ListComponentsPages(i0 *applicationinsights.ListComponentsInput, i1 func(*applicationinsights.ListComponentsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListComponentsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeListComponentsPages(in *applicationinsights.ListComponentsInput, pager func(*applicationinsights.ListComponentsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListComponents", paginators, in, pager)
}

func (d *ApplicationInsightsDouble) ListComponentsPagesWithContext(i0 context.Context, i1 *applicationinsights.ListComponentsInput, i2 func(*applicationinsights.ListComponentsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListComponentsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeListComponentsPagesWithContext(ctx context.Context, in *applicationinsights.ListComponentsInput, pager func(*applicationinsights.ListComponentsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListComponents", paginators, ctx, in, pager, options...)
}

func (d *ApplicationInsightsDouble) ListComponentsRequest(i0 *applicationinsights.ListComponentsInput) (r0 *request.Request, r1 *applicationinsights.ListComponentsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListComponentsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*applicationinsights.ListComponentsOutput)
	return
}

func (d *ApplicationInsightsDouble) ListComponentsWithContext(i0 context.Context, i1 *applicationinsights.ListComponentsInput, i2 ...request.Option) (r0 *applicationinsights.ListComponentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListComponentsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*applicationinsights.ListComponentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeListComponentsWithContext(ctx context.Context, in *applicationinsights.ListComponentsInput, _ ...request.Option) (*applicationinsights.ListComponentsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListComponents cancelled", ctx.Err())
	default:
		return d.ListComponents(in)
	}
}

func (d *ApplicationInsightsDouble) ListConfigurationHistory(i0 *applicationinsights.ListConfigurationHistoryInput) (r0 *applicationinsights.ListConfigurationHistoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListConfigurationHistory", i0)
	r0, _ = returns[0].(*applicationinsights.ListConfigurationHistoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) ListConfigurationHistoryPages(i0 *applicationinsights.ListConfigurationHistoryInput, i1 func(*applicationinsights.ListConfigurationHistoryOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListConfigurationHistoryPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeListConfigurationHistoryPages(in *applicationinsights.ListConfigurationHistoryInput, pager func(*applicationinsights.ListConfigurationHistoryOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListConfigurationHistory", paginators, in, pager)
}

func (d *ApplicationInsightsDouble) ListConfigurationHistoryPagesWithContext(i0 context.Context, i1 *applicationinsights.ListConfigurationHistoryInput, i2 func(*applicationinsights.ListConfigurationHistoryOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListConfigurationHistoryPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeListConfigurationHistoryPagesWithContext(ctx context.Context, in *applicationinsights.ListConfigurationHistoryInput, pager func(*applicationinsights.ListConfigurationHistoryOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListConfigurationHistory", paginators, ctx, in, pager, options...)
}

func (d *ApplicationInsightsDouble) ListConfigurationHistoryRequest(i0 *applicationinsights.ListConfigurationHistoryInput) (r0 *request.Request, r1 *applicationinsights.ListConfigurationHistoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListConfigurationHistoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*applicationinsights.ListConfigurationHistoryOutput)
	return
}

func (d *ApplicationInsightsDouble) ListConfigurationHistoryWithContext(i0 context.Context, i1 *applicationinsights.ListConfigurationHistoryInput, i2 ...request.Option) (r0 *applicationinsights.ListConfigurationHistoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListConfigurationHistoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*applicationinsights.ListConfigurationHistoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeListConfigurationHistoryWithContext(ctx context.Context, in *applicationinsights.ListConfigurationHistoryInput, _ ...request.Option) (*applicationinsights.ListConfigurationHistoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListConfigurationHistory cancelled", ctx.Err())
	default:
		return d.ListConfigurationHistory(in)
	}
}

func (d *ApplicationInsightsDouble) ListLogPatternSets(i0 *applicationinsights.ListLogPatternSetsInput) (r0 *applicationinsights.ListLogPatternSetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLogPatternSets", i0)
	r0, _ = returns[0].(*applicationinsights.ListLogPatternSetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) ListLogPatternSetsPages(i0 *applicationinsights.ListLogPatternSetsInput, i1 func(*applicationinsights.ListLogPatternSetsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLogPatternSetsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeListLogPatternSetsPages(in *applicationinsights.ListLogPatternSetsInput, pager func(*applicationinsights.ListLogPatternSetsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListLogPatternSets", paginators, in, pager)
}

func (d *ApplicationInsightsDouble) ListLogPatternSetsPagesWithContext(i0 context.Context, i1 *applicationinsights.ListLogPatternSetsInput, i2 func(*applicationinsights.ListLogPatternSetsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLogPatternSetsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeListLogPatternSetsPagesWithContext(ctx context.Context, in *applicationinsights.ListLogPatternSetsInput, pager func(*applicationinsights.ListLogPatternSetsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListLogPatternSets", paginators, ctx, in, pager, options...)
}

func (d *ApplicationInsightsDouble) ListLogPatternSetsRequest(i0 *applicationinsights.ListLogPatternSetsInput) (r0 *request.Request, r1 *applicationinsights.ListLogPatternSetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLogPatternSetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*applicationinsights.ListLogPatternSetsOutput)
	return
}

func (d *ApplicationInsightsDouble) ListLogPatternSetsWithContext(i0 context.Context, i1 *applicationinsights.ListLogPatternSetsInput, i2 ...request.Option) (r0 *applicationinsights.ListLogPatternSetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLogPatternSetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*applicationinsights.ListLogPatternSetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeListLogPatternSetsWithContext(ctx context.Context, in *applicationinsights.ListLogPatternSetsInput, _ ...request.Option) (*applicationinsights.ListLogPatternSetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListLogPatternSets cancelled", ctx.Err())
	default:
		return d.ListLogPatternSets(in)
	}
}

func (d *ApplicationInsightsDouble) ListLogPatterns(i0 *applicationinsights.ListLogPatternsInput) (r0 *applicationinsights.ListLogPatternsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLogPatterns", i0)
	r0, _ = returns[0].(*applicationinsights.ListLogPatternsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) ListLogPatternsPages(i0 *applicationinsights.ListLogPatternsInput, i1 func(*applicationinsights.ListLogPatternsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLogPatternsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeListLogPatternsPages(in *applicationinsights.ListLogPatternsInput, pager func(*applicationinsights.ListLogPatternsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListLogPatterns", paginators, in, pager)
}

func (d *ApplicationInsightsDouble) ListLogPatternsPagesWithContext(i0 context.Context, i1 *applicationinsights.ListLogPatternsInput, i2 func(*applicationinsights.ListLogPatternsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLogPatternsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeListLogPatternsPagesWithContext(ctx context.Context, in *applicationinsights.ListLogPatternsInput, pager func(*applicationinsights.ListLogPatternsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListLogPatterns", paginators, ctx, in, pager, options...)
}

func (d *ApplicationInsightsDouble) ListLogPatternsRequest(i0 *applicationinsights.ListLogPatternsInput) (r0 *request.Request, r1 *applicationinsights.ListLogPatternsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLogPatternsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*applicationinsights.ListLogPatternsOutput)
	return
}

func (d *ApplicationInsightsDouble) ListLogPatternsWithContext(i0 context.Context, i1 *applicationinsights.ListLogPatternsInput, i2 ...request.Option) (r0 *applicationinsights.ListLogPatternsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLogPatternsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*applicationinsights.ListLogPatternsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeListLogPatternsWithContext(ctx context.Context, in *applicationinsights.ListLogPatternsInput, _ ...request.Option) (*applicationinsights.ListLogPatternsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListLogPatterns cancelled", ctx.Err())
	default:
		return d.ListLogPatterns(in)
	}
}

func (d *ApplicationInsightsDouble) ListProblems(i0 *applicationinsights.ListProblemsInput) (r0 *applicationinsights.ListProblemsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProblems", i0)
	r0, _ = returns[0].(*applicationinsights.ListProblemsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) ListProblemsPages(i0 *applicationinsights.ListProblemsInput, i1 func(*applicationinsights.ListProblemsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProblemsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeListProblemsPages(in *applicationinsights.ListProblemsInput, pager func(*applicationinsights.ListProblemsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListProblems", paginators, in, pager)
}

func (d *ApplicationInsightsDouble) ListProblemsPagesWithContext(i0 context.Context, i1 *applicationinsights.ListProblemsInput, i2 func(*applicationinsights.ListProblemsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProblemsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeListProblemsPagesWithContext(ctx context.Context, in *applicationinsights.ListProblemsInput, pager func(*applicationinsights.ListProblemsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListProblems", paginators, ctx, in, pager, options...)
}

func (d *ApplicationInsightsDouble) ListProblemsRequest(i0 *applicationinsights.ListProblemsInput) (r0 *request.Request, r1 *applicationinsights.ListProblemsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProblemsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*applicationinsights.ListProblemsOutput)
	return
}

func (d *ApplicationInsightsDouble) ListProblemsWithContext(i0 context.Context, i1 *applicationinsights.ListProblemsInput, i2 ...request.Option) (r0 *applicationinsights.ListProblemsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProblemsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*applicationinsights.ListProblemsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeListProblemsWithContext(ctx context.Context, in *applicationinsights.ListProblemsInput, _ ...request.Option) (*applicationinsights.ListProblemsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListProblems cancelled", ctx.Err())
	default:
		return d.ListProblems(in)
	}
}

func (d *ApplicationInsightsDouble) ListTagsForResource(i0 *applicationinsights.ListTagsForResourceInput) (r0 *applicationinsights.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*applicationinsights.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) ListTagsForResourceRequest(i0 *applicationinsights.ListTagsForResourceInput) (r0 *request.Request, r1 *applicationinsights.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*applicationinsights.ListTagsForResourceOutput)
	return
}

func (d *ApplicationInsightsDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *applicationinsights.ListTagsForResourceInput, i2 ...request.Option) (r0 *applicationinsights.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*applicationinsights.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *applicationinsights.ListTagsForResourceInput, _ ...request.Option) (*applicationinsights.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *ApplicationInsightsDouble) TagResource(i0 *applicationinsights.TagResourceInput) (r0 *applicationinsights.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*applicationinsights.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) TagResourceRequest(i0 *applicationinsights.TagResourceInput) (r0 *request.Request, r1 *applicationinsights.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*applicationinsights.TagResourceOutput)
	return
}

func (d *ApplicationInsightsDouble) TagResourceWithContext(i0 context.Context, i1 *applicationinsights.TagResourceInput, i2 ...request.Option) (r0 *applicationinsights.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*applicationinsights.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeTagResourceWithContext(ctx context.Context, in *applicationinsights.TagResourceInput, _ ...request.Option) (*applicationinsights.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *ApplicationInsightsDouble) UntagResource(i0 *applicationinsights.UntagResourceInput) (r0 *applicationinsights.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*applicationinsights.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) UntagResourceRequest(i0 *applicationinsights.UntagResourceInput) (r0 *request.Request, r1 *applicationinsights.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*applicationinsights.UntagResourceOutput)
	return
}

func (d *ApplicationInsightsDouble) UntagResourceWithContext(i0 context.Context, i1 *applicationinsights.UntagResourceInput, i2 ...request.Option) (r0 *applicationinsights.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*applicationinsights.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeUntagResourceWithContext(ctx context.Context, in *applicationinsights.UntagResourceInput, _ ...request.Option) (*applicationinsights.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *ApplicationInsightsDouble) UpdateApplication(i0 *applicationinsights.UpdateApplicationInput) (r0 *applicationinsights.UpdateApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApplication", i0)
	r0, _ = returns[0].(*applicationinsights.UpdateApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) UpdateApplicationRequest(i0 *applicationinsights.UpdateApplicationInput) (r0 *request.Request, r1 *applicationinsights.UpdateApplicationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApplicationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*applicationinsights.UpdateApplicationOutput)
	return
}

func (d *ApplicationInsightsDouble) UpdateApplicationWithContext(i0 context.Context, i1 *applicationinsights.UpdateApplicationInput, i2 ...request.Option) (r0 *applicationinsights.UpdateApplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApplicationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*applicationinsights.UpdateApplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeUpdateApplicationWithContext(ctx context.Context, in *applicationinsights.UpdateApplicationInput, _ ...request.Option) (*applicationinsights.UpdateApplicationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateApplication cancelled", ctx.Err())
	default:
		return d.UpdateApplication(in)
	}
}

func (d *ApplicationInsightsDouble) UpdateComponent(i0 *applicationinsights.UpdateComponentInput) (r0 *applicationinsights.UpdateComponentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateComponent", i0)
	r0, _ = returns[0].(*applicationinsights.UpdateComponentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) UpdateComponentConfiguration(i0 *applicationinsights.UpdateComponentConfigurationInput) (r0 *applicationinsights.UpdateComponentConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateComponentConfiguration", i0)
	r0, _ = returns[0].(*applicationinsights.UpdateComponentConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) UpdateComponentConfigurationRequest(i0 *applicationinsights.UpdateComponentConfigurationInput) (r0 *request.Request, r1 *applicationinsights.UpdateComponentConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateComponentConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*applicationinsights.UpdateComponentConfigurationOutput)
	return
}

func (d *ApplicationInsightsDouble) UpdateComponentConfigurationWithContext(i0 context.Context, i1 *applicationinsights.UpdateComponentConfigurationInput, i2 ...request.Option) (r0 *applicationinsights.UpdateComponentConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateComponentConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*applicationinsights.UpdateComponentConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeUpdateComponentConfigurationWithContext(ctx context.Context, in *applicationinsights.UpdateComponentConfigurationInput, _ ...request.Option) (*applicationinsights.UpdateComponentConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateComponentConfiguration cancelled", ctx.Err())
	default:
		return d.UpdateComponentConfiguration(in)
	}
}

func (d *ApplicationInsightsDouble) UpdateComponentRequest(i0 *applicationinsights.UpdateComponentInput) (r0 *request.Request, r1 *applicationinsights.UpdateComponentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateComponentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*applicationinsights.UpdateComponentOutput)
	return
}

func (d *ApplicationInsightsDouble) UpdateComponentWithContext(i0 context.Context, i1 *applicationinsights.UpdateComponentInput, i2 ...request.Option) (r0 *applicationinsights.UpdateComponentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateComponentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*applicationinsights.UpdateComponentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeUpdateComponentWithContext(ctx context.Context, in *applicationinsights.UpdateComponentInput, _ ...request.Option) (*applicationinsights.UpdateComponentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateComponent cancelled", ctx.Err())
	default:
		return d.UpdateComponent(in)
	}
}

func (d *ApplicationInsightsDouble) UpdateLogPattern(i0 *applicationinsights.UpdateLogPatternInput) (r0 *applicationinsights.UpdateLogPatternOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateLogPattern", i0)
	r0, _ = returns[0].(*applicationinsights.UpdateLogPatternOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) UpdateLogPatternRequest(i0 *applicationinsights.UpdateLogPatternInput) (r0 *request.Request, r1 *applicationinsights.UpdateLogPatternOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateLogPatternRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*applicationinsights.UpdateLogPatternOutput)
	return
}

func (d *ApplicationInsightsDouble) UpdateLogPatternWithContext(i0 context.Context, i1 *applicationinsights.UpdateLogPatternInput, i2 ...request.Option) (r0 *applicationinsights.UpdateLogPatternOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateLogPatternWithContext", i0, i1, i2)
	r0, _ = returns[0].(*applicationinsights.UpdateLogPatternOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApplicationInsightsDouble) fakeUpdateLogPatternWithContext(ctx context.Context, in *applicationinsights.UpdateLogPatternInput, _ ...request.Option) (*applicationinsights.UpdateLogPatternOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateLogPattern cancelled", ctx.Err())
	default:
		return d.UpdateLogPattern(in)
	}
}
