// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:15:07+11:00

// Package simpledbdouble provides a TestDouble implementation of simpledbiface.SimpleDBAPI
package simpledbdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/simpledb"
	"github.com/aws/aws-sdk-go/service/simpledb/simpledbiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// SimpleDBDouble is TestDouble for simpledbiface.SimpleDBAPI
type SimpleDBDouble struct {
	simpledbiface.SimpleDBAPI
	*awsdouble.AWSTestDouble
}

// Constructor for SimpleDBDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *SimpleDBDouble {
	result := &SimpleDBDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*simpledbiface.SimpleDBAPI)(nil), configurators...)
	return result
}

func (d *SimpleDBDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *SimpleDBDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "BatchDeleteAttributesWithContext":
		return m.Fake(d.fakeBatchDeleteAttributesWithContext)

	case "BatchPutAttributesWithContext":
		return m.Fake(d.fakeBatchPutAttributesWithContext)

	case "CreateDomainWithContext":
		return m.Fake(d.fakeCreateDomainWithContext)

	case "DeleteAttributesWithContext":
		return m.Fake(d.fakeDeleteAttributesWithContext)

	case "DeleteDomainWithContext":
		return m.Fake(d.fakeDeleteDomainWithContext)

	case "DomainMetadataWithContext":
		return m.Fake(d.fakeDomainMetadataWithContext)

	case "GetAttributesWithContext":
		return m.Fake(d.fakeGetAttributesWithContext)

	case "ListDomainsPages":
		return m.Fake(d.fakeListDomainsPages)

	case "ListDomainsPagesWithContext":
		return m.Fake(d.fakeListDomainsPagesWithContext)

	case "ListDomainsWithContext":
		return m.Fake(d.fakeListDomainsWithContext)

	case "PutAttributesWithContext":
		return m.Fake(d.fakePutAttributesWithContext)

	case "SelectPages":
		return m.Fake(d.fakeSelectPages)

	case "SelectPagesWithContext":
		return m.Fake(d.fakeSelectPagesWithContext)

	case "SelectWithContext":
		return m.Fake(d.fakeSelectWithContext)

	default:
		return nil
	}
}

func (d *SimpleDBDouble) BatchDeleteAttributes(i0 *simpledb.BatchDeleteAttributesInput) (r0 *simpledb.BatchDeleteAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDeleteAttributes", i0)
	r0, _ = returns[0].(*simpledb.BatchDeleteAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SimpleDBDouble) BatchDeleteAttributesRequest(i0 *simpledb.BatchDeleteAttributesInput) (r0 *request.Request, r1 *simpledb.BatchDeleteAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDeleteAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*simpledb.BatchDeleteAttributesOutput)
	return
}

func (d *SimpleDBDouble) BatchDeleteAttributesWithContext(i0 context.Context, i1 *simpledb.BatchDeleteAttributesInput, i2 ...request.Option) (r0 *simpledb.BatchDeleteAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDeleteAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*simpledb.BatchDeleteAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SimpleDBDouble) fakeBatchDeleteAttributesWithContext(ctx context.Context, in *simpledb.BatchDeleteAttributesInput, _ ...request.Option) (*simpledb.BatchDeleteAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchDeleteAttributes cancelled", ctx.Err())
	default:
		return d.BatchDeleteAttributes(in)
	}
}

func (d *SimpleDBDouble) BatchPutAttributes(i0 *simpledb.BatchPutAttributesInput) (r0 *simpledb.BatchPutAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchPutAttributes", i0)
	r0, _ = returns[0].(*simpledb.BatchPutAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SimpleDBDouble) BatchPutAttributesRequest(i0 *simpledb.BatchPutAttributesInput) (r0 *request.Request, r1 *simpledb.BatchPutAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchPutAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*simpledb.BatchPutAttributesOutput)
	return
}

func (d *SimpleDBDouble) BatchPutAttributesWithContext(i0 context.Context, i1 *simpledb.BatchPutAttributesInput, i2 ...request.Option) (r0 *simpledb.BatchPutAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchPutAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*simpledb.BatchPutAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SimpleDBDouble) fakeBatchPutAttributesWithContext(ctx context.Context, in *simpledb.BatchPutAttributesInput, _ ...request.Option) (*simpledb.BatchPutAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchPutAttributes cancelled", ctx.Err())
	default:
		return d.BatchPutAttributes(in)
	}
}

func (d *SimpleDBDouble) CreateDomain(i0 *simpledb.CreateDomainInput) (r0 *simpledb.CreateDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDomain", i0)
	r0, _ = returns[0].(*simpledb.CreateDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SimpleDBDouble) CreateDomainRequest(i0 *simpledb.CreateDomainInput) (r0 *request.Request, r1 *simpledb.CreateDomainOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDomainRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*simpledb.CreateDomainOutput)
	return
}

func (d *SimpleDBDouble) CreateDomainWithContext(i0 context.Context, i1 *simpledb.CreateDomainInput, i2 ...request.Option) (r0 *simpledb.CreateDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDomainWithContext", i0, i1, i2)
	r0, _ = returns[0].(*simpledb.CreateDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SimpleDBDouble) fakeCreateDomainWithContext(ctx context.Context, in *simpledb.CreateDomainInput, _ ...request.Option) (*simpledb.CreateDomainOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDomain cancelled", ctx.Err())
	default:
		return d.CreateDomain(in)
	}
}

func (d *SimpleDBDouble) DeleteAttributes(i0 *simpledb.DeleteAttributesInput) (r0 *simpledb.DeleteAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAttributes", i0)
	r0, _ = returns[0].(*simpledb.DeleteAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SimpleDBDouble) DeleteAttributesRequest(i0 *simpledb.DeleteAttributesInput) (r0 *request.Request, r1 *simpledb.DeleteAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*simpledb.DeleteAttributesOutput)
	return
}

func (d *SimpleDBDouble) DeleteAttributesWithContext(i0 context.Context, i1 *simpledb.DeleteAttributesInput, i2 ...request.Option) (r0 *simpledb.DeleteAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*simpledb.DeleteAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SimpleDBDouble) fakeDeleteAttributesWithContext(ctx context.Context, in *simpledb.DeleteAttributesInput, _ ...request.Option) (*simpledb.DeleteAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteAttributes cancelled", ctx.Err())
	default:
		return d.DeleteAttributes(in)
	}
}

func (d *SimpleDBDouble) DeleteDomain(i0 *simpledb.DeleteDomainInput) (r0 *simpledb.DeleteDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDomain", i0)
	r0, _ = returns[0].(*simpledb.DeleteDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SimpleDBDouble) DeleteDomainRequest(i0 *simpledb.DeleteDomainInput) (r0 *request.Request, r1 *simpledb.DeleteDomainOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDomainRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*simpledb.DeleteDomainOutput)
	return
}

func (d *SimpleDBDouble) DeleteDomainWithContext(i0 context.Context, i1 *simpledb.DeleteDomainInput, i2 ...request.Option) (r0 *simpledb.DeleteDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDomainWithContext", i0, i1, i2)
	r0, _ = returns[0].(*simpledb.DeleteDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SimpleDBDouble) fakeDeleteDomainWithContext(ctx context.Context, in *simpledb.DeleteDomainInput, _ ...request.Option) (*simpledb.DeleteDomainOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDomain cancelled", ctx.Err())
	default:
		return d.DeleteDomain(in)
	}
}

func (d *SimpleDBDouble) DomainMetadata(i0 *simpledb.DomainMetadataInput) (r0 *simpledb.DomainMetadataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DomainMetadata", i0)
	r0, _ = returns[0].(*simpledb.DomainMetadataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SimpleDBDouble) DomainMetadataRequest(i0 *simpledb.DomainMetadataInput) (r0 *request.Request, r1 *simpledb.DomainMetadataOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DomainMetadataRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*simpledb.DomainMetadataOutput)
	return
}

func (d *SimpleDBDouble) DomainMetadataWithContext(i0 context.Context, i1 *simpledb.DomainMetadataInput, i2 ...request.Option) (r0 *simpledb.DomainMetadataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DomainMetadataWithContext", i0, i1, i2)
	r0, _ = returns[0].(*simpledb.DomainMetadataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SimpleDBDouble) fakeDomainMetadataWithContext(ctx context.Context, in *simpledb.DomainMetadataInput, _ ...request.Option) (*simpledb.DomainMetadataOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DomainMetadata cancelled", ctx.Err())
	default:
		return d.DomainMetadata(in)
	}
}

func (d *SimpleDBDouble) GetAttributes(i0 *simpledb.GetAttributesInput) (r0 *simpledb.GetAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAttributes", i0)
	r0, _ = returns[0].(*simpledb.GetAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SimpleDBDouble) GetAttributesRequest(i0 *simpledb.GetAttributesInput) (r0 *request.Request, r1 *simpledb.GetAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*simpledb.GetAttributesOutput)
	return
}

func (d *SimpleDBDouble) GetAttributesWithContext(i0 context.Context, i1 *simpledb.GetAttributesInput, i2 ...request.Option) (r0 *simpledb.GetAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*simpledb.GetAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SimpleDBDouble) fakeGetAttributesWithContext(ctx context.Context, in *simpledb.GetAttributesInput, _ ...request.Option) (*simpledb.GetAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetAttributes cancelled", ctx.Err())
	default:
		return d.GetAttributes(in)
	}
}

func (d *SimpleDBDouble) ListDomains(i0 *simpledb.ListDomainsInput) (r0 *simpledb.ListDomainsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDomains", i0)
	r0, _ = returns[0].(*simpledb.ListDomainsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SimpleDBDouble) ListDomainsPages(i0 *simpledb.ListDomainsInput, i1 func(*simpledb.ListDomainsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDomainsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SimpleDBDouble) fakeListDomainsPages(in *simpledb.ListDomainsInput, pager func(*simpledb.ListDomainsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListDomains", paginators, in, pager)
}

func (d *SimpleDBDouble) ListDomainsPagesWithContext(i0 context.Context, i1 *simpledb.ListDomainsInput, i2 func(*simpledb.ListDomainsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDomainsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SimpleDBDouble) fakeListDomainsPagesWithContext(ctx context.Context, in *simpledb.ListDomainsInput, pager func(*simpledb.ListDomainsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListDomains", paginators, ctx, in, pager, options...)
}

func (d *SimpleDBDouble) ListDomainsRequest(i0 *simpledb.ListDomainsInput) (r0 *request.Request, r1 *simpledb.ListDomainsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDomainsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*simpledb.ListDomainsOutput)
	return
}

func (d *SimpleDBDouble) ListDomainsWithContext(i0 context.Context, i1 *simpledb.ListDomainsInput, i2 ...request.Option) (r0 *simpledb.ListDomainsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDomainsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*simpledb.ListDomainsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SimpleDBDouble) fakeListDomainsWithContext(ctx context.Context, in *simpledb.ListDomainsInput, _ ...request.Option) (*simpledb.ListDomainsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDomains cancelled", ctx.Err())
	default:
		return d.ListDomains(in)
	}
}

func (d *SimpleDBDouble) PutAttributes(i0 *simpledb.PutAttributesInput) (r0 *simpledb.PutAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutAttributes", i0)
	r0, _ = returns[0].(*simpledb.PutAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SimpleDBDouble) PutAttributesRequest(i0 *simpledb.PutAttributesInput) (r0 *request.Request, r1 *simpledb.PutAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*simpledb.PutAttributesOutput)
	return
}

func (d *SimpleDBDouble) PutAttributesWithContext(i0 context.Context, i1 *simpledb.PutAttributesInput, i2 ...request.Option) (r0 *simpledb.PutAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*simpledb.PutAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SimpleDBDouble) fakePutAttributesWithContext(ctx context.Context, in *simpledb.PutAttributesInput, _ ...request.Option) (*simpledb.PutAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutAttributes cancelled", ctx.Err())
	default:
		return d.PutAttributes(in)
	}
}

func (d *SimpleDBDouble) Select(i0 *simpledb.SelectInput) (r0 *simpledb.SelectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("Select", i0)
	r0, _ = returns[0].(*simpledb.SelectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SimpleDBDouble) SelectPages(i0 *simpledb.SelectInput, i1 func(*simpledb.SelectOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SelectPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SimpleDBDouble) fakeSelectPages(in *simpledb.SelectInput, pager func(*simpledb.SelectOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("Select", paginators, in, pager)
}

func (d *SimpleDBDouble) SelectPagesWithContext(i0 context.Context, i1 *simpledb.SelectInput, i2 func(*simpledb.SelectOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SelectPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SimpleDBDouble) fakeSelectPagesWithContext(ctx context.Context, in *simpledb.SelectInput, pager func(*simpledb.SelectOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("Select", paginators, ctx, in, pager, options...)
}

func (d *SimpleDBDouble) SelectRequest(i0 *simpledb.SelectInput) (r0 *request.Request, r1 *simpledb.SelectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SelectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*simpledb.SelectOutput)
	return
}

func (d *SimpleDBDouble) SelectWithContext(i0 context.Context, i1 *simpledb.SelectInput, i2 ...request.Option) (r0 *simpledb.SelectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SelectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*simpledb.SelectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SimpleDBDouble) fakeSelectWithContext(ctx context.Context, in *simpledb.SelectInput, _ ...request.Option) (*simpledb.SelectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "Select cancelled", ctx.Err())
	default:
		return d.Select(in)
	}
}
