// Code generated by go awsdoublegen; DO NOT EDIT.
// This file was generated at 2020-01-29T21:22:05+11:00
package medialivedouble

import (
	"time"

	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/lwoggardner/awsdouble"
)

var waiters = map[string]*awsdouble.Waiter{

	"ChannelCreated": &awsdouble.Waiter{
		OperationName: "DescribeChannel",
		Waiter: request.Waiter{
			Name:        "WaitUntilChannelCreated",
			MaxAttempts: 5,
			Delay:       request.ConstantWaiterDelay(3 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "State",
					Expected: "IDLE",
				},
				{
					State:   request.RetryWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "State",
					Expected: "CREATING",
				},
				{
					State:    request.RetryWaiterState,
					Matcher:  request.StatusWaiterMatch,
					Expected: 500,
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "State",
					Expected: "CREATE_FAILED",
				},
			},
		},
	},

	"ChannelDeleted": &awsdouble.Waiter{
		OperationName: "DescribeChannel",
		Waiter: request.Waiter{
			Name:        "WaitUntilChannelDeleted",
			MaxAttempts: 20,
			Delay:       request.ConstantWaiterDelay(5 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "State",
					Expected: "DELETED",
				},
				{
					State:   request.RetryWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "State",
					Expected: "DELETING",
				},
				{
					State:    request.RetryWaiterState,
					Matcher:  request.StatusWaiterMatch,
					Expected: 500,
				},
			},
		},
	},

	"ChannelRunning": &awsdouble.Waiter{
		OperationName: "DescribeChannel",
		Waiter: request.Waiter{
			Name:        "WaitUntilChannelRunning",
			MaxAttempts: 120,
			Delay:       request.ConstantWaiterDelay(5 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "State",
					Expected: "RUNNING",
				},
				{
					State:   request.RetryWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "State",
					Expected: "STARTING",
				},
				{
					State:    request.RetryWaiterState,
					Matcher:  request.StatusWaiterMatch,
					Expected: 500,
				},
			},
		},
	},

	"ChannelStopped": &awsdouble.Waiter{
		OperationName: "DescribeChannel",
		Waiter: request.Waiter{
			Name:        "WaitUntilChannelStopped",
			MaxAttempts: 28,
			Delay:       request.ConstantWaiterDelay(5 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "State",
					Expected: "IDLE",
				},
				{
					State:   request.RetryWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "State",
					Expected: "STOPPING",
				},
				{
					State:    request.RetryWaiterState,
					Matcher:  request.StatusWaiterMatch,
					Expected: 500,
				},
			},
		},
	},

	"MultiplexCreated": &awsdouble.Waiter{
		OperationName: "DescribeMultiplex",
		Waiter: request.Waiter{
			Name:        "WaitUntilMultiplexCreated",
			MaxAttempts: 5,
			Delay:       request.ConstantWaiterDelay(3 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "State",
					Expected: "IDLE",
				},
				{
					State:   request.RetryWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "State",
					Expected: "CREATING",
				},
				{
					State:    request.RetryWaiterState,
					Matcher:  request.StatusWaiterMatch,
					Expected: 500,
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "State",
					Expected: "CREATE_FAILED",
				},
			},
		},
	},

	"MultiplexDeleted": &awsdouble.Waiter{
		OperationName: "DescribeMultiplex",
		Waiter: request.Waiter{
			Name:        "WaitUntilMultiplexDeleted",
			MaxAttempts: 20,
			Delay:       request.ConstantWaiterDelay(5 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "State",
					Expected: "DELETED",
				},
				{
					State:   request.RetryWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "State",
					Expected: "DELETING",
				},
				{
					State:    request.RetryWaiterState,
					Matcher:  request.StatusWaiterMatch,
					Expected: 500,
				},
			},
		},
	},

	"MultiplexRunning": &awsdouble.Waiter{
		OperationName: "DescribeMultiplex",
		Waiter: request.Waiter{
			Name:        "WaitUntilMultiplexRunning",
			MaxAttempts: 120,
			Delay:       request.ConstantWaiterDelay(5 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "State",
					Expected: "RUNNING",
				},
				{
					State:   request.RetryWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "State",
					Expected: "STARTING",
				},
				{
					State:    request.RetryWaiterState,
					Matcher:  request.StatusWaiterMatch,
					Expected: 500,
				},
			},
		},
	},

	"MultiplexStopped": &awsdouble.Waiter{
		OperationName: "DescribeMultiplex",
		Waiter: request.Waiter{
			Name:        "WaitUntilMultiplexStopped",
			MaxAttempts: 28,
			Delay:       request.ConstantWaiterDelay(5 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "State",
					Expected: "IDLE",
				},
				{
					State:   request.RetryWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "State",
					Expected: "STOPPING",
				},
				{
					State:    request.RetryWaiterState,
					Matcher:  request.StatusWaiterMatch,
					Expected: 500,
				},
			},
		},
	},
}
