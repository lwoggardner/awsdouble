// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:13:54+11:00

// Package medialivedouble provides a TestDouble implementation of medialiveiface.MediaLiveAPI
package medialivedouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/medialive"
	"github.com/aws/aws-sdk-go/service/medialive/medialiveiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// MediaLiveDouble is TestDouble for medialiveiface.MediaLiveAPI
type MediaLiveDouble struct {
	medialiveiface.MediaLiveAPI
	*awsdouble.AWSTestDouble
}

// Constructor for MediaLiveDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *MediaLiveDouble {
	result := &MediaLiveDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*medialiveiface.MediaLiveAPI)(nil), configurators...)
	return result
}

func (d *MediaLiveDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *MediaLiveDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "BatchUpdateScheduleWithContext":
		return m.Fake(d.fakeBatchUpdateScheduleWithContext)

	case "CreateChannelWithContext":
		return m.Fake(d.fakeCreateChannelWithContext)

	case "CreateInputSecurityGroupWithContext":
		return m.Fake(d.fakeCreateInputSecurityGroupWithContext)

	case "CreateInputWithContext":
		return m.Fake(d.fakeCreateInputWithContext)

	case "CreateMultiplexProgramWithContext":
		return m.Fake(d.fakeCreateMultiplexProgramWithContext)

	case "CreateMultiplexWithContext":
		return m.Fake(d.fakeCreateMultiplexWithContext)

	case "CreateTagsWithContext":
		return m.Fake(d.fakeCreateTagsWithContext)

	case "DeleteChannelWithContext":
		return m.Fake(d.fakeDeleteChannelWithContext)

	case "DeleteInputSecurityGroupWithContext":
		return m.Fake(d.fakeDeleteInputSecurityGroupWithContext)

	case "DeleteInputWithContext":
		return m.Fake(d.fakeDeleteInputWithContext)

	case "DeleteMultiplexProgramWithContext":
		return m.Fake(d.fakeDeleteMultiplexProgramWithContext)

	case "DeleteMultiplexWithContext":
		return m.Fake(d.fakeDeleteMultiplexWithContext)

	case "DeleteReservationWithContext":
		return m.Fake(d.fakeDeleteReservationWithContext)

	case "DeleteScheduleWithContext":
		return m.Fake(d.fakeDeleteScheduleWithContext)

	case "DeleteTagsWithContext":
		return m.Fake(d.fakeDeleteTagsWithContext)

	case "DescribeChannelWithContext":
		return m.Fake(d.fakeDescribeChannelWithContext)

	case "DescribeInputSecurityGroupWithContext":
		return m.Fake(d.fakeDescribeInputSecurityGroupWithContext)

	case "DescribeInputWithContext":
		return m.Fake(d.fakeDescribeInputWithContext)

	case "DescribeMultiplexProgramWithContext":
		return m.Fake(d.fakeDescribeMultiplexProgramWithContext)

	case "DescribeMultiplexWithContext":
		return m.Fake(d.fakeDescribeMultiplexWithContext)

	case "DescribeOfferingWithContext":
		return m.Fake(d.fakeDescribeOfferingWithContext)

	case "DescribeReservationWithContext":
		return m.Fake(d.fakeDescribeReservationWithContext)

	case "DescribeSchedulePages":
		return m.Fake(d.fakeDescribeSchedulePages)

	case "DescribeSchedulePagesWithContext":
		return m.Fake(d.fakeDescribeSchedulePagesWithContext)

	case "DescribeScheduleWithContext":
		return m.Fake(d.fakeDescribeScheduleWithContext)

	case "ListChannelsPages":
		return m.Fake(d.fakeListChannelsPages)

	case "ListChannelsPagesWithContext":
		return m.Fake(d.fakeListChannelsPagesWithContext)

	case "ListChannelsWithContext":
		return m.Fake(d.fakeListChannelsWithContext)

	case "ListInputSecurityGroupsPages":
		return m.Fake(d.fakeListInputSecurityGroupsPages)

	case "ListInputSecurityGroupsPagesWithContext":
		return m.Fake(d.fakeListInputSecurityGroupsPagesWithContext)

	case "ListInputSecurityGroupsWithContext":
		return m.Fake(d.fakeListInputSecurityGroupsWithContext)

	case "ListInputsPages":
		return m.Fake(d.fakeListInputsPages)

	case "ListInputsPagesWithContext":
		return m.Fake(d.fakeListInputsPagesWithContext)

	case "ListInputsWithContext":
		return m.Fake(d.fakeListInputsWithContext)

	case "ListMultiplexProgramsPages":
		return m.Fake(d.fakeListMultiplexProgramsPages)

	case "ListMultiplexProgramsPagesWithContext":
		return m.Fake(d.fakeListMultiplexProgramsPagesWithContext)

	case "ListMultiplexProgramsWithContext":
		return m.Fake(d.fakeListMultiplexProgramsWithContext)

	case "ListMultiplexesPages":
		return m.Fake(d.fakeListMultiplexesPages)

	case "ListMultiplexesPagesWithContext":
		return m.Fake(d.fakeListMultiplexesPagesWithContext)

	case "ListMultiplexesWithContext":
		return m.Fake(d.fakeListMultiplexesWithContext)

	case "ListOfferingsPages":
		return m.Fake(d.fakeListOfferingsPages)

	case "ListOfferingsPagesWithContext":
		return m.Fake(d.fakeListOfferingsPagesWithContext)

	case "ListOfferingsWithContext":
		return m.Fake(d.fakeListOfferingsWithContext)

	case "ListReservationsPages":
		return m.Fake(d.fakeListReservationsPages)

	case "ListReservationsPagesWithContext":
		return m.Fake(d.fakeListReservationsPagesWithContext)

	case "ListReservationsWithContext":
		return m.Fake(d.fakeListReservationsWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "PurchaseOfferingWithContext":
		return m.Fake(d.fakePurchaseOfferingWithContext)

	case "StartChannelWithContext":
		return m.Fake(d.fakeStartChannelWithContext)

	case "StartMultiplexWithContext":
		return m.Fake(d.fakeStartMultiplexWithContext)

	case "StopChannelWithContext":
		return m.Fake(d.fakeStopChannelWithContext)

	case "StopMultiplexWithContext":
		return m.Fake(d.fakeStopMultiplexWithContext)

	case "UpdateChannelClassWithContext":
		return m.Fake(d.fakeUpdateChannelClassWithContext)

	case "UpdateChannelWithContext":
		return m.Fake(d.fakeUpdateChannelWithContext)

	case "UpdateInputSecurityGroupWithContext":
		return m.Fake(d.fakeUpdateInputSecurityGroupWithContext)

	case "UpdateInputWithContext":
		return m.Fake(d.fakeUpdateInputWithContext)

	case "UpdateMultiplexProgramWithContext":
		return m.Fake(d.fakeUpdateMultiplexProgramWithContext)

	case "UpdateMultiplexWithContext":
		return m.Fake(d.fakeUpdateMultiplexWithContext)

	case "UpdateReservationWithContext":
		return m.Fake(d.fakeUpdateReservationWithContext)

	case "WaitUntilChannelCreated":
		return m.Fake(d.fakeWaitUntilChannelCreated)

	case "WaitUntilChannelCreatedWithContext":
		return m.Fake(d.fakeWaitUntilChannelCreatedWithContext)

	case "WaitUntilChannelDeleted":
		return m.Fake(d.fakeWaitUntilChannelDeleted)

	case "WaitUntilChannelDeletedWithContext":
		return m.Fake(d.fakeWaitUntilChannelDeletedWithContext)

	case "WaitUntilChannelRunning":
		return m.Fake(d.fakeWaitUntilChannelRunning)

	case "WaitUntilChannelRunningWithContext":
		return m.Fake(d.fakeWaitUntilChannelRunningWithContext)

	case "WaitUntilChannelStopped":
		return m.Fake(d.fakeWaitUntilChannelStopped)

	case "WaitUntilChannelStoppedWithContext":
		return m.Fake(d.fakeWaitUntilChannelStoppedWithContext)

	case "WaitUntilMultiplexCreated":
		return m.Fake(d.fakeWaitUntilMultiplexCreated)

	case "WaitUntilMultiplexCreatedWithContext":
		return m.Fake(d.fakeWaitUntilMultiplexCreatedWithContext)

	case "WaitUntilMultiplexDeleted":
		return m.Fake(d.fakeWaitUntilMultiplexDeleted)

	case "WaitUntilMultiplexDeletedWithContext":
		return m.Fake(d.fakeWaitUntilMultiplexDeletedWithContext)

	case "WaitUntilMultiplexRunning":
		return m.Fake(d.fakeWaitUntilMultiplexRunning)

	case "WaitUntilMultiplexRunningWithContext":
		return m.Fake(d.fakeWaitUntilMultiplexRunningWithContext)

	case "WaitUntilMultiplexStopped":
		return m.Fake(d.fakeWaitUntilMultiplexStopped)

	case "WaitUntilMultiplexStoppedWithContext":
		return m.Fake(d.fakeWaitUntilMultiplexStoppedWithContext)

	default:
		return nil
	}
}

func (d *MediaLiveDouble) BatchUpdateSchedule(i0 *medialive.BatchUpdateScheduleInput) (r0 *medialive.BatchUpdateScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchUpdateSchedule", i0)
	r0, _ = returns[0].(*medialive.BatchUpdateScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) BatchUpdateScheduleRequest(i0 *medialive.BatchUpdateScheduleInput) (r0 *request.Request, r1 *medialive.BatchUpdateScheduleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchUpdateScheduleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.BatchUpdateScheduleOutput)
	return
}

func (d *MediaLiveDouble) BatchUpdateScheduleWithContext(i0 context.Context, i1 *medialive.BatchUpdateScheduleInput, i2 ...request.Option) (r0 *medialive.BatchUpdateScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchUpdateScheduleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.BatchUpdateScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeBatchUpdateScheduleWithContext(ctx context.Context, in *medialive.BatchUpdateScheduleInput, _ ...request.Option) (*medialive.BatchUpdateScheduleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchUpdateSchedule cancelled", ctx.Err())
	default:
		return d.BatchUpdateSchedule(in)
	}
}

func (d *MediaLiveDouble) CreateChannel(i0 *medialive.CreateChannelInput) (r0 *medialive.CreateChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateChannel", i0)
	r0, _ = returns[0].(*medialive.CreateChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) CreateChannelRequest(i0 *medialive.CreateChannelInput) (r0 *request.Request, r1 *medialive.CreateChannelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateChannelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.CreateChannelOutput)
	return
}

func (d *MediaLiveDouble) CreateChannelWithContext(i0 context.Context, i1 *medialive.CreateChannelInput, i2 ...request.Option) (r0 *medialive.CreateChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateChannelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.CreateChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeCreateChannelWithContext(ctx context.Context, in *medialive.CreateChannelInput, _ ...request.Option) (*medialive.CreateChannelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateChannel cancelled", ctx.Err())
	default:
		return d.CreateChannel(in)
	}
}

func (d *MediaLiveDouble) CreateInput(i0 *medialive.CreateInputInput) (r0 *medialive.CreateInputOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInput", i0)
	r0, _ = returns[0].(*medialive.CreateInputOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) CreateInputRequest(i0 *medialive.CreateInputInput) (r0 *request.Request, r1 *medialive.CreateInputOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInputRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.CreateInputOutput)
	return
}

func (d *MediaLiveDouble) CreateInputSecurityGroup(i0 *medialive.CreateInputSecurityGroupInput) (r0 *medialive.CreateInputSecurityGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInputSecurityGroup", i0)
	r0, _ = returns[0].(*medialive.CreateInputSecurityGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) CreateInputSecurityGroupRequest(i0 *medialive.CreateInputSecurityGroupInput) (r0 *request.Request, r1 *medialive.CreateInputSecurityGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInputSecurityGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.CreateInputSecurityGroupOutput)
	return
}

func (d *MediaLiveDouble) CreateInputSecurityGroupWithContext(i0 context.Context, i1 *medialive.CreateInputSecurityGroupInput, i2 ...request.Option) (r0 *medialive.CreateInputSecurityGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInputSecurityGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.CreateInputSecurityGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeCreateInputSecurityGroupWithContext(ctx context.Context, in *medialive.CreateInputSecurityGroupInput, _ ...request.Option) (*medialive.CreateInputSecurityGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateInputSecurityGroup cancelled", ctx.Err())
	default:
		return d.CreateInputSecurityGroup(in)
	}
}

func (d *MediaLiveDouble) CreateInputWithContext(i0 context.Context, i1 *medialive.CreateInputInput, i2 ...request.Option) (r0 *medialive.CreateInputOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInputWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.CreateInputOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeCreateInputWithContext(ctx context.Context, in *medialive.CreateInputInput, _ ...request.Option) (*medialive.CreateInputOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateInput cancelled", ctx.Err())
	default:
		return d.CreateInput(in)
	}
}

func (d *MediaLiveDouble) CreateMultiplex(i0 *medialive.CreateMultiplexInput) (r0 *medialive.CreateMultiplexOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMultiplex", i0)
	r0, _ = returns[0].(*medialive.CreateMultiplexOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) CreateMultiplexProgram(i0 *medialive.CreateMultiplexProgramInput) (r0 *medialive.CreateMultiplexProgramOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMultiplexProgram", i0)
	r0, _ = returns[0].(*medialive.CreateMultiplexProgramOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) CreateMultiplexProgramRequest(i0 *medialive.CreateMultiplexProgramInput) (r0 *request.Request, r1 *medialive.CreateMultiplexProgramOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMultiplexProgramRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.CreateMultiplexProgramOutput)
	return
}

func (d *MediaLiveDouble) CreateMultiplexProgramWithContext(i0 context.Context, i1 *medialive.CreateMultiplexProgramInput, i2 ...request.Option) (r0 *medialive.CreateMultiplexProgramOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMultiplexProgramWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.CreateMultiplexProgramOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeCreateMultiplexProgramWithContext(ctx context.Context, in *medialive.CreateMultiplexProgramInput, _ ...request.Option) (*medialive.CreateMultiplexProgramOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateMultiplexProgram cancelled", ctx.Err())
	default:
		return d.CreateMultiplexProgram(in)
	}
}

func (d *MediaLiveDouble) CreateMultiplexRequest(i0 *medialive.CreateMultiplexInput) (r0 *request.Request, r1 *medialive.CreateMultiplexOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMultiplexRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.CreateMultiplexOutput)
	return
}

func (d *MediaLiveDouble) CreateMultiplexWithContext(i0 context.Context, i1 *medialive.CreateMultiplexInput, i2 ...request.Option) (r0 *medialive.CreateMultiplexOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMultiplexWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.CreateMultiplexOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeCreateMultiplexWithContext(ctx context.Context, in *medialive.CreateMultiplexInput, _ ...request.Option) (*medialive.CreateMultiplexOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateMultiplex cancelled", ctx.Err())
	default:
		return d.CreateMultiplex(in)
	}
}

func (d *MediaLiveDouble) CreateTags(i0 *medialive.CreateTagsInput) (r0 *medialive.CreateTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTags", i0)
	r0, _ = returns[0].(*medialive.CreateTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) CreateTagsRequest(i0 *medialive.CreateTagsInput) (r0 *request.Request, r1 *medialive.CreateTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.CreateTagsOutput)
	return
}

func (d *MediaLiveDouble) CreateTagsWithContext(i0 context.Context, i1 *medialive.CreateTagsInput, i2 ...request.Option) (r0 *medialive.CreateTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.CreateTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeCreateTagsWithContext(ctx context.Context, in *medialive.CreateTagsInput, _ ...request.Option) (*medialive.CreateTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTags cancelled", ctx.Err())
	default:
		return d.CreateTags(in)
	}
}

func (d *MediaLiveDouble) DeleteChannel(i0 *medialive.DeleteChannelInput) (r0 *medialive.DeleteChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteChannel", i0)
	r0, _ = returns[0].(*medialive.DeleteChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) DeleteChannelRequest(i0 *medialive.DeleteChannelInput) (r0 *request.Request, r1 *medialive.DeleteChannelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteChannelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.DeleteChannelOutput)
	return
}

func (d *MediaLiveDouble) DeleteChannelWithContext(i0 context.Context, i1 *medialive.DeleteChannelInput, i2 ...request.Option) (r0 *medialive.DeleteChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteChannelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.DeleteChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeDeleteChannelWithContext(ctx context.Context, in *medialive.DeleteChannelInput, _ ...request.Option) (*medialive.DeleteChannelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteChannel cancelled", ctx.Err())
	default:
		return d.DeleteChannel(in)
	}
}

func (d *MediaLiveDouble) DeleteInput(i0 *medialive.DeleteInputInput) (r0 *medialive.DeleteInputOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInput", i0)
	r0, _ = returns[0].(*medialive.DeleteInputOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) DeleteInputRequest(i0 *medialive.DeleteInputInput) (r0 *request.Request, r1 *medialive.DeleteInputOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInputRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.DeleteInputOutput)
	return
}

func (d *MediaLiveDouble) DeleteInputSecurityGroup(i0 *medialive.DeleteInputSecurityGroupInput) (r0 *medialive.DeleteInputSecurityGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInputSecurityGroup", i0)
	r0, _ = returns[0].(*medialive.DeleteInputSecurityGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) DeleteInputSecurityGroupRequest(i0 *medialive.DeleteInputSecurityGroupInput) (r0 *request.Request, r1 *medialive.DeleteInputSecurityGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInputSecurityGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.DeleteInputSecurityGroupOutput)
	return
}

func (d *MediaLiveDouble) DeleteInputSecurityGroupWithContext(i0 context.Context, i1 *medialive.DeleteInputSecurityGroupInput, i2 ...request.Option) (r0 *medialive.DeleteInputSecurityGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInputSecurityGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.DeleteInputSecurityGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeDeleteInputSecurityGroupWithContext(ctx context.Context, in *medialive.DeleteInputSecurityGroupInput, _ ...request.Option) (*medialive.DeleteInputSecurityGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteInputSecurityGroup cancelled", ctx.Err())
	default:
		return d.DeleteInputSecurityGroup(in)
	}
}

func (d *MediaLiveDouble) DeleteInputWithContext(i0 context.Context, i1 *medialive.DeleteInputInput, i2 ...request.Option) (r0 *medialive.DeleteInputOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInputWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.DeleteInputOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeDeleteInputWithContext(ctx context.Context, in *medialive.DeleteInputInput, _ ...request.Option) (*medialive.DeleteInputOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteInput cancelled", ctx.Err())
	default:
		return d.DeleteInput(in)
	}
}

func (d *MediaLiveDouble) DeleteMultiplex(i0 *medialive.DeleteMultiplexInput) (r0 *medialive.DeleteMultiplexOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMultiplex", i0)
	r0, _ = returns[0].(*medialive.DeleteMultiplexOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) DeleteMultiplexProgram(i0 *medialive.DeleteMultiplexProgramInput) (r0 *medialive.DeleteMultiplexProgramOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMultiplexProgram", i0)
	r0, _ = returns[0].(*medialive.DeleteMultiplexProgramOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) DeleteMultiplexProgramRequest(i0 *medialive.DeleteMultiplexProgramInput) (r0 *request.Request, r1 *medialive.DeleteMultiplexProgramOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMultiplexProgramRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.DeleteMultiplexProgramOutput)
	return
}

func (d *MediaLiveDouble) DeleteMultiplexProgramWithContext(i0 context.Context, i1 *medialive.DeleteMultiplexProgramInput, i2 ...request.Option) (r0 *medialive.DeleteMultiplexProgramOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMultiplexProgramWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.DeleteMultiplexProgramOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeDeleteMultiplexProgramWithContext(ctx context.Context, in *medialive.DeleteMultiplexProgramInput, _ ...request.Option) (*medialive.DeleteMultiplexProgramOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteMultiplexProgram cancelled", ctx.Err())
	default:
		return d.DeleteMultiplexProgram(in)
	}
}

func (d *MediaLiveDouble) DeleteMultiplexRequest(i0 *medialive.DeleteMultiplexInput) (r0 *request.Request, r1 *medialive.DeleteMultiplexOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMultiplexRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.DeleteMultiplexOutput)
	return
}

func (d *MediaLiveDouble) DeleteMultiplexWithContext(i0 context.Context, i1 *medialive.DeleteMultiplexInput, i2 ...request.Option) (r0 *medialive.DeleteMultiplexOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMultiplexWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.DeleteMultiplexOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeDeleteMultiplexWithContext(ctx context.Context, in *medialive.DeleteMultiplexInput, _ ...request.Option) (*medialive.DeleteMultiplexOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteMultiplex cancelled", ctx.Err())
	default:
		return d.DeleteMultiplex(in)
	}
}

func (d *MediaLiveDouble) DeleteReservation(i0 *medialive.DeleteReservationInput) (r0 *medialive.DeleteReservationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteReservation", i0)
	r0, _ = returns[0].(*medialive.DeleteReservationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) DeleteReservationRequest(i0 *medialive.DeleteReservationInput) (r0 *request.Request, r1 *medialive.DeleteReservationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteReservationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.DeleteReservationOutput)
	return
}

func (d *MediaLiveDouble) DeleteReservationWithContext(i0 context.Context, i1 *medialive.DeleteReservationInput, i2 ...request.Option) (r0 *medialive.DeleteReservationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteReservationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.DeleteReservationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeDeleteReservationWithContext(ctx context.Context, in *medialive.DeleteReservationInput, _ ...request.Option) (*medialive.DeleteReservationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteReservation cancelled", ctx.Err())
	default:
		return d.DeleteReservation(in)
	}
}

func (d *MediaLiveDouble) DeleteSchedule(i0 *medialive.DeleteScheduleInput) (r0 *medialive.DeleteScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSchedule", i0)
	r0, _ = returns[0].(*medialive.DeleteScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) DeleteScheduleRequest(i0 *medialive.DeleteScheduleInput) (r0 *request.Request, r1 *medialive.DeleteScheduleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteScheduleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.DeleteScheduleOutput)
	return
}

func (d *MediaLiveDouble) DeleteScheduleWithContext(i0 context.Context, i1 *medialive.DeleteScheduleInput, i2 ...request.Option) (r0 *medialive.DeleteScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteScheduleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.DeleteScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeDeleteScheduleWithContext(ctx context.Context, in *medialive.DeleteScheduleInput, _ ...request.Option) (*medialive.DeleteScheduleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteSchedule cancelled", ctx.Err())
	default:
		return d.DeleteSchedule(in)
	}
}

func (d *MediaLiveDouble) DeleteTags(i0 *medialive.DeleteTagsInput) (r0 *medialive.DeleteTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTags", i0)
	r0, _ = returns[0].(*medialive.DeleteTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) DeleteTagsRequest(i0 *medialive.DeleteTagsInput) (r0 *request.Request, r1 *medialive.DeleteTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.DeleteTagsOutput)
	return
}

func (d *MediaLiveDouble) DeleteTagsWithContext(i0 context.Context, i1 *medialive.DeleteTagsInput, i2 ...request.Option) (r0 *medialive.DeleteTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.DeleteTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeDeleteTagsWithContext(ctx context.Context, in *medialive.DeleteTagsInput, _ ...request.Option) (*medialive.DeleteTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTags cancelled", ctx.Err())
	default:
		return d.DeleteTags(in)
	}
}

func (d *MediaLiveDouble) DescribeChannel(i0 *medialive.DescribeChannelInput) (r0 *medialive.DescribeChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeChannel", i0)
	r0, _ = returns[0].(*medialive.DescribeChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) DescribeChannelRequest(i0 *medialive.DescribeChannelInput) (r0 *request.Request, r1 *medialive.DescribeChannelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeChannelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.DescribeChannelOutput)
	return
}

func (d *MediaLiveDouble) DescribeChannelWithContext(i0 context.Context, i1 *medialive.DescribeChannelInput, i2 ...request.Option) (r0 *medialive.DescribeChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeChannelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.DescribeChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeDescribeChannelWithContext(ctx context.Context, in *medialive.DescribeChannelInput, _ ...request.Option) (*medialive.DescribeChannelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeChannel cancelled", ctx.Err())
	default:
		return d.DescribeChannel(in)
	}
}

func (d *MediaLiveDouble) DescribeInput(i0 *medialive.DescribeInputInput) (r0 *medialive.DescribeInputOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInput", i0)
	r0, _ = returns[0].(*medialive.DescribeInputOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) DescribeInputRequest(i0 *medialive.DescribeInputInput) (r0 *request.Request, r1 *medialive.DescribeInputOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInputRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.DescribeInputOutput)
	return
}

func (d *MediaLiveDouble) DescribeInputSecurityGroup(i0 *medialive.DescribeInputSecurityGroupInput) (r0 *medialive.DescribeInputSecurityGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInputSecurityGroup", i0)
	r0, _ = returns[0].(*medialive.DescribeInputSecurityGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) DescribeInputSecurityGroupRequest(i0 *medialive.DescribeInputSecurityGroupInput) (r0 *request.Request, r1 *medialive.DescribeInputSecurityGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInputSecurityGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.DescribeInputSecurityGroupOutput)
	return
}

func (d *MediaLiveDouble) DescribeInputSecurityGroupWithContext(i0 context.Context, i1 *medialive.DescribeInputSecurityGroupInput, i2 ...request.Option) (r0 *medialive.DescribeInputSecurityGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInputSecurityGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.DescribeInputSecurityGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeDescribeInputSecurityGroupWithContext(ctx context.Context, in *medialive.DescribeInputSecurityGroupInput, _ ...request.Option) (*medialive.DescribeInputSecurityGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeInputSecurityGroup cancelled", ctx.Err())
	default:
		return d.DescribeInputSecurityGroup(in)
	}
}

func (d *MediaLiveDouble) DescribeInputWithContext(i0 context.Context, i1 *medialive.DescribeInputInput, i2 ...request.Option) (r0 *medialive.DescribeInputOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInputWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.DescribeInputOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeDescribeInputWithContext(ctx context.Context, in *medialive.DescribeInputInput, _ ...request.Option) (*medialive.DescribeInputOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeInput cancelled", ctx.Err())
	default:
		return d.DescribeInput(in)
	}
}

func (d *MediaLiveDouble) DescribeMultiplex(i0 *medialive.DescribeMultiplexInput) (r0 *medialive.DescribeMultiplexOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMultiplex", i0)
	r0, _ = returns[0].(*medialive.DescribeMultiplexOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) DescribeMultiplexProgram(i0 *medialive.DescribeMultiplexProgramInput) (r0 *medialive.DescribeMultiplexProgramOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMultiplexProgram", i0)
	r0, _ = returns[0].(*medialive.DescribeMultiplexProgramOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) DescribeMultiplexProgramRequest(i0 *medialive.DescribeMultiplexProgramInput) (r0 *request.Request, r1 *medialive.DescribeMultiplexProgramOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMultiplexProgramRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.DescribeMultiplexProgramOutput)
	return
}

func (d *MediaLiveDouble) DescribeMultiplexProgramWithContext(i0 context.Context, i1 *medialive.DescribeMultiplexProgramInput, i2 ...request.Option) (r0 *medialive.DescribeMultiplexProgramOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMultiplexProgramWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.DescribeMultiplexProgramOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeDescribeMultiplexProgramWithContext(ctx context.Context, in *medialive.DescribeMultiplexProgramInput, _ ...request.Option) (*medialive.DescribeMultiplexProgramOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeMultiplexProgram cancelled", ctx.Err())
	default:
		return d.DescribeMultiplexProgram(in)
	}
}

func (d *MediaLiveDouble) DescribeMultiplexRequest(i0 *medialive.DescribeMultiplexInput) (r0 *request.Request, r1 *medialive.DescribeMultiplexOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMultiplexRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.DescribeMultiplexOutput)
	return
}

func (d *MediaLiveDouble) DescribeMultiplexWithContext(i0 context.Context, i1 *medialive.DescribeMultiplexInput, i2 ...request.Option) (r0 *medialive.DescribeMultiplexOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMultiplexWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.DescribeMultiplexOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeDescribeMultiplexWithContext(ctx context.Context, in *medialive.DescribeMultiplexInput, _ ...request.Option) (*medialive.DescribeMultiplexOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeMultiplex cancelled", ctx.Err())
	default:
		return d.DescribeMultiplex(in)
	}
}

func (d *MediaLiveDouble) DescribeOffering(i0 *medialive.DescribeOfferingInput) (r0 *medialive.DescribeOfferingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOffering", i0)
	r0, _ = returns[0].(*medialive.DescribeOfferingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) DescribeOfferingRequest(i0 *medialive.DescribeOfferingInput) (r0 *request.Request, r1 *medialive.DescribeOfferingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOfferingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.DescribeOfferingOutput)
	return
}

func (d *MediaLiveDouble) DescribeOfferingWithContext(i0 context.Context, i1 *medialive.DescribeOfferingInput, i2 ...request.Option) (r0 *medialive.DescribeOfferingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOfferingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.DescribeOfferingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeDescribeOfferingWithContext(ctx context.Context, in *medialive.DescribeOfferingInput, _ ...request.Option) (*medialive.DescribeOfferingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeOffering cancelled", ctx.Err())
	default:
		return d.DescribeOffering(in)
	}
}

func (d *MediaLiveDouble) DescribeReservation(i0 *medialive.DescribeReservationInput) (r0 *medialive.DescribeReservationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservation", i0)
	r0, _ = returns[0].(*medialive.DescribeReservationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) DescribeReservationRequest(i0 *medialive.DescribeReservationInput) (r0 *request.Request, r1 *medialive.DescribeReservationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.DescribeReservationOutput)
	return
}

func (d *MediaLiveDouble) DescribeReservationWithContext(i0 context.Context, i1 *medialive.DescribeReservationInput, i2 ...request.Option) (r0 *medialive.DescribeReservationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.DescribeReservationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeDescribeReservationWithContext(ctx context.Context, in *medialive.DescribeReservationInput, _ ...request.Option) (*medialive.DescribeReservationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeReservation cancelled", ctx.Err())
	default:
		return d.DescribeReservation(in)
	}
}

func (d *MediaLiveDouble) DescribeSchedule(i0 *medialive.DescribeScheduleInput) (r0 *medialive.DescribeScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSchedule", i0)
	r0, _ = returns[0].(*medialive.DescribeScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) DescribeSchedulePages(i0 *medialive.DescribeScheduleInput, i1 func(*medialive.DescribeScheduleOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSchedulePages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaLiveDouble) fakeDescribeSchedulePages(in *medialive.DescribeScheduleInput, pager func(*medialive.DescribeScheduleOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeSchedule", paginators, in, pager)
}

func (d *MediaLiveDouble) DescribeSchedulePagesWithContext(i0 context.Context, i1 *medialive.DescribeScheduleInput, i2 func(*medialive.DescribeScheduleOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSchedulePagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaLiveDouble) fakeDescribeSchedulePagesWithContext(ctx context.Context, in *medialive.DescribeScheduleInput, pager func(*medialive.DescribeScheduleOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeSchedule", paginators, ctx, in, pager, options...)
}

func (d *MediaLiveDouble) DescribeScheduleRequest(i0 *medialive.DescribeScheduleInput) (r0 *request.Request, r1 *medialive.DescribeScheduleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScheduleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.DescribeScheduleOutput)
	return
}

func (d *MediaLiveDouble) DescribeScheduleWithContext(i0 context.Context, i1 *medialive.DescribeScheduleInput, i2 ...request.Option) (r0 *medialive.DescribeScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScheduleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.DescribeScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeDescribeScheduleWithContext(ctx context.Context, in *medialive.DescribeScheduleInput, _ ...request.Option) (*medialive.DescribeScheduleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSchedule cancelled", ctx.Err())
	default:
		return d.DescribeSchedule(in)
	}
}

func (d *MediaLiveDouble) ListChannels(i0 *medialive.ListChannelsInput) (r0 *medialive.ListChannelsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListChannels", i0)
	r0, _ = returns[0].(*medialive.ListChannelsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) ListChannelsPages(i0 *medialive.ListChannelsInput, i1 func(*medialive.ListChannelsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListChannelsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaLiveDouble) fakeListChannelsPages(in *medialive.ListChannelsInput, pager func(*medialive.ListChannelsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListChannels", paginators, in, pager)
}

func (d *MediaLiveDouble) ListChannelsPagesWithContext(i0 context.Context, i1 *medialive.ListChannelsInput, i2 func(*medialive.ListChannelsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListChannelsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaLiveDouble) fakeListChannelsPagesWithContext(ctx context.Context, in *medialive.ListChannelsInput, pager func(*medialive.ListChannelsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListChannels", paginators, ctx, in, pager, options...)
}

func (d *MediaLiveDouble) ListChannelsRequest(i0 *medialive.ListChannelsInput) (r0 *request.Request, r1 *medialive.ListChannelsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListChannelsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.ListChannelsOutput)
	return
}

func (d *MediaLiveDouble) ListChannelsWithContext(i0 context.Context, i1 *medialive.ListChannelsInput, i2 ...request.Option) (r0 *medialive.ListChannelsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListChannelsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.ListChannelsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeListChannelsWithContext(ctx context.Context, in *medialive.ListChannelsInput, _ ...request.Option) (*medialive.ListChannelsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListChannels cancelled", ctx.Err())
	default:
		return d.ListChannels(in)
	}
}

func (d *MediaLiveDouble) ListInputSecurityGroups(i0 *medialive.ListInputSecurityGroupsInput) (r0 *medialive.ListInputSecurityGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInputSecurityGroups", i0)
	r0, _ = returns[0].(*medialive.ListInputSecurityGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) ListInputSecurityGroupsPages(i0 *medialive.ListInputSecurityGroupsInput, i1 func(*medialive.ListInputSecurityGroupsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInputSecurityGroupsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaLiveDouble) fakeListInputSecurityGroupsPages(in *medialive.ListInputSecurityGroupsInput, pager func(*medialive.ListInputSecurityGroupsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListInputSecurityGroups", paginators, in, pager)
}

func (d *MediaLiveDouble) ListInputSecurityGroupsPagesWithContext(i0 context.Context, i1 *medialive.ListInputSecurityGroupsInput, i2 func(*medialive.ListInputSecurityGroupsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInputSecurityGroupsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaLiveDouble) fakeListInputSecurityGroupsPagesWithContext(ctx context.Context, in *medialive.ListInputSecurityGroupsInput, pager func(*medialive.ListInputSecurityGroupsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListInputSecurityGroups", paginators, ctx, in, pager, options...)
}

func (d *MediaLiveDouble) ListInputSecurityGroupsRequest(i0 *medialive.ListInputSecurityGroupsInput) (r0 *request.Request, r1 *medialive.ListInputSecurityGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInputSecurityGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.ListInputSecurityGroupsOutput)
	return
}

func (d *MediaLiveDouble) ListInputSecurityGroupsWithContext(i0 context.Context, i1 *medialive.ListInputSecurityGroupsInput, i2 ...request.Option) (r0 *medialive.ListInputSecurityGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInputSecurityGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.ListInputSecurityGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeListInputSecurityGroupsWithContext(ctx context.Context, in *medialive.ListInputSecurityGroupsInput, _ ...request.Option) (*medialive.ListInputSecurityGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListInputSecurityGroups cancelled", ctx.Err())
	default:
		return d.ListInputSecurityGroups(in)
	}
}

func (d *MediaLiveDouble) ListInputs(i0 *medialive.ListInputsInput) (r0 *medialive.ListInputsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInputs", i0)
	r0, _ = returns[0].(*medialive.ListInputsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) ListInputsPages(i0 *medialive.ListInputsInput, i1 func(*medialive.ListInputsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInputsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaLiveDouble) fakeListInputsPages(in *medialive.ListInputsInput, pager func(*medialive.ListInputsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListInputs", paginators, in, pager)
}

func (d *MediaLiveDouble) ListInputsPagesWithContext(i0 context.Context, i1 *medialive.ListInputsInput, i2 func(*medialive.ListInputsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInputsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaLiveDouble) fakeListInputsPagesWithContext(ctx context.Context, in *medialive.ListInputsInput, pager func(*medialive.ListInputsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListInputs", paginators, ctx, in, pager, options...)
}

func (d *MediaLiveDouble) ListInputsRequest(i0 *medialive.ListInputsInput) (r0 *request.Request, r1 *medialive.ListInputsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInputsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.ListInputsOutput)
	return
}

func (d *MediaLiveDouble) ListInputsWithContext(i0 context.Context, i1 *medialive.ListInputsInput, i2 ...request.Option) (r0 *medialive.ListInputsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInputsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.ListInputsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeListInputsWithContext(ctx context.Context, in *medialive.ListInputsInput, _ ...request.Option) (*medialive.ListInputsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListInputs cancelled", ctx.Err())
	default:
		return d.ListInputs(in)
	}
}

func (d *MediaLiveDouble) ListMultiplexPrograms(i0 *medialive.ListMultiplexProgramsInput) (r0 *medialive.ListMultiplexProgramsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMultiplexPrograms", i0)
	r0, _ = returns[0].(*medialive.ListMultiplexProgramsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) ListMultiplexProgramsPages(i0 *medialive.ListMultiplexProgramsInput, i1 func(*medialive.ListMultiplexProgramsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMultiplexProgramsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaLiveDouble) fakeListMultiplexProgramsPages(in *medialive.ListMultiplexProgramsInput, pager func(*medialive.ListMultiplexProgramsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListMultiplexPrograms", paginators, in, pager)
}

func (d *MediaLiveDouble) ListMultiplexProgramsPagesWithContext(i0 context.Context, i1 *medialive.ListMultiplexProgramsInput, i2 func(*medialive.ListMultiplexProgramsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMultiplexProgramsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaLiveDouble) fakeListMultiplexProgramsPagesWithContext(ctx context.Context, in *medialive.ListMultiplexProgramsInput, pager func(*medialive.ListMultiplexProgramsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListMultiplexPrograms", paginators, ctx, in, pager, options...)
}

func (d *MediaLiveDouble) ListMultiplexProgramsRequest(i0 *medialive.ListMultiplexProgramsInput) (r0 *request.Request, r1 *medialive.ListMultiplexProgramsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMultiplexProgramsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.ListMultiplexProgramsOutput)
	return
}

func (d *MediaLiveDouble) ListMultiplexProgramsWithContext(i0 context.Context, i1 *medialive.ListMultiplexProgramsInput, i2 ...request.Option) (r0 *medialive.ListMultiplexProgramsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMultiplexProgramsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.ListMultiplexProgramsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeListMultiplexProgramsWithContext(ctx context.Context, in *medialive.ListMultiplexProgramsInput, _ ...request.Option) (*medialive.ListMultiplexProgramsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListMultiplexPrograms cancelled", ctx.Err())
	default:
		return d.ListMultiplexPrograms(in)
	}
}

func (d *MediaLiveDouble) ListMultiplexes(i0 *medialive.ListMultiplexesInput) (r0 *medialive.ListMultiplexesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMultiplexes", i0)
	r0, _ = returns[0].(*medialive.ListMultiplexesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) ListMultiplexesPages(i0 *medialive.ListMultiplexesInput, i1 func(*medialive.ListMultiplexesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMultiplexesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaLiveDouble) fakeListMultiplexesPages(in *medialive.ListMultiplexesInput, pager func(*medialive.ListMultiplexesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListMultiplexes", paginators, in, pager)
}

func (d *MediaLiveDouble) ListMultiplexesPagesWithContext(i0 context.Context, i1 *medialive.ListMultiplexesInput, i2 func(*medialive.ListMultiplexesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMultiplexesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaLiveDouble) fakeListMultiplexesPagesWithContext(ctx context.Context, in *medialive.ListMultiplexesInput, pager func(*medialive.ListMultiplexesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListMultiplexes", paginators, ctx, in, pager, options...)
}

func (d *MediaLiveDouble) ListMultiplexesRequest(i0 *medialive.ListMultiplexesInput) (r0 *request.Request, r1 *medialive.ListMultiplexesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMultiplexesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.ListMultiplexesOutput)
	return
}

func (d *MediaLiveDouble) ListMultiplexesWithContext(i0 context.Context, i1 *medialive.ListMultiplexesInput, i2 ...request.Option) (r0 *medialive.ListMultiplexesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMultiplexesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.ListMultiplexesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeListMultiplexesWithContext(ctx context.Context, in *medialive.ListMultiplexesInput, _ ...request.Option) (*medialive.ListMultiplexesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListMultiplexes cancelled", ctx.Err())
	default:
		return d.ListMultiplexes(in)
	}
}

func (d *MediaLiveDouble) ListOfferings(i0 *medialive.ListOfferingsInput) (r0 *medialive.ListOfferingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOfferings", i0)
	r0, _ = returns[0].(*medialive.ListOfferingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) ListOfferingsPages(i0 *medialive.ListOfferingsInput, i1 func(*medialive.ListOfferingsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOfferingsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaLiveDouble) fakeListOfferingsPages(in *medialive.ListOfferingsInput, pager func(*medialive.ListOfferingsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListOfferings", paginators, in, pager)
}

func (d *MediaLiveDouble) ListOfferingsPagesWithContext(i0 context.Context, i1 *medialive.ListOfferingsInput, i2 func(*medialive.ListOfferingsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOfferingsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaLiveDouble) fakeListOfferingsPagesWithContext(ctx context.Context, in *medialive.ListOfferingsInput, pager func(*medialive.ListOfferingsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListOfferings", paginators, ctx, in, pager, options...)
}

func (d *MediaLiveDouble) ListOfferingsRequest(i0 *medialive.ListOfferingsInput) (r0 *request.Request, r1 *medialive.ListOfferingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOfferingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.ListOfferingsOutput)
	return
}

func (d *MediaLiveDouble) ListOfferingsWithContext(i0 context.Context, i1 *medialive.ListOfferingsInput, i2 ...request.Option) (r0 *medialive.ListOfferingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOfferingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.ListOfferingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeListOfferingsWithContext(ctx context.Context, in *medialive.ListOfferingsInput, _ ...request.Option) (*medialive.ListOfferingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListOfferings cancelled", ctx.Err())
	default:
		return d.ListOfferings(in)
	}
}

func (d *MediaLiveDouble) ListReservations(i0 *medialive.ListReservationsInput) (r0 *medialive.ListReservationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListReservations", i0)
	r0, _ = returns[0].(*medialive.ListReservationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) ListReservationsPages(i0 *medialive.ListReservationsInput, i1 func(*medialive.ListReservationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListReservationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaLiveDouble) fakeListReservationsPages(in *medialive.ListReservationsInput, pager func(*medialive.ListReservationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListReservations", paginators, in, pager)
}

func (d *MediaLiveDouble) ListReservationsPagesWithContext(i0 context.Context, i1 *medialive.ListReservationsInput, i2 func(*medialive.ListReservationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListReservationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaLiveDouble) fakeListReservationsPagesWithContext(ctx context.Context, in *medialive.ListReservationsInput, pager func(*medialive.ListReservationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListReservations", paginators, ctx, in, pager, options...)
}

func (d *MediaLiveDouble) ListReservationsRequest(i0 *medialive.ListReservationsInput) (r0 *request.Request, r1 *medialive.ListReservationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListReservationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.ListReservationsOutput)
	return
}

func (d *MediaLiveDouble) ListReservationsWithContext(i0 context.Context, i1 *medialive.ListReservationsInput, i2 ...request.Option) (r0 *medialive.ListReservationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListReservationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.ListReservationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeListReservationsWithContext(ctx context.Context, in *medialive.ListReservationsInput, _ ...request.Option) (*medialive.ListReservationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListReservations cancelled", ctx.Err())
	default:
		return d.ListReservations(in)
	}
}

func (d *MediaLiveDouble) ListTagsForResource(i0 *medialive.ListTagsForResourceInput) (r0 *medialive.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*medialive.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) ListTagsForResourceRequest(i0 *medialive.ListTagsForResourceInput) (r0 *request.Request, r1 *medialive.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.ListTagsForResourceOutput)
	return
}

func (d *MediaLiveDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *medialive.ListTagsForResourceInput, i2 ...request.Option) (r0 *medialive.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *medialive.ListTagsForResourceInput, _ ...request.Option) (*medialive.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *MediaLiveDouble) PurchaseOffering(i0 *medialive.PurchaseOfferingInput) (r0 *medialive.PurchaseOfferingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PurchaseOffering", i0)
	r0, _ = returns[0].(*medialive.PurchaseOfferingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) PurchaseOfferingRequest(i0 *medialive.PurchaseOfferingInput) (r0 *request.Request, r1 *medialive.PurchaseOfferingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PurchaseOfferingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.PurchaseOfferingOutput)
	return
}

func (d *MediaLiveDouble) PurchaseOfferingWithContext(i0 context.Context, i1 *medialive.PurchaseOfferingInput, i2 ...request.Option) (r0 *medialive.PurchaseOfferingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PurchaseOfferingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.PurchaseOfferingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakePurchaseOfferingWithContext(ctx context.Context, in *medialive.PurchaseOfferingInput, _ ...request.Option) (*medialive.PurchaseOfferingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PurchaseOffering cancelled", ctx.Err())
	default:
		return d.PurchaseOffering(in)
	}
}

func (d *MediaLiveDouble) StartChannel(i0 *medialive.StartChannelInput) (r0 *medialive.StartChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartChannel", i0)
	r0, _ = returns[0].(*medialive.StartChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) StartChannelRequest(i0 *medialive.StartChannelInput) (r0 *request.Request, r1 *medialive.StartChannelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartChannelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.StartChannelOutput)
	return
}

func (d *MediaLiveDouble) StartChannelWithContext(i0 context.Context, i1 *medialive.StartChannelInput, i2 ...request.Option) (r0 *medialive.StartChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartChannelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.StartChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeStartChannelWithContext(ctx context.Context, in *medialive.StartChannelInput, _ ...request.Option) (*medialive.StartChannelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartChannel cancelled", ctx.Err())
	default:
		return d.StartChannel(in)
	}
}

func (d *MediaLiveDouble) StartMultiplex(i0 *medialive.StartMultiplexInput) (r0 *medialive.StartMultiplexOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartMultiplex", i0)
	r0, _ = returns[0].(*medialive.StartMultiplexOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) StartMultiplexRequest(i0 *medialive.StartMultiplexInput) (r0 *request.Request, r1 *medialive.StartMultiplexOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartMultiplexRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.StartMultiplexOutput)
	return
}

func (d *MediaLiveDouble) StartMultiplexWithContext(i0 context.Context, i1 *medialive.StartMultiplexInput, i2 ...request.Option) (r0 *medialive.StartMultiplexOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartMultiplexWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.StartMultiplexOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeStartMultiplexWithContext(ctx context.Context, in *medialive.StartMultiplexInput, _ ...request.Option) (*medialive.StartMultiplexOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartMultiplex cancelled", ctx.Err())
	default:
		return d.StartMultiplex(in)
	}
}

func (d *MediaLiveDouble) StopChannel(i0 *medialive.StopChannelInput) (r0 *medialive.StopChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopChannel", i0)
	r0, _ = returns[0].(*medialive.StopChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) StopChannelRequest(i0 *medialive.StopChannelInput) (r0 *request.Request, r1 *medialive.StopChannelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopChannelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.StopChannelOutput)
	return
}

func (d *MediaLiveDouble) StopChannelWithContext(i0 context.Context, i1 *medialive.StopChannelInput, i2 ...request.Option) (r0 *medialive.StopChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopChannelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.StopChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeStopChannelWithContext(ctx context.Context, in *medialive.StopChannelInput, _ ...request.Option) (*medialive.StopChannelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopChannel cancelled", ctx.Err())
	default:
		return d.StopChannel(in)
	}
}

func (d *MediaLiveDouble) StopMultiplex(i0 *medialive.StopMultiplexInput) (r0 *medialive.StopMultiplexOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopMultiplex", i0)
	r0, _ = returns[0].(*medialive.StopMultiplexOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) StopMultiplexRequest(i0 *medialive.StopMultiplexInput) (r0 *request.Request, r1 *medialive.StopMultiplexOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopMultiplexRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.StopMultiplexOutput)
	return
}

func (d *MediaLiveDouble) StopMultiplexWithContext(i0 context.Context, i1 *medialive.StopMultiplexInput, i2 ...request.Option) (r0 *medialive.StopMultiplexOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopMultiplexWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.StopMultiplexOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeStopMultiplexWithContext(ctx context.Context, in *medialive.StopMultiplexInput, _ ...request.Option) (*medialive.StopMultiplexOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopMultiplex cancelled", ctx.Err())
	default:
		return d.StopMultiplex(in)
	}
}

func (d *MediaLiveDouble) UpdateChannel(i0 *medialive.UpdateChannelInput) (r0 *medialive.UpdateChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateChannel", i0)
	r0, _ = returns[0].(*medialive.UpdateChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) UpdateChannelClass(i0 *medialive.UpdateChannelClassInput) (r0 *medialive.UpdateChannelClassOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateChannelClass", i0)
	r0, _ = returns[0].(*medialive.UpdateChannelClassOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) UpdateChannelClassRequest(i0 *medialive.UpdateChannelClassInput) (r0 *request.Request, r1 *medialive.UpdateChannelClassOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateChannelClassRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.UpdateChannelClassOutput)
	return
}

func (d *MediaLiveDouble) UpdateChannelClassWithContext(i0 context.Context, i1 *medialive.UpdateChannelClassInput, i2 ...request.Option) (r0 *medialive.UpdateChannelClassOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateChannelClassWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.UpdateChannelClassOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeUpdateChannelClassWithContext(ctx context.Context, in *medialive.UpdateChannelClassInput, _ ...request.Option) (*medialive.UpdateChannelClassOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateChannelClass cancelled", ctx.Err())
	default:
		return d.UpdateChannelClass(in)
	}
}

func (d *MediaLiveDouble) UpdateChannelRequest(i0 *medialive.UpdateChannelInput) (r0 *request.Request, r1 *medialive.UpdateChannelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateChannelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.UpdateChannelOutput)
	return
}

func (d *MediaLiveDouble) UpdateChannelWithContext(i0 context.Context, i1 *medialive.UpdateChannelInput, i2 ...request.Option) (r0 *medialive.UpdateChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateChannelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.UpdateChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeUpdateChannelWithContext(ctx context.Context, in *medialive.UpdateChannelInput, _ ...request.Option) (*medialive.UpdateChannelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateChannel cancelled", ctx.Err())
	default:
		return d.UpdateChannel(in)
	}
}

func (d *MediaLiveDouble) UpdateInput(i0 *medialive.UpdateInputInput) (r0 *medialive.UpdateInputOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateInput", i0)
	r0, _ = returns[0].(*medialive.UpdateInputOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) UpdateInputRequest(i0 *medialive.UpdateInputInput) (r0 *request.Request, r1 *medialive.UpdateInputOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateInputRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.UpdateInputOutput)
	return
}

func (d *MediaLiveDouble) UpdateInputSecurityGroup(i0 *medialive.UpdateInputSecurityGroupInput) (r0 *medialive.UpdateInputSecurityGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateInputSecurityGroup", i0)
	r0, _ = returns[0].(*medialive.UpdateInputSecurityGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) UpdateInputSecurityGroupRequest(i0 *medialive.UpdateInputSecurityGroupInput) (r0 *request.Request, r1 *medialive.UpdateInputSecurityGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateInputSecurityGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.UpdateInputSecurityGroupOutput)
	return
}

func (d *MediaLiveDouble) UpdateInputSecurityGroupWithContext(i0 context.Context, i1 *medialive.UpdateInputSecurityGroupInput, i2 ...request.Option) (r0 *medialive.UpdateInputSecurityGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateInputSecurityGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.UpdateInputSecurityGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeUpdateInputSecurityGroupWithContext(ctx context.Context, in *medialive.UpdateInputSecurityGroupInput, _ ...request.Option) (*medialive.UpdateInputSecurityGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateInputSecurityGroup cancelled", ctx.Err())
	default:
		return d.UpdateInputSecurityGroup(in)
	}
}

func (d *MediaLiveDouble) UpdateInputWithContext(i0 context.Context, i1 *medialive.UpdateInputInput, i2 ...request.Option) (r0 *medialive.UpdateInputOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateInputWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.UpdateInputOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeUpdateInputWithContext(ctx context.Context, in *medialive.UpdateInputInput, _ ...request.Option) (*medialive.UpdateInputOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateInput cancelled", ctx.Err())
	default:
		return d.UpdateInput(in)
	}
}

func (d *MediaLiveDouble) UpdateMultiplex(i0 *medialive.UpdateMultiplexInput) (r0 *medialive.UpdateMultiplexOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMultiplex", i0)
	r0, _ = returns[0].(*medialive.UpdateMultiplexOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) UpdateMultiplexProgram(i0 *medialive.UpdateMultiplexProgramInput) (r0 *medialive.UpdateMultiplexProgramOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMultiplexProgram", i0)
	r0, _ = returns[0].(*medialive.UpdateMultiplexProgramOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) UpdateMultiplexProgramRequest(i0 *medialive.UpdateMultiplexProgramInput) (r0 *request.Request, r1 *medialive.UpdateMultiplexProgramOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMultiplexProgramRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.UpdateMultiplexProgramOutput)
	return
}

func (d *MediaLiveDouble) UpdateMultiplexProgramWithContext(i0 context.Context, i1 *medialive.UpdateMultiplexProgramInput, i2 ...request.Option) (r0 *medialive.UpdateMultiplexProgramOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMultiplexProgramWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.UpdateMultiplexProgramOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeUpdateMultiplexProgramWithContext(ctx context.Context, in *medialive.UpdateMultiplexProgramInput, _ ...request.Option) (*medialive.UpdateMultiplexProgramOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateMultiplexProgram cancelled", ctx.Err())
	default:
		return d.UpdateMultiplexProgram(in)
	}
}

func (d *MediaLiveDouble) UpdateMultiplexRequest(i0 *medialive.UpdateMultiplexInput) (r0 *request.Request, r1 *medialive.UpdateMultiplexOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMultiplexRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.UpdateMultiplexOutput)
	return
}

func (d *MediaLiveDouble) UpdateMultiplexWithContext(i0 context.Context, i1 *medialive.UpdateMultiplexInput, i2 ...request.Option) (r0 *medialive.UpdateMultiplexOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMultiplexWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.UpdateMultiplexOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeUpdateMultiplexWithContext(ctx context.Context, in *medialive.UpdateMultiplexInput, _ ...request.Option) (*medialive.UpdateMultiplexOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateMultiplex cancelled", ctx.Err())
	default:
		return d.UpdateMultiplex(in)
	}
}

func (d *MediaLiveDouble) UpdateReservation(i0 *medialive.UpdateReservationInput) (r0 *medialive.UpdateReservationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateReservation", i0)
	r0, _ = returns[0].(*medialive.UpdateReservationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) UpdateReservationRequest(i0 *medialive.UpdateReservationInput) (r0 *request.Request, r1 *medialive.UpdateReservationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateReservationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*medialive.UpdateReservationOutput)
	return
}

func (d *MediaLiveDouble) UpdateReservationWithContext(i0 context.Context, i1 *medialive.UpdateReservationInput, i2 ...request.Option) (r0 *medialive.UpdateReservationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateReservationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*medialive.UpdateReservationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaLiveDouble) fakeUpdateReservationWithContext(ctx context.Context, in *medialive.UpdateReservationInput, _ ...request.Option) (*medialive.UpdateReservationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateReservation cancelled", ctx.Err())
	default:
		return d.UpdateReservation(in)
	}
}

func (d *MediaLiveDouble) WaitUntilChannelCreated(i0 *medialive.DescribeChannelInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilChannelCreated", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaLiveDouble) fakeWaitUntilChannelCreated(in *medialive.DescribeChannelInput) error {
	return d.WaitUntil("ChannelCreated", waiters, in)
}

func (d *MediaLiveDouble) WaitUntilChannelCreatedWithContext(i0 context.Context, i1 *medialive.DescribeChannelInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilChannelCreatedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaLiveDouble) fakeWaitUntilChannelCreatedWithContext(ctx context.Context, in *medialive.DescribeChannelInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("ChannelCreated", waiters, ctx, in, waitOption...)
}

func (d *MediaLiveDouble) WaitUntilChannelDeleted(i0 *medialive.DescribeChannelInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilChannelDeleted", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaLiveDouble) fakeWaitUntilChannelDeleted(in *medialive.DescribeChannelInput) error {
	return d.WaitUntil("ChannelDeleted", waiters, in)
}

func (d *MediaLiveDouble) WaitUntilChannelDeletedWithContext(i0 context.Context, i1 *medialive.DescribeChannelInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilChannelDeletedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaLiveDouble) fakeWaitUntilChannelDeletedWithContext(ctx context.Context, in *medialive.DescribeChannelInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("ChannelDeleted", waiters, ctx, in, waitOption...)
}

func (d *MediaLiveDouble) WaitUntilChannelRunning(i0 *medialive.DescribeChannelInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilChannelRunning", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaLiveDouble) fakeWaitUntilChannelRunning(in *medialive.DescribeChannelInput) error {
	return d.WaitUntil("ChannelRunning", waiters, in)
}

func (d *MediaLiveDouble) WaitUntilChannelRunningWithContext(i0 context.Context, i1 *medialive.DescribeChannelInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilChannelRunningWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaLiveDouble) fakeWaitUntilChannelRunningWithContext(ctx context.Context, in *medialive.DescribeChannelInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("ChannelRunning", waiters, ctx, in, waitOption...)
}

func (d *MediaLiveDouble) WaitUntilChannelStopped(i0 *medialive.DescribeChannelInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilChannelStopped", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaLiveDouble) fakeWaitUntilChannelStopped(in *medialive.DescribeChannelInput) error {
	return d.WaitUntil("ChannelStopped", waiters, in)
}

func (d *MediaLiveDouble) WaitUntilChannelStoppedWithContext(i0 context.Context, i1 *medialive.DescribeChannelInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilChannelStoppedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaLiveDouble) fakeWaitUntilChannelStoppedWithContext(ctx context.Context, in *medialive.DescribeChannelInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("ChannelStopped", waiters, ctx, in, waitOption...)
}

func (d *MediaLiveDouble) WaitUntilMultiplexCreated(i0 *medialive.DescribeMultiplexInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilMultiplexCreated", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaLiveDouble) fakeWaitUntilMultiplexCreated(in *medialive.DescribeMultiplexInput) error {
	return d.WaitUntil("MultiplexCreated", waiters, in)
}

func (d *MediaLiveDouble) WaitUntilMultiplexCreatedWithContext(i0 context.Context, i1 *medialive.DescribeMultiplexInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilMultiplexCreatedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaLiveDouble) fakeWaitUntilMultiplexCreatedWithContext(ctx context.Context, in *medialive.DescribeMultiplexInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("MultiplexCreated", waiters, ctx, in, waitOption...)
}

func (d *MediaLiveDouble) WaitUntilMultiplexDeleted(i0 *medialive.DescribeMultiplexInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilMultiplexDeleted", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaLiveDouble) fakeWaitUntilMultiplexDeleted(in *medialive.DescribeMultiplexInput) error {
	return d.WaitUntil("MultiplexDeleted", waiters, in)
}

func (d *MediaLiveDouble) WaitUntilMultiplexDeletedWithContext(i0 context.Context, i1 *medialive.DescribeMultiplexInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilMultiplexDeletedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaLiveDouble) fakeWaitUntilMultiplexDeletedWithContext(ctx context.Context, in *medialive.DescribeMultiplexInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("MultiplexDeleted", waiters, ctx, in, waitOption...)
}

func (d *MediaLiveDouble) WaitUntilMultiplexRunning(i0 *medialive.DescribeMultiplexInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilMultiplexRunning", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaLiveDouble) fakeWaitUntilMultiplexRunning(in *medialive.DescribeMultiplexInput) error {
	return d.WaitUntil("MultiplexRunning", waiters, in)
}

func (d *MediaLiveDouble) WaitUntilMultiplexRunningWithContext(i0 context.Context, i1 *medialive.DescribeMultiplexInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilMultiplexRunningWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaLiveDouble) fakeWaitUntilMultiplexRunningWithContext(ctx context.Context, in *medialive.DescribeMultiplexInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("MultiplexRunning", waiters, ctx, in, waitOption...)
}

func (d *MediaLiveDouble) WaitUntilMultiplexStopped(i0 *medialive.DescribeMultiplexInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilMultiplexStopped", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaLiveDouble) fakeWaitUntilMultiplexStopped(in *medialive.DescribeMultiplexInput) error {
	return d.WaitUntil("MultiplexStopped", waiters, in)
}

func (d *MediaLiveDouble) WaitUntilMultiplexStoppedWithContext(i0 context.Context, i1 *medialive.DescribeMultiplexInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilMultiplexStoppedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaLiveDouble) fakeWaitUntilMultiplexStoppedWithContext(ctx context.Context, in *medialive.DescribeMultiplexInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("MultiplexStopped", waiters, ctx, in, waitOption...)
}
