// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:12:05+11:00

// Package connectdouble provides a TestDouble implementation of connectiface.ConnectAPI
package connectdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/connect"
	"github.com/aws/aws-sdk-go/service/connect/connectiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// ConnectDouble is TestDouble for connectiface.ConnectAPI
type ConnectDouble struct {
	connectiface.ConnectAPI
	*awsdouble.AWSTestDouble
}

// Constructor for ConnectDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *ConnectDouble {
	result := &ConnectDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*connectiface.ConnectAPI)(nil), configurators...)
	return result
}

func (d *ConnectDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *ConnectDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CreateUserWithContext":
		return m.Fake(d.fakeCreateUserWithContext)

	case "DeleteUserWithContext":
		return m.Fake(d.fakeDeleteUserWithContext)

	case "DescribeUserHierarchyGroupWithContext":
		return m.Fake(d.fakeDescribeUserHierarchyGroupWithContext)

	case "DescribeUserHierarchyStructureWithContext":
		return m.Fake(d.fakeDescribeUserHierarchyStructureWithContext)

	case "DescribeUserWithContext":
		return m.Fake(d.fakeDescribeUserWithContext)

	case "GetContactAttributesWithContext":
		return m.Fake(d.fakeGetContactAttributesWithContext)

	case "GetCurrentMetricDataPages":
		return m.Fake(d.fakeGetCurrentMetricDataPages)

	case "GetCurrentMetricDataPagesWithContext":
		return m.Fake(d.fakeGetCurrentMetricDataPagesWithContext)

	case "GetCurrentMetricDataWithContext":
		return m.Fake(d.fakeGetCurrentMetricDataWithContext)

	case "GetFederationTokenWithContext":
		return m.Fake(d.fakeGetFederationTokenWithContext)

	case "GetMetricDataPages":
		return m.Fake(d.fakeGetMetricDataPages)

	case "GetMetricDataPagesWithContext":
		return m.Fake(d.fakeGetMetricDataPagesWithContext)

	case "GetMetricDataWithContext":
		return m.Fake(d.fakeGetMetricDataWithContext)

	case "ListContactFlowsPages":
		return m.Fake(d.fakeListContactFlowsPages)

	case "ListContactFlowsPagesWithContext":
		return m.Fake(d.fakeListContactFlowsPagesWithContext)

	case "ListContactFlowsWithContext":
		return m.Fake(d.fakeListContactFlowsWithContext)

	case "ListHoursOfOperationsPages":
		return m.Fake(d.fakeListHoursOfOperationsPages)

	case "ListHoursOfOperationsPagesWithContext":
		return m.Fake(d.fakeListHoursOfOperationsPagesWithContext)

	case "ListHoursOfOperationsWithContext":
		return m.Fake(d.fakeListHoursOfOperationsWithContext)

	case "ListPhoneNumbersPages":
		return m.Fake(d.fakeListPhoneNumbersPages)

	case "ListPhoneNumbersPagesWithContext":
		return m.Fake(d.fakeListPhoneNumbersPagesWithContext)

	case "ListPhoneNumbersWithContext":
		return m.Fake(d.fakeListPhoneNumbersWithContext)

	case "ListQueuesPages":
		return m.Fake(d.fakeListQueuesPages)

	case "ListQueuesPagesWithContext":
		return m.Fake(d.fakeListQueuesPagesWithContext)

	case "ListQueuesWithContext":
		return m.Fake(d.fakeListQueuesWithContext)

	case "ListRoutingProfilesPages":
		return m.Fake(d.fakeListRoutingProfilesPages)

	case "ListRoutingProfilesPagesWithContext":
		return m.Fake(d.fakeListRoutingProfilesPagesWithContext)

	case "ListRoutingProfilesWithContext":
		return m.Fake(d.fakeListRoutingProfilesWithContext)

	case "ListSecurityProfilesPages":
		return m.Fake(d.fakeListSecurityProfilesPages)

	case "ListSecurityProfilesPagesWithContext":
		return m.Fake(d.fakeListSecurityProfilesPagesWithContext)

	case "ListSecurityProfilesWithContext":
		return m.Fake(d.fakeListSecurityProfilesWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "ListUserHierarchyGroupsPages":
		return m.Fake(d.fakeListUserHierarchyGroupsPages)

	case "ListUserHierarchyGroupsPagesWithContext":
		return m.Fake(d.fakeListUserHierarchyGroupsPagesWithContext)

	case "ListUserHierarchyGroupsWithContext":
		return m.Fake(d.fakeListUserHierarchyGroupsWithContext)

	case "ListUsersPages":
		return m.Fake(d.fakeListUsersPages)

	case "ListUsersPagesWithContext":
		return m.Fake(d.fakeListUsersPagesWithContext)

	case "ListUsersWithContext":
		return m.Fake(d.fakeListUsersWithContext)

	case "StartChatContactWithContext":
		return m.Fake(d.fakeStartChatContactWithContext)

	case "StartOutboundVoiceContactWithContext":
		return m.Fake(d.fakeStartOutboundVoiceContactWithContext)

	case "StopContactWithContext":
		return m.Fake(d.fakeStopContactWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateContactAttributesWithContext":
		return m.Fake(d.fakeUpdateContactAttributesWithContext)

	case "UpdateUserHierarchyWithContext":
		return m.Fake(d.fakeUpdateUserHierarchyWithContext)

	case "UpdateUserIdentityInfoWithContext":
		return m.Fake(d.fakeUpdateUserIdentityInfoWithContext)

	case "UpdateUserPhoneConfigWithContext":
		return m.Fake(d.fakeUpdateUserPhoneConfigWithContext)

	case "UpdateUserRoutingProfileWithContext":
		return m.Fake(d.fakeUpdateUserRoutingProfileWithContext)

	case "UpdateUserSecurityProfilesWithContext":
		return m.Fake(d.fakeUpdateUserSecurityProfilesWithContext)

	default:
		return nil
	}
}

func (d *ConnectDouble) CreateUser(i0 *connect.CreateUserInput) (r0 *connect.CreateUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUser", i0)
	r0, _ = returns[0].(*connect.CreateUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) CreateUserRequest(i0 *connect.CreateUserInput) (r0 *request.Request, r1 *connect.CreateUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*connect.CreateUserOutput)
	return
}

func (d *ConnectDouble) CreateUserWithContext(i0 context.Context, i1 *connect.CreateUserInput, i2 ...request.Option) (r0 *connect.CreateUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*connect.CreateUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) fakeCreateUserWithContext(ctx context.Context, in *connect.CreateUserInput, _ ...request.Option) (*connect.CreateUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateUser cancelled", ctx.Err())
	default:
		return d.CreateUser(in)
	}
}

func (d *ConnectDouble) DeleteUser(i0 *connect.DeleteUserInput) (r0 *connect.DeleteUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUser", i0)
	r0, _ = returns[0].(*connect.DeleteUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) DeleteUserRequest(i0 *connect.DeleteUserInput) (r0 *request.Request, r1 *connect.DeleteUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*connect.DeleteUserOutput)
	return
}

func (d *ConnectDouble) DeleteUserWithContext(i0 context.Context, i1 *connect.DeleteUserInput, i2 ...request.Option) (r0 *connect.DeleteUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*connect.DeleteUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) fakeDeleteUserWithContext(ctx context.Context, in *connect.DeleteUserInput, _ ...request.Option) (*connect.DeleteUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteUser cancelled", ctx.Err())
	default:
		return d.DeleteUser(in)
	}
}

func (d *ConnectDouble) DescribeUser(i0 *connect.DescribeUserInput) (r0 *connect.DescribeUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUser", i0)
	r0, _ = returns[0].(*connect.DescribeUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) DescribeUserHierarchyGroup(i0 *connect.DescribeUserHierarchyGroupInput) (r0 *connect.DescribeUserHierarchyGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserHierarchyGroup", i0)
	r0, _ = returns[0].(*connect.DescribeUserHierarchyGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) DescribeUserHierarchyGroupRequest(i0 *connect.DescribeUserHierarchyGroupInput) (r0 *request.Request, r1 *connect.DescribeUserHierarchyGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserHierarchyGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*connect.DescribeUserHierarchyGroupOutput)
	return
}

func (d *ConnectDouble) DescribeUserHierarchyGroupWithContext(i0 context.Context, i1 *connect.DescribeUserHierarchyGroupInput, i2 ...request.Option) (r0 *connect.DescribeUserHierarchyGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserHierarchyGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*connect.DescribeUserHierarchyGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) fakeDescribeUserHierarchyGroupWithContext(ctx context.Context, in *connect.DescribeUserHierarchyGroupInput, _ ...request.Option) (*connect.DescribeUserHierarchyGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeUserHierarchyGroup cancelled", ctx.Err())
	default:
		return d.DescribeUserHierarchyGroup(in)
	}
}

func (d *ConnectDouble) DescribeUserHierarchyStructure(i0 *connect.DescribeUserHierarchyStructureInput) (r0 *connect.DescribeUserHierarchyStructureOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserHierarchyStructure", i0)
	r0, _ = returns[0].(*connect.DescribeUserHierarchyStructureOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) DescribeUserHierarchyStructureRequest(i0 *connect.DescribeUserHierarchyStructureInput) (r0 *request.Request, r1 *connect.DescribeUserHierarchyStructureOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserHierarchyStructureRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*connect.DescribeUserHierarchyStructureOutput)
	return
}

func (d *ConnectDouble) DescribeUserHierarchyStructureWithContext(i0 context.Context, i1 *connect.DescribeUserHierarchyStructureInput, i2 ...request.Option) (r0 *connect.DescribeUserHierarchyStructureOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserHierarchyStructureWithContext", i0, i1, i2)
	r0, _ = returns[0].(*connect.DescribeUserHierarchyStructureOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) fakeDescribeUserHierarchyStructureWithContext(ctx context.Context, in *connect.DescribeUserHierarchyStructureInput, _ ...request.Option) (*connect.DescribeUserHierarchyStructureOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeUserHierarchyStructure cancelled", ctx.Err())
	default:
		return d.DescribeUserHierarchyStructure(in)
	}
}

func (d *ConnectDouble) DescribeUserRequest(i0 *connect.DescribeUserInput) (r0 *request.Request, r1 *connect.DescribeUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*connect.DescribeUserOutput)
	return
}

func (d *ConnectDouble) DescribeUserWithContext(i0 context.Context, i1 *connect.DescribeUserInput, i2 ...request.Option) (r0 *connect.DescribeUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*connect.DescribeUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) fakeDescribeUserWithContext(ctx context.Context, in *connect.DescribeUserInput, _ ...request.Option) (*connect.DescribeUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeUser cancelled", ctx.Err())
	default:
		return d.DescribeUser(in)
	}
}

func (d *ConnectDouble) GetContactAttributes(i0 *connect.GetContactAttributesInput) (r0 *connect.GetContactAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetContactAttributes", i0)
	r0, _ = returns[0].(*connect.GetContactAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) GetContactAttributesRequest(i0 *connect.GetContactAttributesInput) (r0 *request.Request, r1 *connect.GetContactAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetContactAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*connect.GetContactAttributesOutput)
	return
}

func (d *ConnectDouble) GetContactAttributesWithContext(i0 context.Context, i1 *connect.GetContactAttributesInput, i2 ...request.Option) (r0 *connect.GetContactAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetContactAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*connect.GetContactAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) fakeGetContactAttributesWithContext(ctx context.Context, in *connect.GetContactAttributesInput, _ ...request.Option) (*connect.GetContactAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetContactAttributes cancelled", ctx.Err())
	default:
		return d.GetContactAttributes(in)
	}
}

func (d *ConnectDouble) GetCurrentMetricData(i0 *connect.GetCurrentMetricDataInput) (r0 *connect.GetCurrentMetricDataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCurrentMetricData", i0)
	r0, _ = returns[0].(*connect.GetCurrentMetricDataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) GetCurrentMetricDataPages(i0 *connect.GetCurrentMetricDataInput, i1 func(*connect.GetCurrentMetricDataOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCurrentMetricDataPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ConnectDouble) fakeGetCurrentMetricDataPages(in *connect.GetCurrentMetricDataInput, pager func(*connect.GetCurrentMetricDataOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetCurrentMetricData", paginators, in, pager)
}

func (d *ConnectDouble) GetCurrentMetricDataPagesWithContext(i0 context.Context, i1 *connect.GetCurrentMetricDataInput, i2 func(*connect.GetCurrentMetricDataOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCurrentMetricDataPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ConnectDouble) fakeGetCurrentMetricDataPagesWithContext(ctx context.Context, in *connect.GetCurrentMetricDataInput, pager func(*connect.GetCurrentMetricDataOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetCurrentMetricData", paginators, ctx, in, pager, options...)
}

func (d *ConnectDouble) GetCurrentMetricDataRequest(i0 *connect.GetCurrentMetricDataInput) (r0 *request.Request, r1 *connect.GetCurrentMetricDataOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCurrentMetricDataRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*connect.GetCurrentMetricDataOutput)
	return
}

func (d *ConnectDouble) GetCurrentMetricDataWithContext(i0 context.Context, i1 *connect.GetCurrentMetricDataInput, i2 ...request.Option) (r0 *connect.GetCurrentMetricDataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCurrentMetricDataWithContext", i0, i1, i2)
	r0, _ = returns[0].(*connect.GetCurrentMetricDataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) fakeGetCurrentMetricDataWithContext(ctx context.Context, in *connect.GetCurrentMetricDataInput, _ ...request.Option) (*connect.GetCurrentMetricDataOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetCurrentMetricData cancelled", ctx.Err())
	default:
		return d.GetCurrentMetricData(in)
	}
}

func (d *ConnectDouble) GetFederationToken(i0 *connect.GetFederationTokenInput) (r0 *connect.GetFederationTokenOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFederationToken", i0)
	r0, _ = returns[0].(*connect.GetFederationTokenOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) GetFederationTokenRequest(i0 *connect.GetFederationTokenInput) (r0 *request.Request, r1 *connect.GetFederationTokenOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFederationTokenRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*connect.GetFederationTokenOutput)
	return
}

func (d *ConnectDouble) GetFederationTokenWithContext(i0 context.Context, i1 *connect.GetFederationTokenInput, i2 ...request.Option) (r0 *connect.GetFederationTokenOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFederationTokenWithContext", i0, i1, i2)
	r0, _ = returns[0].(*connect.GetFederationTokenOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) fakeGetFederationTokenWithContext(ctx context.Context, in *connect.GetFederationTokenInput, _ ...request.Option) (*connect.GetFederationTokenOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetFederationToken cancelled", ctx.Err())
	default:
		return d.GetFederationToken(in)
	}
}

func (d *ConnectDouble) GetMetricData(i0 *connect.GetMetricDataInput) (r0 *connect.GetMetricDataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMetricData", i0)
	r0, _ = returns[0].(*connect.GetMetricDataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) GetMetricDataPages(i0 *connect.GetMetricDataInput, i1 func(*connect.GetMetricDataOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMetricDataPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ConnectDouble) fakeGetMetricDataPages(in *connect.GetMetricDataInput, pager func(*connect.GetMetricDataOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetMetricData", paginators, in, pager)
}

func (d *ConnectDouble) GetMetricDataPagesWithContext(i0 context.Context, i1 *connect.GetMetricDataInput, i2 func(*connect.GetMetricDataOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMetricDataPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ConnectDouble) fakeGetMetricDataPagesWithContext(ctx context.Context, in *connect.GetMetricDataInput, pager func(*connect.GetMetricDataOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetMetricData", paginators, ctx, in, pager, options...)
}

func (d *ConnectDouble) GetMetricDataRequest(i0 *connect.GetMetricDataInput) (r0 *request.Request, r1 *connect.GetMetricDataOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMetricDataRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*connect.GetMetricDataOutput)
	return
}

func (d *ConnectDouble) GetMetricDataWithContext(i0 context.Context, i1 *connect.GetMetricDataInput, i2 ...request.Option) (r0 *connect.GetMetricDataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMetricDataWithContext", i0, i1, i2)
	r0, _ = returns[0].(*connect.GetMetricDataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) fakeGetMetricDataWithContext(ctx context.Context, in *connect.GetMetricDataInput, _ ...request.Option) (*connect.GetMetricDataOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetMetricData cancelled", ctx.Err())
	default:
		return d.GetMetricData(in)
	}
}

func (d *ConnectDouble) ListContactFlows(i0 *connect.ListContactFlowsInput) (r0 *connect.ListContactFlowsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListContactFlows", i0)
	r0, _ = returns[0].(*connect.ListContactFlowsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) ListContactFlowsPages(i0 *connect.ListContactFlowsInput, i1 func(*connect.ListContactFlowsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListContactFlowsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ConnectDouble) fakeListContactFlowsPages(in *connect.ListContactFlowsInput, pager func(*connect.ListContactFlowsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListContactFlows", paginators, in, pager)
}

func (d *ConnectDouble) ListContactFlowsPagesWithContext(i0 context.Context, i1 *connect.ListContactFlowsInput, i2 func(*connect.ListContactFlowsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListContactFlowsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ConnectDouble) fakeListContactFlowsPagesWithContext(ctx context.Context, in *connect.ListContactFlowsInput, pager func(*connect.ListContactFlowsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListContactFlows", paginators, ctx, in, pager, options...)
}

func (d *ConnectDouble) ListContactFlowsRequest(i0 *connect.ListContactFlowsInput) (r0 *request.Request, r1 *connect.ListContactFlowsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListContactFlowsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*connect.ListContactFlowsOutput)
	return
}

func (d *ConnectDouble) ListContactFlowsWithContext(i0 context.Context, i1 *connect.ListContactFlowsInput, i2 ...request.Option) (r0 *connect.ListContactFlowsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListContactFlowsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*connect.ListContactFlowsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) fakeListContactFlowsWithContext(ctx context.Context, in *connect.ListContactFlowsInput, _ ...request.Option) (*connect.ListContactFlowsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListContactFlows cancelled", ctx.Err())
	default:
		return d.ListContactFlows(in)
	}
}

func (d *ConnectDouble) ListHoursOfOperations(i0 *connect.ListHoursOfOperationsInput) (r0 *connect.ListHoursOfOperationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHoursOfOperations", i0)
	r0, _ = returns[0].(*connect.ListHoursOfOperationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) ListHoursOfOperationsPages(i0 *connect.ListHoursOfOperationsInput, i1 func(*connect.ListHoursOfOperationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHoursOfOperationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ConnectDouble) fakeListHoursOfOperationsPages(in *connect.ListHoursOfOperationsInput, pager func(*connect.ListHoursOfOperationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListHoursOfOperations", paginators, in, pager)
}

func (d *ConnectDouble) ListHoursOfOperationsPagesWithContext(i0 context.Context, i1 *connect.ListHoursOfOperationsInput, i2 func(*connect.ListHoursOfOperationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHoursOfOperationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ConnectDouble) fakeListHoursOfOperationsPagesWithContext(ctx context.Context, in *connect.ListHoursOfOperationsInput, pager func(*connect.ListHoursOfOperationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListHoursOfOperations", paginators, ctx, in, pager, options...)
}

func (d *ConnectDouble) ListHoursOfOperationsRequest(i0 *connect.ListHoursOfOperationsInput) (r0 *request.Request, r1 *connect.ListHoursOfOperationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHoursOfOperationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*connect.ListHoursOfOperationsOutput)
	return
}

func (d *ConnectDouble) ListHoursOfOperationsWithContext(i0 context.Context, i1 *connect.ListHoursOfOperationsInput, i2 ...request.Option) (r0 *connect.ListHoursOfOperationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHoursOfOperationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*connect.ListHoursOfOperationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) fakeListHoursOfOperationsWithContext(ctx context.Context, in *connect.ListHoursOfOperationsInput, _ ...request.Option) (*connect.ListHoursOfOperationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListHoursOfOperations cancelled", ctx.Err())
	default:
		return d.ListHoursOfOperations(in)
	}
}

func (d *ConnectDouble) ListPhoneNumbers(i0 *connect.ListPhoneNumbersInput) (r0 *connect.ListPhoneNumbersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPhoneNumbers", i0)
	r0, _ = returns[0].(*connect.ListPhoneNumbersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) ListPhoneNumbersPages(i0 *connect.ListPhoneNumbersInput, i1 func(*connect.ListPhoneNumbersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPhoneNumbersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ConnectDouble) fakeListPhoneNumbersPages(in *connect.ListPhoneNumbersInput, pager func(*connect.ListPhoneNumbersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListPhoneNumbers", paginators, in, pager)
}

func (d *ConnectDouble) ListPhoneNumbersPagesWithContext(i0 context.Context, i1 *connect.ListPhoneNumbersInput, i2 func(*connect.ListPhoneNumbersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPhoneNumbersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ConnectDouble) fakeListPhoneNumbersPagesWithContext(ctx context.Context, in *connect.ListPhoneNumbersInput, pager func(*connect.ListPhoneNumbersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListPhoneNumbers", paginators, ctx, in, pager, options...)
}

func (d *ConnectDouble) ListPhoneNumbersRequest(i0 *connect.ListPhoneNumbersInput) (r0 *request.Request, r1 *connect.ListPhoneNumbersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPhoneNumbersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*connect.ListPhoneNumbersOutput)
	return
}

func (d *ConnectDouble) ListPhoneNumbersWithContext(i0 context.Context, i1 *connect.ListPhoneNumbersInput, i2 ...request.Option) (r0 *connect.ListPhoneNumbersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPhoneNumbersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*connect.ListPhoneNumbersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) fakeListPhoneNumbersWithContext(ctx context.Context, in *connect.ListPhoneNumbersInput, _ ...request.Option) (*connect.ListPhoneNumbersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListPhoneNumbers cancelled", ctx.Err())
	default:
		return d.ListPhoneNumbers(in)
	}
}

func (d *ConnectDouble) ListQueues(i0 *connect.ListQueuesInput) (r0 *connect.ListQueuesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListQueues", i0)
	r0, _ = returns[0].(*connect.ListQueuesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) ListQueuesPages(i0 *connect.ListQueuesInput, i1 func(*connect.ListQueuesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListQueuesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ConnectDouble) fakeListQueuesPages(in *connect.ListQueuesInput, pager func(*connect.ListQueuesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListQueues", paginators, in, pager)
}

func (d *ConnectDouble) ListQueuesPagesWithContext(i0 context.Context, i1 *connect.ListQueuesInput, i2 func(*connect.ListQueuesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListQueuesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ConnectDouble) fakeListQueuesPagesWithContext(ctx context.Context, in *connect.ListQueuesInput, pager func(*connect.ListQueuesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListQueues", paginators, ctx, in, pager, options...)
}

func (d *ConnectDouble) ListQueuesRequest(i0 *connect.ListQueuesInput) (r0 *request.Request, r1 *connect.ListQueuesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListQueuesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*connect.ListQueuesOutput)
	return
}

func (d *ConnectDouble) ListQueuesWithContext(i0 context.Context, i1 *connect.ListQueuesInput, i2 ...request.Option) (r0 *connect.ListQueuesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListQueuesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*connect.ListQueuesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) fakeListQueuesWithContext(ctx context.Context, in *connect.ListQueuesInput, _ ...request.Option) (*connect.ListQueuesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListQueues cancelled", ctx.Err())
	default:
		return d.ListQueues(in)
	}
}

func (d *ConnectDouble) ListRoutingProfiles(i0 *connect.ListRoutingProfilesInput) (r0 *connect.ListRoutingProfilesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRoutingProfiles", i0)
	r0, _ = returns[0].(*connect.ListRoutingProfilesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) ListRoutingProfilesPages(i0 *connect.ListRoutingProfilesInput, i1 func(*connect.ListRoutingProfilesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRoutingProfilesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ConnectDouble) fakeListRoutingProfilesPages(in *connect.ListRoutingProfilesInput, pager func(*connect.ListRoutingProfilesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListRoutingProfiles", paginators, in, pager)
}

func (d *ConnectDouble) ListRoutingProfilesPagesWithContext(i0 context.Context, i1 *connect.ListRoutingProfilesInput, i2 func(*connect.ListRoutingProfilesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRoutingProfilesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ConnectDouble) fakeListRoutingProfilesPagesWithContext(ctx context.Context, in *connect.ListRoutingProfilesInput, pager func(*connect.ListRoutingProfilesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListRoutingProfiles", paginators, ctx, in, pager, options...)
}

func (d *ConnectDouble) ListRoutingProfilesRequest(i0 *connect.ListRoutingProfilesInput) (r0 *request.Request, r1 *connect.ListRoutingProfilesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRoutingProfilesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*connect.ListRoutingProfilesOutput)
	return
}

func (d *ConnectDouble) ListRoutingProfilesWithContext(i0 context.Context, i1 *connect.ListRoutingProfilesInput, i2 ...request.Option) (r0 *connect.ListRoutingProfilesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRoutingProfilesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*connect.ListRoutingProfilesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) fakeListRoutingProfilesWithContext(ctx context.Context, in *connect.ListRoutingProfilesInput, _ ...request.Option) (*connect.ListRoutingProfilesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListRoutingProfiles cancelled", ctx.Err())
	default:
		return d.ListRoutingProfiles(in)
	}
}

func (d *ConnectDouble) ListSecurityProfiles(i0 *connect.ListSecurityProfilesInput) (r0 *connect.ListSecurityProfilesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSecurityProfiles", i0)
	r0, _ = returns[0].(*connect.ListSecurityProfilesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) ListSecurityProfilesPages(i0 *connect.ListSecurityProfilesInput, i1 func(*connect.ListSecurityProfilesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSecurityProfilesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ConnectDouble) fakeListSecurityProfilesPages(in *connect.ListSecurityProfilesInput, pager func(*connect.ListSecurityProfilesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListSecurityProfiles", paginators, in, pager)
}

func (d *ConnectDouble) ListSecurityProfilesPagesWithContext(i0 context.Context, i1 *connect.ListSecurityProfilesInput, i2 func(*connect.ListSecurityProfilesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSecurityProfilesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ConnectDouble) fakeListSecurityProfilesPagesWithContext(ctx context.Context, in *connect.ListSecurityProfilesInput, pager func(*connect.ListSecurityProfilesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListSecurityProfiles", paginators, ctx, in, pager, options...)
}

func (d *ConnectDouble) ListSecurityProfilesRequest(i0 *connect.ListSecurityProfilesInput) (r0 *request.Request, r1 *connect.ListSecurityProfilesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSecurityProfilesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*connect.ListSecurityProfilesOutput)
	return
}

func (d *ConnectDouble) ListSecurityProfilesWithContext(i0 context.Context, i1 *connect.ListSecurityProfilesInput, i2 ...request.Option) (r0 *connect.ListSecurityProfilesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSecurityProfilesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*connect.ListSecurityProfilesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) fakeListSecurityProfilesWithContext(ctx context.Context, in *connect.ListSecurityProfilesInput, _ ...request.Option) (*connect.ListSecurityProfilesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListSecurityProfiles cancelled", ctx.Err())
	default:
		return d.ListSecurityProfiles(in)
	}
}

func (d *ConnectDouble) ListTagsForResource(i0 *connect.ListTagsForResourceInput) (r0 *connect.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*connect.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) ListTagsForResourceRequest(i0 *connect.ListTagsForResourceInput) (r0 *request.Request, r1 *connect.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*connect.ListTagsForResourceOutput)
	return
}

func (d *ConnectDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *connect.ListTagsForResourceInput, i2 ...request.Option) (r0 *connect.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*connect.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *connect.ListTagsForResourceInput, _ ...request.Option) (*connect.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *ConnectDouble) ListUserHierarchyGroups(i0 *connect.ListUserHierarchyGroupsInput) (r0 *connect.ListUserHierarchyGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUserHierarchyGroups", i0)
	r0, _ = returns[0].(*connect.ListUserHierarchyGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) ListUserHierarchyGroupsPages(i0 *connect.ListUserHierarchyGroupsInput, i1 func(*connect.ListUserHierarchyGroupsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUserHierarchyGroupsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ConnectDouble) fakeListUserHierarchyGroupsPages(in *connect.ListUserHierarchyGroupsInput, pager func(*connect.ListUserHierarchyGroupsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListUserHierarchyGroups", paginators, in, pager)
}

func (d *ConnectDouble) ListUserHierarchyGroupsPagesWithContext(i0 context.Context, i1 *connect.ListUserHierarchyGroupsInput, i2 func(*connect.ListUserHierarchyGroupsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUserHierarchyGroupsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ConnectDouble) fakeListUserHierarchyGroupsPagesWithContext(ctx context.Context, in *connect.ListUserHierarchyGroupsInput, pager func(*connect.ListUserHierarchyGroupsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListUserHierarchyGroups", paginators, ctx, in, pager, options...)
}

func (d *ConnectDouble) ListUserHierarchyGroupsRequest(i0 *connect.ListUserHierarchyGroupsInput) (r0 *request.Request, r1 *connect.ListUserHierarchyGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUserHierarchyGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*connect.ListUserHierarchyGroupsOutput)
	return
}

func (d *ConnectDouble) ListUserHierarchyGroupsWithContext(i0 context.Context, i1 *connect.ListUserHierarchyGroupsInput, i2 ...request.Option) (r0 *connect.ListUserHierarchyGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUserHierarchyGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*connect.ListUserHierarchyGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) fakeListUserHierarchyGroupsWithContext(ctx context.Context, in *connect.ListUserHierarchyGroupsInput, _ ...request.Option) (*connect.ListUserHierarchyGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListUserHierarchyGroups cancelled", ctx.Err())
	default:
		return d.ListUserHierarchyGroups(in)
	}
}

func (d *ConnectDouble) ListUsers(i0 *connect.ListUsersInput) (r0 *connect.ListUsersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUsers", i0)
	r0, _ = returns[0].(*connect.ListUsersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) ListUsersPages(i0 *connect.ListUsersInput, i1 func(*connect.ListUsersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUsersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ConnectDouble) fakeListUsersPages(in *connect.ListUsersInput, pager func(*connect.ListUsersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListUsers", paginators, in, pager)
}

func (d *ConnectDouble) ListUsersPagesWithContext(i0 context.Context, i1 *connect.ListUsersInput, i2 func(*connect.ListUsersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUsersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ConnectDouble) fakeListUsersPagesWithContext(ctx context.Context, in *connect.ListUsersInput, pager func(*connect.ListUsersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListUsers", paginators, ctx, in, pager, options...)
}

func (d *ConnectDouble) ListUsersRequest(i0 *connect.ListUsersInput) (r0 *request.Request, r1 *connect.ListUsersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUsersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*connect.ListUsersOutput)
	return
}

func (d *ConnectDouble) ListUsersWithContext(i0 context.Context, i1 *connect.ListUsersInput, i2 ...request.Option) (r0 *connect.ListUsersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUsersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*connect.ListUsersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) fakeListUsersWithContext(ctx context.Context, in *connect.ListUsersInput, _ ...request.Option) (*connect.ListUsersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListUsers cancelled", ctx.Err())
	default:
		return d.ListUsers(in)
	}
}

func (d *ConnectDouble) StartChatContact(i0 *connect.StartChatContactInput) (r0 *connect.StartChatContactOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartChatContact", i0)
	r0, _ = returns[0].(*connect.StartChatContactOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) StartChatContactRequest(i0 *connect.StartChatContactInput) (r0 *request.Request, r1 *connect.StartChatContactOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartChatContactRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*connect.StartChatContactOutput)
	return
}

func (d *ConnectDouble) StartChatContactWithContext(i0 context.Context, i1 *connect.StartChatContactInput, i2 ...request.Option) (r0 *connect.StartChatContactOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartChatContactWithContext", i0, i1, i2)
	r0, _ = returns[0].(*connect.StartChatContactOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) fakeStartChatContactWithContext(ctx context.Context, in *connect.StartChatContactInput, _ ...request.Option) (*connect.StartChatContactOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartChatContact cancelled", ctx.Err())
	default:
		return d.StartChatContact(in)
	}
}

func (d *ConnectDouble) StartOutboundVoiceContact(i0 *connect.StartOutboundVoiceContactInput) (r0 *connect.StartOutboundVoiceContactOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartOutboundVoiceContact", i0)
	r0, _ = returns[0].(*connect.StartOutboundVoiceContactOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) StartOutboundVoiceContactRequest(i0 *connect.StartOutboundVoiceContactInput) (r0 *request.Request, r1 *connect.StartOutboundVoiceContactOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartOutboundVoiceContactRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*connect.StartOutboundVoiceContactOutput)
	return
}

func (d *ConnectDouble) StartOutboundVoiceContactWithContext(i0 context.Context, i1 *connect.StartOutboundVoiceContactInput, i2 ...request.Option) (r0 *connect.StartOutboundVoiceContactOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartOutboundVoiceContactWithContext", i0, i1, i2)
	r0, _ = returns[0].(*connect.StartOutboundVoiceContactOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) fakeStartOutboundVoiceContactWithContext(ctx context.Context, in *connect.StartOutboundVoiceContactInput, _ ...request.Option) (*connect.StartOutboundVoiceContactOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartOutboundVoiceContact cancelled", ctx.Err())
	default:
		return d.StartOutboundVoiceContact(in)
	}
}

func (d *ConnectDouble) StopContact(i0 *connect.StopContactInput) (r0 *connect.StopContactOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopContact", i0)
	r0, _ = returns[0].(*connect.StopContactOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) StopContactRequest(i0 *connect.StopContactInput) (r0 *request.Request, r1 *connect.StopContactOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopContactRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*connect.StopContactOutput)
	return
}

func (d *ConnectDouble) StopContactWithContext(i0 context.Context, i1 *connect.StopContactInput, i2 ...request.Option) (r0 *connect.StopContactOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopContactWithContext", i0, i1, i2)
	r0, _ = returns[0].(*connect.StopContactOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) fakeStopContactWithContext(ctx context.Context, in *connect.StopContactInput, _ ...request.Option) (*connect.StopContactOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopContact cancelled", ctx.Err())
	default:
		return d.StopContact(in)
	}
}

func (d *ConnectDouble) TagResource(i0 *connect.TagResourceInput) (r0 *connect.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*connect.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) TagResourceRequest(i0 *connect.TagResourceInput) (r0 *request.Request, r1 *connect.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*connect.TagResourceOutput)
	return
}

func (d *ConnectDouble) TagResourceWithContext(i0 context.Context, i1 *connect.TagResourceInput, i2 ...request.Option) (r0 *connect.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*connect.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) fakeTagResourceWithContext(ctx context.Context, in *connect.TagResourceInput, _ ...request.Option) (*connect.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *ConnectDouble) UntagResource(i0 *connect.UntagResourceInput) (r0 *connect.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*connect.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) UntagResourceRequest(i0 *connect.UntagResourceInput) (r0 *request.Request, r1 *connect.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*connect.UntagResourceOutput)
	return
}

func (d *ConnectDouble) UntagResourceWithContext(i0 context.Context, i1 *connect.UntagResourceInput, i2 ...request.Option) (r0 *connect.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*connect.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) fakeUntagResourceWithContext(ctx context.Context, in *connect.UntagResourceInput, _ ...request.Option) (*connect.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *ConnectDouble) UpdateContactAttributes(i0 *connect.UpdateContactAttributesInput) (r0 *connect.UpdateContactAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateContactAttributes", i0)
	r0, _ = returns[0].(*connect.UpdateContactAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) UpdateContactAttributesRequest(i0 *connect.UpdateContactAttributesInput) (r0 *request.Request, r1 *connect.UpdateContactAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateContactAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*connect.UpdateContactAttributesOutput)
	return
}

func (d *ConnectDouble) UpdateContactAttributesWithContext(i0 context.Context, i1 *connect.UpdateContactAttributesInput, i2 ...request.Option) (r0 *connect.UpdateContactAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateContactAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*connect.UpdateContactAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) fakeUpdateContactAttributesWithContext(ctx context.Context, in *connect.UpdateContactAttributesInput, _ ...request.Option) (*connect.UpdateContactAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateContactAttributes cancelled", ctx.Err())
	default:
		return d.UpdateContactAttributes(in)
	}
}

func (d *ConnectDouble) UpdateUserHierarchy(i0 *connect.UpdateUserHierarchyInput) (r0 *connect.UpdateUserHierarchyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserHierarchy", i0)
	r0, _ = returns[0].(*connect.UpdateUserHierarchyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) UpdateUserHierarchyRequest(i0 *connect.UpdateUserHierarchyInput) (r0 *request.Request, r1 *connect.UpdateUserHierarchyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserHierarchyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*connect.UpdateUserHierarchyOutput)
	return
}

func (d *ConnectDouble) UpdateUserHierarchyWithContext(i0 context.Context, i1 *connect.UpdateUserHierarchyInput, i2 ...request.Option) (r0 *connect.UpdateUserHierarchyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserHierarchyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*connect.UpdateUserHierarchyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) fakeUpdateUserHierarchyWithContext(ctx context.Context, in *connect.UpdateUserHierarchyInput, _ ...request.Option) (*connect.UpdateUserHierarchyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateUserHierarchy cancelled", ctx.Err())
	default:
		return d.UpdateUserHierarchy(in)
	}
}

func (d *ConnectDouble) UpdateUserIdentityInfo(i0 *connect.UpdateUserIdentityInfoInput) (r0 *connect.UpdateUserIdentityInfoOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserIdentityInfo", i0)
	r0, _ = returns[0].(*connect.UpdateUserIdentityInfoOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) UpdateUserIdentityInfoRequest(i0 *connect.UpdateUserIdentityInfoInput) (r0 *request.Request, r1 *connect.UpdateUserIdentityInfoOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserIdentityInfoRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*connect.UpdateUserIdentityInfoOutput)
	return
}

func (d *ConnectDouble) UpdateUserIdentityInfoWithContext(i0 context.Context, i1 *connect.UpdateUserIdentityInfoInput, i2 ...request.Option) (r0 *connect.UpdateUserIdentityInfoOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserIdentityInfoWithContext", i0, i1, i2)
	r0, _ = returns[0].(*connect.UpdateUserIdentityInfoOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) fakeUpdateUserIdentityInfoWithContext(ctx context.Context, in *connect.UpdateUserIdentityInfoInput, _ ...request.Option) (*connect.UpdateUserIdentityInfoOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateUserIdentityInfo cancelled", ctx.Err())
	default:
		return d.UpdateUserIdentityInfo(in)
	}
}

func (d *ConnectDouble) UpdateUserPhoneConfig(i0 *connect.UpdateUserPhoneConfigInput) (r0 *connect.UpdateUserPhoneConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserPhoneConfig", i0)
	r0, _ = returns[0].(*connect.UpdateUserPhoneConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) UpdateUserPhoneConfigRequest(i0 *connect.UpdateUserPhoneConfigInput) (r0 *request.Request, r1 *connect.UpdateUserPhoneConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserPhoneConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*connect.UpdateUserPhoneConfigOutput)
	return
}

func (d *ConnectDouble) UpdateUserPhoneConfigWithContext(i0 context.Context, i1 *connect.UpdateUserPhoneConfigInput, i2 ...request.Option) (r0 *connect.UpdateUserPhoneConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserPhoneConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*connect.UpdateUserPhoneConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) fakeUpdateUserPhoneConfigWithContext(ctx context.Context, in *connect.UpdateUserPhoneConfigInput, _ ...request.Option) (*connect.UpdateUserPhoneConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateUserPhoneConfig cancelled", ctx.Err())
	default:
		return d.UpdateUserPhoneConfig(in)
	}
}

func (d *ConnectDouble) UpdateUserRoutingProfile(i0 *connect.UpdateUserRoutingProfileInput) (r0 *connect.UpdateUserRoutingProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserRoutingProfile", i0)
	r0, _ = returns[0].(*connect.UpdateUserRoutingProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) UpdateUserRoutingProfileRequest(i0 *connect.UpdateUserRoutingProfileInput) (r0 *request.Request, r1 *connect.UpdateUserRoutingProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserRoutingProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*connect.UpdateUserRoutingProfileOutput)
	return
}

func (d *ConnectDouble) UpdateUserRoutingProfileWithContext(i0 context.Context, i1 *connect.UpdateUserRoutingProfileInput, i2 ...request.Option) (r0 *connect.UpdateUserRoutingProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserRoutingProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*connect.UpdateUserRoutingProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) fakeUpdateUserRoutingProfileWithContext(ctx context.Context, in *connect.UpdateUserRoutingProfileInput, _ ...request.Option) (*connect.UpdateUserRoutingProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateUserRoutingProfile cancelled", ctx.Err())
	default:
		return d.UpdateUserRoutingProfile(in)
	}
}

func (d *ConnectDouble) UpdateUserSecurityProfiles(i0 *connect.UpdateUserSecurityProfilesInput) (r0 *connect.UpdateUserSecurityProfilesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserSecurityProfiles", i0)
	r0, _ = returns[0].(*connect.UpdateUserSecurityProfilesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) UpdateUserSecurityProfilesRequest(i0 *connect.UpdateUserSecurityProfilesInput) (r0 *request.Request, r1 *connect.UpdateUserSecurityProfilesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserSecurityProfilesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*connect.UpdateUserSecurityProfilesOutput)
	return
}

func (d *ConnectDouble) UpdateUserSecurityProfilesWithContext(i0 context.Context, i1 *connect.UpdateUserSecurityProfilesInput, i2 ...request.Option) (r0 *connect.UpdateUserSecurityProfilesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserSecurityProfilesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*connect.UpdateUserSecurityProfilesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectDouble) fakeUpdateUserSecurityProfilesWithContext(ctx context.Context, in *connect.UpdateUserSecurityProfilesInput, _ ...request.Option) (*connect.UpdateUserSecurityProfilesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateUserSecurityProfiles cancelled", ctx.Err())
	default:
		return d.UpdateUserSecurityProfiles(in)
	}
}
