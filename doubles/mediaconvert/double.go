// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:13:52+11:00

// Package mediaconvertdouble provides a TestDouble implementation of mediaconvertiface.MediaConvertAPI
package mediaconvertdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/mediaconvert"
	"github.com/aws/aws-sdk-go/service/mediaconvert/mediaconvertiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// MediaConvertDouble is TestDouble for mediaconvertiface.MediaConvertAPI
type MediaConvertDouble struct {
	mediaconvertiface.MediaConvertAPI
	*awsdouble.AWSTestDouble
}

// Constructor for MediaConvertDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *MediaConvertDouble {
	result := &MediaConvertDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*mediaconvertiface.MediaConvertAPI)(nil), configurators...)
	return result
}

func (d *MediaConvertDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *MediaConvertDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AssociateCertificateWithContext":
		return m.Fake(d.fakeAssociateCertificateWithContext)

	case "CancelJobWithContext":
		return m.Fake(d.fakeCancelJobWithContext)

	case "CreateJobTemplateWithContext":
		return m.Fake(d.fakeCreateJobTemplateWithContext)

	case "CreateJobWithContext":
		return m.Fake(d.fakeCreateJobWithContext)

	case "CreatePresetWithContext":
		return m.Fake(d.fakeCreatePresetWithContext)

	case "CreateQueueWithContext":
		return m.Fake(d.fakeCreateQueueWithContext)

	case "DeleteJobTemplateWithContext":
		return m.Fake(d.fakeDeleteJobTemplateWithContext)

	case "DeletePresetWithContext":
		return m.Fake(d.fakeDeletePresetWithContext)

	case "DeleteQueueWithContext":
		return m.Fake(d.fakeDeleteQueueWithContext)

	case "DescribeEndpointsPages":
		return m.Fake(d.fakeDescribeEndpointsPages)

	case "DescribeEndpointsPagesWithContext":
		return m.Fake(d.fakeDescribeEndpointsPagesWithContext)

	case "DescribeEndpointsWithContext":
		return m.Fake(d.fakeDescribeEndpointsWithContext)

	case "DisassociateCertificateWithContext":
		return m.Fake(d.fakeDisassociateCertificateWithContext)

	case "GetJobTemplateWithContext":
		return m.Fake(d.fakeGetJobTemplateWithContext)

	case "GetJobWithContext":
		return m.Fake(d.fakeGetJobWithContext)

	case "GetPresetWithContext":
		return m.Fake(d.fakeGetPresetWithContext)

	case "GetQueueWithContext":
		return m.Fake(d.fakeGetQueueWithContext)

	case "ListJobTemplatesPages":
		return m.Fake(d.fakeListJobTemplatesPages)

	case "ListJobTemplatesPagesWithContext":
		return m.Fake(d.fakeListJobTemplatesPagesWithContext)

	case "ListJobTemplatesWithContext":
		return m.Fake(d.fakeListJobTemplatesWithContext)

	case "ListJobsPages":
		return m.Fake(d.fakeListJobsPages)

	case "ListJobsPagesWithContext":
		return m.Fake(d.fakeListJobsPagesWithContext)

	case "ListJobsWithContext":
		return m.Fake(d.fakeListJobsWithContext)

	case "ListPresetsPages":
		return m.Fake(d.fakeListPresetsPages)

	case "ListPresetsPagesWithContext":
		return m.Fake(d.fakeListPresetsPagesWithContext)

	case "ListPresetsWithContext":
		return m.Fake(d.fakeListPresetsWithContext)

	case "ListQueuesPages":
		return m.Fake(d.fakeListQueuesPages)

	case "ListQueuesPagesWithContext":
		return m.Fake(d.fakeListQueuesPagesWithContext)

	case "ListQueuesWithContext":
		return m.Fake(d.fakeListQueuesWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateJobTemplateWithContext":
		return m.Fake(d.fakeUpdateJobTemplateWithContext)

	case "UpdatePresetWithContext":
		return m.Fake(d.fakeUpdatePresetWithContext)

	case "UpdateQueueWithContext":
		return m.Fake(d.fakeUpdateQueueWithContext)

	default:
		return nil
	}
}

func (d *MediaConvertDouble) AssociateCertificate(i0 *mediaconvert.AssociateCertificateInput) (r0 *mediaconvert.AssociateCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateCertificate", i0)
	r0, _ = returns[0].(*mediaconvert.AssociateCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) AssociateCertificateRequest(i0 *mediaconvert.AssociateCertificateInput) (r0 *request.Request, r1 *mediaconvert.AssociateCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconvert.AssociateCertificateOutput)
	return
}

func (d *MediaConvertDouble) AssociateCertificateWithContext(i0 context.Context, i1 *mediaconvert.AssociateCertificateInput, i2 ...request.Option) (r0 *mediaconvert.AssociateCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconvert.AssociateCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) fakeAssociateCertificateWithContext(ctx context.Context, in *mediaconvert.AssociateCertificateInput, _ ...request.Option) (*mediaconvert.AssociateCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateCertificate cancelled", ctx.Err())
	default:
		return d.AssociateCertificate(in)
	}
}

func (d *MediaConvertDouble) CancelJob(i0 *mediaconvert.CancelJobInput) (r0 *mediaconvert.CancelJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelJob", i0)
	r0, _ = returns[0].(*mediaconvert.CancelJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) CancelJobRequest(i0 *mediaconvert.CancelJobInput) (r0 *request.Request, r1 *mediaconvert.CancelJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconvert.CancelJobOutput)
	return
}

func (d *MediaConvertDouble) CancelJobWithContext(i0 context.Context, i1 *mediaconvert.CancelJobInput, i2 ...request.Option) (r0 *mediaconvert.CancelJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconvert.CancelJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) fakeCancelJobWithContext(ctx context.Context, in *mediaconvert.CancelJobInput, _ ...request.Option) (*mediaconvert.CancelJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelJob cancelled", ctx.Err())
	default:
		return d.CancelJob(in)
	}
}

func (d *MediaConvertDouble) CreateJob(i0 *mediaconvert.CreateJobInput) (r0 *mediaconvert.CreateJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateJob", i0)
	r0, _ = returns[0].(*mediaconvert.CreateJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) CreateJobRequest(i0 *mediaconvert.CreateJobInput) (r0 *request.Request, r1 *mediaconvert.CreateJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconvert.CreateJobOutput)
	return
}

func (d *MediaConvertDouble) CreateJobTemplate(i0 *mediaconvert.CreateJobTemplateInput) (r0 *mediaconvert.CreateJobTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateJobTemplate", i0)
	r0, _ = returns[0].(*mediaconvert.CreateJobTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) CreateJobTemplateRequest(i0 *mediaconvert.CreateJobTemplateInput) (r0 *request.Request, r1 *mediaconvert.CreateJobTemplateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateJobTemplateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconvert.CreateJobTemplateOutput)
	return
}

func (d *MediaConvertDouble) CreateJobTemplateWithContext(i0 context.Context, i1 *mediaconvert.CreateJobTemplateInput, i2 ...request.Option) (r0 *mediaconvert.CreateJobTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateJobTemplateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconvert.CreateJobTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) fakeCreateJobTemplateWithContext(ctx context.Context, in *mediaconvert.CreateJobTemplateInput, _ ...request.Option) (*mediaconvert.CreateJobTemplateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateJobTemplate cancelled", ctx.Err())
	default:
		return d.CreateJobTemplate(in)
	}
}

func (d *MediaConvertDouble) CreateJobWithContext(i0 context.Context, i1 *mediaconvert.CreateJobInput, i2 ...request.Option) (r0 *mediaconvert.CreateJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconvert.CreateJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) fakeCreateJobWithContext(ctx context.Context, in *mediaconvert.CreateJobInput, _ ...request.Option) (*mediaconvert.CreateJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateJob cancelled", ctx.Err())
	default:
		return d.CreateJob(in)
	}
}

func (d *MediaConvertDouble) CreatePreset(i0 *mediaconvert.CreatePresetInput) (r0 *mediaconvert.CreatePresetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePreset", i0)
	r0, _ = returns[0].(*mediaconvert.CreatePresetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) CreatePresetRequest(i0 *mediaconvert.CreatePresetInput) (r0 *request.Request, r1 *mediaconvert.CreatePresetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePresetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconvert.CreatePresetOutput)
	return
}

func (d *MediaConvertDouble) CreatePresetWithContext(i0 context.Context, i1 *mediaconvert.CreatePresetInput, i2 ...request.Option) (r0 *mediaconvert.CreatePresetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePresetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconvert.CreatePresetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) fakeCreatePresetWithContext(ctx context.Context, in *mediaconvert.CreatePresetInput, _ ...request.Option) (*mediaconvert.CreatePresetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreatePreset cancelled", ctx.Err())
	default:
		return d.CreatePreset(in)
	}
}

func (d *MediaConvertDouble) CreateQueue(i0 *mediaconvert.CreateQueueInput) (r0 *mediaconvert.CreateQueueOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateQueue", i0)
	r0, _ = returns[0].(*mediaconvert.CreateQueueOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) CreateQueueRequest(i0 *mediaconvert.CreateQueueInput) (r0 *request.Request, r1 *mediaconvert.CreateQueueOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateQueueRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconvert.CreateQueueOutput)
	return
}

func (d *MediaConvertDouble) CreateQueueWithContext(i0 context.Context, i1 *mediaconvert.CreateQueueInput, i2 ...request.Option) (r0 *mediaconvert.CreateQueueOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateQueueWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconvert.CreateQueueOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) fakeCreateQueueWithContext(ctx context.Context, in *mediaconvert.CreateQueueInput, _ ...request.Option) (*mediaconvert.CreateQueueOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateQueue cancelled", ctx.Err())
	default:
		return d.CreateQueue(in)
	}
}

func (d *MediaConvertDouble) DeleteJobTemplate(i0 *mediaconvert.DeleteJobTemplateInput) (r0 *mediaconvert.DeleteJobTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteJobTemplate", i0)
	r0, _ = returns[0].(*mediaconvert.DeleteJobTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) DeleteJobTemplateRequest(i0 *mediaconvert.DeleteJobTemplateInput) (r0 *request.Request, r1 *mediaconvert.DeleteJobTemplateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteJobTemplateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconvert.DeleteJobTemplateOutput)
	return
}

func (d *MediaConvertDouble) DeleteJobTemplateWithContext(i0 context.Context, i1 *mediaconvert.DeleteJobTemplateInput, i2 ...request.Option) (r0 *mediaconvert.DeleteJobTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteJobTemplateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconvert.DeleteJobTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) fakeDeleteJobTemplateWithContext(ctx context.Context, in *mediaconvert.DeleteJobTemplateInput, _ ...request.Option) (*mediaconvert.DeleteJobTemplateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteJobTemplate cancelled", ctx.Err())
	default:
		return d.DeleteJobTemplate(in)
	}
}

func (d *MediaConvertDouble) DeletePreset(i0 *mediaconvert.DeletePresetInput) (r0 *mediaconvert.DeletePresetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePreset", i0)
	r0, _ = returns[0].(*mediaconvert.DeletePresetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) DeletePresetRequest(i0 *mediaconvert.DeletePresetInput) (r0 *request.Request, r1 *mediaconvert.DeletePresetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePresetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconvert.DeletePresetOutput)
	return
}

func (d *MediaConvertDouble) DeletePresetWithContext(i0 context.Context, i1 *mediaconvert.DeletePresetInput, i2 ...request.Option) (r0 *mediaconvert.DeletePresetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePresetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconvert.DeletePresetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) fakeDeletePresetWithContext(ctx context.Context, in *mediaconvert.DeletePresetInput, _ ...request.Option) (*mediaconvert.DeletePresetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeletePreset cancelled", ctx.Err())
	default:
		return d.DeletePreset(in)
	}
}

func (d *MediaConvertDouble) DeleteQueue(i0 *mediaconvert.DeleteQueueInput) (r0 *mediaconvert.DeleteQueueOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteQueue", i0)
	r0, _ = returns[0].(*mediaconvert.DeleteQueueOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) DeleteQueueRequest(i0 *mediaconvert.DeleteQueueInput) (r0 *request.Request, r1 *mediaconvert.DeleteQueueOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteQueueRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconvert.DeleteQueueOutput)
	return
}

func (d *MediaConvertDouble) DeleteQueueWithContext(i0 context.Context, i1 *mediaconvert.DeleteQueueInput, i2 ...request.Option) (r0 *mediaconvert.DeleteQueueOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteQueueWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconvert.DeleteQueueOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) fakeDeleteQueueWithContext(ctx context.Context, in *mediaconvert.DeleteQueueInput, _ ...request.Option) (*mediaconvert.DeleteQueueOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteQueue cancelled", ctx.Err())
	default:
		return d.DeleteQueue(in)
	}
}

func (d *MediaConvertDouble) DescribeEndpoints(i0 *mediaconvert.DescribeEndpointsInput) (r0 *mediaconvert.DescribeEndpointsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEndpoints", i0)
	r0, _ = returns[0].(*mediaconvert.DescribeEndpointsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) DescribeEndpointsPages(i0 *mediaconvert.DescribeEndpointsInput, i1 func(*mediaconvert.DescribeEndpointsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEndpointsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaConvertDouble) fakeDescribeEndpointsPages(in *mediaconvert.DescribeEndpointsInput, pager func(*mediaconvert.DescribeEndpointsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeEndpoints", paginators, in, pager)
}

func (d *MediaConvertDouble) DescribeEndpointsPagesWithContext(i0 context.Context, i1 *mediaconvert.DescribeEndpointsInput, i2 func(*mediaconvert.DescribeEndpointsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEndpointsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaConvertDouble) fakeDescribeEndpointsPagesWithContext(ctx context.Context, in *mediaconvert.DescribeEndpointsInput, pager func(*mediaconvert.DescribeEndpointsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeEndpoints", paginators, ctx, in, pager, options...)
}

func (d *MediaConvertDouble) DescribeEndpointsRequest(i0 *mediaconvert.DescribeEndpointsInput) (r0 *request.Request, r1 *mediaconvert.DescribeEndpointsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEndpointsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconvert.DescribeEndpointsOutput)
	return
}

func (d *MediaConvertDouble) DescribeEndpointsWithContext(i0 context.Context, i1 *mediaconvert.DescribeEndpointsInput, i2 ...request.Option) (r0 *mediaconvert.DescribeEndpointsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEndpointsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconvert.DescribeEndpointsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) fakeDescribeEndpointsWithContext(ctx context.Context, in *mediaconvert.DescribeEndpointsInput, _ ...request.Option) (*mediaconvert.DescribeEndpointsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEndpoints cancelled", ctx.Err())
	default:
		return d.DescribeEndpoints(in)
	}
}

func (d *MediaConvertDouble) DisassociateCertificate(i0 *mediaconvert.DisassociateCertificateInput) (r0 *mediaconvert.DisassociateCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateCertificate", i0)
	r0, _ = returns[0].(*mediaconvert.DisassociateCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) DisassociateCertificateRequest(i0 *mediaconvert.DisassociateCertificateInput) (r0 *request.Request, r1 *mediaconvert.DisassociateCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconvert.DisassociateCertificateOutput)
	return
}

func (d *MediaConvertDouble) DisassociateCertificateWithContext(i0 context.Context, i1 *mediaconvert.DisassociateCertificateInput, i2 ...request.Option) (r0 *mediaconvert.DisassociateCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconvert.DisassociateCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) fakeDisassociateCertificateWithContext(ctx context.Context, in *mediaconvert.DisassociateCertificateInput, _ ...request.Option) (*mediaconvert.DisassociateCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateCertificate cancelled", ctx.Err())
	default:
		return d.DisassociateCertificate(in)
	}
}

func (d *MediaConvertDouble) GetJob(i0 *mediaconvert.GetJobInput) (r0 *mediaconvert.GetJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJob", i0)
	r0, _ = returns[0].(*mediaconvert.GetJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) GetJobRequest(i0 *mediaconvert.GetJobInput) (r0 *request.Request, r1 *mediaconvert.GetJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconvert.GetJobOutput)
	return
}

func (d *MediaConvertDouble) GetJobTemplate(i0 *mediaconvert.GetJobTemplateInput) (r0 *mediaconvert.GetJobTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobTemplate", i0)
	r0, _ = returns[0].(*mediaconvert.GetJobTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) GetJobTemplateRequest(i0 *mediaconvert.GetJobTemplateInput) (r0 *request.Request, r1 *mediaconvert.GetJobTemplateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobTemplateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconvert.GetJobTemplateOutput)
	return
}

func (d *MediaConvertDouble) GetJobTemplateWithContext(i0 context.Context, i1 *mediaconvert.GetJobTemplateInput, i2 ...request.Option) (r0 *mediaconvert.GetJobTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobTemplateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconvert.GetJobTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) fakeGetJobTemplateWithContext(ctx context.Context, in *mediaconvert.GetJobTemplateInput, _ ...request.Option) (*mediaconvert.GetJobTemplateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetJobTemplate cancelled", ctx.Err())
	default:
		return d.GetJobTemplate(in)
	}
}

func (d *MediaConvertDouble) GetJobWithContext(i0 context.Context, i1 *mediaconvert.GetJobInput, i2 ...request.Option) (r0 *mediaconvert.GetJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconvert.GetJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) fakeGetJobWithContext(ctx context.Context, in *mediaconvert.GetJobInput, _ ...request.Option) (*mediaconvert.GetJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetJob cancelled", ctx.Err())
	default:
		return d.GetJob(in)
	}
}

func (d *MediaConvertDouble) GetPreset(i0 *mediaconvert.GetPresetInput) (r0 *mediaconvert.GetPresetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPreset", i0)
	r0, _ = returns[0].(*mediaconvert.GetPresetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) GetPresetRequest(i0 *mediaconvert.GetPresetInput) (r0 *request.Request, r1 *mediaconvert.GetPresetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPresetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconvert.GetPresetOutput)
	return
}

func (d *MediaConvertDouble) GetPresetWithContext(i0 context.Context, i1 *mediaconvert.GetPresetInput, i2 ...request.Option) (r0 *mediaconvert.GetPresetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPresetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconvert.GetPresetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) fakeGetPresetWithContext(ctx context.Context, in *mediaconvert.GetPresetInput, _ ...request.Option) (*mediaconvert.GetPresetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetPreset cancelled", ctx.Err())
	default:
		return d.GetPreset(in)
	}
}

func (d *MediaConvertDouble) GetQueue(i0 *mediaconvert.GetQueueInput) (r0 *mediaconvert.GetQueueOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetQueue", i0)
	r0, _ = returns[0].(*mediaconvert.GetQueueOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) GetQueueRequest(i0 *mediaconvert.GetQueueInput) (r0 *request.Request, r1 *mediaconvert.GetQueueOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetQueueRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconvert.GetQueueOutput)
	return
}

func (d *MediaConvertDouble) GetQueueWithContext(i0 context.Context, i1 *mediaconvert.GetQueueInput, i2 ...request.Option) (r0 *mediaconvert.GetQueueOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetQueueWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconvert.GetQueueOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) fakeGetQueueWithContext(ctx context.Context, in *mediaconvert.GetQueueInput, _ ...request.Option) (*mediaconvert.GetQueueOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetQueue cancelled", ctx.Err())
	default:
		return d.GetQueue(in)
	}
}

func (d *MediaConvertDouble) ListJobTemplates(i0 *mediaconvert.ListJobTemplatesInput) (r0 *mediaconvert.ListJobTemplatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobTemplates", i0)
	r0, _ = returns[0].(*mediaconvert.ListJobTemplatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) ListJobTemplatesPages(i0 *mediaconvert.ListJobTemplatesInput, i1 func(*mediaconvert.ListJobTemplatesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobTemplatesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaConvertDouble) fakeListJobTemplatesPages(in *mediaconvert.ListJobTemplatesInput, pager func(*mediaconvert.ListJobTemplatesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListJobTemplates", paginators, in, pager)
}

func (d *MediaConvertDouble) ListJobTemplatesPagesWithContext(i0 context.Context, i1 *mediaconvert.ListJobTemplatesInput, i2 func(*mediaconvert.ListJobTemplatesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobTemplatesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaConvertDouble) fakeListJobTemplatesPagesWithContext(ctx context.Context, in *mediaconvert.ListJobTemplatesInput, pager func(*mediaconvert.ListJobTemplatesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListJobTemplates", paginators, ctx, in, pager, options...)
}

func (d *MediaConvertDouble) ListJobTemplatesRequest(i0 *mediaconvert.ListJobTemplatesInput) (r0 *request.Request, r1 *mediaconvert.ListJobTemplatesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobTemplatesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconvert.ListJobTemplatesOutput)
	return
}

func (d *MediaConvertDouble) ListJobTemplatesWithContext(i0 context.Context, i1 *mediaconvert.ListJobTemplatesInput, i2 ...request.Option) (r0 *mediaconvert.ListJobTemplatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobTemplatesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconvert.ListJobTemplatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) fakeListJobTemplatesWithContext(ctx context.Context, in *mediaconvert.ListJobTemplatesInput, _ ...request.Option) (*mediaconvert.ListJobTemplatesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListJobTemplates cancelled", ctx.Err())
	default:
		return d.ListJobTemplates(in)
	}
}

func (d *MediaConvertDouble) ListJobs(i0 *mediaconvert.ListJobsInput) (r0 *mediaconvert.ListJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobs", i0)
	r0, _ = returns[0].(*mediaconvert.ListJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) ListJobsPages(i0 *mediaconvert.ListJobsInput, i1 func(*mediaconvert.ListJobsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaConvertDouble) fakeListJobsPages(in *mediaconvert.ListJobsInput, pager func(*mediaconvert.ListJobsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListJobs", paginators, in, pager)
}

func (d *MediaConvertDouble) ListJobsPagesWithContext(i0 context.Context, i1 *mediaconvert.ListJobsInput, i2 func(*mediaconvert.ListJobsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaConvertDouble) fakeListJobsPagesWithContext(ctx context.Context, in *mediaconvert.ListJobsInput, pager func(*mediaconvert.ListJobsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListJobs", paginators, ctx, in, pager, options...)
}

func (d *MediaConvertDouble) ListJobsRequest(i0 *mediaconvert.ListJobsInput) (r0 *request.Request, r1 *mediaconvert.ListJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconvert.ListJobsOutput)
	return
}

func (d *MediaConvertDouble) ListJobsWithContext(i0 context.Context, i1 *mediaconvert.ListJobsInput, i2 ...request.Option) (r0 *mediaconvert.ListJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconvert.ListJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) fakeListJobsWithContext(ctx context.Context, in *mediaconvert.ListJobsInput, _ ...request.Option) (*mediaconvert.ListJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListJobs cancelled", ctx.Err())
	default:
		return d.ListJobs(in)
	}
}

func (d *MediaConvertDouble) ListPresets(i0 *mediaconvert.ListPresetsInput) (r0 *mediaconvert.ListPresetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPresets", i0)
	r0, _ = returns[0].(*mediaconvert.ListPresetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) ListPresetsPages(i0 *mediaconvert.ListPresetsInput, i1 func(*mediaconvert.ListPresetsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPresetsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaConvertDouble) fakeListPresetsPages(in *mediaconvert.ListPresetsInput, pager func(*mediaconvert.ListPresetsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListPresets", paginators, in, pager)
}

func (d *MediaConvertDouble) ListPresetsPagesWithContext(i0 context.Context, i1 *mediaconvert.ListPresetsInput, i2 func(*mediaconvert.ListPresetsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPresetsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaConvertDouble) fakeListPresetsPagesWithContext(ctx context.Context, in *mediaconvert.ListPresetsInput, pager func(*mediaconvert.ListPresetsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListPresets", paginators, ctx, in, pager, options...)
}

func (d *MediaConvertDouble) ListPresetsRequest(i0 *mediaconvert.ListPresetsInput) (r0 *request.Request, r1 *mediaconvert.ListPresetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPresetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconvert.ListPresetsOutput)
	return
}

func (d *MediaConvertDouble) ListPresetsWithContext(i0 context.Context, i1 *mediaconvert.ListPresetsInput, i2 ...request.Option) (r0 *mediaconvert.ListPresetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPresetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconvert.ListPresetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) fakeListPresetsWithContext(ctx context.Context, in *mediaconvert.ListPresetsInput, _ ...request.Option) (*mediaconvert.ListPresetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListPresets cancelled", ctx.Err())
	default:
		return d.ListPresets(in)
	}
}

func (d *MediaConvertDouble) ListQueues(i0 *mediaconvert.ListQueuesInput) (r0 *mediaconvert.ListQueuesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListQueues", i0)
	r0, _ = returns[0].(*mediaconvert.ListQueuesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) ListQueuesPages(i0 *mediaconvert.ListQueuesInput, i1 func(*mediaconvert.ListQueuesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListQueuesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaConvertDouble) fakeListQueuesPages(in *mediaconvert.ListQueuesInput, pager func(*mediaconvert.ListQueuesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListQueues", paginators, in, pager)
}

func (d *MediaConvertDouble) ListQueuesPagesWithContext(i0 context.Context, i1 *mediaconvert.ListQueuesInput, i2 func(*mediaconvert.ListQueuesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListQueuesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaConvertDouble) fakeListQueuesPagesWithContext(ctx context.Context, in *mediaconvert.ListQueuesInput, pager func(*mediaconvert.ListQueuesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListQueues", paginators, ctx, in, pager, options...)
}

func (d *MediaConvertDouble) ListQueuesRequest(i0 *mediaconvert.ListQueuesInput) (r0 *request.Request, r1 *mediaconvert.ListQueuesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListQueuesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconvert.ListQueuesOutput)
	return
}

func (d *MediaConvertDouble) ListQueuesWithContext(i0 context.Context, i1 *mediaconvert.ListQueuesInput, i2 ...request.Option) (r0 *mediaconvert.ListQueuesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListQueuesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconvert.ListQueuesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) fakeListQueuesWithContext(ctx context.Context, in *mediaconvert.ListQueuesInput, _ ...request.Option) (*mediaconvert.ListQueuesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListQueues cancelled", ctx.Err())
	default:
		return d.ListQueues(in)
	}
}

func (d *MediaConvertDouble) ListTagsForResource(i0 *mediaconvert.ListTagsForResourceInput) (r0 *mediaconvert.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*mediaconvert.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) ListTagsForResourceRequest(i0 *mediaconvert.ListTagsForResourceInput) (r0 *request.Request, r1 *mediaconvert.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconvert.ListTagsForResourceOutput)
	return
}

func (d *MediaConvertDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *mediaconvert.ListTagsForResourceInput, i2 ...request.Option) (r0 *mediaconvert.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconvert.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *mediaconvert.ListTagsForResourceInput, _ ...request.Option) (*mediaconvert.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *MediaConvertDouble) TagResource(i0 *mediaconvert.TagResourceInput) (r0 *mediaconvert.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*mediaconvert.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) TagResourceRequest(i0 *mediaconvert.TagResourceInput) (r0 *request.Request, r1 *mediaconvert.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconvert.TagResourceOutput)
	return
}

func (d *MediaConvertDouble) TagResourceWithContext(i0 context.Context, i1 *mediaconvert.TagResourceInput, i2 ...request.Option) (r0 *mediaconvert.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconvert.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) fakeTagResourceWithContext(ctx context.Context, in *mediaconvert.TagResourceInput, _ ...request.Option) (*mediaconvert.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *MediaConvertDouble) UntagResource(i0 *mediaconvert.UntagResourceInput) (r0 *mediaconvert.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*mediaconvert.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) UntagResourceRequest(i0 *mediaconvert.UntagResourceInput) (r0 *request.Request, r1 *mediaconvert.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconvert.UntagResourceOutput)
	return
}

func (d *MediaConvertDouble) UntagResourceWithContext(i0 context.Context, i1 *mediaconvert.UntagResourceInput, i2 ...request.Option) (r0 *mediaconvert.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconvert.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) fakeUntagResourceWithContext(ctx context.Context, in *mediaconvert.UntagResourceInput, _ ...request.Option) (*mediaconvert.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *MediaConvertDouble) UpdateJobTemplate(i0 *mediaconvert.UpdateJobTemplateInput) (r0 *mediaconvert.UpdateJobTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateJobTemplate", i0)
	r0, _ = returns[0].(*mediaconvert.UpdateJobTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) UpdateJobTemplateRequest(i0 *mediaconvert.UpdateJobTemplateInput) (r0 *request.Request, r1 *mediaconvert.UpdateJobTemplateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateJobTemplateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconvert.UpdateJobTemplateOutput)
	return
}

func (d *MediaConvertDouble) UpdateJobTemplateWithContext(i0 context.Context, i1 *mediaconvert.UpdateJobTemplateInput, i2 ...request.Option) (r0 *mediaconvert.UpdateJobTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateJobTemplateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconvert.UpdateJobTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) fakeUpdateJobTemplateWithContext(ctx context.Context, in *mediaconvert.UpdateJobTemplateInput, _ ...request.Option) (*mediaconvert.UpdateJobTemplateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateJobTemplate cancelled", ctx.Err())
	default:
		return d.UpdateJobTemplate(in)
	}
}

func (d *MediaConvertDouble) UpdatePreset(i0 *mediaconvert.UpdatePresetInput) (r0 *mediaconvert.UpdatePresetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePreset", i0)
	r0, _ = returns[0].(*mediaconvert.UpdatePresetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) UpdatePresetRequest(i0 *mediaconvert.UpdatePresetInput) (r0 *request.Request, r1 *mediaconvert.UpdatePresetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePresetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconvert.UpdatePresetOutput)
	return
}

func (d *MediaConvertDouble) UpdatePresetWithContext(i0 context.Context, i1 *mediaconvert.UpdatePresetInput, i2 ...request.Option) (r0 *mediaconvert.UpdatePresetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePresetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconvert.UpdatePresetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) fakeUpdatePresetWithContext(ctx context.Context, in *mediaconvert.UpdatePresetInput, _ ...request.Option) (*mediaconvert.UpdatePresetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdatePreset cancelled", ctx.Err())
	default:
		return d.UpdatePreset(in)
	}
}

func (d *MediaConvertDouble) UpdateQueue(i0 *mediaconvert.UpdateQueueInput) (r0 *mediaconvert.UpdateQueueOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateQueue", i0)
	r0, _ = returns[0].(*mediaconvert.UpdateQueueOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) UpdateQueueRequest(i0 *mediaconvert.UpdateQueueInput) (r0 *request.Request, r1 *mediaconvert.UpdateQueueOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateQueueRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconvert.UpdateQueueOutput)
	return
}

func (d *MediaConvertDouble) UpdateQueueWithContext(i0 context.Context, i1 *mediaconvert.UpdateQueueInput, i2 ...request.Option) (r0 *mediaconvert.UpdateQueueOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateQueueWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconvert.UpdateQueueOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConvertDouble) fakeUpdateQueueWithContext(ctx context.Context, in *mediaconvert.UpdateQueueInput, _ ...request.Option) (*mediaconvert.UpdateQueueOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateQueue cancelled", ctx.Err())
	default:
		return d.UpdateQueue(in)
	}
}
