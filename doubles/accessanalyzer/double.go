// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:11:01+11:00

// Package accessanalyzerdouble provides a TestDouble implementation of accessanalyzeriface.AccessAnalyzerAPI
package accessanalyzerdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/accessanalyzer"
	"github.com/aws/aws-sdk-go/service/accessanalyzer/accessanalyzeriface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// AccessAnalyzerDouble is TestDouble for accessanalyzeriface.AccessAnalyzerAPI
type AccessAnalyzerDouble struct {
	accessanalyzeriface.AccessAnalyzerAPI
	*awsdouble.AWSTestDouble
}

// Constructor for AccessAnalyzerDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *AccessAnalyzerDouble {
	result := &AccessAnalyzerDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*accessanalyzeriface.AccessAnalyzerAPI)(nil), configurators...)
	return result
}

func (d *AccessAnalyzerDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *AccessAnalyzerDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CreateAnalyzerWithContext":
		return m.Fake(d.fakeCreateAnalyzerWithContext)

	case "CreateArchiveRuleWithContext":
		return m.Fake(d.fakeCreateArchiveRuleWithContext)

	case "DeleteAnalyzerWithContext":
		return m.Fake(d.fakeDeleteAnalyzerWithContext)

	case "DeleteArchiveRuleWithContext":
		return m.Fake(d.fakeDeleteArchiveRuleWithContext)

	case "GetAnalyzedResourceWithContext":
		return m.Fake(d.fakeGetAnalyzedResourceWithContext)

	case "GetAnalyzerWithContext":
		return m.Fake(d.fakeGetAnalyzerWithContext)

	case "GetArchiveRuleWithContext":
		return m.Fake(d.fakeGetArchiveRuleWithContext)

	case "GetFindingWithContext":
		return m.Fake(d.fakeGetFindingWithContext)

	case "ListAnalyzedResourcesPages":
		return m.Fake(d.fakeListAnalyzedResourcesPages)

	case "ListAnalyzedResourcesPagesWithContext":
		return m.Fake(d.fakeListAnalyzedResourcesPagesWithContext)

	case "ListAnalyzedResourcesWithContext":
		return m.Fake(d.fakeListAnalyzedResourcesWithContext)

	case "ListAnalyzersPages":
		return m.Fake(d.fakeListAnalyzersPages)

	case "ListAnalyzersPagesWithContext":
		return m.Fake(d.fakeListAnalyzersPagesWithContext)

	case "ListAnalyzersWithContext":
		return m.Fake(d.fakeListAnalyzersWithContext)

	case "ListArchiveRulesPages":
		return m.Fake(d.fakeListArchiveRulesPages)

	case "ListArchiveRulesPagesWithContext":
		return m.Fake(d.fakeListArchiveRulesPagesWithContext)

	case "ListArchiveRulesWithContext":
		return m.Fake(d.fakeListArchiveRulesWithContext)

	case "ListFindingsPages":
		return m.Fake(d.fakeListFindingsPages)

	case "ListFindingsPagesWithContext":
		return m.Fake(d.fakeListFindingsPagesWithContext)

	case "ListFindingsWithContext":
		return m.Fake(d.fakeListFindingsWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "StartResourceScanWithContext":
		return m.Fake(d.fakeStartResourceScanWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateArchiveRuleWithContext":
		return m.Fake(d.fakeUpdateArchiveRuleWithContext)

	case "UpdateFindingsWithContext":
		return m.Fake(d.fakeUpdateFindingsWithContext)

	default:
		return nil
	}
}

func (d *AccessAnalyzerDouble) CreateAnalyzer(i0 *accessanalyzer.CreateAnalyzerInput) (r0 *accessanalyzer.CreateAnalyzerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAnalyzer", i0)
	r0, _ = returns[0].(*accessanalyzer.CreateAnalyzerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AccessAnalyzerDouble) CreateAnalyzerRequest(i0 *accessanalyzer.CreateAnalyzerInput) (r0 *request.Request, r1 *accessanalyzer.CreateAnalyzerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAnalyzerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*accessanalyzer.CreateAnalyzerOutput)
	return
}

func (d *AccessAnalyzerDouble) CreateAnalyzerWithContext(i0 context.Context, i1 *accessanalyzer.CreateAnalyzerInput, i2 ...request.Option) (r0 *accessanalyzer.CreateAnalyzerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAnalyzerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*accessanalyzer.CreateAnalyzerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AccessAnalyzerDouble) fakeCreateAnalyzerWithContext(ctx context.Context, in *accessanalyzer.CreateAnalyzerInput, _ ...request.Option) (*accessanalyzer.CreateAnalyzerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateAnalyzer cancelled", ctx.Err())
	default:
		return d.CreateAnalyzer(in)
	}
}

func (d *AccessAnalyzerDouble) CreateArchiveRule(i0 *accessanalyzer.CreateArchiveRuleInput) (r0 *accessanalyzer.CreateArchiveRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateArchiveRule", i0)
	r0, _ = returns[0].(*accessanalyzer.CreateArchiveRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AccessAnalyzerDouble) CreateArchiveRuleRequest(i0 *accessanalyzer.CreateArchiveRuleInput) (r0 *request.Request, r1 *accessanalyzer.CreateArchiveRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateArchiveRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*accessanalyzer.CreateArchiveRuleOutput)
	return
}

func (d *AccessAnalyzerDouble) CreateArchiveRuleWithContext(i0 context.Context, i1 *accessanalyzer.CreateArchiveRuleInput, i2 ...request.Option) (r0 *accessanalyzer.CreateArchiveRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateArchiveRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*accessanalyzer.CreateArchiveRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AccessAnalyzerDouble) fakeCreateArchiveRuleWithContext(ctx context.Context, in *accessanalyzer.CreateArchiveRuleInput, _ ...request.Option) (*accessanalyzer.CreateArchiveRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateArchiveRule cancelled", ctx.Err())
	default:
		return d.CreateArchiveRule(in)
	}
}

func (d *AccessAnalyzerDouble) DeleteAnalyzer(i0 *accessanalyzer.DeleteAnalyzerInput) (r0 *accessanalyzer.DeleteAnalyzerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAnalyzer", i0)
	r0, _ = returns[0].(*accessanalyzer.DeleteAnalyzerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AccessAnalyzerDouble) DeleteAnalyzerRequest(i0 *accessanalyzer.DeleteAnalyzerInput) (r0 *request.Request, r1 *accessanalyzer.DeleteAnalyzerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAnalyzerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*accessanalyzer.DeleteAnalyzerOutput)
	return
}

func (d *AccessAnalyzerDouble) DeleteAnalyzerWithContext(i0 context.Context, i1 *accessanalyzer.DeleteAnalyzerInput, i2 ...request.Option) (r0 *accessanalyzer.DeleteAnalyzerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAnalyzerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*accessanalyzer.DeleteAnalyzerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AccessAnalyzerDouble) fakeDeleteAnalyzerWithContext(ctx context.Context, in *accessanalyzer.DeleteAnalyzerInput, _ ...request.Option) (*accessanalyzer.DeleteAnalyzerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteAnalyzer cancelled", ctx.Err())
	default:
		return d.DeleteAnalyzer(in)
	}
}

func (d *AccessAnalyzerDouble) DeleteArchiveRule(i0 *accessanalyzer.DeleteArchiveRuleInput) (r0 *accessanalyzer.DeleteArchiveRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteArchiveRule", i0)
	r0, _ = returns[0].(*accessanalyzer.DeleteArchiveRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AccessAnalyzerDouble) DeleteArchiveRuleRequest(i0 *accessanalyzer.DeleteArchiveRuleInput) (r0 *request.Request, r1 *accessanalyzer.DeleteArchiveRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteArchiveRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*accessanalyzer.DeleteArchiveRuleOutput)
	return
}

func (d *AccessAnalyzerDouble) DeleteArchiveRuleWithContext(i0 context.Context, i1 *accessanalyzer.DeleteArchiveRuleInput, i2 ...request.Option) (r0 *accessanalyzer.DeleteArchiveRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteArchiveRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*accessanalyzer.DeleteArchiveRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AccessAnalyzerDouble) fakeDeleteArchiveRuleWithContext(ctx context.Context, in *accessanalyzer.DeleteArchiveRuleInput, _ ...request.Option) (*accessanalyzer.DeleteArchiveRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteArchiveRule cancelled", ctx.Err())
	default:
		return d.DeleteArchiveRule(in)
	}
}

func (d *AccessAnalyzerDouble) GetAnalyzedResource(i0 *accessanalyzer.GetAnalyzedResourceInput) (r0 *accessanalyzer.GetAnalyzedResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAnalyzedResource", i0)
	r0, _ = returns[0].(*accessanalyzer.GetAnalyzedResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AccessAnalyzerDouble) GetAnalyzedResourceRequest(i0 *accessanalyzer.GetAnalyzedResourceInput) (r0 *request.Request, r1 *accessanalyzer.GetAnalyzedResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAnalyzedResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*accessanalyzer.GetAnalyzedResourceOutput)
	return
}

func (d *AccessAnalyzerDouble) GetAnalyzedResourceWithContext(i0 context.Context, i1 *accessanalyzer.GetAnalyzedResourceInput, i2 ...request.Option) (r0 *accessanalyzer.GetAnalyzedResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAnalyzedResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*accessanalyzer.GetAnalyzedResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AccessAnalyzerDouble) fakeGetAnalyzedResourceWithContext(ctx context.Context, in *accessanalyzer.GetAnalyzedResourceInput, _ ...request.Option) (*accessanalyzer.GetAnalyzedResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetAnalyzedResource cancelled", ctx.Err())
	default:
		return d.GetAnalyzedResource(in)
	}
}

func (d *AccessAnalyzerDouble) GetAnalyzer(i0 *accessanalyzer.GetAnalyzerInput) (r0 *accessanalyzer.GetAnalyzerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAnalyzer", i0)
	r0, _ = returns[0].(*accessanalyzer.GetAnalyzerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AccessAnalyzerDouble) GetAnalyzerRequest(i0 *accessanalyzer.GetAnalyzerInput) (r0 *request.Request, r1 *accessanalyzer.GetAnalyzerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAnalyzerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*accessanalyzer.GetAnalyzerOutput)
	return
}

func (d *AccessAnalyzerDouble) GetAnalyzerWithContext(i0 context.Context, i1 *accessanalyzer.GetAnalyzerInput, i2 ...request.Option) (r0 *accessanalyzer.GetAnalyzerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAnalyzerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*accessanalyzer.GetAnalyzerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AccessAnalyzerDouble) fakeGetAnalyzerWithContext(ctx context.Context, in *accessanalyzer.GetAnalyzerInput, _ ...request.Option) (*accessanalyzer.GetAnalyzerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetAnalyzer cancelled", ctx.Err())
	default:
		return d.GetAnalyzer(in)
	}
}

func (d *AccessAnalyzerDouble) GetArchiveRule(i0 *accessanalyzer.GetArchiveRuleInput) (r0 *accessanalyzer.GetArchiveRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetArchiveRule", i0)
	r0, _ = returns[0].(*accessanalyzer.GetArchiveRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AccessAnalyzerDouble) GetArchiveRuleRequest(i0 *accessanalyzer.GetArchiveRuleInput) (r0 *request.Request, r1 *accessanalyzer.GetArchiveRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetArchiveRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*accessanalyzer.GetArchiveRuleOutput)
	return
}

func (d *AccessAnalyzerDouble) GetArchiveRuleWithContext(i0 context.Context, i1 *accessanalyzer.GetArchiveRuleInput, i2 ...request.Option) (r0 *accessanalyzer.GetArchiveRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetArchiveRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*accessanalyzer.GetArchiveRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AccessAnalyzerDouble) fakeGetArchiveRuleWithContext(ctx context.Context, in *accessanalyzer.GetArchiveRuleInput, _ ...request.Option) (*accessanalyzer.GetArchiveRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetArchiveRule cancelled", ctx.Err())
	default:
		return d.GetArchiveRule(in)
	}
}

func (d *AccessAnalyzerDouble) GetFinding(i0 *accessanalyzer.GetFindingInput) (r0 *accessanalyzer.GetFindingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFinding", i0)
	r0, _ = returns[0].(*accessanalyzer.GetFindingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AccessAnalyzerDouble) GetFindingRequest(i0 *accessanalyzer.GetFindingInput) (r0 *request.Request, r1 *accessanalyzer.GetFindingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFindingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*accessanalyzer.GetFindingOutput)
	return
}

func (d *AccessAnalyzerDouble) GetFindingWithContext(i0 context.Context, i1 *accessanalyzer.GetFindingInput, i2 ...request.Option) (r0 *accessanalyzer.GetFindingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFindingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*accessanalyzer.GetFindingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AccessAnalyzerDouble) fakeGetFindingWithContext(ctx context.Context, in *accessanalyzer.GetFindingInput, _ ...request.Option) (*accessanalyzer.GetFindingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetFinding cancelled", ctx.Err())
	default:
		return d.GetFinding(in)
	}
}

func (d *AccessAnalyzerDouble) ListAnalyzedResources(i0 *accessanalyzer.ListAnalyzedResourcesInput) (r0 *accessanalyzer.ListAnalyzedResourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAnalyzedResources", i0)
	r0, _ = returns[0].(*accessanalyzer.ListAnalyzedResourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AccessAnalyzerDouble) ListAnalyzedResourcesPages(i0 *accessanalyzer.ListAnalyzedResourcesInput, i1 func(*accessanalyzer.ListAnalyzedResourcesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAnalyzedResourcesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AccessAnalyzerDouble) fakeListAnalyzedResourcesPages(in *accessanalyzer.ListAnalyzedResourcesInput, pager func(*accessanalyzer.ListAnalyzedResourcesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListAnalyzedResources", paginators, in, pager)
}

func (d *AccessAnalyzerDouble) ListAnalyzedResourcesPagesWithContext(i0 context.Context, i1 *accessanalyzer.ListAnalyzedResourcesInput, i2 func(*accessanalyzer.ListAnalyzedResourcesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAnalyzedResourcesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AccessAnalyzerDouble) fakeListAnalyzedResourcesPagesWithContext(ctx context.Context, in *accessanalyzer.ListAnalyzedResourcesInput, pager func(*accessanalyzer.ListAnalyzedResourcesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListAnalyzedResources", paginators, ctx, in, pager, options...)
}

func (d *AccessAnalyzerDouble) ListAnalyzedResourcesRequest(i0 *accessanalyzer.ListAnalyzedResourcesInput) (r0 *request.Request, r1 *accessanalyzer.ListAnalyzedResourcesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAnalyzedResourcesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*accessanalyzer.ListAnalyzedResourcesOutput)
	return
}

func (d *AccessAnalyzerDouble) ListAnalyzedResourcesWithContext(i0 context.Context, i1 *accessanalyzer.ListAnalyzedResourcesInput, i2 ...request.Option) (r0 *accessanalyzer.ListAnalyzedResourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAnalyzedResourcesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*accessanalyzer.ListAnalyzedResourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AccessAnalyzerDouble) fakeListAnalyzedResourcesWithContext(ctx context.Context, in *accessanalyzer.ListAnalyzedResourcesInput, _ ...request.Option) (*accessanalyzer.ListAnalyzedResourcesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAnalyzedResources cancelled", ctx.Err())
	default:
		return d.ListAnalyzedResources(in)
	}
}

func (d *AccessAnalyzerDouble) ListAnalyzers(i0 *accessanalyzer.ListAnalyzersInput) (r0 *accessanalyzer.ListAnalyzersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAnalyzers", i0)
	r0, _ = returns[0].(*accessanalyzer.ListAnalyzersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AccessAnalyzerDouble) ListAnalyzersPages(i0 *accessanalyzer.ListAnalyzersInput, i1 func(*accessanalyzer.ListAnalyzersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAnalyzersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AccessAnalyzerDouble) fakeListAnalyzersPages(in *accessanalyzer.ListAnalyzersInput, pager func(*accessanalyzer.ListAnalyzersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListAnalyzers", paginators, in, pager)
}

func (d *AccessAnalyzerDouble) ListAnalyzersPagesWithContext(i0 context.Context, i1 *accessanalyzer.ListAnalyzersInput, i2 func(*accessanalyzer.ListAnalyzersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAnalyzersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AccessAnalyzerDouble) fakeListAnalyzersPagesWithContext(ctx context.Context, in *accessanalyzer.ListAnalyzersInput, pager func(*accessanalyzer.ListAnalyzersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListAnalyzers", paginators, ctx, in, pager, options...)
}

func (d *AccessAnalyzerDouble) ListAnalyzersRequest(i0 *accessanalyzer.ListAnalyzersInput) (r0 *request.Request, r1 *accessanalyzer.ListAnalyzersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAnalyzersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*accessanalyzer.ListAnalyzersOutput)
	return
}

func (d *AccessAnalyzerDouble) ListAnalyzersWithContext(i0 context.Context, i1 *accessanalyzer.ListAnalyzersInput, i2 ...request.Option) (r0 *accessanalyzer.ListAnalyzersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAnalyzersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*accessanalyzer.ListAnalyzersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AccessAnalyzerDouble) fakeListAnalyzersWithContext(ctx context.Context, in *accessanalyzer.ListAnalyzersInput, _ ...request.Option) (*accessanalyzer.ListAnalyzersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAnalyzers cancelled", ctx.Err())
	default:
		return d.ListAnalyzers(in)
	}
}

func (d *AccessAnalyzerDouble) ListArchiveRules(i0 *accessanalyzer.ListArchiveRulesInput) (r0 *accessanalyzer.ListArchiveRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListArchiveRules", i0)
	r0, _ = returns[0].(*accessanalyzer.ListArchiveRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AccessAnalyzerDouble) ListArchiveRulesPages(i0 *accessanalyzer.ListArchiveRulesInput, i1 func(*accessanalyzer.ListArchiveRulesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListArchiveRulesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AccessAnalyzerDouble) fakeListArchiveRulesPages(in *accessanalyzer.ListArchiveRulesInput, pager func(*accessanalyzer.ListArchiveRulesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListArchiveRules", paginators, in, pager)
}

func (d *AccessAnalyzerDouble) ListArchiveRulesPagesWithContext(i0 context.Context, i1 *accessanalyzer.ListArchiveRulesInput, i2 func(*accessanalyzer.ListArchiveRulesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListArchiveRulesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AccessAnalyzerDouble) fakeListArchiveRulesPagesWithContext(ctx context.Context, in *accessanalyzer.ListArchiveRulesInput, pager func(*accessanalyzer.ListArchiveRulesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListArchiveRules", paginators, ctx, in, pager, options...)
}

func (d *AccessAnalyzerDouble) ListArchiveRulesRequest(i0 *accessanalyzer.ListArchiveRulesInput) (r0 *request.Request, r1 *accessanalyzer.ListArchiveRulesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListArchiveRulesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*accessanalyzer.ListArchiveRulesOutput)
	return
}

func (d *AccessAnalyzerDouble) ListArchiveRulesWithContext(i0 context.Context, i1 *accessanalyzer.ListArchiveRulesInput, i2 ...request.Option) (r0 *accessanalyzer.ListArchiveRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListArchiveRulesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*accessanalyzer.ListArchiveRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AccessAnalyzerDouble) fakeListArchiveRulesWithContext(ctx context.Context, in *accessanalyzer.ListArchiveRulesInput, _ ...request.Option) (*accessanalyzer.ListArchiveRulesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListArchiveRules cancelled", ctx.Err())
	default:
		return d.ListArchiveRules(in)
	}
}

func (d *AccessAnalyzerDouble) ListFindings(i0 *accessanalyzer.ListFindingsInput) (r0 *accessanalyzer.ListFindingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFindings", i0)
	r0, _ = returns[0].(*accessanalyzer.ListFindingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AccessAnalyzerDouble) ListFindingsPages(i0 *accessanalyzer.ListFindingsInput, i1 func(*accessanalyzer.ListFindingsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFindingsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AccessAnalyzerDouble) fakeListFindingsPages(in *accessanalyzer.ListFindingsInput, pager func(*accessanalyzer.ListFindingsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListFindings", paginators, in, pager)
}

func (d *AccessAnalyzerDouble) ListFindingsPagesWithContext(i0 context.Context, i1 *accessanalyzer.ListFindingsInput, i2 func(*accessanalyzer.ListFindingsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFindingsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AccessAnalyzerDouble) fakeListFindingsPagesWithContext(ctx context.Context, in *accessanalyzer.ListFindingsInput, pager func(*accessanalyzer.ListFindingsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListFindings", paginators, ctx, in, pager, options...)
}

func (d *AccessAnalyzerDouble) ListFindingsRequest(i0 *accessanalyzer.ListFindingsInput) (r0 *request.Request, r1 *accessanalyzer.ListFindingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFindingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*accessanalyzer.ListFindingsOutput)
	return
}

func (d *AccessAnalyzerDouble) ListFindingsWithContext(i0 context.Context, i1 *accessanalyzer.ListFindingsInput, i2 ...request.Option) (r0 *accessanalyzer.ListFindingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFindingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*accessanalyzer.ListFindingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AccessAnalyzerDouble) fakeListFindingsWithContext(ctx context.Context, in *accessanalyzer.ListFindingsInput, _ ...request.Option) (*accessanalyzer.ListFindingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListFindings cancelled", ctx.Err())
	default:
		return d.ListFindings(in)
	}
}

func (d *AccessAnalyzerDouble) ListTagsForResource(i0 *accessanalyzer.ListTagsForResourceInput) (r0 *accessanalyzer.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*accessanalyzer.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AccessAnalyzerDouble) ListTagsForResourceRequest(i0 *accessanalyzer.ListTagsForResourceInput) (r0 *request.Request, r1 *accessanalyzer.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*accessanalyzer.ListTagsForResourceOutput)
	return
}

func (d *AccessAnalyzerDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *accessanalyzer.ListTagsForResourceInput, i2 ...request.Option) (r0 *accessanalyzer.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*accessanalyzer.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AccessAnalyzerDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *accessanalyzer.ListTagsForResourceInput, _ ...request.Option) (*accessanalyzer.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *AccessAnalyzerDouble) StartResourceScan(i0 *accessanalyzer.StartResourceScanInput) (r0 *accessanalyzer.StartResourceScanOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartResourceScan", i0)
	r0, _ = returns[0].(*accessanalyzer.StartResourceScanOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AccessAnalyzerDouble) StartResourceScanRequest(i0 *accessanalyzer.StartResourceScanInput) (r0 *request.Request, r1 *accessanalyzer.StartResourceScanOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartResourceScanRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*accessanalyzer.StartResourceScanOutput)
	return
}

func (d *AccessAnalyzerDouble) StartResourceScanWithContext(i0 context.Context, i1 *accessanalyzer.StartResourceScanInput, i2 ...request.Option) (r0 *accessanalyzer.StartResourceScanOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartResourceScanWithContext", i0, i1, i2)
	r0, _ = returns[0].(*accessanalyzer.StartResourceScanOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AccessAnalyzerDouble) fakeStartResourceScanWithContext(ctx context.Context, in *accessanalyzer.StartResourceScanInput, _ ...request.Option) (*accessanalyzer.StartResourceScanOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartResourceScan cancelled", ctx.Err())
	default:
		return d.StartResourceScan(in)
	}
}

func (d *AccessAnalyzerDouble) TagResource(i0 *accessanalyzer.TagResourceInput) (r0 *accessanalyzer.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*accessanalyzer.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AccessAnalyzerDouble) TagResourceRequest(i0 *accessanalyzer.TagResourceInput) (r0 *request.Request, r1 *accessanalyzer.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*accessanalyzer.TagResourceOutput)
	return
}

func (d *AccessAnalyzerDouble) TagResourceWithContext(i0 context.Context, i1 *accessanalyzer.TagResourceInput, i2 ...request.Option) (r0 *accessanalyzer.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*accessanalyzer.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AccessAnalyzerDouble) fakeTagResourceWithContext(ctx context.Context, in *accessanalyzer.TagResourceInput, _ ...request.Option) (*accessanalyzer.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *AccessAnalyzerDouble) UntagResource(i0 *accessanalyzer.UntagResourceInput) (r0 *accessanalyzer.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*accessanalyzer.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AccessAnalyzerDouble) UntagResourceRequest(i0 *accessanalyzer.UntagResourceInput) (r0 *request.Request, r1 *accessanalyzer.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*accessanalyzer.UntagResourceOutput)
	return
}

func (d *AccessAnalyzerDouble) UntagResourceWithContext(i0 context.Context, i1 *accessanalyzer.UntagResourceInput, i2 ...request.Option) (r0 *accessanalyzer.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*accessanalyzer.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AccessAnalyzerDouble) fakeUntagResourceWithContext(ctx context.Context, in *accessanalyzer.UntagResourceInput, _ ...request.Option) (*accessanalyzer.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *AccessAnalyzerDouble) UpdateArchiveRule(i0 *accessanalyzer.UpdateArchiveRuleInput) (r0 *accessanalyzer.UpdateArchiveRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateArchiveRule", i0)
	r0, _ = returns[0].(*accessanalyzer.UpdateArchiveRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AccessAnalyzerDouble) UpdateArchiveRuleRequest(i0 *accessanalyzer.UpdateArchiveRuleInput) (r0 *request.Request, r1 *accessanalyzer.UpdateArchiveRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateArchiveRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*accessanalyzer.UpdateArchiveRuleOutput)
	return
}

func (d *AccessAnalyzerDouble) UpdateArchiveRuleWithContext(i0 context.Context, i1 *accessanalyzer.UpdateArchiveRuleInput, i2 ...request.Option) (r0 *accessanalyzer.UpdateArchiveRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateArchiveRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*accessanalyzer.UpdateArchiveRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AccessAnalyzerDouble) fakeUpdateArchiveRuleWithContext(ctx context.Context, in *accessanalyzer.UpdateArchiveRuleInput, _ ...request.Option) (*accessanalyzer.UpdateArchiveRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateArchiveRule cancelled", ctx.Err())
	default:
		return d.UpdateArchiveRule(in)
	}
}

func (d *AccessAnalyzerDouble) UpdateFindings(i0 *accessanalyzer.UpdateFindingsInput) (r0 *accessanalyzer.UpdateFindingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFindings", i0)
	r0, _ = returns[0].(*accessanalyzer.UpdateFindingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AccessAnalyzerDouble) UpdateFindingsRequest(i0 *accessanalyzer.UpdateFindingsInput) (r0 *request.Request, r1 *accessanalyzer.UpdateFindingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFindingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*accessanalyzer.UpdateFindingsOutput)
	return
}

func (d *AccessAnalyzerDouble) UpdateFindingsWithContext(i0 context.Context, i1 *accessanalyzer.UpdateFindingsInput, i2 ...request.Option) (r0 *accessanalyzer.UpdateFindingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFindingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*accessanalyzer.UpdateFindingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AccessAnalyzerDouble) fakeUpdateFindingsWithContext(ctx context.Context, in *accessanalyzer.UpdateFindingsInput, _ ...request.Option) (*accessanalyzer.UpdateFindingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateFindings cancelled", ctx.Err())
	default:
		return d.UpdateFindings(in)
	}
}
