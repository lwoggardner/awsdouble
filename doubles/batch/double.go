// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:11:26+11:00

// Package batchdouble provides a TestDouble implementation of batchiface.BatchAPI
package batchdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/batch"
	"github.com/aws/aws-sdk-go/service/batch/batchiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// BatchDouble is TestDouble for batchiface.BatchAPI
type BatchDouble struct {
	batchiface.BatchAPI
	*awsdouble.AWSTestDouble
}

// Constructor for BatchDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *BatchDouble {
	result := &BatchDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*batchiface.BatchAPI)(nil), configurators...)
	return result
}

func (d *BatchDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *BatchDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CancelJobWithContext":
		return m.Fake(d.fakeCancelJobWithContext)

	case "CreateComputeEnvironmentWithContext":
		return m.Fake(d.fakeCreateComputeEnvironmentWithContext)

	case "CreateJobQueueWithContext":
		return m.Fake(d.fakeCreateJobQueueWithContext)

	case "DeleteComputeEnvironmentWithContext":
		return m.Fake(d.fakeDeleteComputeEnvironmentWithContext)

	case "DeleteJobQueueWithContext":
		return m.Fake(d.fakeDeleteJobQueueWithContext)

	case "DeregisterJobDefinitionWithContext":
		return m.Fake(d.fakeDeregisterJobDefinitionWithContext)

	case "DescribeComputeEnvironmentsPages":
		return m.Fake(d.fakeDescribeComputeEnvironmentsPages)

	case "DescribeComputeEnvironmentsPagesWithContext":
		return m.Fake(d.fakeDescribeComputeEnvironmentsPagesWithContext)

	case "DescribeComputeEnvironmentsWithContext":
		return m.Fake(d.fakeDescribeComputeEnvironmentsWithContext)

	case "DescribeJobDefinitionsPages":
		return m.Fake(d.fakeDescribeJobDefinitionsPages)

	case "DescribeJobDefinitionsPagesWithContext":
		return m.Fake(d.fakeDescribeJobDefinitionsPagesWithContext)

	case "DescribeJobDefinitionsWithContext":
		return m.Fake(d.fakeDescribeJobDefinitionsWithContext)

	case "DescribeJobQueuesPages":
		return m.Fake(d.fakeDescribeJobQueuesPages)

	case "DescribeJobQueuesPagesWithContext":
		return m.Fake(d.fakeDescribeJobQueuesPagesWithContext)

	case "DescribeJobQueuesWithContext":
		return m.Fake(d.fakeDescribeJobQueuesWithContext)

	case "DescribeJobsWithContext":
		return m.Fake(d.fakeDescribeJobsWithContext)

	case "ListJobsPages":
		return m.Fake(d.fakeListJobsPages)

	case "ListJobsPagesWithContext":
		return m.Fake(d.fakeListJobsPagesWithContext)

	case "ListJobsWithContext":
		return m.Fake(d.fakeListJobsWithContext)

	case "RegisterJobDefinitionWithContext":
		return m.Fake(d.fakeRegisterJobDefinitionWithContext)

	case "SubmitJobWithContext":
		return m.Fake(d.fakeSubmitJobWithContext)

	case "TerminateJobWithContext":
		return m.Fake(d.fakeTerminateJobWithContext)

	case "UpdateComputeEnvironmentWithContext":
		return m.Fake(d.fakeUpdateComputeEnvironmentWithContext)

	case "UpdateJobQueueWithContext":
		return m.Fake(d.fakeUpdateJobQueueWithContext)

	default:
		return nil
	}
}

func (d *BatchDouble) CancelJob(i0 *batch.CancelJobInput) (r0 *batch.CancelJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelJob", i0)
	r0, _ = returns[0].(*batch.CancelJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BatchDouble) CancelJobRequest(i0 *batch.CancelJobInput) (r0 *request.Request, r1 *batch.CancelJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*batch.CancelJobOutput)
	return
}

func (d *BatchDouble) CancelJobWithContext(i0 context.Context, i1 *batch.CancelJobInput, i2 ...request.Option) (r0 *batch.CancelJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*batch.CancelJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BatchDouble) fakeCancelJobWithContext(ctx context.Context, in *batch.CancelJobInput, _ ...request.Option) (*batch.CancelJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelJob cancelled", ctx.Err())
	default:
		return d.CancelJob(in)
	}
}

func (d *BatchDouble) CreateComputeEnvironment(i0 *batch.CreateComputeEnvironmentInput) (r0 *batch.CreateComputeEnvironmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateComputeEnvironment", i0)
	r0, _ = returns[0].(*batch.CreateComputeEnvironmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BatchDouble) CreateComputeEnvironmentRequest(i0 *batch.CreateComputeEnvironmentInput) (r0 *request.Request, r1 *batch.CreateComputeEnvironmentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateComputeEnvironmentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*batch.CreateComputeEnvironmentOutput)
	return
}

func (d *BatchDouble) CreateComputeEnvironmentWithContext(i0 context.Context, i1 *batch.CreateComputeEnvironmentInput, i2 ...request.Option) (r0 *batch.CreateComputeEnvironmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateComputeEnvironmentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*batch.CreateComputeEnvironmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BatchDouble) fakeCreateComputeEnvironmentWithContext(ctx context.Context, in *batch.CreateComputeEnvironmentInput, _ ...request.Option) (*batch.CreateComputeEnvironmentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateComputeEnvironment cancelled", ctx.Err())
	default:
		return d.CreateComputeEnvironment(in)
	}
}

func (d *BatchDouble) CreateJobQueue(i0 *batch.CreateJobQueueInput) (r0 *batch.CreateJobQueueOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateJobQueue", i0)
	r0, _ = returns[0].(*batch.CreateJobQueueOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BatchDouble) CreateJobQueueRequest(i0 *batch.CreateJobQueueInput) (r0 *request.Request, r1 *batch.CreateJobQueueOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateJobQueueRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*batch.CreateJobQueueOutput)
	return
}

func (d *BatchDouble) CreateJobQueueWithContext(i0 context.Context, i1 *batch.CreateJobQueueInput, i2 ...request.Option) (r0 *batch.CreateJobQueueOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateJobQueueWithContext", i0, i1, i2)
	r0, _ = returns[0].(*batch.CreateJobQueueOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BatchDouble) fakeCreateJobQueueWithContext(ctx context.Context, in *batch.CreateJobQueueInput, _ ...request.Option) (*batch.CreateJobQueueOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateJobQueue cancelled", ctx.Err())
	default:
		return d.CreateJobQueue(in)
	}
}

func (d *BatchDouble) DeleteComputeEnvironment(i0 *batch.DeleteComputeEnvironmentInput) (r0 *batch.DeleteComputeEnvironmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteComputeEnvironment", i0)
	r0, _ = returns[0].(*batch.DeleteComputeEnvironmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BatchDouble) DeleteComputeEnvironmentRequest(i0 *batch.DeleteComputeEnvironmentInput) (r0 *request.Request, r1 *batch.DeleteComputeEnvironmentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteComputeEnvironmentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*batch.DeleteComputeEnvironmentOutput)
	return
}

func (d *BatchDouble) DeleteComputeEnvironmentWithContext(i0 context.Context, i1 *batch.DeleteComputeEnvironmentInput, i2 ...request.Option) (r0 *batch.DeleteComputeEnvironmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteComputeEnvironmentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*batch.DeleteComputeEnvironmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BatchDouble) fakeDeleteComputeEnvironmentWithContext(ctx context.Context, in *batch.DeleteComputeEnvironmentInput, _ ...request.Option) (*batch.DeleteComputeEnvironmentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteComputeEnvironment cancelled", ctx.Err())
	default:
		return d.DeleteComputeEnvironment(in)
	}
}

func (d *BatchDouble) DeleteJobQueue(i0 *batch.DeleteJobQueueInput) (r0 *batch.DeleteJobQueueOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteJobQueue", i0)
	r0, _ = returns[0].(*batch.DeleteJobQueueOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BatchDouble) DeleteJobQueueRequest(i0 *batch.DeleteJobQueueInput) (r0 *request.Request, r1 *batch.DeleteJobQueueOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteJobQueueRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*batch.DeleteJobQueueOutput)
	return
}

func (d *BatchDouble) DeleteJobQueueWithContext(i0 context.Context, i1 *batch.DeleteJobQueueInput, i2 ...request.Option) (r0 *batch.DeleteJobQueueOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteJobQueueWithContext", i0, i1, i2)
	r0, _ = returns[0].(*batch.DeleteJobQueueOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BatchDouble) fakeDeleteJobQueueWithContext(ctx context.Context, in *batch.DeleteJobQueueInput, _ ...request.Option) (*batch.DeleteJobQueueOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteJobQueue cancelled", ctx.Err())
	default:
		return d.DeleteJobQueue(in)
	}
}

func (d *BatchDouble) DeregisterJobDefinition(i0 *batch.DeregisterJobDefinitionInput) (r0 *batch.DeregisterJobDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterJobDefinition", i0)
	r0, _ = returns[0].(*batch.DeregisterJobDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BatchDouble) DeregisterJobDefinitionRequest(i0 *batch.DeregisterJobDefinitionInput) (r0 *request.Request, r1 *batch.DeregisterJobDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterJobDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*batch.DeregisterJobDefinitionOutput)
	return
}

func (d *BatchDouble) DeregisterJobDefinitionWithContext(i0 context.Context, i1 *batch.DeregisterJobDefinitionInput, i2 ...request.Option) (r0 *batch.DeregisterJobDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterJobDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*batch.DeregisterJobDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BatchDouble) fakeDeregisterJobDefinitionWithContext(ctx context.Context, in *batch.DeregisterJobDefinitionInput, _ ...request.Option) (*batch.DeregisterJobDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeregisterJobDefinition cancelled", ctx.Err())
	default:
		return d.DeregisterJobDefinition(in)
	}
}

func (d *BatchDouble) DescribeComputeEnvironments(i0 *batch.DescribeComputeEnvironmentsInput) (r0 *batch.DescribeComputeEnvironmentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeComputeEnvironments", i0)
	r0, _ = returns[0].(*batch.DescribeComputeEnvironmentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BatchDouble) DescribeComputeEnvironmentsPages(i0 *batch.DescribeComputeEnvironmentsInput, i1 func(*batch.DescribeComputeEnvironmentsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeComputeEnvironmentsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *BatchDouble) fakeDescribeComputeEnvironmentsPages(in *batch.DescribeComputeEnvironmentsInput, pager func(*batch.DescribeComputeEnvironmentsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeComputeEnvironments", paginators, in, pager)
}

func (d *BatchDouble) DescribeComputeEnvironmentsPagesWithContext(i0 context.Context, i1 *batch.DescribeComputeEnvironmentsInput, i2 func(*batch.DescribeComputeEnvironmentsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeComputeEnvironmentsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *BatchDouble) fakeDescribeComputeEnvironmentsPagesWithContext(ctx context.Context, in *batch.DescribeComputeEnvironmentsInput, pager func(*batch.DescribeComputeEnvironmentsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeComputeEnvironments", paginators, ctx, in, pager, options...)
}

func (d *BatchDouble) DescribeComputeEnvironmentsRequest(i0 *batch.DescribeComputeEnvironmentsInput) (r0 *request.Request, r1 *batch.DescribeComputeEnvironmentsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeComputeEnvironmentsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*batch.DescribeComputeEnvironmentsOutput)
	return
}

func (d *BatchDouble) DescribeComputeEnvironmentsWithContext(i0 context.Context, i1 *batch.DescribeComputeEnvironmentsInput, i2 ...request.Option) (r0 *batch.DescribeComputeEnvironmentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeComputeEnvironmentsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*batch.DescribeComputeEnvironmentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BatchDouble) fakeDescribeComputeEnvironmentsWithContext(ctx context.Context, in *batch.DescribeComputeEnvironmentsInput, _ ...request.Option) (*batch.DescribeComputeEnvironmentsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeComputeEnvironments cancelled", ctx.Err())
	default:
		return d.DescribeComputeEnvironments(in)
	}
}

func (d *BatchDouble) DescribeJobDefinitions(i0 *batch.DescribeJobDefinitionsInput) (r0 *batch.DescribeJobDefinitionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeJobDefinitions", i0)
	r0, _ = returns[0].(*batch.DescribeJobDefinitionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BatchDouble) DescribeJobDefinitionsPages(i0 *batch.DescribeJobDefinitionsInput, i1 func(*batch.DescribeJobDefinitionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeJobDefinitionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *BatchDouble) fakeDescribeJobDefinitionsPages(in *batch.DescribeJobDefinitionsInput, pager func(*batch.DescribeJobDefinitionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeJobDefinitions", paginators, in, pager)
}

func (d *BatchDouble) DescribeJobDefinitionsPagesWithContext(i0 context.Context, i1 *batch.DescribeJobDefinitionsInput, i2 func(*batch.DescribeJobDefinitionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeJobDefinitionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *BatchDouble) fakeDescribeJobDefinitionsPagesWithContext(ctx context.Context, in *batch.DescribeJobDefinitionsInput, pager func(*batch.DescribeJobDefinitionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeJobDefinitions", paginators, ctx, in, pager, options...)
}

func (d *BatchDouble) DescribeJobDefinitionsRequest(i0 *batch.DescribeJobDefinitionsInput) (r0 *request.Request, r1 *batch.DescribeJobDefinitionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeJobDefinitionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*batch.DescribeJobDefinitionsOutput)
	return
}

func (d *BatchDouble) DescribeJobDefinitionsWithContext(i0 context.Context, i1 *batch.DescribeJobDefinitionsInput, i2 ...request.Option) (r0 *batch.DescribeJobDefinitionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeJobDefinitionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*batch.DescribeJobDefinitionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BatchDouble) fakeDescribeJobDefinitionsWithContext(ctx context.Context, in *batch.DescribeJobDefinitionsInput, _ ...request.Option) (*batch.DescribeJobDefinitionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeJobDefinitions cancelled", ctx.Err())
	default:
		return d.DescribeJobDefinitions(in)
	}
}

func (d *BatchDouble) DescribeJobQueues(i0 *batch.DescribeJobQueuesInput) (r0 *batch.DescribeJobQueuesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeJobQueues", i0)
	r0, _ = returns[0].(*batch.DescribeJobQueuesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BatchDouble) DescribeJobQueuesPages(i0 *batch.DescribeJobQueuesInput, i1 func(*batch.DescribeJobQueuesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeJobQueuesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *BatchDouble) fakeDescribeJobQueuesPages(in *batch.DescribeJobQueuesInput, pager func(*batch.DescribeJobQueuesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeJobQueues", paginators, in, pager)
}

func (d *BatchDouble) DescribeJobQueuesPagesWithContext(i0 context.Context, i1 *batch.DescribeJobQueuesInput, i2 func(*batch.DescribeJobQueuesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeJobQueuesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *BatchDouble) fakeDescribeJobQueuesPagesWithContext(ctx context.Context, in *batch.DescribeJobQueuesInput, pager func(*batch.DescribeJobQueuesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeJobQueues", paginators, ctx, in, pager, options...)
}

func (d *BatchDouble) DescribeJobQueuesRequest(i0 *batch.DescribeJobQueuesInput) (r0 *request.Request, r1 *batch.DescribeJobQueuesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeJobQueuesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*batch.DescribeJobQueuesOutput)
	return
}

func (d *BatchDouble) DescribeJobQueuesWithContext(i0 context.Context, i1 *batch.DescribeJobQueuesInput, i2 ...request.Option) (r0 *batch.DescribeJobQueuesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeJobQueuesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*batch.DescribeJobQueuesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BatchDouble) fakeDescribeJobQueuesWithContext(ctx context.Context, in *batch.DescribeJobQueuesInput, _ ...request.Option) (*batch.DescribeJobQueuesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeJobQueues cancelled", ctx.Err())
	default:
		return d.DescribeJobQueues(in)
	}
}

func (d *BatchDouble) DescribeJobs(i0 *batch.DescribeJobsInput) (r0 *batch.DescribeJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeJobs", i0)
	r0, _ = returns[0].(*batch.DescribeJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BatchDouble) DescribeJobsRequest(i0 *batch.DescribeJobsInput) (r0 *request.Request, r1 *batch.DescribeJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*batch.DescribeJobsOutput)
	return
}

func (d *BatchDouble) DescribeJobsWithContext(i0 context.Context, i1 *batch.DescribeJobsInput, i2 ...request.Option) (r0 *batch.DescribeJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*batch.DescribeJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BatchDouble) fakeDescribeJobsWithContext(ctx context.Context, in *batch.DescribeJobsInput, _ ...request.Option) (*batch.DescribeJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeJobs cancelled", ctx.Err())
	default:
		return d.DescribeJobs(in)
	}
}

func (d *BatchDouble) ListJobs(i0 *batch.ListJobsInput) (r0 *batch.ListJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobs", i0)
	r0, _ = returns[0].(*batch.ListJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BatchDouble) ListJobsPages(i0 *batch.ListJobsInput, i1 func(*batch.ListJobsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *BatchDouble) fakeListJobsPages(in *batch.ListJobsInput, pager func(*batch.ListJobsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListJobs", paginators, in, pager)
}

func (d *BatchDouble) ListJobsPagesWithContext(i0 context.Context, i1 *batch.ListJobsInput, i2 func(*batch.ListJobsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *BatchDouble) fakeListJobsPagesWithContext(ctx context.Context, in *batch.ListJobsInput, pager func(*batch.ListJobsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListJobs", paginators, ctx, in, pager, options...)
}

func (d *BatchDouble) ListJobsRequest(i0 *batch.ListJobsInput) (r0 *request.Request, r1 *batch.ListJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*batch.ListJobsOutput)
	return
}

func (d *BatchDouble) ListJobsWithContext(i0 context.Context, i1 *batch.ListJobsInput, i2 ...request.Option) (r0 *batch.ListJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*batch.ListJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BatchDouble) fakeListJobsWithContext(ctx context.Context, in *batch.ListJobsInput, _ ...request.Option) (*batch.ListJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListJobs cancelled", ctx.Err())
	default:
		return d.ListJobs(in)
	}
}

func (d *BatchDouble) RegisterJobDefinition(i0 *batch.RegisterJobDefinitionInput) (r0 *batch.RegisterJobDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterJobDefinition", i0)
	r0, _ = returns[0].(*batch.RegisterJobDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BatchDouble) RegisterJobDefinitionRequest(i0 *batch.RegisterJobDefinitionInput) (r0 *request.Request, r1 *batch.RegisterJobDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterJobDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*batch.RegisterJobDefinitionOutput)
	return
}

func (d *BatchDouble) RegisterJobDefinitionWithContext(i0 context.Context, i1 *batch.RegisterJobDefinitionInput, i2 ...request.Option) (r0 *batch.RegisterJobDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterJobDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*batch.RegisterJobDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BatchDouble) fakeRegisterJobDefinitionWithContext(ctx context.Context, in *batch.RegisterJobDefinitionInput, _ ...request.Option) (*batch.RegisterJobDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterJobDefinition cancelled", ctx.Err())
	default:
		return d.RegisterJobDefinition(in)
	}
}

func (d *BatchDouble) SubmitJob(i0 *batch.SubmitJobInput) (r0 *batch.SubmitJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SubmitJob", i0)
	r0, _ = returns[0].(*batch.SubmitJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BatchDouble) SubmitJobRequest(i0 *batch.SubmitJobInput) (r0 *request.Request, r1 *batch.SubmitJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SubmitJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*batch.SubmitJobOutput)
	return
}

func (d *BatchDouble) SubmitJobWithContext(i0 context.Context, i1 *batch.SubmitJobInput, i2 ...request.Option) (r0 *batch.SubmitJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SubmitJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*batch.SubmitJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BatchDouble) fakeSubmitJobWithContext(ctx context.Context, in *batch.SubmitJobInput, _ ...request.Option) (*batch.SubmitJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SubmitJob cancelled", ctx.Err())
	default:
		return d.SubmitJob(in)
	}
}

func (d *BatchDouble) TerminateJob(i0 *batch.TerminateJobInput) (r0 *batch.TerminateJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TerminateJob", i0)
	r0, _ = returns[0].(*batch.TerminateJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BatchDouble) TerminateJobRequest(i0 *batch.TerminateJobInput) (r0 *request.Request, r1 *batch.TerminateJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TerminateJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*batch.TerminateJobOutput)
	return
}

func (d *BatchDouble) TerminateJobWithContext(i0 context.Context, i1 *batch.TerminateJobInput, i2 ...request.Option) (r0 *batch.TerminateJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TerminateJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*batch.TerminateJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BatchDouble) fakeTerminateJobWithContext(ctx context.Context, in *batch.TerminateJobInput, _ ...request.Option) (*batch.TerminateJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TerminateJob cancelled", ctx.Err())
	default:
		return d.TerminateJob(in)
	}
}

func (d *BatchDouble) UpdateComputeEnvironment(i0 *batch.UpdateComputeEnvironmentInput) (r0 *batch.UpdateComputeEnvironmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateComputeEnvironment", i0)
	r0, _ = returns[0].(*batch.UpdateComputeEnvironmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BatchDouble) UpdateComputeEnvironmentRequest(i0 *batch.UpdateComputeEnvironmentInput) (r0 *request.Request, r1 *batch.UpdateComputeEnvironmentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateComputeEnvironmentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*batch.UpdateComputeEnvironmentOutput)
	return
}

func (d *BatchDouble) UpdateComputeEnvironmentWithContext(i0 context.Context, i1 *batch.UpdateComputeEnvironmentInput, i2 ...request.Option) (r0 *batch.UpdateComputeEnvironmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateComputeEnvironmentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*batch.UpdateComputeEnvironmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BatchDouble) fakeUpdateComputeEnvironmentWithContext(ctx context.Context, in *batch.UpdateComputeEnvironmentInput, _ ...request.Option) (*batch.UpdateComputeEnvironmentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateComputeEnvironment cancelled", ctx.Err())
	default:
		return d.UpdateComputeEnvironment(in)
	}
}

func (d *BatchDouble) UpdateJobQueue(i0 *batch.UpdateJobQueueInput) (r0 *batch.UpdateJobQueueOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateJobQueue", i0)
	r0, _ = returns[0].(*batch.UpdateJobQueueOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BatchDouble) UpdateJobQueueRequest(i0 *batch.UpdateJobQueueInput) (r0 *request.Request, r1 *batch.UpdateJobQueueOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateJobQueueRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*batch.UpdateJobQueueOutput)
	return
}

func (d *BatchDouble) UpdateJobQueueWithContext(i0 context.Context, i1 *batch.UpdateJobQueueInput, i2 ...request.Option) (r0 *batch.UpdateJobQueueOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateJobQueueWithContext", i0, i1, i2)
	r0, _ = returns[0].(*batch.UpdateJobQueueOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *BatchDouble) fakeUpdateJobQueueWithContext(ctx context.Context, in *batch.UpdateJobQueueInput, _ ...request.Option) (*batch.UpdateJobQueueOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateJobQueue cancelled", ctx.Err())
	default:
		return d.UpdateJobQueue(in)
	}
}
