// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:11:02+11:00

// Package acmdouble provides a TestDouble implementation of acmiface.ACMAPI
package acmdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/acm"
	"github.com/aws/aws-sdk-go/service/acm/acmiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// ACMDouble is TestDouble for acmiface.ACMAPI
type ACMDouble struct {
	acmiface.ACMAPI
	*awsdouble.AWSTestDouble
}

// Constructor for ACMDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *ACMDouble {
	result := &ACMDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*acmiface.ACMAPI)(nil), configurators...)
	return result
}

func (d *ACMDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *ACMDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AddTagsToCertificateWithContext":
		return m.Fake(d.fakeAddTagsToCertificateWithContext)

	case "DeleteCertificateWithContext":
		return m.Fake(d.fakeDeleteCertificateWithContext)

	case "DescribeCertificateWithContext":
		return m.Fake(d.fakeDescribeCertificateWithContext)

	case "ExportCertificateWithContext":
		return m.Fake(d.fakeExportCertificateWithContext)

	case "GetCertificateWithContext":
		return m.Fake(d.fakeGetCertificateWithContext)

	case "ImportCertificateWithContext":
		return m.Fake(d.fakeImportCertificateWithContext)

	case "ListCertificatesPages":
		return m.Fake(d.fakeListCertificatesPages)

	case "ListCertificatesPagesWithContext":
		return m.Fake(d.fakeListCertificatesPagesWithContext)

	case "ListCertificatesWithContext":
		return m.Fake(d.fakeListCertificatesWithContext)

	case "ListTagsForCertificateWithContext":
		return m.Fake(d.fakeListTagsForCertificateWithContext)

	case "RemoveTagsFromCertificateWithContext":
		return m.Fake(d.fakeRemoveTagsFromCertificateWithContext)

	case "RenewCertificateWithContext":
		return m.Fake(d.fakeRenewCertificateWithContext)

	case "RequestCertificateWithContext":
		return m.Fake(d.fakeRequestCertificateWithContext)

	case "ResendValidationEmailWithContext":
		return m.Fake(d.fakeResendValidationEmailWithContext)

	case "UpdateCertificateOptionsWithContext":
		return m.Fake(d.fakeUpdateCertificateOptionsWithContext)

	case "WaitUntilCertificateValidated":
		return m.Fake(d.fakeWaitUntilCertificateValidated)

	case "WaitUntilCertificateValidatedWithContext":
		return m.Fake(d.fakeWaitUntilCertificateValidatedWithContext)

	default:
		return nil
	}
}

func (d *ACMDouble) AddTagsToCertificate(i0 *acm.AddTagsToCertificateInput) (r0 *acm.AddTagsToCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToCertificate", i0)
	r0, _ = returns[0].(*acm.AddTagsToCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMDouble) AddTagsToCertificateRequest(i0 *acm.AddTagsToCertificateInput) (r0 *request.Request, r1 *acm.AddTagsToCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*acm.AddTagsToCertificateOutput)
	return
}

func (d *ACMDouble) AddTagsToCertificateWithContext(i0 context.Context, i1 *acm.AddTagsToCertificateInput, i2 ...request.Option) (r0 *acm.AddTagsToCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*acm.AddTagsToCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMDouble) fakeAddTagsToCertificateWithContext(ctx context.Context, in *acm.AddTagsToCertificateInput, _ ...request.Option) (*acm.AddTagsToCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddTagsToCertificate cancelled", ctx.Err())
	default:
		return d.AddTagsToCertificate(in)
	}
}

func (d *ACMDouble) DeleteCertificate(i0 *acm.DeleteCertificateInput) (r0 *acm.DeleteCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCertificate", i0)
	r0, _ = returns[0].(*acm.DeleteCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMDouble) DeleteCertificateRequest(i0 *acm.DeleteCertificateInput) (r0 *request.Request, r1 *acm.DeleteCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*acm.DeleteCertificateOutput)
	return
}

func (d *ACMDouble) DeleteCertificateWithContext(i0 context.Context, i1 *acm.DeleteCertificateInput, i2 ...request.Option) (r0 *acm.DeleteCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*acm.DeleteCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMDouble) fakeDeleteCertificateWithContext(ctx context.Context, in *acm.DeleteCertificateInput, _ ...request.Option) (*acm.DeleteCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteCertificate cancelled", ctx.Err())
	default:
		return d.DeleteCertificate(in)
	}
}

func (d *ACMDouble) DescribeCertificate(i0 *acm.DescribeCertificateInput) (r0 *acm.DescribeCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCertificate", i0)
	r0, _ = returns[0].(*acm.DescribeCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMDouble) DescribeCertificateRequest(i0 *acm.DescribeCertificateInput) (r0 *request.Request, r1 *acm.DescribeCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*acm.DescribeCertificateOutput)
	return
}

func (d *ACMDouble) DescribeCertificateWithContext(i0 context.Context, i1 *acm.DescribeCertificateInput, i2 ...request.Option) (r0 *acm.DescribeCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*acm.DescribeCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMDouble) fakeDescribeCertificateWithContext(ctx context.Context, in *acm.DescribeCertificateInput, _ ...request.Option) (*acm.DescribeCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeCertificate cancelled", ctx.Err())
	default:
		return d.DescribeCertificate(in)
	}
}

func (d *ACMDouble) ExportCertificate(i0 *acm.ExportCertificateInput) (r0 *acm.ExportCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExportCertificate", i0)
	r0, _ = returns[0].(*acm.ExportCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMDouble) ExportCertificateRequest(i0 *acm.ExportCertificateInput) (r0 *request.Request, r1 *acm.ExportCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExportCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*acm.ExportCertificateOutput)
	return
}

func (d *ACMDouble) ExportCertificateWithContext(i0 context.Context, i1 *acm.ExportCertificateInput, i2 ...request.Option) (r0 *acm.ExportCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExportCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*acm.ExportCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMDouble) fakeExportCertificateWithContext(ctx context.Context, in *acm.ExportCertificateInput, _ ...request.Option) (*acm.ExportCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ExportCertificate cancelled", ctx.Err())
	default:
		return d.ExportCertificate(in)
	}
}

func (d *ACMDouble) GetCertificate(i0 *acm.GetCertificateInput) (r0 *acm.GetCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCertificate", i0)
	r0, _ = returns[0].(*acm.GetCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMDouble) GetCertificateRequest(i0 *acm.GetCertificateInput) (r0 *request.Request, r1 *acm.GetCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*acm.GetCertificateOutput)
	return
}

func (d *ACMDouble) GetCertificateWithContext(i0 context.Context, i1 *acm.GetCertificateInput, i2 ...request.Option) (r0 *acm.GetCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*acm.GetCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMDouble) fakeGetCertificateWithContext(ctx context.Context, in *acm.GetCertificateInput, _ ...request.Option) (*acm.GetCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetCertificate cancelled", ctx.Err())
	default:
		return d.GetCertificate(in)
	}
}

func (d *ACMDouble) ImportCertificate(i0 *acm.ImportCertificateInput) (r0 *acm.ImportCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportCertificate", i0)
	r0, _ = returns[0].(*acm.ImportCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMDouble) ImportCertificateRequest(i0 *acm.ImportCertificateInput) (r0 *request.Request, r1 *acm.ImportCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*acm.ImportCertificateOutput)
	return
}

func (d *ACMDouble) ImportCertificateWithContext(i0 context.Context, i1 *acm.ImportCertificateInput, i2 ...request.Option) (r0 *acm.ImportCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*acm.ImportCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMDouble) fakeImportCertificateWithContext(ctx context.Context, in *acm.ImportCertificateInput, _ ...request.Option) (*acm.ImportCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ImportCertificate cancelled", ctx.Err())
	default:
		return d.ImportCertificate(in)
	}
}

func (d *ACMDouble) ListCertificates(i0 *acm.ListCertificatesInput) (r0 *acm.ListCertificatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCertificates", i0)
	r0, _ = returns[0].(*acm.ListCertificatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMDouble) ListCertificatesPages(i0 *acm.ListCertificatesInput, i1 func(*acm.ListCertificatesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCertificatesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ACMDouble) fakeListCertificatesPages(in *acm.ListCertificatesInput, pager func(*acm.ListCertificatesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListCertificates", paginators, in, pager)
}

func (d *ACMDouble) ListCertificatesPagesWithContext(i0 context.Context, i1 *acm.ListCertificatesInput, i2 func(*acm.ListCertificatesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCertificatesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ACMDouble) fakeListCertificatesPagesWithContext(ctx context.Context, in *acm.ListCertificatesInput, pager func(*acm.ListCertificatesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListCertificates", paginators, ctx, in, pager, options...)
}

func (d *ACMDouble) ListCertificatesRequest(i0 *acm.ListCertificatesInput) (r0 *request.Request, r1 *acm.ListCertificatesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCertificatesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*acm.ListCertificatesOutput)
	return
}

func (d *ACMDouble) ListCertificatesWithContext(i0 context.Context, i1 *acm.ListCertificatesInput, i2 ...request.Option) (r0 *acm.ListCertificatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCertificatesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*acm.ListCertificatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMDouble) fakeListCertificatesWithContext(ctx context.Context, in *acm.ListCertificatesInput, _ ...request.Option) (*acm.ListCertificatesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListCertificates cancelled", ctx.Err())
	default:
		return d.ListCertificates(in)
	}
}

func (d *ACMDouble) ListTagsForCertificate(i0 *acm.ListTagsForCertificateInput) (r0 *acm.ListTagsForCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForCertificate", i0)
	r0, _ = returns[0].(*acm.ListTagsForCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMDouble) ListTagsForCertificateRequest(i0 *acm.ListTagsForCertificateInput) (r0 *request.Request, r1 *acm.ListTagsForCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*acm.ListTagsForCertificateOutput)
	return
}

func (d *ACMDouble) ListTagsForCertificateWithContext(i0 context.Context, i1 *acm.ListTagsForCertificateInput, i2 ...request.Option) (r0 *acm.ListTagsForCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*acm.ListTagsForCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMDouble) fakeListTagsForCertificateWithContext(ctx context.Context, in *acm.ListTagsForCertificateInput, _ ...request.Option) (*acm.ListTagsForCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForCertificate cancelled", ctx.Err())
	default:
		return d.ListTagsForCertificate(in)
	}
}

func (d *ACMDouble) RemoveTagsFromCertificate(i0 *acm.RemoveTagsFromCertificateInput) (r0 *acm.RemoveTagsFromCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromCertificate", i0)
	r0, _ = returns[0].(*acm.RemoveTagsFromCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMDouble) RemoveTagsFromCertificateRequest(i0 *acm.RemoveTagsFromCertificateInput) (r0 *request.Request, r1 *acm.RemoveTagsFromCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*acm.RemoveTagsFromCertificateOutput)
	return
}

func (d *ACMDouble) RemoveTagsFromCertificateWithContext(i0 context.Context, i1 *acm.RemoveTagsFromCertificateInput, i2 ...request.Option) (r0 *acm.RemoveTagsFromCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*acm.RemoveTagsFromCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMDouble) fakeRemoveTagsFromCertificateWithContext(ctx context.Context, in *acm.RemoveTagsFromCertificateInput, _ ...request.Option) (*acm.RemoveTagsFromCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveTagsFromCertificate cancelled", ctx.Err())
	default:
		return d.RemoveTagsFromCertificate(in)
	}
}

func (d *ACMDouble) RenewCertificate(i0 *acm.RenewCertificateInput) (r0 *acm.RenewCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RenewCertificate", i0)
	r0, _ = returns[0].(*acm.RenewCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMDouble) RenewCertificateRequest(i0 *acm.RenewCertificateInput) (r0 *request.Request, r1 *acm.RenewCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RenewCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*acm.RenewCertificateOutput)
	return
}

func (d *ACMDouble) RenewCertificateWithContext(i0 context.Context, i1 *acm.RenewCertificateInput, i2 ...request.Option) (r0 *acm.RenewCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RenewCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*acm.RenewCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMDouble) fakeRenewCertificateWithContext(ctx context.Context, in *acm.RenewCertificateInput, _ ...request.Option) (*acm.RenewCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RenewCertificate cancelled", ctx.Err())
	default:
		return d.RenewCertificate(in)
	}
}

func (d *ACMDouble) RequestCertificate(i0 *acm.RequestCertificateInput) (r0 *acm.RequestCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RequestCertificate", i0)
	r0, _ = returns[0].(*acm.RequestCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMDouble) RequestCertificateRequest(i0 *acm.RequestCertificateInput) (r0 *request.Request, r1 *acm.RequestCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RequestCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*acm.RequestCertificateOutput)
	return
}

func (d *ACMDouble) RequestCertificateWithContext(i0 context.Context, i1 *acm.RequestCertificateInput, i2 ...request.Option) (r0 *acm.RequestCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RequestCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*acm.RequestCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMDouble) fakeRequestCertificateWithContext(ctx context.Context, in *acm.RequestCertificateInput, _ ...request.Option) (*acm.RequestCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RequestCertificate cancelled", ctx.Err())
	default:
		return d.RequestCertificate(in)
	}
}

func (d *ACMDouble) ResendValidationEmail(i0 *acm.ResendValidationEmailInput) (r0 *acm.ResendValidationEmailOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResendValidationEmail", i0)
	r0, _ = returns[0].(*acm.ResendValidationEmailOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMDouble) ResendValidationEmailRequest(i0 *acm.ResendValidationEmailInput) (r0 *request.Request, r1 *acm.ResendValidationEmailOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResendValidationEmailRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*acm.ResendValidationEmailOutput)
	return
}

func (d *ACMDouble) ResendValidationEmailWithContext(i0 context.Context, i1 *acm.ResendValidationEmailInput, i2 ...request.Option) (r0 *acm.ResendValidationEmailOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResendValidationEmailWithContext", i0, i1, i2)
	r0, _ = returns[0].(*acm.ResendValidationEmailOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMDouble) fakeResendValidationEmailWithContext(ctx context.Context, in *acm.ResendValidationEmailInput, _ ...request.Option) (*acm.ResendValidationEmailOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ResendValidationEmail cancelled", ctx.Err())
	default:
		return d.ResendValidationEmail(in)
	}
}

func (d *ACMDouble) UpdateCertificateOptions(i0 *acm.UpdateCertificateOptionsInput) (r0 *acm.UpdateCertificateOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCertificateOptions", i0)
	r0, _ = returns[0].(*acm.UpdateCertificateOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMDouble) UpdateCertificateOptionsRequest(i0 *acm.UpdateCertificateOptionsInput) (r0 *request.Request, r1 *acm.UpdateCertificateOptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCertificateOptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*acm.UpdateCertificateOptionsOutput)
	return
}

func (d *ACMDouble) UpdateCertificateOptionsWithContext(i0 context.Context, i1 *acm.UpdateCertificateOptionsInput, i2 ...request.Option) (r0 *acm.UpdateCertificateOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCertificateOptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*acm.UpdateCertificateOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ACMDouble) fakeUpdateCertificateOptionsWithContext(ctx context.Context, in *acm.UpdateCertificateOptionsInput, _ ...request.Option) (*acm.UpdateCertificateOptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateCertificateOptions cancelled", ctx.Err())
	default:
		return d.UpdateCertificateOptions(in)
	}
}

func (d *ACMDouble) WaitUntilCertificateValidated(i0 *acm.DescribeCertificateInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilCertificateValidated", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *ACMDouble) fakeWaitUntilCertificateValidated(in *acm.DescribeCertificateInput) error {
	return d.WaitUntil("CertificateValidated", waiters, in)
}

func (d *ACMDouble) WaitUntilCertificateValidatedWithContext(i0 context.Context, i1 *acm.DescribeCertificateInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilCertificateValidatedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *ACMDouble) fakeWaitUntilCertificateValidatedWithContext(ctx context.Context, in *acm.DescribeCertificateInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("CertificateValidated", waiters, ctx, in, waitOption...)
}
