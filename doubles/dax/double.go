// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:12:16+11:00

// Package daxdouble provides a TestDouble implementation of daxiface.DAXAPI
package daxdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/dax"
	"github.com/aws/aws-sdk-go/service/dax/daxiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// DAXDouble is TestDouble for daxiface.DAXAPI
type DAXDouble struct {
	daxiface.DAXAPI
	*awsdouble.AWSTestDouble
}

// Constructor for DAXDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *DAXDouble {
	result := &DAXDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*daxiface.DAXAPI)(nil), configurators...)
	return result
}

func (d *DAXDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *DAXDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CreateClusterWithContext":
		return m.Fake(d.fakeCreateClusterWithContext)

	case "CreateParameterGroupWithContext":
		return m.Fake(d.fakeCreateParameterGroupWithContext)

	case "CreateSubnetGroupWithContext":
		return m.Fake(d.fakeCreateSubnetGroupWithContext)

	case "DecreaseReplicationFactorWithContext":
		return m.Fake(d.fakeDecreaseReplicationFactorWithContext)

	case "DeleteClusterWithContext":
		return m.Fake(d.fakeDeleteClusterWithContext)

	case "DeleteParameterGroupWithContext":
		return m.Fake(d.fakeDeleteParameterGroupWithContext)

	case "DeleteSubnetGroupWithContext":
		return m.Fake(d.fakeDeleteSubnetGroupWithContext)

	case "DescribeClustersWithContext":
		return m.Fake(d.fakeDescribeClustersWithContext)

	case "DescribeDefaultParametersWithContext":
		return m.Fake(d.fakeDescribeDefaultParametersWithContext)

	case "DescribeEventsWithContext":
		return m.Fake(d.fakeDescribeEventsWithContext)

	case "DescribeParameterGroupsWithContext":
		return m.Fake(d.fakeDescribeParameterGroupsWithContext)

	case "DescribeParametersWithContext":
		return m.Fake(d.fakeDescribeParametersWithContext)

	case "DescribeSubnetGroupsWithContext":
		return m.Fake(d.fakeDescribeSubnetGroupsWithContext)

	case "IncreaseReplicationFactorWithContext":
		return m.Fake(d.fakeIncreaseReplicationFactorWithContext)

	case "ListTagsWithContext":
		return m.Fake(d.fakeListTagsWithContext)

	case "RebootNodeWithContext":
		return m.Fake(d.fakeRebootNodeWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateClusterWithContext":
		return m.Fake(d.fakeUpdateClusterWithContext)

	case "UpdateParameterGroupWithContext":
		return m.Fake(d.fakeUpdateParameterGroupWithContext)

	case "UpdateSubnetGroupWithContext":
		return m.Fake(d.fakeUpdateSubnetGroupWithContext)

	default:
		return nil
	}
}

func (d *DAXDouble) CreateCluster(i0 *dax.CreateClusterInput) (r0 *dax.CreateClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCluster", i0)
	r0, _ = returns[0].(*dax.CreateClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) CreateClusterRequest(i0 *dax.CreateClusterInput) (r0 *request.Request, r1 *dax.CreateClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dax.CreateClusterOutput)
	return
}

func (d *DAXDouble) CreateClusterWithContext(i0 context.Context, i1 *dax.CreateClusterInput, i2 ...request.Option) (r0 *dax.CreateClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dax.CreateClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) fakeCreateClusterWithContext(ctx context.Context, in *dax.CreateClusterInput, _ ...request.Option) (*dax.CreateClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateCluster cancelled", ctx.Err())
	default:
		return d.CreateCluster(in)
	}
}

func (d *DAXDouble) CreateParameterGroup(i0 *dax.CreateParameterGroupInput) (r0 *dax.CreateParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateParameterGroup", i0)
	r0, _ = returns[0].(*dax.CreateParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) CreateParameterGroupRequest(i0 *dax.CreateParameterGroupInput) (r0 *request.Request, r1 *dax.CreateParameterGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateParameterGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dax.CreateParameterGroupOutput)
	return
}

func (d *DAXDouble) CreateParameterGroupWithContext(i0 context.Context, i1 *dax.CreateParameterGroupInput, i2 ...request.Option) (r0 *dax.CreateParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateParameterGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dax.CreateParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) fakeCreateParameterGroupWithContext(ctx context.Context, in *dax.CreateParameterGroupInput, _ ...request.Option) (*dax.CreateParameterGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateParameterGroup cancelled", ctx.Err())
	default:
		return d.CreateParameterGroup(in)
	}
}

func (d *DAXDouble) CreateSubnetGroup(i0 *dax.CreateSubnetGroupInput) (r0 *dax.CreateSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSubnetGroup", i0)
	r0, _ = returns[0].(*dax.CreateSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) CreateSubnetGroupRequest(i0 *dax.CreateSubnetGroupInput) (r0 *request.Request, r1 *dax.CreateSubnetGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSubnetGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dax.CreateSubnetGroupOutput)
	return
}

func (d *DAXDouble) CreateSubnetGroupWithContext(i0 context.Context, i1 *dax.CreateSubnetGroupInput, i2 ...request.Option) (r0 *dax.CreateSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSubnetGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dax.CreateSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) fakeCreateSubnetGroupWithContext(ctx context.Context, in *dax.CreateSubnetGroupInput, _ ...request.Option) (*dax.CreateSubnetGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateSubnetGroup cancelled", ctx.Err())
	default:
		return d.CreateSubnetGroup(in)
	}
}

func (d *DAXDouble) DecreaseReplicationFactor(i0 *dax.DecreaseReplicationFactorInput) (r0 *dax.DecreaseReplicationFactorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DecreaseReplicationFactor", i0)
	r0, _ = returns[0].(*dax.DecreaseReplicationFactorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) DecreaseReplicationFactorRequest(i0 *dax.DecreaseReplicationFactorInput) (r0 *request.Request, r1 *dax.DecreaseReplicationFactorOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DecreaseReplicationFactorRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dax.DecreaseReplicationFactorOutput)
	return
}

func (d *DAXDouble) DecreaseReplicationFactorWithContext(i0 context.Context, i1 *dax.DecreaseReplicationFactorInput, i2 ...request.Option) (r0 *dax.DecreaseReplicationFactorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DecreaseReplicationFactorWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dax.DecreaseReplicationFactorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) fakeDecreaseReplicationFactorWithContext(ctx context.Context, in *dax.DecreaseReplicationFactorInput, _ ...request.Option) (*dax.DecreaseReplicationFactorOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DecreaseReplicationFactor cancelled", ctx.Err())
	default:
		return d.DecreaseReplicationFactor(in)
	}
}

func (d *DAXDouble) DeleteCluster(i0 *dax.DeleteClusterInput) (r0 *dax.DeleteClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCluster", i0)
	r0, _ = returns[0].(*dax.DeleteClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) DeleteClusterRequest(i0 *dax.DeleteClusterInput) (r0 *request.Request, r1 *dax.DeleteClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dax.DeleteClusterOutput)
	return
}

func (d *DAXDouble) DeleteClusterWithContext(i0 context.Context, i1 *dax.DeleteClusterInput, i2 ...request.Option) (r0 *dax.DeleteClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dax.DeleteClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) fakeDeleteClusterWithContext(ctx context.Context, in *dax.DeleteClusterInput, _ ...request.Option) (*dax.DeleteClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteCluster cancelled", ctx.Err())
	default:
		return d.DeleteCluster(in)
	}
}

func (d *DAXDouble) DeleteParameterGroup(i0 *dax.DeleteParameterGroupInput) (r0 *dax.DeleteParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteParameterGroup", i0)
	r0, _ = returns[0].(*dax.DeleteParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) DeleteParameterGroupRequest(i0 *dax.DeleteParameterGroupInput) (r0 *request.Request, r1 *dax.DeleteParameterGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteParameterGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dax.DeleteParameterGroupOutput)
	return
}

func (d *DAXDouble) DeleteParameterGroupWithContext(i0 context.Context, i1 *dax.DeleteParameterGroupInput, i2 ...request.Option) (r0 *dax.DeleteParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteParameterGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dax.DeleteParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) fakeDeleteParameterGroupWithContext(ctx context.Context, in *dax.DeleteParameterGroupInput, _ ...request.Option) (*dax.DeleteParameterGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteParameterGroup cancelled", ctx.Err())
	default:
		return d.DeleteParameterGroup(in)
	}
}

func (d *DAXDouble) DeleteSubnetGroup(i0 *dax.DeleteSubnetGroupInput) (r0 *dax.DeleteSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSubnetGroup", i0)
	r0, _ = returns[0].(*dax.DeleteSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) DeleteSubnetGroupRequest(i0 *dax.DeleteSubnetGroupInput) (r0 *request.Request, r1 *dax.DeleteSubnetGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSubnetGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dax.DeleteSubnetGroupOutput)
	return
}

func (d *DAXDouble) DeleteSubnetGroupWithContext(i0 context.Context, i1 *dax.DeleteSubnetGroupInput, i2 ...request.Option) (r0 *dax.DeleteSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSubnetGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dax.DeleteSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) fakeDeleteSubnetGroupWithContext(ctx context.Context, in *dax.DeleteSubnetGroupInput, _ ...request.Option) (*dax.DeleteSubnetGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteSubnetGroup cancelled", ctx.Err())
	default:
		return d.DeleteSubnetGroup(in)
	}
}

func (d *DAXDouble) DescribeClusters(i0 *dax.DescribeClustersInput) (r0 *dax.DescribeClustersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusters", i0)
	r0, _ = returns[0].(*dax.DescribeClustersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) DescribeClustersRequest(i0 *dax.DescribeClustersInput) (r0 *request.Request, r1 *dax.DescribeClustersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClustersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dax.DescribeClustersOutput)
	return
}

func (d *DAXDouble) DescribeClustersWithContext(i0 context.Context, i1 *dax.DescribeClustersInput, i2 ...request.Option) (r0 *dax.DescribeClustersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClustersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dax.DescribeClustersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) fakeDescribeClustersWithContext(ctx context.Context, in *dax.DescribeClustersInput, _ ...request.Option) (*dax.DescribeClustersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeClusters cancelled", ctx.Err())
	default:
		return d.DescribeClusters(in)
	}
}

func (d *DAXDouble) DescribeDefaultParameters(i0 *dax.DescribeDefaultParametersInput) (r0 *dax.DescribeDefaultParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDefaultParameters", i0)
	r0, _ = returns[0].(*dax.DescribeDefaultParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) DescribeDefaultParametersRequest(i0 *dax.DescribeDefaultParametersInput) (r0 *request.Request, r1 *dax.DescribeDefaultParametersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDefaultParametersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dax.DescribeDefaultParametersOutput)
	return
}

func (d *DAXDouble) DescribeDefaultParametersWithContext(i0 context.Context, i1 *dax.DescribeDefaultParametersInput, i2 ...request.Option) (r0 *dax.DescribeDefaultParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDefaultParametersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dax.DescribeDefaultParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) fakeDescribeDefaultParametersWithContext(ctx context.Context, in *dax.DescribeDefaultParametersInput, _ ...request.Option) (*dax.DescribeDefaultParametersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDefaultParameters cancelled", ctx.Err())
	default:
		return d.DescribeDefaultParameters(in)
	}
}

func (d *DAXDouble) DescribeEvents(i0 *dax.DescribeEventsInput) (r0 *dax.DescribeEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEvents", i0)
	r0, _ = returns[0].(*dax.DescribeEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) DescribeEventsRequest(i0 *dax.DescribeEventsInput) (r0 *request.Request, r1 *dax.DescribeEventsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dax.DescribeEventsOutput)
	return
}

func (d *DAXDouble) DescribeEventsWithContext(i0 context.Context, i1 *dax.DescribeEventsInput, i2 ...request.Option) (r0 *dax.DescribeEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dax.DescribeEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) fakeDescribeEventsWithContext(ctx context.Context, in *dax.DescribeEventsInput, _ ...request.Option) (*dax.DescribeEventsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEvents cancelled", ctx.Err())
	default:
		return d.DescribeEvents(in)
	}
}

func (d *DAXDouble) DescribeParameterGroups(i0 *dax.DescribeParameterGroupsInput) (r0 *dax.DescribeParameterGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeParameterGroups", i0)
	r0, _ = returns[0].(*dax.DescribeParameterGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) DescribeParameterGroupsRequest(i0 *dax.DescribeParameterGroupsInput) (r0 *request.Request, r1 *dax.DescribeParameterGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeParameterGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dax.DescribeParameterGroupsOutput)
	return
}

func (d *DAXDouble) DescribeParameterGroupsWithContext(i0 context.Context, i1 *dax.DescribeParameterGroupsInput, i2 ...request.Option) (r0 *dax.DescribeParameterGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeParameterGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dax.DescribeParameterGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) fakeDescribeParameterGroupsWithContext(ctx context.Context, in *dax.DescribeParameterGroupsInput, _ ...request.Option) (*dax.DescribeParameterGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeParameterGroups cancelled", ctx.Err())
	default:
		return d.DescribeParameterGroups(in)
	}
}

func (d *DAXDouble) DescribeParameters(i0 *dax.DescribeParametersInput) (r0 *dax.DescribeParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeParameters", i0)
	r0, _ = returns[0].(*dax.DescribeParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) DescribeParametersRequest(i0 *dax.DescribeParametersInput) (r0 *request.Request, r1 *dax.DescribeParametersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeParametersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dax.DescribeParametersOutput)
	return
}

func (d *DAXDouble) DescribeParametersWithContext(i0 context.Context, i1 *dax.DescribeParametersInput, i2 ...request.Option) (r0 *dax.DescribeParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeParametersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dax.DescribeParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) fakeDescribeParametersWithContext(ctx context.Context, in *dax.DescribeParametersInput, _ ...request.Option) (*dax.DescribeParametersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeParameters cancelled", ctx.Err())
	default:
		return d.DescribeParameters(in)
	}
}

func (d *DAXDouble) DescribeSubnetGroups(i0 *dax.DescribeSubnetGroupsInput) (r0 *dax.DescribeSubnetGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSubnetGroups", i0)
	r0, _ = returns[0].(*dax.DescribeSubnetGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) DescribeSubnetGroupsRequest(i0 *dax.DescribeSubnetGroupsInput) (r0 *request.Request, r1 *dax.DescribeSubnetGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSubnetGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dax.DescribeSubnetGroupsOutput)
	return
}

func (d *DAXDouble) DescribeSubnetGroupsWithContext(i0 context.Context, i1 *dax.DescribeSubnetGroupsInput, i2 ...request.Option) (r0 *dax.DescribeSubnetGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSubnetGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dax.DescribeSubnetGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) fakeDescribeSubnetGroupsWithContext(ctx context.Context, in *dax.DescribeSubnetGroupsInput, _ ...request.Option) (*dax.DescribeSubnetGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSubnetGroups cancelled", ctx.Err())
	default:
		return d.DescribeSubnetGroups(in)
	}
}

func (d *DAXDouble) IncreaseReplicationFactor(i0 *dax.IncreaseReplicationFactorInput) (r0 *dax.IncreaseReplicationFactorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("IncreaseReplicationFactor", i0)
	r0, _ = returns[0].(*dax.IncreaseReplicationFactorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) IncreaseReplicationFactorRequest(i0 *dax.IncreaseReplicationFactorInput) (r0 *request.Request, r1 *dax.IncreaseReplicationFactorOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("IncreaseReplicationFactorRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dax.IncreaseReplicationFactorOutput)
	return
}

func (d *DAXDouble) IncreaseReplicationFactorWithContext(i0 context.Context, i1 *dax.IncreaseReplicationFactorInput, i2 ...request.Option) (r0 *dax.IncreaseReplicationFactorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("IncreaseReplicationFactorWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dax.IncreaseReplicationFactorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) fakeIncreaseReplicationFactorWithContext(ctx context.Context, in *dax.IncreaseReplicationFactorInput, _ ...request.Option) (*dax.IncreaseReplicationFactorOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "IncreaseReplicationFactor cancelled", ctx.Err())
	default:
		return d.IncreaseReplicationFactor(in)
	}
}

func (d *DAXDouble) ListTags(i0 *dax.ListTagsInput) (r0 *dax.ListTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTags", i0)
	r0, _ = returns[0].(*dax.ListTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) ListTagsRequest(i0 *dax.ListTagsInput) (r0 *request.Request, r1 *dax.ListTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dax.ListTagsOutput)
	return
}

func (d *DAXDouble) ListTagsWithContext(i0 context.Context, i1 *dax.ListTagsInput, i2 ...request.Option) (r0 *dax.ListTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dax.ListTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) fakeListTagsWithContext(ctx context.Context, in *dax.ListTagsInput, _ ...request.Option) (*dax.ListTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTags cancelled", ctx.Err())
	default:
		return d.ListTags(in)
	}
}

func (d *DAXDouble) RebootNode(i0 *dax.RebootNodeInput) (r0 *dax.RebootNodeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebootNode", i0)
	r0, _ = returns[0].(*dax.RebootNodeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) RebootNodeRequest(i0 *dax.RebootNodeInput) (r0 *request.Request, r1 *dax.RebootNodeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebootNodeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dax.RebootNodeOutput)
	return
}

func (d *DAXDouble) RebootNodeWithContext(i0 context.Context, i1 *dax.RebootNodeInput, i2 ...request.Option) (r0 *dax.RebootNodeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebootNodeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dax.RebootNodeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) fakeRebootNodeWithContext(ctx context.Context, in *dax.RebootNodeInput, _ ...request.Option) (*dax.RebootNodeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RebootNode cancelled", ctx.Err())
	default:
		return d.RebootNode(in)
	}
}

func (d *DAXDouble) TagResource(i0 *dax.TagResourceInput) (r0 *dax.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*dax.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) TagResourceRequest(i0 *dax.TagResourceInput) (r0 *request.Request, r1 *dax.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dax.TagResourceOutput)
	return
}

func (d *DAXDouble) TagResourceWithContext(i0 context.Context, i1 *dax.TagResourceInput, i2 ...request.Option) (r0 *dax.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dax.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) fakeTagResourceWithContext(ctx context.Context, in *dax.TagResourceInput, _ ...request.Option) (*dax.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *DAXDouble) UntagResource(i0 *dax.UntagResourceInput) (r0 *dax.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*dax.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) UntagResourceRequest(i0 *dax.UntagResourceInput) (r0 *request.Request, r1 *dax.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dax.UntagResourceOutput)
	return
}

func (d *DAXDouble) UntagResourceWithContext(i0 context.Context, i1 *dax.UntagResourceInput, i2 ...request.Option) (r0 *dax.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dax.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) fakeUntagResourceWithContext(ctx context.Context, in *dax.UntagResourceInput, _ ...request.Option) (*dax.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *DAXDouble) UpdateCluster(i0 *dax.UpdateClusterInput) (r0 *dax.UpdateClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCluster", i0)
	r0, _ = returns[0].(*dax.UpdateClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) UpdateClusterRequest(i0 *dax.UpdateClusterInput) (r0 *request.Request, r1 *dax.UpdateClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dax.UpdateClusterOutput)
	return
}

func (d *DAXDouble) UpdateClusterWithContext(i0 context.Context, i1 *dax.UpdateClusterInput, i2 ...request.Option) (r0 *dax.UpdateClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dax.UpdateClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) fakeUpdateClusterWithContext(ctx context.Context, in *dax.UpdateClusterInput, _ ...request.Option) (*dax.UpdateClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateCluster cancelled", ctx.Err())
	default:
		return d.UpdateCluster(in)
	}
}

func (d *DAXDouble) UpdateParameterGroup(i0 *dax.UpdateParameterGroupInput) (r0 *dax.UpdateParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateParameterGroup", i0)
	r0, _ = returns[0].(*dax.UpdateParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) UpdateParameterGroupRequest(i0 *dax.UpdateParameterGroupInput) (r0 *request.Request, r1 *dax.UpdateParameterGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateParameterGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dax.UpdateParameterGroupOutput)
	return
}

func (d *DAXDouble) UpdateParameterGroupWithContext(i0 context.Context, i1 *dax.UpdateParameterGroupInput, i2 ...request.Option) (r0 *dax.UpdateParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateParameterGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dax.UpdateParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) fakeUpdateParameterGroupWithContext(ctx context.Context, in *dax.UpdateParameterGroupInput, _ ...request.Option) (*dax.UpdateParameterGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateParameterGroup cancelled", ctx.Err())
	default:
		return d.UpdateParameterGroup(in)
	}
}

func (d *DAXDouble) UpdateSubnetGroup(i0 *dax.UpdateSubnetGroupInput) (r0 *dax.UpdateSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSubnetGroup", i0)
	r0, _ = returns[0].(*dax.UpdateSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) UpdateSubnetGroupRequest(i0 *dax.UpdateSubnetGroupInput) (r0 *request.Request, r1 *dax.UpdateSubnetGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSubnetGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dax.UpdateSubnetGroupOutput)
	return
}

func (d *DAXDouble) UpdateSubnetGroupWithContext(i0 context.Context, i1 *dax.UpdateSubnetGroupInput, i2 ...request.Option) (r0 *dax.UpdateSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSubnetGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dax.UpdateSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DAXDouble) fakeUpdateSubnetGroupWithContext(ctx context.Context, in *dax.UpdateSubnetGroupInput, _ ...request.Option) (*dax.UpdateSubnetGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateSubnetGroup cancelled", ctx.Err())
	default:
		return d.UpdateSubnetGroup(in)
	}
}
