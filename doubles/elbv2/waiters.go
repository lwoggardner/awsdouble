// Code generated by go awsdoublegen; DO NOT EDIT.
// This file was generated at 2020-01-29T21:22:05+11:00
package elbv2double

import (
	"time"

	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/lwoggardner/awsdouble"
)

var waiters = map[string]*awsdouble.Waiter{

	"LoadBalancerAvailable": &awsdouble.Waiter{
		OperationName: "DescribeLoadBalancers",
		Waiter: request.Waiter{
			Name:        "WaitUntilLoadBalancerAvailable",
			MaxAttempts: 40,
			Delay:       request.ConstantWaiterDelay(15 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathAllWaiterMatch, Argument: "LoadBalancers[].State.Code",
					Expected: "active",
				},
				{
					State:   request.RetryWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "LoadBalancers[].State.Code",
					Expected: "provisioning",
				},
				{
					State:    request.RetryWaiterState,
					Matcher:  request.ErrorWaiterMatch,
					Expected: "LoadBalancerNotFound",
				},
			},
		},
	},

	"LoadBalancerExists": &awsdouble.Waiter{
		OperationName: "DescribeLoadBalancers",
		Waiter: request.Waiter{
			Name:        "WaitUntilLoadBalancerExists",
			MaxAttempts: 40,
			Delay:       request.ConstantWaiterDelay(15 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:    request.SuccessWaiterState,
					Matcher:  request.StatusWaiterMatch,
					Expected: 200,
				},
				{
					State:    request.RetryWaiterState,
					Matcher:  request.ErrorWaiterMatch,
					Expected: "LoadBalancerNotFound",
				},
			},
		},
	},

	"LoadBalancersDeleted": &awsdouble.Waiter{
		OperationName: "DescribeLoadBalancers",
		Waiter: request.Waiter{
			Name:        "WaitUntilLoadBalancersDeleted",
			MaxAttempts: 40,
			Delay:       request.ConstantWaiterDelay(15 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.RetryWaiterState,
					Matcher: request.PathAllWaiterMatch, Argument: "LoadBalancers[].State.Code",
					Expected: "active",
				},
				{
					State:    request.SuccessWaiterState,
					Matcher:  request.ErrorWaiterMatch,
					Expected: "LoadBalancerNotFound",
				},
			},
		},
	},

	"TargetDeregistered": &awsdouble.Waiter{
		OperationName: "DescribeTargetHealth",
		Waiter: request.Waiter{
			Name:        "WaitUntilTargetDeregistered",
			MaxAttempts: 40,
			Delay:       request.ConstantWaiterDelay(15 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:    request.SuccessWaiterState,
					Matcher:  request.ErrorWaiterMatch,
					Expected: "InvalidTarget",
				},
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathAllWaiterMatch, Argument: "TargetHealthDescriptions[].TargetHealth.State",
					Expected: "unused",
				},
			},
		},
	},

	"TargetInService": &awsdouble.Waiter{
		OperationName: "DescribeTargetHealth",
		Waiter: request.Waiter{
			Name:        "WaitUntilTargetInService",
			MaxAttempts: 40,
			Delay:       request.ConstantWaiterDelay(15 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathAllWaiterMatch, Argument: "TargetHealthDescriptions[].TargetHealth.State",
					Expected: "healthy",
				},
				{
					State:    request.RetryWaiterState,
					Matcher:  request.ErrorWaiterMatch,
					Expected: "InvalidInstance",
				},
			},
		},
	},
}
