// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:12:44+11:00

// Package elbv2double provides a TestDouble implementation of elbv2iface.ELBV2API
package elbv2double

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/elbv2"
	"github.com/aws/aws-sdk-go/service/elbv2/elbv2iface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// ELBV2Double is TestDouble for elbv2iface.ELBV2API
type ELBV2Double struct {
	elbv2iface.ELBV2API
	*awsdouble.AWSTestDouble
}

// Constructor for ELBV2Double
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *ELBV2Double {
	result := &ELBV2Double{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*elbv2iface.ELBV2API)(nil), configurators...)
	return result
}

func (d *ELBV2Double) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *ELBV2Double) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AddListenerCertificatesWithContext":
		return m.Fake(d.fakeAddListenerCertificatesWithContext)

	case "AddTagsWithContext":
		return m.Fake(d.fakeAddTagsWithContext)

	case "CreateListenerWithContext":
		return m.Fake(d.fakeCreateListenerWithContext)

	case "CreateLoadBalancerWithContext":
		return m.Fake(d.fakeCreateLoadBalancerWithContext)

	case "CreateRuleWithContext":
		return m.Fake(d.fakeCreateRuleWithContext)

	case "CreateTargetGroupWithContext":
		return m.Fake(d.fakeCreateTargetGroupWithContext)

	case "DeleteListenerWithContext":
		return m.Fake(d.fakeDeleteListenerWithContext)

	case "DeleteLoadBalancerWithContext":
		return m.Fake(d.fakeDeleteLoadBalancerWithContext)

	case "DeleteRuleWithContext":
		return m.Fake(d.fakeDeleteRuleWithContext)

	case "DeleteTargetGroupWithContext":
		return m.Fake(d.fakeDeleteTargetGroupWithContext)

	case "DeregisterTargetsWithContext":
		return m.Fake(d.fakeDeregisterTargetsWithContext)

	case "DescribeAccountLimitsWithContext":
		return m.Fake(d.fakeDescribeAccountLimitsWithContext)

	case "DescribeListenerCertificatesWithContext":
		return m.Fake(d.fakeDescribeListenerCertificatesWithContext)

	case "DescribeListenersPages":
		return m.Fake(d.fakeDescribeListenersPages)

	case "DescribeListenersPagesWithContext":
		return m.Fake(d.fakeDescribeListenersPagesWithContext)

	case "DescribeListenersWithContext":
		return m.Fake(d.fakeDescribeListenersWithContext)

	case "DescribeLoadBalancerAttributesWithContext":
		return m.Fake(d.fakeDescribeLoadBalancerAttributesWithContext)

	case "DescribeLoadBalancersPages":
		return m.Fake(d.fakeDescribeLoadBalancersPages)

	case "DescribeLoadBalancersPagesWithContext":
		return m.Fake(d.fakeDescribeLoadBalancersPagesWithContext)

	case "DescribeLoadBalancersWithContext":
		return m.Fake(d.fakeDescribeLoadBalancersWithContext)

	case "DescribeRulesWithContext":
		return m.Fake(d.fakeDescribeRulesWithContext)

	case "DescribeSSLPoliciesWithContext":
		return m.Fake(d.fakeDescribeSSLPoliciesWithContext)

	case "DescribeTagsWithContext":
		return m.Fake(d.fakeDescribeTagsWithContext)

	case "DescribeTargetGroupAttributesWithContext":
		return m.Fake(d.fakeDescribeTargetGroupAttributesWithContext)

	case "DescribeTargetGroupsPages":
		return m.Fake(d.fakeDescribeTargetGroupsPages)

	case "DescribeTargetGroupsPagesWithContext":
		return m.Fake(d.fakeDescribeTargetGroupsPagesWithContext)

	case "DescribeTargetGroupsWithContext":
		return m.Fake(d.fakeDescribeTargetGroupsWithContext)

	case "DescribeTargetHealthWithContext":
		return m.Fake(d.fakeDescribeTargetHealthWithContext)

	case "ModifyListenerWithContext":
		return m.Fake(d.fakeModifyListenerWithContext)

	case "ModifyLoadBalancerAttributesWithContext":
		return m.Fake(d.fakeModifyLoadBalancerAttributesWithContext)

	case "ModifyRuleWithContext":
		return m.Fake(d.fakeModifyRuleWithContext)

	case "ModifyTargetGroupAttributesWithContext":
		return m.Fake(d.fakeModifyTargetGroupAttributesWithContext)

	case "ModifyTargetGroupWithContext":
		return m.Fake(d.fakeModifyTargetGroupWithContext)

	case "RegisterTargetsWithContext":
		return m.Fake(d.fakeRegisterTargetsWithContext)

	case "RemoveListenerCertificatesWithContext":
		return m.Fake(d.fakeRemoveListenerCertificatesWithContext)

	case "RemoveTagsWithContext":
		return m.Fake(d.fakeRemoveTagsWithContext)

	case "SetIpAddressTypeWithContext":
		return m.Fake(d.fakeSetIpAddressTypeWithContext)

	case "SetRulePrioritiesWithContext":
		return m.Fake(d.fakeSetRulePrioritiesWithContext)

	case "SetSecurityGroupsWithContext":
		return m.Fake(d.fakeSetSecurityGroupsWithContext)

	case "SetSubnetsWithContext":
		return m.Fake(d.fakeSetSubnetsWithContext)

	case "WaitUntilLoadBalancerAvailable":
		return m.Fake(d.fakeWaitUntilLoadBalancerAvailable)

	case "WaitUntilLoadBalancerAvailableWithContext":
		return m.Fake(d.fakeWaitUntilLoadBalancerAvailableWithContext)

	case "WaitUntilLoadBalancerExists":
		return m.Fake(d.fakeWaitUntilLoadBalancerExists)

	case "WaitUntilLoadBalancerExistsWithContext":
		return m.Fake(d.fakeWaitUntilLoadBalancerExistsWithContext)

	case "WaitUntilLoadBalancersDeleted":
		return m.Fake(d.fakeWaitUntilLoadBalancersDeleted)

	case "WaitUntilLoadBalancersDeletedWithContext":
		return m.Fake(d.fakeWaitUntilLoadBalancersDeletedWithContext)

	case "WaitUntilTargetDeregistered":
		return m.Fake(d.fakeWaitUntilTargetDeregistered)

	case "WaitUntilTargetDeregisteredWithContext":
		return m.Fake(d.fakeWaitUntilTargetDeregisteredWithContext)

	case "WaitUntilTargetInService":
		return m.Fake(d.fakeWaitUntilTargetInService)

	case "WaitUntilTargetInServiceWithContext":
		return m.Fake(d.fakeWaitUntilTargetInServiceWithContext)

	default:
		return nil
	}
}

func (d *ELBV2Double) AddListenerCertificates(i0 *elbv2.AddListenerCertificatesInput) (r0 *elbv2.AddListenerCertificatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddListenerCertificates", i0)
	r0, _ = returns[0].(*elbv2.AddListenerCertificatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) AddListenerCertificatesRequest(i0 *elbv2.AddListenerCertificatesInput) (r0 *request.Request, r1 *elbv2.AddListenerCertificatesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddListenerCertificatesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elbv2.AddListenerCertificatesOutput)
	return
}

func (d *ELBV2Double) AddListenerCertificatesWithContext(i0 context.Context, i1 *elbv2.AddListenerCertificatesInput, i2 ...request.Option) (r0 *elbv2.AddListenerCertificatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddListenerCertificatesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elbv2.AddListenerCertificatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) fakeAddListenerCertificatesWithContext(ctx context.Context, in *elbv2.AddListenerCertificatesInput, _ ...request.Option) (*elbv2.AddListenerCertificatesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddListenerCertificates cancelled", ctx.Err())
	default:
		return d.AddListenerCertificates(in)
	}
}

func (d *ELBV2Double) AddTags(i0 *elbv2.AddTagsInput) (r0 *elbv2.AddTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTags", i0)
	r0, _ = returns[0].(*elbv2.AddTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) AddTagsRequest(i0 *elbv2.AddTagsInput) (r0 *request.Request, r1 *elbv2.AddTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elbv2.AddTagsOutput)
	return
}

func (d *ELBV2Double) AddTagsWithContext(i0 context.Context, i1 *elbv2.AddTagsInput, i2 ...request.Option) (r0 *elbv2.AddTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elbv2.AddTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) fakeAddTagsWithContext(ctx context.Context, in *elbv2.AddTagsInput, _ ...request.Option) (*elbv2.AddTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddTags cancelled", ctx.Err())
	default:
		return d.AddTags(in)
	}
}

func (d *ELBV2Double) CreateListener(i0 *elbv2.CreateListenerInput) (r0 *elbv2.CreateListenerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateListener", i0)
	r0, _ = returns[0].(*elbv2.CreateListenerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) CreateListenerRequest(i0 *elbv2.CreateListenerInput) (r0 *request.Request, r1 *elbv2.CreateListenerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateListenerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elbv2.CreateListenerOutput)
	return
}

func (d *ELBV2Double) CreateListenerWithContext(i0 context.Context, i1 *elbv2.CreateListenerInput, i2 ...request.Option) (r0 *elbv2.CreateListenerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateListenerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elbv2.CreateListenerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) fakeCreateListenerWithContext(ctx context.Context, in *elbv2.CreateListenerInput, _ ...request.Option) (*elbv2.CreateListenerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateListener cancelled", ctx.Err())
	default:
		return d.CreateListener(in)
	}
}

func (d *ELBV2Double) CreateLoadBalancer(i0 *elbv2.CreateLoadBalancerInput) (r0 *elbv2.CreateLoadBalancerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLoadBalancer", i0)
	r0, _ = returns[0].(*elbv2.CreateLoadBalancerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) CreateLoadBalancerRequest(i0 *elbv2.CreateLoadBalancerInput) (r0 *request.Request, r1 *elbv2.CreateLoadBalancerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLoadBalancerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elbv2.CreateLoadBalancerOutput)
	return
}

func (d *ELBV2Double) CreateLoadBalancerWithContext(i0 context.Context, i1 *elbv2.CreateLoadBalancerInput, i2 ...request.Option) (r0 *elbv2.CreateLoadBalancerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLoadBalancerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elbv2.CreateLoadBalancerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) fakeCreateLoadBalancerWithContext(ctx context.Context, in *elbv2.CreateLoadBalancerInput, _ ...request.Option) (*elbv2.CreateLoadBalancerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateLoadBalancer cancelled", ctx.Err())
	default:
		return d.CreateLoadBalancer(in)
	}
}

func (d *ELBV2Double) CreateRule(i0 *elbv2.CreateRuleInput) (r0 *elbv2.CreateRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRule", i0)
	r0, _ = returns[0].(*elbv2.CreateRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) CreateRuleRequest(i0 *elbv2.CreateRuleInput) (r0 *request.Request, r1 *elbv2.CreateRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elbv2.CreateRuleOutput)
	return
}

func (d *ELBV2Double) CreateRuleWithContext(i0 context.Context, i1 *elbv2.CreateRuleInput, i2 ...request.Option) (r0 *elbv2.CreateRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elbv2.CreateRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) fakeCreateRuleWithContext(ctx context.Context, in *elbv2.CreateRuleInput, _ ...request.Option) (*elbv2.CreateRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateRule cancelled", ctx.Err())
	default:
		return d.CreateRule(in)
	}
}

func (d *ELBV2Double) CreateTargetGroup(i0 *elbv2.CreateTargetGroupInput) (r0 *elbv2.CreateTargetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTargetGroup", i0)
	r0, _ = returns[0].(*elbv2.CreateTargetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) CreateTargetGroupRequest(i0 *elbv2.CreateTargetGroupInput) (r0 *request.Request, r1 *elbv2.CreateTargetGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTargetGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elbv2.CreateTargetGroupOutput)
	return
}

func (d *ELBV2Double) CreateTargetGroupWithContext(i0 context.Context, i1 *elbv2.CreateTargetGroupInput, i2 ...request.Option) (r0 *elbv2.CreateTargetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTargetGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elbv2.CreateTargetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) fakeCreateTargetGroupWithContext(ctx context.Context, in *elbv2.CreateTargetGroupInput, _ ...request.Option) (*elbv2.CreateTargetGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTargetGroup cancelled", ctx.Err())
	default:
		return d.CreateTargetGroup(in)
	}
}

func (d *ELBV2Double) DeleteListener(i0 *elbv2.DeleteListenerInput) (r0 *elbv2.DeleteListenerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteListener", i0)
	r0, _ = returns[0].(*elbv2.DeleteListenerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) DeleteListenerRequest(i0 *elbv2.DeleteListenerInput) (r0 *request.Request, r1 *elbv2.DeleteListenerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteListenerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elbv2.DeleteListenerOutput)
	return
}

func (d *ELBV2Double) DeleteListenerWithContext(i0 context.Context, i1 *elbv2.DeleteListenerInput, i2 ...request.Option) (r0 *elbv2.DeleteListenerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteListenerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elbv2.DeleteListenerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) fakeDeleteListenerWithContext(ctx context.Context, in *elbv2.DeleteListenerInput, _ ...request.Option) (*elbv2.DeleteListenerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteListener cancelled", ctx.Err())
	default:
		return d.DeleteListener(in)
	}
}

func (d *ELBV2Double) DeleteLoadBalancer(i0 *elbv2.DeleteLoadBalancerInput) (r0 *elbv2.DeleteLoadBalancerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLoadBalancer", i0)
	r0, _ = returns[0].(*elbv2.DeleteLoadBalancerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) DeleteLoadBalancerRequest(i0 *elbv2.DeleteLoadBalancerInput) (r0 *request.Request, r1 *elbv2.DeleteLoadBalancerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLoadBalancerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elbv2.DeleteLoadBalancerOutput)
	return
}

func (d *ELBV2Double) DeleteLoadBalancerWithContext(i0 context.Context, i1 *elbv2.DeleteLoadBalancerInput, i2 ...request.Option) (r0 *elbv2.DeleteLoadBalancerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLoadBalancerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elbv2.DeleteLoadBalancerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) fakeDeleteLoadBalancerWithContext(ctx context.Context, in *elbv2.DeleteLoadBalancerInput, _ ...request.Option) (*elbv2.DeleteLoadBalancerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteLoadBalancer cancelled", ctx.Err())
	default:
		return d.DeleteLoadBalancer(in)
	}
}

func (d *ELBV2Double) DeleteRule(i0 *elbv2.DeleteRuleInput) (r0 *elbv2.DeleteRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRule", i0)
	r0, _ = returns[0].(*elbv2.DeleteRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) DeleteRuleRequest(i0 *elbv2.DeleteRuleInput) (r0 *request.Request, r1 *elbv2.DeleteRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elbv2.DeleteRuleOutput)
	return
}

func (d *ELBV2Double) DeleteRuleWithContext(i0 context.Context, i1 *elbv2.DeleteRuleInput, i2 ...request.Option) (r0 *elbv2.DeleteRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elbv2.DeleteRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) fakeDeleteRuleWithContext(ctx context.Context, in *elbv2.DeleteRuleInput, _ ...request.Option) (*elbv2.DeleteRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRule cancelled", ctx.Err())
	default:
		return d.DeleteRule(in)
	}
}

func (d *ELBV2Double) DeleteTargetGroup(i0 *elbv2.DeleteTargetGroupInput) (r0 *elbv2.DeleteTargetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTargetGroup", i0)
	r0, _ = returns[0].(*elbv2.DeleteTargetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) DeleteTargetGroupRequest(i0 *elbv2.DeleteTargetGroupInput) (r0 *request.Request, r1 *elbv2.DeleteTargetGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTargetGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elbv2.DeleteTargetGroupOutput)
	return
}

func (d *ELBV2Double) DeleteTargetGroupWithContext(i0 context.Context, i1 *elbv2.DeleteTargetGroupInput, i2 ...request.Option) (r0 *elbv2.DeleteTargetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTargetGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elbv2.DeleteTargetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) fakeDeleteTargetGroupWithContext(ctx context.Context, in *elbv2.DeleteTargetGroupInput, _ ...request.Option) (*elbv2.DeleteTargetGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTargetGroup cancelled", ctx.Err())
	default:
		return d.DeleteTargetGroup(in)
	}
}

func (d *ELBV2Double) DeregisterTargets(i0 *elbv2.DeregisterTargetsInput) (r0 *elbv2.DeregisterTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterTargets", i0)
	r0, _ = returns[0].(*elbv2.DeregisterTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) DeregisterTargetsRequest(i0 *elbv2.DeregisterTargetsInput) (r0 *request.Request, r1 *elbv2.DeregisterTargetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterTargetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elbv2.DeregisterTargetsOutput)
	return
}

func (d *ELBV2Double) DeregisterTargetsWithContext(i0 context.Context, i1 *elbv2.DeregisterTargetsInput, i2 ...request.Option) (r0 *elbv2.DeregisterTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterTargetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elbv2.DeregisterTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) fakeDeregisterTargetsWithContext(ctx context.Context, in *elbv2.DeregisterTargetsInput, _ ...request.Option) (*elbv2.DeregisterTargetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeregisterTargets cancelled", ctx.Err())
	default:
		return d.DeregisterTargets(in)
	}
}

func (d *ELBV2Double) DescribeAccountLimits(i0 *elbv2.DescribeAccountLimitsInput) (r0 *elbv2.DescribeAccountLimitsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAccountLimits", i0)
	r0, _ = returns[0].(*elbv2.DescribeAccountLimitsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) DescribeAccountLimitsRequest(i0 *elbv2.DescribeAccountLimitsInput) (r0 *request.Request, r1 *elbv2.DescribeAccountLimitsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAccountLimitsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elbv2.DescribeAccountLimitsOutput)
	return
}

func (d *ELBV2Double) DescribeAccountLimitsWithContext(i0 context.Context, i1 *elbv2.DescribeAccountLimitsInput, i2 ...request.Option) (r0 *elbv2.DescribeAccountLimitsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAccountLimitsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elbv2.DescribeAccountLimitsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) fakeDescribeAccountLimitsWithContext(ctx context.Context, in *elbv2.DescribeAccountLimitsInput, _ ...request.Option) (*elbv2.DescribeAccountLimitsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAccountLimits cancelled", ctx.Err())
	default:
		return d.DescribeAccountLimits(in)
	}
}

func (d *ELBV2Double) DescribeListenerCertificates(i0 *elbv2.DescribeListenerCertificatesInput) (r0 *elbv2.DescribeListenerCertificatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeListenerCertificates", i0)
	r0, _ = returns[0].(*elbv2.DescribeListenerCertificatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) DescribeListenerCertificatesRequest(i0 *elbv2.DescribeListenerCertificatesInput) (r0 *request.Request, r1 *elbv2.DescribeListenerCertificatesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeListenerCertificatesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elbv2.DescribeListenerCertificatesOutput)
	return
}

func (d *ELBV2Double) DescribeListenerCertificatesWithContext(i0 context.Context, i1 *elbv2.DescribeListenerCertificatesInput, i2 ...request.Option) (r0 *elbv2.DescribeListenerCertificatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeListenerCertificatesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elbv2.DescribeListenerCertificatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) fakeDescribeListenerCertificatesWithContext(ctx context.Context, in *elbv2.DescribeListenerCertificatesInput, _ ...request.Option) (*elbv2.DescribeListenerCertificatesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeListenerCertificates cancelled", ctx.Err())
	default:
		return d.DescribeListenerCertificates(in)
	}
}

func (d *ELBV2Double) DescribeListeners(i0 *elbv2.DescribeListenersInput) (r0 *elbv2.DescribeListenersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeListeners", i0)
	r0, _ = returns[0].(*elbv2.DescribeListenersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) DescribeListenersPages(i0 *elbv2.DescribeListenersInput, i1 func(*elbv2.DescribeListenersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeListenersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ELBV2Double) fakeDescribeListenersPages(in *elbv2.DescribeListenersInput, pager func(*elbv2.DescribeListenersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeListeners", paginators, in, pager)
}

func (d *ELBV2Double) DescribeListenersPagesWithContext(i0 context.Context, i1 *elbv2.DescribeListenersInput, i2 func(*elbv2.DescribeListenersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeListenersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ELBV2Double) fakeDescribeListenersPagesWithContext(ctx context.Context, in *elbv2.DescribeListenersInput, pager func(*elbv2.DescribeListenersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeListeners", paginators, ctx, in, pager, options...)
}

func (d *ELBV2Double) DescribeListenersRequest(i0 *elbv2.DescribeListenersInput) (r0 *request.Request, r1 *elbv2.DescribeListenersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeListenersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elbv2.DescribeListenersOutput)
	return
}

func (d *ELBV2Double) DescribeListenersWithContext(i0 context.Context, i1 *elbv2.DescribeListenersInput, i2 ...request.Option) (r0 *elbv2.DescribeListenersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeListenersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elbv2.DescribeListenersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) fakeDescribeListenersWithContext(ctx context.Context, in *elbv2.DescribeListenersInput, _ ...request.Option) (*elbv2.DescribeListenersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeListeners cancelled", ctx.Err())
	default:
		return d.DescribeListeners(in)
	}
}

func (d *ELBV2Double) DescribeLoadBalancerAttributes(i0 *elbv2.DescribeLoadBalancerAttributesInput) (r0 *elbv2.DescribeLoadBalancerAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoadBalancerAttributes", i0)
	r0, _ = returns[0].(*elbv2.DescribeLoadBalancerAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) DescribeLoadBalancerAttributesRequest(i0 *elbv2.DescribeLoadBalancerAttributesInput) (r0 *request.Request, r1 *elbv2.DescribeLoadBalancerAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoadBalancerAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elbv2.DescribeLoadBalancerAttributesOutput)
	return
}

func (d *ELBV2Double) DescribeLoadBalancerAttributesWithContext(i0 context.Context, i1 *elbv2.DescribeLoadBalancerAttributesInput, i2 ...request.Option) (r0 *elbv2.DescribeLoadBalancerAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoadBalancerAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elbv2.DescribeLoadBalancerAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) fakeDescribeLoadBalancerAttributesWithContext(ctx context.Context, in *elbv2.DescribeLoadBalancerAttributesInput, _ ...request.Option) (*elbv2.DescribeLoadBalancerAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeLoadBalancerAttributes cancelled", ctx.Err())
	default:
		return d.DescribeLoadBalancerAttributes(in)
	}
}

func (d *ELBV2Double) DescribeLoadBalancers(i0 *elbv2.DescribeLoadBalancersInput) (r0 *elbv2.DescribeLoadBalancersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoadBalancers", i0)
	r0, _ = returns[0].(*elbv2.DescribeLoadBalancersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) DescribeLoadBalancersPages(i0 *elbv2.DescribeLoadBalancersInput, i1 func(*elbv2.DescribeLoadBalancersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoadBalancersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ELBV2Double) fakeDescribeLoadBalancersPages(in *elbv2.DescribeLoadBalancersInput, pager func(*elbv2.DescribeLoadBalancersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeLoadBalancers", paginators, in, pager)
}

func (d *ELBV2Double) DescribeLoadBalancersPagesWithContext(i0 context.Context, i1 *elbv2.DescribeLoadBalancersInput, i2 func(*elbv2.DescribeLoadBalancersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoadBalancersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ELBV2Double) fakeDescribeLoadBalancersPagesWithContext(ctx context.Context, in *elbv2.DescribeLoadBalancersInput, pager func(*elbv2.DescribeLoadBalancersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeLoadBalancers", paginators, ctx, in, pager, options...)
}

func (d *ELBV2Double) DescribeLoadBalancersRequest(i0 *elbv2.DescribeLoadBalancersInput) (r0 *request.Request, r1 *elbv2.DescribeLoadBalancersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoadBalancersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elbv2.DescribeLoadBalancersOutput)
	return
}

func (d *ELBV2Double) DescribeLoadBalancersWithContext(i0 context.Context, i1 *elbv2.DescribeLoadBalancersInput, i2 ...request.Option) (r0 *elbv2.DescribeLoadBalancersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoadBalancersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elbv2.DescribeLoadBalancersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) fakeDescribeLoadBalancersWithContext(ctx context.Context, in *elbv2.DescribeLoadBalancersInput, _ ...request.Option) (*elbv2.DescribeLoadBalancersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeLoadBalancers cancelled", ctx.Err())
	default:
		return d.DescribeLoadBalancers(in)
	}
}

func (d *ELBV2Double) DescribeRules(i0 *elbv2.DescribeRulesInput) (r0 *elbv2.DescribeRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRules", i0)
	r0, _ = returns[0].(*elbv2.DescribeRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) DescribeRulesRequest(i0 *elbv2.DescribeRulesInput) (r0 *request.Request, r1 *elbv2.DescribeRulesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRulesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elbv2.DescribeRulesOutput)
	return
}

func (d *ELBV2Double) DescribeRulesWithContext(i0 context.Context, i1 *elbv2.DescribeRulesInput, i2 ...request.Option) (r0 *elbv2.DescribeRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRulesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elbv2.DescribeRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) fakeDescribeRulesWithContext(ctx context.Context, in *elbv2.DescribeRulesInput, _ ...request.Option) (*elbv2.DescribeRulesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeRules cancelled", ctx.Err())
	default:
		return d.DescribeRules(in)
	}
}

func (d *ELBV2Double) DescribeSSLPolicies(i0 *elbv2.DescribeSSLPoliciesInput) (r0 *elbv2.DescribeSSLPoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSSLPolicies", i0)
	r0, _ = returns[0].(*elbv2.DescribeSSLPoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) DescribeSSLPoliciesRequest(i0 *elbv2.DescribeSSLPoliciesInput) (r0 *request.Request, r1 *elbv2.DescribeSSLPoliciesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSSLPoliciesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elbv2.DescribeSSLPoliciesOutput)
	return
}

func (d *ELBV2Double) DescribeSSLPoliciesWithContext(i0 context.Context, i1 *elbv2.DescribeSSLPoliciesInput, i2 ...request.Option) (r0 *elbv2.DescribeSSLPoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSSLPoliciesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elbv2.DescribeSSLPoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) fakeDescribeSSLPoliciesWithContext(ctx context.Context, in *elbv2.DescribeSSLPoliciesInput, _ ...request.Option) (*elbv2.DescribeSSLPoliciesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSSLPolicies cancelled", ctx.Err())
	default:
		return d.DescribeSSLPolicies(in)
	}
}

func (d *ELBV2Double) DescribeTags(i0 *elbv2.DescribeTagsInput) (r0 *elbv2.DescribeTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTags", i0)
	r0, _ = returns[0].(*elbv2.DescribeTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) DescribeTagsRequest(i0 *elbv2.DescribeTagsInput) (r0 *request.Request, r1 *elbv2.DescribeTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elbv2.DescribeTagsOutput)
	return
}

func (d *ELBV2Double) DescribeTagsWithContext(i0 context.Context, i1 *elbv2.DescribeTagsInput, i2 ...request.Option) (r0 *elbv2.DescribeTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elbv2.DescribeTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) fakeDescribeTagsWithContext(ctx context.Context, in *elbv2.DescribeTagsInput, _ ...request.Option) (*elbv2.DescribeTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTags cancelled", ctx.Err())
	default:
		return d.DescribeTags(in)
	}
}

func (d *ELBV2Double) DescribeTargetGroupAttributes(i0 *elbv2.DescribeTargetGroupAttributesInput) (r0 *elbv2.DescribeTargetGroupAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTargetGroupAttributes", i0)
	r0, _ = returns[0].(*elbv2.DescribeTargetGroupAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) DescribeTargetGroupAttributesRequest(i0 *elbv2.DescribeTargetGroupAttributesInput) (r0 *request.Request, r1 *elbv2.DescribeTargetGroupAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTargetGroupAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elbv2.DescribeTargetGroupAttributesOutput)
	return
}

func (d *ELBV2Double) DescribeTargetGroupAttributesWithContext(i0 context.Context, i1 *elbv2.DescribeTargetGroupAttributesInput, i2 ...request.Option) (r0 *elbv2.DescribeTargetGroupAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTargetGroupAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elbv2.DescribeTargetGroupAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) fakeDescribeTargetGroupAttributesWithContext(ctx context.Context, in *elbv2.DescribeTargetGroupAttributesInput, _ ...request.Option) (*elbv2.DescribeTargetGroupAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTargetGroupAttributes cancelled", ctx.Err())
	default:
		return d.DescribeTargetGroupAttributes(in)
	}
}

func (d *ELBV2Double) DescribeTargetGroups(i0 *elbv2.DescribeTargetGroupsInput) (r0 *elbv2.DescribeTargetGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTargetGroups", i0)
	r0, _ = returns[0].(*elbv2.DescribeTargetGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) DescribeTargetGroupsPages(i0 *elbv2.DescribeTargetGroupsInput, i1 func(*elbv2.DescribeTargetGroupsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTargetGroupsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ELBV2Double) fakeDescribeTargetGroupsPages(in *elbv2.DescribeTargetGroupsInput, pager func(*elbv2.DescribeTargetGroupsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeTargetGroups", paginators, in, pager)
}

func (d *ELBV2Double) DescribeTargetGroupsPagesWithContext(i0 context.Context, i1 *elbv2.DescribeTargetGroupsInput, i2 func(*elbv2.DescribeTargetGroupsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTargetGroupsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ELBV2Double) fakeDescribeTargetGroupsPagesWithContext(ctx context.Context, in *elbv2.DescribeTargetGroupsInput, pager func(*elbv2.DescribeTargetGroupsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeTargetGroups", paginators, ctx, in, pager, options...)
}

func (d *ELBV2Double) DescribeTargetGroupsRequest(i0 *elbv2.DescribeTargetGroupsInput) (r0 *request.Request, r1 *elbv2.DescribeTargetGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTargetGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elbv2.DescribeTargetGroupsOutput)
	return
}

func (d *ELBV2Double) DescribeTargetGroupsWithContext(i0 context.Context, i1 *elbv2.DescribeTargetGroupsInput, i2 ...request.Option) (r0 *elbv2.DescribeTargetGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTargetGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elbv2.DescribeTargetGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) fakeDescribeTargetGroupsWithContext(ctx context.Context, in *elbv2.DescribeTargetGroupsInput, _ ...request.Option) (*elbv2.DescribeTargetGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTargetGroups cancelled", ctx.Err())
	default:
		return d.DescribeTargetGroups(in)
	}
}

func (d *ELBV2Double) DescribeTargetHealth(i0 *elbv2.DescribeTargetHealthInput) (r0 *elbv2.DescribeTargetHealthOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTargetHealth", i0)
	r0, _ = returns[0].(*elbv2.DescribeTargetHealthOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) DescribeTargetHealthRequest(i0 *elbv2.DescribeTargetHealthInput) (r0 *request.Request, r1 *elbv2.DescribeTargetHealthOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTargetHealthRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elbv2.DescribeTargetHealthOutput)
	return
}

func (d *ELBV2Double) DescribeTargetHealthWithContext(i0 context.Context, i1 *elbv2.DescribeTargetHealthInput, i2 ...request.Option) (r0 *elbv2.DescribeTargetHealthOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTargetHealthWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elbv2.DescribeTargetHealthOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) fakeDescribeTargetHealthWithContext(ctx context.Context, in *elbv2.DescribeTargetHealthInput, _ ...request.Option) (*elbv2.DescribeTargetHealthOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTargetHealth cancelled", ctx.Err())
	default:
		return d.DescribeTargetHealth(in)
	}
}

func (d *ELBV2Double) ModifyListener(i0 *elbv2.ModifyListenerInput) (r0 *elbv2.ModifyListenerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyListener", i0)
	r0, _ = returns[0].(*elbv2.ModifyListenerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) ModifyListenerRequest(i0 *elbv2.ModifyListenerInput) (r0 *request.Request, r1 *elbv2.ModifyListenerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyListenerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elbv2.ModifyListenerOutput)
	return
}

func (d *ELBV2Double) ModifyListenerWithContext(i0 context.Context, i1 *elbv2.ModifyListenerInput, i2 ...request.Option) (r0 *elbv2.ModifyListenerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyListenerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elbv2.ModifyListenerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) fakeModifyListenerWithContext(ctx context.Context, in *elbv2.ModifyListenerInput, _ ...request.Option) (*elbv2.ModifyListenerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyListener cancelled", ctx.Err())
	default:
		return d.ModifyListener(in)
	}
}

func (d *ELBV2Double) ModifyLoadBalancerAttributes(i0 *elbv2.ModifyLoadBalancerAttributesInput) (r0 *elbv2.ModifyLoadBalancerAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyLoadBalancerAttributes", i0)
	r0, _ = returns[0].(*elbv2.ModifyLoadBalancerAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) ModifyLoadBalancerAttributesRequest(i0 *elbv2.ModifyLoadBalancerAttributesInput) (r0 *request.Request, r1 *elbv2.ModifyLoadBalancerAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyLoadBalancerAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elbv2.ModifyLoadBalancerAttributesOutput)
	return
}

func (d *ELBV2Double) ModifyLoadBalancerAttributesWithContext(i0 context.Context, i1 *elbv2.ModifyLoadBalancerAttributesInput, i2 ...request.Option) (r0 *elbv2.ModifyLoadBalancerAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyLoadBalancerAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elbv2.ModifyLoadBalancerAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) fakeModifyLoadBalancerAttributesWithContext(ctx context.Context, in *elbv2.ModifyLoadBalancerAttributesInput, _ ...request.Option) (*elbv2.ModifyLoadBalancerAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyLoadBalancerAttributes cancelled", ctx.Err())
	default:
		return d.ModifyLoadBalancerAttributes(in)
	}
}

func (d *ELBV2Double) ModifyRule(i0 *elbv2.ModifyRuleInput) (r0 *elbv2.ModifyRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyRule", i0)
	r0, _ = returns[0].(*elbv2.ModifyRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) ModifyRuleRequest(i0 *elbv2.ModifyRuleInput) (r0 *request.Request, r1 *elbv2.ModifyRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elbv2.ModifyRuleOutput)
	return
}

func (d *ELBV2Double) ModifyRuleWithContext(i0 context.Context, i1 *elbv2.ModifyRuleInput, i2 ...request.Option) (r0 *elbv2.ModifyRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elbv2.ModifyRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) fakeModifyRuleWithContext(ctx context.Context, in *elbv2.ModifyRuleInput, _ ...request.Option) (*elbv2.ModifyRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyRule cancelled", ctx.Err())
	default:
		return d.ModifyRule(in)
	}
}

func (d *ELBV2Double) ModifyTargetGroup(i0 *elbv2.ModifyTargetGroupInput) (r0 *elbv2.ModifyTargetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyTargetGroup", i0)
	r0, _ = returns[0].(*elbv2.ModifyTargetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) ModifyTargetGroupAttributes(i0 *elbv2.ModifyTargetGroupAttributesInput) (r0 *elbv2.ModifyTargetGroupAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyTargetGroupAttributes", i0)
	r0, _ = returns[0].(*elbv2.ModifyTargetGroupAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) ModifyTargetGroupAttributesRequest(i0 *elbv2.ModifyTargetGroupAttributesInput) (r0 *request.Request, r1 *elbv2.ModifyTargetGroupAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyTargetGroupAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elbv2.ModifyTargetGroupAttributesOutput)
	return
}

func (d *ELBV2Double) ModifyTargetGroupAttributesWithContext(i0 context.Context, i1 *elbv2.ModifyTargetGroupAttributesInput, i2 ...request.Option) (r0 *elbv2.ModifyTargetGroupAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyTargetGroupAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elbv2.ModifyTargetGroupAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) fakeModifyTargetGroupAttributesWithContext(ctx context.Context, in *elbv2.ModifyTargetGroupAttributesInput, _ ...request.Option) (*elbv2.ModifyTargetGroupAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyTargetGroupAttributes cancelled", ctx.Err())
	default:
		return d.ModifyTargetGroupAttributes(in)
	}
}

func (d *ELBV2Double) ModifyTargetGroupRequest(i0 *elbv2.ModifyTargetGroupInput) (r0 *request.Request, r1 *elbv2.ModifyTargetGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyTargetGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elbv2.ModifyTargetGroupOutput)
	return
}

func (d *ELBV2Double) ModifyTargetGroupWithContext(i0 context.Context, i1 *elbv2.ModifyTargetGroupInput, i2 ...request.Option) (r0 *elbv2.ModifyTargetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyTargetGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elbv2.ModifyTargetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) fakeModifyTargetGroupWithContext(ctx context.Context, in *elbv2.ModifyTargetGroupInput, _ ...request.Option) (*elbv2.ModifyTargetGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyTargetGroup cancelled", ctx.Err())
	default:
		return d.ModifyTargetGroup(in)
	}
}

func (d *ELBV2Double) RegisterTargets(i0 *elbv2.RegisterTargetsInput) (r0 *elbv2.RegisterTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterTargets", i0)
	r0, _ = returns[0].(*elbv2.RegisterTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) RegisterTargetsRequest(i0 *elbv2.RegisterTargetsInput) (r0 *request.Request, r1 *elbv2.RegisterTargetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterTargetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elbv2.RegisterTargetsOutput)
	return
}

func (d *ELBV2Double) RegisterTargetsWithContext(i0 context.Context, i1 *elbv2.RegisterTargetsInput, i2 ...request.Option) (r0 *elbv2.RegisterTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterTargetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elbv2.RegisterTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) fakeRegisterTargetsWithContext(ctx context.Context, in *elbv2.RegisterTargetsInput, _ ...request.Option) (*elbv2.RegisterTargetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterTargets cancelled", ctx.Err())
	default:
		return d.RegisterTargets(in)
	}
}

func (d *ELBV2Double) RemoveListenerCertificates(i0 *elbv2.RemoveListenerCertificatesInput) (r0 *elbv2.RemoveListenerCertificatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveListenerCertificates", i0)
	r0, _ = returns[0].(*elbv2.RemoveListenerCertificatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) RemoveListenerCertificatesRequest(i0 *elbv2.RemoveListenerCertificatesInput) (r0 *request.Request, r1 *elbv2.RemoveListenerCertificatesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveListenerCertificatesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elbv2.RemoveListenerCertificatesOutput)
	return
}

func (d *ELBV2Double) RemoveListenerCertificatesWithContext(i0 context.Context, i1 *elbv2.RemoveListenerCertificatesInput, i2 ...request.Option) (r0 *elbv2.RemoveListenerCertificatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveListenerCertificatesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elbv2.RemoveListenerCertificatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) fakeRemoveListenerCertificatesWithContext(ctx context.Context, in *elbv2.RemoveListenerCertificatesInput, _ ...request.Option) (*elbv2.RemoveListenerCertificatesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveListenerCertificates cancelled", ctx.Err())
	default:
		return d.RemoveListenerCertificates(in)
	}
}

func (d *ELBV2Double) RemoveTags(i0 *elbv2.RemoveTagsInput) (r0 *elbv2.RemoveTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTags", i0)
	r0, _ = returns[0].(*elbv2.RemoveTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) RemoveTagsRequest(i0 *elbv2.RemoveTagsInput) (r0 *request.Request, r1 *elbv2.RemoveTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elbv2.RemoveTagsOutput)
	return
}

func (d *ELBV2Double) RemoveTagsWithContext(i0 context.Context, i1 *elbv2.RemoveTagsInput, i2 ...request.Option) (r0 *elbv2.RemoveTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elbv2.RemoveTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) fakeRemoveTagsWithContext(ctx context.Context, in *elbv2.RemoveTagsInput, _ ...request.Option) (*elbv2.RemoveTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveTags cancelled", ctx.Err())
	default:
		return d.RemoveTags(in)
	}
}

func (d *ELBV2Double) SetIpAddressType(i0 *elbv2.SetIpAddressTypeInput) (r0 *elbv2.SetIpAddressTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetIpAddressType", i0)
	r0, _ = returns[0].(*elbv2.SetIpAddressTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) SetIpAddressTypeRequest(i0 *elbv2.SetIpAddressTypeInput) (r0 *request.Request, r1 *elbv2.SetIpAddressTypeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetIpAddressTypeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elbv2.SetIpAddressTypeOutput)
	return
}

func (d *ELBV2Double) SetIpAddressTypeWithContext(i0 context.Context, i1 *elbv2.SetIpAddressTypeInput, i2 ...request.Option) (r0 *elbv2.SetIpAddressTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetIpAddressTypeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elbv2.SetIpAddressTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) fakeSetIpAddressTypeWithContext(ctx context.Context, in *elbv2.SetIpAddressTypeInput, _ ...request.Option) (*elbv2.SetIpAddressTypeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetIpAddressType cancelled", ctx.Err())
	default:
		return d.SetIpAddressType(in)
	}
}

func (d *ELBV2Double) SetRulePriorities(i0 *elbv2.SetRulePrioritiesInput) (r0 *elbv2.SetRulePrioritiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetRulePriorities", i0)
	r0, _ = returns[0].(*elbv2.SetRulePrioritiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) SetRulePrioritiesRequest(i0 *elbv2.SetRulePrioritiesInput) (r0 *request.Request, r1 *elbv2.SetRulePrioritiesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetRulePrioritiesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elbv2.SetRulePrioritiesOutput)
	return
}

func (d *ELBV2Double) SetRulePrioritiesWithContext(i0 context.Context, i1 *elbv2.SetRulePrioritiesInput, i2 ...request.Option) (r0 *elbv2.SetRulePrioritiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetRulePrioritiesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elbv2.SetRulePrioritiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) fakeSetRulePrioritiesWithContext(ctx context.Context, in *elbv2.SetRulePrioritiesInput, _ ...request.Option) (*elbv2.SetRulePrioritiesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetRulePriorities cancelled", ctx.Err())
	default:
		return d.SetRulePriorities(in)
	}
}

func (d *ELBV2Double) SetSecurityGroups(i0 *elbv2.SetSecurityGroupsInput) (r0 *elbv2.SetSecurityGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetSecurityGroups", i0)
	r0, _ = returns[0].(*elbv2.SetSecurityGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) SetSecurityGroupsRequest(i0 *elbv2.SetSecurityGroupsInput) (r0 *request.Request, r1 *elbv2.SetSecurityGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetSecurityGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elbv2.SetSecurityGroupsOutput)
	return
}

func (d *ELBV2Double) SetSecurityGroupsWithContext(i0 context.Context, i1 *elbv2.SetSecurityGroupsInput, i2 ...request.Option) (r0 *elbv2.SetSecurityGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetSecurityGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elbv2.SetSecurityGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) fakeSetSecurityGroupsWithContext(ctx context.Context, in *elbv2.SetSecurityGroupsInput, _ ...request.Option) (*elbv2.SetSecurityGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetSecurityGroups cancelled", ctx.Err())
	default:
		return d.SetSecurityGroups(in)
	}
}

func (d *ELBV2Double) SetSubnets(i0 *elbv2.SetSubnetsInput) (r0 *elbv2.SetSubnetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetSubnets", i0)
	r0, _ = returns[0].(*elbv2.SetSubnetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) SetSubnetsRequest(i0 *elbv2.SetSubnetsInput) (r0 *request.Request, r1 *elbv2.SetSubnetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetSubnetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elbv2.SetSubnetsOutput)
	return
}

func (d *ELBV2Double) SetSubnetsWithContext(i0 context.Context, i1 *elbv2.SetSubnetsInput, i2 ...request.Option) (r0 *elbv2.SetSubnetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetSubnetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elbv2.SetSubnetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ELBV2Double) fakeSetSubnetsWithContext(ctx context.Context, in *elbv2.SetSubnetsInput, _ ...request.Option) (*elbv2.SetSubnetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetSubnets cancelled", ctx.Err())
	default:
		return d.SetSubnets(in)
	}
}

func (d *ELBV2Double) WaitUntilLoadBalancerAvailable(i0 *elbv2.DescribeLoadBalancersInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilLoadBalancerAvailable", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *ELBV2Double) fakeWaitUntilLoadBalancerAvailable(in *elbv2.DescribeLoadBalancersInput) error {
	return d.WaitUntil("LoadBalancerAvailable", waiters, in)
}

func (d *ELBV2Double) WaitUntilLoadBalancerAvailableWithContext(i0 context.Context, i1 *elbv2.DescribeLoadBalancersInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilLoadBalancerAvailableWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *ELBV2Double) fakeWaitUntilLoadBalancerAvailableWithContext(ctx context.Context, in *elbv2.DescribeLoadBalancersInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("LoadBalancerAvailable", waiters, ctx, in, waitOption...)
}

func (d *ELBV2Double) WaitUntilLoadBalancerExists(i0 *elbv2.DescribeLoadBalancersInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilLoadBalancerExists", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *ELBV2Double) fakeWaitUntilLoadBalancerExists(in *elbv2.DescribeLoadBalancersInput) error {
	return d.WaitUntil("LoadBalancerExists", waiters, in)
}

func (d *ELBV2Double) WaitUntilLoadBalancerExistsWithContext(i0 context.Context, i1 *elbv2.DescribeLoadBalancersInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilLoadBalancerExistsWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *ELBV2Double) fakeWaitUntilLoadBalancerExistsWithContext(ctx context.Context, in *elbv2.DescribeLoadBalancersInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("LoadBalancerExists", waiters, ctx, in, waitOption...)
}

func (d *ELBV2Double) WaitUntilLoadBalancersDeleted(i0 *elbv2.DescribeLoadBalancersInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilLoadBalancersDeleted", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *ELBV2Double) fakeWaitUntilLoadBalancersDeleted(in *elbv2.DescribeLoadBalancersInput) error {
	return d.WaitUntil("LoadBalancersDeleted", waiters, in)
}

func (d *ELBV2Double) WaitUntilLoadBalancersDeletedWithContext(i0 context.Context, i1 *elbv2.DescribeLoadBalancersInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilLoadBalancersDeletedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *ELBV2Double) fakeWaitUntilLoadBalancersDeletedWithContext(ctx context.Context, in *elbv2.DescribeLoadBalancersInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("LoadBalancersDeleted", waiters, ctx, in, waitOption...)
}

func (d *ELBV2Double) WaitUntilTargetDeregistered(i0 *elbv2.DescribeTargetHealthInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilTargetDeregistered", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *ELBV2Double) fakeWaitUntilTargetDeregistered(in *elbv2.DescribeTargetHealthInput) error {
	return d.WaitUntil("TargetDeregistered", waiters, in)
}

func (d *ELBV2Double) WaitUntilTargetDeregisteredWithContext(i0 context.Context, i1 *elbv2.DescribeTargetHealthInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilTargetDeregisteredWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *ELBV2Double) fakeWaitUntilTargetDeregisteredWithContext(ctx context.Context, in *elbv2.DescribeTargetHealthInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("TargetDeregistered", waiters, ctx, in, waitOption...)
}

func (d *ELBV2Double) WaitUntilTargetInService(i0 *elbv2.DescribeTargetHealthInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilTargetInService", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *ELBV2Double) fakeWaitUntilTargetInService(in *elbv2.DescribeTargetHealthInput) error {
	return d.WaitUntil("TargetInService", waiters, in)
}

func (d *ELBV2Double) WaitUntilTargetInServiceWithContext(i0 context.Context, i1 *elbv2.DescribeTargetHealthInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilTargetInServiceWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *ELBV2Double) fakeWaitUntilTargetInServiceWithContext(ctx context.Context, in *elbv2.DescribeTargetHealthInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("TargetInService", waiters, ctx, in, waitOption...)
}
