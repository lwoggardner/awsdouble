// Code generated by go awsdoublegen; DO NOT EDIT.
// This file was generated at 2020-01-29T21:22:05+11:00
package s3double

import (
	"time"

	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/lwoggardner/awsdouble"
)

var waiters = map[string]*awsdouble.Waiter{

	"BucketExists": &awsdouble.Waiter{
		OperationName: "HeadBucket",
		Waiter: request.Waiter{
			Name:        "WaitUntilBucketExists",
			MaxAttempts: 20,
			Delay:       request.ConstantWaiterDelay(5 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:    request.SuccessWaiterState,
					Matcher:  request.StatusWaiterMatch,
					Expected: 200,
				},
				{
					State:    request.SuccessWaiterState,
					Matcher:  request.StatusWaiterMatch,
					Expected: 301,
				},
				{
					State:    request.SuccessWaiterState,
					Matcher:  request.StatusWaiterMatch,
					Expected: 403,
				},
				{
					State:    request.RetryWaiterState,
					Matcher:  request.StatusWaiterMatch,
					Expected: 404,
				},
			},
		},
	},

	"BucketNotExists": &awsdouble.Waiter{
		OperationName: "HeadBucket",
		Waiter: request.Waiter{
			Name:        "WaitUntilBucketNotExists",
			MaxAttempts: 20,
			Delay:       request.ConstantWaiterDelay(5 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:    request.SuccessWaiterState,
					Matcher:  request.StatusWaiterMatch,
					Expected: 404,
				},
			},
		},
	},

	"ObjectExists": &awsdouble.Waiter{
		OperationName: "HeadObject",
		Waiter: request.Waiter{
			Name:        "WaitUntilObjectExists",
			MaxAttempts: 20,
			Delay:       request.ConstantWaiterDelay(5 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:    request.SuccessWaiterState,
					Matcher:  request.StatusWaiterMatch,
					Expected: 200,
				},
				{
					State:    request.RetryWaiterState,
					Matcher:  request.StatusWaiterMatch,
					Expected: 404,
				},
			},
		},
	},

	"ObjectNotExists": &awsdouble.Waiter{
		OperationName: "HeadObject",
		Waiter: request.Waiter{
			Name:        "WaitUntilObjectNotExists",
			MaxAttempts: 20,
			Delay:       request.ConstantWaiterDelay(5 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:    request.SuccessWaiterState,
					Matcher:  request.StatusWaiterMatch,
					Expected: 404,
				},
			},
		},
	},
}
