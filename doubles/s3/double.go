// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:14:46+11:00

// Package s3double provides a TestDouble implementation of s3iface.S3API
package s3double

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/s3"
	"github.com/aws/aws-sdk-go/service/s3/s3iface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// S3Double is TestDouble for s3iface.S3API
type S3Double struct {
	s3iface.S3API
	*awsdouble.AWSTestDouble
}

// Constructor for S3Double
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *S3Double {
	result := &S3Double{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*s3iface.S3API)(nil), configurators...)
	return result
}

func (d *S3Double) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *S3Double) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AbortMultipartUploadWithContext":
		return m.Fake(d.fakeAbortMultipartUploadWithContext)

	case "CompleteMultipartUploadWithContext":
		return m.Fake(d.fakeCompleteMultipartUploadWithContext)

	case "CopyObjectWithContext":
		return m.Fake(d.fakeCopyObjectWithContext)

	case "CreateBucketWithContext":
		return m.Fake(d.fakeCreateBucketWithContext)

	case "CreateMultipartUploadWithContext":
		return m.Fake(d.fakeCreateMultipartUploadWithContext)

	case "DeleteBucketAnalyticsConfigurationWithContext":
		return m.Fake(d.fakeDeleteBucketAnalyticsConfigurationWithContext)

	case "DeleteBucketCorsWithContext":
		return m.Fake(d.fakeDeleteBucketCorsWithContext)

	case "DeleteBucketEncryptionWithContext":
		return m.Fake(d.fakeDeleteBucketEncryptionWithContext)

	case "DeleteBucketInventoryConfigurationWithContext":
		return m.Fake(d.fakeDeleteBucketInventoryConfigurationWithContext)

	case "DeleteBucketLifecycleWithContext":
		return m.Fake(d.fakeDeleteBucketLifecycleWithContext)

	case "DeleteBucketMetricsConfigurationWithContext":
		return m.Fake(d.fakeDeleteBucketMetricsConfigurationWithContext)

	case "DeleteBucketPolicyWithContext":
		return m.Fake(d.fakeDeleteBucketPolicyWithContext)

	case "DeleteBucketReplicationWithContext":
		return m.Fake(d.fakeDeleteBucketReplicationWithContext)

	case "DeleteBucketTaggingWithContext":
		return m.Fake(d.fakeDeleteBucketTaggingWithContext)

	case "DeleteBucketWebsiteWithContext":
		return m.Fake(d.fakeDeleteBucketWebsiteWithContext)

	case "DeleteBucketWithContext":
		return m.Fake(d.fakeDeleteBucketWithContext)

	case "DeleteObjectTaggingWithContext":
		return m.Fake(d.fakeDeleteObjectTaggingWithContext)

	case "DeleteObjectWithContext":
		return m.Fake(d.fakeDeleteObjectWithContext)

	case "DeleteObjectsWithContext":
		return m.Fake(d.fakeDeleteObjectsWithContext)

	case "DeletePublicAccessBlockWithContext":
		return m.Fake(d.fakeDeletePublicAccessBlockWithContext)

	case "GetBucketAccelerateConfigurationWithContext":
		return m.Fake(d.fakeGetBucketAccelerateConfigurationWithContext)

	case "GetBucketAclWithContext":
		return m.Fake(d.fakeGetBucketAclWithContext)

	case "GetBucketAnalyticsConfigurationWithContext":
		return m.Fake(d.fakeGetBucketAnalyticsConfigurationWithContext)

	case "GetBucketCorsWithContext":
		return m.Fake(d.fakeGetBucketCorsWithContext)

	case "GetBucketEncryptionWithContext":
		return m.Fake(d.fakeGetBucketEncryptionWithContext)

	case "GetBucketInventoryConfigurationWithContext":
		return m.Fake(d.fakeGetBucketInventoryConfigurationWithContext)

	case "GetBucketLifecycleConfigurationWithContext":
		return m.Fake(d.fakeGetBucketLifecycleConfigurationWithContext)

	case "GetBucketLifecycleWithContext":
		return m.Fake(d.fakeGetBucketLifecycleWithContext)

	case "GetBucketLocationWithContext":
		return m.Fake(d.fakeGetBucketLocationWithContext)

	case "GetBucketLoggingWithContext":
		return m.Fake(d.fakeGetBucketLoggingWithContext)

	case "GetBucketMetricsConfigurationWithContext":
		return m.Fake(d.fakeGetBucketMetricsConfigurationWithContext)

	case "GetBucketNotificationConfigurationWithContext":
		return m.Fake(d.fakeGetBucketNotificationConfigurationWithContext)

	case "GetBucketNotificationWithContext":
		return m.Fake(d.fakeGetBucketNotificationWithContext)

	case "GetBucketPolicyStatusWithContext":
		return m.Fake(d.fakeGetBucketPolicyStatusWithContext)

	case "GetBucketPolicyWithContext":
		return m.Fake(d.fakeGetBucketPolicyWithContext)

	case "GetBucketReplicationWithContext":
		return m.Fake(d.fakeGetBucketReplicationWithContext)

	case "GetBucketRequestPaymentWithContext":
		return m.Fake(d.fakeGetBucketRequestPaymentWithContext)

	case "GetBucketTaggingWithContext":
		return m.Fake(d.fakeGetBucketTaggingWithContext)

	case "GetBucketVersioningWithContext":
		return m.Fake(d.fakeGetBucketVersioningWithContext)

	case "GetBucketWebsiteWithContext":
		return m.Fake(d.fakeGetBucketWebsiteWithContext)

	case "GetObjectAclWithContext":
		return m.Fake(d.fakeGetObjectAclWithContext)

	case "GetObjectLegalHoldWithContext":
		return m.Fake(d.fakeGetObjectLegalHoldWithContext)

	case "GetObjectLockConfigurationWithContext":
		return m.Fake(d.fakeGetObjectLockConfigurationWithContext)

	case "GetObjectRetentionWithContext":
		return m.Fake(d.fakeGetObjectRetentionWithContext)

	case "GetObjectTaggingWithContext":
		return m.Fake(d.fakeGetObjectTaggingWithContext)

	case "GetObjectTorrentWithContext":
		return m.Fake(d.fakeGetObjectTorrentWithContext)

	case "GetObjectWithContext":
		return m.Fake(d.fakeGetObjectWithContext)

	case "GetPublicAccessBlockWithContext":
		return m.Fake(d.fakeGetPublicAccessBlockWithContext)

	case "HeadBucketWithContext":
		return m.Fake(d.fakeHeadBucketWithContext)

	case "HeadObjectWithContext":
		return m.Fake(d.fakeHeadObjectWithContext)

	case "ListBucketAnalyticsConfigurationsWithContext":
		return m.Fake(d.fakeListBucketAnalyticsConfigurationsWithContext)

	case "ListBucketInventoryConfigurationsWithContext":
		return m.Fake(d.fakeListBucketInventoryConfigurationsWithContext)

	case "ListBucketMetricsConfigurationsWithContext":
		return m.Fake(d.fakeListBucketMetricsConfigurationsWithContext)

	case "ListBucketsWithContext":
		return m.Fake(d.fakeListBucketsWithContext)

	case "ListMultipartUploadsPages":
		return m.Fake(d.fakeListMultipartUploadsPages)

	case "ListMultipartUploadsPagesWithContext":
		return m.Fake(d.fakeListMultipartUploadsPagesWithContext)

	case "ListMultipartUploadsWithContext":
		return m.Fake(d.fakeListMultipartUploadsWithContext)

	case "ListObjectVersionsPages":
		return m.Fake(d.fakeListObjectVersionsPages)

	case "ListObjectVersionsPagesWithContext":
		return m.Fake(d.fakeListObjectVersionsPagesWithContext)

	case "ListObjectVersionsWithContext":
		return m.Fake(d.fakeListObjectVersionsWithContext)

	case "ListObjectsPages":
		return m.Fake(d.fakeListObjectsPages)

	case "ListObjectsPagesWithContext":
		return m.Fake(d.fakeListObjectsPagesWithContext)

	case "ListObjectsV2Pages":
		return m.Fake(d.fakeListObjectsV2Pages)

	case "ListObjectsV2PagesWithContext":
		return m.Fake(d.fakeListObjectsV2PagesWithContext)

	case "ListObjectsV2WithContext":
		return m.Fake(d.fakeListObjectsV2WithContext)

	case "ListObjectsWithContext":
		return m.Fake(d.fakeListObjectsWithContext)

	case "ListPartsPages":
		return m.Fake(d.fakeListPartsPages)

	case "ListPartsPagesWithContext":
		return m.Fake(d.fakeListPartsPagesWithContext)

	case "ListPartsWithContext":
		return m.Fake(d.fakeListPartsWithContext)

	case "PutBucketAccelerateConfigurationWithContext":
		return m.Fake(d.fakePutBucketAccelerateConfigurationWithContext)

	case "PutBucketAclWithContext":
		return m.Fake(d.fakePutBucketAclWithContext)

	case "PutBucketAnalyticsConfigurationWithContext":
		return m.Fake(d.fakePutBucketAnalyticsConfigurationWithContext)

	case "PutBucketCorsWithContext":
		return m.Fake(d.fakePutBucketCorsWithContext)

	case "PutBucketEncryptionWithContext":
		return m.Fake(d.fakePutBucketEncryptionWithContext)

	case "PutBucketInventoryConfigurationWithContext":
		return m.Fake(d.fakePutBucketInventoryConfigurationWithContext)

	case "PutBucketLifecycleConfigurationWithContext":
		return m.Fake(d.fakePutBucketLifecycleConfigurationWithContext)

	case "PutBucketLifecycleWithContext":
		return m.Fake(d.fakePutBucketLifecycleWithContext)

	case "PutBucketLoggingWithContext":
		return m.Fake(d.fakePutBucketLoggingWithContext)

	case "PutBucketMetricsConfigurationWithContext":
		return m.Fake(d.fakePutBucketMetricsConfigurationWithContext)

	case "PutBucketNotificationConfigurationWithContext":
		return m.Fake(d.fakePutBucketNotificationConfigurationWithContext)

	case "PutBucketNotificationWithContext":
		return m.Fake(d.fakePutBucketNotificationWithContext)

	case "PutBucketPolicyWithContext":
		return m.Fake(d.fakePutBucketPolicyWithContext)

	case "PutBucketReplicationWithContext":
		return m.Fake(d.fakePutBucketReplicationWithContext)

	case "PutBucketRequestPaymentWithContext":
		return m.Fake(d.fakePutBucketRequestPaymentWithContext)

	case "PutBucketTaggingWithContext":
		return m.Fake(d.fakePutBucketTaggingWithContext)

	case "PutBucketVersioningWithContext":
		return m.Fake(d.fakePutBucketVersioningWithContext)

	case "PutBucketWebsiteWithContext":
		return m.Fake(d.fakePutBucketWebsiteWithContext)

	case "PutObjectAclWithContext":
		return m.Fake(d.fakePutObjectAclWithContext)

	case "PutObjectLegalHoldWithContext":
		return m.Fake(d.fakePutObjectLegalHoldWithContext)

	case "PutObjectLockConfigurationWithContext":
		return m.Fake(d.fakePutObjectLockConfigurationWithContext)

	case "PutObjectRetentionWithContext":
		return m.Fake(d.fakePutObjectRetentionWithContext)

	case "PutObjectTaggingWithContext":
		return m.Fake(d.fakePutObjectTaggingWithContext)

	case "PutObjectWithContext":
		return m.Fake(d.fakePutObjectWithContext)

	case "PutPublicAccessBlockWithContext":
		return m.Fake(d.fakePutPublicAccessBlockWithContext)

	case "RestoreObjectWithContext":
		return m.Fake(d.fakeRestoreObjectWithContext)

	case "SelectObjectContentWithContext":
		return m.Fake(d.fakeSelectObjectContentWithContext)

	case "UploadPartCopyWithContext":
		return m.Fake(d.fakeUploadPartCopyWithContext)

	case "UploadPartWithContext":
		return m.Fake(d.fakeUploadPartWithContext)

	case "WaitUntilBucketExists":
		return m.Fake(d.fakeWaitUntilBucketExists)

	case "WaitUntilBucketExistsWithContext":
		return m.Fake(d.fakeWaitUntilBucketExistsWithContext)

	case "WaitUntilBucketNotExists":
		return m.Fake(d.fakeWaitUntilBucketNotExists)

	case "WaitUntilBucketNotExistsWithContext":
		return m.Fake(d.fakeWaitUntilBucketNotExistsWithContext)

	case "WaitUntilObjectExists":
		return m.Fake(d.fakeWaitUntilObjectExists)

	case "WaitUntilObjectExistsWithContext":
		return m.Fake(d.fakeWaitUntilObjectExistsWithContext)

	case "WaitUntilObjectNotExists":
		return m.Fake(d.fakeWaitUntilObjectNotExists)

	case "WaitUntilObjectNotExistsWithContext":
		return m.Fake(d.fakeWaitUntilObjectNotExistsWithContext)

	default:
		return nil
	}
}

func (d *S3Double) AbortMultipartUpload(i0 *s3.AbortMultipartUploadInput) (r0 *s3.AbortMultipartUploadOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AbortMultipartUpload", i0)
	r0, _ = returns[0].(*s3.AbortMultipartUploadOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) AbortMultipartUploadRequest(i0 *s3.AbortMultipartUploadInput) (r0 *request.Request, r1 *s3.AbortMultipartUploadOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AbortMultipartUploadRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.AbortMultipartUploadOutput)
	return
}

func (d *S3Double) AbortMultipartUploadWithContext(i0 context.Context, i1 *s3.AbortMultipartUploadInput, i2 ...request.Option) (r0 *s3.AbortMultipartUploadOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AbortMultipartUploadWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.AbortMultipartUploadOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeAbortMultipartUploadWithContext(ctx context.Context, in *s3.AbortMultipartUploadInput, _ ...request.Option) (*s3.AbortMultipartUploadOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AbortMultipartUpload cancelled", ctx.Err())
	default:
		return d.AbortMultipartUpload(in)
	}
}

func (d *S3Double) CompleteMultipartUpload(i0 *s3.CompleteMultipartUploadInput) (r0 *s3.CompleteMultipartUploadOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CompleteMultipartUpload", i0)
	r0, _ = returns[0].(*s3.CompleteMultipartUploadOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) CompleteMultipartUploadRequest(i0 *s3.CompleteMultipartUploadInput) (r0 *request.Request, r1 *s3.CompleteMultipartUploadOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CompleteMultipartUploadRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.CompleteMultipartUploadOutput)
	return
}

func (d *S3Double) CompleteMultipartUploadWithContext(i0 context.Context, i1 *s3.CompleteMultipartUploadInput, i2 ...request.Option) (r0 *s3.CompleteMultipartUploadOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CompleteMultipartUploadWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.CompleteMultipartUploadOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeCompleteMultipartUploadWithContext(ctx context.Context, in *s3.CompleteMultipartUploadInput, _ ...request.Option) (*s3.CompleteMultipartUploadOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CompleteMultipartUpload cancelled", ctx.Err())
	default:
		return d.CompleteMultipartUpload(in)
	}
}

func (d *S3Double) CopyObject(i0 *s3.CopyObjectInput) (r0 *s3.CopyObjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyObject", i0)
	r0, _ = returns[0].(*s3.CopyObjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) CopyObjectRequest(i0 *s3.CopyObjectInput) (r0 *request.Request, r1 *s3.CopyObjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyObjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.CopyObjectOutput)
	return
}

func (d *S3Double) CopyObjectWithContext(i0 context.Context, i1 *s3.CopyObjectInput, i2 ...request.Option) (r0 *s3.CopyObjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyObjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.CopyObjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeCopyObjectWithContext(ctx context.Context, in *s3.CopyObjectInput, _ ...request.Option) (*s3.CopyObjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CopyObject cancelled", ctx.Err())
	default:
		return d.CopyObject(in)
	}
}

func (d *S3Double) CreateBucket(i0 *s3.CreateBucketInput) (r0 *s3.CreateBucketOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBucket", i0)
	r0, _ = returns[0].(*s3.CreateBucketOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) CreateBucketRequest(i0 *s3.CreateBucketInput) (r0 *request.Request, r1 *s3.CreateBucketOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBucketRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.CreateBucketOutput)
	return
}

func (d *S3Double) CreateBucketWithContext(i0 context.Context, i1 *s3.CreateBucketInput, i2 ...request.Option) (r0 *s3.CreateBucketOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBucketWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.CreateBucketOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeCreateBucketWithContext(ctx context.Context, in *s3.CreateBucketInput, _ ...request.Option) (*s3.CreateBucketOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateBucket cancelled", ctx.Err())
	default:
		return d.CreateBucket(in)
	}
}

func (d *S3Double) CreateMultipartUpload(i0 *s3.CreateMultipartUploadInput) (r0 *s3.CreateMultipartUploadOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMultipartUpload", i0)
	r0, _ = returns[0].(*s3.CreateMultipartUploadOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) CreateMultipartUploadRequest(i0 *s3.CreateMultipartUploadInput) (r0 *request.Request, r1 *s3.CreateMultipartUploadOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMultipartUploadRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.CreateMultipartUploadOutput)
	return
}

func (d *S3Double) CreateMultipartUploadWithContext(i0 context.Context, i1 *s3.CreateMultipartUploadInput, i2 ...request.Option) (r0 *s3.CreateMultipartUploadOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMultipartUploadWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.CreateMultipartUploadOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeCreateMultipartUploadWithContext(ctx context.Context, in *s3.CreateMultipartUploadInput, _ ...request.Option) (*s3.CreateMultipartUploadOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateMultipartUpload cancelled", ctx.Err())
	default:
		return d.CreateMultipartUpload(in)
	}
}

func (d *S3Double) DeleteBucket(i0 *s3.DeleteBucketInput) (r0 *s3.DeleteBucketOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBucket", i0)
	r0, _ = returns[0].(*s3.DeleteBucketOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) DeleteBucketAnalyticsConfiguration(i0 *s3.DeleteBucketAnalyticsConfigurationInput) (r0 *s3.DeleteBucketAnalyticsConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBucketAnalyticsConfiguration", i0)
	r0, _ = returns[0].(*s3.DeleteBucketAnalyticsConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) DeleteBucketAnalyticsConfigurationRequest(i0 *s3.DeleteBucketAnalyticsConfigurationInput) (r0 *request.Request, r1 *s3.DeleteBucketAnalyticsConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBucketAnalyticsConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.DeleteBucketAnalyticsConfigurationOutput)
	return
}

func (d *S3Double) DeleteBucketAnalyticsConfigurationWithContext(i0 context.Context, i1 *s3.DeleteBucketAnalyticsConfigurationInput, i2 ...request.Option) (r0 *s3.DeleteBucketAnalyticsConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBucketAnalyticsConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.DeleteBucketAnalyticsConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeDeleteBucketAnalyticsConfigurationWithContext(ctx context.Context, in *s3.DeleteBucketAnalyticsConfigurationInput, _ ...request.Option) (*s3.DeleteBucketAnalyticsConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteBucketAnalyticsConfiguration cancelled", ctx.Err())
	default:
		return d.DeleteBucketAnalyticsConfiguration(in)
	}
}

func (d *S3Double) DeleteBucketCors(i0 *s3.DeleteBucketCorsInput) (r0 *s3.DeleteBucketCorsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBucketCors", i0)
	r0, _ = returns[0].(*s3.DeleteBucketCorsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) DeleteBucketCorsRequest(i0 *s3.DeleteBucketCorsInput) (r0 *request.Request, r1 *s3.DeleteBucketCorsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBucketCorsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.DeleteBucketCorsOutput)
	return
}

func (d *S3Double) DeleteBucketCorsWithContext(i0 context.Context, i1 *s3.DeleteBucketCorsInput, i2 ...request.Option) (r0 *s3.DeleteBucketCorsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBucketCorsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.DeleteBucketCorsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeDeleteBucketCorsWithContext(ctx context.Context, in *s3.DeleteBucketCorsInput, _ ...request.Option) (*s3.DeleteBucketCorsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteBucketCors cancelled", ctx.Err())
	default:
		return d.DeleteBucketCors(in)
	}
}

func (d *S3Double) DeleteBucketEncryption(i0 *s3.DeleteBucketEncryptionInput) (r0 *s3.DeleteBucketEncryptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBucketEncryption", i0)
	r0, _ = returns[0].(*s3.DeleteBucketEncryptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) DeleteBucketEncryptionRequest(i0 *s3.DeleteBucketEncryptionInput) (r0 *request.Request, r1 *s3.DeleteBucketEncryptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBucketEncryptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.DeleteBucketEncryptionOutput)
	return
}

func (d *S3Double) DeleteBucketEncryptionWithContext(i0 context.Context, i1 *s3.DeleteBucketEncryptionInput, i2 ...request.Option) (r0 *s3.DeleteBucketEncryptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBucketEncryptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.DeleteBucketEncryptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeDeleteBucketEncryptionWithContext(ctx context.Context, in *s3.DeleteBucketEncryptionInput, _ ...request.Option) (*s3.DeleteBucketEncryptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteBucketEncryption cancelled", ctx.Err())
	default:
		return d.DeleteBucketEncryption(in)
	}
}

func (d *S3Double) DeleteBucketInventoryConfiguration(i0 *s3.DeleteBucketInventoryConfigurationInput) (r0 *s3.DeleteBucketInventoryConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBucketInventoryConfiguration", i0)
	r0, _ = returns[0].(*s3.DeleteBucketInventoryConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) DeleteBucketInventoryConfigurationRequest(i0 *s3.DeleteBucketInventoryConfigurationInput) (r0 *request.Request, r1 *s3.DeleteBucketInventoryConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBucketInventoryConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.DeleteBucketInventoryConfigurationOutput)
	return
}

func (d *S3Double) DeleteBucketInventoryConfigurationWithContext(i0 context.Context, i1 *s3.DeleteBucketInventoryConfigurationInput, i2 ...request.Option) (r0 *s3.DeleteBucketInventoryConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBucketInventoryConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.DeleteBucketInventoryConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeDeleteBucketInventoryConfigurationWithContext(ctx context.Context, in *s3.DeleteBucketInventoryConfigurationInput, _ ...request.Option) (*s3.DeleteBucketInventoryConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteBucketInventoryConfiguration cancelled", ctx.Err())
	default:
		return d.DeleteBucketInventoryConfiguration(in)
	}
}

func (d *S3Double) DeleteBucketLifecycle(i0 *s3.DeleteBucketLifecycleInput) (r0 *s3.DeleteBucketLifecycleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBucketLifecycle", i0)
	r0, _ = returns[0].(*s3.DeleteBucketLifecycleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) DeleteBucketLifecycleRequest(i0 *s3.DeleteBucketLifecycleInput) (r0 *request.Request, r1 *s3.DeleteBucketLifecycleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBucketLifecycleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.DeleteBucketLifecycleOutput)
	return
}

func (d *S3Double) DeleteBucketLifecycleWithContext(i0 context.Context, i1 *s3.DeleteBucketLifecycleInput, i2 ...request.Option) (r0 *s3.DeleteBucketLifecycleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBucketLifecycleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.DeleteBucketLifecycleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeDeleteBucketLifecycleWithContext(ctx context.Context, in *s3.DeleteBucketLifecycleInput, _ ...request.Option) (*s3.DeleteBucketLifecycleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteBucketLifecycle cancelled", ctx.Err())
	default:
		return d.DeleteBucketLifecycle(in)
	}
}

func (d *S3Double) DeleteBucketMetricsConfiguration(i0 *s3.DeleteBucketMetricsConfigurationInput) (r0 *s3.DeleteBucketMetricsConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBucketMetricsConfiguration", i0)
	r0, _ = returns[0].(*s3.DeleteBucketMetricsConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) DeleteBucketMetricsConfigurationRequest(i0 *s3.DeleteBucketMetricsConfigurationInput) (r0 *request.Request, r1 *s3.DeleteBucketMetricsConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBucketMetricsConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.DeleteBucketMetricsConfigurationOutput)
	return
}

func (d *S3Double) DeleteBucketMetricsConfigurationWithContext(i0 context.Context, i1 *s3.DeleteBucketMetricsConfigurationInput, i2 ...request.Option) (r0 *s3.DeleteBucketMetricsConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBucketMetricsConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.DeleteBucketMetricsConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeDeleteBucketMetricsConfigurationWithContext(ctx context.Context, in *s3.DeleteBucketMetricsConfigurationInput, _ ...request.Option) (*s3.DeleteBucketMetricsConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteBucketMetricsConfiguration cancelled", ctx.Err())
	default:
		return d.DeleteBucketMetricsConfiguration(in)
	}
}

func (d *S3Double) DeleteBucketPolicy(i0 *s3.DeleteBucketPolicyInput) (r0 *s3.DeleteBucketPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBucketPolicy", i0)
	r0, _ = returns[0].(*s3.DeleteBucketPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) DeleteBucketPolicyRequest(i0 *s3.DeleteBucketPolicyInput) (r0 *request.Request, r1 *s3.DeleteBucketPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBucketPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.DeleteBucketPolicyOutput)
	return
}

func (d *S3Double) DeleteBucketPolicyWithContext(i0 context.Context, i1 *s3.DeleteBucketPolicyInput, i2 ...request.Option) (r0 *s3.DeleteBucketPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBucketPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.DeleteBucketPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeDeleteBucketPolicyWithContext(ctx context.Context, in *s3.DeleteBucketPolicyInput, _ ...request.Option) (*s3.DeleteBucketPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteBucketPolicy cancelled", ctx.Err())
	default:
		return d.DeleteBucketPolicy(in)
	}
}

func (d *S3Double) DeleteBucketReplication(i0 *s3.DeleteBucketReplicationInput) (r0 *s3.DeleteBucketReplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBucketReplication", i0)
	r0, _ = returns[0].(*s3.DeleteBucketReplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) DeleteBucketReplicationRequest(i0 *s3.DeleteBucketReplicationInput) (r0 *request.Request, r1 *s3.DeleteBucketReplicationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBucketReplicationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.DeleteBucketReplicationOutput)
	return
}

func (d *S3Double) DeleteBucketReplicationWithContext(i0 context.Context, i1 *s3.DeleteBucketReplicationInput, i2 ...request.Option) (r0 *s3.DeleteBucketReplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBucketReplicationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.DeleteBucketReplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeDeleteBucketReplicationWithContext(ctx context.Context, in *s3.DeleteBucketReplicationInput, _ ...request.Option) (*s3.DeleteBucketReplicationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteBucketReplication cancelled", ctx.Err())
	default:
		return d.DeleteBucketReplication(in)
	}
}

func (d *S3Double) DeleteBucketRequest(i0 *s3.DeleteBucketInput) (r0 *request.Request, r1 *s3.DeleteBucketOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBucketRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.DeleteBucketOutput)
	return
}

func (d *S3Double) DeleteBucketTagging(i0 *s3.DeleteBucketTaggingInput) (r0 *s3.DeleteBucketTaggingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBucketTagging", i0)
	r0, _ = returns[0].(*s3.DeleteBucketTaggingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) DeleteBucketTaggingRequest(i0 *s3.DeleteBucketTaggingInput) (r0 *request.Request, r1 *s3.DeleteBucketTaggingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBucketTaggingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.DeleteBucketTaggingOutput)
	return
}

func (d *S3Double) DeleteBucketTaggingWithContext(i0 context.Context, i1 *s3.DeleteBucketTaggingInput, i2 ...request.Option) (r0 *s3.DeleteBucketTaggingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBucketTaggingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.DeleteBucketTaggingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeDeleteBucketTaggingWithContext(ctx context.Context, in *s3.DeleteBucketTaggingInput, _ ...request.Option) (*s3.DeleteBucketTaggingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteBucketTagging cancelled", ctx.Err())
	default:
		return d.DeleteBucketTagging(in)
	}
}

func (d *S3Double) DeleteBucketWebsite(i0 *s3.DeleteBucketWebsiteInput) (r0 *s3.DeleteBucketWebsiteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBucketWebsite", i0)
	r0, _ = returns[0].(*s3.DeleteBucketWebsiteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) DeleteBucketWebsiteRequest(i0 *s3.DeleteBucketWebsiteInput) (r0 *request.Request, r1 *s3.DeleteBucketWebsiteOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBucketWebsiteRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.DeleteBucketWebsiteOutput)
	return
}

func (d *S3Double) DeleteBucketWebsiteWithContext(i0 context.Context, i1 *s3.DeleteBucketWebsiteInput, i2 ...request.Option) (r0 *s3.DeleteBucketWebsiteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBucketWebsiteWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.DeleteBucketWebsiteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeDeleteBucketWebsiteWithContext(ctx context.Context, in *s3.DeleteBucketWebsiteInput, _ ...request.Option) (*s3.DeleteBucketWebsiteOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteBucketWebsite cancelled", ctx.Err())
	default:
		return d.DeleteBucketWebsite(in)
	}
}

func (d *S3Double) DeleteBucketWithContext(i0 context.Context, i1 *s3.DeleteBucketInput, i2 ...request.Option) (r0 *s3.DeleteBucketOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBucketWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.DeleteBucketOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeDeleteBucketWithContext(ctx context.Context, in *s3.DeleteBucketInput, _ ...request.Option) (*s3.DeleteBucketOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteBucket cancelled", ctx.Err())
	default:
		return d.DeleteBucket(in)
	}
}

func (d *S3Double) DeleteObject(i0 *s3.DeleteObjectInput) (r0 *s3.DeleteObjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteObject", i0)
	r0, _ = returns[0].(*s3.DeleteObjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) DeleteObjectRequest(i0 *s3.DeleteObjectInput) (r0 *request.Request, r1 *s3.DeleteObjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteObjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.DeleteObjectOutput)
	return
}

func (d *S3Double) DeleteObjectTagging(i0 *s3.DeleteObjectTaggingInput) (r0 *s3.DeleteObjectTaggingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteObjectTagging", i0)
	r0, _ = returns[0].(*s3.DeleteObjectTaggingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) DeleteObjectTaggingRequest(i0 *s3.DeleteObjectTaggingInput) (r0 *request.Request, r1 *s3.DeleteObjectTaggingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteObjectTaggingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.DeleteObjectTaggingOutput)
	return
}

func (d *S3Double) DeleteObjectTaggingWithContext(i0 context.Context, i1 *s3.DeleteObjectTaggingInput, i2 ...request.Option) (r0 *s3.DeleteObjectTaggingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteObjectTaggingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.DeleteObjectTaggingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeDeleteObjectTaggingWithContext(ctx context.Context, in *s3.DeleteObjectTaggingInput, _ ...request.Option) (*s3.DeleteObjectTaggingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteObjectTagging cancelled", ctx.Err())
	default:
		return d.DeleteObjectTagging(in)
	}
}

func (d *S3Double) DeleteObjectWithContext(i0 context.Context, i1 *s3.DeleteObjectInput, i2 ...request.Option) (r0 *s3.DeleteObjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteObjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.DeleteObjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeDeleteObjectWithContext(ctx context.Context, in *s3.DeleteObjectInput, _ ...request.Option) (*s3.DeleteObjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteObject cancelled", ctx.Err())
	default:
		return d.DeleteObject(in)
	}
}

func (d *S3Double) DeleteObjects(i0 *s3.DeleteObjectsInput) (r0 *s3.DeleteObjectsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteObjects", i0)
	r0, _ = returns[0].(*s3.DeleteObjectsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) DeleteObjectsRequest(i0 *s3.DeleteObjectsInput) (r0 *request.Request, r1 *s3.DeleteObjectsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteObjectsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.DeleteObjectsOutput)
	return
}

func (d *S3Double) DeleteObjectsWithContext(i0 context.Context, i1 *s3.DeleteObjectsInput, i2 ...request.Option) (r0 *s3.DeleteObjectsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteObjectsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.DeleteObjectsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeDeleteObjectsWithContext(ctx context.Context, in *s3.DeleteObjectsInput, _ ...request.Option) (*s3.DeleteObjectsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteObjects cancelled", ctx.Err())
	default:
		return d.DeleteObjects(in)
	}
}

func (d *S3Double) DeletePublicAccessBlock(i0 *s3.DeletePublicAccessBlockInput) (r0 *s3.DeletePublicAccessBlockOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePublicAccessBlock", i0)
	r0, _ = returns[0].(*s3.DeletePublicAccessBlockOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) DeletePublicAccessBlockRequest(i0 *s3.DeletePublicAccessBlockInput) (r0 *request.Request, r1 *s3.DeletePublicAccessBlockOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePublicAccessBlockRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.DeletePublicAccessBlockOutput)
	return
}

func (d *S3Double) DeletePublicAccessBlockWithContext(i0 context.Context, i1 *s3.DeletePublicAccessBlockInput, i2 ...request.Option) (r0 *s3.DeletePublicAccessBlockOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePublicAccessBlockWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.DeletePublicAccessBlockOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeDeletePublicAccessBlockWithContext(ctx context.Context, in *s3.DeletePublicAccessBlockInput, _ ...request.Option) (*s3.DeletePublicAccessBlockOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeletePublicAccessBlock cancelled", ctx.Err())
	default:
		return d.DeletePublicAccessBlock(in)
	}
}

func (d *S3Double) GetBucketAccelerateConfiguration(i0 *s3.GetBucketAccelerateConfigurationInput) (r0 *s3.GetBucketAccelerateConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketAccelerateConfiguration", i0)
	r0, _ = returns[0].(*s3.GetBucketAccelerateConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) GetBucketAccelerateConfigurationRequest(i0 *s3.GetBucketAccelerateConfigurationInput) (r0 *request.Request, r1 *s3.GetBucketAccelerateConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketAccelerateConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.GetBucketAccelerateConfigurationOutput)
	return
}

func (d *S3Double) GetBucketAccelerateConfigurationWithContext(i0 context.Context, i1 *s3.GetBucketAccelerateConfigurationInput, i2 ...request.Option) (r0 *s3.GetBucketAccelerateConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketAccelerateConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.GetBucketAccelerateConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeGetBucketAccelerateConfigurationWithContext(ctx context.Context, in *s3.GetBucketAccelerateConfigurationInput, _ ...request.Option) (*s3.GetBucketAccelerateConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBucketAccelerateConfiguration cancelled", ctx.Err())
	default:
		return d.GetBucketAccelerateConfiguration(in)
	}
}

func (d *S3Double) GetBucketAcl(i0 *s3.GetBucketAclInput) (r0 *s3.GetBucketAclOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketAcl", i0)
	r0, _ = returns[0].(*s3.GetBucketAclOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) GetBucketAclRequest(i0 *s3.GetBucketAclInput) (r0 *request.Request, r1 *s3.GetBucketAclOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketAclRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.GetBucketAclOutput)
	return
}

func (d *S3Double) GetBucketAclWithContext(i0 context.Context, i1 *s3.GetBucketAclInput, i2 ...request.Option) (r0 *s3.GetBucketAclOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketAclWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.GetBucketAclOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeGetBucketAclWithContext(ctx context.Context, in *s3.GetBucketAclInput, _ ...request.Option) (*s3.GetBucketAclOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBucketAcl cancelled", ctx.Err())
	default:
		return d.GetBucketAcl(in)
	}
}

func (d *S3Double) GetBucketAnalyticsConfiguration(i0 *s3.GetBucketAnalyticsConfigurationInput) (r0 *s3.GetBucketAnalyticsConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketAnalyticsConfiguration", i0)
	r0, _ = returns[0].(*s3.GetBucketAnalyticsConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) GetBucketAnalyticsConfigurationRequest(i0 *s3.GetBucketAnalyticsConfigurationInput) (r0 *request.Request, r1 *s3.GetBucketAnalyticsConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketAnalyticsConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.GetBucketAnalyticsConfigurationOutput)
	return
}

func (d *S3Double) GetBucketAnalyticsConfigurationWithContext(i0 context.Context, i1 *s3.GetBucketAnalyticsConfigurationInput, i2 ...request.Option) (r0 *s3.GetBucketAnalyticsConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketAnalyticsConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.GetBucketAnalyticsConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeGetBucketAnalyticsConfigurationWithContext(ctx context.Context, in *s3.GetBucketAnalyticsConfigurationInput, _ ...request.Option) (*s3.GetBucketAnalyticsConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBucketAnalyticsConfiguration cancelled", ctx.Err())
	default:
		return d.GetBucketAnalyticsConfiguration(in)
	}
}

func (d *S3Double) GetBucketCors(i0 *s3.GetBucketCorsInput) (r0 *s3.GetBucketCorsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketCors", i0)
	r0, _ = returns[0].(*s3.GetBucketCorsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) GetBucketCorsRequest(i0 *s3.GetBucketCorsInput) (r0 *request.Request, r1 *s3.GetBucketCorsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketCorsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.GetBucketCorsOutput)
	return
}

func (d *S3Double) GetBucketCorsWithContext(i0 context.Context, i1 *s3.GetBucketCorsInput, i2 ...request.Option) (r0 *s3.GetBucketCorsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketCorsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.GetBucketCorsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeGetBucketCorsWithContext(ctx context.Context, in *s3.GetBucketCorsInput, _ ...request.Option) (*s3.GetBucketCorsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBucketCors cancelled", ctx.Err())
	default:
		return d.GetBucketCors(in)
	}
}

func (d *S3Double) GetBucketEncryption(i0 *s3.GetBucketEncryptionInput) (r0 *s3.GetBucketEncryptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketEncryption", i0)
	r0, _ = returns[0].(*s3.GetBucketEncryptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) GetBucketEncryptionRequest(i0 *s3.GetBucketEncryptionInput) (r0 *request.Request, r1 *s3.GetBucketEncryptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketEncryptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.GetBucketEncryptionOutput)
	return
}

func (d *S3Double) GetBucketEncryptionWithContext(i0 context.Context, i1 *s3.GetBucketEncryptionInput, i2 ...request.Option) (r0 *s3.GetBucketEncryptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketEncryptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.GetBucketEncryptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeGetBucketEncryptionWithContext(ctx context.Context, in *s3.GetBucketEncryptionInput, _ ...request.Option) (*s3.GetBucketEncryptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBucketEncryption cancelled", ctx.Err())
	default:
		return d.GetBucketEncryption(in)
	}
}

func (d *S3Double) GetBucketInventoryConfiguration(i0 *s3.GetBucketInventoryConfigurationInput) (r0 *s3.GetBucketInventoryConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketInventoryConfiguration", i0)
	r0, _ = returns[0].(*s3.GetBucketInventoryConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) GetBucketInventoryConfigurationRequest(i0 *s3.GetBucketInventoryConfigurationInput) (r0 *request.Request, r1 *s3.GetBucketInventoryConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketInventoryConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.GetBucketInventoryConfigurationOutput)
	return
}

func (d *S3Double) GetBucketInventoryConfigurationWithContext(i0 context.Context, i1 *s3.GetBucketInventoryConfigurationInput, i2 ...request.Option) (r0 *s3.GetBucketInventoryConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketInventoryConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.GetBucketInventoryConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeGetBucketInventoryConfigurationWithContext(ctx context.Context, in *s3.GetBucketInventoryConfigurationInput, _ ...request.Option) (*s3.GetBucketInventoryConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBucketInventoryConfiguration cancelled", ctx.Err())
	default:
		return d.GetBucketInventoryConfiguration(in)
	}
}

func (d *S3Double) GetBucketLifecycle(i0 *s3.GetBucketLifecycleInput) (r0 *s3.GetBucketLifecycleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketLifecycle", i0)
	r0, _ = returns[0].(*s3.GetBucketLifecycleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) GetBucketLifecycleConfiguration(i0 *s3.GetBucketLifecycleConfigurationInput) (r0 *s3.GetBucketLifecycleConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketLifecycleConfiguration", i0)
	r0, _ = returns[0].(*s3.GetBucketLifecycleConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) GetBucketLifecycleConfigurationRequest(i0 *s3.GetBucketLifecycleConfigurationInput) (r0 *request.Request, r1 *s3.GetBucketLifecycleConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketLifecycleConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.GetBucketLifecycleConfigurationOutput)
	return
}

func (d *S3Double) GetBucketLifecycleConfigurationWithContext(i0 context.Context, i1 *s3.GetBucketLifecycleConfigurationInput, i2 ...request.Option) (r0 *s3.GetBucketLifecycleConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketLifecycleConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.GetBucketLifecycleConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeGetBucketLifecycleConfigurationWithContext(ctx context.Context, in *s3.GetBucketLifecycleConfigurationInput, _ ...request.Option) (*s3.GetBucketLifecycleConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBucketLifecycleConfiguration cancelled", ctx.Err())
	default:
		return d.GetBucketLifecycleConfiguration(in)
	}
}

func (d *S3Double) GetBucketLifecycleRequest(i0 *s3.GetBucketLifecycleInput) (r0 *request.Request, r1 *s3.GetBucketLifecycleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketLifecycleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.GetBucketLifecycleOutput)
	return
}

func (d *S3Double) GetBucketLifecycleWithContext(i0 context.Context, i1 *s3.GetBucketLifecycleInput, i2 ...request.Option) (r0 *s3.GetBucketLifecycleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketLifecycleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.GetBucketLifecycleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeGetBucketLifecycleWithContext(ctx context.Context, in *s3.GetBucketLifecycleInput, _ ...request.Option) (*s3.GetBucketLifecycleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBucketLifecycle cancelled", ctx.Err())
	default:
		return d.GetBucketLifecycle(in)
	}
}

func (d *S3Double) GetBucketLocation(i0 *s3.GetBucketLocationInput) (r0 *s3.GetBucketLocationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketLocation", i0)
	r0, _ = returns[0].(*s3.GetBucketLocationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) GetBucketLocationRequest(i0 *s3.GetBucketLocationInput) (r0 *request.Request, r1 *s3.GetBucketLocationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketLocationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.GetBucketLocationOutput)
	return
}

func (d *S3Double) GetBucketLocationWithContext(i0 context.Context, i1 *s3.GetBucketLocationInput, i2 ...request.Option) (r0 *s3.GetBucketLocationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketLocationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.GetBucketLocationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeGetBucketLocationWithContext(ctx context.Context, in *s3.GetBucketLocationInput, _ ...request.Option) (*s3.GetBucketLocationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBucketLocation cancelled", ctx.Err())
	default:
		return d.GetBucketLocation(in)
	}
}

func (d *S3Double) GetBucketLogging(i0 *s3.GetBucketLoggingInput) (r0 *s3.GetBucketLoggingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketLogging", i0)
	r0, _ = returns[0].(*s3.GetBucketLoggingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) GetBucketLoggingRequest(i0 *s3.GetBucketLoggingInput) (r0 *request.Request, r1 *s3.GetBucketLoggingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketLoggingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.GetBucketLoggingOutput)
	return
}

func (d *S3Double) GetBucketLoggingWithContext(i0 context.Context, i1 *s3.GetBucketLoggingInput, i2 ...request.Option) (r0 *s3.GetBucketLoggingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketLoggingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.GetBucketLoggingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeGetBucketLoggingWithContext(ctx context.Context, in *s3.GetBucketLoggingInput, _ ...request.Option) (*s3.GetBucketLoggingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBucketLogging cancelled", ctx.Err())
	default:
		return d.GetBucketLogging(in)
	}
}

func (d *S3Double) GetBucketMetricsConfiguration(i0 *s3.GetBucketMetricsConfigurationInput) (r0 *s3.GetBucketMetricsConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketMetricsConfiguration", i0)
	r0, _ = returns[0].(*s3.GetBucketMetricsConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) GetBucketMetricsConfigurationRequest(i0 *s3.GetBucketMetricsConfigurationInput) (r0 *request.Request, r1 *s3.GetBucketMetricsConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketMetricsConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.GetBucketMetricsConfigurationOutput)
	return
}

func (d *S3Double) GetBucketMetricsConfigurationWithContext(i0 context.Context, i1 *s3.GetBucketMetricsConfigurationInput, i2 ...request.Option) (r0 *s3.GetBucketMetricsConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketMetricsConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.GetBucketMetricsConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeGetBucketMetricsConfigurationWithContext(ctx context.Context, in *s3.GetBucketMetricsConfigurationInput, _ ...request.Option) (*s3.GetBucketMetricsConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBucketMetricsConfiguration cancelled", ctx.Err())
	default:
		return d.GetBucketMetricsConfiguration(in)
	}
}

func (d *S3Double) GetBucketNotification(i0 *s3.GetBucketNotificationConfigurationRequest) (r0 *s3.NotificationConfigurationDeprecated, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketNotification", i0)
	r0, _ = returns[0].(*s3.NotificationConfigurationDeprecated)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) GetBucketNotificationConfiguration(i0 *s3.GetBucketNotificationConfigurationRequest) (r0 *s3.NotificationConfiguration, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketNotificationConfiguration", i0)
	r0, _ = returns[0].(*s3.NotificationConfiguration)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) GetBucketNotificationConfigurationRequest(i0 *s3.GetBucketNotificationConfigurationRequest) (r0 *request.Request, r1 *s3.NotificationConfiguration) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketNotificationConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.NotificationConfiguration)
	return
}

func (d *S3Double) GetBucketNotificationConfigurationWithContext(i0 context.Context, i1 *s3.GetBucketNotificationConfigurationRequest, i2 ...request.Option) (r0 *s3.NotificationConfiguration, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketNotificationConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.NotificationConfiguration)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeGetBucketNotificationConfigurationWithContext(ctx context.Context, in *s3.GetBucketNotificationConfigurationRequest, _ ...request.Option) (*s3.NotificationConfiguration, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBucketNotificationConfiguration cancelled", ctx.Err())
	default:
		return d.GetBucketNotificationConfiguration(in)
	}
}

func (d *S3Double) GetBucketNotificationRequest(i0 *s3.GetBucketNotificationConfigurationRequest) (r0 *request.Request, r1 *s3.NotificationConfigurationDeprecated) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketNotificationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.NotificationConfigurationDeprecated)
	return
}

func (d *S3Double) GetBucketNotificationWithContext(i0 context.Context, i1 *s3.GetBucketNotificationConfigurationRequest, i2 ...request.Option) (r0 *s3.NotificationConfigurationDeprecated, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketNotificationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.NotificationConfigurationDeprecated)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeGetBucketNotificationWithContext(ctx context.Context, in *s3.GetBucketNotificationConfigurationRequest, _ ...request.Option) (*s3.NotificationConfigurationDeprecated, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBucketNotification cancelled", ctx.Err())
	default:
		return d.GetBucketNotification(in)
	}
}

func (d *S3Double) GetBucketPolicy(i0 *s3.GetBucketPolicyInput) (r0 *s3.GetBucketPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketPolicy", i0)
	r0, _ = returns[0].(*s3.GetBucketPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) GetBucketPolicyRequest(i0 *s3.GetBucketPolicyInput) (r0 *request.Request, r1 *s3.GetBucketPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.GetBucketPolicyOutput)
	return
}

func (d *S3Double) GetBucketPolicyStatus(i0 *s3.GetBucketPolicyStatusInput) (r0 *s3.GetBucketPolicyStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketPolicyStatus", i0)
	r0, _ = returns[0].(*s3.GetBucketPolicyStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) GetBucketPolicyStatusRequest(i0 *s3.GetBucketPolicyStatusInput) (r0 *request.Request, r1 *s3.GetBucketPolicyStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketPolicyStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.GetBucketPolicyStatusOutput)
	return
}

func (d *S3Double) GetBucketPolicyStatusWithContext(i0 context.Context, i1 *s3.GetBucketPolicyStatusInput, i2 ...request.Option) (r0 *s3.GetBucketPolicyStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketPolicyStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.GetBucketPolicyStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeGetBucketPolicyStatusWithContext(ctx context.Context, in *s3.GetBucketPolicyStatusInput, _ ...request.Option) (*s3.GetBucketPolicyStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBucketPolicyStatus cancelled", ctx.Err())
	default:
		return d.GetBucketPolicyStatus(in)
	}
}

func (d *S3Double) GetBucketPolicyWithContext(i0 context.Context, i1 *s3.GetBucketPolicyInput, i2 ...request.Option) (r0 *s3.GetBucketPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.GetBucketPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeGetBucketPolicyWithContext(ctx context.Context, in *s3.GetBucketPolicyInput, _ ...request.Option) (*s3.GetBucketPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBucketPolicy cancelled", ctx.Err())
	default:
		return d.GetBucketPolicy(in)
	}
}

func (d *S3Double) GetBucketReplication(i0 *s3.GetBucketReplicationInput) (r0 *s3.GetBucketReplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketReplication", i0)
	r0, _ = returns[0].(*s3.GetBucketReplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) GetBucketReplicationRequest(i0 *s3.GetBucketReplicationInput) (r0 *request.Request, r1 *s3.GetBucketReplicationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketReplicationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.GetBucketReplicationOutput)
	return
}

func (d *S3Double) GetBucketReplicationWithContext(i0 context.Context, i1 *s3.GetBucketReplicationInput, i2 ...request.Option) (r0 *s3.GetBucketReplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketReplicationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.GetBucketReplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeGetBucketReplicationWithContext(ctx context.Context, in *s3.GetBucketReplicationInput, _ ...request.Option) (*s3.GetBucketReplicationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBucketReplication cancelled", ctx.Err())
	default:
		return d.GetBucketReplication(in)
	}
}

func (d *S3Double) GetBucketRequestPayment(i0 *s3.GetBucketRequestPaymentInput) (r0 *s3.GetBucketRequestPaymentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketRequestPayment", i0)
	r0, _ = returns[0].(*s3.GetBucketRequestPaymentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) GetBucketRequestPaymentRequest(i0 *s3.GetBucketRequestPaymentInput) (r0 *request.Request, r1 *s3.GetBucketRequestPaymentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketRequestPaymentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.GetBucketRequestPaymentOutput)
	return
}

func (d *S3Double) GetBucketRequestPaymentWithContext(i0 context.Context, i1 *s3.GetBucketRequestPaymentInput, i2 ...request.Option) (r0 *s3.GetBucketRequestPaymentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketRequestPaymentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.GetBucketRequestPaymentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeGetBucketRequestPaymentWithContext(ctx context.Context, in *s3.GetBucketRequestPaymentInput, _ ...request.Option) (*s3.GetBucketRequestPaymentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBucketRequestPayment cancelled", ctx.Err())
	default:
		return d.GetBucketRequestPayment(in)
	}
}

func (d *S3Double) GetBucketTagging(i0 *s3.GetBucketTaggingInput) (r0 *s3.GetBucketTaggingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketTagging", i0)
	r0, _ = returns[0].(*s3.GetBucketTaggingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) GetBucketTaggingRequest(i0 *s3.GetBucketTaggingInput) (r0 *request.Request, r1 *s3.GetBucketTaggingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketTaggingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.GetBucketTaggingOutput)
	return
}

func (d *S3Double) GetBucketTaggingWithContext(i0 context.Context, i1 *s3.GetBucketTaggingInput, i2 ...request.Option) (r0 *s3.GetBucketTaggingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketTaggingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.GetBucketTaggingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeGetBucketTaggingWithContext(ctx context.Context, in *s3.GetBucketTaggingInput, _ ...request.Option) (*s3.GetBucketTaggingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBucketTagging cancelled", ctx.Err())
	default:
		return d.GetBucketTagging(in)
	}
}

func (d *S3Double) GetBucketVersioning(i0 *s3.GetBucketVersioningInput) (r0 *s3.GetBucketVersioningOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketVersioning", i0)
	r0, _ = returns[0].(*s3.GetBucketVersioningOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) GetBucketVersioningRequest(i0 *s3.GetBucketVersioningInput) (r0 *request.Request, r1 *s3.GetBucketVersioningOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketVersioningRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.GetBucketVersioningOutput)
	return
}

func (d *S3Double) GetBucketVersioningWithContext(i0 context.Context, i1 *s3.GetBucketVersioningInput, i2 ...request.Option) (r0 *s3.GetBucketVersioningOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketVersioningWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.GetBucketVersioningOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeGetBucketVersioningWithContext(ctx context.Context, in *s3.GetBucketVersioningInput, _ ...request.Option) (*s3.GetBucketVersioningOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBucketVersioning cancelled", ctx.Err())
	default:
		return d.GetBucketVersioning(in)
	}
}

func (d *S3Double) GetBucketWebsite(i0 *s3.GetBucketWebsiteInput) (r0 *s3.GetBucketWebsiteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketWebsite", i0)
	r0, _ = returns[0].(*s3.GetBucketWebsiteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) GetBucketWebsiteRequest(i0 *s3.GetBucketWebsiteInput) (r0 *request.Request, r1 *s3.GetBucketWebsiteOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketWebsiteRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.GetBucketWebsiteOutput)
	return
}

func (d *S3Double) GetBucketWebsiteWithContext(i0 context.Context, i1 *s3.GetBucketWebsiteInput, i2 ...request.Option) (r0 *s3.GetBucketWebsiteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBucketWebsiteWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.GetBucketWebsiteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeGetBucketWebsiteWithContext(ctx context.Context, in *s3.GetBucketWebsiteInput, _ ...request.Option) (*s3.GetBucketWebsiteOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBucketWebsite cancelled", ctx.Err())
	default:
		return d.GetBucketWebsite(in)
	}
}

func (d *S3Double) GetObject(i0 *s3.GetObjectInput) (r0 *s3.GetObjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetObject", i0)
	r0, _ = returns[0].(*s3.GetObjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) GetObjectAcl(i0 *s3.GetObjectAclInput) (r0 *s3.GetObjectAclOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetObjectAcl", i0)
	r0, _ = returns[0].(*s3.GetObjectAclOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) GetObjectAclRequest(i0 *s3.GetObjectAclInput) (r0 *request.Request, r1 *s3.GetObjectAclOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetObjectAclRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.GetObjectAclOutput)
	return
}

func (d *S3Double) GetObjectAclWithContext(i0 context.Context, i1 *s3.GetObjectAclInput, i2 ...request.Option) (r0 *s3.GetObjectAclOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetObjectAclWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.GetObjectAclOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeGetObjectAclWithContext(ctx context.Context, in *s3.GetObjectAclInput, _ ...request.Option) (*s3.GetObjectAclOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetObjectAcl cancelled", ctx.Err())
	default:
		return d.GetObjectAcl(in)
	}
}

func (d *S3Double) GetObjectLegalHold(i0 *s3.GetObjectLegalHoldInput) (r0 *s3.GetObjectLegalHoldOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetObjectLegalHold", i0)
	r0, _ = returns[0].(*s3.GetObjectLegalHoldOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) GetObjectLegalHoldRequest(i0 *s3.GetObjectLegalHoldInput) (r0 *request.Request, r1 *s3.GetObjectLegalHoldOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetObjectLegalHoldRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.GetObjectLegalHoldOutput)
	return
}

func (d *S3Double) GetObjectLegalHoldWithContext(i0 context.Context, i1 *s3.GetObjectLegalHoldInput, i2 ...request.Option) (r0 *s3.GetObjectLegalHoldOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetObjectLegalHoldWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.GetObjectLegalHoldOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeGetObjectLegalHoldWithContext(ctx context.Context, in *s3.GetObjectLegalHoldInput, _ ...request.Option) (*s3.GetObjectLegalHoldOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetObjectLegalHold cancelled", ctx.Err())
	default:
		return d.GetObjectLegalHold(in)
	}
}

func (d *S3Double) GetObjectLockConfiguration(i0 *s3.GetObjectLockConfigurationInput) (r0 *s3.GetObjectLockConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetObjectLockConfiguration", i0)
	r0, _ = returns[0].(*s3.GetObjectLockConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) GetObjectLockConfigurationRequest(i0 *s3.GetObjectLockConfigurationInput) (r0 *request.Request, r1 *s3.GetObjectLockConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetObjectLockConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.GetObjectLockConfigurationOutput)
	return
}

func (d *S3Double) GetObjectLockConfigurationWithContext(i0 context.Context, i1 *s3.GetObjectLockConfigurationInput, i2 ...request.Option) (r0 *s3.GetObjectLockConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetObjectLockConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.GetObjectLockConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeGetObjectLockConfigurationWithContext(ctx context.Context, in *s3.GetObjectLockConfigurationInput, _ ...request.Option) (*s3.GetObjectLockConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetObjectLockConfiguration cancelled", ctx.Err())
	default:
		return d.GetObjectLockConfiguration(in)
	}
}

func (d *S3Double) GetObjectRequest(i0 *s3.GetObjectInput) (r0 *request.Request, r1 *s3.GetObjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetObjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.GetObjectOutput)
	return
}

func (d *S3Double) GetObjectRetention(i0 *s3.GetObjectRetentionInput) (r0 *s3.GetObjectRetentionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetObjectRetention", i0)
	r0, _ = returns[0].(*s3.GetObjectRetentionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) GetObjectRetentionRequest(i0 *s3.GetObjectRetentionInput) (r0 *request.Request, r1 *s3.GetObjectRetentionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetObjectRetentionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.GetObjectRetentionOutput)
	return
}

func (d *S3Double) GetObjectRetentionWithContext(i0 context.Context, i1 *s3.GetObjectRetentionInput, i2 ...request.Option) (r0 *s3.GetObjectRetentionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetObjectRetentionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.GetObjectRetentionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeGetObjectRetentionWithContext(ctx context.Context, in *s3.GetObjectRetentionInput, _ ...request.Option) (*s3.GetObjectRetentionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetObjectRetention cancelled", ctx.Err())
	default:
		return d.GetObjectRetention(in)
	}
}

func (d *S3Double) GetObjectTagging(i0 *s3.GetObjectTaggingInput) (r0 *s3.GetObjectTaggingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetObjectTagging", i0)
	r0, _ = returns[0].(*s3.GetObjectTaggingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) GetObjectTaggingRequest(i0 *s3.GetObjectTaggingInput) (r0 *request.Request, r1 *s3.GetObjectTaggingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetObjectTaggingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.GetObjectTaggingOutput)
	return
}

func (d *S3Double) GetObjectTaggingWithContext(i0 context.Context, i1 *s3.GetObjectTaggingInput, i2 ...request.Option) (r0 *s3.GetObjectTaggingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetObjectTaggingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.GetObjectTaggingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeGetObjectTaggingWithContext(ctx context.Context, in *s3.GetObjectTaggingInput, _ ...request.Option) (*s3.GetObjectTaggingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetObjectTagging cancelled", ctx.Err())
	default:
		return d.GetObjectTagging(in)
	}
}

func (d *S3Double) GetObjectTorrent(i0 *s3.GetObjectTorrentInput) (r0 *s3.GetObjectTorrentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetObjectTorrent", i0)
	r0, _ = returns[0].(*s3.GetObjectTorrentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) GetObjectTorrentRequest(i0 *s3.GetObjectTorrentInput) (r0 *request.Request, r1 *s3.GetObjectTorrentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetObjectTorrentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.GetObjectTorrentOutput)
	return
}

func (d *S3Double) GetObjectTorrentWithContext(i0 context.Context, i1 *s3.GetObjectTorrentInput, i2 ...request.Option) (r0 *s3.GetObjectTorrentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetObjectTorrentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.GetObjectTorrentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeGetObjectTorrentWithContext(ctx context.Context, in *s3.GetObjectTorrentInput, _ ...request.Option) (*s3.GetObjectTorrentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetObjectTorrent cancelled", ctx.Err())
	default:
		return d.GetObjectTorrent(in)
	}
}

func (d *S3Double) GetObjectWithContext(i0 context.Context, i1 *s3.GetObjectInput, i2 ...request.Option) (r0 *s3.GetObjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetObjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.GetObjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeGetObjectWithContext(ctx context.Context, in *s3.GetObjectInput, _ ...request.Option) (*s3.GetObjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetObject cancelled", ctx.Err())
	default:
		return d.GetObject(in)
	}
}

func (d *S3Double) GetPublicAccessBlock(i0 *s3.GetPublicAccessBlockInput) (r0 *s3.GetPublicAccessBlockOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPublicAccessBlock", i0)
	r0, _ = returns[0].(*s3.GetPublicAccessBlockOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) GetPublicAccessBlockRequest(i0 *s3.GetPublicAccessBlockInput) (r0 *request.Request, r1 *s3.GetPublicAccessBlockOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPublicAccessBlockRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.GetPublicAccessBlockOutput)
	return
}

func (d *S3Double) GetPublicAccessBlockWithContext(i0 context.Context, i1 *s3.GetPublicAccessBlockInput, i2 ...request.Option) (r0 *s3.GetPublicAccessBlockOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPublicAccessBlockWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.GetPublicAccessBlockOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeGetPublicAccessBlockWithContext(ctx context.Context, in *s3.GetPublicAccessBlockInput, _ ...request.Option) (*s3.GetPublicAccessBlockOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetPublicAccessBlock cancelled", ctx.Err())
	default:
		return d.GetPublicAccessBlock(in)
	}
}

func (d *S3Double) HeadBucket(i0 *s3.HeadBucketInput) (r0 *s3.HeadBucketOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("HeadBucket", i0)
	r0, _ = returns[0].(*s3.HeadBucketOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) HeadBucketRequest(i0 *s3.HeadBucketInput) (r0 *request.Request, r1 *s3.HeadBucketOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("HeadBucketRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.HeadBucketOutput)
	return
}

func (d *S3Double) HeadBucketWithContext(i0 context.Context, i1 *s3.HeadBucketInput, i2 ...request.Option) (r0 *s3.HeadBucketOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("HeadBucketWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.HeadBucketOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeHeadBucketWithContext(ctx context.Context, in *s3.HeadBucketInput, _ ...request.Option) (*s3.HeadBucketOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "HeadBucket cancelled", ctx.Err())
	default:
		return d.HeadBucket(in)
	}
}

func (d *S3Double) HeadObject(i0 *s3.HeadObjectInput) (r0 *s3.HeadObjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("HeadObject", i0)
	r0, _ = returns[0].(*s3.HeadObjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) HeadObjectRequest(i0 *s3.HeadObjectInput) (r0 *request.Request, r1 *s3.HeadObjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("HeadObjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.HeadObjectOutput)
	return
}

func (d *S3Double) HeadObjectWithContext(i0 context.Context, i1 *s3.HeadObjectInput, i2 ...request.Option) (r0 *s3.HeadObjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("HeadObjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.HeadObjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeHeadObjectWithContext(ctx context.Context, in *s3.HeadObjectInput, _ ...request.Option) (*s3.HeadObjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "HeadObject cancelled", ctx.Err())
	default:
		return d.HeadObject(in)
	}
}

func (d *S3Double) ListBucketAnalyticsConfigurations(i0 *s3.ListBucketAnalyticsConfigurationsInput) (r0 *s3.ListBucketAnalyticsConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBucketAnalyticsConfigurations", i0)
	r0, _ = returns[0].(*s3.ListBucketAnalyticsConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) ListBucketAnalyticsConfigurationsRequest(i0 *s3.ListBucketAnalyticsConfigurationsInput) (r0 *request.Request, r1 *s3.ListBucketAnalyticsConfigurationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBucketAnalyticsConfigurationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.ListBucketAnalyticsConfigurationsOutput)
	return
}

func (d *S3Double) ListBucketAnalyticsConfigurationsWithContext(i0 context.Context, i1 *s3.ListBucketAnalyticsConfigurationsInput, i2 ...request.Option) (r0 *s3.ListBucketAnalyticsConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBucketAnalyticsConfigurationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.ListBucketAnalyticsConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeListBucketAnalyticsConfigurationsWithContext(ctx context.Context, in *s3.ListBucketAnalyticsConfigurationsInput, _ ...request.Option) (*s3.ListBucketAnalyticsConfigurationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListBucketAnalyticsConfigurations cancelled", ctx.Err())
	default:
		return d.ListBucketAnalyticsConfigurations(in)
	}
}

func (d *S3Double) ListBucketInventoryConfigurations(i0 *s3.ListBucketInventoryConfigurationsInput) (r0 *s3.ListBucketInventoryConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBucketInventoryConfigurations", i0)
	r0, _ = returns[0].(*s3.ListBucketInventoryConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) ListBucketInventoryConfigurationsRequest(i0 *s3.ListBucketInventoryConfigurationsInput) (r0 *request.Request, r1 *s3.ListBucketInventoryConfigurationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBucketInventoryConfigurationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.ListBucketInventoryConfigurationsOutput)
	return
}

func (d *S3Double) ListBucketInventoryConfigurationsWithContext(i0 context.Context, i1 *s3.ListBucketInventoryConfigurationsInput, i2 ...request.Option) (r0 *s3.ListBucketInventoryConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBucketInventoryConfigurationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.ListBucketInventoryConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeListBucketInventoryConfigurationsWithContext(ctx context.Context, in *s3.ListBucketInventoryConfigurationsInput, _ ...request.Option) (*s3.ListBucketInventoryConfigurationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListBucketInventoryConfigurations cancelled", ctx.Err())
	default:
		return d.ListBucketInventoryConfigurations(in)
	}
}

func (d *S3Double) ListBucketMetricsConfigurations(i0 *s3.ListBucketMetricsConfigurationsInput) (r0 *s3.ListBucketMetricsConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBucketMetricsConfigurations", i0)
	r0, _ = returns[0].(*s3.ListBucketMetricsConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) ListBucketMetricsConfigurationsRequest(i0 *s3.ListBucketMetricsConfigurationsInput) (r0 *request.Request, r1 *s3.ListBucketMetricsConfigurationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBucketMetricsConfigurationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.ListBucketMetricsConfigurationsOutput)
	return
}

func (d *S3Double) ListBucketMetricsConfigurationsWithContext(i0 context.Context, i1 *s3.ListBucketMetricsConfigurationsInput, i2 ...request.Option) (r0 *s3.ListBucketMetricsConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBucketMetricsConfigurationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.ListBucketMetricsConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeListBucketMetricsConfigurationsWithContext(ctx context.Context, in *s3.ListBucketMetricsConfigurationsInput, _ ...request.Option) (*s3.ListBucketMetricsConfigurationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListBucketMetricsConfigurations cancelled", ctx.Err())
	default:
		return d.ListBucketMetricsConfigurations(in)
	}
}

func (d *S3Double) ListBuckets(i0 *s3.ListBucketsInput) (r0 *s3.ListBucketsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBuckets", i0)
	r0, _ = returns[0].(*s3.ListBucketsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) ListBucketsRequest(i0 *s3.ListBucketsInput) (r0 *request.Request, r1 *s3.ListBucketsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBucketsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.ListBucketsOutput)
	return
}

func (d *S3Double) ListBucketsWithContext(i0 context.Context, i1 *s3.ListBucketsInput, i2 ...request.Option) (r0 *s3.ListBucketsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBucketsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.ListBucketsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeListBucketsWithContext(ctx context.Context, in *s3.ListBucketsInput, _ ...request.Option) (*s3.ListBucketsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListBuckets cancelled", ctx.Err())
	default:
		return d.ListBuckets(in)
	}
}

func (d *S3Double) ListMultipartUploads(i0 *s3.ListMultipartUploadsInput) (r0 *s3.ListMultipartUploadsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMultipartUploads", i0)
	r0, _ = returns[0].(*s3.ListMultipartUploadsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) ListMultipartUploadsPages(i0 *s3.ListMultipartUploadsInput, i1 func(*s3.ListMultipartUploadsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMultipartUploadsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *S3Double) fakeListMultipartUploadsPages(in *s3.ListMultipartUploadsInput, pager func(*s3.ListMultipartUploadsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListMultipartUploads", paginators, in, pager)
}

func (d *S3Double) ListMultipartUploadsPagesWithContext(i0 context.Context, i1 *s3.ListMultipartUploadsInput, i2 func(*s3.ListMultipartUploadsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMultipartUploadsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *S3Double) fakeListMultipartUploadsPagesWithContext(ctx context.Context, in *s3.ListMultipartUploadsInput, pager func(*s3.ListMultipartUploadsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListMultipartUploads", paginators, ctx, in, pager, options...)
}

func (d *S3Double) ListMultipartUploadsRequest(i0 *s3.ListMultipartUploadsInput) (r0 *request.Request, r1 *s3.ListMultipartUploadsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMultipartUploadsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.ListMultipartUploadsOutput)
	return
}

func (d *S3Double) ListMultipartUploadsWithContext(i0 context.Context, i1 *s3.ListMultipartUploadsInput, i2 ...request.Option) (r0 *s3.ListMultipartUploadsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMultipartUploadsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.ListMultipartUploadsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeListMultipartUploadsWithContext(ctx context.Context, in *s3.ListMultipartUploadsInput, _ ...request.Option) (*s3.ListMultipartUploadsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListMultipartUploads cancelled", ctx.Err())
	default:
		return d.ListMultipartUploads(in)
	}
}

func (d *S3Double) ListObjectVersions(i0 *s3.ListObjectVersionsInput) (r0 *s3.ListObjectVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectVersions", i0)
	r0, _ = returns[0].(*s3.ListObjectVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) ListObjectVersionsPages(i0 *s3.ListObjectVersionsInput, i1 func(*s3.ListObjectVersionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectVersionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *S3Double) fakeListObjectVersionsPages(in *s3.ListObjectVersionsInput, pager func(*s3.ListObjectVersionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListObjectVersions", paginators, in, pager)
}

func (d *S3Double) ListObjectVersionsPagesWithContext(i0 context.Context, i1 *s3.ListObjectVersionsInput, i2 func(*s3.ListObjectVersionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectVersionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *S3Double) fakeListObjectVersionsPagesWithContext(ctx context.Context, in *s3.ListObjectVersionsInput, pager func(*s3.ListObjectVersionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListObjectVersions", paginators, ctx, in, pager, options...)
}

func (d *S3Double) ListObjectVersionsRequest(i0 *s3.ListObjectVersionsInput) (r0 *request.Request, r1 *s3.ListObjectVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.ListObjectVersionsOutput)
	return
}

func (d *S3Double) ListObjectVersionsWithContext(i0 context.Context, i1 *s3.ListObjectVersionsInput, i2 ...request.Option) (r0 *s3.ListObjectVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.ListObjectVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeListObjectVersionsWithContext(ctx context.Context, in *s3.ListObjectVersionsInput, _ ...request.Option) (*s3.ListObjectVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListObjectVersions cancelled", ctx.Err())
	default:
		return d.ListObjectVersions(in)
	}
}

func (d *S3Double) ListObjects(i0 *s3.ListObjectsInput) (r0 *s3.ListObjectsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjects", i0)
	r0, _ = returns[0].(*s3.ListObjectsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) ListObjectsPages(i0 *s3.ListObjectsInput, i1 func(*s3.ListObjectsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *S3Double) fakeListObjectsPages(in *s3.ListObjectsInput, pager func(*s3.ListObjectsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListObjects", paginators, in, pager)
}

func (d *S3Double) ListObjectsPagesWithContext(i0 context.Context, i1 *s3.ListObjectsInput, i2 func(*s3.ListObjectsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *S3Double) fakeListObjectsPagesWithContext(ctx context.Context, in *s3.ListObjectsInput, pager func(*s3.ListObjectsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListObjects", paginators, ctx, in, pager, options...)
}

func (d *S3Double) ListObjectsRequest(i0 *s3.ListObjectsInput) (r0 *request.Request, r1 *s3.ListObjectsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.ListObjectsOutput)
	return
}

func (d *S3Double) ListObjectsV2(i0 *s3.ListObjectsV2Input) (r0 *s3.ListObjectsV2Output, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectsV2", i0)
	r0, _ = returns[0].(*s3.ListObjectsV2Output)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) ListObjectsV2Pages(i0 *s3.ListObjectsV2Input, i1 func(*s3.ListObjectsV2Output, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectsV2Pages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *S3Double) fakeListObjectsV2Pages(in *s3.ListObjectsV2Input, pager func(*s3.ListObjectsV2Output, bool) (shouldContinue bool)) error {
	return d.Paginate("ListObjectsV2", paginators, in, pager)
}

func (d *S3Double) ListObjectsV2PagesWithContext(i0 context.Context, i1 *s3.ListObjectsV2Input, i2 func(*s3.ListObjectsV2Output, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectsV2PagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *S3Double) fakeListObjectsV2PagesWithContext(ctx context.Context, in *s3.ListObjectsV2Input, pager func(*s3.ListObjectsV2Output, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListObjectsV2", paginators, ctx, in, pager, options...)
}

func (d *S3Double) ListObjectsV2Request(i0 *s3.ListObjectsV2Input) (r0 *request.Request, r1 *s3.ListObjectsV2Output) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectsV2Request", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.ListObjectsV2Output)
	return
}

func (d *S3Double) ListObjectsV2WithContext(i0 context.Context, i1 *s3.ListObjectsV2Input, i2 ...request.Option) (r0 *s3.ListObjectsV2Output, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectsV2WithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.ListObjectsV2Output)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeListObjectsV2WithContext(ctx context.Context, in *s3.ListObjectsV2Input, _ ...request.Option) (*s3.ListObjectsV2Output, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListObjectsV2 cancelled", ctx.Err())
	default:
		return d.ListObjectsV2(in)
	}
}

func (d *S3Double) ListObjectsWithContext(i0 context.Context, i1 *s3.ListObjectsInput, i2 ...request.Option) (r0 *s3.ListObjectsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.ListObjectsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeListObjectsWithContext(ctx context.Context, in *s3.ListObjectsInput, _ ...request.Option) (*s3.ListObjectsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListObjects cancelled", ctx.Err())
	default:
		return d.ListObjects(in)
	}
}

func (d *S3Double) ListParts(i0 *s3.ListPartsInput) (r0 *s3.ListPartsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListParts", i0)
	r0, _ = returns[0].(*s3.ListPartsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) ListPartsPages(i0 *s3.ListPartsInput, i1 func(*s3.ListPartsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPartsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *S3Double) fakeListPartsPages(in *s3.ListPartsInput, pager func(*s3.ListPartsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListParts", paginators, in, pager)
}

func (d *S3Double) ListPartsPagesWithContext(i0 context.Context, i1 *s3.ListPartsInput, i2 func(*s3.ListPartsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPartsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *S3Double) fakeListPartsPagesWithContext(ctx context.Context, in *s3.ListPartsInput, pager func(*s3.ListPartsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListParts", paginators, ctx, in, pager, options...)
}

func (d *S3Double) ListPartsRequest(i0 *s3.ListPartsInput) (r0 *request.Request, r1 *s3.ListPartsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPartsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.ListPartsOutput)
	return
}

func (d *S3Double) ListPartsWithContext(i0 context.Context, i1 *s3.ListPartsInput, i2 ...request.Option) (r0 *s3.ListPartsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPartsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.ListPartsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeListPartsWithContext(ctx context.Context, in *s3.ListPartsInput, _ ...request.Option) (*s3.ListPartsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListParts cancelled", ctx.Err())
	default:
		return d.ListParts(in)
	}
}

func (d *S3Double) PutBucketAccelerateConfiguration(i0 *s3.PutBucketAccelerateConfigurationInput) (r0 *s3.PutBucketAccelerateConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketAccelerateConfiguration", i0)
	r0, _ = returns[0].(*s3.PutBucketAccelerateConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) PutBucketAccelerateConfigurationRequest(i0 *s3.PutBucketAccelerateConfigurationInput) (r0 *request.Request, r1 *s3.PutBucketAccelerateConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketAccelerateConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.PutBucketAccelerateConfigurationOutput)
	return
}

func (d *S3Double) PutBucketAccelerateConfigurationWithContext(i0 context.Context, i1 *s3.PutBucketAccelerateConfigurationInput, i2 ...request.Option) (r0 *s3.PutBucketAccelerateConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketAccelerateConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.PutBucketAccelerateConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakePutBucketAccelerateConfigurationWithContext(ctx context.Context, in *s3.PutBucketAccelerateConfigurationInput, _ ...request.Option) (*s3.PutBucketAccelerateConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutBucketAccelerateConfiguration cancelled", ctx.Err())
	default:
		return d.PutBucketAccelerateConfiguration(in)
	}
}

func (d *S3Double) PutBucketAcl(i0 *s3.PutBucketAclInput) (r0 *s3.PutBucketAclOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketAcl", i0)
	r0, _ = returns[0].(*s3.PutBucketAclOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) PutBucketAclRequest(i0 *s3.PutBucketAclInput) (r0 *request.Request, r1 *s3.PutBucketAclOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketAclRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.PutBucketAclOutput)
	return
}

func (d *S3Double) PutBucketAclWithContext(i0 context.Context, i1 *s3.PutBucketAclInput, i2 ...request.Option) (r0 *s3.PutBucketAclOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketAclWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.PutBucketAclOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakePutBucketAclWithContext(ctx context.Context, in *s3.PutBucketAclInput, _ ...request.Option) (*s3.PutBucketAclOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutBucketAcl cancelled", ctx.Err())
	default:
		return d.PutBucketAcl(in)
	}
}

func (d *S3Double) PutBucketAnalyticsConfiguration(i0 *s3.PutBucketAnalyticsConfigurationInput) (r0 *s3.PutBucketAnalyticsConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketAnalyticsConfiguration", i0)
	r0, _ = returns[0].(*s3.PutBucketAnalyticsConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) PutBucketAnalyticsConfigurationRequest(i0 *s3.PutBucketAnalyticsConfigurationInput) (r0 *request.Request, r1 *s3.PutBucketAnalyticsConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketAnalyticsConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.PutBucketAnalyticsConfigurationOutput)
	return
}

func (d *S3Double) PutBucketAnalyticsConfigurationWithContext(i0 context.Context, i1 *s3.PutBucketAnalyticsConfigurationInput, i2 ...request.Option) (r0 *s3.PutBucketAnalyticsConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketAnalyticsConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.PutBucketAnalyticsConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakePutBucketAnalyticsConfigurationWithContext(ctx context.Context, in *s3.PutBucketAnalyticsConfigurationInput, _ ...request.Option) (*s3.PutBucketAnalyticsConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutBucketAnalyticsConfiguration cancelled", ctx.Err())
	default:
		return d.PutBucketAnalyticsConfiguration(in)
	}
}

func (d *S3Double) PutBucketCors(i0 *s3.PutBucketCorsInput) (r0 *s3.PutBucketCorsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketCors", i0)
	r0, _ = returns[0].(*s3.PutBucketCorsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) PutBucketCorsRequest(i0 *s3.PutBucketCorsInput) (r0 *request.Request, r1 *s3.PutBucketCorsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketCorsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.PutBucketCorsOutput)
	return
}

func (d *S3Double) PutBucketCorsWithContext(i0 context.Context, i1 *s3.PutBucketCorsInput, i2 ...request.Option) (r0 *s3.PutBucketCorsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketCorsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.PutBucketCorsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakePutBucketCorsWithContext(ctx context.Context, in *s3.PutBucketCorsInput, _ ...request.Option) (*s3.PutBucketCorsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutBucketCors cancelled", ctx.Err())
	default:
		return d.PutBucketCors(in)
	}
}

func (d *S3Double) PutBucketEncryption(i0 *s3.PutBucketEncryptionInput) (r0 *s3.PutBucketEncryptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketEncryption", i0)
	r0, _ = returns[0].(*s3.PutBucketEncryptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) PutBucketEncryptionRequest(i0 *s3.PutBucketEncryptionInput) (r0 *request.Request, r1 *s3.PutBucketEncryptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketEncryptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.PutBucketEncryptionOutput)
	return
}

func (d *S3Double) PutBucketEncryptionWithContext(i0 context.Context, i1 *s3.PutBucketEncryptionInput, i2 ...request.Option) (r0 *s3.PutBucketEncryptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketEncryptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.PutBucketEncryptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakePutBucketEncryptionWithContext(ctx context.Context, in *s3.PutBucketEncryptionInput, _ ...request.Option) (*s3.PutBucketEncryptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutBucketEncryption cancelled", ctx.Err())
	default:
		return d.PutBucketEncryption(in)
	}
}

func (d *S3Double) PutBucketInventoryConfiguration(i0 *s3.PutBucketInventoryConfigurationInput) (r0 *s3.PutBucketInventoryConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketInventoryConfiguration", i0)
	r0, _ = returns[0].(*s3.PutBucketInventoryConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) PutBucketInventoryConfigurationRequest(i0 *s3.PutBucketInventoryConfigurationInput) (r0 *request.Request, r1 *s3.PutBucketInventoryConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketInventoryConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.PutBucketInventoryConfigurationOutput)
	return
}

func (d *S3Double) PutBucketInventoryConfigurationWithContext(i0 context.Context, i1 *s3.PutBucketInventoryConfigurationInput, i2 ...request.Option) (r0 *s3.PutBucketInventoryConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketInventoryConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.PutBucketInventoryConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakePutBucketInventoryConfigurationWithContext(ctx context.Context, in *s3.PutBucketInventoryConfigurationInput, _ ...request.Option) (*s3.PutBucketInventoryConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutBucketInventoryConfiguration cancelled", ctx.Err())
	default:
		return d.PutBucketInventoryConfiguration(in)
	}
}

func (d *S3Double) PutBucketLifecycle(i0 *s3.PutBucketLifecycleInput) (r0 *s3.PutBucketLifecycleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketLifecycle", i0)
	r0, _ = returns[0].(*s3.PutBucketLifecycleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) PutBucketLifecycleConfiguration(i0 *s3.PutBucketLifecycleConfigurationInput) (r0 *s3.PutBucketLifecycleConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketLifecycleConfiguration", i0)
	r0, _ = returns[0].(*s3.PutBucketLifecycleConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) PutBucketLifecycleConfigurationRequest(i0 *s3.PutBucketLifecycleConfigurationInput) (r0 *request.Request, r1 *s3.PutBucketLifecycleConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketLifecycleConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.PutBucketLifecycleConfigurationOutput)
	return
}

func (d *S3Double) PutBucketLifecycleConfigurationWithContext(i0 context.Context, i1 *s3.PutBucketLifecycleConfigurationInput, i2 ...request.Option) (r0 *s3.PutBucketLifecycleConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketLifecycleConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.PutBucketLifecycleConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakePutBucketLifecycleConfigurationWithContext(ctx context.Context, in *s3.PutBucketLifecycleConfigurationInput, _ ...request.Option) (*s3.PutBucketLifecycleConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutBucketLifecycleConfiguration cancelled", ctx.Err())
	default:
		return d.PutBucketLifecycleConfiguration(in)
	}
}

func (d *S3Double) PutBucketLifecycleRequest(i0 *s3.PutBucketLifecycleInput) (r0 *request.Request, r1 *s3.PutBucketLifecycleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketLifecycleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.PutBucketLifecycleOutput)
	return
}

func (d *S3Double) PutBucketLifecycleWithContext(i0 context.Context, i1 *s3.PutBucketLifecycleInput, i2 ...request.Option) (r0 *s3.PutBucketLifecycleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketLifecycleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.PutBucketLifecycleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakePutBucketLifecycleWithContext(ctx context.Context, in *s3.PutBucketLifecycleInput, _ ...request.Option) (*s3.PutBucketLifecycleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutBucketLifecycle cancelled", ctx.Err())
	default:
		return d.PutBucketLifecycle(in)
	}
}

func (d *S3Double) PutBucketLogging(i0 *s3.PutBucketLoggingInput) (r0 *s3.PutBucketLoggingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketLogging", i0)
	r0, _ = returns[0].(*s3.PutBucketLoggingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) PutBucketLoggingRequest(i0 *s3.PutBucketLoggingInput) (r0 *request.Request, r1 *s3.PutBucketLoggingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketLoggingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.PutBucketLoggingOutput)
	return
}

func (d *S3Double) PutBucketLoggingWithContext(i0 context.Context, i1 *s3.PutBucketLoggingInput, i2 ...request.Option) (r0 *s3.PutBucketLoggingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketLoggingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.PutBucketLoggingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakePutBucketLoggingWithContext(ctx context.Context, in *s3.PutBucketLoggingInput, _ ...request.Option) (*s3.PutBucketLoggingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutBucketLogging cancelled", ctx.Err())
	default:
		return d.PutBucketLogging(in)
	}
}

func (d *S3Double) PutBucketMetricsConfiguration(i0 *s3.PutBucketMetricsConfigurationInput) (r0 *s3.PutBucketMetricsConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketMetricsConfiguration", i0)
	r0, _ = returns[0].(*s3.PutBucketMetricsConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) PutBucketMetricsConfigurationRequest(i0 *s3.PutBucketMetricsConfigurationInput) (r0 *request.Request, r1 *s3.PutBucketMetricsConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketMetricsConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.PutBucketMetricsConfigurationOutput)
	return
}

func (d *S3Double) PutBucketMetricsConfigurationWithContext(i0 context.Context, i1 *s3.PutBucketMetricsConfigurationInput, i2 ...request.Option) (r0 *s3.PutBucketMetricsConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketMetricsConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.PutBucketMetricsConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakePutBucketMetricsConfigurationWithContext(ctx context.Context, in *s3.PutBucketMetricsConfigurationInput, _ ...request.Option) (*s3.PutBucketMetricsConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutBucketMetricsConfiguration cancelled", ctx.Err())
	default:
		return d.PutBucketMetricsConfiguration(in)
	}
}

func (d *S3Double) PutBucketNotification(i0 *s3.PutBucketNotificationInput) (r0 *s3.PutBucketNotificationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketNotification", i0)
	r0, _ = returns[0].(*s3.PutBucketNotificationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) PutBucketNotificationConfiguration(i0 *s3.PutBucketNotificationConfigurationInput) (r0 *s3.PutBucketNotificationConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketNotificationConfiguration", i0)
	r0, _ = returns[0].(*s3.PutBucketNotificationConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) PutBucketNotificationConfigurationRequest(i0 *s3.PutBucketNotificationConfigurationInput) (r0 *request.Request, r1 *s3.PutBucketNotificationConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketNotificationConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.PutBucketNotificationConfigurationOutput)
	return
}

func (d *S3Double) PutBucketNotificationConfigurationWithContext(i0 context.Context, i1 *s3.PutBucketNotificationConfigurationInput, i2 ...request.Option) (r0 *s3.PutBucketNotificationConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketNotificationConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.PutBucketNotificationConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakePutBucketNotificationConfigurationWithContext(ctx context.Context, in *s3.PutBucketNotificationConfigurationInput, _ ...request.Option) (*s3.PutBucketNotificationConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutBucketNotificationConfiguration cancelled", ctx.Err())
	default:
		return d.PutBucketNotificationConfiguration(in)
	}
}

func (d *S3Double) PutBucketNotificationRequest(i0 *s3.PutBucketNotificationInput) (r0 *request.Request, r1 *s3.PutBucketNotificationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketNotificationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.PutBucketNotificationOutput)
	return
}

func (d *S3Double) PutBucketNotificationWithContext(i0 context.Context, i1 *s3.PutBucketNotificationInput, i2 ...request.Option) (r0 *s3.PutBucketNotificationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketNotificationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.PutBucketNotificationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakePutBucketNotificationWithContext(ctx context.Context, in *s3.PutBucketNotificationInput, _ ...request.Option) (*s3.PutBucketNotificationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutBucketNotification cancelled", ctx.Err())
	default:
		return d.PutBucketNotification(in)
	}
}

func (d *S3Double) PutBucketPolicy(i0 *s3.PutBucketPolicyInput) (r0 *s3.PutBucketPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketPolicy", i0)
	r0, _ = returns[0].(*s3.PutBucketPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) PutBucketPolicyRequest(i0 *s3.PutBucketPolicyInput) (r0 *request.Request, r1 *s3.PutBucketPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.PutBucketPolicyOutput)
	return
}

func (d *S3Double) PutBucketPolicyWithContext(i0 context.Context, i1 *s3.PutBucketPolicyInput, i2 ...request.Option) (r0 *s3.PutBucketPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.PutBucketPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakePutBucketPolicyWithContext(ctx context.Context, in *s3.PutBucketPolicyInput, _ ...request.Option) (*s3.PutBucketPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutBucketPolicy cancelled", ctx.Err())
	default:
		return d.PutBucketPolicy(in)
	}
}

func (d *S3Double) PutBucketReplication(i0 *s3.PutBucketReplicationInput) (r0 *s3.PutBucketReplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketReplication", i0)
	r0, _ = returns[0].(*s3.PutBucketReplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) PutBucketReplicationRequest(i0 *s3.PutBucketReplicationInput) (r0 *request.Request, r1 *s3.PutBucketReplicationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketReplicationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.PutBucketReplicationOutput)
	return
}

func (d *S3Double) PutBucketReplicationWithContext(i0 context.Context, i1 *s3.PutBucketReplicationInput, i2 ...request.Option) (r0 *s3.PutBucketReplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketReplicationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.PutBucketReplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakePutBucketReplicationWithContext(ctx context.Context, in *s3.PutBucketReplicationInput, _ ...request.Option) (*s3.PutBucketReplicationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutBucketReplication cancelled", ctx.Err())
	default:
		return d.PutBucketReplication(in)
	}
}

func (d *S3Double) PutBucketRequestPayment(i0 *s3.PutBucketRequestPaymentInput) (r0 *s3.PutBucketRequestPaymentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketRequestPayment", i0)
	r0, _ = returns[0].(*s3.PutBucketRequestPaymentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) PutBucketRequestPaymentRequest(i0 *s3.PutBucketRequestPaymentInput) (r0 *request.Request, r1 *s3.PutBucketRequestPaymentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketRequestPaymentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.PutBucketRequestPaymentOutput)
	return
}

func (d *S3Double) PutBucketRequestPaymentWithContext(i0 context.Context, i1 *s3.PutBucketRequestPaymentInput, i2 ...request.Option) (r0 *s3.PutBucketRequestPaymentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketRequestPaymentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.PutBucketRequestPaymentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakePutBucketRequestPaymentWithContext(ctx context.Context, in *s3.PutBucketRequestPaymentInput, _ ...request.Option) (*s3.PutBucketRequestPaymentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutBucketRequestPayment cancelled", ctx.Err())
	default:
		return d.PutBucketRequestPayment(in)
	}
}

func (d *S3Double) PutBucketTagging(i0 *s3.PutBucketTaggingInput) (r0 *s3.PutBucketTaggingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketTagging", i0)
	r0, _ = returns[0].(*s3.PutBucketTaggingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) PutBucketTaggingRequest(i0 *s3.PutBucketTaggingInput) (r0 *request.Request, r1 *s3.PutBucketTaggingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketTaggingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.PutBucketTaggingOutput)
	return
}

func (d *S3Double) PutBucketTaggingWithContext(i0 context.Context, i1 *s3.PutBucketTaggingInput, i2 ...request.Option) (r0 *s3.PutBucketTaggingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketTaggingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.PutBucketTaggingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakePutBucketTaggingWithContext(ctx context.Context, in *s3.PutBucketTaggingInput, _ ...request.Option) (*s3.PutBucketTaggingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutBucketTagging cancelled", ctx.Err())
	default:
		return d.PutBucketTagging(in)
	}
}

func (d *S3Double) PutBucketVersioning(i0 *s3.PutBucketVersioningInput) (r0 *s3.PutBucketVersioningOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketVersioning", i0)
	r0, _ = returns[0].(*s3.PutBucketVersioningOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) PutBucketVersioningRequest(i0 *s3.PutBucketVersioningInput) (r0 *request.Request, r1 *s3.PutBucketVersioningOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketVersioningRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.PutBucketVersioningOutput)
	return
}

func (d *S3Double) PutBucketVersioningWithContext(i0 context.Context, i1 *s3.PutBucketVersioningInput, i2 ...request.Option) (r0 *s3.PutBucketVersioningOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketVersioningWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.PutBucketVersioningOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakePutBucketVersioningWithContext(ctx context.Context, in *s3.PutBucketVersioningInput, _ ...request.Option) (*s3.PutBucketVersioningOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutBucketVersioning cancelled", ctx.Err())
	default:
		return d.PutBucketVersioning(in)
	}
}

func (d *S3Double) PutBucketWebsite(i0 *s3.PutBucketWebsiteInput) (r0 *s3.PutBucketWebsiteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketWebsite", i0)
	r0, _ = returns[0].(*s3.PutBucketWebsiteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) PutBucketWebsiteRequest(i0 *s3.PutBucketWebsiteInput) (r0 *request.Request, r1 *s3.PutBucketWebsiteOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketWebsiteRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.PutBucketWebsiteOutput)
	return
}

func (d *S3Double) PutBucketWebsiteWithContext(i0 context.Context, i1 *s3.PutBucketWebsiteInput, i2 ...request.Option) (r0 *s3.PutBucketWebsiteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBucketWebsiteWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.PutBucketWebsiteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakePutBucketWebsiteWithContext(ctx context.Context, in *s3.PutBucketWebsiteInput, _ ...request.Option) (*s3.PutBucketWebsiteOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutBucketWebsite cancelled", ctx.Err())
	default:
		return d.PutBucketWebsite(in)
	}
}

func (d *S3Double) PutObject(i0 *s3.PutObjectInput) (r0 *s3.PutObjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutObject", i0)
	r0, _ = returns[0].(*s3.PutObjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) PutObjectAcl(i0 *s3.PutObjectAclInput) (r0 *s3.PutObjectAclOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutObjectAcl", i0)
	r0, _ = returns[0].(*s3.PutObjectAclOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) PutObjectAclRequest(i0 *s3.PutObjectAclInput) (r0 *request.Request, r1 *s3.PutObjectAclOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutObjectAclRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.PutObjectAclOutput)
	return
}

func (d *S3Double) PutObjectAclWithContext(i0 context.Context, i1 *s3.PutObjectAclInput, i2 ...request.Option) (r0 *s3.PutObjectAclOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutObjectAclWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.PutObjectAclOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakePutObjectAclWithContext(ctx context.Context, in *s3.PutObjectAclInput, _ ...request.Option) (*s3.PutObjectAclOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutObjectAcl cancelled", ctx.Err())
	default:
		return d.PutObjectAcl(in)
	}
}

func (d *S3Double) PutObjectLegalHold(i0 *s3.PutObjectLegalHoldInput) (r0 *s3.PutObjectLegalHoldOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutObjectLegalHold", i0)
	r0, _ = returns[0].(*s3.PutObjectLegalHoldOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) PutObjectLegalHoldRequest(i0 *s3.PutObjectLegalHoldInput) (r0 *request.Request, r1 *s3.PutObjectLegalHoldOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutObjectLegalHoldRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.PutObjectLegalHoldOutput)
	return
}

func (d *S3Double) PutObjectLegalHoldWithContext(i0 context.Context, i1 *s3.PutObjectLegalHoldInput, i2 ...request.Option) (r0 *s3.PutObjectLegalHoldOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutObjectLegalHoldWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.PutObjectLegalHoldOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakePutObjectLegalHoldWithContext(ctx context.Context, in *s3.PutObjectLegalHoldInput, _ ...request.Option) (*s3.PutObjectLegalHoldOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutObjectLegalHold cancelled", ctx.Err())
	default:
		return d.PutObjectLegalHold(in)
	}
}

func (d *S3Double) PutObjectLockConfiguration(i0 *s3.PutObjectLockConfigurationInput) (r0 *s3.PutObjectLockConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutObjectLockConfiguration", i0)
	r0, _ = returns[0].(*s3.PutObjectLockConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) PutObjectLockConfigurationRequest(i0 *s3.PutObjectLockConfigurationInput) (r0 *request.Request, r1 *s3.PutObjectLockConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutObjectLockConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.PutObjectLockConfigurationOutput)
	return
}

func (d *S3Double) PutObjectLockConfigurationWithContext(i0 context.Context, i1 *s3.PutObjectLockConfigurationInput, i2 ...request.Option) (r0 *s3.PutObjectLockConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutObjectLockConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.PutObjectLockConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakePutObjectLockConfigurationWithContext(ctx context.Context, in *s3.PutObjectLockConfigurationInput, _ ...request.Option) (*s3.PutObjectLockConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutObjectLockConfiguration cancelled", ctx.Err())
	default:
		return d.PutObjectLockConfiguration(in)
	}
}

func (d *S3Double) PutObjectRequest(i0 *s3.PutObjectInput) (r0 *request.Request, r1 *s3.PutObjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutObjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.PutObjectOutput)
	return
}

func (d *S3Double) PutObjectRetention(i0 *s3.PutObjectRetentionInput) (r0 *s3.PutObjectRetentionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutObjectRetention", i0)
	r0, _ = returns[0].(*s3.PutObjectRetentionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) PutObjectRetentionRequest(i0 *s3.PutObjectRetentionInput) (r0 *request.Request, r1 *s3.PutObjectRetentionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutObjectRetentionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.PutObjectRetentionOutput)
	return
}

func (d *S3Double) PutObjectRetentionWithContext(i0 context.Context, i1 *s3.PutObjectRetentionInput, i2 ...request.Option) (r0 *s3.PutObjectRetentionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutObjectRetentionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.PutObjectRetentionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakePutObjectRetentionWithContext(ctx context.Context, in *s3.PutObjectRetentionInput, _ ...request.Option) (*s3.PutObjectRetentionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutObjectRetention cancelled", ctx.Err())
	default:
		return d.PutObjectRetention(in)
	}
}

func (d *S3Double) PutObjectTagging(i0 *s3.PutObjectTaggingInput) (r0 *s3.PutObjectTaggingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutObjectTagging", i0)
	r0, _ = returns[0].(*s3.PutObjectTaggingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) PutObjectTaggingRequest(i0 *s3.PutObjectTaggingInput) (r0 *request.Request, r1 *s3.PutObjectTaggingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutObjectTaggingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.PutObjectTaggingOutput)
	return
}

func (d *S3Double) PutObjectTaggingWithContext(i0 context.Context, i1 *s3.PutObjectTaggingInput, i2 ...request.Option) (r0 *s3.PutObjectTaggingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutObjectTaggingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.PutObjectTaggingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakePutObjectTaggingWithContext(ctx context.Context, in *s3.PutObjectTaggingInput, _ ...request.Option) (*s3.PutObjectTaggingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutObjectTagging cancelled", ctx.Err())
	default:
		return d.PutObjectTagging(in)
	}
}

func (d *S3Double) PutObjectWithContext(i0 context.Context, i1 *s3.PutObjectInput, i2 ...request.Option) (r0 *s3.PutObjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutObjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.PutObjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakePutObjectWithContext(ctx context.Context, in *s3.PutObjectInput, _ ...request.Option) (*s3.PutObjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutObject cancelled", ctx.Err())
	default:
		return d.PutObject(in)
	}
}

func (d *S3Double) PutPublicAccessBlock(i0 *s3.PutPublicAccessBlockInput) (r0 *s3.PutPublicAccessBlockOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutPublicAccessBlock", i0)
	r0, _ = returns[0].(*s3.PutPublicAccessBlockOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) PutPublicAccessBlockRequest(i0 *s3.PutPublicAccessBlockInput) (r0 *request.Request, r1 *s3.PutPublicAccessBlockOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutPublicAccessBlockRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.PutPublicAccessBlockOutput)
	return
}

func (d *S3Double) PutPublicAccessBlockWithContext(i0 context.Context, i1 *s3.PutPublicAccessBlockInput, i2 ...request.Option) (r0 *s3.PutPublicAccessBlockOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutPublicAccessBlockWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.PutPublicAccessBlockOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakePutPublicAccessBlockWithContext(ctx context.Context, in *s3.PutPublicAccessBlockInput, _ ...request.Option) (*s3.PutPublicAccessBlockOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutPublicAccessBlock cancelled", ctx.Err())
	default:
		return d.PutPublicAccessBlock(in)
	}
}

func (d *S3Double) RestoreObject(i0 *s3.RestoreObjectInput) (r0 *s3.RestoreObjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreObject", i0)
	r0, _ = returns[0].(*s3.RestoreObjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) RestoreObjectRequest(i0 *s3.RestoreObjectInput) (r0 *request.Request, r1 *s3.RestoreObjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreObjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.RestoreObjectOutput)
	return
}

func (d *S3Double) RestoreObjectWithContext(i0 context.Context, i1 *s3.RestoreObjectInput, i2 ...request.Option) (r0 *s3.RestoreObjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreObjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.RestoreObjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeRestoreObjectWithContext(ctx context.Context, in *s3.RestoreObjectInput, _ ...request.Option) (*s3.RestoreObjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RestoreObject cancelled", ctx.Err())
	default:
		return d.RestoreObject(in)
	}
}

func (d *S3Double) SelectObjectContent(i0 *s3.SelectObjectContentInput) (r0 *s3.SelectObjectContentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SelectObjectContent", i0)
	r0, _ = returns[0].(*s3.SelectObjectContentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) SelectObjectContentRequest(i0 *s3.SelectObjectContentInput) (r0 *request.Request, r1 *s3.SelectObjectContentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SelectObjectContentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.SelectObjectContentOutput)
	return
}

func (d *S3Double) SelectObjectContentWithContext(i0 context.Context, i1 *s3.SelectObjectContentInput, i2 ...request.Option) (r0 *s3.SelectObjectContentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SelectObjectContentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.SelectObjectContentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeSelectObjectContentWithContext(ctx context.Context, in *s3.SelectObjectContentInput, _ ...request.Option) (*s3.SelectObjectContentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SelectObjectContent cancelled", ctx.Err())
	default:
		return d.SelectObjectContent(in)
	}
}

func (d *S3Double) UploadPart(i0 *s3.UploadPartInput) (r0 *s3.UploadPartOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UploadPart", i0)
	r0, _ = returns[0].(*s3.UploadPartOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) UploadPartCopy(i0 *s3.UploadPartCopyInput) (r0 *s3.UploadPartCopyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UploadPartCopy", i0)
	r0, _ = returns[0].(*s3.UploadPartCopyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) UploadPartCopyRequest(i0 *s3.UploadPartCopyInput) (r0 *request.Request, r1 *s3.UploadPartCopyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UploadPartCopyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.UploadPartCopyOutput)
	return
}

func (d *S3Double) UploadPartCopyWithContext(i0 context.Context, i1 *s3.UploadPartCopyInput, i2 ...request.Option) (r0 *s3.UploadPartCopyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UploadPartCopyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.UploadPartCopyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeUploadPartCopyWithContext(ctx context.Context, in *s3.UploadPartCopyInput, _ ...request.Option) (*s3.UploadPartCopyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UploadPartCopy cancelled", ctx.Err())
	default:
		return d.UploadPartCopy(in)
	}
}

func (d *S3Double) UploadPartRequest(i0 *s3.UploadPartInput) (r0 *request.Request, r1 *s3.UploadPartOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UploadPartRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*s3.UploadPartOutput)
	return
}

func (d *S3Double) UploadPartWithContext(i0 context.Context, i1 *s3.UploadPartInput, i2 ...request.Option) (r0 *s3.UploadPartOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UploadPartWithContext", i0, i1, i2)
	r0, _ = returns[0].(*s3.UploadPartOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *S3Double) fakeUploadPartWithContext(ctx context.Context, in *s3.UploadPartInput, _ ...request.Option) (*s3.UploadPartOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UploadPart cancelled", ctx.Err())
	default:
		return d.UploadPart(in)
	}
}

func (d *S3Double) WaitUntilBucketExists(i0 *s3.HeadBucketInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilBucketExists", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *S3Double) fakeWaitUntilBucketExists(in *s3.HeadBucketInput) error {
	return d.WaitUntil("BucketExists", waiters, in)
}

func (d *S3Double) WaitUntilBucketExistsWithContext(i0 context.Context, i1 *s3.HeadBucketInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilBucketExistsWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *S3Double) fakeWaitUntilBucketExistsWithContext(ctx context.Context, in *s3.HeadBucketInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("BucketExists", waiters, ctx, in, waitOption...)
}

func (d *S3Double) WaitUntilBucketNotExists(i0 *s3.HeadBucketInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilBucketNotExists", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *S3Double) fakeWaitUntilBucketNotExists(in *s3.HeadBucketInput) error {
	return d.WaitUntil("BucketNotExists", waiters, in)
}

func (d *S3Double) WaitUntilBucketNotExistsWithContext(i0 context.Context, i1 *s3.HeadBucketInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilBucketNotExistsWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *S3Double) fakeWaitUntilBucketNotExistsWithContext(ctx context.Context, in *s3.HeadBucketInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("BucketNotExists", waiters, ctx, in, waitOption...)
}

func (d *S3Double) WaitUntilObjectExists(i0 *s3.HeadObjectInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilObjectExists", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *S3Double) fakeWaitUntilObjectExists(in *s3.HeadObjectInput) error {
	return d.WaitUntil("ObjectExists", waiters, in)
}

func (d *S3Double) WaitUntilObjectExistsWithContext(i0 context.Context, i1 *s3.HeadObjectInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilObjectExistsWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *S3Double) fakeWaitUntilObjectExistsWithContext(ctx context.Context, in *s3.HeadObjectInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("ObjectExists", waiters, ctx, in, waitOption...)
}

func (d *S3Double) WaitUntilObjectNotExists(i0 *s3.HeadObjectInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilObjectNotExists", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *S3Double) fakeWaitUntilObjectNotExists(in *s3.HeadObjectInput) error {
	return d.WaitUntil("ObjectNotExists", waiters, in)
}

func (d *S3Double) WaitUntilObjectNotExistsWithContext(i0 context.Context, i1 *s3.HeadObjectInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilObjectNotExistsWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *S3Double) fakeWaitUntilObjectNotExistsWithContext(ctx context.Context, in *s3.HeadObjectInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("ObjectNotExists", waiters, ctx, in, waitOption...)
}
