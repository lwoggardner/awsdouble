// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:12:39+11:00

// Package elasticinferencedouble provides a TestDouble implementation of elasticinferenceiface.ElasticInferenceAPI
package elasticinferencedouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/elasticinference"
	"github.com/aws/aws-sdk-go/service/elasticinference/elasticinferenceiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// ElasticInferenceDouble is TestDouble for elasticinferenceiface.ElasticInferenceAPI
type ElasticInferenceDouble struct {
	elasticinferenceiface.ElasticInferenceAPI
	*awsdouble.AWSTestDouble
}

// Constructor for ElasticInferenceDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *ElasticInferenceDouble {
	result := &ElasticInferenceDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*elasticinferenceiface.ElasticInferenceAPI)(nil), configurators...)
	return result
}

func (d *ElasticInferenceDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *ElasticInferenceDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	default:
		return nil
	}
}

func (d *ElasticInferenceDouble) ListTagsForResource(i0 *elasticinference.ListTagsForResourceInput) (r0 *elasticinference.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*elasticinference.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticInferenceDouble) ListTagsForResourceRequest(i0 *elasticinference.ListTagsForResourceInput) (r0 *request.Request, r1 *elasticinference.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticinference.ListTagsForResourceOutput)
	return
}

func (d *ElasticInferenceDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *elasticinference.ListTagsForResourceInput, i2 ...request.Option) (r0 *elasticinference.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticinference.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticInferenceDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *elasticinference.ListTagsForResourceInput, _ ...request.Option) (*elasticinference.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *ElasticInferenceDouble) TagResource(i0 *elasticinference.TagResourceInput) (r0 *elasticinference.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*elasticinference.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticInferenceDouble) TagResourceRequest(i0 *elasticinference.TagResourceInput) (r0 *request.Request, r1 *elasticinference.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticinference.TagResourceOutput)
	return
}

func (d *ElasticInferenceDouble) TagResourceWithContext(i0 context.Context, i1 *elasticinference.TagResourceInput, i2 ...request.Option) (r0 *elasticinference.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticinference.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticInferenceDouble) fakeTagResourceWithContext(ctx context.Context, in *elasticinference.TagResourceInput, _ ...request.Option) (*elasticinference.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *ElasticInferenceDouble) UntagResource(i0 *elasticinference.UntagResourceInput) (r0 *elasticinference.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*elasticinference.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticInferenceDouble) UntagResourceRequest(i0 *elasticinference.UntagResourceInput) (r0 *request.Request, r1 *elasticinference.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*elasticinference.UntagResourceOutput)
	return
}

func (d *ElasticInferenceDouble) UntagResourceWithContext(i0 context.Context, i1 *elasticinference.UntagResourceInput, i2 ...request.Option) (r0 *elasticinference.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*elasticinference.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ElasticInferenceDouble) fakeUntagResourceWithContext(ctx context.Context, in *elasticinference.UntagResourceInput, _ ...request.Option) (*elasticinference.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}
