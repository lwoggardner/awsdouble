// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:11:36+11:00

// Package cloudhsmv2double provides a TestDouble implementation of cloudhsmv2iface.CloudHSMV2API
package cloudhsmv2double

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/cloudhsmv2"
	"github.com/aws/aws-sdk-go/service/cloudhsmv2/cloudhsmv2iface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// CloudHSMV2Double is TestDouble for cloudhsmv2iface.CloudHSMV2API
type CloudHSMV2Double struct {
	cloudhsmv2iface.CloudHSMV2API
	*awsdouble.AWSTestDouble
}

// Constructor for CloudHSMV2Double
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *CloudHSMV2Double {
	result := &CloudHSMV2Double{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*cloudhsmv2iface.CloudHSMV2API)(nil), configurators...)
	return result
}

func (d *CloudHSMV2Double) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *CloudHSMV2Double) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CopyBackupToRegionWithContext":
		return m.Fake(d.fakeCopyBackupToRegionWithContext)

	case "CreateClusterWithContext":
		return m.Fake(d.fakeCreateClusterWithContext)

	case "CreateHsmWithContext":
		return m.Fake(d.fakeCreateHsmWithContext)

	case "DeleteBackupWithContext":
		return m.Fake(d.fakeDeleteBackupWithContext)

	case "DeleteClusterWithContext":
		return m.Fake(d.fakeDeleteClusterWithContext)

	case "DeleteHsmWithContext":
		return m.Fake(d.fakeDeleteHsmWithContext)

	case "DescribeBackupsPages":
		return m.Fake(d.fakeDescribeBackupsPages)

	case "DescribeBackupsPagesWithContext":
		return m.Fake(d.fakeDescribeBackupsPagesWithContext)

	case "DescribeBackupsWithContext":
		return m.Fake(d.fakeDescribeBackupsWithContext)

	case "DescribeClustersPages":
		return m.Fake(d.fakeDescribeClustersPages)

	case "DescribeClustersPagesWithContext":
		return m.Fake(d.fakeDescribeClustersPagesWithContext)

	case "DescribeClustersWithContext":
		return m.Fake(d.fakeDescribeClustersWithContext)

	case "InitializeClusterWithContext":
		return m.Fake(d.fakeInitializeClusterWithContext)

	case "ListTagsPages":
		return m.Fake(d.fakeListTagsPages)

	case "ListTagsPagesWithContext":
		return m.Fake(d.fakeListTagsPagesWithContext)

	case "ListTagsWithContext":
		return m.Fake(d.fakeListTagsWithContext)

	case "RestoreBackupWithContext":
		return m.Fake(d.fakeRestoreBackupWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	default:
		return nil
	}
}

func (d *CloudHSMV2Double) CopyBackupToRegion(i0 *cloudhsmv2.CopyBackupToRegionInput) (r0 *cloudhsmv2.CopyBackupToRegionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyBackupToRegion", i0)
	r0, _ = returns[0].(*cloudhsmv2.CopyBackupToRegionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMV2Double) CopyBackupToRegionRequest(i0 *cloudhsmv2.CopyBackupToRegionInput) (r0 *request.Request, r1 *cloudhsmv2.CopyBackupToRegionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyBackupToRegionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudhsmv2.CopyBackupToRegionOutput)
	return
}

func (d *CloudHSMV2Double) CopyBackupToRegionWithContext(i0 context.Context, i1 *cloudhsmv2.CopyBackupToRegionInput, i2 ...request.Option) (r0 *cloudhsmv2.CopyBackupToRegionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyBackupToRegionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudhsmv2.CopyBackupToRegionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMV2Double) fakeCopyBackupToRegionWithContext(ctx context.Context, in *cloudhsmv2.CopyBackupToRegionInput, _ ...request.Option) (*cloudhsmv2.CopyBackupToRegionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CopyBackupToRegion cancelled", ctx.Err())
	default:
		return d.CopyBackupToRegion(in)
	}
}

func (d *CloudHSMV2Double) CreateCluster(i0 *cloudhsmv2.CreateClusterInput) (r0 *cloudhsmv2.CreateClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCluster", i0)
	r0, _ = returns[0].(*cloudhsmv2.CreateClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMV2Double) CreateClusterRequest(i0 *cloudhsmv2.CreateClusterInput) (r0 *request.Request, r1 *cloudhsmv2.CreateClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudhsmv2.CreateClusterOutput)
	return
}

func (d *CloudHSMV2Double) CreateClusterWithContext(i0 context.Context, i1 *cloudhsmv2.CreateClusterInput, i2 ...request.Option) (r0 *cloudhsmv2.CreateClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudhsmv2.CreateClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMV2Double) fakeCreateClusterWithContext(ctx context.Context, in *cloudhsmv2.CreateClusterInput, _ ...request.Option) (*cloudhsmv2.CreateClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateCluster cancelled", ctx.Err())
	default:
		return d.CreateCluster(in)
	}
}

func (d *CloudHSMV2Double) CreateHsm(i0 *cloudhsmv2.CreateHsmInput) (r0 *cloudhsmv2.CreateHsmOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHsm", i0)
	r0, _ = returns[0].(*cloudhsmv2.CreateHsmOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMV2Double) CreateHsmRequest(i0 *cloudhsmv2.CreateHsmInput) (r0 *request.Request, r1 *cloudhsmv2.CreateHsmOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHsmRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudhsmv2.CreateHsmOutput)
	return
}

func (d *CloudHSMV2Double) CreateHsmWithContext(i0 context.Context, i1 *cloudhsmv2.CreateHsmInput, i2 ...request.Option) (r0 *cloudhsmv2.CreateHsmOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHsmWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudhsmv2.CreateHsmOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMV2Double) fakeCreateHsmWithContext(ctx context.Context, in *cloudhsmv2.CreateHsmInput, _ ...request.Option) (*cloudhsmv2.CreateHsmOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateHsm cancelled", ctx.Err())
	default:
		return d.CreateHsm(in)
	}
}

func (d *CloudHSMV2Double) DeleteBackup(i0 *cloudhsmv2.DeleteBackupInput) (r0 *cloudhsmv2.DeleteBackupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBackup", i0)
	r0, _ = returns[0].(*cloudhsmv2.DeleteBackupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMV2Double) DeleteBackupRequest(i0 *cloudhsmv2.DeleteBackupInput) (r0 *request.Request, r1 *cloudhsmv2.DeleteBackupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBackupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudhsmv2.DeleteBackupOutput)
	return
}

func (d *CloudHSMV2Double) DeleteBackupWithContext(i0 context.Context, i1 *cloudhsmv2.DeleteBackupInput, i2 ...request.Option) (r0 *cloudhsmv2.DeleteBackupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBackupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudhsmv2.DeleteBackupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMV2Double) fakeDeleteBackupWithContext(ctx context.Context, in *cloudhsmv2.DeleteBackupInput, _ ...request.Option) (*cloudhsmv2.DeleteBackupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteBackup cancelled", ctx.Err())
	default:
		return d.DeleteBackup(in)
	}
}

func (d *CloudHSMV2Double) DeleteCluster(i0 *cloudhsmv2.DeleteClusterInput) (r0 *cloudhsmv2.DeleteClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCluster", i0)
	r0, _ = returns[0].(*cloudhsmv2.DeleteClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMV2Double) DeleteClusterRequest(i0 *cloudhsmv2.DeleteClusterInput) (r0 *request.Request, r1 *cloudhsmv2.DeleteClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudhsmv2.DeleteClusterOutput)
	return
}

func (d *CloudHSMV2Double) DeleteClusterWithContext(i0 context.Context, i1 *cloudhsmv2.DeleteClusterInput, i2 ...request.Option) (r0 *cloudhsmv2.DeleteClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudhsmv2.DeleteClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMV2Double) fakeDeleteClusterWithContext(ctx context.Context, in *cloudhsmv2.DeleteClusterInput, _ ...request.Option) (*cloudhsmv2.DeleteClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteCluster cancelled", ctx.Err())
	default:
		return d.DeleteCluster(in)
	}
}

func (d *CloudHSMV2Double) DeleteHsm(i0 *cloudhsmv2.DeleteHsmInput) (r0 *cloudhsmv2.DeleteHsmOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteHsm", i0)
	r0, _ = returns[0].(*cloudhsmv2.DeleteHsmOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMV2Double) DeleteHsmRequest(i0 *cloudhsmv2.DeleteHsmInput) (r0 *request.Request, r1 *cloudhsmv2.DeleteHsmOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteHsmRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudhsmv2.DeleteHsmOutput)
	return
}

func (d *CloudHSMV2Double) DeleteHsmWithContext(i0 context.Context, i1 *cloudhsmv2.DeleteHsmInput, i2 ...request.Option) (r0 *cloudhsmv2.DeleteHsmOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteHsmWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudhsmv2.DeleteHsmOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMV2Double) fakeDeleteHsmWithContext(ctx context.Context, in *cloudhsmv2.DeleteHsmInput, _ ...request.Option) (*cloudhsmv2.DeleteHsmOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteHsm cancelled", ctx.Err())
	default:
		return d.DeleteHsm(in)
	}
}

func (d *CloudHSMV2Double) DescribeBackups(i0 *cloudhsmv2.DescribeBackupsInput) (r0 *cloudhsmv2.DescribeBackupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBackups", i0)
	r0, _ = returns[0].(*cloudhsmv2.DescribeBackupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMV2Double) DescribeBackupsPages(i0 *cloudhsmv2.DescribeBackupsInput, i1 func(*cloudhsmv2.DescribeBackupsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBackupsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudHSMV2Double) fakeDescribeBackupsPages(in *cloudhsmv2.DescribeBackupsInput, pager func(*cloudhsmv2.DescribeBackupsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeBackups", paginators, in, pager)
}

func (d *CloudHSMV2Double) DescribeBackupsPagesWithContext(i0 context.Context, i1 *cloudhsmv2.DescribeBackupsInput, i2 func(*cloudhsmv2.DescribeBackupsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBackupsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudHSMV2Double) fakeDescribeBackupsPagesWithContext(ctx context.Context, in *cloudhsmv2.DescribeBackupsInput, pager func(*cloudhsmv2.DescribeBackupsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeBackups", paginators, ctx, in, pager, options...)
}

func (d *CloudHSMV2Double) DescribeBackupsRequest(i0 *cloudhsmv2.DescribeBackupsInput) (r0 *request.Request, r1 *cloudhsmv2.DescribeBackupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBackupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudhsmv2.DescribeBackupsOutput)
	return
}

func (d *CloudHSMV2Double) DescribeBackupsWithContext(i0 context.Context, i1 *cloudhsmv2.DescribeBackupsInput, i2 ...request.Option) (r0 *cloudhsmv2.DescribeBackupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBackupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudhsmv2.DescribeBackupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMV2Double) fakeDescribeBackupsWithContext(ctx context.Context, in *cloudhsmv2.DescribeBackupsInput, _ ...request.Option) (*cloudhsmv2.DescribeBackupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeBackups cancelled", ctx.Err())
	default:
		return d.DescribeBackups(in)
	}
}

func (d *CloudHSMV2Double) DescribeClusters(i0 *cloudhsmv2.DescribeClustersInput) (r0 *cloudhsmv2.DescribeClustersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusters", i0)
	r0, _ = returns[0].(*cloudhsmv2.DescribeClustersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMV2Double) DescribeClustersPages(i0 *cloudhsmv2.DescribeClustersInput, i1 func(*cloudhsmv2.DescribeClustersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClustersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudHSMV2Double) fakeDescribeClustersPages(in *cloudhsmv2.DescribeClustersInput, pager func(*cloudhsmv2.DescribeClustersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeClusters", paginators, in, pager)
}

func (d *CloudHSMV2Double) DescribeClustersPagesWithContext(i0 context.Context, i1 *cloudhsmv2.DescribeClustersInput, i2 func(*cloudhsmv2.DescribeClustersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClustersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudHSMV2Double) fakeDescribeClustersPagesWithContext(ctx context.Context, in *cloudhsmv2.DescribeClustersInput, pager func(*cloudhsmv2.DescribeClustersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeClusters", paginators, ctx, in, pager, options...)
}

func (d *CloudHSMV2Double) DescribeClustersRequest(i0 *cloudhsmv2.DescribeClustersInput) (r0 *request.Request, r1 *cloudhsmv2.DescribeClustersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClustersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudhsmv2.DescribeClustersOutput)
	return
}

func (d *CloudHSMV2Double) DescribeClustersWithContext(i0 context.Context, i1 *cloudhsmv2.DescribeClustersInput, i2 ...request.Option) (r0 *cloudhsmv2.DescribeClustersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClustersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudhsmv2.DescribeClustersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMV2Double) fakeDescribeClustersWithContext(ctx context.Context, in *cloudhsmv2.DescribeClustersInput, _ ...request.Option) (*cloudhsmv2.DescribeClustersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeClusters cancelled", ctx.Err())
	default:
		return d.DescribeClusters(in)
	}
}

func (d *CloudHSMV2Double) InitializeCluster(i0 *cloudhsmv2.InitializeClusterInput) (r0 *cloudhsmv2.InitializeClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("InitializeCluster", i0)
	r0, _ = returns[0].(*cloudhsmv2.InitializeClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMV2Double) InitializeClusterRequest(i0 *cloudhsmv2.InitializeClusterInput) (r0 *request.Request, r1 *cloudhsmv2.InitializeClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("InitializeClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudhsmv2.InitializeClusterOutput)
	return
}

func (d *CloudHSMV2Double) InitializeClusterWithContext(i0 context.Context, i1 *cloudhsmv2.InitializeClusterInput, i2 ...request.Option) (r0 *cloudhsmv2.InitializeClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("InitializeClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudhsmv2.InitializeClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMV2Double) fakeInitializeClusterWithContext(ctx context.Context, in *cloudhsmv2.InitializeClusterInput, _ ...request.Option) (*cloudhsmv2.InitializeClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "InitializeCluster cancelled", ctx.Err())
	default:
		return d.InitializeCluster(in)
	}
}

func (d *CloudHSMV2Double) ListTags(i0 *cloudhsmv2.ListTagsInput) (r0 *cloudhsmv2.ListTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTags", i0)
	r0, _ = returns[0].(*cloudhsmv2.ListTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMV2Double) ListTagsPages(i0 *cloudhsmv2.ListTagsInput, i1 func(*cloudhsmv2.ListTagsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudHSMV2Double) fakeListTagsPages(in *cloudhsmv2.ListTagsInput, pager func(*cloudhsmv2.ListTagsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTags", paginators, in, pager)
}

func (d *CloudHSMV2Double) ListTagsPagesWithContext(i0 context.Context, i1 *cloudhsmv2.ListTagsInput, i2 func(*cloudhsmv2.ListTagsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudHSMV2Double) fakeListTagsPagesWithContext(ctx context.Context, in *cloudhsmv2.ListTagsInput, pager func(*cloudhsmv2.ListTagsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTags", paginators, ctx, in, pager, options...)
}

func (d *CloudHSMV2Double) ListTagsRequest(i0 *cloudhsmv2.ListTagsInput) (r0 *request.Request, r1 *cloudhsmv2.ListTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudhsmv2.ListTagsOutput)
	return
}

func (d *CloudHSMV2Double) ListTagsWithContext(i0 context.Context, i1 *cloudhsmv2.ListTagsInput, i2 ...request.Option) (r0 *cloudhsmv2.ListTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudhsmv2.ListTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMV2Double) fakeListTagsWithContext(ctx context.Context, in *cloudhsmv2.ListTagsInput, _ ...request.Option) (*cloudhsmv2.ListTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTags cancelled", ctx.Err())
	default:
		return d.ListTags(in)
	}
}

func (d *CloudHSMV2Double) RestoreBackup(i0 *cloudhsmv2.RestoreBackupInput) (r0 *cloudhsmv2.RestoreBackupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreBackup", i0)
	r0, _ = returns[0].(*cloudhsmv2.RestoreBackupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMV2Double) RestoreBackupRequest(i0 *cloudhsmv2.RestoreBackupInput) (r0 *request.Request, r1 *cloudhsmv2.RestoreBackupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreBackupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudhsmv2.RestoreBackupOutput)
	return
}

func (d *CloudHSMV2Double) RestoreBackupWithContext(i0 context.Context, i1 *cloudhsmv2.RestoreBackupInput, i2 ...request.Option) (r0 *cloudhsmv2.RestoreBackupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreBackupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudhsmv2.RestoreBackupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMV2Double) fakeRestoreBackupWithContext(ctx context.Context, in *cloudhsmv2.RestoreBackupInput, _ ...request.Option) (*cloudhsmv2.RestoreBackupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RestoreBackup cancelled", ctx.Err())
	default:
		return d.RestoreBackup(in)
	}
}

func (d *CloudHSMV2Double) TagResource(i0 *cloudhsmv2.TagResourceInput) (r0 *cloudhsmv2.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*cloudhsmv2.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMV2Double) TagResourceRequest(i0 *cloudhsmv2.TagResourceInput) (r0 *request.Request, r1 *cloudhsmv2.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudhsmv2.TagResourceOutput)
	return
}

func (d *CloudHSMV2Double) TagResourceWithContext(i0 context.Context, i1 *cloudhsmv2.TagResourceInput, i2 ...request.Option) (r0 *cloudhsmv2.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudhsmv2.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMV2Double) fakeTagResourceWithContext(ctx context.Context, in *cloudhsmv2.TagResourceInput, _ ...request.Option) (*cloudhsmv2.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *CloudHSMV2Double) UntagResource(i0 *cloudhsmv2.UntagResourceInput) (r0 *cloudhsmv2.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*cloudhsmv2.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMV2Double) UntagResourceRequest(i0 *cloudhsmv2.UntagResourceInput) (r0 *request.Request, r1 *cloudhsmv2.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudhsmv2.UntagResourceOutput)
	return
}

func (d *CloudHSMV2Double) UntagResourceWithContext(i0 context.Context, i1 *cloudhsmv2.UntagResourceInput, i2 ...request.Option) (r0 *cloudhsmv2.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudhsmv2.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudHSMV2Double) fakeUntagResourceWithContext(ctx context.Context, in *cloudhsmv2.UntagResourceInput, _ ...request.Option) (*cloudhsmv2.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}
