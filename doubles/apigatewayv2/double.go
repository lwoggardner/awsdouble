// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:11:09+11:00

// Package apigatewayv2double provides a TestDouble implementation of apigatewayv2iface.ApiGatewayV2API
package apigatewayv2double

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/apigatewayv2"
	"github.com/aws/aws-sdk-go/service/apigatewayv2/apigatewayv2iface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// ApiGatewayV2Double is TestDouble for apigatewayv2iface.ApiGatewayV2API
type ApiGatewayV2Double struct {
	apigatewayv2iface.ApiGatewayV2API
	*awsdouble.AWSTestDouble
}

// Constructor for ApiGatewayV2Double
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *ApiGatewayV2Double {
	result := &ApiGatewayV2Double{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*apigatewayv2iface.ApiGatewayV2API)(nil), configurators...)
	return result
}

func (d *ApiGatewayV2Double) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *ApiGatewayV2Double) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CreateApiMappingWithContext":
		return m.Fake(d.fakeCreateApiMappingWithContext)

	case "CreateApiWithContext":
		return m.Fake(d.fakeCreateApiWithContext)

	case "CreateAuthorizerWithContext":
		return m.Fake(d.fakeCreateAuthorizerWithContext)

	case "CreateDeploymentWithContext":
		return m.Fake(d.fakeCreateDeploymentWithContext)

	case "CreateDomainNameWithContext":
		return m.Fake(d.fakeCreateDomainNameWithContext)

	case "CreateIntegrationResponseWithContext":
		return m.Fake(d.fakeCreateIntegrationResponseWithContext)

	case "CreateIntegrationWithContext":
		return m.Fake(d.fakeCreateIntegrationWithContext)

	case "CreateModelWithContext":
		return m.Fake(d.fakeCreateModelWithContext)

	case "CreateRouteResponseWithContext":
		return m.Fake(d.fakeCreateRouteResponseWithContext)

	case "CreateRouteWithContext":
		return m.Fake(d.fakeCreateRouteWithContext)

	case "CreateStageWithContext":
		return m.Fake(d.fakeCreateStageWithContext)

	case "DeleteApiMappingWithContext":
		return m.Fake(d.fakeDeleteApiMappingWithContext)

	case "DeleteApiWithContext":
		return m.Fake(d.fakeDeleteApiWithContext)

	case "DeleteAuthorizerWithContext":
		return m.Fake(d.fakeDeleteAuthorizerWithContext)

	case "DeleteCorsConfigurationWithContext":
		return m.Fake(d.fakeDeleteCorsConfigurationWithContext)

	case "DeleteDeploymentWithContext":
		return m.Fake(d.fakeDeleteDeploymentWithContext)

	case "DeleteDomainNameWithContext":
		return m.Fake(d.fakeDeleteDomainNameWithContext)

	case "DeleteIntegrationResponseWithContext":
		return m.Fake(d.fakeDeleteIntegrationResponseWithContext)

	case "DeleteIntegrationWithContext":
		return m.Fake(d.fakeDeleteIntegrationWithContext)

	case "DeleteModelWithContext":
		return m.Fake(d.fakeDeleteModelWithContext)

	case "DeleteRouteResponseWithContext":
		return m.Fake(d.fakeDeleteRouteResponseWithContext)

	case "DeleteRouteSettingsWithContext":
		return m.Fake(d.fakeDeleteRouteSettingsWithContext)

	case "DeleteRouteWithContext":
		return m.Fake(d.fakeDeleteRouteWithContext)

	case "DeleteStageWithContext":
		return m.Fake(d.fakeDeleteStageWithContext)

	case "GetApiMappingWithContext":
		return m.Fake(d.fakeGetApiMappingWithContext)

	case "GetApiMappingsWithContext":
		return m.Fake(d.fakeGetApiMappingsWithContext)

	case "GetApiWithContext":
		return m.Fake(d.fakeGetApiWithContext)

	case "GetApisWithContext":
		return m.Fake(d.fakeGetApisWithContext)

	case "GetAuthorizerWithContext":
		return m.Fake(d.fakeGetAuthorizerWithContext)

	case "GetAuthorizersWithContext":
		return m.Fake(d.fakeGetAuthorizersWithContext)

	case "GetDeploymentWithContext":
		return m.Fake(d.fakeGetDeploymentWithContext)

	case "GetDeploymentsWithContext":
		return m.Fake(d.fakeGetDeploymentsWithContext)

	case "GetDomainNameWithContext":
		return m.Fake(d.fakeGetDomainNameWithContext)

	case "GetDomainNamesWithContext":
		return m.Fake(d.fakeGetDomainNamesWithContext)

	case "GetIntegrationResponseWithContext":
		return m.Fake(d.fakeGetIntegrationResponseWithContext)

	case "GetIntegrationResponsesWithContext":
		return m.Fake(d.fakeGetIntegrationResponsesWithContext)

	case "GetIntegrationWithContext":
		return m.Fake(d.fakeGetIntegrationWithContext)

	case "GetIntegrationsWithContext":
		return m.Fake(d.fakeGetIntegrationsWithContext)

	case "GetModelTemplateWithContext":
		return m.Fake(d.fakeGetModelTemplateWithContext)

	case "GetModelWithContext":
		return m.Fake(d.fakeGetModelWithContext)

	case "GetModelsWithContext":
		return m.Fake(d.fakeGetModelsWithContext)

	case "GetRouteResponseWithContext":
		return m.Fake(d.fakeGetRouteResponseWithContext)

	case "GetRouteResponsesWithContext":
		return m.Fake(d.fakeGetRouteResponsesWithContext)

	case "GetRouteWithContext":
		return m.Fake(d.fakeGetRouteWithContext)

	case "GetRoutesWithContext":
		return m.Fake(d.fakeGetRoutesWithContext)

	case "GetStageWithContext":
		return m.Fake(d.fakeGetStageWithContext)

	case "GetStagesWithContext":
		return m.Fake(d.fakeGetStagesWithContext)

	case "GetTagsWithContext":
		return m.Fake(d.fakeGetTagsWithContext)

	case "ImportApiWithContext":
		return m.Fake(d.fakeImportApiWithContext)

	case "ReimportApiWithContext":
		return m.Fake(d.fakeReimportApiWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateApiMappingWithContext":
		return m.Fake(d.fakeUpdateApiMappingWithContext)

	case "UpdateApiWithContext":
		return m.Fake(d.fakeUpdateApiWithContext)

	case "UpdateAuthorizerWithContext":
		return m.Fake(d.fakeUpdateAuthorizerWithContext)

	case "UpdateDeploymentWithContext":
		return m.Fake(d.fakeUpdateDeploymentWithContext)

	case "UpdateDomainNameWithContext":
		return m.Fake(d.fakeUpdateDomainNameWithContext)

	case "UpdateIntegrationResponseWithContext":
		return m.Fake(d.fakeUpdateIntegrationResponseWithContext)

	case "UpdateIntegrationWithContext":
		return m.Fake(d.fakeUpdateIntegrationWithContext)

	case "UpdateModelWithContext":
		return m.Fake(d.fakeUpdateModelWithContext)

	case "UpdateRouteResponseWithContext":
		return m.Fake(d.fakeUpdateRouteResponseWithContext)

	case "UpdateRouteWithContext":
		return m.Fake(d.fakeUpdateRouteWithContext)

	case "UpdateStageWithContext":
		return m.Fake(d.fakeUpdateStageWithContext)

	default:
		return nil
	}
}

func (d *ApiGatewayV2Double) CreateApi(i0 *apigatewayv2.CreateApiInput) (r0 *apigatewayv2.CreateApiOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApi", i0)
	r0, _ = returns[0].(*apigatewayv2.CreateApiOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) CreateApiMapping(i0 *apigatewayv2.CreateApiMappingInput) (r0 *apigatewayv2.CreateApiMappingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApiMapping", i0)
	r0, _ = returns[0].(*apigatewayv2.CreateApiMappingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) CreateApiMappingRequest(i0 *apigatewayv2.CreateApiMappingInput) (r0 *request.Request, r1 *apigatewayv2.CreateApiMappingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApiMappingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.CreateApiMappingOutput)
	return
}

func (d *ApiGatewayV2Double) CreateApiMappingWithContext(i0 context.Context, i1 *apigatewayv2.CreateApiMappingInput, i2 ...request.Option) (r0 *apigatewayv2.CreateApiMappingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApiMappingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.CreateApiMappingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeCreateApiMappingWithContext(ctx context.Context, in *apigatewayv2.CreateApiMappingInput, _ ...request.Option) (*apigatewayv2.CreateApiMappingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateApiMapping cancelled", ctx.Err())
	default:
		return d.CreateApiMapping(in)
	}
}

func (d *ApiGatewayV2Double) CreateApiRequest(i0 *apigatewayv2.CreateApiInput) (r0 *request.Request, r1 *apigatewayv2.CreateApiOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApiRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.CreateApiOutput)
	return
}

func (d *ApiGatewayV2Double) CreateApiWithContext(i0 context.Context, i1 *apigatewayv2.CreateApiInput, i2 ...request.Option) (r0 *apigatewayv2.CreateApiOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApiWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.CreateApiOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeCreateApiWithContext(ctx context.Context, in *apigatewayv2.CreateApiInput, _ ...request.Option) (*apigatewayv2.CreateApiOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateApi cancelled", ctx.Err())
	default:
		return d.CreateApi(in)
	}
}

func (d *ApiGatewayV2Double) CreateAuthorizer(i0 *apigatewayv2.CreateAuthorizerInput) (r0 *apigatewayv2.CreateAuthorizerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAuthorizer", i0)
	r0, _ = returns[0].(*apigatewayv2.CreateAuthorizerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) CreateAuthorizerRequest(i0 *apigatewayv2.CreateAuthorizerInput) (r0 *request.Request, r1 *apigatewayv2.CreateAuthorizerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAuthorizerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.CreateAuthorizerOutput)
	return
}

func (d *ApiGatewayV2Double) CreateAuthorizerWithContext(i0 context.Context, i1 *apigatewayv2.CreateAuthorizerInput, i2 ...request.Option) (r0 *apigatewayv2.CreateAuthorizerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAuthorizerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.CreateAuthorizerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeCreateAuthorizerWithContext(ctx context.Context, in *apigatewayv2.CreateAuthorizerInput, _ ...request.Option) (*apigatewayv2.CreateAuthorizerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateAuthorizer cancelled", ctx.Err())
	default:
		return d.CreateAuthorizer(in)
	}
}

func (d *ApiGatewayV2Double) CreateDeployment(i0 *apigatewayv2.CreateDeploymentInput) (r0 *apigatewayv2.CreateDeploymentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDeployment", i0)
	r0, _ = returns[0].(*apigatewayv2.CreateDeploymentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) CreateDeploymentRequest(i0 *apigatewayv2.CreateDeploymentInput) (r0 *request.Request, r1 *apigatewayv2.CreateDeploymentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDeploymentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.CreateDeploymentOutput)
	return
}

func (d *ApiGatewayV2Double) CreateDeploymentWithContext(i0 context.Context, i1 *apigatewayv2.CreateDeploymentInput, i2 ...request.Option) (r0 *apigatewayv2.CreateDeploymentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDeploymentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.CreateDeploymentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeCreateDeploymentWithContext(ctx context.Context, in *apigatewayv2.CreateDeploymentInput, _ ...request.Option) (*apigatewayv2.CreateDeploymentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDeployment cancelled", ctx.Err())
	default:
		return d.CreateDeployment(in)
	}
}

func (d *ApiGatewayV2Double) CreateDomainName(i0 *apigatewayv2.CreateDomainNameInput) (r0 *apigatewayv2.CreateDomainNameOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDomainName", i0)
	r0, _ = returns[0].(*apigatewayv2.CreateDomainNameOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) CreateDomainNameRequest(i0 *apigatewayv2.CreateDomainNameInput) (r0 *request.Request, r1 *apigatewayv2.CreateDomainNameOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDomainNameRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.CreateDomainNameOutput)
	return
}

func (d *ApiGatewayV2Double) CreateDomainNameWithContext(i0 context.Context, i1 *apigatewayv2.CreateDomainNameInput, i2 ...request.Option) (r0 *apigatewayv2.CreateDomainNameOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDomainNameWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.CreateDomainNameOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeCreateDomainNameWithContext(ctx context.Context, in *apigatewayv2.CreateDomainNameInput, _ ...request.Option) (*apigatewayv2.CreateDomainNameOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDomainName cancelled", ctx.Err())
	default:
		return d.CreateDomainName(in)
	}
}

func (d *ApiGatewayV2Double) CreateIntegration(i0 *apigatewayv2.CreateIntegrationInput) (r0 *apigatewayv2.CreateIntegrationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateIntegration", i0)
	r0, _ = returns[0].(*apigatewayv2.CreateIntegrationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) CreateIntegrationRequest(i0 *apigatewayv2.CreateIntegrationInput) (r0 *request.Request, r1 *apigatewayv2.CreateIntegrationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateIntegrationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.CreateIntegrationOutput)
	return
}

func (d *ApiGatewayV2Double) CreateIntegrationResponse(i0 *apigatewayv2.CreateIntegrationResponseInput) (r0 *apigatewayv2.CreateIntegrationResponseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateIntegrationResponse", i0)
	r0, _ = returns[0].(*apigatewayv2.CreateIntegrationResponseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) CreateIntegrationResponseRequest(i0 *apigatewayv2.CreateIntegrationResponseInput) (r0 *request.Request, r1 *apigatewayv2.CreateIntegrationResponseOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateIntegrationResponseRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.CreateIntegrationResponseOutput)
	return
}

func (d *ApiGatewayV2Double) CreateIntegrationResponseWithContext(i0 context.Context, i1 *apigatewayv2.CreateIntegrationResponseInput, i2 ...request.Option) (r0 *apigatewayv2.CreateIntegrationResponseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateIntegrationResponseWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.CreateIntegrationResponseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeCreateIntegrationResponseWithContext(ctx context.Context, in *apigatewayv2.CreateIntegrationResponseInput, _ ...request.Option) (*apigatewayv2.CreateIntegrationResponseOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateIntegrationResponse cancelled", ctx.Err())
	default:
		return d.CreateIntegrationResponse(in)
	}
}

func (d *ApiGatewayV2Double) CreateIntegrationWithContext(i0 context.Context, i1 *apigatewayv2.CreateIntegrationInput, i2 ...request.Option) (r0 *apigatewayv2.CreateIntegrationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateIntegrationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.CreateIntegrationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeCreateIntegrationWithContext(ctx context.Context, in *apigatewayv2.CreateIntegrationInput, _ ...request.Option) (*apigatewayv2.CreateIntegrationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateIntegration cancelled", ctx.Err())
	default:
		return d.CreateIntegration(in)
	}
}

func (d *ApiGatewayV2Double) CreateModel(i0 *apigatewayv2.CreateModelInput) (r0 *apigatewayv2.CreateModelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateModel", i0)
	r0, _ = returns[0].(*apigatewayv2.CreateModelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) CreateModelRequest(i0 *apigatewayv2.CreateModelInput) (r0 *request.Request, r1 *apigatewayv2.CreateModelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateModelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.CreateModelOutput)
	return
}

func (d *ApiGatewayV2Double) CreateModelWithContext(i0 context.Context, i1 *apigatewayv2.CreateModelInput, i2 ...request.Option) (r0 *apigatewayv2.CreateModelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateModelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.CreateModelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeCreateModelWithContext(ctx context.Context, in *apigatewayv2.CreateModelInput, _ ...request.Option) (*apigatewayv2.CreateModelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateModel cancelled", ctx.Err())
	default:
		return d.CreateModel(in)
	}
}

func (d *ApiGatewayV2Double) CreateRoute(i0 *apigatewayv2.CreateRouteInput) (r0 *apigatewayv2.CreateRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRoute", i0)
	r0, _ = returns[0].(*apigatewayv2.CreateRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) CreateRouteRequest(i0 *apigatewayv2.CreateRouteInput) (r0 *request.Request, r1 *apigatewayv2.CreateRouteOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRouteRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.CreateRouteOutput)
	return
}

func (d *ApiGatewayV2Double) CreateRouteResponse(i0 *apigatewayv2.CreateRouteResponseInput) (r0 *apigatewayv2.CreateRouteResponseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRouteResponse", i0)
	r0, _ = returns[0].(*apigatewayv2.CreateRouteResponseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) CreateRouteResponseRequest(i0 *apigatewayv2.CreateRouteResponseInput) (r0 *request.Request, r1 *apigatewayv2.CreateRouteResponseOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRouteResponseRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.CreateRouteResponseOutput)
	return
}

func (d *ApiGatewayV2Double) CreateRouteResponseWithContext(i0 context.Context, i1 *apigatewayv2.CreateRouteResponseInput, i2 ...request.Option) (r0 *apigatewayv2.CreateRouteResponseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRouteResponseWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.CreateRouteResponseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeCreateRouteResponseWithContext(ctx context.Context, in *apigatewayv2.CreateRouteResponseInput, _ ...request.Option) (*apigatewayv2.CreateRouteResponseOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateRouteResponse cancelled", ctx.Err())
	default:
		return d.CreateRouteResponse(in)
	}
}

func (d *ApiGatewayV2Double) CreateRouteWithContext(i0 context.Context, i1 *apigatewayv2.CreateRouteInput, i2 ...request.Option) (r0 *apigatewayv2.CreateRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRouteWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.CreateRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeCreateRouteWithContext(ctx context.Context, in *apigatewayv2.CreateRouteInput, _ ...request.Option) (*apigatewayv2.CreateRouteOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateRoute cancelled", ctx.Err())
	default:
		return d.CreateRoute(in)
	}
}

func (d *ApiGatewayV2Double) CreateStage(i0 *apigatewayv2.CreateStageInput) (r0 *apigatewayv2.CreateStageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStage", i0)
	r0, _ = returns[0].(*apigatewayv2.CreateStageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) CreateStageRequest(i0 *apigatewayv2.CreateStageInput) (r0 *request.Request, r1 *apigatewayv2.CreateStageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.CreateStageOutput)
	return
}

func (d *ApiGatewayV2Double) CreateStageWithContext(i0 context.Context, i1 *apigatewayv2.CreateStageInput, i2 ...request.Option) (r0 *apigatewayv2.CreateStageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.CreateStageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeCreateStageWithContext(ctx context.Context, in *apigatewayv2.CreateStageInput, _ ...request.Option) (*apigatewayv2.CreateStageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateStage cancelled", ctx.Err())
	default:
		return d.CreateStage(in)
	}
}

func (d *ApiGatewayV2Double) DeleteApi(i0 *apigatewayv2.DeleteApiInput) (r0 *apigatewayv2.DeleteApiOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApi", i0)
	r0, _ = returns[0].(*apigatewayv2.DeleteApiOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) DeleteApiMapping(i0 *apigatewayv2.DeleteApiMappingInput) (r0 *apigatewayv2.DeleteApiMappingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApiMapping", i0)
	r0, _ = returns[0].(*apigatewayv2.DeleteApiMappingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) DeleteApiMappingRequest(i0 *apigatewayv2.DeleteApiMappingInput) (r0 *request.Request, r1 *apigatewayv2.DeleteApiMappingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApiMappingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.DeleteApiMappingOutput)
	return
}

func (d *ApiGatewayV2Double) DeleteApiMappingWithContext(i0 context.Context, i1 *apigatewayv2.DeleteApiMappingInput, i2 ...request.Option) (r0 *apigatewayv2.DeleteApiMappingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApiMappingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.DeleteApiMappingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeDeleteApiMappingWithContext(ctx context.Context, in *apigatewayv2.DeleteApiMappingInput, _ ...request.Option) (*apigatewayv2.DeleteApiMappingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteApiMapping cancelled", ctx.Err())
	default:
		return d.DeleteApiMapping(in)
	}
}

func (d *ApiGatewayV2Double) DeleteApiRequest(i0 *apigatewayv2.DeleteApiInput) (r0 *request.Request, r1 *apigatewayv2.DeleteApiOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApiRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.DeleteApiOutput)
	return
}

func (d *ApiGatewayV2Double) DeleteApiWithContext(i0 context.Context, i1 *apigatewayv2.DeleteApiInput, i2 ...request.Option) (r0 *apigatewayv2.DeleteApiOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApiWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.DeleteApiOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeDeleteApiWithContext(ctx context.Context, in *apigatewayv2.DeleteApiInput, _ ...request.Option) (*apigatewayv2.DeleteApiOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteApi cancelled", ctx.Err())
	default:
		return d.DeleteApi(in)
	}
}

func (d *ApiGatewayV2Double) DeleteAuthorizer(i0 *apigatewayv2.DeleteAuthorizerInput) (r0 *apigatewayv2.DeleteAuthorizerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAuthorizer", i0)
	r0, _ = returns[0].(*apigatewayv2.DeleteAuthorizerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) DeleteAuthorizerRequest(i0 *apigatewayv2.DeleteAuthorizerInput) (r0 *request.Request, r1 *apigatewayv2.DeleteAuthorizerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAuthorizerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.DeleteAuthorizerOutput)
	return
}

func (d *ApiGatewayV2Double) DeleteAuthorizerWithContext(i0 context.Context, i1 *apigatewayv2.DeleteAuthorizerInput, i2 ...request.Option) (r0 *apigatewayv2.DeleteAuthorizerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAuthorizerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.DeleteAuthorizerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeDeleteAuthorizerWithContext(ctx context.Context, in *apigatewayv2.DeleteAuthorizerInput, _ ...request.Option) (*apigatewayv2.DeleteAuthorizerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteAuthorizer cancelled", ctx.Err())
	default:
		return d.DeleteAuthorizer(in)
	}
}

func (d *ApiGatewayV2Double) DeleteCorsConfiguration(i0 *apigatewayv2.DeleteCorsConfigurationInput) (r0 *apigatewayv2.DeleteCorsConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCorsConfiguration", i0)
	r0, _ = returns[0].(*apigatewayv2.DeleteCorsConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) DeleteCorsConfigurationRequest(i0 *apigatewayv2.DeleteCorsConfigurationInput) (r0 *request.Request, r1 *apigatewayv2.DeleteCorsConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCorsConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.DeleteCorsConfigurationOutput)
	return
}

func (d *ApiGatewayV2Double) DeleteCorsConfigurationWithContext(i0 context.Context, i1 *apigatewayv2.DeleteCorsConfigurationInput, i2 ...request.Option) (r0 *apigatewayv2.DeleteCorsConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCorsConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.DeleteCorsConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeDeleteCorsConfigurationWithContext(ctx context.Context, in *apigatewayv2.DeleteCorsConfigurationInput, _ ...request.Option) (*apigatewayv2.DeleteCorsConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteCorsConfiguration cancelled", ctx.Err())
	default:
		return d.DeleteCorsConfiguration(in)
	}
}

func (d *ApiGatewayV2Double) DeleteDeployment(i0 *apigatewayv2.DeleteDeploymentInput) (r0 *apigatewayv2.DeleteDeploymentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDeployment", i0)
	r0, _ = returns[0].(*apigatewayv2.DeleteDeploymentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) DeleteDeploymentRequest(i0 *apigatewayv2.DeleteDeploymentInput) (r0 *request.Request, r1 *apigatewayv2.DeleteDeploymentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDeploymentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.DeleteDeploymentOutput)
	return
}

func (d *ApiGatewayV2Double) DeleteDeploymentWithContext(i0 context.Context, i1 *apigatewayv2.DeleteDeploymentInput, i2 ...request.Option) (r0 *apigatewayv2.DeleteDeploymentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDeploymentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.DeleteDeploymentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeDeleteDeploymentWithContext(ctx context.Context, in *apigatewayv2.DeleteDeploymentInput, _ ...request.Option) (*apigatewayv2.DeleteDeploymentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDeployment cancelled", ctx.Err())
	default:
		return d.DeleteDeployment(in)
	}
}

func (d *ApiGatewayV2Double) DeleteDomainName(i0 *apigatewayv2.DeleteDomainNameInput) (r0 *apigatewayv2.DeleteDomainNameOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDomainName", i0)
	r0, _ = returns[0].(*apigatewayv2.DeleteDomainNameOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) DeleteDomainNameRequest(i0 *apigatewayv2.DeleteDomainNameInput) (r0 *request.Request, r1 *apigatewayv2.DeleteDomainNameOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDomainNameRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.DeleteDomainNameOutput)
	return
}

func (d *ApiGatewayV2Double) DeleteDomainNameWithContext(i0 context.Context, i1 *apigatewayv2.DeleteDomainNameInput, i2 ...request.Option) (r0 *apigatewayv2.DeleteDomainNameOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDomainNameWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.DeleteDomainNameOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeDeleteDomainNameWithContext(ctx context.Context, in *apigatewayv2.DeleteDomainNameInput, _ ...request.Option) (*apigatewayv2.DeleteDomainNameOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDomainName cancelled", ctx.Err())
	default:
		return d.DeleteDomainName(in)
	}
}

func (d *ApiGatewayV2Double) DeleteIntegration(i0 *apigatewayv2.DeleteIntegrationInput) (r0 *apigatewayv2.DeleteIntegrationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIntegration", i0)
	r0, _ = returns[0].(*apigatewayv2.DeleteIntegrationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) DeleteIntegrationRequest(i0 *apigatewayv2.DeleteIntegrationInput) (r0 *request.Request, r1 *apigatewayv2.DeleteIntegrationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIntegrationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.DeleteIntegrationOutput)
	return
}

func (d *ApiGatewayV2Double) DeleteIntegrationResponse(i0 *apigatewayv2.DeleteIntegrationResponseInput) (r0 *apigatewayv2.DeleteIntegrationResponseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIntegrationResponse", i0)
	r0, _ = returns[0].(*apigatewayv2.DeleteIntegrationResponseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) DeleteIntegrationResponseRequest(i0 *apigatewayv2.DeleteIntegrationResponseInput) (r0 *request.Request, r1 *apigatewayv2.DeleteIntegrationResponseOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIntegrationResponseRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.DeleteIntegrationResponseOutput)
	return
}

func (d *ApiGatewayV2Double) DeleteIntegrationResponseWithContext(i0 context.Context, i1 *apigatewayv2.DeleteIntegrationResponseInput, i2 ...request.Option) (r0 *apigatewayv2.DeleteIntegrationResponseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIntegrationResponseWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.DeleteIntegrationResponseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeDeleteIntegrationResponseWithContext(ctx context.Context, in *apigatewayv2.DeleteIntegrationResponseInput, _ ...request.Option) (*apigatewayv2.DeleteIntegrationResponseOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteIntegrationResponse cancelled", ctx.Err())
	default:
		return d.DeleteIntegrationResponse(in)
	}
}

func (d *ApiGatewayV2Double) DeleteIntegrationWithContext(i0 context.Context, i1 *apigatewayv2.DeleteIntegrationInput, i2 ...request.Option) (r0 *apigatewayv2.DeleteIntegrationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIntegrationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.DeleteIntegrationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeDeleteIntegrationWithContext(ctx context.Context, in *apigatewayv2.DeleteIntegrationInput, _ ...request.Option) (*apigatewayv2.DeleteIntegrationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteIntegration cancelled", ctx.Err())
	default:
		return d.DeleteIntegration(in)
	}
}

func (d *ApiGatewayV2Double) DeleteModel(i0 *apigatewayv2.DeleteModelInput) (r0 *apigatewayv2.DeleteModelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteModel", i0)
	r0, _ = returns[0].(*apigatewayv2.DeleteModelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) DeleteModelRequest(i0 *apigatewayv2.DeleteModelInput) (r0 *request.Request, r1 *apigatewayv2.DeleteModelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteModelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.DeleteModelOutput)
	return
}

func (d *ApiGatewayV2Double) DeleteModelWithContext(i0 context.Context, i1 *apigatewayv2.DeleteModelInput, i2 ...request.Option) (r0 *apigatewayv2.DeleteModelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteModelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.DeleteModelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeDeleteModelWithContext(ctx context.Context, in *apigatewayv2.DeleteModelInput, _ ...request.Option) (*apigatewayv2.DeleteModelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteModel cancelled", ctx.Err())
	default:
		return d.DeleteModel(in)
	}
}

func (d *ApiGatewayV2Double) DeleteRoute(i0 *apigatewayv2.DeleteRouteInput) (r0 *apigatewayv2.DeleteRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRoute", i0)
	r0, _ = returns[0].(*apigatewayv2.DeleteRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) DeleteRouteRequest(i0 *apigatewayv2.DeleteRouteInput) (r0 *request.Request, r1 *apigatewayv2.DeleteRouteOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRouteRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.DeleteRouteOutput)
	return
}

func (d *ApiGatewayV2Double) DeleteRouteResponse(i0 *apigatewayv2.DeleteRouteResponseInput) (r0 *apigatewayv2.DeleteRouteResponseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRouteResponse", i0)
	r0, _ = returns[0].(*apigatewayv2.DeleteRouteResponseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) DeleteRouteResponseRequest(i0 *apigatewayv2.DeleteRouteResponseInput) (r0 *request.Request, r1 *apigatewayv2.DeleteRouteResponseOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRouteResponseRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.DeleteRouteResponseOutput)
	return
}

func (d *ApiGatewayV2Double) DeleteRouteResponseWithContext(i0 context.Context, i1 *apigatewayv2.DeleteRouteResponseInput, i2 ...request.Option) (r0 *apigatewayv2.DeleteRouteResponseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRouteResponseWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.DeleteRouteResponseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeDeleteRouteResponseWithContext(ctx context.Context, in *apigatewayv2.DeleteRouteResponseInput, _ ...request.Option) (*apigatewayv2.DeleteRouteResponseOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRouteResponse cancelled", ctx.Err())
	default:
		return d.DeleteRouteResponse(in)
	}
}

func (d *ApiGatewayV2Double) DeleteRouteSettings(i0 *apigatewayv2.DeleteRouteSettingsInput) (r0 *apigatewayv2.DeleteRouteSettingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRouteSettings", i0)
	r0, _ = returns[0].(*apigatewayv2.DeleteRouteSettingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) DeleteRouteSettingsRequest(i0 *apigatewayv2.DeleteRouteSettingsInput) (r0 *request.Request, r1 *apigatewayv2.DeleteRouteSettingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRouteSettingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.DeleteRouteSettingsOutput)
	return
}

func (d *ApiGatewayV2Double) DeleteRouteSettingsWithContext(i0 context.Context, i1 *apigatewayv2.DeleteRouteSettingsInput, i2 ...request.Option) (r0 *apigatewayv2.DeleteRouteSettingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRouteSettingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.DeleteRouteSettingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeDeleteRouteSettingsWithContext(ctx context.Context, in *apigatewayv2.DeleteRouteSettingsInput, _ ...request.Option) (*apigatewayv2.DeleteRouteSettingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRouteSettings cancelled", ctx.Err())
	default:
		return d.DeleteRouteSettings(in)
	}
}

func (d *ApiGatewayV2Double) DeleteRouteWithContext(i0 context.Context, i1 *apigatewayv2.DeleteRouteInput, i2 ...request.Option) (r0 *apigatewayv2.DeleteRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRouteWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.DeleteRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeDeleteRouteWithContext(ctx context.Context, in *apigatewayv2.DeleteRouteInput, _ ...request.Option) (*apigatewayv2.DeleteRouteOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRoute cancelled", ctx.Err())
	default:
		return d.DeleteRoute(in)
	}
}

func (d *ApiGatewayV2Double) DeleteStage(i0 *apigatewayv2.DeleteStageInput) (r0 *apigatewayv2.DeleteStageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteStage", i0)
	r0, _ = returns[0].(*apigatewayv2.DeleteStageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) DeleteStageRequest(i0 *apigatewayv2.DeleteStageInput) (r0 *request.Request, r1 *apigatewayv2.DeleteStageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteStageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.DeleteStageOutput)
	return
}

func (d *ApiGatewayV2Double) DeleteStageWithContext(i0 context.Context, i1 *apigatewayv2.DeleteStageInput, i2 ...request.Option) (r0 *apigatewayv2.DeleteStageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteStageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.DeleteStageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeDeleteStageWithContext(ctx context.Context, in *apigatewayv2.DeleteStageInput, _ ...request.Option) (*apigatewayv2.DeleteStageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteStage cancelled", ctx.Err())
	default:
		return d.DeleteStage(in)
	}
}

func (d *ApiGatewayV2Double) GetApi(i0 *apigatewayv2.GetApiInput) (r0 *apigatewayv2.GetApiOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApi", i0)
	r0, _ = returns[0].(*apigatewayv2.GetApiOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) GetApiMapping(i0 *apigatewayv2.GetApiMappingInput) (r0 *apigatewayv2.GetApiMappingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApiMapping", i0)
	r0, _ = returns[0].(*apigatewayv2.GetApiMappingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) GetApiMappingRequest(i0 *apigatewayv2.GetApiMappingInput) (r0 *request.Request, r1 *apigatewayv2.GetApiMappingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApiMappingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.GetApiMappingOutput)
	return
}

func (d *ApiGatewayV2Double) GetApiMappingWithContext(i0 context.Context, i1 *apigatewayv2.GetApiMappingInput, i2 ...request.Option) (r0 *apigatewayv2.GetApiMappingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApiMappingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.GetApiMappingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeGetApiMappingWithContext(ctx context.Context, in *apigatewayv2.GetApiMappingInput, _ ...request.Option) (*apigatewayv2.GetApiMappingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetApiMapping cancelled", ctx.Err())
	default:
		return d.GetApiMapping(in)
	}
}

func (d *ApiGatewayV2Double) GetApiMappings(i0 *apigatewayv2.GetApiMappingsInput) (r0 *apigatewayv2.GetApiMappingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApiMappings", i0)
	r0, _ = returns[0].(*apigatewayv2.GetApiMappingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) GetApiMappingsRequest(i0 *apigatewayv2.GetApiMappingsInput) (r0 *request.Request, r1 *apigatewayv2.GetApiMappingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApiMappingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.GetApiMappingsOutput)
	return
}

func (d *ApiGatewayV2Double) GetApiMappingsWithContext(i0 context.Context, i1 *apigatewayv2.GetApiMappingsInput, i2 ...request.Option) (r0 *apigatewayv2.GetApiMappingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApiMappingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.GetApiMappingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeGetApiMappingsWithContext(ctx context.Context, in *apigatewayv2.GetApiMappingsInput, _ ...request.Option) (*apigatewayv2.GetApiMappingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetApiMappings cancelled", ctx.Err())
	default:
		return d.GetApiMappings(in)
	}
}

func (d *ApiGatewayV2Double) GetApiRequest(i0 *apigatewayv2.GetApiInput) (r0 *request.Request, r1 *apigatewayv2.GetApiOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApiRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.GetApiOutput)
	return
}

func (d *ApiGatewayV2Double) GetApiWithContext(i0 context.Context, i1 *apigatewayv2.GetApiInput, i2 ...request.Option) (r0 *apigatewayv2.GetApiOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApiWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.GetApiOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeGetApiWithContext(ctx context.Context, in *apigatewayv2.GetApiInput, _ ...request.Option) (*apigatewayv2.GetApiOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetApi cancelled", ctx.Err())
	default:
		return d.GetApi(in)
	}
}

func (d *ApiGatewayV2Double) GetApis(i0 *apigatewayv2.GetApisInput) (r0 *apigatewayv2.GetApisOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApis", i0)
	r0, _ = returns[0].(*apigatewayv2.GetApisOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) GetApisRequest(i0 *apigatewayv2.GetApisInput) (r0 *request.Request, r1 *apigatewayv2.GetApisOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApisRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.GetApisOutput)
	return
}

func (d *ApiGatewayV2Double) GetApisWithContext(i0 context.Context, i1 *apigatewayv2.GetApisInput, i2 ...request.Option) (r0 *apigatewayv2.GetApisOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApisWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.GetApisOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeGetApisWithContext(ctx context.Context, in *apigatewayv2.GetApisInput, _ ...request.Option) (*apigatewayv2.GetApisOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetApis cancelled", ctx.Err())
	default:
		return d.GetApis(in)
	}
}

func (d *ApiGatewayV2Double) GetAuthorizer(i0 *apigatewayv2.GetAuthorizerInput) (r0 *apigatewayv2.GetAuthorizerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAuthorizer", i0)
	r0, _ = returns[0].(*apigatewayv2.GetAuthorizerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) GetAuthorizerRequest(i0 *apigatewayv2.GetAuthorizerInput) (r0 *request.Request, r1 *apigatewayv2.GetAuthorizerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAuthorizerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.GetAuthorizerOutput)
	return
}

func (d *ApiGatewayV2Double) GetAuthorizerWithContext(i0 context.Context, i1 *apigatewayv2.GetAuthorizerInput, i2 ...request.Option) (r0 *apigatewayv2.GetAuthorizerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAuthorizerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.GetAuthorizerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeGetAuthorizerWithContext(ctx context.Context, in *apigatewayv2.GetAuthorizerInput, _ ...request.Option) (*apigatewayv2.GetAuthorizerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetAuthorizer cancelled", ctx.Err())
	default:
		return d.GetAuthorizer(in)
	}
}

func (d *ApiGatewayV2Double) GetAuthorizers(i0 *apigatewayv2.GetAuthorizersInput) (r0 *apigatewayv2.GetAuthorizersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAuthorizers", i0)
	r0, _ = returns[0].(*apigatewayv2.GetAuthorizersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) GetAuthorizersRequest(i0 *apigatewayv2.GetAuthorizersInput) (r0 *request.Request, r1 *apigatewayv2.GetAuthorizersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAuthorizersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.GetAuthorizersOutput)
	return
}

func (d *ApiGatewayV2Double) GetAuthorizersWithContext(i0 context.Context, i1 *apigatewayv2.GetAuthorizersInput, i2 ...request.Option) (r0 *apigatewayv2.GetAuthorizersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAuthorizersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.GetAuthorizersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeGetAuthorizersWithContext(ctx context.Context, in *apigatewayv2.GetAuthorizersInput, _ ...request.Option) (*apigatewayv2.GetAuthorizersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetAuthorizers cancelled", ctx.Err())
	default:
		return d.GetAuthorizers(in)
	}
}

func (d *ApiGatewayV2Double) GetDeployment(i0 *apigatewayv2.GetDeploymentInput) (r0 *apigatewayv2.GetDeploymentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeployment", i0)
	r0, _ = returns[0].(*apigatewayv2.GetDeploymentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) GetDeploymentRequest(i0 *apigatewayv2.GetDeploymentInput) (r0 *request.Request, r1 *apigatewayv2.GetDeploymentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeploymentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.GetDeploymentOutput)
	return
}

func (d *ApiGatewayV2Double) GetDeploymentWithContext(i0 context.Context, i1 *apigatewayv2.GetDeploymentInput, i2 ...request.Option) (r0 *apigatewayv2.GetDeploymentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeploymentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.GetDeploymentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeGetDeploymentWithContext(ctx context.Context, in *apigatewayv2.GetDeploymentInput, _ ...request.Option) (*apigatewayv2.GetDeploymentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDeployment cancelled", ctx.Err())
	default:
		return d.GetDeployment(in)
	}
}

func (d *ApiGatewayV2Double) GetDeployments(i0 *apigatewayv2.GetDeploymentsInput) (r0 *apigatewayv2.GetDeploymentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeployments", i0)
	r0, _ = returns[0].(*apigatewayv2.GetDeploymentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) GetDeploymentsRequest(i0 *apigatewayv2.GetDeploymentsInput) (r0 *request.Request, r1 *apigatewayv2.GetDeploymentsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeploymentsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.GetDeploymentsOutput)
	return
}

func (d *ApiGatewayV2Double) GetDeploymentsWithContext(i0 context.Context, i1 *apigatewayv2.GetDeploymentsInput, i2 ...request.Option) (r0 *apigatewayv2.GetDeploymentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeploymentsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.GetDeploymentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeGetDeploymentsWithContext(ctx context.Context, in *apigatewayv2.GetDeploymentsInput, _ ...request.Option) (*apigatewayv2.GetDeploymentsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDeployments cancelled", ctx.Err())
	default:
		return d.GetDeployments(in)
	}
}

func (d *ApiGatewayV2Double) GetDomainName(i0 *apigatewayv2.GetDomainNameInput) (r0 *apigatewayv2.GetDomainNameOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDomainName", i0)
	r0, _ = returns[0].(*apigatewayv2.GetDomainNameOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) GetDomainNameRequest(i0 *apigatewayv2.GetDomainNameInput) (r0 *request.Request, r1 *apigatewayv2.GetDomainNameOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDomainNameRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.GetDomainNameOutput)
	return
}

func (d *ApiGatewayV2Double) GetDomainNameWithContext(i0 context.Context, i1 *apigatewayv2.GetDomainNameInput, i2 ...request.Option) (r0 *apigatewayv2.GetDomainNameOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDomainNameWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.GetDomainNameOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeGetDomainNameWithContext(ctx context.Context, in *apigatewayv2.GetDomainNameInput, _ ...request.Option) (*apigatewayv2.GetDomainNameOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDomainName cancelled", ctx.Err())
	default:
		return d.GetDomainName(in)
	}
}

func (d *ApiGatewayV2Double) GetDomainNames(i0 *apigatewayv2.GetDomainNamesInput) (r0 *apigatewayv2.GetDomainNamesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDomainNames", i0)
	r0, _ = returns[0].(*apigatewayv2.GetDomainNamesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) GetDomainNamesRequest(i0 *apigatewayv2.GetDomainNamesInput) (r0 *request.Request, r1 *apigatewayv2.GetDomainNamesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDomainNamesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.GetDomainNamesOutput)
	return
}

func (d *ApiGatewayV2Double) GetDomainNamesWithContext(i0 context.Context, i1 *apigatewayv2.GetDomainNamesInput, i2 ...request.Option) (r0 *apigatewayv2.GetDomainNamesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDomainNamesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.GetDomainNamesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeGetDomainNamesWithContext(ctx context.Context, in *apigatewayv2.GetDomainNamesInput, _ ...request.Option) (*apigatewayv2.GetDomainNamesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDomainNames cancelled", ctx.Err())
	default:
		return d.GetDomainNames(in)
	}
}

func (d *ApiGatewayV2Double) GetIntegration(i0 *apigatewayv2.GetIntegrationInput) (r0 *apigatewayv2.GetIntegrationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIntegration", i0)
	r0, _ = returns[0].(*apigatewayv2.GetIntegrationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) GetIntegrationRequest(i0 *apigatewayv2.GetIntegrationInput) (r0 *request.Request, r1 *apigatewayv2.GetIntegrationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIntegrationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.GetIntegrationOutput)
	return
}

func (d *ApiGatewayV2Double) GetIntegrationResponse(i0 *apigatewayv2.GetIntegrationResponseInput) (r0 *apigatewayv2.GetIntegrationResponseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIntegrationResponse", i0)
	r0, _ = returns[0].(*apigatewayv2.GetIntegrationResponseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) GetIntegrationResponseRequest(i0 *apigatewayv2.GetIntegrationResponseInput) (r0 *request.Request, r1 *apigatewayv2.GetIntegrationResponseOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIntegrationResponseRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.GetIntegrationResponseOutput)
	return
}

func (d *ApiGatewayV2Double) GetIntegrationResponseWithContext(i0 context.Context, i1 *apigatewayv2.GetIntegrationResponseInput, i2 ...request.Option) (r0 *apigatewayv2.GetIntegrationResponseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIntegrationResponseWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.GetIntegrationResponseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeGetIntegrationResponseWithContext(ctx context.Context, in *apigatewayv2.GetIntegrationResponseInput, _ ...request.Option) (*apigatewayv2.GetIntegrationResponseOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetIntegrationResponse cancelled", ctx.Err())
	default:
		return d.GetIntegrationResponse(in)
	}
}

func (d *ApiGatewayV2Double) GetIntegrationResponses(i0 *apigatewayv2.GetIntegrationResponsesInput) (r0 *apigatewayv2.GetIntegrationResponsesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIntegrationResponses", i0)
	r0, _ = returns[0].(*apigatewayv2.GetIntegrationResponsesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) GetIntegrationResponsesRequest(i0 *apigatewayv2.GetIntegrationResponsesInput) (r0 *request.Request, r1 *apigatewayv2.GetIntegrationResponsesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIntegrationResponsesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.GetIntegrationResponsesOutput)
	return
}

func (d *ApiGatewayV2Double) GetIntegrationResponsesWithContext(i0 context.Context, i1 *apigatewayv2.GetIntegrationResponsesInput, i2 ...request.Option) (r0 *apigatewayv2.GetIntegrationResponsesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIntegrationResponsesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.GetIntegrationResponsesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeGetIntegrationResponsesWithContext(ctx context.Context, in *apigatewayv2.GetIntegrationResponsesInput, _ ...request.Option) (*apigatewayv2.GetIntegrationResponsesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetIntegrationResponses cancelled", ctx.Err())
	default:
		return d.GetIntegrationResponses(in)
	}
}

func (d *ApiGatewayV2Double) GetIntegrationWithContext(i0 context.Context, i1 *apigatewayv2.GetIntegrationInput, i2 ...request.Option) (r0 *apigatewayv2.GetIntegrationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIntegrationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.GetIntegrationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeGetIntegrationWithContext(ctx context.Context, in *apigatewayv2.GetIntegrationInput, _ ...request.Option) (*apigatewayv2.GetIntegrationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetIntegration cancelled", ctx.Err())
	default:
		return d.GetIntegration(in)
	}
}

func (d *ApiGatewayV2Double) GetIntegrations(i0 *apigatewayv2.GetIntegrationsInput) (r0 *apigatewayv2.GetIntegrationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIntegrations", i0)
	r0, _ = returns[0].(*apigatewayv2.GetIntegrationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) GetIntegrationsRequest(i0 *apigatewayv2.GetIntegrationsInput) (r0 *request.Request, r1 *apigatewayv2.GetIntegrationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIntegrationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.GetIntegrationsOutput)
	return
}

func (d *ApiGatewayV2Double) GetIntegrationsWithContext(i0 context.Context, i1 *apigatewayv2.GetIntegrationsInput, i2 ...request.Option) (r0 *apigatewayv2.GetIntegrationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIntegrationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.GetIntegrationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeGetIntegrationsWithContext(ctx context.Context, in *apigatewayv2.GetIntegrationsInput, _ ...request.Option) (*apigatewayv2.GetIntegrationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetIntegrations cancelled", ctx.Err())
	default:
		return d.GetIntegrations(in)
	}
}

func (d *ApiGatewayV2Double) GetModel(i0 *apigatewayv2.GetModelInput) (r0 *apigatewayv2.GetModelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetModel", i0)
	r0, _ = returns[0].(*apigatewayv2.GetModelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) GetModelRequest(i0 *apigatewayv2.GetModelInput) (r0 *request.Request, r1 *apigatewayv2.GetModelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetModelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.GetModelOutput)
	return
}

func (d *ApiGatewayV2Double) GetModelTemplate(i0 *apigatewayv2.GetModelTemplateInput) (r0 *apigatewayv2.GetModelTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetModelTemplate", i0)
	r0, _ = returns[0].(*apigatewayv2.GetModelTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) GetModelTemplateRequest(i0 *apigatewayv2.GetModelTemplateInput) (r0 *request.Request, r1 *apigatewayv2.GetModelTemplateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetModelTemplateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.GetModelTemplateOutput)
	return
}

func (d *ApiGatewayV2Double) GetModelTemplateWithContext(i0 context.Context, i1 *apigatewayv2.GetModelTemplateInput, i2 ...request.Option) (r0 *apigatewayv2.GetModelTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetModelTemplateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.GetModelTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeGetModelTemplateWithContext(ctx context.Context, in *apigatewayv2.GetModelTemplateInput, _ ...request.Option) (*apigatewayv2.GetModelTemplateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetModelTemplate cancelled", ctx.Err())
	default:
		return d.GetModelTemplate(in)
	}
}

func (d *ApiGatewayV2Double) GetModelWithContext(i0 context.Context, i1 *apigatewayv2.GetModelInput, i2 ...request.Option) (r0 *apigatewayv2.GetModelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetModelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.GetModelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeGetModelWithContext(ctx context.Context, in *apigatewayv2.GetModelInput, _ ...request.Option) (*apigatewayv2.GetModelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetModel cancelled", ctx.Err())
	default:
		return d.GetModel(in)
	}
}

func (d *ApiGatewayV2Double) GetModels(i0 *apigatewayv2.GetModelsInput) (r0 *apigatewayv2.GetModelsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetModels", i0)
	r0, _ = returns[0].(*apigatewayv2.GetModelsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) GetModelsRequest(i0 *apigatewayv2.GetModelsInput) (r0 *request.Request, r1 *apigatewayv2.GetModelsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetModelsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.GetModelsOutput)
	return
}

func (d *ApiGatewayV2Double) GetModelsWithContext(i0 context.Context, i1 *apigatewayv2.GetModelsInput, i2 ...request.Option) (r0 *apigatewayv2.GetModelsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetModelsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.GetModelsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeGetModelsWithContext(ctx context.Context, in *apigatewayv2.GetModelsInput, _ ...request.Option) (*apigatewayv2.GetModelsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetModels cancelled", ctx.Err())
	default:
		return d.GetModels(in)
	}
}

func (d *ApiGatewayV2Double) GetRoute(i0 *apigatewayv2.GetRouteInput) (r0 *apigatewayv2.GetRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRoute", i0)
	r0, _ = returns[0].(*apigatewayv2.GetRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) GetRouteRequest(i0 *apigatewayv2.GetRouteInput) (r0 *request.Request, r1 *apigatewayv2.GetRouteOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRouteRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.GetRouteOutput)
	return
}

func (d *ApiGatewayV2Double) GetRouteResponse(i0 *apigatewayv2.GetRouteResponseInput) (r0 *apigatewayv2.GetRouteResponseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRouteResponse", i0)
	r0, _ = returns[0].(*apigatewayv2.GetRouteResponseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) GetRouteResponseRequest(i0 *apigatewayv2.GetRouteResponseInput) (r0 *request.Request, r1 *apigatewayv2.GetRouteResponseOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRouteResponseRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.GetRouteResponseOutput)
	return
}

func (d *ApiGatewayV2Double) GetRouteResponseWithContext(i0 context.Context, i1 *apigatewayv2.GetRouteResponseInput, i2 ...request.Option) (r0 *apigatewayv2.GetRouteResponseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRouteResponseWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.GetRouteResponseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeGetRouteResponseWithContext(ctx context.Context, in *apigatewayv2.GetRouteResponseInput, _ ...request.Option) (*apigatewayv2.GetRouteResponseOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRouteResponse cancelled", ctx.Err())
	default:
		return d.GetRouteResponse(in)
	}
}

func (d *ApiGatewayV2Double) GetRouteResponses(i0 *apigatewayv2.GetRouteResponsesInput) (r0 *apigatewayv2.GetRouteResponsesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRouteResponses", i0)
	r0, _ = returns[0].(*apigatewayv2.GetRouteResponsesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) GetRouteResponsesRequest(i0 *apigatewayv2.GetRouteResponsesInput) (r0 *request.Request, r1 *apigatewayv2.GetRouteResponsesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRouteResponsesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.GetRouteResponsesOutput)
	return
}

func (d *ApiGatewayV2Double) GetRouteResponsesWithContext(i0 context.Context, i1 *apigatewayv2.GetRouteResponsesInput, i2 ...request.Option) (r0 *apigatewayv2.GetRouteResponsesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRouteResponsesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.GetRouteResponsesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeGetRouteResponsesWithContext(ctx context.Context, in *apigatewayv2.GetRouteResponsesInput, _ ...request.Option) (*apigatewayv2.GetRouteResponsesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRouteResponses cancelled", ctx.Err())
	default:
		return d.GetRouteResponses(in)
	}
}

func (d *ApiGatewayV2Double) GetRouteWithContext(i0 context.Context, i1 *apigatewayv2.GetRouteInput, i2 ...request.Option) (r0 *apigatewayv2.GetRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRouteWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.GetRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeGetRouteWithContext(ctx context.Context, in *apigatewayv2.GetRouteInput, _ ...request.Option) (*apigatewayv2.GetRouteOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRoute cancelled", ctx.Err())
	default:
		return d.GetRoute(in)
	}
}

func (d *ApiGatewayV2Double) GetRoutes(i0 *apigatewayv2.GetRoutesInput) (r0 *apigatewayv2.GetRoutesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRoutes", i0)
	r0, _ = returns[0].(*apigatewayv2.GetRoutesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) GetRoutesRequest(i0 *apigatewayv2.GetRoutesInput) (r0 *request.Request, r1 *apigatewayv2.GetRoutesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRoutesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.GetRoutesOutput)
	return
}

func (d *ApiGatewayV2Double) GetRoutesWithContext(i0 context.Context, i1 *apigatewayv2.GetRoutesInput, i2 ...request.Option) (r0 *apigatewayv2.GetRoutesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRoutesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.GetRoutesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeGetRoutesWithContext(ctx context.Context, in *apigatewayv2.GetRoutesInput, _ ...request.Option) (*apigatewayv2.GetRoutesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRoutes cancelled", ctx.Err())
	default:
		return d.GetRoutes(in)
	}
}

func (d *ApiGatewayV2Double) GetStage(i0 *apigatewayv2.GetStageInput) (r0 *apigatewayv2.GetStageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetStage", i0)
	r0, _ = returns[0].(*apigatewayv2.GetStageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) GetStageRequest(i0 *apigatewayv2.GetStageInput) (r0 *request.Request, r1 *apigatewayv2.GetStageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetStageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.GetStageOutput)
	return
}

func (d *ApiGatewayV2Double) GetStageWithContext(i0 context.Context, i1 *apigatewayv2.GetStageInput, i2 ...request.Option) (r0 *apigatewayv2.GetStageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetStageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.GetStageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeGetStageWithContext(ctx context.Context, in *apigatewayv2.GetStageInput, _ ...request.Option) (*apigatewayv2.GetStageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetStage cancelled", ctx.Err())
	default:
		return d.GetStage(in)
	}
}

func (d *ApiGatewayV2Double) GetStages(i0 *apigatewayv2.GetStagesInput) (r0 *apigatewayv2.GetStagesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetStages", i0)
	r0, _ = returns[0].(*apigatewayv2.GetStagesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) GetStagesRequest(i0 *apigatewayv2.GetStagesInput) (r0 *request.Request, r1 *apigatewayv2.GetStagesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetStagesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.GetStagesOutput)
	return
}

func (d *ApiGatewayV2Double) GetStagesWithContext(i0 context.Context, i1 *apigatewayv2.GetStagesInput, i2 ...request.Option) (r0 *apigatewayv2.GetStagesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetStagesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.GetStagesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeGetStagesWithContext(ctx context.Context, in *apigatewayv2.GetStagesInput, _ ...request.Option) (*apigatewayv2.GetStagesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetStages cancelled", ctx.Err())
	default:
		return d.GetStages(in)
	}
}

func (d *ApiGatewayV2Double) GetTags(i0 *apigatewayv2.GetTagsInput) (r0 *apigatewayv2.GetTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTags", i0)
	r0, _ = returns[0].(*apigatewayv2.GetTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) GetTagsRequest(i0 *apigatewayv2.GetTagsInput) (r0 *request.Request, r1 *apigatewayv2.GetTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.GetTagsOutput)
	return
}

func (d *ApiGatewayV2Double) GetTagsWithContext(i0 context.Context, i1 *apigatewayv2.GetTagsInput, i2 ...request.Option) (r0 *apigatewayv2.GetTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.GetTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeGetTagsWithContext(ctx context.Context, in *apigatewayv2.GetTagsInput, _ ...request.Option) (*apigatewayv2.GetTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetTags cancelled", ctx.Err())
	default:
		return d.GetTags(in)
	}
}

func (d *ApiGatewayV2Double) ImportApi(i0 *apigatewayv2.ImportApiInput) (r0 *apigatewayv2.ImportApiOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportApi", i0)
	r0, _ = returns[0].(*apigatewayv2.ImportApiOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) ImportApiRequest(i0 *apigatewayv2.ImportApiInput) (r0 *request.Request, r1 *apigatewayv2.ImportApiOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportApiRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.ImportApiOutput)
	return
}

func (d *ApiGatewayV2Double) ImportApiWithContext(i0 context.Context, i1 *apigatewayv2.ImportApiInput, i2 ...request.Option) (r0 *apigatewayv2.ImportApiOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportApiWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.ImportApiOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeImportApiWithContext(ctx context.Context, in *apigatewayv2.ImportApiInput, _ ...request.Option) (*apigatewayv2.ImportApiOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ImportApi cancelled", ctx.Err())
	default:
		return d.ImportApi(in)
	}
}

func (d *ApiGatewayV2Double) ReimportApi(i0 *apigatewayv2.ReimportApiInput) (r0 *apigatewayv2.ReimportApiOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReimportApi", i0)
	r0, _ = returns[0].(*apigatewayv2.ReimportApiOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) ReimportApiRequest(i0 *apigatewayv2.ReimportApiInput) (r0 *request.Request, r1 *apigatewayv2.ReimportApiOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReimportApiRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.ReimportApiOutput)
	return
}

func (d *ApiGatewayV2Double) ReimportApiWithContext(i0 context.Context, i1 *apigatewayv2.ReimportApiInput, i2 ...request.Option) (r0 *apigatewayv2.ReimportApiOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReimportApiWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.ReimportApiOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeReimportApiWithContext(ctx context.Context, in *apigatewayv2.ReimportApiInput, _ ...request.Option) (*apigatewayv2.ReimportApiOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ReimportApi cancelled", ctx.Err())
	default:
		return d.ReimportApi(in)
	}
}

func (d *ApiGatewayV2Double) TagResource(i0 *apigatewayv2.TagResourceInput) (r0 *apigatewayv2.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*apigatewayv2.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) TagResourceRequest(i0 *apigatewayv2.TagResourceInput) (r0 *request.Request, r1 *apigatewayv2.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.TagResourceOutput)
	return
}

func (d *ApiGatewayV2Double) TagResourceWithContext(i0 context.Context, i1 *apigatewayv2.TagResourceInput, i2 ...request.Option) (r0 *apigatewayv2.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeTagResourceWithContext(ctx context.Context, in *apigatewayv2.TagResourceInput, _ ...request.Option) (*apigatewayv2.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *ApiGatewayV2Double) UntagResource(i0 *apigatewayv2.UntagResourceInput) (r0 *apigatewayv2.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*apigatewayv2.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) UntagResourceRequest(i0 *apigatewayv2.UntagResourceInput) (r0 *request.Request, r1 *apigatewayv2.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.UntagResourceOutput)
	return
}

func (d *ApiGatewayV2Double) UntagResourceWithContext(i0 context.Context, i1 *apigatewayv2.UntagResourceInput, i2 ...request.Option) (r0 *apigatewayv2.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeUntagResourceWithContext(ctx context.Context, in *apigatewayv2.UntagResourceInput, _ ...request.Option) (*apigatewayv2.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *ApiGatewayV2Double) UpdateApi(i0 *apigatewayv2.UpdateApiInput) (r0 *apigatewayv2.UpdateApiOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApi", i0)
	r0, _ = returns[0].(*apigatewayv2.UpdateApiOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) UpdateApiMapping(i0 *apigatewayv2.UpdateApiMappingInput) (r0 *apigatewayv2.UpdateApiMappingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApiMapping", i0)
	r0, _ = returns[0].(*apigatewayv2.UpdateApiMappingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) UpdateApiMappingRequest(i0 *apigatewayv2.UpdateApiMappingInput) (r0 *request.Request, r1 *apigatewayv2.UpdateApiMappingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApiMappingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.UpdateApiMappingOutput)
	return
}

func (d *ApiGatewayV2Double) UpdateApiMappingWithContext(i0 context.Context, i1 *apigatewayv2.UpdateApiMappingInput, i2 ...request.Option) (r0 *apigatewayv2.UpdateApiMappingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApiMappingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.UpdateApiMappingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeUpdateApiMappingWithContext(ctx context.Context, in *apigatewayv2.UpdateApiMappingInput, _ ...request.Option) (*apigatewayv2.UpdateApiMappingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateApiMapping cancelled", ctx.Err())
	default:
		return d.UpdateApiMapping(in)
	}
}

func (d *ApiGatewayV2Double) UpdateApiRequest(i0 *apigatewayv2.UpdateApiInput) (r0 *request.Request, r1 *apigatewayv2.UpdateApiOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApiRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.UpdateApiOutput)
	return
}

func (d *ApiGatewayV2Double) UpdateApiWithContext(i0 context.Context, i1 *apigatewayv2.UpdateApiInput, i2 ...request.Option) (r0 *apigatewayv2.UpdateApiOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApiWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.UpdateApiOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeUpdateApiWithContext(ctx context.Context, in *apigatewayv2.UpdateApiInput, _ ...request.Option) (*apigatewayv2.UpdateApiOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateApi cancelled", ctx.Err())
	default:
		return d.UpdateApi(in)
	}
}

func (d *ApiGatewayV2Double) UpdateAuthorizer(i0 *apigatewayv2.UpdateAuthorizerInput) (r0 *apigatewayv2.UpdateAuthorizerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAuthorizer", i0)
	r0, _ = returns[0].(*apigatewayv2.UpdateAuthorizerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) UpdateAuthorizerRequest(i0 *apigatewayv2.UpdateAuthorizerInput) (r0 *request.Request, r1 *apigatewayv2.UpdateAuthorizerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAuthorizerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.UpdateAuthorizerOutput)
	return
}

func (d *ApiGatewayV2Double) UpdateAuthorizerWithContext(i0 context.Context, i1 *apigatewayv2.UpdateAuthorizerInput, i2 ...request.Option) (r0 *apigatewayv2.UpdateAuthorizerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAuthorizerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.UpdateAuthorizerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeUpdateAuthorizerWithContext(ctx context.Context, in *apigatewayv2.UpdateAuthorizerInput, _ ...request.Option) (*apigatewayv2.UpdateAuthorizerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateAuthorizer cancelled", ctx.Err())
	default:
		return d.UpdateAuthorizer(in)
	}
}

func (d *ApiGatewayV2Double) UpdateDeployment(i0 *apigatewayv2.UpdateDeploymentInput) (r0 *apigatewayv2.UpdateDeploymentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDeployment", i0)
	r0, _ = returns[0].(*apigatewayv2.UpdateDeploymentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) UpdateDeploymentRequest(i0 *apigatewayv2.UpdateDeploymentInput) (r0 *request.Request, r1 *apigatewayv2.UpdateDeploymentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDeploymentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.UpdateDeploymentOutput)
	return
}

func (d *ApiGatewayV2Double) UpdateDeploymentWithContext(i0 context.Context, i1 *apigatewayv2.UpdateDeploymentInput, i2 ...request.Option) (r0 *apigatewayv2.UpdateDeploymentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDeploymentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.UpdateDeploymentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeUpdateDeploymentWithContext(ctx context.Context, in *apigatewayv2.UpdateDeploymentInput, _ ...request.Option) (*apigatewayv2.UpdateDeploymentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDeployment cancelled", ctx.Err())
	default:
		return d.UpdateDeployment(in)
	}
}

func (d *ApiGatewayV2Double) UpdateDomainName(i0 *apigatewayv2.UpdateDomainNameInput) (r0 *apigatewayv2.UpdateDomainNameOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDomainName", i0)
	r0, _ = returns[0].(*apigatewayv2.UpdateDomainNameOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) UpdateDomainNameRequest(i0 *apigatewayv2.UpdateDomainNameInput) (r0 *request.Request, r1 *apigatewayv2.UpdateDomainNameOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDomainNameRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.UpdateDomainNameOutput)
	return
}

func (d *ApiGatewayV2Double) UpdateDomainNameWithContext(i0 context.Context, i1 *apigatewayv2.UpdateDomainNameInput, i2 ...request.Option) (r0 *apigatewayv2.UpdateDomainNameOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDomainNameWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.UpdateDomainNameOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeUpdateDomainNameWithContext(ctx context.Context, in *apigatewayv2.UpdateDomainNameInput, _ ...request.Option) (*apigatewayv2.UpdateDomainNameOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDomainName cancelled", ctx.Err())
	default:
		return d.UpdateDomainName(in)
	}
}

func (d *ApiGatewayV2Double) UpdateIntegration(i0 *apigatewayv2.UpdateIntegrationInput) (r0 *apigatewayv2.UpdateIntegrationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateIntegration", i0)
	r0, _ = returns[0].(*apigatewayv2.UpdateIntegrationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) UpdateIntegrationRequest(i0 *apigatewayv2.UpdateIntegrationInput) (r0 *request.Request, r1 *apigatewayv2.UpdateIntegrationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateIntegrationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.UpdateIntegrationOutput)
	return
}

func (d *ApiGatewayV2Double) UpdateIntegrationResponse(i0 *apigatewayv2.UpdateIntegrationResponseInput) (r0 *apigatewayv2.UpdateIntegrationResponseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateIntegrationResponse", i0)
	r0, _ = returns[0].(*apigatewayv2.UpdateIntegrationResponseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) UpdateIntegrationResponseRequest(i0 *apigatewayv2.UpdateIntegrationResponseInput) (r0 *request.Request, r1 *apigatewayv2.UpdateIntegrationResponseOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateIntegrationResponseRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.UpdateIntegrationResponseOutput)
	return
}

func (d *ApiGatewayV2Double) UpdateIntegrationResponseWithContext(i0 context.Context, i1 *apigatewayv2.UpdateIntegrationResponseInput, i2 ...request.Option) (r0 *apigatewayv2.UpdateIntegrationResponseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateIntegrationResponseWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.UpdateIntegrationResponseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeUpdateIntegrationResponseWithContext(ctx context.Context, in *apigatewayv2.UpdateIntegrationResponseInput, _ ...request.Option) (*apigatewayv2.UpdateIntegrationResponseOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateIntegrationResponse cancelled", ctx.Err())
	default:
		return d.UpdateIntegrationResponse(in)
	}
}

func (d *ApiGatewayV2Double) UpdateIntegrationWithContext(i0 context.Context, i1 *apigatewayv2.UpdateIntegrationInput, i2 ...request.Option) (r0 *apigatewayv2.UpdateIntegrationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateIntegrationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.UpdateIntegrationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeUpdateIntegrationWithContext(ctx context.Context, in *apigatewayv2.UpdateIntegrationInput, _ ...request.Option) (*apigatewayv2.UpdateIntegrationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateIntegration cancelled", ctx.Err())
	default:
		return d.UpdateIntegration(in)
	}
}

func (d *ApiGatewayV2Double) UpdateModel(i0 *apigatewayv2.UpdateModelInput) (r0 *apigatewayv2.UpdateModelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateModel", i0)
	r0, _ = returns[0].(*apigatewayv2.UpdateModelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) UpdateModelRequest(i0 *apigatewayv2.UpdateModelInput) (r0 *request.Request, r1 *apigatewayv2.UpdateModelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateModelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.UpdateModelOutput)
	return
}

func (d *ApiGatewayV2Double) UpdateModelWithContext(i0 context.Context, i1 *apigatewayv2.UpdateModelInput, i2 ...request.Option) (r0 *apigatewayv2.UpdateModelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateModelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.UpdateModelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeUpdateModelWithContext(ctx context.Context, in *apigatewayv2.UpdateModelInput, _ ...request.Option) (*apigatewayv2.UpdateModelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateModel cancelled", ctx.Err())
	default:
		return d.UpdateModel(in)
	}
}

func (d *ApiGatewayV2Double) UpdateRoute(i0 *apigatewayv2.UpdateRouteInput) (r0 *apigatewayv2.UpdateRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRoute", i0)
	r0, _ = returns[0].(*apigatewayv2.UpdateRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) UpdateRouteRequest(i0 *apigatewayv2.UpdateRouteInput) (r0 *request.Request, r1 *apigatewayv2.UpdateRouteOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRouteRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.UpdateRouteOutput)
	return
}

func (d *ApiGatewayV2Double) UpdateRouteResponse(i0 *apigatewayv2.UpdateRouteResponseInput) (r0 *apigatewayv2.UpdateRouteResponseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRouteResponse", i0)
	r0, _ = returns[0].(*apigatewayv2.UpdateRouteResponseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) UpdateRouteResponseRequest(i0 *apigatewayv2.UpdateRouteResponseInput) (r0 *request.Request, r1 *apigatewayv2.UpdateRouteResponseOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRouteResponseRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.UpdateRouteResponseOutput)
	return
}

func (d *ApiGatewayV2Double) UpdateRouteResponseWithContext(i0 context.Context, i1 *apigatewayv2.UpdateRouteResponseInput, i2 ...request.Option) (r0 *apigatewayv2.UpdateRouteResponseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRouteResponseWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.UpdateRouteResponseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeUpdateRouteResponseWithContext(ctx context.Context, in *apigatewayv2.UpdateRouteResponseInput, _ ...request.Option) (*apigatewayv2.UpdateRouteResponseOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateRouteResponse cancelled", ctx.Err())
	default:
		return d.UpdateRouteResponse(in)
	}
}

func (d *ApiGatewayV2Double) UpdateRouteWithContext(i0 context.Context, i1 *apigatewayv2.UpdateRouteInput, i2 ...request.Option) (r0 *apigatewayv2.UpdateRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRouteWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.UpdateRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeUpdateRouteWithContext(ctx context.Context, in *apigatewayv2.UpdateRouteInput, _ ...request.Option) (*apigatewayv2.UpdateRouteOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateRoute cancelled", ctx.Err())
	default:
		return d.UpdateRoute(in)
	}
}

func (d *ApiGatewayV2Double) UpdateStage(i0 *apigatewayv2.UpdateStageInput) (r0 *apigatewayv2.UpdateStageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateStage", i0)
	r0, _ = returns[0].(*apigatewayv2.UpdateStageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) UpdateStageRequest(i0 *apigatewayv2.UpdateStageInput) (r0 *request.Request, r1 *apigatewayv2.UpdateStageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateStageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*apigatewayv2.UpdateStageOutput)
	return
}

func (d *ApiGatewayV2Double) UpdateStageWithContext(i0 context.Context, i1 *apigatewayv2.UpdateStageInput, i2 ...request.Option) (r0 *apigatewayv2.UpdateStageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateStageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*apigatewayv2.UpdateStageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ApiGatewayV2Double) fakeUpdateStageWithContext(ctx context.Context, in *apigatewayv2.UpdateStageInput, _ ...request.Option) (*apigatewayv2.UpdateStageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateStage cancelled", ctx.Err())
	default:
		return d.UpdateStage(in)
	}
}
