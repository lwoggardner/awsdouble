// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:13:14+11:00

// Package iotanalyticsdouble provides a TestDouble implementation of iotanalyticsiface.IoTAnalyticsAPI
package iotanalyticsdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/iotanalytics"
	"github.com/aws/aws-sdk-go/service/iotanalytics/iotanalyticsiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// IoTAnalyticsDouble is TestDouble for iotanalyticsiface.IoTAnalyticsAPI
type IoTAnalyticsDouble struct {
	iotanalyticsiface.IoTAnalyticsAPI
	*awsdouble.AWSTestDouble
}

// Constructor for IoTAnalyticsDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *IoTAnalyticsDouble {
	result := &IoTAnalyticsDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*iotanalyticsiface.IoTAnalyticsAPI)(nil), configurators...)
	return result
}

func (d *IoTAnalyticsDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *IoTAnalyticsDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "BatchPutMessageWithContext":
		return m.Fake(d.fakeBatchPutMessageWithContext)

	case "CancelPipelineReprocessingWithContext":
		return m.Fake(d.fakeCancelPipelineReprocessingWithContext)

	case "CreateChannelWithContext":
		return m.Fake(d.fakeCreateChannelWithContext)

	case "CreateDatasetContentWithContext":
		return m.Fake(d.fakeCreateDatasetContentWithContext)

	case "CreateDatasetWithContext":
		return m.Fake(d.fakeCreateDatasetWithContext)

	case "CreateDatastoreWithContext":
		return m.Fake(d.fakeCreateDatastoreWithContext)

	case "CreatePipelineWithContext":
		return m.Fake(d.fakeCreatePipelineWithContext)

	case "DeleteChannelWithContext":
		return m.Fake(d.fakeDeleteChannelWithContext)

	case "DeleteDatasetContentWithContext":
		return m.Fake(d.fakeDeleteDatasetContentWithContext)

	case "DeleteDatasetWithContext":
		return m.Fake(d.fakeDeleteDatasetWithContext)

	case "DeleteDatastoreWithContext":
		return m.Fake(d.fakeDeleteDatastoreWithContext)

	case "DeletePipelineWithContext":
		return m.Fake(d.fakeDeletePipelineWithContext)

	case "DescribeChannelWithContext":
		return m.Fake(d.fakeDescribeChannelWithContext)

	case "DescribeDatasetWithContext":
		return m.Fake(d.fakeDescribeDatasetWithContext)

	case "DescribeDatastoreWithContext":
		return m.Fake(d.fakeDescribeDatastoreWithContext)

	case "DescribeLoggingOptionsWithContext":
		return m.Fake(d.fakeDescribeLoggingOptionsWithContext)

	case "DescribePipelineWithContext":
		return m.Fake(d.fakeDescribePipelineWithContext)

	case "GetDatasetContentWithContext":
		return m.Fake(d.fakeGetDatasetContentWithContext)

	case "ListChannelsPages":
		return m.Fake(d.fakeListChannelsPages)

	case "ListChannelsPagesWithContext":
		return m.Fake(d.fakeListChannelsPagesWithContext)

	case "ListChannelsWithContext":
		return m.Fake(d.fakeListChannelsWithContext)

	case "ListDatasetContentsPages":
		return m.Fake(d.fakeListDatasetContentsPages)

	case "ListDatasetContentsPagesWithContext":
		return m.Fake(d.fakeListDatasetContentsPagesWithContext)

	case "ListDatasetContentsWithContext":
		return m.Fake(d.fakeListDatasetContentsWithContext)

	case "ListDatasetsPages":
		return m.Fake(d.fakeListDatasetsPages)

	case "ListDatasetsPagesWithContext":
		return m.Fake(d.fakeListDatasetsPagesWithContext)

	case "ListDatasetsWithContext":
		return m.Fake(d.fakeListDatasetsWithContext)

	case "ListDatastoresPages":
		return m.Fake(d.fakeListDatastoresPages)

	case "ListDatastoresPagesWithContext":
		return m.Fake(d.fakeListDatastoresPagesWithContext)

	case "ListDatastoresWithContext":
		return m.Fake(d.fakeListDatastoresWithContext)

	case "ListPipelinesPages":
		return m.Fake(d.fakeListPipelinesPages)

	case "ListPipelinesPagesWithContext":
		return m.Fake(d.fakeListPipelinesPagesWithContext)

	case "ListPipelinesWithContext":
		return m.Fake(d.fakeListPipelinesWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "PutLoggingOptionsWithContext":
		return m.Fake(d.fakePutLoggingOptionsWithContext)

	case "RunPipelineActivityWithContext":
		return m.Fake(d.fakeRunPipelineActivityWithContext)

	case "SampleChannelDataWithContext":
		return m.Fake(d.fakeSampleChannelDataWithContext)

	case "StartPipelineReprocessingWithContext":
		return m.Fake(d.fakeStartPipelineReprocessingWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateChannelWithContext":
		return m.Fake(d.fakeUpdateChannelWithContext)

	case "UpdateDatasetWithContext":
		return m.Fake(d.fakeUpdateDatasetWithContext)

	case "UpdateDatastoreWithContext":
		return m.Fake(d.fakeUpdateDatastoreWithContext)

	case "UpdatePipelineWithContext":
		return m.Fake(d.fakeUpdatePipelineWithContext)

	default:
		return nil
	}
}

func (d *IoTAnalyticsDouble) BatchPutMessage(i0 *iotanalytics.BatchPutMessageInput) (r0 *iotanalytics.BatchPutMessageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchPutMessage", i0)
	r0, _ = returns[0].(*iotanalytics.BatchPutMessageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) BatchPutMessageRequest(i0 *iotanalytics.BatchPutMessageInput) (r0 *request.Request, r1 *iotanalytics.BatchPutMessageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchPutMessageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotanalytics.BatchPutMessageOutput)
	return
}

func (d *IoTAnalyticsDouble) BatchPutMessageWithContext(i0 context.Context, i1 *iotanalytics.BatchPutMessageInput, i2 ...request.Option) (r0 *iotanalytics.BatchPutMessageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchPutMessageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotanalytics.BatchPutMessageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeBatchPutMessageWithContext(ctx context.Context, in *iotanalytics.BatchPutMessageInput, _ ...request.Option) (*iotanalytics.BatchPutMessageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchPutMessage cancelled", ctx.Err())
	default:
		return d.BatchPutMessage(in)
	}
}

func (d *IoTAnalyticsDouble) CancelPipelineReprocessing(i0 *iotanalytics.CancelPipelineReprocessingInput) (r0 *iotanalytics.CancelPipelineReprocessingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelPipelineReprocessing", i0)
	r0, _ = returns[0].(*iotanalytics.CancelPipelineReprocessingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) CancelPipelineReprocessingRequest(i0 *iotanalytics.CancelPipelineReprocessingInput) (r0 *request.Request, r1 *iotanalytics.CancelPipelineReprocessingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelPipelineReprocessingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotanalytics.CancelPipelineReprocessingOutput)
	return
}

func (d *IoTAnalyticsDouble) CancelPipelineReprocessingWithContext(i0 context.Context, i1 *iotanalytics.CancelPipelineReprocessingInput, i2 ...request.Option) (r0 *iotanalytics.CancelPipelineReprocessingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelPipelineReprocessingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotanalytics.CancelPipelineReprocessingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeCancelPipelineReprocessingWithContext(ctx context.Context, in *iotanalytics.CancelPipelineReprocessingInput, _ ...request.Option) (*iotanalytics.CancelPipelineReprocessingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelPipelineReprocessing cancelled", ctx.Err())
	default:
		return d.CancelPipelineReprocessing(in)
	}
}

func (d *IoTAnalyticsDouble) CreateChannel(i0 *iotanalytics.CreateChannelInput) (r0 *iotanalytics.CreateChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateChannel", i0)
	r0, _ = returns[0].(*iotanalytics.CreateChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) CreateChannelRequest(i0 *iotanalytics.CreateChannelInput) (r0 *request.Request, r1 *iotanalytics.CreateChannelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateChannelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotanalytics.CreateChannelOutput)
	return
}

func (d *IoTAnalyticsDouble) CreateChannelWithContext(i0 context.Context, i1 *iotanalytics.CreateChannelInput, i2 ...request.Option) (r0 *iotanalytics.CreateChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateChannelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotanalytics.CreateChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeCreateChannelWithContext(ctx context.Context, in *iotanalytics.CreateChannelInput, _ ...request.Option) (*iotanalytics.CreateChannelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateChannel cancelled", ctx.Err())
	default:
		return d.CreateChannel(in)
	}
}

func (d *IoTAnalyticsDouble) CreateDataset(i0 *iotanalytics.CreateDatasetInput) (r0 *iotanalytics.CreateDatasetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDataset", i0)
	r0, _ = returns[0].(*iotanalytics.CreateDatasetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) CreateDatasetContent(i0 *iotanalytics.CreateDatasetContentInput) (r0 *iotanalytics.CreateDatasetContentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDatasetContent", i0)
	r0, _ = returns[0].(*iotanalytics.CreateDatasetContentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) CreateDatasetContentRequest(i0 *iotanalytics.CreateDatasetContentInput) (r0 *request.Request, r1 *iotanalytics.CreateDatasetContentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDatasetContentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotanalytics.CreateDatasetContentOutput)
	return
}

func (d *IoTAnalyticsDouble) CreateDatasetContentWithContext(i0 context.Context, i1 *iotanalytics.CreateDatasetContentInput, i2 ...request.Option) (r0 *iotanalytics.CreateDatasetContentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDatasetContentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotanalytics.CreateDatasetContentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeCreateDatasetContentWithContext(ctx context.Context, in *iotanalytics.CreateDatasetContentInput, _ ...request.Option) (*iotanalytics.CreateDatasetContentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDatasetContent cancelled", ctx.Err())
	default:
		return d.CreateDatasetContent(in)
	}
}

func (d *IoTAnalyticsDouble) CreateDatasetRequest(i0 *iotanalytics.CreateDatasetInput) (r0 *request.Request, r1 *iotanalytics.CreateDatasetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDatasetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotanalytics.CreateDatasetOutput)
	return
}

func (d *IoTAnalyticsDouble) CreateDatasetWithContext(i0 context.Context, i1 *iotanalytics.CreateDatasetInput, i2 ...request.Option) (r0 *iotanalytics.CreateDatasetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDatasetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotanalytics.CreateDatasetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeCreateDatasetWithContext(ctx context.Context, in *iotanalytics.CreateDatasetInput, _ ...request.Option) (*iotanalytics.CreateDatasetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDataset cancelled", ctx.Err())
	default:
		return d.CreateDataset(in)
	}
}

func (d *IoTAnalyticsDouble) CreateDatastore(i0 *iotanalytics.CreateDatastoreInput) (r0 *iotanalytics.CreateDatastoreOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDatastore", i0)
	r0, _ = returns[0].(*iotanalytics.CreateDatastoreOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) CreateDatastoreRequest(i0 *iotanalytics.CreateDatastoreInput) (r0 *request.Request, r1 *iotanalytics.CreateDatastoreOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDatastoreRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotanalytics.CreateDatastoreOutput)
	return
}

func (d *IoTAnalyticsDouble) CreateDatastoreWithContext(i0 context.Context, i1 *iotanalytics.CreateDatastoreInput, i2 ...request.Option) (r0 *iotanalytics.CreateDatastoreOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDatastoreWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotanalytics.CreateDatastoreOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeCreateDatastoreWithContext(ctx context.Context, in *iotanalytics.CreateDatastoreInput, _ ...request.Option) (*iotanalytics.CreateDatastoreOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDatastore cancelled", ctx.Err())
	default:
		return d.CreateDatastore(in)
	}
}

func (d *IoTAnalyticsDouble) CreatePipeline(i0 *iotanalytics.CreatePipelineInput) (r0 *iotanalytics.CreatePipelineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePipeline", i0)
	r0, _ = returns[0].(*iotanalytics.CreatePipelineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) CreatePipelineRequest(i0 *iotanalytics.CreatePipelineInput) (r0 *request.Request, r1 *iotanalytics.CreatePipelineOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePipelineRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotanalytics.CreatePipelineOutput)
	return
}

func (d *IoTAnalyticsDouble) CreatePipelineWithContext(i0 context.Context, i1 *iotanalytics.CreatePipelineInput, i2 ...request.Option) (r0 *iotanalytics.CreatePipelineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePipelineWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotanalytics.CreatePipelineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeCreatePipelineWithContext(ctx context.Context, in *iotanalytics.CreatePipelineInput, _ ...request.Option) (*iotanalytics.CreatePipelineOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreatePipeline cancelled", ctx.Err())
	default:
		return d.CreatePipeline(in)
	}
}

func (d *IoTAnalyticsDouble) DeleteChannel(i0 *iotanalytics.DeleteChannelInput) (r0 *iotanalytics.DeleteChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteChannel", i0)
	r0, _ = returns[0].(*iotanalytics.DeleteChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) DeleteChannelRequest(i0 *iotanalytics.DeleteChannelInput) (r0 *request.Request, r1 *iotanalytics.DeleteChannelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteChannelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotanalytics.DeleteChannelOutput)
	return
}

func (d *IoTAnalyticsDouble) DeleteChannelWithContext(i0 context.Context, i1 *iotanalytics.DeleteChannelInput, i2 ...request.Option) (r0 *iotanalytics.DeleteChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteChannelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotanalytics.DeleteChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeDeleteChannelWithContext(ctx context.Context, in *iotanalytics.DeleteChannelInput, _ ...request.Option) (*iotanalytics.DeleteChannelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteChannel cancelled", ctx.Err())
	default:
		return d.DeleteChannel(in)
	}
}

func (d *IoTAnalyticsDouble) DeleteDataset(i0 *iotanalytics.DeleteDatasetInput) (r0 *iotanalytics.DeleteDatasetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDataset", i0)
	r0, _ = returns[0].(*iotanalytics.DeleteDatasetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) DeleteDatasetContent(i0 *iotanalytics.DeleteDatasetContentInput) (r0 *iotanalytics.DeleteDatasetContentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDatasetContent", i0)
	r0, _ = returns[0].(*iotanalytics.DeleteDatasetContentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) DeleteDatasetContentRequest(i0 *iotanalytics.DeleteDatasetContentInput) (r0 *request.Request, r1 *iotanalytics.DeleteDatasetContentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDatasetContentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotanalytics.DeleteDatasetContentOutput)
	return
}

func (d *IoTAnalyticsDouble) DeleteDatasetContentWithContext(i0 context.Context, i1 *iotanalytics.DeleteDatasetContentInput, i2 ...request.Option) (r0 *iotanalytics.DeleteDatasetContentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDatasetContentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotanalytics.DeleteDatasetContentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeDeleteDatasetContentWithContext(ctx context.Context, in *iotanalytics.DeleteDatasetContentInput, _ ...request.Option) (*iotanalytics.DeleteDatasetContentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDatasetContent cancelled", ctx.Err())
	default:
		return d.DeleteDatasetContent(in)
	}
}

func (d *IoTAnalyticsDouble) DeleteDatasetRequest(i0 *iotanalytics.DeleteDatasetInput) (r0 *request.Request, r1 *iotanalytics.DeleteDatasetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDatasetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotanalytics.DeleteDatasetOutput)
	return
}

func (d *IoTAnalyticsDouble) DeleteDatasetWithContext(i0 context.Context, i1 *iotanalytics.DeleteDatasetInput, i2 ...request.Option) (r0 *iotanalytics.DeleteDatasetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDatasetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotanalytics.DeleteDatasetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeDeleteDatasetWithContext(ctx context.Context, in *iotanalytics.DeleteDatasetInput, _ ...request.Option) (*iotanalytics.DeleteDatasetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDataset cancelled", ctx.Err())
	default:
		return d.DeleteDataset(in)
	}
}

func (d *IoTAnalyticsDouble) DeleteDatastore(i0 *iotanalytics.DeleteDatastoreInput) (r0 *iotanalytics.DeleteDatastoreOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDatastore", i0)
	r0, _ = returns[0].(*iotanalytics.DeleteDatastoreOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) DeleteDatastoreRequest(i0 *iotanalytics.DeleteDatastoreInput) (r0 *request.Request, r1 *iotanalytics.DeleteDatastoreOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDatastoreRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotanalytics.DeleteDatastoreOutput)
	return
}

func (d *IoTAnalyticsDouble) DeleteDatastoreWithContext(i0 context.Context, i1 *iotanalytics.DeleteDatastoreInput, i2 ...request.Option) (r0 *iotanalytics.DeleteDatastoreOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDatastoreWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotanalytics.DeleteDatastoreOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeDeleteDatastoreWithContext(ctx context.Context, in *iotanalytics.DeleteDatastoreInput, _ ...request.Option) (*iotanalytics.DeleteDatastoreOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDatastore cancelled", ctx.Err())
	default:
		return d.DeleteDatastore(in)
	}
}

func (d *IoTAnalyticsDouble) DeletePipeline(i0 *iotanalytics.DeletePipelineInput) (r0 *iotanalytics.DeletePipelineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePipeline", i0)
	r0, _ = returns[0].(*iotanalytics.DeletePipelineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) DeletePipelineRequest(i0 *iotanalytics.DeletePipelineInput) (r0 *request.Request, r1 *iotanalytics.DeletePipelineOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePipelineRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotanalytics.DeletePipelineOutput)
	return
}

func (d *IoTAnalyticsDouble) DeletePipelineWithContext(i0 context.Context, i1 *iotanalytics.DeletePipelineInput, i2 ...request.Option) (r0 *iotanalytics.DeletePipelineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePipelineWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotanalytics.DeletePipelineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeDeletePipelineWithContext(ctx context.Context, in *iotanalytics.DeletePipelineInput, _ ...request.Option) (*iotanalytics.DeletePipelineOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeletePipeline cancelled", ctx.Err())
	default:
		return d.DeletePipeline(in)
	}
}

func (d *IoTAnalyticsDouble) DescribeChannel(i0 *iotanalytics.DescribeChannelInput) (r0 *iotanalytics.DescribeChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeChannel", i0)
	r0, _ = returns[0].(*iotanalytics.DescribeChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) DescribeChannelRequest(i0 *iotanalytics.DescribeChannelInput) (r0 *request.Request, r1 *iotanalytics.DescribeChannelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeChannelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotanalytics.DescribeChannelOutput)
	return
}

func (d *IoTAnalyticsDouble) DescribeChannelWithContext(i0 context.Context, i1 *iotanalytics.DescribeChannelInput, i2 ...request.Option) (r0 *iotanalytics.DescribeChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeChannelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotanalytics.DescribeChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeDescribeChannelWithContext(ctx context.Context, in *iotanalytics.DescribeChannelInput, _ ...request.Option) (*iotanalytics.DescribeChannelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeChannel cancelled", ctx.Err())
	default:
		return d.DescribeChannel(in)
	}
}

func (d *IoTAnalyticsDouble) DescribeDataset(i0 *iotanalytics.DescribeDatasetInput) (r0 *iotanalytics.DescribeDatasetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDataset", i0)
	r0, _ = returns[0].(*iotanalytics.DescribeDatasetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) DescribeDatasetRequest(i0 *iotanalytics.DescribeDatasetInput) (r0 *request.Request, r1 *iotanalytics.DescribeDatasetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDatasetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotanalytics.DescribeDatasetOutput)
	return
}

func (d *IoTAnalyticsDouble) DescribeDatasetWithContext(i0 context.Context, i1 *iotanalytics.DescribeDatasetInput, i2 ...request.Option) (r0 *iotanalytics.DescribeDatasetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDatasetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotanalytics.DescribeDatasetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeDescribeDatasetWithContext(ctx context.Context, in *iotanalytics.DescribeDatasetInput, _ ...request.Option) (*iotanalytics.DescribeDatasetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDataset cancelled", ctx.Err())
	default:
		return d.DescribeDataset(in)
	}
}

func (d *IoTAnalyticsDouble) DescribeDatastore(i0 *iotanalytics.DescribeDatastoreInput) (r0 *iotanalytics.DescribeDatastoreOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDatastore", i0)
	r0, _ = returns[0].(*iotanalytics.DescribeDatastoreOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) DescribeDatastoreRequest(i0 *iotanalytics.DescribeDatastoreInput) (r0 *request.Request, r1 *iotanalytics.DescribeDatastoreOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDatastoreRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotanalytics.DescribeDatastoreOutput)
	return
}

func (d *IoTAnalyticsDouble) DescribeDatastoreWithContext(i0 context.Context, i1 *iotanalytics.DescribeDatastoreInput, i2 ...request.Option) (r0 *iotanalytics.DescribeDatastoreOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDatastoreWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotanalytics.DescribeDatastoreOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeDescribeDatastoreWithContext(ctx context.Context, in *iotanalytics.DescribeDatastoreInput, _ ...request.Option) (*iotanalytics.DescribeDatastoreOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDatastore cancelled", ctx.Err())
	default:
		return d.DescribeDatastore(in)
	}
}

func (d *IoTAnalyticsDouble) DescribeLoggingOptions(i0 *iotanalytics.DescribeLoggingOptionsInput) (r0 *iotanalytics.DescribeLoggingOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoggingOptions", i0)
	r0, _ = returns[0].(*iotanalytics.DescribeLoggingOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) DescribeLoggingOptionsRequest(i0 *iotanalytics.DescribeLoggingOptionsInput) (r0 *request.Request, r1 *iotanalytics.DescribeLoggingOptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoggingOptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotanalytics.DescribeLoggingOptionsOutput)
	return
}

func (d *IoTAnalyticsDouble) DescribeLoggingOptionsWithContext(i0 context.Context, i1 *iotanalytics.DescribeLoggingOptionsInput, i2 ...request.Option) (r0 *iotanalytics.DescribeLoggingOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoggingOptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotanalytics.DescribeLoggingOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeDescribeLoggingOptionsWithContext(ctx context.Context, in *iotanalytics.DescribeLoggingOptionsInput, _ ...request.Option) (*iotanalytics.DescribeLoggingOptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeLoggingOptions cancelled", ctx.Err())
	default:
		return d.DescribeLoggingOptions(in)
	}
}

func (d *IoTAnalyticsDouble) DescribePipeline(i0 *iotanalytics.DescribePipelineInput) (r0 *iotanalytics.DescribePipelineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePipeline", i0)
	r0, _ = returns[0].(*iotanalytics.DescribePipelineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) DescribePipelineRequest(i0 *iotanalytics.DescribePipelineInput) (r0 *request.Request, r1 *iotanalytics.DescribePipelineOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePipelineRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotanalytics.DescribePipelineOutput)
	return
}

func (d *IoTAnalyticsDouble) DescribePipelineWithContext(i0 context.Context, i1 *iotanalytics.DescribePipelineInput, i2 ...request.Option) (r0 *iotanalytics.DescribePipelineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePipelineWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotanalytics.DescribePipelineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeDescribePipelineWithContext(ctx context.Context, in *iotanalytics.DescribePipelineInput, _ ...request.Option) (*iotanalytics.DescribePipelineOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribePipeline cancelled", ctx.Err())
	default:
		return d.DescribePipeline(in)
	}
}

func (d *IoTAnalyticsDouble) GetDatasetContent(i0 *iotanalytics.GetDatasetContentInput) (r0 *iotanalytics.GetDatasetContentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDatasetContent", i0)
	r0, _ = returns[0].(*iotanalytics.GetDatasetContentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) GetDatasetContentRequest(i0 *iotanalytics.GetDatasetContentInput) (r0 *request.Request, r1 *iotanalytics.GetDatasetContentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDatasetContentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotanalytics.GetDatasetContentOutput)
	return
}

func (d *IoTAnalyticsDouble) GetDatasetContentWithContext(i0 context.Context, i1 *iotanalytics.GetDatasetContentInput, i2 ...request.Option) (r0 *iotanalytics.GetDatasetContentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDatasetContentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotanalytics.GetDatasetContentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeGetDatasetContentWithContext(ctx context.Context, in *iotanalytics.GetDatasetContentInput, _ ...request.Option) (*iotanalytics.GetDatasetContentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDatasetContent cancelled", ctx.Err())
	default:
		return d.GetDatasetContent(in)
	}
}

func (d *IoTAnalyticsDouble) ListChannels(i0 *iotanalytics.ListChannelsInput) (r0 *iotanalytics.ListChannelsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListChannels", i0)
	r0, _ = returns[0].(*iotanalytics.ListChannelsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) ListChannelsPages(i0 *iotanalytics.ListChannelsInput, i1 func(*iotanalytics.ListChannelsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListChannelsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeListChannelsPages(in *iotanalytics.ListChannelsInput, pager func(*iotanalytics.ListChannelsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListChannels", paginators, in, pager)
}

func (d *IoTAnalyticsDouble) ListChannelsPagesWithContext(i0 context.Context, i1 *iotanalytics.ListChannelsInput, i2 func(*iotanalytics.ListChannelsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListChannelsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeListChannelsPagesWithContext(ctx context.Context, in *iotanalytics.ListChannelsInput, pager func(*iotanalytics.ListChannelsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListChannels", paginators, ctx, in, pager, options...)
}

func (d *IoTAnalyticsDouble) ListChannelsRequest(i0 *iotanalytics.ListChannelsInput) (r0 *request.Request, r1 *iotanalytics.ListChannelsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListChannelsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotanalytics.ListChannelsOutput)
	return
}

func (d *IoTAnalyticsDouble) ListChannelsWithContext(i0 context.Context, i1 *iotanalytics.ListChannelsInput, i2 ...request.Option) (r0 *iotanalytics.ListChannelsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListChannelsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotanalytics.ListChannelsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeListChannelsWithContext(ctx context.Context, in *iotanalytics.ListChannelsInput, _ ...request.Option) (*iotanalytics.ListChannelsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListChannels cancelled", ctx.Err())
	default:
		return d.ListChannels(in)
	}
}

func (d *IoTAnalyticsDouble) ListDatasetContents(i0 *iotanalytics.ListDatasetContentsInput) (r0 *iotanalytics.ListDatasetContentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDatasetContents", i0)
	r0, _ = returns[0].(*iotanalytics.ListDatasetContentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) ListDatasetContentsPages(i0 *iotanalytics.ListDatasetContentsInput, i1 func(*iotanalytics.ListDatasetContentsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDatasetContentsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeListDatasetContentsPages(in *iotanalytics.ListDatasetContentsInput, pager func(*iotanalytics.ListDatasetContentsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListDatasetContents", paginators, in, pager)
}

func (d *IoTAnalyticsDouble) ListDatasetContentsPagesWithContext(i0 context.Context, i1 *iotanalytics.ListDatasetContentsInput, i2 func(*iotanalytics.ListDatasetContentsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDatasetContentsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeListDatasetContentsPagesWithContext(ctx context.Context, in *iotanalytics.ListDatasetContentsInput, pager func(*iotanalytics.ListDatasetContentsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListDatasetContents", paginators, ctx, in, pager, options...)
}

func (d *IoTAnalyticsDouble) ListDatasetContentsRequest(i0 *iotanalytics.ListDatasetContentsInput) (r0 *request.Request, r1 *iotanalytics.ListDatasetContentsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDatasetContentsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotanalytics.ListDatasetContentsOutput)
	return
}

func (d *IoTAnalyticsDouble) ListDatasetContentsWithContext(i0 context.Context, i1 *iotanalytics.ListDatasetContentsInput, i2 ...request.Option) (r0 *iotanalytics.ListDatasetContentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDatasetContentsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotanalytics.ListDatasetContentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeListDatasetContentsWithContext(ctx context.Context, in *iotanalytics.ListDatasetContentsInput, _ ...request.Option) (*iotanalytics.ListDatasetContentsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDatasetContents cancelled", ctx.Err())
	default:
		return d.ListDatasetContents(in)
	}
}

func (d *IoTAnalyticsDouble) ListDatasets(i0 *iotanalytics.ListDatasetsInput) (r0 *iotanalytics.ListDatasetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDatasets", i0)
	r0, _ = returns[0].(*iotanalytics.ListDatasetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) ListDatasetsPages(i0 *iotanalytics.ListDatasetsInput, i1 func(*iotanalytics.ListDatasetsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDatasetsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeListDatasetsPages(in *iotanalytics.ListDatasetsInput, pager func(*iotanalytics.ListDatasetsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListDatasets", paginators, in, pager)
}

func (d *IoTAnalyticsDouble) ListDatasetsPagesWithContext(i0 context.Context, i1 *iotanalytics.ListDatasetsInput, i2 func(*iotanalytics.ListDatasetsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDatasetsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeListDatasetsPagesWithContext(ctx context.Context, in *iotanalytics.ListDatasetsInput, pager func(*iotanalytics.ListDatasetsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListDatasets", paginators, ctx, in, pager, options...)
}

func (d *IoTAnalyticsDouble) ListDatasetsRequest(i0 *iotanalytics.ListDatasetsInput) (r0 *request.Request, r1 *iotanalytics.ListDatasetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDatasetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotanalytics.ListDatasetsOutput)
	return
}

func (d *IoTAnalyticsDouble) ListDatasetsWithContext(i0 context.Context, i1 *iotanalytics.ListDatasetsInput, i2 ...request.Option) (r0 *iotanalytics.ListDatasetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDatasetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotanalytics.ListDatasetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeListDatasetsWithContext(ctx context.Context, in *iotanalytics.ListDatasetsInput, _ ...request.Option) (*iotanalytics.ListDatasetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDatasets cancelled", ctx.Err())
	default:
		return d.ListDatasets(in)
	}
}

func (d *IoTAnalyticsDouble) ListDatastores(i0 *iotanalytics.ListDatastoresInput) (r0 *iotanalytics.ListDatastoresOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDatastores", i0)
	r0, _ = returns[0].(*iotanalytics.ListDatastoresOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) ListDatastoresPages(i0 *iotanalytics.ListDatastoresInput, i1 func(*iotanalytics.ListDatastoresOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDatastoresPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeListDatastoresPages(in *iotanalytics.ListDatastoresInput, pager func(*iotanalytics.ListDatastoresOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListDatastores", paginators, in, pager)
}

func (d *IoTAnalyticsDouble) ListDatastoresPagesWithContext(i0 context.Context, i1 *iotanalytics.ListDatastoresInput, i2 func(*iotanalytics.ListDatastoresOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDatastoresPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeListDatastoresPagesWithContext(ctx context.Context, in *iotanalytics.ListDatastoresInput, pager func(*iotanalytics.ListDatastoresOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListDatastores", paginators, ctx, in, pager, options...)
}

func (d *IoTAnalyticsDouble) ListDatastoresRequest(i0 *iotanalytics.ListDatastoresInput) (r0 *request.Request, r1 *iotanalytics.ListDatastoresOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDatastoresRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotanalytics.ListDatastoresOutput)
	return
}

func (d *IoTAnalyticsDouble) ListDatastoresWithContext(i0 context.Context, i1 *iotanalytics.ListDatastoresInput, i2 ...request.Option) (r0 *iotanalytics.ListDatastoresOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDatastoresWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotanalytics.ListDatastoresOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeListDatastoresWithContext(ctx context.Context, in *iotanalytics.ListDatastoresInput, _ ...request.Option) (*iotanalytics.ListDatastoresOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDatastores cancelled", ctx.Err())
	default:
		return d.ListDatastores(in)
	}
}

func (d *IoTAnalyticsDouble) ListPipelines(i0 *iotanalytics.ListPipelinesInput) (r0 *iotanalytics.ListPipelinesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPipelines", i0)
	r0, _ = returns[0].(*iotanalytics.ListPipelinesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) ListPipelinesPages(i0 *iotanalytics.ListPipelinesInput, i1 func(*iotanalytics.ListPipelinesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPipelinesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeListPipelinesPages(in *iotanalytics.ListPipelinesInput, pager func(*iotanalytics.ListPipelinesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListPipelines", paginators, in, pager)
}

func (d *IoTAnalyticsDouble) ListPipelinesPagesWithContext(i0 context.Context, i1 *iotanalytics.ListPipelinesInput, i2 func(*iotanalytics.ListPipelinesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPipelinesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeListPipelinesPagesWithContext(ctx context.Context, in *iotanalytics.ListPipelinesInput, pager func(*iotanalytics.ListPipelinesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListPipelines", paginators, ctx, in, pager, options...)
}

func (d *IoTAnalyticsDouble) ListPipelinesRequest(i0 *iotanalytics.ListPipelinesInput) (r0 *request.Request, r1 *iotanalytics.ListPipelinesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPipelinesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotanalytics.ListPipelinesOutput)
	return
}

func (d *IoTAnalyticsDouble) ListPipelinesWithContext(i0 context.Context, i1 *iotanalytics.ListPipelinesInput, i2 ...request.Option) (r0 *iotanalytics.ListPipelinesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPipelinesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotanalytics.ListPipelinesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeListPipelinesWithContext(ctx context.Context, in *iotanalytics.ListPipelinesInput, _ ...request.Option) (*iotanalytics.ListPipelinesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListPipelines cancelled", ctx.Err())
	default:
		return d.ListPipelines(in)
	}
}

func (d *IoTAnalyticsDouble) ListTagsForResource(i0 *iotanalytics.ListTagsForResourceInput) (r0 *iotanalytics.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*iotanalytics.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) ListTagsForResourceRequest(i0 *iotanalytics.ListTagsForResourceInput) (r0 *request.Request, r1 *iotanalytics.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotanalytics.ListTagsForResourceOutput)
	return
}

func (d *IoTAnalyticsDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *iotanalytics.ListTagsForResourceInput, i2 ...request.Option) (r0 *iotanalytics.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotanalytics.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *iotanalytics.ListTagsForResourceInput, _ ...request.Option) (*iotanalytics.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *IoTAnalyticsDouble) PutLoggingOptions(i0 *iotanalytics.PutLoggingOptionsInput) (r0 *iotanalytics.PutLoggingOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutLoggingOptions", i0)
	r0, _ = returns[0].(*iotanalytics.PutLoggingOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) PutLoggingOptionsRequest(i0 *iotanalytics.PutLoggingOptionsInput) (r0 *request.Request, r1 *iotanalytics.PutLoggingOptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutLoggingOptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotanalytics.PutLoggingOptionsOutput)
	return
}

func (d *IoTAnalyticsDouble) PutLoggingOptionsWithContext(i0 context.Context, i1 *iotanalytics.PutLoggingOptionsInput, i2 ...request.Option) (r0 *iotanalytics.PutLoggingOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutLoggingOptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotanalytics.PutLoggingOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) fakePutLoggingOptionsWithContext(ctx context.Context, in *iotanalytics.PutLoggingOptionsInput, _ ...request.Option) (*iotanalytics.PutLoggingOptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutLoggingOptions cancelled", ctx.Err())
	default:
		return d.PutLoggingOptions(in)
	}
}

func (d *IoTAnalyticsDouble) RunPipelineActivity(i0 *iotanalytics.RunPipelineActivityInput) (r0 *iotanalytics.RunPipelineActivityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RunPipelineActivity", i0)
	r0, _ = returns[0].(*iotanalytics.RunPipelineActivityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) RunPipelineActivityRequest(i0 *iotanalytics.RunPipelineActivityInput) (r0 *request.Request, r1 *iotanalytics.RunPipelineActivityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RunPipelineActivityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotanalytics.RunPipelineActivityOutput)
	return
}

func (d *IoTAnalyticsDouble) RunPipelineActivityWithContext(i0 context.Context, i1 *iotanalytics.RunPipelineActivityInput, i2 ...request.Option) (r0 *iotanalytics.RunPipelineActivityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RunPipelineActivityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotanalytics.RunPipelineActivityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeRunPipelineActivityWithContext(ctx context.Context, in *iotanalytics.RunPipelineActivityInput, _ ...request.Option) (*iotanalytics.RunPipelineActivityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RunPipelineActivity cancelled", ctx.Err())
	default:
		return d.RunPipelineActivity(in)
	}
}

func (d *IoTAnalyticsDouble) SampleChannelData(i0 *iotanalytics.SampleChannelDataInput) (r0 *iotanalytics.SampleChannelDataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SampleChannelData", i0)
	r0, _ = returns[0].(*iotanalytics.SampleChannelDataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) SampleChannelDataRequest(i0 *iotanalytics.SampleChannelDataInput) (r0 *request.Request, r1 *iotanalytics.SampleChannelDataOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SampleChannelDataRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotanalytics.SampleChannelDataOutput)
	return
}

func (d *IoTAnalyticsDouble) SampleChannelDataWithContext(i0 context.Context, i1 *iotanalytics.SampleChannelDataInput, i2 ...request.Option) (r0 *iotanalytics.SampleChannelDataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SampleChannelDataWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotanalytics.SampleChannelDataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeSampleChannelDataWithContext(ctx context.Context, in *iotanalytics.SampleChannelDataInput, _ ...request.Option) (*iotanalytics.SampleChannelDataOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SampleChannelData cancelled", ctx.Err())
	default:
		return d.SampleChannelData(in)
	}
}

func (d *IoTAnalyticsDouble) StartPipelineReprocessing(i0 *iotanalytics.StartPipelineReprocessingInput) (r0 *iotanalytics.StartPipelineReprocessingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartPipelineReprocessing", i0)
	r0, _ = returns[0].(*iotanalytics.StartPipelineReprocessingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) StartPipelineReprocessingRequest(i0 *iotanalytics.StartPipelineReprocessingInput) (r0 *request.Request, r1 *iotanalytics.StartPipelineReprocessingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartPipelineReprocessingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotanalytics.StartPipelineReprocessingOutput)
	return
}

func (d *IoTAnalyticsDouble) StartPipelineReprocessingWithContext(i0 context.Context, i1 *iotanalytics.StartPipelineReprocessingInput, i2 ...request.Option) (r0 *iotanalytics.StartPipelineReprocessingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartPipelineReprocessingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotanalytics.StartPipelineReprocessingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeStartPipelineReprocessingWithContext(ctx context.Context, in *iotanalytics.StartPipelineReprocessingInput, _ ...request.Option) (*iotanalytics.StartPipelineReprocessingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartPipelineReprocessing cancelled", ctx.Err())
	default:
		return d.StartPipelineReprocessing(in)
	}
}

func (d *IoTAnalyticsDouble) TagResource(i0 *iotanalytics.TagResourceInput) (r0 *iotanalytics.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*iotanalytics.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) TagResourceRequest(i0 *iotanalytics.TagResourceInput) (r0 *request.Request, r1 *iotanalytics.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotanalytics.TagResourceOutput)
	return
}

func (d *IoTAnalyticsDouble) TagResourceWithContext(i0 context.Context, i1 *iotanalytics.TagResourceInput, i2 ...request.Option) (r0 *iotanalytics.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotanalytics.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeTagResourceWithContext(ctx context.Context, in *iotanalytics.TagResourceInput, _ ...request.Option) (*iotanalytics.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *IoTAnalyticsDouble) UntagResource(i0 *iotanalytics.UntagResourceInput) (r0 *iotanalytics.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*iotanalytics.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) UntagResourceRequest(i0 *iotanalytics.UntagResourceInput) (r0 *request.Request, r1 *iotanalytics.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotanalytics.UntagResourceOutput)
	return
}

func (d *IoTAnalyticsDouble) UntagResourceWithContext(i0 context.Context, i1 *iotanalytics.UntagResourceInput, i2 ...request.Option) (r0 *iotanalytics.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotanalytics.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeUntagResourceWithContext(ctx context.Context, in *iotanalytics.UntagResourceInput, _ ...request.Option) (*iotanalytics.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *IoTAnalyticsDouble) UpdateChannel(i0 *iotanalytics.UpdateChannelInput) (r0 *iotanalytics.UpdateChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateChannel", i0)
	r0, _ = returns[0].(*iotanalytics.UpdateChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) UpdateChannelRequest(i0 *iotanalytics.UpdateChannelInput) (r0 *request.Request, r1 *iotanalytics.UpdateChannelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateChannelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotanalytics.UpdateChannelOutput)
	return
}

func (d *IoTAnalyticsDouble) UpdateChannelWithContext(i0 context.Context, i1 *iotanalytics.UpdateChannelInput, i2 ...request.Option) (r0 *iotanalytics.UpdateChannelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateChannelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotanalytics.UpdateChannelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeUpdateChannelWithContext(ctx context.Context, in *iotanalytics.UpdateChannelInput, _ ...request.Option) (*iotanalytics.UpdateChannelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateChannel cancelled", ctx.Err())
	default:
		return d.UpdateChannel(in)
	}
}

func (d *IoTAnalyticsDouble) UpdateDataset(i0 *iotanalytics.UpdateDatasetInput) (r0 *iotanalytics.UpdateDatasetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDataset", i0)
	r0, _ = returns[0].(*iotanalytics.UpdateDatasetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) UpdateDatasetRequest(i0 *iotanalytics.UpdateDatasetInput) (r0 *request.Request, r1 *iotanalytics.UpdateDatasetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDatasetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotanalytics.UpdateDatasetOutput)
	return
}

func (d *IoTAnalyticsDouble) UpdateDatasetWithContext(i0 context.Context, i1 *iotanalytics.UpdateDatasetInput, i2 ...request.Option) (r0 *iotanalytics.UpdateDatasetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDatasetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotanalytics.UpdateDatasetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeUpdateDatasetWithContext(ctx context.Context, in *iotanalytics.UpdateDatasetInput, _ ...request.Option) (*iotanalytics.UpdateDatasetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDataset cancelled", ctx.Err())
	default:
		return d.UpdateDataset(in)
	}
}

func (d *IoTAnalyticsDouble) UpdateDatastore(i0 *iotanalytics.UpdateDatastoreInput) (r0 *iotanalytics.UpdateDatastoreOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDatastore", i0)
	r0, _ = returns[0].(*iotanalytics.UpdateDatastoreOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) UpdateDatastoreRequest(i0 *iotanalytics.UpdateDatastoreInput) (r0 *request.Request, r1 *iotanalytics.UpdateDatastoreOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDatastoreRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotanalytics.UpdateDatastoreOutput)
	return
}

func (d *IoTAnalyticsDouble) UpdateDatastoreWithContext(i0 context.Context, i1 *iotanalytics.UpdateDatastoreInput, i2 ...request.Option) (r0 *iotanalytics.UpdateDatastoreOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDatastoreWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotanalytics.UpdateDatastoreOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeUpdateDatastoreWithContext(ctx context.Context, in *iotanalytics.UpdateDatastoreInput, _ ...request.Option) (*iotanalytics.UpdateDatastoreOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDatastore cancelled", ctx.Err())
	default:
		return d.UpdateDatastore(in)
	}
}

func (d *IoTAnalyticsDouble) UpdatePipeline(i0 *iotanalytics.UpdatePipelineInput) (r0 *iotanalytics.UpdatePipelineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePipeline", i0)
	r0, _ = returns[0].(*iotanalytics.UpdatePipelineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) UpdatePipelineRequest(i0 *iotanalytics.UpdatePipelineInput) (r0 *request.Request, r1 *iotanalytics.UpdatePipelineOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePipelineRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotanalytics.UpdatePipelineOutput)
	return
}

func (d *IoTAnalyticsDouble) UpdatePipelineWithContext(i0 context.Context, i1 *iotanalytics.UpdatePipelineInput, i2 ...request.Option) (r0 *iotanalytics.UpdatePipelineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePipelineWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotanalytics.UpdatePipelineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTAnalyticsDouble) fakeUpdatePipelineWithContext(ctx context.Context, in *iotanalytics.UpdatePipelineInput, _ ...request.Option) (*iotanalytics.UpdatePipelineOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdatePipeline cancelled", ctx.Err())
	default:
		return d.UpdatePipeline(in)
	}
}
