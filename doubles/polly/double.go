// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:14:25+11:00

// Package pollydouble provides a TestDouble implementation of pollyiface.PollyAPI
package pollydouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/polly"
	"github.com/aws/aws-sdk-go/service/polly/pollyiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// PollyDouble is TestDouble for pollyiface.PollyAPI
type PollyDouble struct {
	pollyiface.PollyAPI
	*awsdouble.AWSTestDouble
}

// Constructor for PollyDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *PollyDouble {
	result := &PollyDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*pollyiface.PollyAPI)(nil), configurators...)
	return result
}

func (d *PollyDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *PollyDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "DeleteLexiconWithContext":
		return m.Fake(d.fakeDeleteLexiconWithContext)

	case "DescribeVoicesWithContext":
		return m.Fake(d.fakeDescribeVoicesWithContext)

	case "GetLexiconWithContext":
		return m.Fake(d.fakeGetLexiconWithContext)

	case "GetSpeechSynthesisTaskWithContext":
		return m.Fake(d.fakeGetSpeechSynthesisTaskWithContext)

	case "ListLexiconsWithContext":
		return m.Fake(d.fakeListLexiconsWithContext)

	case "ListSpeechSynthesisTasksPages":
		return m.Fake(d.fakeListSpeechSynthesisTasksPages)

	case "ListSpeechSynthesisTasksPagesWithContext":
		return m.Fake(d.fakeListSpeechSynthesisTasksPagesWithContext)

	case "ListSpeechSynthesisTasksWithContext":
		return m.Fake(d.fakeListSpeechSynthesisTasksWithContext)

	case "PutLexiconWithContext":
		return m.Fake(d.fakePutLexiconWithContext)

	case "StartSpeechSynthesisTaskWithContext":
		return m.Fake(d.fakeStartSpeechSynthesisTaskWithContext)

	case "SynthesizeSpeechWithContext":
		return m.Fake(d.fakeSynthesizeSpeechWithContext)

	default:
		return nil
	}
}

func (d *PollyDouble) DeleteLexicon(i0 *polly.DeleteLexiconInput) (r0 *polly.DeleteLexiconOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLexicon", i0)
	r0, _ = returns[0].(*polly.DeleteLexiconOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PollyDouble) DeleteLexiconRequest(i0 *polly.DeleteLexiconInput) (r0 *request.Request, r1 *polly.DeleteLexiconOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLexiconRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*polly.DeleteLexiconOutput)
	return
}

func (d *PollyDouble) DeleteLexiconWithContext(i0 context.Context, i1 *polly.DeleteLexiconInput, i2 ...request.Option) (r0 *polly.DeleteLexiconOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLexiconWithContext", i0, i1, i2)
	r0, _ = returns[0].(*polly.DeleteLexiconOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PollyDouble) fakeDeleteLexiconWithContext(ctx context.Context, in *polly.DeleteLexiconInput, _ ...request.Option) (*polly.DeleteLexiconOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteLexicon cancelled", ctx.Err())
	default:
		return d.DeleteLexicon(in)
	}
}

func (d *PollyDouble) DescribeVoices(i0 *polly.DescribeVoicesInput) (r0 *polly.DescribeVoicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVoices", i0)
	r0, _ = returns[0].(*polly.DescribeVoicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PollyDouble) DescribeVoicesRequest(i0 *polly.DescribeVoicesInput) (r0 *request.Request, r1 *polly.DescribeVoicesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVoicesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*polly.DescribeVoicesOutput)
	return
}

func (d *PollyDouble) DescribeVoicesWithContext(i0 context.Context, i1 *polly.DescribeVoicesInput, i2 ...request.Option) (r0 *polly.DescribeVoicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVoicesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*polly.DescribeVoicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PollyDouble) fakeDescribeVoicesWithContext(ctx context.Context, in *polly.DescribeVoicesInput, _ ...request.Option) (*polly.DescribeVoicesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeVoices cancelled", ctx.Err())
	default:
		return d.DescribeVoices(in)
	}
}

func (d *PollyDouble) GetLexicon(i0 *polly.GetLexiconInput) (r0 *polly.GetLexiconOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLexicon", i0)
	r0, _ = returns[0].(*polly.GetLexiconOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PollyDouble) GetLexiconRequest(i0 *polly.GetLexiconInput) (r0 *request.Request, r1 *polly.GetLexiconOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLexiconRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*polly.GetLexiconOutput)
	return
}

func (d *PollyDouble) GetLexiconWithContext(i0 context.Context, i1 *polly.GetLexiconInput, i2 ...request.Option) (r0 *polly.GetLexiconOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLexiconWithContext", i0, i1, i2)
	r0, _ = returns[0].(*polly.GetLexiconOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PollyDouble) fakeGetLexiconWithContext(ctx context.Context, in *polly.GetLexiconInput, _ ...request.Option) (*polly.GetLexiconOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetLexicon cancelled", ctx.Err())
	default:
		return d.GetLexicon(in)
	}
}

func (d *PollyDouble) GetSpeechSynthesisTask(i0 *polly.GetSpeechSynthesisTaskInput) (r0 *polly.GetSpeechSynthesisTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSpeechSynthesisTask", i0)
	r0, _ = returns[0].(*polly.GetSpeechSynthesisTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PollyDouble) GetSpeechSynthesisTaskRequest(i0 *polly.GetSpeechSynthesisTaskInput) (r0 *request.Request, r1 *polly.GetSpeechSynthesisTaskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSpeechSynthesisTaskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*polly.GetSpeechSynthesisTaskOutput)
	return
}

func (d *PollyDouble) GetSpeechSynthesisTaskWithContext(i0 context.Context, i1 *polly.GetSpeechSynthesisTaskInput, i2 ...request.Option) (r0 *polly.GetSpeechSynthesisTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSpeechSynthesisTaskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*polly.GetSpeechSynthesisTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PollyDouble) fakeGetSpeechSynthesisTaskWithContext(ctx context.Context, in *polly.GetSpeechSynthesisTaskInput, _ ...request.Option) (*polly.GetSpeechSynthesisTaskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetSpeechSynthesisTask cancelled", ctx.Err())
	default:
		return d.GetSpeechSynthesisTask(in)
	}
}

func (d *PollyDouble) ListLexicons(i0 *polly.ListLexiconsInput) (r0 *polly.ListLexiconsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLexicons", i0)
	r0, _ = returns[0].(*polly.ListLexiconsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PollyDouble) ListLexiconsRequest(i0 *polly.ListLexiconsInput) (r0 *request.Request, r1 *polly.ListLexiconsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLexiconsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*polly.ListLexiconsOutput)
	return
}

func (d *PollyDouble) ListLexiconsWithContext(i0 context.Context, i1 *polly.ListLexiconsInput, i2 ...request.Option) (r0 *polly.ListLexiconsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLexiconsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*polly.ListLexiconsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PollyDouble) fakeListLexiconsWithContext(ctx context.Context, in *polly.ListLexiconsInput, _ ...request.Option) (*polly.ListLexiconsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListLexicons cancelled", ctx.Err())
	default:
		return d.ListLexicons(in)
	}
}

func (d *PollyDouble) ListSpeechSynthesisTasks(i0 *polly.ListSpeechSynthesisTasksInput) (r0 *polly.ListSpeechSynthesisTasksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSpeechSynthesisTasks", i0)
	r0, _ = returns[0].(*polly.ListSpeechSynthesisTasksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PollyDouble) ListSpeechSynthesisTasksPages(i0 *polly.ListSpeechSynthesisTasksInput, i1 func(*polly.ListSpeechSynthesisTasksOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSpeechSynthesisTasksPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *PollyDouble) fakeListSpeechSynthesisTasksPages(in *polly.ListSpeechSynthesisTasksInput, pager func(*polly.ListSpeechSynthesisTasksOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListSpeechSynthesisTasks", paginators, in, pager)
}

func (d *PollyDouble) ListSpeechSynthesisTasksPagesWithContext(i0 context.Context, i1 *polly.ListSpeechSynthesisTasksInput, i2 func(*polly.ListSpeechSynthesisTasksOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSpeechSynthesisTasksPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *PollyDouble) fakeListSpeechSynthesisTasksPagesWithContext(ctx context.Context, in *polly.ListSpeechSynthesisTasksInput, pager func(*polly.ListSpeechSynthesisTasksOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListSpeechSynthesisTasks", paginators, ctx, in, pager, options...)
}

func (d *PollyDouble) ListSpeechSynthesisTasksRequest(i0 *polly.ListSpeechSynthesisTasksInput) (r0 *request.Request, r1 *polly.ListSpeechSynthesisTasksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSpeechSynthesisTasksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*polly.ListSpeechSynthesisTasksOutput)
	return
}

func (d *PollyDouble) ListSpeechSynthesisTasksWithContext(i0 context.Context, i1 *polly.ListSpeechSynthesisTasksInput, i2 ...request.Option) (r0 *polly.ListSpeechSynthesisTasksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSpeechSynthesisTasksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*polly.ListSpeechSynthesisTasksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PollyDouble) fakeListSpeechSynthesisTasksWithContext(ctx context.Context, in *polly.ListSpeechSynthesisTasksInput, _ ...request.Option) (*polly.ListSpeechSynthesisTasksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListSpeechSynthesisTasks cancelled", ctx.Err())
	default:
		return d.ListSpeechSynthesisTasks(in)
	}
}

func (d *PollyDouble) PutLexicon(i0 *polly.PutLexiconInput) (r0 *polly.PutLexiconOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutLexicon", i0)
	r0, _ = returns[0].(*polly.PutLexiconOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PollyDouble) PutLexiconRequest(i0 *polly.PutLexiconInput) (r0 *request.Request, r1 *polly.PutLexiconOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutLexiconRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*polly.PutLexiconOutput)
	return
}

func (d *PollyDouble) PutLexiconWithContext(i0 context.Context, i1 *polly.PutLexiconInput, i2 ...request.Option) (r0 *polly.PutLexiconOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutLexiconWithContext", i0, i1, i2)
	r0, _ = returns[0].(*polly.PutLexiconOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PollyDouble) fakePutLexiconWithContext(ctx context.Context, in *polly.PutLexiconInput, _ ...request.Option) (*polly.PutLexiconOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutLexicon cancelled", ctx.Err())
	default:
		return d.PutLexicon(in)
	}
}

func (d *PollyDouble) StartSpeechSynthesisTask(i0 *polly.StartSpeechSynthesisTaskInput) (r0 *polly.StartSpeechSynthesisTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartSpeechSynthesisTask", i0)
	r0, _ = returns[0].(*polly.StartSpeechSynthesisTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PollyDouble) StartSpeechSynthesisTaskRequest(i0 *polly.StartSpeechSynthesisTaskInput) (r0 *request.Request, r1 *polly.StartSpeechSynthesisTaskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartSpeechSynthesisTaskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*polly.StartSpeechSynthesisTaskOutput)
	return
}

func (d *PollyDouble) StartSpeechSynthesisTaskWithContext(i0 context.Context, i1 *polly.StartSpeechSynthesisTaskInput, i2 ...request.Option) (r0 *polly.StartSpeechSynthesisTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartSpeechSynthesisTaskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*polly.StartSpeechSynthesisTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PollyDouble) fakeStartSpeechSynthesisTaskWithContext(ctx context.Context, in *polly.StartSpeechSynthesisTaskInput, _ ...request.Option) (*polly.StartSpeechSynthesisTaskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartSpeechSynthesisTask cancelled", ctx.Err())
	default:
		return d.StartSpeechSynthesisTask(in)
	}
}

func (d *PollyDouble) SynthesizeSpeech(i0 *polly.SynthesizeSpeechInput) (r0 *polly.SynthesizeSpeechOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SynthesizeSpeech", i0)
	r0, _ = returns[0].(*polly.SynthesizeSpeechOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PollyDouble) SynthesizeSpeechRequest(i0 *polly.SynthesizeSpeechInput) (r0 *request.Request, r1 *polly.SynthesizeSpeechOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SynthesizeSpeechRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*polly.SynthesizeSpeechOutput)
	return
}

func (d *PollyDouble) SynthesizeSpeechWithContext(i0 context.Context, i1 *polly.SynthesizeSpeechInput, i2 ...request.Option) (r0 *polly.SynthesizeSpeechOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SynthesizeSpeechWithContext", i0, i1, i2)
	r0, _ = returns[0].(*polly.SynthesizeSpeechOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *PollyDouble) fakeSynthesizeSpeechWithContext(ctx context.Context, in *polly.SynthesizeSpeechInput, _ ...request.Option) (*polly.SynthesizeSpeechOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SynthesizeSpeech cancelled", ctx.Err())
	default:
		return d.SynthesizeSpeech(in)
	}
}
