// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:12:07+11:00

// Package connectparticipantdouble provides a TestDouble implementation of connectparticipantiface.ConnectParticipantAPI
package connectparticipantdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/connectparticipant"
	"github.com/aws/aws-sdk-go/service/connectparticipant/connectparticipantiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// ConnectParticipantDouble is TestDouble for connectparticipantiface.ConnectParticipantAPI
type ConnectParticipantDouble struct {
	connectparticipantiface.ConnectParticipantAPI
	*awsdouble.AWSTestDouble
}

// Constructor for ConnectParticipantDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *ConnectParticipantDouble {
	result := &ConnectParticipantDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*connectparticipantiface.ConnectParticipantAPI)(nil), configurators...)
	return result
}

func (d *ConnectParticipantDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *ConnectParticipantDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CreateParticipantConnectionWithContext":
		return m.Fake(d.fakeCreateParticipantConnectionWithContext)

	case "DisconnectParticipantWithContext":
		return m.Fake(d.fakeDisconnectParticipantWithContext)

	case "GetTranscriptPages":
		return m.Fake(d.fakeGetTranscriptPages)

	case "GetTranscriptPagesWithContext":
		return m.Fake(d.fakeGetTranscriptPagesWithContext)

	case "GetTranscriptWithContext":
		return m.Fake(d.fakeGetTranscriptWithContext)

	case "SendEventWithContext":
		return m.Fake(d.fakeSendEventWithContext)

	case "SendMessageWithContext":
		return m.Fake(d.fakeSendMessageWithContext)

	default:
		return nil
	}
}

func (d *ConnectParticipantDouble) CreateParticipantConnection(i0 *connectparticipant.CreateParticipantConnectionInput) (r0 *connectparticipant.CreateParticipantConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateParticipantConnection", i0)
	r0, _ = returns[0].(*connectparticipant.CreateParticipantConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectParticipantDouble) CreateParticipantConnectionRequest(i0 *connectparticipant.CreateParticipantConnectionInput) (r0 *request.Request, r1 *connectparticipant.CreateParticipantConnectionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateParticipantConnectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*connectparticipant.CreateParticipantConnectionOutput)
	return
}

func (d *ConnectParticipantDouble) CreateParticipantConnectionWithContext(i0 context.Context, i1 *connectparticipant.CreateParticipantConnectionInput, i2 ...request.Option) (r0 *connectparticipant.CreateParticipantConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateParticipantConnectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*connectparticipant.CreateParticipantConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectParticipantDouble) fakeCreateParticipantConnectionWithContext(ctx context.Context, in *connectparticipant.CreateParticipantConnectionInput, _ ...request.Option) (*connectparticipant.CreateParticipantConnectionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateParticipantConnection cancelled", ctx.Err())
	default:
		return d.CreateParticipantConnection(in)
	}
}

func (d *ConnectParticipantDouble) DisconnectParticipant(i0 *connectparticipant.DisconnectParticipantInput) (r0 *connectparticipant.DisconnectParticipantOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisconnectParticipant", i0)
	r0, _ = returns[0].(*connectparticipant.DisconnectParticipantOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectParticipantDouble) DisconnectParticipantRequest(i0 *connectparticipant.DisconnectParticipantInput) (r0 *request.Request, r1 *connectparticipant.DisconnectParticipantOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisconnectParticipantRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*connectparticipant.DisconnectParticipantOutput)
	return
}

func (d *ConnectParticipantDouble) DisconnectParticipantWithContext(i0 context.Context, i1 *connectparticipant.DisconnectParticipantInput, i2 ...request.Option) (r0 *connectparticipant.DisconnectParticipantOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisconnectParticipantWithContext", i0, i1, i2)
	r0, _ = returns[0].(*connectparticipant.DisconnectParticipantOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectParticipantDouble) fakeDisconnectParticipantWithContext(ctx context.Context, in *connectparticipant.DisconnectParticipantInput, _ ...request.Option) (*connectparticipant.DisconnectParticipantOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisconnectParticipant cancelled", ctx.Err())
	default:
		return d.DisconnectParticipant(in)
	}
}

func (d *ConnectParticipantDouble) GetTranscript(i0 *connectparticipant.GetTranscriptInput) (r0 *connectparticipant.GetTranscriptOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTranscript", i0)
	r0, _ = returns[0].(*connectparticipant.GetTranscriptOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectParticipantDouble) GetTranscriptPages(i0 *connectparticipant.GetTranscriptInput, i1 func(*connectparticipant.GetTranscriptOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTranscriptPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ConnectParticipantDouble) fakeGetTranscriptPages(in *connectparticipant.GetTranscriptInput, pager func(*connectparticipant.GetTranscriptOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetTranscript", paginators, in, pager)
}

func (d *ConnectParticipantDouble) GetTranscriptPagesWithContext(i0 context.Context, i1 *connectparticipant.GetTranscriptInput, i2 func(*connectparticipant.GetTranscriptOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTranscriptPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ConnectParticipantDouble) fakeGetTranscriptPagesWithContext(ctx context.Context, in *connectparticipant.GetTranscriptInput, pager func(*connectparticipant.GetTranscriptOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetTranscript", paginators, ctx, in, pager, options...)
}

func (d *ConnectParticipantDouble) GetTranscriptRequest(i0 *connectparticipant.GetTranscriptInput) (r0 *request.Request, r1 *connectparticipant.GetTranscriptOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTranscriptRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*connectparticipant.GetTranscriptOutput)
	return
}

func (d *ConnectParticipantDouble) GetTranscriptWithContext(i0 context.Context, i1 *connectparticipant.GetTranscriptInput, i2 ...request.Option) (r0 *connectparticipant.GetTranscriptOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTranscriptWithContext", i0, i1, i2)
	r0, _ = returns[0].(*connectparticipant.GetTranscriptOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectParticipantDouble) fakeGetTranscriptWithContext(ctx context.Context, in *connectparticipant.GetTranscriptInput, _ ...request.Option) (*connectparticipant.GetTranscriptOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetTranscript cancelled", ctx.Err())
	default:
		return d.GetTranscript(in)
	}
}

func (d *ConnectParticipantDouble) SendEvent(i0 *connectparticipant.SendEventInput) (r0 *connectparticipant.SendEventOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendEvent", i0)
	r0, _ = returns[0].(*connectparticipant.SendEventOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectParticipantDouble) SendEventRequest(i0 *connectparticipant.SendEventInput) (r0 *request.Request, r1 *connectparticipant.SendEventOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendEventRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*connectparticipant.SendEventOutput)
	return
}

func (d *ConnectParticipantDouble) SendEventWithContext(i0 context.Context, i1 *connectparticipant.SendEventInput, i2 ...request.Option) (r0 *connectparticipant.SendEventOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendEventWithContext", i0, i1, i2)
	r0, _ = returns[0].(*connectparticipant.SendEventOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectParticipantDouble) fakeSendEventWithContext(ctx context.Context, in *connectparticipant.SendEventInput, _ ...request.Option) (*connectparticipant.SendEventOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SendEvent cancelled", ctx.Err())
	default:
		return d.SendEvent(in)
	}
}

func (d *ConnectParticipantDouble) SendMessage(i0 *connectparticipant.SendMessageInput) (r0 *connectparticipant.SendMessageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendMessage", i0)
	r0, _ = returns[0].(*connectparticipant.SendMessageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectParticipantDouble) SendMessageRequest(i0 *connectparticipant.SendMessageInput) (r0 *request.Request, r1 *connectparticipant.SendMessageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendMessageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*connectparticipant.SendMessageOutput)
	return
}

func (d *ConnectParticipantDouble) SendMessageWithContext(i0 context.Context, i1 *connectparticipant.SendMessageInput, i2 ...request.Option) (r0 *connectparticipant.SendMessageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendMessageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*connectparticipant.SendMessageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ConnectParticipantDouble) fakeSendMessageWithContext(ctx context.Context, in *connectparticipant.SendMessageInput, _ ...request.Option) (*connectparticipant.SendMessageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SendMessage cancelled", ctx.Err())
	default:
		return d.SendMessage(in)
	}
}
