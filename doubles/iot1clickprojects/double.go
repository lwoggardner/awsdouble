// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:13:13+11:00

// Package iot1clickprojectsdouble provides a TestDouble implementation of iot1clickprojectsiface.IoT1ClickProjectsAPI
package iot1clickprojectsdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/iot1clickprojects"
	"github.com/aws/aws-sdk-go/service/iot1clickprojects/iot1clickprojectsiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// IoT1ClickProjectsDouble is TestDouble for iot1clickprojectsiface.IoT1ClickProjectsAPI
type IoT1ClickProjectsDouble struct {
	iot1clickprojectsiface.IoT1ClickProjectsAPI
	*awsdouble.AWSTestDouble
}

// Constructor for IoT1ClickProjectsDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *IoT1ClickProjectsDouble {
	result := &IoT1ClickProjectsDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*iot1clickprojectsiface.IoT1ClickProjectsAPI)(nil), configurators...)
	return result
}

func (d *IoT1ClickProjectsDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *IoT1ClickProjectsDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AssociateDeviceWithPlacementWithContext":
		return m.Fake(d.fakeAssociateDeviceWithPlacementWithContext)

	case "CreatePlacementWithContext":
		return m.Fake(d.fakeCreatePlacementWithContext)

	case "CreateProjectWithContext":
		return m.Fake(d.fakeCreateProjectWithContext)

	case "DeletePlacementWithContext":
		return m.Fake(d.fakeDeletePlacementWithContext)

	case "DeleteProjectWithContext":
		return m.Fake(d.fakeDeleteProjectWithContext)

	case "DescribePlacementWithContext":
		return m.Fake(d.fakeDescribePlacementWithContext)

	case "DescribeProjectWithContext":
		return m.Fake(d.fakeDescribeProjectWithContext)

	case "DisassociateDeviceFromPlacementWithContext":
		return m.Fake(d.fakeDisassociateDeviceFromPlacementWithContext)

	case "GetDevicesInPlacementWithContext":
		return m.Fake(d.fakeGetDevicesInPlacementWithContext)

	case "ListPlacementsPages":
		return m.Fake(d.fakeListPlacementsPages)

	case "ListPlacementsPagesWithContext":
		return m.Fake(d.fakeListPlacementsPagesWithContext)

	case "ListPlacementsWithContext":
		return m.Fake(d.fakeListPlacementsWithContext)

	case "ListProjectsPages":
		return m.Fake(d.fakeListProjectsPages)

	case "ListProjectsPagesWithContext":
		return m.Fake(d.fakeListProjectsPagesWithContext)

	case "ListProjectsWithContext":
		return m.Fake(d.fakeListProjectsWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdatePlacementWithContext":
		return m.Fake(d.fakeUpdatePlacementWithContext)

	case "UpdateProjectWithContext":
		return m.Fake(d.fakeUpdateProjectWithContext)

	default:
		return nil
	}
}

func (d *IoT1ClickProjectsDouble) AssociateDeviceWithPlacement(i0 *iot1clickprojects.AssociateDeviceWithPlacementInput) (r0 *iot1clickprojects.AssociateDeviceWithPlacementOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateDeviceWithPlacement", i0)
	r0, _ = returns[0].(*iot1clickprojects.AssociateDeviceWithPlacementOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickProjectsDouble) AssociateDeviceWithPlacementRequest(i0 *iot1clickprojects.AssociateDeviceWithPlacementInput) (r0 *request.Request, r1 *iot1clickprojects.AssociateDeviceWithPlacementOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateDeviceWithPlacementRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot1clickprojects.AssociateDeviceWithPlacementOutput)
	return
}

func (d *IoT1ClickProjectsDouble) AssociateDeviceWithPlacementWithContext(i0 context.Context, i1 *iot1clickprojects.AssociateDeviceWithPlacementInput, i2 ...request.Option) (r0 *iot1clickprojects.AssociateDeviceWithPlacementOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateDeviceWithPlacementWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot1clickprojects.AssociateDeviceWithPlacementOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickProjectsDouble) fakeAssociateDeviceWithPlacementWithContext(ctx context.Context, in *iot1clickprojects.AssociateDeviceWithPlacementInput, _ ...request.Option) (*iot1clickprojects.AssociateDeviceWithPlacementOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateDeviceWithPlacement cancelled", ctx.Err())
	default:
		return d.AssociateDeviceWithPlacement(in)
	}
}

func (d *IoT1ClickProjectsDouble) CreatePlacement(i0 *iot1clickprojects.CreatePlacementInput) (r0 *iot1clickprojects.CreatePlacementOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePlacement", i0)
	r0, _ = returns[0].(*iot1clickprojects.CreatePlacementOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickProjectsDouble) CreatePlacementRequest(i0 *iot1clickprojects.CreatePlacementInput) (r0 *request.Request, r1 *iot1clickprojects.CreatePlacementOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePlacementRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot1clickprojects.CreatePlacementOutput)
	return
}

func (d *IoT1ClickProjectsDouble) CreatePlacementWithContext(i0 context.Context, i1 *iot1clickprojects.CreatePlacementInput, i2 ...request.Option) (r0 *iot1clickprojects.CreatePlacementOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePlacementWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot1clickprojects.CreatePlacementOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickProjectsDouble) fakeCreatePlacementWithContext(ctx context.Context, in *iot1clickprojects.CreatePlacementInput, _ ...request.Option) (*iot1clickprojects.CreatePlacementOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreatePlacement cancelled", ctx.Err())
	default:
		return d.CreatePlacement(in)
	}
}

func (d *IoT1ClickProjectsDouble) CreateProject(i0 *iot1clickprojects.CreateProjectInput) (r0 *iot1clickprojects.CreateProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProject", i0)
	r0, _ = returns[0].(*iot1clickprojects.CreateProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickProjectsDouble) CreateProjectRequest(i0 *iot1clickprojects.CreateProjectInput) (r0 *request.Request, r1 *iot1clickprojects.CreateProjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot1clickprojects.CreateProjectOutput)
	return
}

func (d *IoT1ClickProjectsDouble) CreateProjectWithContext(i0 context.Context, i1 *iot1clickprojects.CreateProjectInput, i2 ...request.Option) (r0 *iot1clickprojects.CreateProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot1clickprojects.CreateProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickProjectsDouble) fakeCreateProjectWithContext(ctx context.Context, in *iot1clickprojects.CreateProjectInput, _ ...request.Option) (*iot1clickprojects.CreateProjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateProject cancelled", ctx.Err())
	default:
		return d.CreateProject(in)
	}
}

func (d *IoT1ClickProjectsDouble) DeletePlacement(i0 *iot1clickprojects.DeletePlacementInput) (r0 *iot1clickprojects.DeletePlacementOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePlacement", i0)
	r0, _ = returns[0].(*iot1clickprojects.DeletePlacementOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickProjectsDouble) DeletePlacementRequest(i0 *iot1clickprojects.DeletePlacementInput) (r0 *request.Request, r1 *iot1clickprojects.DeletePlacementOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePlacementRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot1clickprojects.DeletePlacementOutput)
	return
}

func (d *IoT1ClickProjectsDouble) DeletePlacementWithContext(i0 context.Context, i1 *iot1clickprojects.DeletePlacementInput, i2 ...request.Option) (r0 *iot1clickprojects.DeletePlacementOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePlacementWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot1clickprojects.DeletePlacementOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickProjectsDouble) fakeDeletePlacementWithContext(ctx context.Context, in *iot1clickprojects.DeletePlacementInput, _ ...request.Option) (*iot1clickprojects.DeletePlacementOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeletePlacement cancelled", ctx.Err())
	default:
		return d.DeletePlacement(in)
	}
}

func (d *IoT1ClickProjectsDouble) DeleteProject(i0 *iot1clickprojects.DeleteProjectInput) (r0 *iot1clickprojects.DeleteProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteProject", i0)
	r0, _ = returns[0].(*iot1clickprojects.DeleteProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickProjectsDouble) DeleteProjectRequest(i0 *iot1clickprojects.DeleteProjectInput) (r0 *request.Request, r1 *iot1clickprojects.DeleteProjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteProjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot1clickprojects.DeleteProjectOutput)
	return
}

func (d *IoT1ClickProjectsDouble) DeleteProjectWithContext(i0 context.Context, i1 *iot1clickprojects.DeleteProjectInput, i2 ...request.Option) (r0 *iot1clickprojects.DeleteProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteProjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot1clickprojects.DeleteProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickProjectsDouble) fakeDeleteProjectWithContext(ctx context.Context, in *iot1clickprojects.DeleteProjectInput, _ ...request.Option) (*iot1clickprojects.DeleteProjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteProject cancelled", ctx.Err())
	default:
		return d.DeleteProject(in)
	}
}

func (d *IoT1ClickProjectsDouble) DescribePlacement(i0 *iot1clickprojects.DescribePlacementInput) (r0 *iot1clickprojects.DescribePlacementOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePlacement", i0)
	r0, _ = returns[0].(*iot1clickprojects.DescribePlacementOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickProjectsDouble) DescribePlacementRequest(i0 *iot1clickprojects.DescribePlacementInput) (r0 *request.Request, r1 *iot1clickprojects.DescribePlacementOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePlacementRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot1clickprojects.DescribePlacementOutput)
	return
}

func (d *IoT1ClickProjectsDouble) DescribePlacementWithContext(i0 context.Context, i1 *iot1clickprojects.DescribePlacementInput, i2 ...request.Option) (r0 *iot1clickprojects.DescribePlacementOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePlacementWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot1clickprojects.DescribePlacementOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickProjectsDouble) fakeDescribePlacementWithContext(ctx context.Context, in *iot1clickprojects.DescribePlacementInput, _ ...request.Option) (*iot1clickprojects.DescribePlacementOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribePlacement cancelled", ctx.Err())
	default:
		return d.DescribePlacement(in)
	}
}

func (d *IoT1ClickProjectsDouble) DescribeProject(i0 *iot1clickprojects.DescribeProjectInput) (r0 *iot1clickprojects.DescribeProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProject", i0)
	r0, _ = returns[0].(*iot1clickprojects.DescribeProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickProjectsDouble) DescribeProjectRequest(i0 *iot1clickprojects.DescribeProjectInput) (r0 *request.Request, r1 *iot1clickprojects.DescribeProjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot1clickprojects.DescribeProjectOutput)
	return
}

func (d *IoT1ClickProjectsDouble) DescribeProjectWithContext(i0 context.Context, i1 *iot1clickprojects.DescribeProjectInput, i2 ...request.Option) (r0 *iot1clickprojects.DescribeProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot1clickprojects.DescribeProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickProjectsDouble) fakeDescribeProjectWithContext(ctx context.Context, in *iot1clickprojects.DescribeProjectInput, _ ...request.Option) (*iot1clickprojects.DescribeProjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeProject cancelled", ctx.Err())
	default:
		return d.DescribeProject(in)
	}
}

func (d *IoT1ClickProjectsDouble) DisassociateDeviceFromPlacement(i0 *iot1clickprojects.DisassociateDeviceFromPlacementInput) (r0 *iot1clickprojects.DisassociateDeviceFromPlacementOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateDeviceFromPlacement", i0)
	r0, _ = returns[0].(*iot1clickprojects.DisassociateDeviceFromPlacementOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickProjectsDouble) DisassociateDeviceFromPlacementRequest(i0 *iot1clickprojects.DisassociateDeviceFromPlacementInput) (r0 *request.Request, r1 *iot1clickprojects.DisassociateDeviceFromPlacementOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateDeviceFromPlacementRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot1clickprojects.DisassociateDeviceFromPlacementOutput)
	return
}

func (d *IoT1ClickProjectsDouble) DisassociateDeviceFromPlacementWithContext(i0 context.Context, i1 *iot1clickprojects.DisassociateDeviceFromPlacementInput, i2 ...request.Option) (r0 *iot1clickprojects.DisassociateDeviceFromPlacementOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateDeviceFromPlacementWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot1clickprojects.DisassociateDeviceFromPlacementOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickProjectsDouble) fakeDisassociateDeviceFromPlacementWithContext(ctx context.Context, in *iot1clickprojects.DisassociateDeviceFromPlacementInput, _ ...request.Option) (*iot1clickprojects.DisassociateDeviceFromPlacementOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateDeviceFromPlacement cancelled", ctx.Err())
	default:
		return d.DisassociateDeviceFromPlacement(in)
	}
}

func (d *IoT1ClickProjectsDouble) GetDevicesInPlacement(i0 *iot1clickprojects.GetDevicesInPlacementInput) (r0 *iot1clickprojects.GetDevicesInPlacementOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDevicesInPlacement", i0)
	r0, _ = returns[0].(*iot1clickprojects.GetDevicesInPlacementOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickProjectsDouble) GetDevicesInPlacementRequest(i0 *iot1clickprojects.GetDevicesInPlacementInput) (r0 *request.Request, r1 *iot1clickprojects.GetDevicesInPlacementOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDevicesInPlacementRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot1clickprojects.GetDevicesInPlacementOutput)
	return
}

func (d *IoT1ClickProjectsDouble) GetDevicesInPlacementWithContext(i0 context.Context, i1 *iot1clickprojects.GetDevicesInPlacementInput, i2 ...request.Option) (r0 *iot1clickprojects.GetDevicesInPlacementOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDevicesInPlacementWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot1clickprojects.GetDevicesInPlacementOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickProjectsDouble) fakeGetDevicesInPlacementWithContext(ctx context.Context, in *iot1clickprojects.GetDevicesInPlacementInput, _ ...request.Option) (*iot1clickprojects.GetDevicesInPlacementOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDevicesInPlacement cancelled", ctx.Err())
	default:
		return d.GetDevicesInPlacement(in)
	}
}

func (d *IoT1ClickProjectsDouble) ListPlacements(i0 *iot1clickprojects.ListPlacementsInput) (r0 *iot1clickprojects.ListPlacementsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPlacements", i0)
	r0, _ = returns[0].(*iot1clickprojects.ListPlacementsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickProjectsDouble) ListPlacementsPages(i0 *iot1clickprojects.ListPlacementsInput, i1 func(*iot1clickprojects.ListPlacementsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPlacementsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *IoT1ClickProjectsDouble) fakeListPlacementsPages(in *iot1clickprojects.ListPlacementsInput, pager func(*iot1clickprojects.ListPlacementsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListPlacements", paginators, in, pager)
}

func (d *IoT1ClickProjectsDouble) ListPlacementsPagesWithContext(i0 context.Context, i1 *iot1clickprojects.ListPlacementsInput, i2 func(*iot1clickprojects.ListPlacementsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPlacementsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *IoT1ClickProjectsDouble) fakeListPlacementsPagesWithContext(ctx context.Context, in *iot1clickprojects.ListPlacementsInput, pager func(*iot1clickprojects.ListPlacementsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListPlacements", paginators, ctx, in, pager, options...)
}

func (d *IoT1ClickProjectsDouble) ListPlacementsRequest(i0 *iot1clickprojects.ListPlacementsInput) (r0 *request.Request, r1 *iot1clickprojects.ListPlacementsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPlacementsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot1clickprojects.ListPlacementsOutput)
	return
}

func (d *IoT1ClickProjectsDouble) ListPlacementsWithContext(i0 context.Context, i1 *iot1clickprojects.ListPlacementsInput, i2 ...request.Option) (r0 *iot1clickprojects.ListPlacementsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPlacementsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot1clickprojects.ListPlacementsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickProjectsDouble) fakeListPlacementsWithContext(ctx context.Context, in *iot1clickprojects.ListPlacementsInput, _ ...request.Option) (*iot1clickprojects.ListPlacementsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListPlacements cancelled", ctx.Err())
	default:
		return d.ListPlacements(in)
	}
}

func (d *IoT1ClickProjectsDouble) ListProjects(i0 *iot1clickprojects.ListProjectsInput) (r0 *iot1clickprojects.ListProjectsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProjects", i0)
	r0, _ = returns[0].(*iot1clickprojects.ListProjectsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickProjectsDouble) ListProjectsPages(i0 *iot1clickprojects.ListProjectsInput, i1 func(*iot1clickprojects.ListProjectsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProjectsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *IoT1ClickProjectsDouble) fakeListProjectsPages(in *iot1clickprojects.ListProjectsInput, pager func(*iot1clickprojects.ListProjectsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListProjects", paginators, in, pager)
}

func (d *IoT1ClickProjectsDouble) ListProjectsPagesWithContext(i0 context.Context, i1 *iot1clickprojects.ListProjectsInput, i2 func(*iot1clickprojects.ListProjectsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProjectsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *IoT1ClickProjectsDouble) fakeListProjectsPagesWithContext(ctx context.Context, in *iot1clickprojects.ListProjectsInput, pager func(*iot1clickprojects.ListProjectsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListProjects", paginators, ctx, in, pager, options...)
}

func (d *IoT1ClickProjectsDouble) ListProjectsRequest(i0 *iot1clickprojects.ListProjectsInput) (r0 *request.Request, r1 *iot1clickprojects.ListProjectsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProjectsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot1clickprojects.ListProjectsOutput)
	return
}

func (d *IoT1ClickProjectsDouble) ListProjectsWithContext(i0 context.Context, i1 *iot1clickprojects.ListProjectsInput, i2 ...request.Option) (r0 *iot1clickprojects.ListProjectsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProjectsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot1clickprojects.ListProjectsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickProjectsDouble) fakeListProjectsWithContext(ctx context.Context, in *iot1clickprojects.ListProjectsInput, _ ...request.Option) (*iot1clickprojects.ListProjectsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListProjects cancelled", ctx.Err())
	default:
		return d.ListProjects(in)
	}
}

func (d *IoT1ClickProjectsDouble) ListTagsForResource(i0 *iot1clickprojects.ListTagsForResourceInput) (r0 *iot1clickprojects.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*iot1clickprojects.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickProjectsDouble) ListTagsForResourceRequest(i0 *iot1clickprojects.ListTagsForResourceInput) (r0 *request.Request, r1 *iot1clickprojects.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot1clickprojects.ListTagsForResourceOutput)
	return
}

func (d *IoT1ClickProjectsDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *iot1clickprojects.ListTagsForResourceInput, i2 ...request.Option) (r0 *iot1clickprojects.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot1clickprojects.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickProjectsDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *iot1clickprojects.ListTagsForResourceInput, _ ...request.Option) (*iot1clickprojects.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *IoT1ClickProjectsDouble) TagResource(i0 *iot1clickprojects.TagResourceInput) (r0 *iot1clickprojects.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*iot1clickprojects.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickProjectsDouble) TagResourceRequest(i0 *iot1clickprojects.TagResourceInput) (r0 *request.Request, r1 *iot1clickprojects.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot1clickprojects.TagResourceOutput)
	return
}

func (d *IoT1ClickProjectsDouble) TagResourceWithContext(i0 context.Context, i1 *iot1clickprojects.TagResourceInput, i2 ...request.Option) (r0 *iot1clickprojects.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot1clickprojects.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickProjectsDouble) fakeTagResourceWithContext(ctx context.Context, in *iot1clickprojects.TagResourceInput, _ ...request.Option) (*iot1clickprojects.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *IoT1ClickProjectsDouble) UntagResource(i0 *iot1clickprojects.UntagResourceInput) (r0 *iot1clickprojects.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*iot1clickprojects.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickProjectsDouble) UntagResourceRequest(i0 *iot1clickprojects.UntagResourceInput) (r0 *request.Request, r1 *iot1clickprojects.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot1clickprojects.UntagResourceOutput)
	return
}

func (d *IoT1ClickProjectsDouble) UntagResourceWithContext(i0 context.Context, i1 *iot1clickprojects.UntagResourceInput, i2 ...request.Option) (r0 *iot1clickprojects.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot1clickprojects.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickProjectsDouble) fakeUntagResourceWithContext(ctx context.Context, in *iot1clickprojects.UntagResourceInput, _ ...request.Option) (*iot1clickprojects.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *IoT1ClickProjectsDouble) UpdatePlacement(i0 *iot1clickprojects.UpdatePlacementInput) (r0 *iot1clickprojects.UpdatePlacementOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePlacement", i0)
	r0, _ = returns[0].(*iot1clickprojects.UpdatePlacementOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickProjectsDouble) UpdatePlacementRequest(i0 *iot1clickprojects.UpdatePlacementInput) (r0 *request.Request, r1 *iot1clickprojects.UpdatePlacementOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePlacementRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot1clickprojects.UpdatePlacementOutput)
	return
}

func (d *IoT1ClickProjectsDouble) UpdatePlacementWithContext(i0 context.Context, i1 *iot1clickprojects.UpdatePlacementInput, i2 ...request.Option) (r0 *iot1clickprojects.UpdatePlacementOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePlacementWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot1clickprojects.UpdatePlacementOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickProjectsDouble) fakeUpdatePlacementWithContext(ctx context.Context, in *iot1clickprojects.UpdatePlacementInput, _ ...request.Option) (*iot1clickprojects.UpdatePlacementOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdatePlacement cancelled", ctx.Err())
	default:
		return d.UpdatePlacement(in)
	}
}

func (d *IoT1ClickProjectsDouble) UpdateProject(i0 *iot1clickprojects.UpdateProjectInput) (r0 *iot1clickprojects.UpdateProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateProject", i0)
	r0, _ = returns[0].(*iot1clickprojects.UpdateProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickProjectsDouble) UpdateProjectRequest(i0 *iot1clickprojects.UpdateProjectInput) (r0 *request.Request, r1 *iot1clickprojects.UpdateProjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateProjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot1clickprojects.UpdateProjectOutput)
	return
}

func (d *IoT1ClickProjectsDouble) UpdateProjectWithContext(i0 context.Context, i1 *iot1clickprojects.UpdateProjectInput, i2 ...request.Option) (r0 *iot1clickprojects.UpdateProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateProjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot1clickprojects.UpdateProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickProjectsDouble) fakeUpdateProjectWithContext(ctx context.Context, in *iot1clickprojects.UpdateProjectInput, _ ...request.Option) (*iot1clickprojects.UpdateProjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateProject cancelled", ctx.Err())
	default:
		return d.UpdateProject(in)
	}
}
