// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:12:18+11:00

// Package devicefarmdouble provides a TestDouble implementation of devicefarmiface.DeviceFarmAPI
package devicefarmdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/devicefarm"
	"github.com/aws/aws-sdk-go/service/devicefarm/devicefarmiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// DeviceFarmDouble is TestDouble for devicefarmiface.DeviceFarmAPI
type DeviceFarmDouble struct {
	devicefarmiface.DeviceFarmAPI
	*awsdouble.AWSTestDouble
}

// Constructor for DeviceFarmDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *DeviceFarmDouble {
	result := &DeviceFarmDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*devicefarmiface.DeviceFarmAPI)(nil), configurators...)
	return result
}

func (d *DeviceFarmDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *DeviceFarmDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CreateDevicePoolWithContext":
		return m.Fake(d.fakeCreateDevicePoolWithContext)

	case "CreateInstanceProfileWithContext":
		return m.Fake(d.fakeCreateInstanceProfileWithContext)

	case "CreateNetworkProfileWithContext":
		return m.Fake(d.fakeCreateNetworkProfileWithContext)

	case "CreateProjectWithContext":
		return m.Fake(d.fakeCreateProjectWithContext)

	case "CreateRemoteAccessSessionWithContext":
		return m.Fake(d.fakeCreateRemoteAccessSessionWithContext)

	case "CreateTestGridProjectWithContext":
		return m.Fake(d.fakeCreateTestGridProjectWithContext)

	case "CreateTestGridUrlWithContext":
		return m.Fake(d.fakeCreateTestGridUrlWithContext)

	case "CreateUploadWithContext":
		return m.Fake(d.fakeCreateUploadWithContext)

	case "CreateVPCEConfigurationWithContext":
		return m.Fake(d.fakeCreateVPCEConfigurationWithContext)

	case "DeleteDevicePoolWithContext":
		return m.Fake(d.fakeDeleteDevicePoolWithContext)

	case "DeleteInstanceProfileWithContext":
		return m.Fake(d.fakeDeleteInstanceProfileWithContext)

	case "DeleteNetworkProfileWithContext":
		return m.Fake(d.fakeDeleteNetworkProfileWithContext)

	case "DeleteProjectWithContext":
		return m.Fake(d.fakeDeleteProjectWithContext)

	case "DeleteRemoteAccessSessionWithContext":
		return m.Fake(d.fakeDeleteRemoteAccessSessionWithContext)

	case "DeleteRunWithContext":
		return m.Fake(d.fakeDeleteRunWithContext)

	case "DeleteTestGridProjectWithContext":
		return m.Fake(d.fakeDeleteTestGridProjectWithContext)

	case "DeleteUploadWithContext":
		return m.Fake(d.fakeDeleteUploadWithContext)

	case "DeleteVPCEConfigurationWithContext":
		return m.Fake(d.fakeDeleteVPCEConfigurationWithContext)

	case "GetAccountSettingsWithContext":
		return m.Fake(d.fakeGetAccountSettingsWithContext)

	case "GetDeviceInstanceWithContext":
		return m.Fake(d.fakeGetDeviceInstanceWithContext)

	case "GetDevicePoolCompatibilityWithContext":
		return m.Fake(d.fakeGetDevicePoolCompatibilityWithContext)

	case "GetDevicePoolWithContext":
		return m.Fake(d.fakeGetDevicePoolWithContext)

	case "GetDeviceWithContext":
		return m.Fake(d.fakeGetDeviceWithContext)

	case "GetInstanceProfileWithContext":
		return m.Fake(d.fakeGetInstanceProfileWithContext)

	case "GetJobWithContext":
		return m.Fake(d.fakeGetJobWithContext)

	case "GetNetworkProfileWithContext":
		return m.Fake(d.fakeGetNetworkProfileWithContext)

	case "GetOfferingStatusPages":
		return m.Fake(d.fakeGetOfferingStatusPages)

	case "GetOfferingStatusPagesWithContext":
		return m.Fake(d.fakeGetOfferingStatusPagesWithContext)

	case "GetOfferingStatusWithContext":
		return m.Fake(d.fakeGetOfferingStatusWithContext)

	case "GetProjectWithContext":
		return m.Fake(d.fakeGetProjectWithContext)

	case "GetRemoteAccessSessionWithContext":
		return m.Fake(d.fakeGetRemoteAccessSessionWithContext)

	case "GetRunWithContext":
		return m.Fake(d.fakeGetRunWithContext)

	case "GetSuiteWithContext":
		return m.Fake(d.fakeGetSuiteWithContext)

	case "GetTestGridProjectWithContext":
		return m.Fake(d.fakeGetTestGridProjectWithContext)

	case "GetTestGridSessionWithContext":
		return m.Fake(d.fakeGetTestGridSessionWithContext)

	case "GetTestWithContext":
		return m.Fake(d.fakeGetTestWithContext)

	case "GetUploadWithContext":
		return m.Fake(d.fakeGetUploadWithContext)

	case "GetVPCEConfigurationWithContext":
		return m.Fake(d.fakeGetVPCEConfigurationWithContext)

	case "InstallToRemoteAccessSessionWithContext":
		return m.Fake(d.fakeInstallToRemoteAccessSessionWithContext)

	case "ListArtifactsPages":
		return m.Fake(d.fakeListArtifactsPages)

	case "ListArtifactsPagesWithContext":
		return m.Fake(d.fakeListArtifactsPagesWithContext)

	case "ListArtifactsWithContext":
		return m.Fake(d.fakeListArtifactsWithContext)

	case "ListDeviceInstancesWithContext":
		return m.Fake(d.fakeListDeviceInstancesWithContext)

	case "ListDevicePoolsPages":
		return m.Fake(d.fakeListDevicePoolsPages)

	case "ListDevicePoolsPagesWithContext":
		return m.Fake(d.fakeListDevicePoolsPagesWithContext)

	case "ListDevicePoolsWithContext":
		return m.Fake(d.fakeListDevicePoolsWithContext)

	case "ListDevicesPages":
		return m.Fake(d.fakeListDevicesPages)

	case "ListDevicesPagesWithContext":
		return m.Fake(d.fakeListDevicesPagesWithContext)

	case "ListDevicesWithContext":
		return m.Fake(d.fakeListDevicesWithContext)

	case "ListInstanceProfilesWithContext":
		return m.Fake(d.fakeListInstanceProfilesWithContext)

	case "ListJobsPages":
		return m.Fake(d.fakeListJobsPages)

	case "ListJobsPagesWithContext":
		return m.Fake(d.fakeListJobsPagesWithContext)

	case "ListJobsWithContext":
		return m.Fake(d.fakeListJobsWithContext)

	case "ListNetworkProfilesWithContext":
		return m.Fake(d.fakeListNetworkProfilesWithContext)

	case "ListOfferingPromotionsWithContext":
		return m.Fake(d.fakeListOfferingPromotionsWithContext)

	case "ListOfferingTransactionsPages":
		return m.Fake(d.fakeListOfferingTransactionsPages)

	case "ListOfferingTransactionsPagesWithContext":
		return m.Fake(d.fakeListOfferingTransactionsPagesWithContext)

	case "ListOfferingTransactionsWithContext":
		return m.Fake(d.fakeListOfferingTransactionsWithContext)

	case "ListOfferingsPages":
		return m.Fake(d.fakeListOfferingsPages)

	case "ListOfferingsPagesWithContext":
		return m.Fake(d.fakeListOfferingsPagesWithContext)

	case "ListOfferingsWithContext":
		return m.Fake(d.fakeListOfferingsWithContext)

	case "ListProjectsPages":
		return m.Fake(d.fakeListProjectsPages)

	case "ListProjectsPagesWithContext":
		return m.Fake(d.fakeListProjectsPagesWithContext)

	case "ListProjectsWithContext":
		return m.Fake(d.fakeListProjectsWithContext)

	case "ListRemoteAccessSessionsWithContext":
		return m.Fake(d.fakeListRemoteAccessSessionsWithContext)

	case "ListRunsPages":
		return m.Fake(d.fakeListRunsPages)

	case "ListRunsPagesWithContext":
		return m.Fake(d.fakeListRunsPagesWithContext)

	case "ListRunsWithContext":
		return m.Fake(d.fakeListRunsWithContext)

	case "ListSamplesPages":
		return m.Fake(d.fakeListSamplesPages)

	case "ListSamplesPagesWithContext":
		return m.Fake(d.fakeListSamplesPagesWithContext)

	case "ListSamplesWithContext":
		return m.Fake(d.fakeListSamplesWithContext)

	case "ListSuitesPages":
		return m.Fake(d.fakeListSuitesPages)

	case "ListSuitesPagesWithContext":
		return m.Fake(d.fakeListSuitesPagesWithContext)

	case "ListSuitesWithContext":
		return m.Fake(d.fakeListSuitesWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "ListTestGridProjectsPages":
		return m.Fake(d.fakeListTestGridProjectsPages)

	case "ListTestGridProjectsPagesWithContext":
		return m.Fake(d.fakeListTestGridProjectsPagesWithContext)

	case "ListTestGridProjectsWithContext":
		return m.Fake(d.fakeListTestGridProjectsWithContext)

	case "ListTestGridSessionActionsPages":
		return m.Fake(d.fakeListTestGridSessionActionsPages)

	case "ListTestGridSessionActionsPagesWithContext":
		return m.Fake(d.fakeListTestGridSessionActionsPagesWithContext)

	case "ListTestGridSessionActionsWithContext":
		return m.Fake(d.fakeListTestGridSessionActionsWithContext)

	case "ListTestGridSessionArtifactsPages":
		return m.Fake(d.fakeListTestGridSessionArtifactsPages)

	case "ListTestGridSessionArtifactsPagesWithContext":
		return m.Fake(d.fakeListTestGridSessionArtifactsPagesWithContext)

	case "ListTestGridSessionArtifactsWithContext":
		return m.Fake(d.fakeListTestGridSessionArtifactsWithContext)

	case "ListTestGridSessionsPages":
		return m.Fake(d.fakeListTestGridSessionsPages)

	case "ListTestGridSessionsPagesWithContext":
		return m.Fake(d.fakeListTestGridSessionsPagesWithContext)

	case "ListTestGridSessionsWithContext":
		return m.Fake(d.fakeListTestGridSessionsWithContext)

	case "ListTestsPages":
		return m.Fake(d.fakeListTestsPages)

	case "ListTestsPagesWithContext":
		return m.Fake(d.fakeListTestsPagesWithContext)

	case "ListTestsWithContext":
		return m.Fake(d.fakeListTestsWithContext)

	case "ListUniqueProblemsPages":
		return m.Fake(d.fakeListUniqueProblemsPages)

	case "ListUniqueProblemsPagesWithContext":
		return m.Fake(d.fakeListUniqueProblemsPagesWithContext)

	case "ListUniqueProblemsWithContext":
		return m.Fake(d.fakeListUniqueProblemsWithContext)

	case "ListUploadsPages":
		return m.Fake(d.fakeListUploadsPages)

	case "ListUploadsPagesWithContext":
		return m.Fake(d.fakeListUploadsPagesWithContext)

	case "ListUploadsWithContext":
		return m.Fake(d.fakeListUploadsWithContext)

	case "ListVPCEConfigurationsWithContext":
		return m.Fake(d.fakeListVPCEConfigurationsWithContext)

	case "PurchaseOfferingWithContext":
		return m.Fake(d.fakePurchaseOfferingWithContext)

	case "RenewOfferingWithContext":
		return m.Fake(d.fakeRenewOfferingWithContext)

	case "ScheduleRunWithContext":
		return m.Fake(d.fakeScheduleRunWithContext)

	case "StopJobWithContext":
		return m.Fake(d.fakeStopJobWithContext)

	case "StopRemoteAccessSessionWithContext":
		return m.Fake(d.fakeStopRemoteAccessSessionWithContext)

	case "StopRunWithContext":
		return m.Fake(d.fakeStopRunWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateDeviceInstanceWithContext":
		return m.Fake(d.fakeUpdateDeviceInstanceWithContext)

	case "UpdateDevicePoolWithContext":
		return m.Fake(d.fakeUpdateDevicePoolWithContext)

	case "UpdateInstanceProfileWithContext":
		return m.Fake(d.fakeUpdateInstanceProfileWithContext)

	case "UpdateNetworkProfileWithContext":
		return m.Fake(d.fakeUpdateNetworkProfileWithContext)

	case "UpdateProjectWithContext":
		return m.Fake(d.fakeUpdateProjectWithContext)

	case "UpdateTestGridProjectWithContext":
		return m.Fake(d.fakeUpdateTestGridProjectWithContext)

	case "UpdateUploadWithContext":
		return m.Fake(d.fakeUpdateUploadWithContext)

	case "UpdateVPCEConfigurationWithContext":
		return m.Fake(d.fakeUpdateVPCEConfigurationWithContext)

	default:
		return nil
	}
}

func (d *DeviceFarmDouble) CreateDevicePool(i0 *devicefarm.CreateDevicePoolInput) (r0 *devicefarm.CreateDevicePoolOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDevicePool", i0)
	r0, _ = returns[0].(*devicefarm.CreateDevicePoolOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) CreateDevicePoolRequest(i0 *devicefarm.CreateDevicePoolInput) (r0 *request.Request, r1 *devicefarm.CreateDevicePoolOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDevicePoolRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.CreateDevicePoolOutput)
	return
}

func (d *DeviceFarmDouble) CreateDevicePoolWithContext(i0 context.Context, i1 *devicefarm.CreateDevicePoolInput, i2 ...request.Option) (r0 *devicefarm.CreateDevicePoolOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDevicePoolWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.CreateDevicePoolOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeCreateDevicePoolWithContext(ctx context.Context, in *devicefarm.CreateDevicePoolInput, _ ...request.Option) (*devicefarm.CreateDevicePoolOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDevicePool cancelled", ctx.Err())
	default:
		return d.CreateDevicePool(in)
	}
}

func (d *DeviceFarmDouble) CreateInstanceProfile(i0 *devicefarm.CreateInstanceProfileInput) (r0 *devicefarm.CreateInstanceProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInstanceProfile", i0)
	r0, _ = returns[0].(*devicefarm.CreateInstanceProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) CreateInstanceProfileRequest(i0 *devicefarm.CreateInstanceProfileInput) (r0 *request.Request, r1 *devicefarm.CreateInstanceProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInstanceProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.CreateInstanceProfileOutput)
	return
}

func (d *DeviceFarmDouble) CreateInstanceProfileWithContext(i0 context.Context, i1 *devicefarm.CreateInstanceProfileInput, i2 ...request.Option) (r0 *devicefarm.CreateInstanceProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInstanceProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.CreateInstanceProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeCreateInstanceProfileWithContext(ctx context.Context, in *devicefarm.CreateInstanceProfileInput, _ ...request.Option) (*devicefarm.CreateInstanceProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateInstanceProfile cancelled", ctx.Err())
	default:
		return d.CreateInstanceProfile(in)
	}
}

func (d *DeviceFarmDouble) CreateNetworkProfile(i0 *devicefarm.CreateNetworkProfileInput) (r0 *devicefarm.CreateNetworkProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNetworkProfile", i0)
	r0, _ = returns[0].(*devicefarm.CreateNetworkProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) CreateNetworkProfileRequest(i0 *devicefarm.CreateNetworkProfileInput) (r0 *request.Request, r1 *devicefarm.CreateNetworkProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNetworkProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.CreateNetworkProfileOutput)
	return
}

func (d *DeviceFarmDouble) CreateNetworkProfileWithContext(i0 context.Context, i1 *devicefarm.CreateNetworkProfileInput, i2 ...request.Option) (r0 *devicefarm.CreateNetworkProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNetworkProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.CreateNetworkProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeCreateNetworkProfileWithContext(ctx context.Context, in *devicefarm.CreateNetworkProfileInput, _ ...request.Option) (*devicefarm.CreateNetworkProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateNetworkProfile cancelled", ctx.Err())
	default:
		return d.CreateNetworkProfile(in)
	}
}

func (d *DeviceFarmDouble) CreateProject(i0 *devicefarm.CreateProjectInput) (r0 *devicefarm.CreateProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProject", i0)
	r0, _ = returns[0].(*devicefarm.CreateProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) CreateProjectRequest(i0 *devicefarm.CreateProjectInput) (r0 *request.Request, r1 *devicefarm.CreateProjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.CreateProjectOutput)
	return
}

func (d *DeviceFarmDouble) CreateProjectWithContext(i0 context.Context, i1 *devicefarm.CreateProjectInput, i2 ...request.Option) (r0 *devicefarm.CreateProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.CreateProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeCreateProjectWithContext(ctx context.Context, in *devicefarm.CreateProjectInput, _ ...request.Option) (*devicefarm.CreateProjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateProject cancelled", ctx.Err())
	default:
		return d.CreateProject(in)
	}
}

func (d *DeviceFarmDouble) CreateRemoteAccessSession(i0 *devicefarm.CreateRemoteAccessSessionInput) (r0 *devicefarm.CreateRemoteAccessSessionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRemoteAccessSession", i0)
	r0, _ = returns[0].(*devicefarm.CreateRemoteAccessSessionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) CreateRemoteAccessSessionRequest(i0 *devicefarm.CreateRemoteAccessSessionInput) (r0 *request.Request, r1 *devicefarm.CreateRemoteAccessSessionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRemoteAccessSessionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.CreateRemoteAccessSessionOutput)
	return
}

func (d *DeviceFarmDouble) CreateRemoteAccessSessionWithContext(i0 context.Context, i1 *devicefarm.CreateRemoteAccessSessionInput, i2 ...request.Option) (r0 *devicefarm.CreateRemoteAccessSessionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRemoteAccessSessionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.CreateRemoteAccessSessionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeCreateRemoteAccessSessionWithContext(ctx context.Context, in *devicefarm.CreateRemoteAccessSessionInput, _ ...request.Option) (*devicefarm.CreateRemoteAccessSessionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateRemoteAccessSession cancelled", ctx.Err())
	default:
		return d.CreateRemoteAccessSession(in)
	}
}

func (d *DeviceFarmDouble) CreateTestGridProject(i0 *devicefarm.CreateTestGridProjectInput) (r0 *devicefarm.CreateTestGridProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTestGridProject", i0)
	r0, _ = returns[0].(*devicefarm.CreateTestGridProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) CreateTestGridProjectRequest(i0 *devicefarm.CreateTestGridProjectInput) (r0 *request.Request, r1 *devicefarm.CreateTestGridProjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTestGridProjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.CreateTestGridProjectOutput)
	return
}

func (d *DeviceFarmDouble) CreateTestGridProjectWithContext(i0 context.Context, i1 *devicefarm.CreateTestGridProjectInput, i2 ...request.Option) (r0 *devicefarm.CreateTestGridProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTestGridProjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.CreateTestGridProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeCreateTestGridProjectWithContext(ctx context.Context, in *devicefarm.CreateTestGridProjectInput, _ ...request.Option) (*devicefarm.CreateTestGridProjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTestGridProject cancelled", ctx.Err())
	default:
		return d.CreateTestGridProject(in)
	}
}

func (d *DeviceFarmDouble) CreateTestGridUrl(i0 *devicefarm.CreateTestGridUrlInput) (r0 *devicefarm.CreateTestGridUrlOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTestGridUrl", i0)
	r0, _ = returns[0].(*devicefarm.CreateTestGridUrlOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) CreateTestGridUrlRequest(i0 *devicefarm.CreateTestGridUrlInput) (r0 *request.Request, r1 *devicefarm.CreateTestGridUrlOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTestGridUrlRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.CreateTestGridUrlOutput)
	return
}

func (d *DeviceFarmDouble) CreateTestGridUrlWithContext(i0 context.Context, i1 *devicefarm.CreateTestGridUrlInput, i2 ...request.Option) (r0 *devicefarm.CreateTestGridUrlOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTestGridUrlWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.CreateTestGridUrlOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeCreateTestGridUrlWithContext(ctx context.Context, in *devicefarm.CreateTestGridUrlInput, _ ...request.Option) (*devicefarm.CreateTestGridUrlOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTestGridUrl cancelled", ctx.Err())
	default:
		return d.CreateTestGridUrl(in)
	}
}

func (d *DeviceFarmDouble) CreateUpload(i0 *devicefarm.CreateUploadInput) (r0 *devicefarm.CreateUploadOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUpload", i0)
	r0, _ = returns[0].(*devicefarm.CreateUploadOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) CreateUploadRequest(i0 *devicefarm.CreateUploadInput) (r0 *request.Request, r1 *devicefarm.CreateUploadOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUploadRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.CreateUploadOutput)
	return
}

func (d *DeviceFarmDouble) CreateUploadWithContext(i0 context.Context, i1 *devicefarm.CreateUploadInput, i2 ...request.Option) (r0 *devicefarm.CreateUploadOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUploadWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.CreateUploadOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeCreateUploadWithContext(ctx context.Context, in *devicefarm.CreateUploadInput, _ ...request.Option) (*devicefarm.CreateUploadOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateUpload cancelled", ctx.Err())
	default:
		return d.CreateUpload(in)
	}
}

func (d *DeviceFarmDouble) CreateVPCEConfiguration(i0 *devicefarm.CreateVPCEConfigurationInput) (r0 *devicefarm.CreateVPCEConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVPCEConfiguration", i0)
	r0, _ = returns[0].(*devicefarm.CreateVPCEConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) CreateVPCEConfigurationRequest(i0 *devicefarm.CreateVPCEConfigurationInput) (r0 *request.Request, r1 *devicefarm.CreateVPCEConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVPCEConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.CreateVPCEConfigurationOutput)
	return
}

func (d *DeviceFarmDouble) CreateVPCEConfigurationWithContext(i0 context.Context, i1 *devicefarm.CreateVPCEConfigurationInput, i2 ...request.Option) (r0 *devicefarm.CreateVPCEConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVPCEConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.CreateVPCEConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeCreateVPCEConfigurationWithContext(ctx context.Context, in *devicefarm.CreateVPCEConfigurationInput, _ ...request.Option) (*devicefarm.CreateVPCEConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateVPCEConfiguration cancelled", ctx.Err())
	default:
		return d.CreateVPCEConfiguration(in)
	}
}

func (d *DeviceFarmDouble) DeleteDevicePool(i0 *devicefarm.DeleteDevicePoolInput) (r0 *devicefarm.DeleteDevicePoolOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDevicePool", i0)
	r0, _ = returns[0].(*devicefarm.DeleteDevicePoolOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) DeleteDevicePoolRequest(i0 *devicefarm.DeleteDevicePoolInput) (r0 *request.Request, r1 *devicefarm.DeleteDevicePoolOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDevicePoolRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.DeleteDevicePoolOutput)
	return
}

func (d *DeviceFarmDouble) DeleteDevicePoolWithContext(i0 context.Context, i1 *devicefarm.DeleteDevicePoolInput, i2 ...request.Option) (r0 *devicefarm.DeleteDevicePoolOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDevicePoolWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.DeleteDevicePoolOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeDeleteDevicePoolWithContext(ctx context.Context, in *devicefarm.DeleteDevicePoolInput, _ ...request.Option) (*devicefarm.DeleteDevicePoolOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDevicePool cancelled", ctx.Err())
	default:
		return d.DeleteDevicePool(in)
	}
}

func (d *DeviceFarmDouble) DeleteInstanceProfile(i0 *devicefarm.DeleteInstanceProfileInput) (r0 *devicefarm.DeleteInstanceProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInstanceProfile", i0)
	r0, _ = returns[0].(*devicefarm.DeleteInstanceProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) DeleteInstanceProfileRequest(i0 *devicefarm.DeleteInstanceProfileInput) (r0 *request.Request, r1 *devicefarm.DeleteInstanceProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInstanceProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.DeleteInstanceProfileOutput)
	return
}

func (d *DeviceFarmDouble) DeleteInstanceProfileWithContext(i0 context.Context, i1 *devicefarm.DeleteInstanceProfileInput, i2 ...request.Option) (r0 *devicefarm.DeleteInstanceProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInstanceProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.DeleteInstanceProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeDeleteInstanceProfileWithContext(ctx context.Context, in *devicefarm.DeleteInstanceProfileInput, _ ...request.Option) (*devicefarm.DeleteInstanceProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteInstanceProfile cancelled", ctx.Err())
	default:
		return d.DeleteInstanceProfile(in)
	}
}

func (d *DeviceFarmDouble) DeleteNetworkProfile(i0 *devicefarm.DeleteNetworkProfileInput) (r0 *devicefarm.DeleteNetworkProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNetworkProfile", i0)
	r0, _ = returns[0].(*devicefarm.DeleteNetworkProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) DeleteNetworkProfileRequest(i0 *devicefarm.DeleteNetworkProfileInput) (r0 *request.Request, r1 *devicefarm.DeleteNetworkProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNetworkProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.DeleteNetworkProfileOutput)
	return
}

func (d *DeviceFarmDouble) DeleteNetworkProfileWithContext(i0 context.Context, i1 *devicefarm.DeleteNetworkProfileInput, i2 ...request.Option) (r0 *devicefarm.DeleteNetworkProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNetworkProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.DeleteNetworkProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeDeleteNetworkProfileWithContext(ctx context.Context, in *devicefarm.DeleteNetworkProfileInput, _ ...request.Option) (*devicefarm.DeleteNetworkProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteNetworkProfile cancelled", ctx.Err())
	default:
		return d.DeleteNetworkProfile(in)
	}
}

func (d *DeviceFarmDouble) DeleteProject(i0 *devicefarm.DeleteProjectInput) (r0 *devicefarm.DeleteProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteProject", i0)
	r0, _ = returns[0].(*devicefarm.DeleteProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) DeleteProjectRequest(i0 *devicefarm.DeleteProjectInput) (r0 *request.Request, r1 *devicefarm.DeleteProjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteProjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.DeleteProjectOutput)
	return
}

func (d *DeviceFarmDouble) DeleteProjectWithContext(i0 context.Context, i1 *devicefarm.DeleteProjectInput, i2 ...request.Option) (r0 *devicefarm.DeleteProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteProjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.DeleteProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeDeleteProjectWithContext(ctx context.Context, in *devicefarm.DeleteProjectInput, _ ...request.Option) (*devicefarm.DeleteProjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteProject cancelled", ctx.Err())
	default:
		return d.DeleteProject(in)
	}
}

func (d *DeviceFarmDouble) DeleteRemoteAccessSession(i0 *devicefarm.DeleteRemoteAccessSessionInput) (r0 *devicefarm.DeleteRemoteAccessSessionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRemoteAccessSession", i0)
	r0, _ = returns[0].(*devicefarm.DeleteRemoteAccessSessionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) DeleteRemoteAccessSessionRequest(i0 *devicefarm.DeleteRemoteAccessSessionInput) (r0 *request.Request, r1 *devicefarm.DeleteRemoteAccessSessionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRemoteAccessSessionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.DeleteRemoteAccessSessionOutput)
	return
}

func (d *DeviceFarmDouble) DeleteRemoteAccessSessionWithContext(i0 context.Context, i1 *devicefarm.DeleteRemoteAccessSessionInput, i2 ...request.Option) (r0 *devicefarm.DeleteRemoteAccessSessionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRemoteAccessSessionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.DeleteRemoteAccessSessionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeDeleteRemoteAccessSessionWithContext(ctx context.Context, in *devicefarm.DeleteRemoteAccessSessionInput, _ ...request.Option) (*devicefarm.DeleteRemoteAccessSessionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRemoteAccessSession cancelled", ctx.Err())
	default:
		return d.DeleteRemoteAccessSession(in)
	}
}

func (d *DeviceFarmDouble) DeleteRun(i0 *devicefarm.DeleteRunInput) (r0 *devicefarm.DeleteRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRun", i0)
	r0, _ = returns[0].(*devicefarm.DeleteRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) DeleteRunRequest(i0 *devicefarm.DeleteRunInput) (r0 *request.Request, r1 *devicefarm.DeleteRunOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRunRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.DeleteRunOutput)
	return
}

func (d *DeviceFarmDouble) DeleteRunWithContext(i0 context.Context, i1 *devicefarm.DeleteRunInput, i2 ...request.Option) (r0 *devicefarm.DeleteRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRunWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.DeleteRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeDeleteRunWithContext(ctx context.Context, in *devicefarm.DeleteRunInput, _ ...request.Option) (*devicefarm.DeleteRunOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRun cancelled", ctx.Err())
	default:
		return d.DeleteRun(in)
	}
}

func (d *DeviceFarmDouble) DeleteTestGridProject(i0 *devicefarm.DeleteTestGridProjectInput) (r0 *devicefarm.DeleteTestGridProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTestGridProject", i0)
	r0, _ = returns[0].(*devicefarm.DeleteTestGridProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) DeleteTestGridProjectRequest(i0 *devicefarm.DeleteTestGridProjectInput) (r0 *request.Request, r1 *devicefarm.DeleteTestGridProjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTestGridProjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.DeleteTestGridProjectOutput)
	return
}

func (d *DeviceFarmDouble) DeleteTestGridProjectWithContext(i0 context.Context, i1 *devicefarm.DeleteTestGridProjectInput, i2 ...request.Option) (r0 *devicefarm.DeleteTestGridProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTestGridProjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.DeleteTestGridProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeDeleteTestGridProjectWithContext(ctx context.Context, in *devicefarm.DeleteTestGridProjectInput, _ ...request.Option) (*devicefarm.DeleteTestGridProjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTestGridProject cancelled", ctx.Err())
	default:
		return d.DeleteTestGridProject(in)
	}
}

func (d *DeviceFarmDouble) DeleteUpload(i0 *devicefarm.DeleteUploadInput) (r0 *devicefarm.DeleteUploadOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUpload", i0)
	r0, _ = returns[0].(*devicefarm.DeleteUploadOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) DeleteUploadRequest(i0 *devicefarm.DeleteUploadInput) (r0 *request.Request, r1 *devicefarm.DeleteUploadOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUploadRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.DeleteUploadOutput)
	return
}

func (d *DeviceFarmDouble) DeleteUploadWithContext(i0 context.Context, i1 *devicefarm.DeleteUploadInput, i2 ...request.Option) (r0 *devicefarm.DeleteUploadOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUploadWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.DeleteUploadOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeDeleteUploadWithContext(ctx context.Context, in *devicefarm.DeleteUploadInput, _ ...request.Option) (*devicefarm.DeleteUploadOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteUpload cancelled", ctx.Err())
	default:
		return d.DeleteUpload(in)
	}
}

func (d *DeviceFarmDouble) DeleteVPCEConfiguration(i0 *devicefarm.DeleteVPCEConfigurationInput) (r0 *devicefarm.DeleteVPCEConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVPCEConfiguration", i0)
	r0, _ = returns[0].(*devicefarm.DeleteVPCEConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) DeleteVPCEConfigurationRequest(i0 *devicefarm.DeleteVPCEConfigurationInput) (r0 *request.Request, r1 *devicefarm.DeleteVPCEConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVPCEConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.DeleteVPCEConfigurationOutput)
	return
}

func (d *DeviceFarmDouble) DeleteVPCEConfigurationWithContext(i0 context.Context, i1 *devicefarm.DeleteVPCEConfigurationInput, i2 ...request.Option) (r0 *devicefarm.DeleteVPCEConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVPCEConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.DeleteVPCEConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeDeleteVPCEConfigurationWithContext(ctx context.Context, in *devicefarm.DeleteVPCEConfigurationInput, _ ...request.Option) (*devicefarm.DeleteVPCEConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteVPCEConfiguration cancelled", ctx.Err())
	default:
		return d.DeleteVPCEConfiguration(in)
	}
}

func (d *DeviceFarmDouble) GetAccountSettings(i0 *devicefarm.GetAccountSettingsInput) (r0 *devicefarm.GetAccountSettingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAccountSettings", i0)
	r0, _ = returns[0].(*devicefarm.GetAccountSettingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) GetAccountSettingsRequest(i0 *devicefarm.GetAccountSettingsInput) (r0 *request.Request, r1 *devicefarm.GetAccountSettingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAccountSettingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.GetAccountSettingsOutput)
	return
}

func (d *DeviceFarmDouble) GetAccountSettingsWithContext(i0 context.Context, i1 *devicefarm.GetAccountSettingsInput, i2 ...request.Option) (r0 *devicefarm.GetAccountSettingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAccountSettingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.GetAccountSettingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeGetAccountSettingsWithContext(ctx context.Context, in *devicefarm.GetAccountSettingsInput, _ ...request.Option) (*devicefarm.GetAccountSettingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetAccountSettings cancelled", ctx.Err())
	default:
		return d.GetAccountSettings(in)
	}
}

func (d *DeviceFarmDouble) GetDevice(i0 *devicefarm.GetDeviceInput) (r0 *devicefarm.GetDeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDevice", i0)
	r0, _ = returns[0].(*devicefarm.GetDeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) GetDeviceInstance(i0 *devicefarm.GetDeviceInstanceInput) (r0 *devicefarm.GetDeviceInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeviceInstance", i0)
	r0, _ = returns[0].(*devicefarm.GetDeviceInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) GetDeviceInstanceRequest(i0 *devicefarm.GetDeviceInstanceInput) (r0 *request.Request, r1 *devicefarm.GetDeviceInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeviceInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.GetDeviceInstanceOutput)
	return
}

func (d *DeviceFarmDouble) GetDeviceInstanceWithContext(i0 context.Context, i1 *devicefarm.GetDeviceInstanceInput, i2 ...request.Option) (r0 *devicefarm.GetDeviceInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeviceInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.GetDeviceInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeGetDeviceInstanceWithContext(ctx context.Context, in *devicefarm.GetDeviceInstanceInput, _ ...request.Option) (*devicefarm.GetDeviceInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDeviceInstance cancelled", ctx.Err())
	default:
		return d.GetDeviceInstance(in)
	}
}

func (d *DeviceFarmDouble) GetDevicePool(i0 *devicefarm.GetDevicePoolInput) (r0 *devicefarm.GetDevicePoolOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDevicePool", i0)
	r0, _ = returns[0].(*devicefarm.GetDevicePoolOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) GetDevicePoolCompatibility(i0 *devicefarm.GetDevicePoolCompatibilityInput) (r0 *devicefarm.GetDevicePoolCompatibilityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDevicePoolCompatibility", i0)
	r0, _ = returns[0].(*devicefarm.GetDevicePoolCompatibilityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) GetDevicePoolCompatibilityRequest(i0 *devicefarm.GetDevicePoolCompatibilityInput) (r0 *request.Request, r1 *devicefarm.GetDevicePoolCompatibilityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDevicePoolCompatibilityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.GetDevicePoolCompatibilityOutput)
	return
}

func (d *DeviceFarmDouble) GetDevicePoolCompatibilityWithContext(i0 context.Context, i1 *devicefarm.GetDevicePoolCompatibilityInput, i2 ...request.Option) (r0 *devicefarm.GetDevicePoolCompatibilityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDevicePoolCompatibilityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.GetDevicePoolCompatibilityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeGetDevicePoolCompatibilityWithContext(ctx context.Context, in *devicefarm.GetDevicePoolCompatibilityInput, _ ...request.Option) (*devicefarm.GetDevicePoolCompatibilityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDevicePoolCompatibility cancelled", ctx.Err())
	default:
		return d.GetDevicePoolCompatibility(in)
	}
}

func (d *DeviceFarmDouble) GetDevicePoolRequest(i0 *devicefarm.GetDevicePoolInput) (r0 *request.Request, r1 *devicefarm.GetDevicePoolOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDevicePoolRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.GetDevicePoolOutput)
	return
}

func (d *DeviceFarmDouble) GetDevicePoolWithContext(i0 context.Context, i1 *devicefarm.GetDevicePoolInput, i2 ...request.Option) (r0 *devicefarm.GetDevicePoolOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDevicePoolWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.GetDevicePoolOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeGetDevicePoolWithContext(ctx context.Context, in *devicefarm.GetDevicePoolInput, _ ...request.Option) (*devicefarm.GetDevicePoolOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDevicePool cancelled", ctx.Err())
	default:
		return d.GetDevicePool(in)
	}
}

func (d *DeviceFarmDouble) GetDeviceRequest(i0 *devicefarm.GetDeviceInput) (r0 *request.Request, r1 *devicefarm.GetDeviceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeviceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.GetDeviceOutput)
	return
}

func (d *DeviceFarmDouble) GetDeviceWithContext(i0 context.Context, i1 *devicefarm.GetDeviceInput, i2 ...request.Option) (r0 *devicefarm.GetDeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeviceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.GetDeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeGetDeviceWithContext(ctx context.Context, in *devicefarm.GetDeviceInput, _ ...request.Option) (*devicefarm.GetDeviceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDevice cancelled", ctx.Err())
	default:
		return d.GetDevice(in)
	}
}

func (d *DeviceFarmDouble) GetInstanceProfile(i0 *devicefarm.GetInstanceProfileInput) (r0 *devicefarm.GetInstanceProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstanceProfile", i0)
	r0, _ = returns[0].(*devicefarm.GetInstanceProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) GetInstanceProfileRequest(i0 *devicefarm.GetInstanceProfileInput) (r0 *request.Request, r1 *devicefarm.GetInstanceProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstanceProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.GetInstanceProfileOutput)
	return
}

func (d *DeviceFarmDouble) GetInstanceProfileWithContext(i0 context.Context, i1 *devicefarm.GetInstanceProfileInput, i2 ...request.Option) (r0 *devicefarm.GetInstanceProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstanceProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.GetInstanceProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeGetInstanceProfileWithContext(ctx context.Context, in *devicefarm.GetInstanceProfileInput, _ ...request.Option) (*devicefarm.GetInstanceProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetInstanceProfile cancelled", ctx.Err())
	default:
		return d.GetInstanceProfile(in)
	}
}

func (d *DeviceFarmDouble) GetJob(i0 *devicefarm.GetJobInput) (r0 *devicefarm.GetJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJob", i0)
	r0, _ = returns[0].(*devicefarm.GetJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) GetJobRequest(i0 *devicefarm.GetJobInput) (r0 *request.Request, r1 *devicefarm.GetJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.GetJobOutput)
	return
}

func (d *DeviceFarmDouble) GetJobWithContext(i0 context.Context, i1 *devicefarm.GetJobInput, i2 ...request.Option) (r0 *devicefarm.GetJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.GetJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeGetJobWithContext(ctx context.Context, in *devicefarm.GetJobInput, _ ...request.Option) (*devicefarm.GetJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetJob cancelled", ctx.Err())
	default:
		return d.GetJob(in)
	}
}

func (d *DeviceFarmDouble) GetNetworkProfile(i0 *devicefarm.GetNetworkProfileInput) (r0 *devicefarm.GetNetworkProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetNetworkProfile", i0)
	r0, _ = returns[0].(*devicefarm.GetNetworkProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) GetNetworkProfileRequest(i0 *devicefarm.GetNetworkProfileInput) (r0 *request.Request, r1 *devicefarm.GetNetworkProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetNetworkProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.GetNetworkProfileOutput)
	return
}

func (d *DeviceFarmDouble) GetNetworkProfileWithContext(i0 context.Context, i1 *devicefarm.GetNetworkProfileInput, i2 ...request.Option) (r0 *devicefarm.GetNetworkProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetNetworkProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.GetNetworkProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeGetNetworkProfileWithContext(ctx context.Context, in *devicefarm.GetNetworkProfileInput, _ ...request.Option) (*devicefarm.GetNetworkProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetNetworkProfile cancelled", ctx.Err())
	default:
		return d.GetNetworkProfile(in)
	}
}

func (d *DeviceFarmDouble) GetOfferingStatus(i0 *devicefarm.GetOfferingStatusInput) (r0 *devicefarm.GetOfferingStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOfferingStatus", i0)
	r0, _ = returns[0].(*devicefarm.GetOfferingStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) GetOfferingStatusPages(i0 *devicefarm.GetOfferingStatusInput, i1 func(*devicefarm.GetOfferingStatusOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOfferingStatusPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DeviceFarmDouble) fakeGetOfferingStatusPages(in *devicefarm.GetOfferingStatusInput, pager func(*devicefarm.GetOfferingStatusOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetOfferingStatus", paginators, in, pager)
}

func (d *DeviceFarmDouble) GetOfferingStatusPagesWithContext(i0 context.Context, i1 *devicefarm.GetOfferingStatusInput, i2 func(*devicefarm.GetOfferingStatusOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOfferingStatusPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DeviceFarmDouble) fakeGetOfferingStatusPagesWithContext(ctx context.Context, in *devicefarm.GetOfferingStatusInput, pager func(*devicefarm.GetOfferingStatusOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetOfferingStatus", paginators, ctx, in, pager, options...)
}

func (d *DeviceFarmDouble) GetOfferingStatusRequest(i0 *devicefarm.GetOfferingStatusInput) (r0 *request.Request, r1 *devicefarm.GetOfferingStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOfferingStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.GetOfferingStatusOutput)
	return
}

func (d *DeviceFarmDouble) GetOfferingStatusWithContext(i0 context.Context, i1 *devicefarm.GetOfferingStatusInput, i2 ...request.Option) (r0 *devicefarm.GetOfferingStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOfferingStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.GetOfferingStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeGetOfferingStatusWithContext(ctx context.Context, in *devicefarm.GetOfferingStatusInput, _ ...request.Option) (*devicefarm.GetOfferingStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetOfferingStatus cancelled", ctx.Err())
	default:
		return d.GetOfferingStatus(in)
	}
}

func (d *DeviceFarmDouble) GetProject(i0 *devicefarm.GetProjectInput) (r0 *devicefarm.GetProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetProject", i0)
	r0, _ = returns[0].(*devicefarm.GetProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) GetProjectRequest(i0 *devicefarm.GetProjectInput) (r0 *request.Request, r1 *devicefarm.GetProjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetProjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.GetProjectOutput)
	return
}

func (d *DeviceFarmDouble) GetProjectWithContext(i0 context.Context, i1 *devicefarm.GetProjectInput, i2 ...request.Option) (r0 *devicefarm.GetProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetProjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.GetProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeGetProjectWithContext(ctx context.Context, in *devicefarm.GetProjectInput, _ ...request.Option) (*devicefarm.GetProjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetProject cancelled", ctx.Err())
	default:
		return d.GetProject(in)
	}
}

func (d *DeviceFarmDouble) GetRemoteAccessSession(i0 *devicefarm.GetRemoteAccessSessionInput) (r0 *devicefarm.GetRemoteAccessSessionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRemoteAccessSession", i0)
	r0, _ = returns[0].(*devicefarm.GetRemoteAccessSessionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) GetRemoteAccessSessionRequest(i0 *devicefarm.GetRemoteAccessSessionInput) (r0 *request.Request, r1 *devicefarm.GetRemoteAccessSessionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRemoteAccessSessionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.GetRemoteAccessSessionOutput)
	return
}

func (d *DeviceFarmDouble) GetRemoteAccessSessionWithContext(i0 context.Context, i1 *devicefarm.GetRemoteAccessSessionInput, i2 ...request.Option) (r0 *devicefarm.GetRemoteAccessSessionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRemoteAccessSessionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.GetRemoteAccessSessionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeGetRemoteAccessSessionWithContext(ctx context.Context, in *devicefarm.GetRemoteAccessSessionInput, _ ...request.Option) (*devicefarm.GetRemoteAccessSessionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRemoteAccessSession cancelled", ctx.Err())
	default:
		return d.GetRemoteAccessSession(in)
	}
}

func (d *DeviceFarmDouble) GetRun(i0 *devicefarm.GetRunInput) (r0 *devicefarm.GetRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRun", i0)
	r0, _ = returns[0].(*devicefarm.GetRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) GetRunRequest(i0 *devicefarm.GetRunInput) (r0 *request.Request, r1 *devicefarm.GetRunOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRunRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.GetRunOutput)
	return
}

func (d *DeviceFarmDouble) GetRunWithContext(i0 context.Context, i1 *devicefarm.GetRunInput, i2 ...request.Option) (r0 *devicefarm.GetRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRunWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.GetRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeGetRunWithContext(ctx context.Context, in *devicefarm.GetRunInput, _ ...request.Option) (*devicefarm.GetRunOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRun cancelled", ctx.Err())
	default:
		return d.GetRun(in)
	}
}

func (d *DeviceFarmDouble) GetSuite(i0 *devicefarm.GetSuiteInput) (r0 *devicefarm.GetSuiteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSuite", i0)
	r0, _ = returns[0].(*devicefarm.GetSuiteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) GetSuiteRequest(i0 *devicefarm.GetSuiteInput) (r0 *request.Request, r1 *devicefarm.GetSuiteOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSuiteRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.GetSuiteOutput)
	return
}

func (d *DeviceFarmDouble) GetSuiteWithContext(i0 context.Context, i1 *devicefarm.GetSuiteInput, i2 ...request.Option) (r0 *devicefarm.GetSuiteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSuiteWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.GetSuiteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeGetSuiteWithContext(ctx context.Context, in *devicefarm.GetSuiteInput, _ ...request.Option) (*devicefarm.GetSuiteOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetSuite cancelled", ctx.Err())
	default:
		return d.GetSuite(in)
	}
}

func (d *DeviceFarmDouble) GetTest(i0 *devicefarm.GetTestInput) (r0 *devicefarm.GetTestOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTest", i0)
	r0, _ = returns[0].(*devicefarm.GetTestOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) GetTestGridProject(i0 *devicefarm.GetTestGridProjectInput) (r0 *devicefarm.GetTestGridProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTestGridProject", i0)
	r0, _ = returns[0].(*devicefarm.GetTestGridProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) GetTestGridProjectRequest(i0 *devicefarm.GetTestGridProjectInput) (r0 *request.Request, r1 *devicefarm.GetTestGridProjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTestGridProjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.GetTestGridProjectOutput)
	return
}

func (d *DeviceFarmDouble) GetTestGridProjectWithContext(i0 context.Context, i1 *devicefarm.GetTestGridProjectInput, i2 ...request.Option) (r0 *devicefarm.GetTestGridProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTestGridProjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.GetTestGridProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeGetTestGridProjectWithContext(ctx context.Context, in *devicefarm.GetTestGridProjectInput, _ ...request.Option) (*devicefarm.GetTestGridProjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetTestGridProject cancelled", ctx.Err())
	default:
		return d.GetTestGridProject(in)
	}
}

func (d *DeviceFarmDouble) GetTestGridSession(i0 *devicefarm.GetTestGridSessionInput) (r0 *devicefarm.GetTestGridSessionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTestGridSession", i0)
	r0, _ = returns[0].(*devicefarm.GetTestGridSessionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) GetTestGridSessionRequest(i0 *devicefarm.GetTestGridSessionInput) (r0 *request.Request, r1 *devicefarm.GetTestGridSessionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTestGridSessionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.GetTestGridSessionOutput)
	return
}

func (d *DeviceFarmDouble) GetTestGridSessionWithContext(i0 context.Context, i1 *devicefarm.GetTestGridSessionInput, i2 ...request.Option) (r0 *devicefarm.GetTestGridSessionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTestGridSessionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.GetTestGridSessionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeGetTestGridSessionWithContext(ctx context.Context, in *devicefarm.GetTestGridSessionInput, _ ...request.Option) (*devicefarm.GetTestGridSessionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetTestGridSession cancelled", ctx.Err())
	default:
		return d.GetTestGridSession(in)
	}
}

func (d *DeviceFarmDouble) GetTestRequest(i0 *devicefarm.GetTestInput) (r0 *request.Request, r1 *devicefarm.GetTestOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTestRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.GetTestOutput)
	return
}

func (d *DeviceFarmDouble) GetTestWithContext(i0 context.Context, i1 *devicefarm.GetTestInput, i2 ...request.Option) (r0 *devicefarm.GetTestOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTestWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.GetTestOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeGetTestWithContext(ctx context.Context, in *devicefarm.GetTestInput, _ ...request.Option) (*devicefarm.GetTestOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetTest cancelled", ctx.Err())
	default:
		return d.GetTest(in)
	}
}

func (d *DeviceFarmDouble) GetUpload(i0 *devicefarm.GetUploadInput) (r0 *devicefarm.GetUploadOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUpload", i0)
	r0, _ = returns[0].(*devicefarm.GetUploadOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) GetUploadRequest(i0 *devicefarm.GetUploadInput) (r0 *request.Request, r1 *devicefarm.GetUploadOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUploadRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.GetUploadOutput)
	return
}

func (d *DeviceFarmDouble) GetUploadWithContext(i0 context.Context, i1 *devicefarm.GetUploadInput, i2 ...request.Option) (r0 *devicefarm.GetUploadOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUploadWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.GetUploadOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeGetUploadWithContext(ctx context.Context, in *devicefarm.GetUploadInput, _ ...request.Option) (*devicefarm.GetUploadOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetUpload cancelled", ctx.Err())
	default:
		return d.GetUpload(in)
	}
}

func (d *DeviceFarmDouble) GetVPCEConfiguration(i0 *devicefarm.GetVPCEConfigurationInput) (r0 *devicefarm.GetVPCEConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetVPCEConfiguration", i0)
	r0, _ = returns[0].(*devicefarm.GetVPCEConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) GetVPCEConfigurationRequest(i0 *devicefarm.GetVPCEConfigurationInput) (r0 *request.Request, r1 *devicefarm.GetVPCEConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetVPCEConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.GetVPCEConfigurationOutput)
	return
}

func (d *DeviceFarmDouble) GetVPCEConfigurationWithContext(i0 context.Context, i1 *devicefarm.GetVPCEConfigurationInput, i2 ...request.Option) (r0 *devicefarm.GetVPCEConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetVPCEConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.GetVPCEConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeGetVPCEConfigurationWithContext(ctx context.Context, in *devicefarm.GetVPCEConfigurationInput, _ ...request.Option) (*devicefarm.GetVPCEConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetVPCEConfiguration cancelled", ctx.Err())
	default:
		return d.GetVPCEConfiguration(in)
	}
}

func (d *DeviceFarmDouble) InstallToRemoteAccessSession(i0 *devicefarm.InstallToRemoteAccessSessionInput) (r0 *devicefarm.InstallToRemoteAccessSessionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("InstallToRemoteAccessSession", i0)
	r0, _ = returns[0].(*devicefarm.InstallToRemoteAccessSessionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) InstallToRemoteAccessSessionRequest(i0 *devicefarm.InstallToRemoteAccessSessionInput) (r0 *request.Request, r1 *devicefarm.InstallToRemoteAccessSessionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("InstallToRemoteAccessSessionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.InstallToRemoteAccessSessionOutput)
	return
}

func (d *DeviceFarmDouble) InstallToRemoteAccessSessionWithContext(i0 context.Context, i1 *devicefarm.InstallToRemoteAccessSessionInput, i2 ...request.Option) (r0 *devicefarm.InstallToRemoteAccessSessionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("InstallToRemoteAccessSessionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.InstallToRemoteAccessSessionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeInstallToRemoteAccessSessionWithContext(ctx context.Context, in *devicefarm.InstallToRemoteAccessSessionInput, _ ...request.Option) (*devicefarm.InstallToRemoteAccessSessionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "InstallToRemoteAccessSession cancelled", ctx.Err())
	default:
		return d.InstallToRemoteAccessSession(in)
	}
}

func (d *DeviceFarmDouble) ListArtifacts(i0 *devicefarm.ListArtifactsInput) (r0 *devicefarm.ListArtifactsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListArtifacts", i0)
	r0, _ = returns[0].(*devicefarm.ListArtifactsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) ListArtifactsPages(i0 *devicefarm.ListArtifactsInput, i1 func(*devicefarm.ListArtifactsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListArtifactsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DeviceFarmDouble) fakeListArtifactsPages(in *devicefarm.ListArtifactsInput, pager func(*devicefarm.ListArtifactsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListArtifacts", paginators, in, pager)
}

func (d *DeviceFarmDouble) ListArtifactsPagesWithContext(i0 context.Context, i1 *devicefarm.ListArtifactsInput, i2 func(*devicefarm.ListArtifactsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListArtifactsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DeviceFarmDouble) fakeListArtifactsPagesWithContext(ctx context.Context, in *devicefarm.ListArtifactsInput, pager func(*devicefarm.ListArtifactsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListArtifacts", paginators, ctx, in, pager, options...)
}

func (d *DeviceFarmDouble) ListArtifactsRequest(i0 *devicefarm.ListArtifactsInput) (r0 *request.Request, r1 *devicefarm.ListArtifactsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListArtifactsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.ListArtifactsOutput)
	return
}

func (d *DeviceFarmDouble) ListArtifactsWithContext(i0 context.Context, i1 *devicefarm.ListArtifactsInput, i2 ...request.Option) (r0 *devicefarm.ListArtifactsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListArtifactsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.ListArtifactsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeListArtifactsWithContext(ctx context.Context, in *devicefarm.ListArtifactsInput, _ ...request.Option) (*devicefarm.ListArtifactsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListArtifacts cancelled", ctx.Err())
	default:
		return d.ListArtifacts(in)
	}
}

func (d *DeviceFarmDouble) ListDeviceInstances(i0 *devicefarm.ListDeviceInstancesInput) (r0 *devicefarm.ListDeviceInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeviceInstances", i0)
	r0, _ = returns[0].(*devicefarm.ListDeviceInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) ListDeviceInstancesRequest(i0 *devicefarm.ListDeviceInstancesInput) (r0 *request.Request, r1 *devicefarm.ListDeviceInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeviceInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.ListDeviceInstancesOutput)
	return
}

func (d *DeviceFarmDouble) ListDeviceInstancesWithContext(i0 context.Context, i1 *devicefarm.ListDeviceInstancesInput, i2 ...request.Option) (r0 *devicefarm.ListDeviceInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeviceInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.ListDeviceInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeListDeviceInstancesWithContext(ctx context.Context, in *devicefarm.ListDeviceInstancesInput, _ ...request.Option) (*devicefarm.ListDeviceInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDeviceInstances cancelled", ctx.Err())
	default:
		return d.ListDeviceInstances(in)
	}
}

func (d *DeviceFarmDouble) ListDevicePools(i0 *devicefarm.ListDevicePoolsInput) (r0 *devicefarm.ListDevicePoolsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDevicePools", i0)
	r0, _ = returns[0].(*devicefarm.ListDevicePoolsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) ListDevicePoolsPages(i0 *devicefarm.ListDevicePoolsInput, i1 func(*devicefarm.ListDevicePoolsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDevicePoolsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DeviceFarmDouble) fakeListDevicePoolsPages(in *devicefarm.ListDevicePoolsInput, pager func(*devicefarm.ListDevicePoolsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListDevicePools", paginators, in, pager)
}

func (d *DeviceFarmDouble) ListDevicePoolsPagesWithContext(i0 context.Context, i1 *devicefarm.ListDevicePoolsInput, i2 func(*devicefarm.ListDevicePoolsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDevicePoolsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DeviceFarmDouble) fakeListDevicePoolsPagesWithContext(ctx context.Context, in *devicefarm.ListDevicePoolsInput, pager func(*devicefarm.ListDevicePoolsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListDevicePools", paginators, ctx, in, pager, options...)
}

func (d *DeviceFarmDouble) ListDevicePoolsRequest(i0 *devicefarm.ListDevicePoolsInput) (r0 *request.Request, r1 *devicefarm.ListDevicePoolsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDevicePoolsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.ListDevicePoolsOutput)
	return
}

func (d *DeviceFarmDouble) ListDevicePoolsWithContext(i0 context.Context, i1 *devicefarm.ListDevicePoolsInput, i2 ...request.Option) (r0 *devicefarm.ListDevicePoolsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDevicePoolsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.ListDevicePoolsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeListDevicePoolsWithContext(ctx context.Context, in *devicefarm.ListDevicePoolsInput, _ ...request.Option) (*devicefarm.ListDevicePoolsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDevicePools cancelled", ctx.Err())
	default:
		return d.ListDevicePools(in)
	}
}

func (d *DeviceFarmDouble) ListDevices(i0 *devicefarm.ListDevicesInput) (r0 *devicefarm.ListDevicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDevices", i0)
	r0, _ = returns[0].(*devicefarm.ListDevicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) ListDevicesPages(i0 *devicefarm.ListDevicesInput, i1 func(*devicefarm.ListDevicesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDevicesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DeviceFarmDouble) fakeListDevicesPages(in *devicefarm.ListDevicesInput, pager func(*devicefarm.ListDevicesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListDevices", paginators, in, pager)
}

func (d *DeviceFarmDouble) ListDevicesPagesWithContext(i0 context.Context, i1 *devicefarm.ListDevicesInput, i2 func(*devicefarm.ListDevicesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDevicesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DeviceFarmDouble) fakeListDevicesPagesWithContext(ctx context.Context, in *devicefarm.ListDevicesInput, pager func(*devicefarm.ListDevicesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListDevices", paginators, ctx, in, pager, options...)
}

func (d *DeviceFarmDouble) ListDevicesRequest(i0 *devicefarm.ListDevicesInput) (r0 *request.Request, r1 *devicefarm.ListDevicesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDevicesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.ListDevicesOutput)
	return
}

func (d *DeviceFarmDouble) ListDevicesWithContext(i0 context.Context, i1 *devicefarm.ListDevicesInput, i2 ...request.Option) (r0 *devicefarm.ListDevicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDevicesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.ListDevicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeListDevicesWithContext(ctx context.Context, in *devicefarm.ListDevicesInput, _ ...request.Option) (*devicefarm.ListDevicesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDevices cancelled", ctx.Err())
	default:
		return d.ListDevices(in)
	}
}

func (d *DeviceFarmDouble) ListInstanceProfiles(i0 *devicefarm.ListInstanceProfilesInput) (r0 *devicefarm.ListInstanceProfilesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInstanceProfiles", i0)
	r0, _ = returns[0].(*devicefarm.ListInstanceProfilesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) ListInstanceProfilesRequest(i0 *devicefarm.ListInstanceProfilesInput) (r0 *request.Request, r1 *devicefarm.ListInstanceProfilesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInstanceProfilesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.ListInstanceProfilesOutput)
	return
}

func (d *DeviceFarmDouble) ListInstanceProfilesWithContext(i0 context.Context, i1 *devicefarm.ListInstanceProfilesInput, i2 ...request.Option) (r0 *devicefarm.ListInstanceProfilesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInstanceProfilesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.ListInstanceProfilesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeListInstanceProfilesWithContext(ctx context.Context, in *devicefarm.ListInstanceProfilesInput, _ ...request.Option) (*devicefarm.ListInstanceProfilesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListInstanceProfiles cancelled", ctx.Err())
	default:
		return d.ListInstanceProfiles(in)
	}
}

func (d *DeviceFarmDouble) ListJobs(i0 *devicefarm.ListJobsInput) (r0 *devicefarm.ListJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobs", i0)
	r0, _ = returns[0].(*devicefarm.ListJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) ListJobsPages(i0 *devicefarm.ListJobsInput, i1 func(*devicefarm.ListJobsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DeviceFarmDouble) fakeListJobsPages(in *devicefarm.ListJobsInput, pager func(*devicefarm.ListJobsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListJobs", paginators, in, pager)
}

func (d *DeviceFarmDouble) ListJobsPagesWithContext(i0 context.Context, i1 *devicefarm.ListJobsInput, i2 func(*devicefarm.ListJobsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DeviceFarmDouble) fakeListJobsPagesWithContext(ctx context.Context, in *devicefarm.ListJobsInput, pager func(*devicefarm.ListJobsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListJobs", paginators, ctx, in, pager, options...)
}

func (d *DeviceFarmDouble) ListJobsRequest(i0 *devicefarm.ListJobsInput) (r0 *request.Request, r1 *devicefarm.ListJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.ListJobsOutput)
	return
}

func (d *DeviceFarmDouble) ListJobsWithContext(i0 context.Context, i1 *devicefarm.ListJobsInput, i2 ...request.Option) (r0 *devicefarm.ListJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.ListJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeListJobsWithContext(ctx context.Context, in *devicefarm.ListJobsInput, _ ...request.Option) (*devicefarm.ListJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListJobs cancelled", ctx.Err())
	default:
		return d.ListJobs(in)
	}
}

func (d *DeviceFarmDouble) ListNetworkProfiles(i0 *devicefarm.ListNetworkProfilesInput) (r0 *devicefarm.ListNetworkProfilesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListNetworkProfiles", i0)
	r0, _ = returns[0].(*devicefarm.ListNetworkProfilesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) ListNetworkProfilesRequest(i0 *devicefarm.ListNetworkProfilesInput) (r0 *request.Request, r1 *devicefarm.ListNetworkProfilesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListNetworkProfilesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.ListNetworkProfilesOutput)
	return
}

func (d *DeviceFarmDouble) ListNetworkProfilesWithContext(i0 context.Context, i1 *devicefarm.ListNetworkProfilesInput, i2 ...request.Option) (r0 *devicefarm.ListNetworkProfilesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListNetworkProfilesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.ListNetworkProfilesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeListNetworkProfilesWithContext(ctx context.Context, in *devicefarm.ListNetworkProfilesInput, _ ...request.Option) (*devicefarm.ListNetworkProfilesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListNetworkProfiles cancelled", ctx.Err())
	default:
		return d.ListNetworkProfiles(in)
	}
}

func (d *DeviceFarmDouble) ListOfferingPromotions(i0 *devicefarm.ListOfferingPromotionsInput) (r0 *devicefarm.ListOfferingPromotionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOfferingPromotions", i0)
	r0, _ = returns[0].(*devicefarm.ListOfferingPromotionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) ListOfferingPromotionsRequest(i0 *devicefarm.ListOfferingPromotionsInput) (r0 *request.Request, r1 *devicefarm.ListOfferingPromotionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOfferingPromotionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.ListOfferingPromotionsOutput)
	return
}

func (d *DeviceFarmDouble) ListOfferingPromotionsWithContext(i0 context.Context, i1 *devicefarm.ListOfferingPromotionsInput, i2 ...request.Option) (r0 *devicefarm.ListOfferingPromotionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOfferingPromotionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.ListOfferingPromotionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeListOfferingPromotionsWithContext(ctx context.Context, in *devicefarm.ListOfferingPromotionsInput, _ ...request.Option) (*devicefarm.ListOfferingPromotionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListOfferingPromotions cancelled", ctx.Err())
	default:
		return d.ListOfferingPromotions(in)
	}
}

func (d *DeviceFarmDouble) ListOfferingTransactions(i0 *devicefarm.ListOfferingTransactionsInput) (r0 *devicefarm.ListOfferingTransactionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOfferingTransactions", i0)
	r0, _ = returns[0].(*devicefarm.ListOfferingTransactionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) ListOfferingTransactionsPages(i0 *devicefarm.ListOfferingTransactionsInput, i1 func(*devicefarm.ListOfferingTransactionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOfferingTransactionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DeviceFarmDouble) fakeListOfferingTransactionsPages(in *devicefarm.ListOfferingTransactionsInput, pager func(*devicefarm.ListOfferingTransactionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListOfferingTransactions", paginators, in, pager)
}

func (d *DeviceFarmDouble) ListOfferingTransactionsPagesWithContext(i0 context.Context, i1 *devicefarm.ListOfferingTransactionsInput, i2 func(*devicefarm.ListOfferingTransactionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOfferingTransactionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DeviceFarmDouble) fakeListOfferingTransactionsPagesWithContext(ctx context.Context, in *devicefarm.ListOfferingTransactionsInput, pager func(*devicefarm.ListOfferingTransactionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListOfferingTransactions", paginators, ctx, in, pager, options...)
}

func (d *DeviceFarmDouble) ListOfferingTransactionsRequest(i0 *devicefarm.ListOfferingTransactionsInput) (r0 *request.Request, r1 *devicefarm.ListOfferingTransactionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOfferingTransactionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.ListOfferingTransactionsOutput)
	return
}

func (d *DeviceFarmDouble) ListOfferingTransactionsWithContext(i0 context.Context, i1 *devicefarm.ListOfferingTransactionsInput, i2 ...request.Option) (r0 *devicefarm.ListOfferingTransactionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOfferingTransactionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.ListOfferingTransactionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeListOfferingTransactionsWithContext(ctx context.Context, in *devicefarm.ListOfferingTransactionsInput, _ ...request.Option) (*devicefarm.ListOfferingTransactionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListOfferingTransactions cancelled", ctx.Err())
	default:
		return d.ListOfferingTransactions(in)
	}
}

func (d *DeviceFarmDouble) ListOfferings(i0 *devicefarm.ListOfferingsInput) (r0 *devicefarm.ListOfferingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOfferings", i0)
	r0, _ = returns[0].(*devicefarm.ListOfferingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) ListOfferingsPages(i0 *devicefarm.ListOfferingsInput, i1 func(*devicefarm.ListOfferingsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOfferingsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DeviceFarmDouble) fakeListOfferingsPages(in *devicefarm.ListOfferingsInput, pager func(*devicefarm.ListOfferingsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListOfferings", paginators, in, pager)
}

func (d *DeviceFarmDouble) ListOfferingsPagesWithContext(i0 context.Context, i1 *devicefarm.ListOfferingsInput, i2 func(*devicefarm.ListOfferingsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOfferingsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DeviceFarmDouble) fakeListOfferingsPagesWithContext(ctx context.Context, in *devicefarm.ListOfferingsInput, pager func(*devicefarm.ListOfferingsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListOfferings", paginators, ctx, in, pager, options...)
}

func (d *DeviceFarmDouble) ListOfferingsRequest(i0 *devicefarm.ListOfferingsInput) (r0 *request.Request, r1 *devicefarm.ListOfferingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOfferingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.ListOfferingsOutput)
	return
}

func (d *DeviceFarmDouble) ListOfferingsWithContext(i0 context.Context, i1 *devicefarm.ListOfferingsInput, i2 ...request.Option) (r0 *devicefarm.ListOfferingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOfferingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.ListOfferingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeListOfferingsWithContext(ctx context.Context, in *devicefarm.ListOfferingsInput, _ ...request.Option) (*devicefarm.ListOfferingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListOfferings cancelled", ctx.Err())
	default:
		return d.ListOfferings(in)
	}
}

func (d *DeviceFarmDouble) ListProjects(i0 *devicefarm.ListProjectsInput) (r0 *devicefarm.ListProjectsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProjects", i0)
	r0, _ = returns[0].(*devicefarm.ListProjectsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) ListProjectsPages(i0 *devicefarm.ListProjectsInput, i1 func(*devicefarm.ListProjectsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProjectsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DeviceFarmDouble) fakeListProjectsPages(in *devicefarm.ListProjectsInput, pager func(*devicefarm.ListProjectsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListProjects", paginators, in, pager)
}

func (d *DeviceFarmDouble) ListProjectsPagesWithContext(i0 context.Context, i1 *devicefarm.ListProjectsInput, i2 func(*devicefarm.ListProjectsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProjectsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DeviceFarmDouble) fakeListProjectsPagesWithContext(ctx context.Context, in *devicefarm.ListProjectsInput, pager func(*devicefarm.ListProjectsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListProjects", paginators, ctx, in, pager, options...)
}

func (d *DeviceFarmDouble) ListProjectsRequest(i0 *devicefarm.ListProjectsInput) (r0 *request.Request, r1 *devicefarm.ListProjectsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProjectsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.ListProjectsOutput)
	return
}

func (d *DeviceFarmDouble) ListProjectsWithContext(i0 context.Context, i1 *devicefarm.ListProjectsInput, i2 ...request.Option) (r0 *devicefarm.ListProjectsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProjectsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.ListProjectsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeListProjectsWithContext(ctx context.Context, in *devicefarm.ListProjectsInput, _ ...request.Option) (*devicefarm.ListProjectsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListProjects cancelled", ctx.Err())
	default:
		return d.ListProjects(in)
	}
}

func (d *DeviceFarmDouble) ListRemoteAccessSessions(i0 *devicefarm.ListRemoteAccessSessionsInput) (r0 *devicefarm.ListRemoteAccessSessionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRemoteAccessSessions", i0)
	r0, _ = returns[0].(*devicefarm.ListRemoteAccessSessionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) ListRemoteAccessSessionsRequest(i0 *devicefarm.ListRemoteAccessSessionsInput) (r0 *request.Request, r1 *devicefarm.ListRemoteAccessSessionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRemoteAccessSessionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.ListRemoteAccessSessionsOutput)
	return
}

func (d *DeviceFarmDouble) ListRemoteAccessSessionsWithContext(i0 context.Context, i1 *devicefarm.ListRemoteAccessSessionsInput, i2 ...request.Option) (r0 *devicefarm.ListRemoteAccessSessionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRemoteAccessSessionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.ListRemoteAccessSessionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeListRemoteAccessSessionsWithContext(ctx context.Context, in *devicefarm.ListRemoteAccessSessionsInput, _ ...request.Option) (*devicefarm.ListRemoteAccessSessionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListRemoteAccessSessions cancelled", ctx.Err())
	default:
		return d.ListRemoteAccessSessions(in)
	}
}

func (d *DeviceFarmDouble) ListRuns(i0 *devicefarm.ListRunsInput) (r0 *devicefarm.ListRunsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRuns", i0)
	r0, _ = returns[0].(*devicefarm.ListRunsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) ListRunsPages(i0 *devicefarm.ListRunsInput, i1 func(*devicefarm.ListRunsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRunsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DeviceFarmDouble) fakeListRunsPages(in *devicefarm.ListRunsInput, pager func(*devicefarm.ListRunsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListRuns", paginators, in, pager)
}

func (d *DeviceFarmDouble) ListRunsPagesWithContext(i0 context.Context, i1 *devicefarm.ListRunsInput, i2 func(*devicefarm.ListRunsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRunsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DeviceFarmDouble) fakeListRunsPagesWithContext(ctx context.Context, in *devicefarm.ListRunsInput, pager func(*devicefarm.ListRunsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListRuns", paginators, ctx, in, pager, options...)
}

func (d *DeviceFarmDouble) ListRunsRequest(i0 *devicefarm.ListRunsInput) (r0 *request.Request, r1 *devicefarm.ListRunsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRunsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.ListRunsOutput)
	return
}

func (d *DeviceFarmDouble) ListRunsWithContext(i0 context.Context, i1 *devicefarm.ListRunsInput, i2 ...request.Option) (r0 *devicefarm.ListRunsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRunsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.ListRunsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeListRunsWithContext(ctx context.Context, in *devicefarm.ListRunsInput, _ ...request.Option) (*devicefarm.ListRunsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListRuns cancelled", ctx.Err())
	default:
		return d.ListRuns(in)
	}
}

func (d *DeviceFarmDouble) ListSamples(i0 *devicefarm.ListSamplesInput) (r0 *devicefarm.ListSamplesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSamples", i0)
	r0, _ = returns[0].(*devicefarm.ListSamplesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) ListSamplesPages(i0 *devicefarm.ListSamplesInput, i1 func(*devicefarm.ListSamplesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSamplesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DeviceFarmDouble) fakeListSamplesPages(in *devicefarm.ListSamplesInput, pager func(*devicefarm.ListSamplesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListSamples", paginators, in, pager)
}

func (d *DeviceFarmDouble) ListSamplesPagesWithContext(i0 context.Context, i1 *devicefarm.ListSamplesInput, i2 func(*devicefarm.ListSamplesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSamplesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DeviceFarmDouble) fakeListSamplesPagesWithContext(ctx context.Context, in *devicefarm.ListSamplesInput, pager func(*devicefarm.ListSamplesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListSamples", paginators, ctx, in, pager, options...)
}

func (d *DeviceFarmDouble) ListSamplesRequest(i0 *devicefarm.ListSamplesInput) (r0 *request.Request, r1 *devicefarm.ListSamplesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSamplesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.ListSamplesOutput)
	return
}

func (d *DeviceFarmDouble) ListSamplesWithContext(i0 context.Context, i1 *devicefarm.ListSamplesInput, i2 ...request.Option) (r0 *devicefarm.ListSamplesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSamplesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.ListSamplesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeListSamplesWithContext(ctx context.Context, in *devicefarm.ListSamplesInput, _ ...request.Option) (*devicefarm.ListSamplesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListSamples cancelled", ctx.Err())
	default:
		return d.ListSamples(in)
	}
}

func (d *DeviceFarmDouble) ListSuites(i0 *devicefarm.ListSuitesInput) (r0 *devicefarm.ListSuitesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSuites", i0)
	r0, _ = returns[0].(*devicefarm.ListSuitesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) ListSuitesPages(i0 *devicefarm.ListSuitesInput, i1 func(*devicefarm.ListSuitesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSuitesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DeviceFarmDouble) fakeListSuitesPages(in *devicefarm.ListSuitesInput, pager func(*devicefarm.ListSuitesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListSuites", paginators, in, pager)
}

func (d *DeviceFarmDouble) ListSuitesPagesWithContext(i0 context.Context, i1 *devicefarm.ListSuitesInput, i2 func(*devicefarm.ListSuitesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSuitesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DeviceFarmDouble) fakeListSuitesPagesWithContext(ctx context.Context, in *devicefarm.ListSuitesInput, pager func(*devicefarm.ListSuitesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListSuites", paginators, ctx, in, pager, options...)
}

func (d *DeviceFarmDouble) ListSuitesRequest(i0 *devicefarm.ListSuitesInput) (r0 *request.Request, r1 *devicefarm.ListSuitesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSuitesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.ListSuitesOutput)
	return
}

func (d *DeviceFarmDouble) ListSuitesWithContext(i0 context.Context, i1 *devicefarm.ListSuitesInput, i2 ...request.Option) (r0 *devicefarm.ListSuitesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSuitesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.ListSuitesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeListSuitesWithContext(ctx context.Context, in *devicefarm.ListSuitesInput, _ ...request.Option) (*devicefarm.ListSuitesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListSuites cancelled", ctx.Err())
	default:
		return d.ListSuites(in)
	}
}

func (d *DeviceFarmDouble) ListTagsForResource(i0 *devicefarm.ListTagsForResourceInput) (r0 *devicefarm.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*devicefarm.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) ListTagsForResourceRequest(i0 *devicefarm.ListTagsForResourceInput) (r0 *request.Request, r1 *devicefarm.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.ListTagsForResourceOutput)
	return
}

func (d *DeviceFarmDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *devicefarm.ListTagsForResourceInput, i2 ...request.Option) (r0 *devicefarm.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *devicefarm.ListTagsForResourceInput, _ ...request.Option) (*devicefarm.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *DeviceFarmDouble) ListTestGridProjects(i0 *devicefarm.ListTestGridProjectsInput) (r0 *devicefarm.ListTestGridProjectsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTestGridProjects", i0)
	r0, _ = returns[0].(*devicefarm.ListTestGridProjectsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) ListTestGridProjectsPages(i0 *devicefarm.ListTestGridProjectsInput, i1 func(*devicefarm.ListTestGridProjectsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTestGridProjectsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DeviceFarmDouble) fakeListTestGridProjectsPages(in *devicefarm.ListTestGridProjectsInput, pager func(*devicefarm.ListTestGridProjectsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTestGridProjects", paginators, in, pager)
}

func (d *DeviceFarmDouble) ListTestGridProjectsPagesWithContext(i0 context.Context, i1 *devicefarm.ListTestGridProjectsInput, i2 func(*devicefarm.ListTestGridProjectsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTestGridProjectsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DeviceFarmDouble) fakeListTestGridProjectsPagesWithContext(ctx context.Context, in *devicefarm.ListTestGridProjectsInput, pager func(*devicefarm.ListTestGridProjectsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTestGridProjects", paginators, ctx, in, pager, options...)
}

func (d *DeviceFarmDouble) ListTestGridProjectsRequest(i0 *devicefarm.ListTestGridProjectsInput) (r0 *request.Request, r1 *devicefarm.ListTestGridProjectsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTestGridProjectsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.ListTestGridProjectsOutput)
	return
}

func (d *DeviceFarmDouble) ListTestGridProjectsWithContext(i0 context.Context, i1 *devicefarm.ListTestGridProjectsInput, i2 ...request.Option) (r0 *devicefarm.ListTestGridProjectsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTestGridProjectsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.ListTestGridProjectsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeListTestGridProjectsWithContext(ctx context.Context, in *devicefarm.ListTestGridProjectsInput, _ ...request.Option) (*devicefarm.ListTestGridProjectsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTestGridProjects cancelled", ctx.Err())
	default:
		return d.ListTestGridProjects(in)
	}
}

func (d *DeviceFarmDouble) ListTestGridSessionActions(i0 *devicefarm.ListTestGridSessionActionsInput) (r0 *devicefarm.ListTestGridSessionActionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTestGridSessionActions", i0)
	r0, _ = returns[0].(*devicefarm.ListTestGridSessionActionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) ListTestGridSessionActionsPages(i0 *devicefarm.ListTestGridSessionActionsInput, i1 func(*devicefarm.ListTestGridSessionActionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTestGridSessionActionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DeviceFarmDouble) fakeListTestGridSessionActionsPages(in *devicefarm.ListTestGridSessionActionsInput, pager func(*devicefarm.ListTestGridSessionActionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTestGridSessionActions", paginators, in, pager)
}

func (d *DeviceFarmDouble) ListTestGridSessionActionsPagesWithContext(i0 context.Context, i1 *devicefarm.ListTestGridSessionActionsInput, i2 func(*devicefarm.ListTestGridSessionActionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTestGridSessionActionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DeviceFarmDouble) fakeListTestGridSessionActionsPagesWithContext(ctx context.Context, in *devicefarm.ListTestGridSessionActionsInput, pager func(*devicefarm.ListTestGridSessionActionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTestGridSessionActions", paginators, ctx, in, pager, options...)
}

func (d *DeviceFarmDouble) ListTestGridSessionActionsRequest(i0 *devicefarm.ListTestGridSessionActionsInput) (r0 *request.Request, r1 *devicefarm.ListTestGridSessionActionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTestGridSessionActionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.ListTestGridSessionActionsOutput)
	return
}

func (d *DeviceFarmDouble) ListTestGridSessionActionsWithContext(i0 context.Context, i1 *devicefarm.ListTestGridSessionActionsInput, i2 ...request.Option) (r0 *devicefarm.ListTestGridSessionActionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTestGridSessionActionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.ListTestGridSessionActionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeListTestGridSessionActionsWithContext(ctx context.Context, in *devicefarm.ListTestGridSessionActionsInput, _ ...request.Option) (*devicefarm.ListTestGridSessionActionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTestGridSessionActions cancelled", ctx.Err())
	default:
		return d.ListTestGridSessionActions(in)
	}
}

func (d *DeviceFarmDouble) ListTestGridSessionArtifacts(i0 *devicefarm.ListTestGridSessionArtifactsInput) (r0 *devicefarm.ListTestGridSessionArtifactsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTestGridSessionArtifacts", i0)
	r0, _ = returns[0].(*devicefarm.ListTestGridSessionArtifactsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) ListTestGridSessionArtifactsPages(i0 *devicefarm.ListTestGridSessionArtifactsInput, i1 func(*devicefarm.ListTestGridSessionArtifactsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTestGridSessionArtifactsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DeviceFarmDouble) fakeListTestGridSessionArtifactsPages(in *devicefarm.ListTestGridSessionArtifactsInput, pager func(*devicefarm.ListTestGridSessionArtifactsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTestGridSessionArtifacts", paginators, in, pager)
}

func (d *DeviceFarmDouble) ListTestGridSessionArtifactsPagesWithContext(i0 context.Context, i1 *devicefarm.ListTestGridSessionArtifactsInput, i2 func(*devicefarm.ListTestGridSessionArtifactsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTestGridSessionArtifactsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DeviceFarmDouble) fakeListTestGridSessionArtifactsPagesWithContext(ctx context.Context, in *devicefarm.ListTestGridSessionArtifactsInput, pager func(*devicefarm.ListTestGridSessionArtifactsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTestGridSessionArtifacts", paginators, ctx, in, pager, options...)
}

func (d *DeviceFarmDouble) ListTestGridSessionArtifactsRequest(i0 *devicefarm.ListTestGridSessionArtifactsInput) (r0 *request.Request, r1 *devicefarm.ListTestGridSessionArtifactsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTestGridSessionArtifactsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.ListTestGridSessionArtifactsOutput)
	return
}

func (d *DeviceFarmDouble) ListTestGridSessionArtifactsWithContext(i0 context.Context, i1 *devicefarm.ListTestGridSessionArtifactsInput, i2 ...request.Option) (r0 *devicefarm.ListTestGridSessionArtifactsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTestGridSessionArtifactsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.ListTestGridSessionArtifactsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeListTestGridSessionArtifactsWithContext(ctx context.Context, in *devicefarm.ListTestGridSessionArtifactsInput, _ ...request.Option) (*devicefarm.ListTestGridSessionArtifactsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTestGridSessionArtifacts cancelled", ctx.Err())
	default:
		return d.ListTestGridSessionArtifacts(in)
	}
}

func (d *DeviceFarmDouble) ListTestGridSessions(i0 *devicefarm.ListTestGridSessionsInput) (r0 *devicefarm.ListTestGridSessionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTestGridSessions", i0)
	r0, _ = returns[0].(*devicefarm.ListTestGridSessionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) ListTestGridSessionsPages(i0 *devicefarm.ListTestGridSessionsInput, i1 func(*devicefarm.ListTestGridSessionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTestGridSessionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DeviceFarmDouble) fakeListTestGridSessionsPages(in *devicefarm.ListTestGridSessionsInput, pager func(*devicefarm.ListTestGridSessionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTestGridSessions", paginators, in, pager)
}

func (d *DeviceFarmDouble) ListTestGridSessionsPagesWithContext(i0 context.Context, i1 *devicefarm.ListTestGridSessionsInput, i2 func(*devicefarm.ListTestGridSessionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTestGridSessionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DeviceFarmDouble) fakeListTestGridSessionsPagesWithContext(ctx context.Context, in *devicefarm.ListTestGridSessionsInput, pager func(*devicefarm.ListTestGridSessionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTestGridSessions", paginators, ctx, in, pager, options...)
}

func (d *DeviceFarmDouble) ListTestGridSessionsRequest(i0 *devicefarm.ListTestGridSessionsInput) (r0 *request.Request, r1 *devicefarm.ListTestGridSessionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTestGridSessionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.ListTestGridSessionsOutput)
	return
}

func (d *DeviceFarmDouble) ListTestGridSessionsWithContext(i0 context.Context, i1 *devicefarm.ListTestGridSessionsInput, i2 ...request.Option) (r0 *devicefarm.ListTestGridSessionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTestGridSessionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.ListTestGridSessionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeListTestGridSessionsWithContext(ctx context.Context, in *devicefarm.ListTestGridSessionsInput, _ ...request.Option) (*devicefarm.ListTestGridSessionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTestGridSessions cancelled", ctx.Err())
	default:
		return d.ListTestGridSessions(in)
	}
}

func (d *DeviceFarmDouble) ListTests(i0 *devicefarm.ListTestsInput) (r0 *devicefarm.ListTestsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTests", i0)
	r0, _ = returns[0].(*devicefarm.ListTestsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) ListTestsPages(i0 *devicefarm.ListTestsInput, i1 func(*devicefarm.ListTestsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTestsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DeviceFarmDouble) fakeListTestsPages(in *devicefarm.ListTestsInput, pager func(*devicefarm.ListTestsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTests", paginators, in, pager)
}

func (d *DeviceFarmDouble) ListTestsPagesWithContext(i0 context.Context, i1 *devicefarm.ListTestsInput, i2 func(*devicefarm.ListTestsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTestsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DeviceFarmDouble) fakeListTestsPagesWithContext(ctx context.Context, in *devicefarm.ListTestsInput, pager func(*devicefarm.ListTestsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTests", paginators, ctx, in, pager, options...)
}

func (d *DeviceFarmDouble) ListTestsRequest(i0 *devicefarm.ListTestsInput) (r0 *request.Request, r1 *devicefarm.ListTestsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTestsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.ListTestsOutput)
	return
}

func (d *DeviceFarmDouble) ListTestsWithContext(i0 context.Context, i1 *devicefarm.ListTestsInput, i2 ...request.Option) (r0 *devicefarm.ListTestsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTestsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.ListTestsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeListTestsWithContext(ctx context.Context, in *devicefarm.ListTestsInput, _ ...request.Option) (*devicefarm.ListTestsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTests cancelled", ctx.Err())
	default:
		return d.ListTests(in)
	}
}

func (d *DeviceFarmDouble) ListUniqueProblems(i0 *devicefarm.ListUniqueProblemsInput) (r0 *devicefarm.ListUniqueProblemsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUniqueProblems", i0)
	r0, _ = returns[0].(*devicefarm.ListUniqueProblemsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) ListUniqueProblemsPages(i0 *devicefarm.ListUniqueProblemsInput, i1 func(*devicefarm.ListUniqueProblemsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUniqueProblemsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DeviceFarmDouble) fakeListUniqueProblemsPages(in *devicefarm.ListUniqueProblemsInput, pager func(*devicefarm.ListUniqueProblemsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListUniqueProblems", paginators, in, pager)
}

func (d *DeviceFarmDouble) ListUniqueProblemsPagesWithContext(i0 context.Context, i1 *devicefarm.ListUniqueProblemsInput, i2 func(*devicefarm.ListUniqueProblemsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUniqueProblemsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DeviceFarmDouble) fakeListUniqueProblemsPagesWithContext(ctx context.Context, in *devicefarm.ListUniqueProblemsInput, pager func(*devicefarm.ListUniqueProblemsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListUniqueProblems", paginators, ctx, in, pager, options...)
}

func (d *DeviceFarmDouble) ListUniqueProblemsRequest(i0 *devicefarm.ListUniqueProblemsInput) (r0 *request.Request, r1 *devicefarm.ListUniqueProblemsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUniqueProblemsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.ListUniqueProblemsOutput)
	return
}

func (d *DeviceFarmDouble) ListUniqueProblemsWithContext(i0 context.Context, i1 *devicefarm.ListUniqueProblemsInput, i2 ...request.Option) (r0 *devicefarm.ListUniqueProblemsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUniqueProblemsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.ListUniqueProblemsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeListUniqueProblemsWithContext(ctx context.Context, in *devicefarm.ListUniqueProblemsInput, _ ...request.Option) (*devicefarm.ListUniqueProblemsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListUniqueProblems cancelled", ctx.Err())
	default:
		return d.ListUniqueProblems(in)
	}
}

func (d *DeviceFarmDouble) ListUploads(i0 *devicefarm.ListUploadsInput) (r0 *devicefarm.ListUploadsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUploads", i0)
	r0, _ = returns[0].(*devicefarm.ListUploadsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) ListUploadsPages(i0 *devicefarm.ListUploadsInput, i1 func(*devicefarm.ListUploadsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUploadsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DeviceFarmDouble) fakeListUploadsPages(in *devicefarm.ListUploadsInput, pager func(*devicefarm.ListUploadsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListUploads", paginators, in, pager)
}

func (d *DeviceFarmDouble) ListUploadsPagesWithContext(i0 context.Context, i1 *devicefarm.ListUploadsInput, i2 func(*devicefarm.ListUploadsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUploadsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DeviceFarmDouble) fakeListUploadsPagesWithContext(ctx context.Context, in *devicefarm.ListUploadsInput, pager func(*devicefarm.ListUploadsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListUploads", paginators, ctx, in, pager, options...)
}

func (d *DeviceFarmDouble) ListUploadsRequest(i0 *devicefarm.ListUploadsInput) (r0 *request.Request, r1 *devicefarm.ListUploadsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUploadsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.ListUploadsOutput)
	return
}

func (d *DeviceFarmDouble) ListUploadsWithContext(i0 context.Context, i1 *devicefarm.ListUploadsInput, i2 ...request.Option) (r0 *devicefarm.ListUploadsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUploadsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.ListUploadsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeListUploadsWithContext(ctx context.Context, in *devicefarm.ListUploadsInput, _ ...request.Option) (*devicefarm.ListUploadsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListUploads cancelled", ctx.Err())
	default:
		return d.ListUploads(in)
	}
}

func (d *DeviceFarmDouble) ListVPCEConfigurations(i0 *devicefarm.ListVPCEConfigurationsInput) (r0 *devicefarm.ListVPCEConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVPCEConfigurations", i0)
	r0, _ = returns[0].(*devicefarm.ListVPCEConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) ListVPCEConfigurationsRequest(i0 *devicefarm.ListVPCEConfigurationsInput) (r0 *request.Request, r1 *devicefarm.ListVPCEConfigurationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVPCEConfigurationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.ListVPCEConfigurationsOutput)
	return
}

func (d *DeviceFarmDouble) ListVPCEConfigurationsWithContext(i0 context.Context, i1 *devicefarm.ListVPCEConfigurationsInput, i2 ...request.Option) (r0 *devicefarm.ListVPCEConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVPCEConfigurationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.ListVPCEConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeListVPCEConfigurationsWithContext(ctx context.Context, in *devicefarm.ListVPCEConfigurationsInput, _ ...request.Option) (*devicefarm.ListVPCEConfigurationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListVPCEConfigurations cancelled", ctx.Err())
	default:
		return d.ListVPCEConfigurations(in)
	}
}

func (d *DeviceFarmDouble) PurchaseOffering(i0 *devicefarm.PurchaseOfferingInput) (r0 *devicefarm.PurchaseOfferingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PurchaseOffering", i0)
	r0, _ = returns[0].(*devicefarm.PurchaseOfferingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) PurchaseOfferingRequest(i0 *devicefarm.PurchaseOfferingInput) (r0 *request.Request, r1 *devicefarm.PurchaseOfferingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PurchaseOfferingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.PurchaseOfferingOutput)
	return
}

func (d *DeviceFarmDouble) PurchaseOfferingWithContext(i0 context.Context, i1 *devicefarm.PurchaseOfferingInput, i2 ...request.Option) (r0 *devicefarm.PurchaseOfferingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PurchaseOfferingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.PurchaseOfferingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakePurchaseOfferingWithContext(ctx context.Context, in *devicefarm.PurchaseOfferingInput, _ ...request.Option) (*devicefarm.PurchaseOfferingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PurchaseOffering cancelled", ctx.Err())
	default:
		return d.PurchaseOffering(in)
	}
}

func (d *DeviceFarmDouble) RenewOffering(i0 *devicefarm.RenewOfferingInput) (r0 *devicefarm.RenewOfferingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RenewOffering", i0)
	r0, _ = returns[0].(*devicefarm.RenewOfferingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) RenewOfferingRequest(i0 *devicefarm.RenewOfferingInput) (r0 *request.Request, r1 *devicefarm.RenewOfferingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RenewOfferingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.RenewOfferingOutput)
	return
}

func (d *DeviceFarmDouble) RenewOfferingWithContext(i0 context.Context, i1 *devicefarm.RenewOfferingInput, i2 ...request.Option) (r0 *devicefarm.RenewOfferingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RenewOfferingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.RenewOfferingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeRenewOfferingWithContext(ctx context.Context, in *devicefarm.RenewOfferingInput, _ ...request.Option) (*devicefarm.RenewOfferingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RenewOffering cancelled", ctx.Err())
	default:
		return d.RenewOffering(in)
	}
}

func (d *DeviceFarmDouble) ScheduleRun(i0 *devicefarm.ScheduleRunInput) (r0 *devicefarm.ScheduleRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ScheduleRun", i0)
	r0, _ = returns[0].(*devicefarm.ScheduleRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) ScheduleRunRequest(i0 *devicefarm.ScheduleRunInput) (r0 *request.Request, r1 *devicefarm.ScheduleRunOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ScheduleRunRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.ScheduleRunOutput)
	return
}

func (d *DeviceFarmDouble) ScheduleRunWithContext(i0 context.Context, i1 *devicefarm.ScheduleRunInput, i2 ...request.Option) (r0 *devicefarm.ScheduleRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ScheduleRunWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.ScheduleRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeScheduleRunWithContext(ctx context.Context, in *devicefarm.ScheduleRunInput, _ ...request.Option) (*devicefarm.ScheduleRunOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ScheduleRun cancelled", ctx.Err())
	default:
		return d.ScheduleRun(in)
	}
}

func (d *DeviceFarmDouble) StopJob(i0 *devicefarm.StopJobInput) (r0 *devicefarm.StopJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopJob", i0)
	r0, _ = returns[0].(*devicefarm.StopJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) StopJobRequest(i0 *devicefarm.StopJobInput) (r0 *request.Request, r1 *devicefarm.StopJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.StopJobOutput)
	return
}

func (d *DeviceFarmDouble) StopJobWithContext(i0 context.Context, i1 *devicefarm.StopJobInput, i2 ...request.Option) (r0 *devicefarm.StopJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.StopJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeStopJobWithContext(ctx context.Context, in *devicefarm.StopJobInput, _ ...request.Option) (*devicefarm.StopJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopJob cancelled", ctx.Err())
	default:
		return d.StopJob(in)
	}
}

func (d *DeviceFarmDouble) StopRemoteAccessSession(i0 *devicefarm.StopRemoteAccessSessionInput) (r0 *devicefarm.StopRemoteAccessSessionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopRemoteAccessSession", i0)
	r0, _ = returns[0].(*devicefarm.StopRemoteAccessSessionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) StopRemoteAccessSessionRequest(i0 *devicefarm.StopRemoteAccessSessionInput) (r0 *request.Request, r1 *devicefarm.StopRemoteAccessSessionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopRemoteAccessSessionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.StopRemoteAccessSessionOutput)
	return
}

func (d *DeviceFarmDouble) StopRemoteAccessSessionWithContext(i0 context.Context, i1 *devicefarm.StopRemoteAccessSessionInput, i2 ...request.Option) (r0 *devicefarm.StopRemoteAccessSessionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopRemoteAccessSessionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.StopRemoteAccessSessionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeStopRemoteAccessSessionWithContext(ctx context.Context, in *devicefarm.StopRemoteAccessSessionInput, _ ...request.Option) (*devicefarm.StopRemoteAccessSessionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopRemoteAccessSession cancelled", ctx.Err())
	default:
		return d.StopRemoteAccessSession(in)
	}
}

func (d *DeviceFarmDouble) StopRun(i0 *devicefarm.StopRunInput) (r0 *devicefarm.StopRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopRun", i0)
	r0, _ = returns[0].(*devicefarm.StopRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) StopRunRequest(i0 *devicefarm.StopRunInput) (r0 *request.Request, r1 *devicefarm.StopRunOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopRunRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.StopRunOutput)
	return
}

func (d *DeviceFarmDouble) StopRunWithContext(i0 context.Context, i1 *devicefarm.StopRunInput, i2 ...request.Option) (r0 *devicefarm.StopRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopRunWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.StopRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeStopRunWithContext(ctx context.Context, in *devicefarm.StopRunInput, _ ...request.Option) (*devicefarm.StopRunOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopRun cancelled", ctx.Err())
	default:
		return d.StopRun(in)
	}
}

func (d *DeviceFarmDouble) TagResource(i0 *devicefarm.TagResourceInput) (r0 *devicefarm.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*devicefarm.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) TagResourceRequest(i0 *devicefarm.TagResourceInput) (r0 *request.Request, r1 *devicefarm.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.TagResourceOutput)
	return
}

func (d *DeviceFarmDouble) TagResourceWithContext(i0 context.Context, i1 *devicefarm.TagResourceInput, i2 ...request.Option) (r0 *devicefarm.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeTagResourceWithContext(ctx context.Context, in *devicefarm.TagResourceInput, _ ...request.Option) (*devicefarm.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *DeviceFarmDouble) UntagResource(i0 *devicefarm.UntagResourceInput) (r0 *devicefarm.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*devicefarm.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) UntagResourceRequest(i0 *devicefarm.UntagResourceInput) (r0 *request.Request, r1 *devicefarm.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.UntagResourceOutput)
	return
}

func (d *DeviceFarmDouble) UntagResourceWithContext(i0 context.Context, i1 *devicefarm.UntagResourceInput, i2 ...request.Option) (r0 *devicefarm.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeUntagResourceWithContext(ctx context.Context, in *devicefarm.UntagResourceInput, _ ...request.Option) (*devicefarm.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *DeviceFarmDouble) UpdateDeviceInstance(i0 *devicefarm.UpdateDeviceInstanceInput) (r0 *devicefarm.UpdateDeviceInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDeviceInstance", i0)
	r0, _ = returns[0].(*devicefarm.UpdateDeviceInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) UpdateDeviceInstanceRequest(i0 *devicefarm.UpdateDeviceInstanceInput) (r0 *request.Request, r1 *devicefarm.UpdateDeviceInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDeviceInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.UpdateDeviceInstanceOutput)
	return
}

func (d *DeviceFarmDouble) UpdateDeviceInstanceWithContext(i0 context.Context, i1 *devicefarm.UpdateDeviceInstanceInput, i2 ...request.Option) (r0 *devicefarm.UpdateDeviceInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDeviceInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.UpdateDeviceInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeUpdateDeviceInstanceWithContext(ctx context.Context, in *devicefarm.UpdateDeviceInstanceInput, _ ...request.Option) (*devicefarm.UpdateDeviceInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDeviceInstance cancelled", ctx.Err())
	default:
		return d.UpdateDeviceInstance(in)
	}
}

func (d *DeviceFarmDouble) UpdateDevicePool(i0 *devicefarm.UpdateDevicePoolInput) (r0 *devicefarm.UpdateDevicePoolOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDevicePool", i0)
	r0, _ = returns[0].(*devicefarm.UpdateDevicePoolOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) UpdateDevicePoolRequest(i0 *devicefarm.UpdateDevicePoolInput) (r0 *request.Request, r1 *devicefarm.UpdateDevicePoolOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDevicePoolRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.UpdateDevicePoolOutput)
	return
}

func (d *DeviceFarmDouble) UpdateDevicePoolWithContext(i0 context.Context, i1 *devicefarm.UpdateDevicePoolInput, i2 ...request.Option) (r0 *devicefarm.UpdateDevicePoolOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDevicePoolWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.UpdateDevicePoolOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeUpdateDevicePoolWithContext(ctx context.Context, in *devicefarm.UpdateDevicePoolInput, _ ...request.Option) (*devicefarm.UpdateDevicePoolOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDevicePool cancelled", ctx.Err())
	default:
		return d.UpdateDevicePool(in)
	}
}

func (d *DeviceFarmDouble) UpdateInstanceProfile(i0 *devicefarm.UpdateInstanceProfileInput) (r0 *devicefarm.UpdateInstanceProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateInstanceProfile", i0)
	r0, _ = returns[0].(*devicefarm.UpdateInstanceProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) UpdateInstanceProfileRequest(i0 *devicefarm.UpdateInstanceProfileInput) (r0 *request.Request, r1 *devicefarm.UpdateInstanceProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateInstanceProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.UpdateInstanceProfileOutput)
	return
}

func (d *DeviceFarmDouble) UpdateInstanceProfileWithContext(i0 context.Context, i1 *devicefarm.UpdateInstanceProfileInput, i2 ...request.Option) (r0 *devicefarm.UpdateInstanceProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateInstanceProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.UpdateInstanceProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeUpdateInstanceProfileWithContext(ctx context.Context, in *devicefarm.UpdateInstanceProfileInput, _ ...request.Option) (*devicefarm.UpdateInstanceProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateInstanceProfile cancelled", ctx.Err())
	default:
		return d.UpdateInstanceProfile(in)
	}
}

func (d *DeviceFarmDouble) UpdateNetworkProfile(i0 *devicefarm.UpdateNetworkProfileInput) (r0 *devicefarm.UpdateNetworkProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateNetworkProfile", i0)
	r0, _ = returns[0].(*devicefarm.UpdateNetworkProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) UpdateNetworkProfileRequest(i0 *devicefarm.UpdateNetworkProfileInput) (r0 *request.Request, r1 *devicefarm.UpdateNetworkProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateNetworkProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.UpdateNetworkProfileOutput)
	return
}

func (d *DeviceFarmDouble) UpdateNetworkProfileWithContext(i0 context.Context, i1 *devicefarm.UpdateNetworkProfileInput, i2 ...request.Option) (r0 *devicefarm.UpdateNetworkProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateNetworkProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.UpdateNetworkProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeUpdateNetworkProfileWithContext(ctx context.Context, in *devicefarm.UpdateNetworkProfileInput, _ ...request.Option) (*devicefarm.UpdateNetworkProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateNetworkProfile cancelled", ctx.Err())
	default:
		return d.UpdateNetworkProfile(in)
	}
}

func (d *DeviceFarmDouble) UpdateProject(i0 *devicefarm.UpdateProjectInput) (r0 *devicefarm.UpdateProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateProject", i0)
	r0, _ = returns[0].(*devicefarm.UpdateProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) UpdateProjectRequest(i0 *devicefarm.UpdateProjectInput) (r0 *request.Request, r1 *devicefarm.UpdateProjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateProjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.UpdateProjectOutput)
	return
}

func (d *DeviceFarmDouble) UpdateProjectWithContext(i0 context.Context, i1 *devicefarm.UpdateProjectInput, i2 ...request.Option) (r0 *devicefarm.UpdateProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateProjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.UpdateProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeUpdateProjectWithContext(ctx context.Context, in *devicefarm.UpdateProjectInput, _ ...request.Option) (*devicefarm.UpdateProjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateProject cancelled", ctx.Err())
	default:
		return d.UpdateProject(in)
	}
}

func (d *DeviceFarmDouble) UpdateTestGridProject(i0 *devicefarm.UpdateTestGridProjectInput) (r0 *devicefarm.UpdateTestGridProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTestGridProject", i0)
	r0, _ = returns[0].(*devicefarm.UpdateTestGridProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) UpdateTestGridProjectRequest(i0 *devicefarm.UpdateTestGridProjectInput) (r0 *request.Request, r1 *devicefarm.UpdateTestGridProjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTestGridProjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.UpdateTestGridProjectOutput)
	return
}

func (d *DeviceFarmDouble) UpdateTestGridProjectWithContext(i0 context.Context, i1 *devicefarm.UpdateTestGridProjectInput, i2 ...request.Option) (r0 *devicefarm.UpdateTestGridProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTestGridProjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.UpdateTestGridProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeUpdateTestGridProjectWithContext(ctx context.Context, in *devicefarm.UpdateTestGridProjectInput, _ ...request.Option) (*devicefarm.UpdateTestGridProjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateTestGridProject cancelled", ctx.Err())
	default:
		return d.UpdateTestGridProject(in)
	}
}

func (d *DeviceFarmDouble) UpdateUpload(i0 *devicefarm.UpdateUploadInput) (r0 *devicefarm.UpdateUploadOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUpload", i0)
	r0, _ = returns[0].(*devicefarm.UpdateUploadOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) UpdateUploadRequest(i0 *devicefarm.UpdateUploadInput) (r0 *request.Request, r1 *devicefarm.UpdateUploadOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUploadRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.UpdateUploadOutput)
	return
}

func (d *DeviceFarmDouble) UpdateUploadWithContext(i0 context.Context, i1 *devicefarm.UpdateUploadInput, i2 ...request.Option) (r0 *devicefarm.UpdateUploadOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUploadWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.UpdateUploadOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeUpdateUploadWithContext(ctx context.Context, in *devicefarm.UpdateUploadInput, _ ...request.Option) (*devicefarm.UpdateUploadOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateUpload cancelled", ctx.Err())
	default:
		return d.UpdateUpload(in)
	}
}

func (d *DeviceFarmDouble) UpdateVPCEConfiguration(i0 *devicefarm.UpdateVPCEConfigurationInput) (r0 *devicefarm.UpdateVPCEConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateVPCEConfiguration", i0)
	r0, _ = returns[0].(*devicefarm.UpdateVPCEConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) UpdateVPCEConfigurationRequest(i0 *devicefarm.UpdateVPCEConfigurationInput) (r0 *request.Request, r1 *devicefarm.UpdateVPCEConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateVPCEConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*devicefarm.UpdateVPCEConfigurationOutput)
	return
}

func (d *DeviceFarmDouble) UpdateVPCEConfigurationWithContext(i0 context.Context, i1 *devicefarm.UpdateVPCEConfigurationInput, i2 ...request.Option) (r0 *devicefarm.UpdateVPCEConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateVPCEConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*devicefarm.UpdateVPCEConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DeviceFarmDouble) fakeUpdateVPCEConfigurationWithContext(ctx context.Context, in *devicefarm.UpdateVPCEConfigurationInput, _ ...request.Option) (*devicefarm.UpdateVPCEConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateVPCEConfiguration cancelled", ctx.Err())
	default:
		return d.UpdateVPCEConfiguration(in)
	}
}
