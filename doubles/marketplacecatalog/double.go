// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:13:46+11:00

// Package marketplacecatalogdouble provides a TestDouble implementation of marketplacecatalogiface.MarketplaceCatalogAPI
package marketplacecatalogdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/marketplacecatalog"
	"github.com/aws/aws-sdk-go/service/marketplacecatalog/marketplacecatalogiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// MarketplaceCatalogDouble is TestDouble for marketplacecatalogiface.MarketplaceCatalogAPI
type MarketplaceCatalogDouble struct {
	marketplacecatalogiface.MarketplaceCatalogAPI
	*awsdouble.AWSTestDouble
}

// Constructor for MarketplaceCatalogDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *MarketplaceCatalogDouble {
	result := &MarketplaceCatalogDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*marketplacecatalogiface.MarketplaceCatalogAPI)(nil), configurators...)
	return result
}

func (d *MarketplaceCatalogDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *MarketplaceCatalogDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CancelChangeSetWithContext":
		return m.Fake(d.fakeCancelChangeSetWithContext)

	case "DescribeChangeSetWithContext":
		return m.Fake(d.fakeDescribeChangeSetWithContext)

	case "DescribeEntityWithContext":
		return m.Fake(d.fakeDescribeEntityWithContext)

	case "ListChangeSetsPages":
		return m.Fake(d.fakeListChangeSetsPages)

	case "ListChangeSetsPagesWithContext":
		return m.Fake(d.fakeListChangeSetsPagesWithContext)

	case "ListChangeSetsWithContext":
		return m.Fake(d.fakeListChangeSetsWithContext)

	case "ListEntitiesPages":
		return m.Fake(d.fakeListEntitiesPages)

	case "ListEntitiesPagesWithContext":
		return m.Fake(d.fakeListEntitiesPagesWithContext)

	case "ListEntitiesWithContext":
		return m.Fake(d.fakeListEntitiesWithContext)

	case "StartChangeSetWithContext":
		return m.Fake(d.fakeStartChangeSetWithContext)

	default:
		return nil
	}
}

func (d *MarketplaceCatalogDouble) CancelChangeSet(i0 *marketplacecatalog.CancelChangeSetInput) (r0 *marketplacecatalog.CancelChangeSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelChangeSet", i0)
	r0, _ = returns[0].(*marketplacecatalog.CancelChangeSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MarketplaceCatalogDouble) CancelChangeSetRequest(i0 *marketplacecatalog.CancelChangeSetInput) (r0 *request.Request, r1 *marketplacecatalog.CancelChangeSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelChangeSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*marketplacecatalog.CancelChangeSetOutput)
	return
}

func (d *MarketplaceCatalogDouble) CancelChangeSetWithContext(i0 context.Context, i1 *marketplacecatalog.CancelChangeSetInput, i2 ...request.Option) (r0 *marketplacecatalog.CancelChangeSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelChangeSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*marketplacecatalog.CancelChangeSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MarketplaceCatalogDouble) fakeCancelChangeSetWithContext(ctx context.Context, in *marketplacecatalog.CancelChangeSetInput, _ ...request.Option) (*marketplacecatalog.CancelChangeSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelChangeSet cancelled", ctx.Err())
	default:
		return d.CancelChangeSet(in)
	}
}

func (d *MarketplaceCatalogDouble) DescribeChangeSet(i0 *marketplacecatalog.DescribeChangeSetInput) (r0 *marketplacecatalog.DescribeChangeSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeChangeSet", i0)
	r0, _ = returns[0].(*marketplacecatalog.DescribeChangeSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MarketplaceCatalogDouble) DescribeChangeSetRequest(i0 *marketplacecatalog.DescribeChangeSetInput) (r0 *request.Request, r1 *marketplacecatalog.DescribeChangeSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeChangeSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*marketplacecatalog.DescribeChangeSetOutput)
	return
}

func (d *MarketplaceCatalogDouble) DescribeChangeSetWithContext(i0 context.Context, i1 *marketplacecatalog.DescribeChangeSetInput, i2 ...request.Option) (r0 *marketplacecatalog.DescribeChangeSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeChangeSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*marketplacecatalog.DescribeChangeSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MarketplaceCatalogDouble) fakeDescribeChangeSetWithContext(ctx context.Context, in *marketplacecatalog.DescribeChangeSetInput, _ ...request.Option) (*marketplacecatalog.DescribeChangeSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeChangeSet cancelled", ctx.Err())
	default:
		return d.DescribeChangeSet(in)
	}
}

func (d *MarketplaceCatalogDouble) DescribeEntity(i0 *marketplacecatalog.DescribeEntityInput) (r0 *marketplacecatalog.DescribeEntityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEntity", i0)
	r0, _ = returns[0].(*marketplacecatalog.DescribeEntityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MarketplaceCatalogDouble) DescribeEntityRequest(i0 *marketplacecatalog.DescribeEntityInput) (r0 *request.Request, r1 *marketplacecatalog.DescribeEntityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEntityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*marketplacecatalog.DescribeEntityOutput)
	return
}

func (d *MarketplaceCatalogDouble) DescribeEntityWithContext(i0 context.Context, i1 *marketplacecatalog.DescribeEntityInput, i2 ...request.Option) (r0 *marketplacecatalog.DescribeEntityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEntityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*marketplacecatalog.DescribeEntityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MarketplaceCatalogDouble) fakeDescribeEntityWithContext(ctx context.Context, in *marketplacecatalog.DescribeEntityInput, _ ...request.Option) (*marketplacecatalog.DescribeEntityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEntity cancelled", ctx.Err())
	default:
		return d.DescribeEntity(in)
	}
}

func (d *MarketplaceCatalogDouble) ListChangeSets(i0 *marketplacecatalog.ListChangeSetsInput) (r0 *marketplacecatalog.ListChangeSetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListChangeSets", i0)
	r0, _ = returns[0].(*marketplacecatalog.ListChangeSetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MarketplaceCatalogDouble) ListChangeSetsPages(i0 *marketplacecatalog.ListChangeSetsInput, i1 func(*marketplacecatalog.ListChangeSetsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListChangeSetsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MarketplaceCatalogDouble) fakeListChangeSetsPages(in *marketplacecatalog.ListChangeSetsInput, pager func(*marketplacecatalog.ListChangeSetsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListChangeSets", paginators, in, pager)
}

func (d *MarketplaceCatalogDouble) ListChangeSetsPagesWithContext(i0 context.Context, i1 *marketplacecatalog.ListChangeSetsInput, i2 func(*marketplacecatalog.ListChangeSetsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListChangeSetsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MarketplaceCatalogDouble) fakeListChangeSetsPagesWithContext(ctx context.Context, in *marketplacecatalog.ListChangeSetsInput, pager func(*marketplacecatalog.ListChangeSetsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListChangeSets", paginators, ctx, in, pager, options...)
}

func (d *MarketplaceCatalogDouble) ListChangeSetsRequest(i0 *marketplacecatalog.ListChangeSetsInput) (r0 *request.Request, r1 *marketplacecatalog.ListChangeSetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListChangeSetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*marketplacecatalog.ListChangeSetsOutput)
	return
}

func (d *MarketplaceCatalogDouble) ListChangeSetsWithContext(i0 context.Context, i1 *marketplacecatalog.ListChangeSetsInput, i2 ...request.Option) (r0 *marketplacecatalog.ListChangeSetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListChangeSetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*marketplacecatalog.ListChangeSetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MarketplaceCatalogDouble) fakeListChangeSetsWithContext(ctx context.Context, in *marketplacecatalog.ListChangeSetsInput, _ ...request.Option) (*marketplacecatalog.ListChangeSetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListChangeSets cancelled", ctx.Err())
	default:
		return d.ListChangeSets(in)
	}
}

func (d *MarketplaceCatalogDouble) ListEntities(i0 *marketplacecatalog.ListEntitiesInput) (r0 *marketplacecatalog.ListEntitiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEntities", i0)
	r0, _ = returns[0].(*marketplacecatalog.ListEntitiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MarketplaceCatalogDouble) ListEntitiesPages(i0 *marketplacecatalog.ListEntitiesInput, i1 func(*marketplacecatalog.ListEntitiesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEntitiesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MarketplaceCatalogDouble) fakeListEntitiesPages(in *marketplacecatalog.ListEntitiesInput, pager func(*marketplacecatalog.ListEntitiesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListEntities", paginators, in, pager)
}

func (d *MarketplaceCatalogDouble) ListEntitiesPagesWithContext(i0 context.Context, i1 *marketplacecatalog.ListEntitiesInput, i2 func(*marketplacecatalog.ListEntitiesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEntitiesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MarketplaceCatalogDouble) fakeListEntitiesPagesWithContext(ctx context.Context, in *marketplacecatalog.ListEntitiesInput, pager func(*marketplacecatalog.ListEntitiesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListEntities", paginators, ctx, in, pager, options...)
}

func (d *MarketplaceCatalogDouble) ListEntitiesRequest(i0 *marketplacecatalog.ListEntitiesInput) (r0 *request.Request, r1 *marketplacecatalog.ListEntitiesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEntitiesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*marketplacecatalog.ListEntitiesOutput)
	return
}

func (d *MarketplaceCatalogDouble) ListEntitiesWithContext(i0 context.Context, i1 *marketplacecatalog.ListEntitiesInput, i2 ...request.Option) (r0 *marketplacecatalog.ListEntitiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEntitiesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*marketplacecatalog.ListEntitiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MarketplaceCatalogDouble) fakeListEntitiesWithContext(ctx context.Context, in *marketplacecatalog.ListEntitiesInput, _ ...request.Option) (*marketplacecatalog.ListEntitiesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListEntities cancelled", ctx.Err())
	default:
		return d.ListEntities(in)
	}
}

func (d *MarketplaceCatalogDouble) StartChangeSet(i0 *marketplacecatalog.StartChangeSetInput) (r0 *marketplacecatalog.StartChangeSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartChangeSet", i0)
	r0, _ = returns[0].(*marketplacecatalog.StartChangeSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MarketplaceCatalogDouble) StartChangeSetRequest(i0 *marketplacecatalog.StartChangeSetInput) (r0 *request.Request, r1 *marketplacecatalog.StartChangeSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartChangeSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*marketplacecatalog.StartChangeSetOutput)
	return
}

func (d *MarketplaceCatalogDouble) StartChangeSetWithContext(i0 context.Context, i1 *marketplacecatalog.StartChangeSetInput, i2 ...request.Option) (r0 *marketplacecatalog.StartChangeSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartChangeSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*marketplacecatalog.StartChangeSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MarketplaceCatalogDouble) fakeStartChangeSetWithContext(ctx context.Context, in *marketplacecatalog.StartChangeSetInput, _ ...request.Option) (*marketplacecatalog.StartChangeSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartChangeSet cancelled", ctx.Err())
	default:
		return d.StartChangeSet(in)
	}
}
