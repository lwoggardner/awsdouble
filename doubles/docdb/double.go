// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:12:23+11:00

// Package docdbdouble provides a TestDouble implementation of docdbiface.DocDBAPI
package docdbdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/docdb"
	"github.com/aws/aws-sdk-go/service/docdb/docdbiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// DocDBDouble is TestDouble for docdbiface.DocDBAPI
type DocDBDouble struct {
	docdbiface.DocDBAPI
	*awsdouble.AWSTestDouble
}

// Constructor for DocDBDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *DocDBDouble {
	result := &DocDBDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*docdbiface.DocDBAPI)(nil), configurators...)
	return result
}

func (d *DocDBDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *DocDBDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AddTagsToResourceWithContext":
		return m.Fake(d.fakeAddTagsToResourceWithContext)

	case "ApplyPendingMaintenanceActionWithContext":
		return m.Fake(d.fakeApplyPendingMaintenanceActionWithContext)

	case "CopyDBClusterParameterGroupWithContext":
		return m.Fake(d.fakeCopyDBClusterParameterGroupWithContext)

	case "CopyDBClusterSnapshotWithContext":
		return m.Fake(d.fakeCopyDBClusterSnapshotWithContext)

	case "CreateDBClusterParameterGroupWithContext":
		return m.Fake(d.fakeCreateDBClusterParameterGroupWithContext)

	case "CreateDBClusterSnapshotWithContext":
		return m.Fake(d.fakeCreateDBClusterSnapshotWithContext)

	case "CreateDBClusterWithContext":
		return m.Fake(d.fakeCreateDBClusterWithContext)

	case "CreateDBInstanceWithContext":
		return m.Fake(d.fakeCreateDBInstanceWithContext)

	case "CreateDBSubnetGroupWithContext":
		return m.Fake(d.fakeCreateDBSubnetGroupWithContext)

	case "DeleteDBClusterParameterGroupWithContext":
		return m.Fake(d.fakeDeleteDBClusterParameterGroupWithContext)

	case "DeleteDBClusterSnapshotWithContext":
		return m.Fake(d.fakeDeleteDBClusterSnapshotWithContext)

	case "DeleteDBClusterWithContext":
		return m.Fake(d.fakeDeleteDBClusterWithContext)

	case "DeleteDBInstanceWithContext":
		return m.Fake(d.fakeDeleteDBInstanceWithContext)

	case "DeleteDBSubnetGroupWithContext":
		return m.Fake(d.fakeDeleteDBSubnetGroupWithContext)

	case "DescribeCertificatesWithContext":
		return m.Fake(d.fakeDescribeCertificatesWithContext)

	case "DescribeDBClusterParameterGroupsWithContext":
		return m.Fake(d.fakeDescribeDBClusterParameterGroupsWithContext)

	case "DescribeDBClusterParametersWithContext":
		return m.Fake(d.fakeDescribeDBClusterParametersWithContext)

	case "DescribeDBClusterSnapshotAttributesWithContext":
		return m.Fake(d.fakeDescribeDBClusterSnapshotAttributesWithContext)

	case "DescribeDBClusterSnapshotsWithContext":
		return m.Fake(d.fakeDescribeDBClusterSnapshotsWithContext)

	case "DescribeDBClustersPages":
		return m.Fake(d.fakeDescribeDBClustersPages)

	case "DescribeDBClustersPagesWithContext":
		return m.Fake(d.fakeDescribeDBClustersPagesWithContext)

	case "DescribeDBClustersWithContext":
		return m.Fake(d.fakeDescribeDBClustersWithContext)

	case "DescribeDBEngineVersionsPages":
		return m.Fake(d.fakeDescribeDBEngineVersionsPages)

	case "DescribeDBEngineVersionsPagesWithContext":
		return m.Fake(d.fakeDescribeDBEngineVersionsPagesWithContext)

	case "DescribeDBEngineVersionsWithContext":
		return m.Fake(d.fakeDescribeDBEngineVersionsWithContext)

	case "DescribeDBInstancesPages":
		return m.Fake(d.fakeDescribeDBInstancesPages)

	case "DescribeDBInstancesPagesWithContext":
		return m.Fake(d.fakeDescribeDBInstancesPagesWithContext)

	case "DescribeDBInstancesWithContext":
		return m.Fake(d.fakeDescribeDBInstancesWithContext)

	case "DescribeDBSubnetGroupsPages":
		return m.Fake(d.fakeDescribeDBSubnetGroupsPages)

	case "DescribeDBSubnetGroupsPagesWithContext":
		return m.Fake(d.fakeDescribeDBSubnetGroupsPagesWithContext)

	case "DescribeDBSubnetGroupsWithContext":
		return m.Fake(d.fakeDescribeDBSubnetGroupsWithContext)

	case "DescribeEngineDefaultClusterParametersWithContext":
		return m.Fake(d.fakeDescribeEngineDefaultClusterParametersWithContext)

	case "DescribeEventCategoriesWithContext":
		return m.Fake(d.fakeDescribeEventCategoriesWithContext)

	case "DescribeEventsPages":
		return m.Fake(d.fakeDescribeEventsPages)

	case "DescribeEventsPagesWithContext":
		return m.Fake(d.fakeDescribeEventsPagesWithContext)

	case "DescribeEventsWithContext":
		return m.Fake(d.fakeDescribeEventsWithContext)

	case "DescribeOrderableDBInstanceOptionsPages":
		return m.Fake(d.fakeDescribeOrderableDBInstanceOptionsPages)

	case "DescribeOrderableDBInstanceOptionsPagesWithContext":
		return m.Fake(d.fakeDescribeOrderableDBInstanceOptionsPagesWithContext)

	case "DescribeOrderableDBInstanceOptionsWithContext":
		return m.Fake(d.fakeDescribeOrderableDBInstanceOptionsWithContext)

	case "DescribePendingMaintenanceActionsWithContext":
		return m.Fake(d.fakeDescribePendingMaintenanceActionsWithContext)

	case "FailoverDBClusterWithContext":
		return m.Fake(d.fakeFailoverDBClusterWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "ModifyDBClusterParameterGroupWithContext":
		return m.Fake(d.fakeModifyDBClusterParameterGroupWithContext)

	case "ModifyDBClusterSnapshotAttributeWithContext":
		return m.Fake(d.fakeModifyDBClusterSnapshotAttributeWithContext)

	case "ModifyDBClusterWithContext":
		return m.Fake(d.fakeModifyDBClusterWithContext)

	case "ModifyDBInstanceWithContext":
		return m.Fake(d.fakeModifyDBInstanceWithContext)

	case "ModifyDBSubnetGroupWithContext":
		return m.Fake(d.fakeModifyDBSubnetGroupWithContext)

	case "RebootDBInstanceWithContext":
		return m.Fake(d.fakeRebootDBInstanceWithContext)

	case "RemoveTagsFromResourceWithContext":
		return m.Fake(d.fakeRemoveTagsFromResourceWithContext)

	case "ResetDBClusterParameterGroupWithContext":
		return m.Fake(d.fakeResetDBClusterParameterGroupWithContext)

	case "RestoreDBClusterFromSnapshotWithContext":
		return m.Fake(d.fakeRestoreDBClusterFromSnapshotWithContext)

	case "RestoreDBClusterToPointInTimeWithContext":
		return m.Fake(d.fakeRestoreDBClusterToPointInTimeWithContext)

	case "StartDBClusterWithContext":
		return m.Fake(d.fakeStartDBClusterWithContext)

	case "StopDBClusterWithContext":
		return m.Fake(d.fakeStopDBClusterWithContext)

	case "WaitUntilDBInstanceAvailable":
		return m.Fake(d.fakeWaitUntilDBInstanceAvailable)

	case "WaitUntilDBInstanceAvailableWithContext":
		return m.Fake(d.fakeWaitUntilDBInstanceAvailableWithContext)

	case "WaitUntilDBInstanceDeleted":
		return m.Fake(d.fakeWaitUntilDBInstanceDeleted)

	case "WaitUntilDBInstanceDeletedWithContext":
		return m.Fake(d.fakeWaitUntilDBInstanceDeletedWithContext)

	default:
		return nil
	}
}

func (d *DocDBDouble) AddTagsToResource(i0 *docdb.AddTagsToResourceInput) (r0 *docdb.AddTagsToResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToResource", i0)
	r0, _ = returns[0].(*docdb.AddTagsToResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) AddTagsToResourceRequest(i0 *docdb.AddTagsToResourceInput) (r0 *request.Request, r1 *docdb.AddTagsToResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.AddTagsToResourceOutput)
	return
}

func (d *DocDBDouble) AddTagsToResourceWithContext(i0 context.Context, i1 *docdb.AddTagsToResourceInput, i2 ...request.Option) (r0 *docdb.AddTagsToResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.AddTagsToResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeAddTagsToResourceWithContext(ctx context.Context, in *docdb.AddTagsToResourceInput, _ ...request.Option) (*docdb.AddTagsToResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddTagsToResource cancelled", ctx.Err())
	default:
		return d.AddTagsToResource(in)
	}
}

func (d *DocDBDouble) ApplyPendingMaintenanceAction(i0 *docdb.ApplyPendingMaintenanceActionInput) (r0 *docdb.ApplyPendingMaintenanceActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ApplyPendingMaintenanceAction", i0)
	r0, _ = returns[0].(*docdb.ApplyPendingMaintenanceActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) ApplyPendingMaintenanceActionRequest(i0 *docdb.ApplyPendingMaintenanceActionInput) (r0 *request.Request, r1 *docdb.ApplyPendingMaintenanceActionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ApplyPendingMaintenanceActionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.ApplyPendingMaintenanceActionOutput)
	return
}

func (d *DocDBDouble) ApplyPendingMaintenanceActionWithContext(i0 context.Context, i1 *docdb.ApplyPendingMaintenanceActionInput, i2 ...request.Option) (r0 *docdb.ApplyPendingMaintenanceActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ApplyPendingMaintenanceActionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.ApplyPendingMaintenanceActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeApplyPendingMaintenanceActionWithContext(ctx context.Context, in *docdb.ApplyPendingMaintenanceActionInput, _ ...request.Option) (*docdb.ApplyPendingMaintenanceActionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ApplyPendingMaintenanceAction cancelled", ctx.Err())
	default:
		return d.ApplyPendingMaintenanceAction(in)
	}
}

func (d *DocDBDouble) CopyDBClusterParameterGroup(i0 *docdb.CopyDBClusterParameterGroupInput) (r0 *docdb.CopyDBClusterParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyDBClusterParameterGroup", i0)
	r0, _ = returns[0].(*docdb.CopyDBClusterParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) CopyDBClusterParameterGroupRequest(i0 *docdb.CopyDBClusterParameterGroupInput) (r0 *request.Request, r1 *docdb.CopyDBClusterParameterGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyDBClusterParameterGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.CopyDBClusterParameterGroupOutput)
	return
}

func (d *DocDBDouble) CopyDBClusterParameterGroupWithContext(i0 context.Context, i1 *docdb.CopyDBClusterParameterGroupInput, i2 ...request.Option) (r0 *docdb.CopyDBClusterParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyDBClusterParameterGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.CopyDBClusterParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeCopyDBClusterParameterGroupWithContext(ctx context.Context, in *docdb.CopyDBClusterParameterGroupInput, _ ...request.Option) (*docdb.CopyDBClusterParameterGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CopyDBClusterParameterGroup cancelled", ctx.Err())
	default:
		return d.CopyDBClusterParameterGroup(in)
	}
}

func (d *DocDBDouble) CopyDBClusterSnapshot(i0 *docdb.CopyDBClusterSnapshotInput) (r0 *docdb.CopyDBClusterSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyDBClusterSnapshot", i0)
	r0, _ = returns[0].(*docdb.CopyDBClusterSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) CopyDBClusterSnapshotRequest(i0 *docdb.CopyDBClusterSnapshotInput) (r0 *request.Request, r1 *docdb.CopyDBClusterSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyDBClusterSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.CopyDBClusterSnapshotOutput)
	return
}

func (d *DocDBDouble) CopyDBClusterSnapshotWithContext(i0 context.Context, i1 *docdb.CopyDBClusterSnapshotInput, i2 ...request.Option) (r0 *docdb.CopyDBClusterSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyDBClusterSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.CopyDBClusterSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeCopyDBClusterSnapshotWithContext(ctx context.Context, in *docdb.CopyDBClusterSnapshotInput, _ ...request.Option) (*docdb.CopyDBClusterSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CopyDBClusterSnapshot cancelled", ctx.Err())
	default:
		return d.CopyDBClusterSnapshot(in)
	}
}

func (d *DocDBDouble) CreateDBCluster(i0 *docdb.CreateDBClusterInput) (r0 *docdb.CreateDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBCluster", i0)
	r0, _ = returns[0].(*docdb.CreateDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) CreateDBClusterParameterGroup(i0 *docdb.CreateDBClusterParameterGroupInput) (r0 *docdb.CreateDBClusterParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBClusterParameterGroup", i0)
	r0, _ = returns[0].(*docdb.CreateDBClusterParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) CreateDBClusterParameterGroupRequest(i0 *docdb.CreateDBClusterParameterGroupInput) (r0 *request.Request, r1 *docdb.CreateDBClusterParameterGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBClusterParameterGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.CreateDBClusterParameterGroupOutput)
	return
}

func (d *DocDBDouble) CreateDBClusterParameterGroupWithContext(i0 context.Context, i1 *docdb.CreateDBClusterParameterGroupInput, i2 ...request.Option) (r0 *docdb.CreateDBClusterParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBClusterParameterGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.CreateDBClusterParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeCreateDBClusterParameterGroupWithContext(ctx context.Context, in *docdb.CreateDBClusterParameterGroupInput, _ ...request.Option) (*docdb.CreateDBClusterParameterGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDBClusterParameterGroup cancelled", ctx.Err())
	default:
		return d.CreateDBClusterParameterGroup(in)
	}
}

func (d *DocDBDouble) CreateDBClusterRequest(i0 *docdb.CreateDBClusterInput) (r0 *request.Request, r1 *docdb.CreateDBClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.CreateDBClusterOutput)
	return
}

func (d *DocDBDouble) CreateDBClusterSnapshot(i0 *docdb.CreateDBClusterSnapshotInput) (r0 *docdb.CreateDBClusterSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBClusterSnapshot", i0)
	r0, _ = returns[0].(*docdb.CreateDBClusterSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) CreateDBClusterSnapshotRequest(i0 *docdb.CreateDBClusterSnapshotInput) (r0 *request.Request, r1 *docdb.CreateDBClusterSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBClusterSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.CreateDBClusterSnapshotOutput)
	return
}

func (d *DocDBDouble) CreateDBClusterSnapshotWithContext(i0 context.Context, i1 *docdb.CreateDBClusterSnapshotInput, i2 ...request.Option) (r0 *docdb.CreateDBClusterSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBClusterSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.CreateDBClusterSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeCreateDBClusterSnapshotWithContext(ctx context.Context, in *docdb.CreateDBClusterSnapshotInput, _ ...request.Option) (*docdb.CreateDBClusterSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDBClusterSnapshot cancelled", ctx.Err())
	default:
		return d.CreateDBClusterSnapshot(in)
	}
}

func (d *DocDBDouble) CreateDBClusterWithContext(i0 context.Context, i1 *docdb.CreateDBClusterInput, i2 ...request.Option) (r0 *docdb.CreateDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.CreateDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeCreateDBClusterWithContext(ctx context.Context, in *docdb.CreateDBClusterInput, _ ...request.Option) (*docdb.CreateDBClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDBCluster cancelled", ctx.Err())
	default:
		return d.CreateDBCluster(in)
	}
}

func (d *DocDBDouble) CreateDBInstance(i0 *docdb.CreateDBInstanceInput) (r0 *docdb.CreateDBInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBInstance", i0)
	r0, _ = returns[0].(*docdb.CreateDBInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) CreateDBInstanceRequest(i0 *docdb.CreateDBInstanceInput) (r0 *request.Request, r1 *docdb.CreateDBInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.CreateDBInstanceOutput)
	return
}

func (d *DocDBDouble) CreateDBInstanceWithContext(i0 context.Context, i1 *docdb.CreateDBInstanceInput, i2 ...request.Option) (r0 *docdb.CreateDBInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.CreateDBInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeCreateDBInstanceWithContext(ctx context.Context, in *docdb.CreateDBInstanceInput, _ ...request.Option) (*docdb.CreateDBInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDBInstance cancelled", ctx.Err())
	default:
		return d.CreateDBInstance(in)
	}
}

func (d *DocDBDouble) CreateDBSubnetGroup(i0 *docdb.CreateDBSubnetGroupInput) (r0 *docdb.CreateDBSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBSubnetGroup", i0)
	r0, _ = returns[0].(*docdb.CreateDBSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) CreateDBSubnetGroupRequest(i0 *docdb.CreateDBSubnetGroupInput) (r0 *request.Request, r1 *docdb.CreateDBSubnetGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBSubnetGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.CreateDBSubnetGroupOutput)
	return
}

func (d *DocDBDouble) CreateDBSubnetGroupWithContext(i0 context.Context, i1 *docdb.CreateDBSubnetGroupInput, i2 ...request.Option) (r0 *docdb.CreateDBSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBSubnetGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.CreateDBSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeCreateDBSubnetGroupWithContext(ctx context.Context, in *docdb.CreateDBSubnetGroupInput, _ ...request.Option) (*docdb.CreateDBSubnetGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDBSubnetGroup cancelled", ctx.Err())
	default:
		return d.CreateDBSubnetGroup(in)
	}
}

func (d *DocDBDouble) DeleteDBCluster(i0 *docdb.DeleteDBClusterInput) (r0 *docdb.DeleteDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBCluster", i0)
	r0, _ = returns[0].(*docdb.DeleteDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) DeleteDBClusterParameterGroup(i0 *docdb.DeleteDBClusterParameterGroupInput) (r0 *docdb.DeleteDBClusterParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBClusterParameterGroup", i0)
	r0, _ = returns[0].(*docdb.DeleteDBClusterParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) DeleteDBClusterParameterGroupRequest(i0 *docdb.DeleteDBClusterParameterGroupInput) (r0 *request.Request, r1 *docdb.DeleteDBClusterParameterGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBClusterParameterGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.DeleteDBClusterParameterGroupOutput)
	return
}

func (d *DocDBDouble) DeleteDBClusterParameterGroupWithContext(i0 context.Context, i1 *docdb.DeleteDBClusterParameterGroupInput, i2 ...request.Option) (r0 *docdb.DeleteDBClusterParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBClusterParameterGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.DeleteDBClusterParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeDeleteDBClusterParameterGroupWithContext(ctx context.Context, in *docdb.DeleteDBClusterParameterGroupInput, _ ...request.Option) (*docdb.DeleteDBClusterParameterGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDBClusterParameterGroup cancelled", ctx.Err())
	default:
		return d.DeleteDBClusterParameterGroup(in)
	}
}

func (d *DocDBDouble) DeleteDBClusterRequest(i0 *docdb.DeleteDBClusterInput) (r0 *request.Request, r1 *docdb.DeleteDBClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.DeleteDBClusterOutput)
	return
}

func (d *DocDBDouble) DeleteDBClusterSnapshot(i0 *docdb.DeleteDBClusterSnapshotInput) (r0 *docdb.DeleteDBClusterSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBClusterSnapshot", i0)
	r0, _ = returns[0].(*docdb.DeleteDBClusterSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) DeleteDBClusterSnapshotRequest(i0 *docdb.DeleteDBClusterSnapshotInput) (r0 *request.Request, r1 *docdb.DeleteDBClusterSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBClusterSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.DeleteDBClusterSnapshotOutput)
	return
}

func (d *DocDBDouble) DeleteDBClusterSnapshotWithContext(i0 context.Context, i1 *docdb.DeleteDBClusterSnapshotInput, i2 ...request.Option) (r0 *docdb.DeleteDBClusterSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBClusterSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.DeleteDBClusterSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeDeleteDBClusterSnapshotWithContext(ctx context.Context, in *docdb.DeleteDBClusterSnapshotInput, _ ...request.Option) (*docdb.DeleteDBClusterSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDBClusterSnapshot cancelled", ctx.Err())
	default:
		return d.DeleteDBClusterSnapshot(in)
	}
}

func (d *DocDBDouble) DeleteDBClusterWithContext(i0 context.Context, i1 *docdb.DeleteDBClusterInput, i2 ...request.Option) (r0 *docdb.DeleteDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.DeleteDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeDeleteDBClusterWithContext(ctx context.Context, in *docdb.DeleteDBClusterInput, _ ...request.Option) (*docdb.DeleteDBClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDBCluster cancelled", ctx.Err())
	default:
		return d.DeleteDBCluster(in)
	}
}

func (d *DocDBDouble) DeleteDBInstance(i0 *docdb.DeleteDBInstanceInput) (r0 *docdb.DeleteDBInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBInstance", i0)
	r0, _ = returns[0].(*docdb.DeleteDBInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) DeleteDBInstanceRequest(i0 *docdb.DeleteDBInstanceInput) (r0 *request.Request, r1 *docdb.DeleteDBInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.DeleteDBInstanceOutput)
	return
}

func (d *DocDBDouble) DeleteDBInstanceWithContext(i0 context.Context, i1 *docdb.DeleteDBInstanceInput, i2 ...request.Option) (r0 *docdb.DeleteDBInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.DeleteDBInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeDeleteDBInstanceWithContext(ctx context.Context, in *docdb.DeleteDBInstanceInput, _ ...request.Option) (*docdb.DeleteDBInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDBInstance cancelled", ctx.Err())
	default:
		return d.DeleteDBInstance(in)
	}
}

func (d *DocDBDouble) DeleteDBSubnetGroup(i0 *docdb.DeleteDBSubnetGroupInput) (r0 *docdb.DeleteDBSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBSubnetGroup", i0)
	r0, _ = returns[0].(*docdb.DeleteDBSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) DeleteDBSubnetGroupRequest(i0 *docdb.DeleteDBSubnetGroupInput) (r0 *request.Request, r1 *docdb.DeleteDBSubnetGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBSubnetGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.DeleteDBSubnetGroupOutput)
	return
}

func (d *DocDBDouble) DeleteDBSubnetGroupWithContext(i0 context.Context, i1 *docdb.DeleteDBSubnetGroupInput, i2 ...request.Option) (r0 *docdb.DeleteDBSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBSubnetGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.DeleteDBSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeDeleteDBSubnetGroupWithContext(ctx context.Context, in *docdb.DeleteDBSubnetGroupInput, _ ...request.Option) (*docdb.DeleteDBSubnetGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDBSubnetGroup cancelled", ctx.Err())
	default:
		return d.DeleteDBSubnetGroup(in)
	}
}

func (d *DocDBDouble) DescribeCertificates(i0 *docdb.DescribeCertificatesInput) (r0 *docdb.DescribeCertificatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCertificates", i0)
	r0, _ = returns[0].(*docdb.DescribeCertificatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) DescribeCertificatesRequest(i0 *docdb.DescribeCertificatesInput) (r0 *request.Request, r1 *docdb.DescribeCertificatesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCertificatesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.DescribeCertificatesOutput)
	return
}

func (d *DocDBDouble) DescribeCertificatesWithContext(i0 context.Context, i1 *docdb.DescribeCertificatesInput, i2 ...request.Option) (r0 *docdb.DescribeCertificatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCertificatesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.DescribeCertificatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeDescribeCertificatesWithContext(ctx context.Context, in *docdb.DescribeCertificatesInput, _ ...request.Option) (*docdb.DescribeCertificatesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeCertificates cancelled", ctx.Err())
	default:
		return d.DescribeCertificates(in)
	}
}

func (d *DocDBDouble) DescribeDBClusterParameterGroups(i0 *docdb.DescribeDBClusterParameterGroupsInput) (r0 *docdb.DescribeDBClusterParameterGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterParameterGroups", i0)
	r0, _ = returns[0].(*docdb.DescribeDBClusterParameterGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) DescribeDBClusterParameterGroupsRequest(i0 *docdb.DescribeDBClusterParameterGroupsInput) (r0 *request.Request, r1 *docdb.DescribeDBClusterParameterGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterParameterGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.DescribeDBClusterParameterGroupsOutput)
	return
}

func (d *DocDBDouble) DescribeDBClusterParameterGroupsWithContext(i0 context.Context, i1 *docdb.DescribeDBClusterParameterGroupsInput, i2 ...request.Option) (r0 *docdb.DescribeDBClusterParameterGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterParameterGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.DescribeDBClusterParameterGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeDescribeDBClusterParameterGroupsWithContext(ctx context.Context, in *docdb.DescribeDBClusterParameterGroupsInput, _ ...request.Option) (*docdb.DescribeDBClusterParameterGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBClusterParameterGroups cancelled", ctx.Err())
	default:
		return d.DescribeDBClusterParameterGroups(in)
	}
}

func (d *DocDBDouble) DescribeDBClusterParameters(i0 *docdb.DescribeDBClusterParametersInput) (r0 *docdb.DescribeDBClusterParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterParameters", i0)
	r0, _ = returns[0].(*docdb.DescribeDBClusterParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) DescribeDBClusterParametersRequest(i0 *docdb.DescribeDBClusterParametersInput) (r0 *request.Request, r1 *docdb.DescribeDBClusterParametersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterParametersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.DescribeDBClusterParametersOutput)
	return
}

func (d *DocDBDouble) DescribeDBClusterParametersWithContext(i0 context.Context, i1 *docdb.DescribeDBClusterParametersInput, i2 ...request.Option) (r0 *docdb.DescribeDBClusterParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterParametersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.DescribeDBClusterParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeDescribeDBClusterParametersWithContext(ctx context.Context, in *docdb.DescribeDBClusterParametersInput, _ ...request.Option) (*docdb.DescribeDBClusterParametersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBClusterParameters cancelled", ctx.Err())
	default:
		return d.DescribeDBClusterParameters(in)
	}
}

func (d *DocDBDouble) DescribeDBClusterSnapshotAttributes(i0 *docdb.DescribeDBClusterSnapshotAttributesInput) (r0 *docdb.DescribeDBClusterSnapshotAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterSnapshotAttributes", i0)
	r0, _ = returns[0].(*docdb.DescribeDBClusterSnapshotAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) DescribeDBClusterSnapshotAttributesRequest(i0 *docdb.DescribeDBClusterSnapshotAttributesInput) (r0 *request.Request, r1 *docdb.DescribeDBClusterSnapshotAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterSnapshotAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.DescribeDBClusterSnapshotAttributesOutput)
	return
}

func (d *DocDBDouble) DescribeDBClusterSnapshotAttributesWithContext(i0 context.Context, i1 *docdb.DescribeDBClusterSnapshotAttributesInput, i2 ...request.Option) (r0 *docdb.DescribeDBClusterSnapshotAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterSnapshotAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.DescribeDBClusterSnapshotAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeDescribeDBClusterSnapshotAttributesWithContext(ctx context.Context, in *docdb.DescribeDBClusterSnapshotAttributesInput, _ ...request.Option) (*docdb.DescribeDBClusterSnapshotAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBClusterSnapshotAttributes cancelled", ctx.Err())
	default:
		return d.DescribeDBClusterSnapshotAttributes(in)
	}
}

func (d *DocDBDouble) DescribeDBClusterSnapshots(i0 *docdb.DescribeDBClusterSnapshotsInput) (r0 *docdb.DescribeDBClusterSnapshotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterSnapshots", i0)
	r0, _ = returns[0].(*docdb.DescribeDBClusterSnapshotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) DescribeDBClusterSnapshotsRequest(i0 *docdb.DescribeDBClusterSnapshotsInput) (r0 *request.Request, r1 *docdb.DescribeDBClusterSnapshotsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterSnapshotsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.DescribeDBClusterSnapshotsOutput)
	return
}

func (d *DocDBDouble) DescribeDBClusterSnapshotsWithContext(i0 context.Context, i1 *docdb.DescribeDBClusterSnapshotsInput, i2 ...request.Option) (r0 *docdb.DescribeDBClusterSnapshotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterSnapshotsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.DescribeDBClusterSnapshotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeDescribeDBClusterSnapshotsWithContext(ctx context.Context, in *docdb.DescribeDBClusterSnapshotsInput, _ ...request.Option) (*docdb.DescribeDBClusterSnapshotsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBClusterSnapshots cancelled", ctx.Err())
	default:
		return d.DescribeDBClusterSnapshots(in)
	}
}

func (d *DocDBDouble) DescribeDBClusters(i0 *docdb.DescribeDBClustersInput) (r0 *docdb.DescribeDBClustersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusters", i0)
	r0, _ = returns[0].(*docdb.DescribeDBClustersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) DescribeDBClustersPages(i0 *docdb.DescribeDBClustersInput, i1 func(*docdb.DescribeDBClustersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClustersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DocDBDouble) fakeDescribeDBClustersPages(in *docdb.DescribeDBClustersInput, pager func(*docdb.DescribeDBClustersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeDBClusters", paginators, in, pager)
}

func (d *DocDBDouble) DescribeDBClustersPagesWithContext(i0 context.Context, i1 *docdb.DescribeDBClustersInput, i2 func(*docdb.DescribeDBClustersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClustersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DocDBDouble) fakeDescribeDBClustersPagesWithContext(ctx context.Context, in *docdb.DescribeDBClustersInput, pager func(*docdb.DescribeDBClustersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeDBClusters", paginators, ctx, in, pager, options...)
}

func (d *DocDBDouble) DescribeDBClustersRequest(i0 *docdb.DescribeDBClustersInput) (r0 *request.Request, r1 *docdb.DescribeDBClustersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClustersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.DescribeDBClustersOutput)
	return
}

func (d *DocDBDouble) DescribeDBClustersWithContext(i0 context.Context, i1 *docdb.DescribeDBClustersInput, i2 ...request.Option) (r0 *docdb.DescribeDBClustersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClustersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.DescribeDBClustersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeDescribeDBClustersWithContext(ctx context.Context, in *docdb.DescribeDBClustersInput, _ ...request.Option) (*docdb.DescribeDBClustersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBClusters cancelled", ctx.Err())
	default:
		return d.DescribeDBClusters(in)
	}
}

func (d *DocDBDouble) DescribeDBEngineVersions(i0 *docdb.DescribeDBEngineVersionsInput) (r0 *docdb.DescribeDBEngineVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBEngineVersions", i0)
	r0, _ = returns[0].(*docdb.DescribeDBEngineVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) DescribeDBEngineVersionsPages(i0 *docdb.DescribeDBEngineVersionsInput, i1 func(*docdb.DescribeDBEngineVersionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBEngineVersionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DocDBDouble) fakeDescribeDBEngineVersionsPages(in *docdb.DescribeDBEngineVersionsInput, pager func(*docdb.DescribeDBEngineVersionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeDBEngineVersions", paginators, in, pager)
}

func (d *DocDBDouble) DescribeDBEngineVersionsPagesWithContext(i0 context.Context, i1 *docdb.DescribeDBEngineVersionsInput, i2 func(*docdb.DescribeDBEngineVersionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBEngineVersionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DocDBDouble) fakeDescribeDBEngineVersionsPagesWithContext(ctx context.Context, in *docdb.DescribeDBEngineVersionsInput, pager func(*docdb.DescribeDBEngineVersionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeDBEngineVersions", paginators, ctx, in, pager, options...)
}

func (d *DocDBDouble) DescribeDBEngineVersionsRequest(i0 *docdb.DescribeDBEngineVersionsInput) (r0 *request.Request, r1 *docdb.DescribeDBEngineVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBEngineVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.DescribeDBEngineVersionsOutput)
	return
}

func (d *DocDBDouble) DescribeDBEngineVersionsWithContext(i0 context.Context, i1 *docdb.DescribeDBEngineVersionsInput, i2 ...request.Option) (r0 *docdb.DescribeDBEngineVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBEngineVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.DescribeDBEngineVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeDescribeDBEngineVersionsWithContext(ctx context.Context, in *docdb.DescribeDBEngineVersionsInput, _ ...request.Option) (*docdb.DescribeDBEngineVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBEngineVersions cancelled", ctx.Err())
	default:
		return d.DescribeDBEngineVersions(in)
	}
}

func (d *DocDBDouble) DescribeDBInstances(i0 *docdb.DescribeDBInstancesInput) (r0 *docdb.DescribeDBInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBInstances", i0)
	r0, _ = returns[0].(*docdb.DescribeDBInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) DescribeDBInstancesPages(i0 *docdb.DescribeDBInstancesInput, i1 func(*docdb.DescribeDBInstancesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBInstancesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DocDBDouble) fakeDescribeDBInstancesPages(in *docdb.DescribeDBInstancesInput, pager func(*docdb.DescribeDBInstancesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeDBInstances", paginators, in, pager)
}

func (d *DocDBDouble) DescribeDBInstancesPagesWithContext(i0 context.Context, i1 *docdb.DescribeDBInstancesInput, i2 func(*docdb.DescribeDBInstancesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBInstancesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DocDBDouble) fakeDescribeDBInstancesPagesWithContext(ctx context.Context, in *docdb.DescribeDBInstancesInput, pager func(*docdb.DescribeDBInstancesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeDBInstances", paginators, ctx, in, pager, options...)
}

func (d *DocDBDouble) DescribeDBInstancesRequest(i0 *docdb.DescribeDBInstancesInput) (r0 *request.Request, r1 *docdb.DescribeDBInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.DescribeDBInstancesOutput)
	return
}

func (d *DocDBDouble) DescribeDBInstancesWithContext(i0 context.Context, i1 *docdb.DescribeDBInstancesInput, i2 ...request.Option) (r0 *docdb.DescribeDBInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.DescribeDBInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeDescribeDBInstancesWithContext(ctx context.Context, in *docdb.DescribeDBInstancesInput, _ ...request.Option) (*docdb.DescribeDBInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBInstances cancelled", ctx.Err())
	default:
		return d.DescribeDBInstances(in)
	}
}

func (d *DocDBDouble) DescribeDBSubnetGroups(i0 *docdb.DescribeDBSubnetGroupsInput) (r0 *docdb.DescribeDBSubnetGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBSubnetGroups", i0)
	r0, _ = returns[0].(*docdb.DescribeDBSubnetGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) DescribeDBSubnetGroupsPages(i0 *docdb.DescribeDBSubnetGroupsInput, i1 func(*docdb.DescribeDBSubnetGroupsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBSubnetGroupsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DocDBDouble) fakeDescribeDBSubnetGroupsPages(in *docdb.DescribeDBSubnetGroupsInput, pager func(*docdb.DescribeDBSubnetGroupsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeDBSubnetGroups", paginators, in, pager)
}

func (d *DocDBDouble) DescribeDBSubnetGroupsPagesWithContext(i0 context.Context, i1 *docdb.DescribeDBSubnetGroupsInput, i2 func(*docdb.DescribeDBSubnetGroupsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBSubnetGroupsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DocDBDouble) fakeDescribeDBSubnetGroupsPagesWithContext(ctx context.Context, in *docdb.DescribeDBSubnetGroupsInput, pager func(*docdb.DescribeDBSubnetGroupsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeDBSubnetGroups", paginators, ctx, in, pager, options...)
}

func (d *DocDBDouble) DescribeDBSubnetGroupsRequest(i0 *docdb.DescribeDBSubnetGroupsInput) (r0 *request.Request, r1 *docdb.DescribeDBSubnetGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBSubnetGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.DescribeDBSubnetGroupsOutput)
	return
}

func (d *DocDBDouble) DescribeDBSubnetGroupsWithContext(i0 context.Context, i1 *docdb.DescribeDBSubnetGroupsInput, i2 ...request.Option) (r0 *docdb.DescribeDBSubnetGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBSubnetGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.DescribeDBSubnetGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeDescribeDBSubnetGroupsWithContext(ctx context.Context, in *docdb.DescribeDBSubnetGroupsInput, _ ...request.Option) (*docdb.DescribeDBSubnetGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBSubnetGroups cancelled", ctx.Err())
	default:
		return d.DescribeDBSubnetGroups(in)
	}
}

func (d *DocDBDouble) DescribeEngineDefaultClusterParameters(i0 *docdb.DescribeEngineDefaultClusterParametersInput) (r0 *docdb.DescribeEngineDefaultClusterParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEngineDefaultClusterParameters", i0)
	r0, _ = returns[0].(*docdb.DescribeEngineDefaultClusterParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) DescribeEngineDefaultClusterParametersRequest(i0 *docdb.DescribeEngineDefaultClusterParametersInput) (r0 *request.Request, r1 *docdb.DescribeEngineDefaultClusterParametersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEngineDefaultClusterParametersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.DescribeEngineDefaultClusterParametersOutput)
	return
}

func (d *DocDBDouble) DescribeEngineDefaultClusterParametersWithContext(i0 context.Context, i1 *docdb.DescribeEngineDefaultClusterParametersInput, i2 ...request.Option) (r0 *docdb.DescribeEngineDefaultClusterParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEngineDefaultClusterParametersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.DescribeEngineDefaultClusterParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeDescribeEngineDefaultClusterParametersWithContext(ctx context.Context, in *docdb.DescribeEngineDefaultClusterParametersInput, _ ...request.Option) (*docdb.DescribeEngineDefaultClusterParametersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEngineDefaultClusterParameters cancelled", ctx.Err())
	default:
		return d.DescribeEngineDefaultClusterParameters(in)
	}
}

func (d *DocDBDouble) DescribeEventCategories(i0 *docdb.DescribeEventCategoriesInput) (r0 *docdb.DescribeEventCategoriesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventCategories", i0)
	r0, _ = returns[0].(*docdb.DescribeEventCategoriesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) DescribeEventCategoriesRequest(i0 *docdb.DescribeEventCategoriesInput) (r0 *request.Request, r1 *docdb.DescribeEventCategoriesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventCategoriesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.DescribeEventCategoriesOutput)
	return
}

func (d *DocDBDouble) DescribeEventCategoriesWithContext(i0 context.Context, i1 *docdb.DescribeEventCategoriesInput, i2 ...request.Option) (r0 *docdb.DescribeEventCategoriesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventCategoriesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.DescribeEventCategoriesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeDescribeEventCategoriesWithContext(ctx context.Context, in *docdb.DescribeEventCategoriesInput, _ ...request.Option) (*docdb.DescribeEventCategoriesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEventCategories cancelled", ctx.Err())
	default:
		return d.DescribeEventCategories(in)
	}
}

func (d *DocDBDouble) DescribeEvents(i0 *docdb.DescribeEventsInput) (r0 *docdb.DescribeEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEvents", i0)
	r0, _ = returns[0].(*docdb.DescribeEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) DescribeEventsPages(i0 *docdb.DescribeEventsInput, i1 func(*docdb.DescribeEventsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DocDBDouble) fakeDescribeEventsPages(in *docdb.DescribeEventsInput, pager func(*docdb.DescribeEventsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeEvents", paginators, in, pager)
}

func (d *DocDBDouble) DescribeEventsPagesWithContext(i0 context.Context, i1 *docdb.DescribeEventsInput, i2 func(*docdb.DescribeEventsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DocDBDouble) fakeDescribeEventsPagesWithContext(ctx context.Context, in *docdb.DescribeEventsInput, pager func(*docdb.DescribeEventsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeEvents", paginators, ctx, in, pager, options...)
}

func (d *DocDBDouble) DescribeEventsRequest(i0 *docdb.DescribeEventsInput) (r0 *request.Request, r1 *docdb.DescribeEventsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.DescribeEventsOutput)
	return
}

func (d *DocDBDouble) DescribeEventsWithContext(i0 context.Context, i1 *docdb.DescribeEventsInput, i2 ...request.Option) (r0 *docdb.DescribeEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.DescribeEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeDescribeEventsWithContext(ctx context.Context, in *docdb.DescribeEventsInput, _ ...request.Option) (*docdb.DescribeEventsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEvents cancelled", ctx.Err())
	default:
		return d.DescribeEvents(in)
	}
}

func (d *DocDBDouble) DescribeOrderableDBInstanceOptions(i0 *docdb.DescribeOrderableDBInstanceOptionsInput) (r0 *docdb.DescribeOrderableDBInstanceOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrderableDBInstanceOptions", i0)
	r0, _ = returns[0].(*docdb.DescribeOrderableDBInstanceOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) DescribeOrderableDBInstanceOptionsPages(i0 *docdb.DescribeOrderableDBInstanceOptionsInput, i1 func(*docdb.DescribeOrderableDBInstanceOptionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrderableDBInstanceOptionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DocDBDouble) fakeDescribeOrderableDBInstanceOptionsPages(in *docdb.DescribeOrderableDBInstanceOptionsInput, pager func(*docdb.DescribeOrderableDBInstanceOptionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeOrderableDBInstanceOptions", paginators, in, pager)
}

func (d *DocDBDouble) DescribeOrderableDBInstanceOptionsPagesWithContext(i0 context.Context, i1 *docdb.DescribeOrderableDBInstanceOptionsInput, i2 func(*docdb.DescribeOrderableDBInstanceOptionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrderableDBInstanceOptionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DocDBDouble) fakeDescribeOrderableDBInstanceOptionsPagesWithContext(ctx context.Context, in *docdb.DescribeOrderableDBInstanceOptionsInput, pager func(*docdb.DescribeOrderableDBInstanceOptionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeOrderableDBInstanceOptions", paginators, ctx, in, pager, options...)
}

func (d *DocDBDouble) DescribeOrderableDBInstanceOptionsRequest(i0 *docdb.DescribeOrderableDBInstanceOptionsInput) (r0 *request.Request, r1 *docdb.DescribeOrderableDBInstanceOptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrderableDBInstanceOptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.DescribeOrderableDBInstanceOptionsOutput)
	return
}

func (d *DocDBDouble) DescribeOrderableDBInstanceOptionsWithContext(i0 context.Context, i1 *docdb.DescribeOrderableDBInstanceOptionsInput, i2 ...request.Option) (r0 *docdb.DescribeOrderableDBInstanceOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrderableDBInstanceOptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.DescribeOrderableDBInstanceOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeDescribeOrderableDBInstanceOptionsWithContext(ctx context.Context, in *docdb.DescribeOrderableDBInstanceOptionsInput, _ ...request.Option) (*docdb.DescribeOrderableDBInstanceOptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeOrderableDBInstanceOptions cancelled", ctx.Err())
	default:
		return d.DescribeOrderableDBInstanceOptions(in)
	}
}

func (d *DocDBDouble) DescribePendingMaintenanceActions(i0 *docdb.DescribePendingMaintenanceActionsInput) (r0 *docdb.DescribePendingMaintenanceActionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePendingMaintenanceActions", i0)
	r0, _ = returns[0].(*docdb.DescribePendingMaintenanceActionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) DescribePendingMaintenanceActionsRequest(i0 *docdb.DescribePendingMaintenanceActionsInput) (r0 *request.Request, r1 *docdb.DescribePendingMaintenanceActionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePendingMaintenanceActionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.DescribePendingMaintenanceActionsOutput)
	return
}

func (d *DocDBDouble) DescribePendingMaintenanceActionsWithContext(i0 context.Context, i1 *docdb.DescribePendingMaintenanceActionsInput, i2 ...request.Option) (r0 *docdb.DescribePendingMaintenanceActionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePendingMaintenanceActionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.DescribePendingMaintenanceActionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeDescribePendingMaintenanceActionsWithContext(ctx context.Context, in *docdb.DescribePendingMaintenanceActionsInput, _ ...request.Option) (*docdb.DescribePendingMaintenanceActionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribePendingMaintenanceActions cancelled", ctx.Err())
	default:
		return d.DescribePendingMaintenanceActions(in)
	}
}

func (d *DocDBDouble) FailoverDBCluster(i0 *docdb.FailoverDBClusterInput) (r0 *docdb.FailoverDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("FailoverDBCluster", i0)
	r0, _ = returns[0].(*docdb.FailoverDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) FailoverDBClusterRequest(i0 *docdb.FailoverDBClusterInput) (r0 *request.Request, r1 *docdb.FailoverDBClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("FailoverDBClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.FailoverDBClusterOutput)
	return
}

func (d *DocDBDouble) FailoverDBClusterWithContext(i0 context.Context, i1 *docdb.FailoverDBClusterInput, i2 ...request.Option) (r0 *docdb.FailoverDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("FailoverDBClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.FailoverDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeFailoverDBClusterWithContext(ctx context.Context, in *docdb.FailoverDBClusterInput, _ ...request.Option) (*docdb.FailoverDBClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "FailoverDBCluster cancelled", ctx.Err())
	default:
		return d.FailoverDBCluster(in)
	}
}

func (d *DocDBDouble) ListTagsForResource(i0 *docdb.ListTagsForResourceInput) (r0 *docdb.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*docdb.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) ListTagsForResourceRequest(i0 *docdb.ListTagsForResourceInput) (r0 *request.Request, r1 *docdb.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.ListTagsForResourceOutput)
	return
}

func (d *DocDBDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *docdb.ListTagsForResourceInput, i2 ...request.Option) (r0 *docdb.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *docdb.ListTagsForResourceInput, _ ...request.Option) (*docdb.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *DocDBDouble) ModifyDBCluster(i0 *docdb.ModifyDBClusterInput) (r0 *docdb.ModifyDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBCluster", i0)
	r0, _ = returns[0].(*docdb.ModifyDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) ModifyDBClusterParameterGroup(i0 *docdb.ModifyDBClusterParameterGroupInput) (r0 *docdb.ModifyDBClusterParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBClusterParameterGroup", i0)
	r0, _ = returns[0].(*docdb.ModifyDBClusterParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) ModifyDBClusterParameterGroupRequest(i0 *docdb.ModifyDBClusterParameterGroupInput) (r0 *request.Request, r1 *docdb.ModifyDBClusterParameterGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBClusterParameterGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.ModifyDBClusterParameterGroupOutput)
	return
}

func (d *DocDBDouble) ModifyDBClusterParameterGroupWithContext(i0 context.Context, i1 *docdb.ModifyDBClusterParameterGroupInput, i2 ...request.Option) (r0 *docdb.ModifyDBClusterParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBClusterParameterGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.ModifyDBClusterParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeModifyDBClusterParameterGroupWithContext(ctx context.Context, in *docdb.ModifyDBClusterParameterGroupInput, _ ...request.Option) (*docdb.ModifyDBClusterParameterGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyDBClusterParameterGroup cancelled", ctx.Err())
	default:
		return d.ModifyDBClusterParameterGroup(in)
	}
}

func (d *DocDBDouble) ModifyDBClusterRequest(i0 *docdb.ModifyDBClusterInput) (r0 *request.Request, r1 *docdb.ModifyDBClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.ModifyDBClusterOutput)
	return
}

func (d *DocDBDouble) ModifyDBClusterSnapshotAttribute(i0 *docdb.ModifyDBClusterSnapshotAttributeInput) (r0 *docdb.ModifyDBClusterSnapshotAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBClusterSnapshotAttribute", i0)
	r0, _ = returns[0].(*docdb.ModifyDBClusterSnapshotAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) ModifyDBClusterSnapshotAttributeRequest(i0 *docdb.ModifyDBClusterSnapshotAttributeInput) (r0 *request.Request, r1 *docdb.ModifyDBClusterSnapshotAttributeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBClusterSnapshotAttributeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.ModifyDBClusterSnapshotAttributeOutput)
	return
}

func (d *DocDBDouble) ModifyDBClusterSnapshotAttributeWithContext(i0 context.Context, i1 *docdb.ModifyDBClusterSnapshotAttributeInput, i2 ...request.Option) (r0 *docdb.ModifyDBClusterSnapshotAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBClusterSnapshotAttributeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.ModifyDBClusterSnapshotAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeModifyDBClusterSnapshotAttributeWithContext(ctx context.Context, in *docdb.ModifyDBClusterSnapshotAttributeInput, _ ...request.Option) (*docdb.ModifyDBClusterSnapshotAttributeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyDBClusterSnapshotAttribute cancelled", ctx.Err())
	default:
		return d.ModifyDBClusterSnapshotAttribute(in)
	}
}

func (d *DocDBDouble) ModifyDBClusterWithContext(i0 context.Context, i1 *docdb.ModifyDBClusterInput, i2 ...request.Option) (r0 *docdb.ModifyDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.ModifyDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeModifyDBClusterWithContext(ctx context.Context, in *docdb.ModifyDBClusterInput, _ ...request.Option) (*docdb.ModifyDBClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyDBCluster cancelled", ctx.Err())
	default:
		return d.ModifyDBCluster(in)
	}
}

func (d *DocDBDouble) ModifyDBInstance(i0 *docdb.ModifyDBInstanceInput) (r0 *docdb.ModifyDBInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBInstance", i0)
	r0, _ = returns[0].(*docdb.ModifyDBInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) ModifyDBInstanceRequest(i0 *docdb.ModifyDBInstanceInput) (r0 *request.Request, r1 *docdb.ModifyDBInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.ModifyDBInstanceOutput)
	return
}

func (d *DocDBDouble) ModifyDBInstanceWithContext(i0 context.Context, i1 *docdb.ModifyDBInstanceInput, i2 ...request.Option) (r0 *docdb.ModifyDBInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.ModifyDBInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeModifyDBInstanceWithContext(ctx context.Context, in *docdb.ModifyDBInstanceInput, _ ...request.Option) (*docdb.ModifyDBInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyDBInstance cancelled", ctx.Err())
	default:
		return d.ModifyDBInstance(in)
	}
}

func (d *DocDBDouble) ModifyDBSubnetGroup(i0 *docdb.ModifyDBSubnetGroupInput) (r0 *docdb.ModifyDBSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBSubnetGroup", i0)
	r0, _ = returns[0].(*docdb.ModifyDBSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) ModifyDBSubnetGroupRequest(i0 *docdb.ModifyDBSubnetGroupInput) (r0 *request.Request, r1 *docdb.ModifyDBSubnetGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBSubnetGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.ModifyDBSubnetGroupOutput)
	return
}

func (d *DocDBDouble) ModifyDBSubnetGroupWithContext(i0 context.Context, i1 *docdb.ModifyDBSubnetGroupInput, i2 ...request.Option) (r0 *docdb.ModifyDBSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBSubnetGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.ModifyDBSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeModifyDBSubnetGroupWithContext(ctx context.Context, in *docdb.ModifyDBSubnetGroupInput, _ ...request.Option) (*docdb.ModifyDBSubnetGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyDBSubnetGroup cancelled", ctx.Err())
	default:
		return d.ModifyDBSubnetGroup(in)
	}
}

func (d *DocDBDouble) RebootDBInstance(i0 *docdb.RebootDBInstanceInput) (r0 *docdb.RebootDBInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebootDBInstance", i0)
	r0, _ = returns[0].(*docdb.RebootDBInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) RebootDBInstanceRequest(i0 *docdb.RebootDBInstanceInput) (r0 *request.Request, r1 *docdb.RebootDBInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebootDBInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.RebootDBInstanceOutput)
	return
}

func (d *DocDBDouble) RebootDBInstanceWithContext(i0 context.Context, i1 *docdb.RebootDBInstanceInput, i2 ...request.Option) (r0 *docdb.RebootDBInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebootDBInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.RebootDBInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeRebootDBInstanceWithContext(ctx context.Context, in *docdb.RebootDBInstanceInput, _ ...request.Option) (*docdb.RebootDBInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RebootDBInstance cancelled", ctx.Err())
	default:
		return d.RebootDBInstance(in)
	}
}

func (d *DocDBDouble) RemoveTagsFromResource(i0 *docdb.RemoveTagsFromResourceInput) (r0 *docdb.RemoveTagsFromResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromResource", i0)
	r0, _ = returns[0].(*docdb.RemoveTagsFromResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) RemoveTagsFromResourceRequest(i0 *docdb.RemoveTagsFromResourceInput) (r0 *request.Request, r1 *docdb.RemoveTagsFromResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.RemoveTagsFromResourceOutput)
	return
}

func (d *DocDBDouble) RemoveTagsFromResourceWithContext(i0 context.Context, i1 *docdb.RemoveTagsFromResourceInput, i2 ...request.Option) (r0 *docdb.RemoveTagsFromResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.RemoveTagsFromResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeRemoveTagsFromResourceWithContext(ctx context.Context, in *docdb.RemoveTagsFromResourceInput, _ ...request.Option) (*docdb.RemoveTagsFromResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveTagsFromResource cancelled", ctx.Err())
	default:
		return d.RemoveTagsFromResource(in)
	}
}

func (d *DocDBDouble) ResetDBClusterParameterGroup(i0 *docdb.ResetDBClusterParameterGroupInput) (r0 *docdb.ResetDBClusterParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetDBClusterParameterGroup", i0)
	r0, _ = returns[0].(*docdb.ResetDBClusterParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) ResetDBClusterParameterGroupRequest(i0 *docdb.ResetDBClusterParameterGroupInput) (r0 *request.Request, r1 *docdb.ResetDBClusterParameterGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetDBClusterParameterGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.ResetDBClusterParameterGroupOutput)
	return
}

func (d *DocDBDouble) ResetDBClusterParameterGroupWithContext(i0 context.Context, i1 *docdb.ResetDBClusterParameterGroupInput, i2 ...request.Option) (r0 *docdb.ResetDBClusterParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetDBClusterParameterGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.ResetDBClusterParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeResetDBClusterParameterGroupWithContext(ctx context.Context, in *docdb.ResetDBClusterParameterGroupInput, _ ...request.Option) (*docdb.ResetDBClusterParameterGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ResetDBClusterParameterGroup cancelled", ctx.Err())
	default:
		return d.ResetDBClusterParameterGroup(in)
	}
}

func (d *DocDBDouble) RestoreDBClusterFromSnapshot(i0 *docdb.RestoreDBClusterFromSnapshotInput) (r0 *docdb.RestoreDBClusterFromSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreDBClusterFromSnapshot", i0)
	r0, _ = returns[0].(*docdb.RestoreDBClusterFromSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) RestoreDBClusterFromSnapshotRequest(i0 *docdb.RestoreDBClusterFromSnapshotInput) (r0 *request.Request, r1 *docdb.RestoreDBClusterFromSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreDBClusterFromSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.RestoreDBClusterFromSnapshotOutput)
	return
}

func (d *DocDBDouble) RestoreDBClusterFromSnapshotWithContext(i0 context.Context, i1 *docdb.RestoreDBClusterFromSnapshotInput, i2 ...request.Option) (r0 *docdb.RestoreDBClusterFromSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreDBClusterFromSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.RestoreDBClusterFromSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeRestoreDBClusterFromSnapshotWithContext(ctx context.Context, in *docdb.RestoreDBClusterFromSnapshotInput, _ ...request.Option) (*docdb.RestoreDBClusterFromSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RestoreDBClusterFromSnapshot cancelled", ctx.Err())
	default:
		return d.RestoreDBClusterFromSnapshot(in)
	}
}

func (d *DocDBDouble) RestoreDBClusterToPointInTime(i0 *docdb.RestoreDBClusterToPointInTimeInput) (r0 *docdb.RestoreDBClusterToPointInTimeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreDBClusterToPointInTime", i0)
	r0, _ = returns[0].(*docdb.RestoreDBClusterToPointInTimeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) RestoreDBClusterToPointInTimeRequest(i0 *docdb.RestoreDBClusterToPointInTimeInput) (r0 *request.Request, r1 *docdb.RestoreDBClusterToPointInTimeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreDBClusterToPointInTimeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.RestoreDBClusterToPointInTimeOutput)
	return
}

func (d *DocDBDouble) RestoreDBClusterToPointInTimeWithContext(i0 context.Context, i1 *docdb.RestoreDBClusterToPointInTimeInput, i2 ...request.Option) (r0 *docdb.RestoreDBClusterToPointInTimeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreDBClusterToPointInTimeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.RestoreDBClusterToPointInTimeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeRestoreDBClusterToPointInTimeWithContext(ctx context.Context, in *docdb.RestoreDBClusterToPointInTimeInput, _ ...request.Option) (*docdb.RestoreDBClusterToPointInTimeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RestoreDBClusterToPointInTime cancelled", ctx.Err())
	default:
		return d.RestoreDBClusterToPointInTime(in)
	}
}

func (d *DocDBDouble) StartDBCluster(i0 *docdb.StartDBClusterInput) (r0 *docdb.StartDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartDBCluster", i0)
	r0, _ = returns[0].(*docdb.StartDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) StartDBClusterRequest(i0 *docdb.StartDBClusterInput) (r0 *request.Request, r1 *docdb.StartDBClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartDBClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.StartDBClusterOutput)
	return
}

func (d *DocDBDouble) StartDBClusterWithContext(i0 context.Context, i1 *docdb.StartDBClusterInput, i2 ...request.Option) (r0 *docdb.StartDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartDBClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.StartDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeStartDBClusterWithContext(ctx context.Context, in *docdb.StartDBClusterInput, _ ...request.Option) (*docdb.StartDBClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartDBCluster cancelled", ctx.Err())
	default:
		return d.StartDBCluster(in)
	}
}

func (d *DocDBDouble) StopDBCluster(i0 *docdb.StopDBClusterInput) (r0 *docdb.StopDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopDBCluster", i0)
	r0, _ = returns[0].(*docdb.StopDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) StopDBClusterRequest(i0 *docdb.StopDBClusterInput) (r0 *request.Request, r1 *docdb.StopDBClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopDBClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*docdb.StopDBClusterOutput)
	return
}

func (d *DocDBDouble) StopDBClusterWithContext(i0 context.Context, i1 *docdb.StopDBClusterInput, i2 ...request.Option) (r0 *docdb.StopDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopDBClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*docdb.StopDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DocDBDouble) fakeStopDBClusterWithContext(ctx context.Context, in *docdb.StopDBClusterInput, _ ...request.Option) (*docdb.StopDBClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopDBCluster cancelled", ctx.Err())
	default:
		return d.StopDBCluster(in)
	}
}

func (d *DocDBDouble) WaitUntilDBInstanceAvailable(i0 *docdb.DescribeDBInstancesInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilDBInstanceAvailable", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *DocDBDouble) fakeWaitUntilDBInstanceAvailable(in *docdb.DescribeDBInstancesInput) error {
	return d.WaitUntil("DBInstanceAvailable", waiters, in)
}

func (d *DocDBDouble) WaitUntilDBInstanceAvailableWithContext(i0 context.Context, i1 *docdb.DescribeDBInstancesInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilDBInstanceAvailableWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *DocDBDouble) fakeWaitUntilDBInstanceAvailableWithContext(ctx context.Context, in *docdb.DescribeDBInstancesInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("DBInstanceAvailable", waiters, ctx, in, waitOption...)
}

func (d *DocDBDouble) WaitUntilDBInstanceDeleted(i0 *docdb.DescribeDBInstancesInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilDBInstanceDeleted", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *DocDBDouble) fakeWaitUntilDBInstanceDeleted(in *docdb.DescribeDBInstancesInput) error {
	return d.WaitUntil("DBInstanceDeleted", waiters, in)
}

func (d *DocDBDouble) WaitUntilDBInstanceDeletedWithContext(i0 context.Context, i1 *docdb.DescribeDBInstancesInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilDBInstanceDeletedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *DocDBDouble) fakeWaitUntilDBInstanceDeletedWithContext(ctx context.Context, in *docdb.DescribeDBInstancesInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("DBInstanceDeleted", waiters, ctx, in, waitOption...)
}
