// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:13:06+11:00

// Package iamdouble provides a TestDouble implementation of iamiface.IAMAPI
package iamdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/iam"
	"github.com/aws/aws-sdk-go/service/iam/iamiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// IAMDouble is TestDouble for iamiface.IAMAPI
type IAMDouble struct {
	iamiface.IAMAPI
	*awsdouble.AWSTestDouble
}

// Constructor for IAMDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *IAMDouble {
	result := &IAMDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*iamiface.IAMAPI)(nil), configurators...)
	return result
}

func (d *IAMDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *IAMDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AddClientIDToOpenIDConnectProviderWithContext":
		return m.Fake(d.fakeAddClientIDToOpenIDConnectProviderWithContext)

	case "AddRoleToInstanceProfileWithContext":
		return m.Fake(d.fakeAddRoleToInstanceProfileWithContext)

	case "AddUserToGroupWithContext":
		return m.Fake(d.fakeAddUserToGroupWithContext)

	case "AttachGroupPolicyWithContext":
		return m.Fake(d.fakeAttachGroupPolicyWithContext)

	case "AttachRolePolicyWithContext":
		return m.Fake(d.fakeAttachRolePolicyWithContext)

	case "AttachUserPolicyWithContext":
		return m.Fake(d.fakeAttachUserPolicyWithContext)

	case "ChangePasswordWithContext":
		return m.Fake(d.fakeChangePasswordWithContext)

	case "CreateAccessKeyWithContext":
		return m.Fake(d.fakeCreateAccessKeyWithContext)

	case "CreateAccountAliasWithContext":
		return m.Fake(d.fakeCreateAccountAliasWithContext)

	case "CreateGroupWithContext":
		return m.Fake(d.fakeCreateGroupWithContext)

	case "CreateInstanceProfileWithContext":
		return m.Fake(d.fakeCreateInstanceProfileWithContext)

	case "CreateLoginProfileWithContext":
		return m.Fake(d.fakeCreateLoginProfileWithContext)

	case "CreateOpenIDConnectProviderWithContext":
		return m.Fake(d.fakeCreateOpenIDConnectProviderWithContext)

	case "CreatePolicyVersionWithContext":
		return m.Fake(d.fakeCreatePolicyVersionWithContext)

	case "CreatePolicyWithContext":
		return m.Fake(d.fakeCreatePolicyWithContext)

	case "CreateRoleWithContext":
		return m.Fake(d.fakeCreateRoleWithContext)

	case "CreateSAMLProviderWithContext":
		return m.Fake(d.fakeCreateSAMLProviderWithContext)

	case "CreateServiceLinkedRoleWithContext":
		return m.Fake(d.fakeCreateServiceLinkedRoleWithContext)

	case "CreateServiceSpecificCredentialWithContext":
		return m.Fake(d.fakeCreateServiceSpecificCredentialWithContext)

	case "CreateUserWithContext":
		return m.Fake(d.fakeCreateUserWithContext)

	case "CreateVirtualMFADeviceWithContext":
		return m.Fake(d.fakeCreateVirtualMFADeviceWithContext)

	case "DeactivateMFADeviceWithContext":
		return m.Fake(d.fakeDeactivateMFADeviceWithContext)

	case "DeleteAccessKeyWithContext":
		return m.Fake(d.fakeDeleteAccessKeyWithContext)

	case "DeleteAccountAliasWithContext":
		return m.Fake(d.fakeDeleteAccountAliasWithContext)

	case "DeleteAccountPasswordPolicyWithContext":
		return m.Fake(d.fakeDeleteAccountPasswordPolicyWithContext)

	case "DeleteGroupPolicyWithContext":
		return m.Fake(d.fakeDeleteGroupPolicyWithContext)

	case "DeleteGroupWithContext":
		return m.Fake(d.fakeDeleteGroupWithContext)

	case "DeleteInstanceProfileWithContext":
		return m.Fake(d.fakeDeleteInstanceProfileWithContext)

	case "DeleteLoginProfileWithContext":
		return m.Fake(d.fakeDeleteLoginProfileWithContext)

	case "DeleteOpenIDConnectProviderWithContext":
		return m.Fake(d.fakeDeleteOpenIDConnectProviderWithContext)

	case "DeletePolicyVersionWithContext":
		return m.Fake(d.fakeDeletePolicyVersionWithContext)

	case "DeletePolicyWithContext":
		return m.Fake(d.fakeDeletePolicyWithContext)

	case "DeleteRolePermissionsBoundaryWithContext":
		return m.Fake(d.fakeDeleteRolePermissionsBoundaryWithContext)

	case "DeleteRolePolicyWithContext":
		return m.Fake(d.fakeDeleteRolePolicyWithContext)

	case "DeleteRoleWithContext":
		return m.Fake(d.fakeDeleteRoleWithContext)

	case "DeleteSAMLProviderWithContext":
		return m.Fake(d.fakeDeleteSAMLProviderWithContext)

	case "DeleteSSHPublicKeyWithContext":
		return m.Fake(d.fakeDeleteSSHPublicKeyWithContext)

	case "DeleteServerCertificateWithContext":
		return m.Fake(d.fakeDeleteServerCertificateWithContext)

	case "DeleteServiceLinkedRoleWithContext":
		return m.Fake(d.fakeDeleteServiceLinkedRoleWithContext)

	case "DeleteServiceSpecificCredentialWithContext":
		return m.Fake(d.fakeDeleteServiceSpecificCredentialWithContext)

	case "DeleteSigningCertificateWithContext":
		return m.Fake(d.fakeDeleteSigningCertificateWithContext)

	case "DeleteUserPermissionsBoundaryWithContext":
		return m.Fake(d.fakeDeleteUserPermissionsBoundaryWithContext)

	case "DeleteUserPolicyWithContext":
		return m.Fake(d.fakeDeleteUserPolicyWithContext)

	case "DeleteUserWithContext":
		return m.Fake(d.fakeDeleteUserWithContext)

	case "DeleteVirtualMFADeviceWithContext":
		return m.Fake(d.fakeDeleteVirtualMFADeviceWithContext)

	case "DetachGroupPolicyWithContext":
		return m.Fake(d.fakeDetachGroupPolicyWithContext)

	case "DetachRolePolicyWithContext":
		return m.Fake(d.fakeDetachRolePolicyWithContext)

	case "DetachUserPolicyWithContext":
		return m.Fake(d.fakeDetachUserPolicyWithContext)

	case "EnableMFADeviceWithContext":
		return m.Fake(d.fakeEnableMFADeviceWithContext)

	case "GenerateCredentialReportWithContext":
		return m.Fake(d.fakeGenerateCredentialReportWithContext)

	case "GenerateOrganizationsAccessReportWithContext":
		return m.Fake(d.fakeGenerateOrganizationsAccessReportWithContext)

	case "GenerateServiceLastAccessedDetailsWithContext":
		return m.Fake(d.fakeGenerateServiceLastAccessedDetailsWithContext)

	case "GetAccessKeyLastUsedWithContext":
		return m.Fake(d.fakeGetAccessKeyLastUsedWithContext)

	case "GetAccountAuthorizationDetailsPages":
		return m.Fake(d.fakeGetAccountAuthorizationDetailsPages)

	case "GetAccountAuthorizationDetailsPagesWithContext":
		return m.Fake(d.fakeGetAccountAuthorizationDetailsPagesWithContext)

	case "GetAccountAuthorizationDetailsWithContext":
		return m.Fake(d.fakeGetAccountAuthorizationDetailsWithContext)

	case "GetAccountPasswordPolicyWithContext":
		return m.Fake(d.fakeGetAccountPasswordPolicyWithContext)

	case "GetAccountSummaryWithContext":
		return m.Fake(d.fakeGetAccountSummaryWithContext)

	case "GetContextKeysForCustomPolicyWithContext":
		return m.Fake(d.fakeGetContextKeysForCustomPolicyWithContext)

	case "GetContextKeysForPrincipalPolicyWithContext":
		return m.Fake(d.fakeGetContextKeysForPrincipalPolicyWithContext)

	case "GetCredentialReportWithContext":
		return m.Fake(d.fakeGetCredentialReportWithContext)

	case "GetGroupPages":
		return m.Fake(d.fakeGetGroupPages)

	case "GetGroupPagesWithContext":
		return m.Fake(d.fakeGetGroupPagesWithContext)

	case "GetGroupPolicyWithContext":
		return m.Fake(d.fakeGetGroupPolicyWithContext)

	case "GetGroupWithContext":
		return m.Fake(d.fakeGetGroupWithContext)

	case "GetInstanceProfileWithContext":
		return m.Fake(d.fakeGetInstanceProfileWithContext)

	case "GetLoginProfileWithContext":
		return m.Fake(d.fakeGetLoginProfileWithContext)

	case "GetOpenIDConnectProviderWithContext":
		return m.Fake(d.fakeGetOpenIDConnectProviderWithContext)

	case "GetOrganizationsAccessReportWithContext":
		return m.Fake(d.fakeGetOrganizationsAccessReportWithContext)

	case "GetPolicyVersionWithContext":
		return m.Fake(d.fakeGetPolicyVersionWithContext)

	case "GetPolicyWithContext":
		return m.Fake(d.fakeGetPolicyWithContext)

	case "GetRolePolicyWithContext":
		return m.Fake(d.fakeGetRolePolicyWithContext)

	case "GetRoleWithContext":
		return m.Fake(d.fakeGetRoleWithContext)

	case "GetSAMLProviderWithContext":
		return m.Fake(d.fakeGetSAMLProviderWithContext)

	case "GetSSHPublicKeyWithContext":
		return m.Fake(d.fakeGetSSHPublicKeyWithContext)

	case "GetServerCertificateWithContext":
		return m.Fake(d.fakeGetServerCertificateWithContext)

	case "GetServiceLastAccessedDetailsWithContext":
		return m.Fake(d.fakeGetServiceLastAccessedDetailsWithContext)

	case "GetServiceLastAccessedDetailsWithEntitiesWithContext":
		return m.Fake(d.fakeGetServiceLastAccessedDetailsWithEntitiesWithContext)

	case "GetServiceLinkedRoleDeletionStatusWithContext":
		return m.Fake(d.fakeGetServiceLinkedRoleDeletionStatusWithContext)

	case "GetUserPolicyWithContext":
		return m.Fake(d.fakeGetUserPolicyWithContext)

	case "GetUserWithContext":
		return m.Fake(d.fakeGetUserWithContext)

	case "ListAccessKeysPages":
		return m.Fake(d.fakeListAccessKeysPages)

	case "ListAccessKeysPagesWithContext":
		return m.Fake(d.fakeListAccessKeysPagesWithContext)

	case "ListAccessKeysWithContext":
		return m.Fake(d.fakeListAccessKeysWithContext)

	case "ListAccountAliasesPages":
		return m.Fake(d.fakeListAccountAliasesPages)

	case "ListAccountAliasesPagesWithContext":
		return m.Fake(d.fakeListAccountAliasesPagesWithContext)

	case "ListAccountAliasesWithContext":
		return m.Fake(d.fakeListAccountAliasesWithContext)

	case "ListAttachedGroupPoliciesPages":
		return m.Fake(d.fakeListAttachedGroupPoliciesPages)

	case "ListAttachedGroupPoliciesPagesWithContext":
		return m.Fake(d.fakeListAttachedGroupPoliciesPagesWithContext)

	case "ListAttachedGroupPoliciesWithContext":
		return m.Fake(d.fakeListAttachedGroupPoliciesWithContext)

	case "ListAttachedRolePoliciesPages":
		return m.Fake(d.fakeListAttachedRolePoliciesPages)

	case "ListAttachedRolePoliciesPagesWithContext":
		return m.Fake(d.fakeListAttachedRolePoliciesPagesWithContext)

	case "ListAttachedRolePoliciesWithContext":
		return m.Fake(d.fakeListAttachedRolePoliciesWithContext)

	case "ListAttachedUserPoliciesPages":
		return m.Fake(d.fakeListAttachedUserPoliciesPages)

	case "ListAttachedUserPoliciesPagesWithContext":
		return m.Fake(d.fakeListAttachedUserPoliciesPagesWithContext)

	case "ListAttachedUserPoliciesWithContext":
		return m.Fake(d.fakeListAttachedUserPoliciesWithContext)

	case "ListEntitiesForPolicyPages":
		return m.Fake(d.fakeListEntitiesForPolicyPages)

	case "ListEntitiesForPolicyPagesWithContext":
		return m.Fake(d.fakeListEntitiesForPolicyPagesWithContext)

	case "ListEntitiesForPolicyWithContext":
		return m.Fake(d.fakeListEntitiesForPolicyWithContext)

	case "ListGroupPoliciesPages":
		return m.Fake(d.fakeListGroupPoliciesPages)

	case "ListGroupPoliciesPagesWithContext":
		return m.Fake(d.fakeListGroupPoliciesPagesWithContext)

	case "ListGroupPoliciesWithContext":
		return m.Fake(d.fakeListGroupPoliciesWithContext)

	case "ListGroupsForUserPages":
		return m.Fake(d.fakeListGroupsForUserPages)

	case "ListGroupsForUserPagesWithContext":
		return m.Fake(d.fakeListGroupsForUserPagesWithContext)

	case "ListGroupsForUserWithContext":
		return m.Fake(d.fakeListGroupsForUserWithContext)

	case "ListGroupsPages":
		return m.Fake(d.fakeListGroupsPages)

	case "ListGroupsPagesWithContext":
		return m.Fake(d.fakeListGroupsPagesWithContext)

	case "ListGroupsWithContext":
		return m.Fake(d.fakeListGroupsWithContext)

	case "ListInstanceProfilesForRolePages":
		return m.Fake(d.fakeListInstanceProfilesForRolePages)

	case "ListInstanceProfilesForRolePagesWithContext":
		return m.Fake(d.fakeListInstanceProfilesForRolePagesWithContext)

	case "ListInstanceProfilesForRoleWithContext":
		return m.Fake(d.fakeListInstanceProfilesForRoleWithContext)

	case "ListInstanceProfilesPages":
		return m.Fake(d.fakeListInstanceProfilesPages)

	case "ListInstanceProfilesPagesWithContext":
		return m.Fake(d.fakeListInstanceProfilesPagesWithContext)

	case "ListInstanceProfilesWithContext":
		return m.Fake(d.fakeListInstanceProfilesWithContext)

	case "ListMFADevicesPages":
		return m.Fake(d.fakeListMFADevicesPages)

	case "ListMFADevicesPagesWithContext":
		return m.Fake(d.fakeListMFADevicesPagesWithContext)

	case "ListMFADevicesWithContext":
		return m.Fake(d.fakeListMFADevicesWithContext)

	case "ListOpenIDConnectProvidersWithContext":
		return m.Fake(d.fakeListOpenIDConnectProvidersWithContext)

	case "ListPoliciesGrantingServiceAccessWithContext":
		return m.Fake(d.fakeListPoliciesGrantingServiceAccessWithContext)

	case "ListPoliciesPages":
		return m.Fake(d.fakeListPoliciesPages)

	case "ListPoliciesPagesWithContext":
		return m.Fake(d.fakeListPoliciesPagesWithContext)

	case "ListPoliciesWithContext":
		return m.Fake(d.fakeListPoliciesWithContext)

	case "ListPolicyVersionsPages":
		return m.Fake(d.fakeListPolicyVersionsPages)

	case "ListPolicyVersionsPagesWithContext":
		return m.Fake(d.fakeListPolicyVersionsPagesWithContext)

	case "ListPolicyVersionsWithContext":
		return m.Fake(d.fakeListPolicyVersionsWithContext)

	case "ListRolePoliciesPages":
		return m.Fake(d.fakeListRolePoliciesPages)

	case "ListRolePoliciesPagesWithContext":
		return m.Fake(d.fakeListRolePoliciesPagesWithContext)

	case "ListRolePoliciesWithContext":
		return m.Fake(d.fakeListRolePoliciesWithContext)

	case "ListRoleTagsWithContext":
		return m.Fake(d.fakeListRoleTagsWithContext)

	case "ListRolesPages":
		return m.Fake(d.fakeListRolesPages)

	case "ListRolesPagesWithContext":
		return m.Fake(d.fakeListRolesPagesWithContext)

	case "ListRolesWithContext":
		return m.Fake(d.fakeListRolesWithContext)

	case "ListSAMLProvidersWithContext":
		return m.Fake(d.fakeListSAMLProvidersWithContext)

	case "ListSSHPublicKeysPages":
		return m.Fake(d.fakeListSSHPublicKeysPages)

	case "ListSSHPublicKeysPagesWithContext":
		return m.Fake(d.fakeListSSHPublicKeysPagesWithContext)

	case "ListSSHPublicKeysWithContext":
		return m.Fake(d.fakeListSSHPublicKeysWithContext)

	case "ListServerCertificatesPages":
		return m.Fake(d.fakeListServerCertificatesPages)

	case "ListServerCertificatesPagesWithContext":
		return m.Fake(d.fakeListServerCertificatesPagesWithContext)

	case "ListServerCertificatesWithContext":
		return m.Fake(d.fakeListServerCertificatesWithContext)

	case "ListServiceSpecificCredentialsWithContext":
		return m.Fake(d.fakeListServiceSpecificCredentialsWithContext)

	case "ListSigningCertificatesPages":
		return m.Fake(d.fakeListSigningCertificatesPages)

	case "ListSigningCertificatesPagesWithContext":
		return m.Fake(d.fakeListSigningCertificatesPagesWithContext)

	case "ListSigningCertificatesWithContext":
		return m.Fake(d.fakeListSigningCertificatesWithContext)

	case "ListUserPoliciesPages":
		return m.Fake(d.fakeListUserPoliciesPages)

	case "ListUserPoliciesPagesWithContext":
		return m.Fake(d.fakeListUserPoliciesPagesWithContext)

	case "ListUserPoliciesWithContext":
		return m.Fake(d.fakeListUserPoliciesWithContext)

	case "ListUserTagsWithContext":
		return m.Fake(d.fakeListUserTagsWithContext)

	case "ListUsersPages":
		return m.Fake(d.fakeListUsersPages)

	case "ListUsersPagesWithContext":
		return m.Fake(d.fakeListUsersPagesWithContext)

	case "ListUsersWithContext":
		return m.Fake(d.fakeListUsersWithContext)

	case "ListVirtualMFADevicesPages":
		return m.Fake(d.fakeListVirtualMFADevicesPages)

	case "ListVirtualMFADevicesPagesWithContext":
		return m.Fake(d.fakeListVirtualMFADevicesPagesWithContext)

	case "ListVirtualMFADevicesWithContext":
		return m.Fake(d.fakeListVirtualMFADevicesWithContext)

	case "PutGroupPolicyWithContext":
		return m.Fake(d.fakePutGroupPolicyWithContext)

	case "PutRolePermissionsBoundaryWithContext":
		return m.Fake(d.fakePutRolePermissionsBoundaryWithContext)

	case "PutRolePolicyWithContext":
		return m.Fake(d.fakePutRolePolicyWithContext)

	case "PutUserPermissionsBoundaryWithContext":
		return m.Fake(d.fakePutUserPermissionsBoundaryWithContext)

	case "PutUserPolicyWithContext":
		return m.Fake(d.fakePutUserPolicyWithContext)

	case "RemoveClientIDFromOpenIDConnectProviderWithContext":
		return m.Fake(d.fakeRemoveClientIDFromOpenIDConnectProviderWithContext)

	case "RemoveRoleFromInstanceProfileWithContext":
		return m.Fake(d.fakeRemoveRoleFromInstanceProfileWithContext)

	case "RemoveUserFromGroupWithContext":
		return m.Fake(d.fakeRemoveUserFromGroupWithContext)

	case "ResetServiceSpecificCredentialWithContext":
		return m.Fake(d.fakeResetServiceSpecificCredentialWithContext)

	case "ResyncMFADeviceWithContext":
		return m.Fake(d.fakeResyncMFADeviceWithContext)

	case "SetDefaultPolicyVersionWithContext":
		return m.Fake(d.fakeSetDefaultPolicyVersionWithContext)

	case "SetSecurityTokenServicePreferencesWithContext":
		return m.Fake(d.fakeSetSecurityTokenServicePreferencesWithContext)

	case "SimulateCustomPolicyPages":
		return m.Fake(d.fakeSimulateCustomPolicyPages)

	case "SimulateCustomPolicyPagesWithContext":
		return m.Fake(d.fakeSimulateCustomPolicyPagesWithContext)

	case "SimulateCustomPolicyWithContext":
		return m.Fake(d.fakeSimulateCustomPolicyWithContext)

	case "SimulatePrincipalPolicyPages":
		return m.Fake(d.fakeSimulatePrincipalPolicyPages)

	case "SimulatePrincipalPolicyPagesWithContext":
		return m.Fake(d.fakeSimulatePrincipalPolicyPagesWithContext)

	case "SimulatePrincipalPolicyWithContext":
		return m.Fake(d.fakeSimulatePrincipalPolicyWithContext)

	case "TagRoleWithContext":
		return m.Fake(d.fakeTagRoleWithContext)

	case "TagUserWithContext":
		return m.Fake(d.fakeTagUserWithContext)

	case "UntagRoleWithContext":
		return m.Fake(d.fakeUntagRoleWithContext)

	case "UntagUserWithContext":
		return m.Fake(d.fakeUntagUserWithContext)

	case "UpdateAccessKeyWithContext":
		return m.Fake(d.fakeUpdateAccessKeyWithContext)

	case "UpdateAccountPasswordPolicyWithContext":
		return m.Fake(d.fakeUpdateAccountPasswordPolicyWithContext)

	case "UpdateAssumeRolePolicyWithContext":
		return m.Fake(d.fakeUpdateAssumeRolePolicyWithContext)

	case "UpdateGroupWithContext":
		return m.Fake(d.fakeUpdateGroupWithContext)

	case "UpdateLoginProfileWithContext":
		return m.Fake(d.fakeUpdateLoginProfileWithContext)

	case "UpdateOpenIDConnectProviderThumbprintWithContext":
		return m.Fake(d.fakeUpdateOpenIDConnectProviderThumbprintWithContext)

	case "UpdateRoleDescriptionWithContext":
		return m.Fake(d.fakeUpdateRoleDescriptionWithContext)

	case "UpdateRoleWithContext":
		return m.Fake(d.fakeUpdateRoleWithContext)

	case "UpdateSAMLProviderWithContext":
		return m.Fake(d.fakeUpdateSAMLProviderWithContext)

	case "UpdateSSHPublicKeyWithContext":
		return m.Fake(d.fakeUpdateSSHPublicKeyWithContext)

	case "UpdateServerCertificateWithContext":
		return m.Fake(d.fakeUpdateServerCertificateWithContext)

	case "UpdateServiceSpecificCredentialWithContext":
		return m.Fake(d.fakeUpdateServiceSpecificCredentialWithContext)

	case "UpdateSigningCertificateWithContext":
		return m.Fake(d.fakeUpdateSigningCertificateWithContext)

	case "UpdateUserWithContext":
		return m.Fake(d.fakeUpdateUserWithContext)

	case "UploadSSHPublicKeyWithContext":
		return m.Fake(d.fakeUploadSSHPublicKeyWithContext)

	case "UploadServerCertificateWithContext":
		return m.Fake(d.fakeUploadServerCertificateWithContext)

	case "UploadSigningCertificateWithContext":
		return m.Fake(d.fakeUploadSigningCertificateWithContext)

	case "WaitUntilInstanceProfileExists":
		return m.Fake(d.fakeWaitUntilInstanceProfileExists)

	case "WaitUntilInstanceProfileExistsWithContext":
		return m.Fake(d.fakeWaitUntilInstanceProfileExistsWithContext)

	case "WaitUntilPolicyExists":
		return m.Fake(d.fakeWaitUntilPolicyExists)

	case "WaitUntilPolicyExistsWithContext":
		return m.Fake(d.fakeWaitUntilPolicyExistsWithContext)

	case "WaitUntilRoleExists":
		return m.Fake(d.fakeWaitUntilRoleExists)

	case "WaitUntilRoleExistsWithContext":
		return m.Fake(d.fakeWaitUntilRoleExistsWithContext)

	case "WaitUntilUserExists":
		return m.Fake(d.fakeWaitUntilUserExists)

	case "WaitUntilUserExistsWithContext":
		return m.Fake(d.fakeWaitUntilUserExistsWithContext)

	default:
		return nil
	}
}

func (d *IAMDouble) AddClientIDToOpenIDConnectProvider(i0 *iam.AddClientIDToOpenIDConnectProviderInput) (r0 *iam.AddClientIDToOpenIDConnectProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddClientIDToOpenIDConnectProvider", i0)
	r0, _ = returns[0].(*iam.AddClientIDToOpenIDConnectProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) AddClientIDToOpenIDConnectProviderRequest(i0 *iam.AddClientIDToOpenIDConnectProviderInput) (r0 *request.Request, r1 *iam.AddClientIDToOpenIDConnectProviderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddClientIDToOpenIDConnectProviderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.AddClientIDToOpenIDConnectProviderOutput)
	return
}

func (d *IAMDouble) AddClientIDToOpenIDConnectProviderWithContext(i0 context.Context, i1 *iam.AddClientIDToOpenIDConnectProviderInput, i2 ...request.Option) (r0 *iam.AddClientIDToOpenIDConnectProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddClientIDToOpenIDConnectProviderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.AddClientIDToOpenIDConnectProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeAddClientIDToOpenIDConnectProviderWithContext(ctx context.Context, in *iam.AddClientIDToOpenIDConnectProviderInput, _ ...request.Option) (*iam.AddClientIDToOpenIDConnectProviderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddClientIDToOpenIDConnectProvider cancelled", ctx.Err())
	default:
		return d.AddClientIDToOpenIDConnectProvider(in)
	}
}

func (d *IAMDouble) AddRoleToInstanceProfile(i0 *iam.AddRoleToInstanceProfileInput) (r0 *iam.AddRoleToInstanceProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddRoleToInstanceProfile", i0)
	r0, _ = returns[0].(*iam.AddRoleToInstanceProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) AddRoleToInstanceProfileRequest(i0 *iam.AddRoleToInstanceProfileInput) (r0 *request.Request, r1 *iam.AddRoleToInstanceProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddRoleToInstanceProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.AddRoleToInstanceProfileOutput)
	return
}

func (d *IAMDouble) AddRoleToInstanceProfileWithContext(i0 context.Context, i1 *iam.AddRoleToInstanceProfileInput, i2 ...request.Option) (r0 *iam.AddRoleToInstanceProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddRoleToInstanceProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.AddRoleToInstanceProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeAddRoleToInstanceProfileWithContext(ctx context.Context, in *iam.AddRoleToInstanceProfileInput, _ ...request.Option) (*iam.AddRoleToInstanceProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddRoleToInstanceProfile cancelled", ctx.Err())
	default:
		return d.AddRoleToInstanceProfile(in)
	}
}

func (d *IAMDouble) AddUserToGroup(i0 *iam.AddUserToGroupInput) (r0 *iam.AddUserToGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddUserToGroup", i0)
	r0, _ = returns[0].(*iam.AddUserToGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) AddUserToGroupRequest(i0 *iam.AddUserToGroupInput) (r0 *request.Request, r1 *iam.AddUserToGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddUserToGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.AddUserToGroupOutput)
	return
}

func (d *IAMDouble) AddUserToGroupWithContext(i0 context.Context, i1 *iam.AddUserToGroupInput, i2 ...request.Option) (r0 *iam.AddUserToGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddUserToGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.AddUserToGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeAddUserToGroupWithContext(ctx context.Context, in *iam.AddUserToGroupInput, _ ...request.Option) (*iam.AddUserToGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddUserToGroup cancelled", ctx.Err())
	default:
		return d.AddUserToGroup(in)
	}
}

func (d *IAMDouble) AttachGroupPolicy(i0 *iam.AttachGroupPolicyInput) (r0 *iam.AttachGroupPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachGroupPolicy", i0)
	r0, _ = returns[0].(*iam.AttachGroupPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) AttachGroupPolicyRequest(i0 *iam.AttachGroupPolicyInput) (r0 *request.Request, r1 *iam.AttachGroupPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachGroupPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.AttachGroupPolicyOutput)
	return
}

func (d *IAMDouble) AttachGroupPolicyWithContext(i0 context.Context, i1 *iam.AttachGroupPolicyInput, i2 ...request.Option) (r0 *iam.AttachGroupPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachGroupPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.AttachGroupPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeAttachGroupPolicyWithContext(ctx context.Context, in *iam.AttachGroupPolicyInput, _ ...request.Option) (*iam.AttachGroupPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AttachGroupPolicy cancelled", ctx.Err())
	default:
		return d.AttachGroupPolicy(in)
	}
}

func (d *IAMDouble) AttachRolePolicy(i0 *iam.AttachRolePolicyInput) (r0 *iam.AttachRolePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachRolePolicy", i0)
	r0, _ = returns[0].(*iam.AttachRolePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) AttachRolePolicyRequest(i0 *iam.AttachRolePolicyInput) (r0 *request.Request, r1 *iam.AttachRolePolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachRolePolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.AttachRolePolicyOutput)
	return
}

func (d *IAMDouble) AttachRolePolicyWithContext(i0 context.Context, i1 *iam.AttachRolePolicyInput, i2 ...request.Option) (r0 *iam.AttachRolePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachRolePolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.AttachRolePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeAttachRolePolicyWithContext(ctx context.Context, in *iam.AttachRolePolicyInput, _ ...request.Option) (*iam.AttachRolePolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AttachRolePolicy cancelled", ctx.Err())
	default:
		return d.AttachRolePolicy(in)
	}
}

func (d *IAMDouble) AttachUserPolicy(i0 *iam.AttachUserPolicyInput) (r0 *iam.AttachUserPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachUserPolicy", i0)
	r0, _ = returns[0].(*iam.AttachUserPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) AttachUserPolicyRequest(i0 *iam.AttachUserPolicyInput) (r0 *request.Request, r1 *iam.AttachUserPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachUserPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.AttachUserPolicyOutput)
	return
}

func (d *IAMDouble) AttachUserPolicyWithContext(i0 context.Context, i1 *iam.AttachUserPolicyInput, i2 ...request.Option) (r0 *iam.AttachUserPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachUserPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.AttachUserPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeAttachUserPolicyWithContext(ctx context.Context, in *iam.AttachUserPolicyInput, _ ...request.Option) (*iam.AttachUserPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AttachUserPolicy cancelled", ctx.Err())
	default:
		return d.AttachUserPolicy(in)
	}
}

func (d *IAMDouble) ChangePassword(i0 *iam.ChangePasswordInput) (r0 *iam.ChangePasswordOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ChangePassword", i0)
	r0, _ = returns[0].(*iam.ChangePasswordOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) ChangePasswordRequest(i0 *iam.ChangePasswordInput) (r0 *request.Request, r1 *iam.ChangePasswordOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ChangePasswordRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.ChangePasswordOutput)
	return
}

func (d *IAMDouble) ChangePasswordWithContext(i0 context.Context, i1 *iam.ChangePasswordInput, i2 ...request.Option) (r0 *iam.ChangePasswordOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ChangePasswordWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.ChangePasswordOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeChangePasswordWithContext(ctx context.Context, in *iam.ChangePasswordInput, _ ...request.Option) (*iam.ChangePasswordOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ChangePassword cancelled", ctx.Err())
	default:
		return d.ChangePassword(in)
	}
}

func (d *IAMDouble) CreateAccessKey(i0 *iam.CreateAccessKeyInput) (r0 *iam.CreateAccessKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAccessKey", i0)
	r0, _ = returns[0].(*iam.CreateAccessKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) CreateAccessKeyRequest(i0 *iam.CreateAccessKeyInput) (r0 *request.Request, r1 *iam.CreateAccessKeyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAccessKeyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.CreateAccessKeyOutput)
	return
}

func (d *IAMDouble) CreateAccessKeyWithContext(i0 context.Context, i1 *iam.CreateAccessKeyInput, i2 ...request.Option) (r0 *iam.CreateAccessKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAccessKeyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.CreateAccessKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeCreateAccessKeyWithContext(ctx context.Context, in *iam.CreateAccessKeyInput, _ ...request.Option) (*iam.CreateAccessKeyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateAccessKey cancelled", ctx.Err())
	default:
		return d.CreateAccessKey(in)
	}
}

func (d *IAMDouble) CreateAccountAlias(i0 *iam.CreateAccountAliasInput) (r0 *iam.CreateAccountAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAccountAlias", i0)
	r0, _ = returns[0].(*iam.CreateAccountAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) CreateAccountAliasRequest(i0 *iam.CreateAccountAliasInput) (r0 *request.Request, r1 *iam.CreateAccountAliasOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAccountAliasRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.CreateAccountAliasOutput)
	return
}

func (d *IAMDouble) CreateAccountAliasWithContext(i0 context.Context, i1 *iam.CreateAccountAliasInput, i2 ...request.Option) (r0 *iam.CreateAccountAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAccountAliasWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.CreateAccountAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeCreateAccountAliasWithContext(ctx context.Context, in *iam.CreateAccountAliasInput, _ ...request.Option) (*iam.CreateAccountAliasOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateAccountAlias cancelled", ctx.Err())
	default:
		return d.CreateAccountAlias(in)
	}
}

func (d *IAMDouble) CreateGroup(i0 *iam.CreateGroupInput) (r0 *iam.CreateGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGroup", i0)
	r0, _ = returns[0].(*iam.CreateGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) CreateGroupRequest(i0 *iam.CreateGroupInput) (r0 *request.Request, r1 *iam.CreateGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.CreateGroupOutput)
	return
}

func (d *IAMDouble) CreateGroupWithContext(i0 context.Context, i1 *iam.CreateGroupInput, i2 ...request.Option) (r0 *iam.CreateGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.CreateGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeCreateGroupWithContext(ctx context.Context, in *iam.CreateGroupInput, _ ...request.Option) (*iam.CreateGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateGroup cancelled", ctx.Err())
	default:
		return d.CreateGroup(in)
	}
}

func (d *IAMDouble) CreateInstanceProfile(i0 *iam.CreateInstanceProfileInput) (r0 *iam.CreateInstanceProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInstanceProfile", i0)
	r0, _ = returns[0].(*iam.CreateInstanceProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) CreateInstanceProfileRequest(i0 *iam.CreateInstanceProfileInput) (r0 *request.Request, r1 *iam.CreateInstanceProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInstanceProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.CreateInstanceProfileOutput)
	return
}

func (d *IAMDouble) CreateInstanceProfileWithContext(i0 context.Context, i1 *iam.CreateInstanceProfileInput, i2 ...request.Option) (r0 *iam.CreateInstanceProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInstanceProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.CreateInstanceProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeCreateInstanceProfileWithContext(ctx context.Context, in *iam.CreateInstanceProfileInput, _ ...request.Option) (*iam.CreateInstanceProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateInstanceProfile cancelled", ctx.Err())
	default:
		return d.CreateInstanceProfile(in)
	}
}

func (d *IAMDouble) CreateLoginProfile(i0 *iam.CreateLoginProfileInput) (r0 *iam.CreateLoginProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLoginProfile", i0)
	r0, _ = returns[0].(*iam.CreateLoginProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) CreateLoginProfileRequest(i0 *iam.CreateLoginProfileInput) (r0 *request.Request, r1 *iam.CreateLoginProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLoginProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.CreateLoginProfileOutput)
	return
}

func (d *IAMDouble) CreateLoginProfileWithContext(i0 context.Context, i1 *iam.CreateLoginProfileInput, i2 ...request.Option) (r0 *iam.CreateLoginProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLoginProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.CreateLoginProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeCreateLoginProfileWithContext(ctx context.Context, in *iam.CreateLoginProfileInput, _ ...request.Option) (*iam.CreateLoginProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateLoginProfile cancelled", ctx.Err())
	default:
		return d.CreateLoginProfile(in)
	}
}

func (d *IAMDouble) CreateOpenIDConnectProvider(i0 *iam.CreateOpenIDConnectProviderInput) (r0 *iam.CreateOpenIDConnectProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateOpenIDConnectProvider", i0)
	r0, _ = returns[0].(*iam.CreateOpenIDConnectProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) CreateOpenIDConnectProviderRequest(i0 *iam.CreateOpenIDConnectProviderInput) (r0 *request.Request, r1 *iam.CreateOpenIDConnectProviderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateOpenIDConnectProviderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.CreateOpenIDConnectProviderOutput)
	return
}

func (d *IAMDouble) CreateOpenIDConnectProviderWithContext(i0 context.Context, i1 *iam.CreateOpenIDConnectProviderInput, i2 ...request.Option) (r0 *iam.CreateOpenIDConnectProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateOpenIDConnectProviderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.CreateOpenIDConnectProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeCreateOpenIDConnectProviderWithContext(ctx context.Context, in *iam.CreateOpenIDConnectProviderInput, _ ...request.Option) (*iam.CreateOpenIDConnectProviderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateOpenIDConnectProvider cancelled", ctx.Err())
	default:
		return d.CreateOpenIDConnectProvider(in)
	}
}

func (d *IAMDouble) CreatePolicy(i0 *iam.CreatePolicyInput) (r0 *iam.CreatePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePolicy", i0)
	r0, _ = returns[0].(*iam.CreatePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) CreatePolicyRequest(i0 *iam.CreatePolicyInput) (r0 *request.Request, r1 *iam.CreatePolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.CreatePolicyOutput)
	return
}

func (d *IAMDouble) CreatePolicyVersion(i0 *iam.CreatePolicyVersionInput) (r0 *iam.CreatePolicyVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePolicyVersion", i0)
	r0, _ = returns[0].(*iam.CreatePolicyVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) CreatePolicyVersionRequest(i0 *iam.CreatePolicyVersionInput) (r0 *request.Request, r1 *iam.CreatePolicyVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePolicyVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.CreatePolicyVersionOutput)
	return
}

func (d *IAMDouble) CreatePolicyVersionWithContext(i0 context.Context, i1 *iam.CreatePolicyVersionInput, i2 ...request.Option) (r0 *iam.CreatePolicyVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePolicyVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.CreatePolicyVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeCreatePolicyVersionWithContext(ctx context.Context, in *iam.CreatePolicyVersionInput, _ ...request.Option) (*iam.CreatePolicyVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreatePolicyVersion cancelled", ctx.Err())
	default:
		return d.CreatePolicyVersion(in)
	}
}

func (d *IAMDouble) CreatePolicyWithContext(i0 context.Context, i1 *iam.CreatePolicyInput, i2 ...request.Option) (r0 *iam.CreatePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.CreatePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeCreatePolicyWithContext(ctx context.Context, in *iam.CreatePolicyInput, _ ...request.Option) (*iam.CreatePolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreatePolicy cancelled", ctx.Err())
	default:
		return d.CreatePolicy(in)
	}
}

func (d *IAMDouble) CreateRole(i0 *iam.CreateRoleInput) (r0 *iam.CreateRoleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRole", i0)
	r0, _ = returns[0].(*iam.CreateRoleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) CreateRoleRequest(i0 *iam.CreateRoleInput) (r0 *request.Request, r1 *iam.CreateRoleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRoleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.CreateRoleOutput)
	return
}

func (d *IAMDouble) CreateRoleWithContext(i0 context.Context, i1 *iam.CreateRoleInput, i2 ...request.Option) (r0 *iam.CreateRoleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRoleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.CreateRoleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeCreateRoleWithContext(ctx context.Context, in *iam.CreateRoleInput, _ ...request.Option) (*iam.CreateRoleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateRole cancelled", ctx.Err())
	default:
		return d.CreateRole(in)
	}
}

func (d *IAMDouble) CreateSAMLProvider(i0 *iam.CreateSAMLProviderInput) (r0 *iam.CreateSAMLProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSAMLProvider", i0)
	r0, _ = returns[0].(*iam.CreateSAMLProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) CreateSAMLProviderRequest(i0 *iam.CreateSAMLProviderInput) (r0 *request.Request, r1 *iam.CreateSAMLProviderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSAMLProviderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.CreateSAMLProviderOutput)
	return
}

func (d *IAMDouble) CreateSAMLProviderWithContext(i0 context.Context, i1 *iam.CreateSAMLProviderInput, i2 ...request.Option) (r0 *iam.CreateSAMLProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSAMLProviderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.CreateSAMLProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeCreateSAMLProviderWithContext(ctx context.Context, in *iam.CreateSAMLProviderInput, _ ...request.Option) (*iam.CreateSAMLProviderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateSAMLProvider cancelled", ctx.Err())
	default:
		return d.CreateSAMLProvider(in)
	}
}

func (d *IAMDouble) CreateServiceLinkedRole(i0 *iam.CreateServiceLinkedRoleInput) (r0 *iam.CreateServiceLinkedRoleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateServiceLinkedRole", i0)
	r0, _ = returns[0].(*iam.CreateServiceLinkedRoleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) CreateServiceLinkedRoleRequest(i0 *iam.CreateServiceLinkedRoleInput) (r0 *request.Request, r1 *iam.CreateServiceLinkedRoleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateServiceLinkedRoleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.CreateServiceLinkedRoleOutput)
	return
}

func (d *IAMDouble) CreateServiceLinkedRoleWithContext(i0 context.Context, i1 *iam.CreateServiceLinkedRoleInput, i2 ...request.Option) (r0 *iam.CreateServiceLinkedRoleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateServiceLinkedRoleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.CreateServiceLinkedRoleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeCreateServiceLinkedRoleWithContext(ctx context.Context, in *iam.CreateServiceLinkedRoleInput, _ ...request.Option) (*iam.CreateServiceLinkedRoleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateServiceLinkedRole cancelled", ctx.Err())
	default:
		return d.CreateServiceLinkedRole(in)
	}
}

func (d *IAMDouble) CreateServiceSpecificCredential(i0 *iam.CreateServiceSpecificCredentialInput) (r0 *iam.CreateServiceSpecificCredentialOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateServiceSpecificCredential", i0)
	r0, _ = returns[0].(*iam.CreateServiceSpecificCredentialOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) CreateServiceSpecificCredentialRequest(i0 *iam.CreateServiceSpecificCredentialInput) (r0 *request.Request, r1 *iam.CreateServiceSpecificCredentialOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateServiceSpecificCredentialRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.CreateServiceSpecificCredentialOutput)
	return
}

func (d *IAMDouble) CreateServiceSpecificCredentialWithContext(i0 context.Context, i1 *iam.CreateServiceSpecificCredentialInput, i2 ...request.Option) (r0 *iam.CreateServiceSpecificCredentialOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateServiceSpecificCredentialWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.CreateServiceSpecificCredentialOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeCreateServiceSpecificCredentialWithContext(ctx context.Context, in *iam.CreateServiceSpecificCredentialInput, _ ...request.Option) (*iam.CreateServiceSpecificCredentialOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateServiceSpecificCredential cancelled", ctx.Err())
	default:
		return d.CreateServiceSpecificCredential(in)
	}
}

func (d *IAMDouble) CreateUser(i0 *iam.CreateUserInput) (r0 *iam.CreateUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUser", i0)
	r0, _ = returns[0].(*iam.CreateUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) CreateUserRequest(i0 *iam.CreateUserInput) (r0 *request.Request, r1 *iam.CreateUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.CreateUserOutput)
	return
}

func (d *IAMDouble) CreateUserWithContext(i0 context.Context, i1 *iam.CreateUserInput, i2 ...request.Option) (r0 *iam.CreateUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.CreateUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeCreateUserWithContext(ctx context.Context, in *iam.CreateUserInput, _ ...request.Option) (*iam.CreateUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateUser cancelled", ctx.Err())
	default:
		return d.CreateUser(in)
	}
}

func (d *IAMDouble) CreateVirtualMFADevice(i0 *iam.CreateVirtualMFADeviceInput) (r0 *iam.CreateVirtualMFADeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVirtualMFADevice", i0)
	r0, _ = returns[0].(*iam.CreateVirtualMFADeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) CreateVirtualMFADeviceRequest(i0 *iam.CreateVirtualMFADeviceInput) (r0 *request.Request, r1 *iam.CreateVirtualMFADeviceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVirtualMFADeviceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.CreateVirtualMFADeviceOutput)
	return
}

func (d *IAMDouble) CreateVirtualMFADeviceWithContext(i0 context.Context, i1 *iam.CreateVirtualMFADeviceInput, i2 ...request.Option) (r0 *iam.CreateVirtualMFADeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVirtualMFADeviceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.CreateVirtualMFADeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeCreateVirtualMFADeviceWithContext(ctx context.Context, in *iam.CreateVirtualMFADeviceInput, _ ...request.Option) (*iam.CreateVirtualMFADeviceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateVirtualMFADevice cancelled", ctx.Err())
	default:
		return d.CreateVirtualMFADevice(in)
	}
}

func (d *IAMDouble) DeactivateMFADevice(i0 *iam.DeactivateMFADeviceInput) (r0 *iam.DeactivateMFADeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeactivateMFADevice", i0)
	r0, _ = returns[0].(*iam.DeactivateMFADeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) DeactivateMFADeviceRequest(i0 *iam.DeactivateMFADeviceInput) (r0 *request.Request, r1 *iam.DeactivateMFADeviceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeactivateMFADeviceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.DeactivateMFADeviceOutput)
	return
}

func (d *IAMDouble) DeactivateMFADeviceWithContext(i0 context.Context, i1 *iam.DeactivateMFADeviceInput, i2 ...request.Option) (r0 *iam.DeactivateMFADeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeactivateMFADeviceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.DeactivateMFADeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeDeactivateMFADeviceWithContext(ctx context.Context, in *iam.DeactivateMFADeviceInput, _ ...request.Option) (*iam.DeactivateMFADeviceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeactivateMFADevice cancelled", ctx.Err())
	default:
		return d.DeactivateMFADevice(in)
	}
}

func (d *IAMDouble) DeleteAccessKey(i0 *iam.DeleteAccessKeyInput) (r0 *iam.DeleteAccessKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAccessKey", i0)
	r0, _ = returns[0].(*iam.DeleteAccessKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) DeleteAccessKeyRequest(i0 *iam.DeleteAccessKeyInput) (r0 *request.Request, r1 *iam.DeleteAccessKeyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAccessKeyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.DeleteAccessKeyOutput)
	return
}

func (d *IAMDouble) DeleteAccessKeyWithContext(i0 context.Context, i1 *iam.DeleteAccessKeyInput, i2 ...request.Option) (r0 *iam.DeleteAccessKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAccessKeyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.DeleteAccessKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeDeleteAccessKeyWithContext(ctx context.Context, in *iam.DeleteAccessKeyInput, _ ...request.Option) (*iam.DeleteAccessKeyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteAccessKey cancelled", ctx.Err())
	default:
		return d.DeleteAccessKey(in)
	}
}

func (d *IAMDouble) DeleteAccountAlias(i0 *iam.DeleteAccountAliasInput) (r0 *iam.DeleteAccountAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAccountAlias", i0)
	r0, _ = returns[0].(*iam.DeleteAccountAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) DeleteAccountAliasRequest(i0 *iam.DeleteAccountAliasInput) (r0 *request.Request, r1 *iam.DeleteAccountAliasOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAccountAliasRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.DeleteAccountAliasOutput)
	return
}

func (d *IAMDouble) DeleteAccountAliasWithContext(i0 context.Context, i1 *iam.DeleteAccountAliasInput, i2 ...request.Option) (r0 *iam.DeleteAccountAliasOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAccountAliasWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.DeleteAccountAliasOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeDeleteAccountAliasWithContext(ctx context.Context, in *iam.DeleteAccountAliasInput, _ ...request.Option) (*iam.DeleteAccountAliasOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteAccountAlias cancelled", ctx.Err())
	default:
		return d.DeleteAccountAlias(in)
	}
}

func (d *IAMDouble) DeleteAccountPasswordPolicy(i0 *iam.DeleteAccountPasswordPolicyInput) (r0 *iam.DeleteAccountPasswordPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAccountPasswordPolicy", i0)
	r0, _ = returns[0].(*iam.DeleteAccountPasswordPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) DeleteAccountPasswordPolicyRequest(i0 *iam.DeleteAccountPasswordPolicyInput) (r0 *request.Request, r1 *iam.DeleteAccountPasswordPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAccountPasswordPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.DeleteAccountPasswordPolicyOutput)
	return
}

func (d *IAMDouble) DeleteAccountPasswordPolicyWithContext(i0 context.Context, i1 *iam.DeleteAccountPasswordPolicyInput, i2 ...request.Option) (r0 *iam.DeleteAccountPasswordPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAccountPasswordPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.DeleteAccountPasswordPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeDeleteAccountPasswordPolicyWithContext(ctx context.Context, in *iam.DeleteAccountPasswordPolicyInput, _ ...request.Option) (*iam.DeleteAccountPasswordPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteAccountPasswordPolicy cancelled", ctx.Err())
	default:
		return d.DeleteAccountPasswordPolicy(in)
	}
}

func (d *IAMDouble) DeleteGroup(i0 *iam.DeleteGroupInput) (r0 *iam.DeleteGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGroup", i0)
	r0, _ = returns[0].(*iam.DeleteGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) DeleteGroupPolicy(i0 *iam.DeleteGroupPolicyInput) (r0 *iam.DeleteGroupPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGroupPolicy", i0)
	r0, _ = returns[0].(*iam.DeleteGroupPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) DeleteGroupPolicyRequest(i0 *iam.DeleteGroupPolicyInput) (r0 *request.Request, r1 *iam.DeleteGroupPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGroupPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.DeleteGroupPolicyOutput)
	return
}

func (d *IAMDouble) DeleteGroupPolicyWithContext(i0 context.Context, i1 *iam.DeleteGroupPolicyInput, i2 ...request.Option) (r0 *iam.DeleteGroupPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGroupPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.DeleteGroupPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeDeleteGroupPolicyWithContext(ctx context.Context, in *iam.DeleteGroupPolicyInput, _ ...request.Option) (*iam.DeleteGroupPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteGroupPolicy cancelled", ctx.Err())
	default:
		return d.DeleteGroupPolicy(in)
	}
}

func (d *IAMDouble) DeleteGroupRequest(i0 *iam.DeleteGroupInput) (r0 *request.Request, r1 *iam.DeleteGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.DeleteGroupOutput)
	return
}

func (d *IAMDouble) DeleteGroupWithContext(i0 context.Context, i1 *iam.DeleteGroupInput, i2 ...request.Option) (r0 *iam.DeleteGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.DeleteGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeDeleteGroupWithContext(ctx context.Context, in *iam.DeleteGroupInput, _ ...request.Option) (*iam.DeleteGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteGroup cancelled", ctx.Err())
	default:
		return d.DeleteGroup(in)
	}
}

func (d *IAMDouble) DeleteInstanceProfile(i0 *iam.DeleteInstanceProfileInput) (r0 *iam.DeleteInstanceProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInstanceProfile", i0)
	r0, _ = returns[0].(*iam.DeleteInstanceProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) DeleteInstanceProfileRequest(i0 *iam.DeleteInstanceProfileInput) (r0 *request.Request, r1 *iam.DeleteInstanceProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInstanceProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.DeleteInstanceProfileOutput)
	return
}

func (d *IAMDouble) DeleteInstanceProfileWithContext(i0 context.Context, i1 *iam.DeleteInstanceProfileInput, i2 ...request.Option) (r0 *iam.DeleteInstanceProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInstanceProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.DeleteInstanceProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeDeleteInstanceProfileWithContext(ctx context.Context, in *iam.DeleteInstanceProfileInput, _ ...request.Option) (*iam.DeleteInstanceProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteInstanceProfile cancelled", ctx.Err())
	default:
		return d.DeleteInstanceProfile(in)
	}
}

func (d *IAMDouble) DeleteLoginProfile(i0 *iam.DeleteLoginProfileInput) (r0 *iam.DeleteLoginProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLoginProfile", i0)
	r0, _ = returns[0].(*iam.DeleteLoginProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) DeleteLoginProfileRequest(i0 *iam.DeleteLoginProfileInput) (r0 *request.Request, r1 *iam.DeleteLoginProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLoginProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.DeleteLoginProfileOutput)
	return
}

func (d *IAMDouble) DeleteLoginProfileWithContext(i0 context.Context, i1 *iam.DeleteLoginProfileInput, i2 ...request.Option) (r0 *iam.DeleteLoginProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLoginProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.DeleteLoginProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeDeleteLoginProfileWithContext(ctx context.Context, in *iam.DeleteLoginProfileInput, _ ...request.Option) (*iam.DeleteLoginProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteLoginProfile cancelled", ctx.Err())
	default:
		return d.DeleteLoginProfile(in)
	}
}

func (d *IAMDouble) DeleteOpenIDConnectProvider(i0 *iam.DeleteOpenIDConnectProviderInput) (r0 *iam.DeleteOpenIDConnectProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteOpenIDConnectProvider", i0)
	r0, _ = returns[0].(*iam.DeleteOpenIDConnectProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) DeleteOpenIDConnectProviderRequest(i0 *iam.DeleteOpenIDConnectProviderInput) (r0 *request.Request, r1 *iam.DeleteOpenIDConnectProviderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteOpenIDConnectProviderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.DeleteOpenIDConnectProviderOutput)
	return
}

func (d *IAMDouble) DeleteOpenIDConnectProviderWithContext(i0 context.Context, i1 *iam.DeleteOpenIDConnectProviderInput, i2 ...request.Option) (r0 *iam.DeleteOpenIDConnectProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteOpenIDConnectProviderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.DeleteOpenIDConnectProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeDeleteOpenIDConnectProviderWithContext(ctx context.Context, in *iam.DeleteOpenIDConnectProviderInput, _ ...request.Option) (*iam.DeleteOpenIDConnectProviderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteOpenIDConnectProvider cancelled", ctx.Err())
	default:
		return d.DeleteOpenIDConnectProvider(in)
	}
}

func (d *IAMDouble) DeletePolicy(i0 *iam.DeletePolicyInput) (r0 *iam.DeletePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePolicy", i0)
	r0, _ = returns[0].(*iam.DeletePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) DeletePolicyRequest(i0 *iam.DeletePolicyInput) (r0 *request.Request, r1 *iam.DeletePolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.DeletePolicyOutput)
	return
}

func (d *IAMDouble) DeletePolicyVersion(i0 *iam.DeletePolicyVersionInput) (r0 *iam.DeletePolicyVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePolicyVersion", i0)
	r0, _ = returns[0].(*iam.DeletePolicyVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) DeletePolicyVersionRequest(i0 *iam.DeletePolicyVersionInput) (r0 *request.Request, r1 *iam.DeletePolicyVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePolicyVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.DeletePolicyVersionOutput)
	return
}

func (d *IAMDouble) DeletePolicyVersionWithContext(i0 context.Context, i1 *iam.DeletePolicyVersionInput, i2 ...request.Option) (r0 *iam.DeletePolicyVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePolicyVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.DeletePolicyVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeDeletePolicyVersionWithContext(ctx context.Context, in *iam.DeletePolicyVersionInput, _ ...request.Option) (*iam.DeletePolicyVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeletePolicyVersion cancelled", ctx.Err())
	default:
		return d.DeletePolicyVersion(in)
	}
}

func (d *IAMDouble) DeletePolicyWithContext(i0 context.Context, i1 *iam.DeletePolicyInput, i2 ...request.Option) (r0 *iam.DeletePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.DeletePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeDeletePolicyWithContext(ctx context.Context, in *iam.DeletePolicyInput, _ ...request.Option) (*iam.DeletePolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeletePolicy cancelled", ctx.Err())
	default:
		return d.DeletePolicy(in)
	}
}

func (d *IAMDouble) DeleteRole(i0 *iam.DeleteRoleInput) (r0 *iam.DeleteRoleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRole", i0)
	r0, _ = returns[0].(*iam.DeleteRoleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) DeleteRolePermissionsBoundary(i0 *iam.DeleteRolePermissionsBoundaryInput) (r0 *iam.DeleteRolePermissionsBoundaryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRolePermissionsBoundary", i0)
	r0, _ = returns[0].(*iam.DeleteRolePermissionsBoundaryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) DeleteRolePermissionsBoundaryRequest(i0 *iam.DeleteRolePermissionsBoundaryInput) (r0 *request.Request, r1 *iam.DeleteRolePermissionsBoundaryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRolePermissionsBoundaryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.DeleteRolePermissionsBoundaryOutput)
	return
}

func (d *IAMDouble) DeleteRolePermissionsBoundaryWithContext(i0 context.Context, i1 *iam.DeleteRolePermissionsBoundaryInput, i2 ...request.Option) (r0 *iam.DeleteRolePermissionsBoundaryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRolePermissionsBoundaryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.DeleteRolePermissionsBoundaryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeDeleteRolePermissionsBoundaryWithContext(ctx context.Context, in *iam.DeleteRolePermissionsBoundaryInput, _ ...request.Option) (*iam.DeleteRolePermissionsBoundaryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRolePermissionsBoundary cancelled", ctx.Err())
	default:
		return d.DeleteRolePermissionsBoundary(in)
	}
}

func (d *IAMDouble) DeleteRolePolicy(i0 *iam.DeleteRolePolicyInput) (r0 *iam.DeleteRolePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRolePolicy", i0)
	r0, _ = returns[0].(*iam.DeleteRolePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) DeleteRolePolicyRequest(i0 *iam.DeleteRolePolicyInput) (r0 *request.Request, r1 *iam.DeleteRolePolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRolePolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.DeleteRolePolicyOutput)
	return
}

func (d *IAMDouble) DeleteRolePolicyWithContext(i0 context.Context, i1 *iam.DeleteRolePolicyInput, i2 ...request.Option) (r0 *iam.DeleteRolePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRolePolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.DeleteRolePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeDeleteRolePolicyWithContext(ctx context.Context, in *iam.DeleteRolePolicyInput, _ ...request.Option) (*iam.DeleteRolePolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRolePolicy cancelled", ctx.Err())
	default:
		return d.DeleteRolePolicy(in)
	}
}

func (d *IAMDouble) DeleteRoleRequest(i0 *iam.DeleteRoleInput) (r0 *request.Request, r1 *iam.DeleteRoleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRoleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.DeleteRoleOutput)
	return
}

func (d *IAMDouble) DeleteRoleWithContext(i0 context.Context, i1 *iam.DeleteRoleInput, i2 ...request.Option) (r0 *iam.DeleteRoleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRoleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.DeleteRoleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeDeleteRoleWithContext(ctx context.Context, in *iam.DeleteRoleInput, _ ...request.Option) (*iam.DeleteRoleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRole cancelled", ctx.Err())
	default:
		return d.DeleteRole(in)
	}
}

func (d *IAMDouble) DeleteSAMLProvider(i0 *iam.DeleteSAMLProviderInput) (r0 *iam.DeleteSAMLProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSAMLProvider", i0)
	r0, _ = returns[0].(*iam.DeleteSAMLProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) DeleteSAMLProviderRequest(i0 *iam.DeleteSAMLProviderInput) (r0 *request.Request, r1 *iam.DeleteSAMLProviderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSAMLProviderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.DeleteSAMLProviderOutput)
	return
}

func (d *IAMDouble) DeleteSAMLProviderWithContext(i0 context.Context, i1 *iam.DeleteSAMLProviderInput, i2 ...request.Option) (r0 *iam.DeleteSAMLProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSAMLProviderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.DeleteSAMLProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeDeleteSAMLProviderWithContext(ctx context.Context, in *iam.DeleteSAMLProviderInput, _ ...request.Option) (*iam.DeleteSAMLProviderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteSAMLProvider cancelled", ctx.Err())
	default:
		return d.DeleteSAMLProvider(in)
	}
}

func (d *IAMDouble) DeleteSSHPublicKey(i0 *iam.DeleteSSHPublicKeyInput) (r0 *iam.DeleteSSHPublicKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSSHPublicKey", i0)
	r0, _ = returns[0].(*iam.DeleteSSHPublicKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) DeleteSSHPublicKeyRequest(i0 *iam.DeleteSSHPublicKeyInput) (r0 *request.Request, r1 *iam.DeleteSSHPublicKeyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSSHPublicKeyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.DeleteSSHPublicKeyOutput)
	return
}

func (d *IAMDouble) DeleteSSHPublicKeyWithContext(i0 context.Context, i1 *iam.DeleteSSHPublicKeyInput, i2 ...request.Option) (r0 *iam.DeleteSSHPublicKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSSHPublicKeyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.DeleteSSHPublicKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeDeleteSSHPublicKeyWithContext(ctx context.Context, in *iam.DeleteSSHPublicKeyInput, _ ...request.Option) (*iam.DeleteSSHPublicKeyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteSSHPublicKey cancelled", ctx.Err())
	default:
		return d.DeleteSSHPublicKey(in)
	}
}

func (d *IAMDouble) DeleteServerCertificate(i0 *iam.DeleteServerCertificateInput) (r0 *iam.DeleteServerCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteServerCertificate", i0)
	r0, _ = returns[0].(*iam.DeleteServerCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) DeleteServerCertificateRequest(i0 *iam.DeleteServerCertificateInput) (r0 *request.Request, r1 *iam.DeleteServerCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteServerCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.DeleteServerCertificateOutput)
	return
}

func (d *IAMDouble) DeleteServerCertificateWithContext(i0 context.Context, i1 *iam.DeleteServerCertificateInput, i2 ...request.Option) (r0 *iam.DeleteServerCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteServerCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.DeleteServerCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeDeleteServerCertificateWithContext(ctx context.Context, in *iam.DeleteServerCertificateInput, _ ...request.Option) (*iam.DeleteServerCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteServerCertificate cancelled", ctx.Err())
	default:
		return d.DeleteServerCertificate(in)
	}
}

func (d *IAMDouble) DeleteServiceLinkedRole(i0 *iam.DeleteServiceLinkedRoleInput) (r0 *iam.DeleteServiceLinkedRoleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteServiceLinkedRole", i0)
	r0, _ = returns[0].(*iam.DeleteServiceLinkedRoleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) DeleteServiceLinkedRoleRequest(i0 *iam.DeleteServiceLinkedRoleInput) (r0 *request.Request, r1 *iam.DeleteServiceLinkedRoleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteServiceLinkedRoleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.DeleteServiceLinkedRoleOutput)
	return
}

func (d *IAMDouble) DeleteServiceLinkedRoleWithContext(i0 context.Context, i1 *iam.DeleteServiceLinkedRoleInput, i2 ...request.Option) (r0 *iam.DeleteServiceLinkedRoleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteServiceLinkedRoleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.DeleteServiceLinkedRoleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeDeleteServiceLinkedRoleWithContext(ctx context.Context, in *iam.DeleteServiceLinkedRoleInput, _ ...request.Option) (*iam.DeleteServiceLinkedRoleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteServiceLinkedRole cancelled", ctx.Err())
	default:
		return d.DeleteServiceLinkedRole(in)
	}
}

func (d *IAMDouble) DeleteServiceSpecificCredential(i0 *iam.DeleteServiceSpecificCredentialInput) (r0 *iam.DeleteServiceSpecificCredentialOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteServiceSpecificCredential", i0)
	r0, _ = returns[0].(*iam.DeleteServiceSpecificCredentialOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) DeleteServiceSpecificCredentialRequest(i0 *iam.DeleteServiceSpecificCredentialInput) (r0 *request.Request, r1 *iam.DeleteServiceSpecificCredentialOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteServiceSpecificCredentialRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.DeleteServiceSpecificCredentialOutput)
	return
}

func (d *IAMDouble) DeleteServiceSpecificCredentialWithContext(i0 context.Context, i1 *iam.DeleteServiceSpecificCredentialInput, i2 ...request.Option) (r0 *iam.DeleteServiceSpecificCredentialOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteServiceSpecificCredentialWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.DeleteServiceSpecificCredentialOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeDeleteServiceSpecificCredentialWithContext(ctx context.Context, in *iam.DeleteServiceSpecificCredentialInput, _ ...request.Option) (*iam.DeleteServiceSpecificCredentialOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteServiceSpecificCredential cancelled", ctx.Err())
	default:
		return d.DeleteServiceSpecificCredential(in)
	}
}

func (d *IAMDouble) DeleteSigningCertificate(i0 *iam.DeleteSigningCertificateInput) (r0 *iam.DeleteSigningCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSigningCertificate", i0)
	r0, _ = returns[0].(*iam.DeleteSigningCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) DeleteSigningCertificateRequest(i0 *iam.DeleteSigningCertificateInput) (r0 *request.Request, r1 *iam.DeleteSigningCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSigningCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.DeleteSigningCertificateOutput)
	return
}

func (d *IAMDouble) DeleteSigningCertificateWithContext(i0 context.Context, i1 *iam.DeleteSigningCertificateInput, i2 ...request.Option) (r0 *iam.DeleteSigningCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSigningCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.DeleteSigningCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeDeleteSigningCertificateWithContext(ctx context.Context, in *iam.DeleteSigningCertificateInput, _ ...request.Option) (*iam.DeleteSigningCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteSigningCertificate cancelled", ctx.Err())
	default:
		return d.DeleteSigningCertificate(in)
	}
}

func (d *IAMDouble) DeleteUser(i0 *iam.DeleteUserInput) (r0 *iam.DeleteUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUser", i0)
	r0, _ = returns[0].(*iam.DeleteUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) DeleteUserPermissionsBoundary(i0 *iam.DeleteUserPermissionsBoundaryInput) (r0 *iam.DeleteUserPermissionsBoundaryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserPermissionsBoundary", i0)
	r0, _ = returns[0].(*iam.DeleteUserPermissionsBoundaryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) DeleteUserPermissionsBoundaryRequest(i0 *iam.DeleteUserPermissionsBoundaryInput) (r0 *request.Request, r1 *iam.DeleteUserPermissionsBoundaryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserPermissionsBoundaryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.DeleteUserPermissionsBoundaryOutput)
	return
}

func (d *IAMDouble) DeleteUserPermissionsBoundaryWithContext(i0 context.Context, i1 *iam.DeleteUserPermissionsBoundaryInput, i2 ...request.Option) (r0 *iam.DeleteUserPermissionsBoundaryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserPermissionsBoundaryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.DeleteUserPermissionsBoundaryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeDeleteUserPermissionsBoundaryWithContext(ctx context.Context, in *iam.DeleteUserPermissionsBoundaryInput, _ ...request.Option) (*iam.DeleteUserPermissionsBoundaryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteUserPermissionsBoundary cancelled", ctx.Err())
	default:
		return d.DeleteUserPermissionsBoundary(in)
	}
}

func (d *IAMDouble) DeleteUserPolicy(i0 *iam.DeleteUserPolicyInput) (r0 *iam.DeleteUserPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserPolicy", i0)
	r0, _ = returns[0].(*iam.DeleteUserPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) DeleteUserPolicyRequest(i0 *iam.DeleteUserPolicyInput) (r0 *request.Request, r1 *iam.DeleteUserPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.DeleteUserPolicyOutput)
	return
}

func (d *IAMDouble) DeleteUserPolicyWithContext(i0 context.Context, i1 *iam.DeleteUserPolicyInput, i2 ...request.Option) (r0 *iam.DeleteUserPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.DeleteUserPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeDeleteUserPolicyWithContext(ctx context.Context, in *iam.DeleteUserPolicyInput, _ ...request.Option) (*iam.DeleteUserPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteUserPolicy cancelled", ctx.Err())
	default:
		return d.DeleteUserPolicy(in)
	}
}

func (d *IAMDouble) DeleteUserRequest(i0 *iam.DeleteUserInput) (r0 *request.Request, r1 *iam.DeleteUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.DeleteUserOutput)
	return
}

func (d *IAMDouble) DeleteUserWithContext(i0 context.Context, i1 *iam.DeleteUserInput, i2 ...request.Option) (r0 *iam.DeleteUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.DeleteUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeDeleteUserWithContext(ctx context.Context, in *iam.DeleteUserInput, _ ...request.Option) (*iam.DeleteUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteUser cancelled", ctx.Err())
	default:
		return d.DeleteUser(in)
	}
}

func (d *IAMDouble) DeleteVirtualMFADevice(i0 *iam.DeleteVirtualMFADeviceInput) (r0 *iam.DeleteVirtualMFADeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVirtualMFADevice", i0)
	r0, _ = returns[0].(*iam.DeleteVirtualMFADeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) DeleteVirtualMFADeviceRequest(i0 *iam.DeleteVirtualMFADeviceInput) (r0 *request.Request, r1 *iam.DeleteVirtualMFADeviceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVirtualMFADeviceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.DeleteVirtualMFADeviceOutput)
	return
}

func (d *IAMDouble) DeleteVirtualMFADeviceWithContext(i0 context.Context, i1 *iam.DeleteVirtualMFADeviceInput, i2 ...request.Option) (r0 *iam.DeleteVirtualMFADeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVirtualMFADeviceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.DeleteVirtualMFADeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeDeleteVirtualMFADeviceWithContext(ctx context.Context, in *iam.DeleteVirtualMFADeviceInput, _ ...request.Option) (*iam.DeleteVirtualMFADeviceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteVirtualMFADevice cancelled", ctx.Err())
	default:
		return d.DeleteVirtualMFADevice(in)
	}
}

func (d *IAMDouble) DetachGroupPolicy(i0 *iam.DetachGroupPolicyInput) (r0 *iam.DetachGroupPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachGroupPolicy", i0)
	r0, _ = returns[0].(*iam.DetachGroupPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) DetachGroupPolicyRequest(i0 *iam.DetachGroupPolicyInput) (r0 *request.Request, r1 *iam.DetachGroupPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachGroupPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.DetachGroupPolicyOutput)
	return
}

func (d *IAMDouble) DetachGroupPolicyWithContext(i0 context.Context, i1 *iam.DetachGroupPolicyInput, i2 ...request.Option) (r0 *iam.DetachGroupPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachGroupPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.DetachGroupPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeDetachGroupPolicyWithContext(ctx context.Context, in *iam.DetachGroupPolicyInput, _ ...request.Option) (*iam.DetachGroupPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DetachGroupPolicy cancelled", ctx.Err())
	default:
		return d.DetachGroupPolicy(in)
	}
}

func (d *IAMDouble) DetachRolePolicy(i0 *iam.DetachRolePolicyInput) (r0 *iam.DetachRolePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachRolePolicy", i0)
	r0, _ = returns[0].(*iam.DetachRolePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) DetachRolePolicyRequest(i0 *iam.DetachRolePolicyInput) (r0 *request.Request, r1 *iam.DetachRolePolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachRolePolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.DetachRolePolicyOutput)
	return
}

func (d *IAMDouble) DetachRolePolicyWithContext(i0 context.Context, i1 *iam.DetachRolePolicyInput, i2 ...request.Option) (r0 *iam.DetachRolePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachRolePolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.DetachRolePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeDetachRolePolicyWithContext(ctx context.Context, in *iam.DetachRolePolicyInput, _ ...request.Option) (*iam.DetachRolePolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DetachRolePolicy cancelled", ctx.Err())
	default:
		return d.DetachRolePolicy(in)
	}
}

func (d *IAMDouble) DetachUserPolicy(i0 *iam.DetachUserPolicyInput) (r0 *iam.DetachUserPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachUserPolicy", i0)
	r0, _ = returns[0].(*iam.DetachUserPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) DetachUserPolicyRequest(i0 *iam.DetachUserPolicyInput) (r0 *request.Request, r1 *iam.DetachUserPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachUserPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.DetachUserPolicyOutput)
	return
}

func (d *IAMDouble) DetachUserPolicyWithContext(i0 context.Context, i1 *iam.DetachUserPolicyInput, i2 ...request.Option) (r0 *iam.DetachUserPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachUserPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.DetachUserPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeDetachUserPolicyWithContext(ctx context.Context, in *iam.DetachUserPolicyInput, _ ...request.Option) (*iam.DetachUserPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DetachUserPolicy cancelled", ctx.Err())
	default:
		return d.DetachUserPolicy(in)
	}
}

func (d *IAMDouble) EnableMFADevice(i0 *iam.EnableMFADeviceInput) (r0 *iam.EnableMFADeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableMFADevice", i0)
	r0, _ = returns[0].(*iam.EnableMFADeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) EnableMFADeviceRequest(i0 *iam.EnableMFADeviceInput) (r0 *request.Request, r1 *iam.EnableMFADeviceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableMFADeviceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.EnableMFADeviceOutput)
	return
}

func (d *IAMDouble) EnableMFADeviceWithContext(i0 context.Context, i1 *iam.EnableMFADeviceInput, i2 ...request.Option) (r0 *iam.EnableMFADeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableMFADeviceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.EnableMFADeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeEnableMFADeviceWithContext(ctx context.Context, in *iam.EnableMFADeviceInput, _ ...request.Option) (*iam.EnableMFADeviceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "EnableMFADevice cancelled", ctx.Err())
	default:
		return d.EnableMFADevice(in)
	}
}

func (d *IAMDouble) GenerateCredentialReport(i0 *iam.GenerateCredentialReportInput) (r0 *iam.GenerateCredentialReportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateCredentialReport", i0)
	r0, _ = returns[0].(*iam.GenerateCredentialReportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) GenerateCredentialReportRequest(i0 *iam.GenerateCredentialReportInput) (r0 *request.Request, r1 *iam.GenerateCredentialReportOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateCredentialReportRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.GenerateCredentialReportOutput)
	return
}

func (d *IAMDouble) GenerateCredentialReportWithContext(i0 context.Context, i1 *iam.GenerateCredentialReportInput, i2 ...request.Option) (r0 *iam.GenerateCredentialReportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateCredentialReportWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.GenerateCredentialReportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeGenerateCredentialReportWithContext(ctx context.Context, in *iam.GenerateCredentialReportInput, _ ...request.Option) (*iam.GenerateCredentialReportOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GenerateCredentialReport cancelled", ctx.Err())
	default:
		return d.GenerateCredentialReport(in)
	}
}

func (d *IAMDouble) GenerateOrganizationsAccessReport(i0 *iam.GenerateOrganizationsAccessReportInput) (r0 *iam.GenerateOrganizationsAccessReportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateOrganizationsAccessReport", i0)
	r0, _ = returns[0].(*iam.GenerateOrganizationsAccessReportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) GenerateOrganizationsAccessReportRequest(i0 *iam.GenerateOrganizationsAccessReportInput) (r0 *request.Request, r1 *iam.GenerateOrganizationsAccessReportOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateOrganizationsAccessReportRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.GenerateOrganizationsAccessReportOutput)
	return
}

func (d *IAMDouble) GenerateOrganizationsAccessReportWithContext(i0 context.Context, i1 *iam.GenerateOrganizationsAccessReportInput, i2 ...request.Option) (r0 *iam.GenerateOrganizationsAccessReportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateOrganizationsAccessReportWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.GenerateOrganizationsAccessReportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeGenerateOrganizationsAccessReportWithContext(ctx context.Context, in *iam.GenerateOrganizationsAccessReportInput, _ ...request.Option) (*iam.GenerateOrganizationsAccessReportOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GenerateOrganizationsAccessReport cancelled", ctx.Err())
	default:
		return d.GenerateOrganizationsAccessReport(in)
	}
}

func (d *IAMDouble) GenerateServiceLastAccessedDetails(i0 *iam.GenerateServiceLastAccessedDetailsInput) (r0 *iam.GenerateServiceLastAccessedDetailsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateServiceLastAccessedDetails", i0)
	r0, _ = returns[0].(*iam.GenerateServiceLastAccessedDetailsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) GenerateServiceLastAccessedDetailsRequest(i0 *iam.GenerateServiceLastAccessedDetailsInput) (r0 *request.Request, r1 *iam.GenerateServiceLastAccessedDetailsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateServiceLastAccessedDetailsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.GenerateServiceLastAccessedDetailsOutput)
	return
}

func (d *IAMDouble) GenerateServiceLastAccessedDetailsWithContext(i0 context.Context, i1 *iam.GenerateServiceLastAccessedDetailsInput, i2 ...request.Option) (r0 *iam.GenerateServiceLastAccessedDetailsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateServiceLastAccessedDetailsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.GenerateServiceLastAccessedDetailsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeGenerateServiceLastAccessedDetailsWithContext(ctx context.Context, in *iam.GenerateServiceLastAccessedDetailsInput, _ ...request.Option) (*iam.GenerateServiceLastAccessedDetailsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GenerateServiceLastAccessedDetails cancelled", ctx.Err())
	default:
		return d.GenerateServiceLastAccessedDetails(in)
	}
}

func (d *IAMDouble) GetAccessKeyLastUsed(i0 *iam.GetAccessKeyLastUsedInput) (r0 *iam.GetAccessKeyLastUsedOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAccessKeyLastUsed", i0)
	r0, _ = returns[0].(*iam.GetAccessKeyLastUsedOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) GetAccessKeyLastUsedRequest(i0 *iam.GetAccessKeyLastUsedInput) (r0 *request.Request, r1 *iam.GetAccessKeyLastUsedOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAccessKeyLastUsedRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.GetAccessKeyLastUsedOutput)
	return
}

func (d *IAMDouble) GetAccessKeyLastUsedWithContext(i0 context.Context, i1 *iam.GetAccessKeyLastUsedInput, i2 ...request.Option) (r0 *iam.GetAccessKeyLastUsedOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAccessKeyLastUsedWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.GetAccessKeyLastUsedOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeGetAccessKeyLastUsedWithContext(ctx context.Context, in *iam.GetAccessKeyLastUsedInput, _ ...request.Option) (*iam.GetAccessKeyLastUsedOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetAccessKeyLastUsed cancelled", ctx.Err())
	default:
		return d.GetAccessKeyLastUsed(in)
	}
}

func (d *IAMDouble) GetAccountAuthorizationDetails(i0 *iam.GetAccountAuthorizationDetailsInput) (r0 *iam.GetAccountAuthorizationDetailsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAccountAuthorizationDetails", i0)
	r0, _ = returns[0].(*iam.GetAccountAuthorizationDetailsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) GetAccountAuthorizationDetailsPages(i0 *iam.GetAccountAuthorizationDetailsInput, i1 func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAccountAuthorizationDetailsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeGetAccountAuthorizationDetailsPages(in *iam.GetAccountAuthorizationDetailsInput, pager func(*iam.GetAccountAuthorizationDetailsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetAccountAuthorizationDetails", paginators, in, pager)
}

func (d *IAMDouble) GetAccountAuthorizationDetailsPagesWithContext(i0 context.Context, i1 *iam.GetAccountAuthorizationDetailsInput, i2 func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAccountAuthorizationDetailsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeGetAccountAuthorizationDetailsPagesWithContext(ctx context.Context, in *iam.GetAccountAuthorizationDetailsInput, pager func(*iam.GetAccountAuthorizationDetailsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetAccountAuthorizationDetails", paginators, ctx, in, pager, options...)
}

func (d *IAMDouble) GetAccountAuthorizationDetailsRequest(i0 *iam.GetAccountAuthorizationDetailsInput) (r0 *request.Request, r1 *iam.GetAccountAuthorizationDetailsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAccountAuthorizationDetailsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.GetAccountAuthorizationDetailsOutput)
	return
}

func (d *IAMDouble) GetAccountAuthorizationDetailsWithContext(i0 context.Context, i1 *iam.GetAccountAuthorizationDetailsInput, i2 ...request.Option) (r0 *iam.GetAccountAuthorizationDetailsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAccountAuthorizationDetailsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.GetAccountAuthorizationDetailsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeGetAccountAuthorizationDetailsWithContext(ctx context.Context, in *iam.GetAccountAuthorizationDetailsInput, _ ...request.Option) (*iam.GetAccountAuthorizationDetailsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetAccountAuthorizationDetails cancelled", ctx.Err())
	default:
		return d.GetAccountAuthorizationDetails(in)
	}
}

func (d *IAMDouble) GetAccountPasswordPolicy(i0 *iam.GetAccountPasswordPolicyInput) (r0 *iam.GetAccountPasswordPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAccountPasswordPolicy", i0)
	r0, _ = returns[0].(*iam.GetAccountPasswordPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) GetAccountPasswordPolicyRequest(i0 *iam.GetAccountPasswordPolicyInput) (r0 *request.Request, r1 *iam.GetAccountPasswordPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAccountPasswordPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.GetAccountPasswordPolicyOutput)
	return
}

func (d *IAMDouble) GetAccountPasswordPolicyWithContext(i0 context.Context, i1 *iam.GetAccountPasswordPolicyInput, i2 ...request.Option) (r0 *iam.GetAccountPasswordPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAccountPasswordPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.GetAccountPasswordPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeGetAccountPasswordPolicyWithContext(ctx context.Context, in *iam.GetAccountPasswordPolicyInput, _ ...request.Option) (*iam.GetAccountPasswordPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetAccountPasswordPolicy cancelled", ctx.Err())
	default:
		return d.GetAccountPasswordPolicy(in)
	}
}

func (d *IAMDouble) GetAccountSummary(i0 *iam.GetAccountSummaryInput) (r0 *iam.GetAccountSummaryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAccountSummary", i0)
	r0, _ = returns[0].(*iam.GetAccountSummaryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) GetAccountSummaryRequest(i0 *iam.GetAccountSummaryInput) (r0 *request.Request, r1 *iam.GetAccountSummaryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAccountSummaryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.GetAccountSummaryOutput)
	return
}

func (d *IAMDouble) GetAccountSummaryWithContext(i0 context.Context, i1 *iam.GetAccountSummaryInput, i2 ...request.Option) (r0 *iam.GetAccountSummaryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAccountSummaryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.GetAccountSummaryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeGetAccountSummaryWithContext(ctx context.Context, in *iam.GetAccountSummaryInput, _ ...request.Option) (*iam.GetAccountSummaryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetAccountSummary cancelled", ctx.Err())
	default:
		return d.GetAccountSummary(in)
	}
}

func (d *IAMDouble) GetContextKeysForCustomPolicy(i0 *iam.GetContextKeysForCustomPolicyInput) (r0 *iam.GetContextKeysForPolicyResponse, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetContextKeysForCustomPolicy", i0)
	r0, _ = returns[0].(*iam.GetContextKeysForPolicyResponse)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) GetContextKeysForCustomPolicyRequest(i0 *iam.GetContextKeysForCustomPolicyInput) (r0 *request.Request, r1 *iam.GetContextKeysForPolicyResponse) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetContextKeysForCustomPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.GetContextKeysForPolicyResponse)
	return
}

func (d *IAMDouble) GetContextKeysForCustomPolicyWithContext(i0 context.Context, i1 *iam.GetContextKeysForCustomPolicyInput, i2 ...request.Option) (r0 *iam.GetContextKeysForPolicyResponse, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetContextKeysForCustomPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.GetContextKeysForPolicyResponse)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeGetContextKeysForCustomPolicyWithContext(ctx context.Context, in *iam.GetContextKeysForCustomPolicyInput, _ ...request.Option) (*iam.GetContextKeysForPolicyResponse, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetContextKeysForCustomPolicy cancelled", ctx.Err())
	default:
		return d.GetContextKeysForCustomPolicy(in)
	}
}

func (d *IAMDouble) GetContextKeysForPrincipalPolicy(i0 *iam.GetContextKeysForPrincipalPolicyInput) (r0 *iam.GetContextKeysForPolicyResponse, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetContextKeysForPrincipalPolicy", i0)
	r0, _ = returns[0].(*iam.GetContextKeysForPolicyResponse)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) GetContextKeysForPrincipalPolicyRequest(i0 *iam.GetContextKeysForPrincipalPolicyInput) (r0 *request.Request, r1 *iam.GetContextKeysForPolicyResponse) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetContextKeysForPrincipalPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.GetContextKeysForPolicyResponse)
	return
}

func (d *IAMDouble) GetContextKeysForPrincipalPolicyWithContext(i0 context.Context, i1 *iam.GetContextKeysForPrincipalPolicyInput, i2 ...request.Option) (r0 *iam.GetContextKeysForPolicyResponse, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetContextKeysForPrincipalPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.GetContextKeysForPolicyResponse)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeGetContextKeysForPrincipalPolicyWithContext(ctx context.Context, in *iam.GetContextKeysForPrincipalPolicyInput, _ ...request.Option) (*iam.GetContextKeysForPolicyResponse, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetContextKeysForPrincipalPolicy cancelled", ctx.Err())
	default:
		return d.GetContextKeysForPrincipalPolicy(in)
	}
}

func (d *IAMDouble) GetCredentialReport(i0 *iam.GetCredentialReportInput) (r0 *iam.GetCredentialReportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCredentialReport", i0)
	r0, _ = returns[0].(*iam.GetCredentialReportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) GetCredentialReportRequest(i0 *iam.GetCredentialReportInput) (r0 *request.Request, r1 *iam.GetCredentialReportOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCredentialReportRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.GetCredentialReportOutput)
	return
}

func (d *IAMDouble) GetCredentialReportWithContext(i0 context.Context, i1 *iam.GetCredentialReportInput, i2 ...request.Option) (r0 *iam.GetCredentialReportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCredentialReportWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.GetCredentialReportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeGetCredentialReportWithContext(ctx context.Context, in *iam.GetCredentialReportInput, _ ...request.Option) (*iam.GetCredentialReportOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetCredentialReport cancelled", ctx.Err())
	default:
		return d.GetCredentialReport(in)
	}
}

func (d *IAMDouble) GetGroup(i0 *iam.GetGroupInput) (r0 *iam.GetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGroup", i0)
	r0, _ = returns[0].(*iam.GetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) GetGroupPages(i0 *iam.GetGroupInput, i1 func(*iam.GetGroupOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGroupPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeGetGroupPages(in *iam.GetGroupInput, pager func(*iam.GetGroupOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetGroup", paginators, in, pager)
}

func (d *IAMDouble) GetGroupPagesWithContext(i0 context.Context, i1 *iam.GetGroupInput, i2 func(*iam.GetGroupOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGroupPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeGetGroupPagesWithContext(ctx context.Context, in *iam.GetGroupInput, pager func(*iam.GetGroupOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetGroup", paginators, ctx, in, pager, options...)
}

func (d *IAMDouble) GetGroupPolicy(i0 *iam.GetGroupPolicyInput) (r0 *iam.GetGroupPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGroupPolicy", i0)
	r0, _ = returns[0].(*iam.GetGroupPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) GetGroupPolicyRequest(i0 *iam.GetGroupPolicyInput) (r0 *request.Request, r1 *iam.GetGroupPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGroupPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.GetGroupPolicyOutput)
	return
}

func (d *IAMDouble) GetGroupPolicyWithContext(i0 context.Context, i1 *iam.GetGroupPolicyInput, i2 ...request.Option) (r0 *iam.GetGroupPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGroupPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.GetGroupPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeGetGroupPolicyWithContext(ctx context.Context, in *iam.GetGroupPolicyInput, _ ...request.Option) (*iam.GetGroupPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetGroupPolicy cancelled", ctx.Err())
	default:
		return d.GetGroupPolicy(in)
	}
}

func (d *IAMDouble) GetGroupRequest(i0 *iam.GetGroupInput) (r0 *request.Request, r1 *iam.GetGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.GetGroupOutput)
	return
}

func (d *IAMDouble) GetGroupWithContext(i0 context.Context, i1 *iam.GetGroupInput, i2 ...request.Option) (r0 *iam.GetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.GetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeGetGroupWithContext(ctx context.Context, in *iam.GetGroupInput, _ ...request.Option) (*iam.GetGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetGroup cancelled", ctx.Err())
	default:
		return d.GetGroup(in)
	}
}

func (d *IAMDouble) GetInstanceProfile(i0 *iam.GetInstanceProfileInput) (r0 *iam.GetInstanceProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstanceProfile", i0)
	r0, _ = returns[0].(*iam.GetInstanceProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) GetInstanceProfileRequest(i0 *iam.GetInstanceProfileInput) (r0 *request.Request, r1 *iam.GetInstanceProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstanceProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.GetInstanceProfileOutput)
	return
}

func (d *IAMDouble) GetInstanceProfileWithContext(i0 context.Context, i1 *iam.GetInstanceProfileInput, i2 ...request.Option) (r0 *iam.GetInstanceProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstanceProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.GetInstanceProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeGetInstanceProfileWithContext(ctx context.Context, in *iam.GetInstanceProfileInput, _ ...request.Option) (*iam.GetInstanceProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetInstanceProfile cancelled", ctx.Err())
	default:
		return d.GetInstanceProfile(in)
	}
}

func (d *IAMDouble) GetLoginProfile(i0 *iam.GetLoginProfileInput) (r0 *iam.GetLoginProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLoginProfile", i0)
	r0, _ = returns[0].(*iam.GetLoginProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) GetLoginProfileRequest(i0 *iam.GetLoginProfileInput) (r0 *request.Request, r1 *iam.GetLoginProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLoginProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.GetLoginProfileOutput)
	return
}

func (d *IAMDouble) GetLoginProfileWithContext(i0 context.Context, i1 *iam.GetLoginProfileInput, i2 ...request.Option) (r0 *iam.GetLoginProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLoginProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.GetLoginProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeGetLoginProfileWithContext(ctx context.Context, in *iam.GetLoginProfileInput, _ ...request.Option) (*iam.GetLoginProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetLoginProfile cancelled", ctx.Err())
	default:
		return d.GetLoginProfile(in)
	}
}

func (d *IAMDouble) GetOpenIDConnectProvider(i0 *iam.GetOpenIDConnectProviderInput) (r0 *iam.GetOpenIDConnectProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOpenIDConnectProvider", i0)
	r0, _ = returns[0].(*iam.GetOpenIDConnectProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) GetOpenIDConnectProviderRequest(i0 *iam.GetOpenIDConnectProviderInput) (r0 *request.Request, r1 *iam.GetOpenIDConnectProviderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOpenIDConnectProviderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.GetOpenIDConnectProviderOutput)
	return
}

func (d *IAMDouble) GetOpenIDConnectProviderWithContext(i0 context.Context, i1 *iam.GetOpenIDConnectProviderInput, i2 ...request.Option) (r0 *iam.GetOpenIDConnectProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOpenIDConnectProviderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.GetOpenIDConnectProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeGetOpenIDConnectProviderWithContext(ctx context.Context, in *iam.GetOpenIDConnectProviderInput, _ ...request.Option) (*iam.GetOpenIDConnectProviderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetOpenIDConnectProvider cancelled", ctx.Err())
	default:
		return d.GetOpenIDConnectProvider(in)
	}
}

func (d *IAMDouble) GetOrganizationsAccessReport(i0 *iam.GetOrganizationsAccessReportInput) (r0 *iam.GetOrganizationsAccessReportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOrganizationsAccessReport", i0)
	r0, _ = returns[0].(*iam.GetOrganizationsAccessReportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) GetOrganizationsAccessReportRequest(i0 *iam.GetOrganizationsAccessReportInput) (r0 *request.Request, r1 *iam.GetOrganizationsAccessReportOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOrganizationsAccessReportRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.GetOrganizationsAccessReportOutput)
	return
}

func (d *IAMDouble) GetOrganizationsAccessReportWithContext(i0 context.Context, i1 *iam.GetOrganizationsAccessReportInput, i2 ...request.Option) (r0 *iam.GetOrganizationsAccessReportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOrganizationsAccessReportWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.GetOrganizationsAccessReportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeGetOrganizationsAccessReportWithContext(ctx context.Context, in *iam.GetOrganizationsAccessReportInput, _ ...request.Option) (*iam.GetOrganizationsAccessReportOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetOrganizationsAccessReport cancelled", ctx.Err())
	default:
		return d.GetOrganizationsAccessReport(in)
	}
}

func (d *IAMDouble) GetPolicy(i0 *iam.GetPolicyInput) (r0 *iam.GetPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPolicy", i0)
	r0, _ = returns[0].(*iam.GetPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) GetPolicyRequest(i0 *iam.GetPolicyInput) (r0 *request.Request, r1 *iam.GetPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.GetPolicyOutput)
	return
}

func (d *IAMDouble) GetPolicyVersion(i0 *iam.GetPolicyVersionInput) (r0 *iam.GetPolicyVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPolicyVersion", i0)
	r0, _ = returns[0].(*iam.GetPolicyVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) GetPolicyVersionRequest(i0 *iam.GetPolicyVersionInput) (r0 *request.Request, r1 *iam.GetPolicyVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPolicyVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.GetPolicyVersionOutput)
	return
}

func (d *IAMDouble) GetPolicyVersionWithContext(i0 context.Context, i1 *iam.GetPolicyVersionInput, i2 ...request.Option) (r0 *iam.GetPolicyVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPolicyVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.GetPolicyVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeGetPolicyVersionWithContext(ctx context.Context, in *iam.GetPolicyVersionInput, _ ...request.Option) (*iam.GetPolicyVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetPolicyVersion cancelled", ctx.Err())
	default:
		return d.GetPolicyVersion(in)
	}
}

func (d *IAMDouble) GetPolicyWithContext(i0 context.Context, i1 *iam.GetPolicyInput, i2 ...request.Option) (r0 *iam.GetPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.GetPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeGetPolicyWithContext(ctx context.Context, in *iam.GetPolicyInput, _ ...request.Option) (*iam.GetPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetPolicy cancelled", ctx.Err())
	default:
		return d.GetPolicy(in)
	}
}

func (d *IAMDouble) GetRole(i0 *iam.GetRoleInput) (r0 *iam.GetRoleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRole", i0)
	r0, _ = returns[0].(*iam.GetRoleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) GetRolePolicy(i0 *iam.GetRolePolicyInput) (r0 *iam.GetRolePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRolePolicy", i0)
	r0, _ = returns[0].(*iam.GetRolePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) GetRolePolicyRequest(i0 *iam.GetRolePolicyInput) (r0 *request.Request, r1 *iam.GetRolePolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRolePolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.GetRolePolicyOutput)
	return
}

func (d *IAMDouble) GetRolePolicyWithContext(i0 context.Context, i1 *iam.GetRolePolicyInput, i2 ...request.Option) (r0 *iam.GetRolePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRolePolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.GetRolePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeGetRolePolicyWithContext(ctx context.Context, in *iam.GetRolePolicyInput, _ ...request.Option) (*iam.GetRolePolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRolePolicy cancelled", ctx.Err())
	default:
		return d.GetRolePolicy(in)
	}
}

func (d *IAMDouble) GetRoleRequest(i0 *iam.GetRoleInput) (r0 *request.Request, r1 *iam.GetRoleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRoleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.GetRoleOutput)
	return
}

func (d *IAMDouble) GetRoleWithContext(i0 context.Context, i1 *iam.GetRoleInput, i2 ...request.Option) (r0 *iam.GetRoleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRoleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.GetRoleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeGetRoleWithContext(ctx context.Context, in *iam.GetRoleInput, _ ...request.Option) (*iam.GetRoleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRole cancelled", ctx.Err())
	default:
		return d.GetRole(in)
	}
}

func (d *IAMDouble) GetSAMLProvider(i0 *iam.GetSAMLProviderInput) (r0 *iam.GetSAMLProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSAMLProvider", i0)
	r0, _ = returns[0].(*iam.GetSAMLProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) GetSAMLProviderRequest(i0 *iam.GetSAMLProviderInput) (r0 *request.Request, r1 *iam.GetSAMLProviderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSAMLProviderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.GetSAMLProviderOutput)
	return
}

func (d *IAMDouble) GetSAMLProviderWithContext(i0 context.Context, i1 *iam.GetSAMLProviderInput, i2 ...request.Option) (r0 *iam.GetSAMLProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSAMLProviderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.GetSAMLProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeGetSAMLProviderWithContext(ctx context.Context, in *iam.GetSAMLProviderInput, _ ...request.Option) (*iam.GetSAMLProviderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetSAMLProvider cancelled", ctx.Err())
	default:
		return d.GetSAMLProvider(in)
	}
}

func (d *IAMDouble) GetSSHPublicKey(i0 *iam.GetSSHPublicKeyInput) (r0 *iam.GetSSHPublicKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSSHPublicKey", i0)
	r0, _ = returns[0].(*iam.GetSSHPublicKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) GetSSHPublicKeyRequest(i0 *iam.GetSSHPublicKeyInput) (r0 *request.Request, r1 *iam.GetSSHPublicKeyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSSHPublicKeyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.GetSSHPublicKeyOutput)
	return
}

func (d *IAMDouble) GetSSHPublicKeyWithContext(i0 context.Context, i1 *iam.GetSSHPublicKeyInput, i2 ...request.Option) (r0 *iam.GetSSHPublicKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSSHPublicKeyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.GetSSHPublicKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeGetSSHPublicKeyWithContext(ctx context.Context, in *iam.GetSSHPublicKeyInput, _ ...request.Option) (*iam.GetSSHPublicKeyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetSSHPublicKey cancelled", ctx.Err())
	default:
		return d.GetSSHPublicKey(in)
	}
}

func (d *IAMDouble) GetServerCertificate(i0 *iam.GetServerCertificateInput) (r0 *iam.GetServerCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetServerCertificate", i0)
	r0, _ = returns[0].(*iam.GetServerCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) GetServerCertificateRequest(i0 *iam.GetServerCertificateInput) (r0 *request.Request, r1 *iam.GetServerCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetServerCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.GetServerCertificateOutput)
	return
}

func (d *IAMDouble) GetServerCertificateWithContext(i0 context.Context, i1 *iam.GetServerCertificateInput, i2 ...request.Option) (r0 *iam.GetServerCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetServerCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.GetServerCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeGetServerCertificateWithContext(ctx context.Context, in *iam.GetServerCertificateInput, _ ...request.Option) (*iam.GetServerCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetServerCertificate cancelled", ctx.Err())
	default:
		return d.GetServerCertificate(in)
	}
}

func (d *IAMDouble) GetServiceLastAccessedDetails(i0 *iam.GetServiceLastAccessedDetailsInput) (r0 *iam.GetServiceLastAccessedDetailsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetServiceLastAccessedDetails", i0)
	r0, _ = returns[0].(*iam.GetServiceLastAccessedDetailsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) GetServiceLastAccessedDetailsRequest(i0 *iam.GetServiceLastAccessedDetailsInput) (r0 *request.Request, r1 *iam.GetServiceLastAccessedDetailsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetServiceLastAccessedDetailsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.GetServiceLastAccessedDetailsOutput)
	return
}

func (d *IAMDouble) GetServiceLastAccessedDetailsWithContext(i0 context.Context, i1 *iam.GetServiceLastAccessedDetailsInput, i2 ...request.Option) (r0 *iam.GetServiceLastAccessedDetailsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetServiceLastAccessedDetailsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.GetServiceLastAccessedDetailsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeGetServiceLastAccessedDetailsWithContext(ctx context.Context, in *iam.GetServiceLastAccessedDetailsInput, _ ...request.Option) (*iam.GetServiceLastAccessedDetailsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetServiceLastAccessedDetails cancelled", ctx.Err())
	default:
		return d.GetServiceLastAccessedDetails(in)
	}
}

func (d *IAMDouble) GetServiceLastAccessedDetailsWithEntities(i0 *iam.GetServiceLastAccessedDetailsWithEntitiesInput) (r0 *iam.GetServiceLastAccessedDetailsWithEntitiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetServiceLastAccessedDetailsWithEntities", i0)
	r0, _ = returns[0].(*iam.GetServiceLastAccessedDetailsWithEntitiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) GetServiceLastAccessedDetailsWithEntitiesRequest(i0 *iam.GetServiceLastAccessedDetailsWithEntitiesInput) (r0 *request.Request, r1 *iam.GetServiceLastAccessedDetailsWithEntitiesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetServiceLastAccessedDetailsWithEntitiesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.GetServiceLastAccessedDetailsWithEntitiesOutput)
	return
}

func (d *IAMDouble) GetServiceLastAccessedDetailsWithEntitiesWithContext(i0 context.Context, i1 *iam.GetServiceLastAccessedDetailsWithEntitiesInput, i2 ...request.Option) (r0 *iam.GetServiceLastAccessedDetailsWithEntitiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetServiceLastAccessedDetailsWithEntitiesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.GetServiceLastAccessedDetailsWithEntitiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeGetServiceLastAccessedDetailsWithEntitiesWithContext(ctx context.Context, in *iam.GetServiceLastAccessedDetailsWithEntitiesInput, _ ...request.Option) (*iam.GetServiceLastAccessedDetailsWithEntitiesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetServiceLastAccessedDetailsWithEntities cancelled", ctx.Err())
	default:
		return d.GetServiceLastAccessedDetailsWithEntities(in)
	}
}

func (d *IAMDouble) GetServiceLinkedRoleDeletionStatus(i0 *iam.GetServiceLinkedRoleDeletionStatusInput) (r0 *iam.GetServiceLinkedRoleDeletionStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetServiceLinkedRoleDeletionStatus", i0)
	r0, _ = returns[0].(*iam.GetServiceLinkedRoleDeletionStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) GetServiceLinkedRoleDeletionStatusRequest(i0 *iam.GetServiceLinkedRoleDeletionStatusInput) (r0 *request.Request, r1 *iam.GetServiceLinkedRoleDeletionStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetServiceLinkedRoleDeletionStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.GetServiceLinkedRoleDeletionStatusOutput)
	return
}

func (d *IAMDouble) GetServiceLinkedRoleDeletionStatusWithContext(i0 context.Context, i1 *iam.GetServiceLinkedRoleDeletionStatusInput, i2 ...request.Option) (r0 *iam.GetServiceLinkedRoleDeletionStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetServiceLinkedRoleDeletionStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.GetServiceLinkedRoleDeletionStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeGetServiceLinkedRoleDeletionStatusWithContext(ctx context.Context, in *iam.GetServiceLinkedRoleDeletionStatusInput, _ ...request.Option) (*iam.GetServiceLinkedRoleDeletionStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetServiceLinkedRoleDeletionStatus cancelled", ctx.Err())
	default:
		return d.GetServiceLinkedRoleDeletionStatus(in)
	}
}

func (d *IAMDouble) GetUser(i0 *iam.GetUserInput) (r0 *iam.GetUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUser", i0)
	r0, _ = returns[0].(*iam.GetUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) GetUserPolicy(i0 *iam.GetUserPolicyInput) (r0 *iam.GetUserPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUserPolicy", i0)
	r0, _ = returns[0].(*iam.GetUserPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) GetUserPolicyRequest(i0 *iam.GetUserPolicyInput) (r0 *request.Request, r1 *iam.GetUserPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUserPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.GetUserPolicyOutput)
	return
}

func (d *IAMDouble) GetUserPolicyWithContext(i0 context.Context, i1 *iam.GetUserPolicyInput, i2 ...request.Option) (r0 *iam.GetUserPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUserPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.GetUserPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeGetUserPolicyWithContext(ctx context.Context, in *iam.GetUserPolicyInput, _ ...request.Option) (*iam.GetUserPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetUserPolicy cancelled", ctx.Err())
	default:
		return d.GetUserPolicy(in)
	}
}

func (d *IAMDouble) GetUserRequest(i0 *iam.GetUserInput) (r0 *request.Request, r1 *iam.GetUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.GetUserOutput)
	return
}

func (d *IAMDouble) GetUserWithContext(i0 context.Context, i1 *iam.GetUserInput, i2 ...request.Option) (r0 *iam.GetUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.GetUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeGetUserWithContext(ctx context.Context, in *iam.GetUserInput, _ ...request.Option) (*iam.GetUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetUser cancelled", ctx.Err())
	default:
		return d.GetUser(in)
	}
}

func (d *IAMDouble) ListAccessKeys(i0 *iam.ListAccessKeysInput) (r0 *iam.ListAccessKeysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAccessKeys", i0)
	r0, _ = returns[0].(*iam.ListAccessKeysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) ListAccessKeysPages(i0 *iam.ListAccessKeysInput, i1 func(*iam.ListAccessKeysOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAccessKeysPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListAccessKeysPages(in *iam.ListAccessKeysInput, pager func(*iam.ListAccessKeysOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListAccessKeys", paginators, in, pager)
}

func (d *IAMDouble) ListAccessKeysPagesWithContext(i0 context.Context, i1 *iam.ListAccessKeysInput, i2 func(*iam.ListAccessKeysOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAccessKeysPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListAccessKeysPagesWithContext(ctx context.Context, in *iam.ListAccessKeysInput, pager func(*iam.ListAccessKeysOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListAccessKeys", paginators, ctx, in, pager, options...)
}

func (d *IAMDouble) ListAccessKeysRequest(i0 *iam.ListAccessKeysInput) (r0 *request.Request, r1 *iam.ListAccessKeysOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAccessKeysRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.ListAccessKeysOutput)
	return
}

func (d *IAMDouble) ListAccessKeysWithContext(i0 context.Context, i1 *iam.ListAccessKeysInput, i2 ...request.Option) (r0 *iam.ListAccessKeysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAccessKeysWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.ListAccessKeysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeListAccessKeysWithContext(ctx context.Context, in *iam.ListAccessKeysInput, _ ...request.Option) (*iam.ListAccessKeysOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAccessKeys cancelled", ctx.Err())
	default:
		return d.ListAccessKeys(in)
	}
}

func (d *IAMDouble) ListAccountAliases(i0 *iam.ListAccountAliasesInput) (r0 *iam.ListAccountAliasesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAccountAliases", i0)
	r0, _ = returns[0].(*iam.ListAccountAliasesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) ListAccountAliasesPages(i0 *iam.ListAccountAliasesInput, i1 func(*iam.ListAccountAliasesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAccountAliasesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListAccountAliasesPages(in *iam.ListAccountAliasesInput, pager func(*iam.ListAccountAliasesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListAccountAliases", paginators, in, pager)
}

func (d *IAMDouble) ListAccountAliasesPagesWithContext(i0 context.Context, i1 *iam.ListAccountAliasesInput, i2 func(*iam.ListAccountAliasesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAccountAliasesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListAccountAliasesPagesWithContext(ctx context.Context, in *iam.ListAccountAliasesInput, pager func(*iam.ListAccountAliasesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListAccountAliases", paginators, ctx, in, pager, options...)
}

func (d *IAMDouble) ListAccountAliasesRequest(i0 *iam.ListAccountAliasesInput) (r0 *request.Request, r1 *iam.ListAccountAliasesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAccountAliasesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.ListAccountAliasesOutput)
	return
}

func (d *IAMDouble) ListAccountAliasesWithContext(i0 context.Context, i1 *iam.ListAccountAliasesInput, i2 ...request.Option) (r0 *iam.ListAccountAliasesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAccountAliasesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.ListAccountAliasesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeListAccountAliasesWithContext(ctx context.Context, in *iam.ListAccountAliasesInput, _ ...request.Option) (*iam.ListAccountAliasesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAccountAliases cancelled", ctx.Err())
	default:
		return d.ListAccountAliases(in)
	}
}

func (d *IAMDouble) ListAttachedGroupPolicies(i0 *iam.ListAttachedGroupPoliciesInput) (r0 *iam.ListAttachedGroupPoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAttachedGroupPolicies", i0)
	r0, _ = returns[0].(*iam.ListAttachedGroupPoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) ListAttachedGroupPoliciesPages(i0 *iam.ListAttachedGroupPoliciesInput, i1 func(*iam.ListAttachedGroupPoliciesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAttachedGroupPoliciesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListAttachedGroupPoliciesPages(in *iam.ListAttachedGroupPoliciesInput, pager func(*iam.ListAttachedGroupPoliciesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListAttachedGroupPolicies", paginators, in, pager)
}

func (d *IAMDouble) ListAttachedGroupPoliciesPagesWithContext(i0 context.Context, i1 *iam.ListAttachedGroupPoliciesInput, i2 func(*iam.ListAttachedGroupPoliciesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAttachedGroupPoliciesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListAttachedGroupPoliciesPagesWithContext(ctx context.Context, in *iam.ListAttachedGroupPoliciesInput, pager func(*iam.ListAttachedGroupPoliciesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListAttachedGroupPolicies", paginators, ctx, in, pager, options...)
}

func (d *IAMDouble) ListAttachedGroupPoliciesRequest(i0 *iam.ListAttachedGroupPoliciesInput) (r0 *request.Request, r1 *iam.ListAttachedGroupPoliciesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAttachedGroupPoliciesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.ListAttachedGroupPoliciesOutput)
	return
}

func (d *IAMDouble) ListAttachedGroupPoliciesWithContext(i0 context.Context, i1 *iam.ListAttachedGroupPoliciesInput, i2 ...request.Option) (r0 *iam.ListAttachedGroupPoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAttachedGroupPoliciesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.ListAttachedGroupPoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeListAttachedGroupPoliciesWithContext(ctx context.Context, in *iam.ListAttachedGroupPoliciesInput, _ ...request.Option) (*iam.ListAttachedGroupPoliciesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAttachedGroupPolicies cancelled", ctx.Err())
	default:
		return d.ListAttachedGroupPolicies(in)
	}
}

func (d *IAMDouble) ListAttachedRolePolicies(i0 *iam.ListAttachedRolePoliciesInput) (r0 *iam.ListAttachedRolePoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAttachedRolePolicies", i0)
	r0, _ = returns[0].(*iam.ListAttachedRolePoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) ListAttachedRolePoliciesPages(i0 *iam.ListAttachedRolePoliciesInput, i1 func(*iam.ListAttachedRolePoliciesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAttachedRolePoliciesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListAttachedRolePoliciesPages(in *iam.ListAttachedRolePoliciesInput, pager func(*iam.ListAttachedRolePoliciesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListAttachedRolePolicies", paginators, in, pager)
}

func (d *IAMDouble) ListAttachedRolePoliciesPagesWithContext(i0 context.Context, i1 *iam.ListAttachedRolePoliciesInput, i2 func(*iam.ListAttachedRolePoliciesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAttachedRolePoliciesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListAttachedRolePoliciesPagesWithContext(ctx context.Context, in *iam.ListAttachedRolePoliciesInput, pager func(*iam.ListAttachedRolePoliciesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListAttachedRolePolicies", paginators, ctx, in, pager, options...)
}

func (d *IAMDouble) ListAttachedRolePoliciesRequest(i0 *iam.ListAttachedRolePoliciesInput) (r0 *request.Request, r1 *iam.ListAttachedRolePoliciesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAttachedRolePoliciesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.ListAttachedRolePoliciesOutput)
	return
}

func (d *IAMDouble) ListAttachedRolePoliciesWithContext(i0 context.Context, i1 *iam.ListAttachedRolePoliciesInput, i2 ...request.Option) (r0 *iam.ListAttachedRolePoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAttachedRolePoliciesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.ListAttachedRolePoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeListAttachedRolePoliciesWithContext(ctx context.Context, in *iam.ListAttachedRolePoliciesInput, _ ...request.Option) (*iam.ListAttachedRolePoliciesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAttachedRolePolicies cancelled", ctx.Err())
	default:
		return d.ListAttachedRolePolicies(in)
	}
}

func (d *IAMDouble) ListAttachedUserPolicies(i0 *iam.ListAttachedUserPoliciesInput) (r0 *iam.ListAttachedUserPoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAttachedUserPolicies", i0)
	r0, _ = returns[0].(*iam.ListAttachedUserPoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) ListAttachedUserPoliciesPages(i0 *iam.ListAttachedUserPoliciesInput, i1 func(*iam.ListAttachedUserPoliciesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAttachedUserPoliciesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListAttachedUserPoliciesPages(in *iam.ListAttachedUserPoliciesInput, pager func(*iam.ListAttachedUserPoliciesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListAttachedUserPolicies", paginators, in, pager)
}

func (d *IAMDouble) ListAttachedUserPoliciesPagesWithContext(i0 context.Context, i1 *iam.ListAttachedUserPoliciesInput, i2 func(*iam.ListAttachedUserPoliciesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAttachedUserPoliciesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListAttachedUserPoliciesPagesWithContext(ctx context.Context, in *iam.ListAttachedUserPoliciesInput, pager func(*iam.ListAttachedUserPoliciesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListAttachedUserPolicies", paginators, ctx, in, pager, options...)
}

func (d *IAMDouble) ListAttachedUserPoliciesRequest(i0 *iam.ListAttachedUserPoliciesInput) (r0 *request.Request, r1 *iam.ListAttachedUserPoliciesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAttachedUserPoliciesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.ListAttachedUserPoliciesOutput)
	return
}

func (d *IAMDouble) ListAttachedUserPoliciesWithContext(i0 context.Context, i1 *iam.ListAttachedUserPoliciesInput, i2 ...request.Option) (r0 *iam.ListAttachedUserPoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAttachedUserPoliciesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.ListAttachedUserPoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeListAttachedUserPoliciesWithContext(ctx context.Context, in *iam.ListAttachedUserPoliciesInput, _ ...request.Option) (*iam.ListAttachedUserPoliciesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAttachedUserPolicies cancelled", ctx.Err())
	default:
		return d.ListAttachedUserPolicies(in)
	}
}

func (d *IAMDouble) ListEntitiesForPolicy(i0 *iam.ListEntitiesForPolicyInput) (r0 *iam.ListEntitiesForPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEntitiesForPolicy", i0)
	r0, _ = returns[0].(*iam.ListEntitiesForPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) ListEntitiesForPolicyPages(i0 *iam.ListEntitiesForPolicyInput, i1 func(*iam.ListEntitiesForPolicyOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEntitiesForPolicyPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListEntitiesForPolicyPages(in *iam.ListEntitiesForPolicyInput, pager func(*iam.ListEntitiesForPolicyOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListEntitiesForPolicy", paginators, in, pager)
}

func (d *IAMDouble) ListEntitiesForPolicyPagesWithContext(i0 context.Context, i1 *iam.ListEntitiesForPolicyInput, i2 func(*iam.ListEntitiesForPolicyOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEntitiesForPolicyPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListEntitiesForPolicyPagesWithContext(ctx context.Context, in *iam.ListEntitiesForPolicyInput, pager func(*iam.ListEntitiesForPolicyOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListEntitiesForPolicy", paginators, ctx, in, pager, options...)
}

func (d *IAMDouble) ListEntitiesForPolicyRequest(i0 *iam.ListEntitiesForPolicyInput) (r0 *request.Request, r1 *iam.ListEntitiesForPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEntitiesForPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.ListEntitiesForPolicyOutput)
	return
}

func (d *IAMDouble) ListEntitiesForPolicyWithContext(i0 context.Context, i1 *iam.ListEntitiesForPolicyInput, i2 ...request.Option) (r0 *iam.ListEntitiesForPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEntitiesForPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.ListEntitiesForPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeListEntitiesForPolicyWithContext(ctx context.Context, in *iam.ListEntitiesForPolicyInput, _ ...request.Option) (*iam.ListEntitiesForPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListEntitiesForPolicy cancelled", ctx.Err())
	default:
		return d.ListEntitiesForPolicy(in)
	}
}

func (d *IAMDouble) ListGroupPolicies(i0 *iam.ListGroupPoliciesInput) (r0 *iam.ListGroupPoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupPolicies", i0)
	r0, _ = returns[0].(*iam.ListGroupPoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) ListGroupPoliciesPages(i0 *iam.ListGroupPoliciesInput, i1 func(*iam.ListGroupPoliciesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupPoliciesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListGroupPoliciesPages(in *iam.ListGroupPoliciesInput, pager func(*iam.ListGroupPoliciesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListGroupPolicies", paginators, in, pager)
}

func (d *IAMDouble) ListGroupPoliciesPagesWithContext(i0 context.Context, i1 *iam.ListGroupPoliciesInput, i2 func(*iam.ListGroupPoliciesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupPoliciesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListGroupPoliciesPagesWithContext(ctx context.Context, in *iam.ListGroupPoliciesInput, pager func(*iam.ListGroupPoliciesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListGroupPolicies", paginators, ctx, in, pager, options...)
}

func (d *IAMDouble) ListGroupPoliciesRequest(i0 *iam.ListGroupPoliciesInput) (r0 *request.Request, r1 *iam.ListGroupPoliciesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupPoliciesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.ListGroupPoliciesOutput)
	return
}

func (d *IAMDouble) ListGroupPoliciesWithContext(i0 context.Context, i1 *iam.ListGroupPoliciesInput, i2 ...request.Option) (r0 *iam.ListGroupPoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupPoliciesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.ListGroupPoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeListGroupPoliciesWithContext(ctx context.Context, in *iam.ListGroupPoliciesInput, _ ...request.Option) (*iam.ListGroupPoliciesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListGroupPolicies cancelled", ctx.Err())
	default:
		return d.ListGroupPolicies(in)
	}
}

func (d *IAMDouble) ListGroups(i0 *iam.ListGroupsInput) (r0 *iam.ListGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroups", i0)
	r0, _ = returns[0].(*iam.ListGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) ListGroupsForUser(i0 *iam.ListGroupsForUserInput) (r0 *iam.ListGroupsForUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupsForUser", i0)
	r0, _ = returns[0].(*iam.ListGroupsForUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) ListGroupsForUserPages(i0 *iam.ListGroupsForUserInput, i1 func(*iam.ListGroupsForUserOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupsForUserPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListGroupsForUserPages(in *iam.ListGroupsForUserInput, pager func(*iam.ListGroupsForUserOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListGroupsForUser", paginators, in, pager)
}

func (d *IAMDouble) ListGroupsForUserPagesWithContext(i0 context.Context, i1 *iam.ListGroupsForUserInput, i2 func(*iam.ListGroupsForUserOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupsForUserPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListGroupsForUserPagesWithContext(ctx context.Context, in *iam.ListGroupsForUserInput, pager func(*iam.ListGroupsForUserOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListGroupsForUser", paginators, ctx, in, pager, options...)
}

func (d *IAMDouble) ListGroupsForUserRequest(i0 *iam.ListGroupsForUserInput) (r0 *request.Request, r1 *iam.ListGroupsForUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupsForUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.ListGroupsForUserOutput)
	return
}

func (d *IAMDouble) ListGroupsForUserWithContext(i0 context.Context, i1 *iam.ListGroupsForUserInput, i2 ...request.Option) (r0 *iam.ListGroupsForUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupsForUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.ListGroupsForUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeListGroupsForUserWithContext(ctx context.Context, in *iam.ListGroupsForUserInput, _ ...request.Option) (*iam.ListGroupsForUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListGroupsForUser cancelled", ctx.Err())
	default:
		return d.ListGroupsForUser(in)
	}
}

func (d *IAMDouble) ListGroupsPages(i0 *iam.ListGroupsInput, i1 func(*iam.ListGroupsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListGroupsPages(in *iam.ListGroupsInput, pager func(*iam.ListGroupsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListGroups", paginators, in, pager)
}

func (d *IAMDouble) ListGroupsPagesWithContext(i0 context.Context, i1 *iam.ListGroupsInput, i2 func(*iam.ListGroupsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListGroupsPagesWithContext(ctx context.Context, in *iam.ListGroupsInput, pager func(*iam.ListGroupsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListGroups", paginators, ctx, in, pager, options...)
}

func (d *IAMDouble) ListGroupsRequest(i0 *iam.ListGroupsInput) (r0 *request.Request, r1 *iam.ListGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.ListGroupsOutput)
	return
}

func (d *IAMDouble) ListGroupsWithContext(i0 context.Context, i1 *iam.ListGroupsInput, i2 ...request.Option) (r0 *iam.ListGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.ListGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeListGroupsWithContext(ctx context.Context, in *iam.ListGroupsInput, _ ...request.Option) (*iam.ListGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListGroups cancelled", ctx.Err())
	default:
		return d.ListGroups(in)
	}
}

func (d *IAMDouble) ListInstanceProfiles(i0 *iam.ListInstanceProfilesInput) (r0 *iam.ListInstanceProfilesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInstanceProfiles", i0)
	r0, _ = returns[0].(*iam.ListInstanceProfilesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) ListInstanceProfilesForRole(i0 *iam.ListInstanceProfilesForRoleInput) (r0 *iam.ListInstanceProfilesForRoleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInstanceProfilesForRole", i0)
	r0, _ = returns[0].(*iam.ListInstanceProfilesForRoleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) ListInstanceProfilesForRolePages(i0 *iam.ListInstanceProfilesForRoleInput, i1 func(*iam.ListInstanceProfilesForRoleOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInstanceProfilesForRolePages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListInstanceProfilesForRolePages(in *iam.ListInstanceProfilesForRoleInput, pager func(*iam.ListInstanceProfilesForRoleOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListInstanceProfilesForRole", paginators, in, pager)
}

func (d *IAMDouble) ListInstanceProfilesForRolePagesWithContext(i0 context.Context, i1 *iam.ListInstanceProfilesForRoleInput, i2 func(*iam.ListInstanceProfilesForRoleOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInstanceProfilesForRolePagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListInstanceProfilesForRolePagesWithContext(ctx context.Context, in *iam.ListInstanceProfilesForRoleInput, pager func(*iam.ListInstanceProfilesForRoleOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListInstanceProfilesForRole", paginators, ctx, in, pager, options...)
}

func (d *IAMDouble) ListInstanceProfilesForRoleRequest(i0 *iam.ListInstanceProfilesForRoleInput) (r0 *request.Request, r1 *iam.ListInstanceProfilesForRoleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInstanceProfilesForRoleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.ListInstanceProfilesForRoleOutput)
	return
}

func (d *IAMDouble) ListInstanceProfilesForRoleWithContext(i0 context.Context, i1 *iam.ListInstanceProfilesForRoleInput, i2 ...request.Option) (r0 *iam.ListInstanceProfilesForRoleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInstanceProfilesForRoleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.ListInstanceProfilesForRoleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeListInstanceProfilesForRoleWithContext(ctx context.Context, in *iam.ListInstanceProfilesForRoleInput, _ ...request.Option) (*iam.ListInstanceProfilesForRoleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListInstanceProfilesForRole cancelled", ctx.Err())
	default:
		return d.ListInstanceProfilesForRole(in)
	}
}

func (d *IAMDouble) ListInstanceProfilesPages(i0 *iam.ListInstanceProfilesInput, i1 func(*iam.ListInstanceProfilesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInstanceProfilesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListInstanceProfilesPages(in *iam.ListInstanceProfilesInput, pager func(*iam.ListInstanceProfilesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListInstanceProfiles", paginators, in, pager)
}

func (d *IAMDouble) ListInstanceProfilesPagesWithContext(i0 context.Context, i1 *iam.ListInstanceProfilesInput, i2 func(*iam.ListInstanceProfilesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInstanceProfilesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListInstanceProfilesPagesWithContext(ctx context.Context, in *iam.ListInstanceProfilesInput, pager func(*iam.ListInstanceProfilesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListInstanceProfiles", paginators, ctx, in, pager, options...)
}

func (d *IAMDouble) ListInstanceProfilesRequest(i0 *iam.ListInstanceProfilesInput) (r0 *request.Request, r1 *iam.ListInstanceProfilesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInstanceProfilesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.ListInstanceProfilesOutput)
	return
}

func (d *IAMDouble) ListInstanceProfilesWithContext(i0 context.Context, i1 *iam.ListInstanceProfilesInput, i2 ...request.Option) (r0 *iam.ListInstanceProfilesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInstanceProfilesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.ListInstanceProfilesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeListInstanceProfilesWithContext(ctx context.Context, in *iam.ListInstanceProfilesInput, _ ...request.Option) (*iam.ListInstanceProfilesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListInstanceProfiles cancelled", ctx.Err())
	default:
		return d.ListInstanceProfiles(in)
	}
}

func (d *IAMDouble) ListMFADevices(i0 *iam.ListMFADevicesInput) (r0 *iam.ListMFADevicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMFADevices", i0)
	r0, _ = returns[0].(*iam.ListMFADevicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) ListMFADevicesPages(i0 *iam.ListMFADevicesInput, i1 func(*iam.ListMFADevicesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMFADevicesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListMFADevicesPages(in *iam.ListMFADevicesInput, pager func(*iam.ListMFADevicesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListMFADevices", paginators, in, pager)
}

func (d *IAMDouble) ListMFADevicesPagesWithContext(i0 context.Context, i1 *iam.ListMFADevicesInput, i2 func(*iam.ListMFADevicesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMFADevicesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListMFADevicesPagesWithContext(ctx context.Context, in *iam.ListMFADevicesInput, pager func(*iam.ListMFADevicesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListMFADevices", paginators, ctx, in, pager, options...)
}

func (d *IAMDouble) ListMFADevicesRequest(i0 *iam.ListMFADevicesInput) (r0 *request.Request, r1 *iam.ListMFADevicesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMFADevicesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.ListMFADevicesOutput)
	return
}

func (d *IAMDouble) ListMFADevicesWithContext(i0 context.Context, i1 *iam.ListMFADevicesInput, i2 ...request.Option) (r0 *iam.ListMFADevicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMFADevicesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.ListMFADevicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeListMFADevicesWithContext(ctx context.Context, in *iam.ListMFADevicesInput, _ ...request.Option) (*iam.ListMFADevicesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListMFADevices cancelled", ctx.Err())
	default:
		return d.ListMFADevices(in)
	}
}

func (d *IAMDouble) ListOpenIDConnectProviders(i0 *iam.ListOpenIDConnectProvidersInput) (r0 *iam.ListOpenIDConnectProvidersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOpenIDConnectProviders", i0)
	r0, _ = returns[0].(*iam.ListOpenIDConnectProvidersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) ListOpenIDConnectProvidersRequest(i0 *iam.ListOpenIDConnectProvidersInput) (r0 *request.Request, r1 *iam.ListOpenIDConnectProvidersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOpenIDConnectProvidersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.ListOpenIDConnectProvidersOutput)
	return
}

func (d *IAMDouble) ListOpenIDConnectProvidersWithContext(i0 context.Context, i1 *iam.ListOpenIDConnectProvidersInput, i2 ...request.Option) (r0 *iam.ListOpenIDConnectProvidersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOpenIDConnectProvidersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.ListOpenIDConnectProvidersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeListOpenIDConnectProvidersWithContext(ctx context.Context, in *iam.ListOpenIDConnectProvidersInput, _ ...request.Option) (*iam.ListOpenIDConnectProvidersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListOpenIDConnectProviders cancelled", ctx.Err())
	default:
		return d.ListOpenIDConnectProviders(in)
	}
}

func (d *IAMDouble) ListPolicies(i0 *iam.ListPoliciesInput) (r0 *iam.ListPoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPolicies", i0)
	r0, _ = returns[0].(*iam.ListPoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) ListPoliciesGrantingServiceAccess(i0 *iam.ListPoliciesGrantingServiceAccessInput) (r0 *iam.ListPoliciesGrantingServiceAccessOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPoliciesGrantingServiceAccess", i0)
	r0, _ = returns[0].(*iam.ListPoliciesGrantingServiceAccessOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) ListPoliciesGrantingServiceAccessRequest(i0 *iam.ListPoliciesGrantingServiceAccessInput) (r0 *request.Request, r1 *iam.ListPoliciesGrantingServiceAccessOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPoliciesGrantingServiceAccessRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.ListPoliciesGrantingServiceAccessOutput)
	return
}

func (d *IAMDouble) ListPoliciesGrantingServiceAccessWithContext(i0 context.Context, i1 *iam.ListPoliciesGrantingServiceAccessInput, i2 ...request.Option) (r0 *iam.ListPoliciesGrantingServiceAccessOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPoliciesGrantingServiceAccessWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.ListPoliciesGrantingServiceAccessOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeListPoliciesGrantingServiceAccessWithContext(ctx context.Context, in *iam.ListPoliciesGrantingServiceAccessInput, _ ...request.Option) (*iam.ListPoliciesGrantingServiceAccessOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListPoliciesGrantingServiceAccess cancelled", ctx.Err())
	default:
		return d.ListPoliciesGrantingServiceAccess(in)
	}
}

func (d *IAMDouble) ListPoliciesPages(i0 *iam.ListPoliciesInput, i1 func(*iam.ListPoliciesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPoliciesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListPoliciesPages(in *iam.ListPoliciesInput, pager func(*iam.ListPoliciesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListPolicies", paginators, in, pager)
}

func (d *IAMDouble) ListPoliciesPagesWithContext(i0 context.Context, i1 *iam.ListPoliciesInput, i2 func(*iam.ListPoliciesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPoliciesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListPoliciesPagesWithContext(ctx context.Context, in *iam.ListPoliciesInput, pager func(*iam.ListPoliciesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListPolicies", paginators, ctx, in, pager, options...)
}

func (d *IAMDouble) ListPoliciesRequest(i0 *iam.ListPoliciesInput) (r0 *request.Request, r1 *iam.ListPoliciesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPoliciesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.ListPoliciesOutput)
	return
}

func (d *IAMDouble) ListPoliciesWithContext(i0 context.Context, i1 *iam.ListPoliciesInput, i2 ...request.Option) (r0 *iam.ListPoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPoliciesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.ListPoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeListPoliciesWithContext(ctx context.Context, in *iam.ListPoliciesInput, _ ...request.Option) (*iam.ListPoliciesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListPolicies cancelled", ctx.Err())
	default:
		return d.ListPolicies(in)
	}
}

func (d *IAMDouble) ListPolicyVersions(i0 *iam.ListPolicyVersionsInput) (r0 *iam.ListPolicyVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPolicyVersions", i0)
	r0, _ = returns[0].(*iam.ListPolicyVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) ListPolicyVersionsPages(i0 *iam.ListPolicyVersionsInput, i1 func(*iam.ListPolicyVersionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPolicyVersionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListPolicyVersionsPages(in *iam.ListPolicyVersionsInput, pager func(*iam.ListPolicyVersionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListPolicyVersions", paginators, in, pager)
}

func (d *IAMDouble) ListPolicyVersionsPagesWithContext(i0 context.Context, i1 *iam.ListPolicyVersionsInput, i2 func(*iam.ListPolicyVersionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPolicyVersionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListPolicyVersionsPagesWithContext(ctx context.Context, in *iam.ListPolicyVersionsInput, pager func(*iam.ListPolicyVersionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListPolicyVersions", paginators, ctx, in, pager, options...)
}

func (d *IAMDouble) ListPolicyVersionsRequest(i0 *iam.ListPolicyVersionsInput) (r0 *request.Request, r1 *iam.ListPolicyVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPolicyVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.ListPolicyVersionsOutput)
	return
}

func (d *IAMDouble) ListPolicyVersionsWithContext(i0 context.Context, i1 *iam.ListPolicyVersionsInput, i2 ...request.Option) (r0 *iam.ListPolicyVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPolicyVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.ListPolicyVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeListPolicyVersionsWithContext(ctx context.Context, in *iam.ListPolicyVersionsInput, _ ...request.Option) (*iam.ListPolicyVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListPolicyVersions cancelled", ctx.Err())
	default:
		return d.ListPolicyVersions(in)
	}
}

func (d *IAMDouble) ListRolePolicies(i0 *iam.ListRolePoliciesInput) (r0 *iam.ListRolePoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRolePolicies", i0)
	r0, _ = returns[0].(*iam.ListRolePoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) ListRolePoliciesPages(i0 *iam.ListRolePoliciesInput, i1 func(*iam.ListRolePoliciesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRolePoliciesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListRolePoliciesPages(in *iam.ListRolePoliciesInput, pager func(*iam.ListRolePoliciesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListRolePolicies", paginators, in, pager)
}

func (d *IAMDouble) ListRolePoliciesPagesWithContext(i0 context.Context, i1 *iam.ListRolePoliciesInput, i2 func(*iam.ListRolePoliciesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRolePoliciesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListRolePoliciesPagesWithContext(ctx context.Context, in *iam.ListRolePoliciesInput, pager func(*iam.ListRolePoliciesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListRolePolicies", paginators, ctx, in, pager, options...)
}

func (d *IAMDouble) ListRolePoliciesRequest(i0 *iam.ListRolePoliciesInput) (r0 *request.Request, r1 *iam.ListRolePoliciesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRolePoliciesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.ListRolePoliciesOutput)
	return
}

func (d *IAMDouble) ListRolePoliciesWithContext(i0 context.Context, i1 *iam.ListRolePoliciesInput, i2 ...request.Option) (r0 *iam.ListRolePoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRolePoliciesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.ListRolePoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeListRolePoliciesWithContext(ctx context.Context, in *iam.ListRolePoliciesInput, _ ...request.Option) (*iam.ListRolePoliciesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListRolePolicies cancelled", ctx.Err())
	default:
		return d.ListRolePolicies(in)
	}
}

func (d *IAMDouble) ListRoleTags(i0 *iam.ListRoleTagsInput) (r0 *iam.ListRoleTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRoleTags", i0)
	r0, _ = returns[0].(*iam.ListRoleTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) ListRoleTagsRequest(i0 *iam.ListRoleTagsInput) (r0 *request.Request, r1 *iam.ListRoleTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRoleTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.ListRoleTagsOutput)
	return
}

func (d *IAMDouble) ListRoleTagsWithContext(i0 context.Context, i1 *iam.ListRoleTagsInput, i2 ...request.Option) (r0 *iam.ListRoleTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRoleTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.ListRoleTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeListRoleTagsWithContext(ctx context.Context, in *iam.ListRoleTagsInput, _ ...request.Option) (*iam.ListRoleTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListRoleTags cancelled", ctx.Err())
	default:
		return d.ListRoleTags(in)
	}
}

func (d *IAMDouble) ListRoles(i0 *iam.ListRolesInput) (r0 *iam.ListRolesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRoles", i0)
	r0, _ = returns[0].(*iam.ListRolesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) ListRolesPages(i0 *iam.ListRolesInput, i1 func(*iam.ListRolesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRolesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListRolesPages(in *iam.ListRolesInput, pager func(*iam.ListRolesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListRoles", paginators, in, pager)
}

func (d *IAMDouble) ListRolesPagesWithContext(i0 context.Context, i1 *iam.ListRolesInput, i2 func(*iam.ListRolesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRolesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListRolesPagesWithContext(ctx context.Context, in *iam.ListRolesInput, pager func(*iam.ListRolesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListRoles", paginators, ctx, in, pager, options...)
}

func (d *IAMDouble) ListRolesRequest(i0 *iam.ListRolesInput) (r0 *request.Request, r1 *iam.ListRolesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRolesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.ListRolesOutput)
	return
}

func (d *IAMDouble) ListRolesWithContext(i0 context.Context, i1 *iam.ListRolesInput, i2 ...request.Option) (r0 *iam.ListRolesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRolesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.ListRolesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeListRolesWithContext(ctx context.Context, in *iam.ListRolesInput, _ ...request.Option) (*iam.ListRolesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListRoles cancelled", ctx.Err())
	default:
		return d.ListRoles(in)
	}
}

func (d *IAMDouble) ListSAMLProviders(i0 *iam.ListSAMLProvidersInput) (r0 *iam.ListSAMLProvidersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSAMLProviders", i0)
	r0, _ = returns[0].(*iam.ListSAMLProvidersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) ListSAMLProvidersRequest(i0 *iam.ListSAMLProvidersInput) (r0 *request.Request, r1 *iam.ListSAMLProvidersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSAMLProvidersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.ListSAMLProvidersOutput)
	return
}

func (d *IAMDouble) ListSAMLProvidersWithContext(i0 context.Context, i1 *iam.ListSAMLProvidersInput, i2 ...request.Option) (r0 *iam.ListSAMLProvidersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSAMLProvidersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.ListSAMLProvidersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeListSAMLProvidersWithContext(ctx context.Context, in *iam.ListSAMLProvidersInput, _ ...request.Option) (*iam.ListSAMLProvidersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListSAMLProviders cancelled", ctx.Err())
	default:
		return d.ListSAMLProviders(in)
	}
}

func (d *IAMDouble) ListSSHPublicKeys(i0 *iam.ListSSHPublicKeysInput) (r0 *iam.ListSSHPublicKeysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSSHPublicKeys", i0)
	r0, _ = returns[0].(*iam.ListSSHPublicKeysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) ListSSHPublicKeysPages(i0 *iam.ListSSHPublicKeysInput, i1 func(*iam.ListSSHPublicKeysOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSSHPublicKeysPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListSSHPublicKeysPages(in *iam.ListSSHPublicKeysInput, pager func(*iam.ListSSHPublicKeysOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListSSHPublicKeys", paginators, in, pager)
}

func (d *IAMDouble) ListSSHPublicKeysPagesWithContext(i0 context.Context, i1 *iam.ListSSHPublicKeysInput, i2 func(*iam.ListSSHPublicKeysOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSSHPublicKeysPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListSSHPublicKeysPagesWithContext(ctx context.Context, in *iam.ListSSHPublicKeysInput, pager func(*iam.ListSSHPublicKeysOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListSSHPublicKeys", paginators, ctx, in, pager, options...)
}

func (d *IAMDouble) ListSSHPublicKeysRequest(i0 *iam.ListSSHPublicKeysInput) (r0 *request.Request, r1 *iam.ListSSHPublicKeysOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSSHPublicKeysRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.ListSSHPublicKeysOutput)
	return
}

func (d *IAMDouble) ListSSHPublicKeysWithContext(i0 context.Context, i1 *iam.ListSSHPublicKeysInput, i2 ...request.Option) (r0 *iam.ListSSHPublicKeysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSSHPublicKeysWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.ListSSHPublicKeysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeListSSHPublicKeysWithContext(ctx context.Context, in *iam.ListSSHPublicKeysInput, _ ...request.Option) (*iam.ListSSHPublicKeysOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListSSHPublicKeys cancelled", ctx.Err())
	default:
		return d.ListSSHPublicKeys(in)
	}
}

func (d *IAMDouble) ListServerCertificates(i0 *iam.ListServerCertificatesInput) (r0 *iam.ListServerCertificatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListServerCertificates", i0)
	r0, _ = returns[0].(*iam.ListServerCertificatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) ListServerCertificatesPages(i0 *iam.ListServerCertificatesInput, i1 func(*iam.ListServerCertificatesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListServerCertificatesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListServerCertificatesPages(in *iam.ListServerCertificatesInput, pager func(*iam.ListServerCertificatesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListServerCertificates", paginators, in, pager)
}

func (d *IAMDouble) ListServerCertificatesPagesWithContext(i0 context.Context, i1 *iam.ListServerCertificatesInput, i2 func(*iam.ListServerCertificatesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListServerCertificatesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListServerCertificatesPagesWithContext(ctx context.Context, in *iam.ListServerCertificatesInput, pager func(*iam.ListServerCertificatesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListServerCertificates", paginators, ctx, in, pager, options...)
}

func (d *IAMDouble) ListServerCertificatesRequest(i0 *iam.ListServerCertificatesInput) (r0 *request.Request, r1 *iam.ListServerCertificatesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListServerCertificatesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.ListServerCertificatesOutput)
	return
}

func (d *IAMDouble) ListServerCertificatesWithContext(i0 context.Context, i1 *iam.ListServerCertificatesInput, i2 ...request.Option) (r0 *iam.ListServerCertificatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListServerCertificatesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.ListServerCertificatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeListServerCertificatesWithContext(ctx context.Context, in *iam.ListServerCertificatesInput, _ ...request.Option) (*iam.ListServerCertificatesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListServerCertificates cancelled", ctx.Err())
	default:
		return d.ListServerCertificates(in)
	}
}

func (d *IAMDouble) ListServiceSpecificCredentials(i0 *iam.ListServiceSpecificCredentialsInput) (r0 *iam.ListServiceSpecificCredentialsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListServiceSpecificCredentials", i0)
	r0, _ = returns[0].(*iam.ListServiceSpecificCredentialsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) ListServiceSpecificCredentialsRequest(i0 *iam.ListServiceSpecificCredentialsInput) (r0 *request.Request, r1 *iam.ListServiceSpecificCredentialsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListServiceSpecificCredentialsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.ListServiceSpecificCredentialsOutput)
	return
}

func (d *IAMDouble) ListServiceSpecificCredentialsWithContext(i0 context.Context, i1 *iam.ListServiceSpecificCredentialsInput, i2 ...request.Option) (r0 *iam.ListServiceSpecificCredentialsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListServiceSpecificCredentialsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.ListServiceSpecificCredentialsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeListServiceSpecificCredentialsWithContext(ctx context.Context, in *iam.ListServiceSpecificCredentialsInput, _ ...request.Option) (*iam.ListServiceSpecificCredentialsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListServiceSpecificCredentials cancelled", ctx.Err())
	default:
		return d.ListServiceSpecificCredentials(in)
	}
}

func (d *IAMDouble) ListSigningCertificates(i0 *iam.ListSigningCertificatesInput) (r0 *iam.ListSigningCertificatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSigningCertificates", i0)
	r0, _ = returns[0].(*iam.ListSigningCertificatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) ListSigningCertificatesPages(i0 *iam.ListSigningCertificatesInput, i1 func(*iam.ListSigningCertificatesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSigningCertificatesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListSigningCertificatesPages(in *iam.ListSigningCertificatesInput, pager func(*iam.ListSigningCertificatesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListSigningCertificates", paginators, in, pager)
}

func (d *IAMDouble) ListSigningCertificatesPagesWithContext(i0 context.Context, i1 *iam.ListSigningCertificatesInput, i2 func(*iam.ListSigningCertificatesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSigningCertificatesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListSigningCertificatesPagesWithContext(ctx context.Context, in *iam.ListSigningCertificatesInput, pager func(*iam.ListSigningCertificatesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListSigningCertificates", paginators, ctx, in, pager, options...)
}

func (d *IAMDouble) ListSigningCertificatesRequest(i0 *iam.ListSigningCertificatesInput) (r0 *request.Request, r1 *iam.ListSigningCertificatesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSigningCertificatesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.ListSigningCertificatesOutput)
	return
}

func (d *IAMDouble) ListSigningCertificatesWithContext(i0 context.Context, i1 *iam.ListSigningCertificatesInput, i2 ...request.Option) (r0 *iam.ListSigningCertificatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSigningCertificatesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.ListSigningCertificatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeListSigningCertificatesWithContext(ctx context.Context, in *iam.ListSigningCertificatesInput, _ ...request.Option) (*iam.ListSigningCertificatesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListSigningCertificates cancelled", ctx.Err())
	default:
		return d.ListSigningCertificates(in)
	}
}

func (d *IAMDouble) ListUserPolicies(i0 *iam.ListUserPoliciesInput) (r0 *iam.ListUserPoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUserPolicies", i0)
	r0, _ = returns[0].(*iam.ListUserPoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) ListUserPoliciesPages(i0 *iam.ListUserPoliciesInput, i1 func(*iam.ListUserPoliciesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUserPoliciesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListUserPoliciesPages(in *iam.ListUserPoliciesInput, pager func(*iam.ListUserPoliciesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListUserPolicies", paginators, in, pager)
}

func (d *IAMDouble) ListUserPoliciesPagesWithContext(i0 context.Context, i1 *iam.ListUserPoliciesInput, i2 func(*iam.ListUserPoliciesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUserPoliciesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListUserPoliciesPagesWithContext(ctx context.Context, in *iam.ListUserPoliciesInput, pager func(*iam.ListUserPoliciesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListUserPolicies", paginators, ctx, in, pager, options...)
}

func (d *IAMDouble) ListUserPoliciesRequest(i0 *iam.ListUserPoliciesInput) (r0 *request.Request, r1 *iam.ListUserPoliciesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUserPoliciesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.ListUserPoliciesOutput)
	return
}

func (d *IAMDouble) ListUserPoliciesWithContext(i0 context.Context, i1 *iam.ListUserPoliciesInput, i2 ...request.Option) (r0 *iam.ListUserPoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUserPoliciesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.ListUserPoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeListUserPoliciesWithContext(ctx context.Context, in *iam.ListUserPoliciesInput, _ ...request.Option) (*iam.ListUserPoliciesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListUserPolicies cancelled", ctx.Err())
	default:
		return d.ListUserPolicies(in)
	}
}

func (d *IAMDouble) ListUserTags(i0 *iam.ListUserTagsInput) (r0 *iam.ListUserTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUserTags", i0)
	r0, _ = returns[0].(*iam.ListUserTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) ListUserTagsRequest(i0 *iam.ListUserTagsInput) (r0 *request.Request, r1 *iam.ListUserTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUserTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.ListUserTagsOutput)
	return
}

func (d *IAMDouble) ListUserTagsWithContext(i0 context.Context, i1 *iam.ListUserTagsInput, i2 ...request.Option) (r0 *iam.ListUserTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUserTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.ListUserTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeListUserTagsWithContext(ctx context.Context, in *iam.ListUserTagsInput, _ ...request.Option) (*iam.ListUserTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListUserTags cancelled", ctx.Err())
	default:
		return d.ListUserTags(in)
	}
}

func (d *IAMDouble) ListUsers(i0 *iam.ListUsersInput) (r0 *iam.ListUsersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUsers", i0)
	r0, _ = returns[0].(*iam.ListUsersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) ListUsersPages(i0 *iam.ListUsersInput, i1 func(*iam.ListUsersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUsersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListUsersPages(in *iam.ListUsersInput, pager func(*iam.ListUsersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListUsers", paginators, in, pager)
}

func (d *IAMDouble) ListUsersPagesWithContext(i0 context.Context, i1 *iam.ListUsersInput, i2 func(*iam.ListUsersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUsersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListUsersPagesWithContext(ctx context.Context, in *iam.ListUsersInput, pager func(*iam.ListUsersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListUsers", paginators, ctx, in, pager, options...)
}

func (d *IAMDouble) ListUsersRequest(i0 *iam.ListUsersInput) (r0 *request.Request, r1 *iam.ListUsersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUsersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.ListUsersOutput)
	return
}

func (d *IAMDouble) ListUsersWithContext(i0 context.Context, i1 *iam.ListUsersInput, i2 ...request.Option) (r0 *iam.ListUsersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUsersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.ListUsersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeListUsersWithContext(ctx context.Context, in *iam.ListUsersInput, _ ...request.Option) (*iam.ListUsersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListUsers cancelled", ctx.Err())
	default:
		return d.ListUsers(in)
	}
}

func (d *IAMDouble) ListVirtualMFADevices(i0 *iam.ListVirtualMFADevicesInput) (r0 *iam.ListVirtualMFADevicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVirtualMFADevices", i0)
	r0, _ = returns[0].(*iam.ListVirtualMFADevicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) ListVirtualMFADevicesPages(i0 *iam.ListVirtualMFADevicesInput, i1 func(*iam.ListVirtualMFADevicesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVirtualMFADevicesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListVirtualMFADevicesPages(in *iam.ListVirtualMFADevicesInput, pager func(*iam.ListVirtualMFADevicesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListVirtualMFADevices", paginators, in, pager)
}

func (d *IAMDouble) ListVirtualMFADevicesPagesWithContext(i0 context.Context, i1 *iam.ListVirtualMFADevicesInput, i2 func(*iam.ListVirtualMFADevicesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVirtualMFADevicesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeListVirtualMFADevicesPagesWithContext(ctx context.Context, in *iam.ListVirtualMFADevicesInput, pager func(*iam.ListVirtualMFADevicesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListVirtualMFADevices", paginators, ctx, in, pager, options...)
}

func (d *IAMDouble) ListVirtualMFADevicesRequest(i0 *iam.ListVirtualMFADevicesInput) (r0 *request.Request, r1 *iam.ListVirtualMFADevicesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVirtualMFADevicesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.ListVirtualMFADevicesOutput)
	return
}

func (d *IAMDouble) ListVirtualMFADevicesWithContext(i0 context.Context, i1 *iam.ListVirtualMFADevicesInput, i2 ...request.Option) (r0 *iam.ListVirtualMFADevicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVirtualMFADevicesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.ListVirtualMFADevicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeListVirtualMFADevicesWithContext(ctx context.Context, in *iam.ListVirtualMFADevicesInput, _ ...request.Option) (*iam.ListVirtualMFADevicesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListVirtualMFADevices cancelled", ctx.Err())
	default:
		return d.ListVirtualMFADevices(in)
	}
}

func (d *IAMDouble) PutGroupPolicy(i0 *iam.PutGroupPolicyInput) (r0 *iam.PutGroupPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutGroupPolicy", i0)
	r0, _ = returns[0].(*iam.PutGroupPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) PutGroupPolicyRequest(i0 *iam.PutGroupPolicyInput) (r0 *request.Request, r1 *iam.PutGroupPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutGroupPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.PutGroupPolicyOutput)
	return
}

func (d *IAMDouble) PutGroupPolicyWithContext(i0 context.Context, i1 *iam.PutGroupPolicyInput, i2 ...request.Option) (r0 *iam.PutGroupPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutGroupPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.PutGroupPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakePutGroupPolicyWithContext(ctx context.Context, in *iam.PutGroupPolicyInput, _ ...request.Option) (*iam.PutGroupPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutGroupPolicy cancelled", ctx.Err())
	default:
		return d.PutGroupPolicy(in)
	}
}

func (d *IAMDouble) PutRolePermissionsBoundary(i0 *iam.PutRolePermissionsBoundaryInput) (r0 *iam.PutRolePermissionsBoundaryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRolePermissionsBoundary", i0)
	r0, _ = returns[0].(*iam.PutRolePermissionsBoundaryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) PutRolePermissionsBoundaryRequest(i0 *iam.PutRolePermissionsBoundaryInput) (r0 *request.Request, r1 *iam.PutRolePermissionsBoundaryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRolePermissionsBoundaryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.PutRolePermissionsBoundaryOutput)
	return
}

func (d *IAMDouble) PutRolePermissionsBoundaryWithContext(i0 context.Context, i1 *iam.PutRolePermissionsBoundaryInput, i2 ...request.Option) (r0 *iam.PutRolePermissionsBoundaryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRolePermissionsBoundaryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.PutRolePermissionsBoundaryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakePutRolePermissionsBoundaryWithContext(ctx context.Context, in *iam.PutRolePermissionsBoundaryInput, _ ...request.Option) (*iam.PutRolePermissionsBoundaryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutRolePermissionsBoundary cancelled", ctx.Err())
	default:
		return d.PutRolePermissionsBoundary(in)
	}
}

func (d *IAMDouble) PutRolePolicy(i0 *iam.PutRolePolicyInput) (r0 *iam.PutRolePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRolePolicy", i0)
	r0, _ = returns[0].(*iam.PutRolePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) PutRolePolicyRequest(i0 *iam.PutRolePolicyInput) (r0 *request.Request, r1 *iam.PutRolePolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRolePolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.PutRolePolicyOutput)
	return
}

func (d *IAMDouble) PutRolePolicyWithContext(i0 context.Context, i1 *iam.PutRolePolicyInput, i2 ...request.Option) (r0 *iam.PutRolePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRolePolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.PutRolePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakePutRolePolicyWithContext(ctx context.Context, in *iam.PutRolePolicyInput, _ ...request.Option) (*iam.PutRolePolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutRolePolicy cancelled", ctx.Err())
	default:
		return d.PutRolePolicy(in)
	}
}

func (d *IAMDouble) PutUserPermissionsBoundary(i0 *iam.PutUserPermissionsBoundaryInput) (r0 *iam.PutUserPermissionsBoundaryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutUserPermissionsBoundary", i0)
	r0, _ = returns[0].(*iam.PutUserPermissionsBoundaryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) PutUserPermissionsBoundaryRequest(i0 *iam.PutUserPermissionsBoundaryInput) (r0 *request.Request, r1 *iam.PutUserPermissionsBoundaryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutUserPermissionsBoundaryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.PutUserPermissionsBoundaryOutput)
	return
}

func (d *IAMDouble) PutUserPermissionsBoundaryWithContext(i0 context.Context, i1 *iam.PutUserPermissionsBoundaryInput, i2 ...request.Option) (r0 *iam.PutUserPermissionsBoundaryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutUserPermissionsBoundaryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.PutUserPermissionsBoundaryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakePutUserPermissionsBoundaryWithContext(ctx context.Context, in *iam.PutUserPermissionsBoundaryInput, _ ...request.Option) (*iam.PutUserPermissionsBoundaryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutUserPermissionsBoundary cancelled", ctx.Err())
	default:
		return d.PutUserPermissionsBoundary(in)
	}
}

func (d *IAMDouble) PutUserPolicy(i0 *iam.PutUserPolicyInput) (r0 *iam.PutUserPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutUserPolicy", i0)
	r0, _ = returns[0].(*iam.PutUserPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) PutUserPolicyRequest(i0 *iam.PutUserPolicyInput) (r0 *request.Request, r1 *iam.PutUserPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutUserPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.PutUserPolicyOutput)
	return
}

func (d *IAMDouble) PutUserPolicyWithContext(i0 context.Context, i1 *iam.PutUserPolicyInput, i2 ...request.Option) (r0 *iam.PutUserPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutUserPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.PutUserPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakePutUserPolicyWithContext(ctx context.Context, in *iam.PutUserPolicyInput, _ ...request.Option) (*iam.PutUserPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutUserPolicy cancelled", ctx.Err())
	default:
		return d.PutUserPolicy(in)
	}
}

func (d *IAMDouble) RemoveClientIDFromOpenIDConnectProvider(i0 *iam.RemoveClientIDFromOpenIDConnectProviderInput) (r0 *iam.RemoveClientIDFromOpenIDConnectProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveClientIDFromOpenIDConnectProvider", i0)
	r0, _ = returns[0].(*iam.RemoveClientIDFromOpenIDConnectProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) RemoveClientIDFromOpenIDConnectProviderRequest(i0 *iam.RemoveClientIDFromOpenIDConnectProviderInput) (r0 *request.Request, r1 *iam.RemoveClientIDFromOpenIDConnectProviderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveClientIDFromOpenIDConnectProviderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.RemoveClientIDFromOpenIDConnectProviderOutput)
	return
}

func (d *IAMDouble) RemoveClientIDFromOpenIDConnectProviderWithContext(i0 context.Context, i1 *iam.RemoveClientIDFromOpenIDConnectProviderInput, i2 ...request.Option) (r0 *iam.RemoveClientIDFromOpenIDConnectProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveClientIDFromOpenIDConnectProviderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.RemoveClientIDFromOpenIDConnectProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeRemoveClientIDFromOpenIDConnectProviderWithContext(ctx context.Context, in *iam.RemoveClientIDFromOpenIDConnectProviderInput, _ ...request.Option) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveClientIDFromOpenIDConnectProvider cancelled", ctx.Err())
	default:
		return d.RemoveClientIDFromOpenIDConnectProvider(in)
	}
}

func (d *IAMDouble) RemoveRoleFromInstanceProfile(i0 *iam.RemoveRoleFromInstanceProfileInput) (r0 *iam.RemoveRoleFromInstanceProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveRoleFromInstanceProfile", i0)
	r0, _ = returns[0].(*iam.RemoveRoleFromInstanceProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) RemoveRoleFromInstanceProfileRequest(i0 *iam.RemoveRoleFromInstanceProfileInput) (r0 *request.Request, r1 *iam.RemoveRoleFromInstanceProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveRoleFromInstanceProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.RemoveRoleFromInstanceProfileOutput)
	return
}

func (d *IAMDouble) RemoveRoleFromInstanceProfileWithContext(i0 context.Context, i1 *iam.RemoveRoleFromInstanceProfileInput, i2 ...request.Option) (r0 *iam.RemoveRoleFromInstanceProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveRoleFromInstanceProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.RemoveRoleFromInstanceProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeRemoveRoleFromInstanceProfileWithContext(ctx context.Context, in *iam.RemoveRoleFromInstanceProfileInput, _ ...request.Option) (*iam.RemoveRoleFromInstanceProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveRoleFromInstanceProfile cancelled", ctx.Err())
	default:
		return d.RemoveRoleFromInstanceProfile(in)
	}
}

func (d *IAMDouble) RemoveUserFromGroup(i0 *iam.RemoveUserFromGroupInput) (r0 *iam.RemoveUserFromGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveUserFromGroup", i0)
	r0, _ = returns[0].(*iam.RemoveUserFromGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) RemoveUserFromGroupRequest(i0 *iam.RemoveUserFromGroupInput) (r0 *request.Request, r1 *iam.RemoveUserFromGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveUserFromGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.RemoveUserFromGroupOutput)
	return
}

func (d *IAMDouble) RemoveUserFromGroupWithContext(i0 context.Context, i1 *iam.RemoveUserFromGroupInput, i2 ...request.Option) (r0 *iam.RemoveUserFromGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveUserFromGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.RemoveUserFromGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeRemoveUserFromGroupWithContext(ctx context.Context, in *iam.RemoveUserFromGroupInput, _ ...request.Option) (*iam.RemoveUserFromGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveUserFromGroup cancelled", ctx.Err())
	default:
		return d.RemoveUserFromGroup(in)
	}
}

func (d *IAMDouble) ResetServiceSpecificCredential(i0 *iam.ResetServiceSpecificCredentialInput) (r0 *iam.ResetServiceSpecificCredentialOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetServiceSpecificCredential", i0)
	r0, _ = returns[0].(*iam.ResetServiceSpecificCredentialOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) ResetServiceSpecificCredentialRequest(i0 *iam.ResetServiceSpecificCredentialInput) (r0 *request.Request, r1 *iam.ResetServiceSpecificCredentialOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetServiceSpecificCredentialRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.ResetServiceSpecificCredentialOutput)
	return
}

func (d *IAMDouble) ResetServiceSpecificCredentialWithContext(i0 context.Context, i1 *iam.ResetServiceSpecificCredentialInput, i2 ...request.Option) (r0 *iam.ResetServiceSpecificCredentialOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetServiceSpecificCredentialWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.ResetServiceSpecificCredentialOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeResetServiceSpecificCredentialWithContext(ctx context.Context, in *iam.ResetServiceSpecificCredentialInput, _ ...request.Option) (*iam.ResetServiceSpecificCredentialOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ResetServiceSpecificCredential cancelled", ctx.Err())
	default:
		return d.ResetServiceSpecificCredential(in)
	}
}

func (d *IAMDouble) ResyncMFADevice(i0 *iam.ResyncMFADeviceInput) (r0 *iam.ResyncMFADeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResyncMFADevice", i0)
	r0, _ = returns[0].(*iam.ResyncMFADeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) ResyncMFADeviceRequest(i0 *iam.ResyncMFADeviceInput) (r0 *request.Request, r1 *iam.ResyncMFADeviceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResyncMFADeviceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.ResyncMFADeviceOutput)
	return
}

func (d *IAMDouble) ResyncMFADeviceWithContext(i0 context.Context, i1 *iam.ResyncMFADeviceInput, i2 ...request.Option) (r0 *iam.ResyncMFADeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResyncMFADeviceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.ResyncMFADeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeResyncMFADeviceWithContext(ctx context.Context, in *iam.ResyncMFADeviceInput, _ ...request.Option) (*iam.ResyncMFADeviceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ResyncMFADevice cancelled", ctx.Err())
	default:
		return d.ResyncMFADevice(in)
	}
}

func (d *IAMDouble) SetDefaultPolicyVersion(i0 *iam.SetDefaultPolicyVersionInput) (r0 *iam.SetDefaultPolicyVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetDefaultPolicyVersion", i0)
	r0, _ = returns[0].(*iam.SetDefaultPolicyVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) SetDefaultPolicyVersionRequest(i0 *iam.SetDefaultPolicyVersionInput) (r0 *request.Request, r1 *iam.SetDefaultPolicyVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetDefaultPolicyVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.SetDefaultPolicyVersionOutput)
	return
}

func (d *IAMDouble) SetDefaultPolicyVersionWithContext(i0 context.Context, i1 *iam.SetDefaultPolicyVersionInput, i2 ...request.Option) (r0 *iam.SetDefaultPolicyVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetDefaultPolicyVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.SetDefaultPolicyVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeSetDefaultPolicyVersionWithContext(ctx context.Context, in *iam.SetDefaultPolicyVersionInput, _ ...request.Option) (*iam.SetDefaultPolicyVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetDefaultPolicyVersion cancelled", ctx.Err())
	default:
		return d.SetDefaultPolicyVersion(in)
	}
}

func (d *IAMDouble) SetSecurityTokenServicePreferences(i0 *iam.SetSecurityTokenServicePreferencesInput) (r0 *iam.SetSecurityTokenServicePreferencesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetSecurityTokenServicePreferences", i0)
	r0, _ = returns[0].(*iam.SetSecurityTokenServicePreferencesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) SetSecurityTokenServicePreferencesRequest(i0 *iam.SetSecurityTokenServicePreferencesInput) (r0 *request.Request, r1 *iam.SetSecurityTokenServicePreferencesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetSecurityTokenServicePreferencesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.SetSecurityTokenServicePreferencesOutput)
	return
}

func (d *IAMDouble) SetSecurityTokenServicePreferencesWithContext(i0 context.Context, i1 *iam.SetSecurityTokenServicePreferencesInput, i2 ...request.Option) (r0 *iam.SetSecurityTokenServicePreferencesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetSecurityTokenServicePreferencesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.SetSecurityTokenServicePreferencesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeSetSecurityTokenServicePreferencesWithContext(ctx context.Context, in *iam.SetSecurityTokenServicePreferencesInput, _ ...request.Option) (*iam.SetSecurityTokenServicePreferencesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetSecurityTokenServicePreferences cancelled", ctx.Err())
	default:
		return d.SetSecurityTokenServicePreferences(in)
	}
}

func (d *IAMDouble) SimulateCustomPolicy(i0 *iam.SimulateCustomPolicyInput) (r0 *iam.SimulatePolicyResponse, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SimulateCustomPolicy", i0)
	r0, _ = returns[0].(*iam.SimulatePolicyResponse)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) SimulateCustomPolicyPages(i0 *iam.SimulateCustomPolicyInput, i1 func(*iam.SimulatePolicyResponse, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SimulateCustomPolicyPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeSimulateCustomPolicyPages(in *iam.SimulateCustomPolicyInput, pager func(*iam.SimulatePolicyResponse, bool) (shouldContinue bool)) error {
	return d.Paginate("SimulateCustomPolicy", paginators, in, pager)
}

func (d *IAMDouble) SimulateCustomPolicyPagesWithContext(i0 context.Context, i1 *iam.SimulateCustomPolicyInput, i2 func(*iam.SimulatePolicyResponse, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SimulateCustomPolicyPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeSimulateCustomPolicyPagesWithContext(ctx context.Context, in *iam.SimulateCustomPolicyInput, pager func(*iam.SimulatePolicyResponse, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("SimulateCustomPolicy", paginators, ctx, in, pager, options...)
}

func (d *IAMDouble) SimulateCustomPolicyRequest(i0 *iam.SimulateCustomPolicyInput) (r0 *request.Request, r1 *iam.SimulatePolicyResponse) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SimulateCustomPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.SimulatePolicyResponse)
	return
}

func (d *IAMDouble) SimulateCustomPolicyWithContext(i0 context.Context, i1 *iam.SimulateCustomPolicyInput, i2 ...request.Option) (r0 *iam.SimulatePolicyResponse, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SimulateCustomPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.SimulatePolicyResponse)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeSimulateCustomPolicyWithContext(ctx context.Context, in *iam.SimulateCustomPolicyInput, _ ...request.Option) (*iam.SimulatePolicyResponse, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SimulateCustomPolicy cancelled", ctx.Err())
	default:
		return d.SimulateCustomPolicy(in)
	}
}

func (d *IAMDouble) SimulatePrincipalPolicy(i0 *iam.SimulatePrincipalPolicyInput) (r0 *iam.SimulatePolicyResponse, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SimulatePrincipalPolicy", i0)
	r0, _ = returns[0].(*iam.SimulatePolicyResponse)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) SimulatePrincipalPolicyPages(i0 *iam.SimulatePrincipalPolicyInput, i1 func(*iam.SimulatePolicyResponse, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SimulatePrincipalPolicyPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeSimulatePrincipalPolicyPages(in *iam.SimulatePrincipalPolicyInput, pager func(*iam.SimulatePolicyResponse, bool) (shouldContinue bool)) error {
	return d.Paginate("SimulatePrincipalPolicy", paginators, in, pager)
}

func (d *IAMDouble) SimulatePrincipalPolicyPagesWithContext(i0 context.Context, i1 *iam.SimulatePrincipalPolicyInput, i2 func(*iam.SimulatePolicyResponse, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SimulatePrincipalPolicyPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeSimulatePrincipalPolicyPagesWithContext(ctx context.Context, in *iam.SimulatePrincipalPolicyInput, pager func(*iam.SimulatePolicyResponse, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("SimulatePrincipalPolicy", paginators, ctx, in, pager, options...)
}

func (d *IAMDouble) SimulatePrincipalPolicyRequest(i0 *iam.SimulatePrincipalPolicyInput) (r0 *request.Request, r1 *iam.SimulatePolicyResponse) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SimulatePrincipalPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.SimulatePolicyResponse)
	return
}

func (d *IAMDouble) SimulatePrincipalPolicyWithContext(i0 context.Context, i1 *iam.SimulatePrincipalPolicyInput, i2 ...request.Option) (r0 *iam.SimulatePolicyResponse, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SimulatePrincipalPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.SimulatePolicyResponse)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeSimulatePrincipalPolicyWithContext(ctx context.Context, in *iam.SimulatePrincipalPolicyInput, _ ...request.Option) (*iam.SimulatePolicyResponse, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SimulatePrincipalPolicy cancelled", ctx.Err())
	default:
		return d.SimulatePrincipalPolicy(in)
	}
}

func (d *IAMDouble) TagRole(i0 *iam.TagRoleInput) (r0 *iam.TagRoleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagRole", i0)
	r0, _ = returns[0].(*iam.TagRoleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) TagRoleRequest(i0 *iam.TagRoleInput) (r0 *request.Request, r1 *iam.TagRoleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagRoleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.TagRoleOutput)
	return
}

func (d *IAMDouble) TagRoleWithContext(i0 context.Context, i1 *iam.TagRoleInput, i2 ...request.Option) (r0 *iam.TagRoleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagRoleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.TagRoleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeTagRoleWithContext(ctx context.Context, in *iam.TagRoleInput, _ ...request.Option) (*iam.TagRoleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagRole cancelled", ctx.Err())
	default:
		return d.TagRole(in)
	}
}

func (d *IAMDouble) TagUser(i0 *iam.TagUserInput) (r0 *iam.TagUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagUser", i0)
	r0, _ = returns[0].(*iam.TagUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) TagUserRequest(i0 *iam.TagUserInput) (r0 *request.Request, r1 *iam.TagUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.TagUserOutput)
	return
}

func (d *IAMDouble) TagUserWithContext(i0 context.Context, i1 *iam.TagUserInput, i2 ...request.Option) (r0 *iam.TagUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.TagUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeTagUserWithContext(ctx context.Context, in *iam.TagUserInput, _ ...request.Option) (*iam.TagUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagUser cancelled", ctx.Err())
	default:
		return d.TagUser(in)
	}
}

func (d *IAMDouble) UntagRole(i0 *iam.UntagRoleInput) (r0 *iam.UntagRoleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagRole", i0)
	r0, _ = returns[0].(*iam.UntagRoleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) UntagRoleRequest(i0 *iam.UntagRoleInput) (r0 *request.Request, r1 *iam.UntagRoleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagRoleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.UntagRoleOutput)
	return
}

func (d *IAMDouble) UntagRoleWithContext(i0 context.Context, i1 *iam.UntagRoleInput, i2 ...request.Option) (r0 *iam.UntagRoleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagRoleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.UntagRoleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeUntagRoleWithContext(ctx context.Context, in *iam.UntagRoleInput, _ ...request.Option) (*iam.UntagRoleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagRole cancelled", ctx.Err())
	default:
		return d.UntagRole(in)
	}
}

func (d *IAMDouble) UntagUser(i0 *iam.UntagUserInput) (r0 *iam.UntagUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagUser", i0)
	r0, _ = returns[0].(*iam.UntagUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) UntagUserRequest(i0 *iam.UntagUserInput) (r0 *request.Request, r1 *iam.UntagUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.UntagUserOutput)
	return
}

func (d *IAMDouble) UntagUserWithContext(i0 context.Context, i1 *iam.UntagUserInput, i2 ...request.Option) (r0 *iam.UntagUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.UntagUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeUntagUserWithContext(ctx context.Context, in *iam.UntagUserInput, _ ...request.Option) (*iam.UntagUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagUser cancelled", ctx.Err())
	default:
		return d.UntagUser(in)
	}
}

func (d *IAMDouble) UpdateAccessKey(i0 *iam.UpdateAccessKeyInput) (r0 *iam.UpdateAccessKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAccessKey", i0)
	r0, _ = returns[0].(*iam.UpdateAccessKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) UpdateAccessKeyRequest(i0 *iam.UpdateAccessKeyInput) (r0 *request.Request, r1 *iam.UpdateAccessKeyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAccessKeyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.UpdateAccessKeyOutput)
	return
}

func (d *IAMDouble) UpdateAccessKeyWithContext(i0 context.Context, i1 *iam.UpdateAccessKeyInput, i2 ...request.Option) (r0 *iam.UpdateAccessKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAccessKeyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.UpdateAccessKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeUpdateAccessKeyWithContext(ctx context.Context, in *iam.UpdateAccessKeyInput, _ ...request.Option) (*iam.UpdateAccessKeyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateAccessKey cancelled", ctx.Err())
	default:
		return d.UpdateAccessKey(in)
	}
}

func (d *IAMDouble) UpdateAccountPasswordPolicy(i0 *iam.UpdateAccountPasswordPolicyInput) (r0 *iam.UpdateAccountPasswordPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAccountPasswordPolicy", i0)
	r0, _ = returns[0].(*iam.UpdateAccountPasswordPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) UpdateAccountPasswordPolicyRequest(i0 *iam.UpdateAccountPasswordPolicyInput) (r0 *request.Request, r1 *iam.UpdateAccountPasswordPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAccountPasswordPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.UpdateAccountPasswordPolicyOutput)
	return
}

func (d *IAMDouble) UpdateAccountPasswordPolicyWithContext(i0 context.Context, i1 *iam.UpdateAccountPasswordPolicyInput, i2 ...request.Option) (r0 *iam.UpdateAccountPasswordPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAccountPasswordPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.UpdateAccountPasswordPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeUpdateAccountPasswordPolicyWithContext(ctx context.Context, in *iam.UpdateAccountPasswordPolicyInput, _ ...request.Option) (*iam.UpdateAccountPasswordPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateAccountPasswordPolicy cancelled", ctx.Err())
	default:
		return d.UpdateAccountPasswordPolicy(in)
	}
}

func (d *IAMDouble) UpdateAssumeRolePolicy(i0 *iam.UpdateAssumeRolePolicyInput) (r0 *iam.UpdateAssumeRolePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAssumeRolePolicy", i0)
	r0, _ = returns[0].(*iam.UpdateAssumeRolePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) UpdateAssumeRolePolicyRequest(i0 *iam.UpdateAssumeRolePolicyInput) (r0 *request.Request, r1 *iam.UpdateAssumeRolePolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAssumeRolePolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.UpdateAssumeRolePolicyOutput)
	return
}

func (d *IAMDouble) UpdateAssumeRolePolicyWithContext(i0 context.Context, i1 *iam.UpdateAssumeRolePolicyInput, i2 ...request.Option) (r0 *iam.UpdateAssumeRolePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAssumeRolePolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.UpdateAssumeRolePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeUpdateAssumeRolePolicyWithContext(ctx context.Context, in *iam.UpdateAssumeRolePolicyInput, _ ...request.Option) (*iam.UpdateAssumeRolePolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateAssumeRolePolicy cancelled", ctx.Err())
	default:
		return d.UpdateAssumeRolePolicy(in)
	}
}

func (d *IAMDouble) UpdateGroup(i0 *iam.UpdateGroupInput) (r0 *iam.UpdateGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGroup", i0)
	r0, _ = returns[0].(*iam.UpdateGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) UpdateGroupRequest(i0 *iam.UpdateGroupInput) (r0 *request.Request, r1 *iam.UpdateGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.UpdateGroupOutput)
	return
}

func (d *IAMDouble) UpdateGroupWithContext(i0 context.Context, i1 *iam.UpdateGroupInput, i2 ...request.Option) (r0 *iam.UpdateGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.UpdateGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeUpdateGroupWithContext(ctx context.Context, in *iam.UpdateGroupInput, _ ...request.Option) (*iam.UpdateGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateGroup cancelled", ctx.Err())
	default:
		return d.UpdateGroup(in)
	}
}

func (d *IAMDouble) UpdateLoginProfile(i0 *iam.UpdateLoginProfileInput) (r0 *iam.UpdateLoginProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateLoginProfile", i0)
	r0, _ = returns[0].(*iam.UpdateLoginProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) UpdateLoginProfileRequest(i0 *iam.UpdateLoginProfileInput) (r0 *request.Request, r1 *iam.UpdateLoginProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateLoginProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.UpdateLoginProfileOutput)
	return
}

func (d *IAMDouble) UpdateLoginProfileWithContext(i0 context.Context, i1 *iam.UpdateLoginProfileInput, i2 ...request.Option) (r0 *iam.UpdateLoginProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateLoginProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.UpdateLoginProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeUpdateLoginProfileWithContext(ctx context.Context, in *iam.UpdateLoginProfileInput, _ ...request.Option) (*iam.UpdateLoginProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateLoginProfile cancelled", ctx.Err())
	default:
		return d.UpdateLoginProfile(in)
	}
}

func (d *IAMDouble) UpdateOpenIDConnectProviderThumbprint(i0 *iam.UpdateOpenIDConnectProviderThumbprintInput) (r0 *iam.UpdateOpenIDConnectProviderThumbprintOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateOpenIDConnectProviderThumbprint", i0)
	r0, _ = returns[0].(*iam.UpdateOpenIDConnectProviderThumbprintOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) UpdateOpenIDConnectProviderThumbprintRequest(i0 *iam.UpdateOpenIDConnectProviderThumbprintInput) (r0 *request.Request, r1 *iam.UpdateOpenIDConnectProviderThumbprintOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateOpenIDConnectProviderThumbprintRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.UpdateOpenIDConnectProviderThumbprintOutput)
	return
}

func (d *IAMDouble) UpdateOpenIDConnectProviderThumbprintWithContext(i0 context.Context, i1 *iam.UpdateOpenIDConnectProviderThumbprintInput, i2 ...request.Option) (r0 *iam.UpdateOpenIDConnectProviderThumbprintOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateOpenIDConnectProviderThumbprintWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.UpdateOpenIDConnectProviderThumbprintOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeUpdateOpenIDConnectProviderThumbprintWithContext(ctx context.Context, in *iam.UpdateOpenIDConnectProviderThumbprintInput, _ ...request.Option) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateOpenIDConnectProviderThumbprint cancelled", ctx.Err())
	default:
		return d.UpdateOpenIDConnectProviderThumbprint(in)
	}
}

func (d *IAMDouble) UpdateRole(i0 *iam.UpdateRoleInput) (r0 *iam.UpdateRoleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRole", i0)
	r0, _ = returns[0].(*iam.UpdateRoleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) UpdateRoleDescription(i0 *iam.UpdateRoleDescriptionInput) (r0 *iam.UpdateRoleDescriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRoleDescription", i0)
	r0, _ = returns[0].(*iam.UpdateRoleDescriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) UpdateRoleDescriptionRequest(i0 *iam.UpdateRoleDescriptionInput) (r0 *request.Request, r1 *iam.UpdateRoleDescriptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRoleDescriptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.UpdateRoleDescriptionOutput)
	return
}

func (d *IAMDouble) UpdateRoleDescriptionWithContext(i0 context.Context, i1 *iam.UpdateRoleDescriptionInput, i2 ...request.Option) (r0 *iam.UpdateRoleDescriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRoleDescriptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.UpdateRoleDescriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeUpdateRoleDescriptionWithContext(ctx context.Context, in *iam.UpdateRoleDescriptionInput, _ ...request.Option) (*iam.UpdateRoleDescriptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateRoleDescription cancelled", ctx.Err())
	default:
		return d.UpdateRoleDescription(in)
	}
}

func (d *IAMDouble) UpdateRoleRequest(i0 *iam.UpdateRoleInput) (r0 *request.Request, r1 *iam.UpdateRoleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRoleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.UpdateRoleOutput)
	return
}

func (d *IAMDouble) UpdateRoleWithContext(i0 context.Context, i1 *iam.UpdateRoleInput, i2 ...request.Option) (r0 *iam.UpdateRoleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRoleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.UpdateRoleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeUpdateRoleWithContext(ctx context.Context, in *iam.UpdateRoleInput, _ ...request.Option) (*iam.UpdateRoleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateRole cancelled", ctx.Err())
	default:
		return d.UpdateRole(in)
	}
}

func (d *IAMDouble) UpdateSAMLProvider(i0 *iam.UpdateSAMLProviderInput) (r0 *iam.UpdateSAMLProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSAMLProvider", i0)
	r0, _ = returns[0].(*iam.UpdateSAMLProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) UpdateSAMLProviderRequest(i0 *iam.UpdateSAMLProviderInput) (r0 *request.Request, r1 *iam.UpdateSAMLProviderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSAMLProviderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.UpdateSAMLProviderOutput)
	return
}

func (d *IAMDouble) UpdateSAMLProviderWithContext(i0 context.Context, i1 *iam.UpdateSAMLProviderInput, i2 ...request.Option) (r0 *iam.UpdateSAMLProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSAMLProviderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.UpdateSAMLProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeUpdateSAMLProviderWithContext(ctx context.Context, in *iam.UpdateSAMLProviderInput, _ ...request.Option) (*iam.UpdateSAMLProviderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateSAMLProvider cancelled", ctx.Err())
	default:
		return d.UpdateSAMLProvider(in)
	}
}

func (d *IAMDouble) UpdateSSHPublicKey(i0 *iam.UpdateSSHPublicKeyInput) (r0 *iam.UpdateSSHPublicKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSSHPublicKey", i0)
	r0, _ = returns[0].(*iam.UpdateSSHPublicKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) UpdateSSHPublicKeyRequest(i0 *iam.UpdateSSHPublicKeyInput) (r0 *request.Request, r1 *iam.UpdateSSHPublicKeyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSSHPublicKeyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.UpdateSSHPublicKeyOutput)
	return
}

func (d *IAMDouble) UpdateSSHPublicKeyWithContext(i0 context.Context, i1 *iam.UpdateSSHPublicKeyInput, i2 ...request.Option) (r0 *iam.UpdateSSHPublicKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSSHPublicKeyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.UpdateSSHPublicKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeUpdateSSHPublicKeyWithContext(ctx context.Context, in *iam.UpdateSSHPublicKeyInput, _ ...request.Option) (*iam.UpdateSSHPublicKeyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateSSHPublicKey cancelled", ctx.Err())
	default:
		return d.UpdateSSHPublicKey(in)
	}
}

func (d *IAMDouble) UpdateServerCertificate(i0 *iam.UpdateServerCertificateInput) (r0 *iam.UpdateServerCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateServerCertificate", i0)
	r0, _ = returns[0].(*iam.UpdateServerCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) UpdateServerCertificateRequest(i0 *iam.UpdateServerCertificateInput) (r0 *request.Request, r1 *iam.UpdateServerCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateServerCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.UpdateServerCertificateOutput)
	return
}

func (d *IAMDouble) UpdateServerCertificateWithContext(i0 context.Context, i1 *iam.UpdateServerCertificateInput, i2 ...request.Option) (r0 *iam.UpdateServerCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateServerCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.UpdateServerCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeUpdateServerCertificateWithContext(ctx context.Context, in *iam.UpdateServerCertificateInput, _ ...request.Option) (*iam.UpdateServerCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateServerCertificate cancelled", ctx.Err())
	default:
		return d.UpdateServerCertificate(in)
	}
}

func (d *IAMDouble) UpdateServiceSpecificCredential(i0 *iam.UpdateServiceSpecificCredentialInput) (r0 *iam.UpdateServiceSpecificCredentialOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateServiceSpecificCredential", i0)
	r0, _ = returns[0].(*iam.UpdateServiceSpecificCredentialOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) UpdateServiceSpecificCredentialRequest(i0 *iam.UpdateServiceSpecificCredentialInput) (r0 *request.Request, r1 *iam.UpdateServiceSpecificCredentialOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateServiceSpecificCredentialRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.UpdateServiceSpecificCredentialOutput)
	return
}

func (d *IAMDouble) UpdateServiceSpecificCredentialWithContext(i0 context.Context, i1 *iam.UpdateServiceSpecificCredentialInput, i2 ...request.Option) (r0 *iam.UpdateServiceSpecificCredentialOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateServiceSpecificCredentialWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.UpdateServiceSpecificCredentialOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeUpdateServiceSpecificCredentialWithContext(ctx context.Context, in *iam.UpdateServiceSpecificCredentialInput, _ ...request.Option) (*iam.UpdateServiceSpecificCredentialOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateServiceSpecificCredential cancelled", ctx.Err())
	default:
		return d.UpdateServiceSpecificCredential(in)
	}
}

func (d *IAMDouble) UpdateSigningCertificate(i0 *iam.UpdateSigningCertificateInput) (r0 *iam.UpdateSigningCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSigningCertificate", i0)
	r0, _ = returns[0].(*iam.UpdateSigningCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) UpdateSigningCertificateRequest(i0 *iam.UpdateSigningCertificateInput) (r0 *request.Request, r1 *iam.UpdateSigningCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSigningCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.UpdateSigningCertificateOutput)
	return
}

func (d *IAMDouble) UpdateSigningCertificateWithContext(i0 context.Context, i1 *iam.UpdateSigningCertificateInput, i2 ...request.Option) (r0 *iam.UpdateSigningCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSigningCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.UpdateSigningCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeUpdateSigningCertificateWithContext(ctx context.Context, in *iam.UpdateSigningCertificateInput, _ ...request.Option) (*iam.UpdateSigningCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateSigningCertificate cancelled", ctx.Err())
	default:
		return d.UpdateSigningCertificate(in)
	}
}

func (d *IAMDouble) UpdateUser(i0 *iam.UpdateUserInput) (r0 *iam.UpdateUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUser", i0)
	r0, _ = returns[0].(*iam.UpdateUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) UpdateUserRequest(i0 *iam.UpdateUserInput) (r0 *request.Request, r1 *iam.UpdateUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.UpdateUserOutput)
	return
}

func (d *IAMDouble) UpdateUserWithContext(i0 context.Context, i1 *iam.UpdateUserInput, i2 ...request.Option) (r0 *iam.UpdateUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.UpdateUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeUpdateUserWithContext(ctx context.Context, in *iam.UpdateUserInput, _ ...request.Option) (*iam.UpdateUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateUser cancelled", ctx.Err())
	default:
		return d.UpdateUser(in)
	}
}

func (d *IAMDouble) UploadSSHPublicKey(i0 *iam.UploadSSHPublicKeyInput) (r0 *iam.UploadSSHPublicKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UploadSSHPublicKey", i0)
	r0, _ = returns[0].(*iam.UploadSSHPublicKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) UploadSSHPublicKeyRequest(i0 *iam.UploadSSHPublicKeyInput) (r0 *request.Request, r1 *iam.UploadSSHPublicKeyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UploadSSHPublicKeyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.UploadSSHPublicKeyOutput)
	return
}

func (d *IAMDouble) UploadSSHPublicKeyWithContext(i0 context.Context, i1 *iam.UploadSSHPublicKeyInput, i2 ...request.Option) (r0 *iam.UploadSSHPublicKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UploadSSHPublicKeyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.UploadSSHPublicKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeUploadSSHPublicKeyWithContext(ctx context.Context, in *iam.UploadSSHPublicKeyInput, _ ...request.Option) (*iam.UploadSSHPublicKeyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UploadSSHPublicKey cancelled", ctx.Err())
	default:
		return d.UploadSSHPublicKey(in)
	}
}

func (d *IAMDouble) UploadServerCertificate(i0 *iam.UploadServerCertificateInput) (r0 *iam.UploadServerCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UploadServerCertificate", i0)
	r0, _ = returns[0].(*iam.UploadServerCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) UploadServerCertificateRequest(i0 *iam.UploadServerCertificateInput) (r0 *request.Request, r1 *iam.UploadServerCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UploadServerCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.UploadServerCertificateOutput)
	return
}

func (d *IAMDouble) UploadServerCertificateWithContext(i0 context.Context, i1 *iam.UploadServerCertificateInput, i2 ...request.Option) (r0 *iam.UploadServerCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UploadServerCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.UploadServerCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeUploadServerCertificateWithContext(ctx context.Context, in *iam.UploadServerCertificateInput, _ ...request.Option) (*iam.UploadServerCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UploadServerCertificate cancelled", ctx.Err())
	default:
		return d.UploadServerCertificate(in)
	}
}

func (d *IAMDouble) UploadSigningCertificate(i0 *iam.UploadSigningCertificateInput) (r0 *iam.UploadSigningCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UploadSigningCertificate", i0)
	r0, _ = returns[0].(*iam.UploadSigningCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) UploadSigningCertificateRequest(i0 *iam.UploadSigningCertificateInput) (r0 *request.Request, r1 *iam.UploadSigningCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UploadSigningCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iam.UploadSigningCertificateOutput)
	return
}

func (d *IAMDouble) UploadSigningCertificateWithContext(i0 context.Context, i1 *iam.UploadSigningCertificateInput, i2 ...request.Option) (r0 *iam.UploadSigningCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UploadSigningCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iam.UploadSigningCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IAMDouble) fakeUploadSigningCertificateWithContext(ctx context.Context, in *iam.UploadSigningCertificateInput, _ ...request.Option) (*iam.UploadSigningCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UploadSigningCertificate cancelled", ctx.Err())
	default:
		return d.UploadSigningCertificate(in)
	}
}

func (d *IAMDouble) WaitUntilInstanceProfileExists(i0 *iam.GetInstanceProfileInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilInstanceProfileExists", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeWaitUntilInstanceProfileExists(in *iam.GetInstanceProfileInput) error {
	return d.WaitUntil("InstanceProfileExists", waiters, in)
}

func (d *IAMDouble) WaitUntilInstanceProfileExistsWithContext(i0 context.Context, i1 *iam.GetInstanceProfileInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilInstanceProfileExistsWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeWaitUntilInstanceProfileExistsWithContext(ctx context.Context, in *iam.GetInstanceProfileInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("InstanceProfileExists", waiters, ctx, in, waitOption...)
}

func (d *IAMDouble) WaitUntilPolicyExists(i0 *iam.GetPolicyInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilPolicyExists", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeWaitUntilPolicyExists(in *iam.GetPolicyInput) error {
	return d.WaitUntil("PolicyExists", waiters, in)
}

func (d *IAMDouble) WaitUntilPolicyExistsWithContext(i0 context.Context, i1 *iam.GetPolicyInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilPolicyExistsWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeWaitUntilPolicyExistsWithContext(ctx context.Context, in *iam.GetPolicyInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("PolicyExists", waiters, ctx, in, waitOption...)
}

func (d *IAMDouble) WaitUntilRoleExists(i0 *iam.GetRoleInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilRoleExists", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeWaitUntilRoleExists(in *iam.GetRoleInput) error {
	return d.WaitUntil("RoleExists", waiters, in)
}

func (d *IAMDouble) WaitUntilRoleExistsWithContext(i0 context.Context, i1 *iam.GetRoleInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilRoleExistsWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeWaitUntilRoleExistsWithContext(ctx context.Context, in *iam.GetRoleInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("RoleExists", waiters, ctx, in, waitOption...)
}

func (d *IAMDouble) WaitUntilUserExists(i0 *iam.GetUserInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilUserExists", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeWaitUntilUserExists(in *iam.GetUserInput) error {
	return d.WaitUntil("UserExists", waiters, in)
}

func (d *IAMDouble) WaitUntilUserExistsWithContext(i0 context.Context, i1 *iam.GetUserInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilUserExistsWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *IAMDouble) fakeWaitUntilUserExistsWithContext(ctx context.Context, in *iam.GetUserInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("UserExists", waiters, ctx, in, waitOption...)
}
