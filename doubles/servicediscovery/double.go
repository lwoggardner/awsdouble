// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:14:59+11:00

// Package servicediscoverydouble provides a TestDouble implementation of servicediscoveryiface.ServiceDiscoveryAPI
package servicediscoverydouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/servicediscovery"
	"github.com/aws/aws-sdk-go/service/servicediscovery/servicediscoveryiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// ServiceDiscoveryDouble is TestDouble for servicediscoveryiface.ServiceDiscoveryAPI
type ServiceDiscoveryDouble struct {
	servicediscoveryiface.ServiceDiscoveryAPI
	*awsdouble.AWSTestDouble
}

// Constructor for ServiceDiscoveryDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *ServiceDiscoveryDouble {
	result := &ServiceDiscoveryDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*servicediscoveryiface.ServiceDiscoveryAPI)(nil), configurators...)
	return result
}

func (d *ServiceDiscoveryDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *ServiceDiscoveryDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CreateHttpNamespaceWithContext":
		return m.Fake(d.fakeCreateHttpNamespaceWithContext)

	case "CreatePrivateDnsNamespaceWithContext":
		return m.Fake(d.fakeCreatePrivateDnsNamespaceWithContext)

	case "CreatePublicDnsNamespaceWithContext":
		return m.Fake(d.fakeCreatePublicDnsNamespaceWithContext)

	case "CreateServiceWithContext":
		return m.Fake(d.fakeCreateServiceWithContext)

	case "DeleteNamespaceWithContext":
		return m.Fake(d.fakeDeleteNamespaceWithContext)

	case "DeleteServiceWithContext":
		return m.Fake(d.fakeDeleteServiceWithContext)

	case "DeregisterInstanceWithContext":
		return m.Fake(d.fakeDeregisterInstanceWithContext)

	case "DiscoverInstancesWithContext":
		return m.Fake(d.fakeDiscoverInstancesWithContext)

	case "GetInstanceWithContext":
		return m.Fake(d.fakeGetInstanceWithContext)

	case "GetInstancesHealthStatusPages":
		return m.Fake(d.fakeGetInstancesHealthStatusPages)

	case "GetInstancesHealthStatusPagesWithContext":
		return m.Fake(d.fakeGetInstancesHealthStatusPagesWithContext)

	case "GetInstancesHealthStatusWithContext":
		return m.Fake(d.fakeGetInstancesHealthStatusWithContext)

	case "GetNamespaceWithContext":
		return m.Fake(d.fakeGetNamespaceWithContext)

	case "GetOperationWithContext":
		return m.Fake(d.fakeGetOperationWithContext)

	case "GetServiceWithContext":
		return m.Fake(d.fakeGetServiceWithContext)

	case "ListInstancesPages":
		return m.Fake(d.fakeListInstancesPages)

	case "ListInstancesPagesWithContext":
		return m.Fake(d.fakeListInstancesPagesWithContext)

	case "ListInstancesWithContext":
		return m.Fake(d.fakeListInstancesWithContext)

	case "ListNamespacesPages":
		return m.Fake(d.fakeListNamespacesPages)

	case "ListNamespacesPagesWithContext":
		return m.Fake(d.fakeListNamespacesPagesWithContext)

	case "ListNamespacesWithContext":
		return m.Fake(d.fakeListNamespacesWithContext)

	case "ListOperationsPages":
		return m.Fake(d.fakeListOperationsPages)

	case "ListOperationsPagesWithContext":
		return m.Fake(d.fakeListOperationsPagesWithContext)

	case "ListOperationsWithContext":
		return m.Fake(d.fakeListOperationsWithContext)

	case "ListServicesPages":
		return m.Fake(d.fakeListServicesPages)

	case "ListServicesPagesWithContext":
		return m.Fake(d.fakeListServicesPagesWithContext)

	case "ListServicesWithContext":
		return m.Fake(d.fakeListServicesWithContext)

	case "RegisterInstanceWithContext":
		return m.Fake(d.fakeRegisterInstanceWithContext)

	case "UpdateInstanceCustomHealthStatusWithContext":
		return m.Fake(d.fakeUpdateInstanceCustomHealthStatusWithContext)

	case "UpdateServiceWithContext":
		return m.Fake(d.fakeUpdateServiceWithContext)

	default:
		return nil
	}
}

func (d *ServiceDiscoveryDouble) CreateHttpNamespace(i0 *servicediscovery.CreateHttpNamespaceInput) (r0 *servicediscovery.CreateHttpNamespaceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHttpNamespace", i0)
	r0, _ = returns[0].(*servicediscovery.CreateHttpNamespaceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) CreateHttpNamespaceRequest(i0 *servicediscovery.CreateHttpNamespaceInput) (r0 *request.Request, r1 *servicediscovery.CreateHttpNamespaceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHttpNamespaceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicediscovery.CreateHttpNamespaceOutput)
	return
}

func (d *ServiceDiscoveryDouble) CreateHttpNamespaceWithContext(i0 context.Context, i1 *servicediscovery.CreateHttpNamespaceInput, i2 ...request.Option) (r0 *servicediscovery.CreateHttpNamespaceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHttpNamespaceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicediscovery.CreateHttpNamespaceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) fakeCreateHttpNamespaceWithContext(ctx context.Context, in *servicediscovery.CreateHttpNamespaceInput, _ ...request.Option) (*servicediscovery.CreateHttpNamespaceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateHttpNamespace cancelled", ctx.Err())
	default:
		return d.CreateHttpNamespace(in)
	}
}

func (d *ServiceDiscoveryDouble) CreatePrivateDnsNamespace(i0 *servicediscovery.CreatePrivateDnsNamespaceInput) (r0 *servicediscovery.CreatePrivateDnsNamespaceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePrivateDnsNamespace", i0)
	r0, _ = returns[0].(*servicediscovery.CreatePrivateDnsNamespaceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) CreatePrivateDnsNamespaceRequest(i0 *servicediscovery.CreatePrivateDnsNamespaceInput) (r0 *request.Request, r1 *servicediscovery.CreatePrivateDnsNamespaceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePrivateDnsNamespaceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicediscovery.CreatePrivateDnsNamespaceOutput)
	return
}

func (d *ServiceDiscoveryDouble) CreatePrivateDnsNamespaceWithContext(i0 context.Context, i1 *servicediscovery.CreatePrivateDnsNamespaceInput, i2 ...request.Option) (r0 *servicediscovery.CreatePrivateDnsNamespaceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePrivateDnsNamespaceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicediscovery.CreatePrivateDnsNamespaceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) fakeCreatePrivateDnsNamespaceWithContext(ctx context.Context, in *servicediscovery.CreatePrivateDnsNamespaceInput, _ ...request.Option) (*servicediscovery.CreatePrivateDnsNamespaceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreatePrivateDnsNamespace cancelled", ctx.Err())
	default:
		return d.CreatePrivateDnsNamespace(in)
	}
}

func (d *ServiceDiscoveryDouble) CreatePublicDnsNamespace(i0 *servicediscovery.CreatePublicDnsNamespaceInput) (r0 *servicediscovery.CreatePublicDnsNamespaceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePublicDnsNamespace", i0)
	r0, _ = returns[0].(*servicediscovery.CreatePublicDnsNamespaceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) CreatePublicDnsNamespaceRequest(i0 *servicediscovery.CreatePublicDnsNamespaceInput) (r0 *request.Request, r1 *servicediscovery.CreatePublicDnsNamespaceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePublicDnsNamespaceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicediscovery.CreatePublicDnsNamespaceOutput)
	return
}

func (d *ServiceDiscoveryDouble) CreatePublicDnsNamespaceWithContext(i0 context.Context, i1 *servicediscovery.CreatePublicDnsNamespaceInput, i2 ...request.Option) (r0 *servicediscovery.CreatePublicDnsNamespaceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePublicDnsNamespaceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicediscovery.CreatePublicDnsNamespaceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) fakeCreatePublicDnsNamespaceWithContext(ctx context.Context, in *servicediscovery.CreatePublicDnsNamespaceInput, _ ...request.Option) (*servicediscovery.CreatePublicDnsNamespaceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreatePublicDnsNamespace cancelled", ctx.Err())
	default:
		return d.CreatePublicDnsNamespace(in)
	}
}

func (d *ServiceDiscoveryDouble) CreateService(i0 *servicediscovery.CreateServiceInput) (r0 *servicediscovery.CreateServiceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateService", i0)
	r0, _ = returns[0].(*servicediscovery.CreateServiceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) CreateServiceRequest(i0 *servicediscovery.CreateServiceInput) (r0 *request.Request, r1 *servicediscovery.CreateServiceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateServiceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicediscovery.CreateServiceOutput)
	return
}

func (d *ServiceDiscoveryDouble) CreateServiceWithContext(i0 context.Context, i1 *servicediscovery.CreateServiceInput, i2 ...request.Option) (r0 *servicediscovery.CreateServiceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateServiceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicediscovery.CreateServiceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) fakeCreateServiceWithContext(ctx context.Context, in *servicediscovery.CreateServiceInput, _ ...request.Option) (*servicediscovery.CreateServiceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateService cancelled", ctx.Err())
	default:
		return d.CreateService(in)
	}
}

func (d *ServiceDiscoveryDouble) DeleteNamespace(i0 *servicediscovery.DeleteNamespaceInput) (r0 *servicediscovery.DeleteNamespaceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNamespace", i0)
	r0, _ = returns[0].(*servicediscovery.DeleteNamespaceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) DeleteNamespaceRequest(i0 *servicediscovery.DeleteNamespaceInput) (r0 *request.Request, r1 *servicediscovery.DeleteNamespaceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNamespaceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicediscovery.DeleteNamespaceOutput)
	return
}

func (d *ServiceDiscoveryDouble) DeleteNamespaceWithContext(i0 context.Context, i1 *servicediscovery.DeleteNamespaceInput, i2 ...request.Option) (r0 *servicediscovery.DeleteNamespaceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNamespaceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicediscovery.DeleteNamespaceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) fakeDeleteNamespaceWithContext(ctx context.Context, in *servicediscovery.DeleteNamespaceInput, _ ...request.Option) (*servicediscovery.DeleteNamespaceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteNamespace cancelled", ctx.Err())
	default:
		return d.DeleteNamespace(in)
	}
}

func (d *ServiceDiscoveryDouble) DeleteService(i0 *servicediscovery.DeleteServiceInput) (r0 *servicediscovery.DeleteServiceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteService", i0)
	r0, _ = returns[0].(*servicediscovery.DeleteServiceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) DeleteServiceRequest(i0 *servicediscovery.DeleteServiceInput) (r0 *request.Request, r1 *servicediscovery.DeleteServiceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteServiceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicediscovery.DeleteServiceOutput)
	return
}

func (d *ServiceDiscoveryDouble) DeleteServiceWithContext(i0 context.Context, i1 *servicediscovery.DeleteServiceInput, i2 ...request.Option) (r0 *servicediscovery.DeleteServiceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteServiceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicediscovery.DeleteServiceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) fakeDeleteServiceWithContext(ctx context.Context, in *servicediscovery.DeleteServiceInput, _ ...request.Option) (*servicediscovery.DeleteServiceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteService cancelled", ctx.Err())
	default:
		return d.DeleteService(in)
	}
}

func (d *ServiceDiscoveryDouble) DeregisterInstance(i0 *servicediscovery.DeregisterInstanceInput) (r0 *servicediscovery.DeregisterInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterInstance", i0)
	r0, _ = returns[0].(*servicediscovery.DeregisterInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) DeregisterInstanceRequest(i0 *servicediscovery.DeregisterInstanceInput) (r0 *request.Request, r1 *servicediscovery.DeregisterInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicediscovery.DeregisterInstanceOutput)
	return
}

func (d *ServiceDiscoveryDouble) DeregisterInstanceWithContext(i0 context.Context, i1 *servicediscovery.DeregisterInstanceInput, i2 ...request.Option) (r0 *servicediscovery.DeregisterInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicediscovery.DeregisterInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) fakeDeregisterInstanceWithContext(ctx context.Context, in *servicediscovery.DeregisterInstanceInput, _ ...request.Option) (*servicediscovery.DeregisterInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeregisterInstance cancelled", ctx.Err())
	default:
		return d.DeregisterInstance(in)
	}
}

func (d *ServiceDiscoveryDouble) DiscoverInstances(i0 *servicediscovery.DiscoverInstancesInput) (r0 *servicediscovery.DiscoverInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DiscoverInstances", i0)
	r0, _ = returns[0].(*servicediscovery.DiscoverInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) DiscoverInstancesRequest(i0 *servicediscovery.DiscoverInstancesInput) (r0 *request.Request, r1 *servicediscovery.DiscoverInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DiscoverInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicediscovery.DiscoverInstancesOutput)
	return
}

func (d *ServiceDiscoveryDouble) DiscoverInstancesWithContext(i0 context.Context, i1 *servicediscovery.DiscoverInstancesInput, i2 ...request.Option) (r0 *servicediscovery.DiscoverInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DiscoverInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicediscovery.DiscoverInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) fakeDiscoverInstancesWithContext(ctx context.Context, in *servicediscovery.DiscoverInstancesInput, _ ...request.Option) (*servicediscovery.DiscoverInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DiscoverInstances cancelled", ctx.Err())
	default:
		return d.DiscoverInstances(in)
	}
}

func (d *ServiceDiscoveryDouble) GetInstance(i0 *servicediscovery.GetInstanceInput) (r0 *servicediscovery.GetInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstance", i0)
	r0, _ = returns[0].(*servicediscovery.GetInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) GetInstanceRequest(i0 *servicediscovery.GetInstanceInput) (r0 *request.Request, r1 *servicediscovery.GetInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicediscovery.GetInstanceOutput)
	return
}

func (d *ServiceDiscoveryDouble) GetInstanceWithContext(i0 context.Context, i1 *servicediscovery.GetInstanceInput, i2 ...request.Option) (r0 *servicediscovery.GetInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicediscovery.GetInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) fakeGetInstanceWithContext(ctx context.Context, in *servicediscovery.GetInstanceInput, _ ...request.Option) (*servicediscovery.GetInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetInstance cancelled", ctx.Err())
	default:
		return d.GetInstance(in)
	}
}

func (d *ServiceDiscoveryDouble) GetInstancesHealthStatus(i0 *servicediscovery.GetInstancesHealthStatusInput) (r0 *servicediscovery.GetInstancesHealthStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstancesHealthStatus", i0)
	r0, _ = returns[0].(*servicediscovery.GetInstancesHealthStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) GetInstancesHealthStatusPages(i0 *servicediscovery.GetInstancesHealthStatusInput, i1 func(*servicediscovery.GetInstancesHealthStatusOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstancesHealthStatusPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceDiscoveryDouble) fakeGetInstancesHealthStatusPages(in *servicediscovery.GetInstancesHealthStatusInput, pager func(*servicediscovery.GetInstancesHealthStatusOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetInstancesHealthStatus", paginators, in, pager)
}

func (d *ServiceDiscoveryDouble) GetInstancesHealthStatusPagesWithContext(i0 context.Context, i1 *servicediscovery.GetInstancesHealthStatusInput, i2 func(*servicediscovery.GetInstancesHealthStatusOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstancesHealthStatusPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceDiscoveryDouble) fakeGetInstancesHealthStatusPagesWithContext(ctx context.Context, in *servicediscovery.GetInstancesHealthStatusInput, pager func(*servicediscovery.GetInstancesHealthStatusOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetInstancesHealthStatus", paginators, ctx, in, pager, options...)
}

func (d *ServiceDiscoveryDouble) GetInstancesHealthStatusRequest(i0 *servicediscovery.GetInstancesHealthStatusInput) (r0 *request.Request, r1 *servicediscovery.GetInstancesHealthStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstancesHealthStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicediscovery.GetInstancesHealthStatusOutput)
	return
}

func (d *ServiceDiscoveryDouble) GetInstancesHealthStatusWithContext(i0 context.Context, i1 *servicediscovery.GetInstancesHealthStatusInput, i2 ...request.Option) (r0 *servicediscovery.GetInstancesHealthStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInstancesHealthStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicediscovery.GetInstancesHealthStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) fakeGetInstancesHealthStatusWithContext(ctx context.Context, in *servicediscovery.GetInstancesHealthStatusInput, _ ...request.Option) (*servicediscovery.GetInstancesHealthStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetInstancesHealthStatus cancelled", ctx.Err())
	default:
		return d.GetInstancesHealthStatus(in)
	}
}

func (d *ServiceDiscoveryDouble) GetNamespace(i0 *servicediscovery.GetNamespaceInput) (r0 *servicediscovery.GetNamespaceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetNamespace", i0)
	r0, _ = returns[0].(*servicediscovery.GetNamespaceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) GetNamespaceRequest(i0 *servicediscovery.GetNamespaceInput) (r0 *request.Request, r1 *servicediscovery.GetNamespaceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetNamespaceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicediscovery.GetNamespaceOutput)
	return
}

func (d *ServiceDiscoveryDouble) GetNamespaceWithContext(i0 context.Context, i1 *servicediscovery.GetNamespaceInput, i2 ...request.Option) (r0 *servicediscovery.GetNamespaceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetNamespaceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicediscovery.GetNamespaceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) fakeGetNamespaceWithContext(ctx context.Context, in *servicediscovery.GetNamespaceInput, _ ...request.Option) (*servicediscovery.GetNamespaceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetNamespace cancelled", ctx.Err())
	default:
		return d.GetNamespace(in)
	}
}

func (d *ServiceDiscoveryDouble) GetOperation(i0 *servicediscovery.GetOperationInput) (r0 *servicediscovery.GetOperationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOperation", i0)
	r0, _ = returns[0].(*servicediscovery.GetOperationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) GetOperationRequest(i0 *servicediscovery.GetOperationInput) (r0 *request.Request, r1 *servicediscovery.GetOperationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOperationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicediscovery.GetOperationOutput)
	return
}

func (d *ServiceDiscoveryDouble) GetOperationWithContext(i0 context.Context, i1 *servicediscovery.GetOperationInput, i2 ...request.Option) (r0 *servicediscovery.GetOperationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOperationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicediscovery.GetOperationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) fakeGetOperationWithContext(ctx context.Context, in *servicediscovery.GetOperationInput, _ ...request.Option) (*servicediscovery.GetOperationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetOperation cancelled", ctx.Err())
	default:
		return d.GetOperation(in)
	}
}

func (d *ServiceDiscoveryDouble) GetService(i0 *servicediscovery.GetServiceInput) (r0 *servicediscovery.GetServiceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetService", i0)
	r0, _ = returns[0].(*servicediscovery.GetServiceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) GetServiceRequest(i0 *servicediscovery.GetServiceInput) (r0 *request.Request, r1 *servicediscovery.GetServiceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetServiceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicediscovery.GetServiceOutput)
	return
}

func (d *ServiceDiscoveryDouble) GetServiceWithContext(i0 context.Context, i1 *servicediscovery.GetServiceInput, i2 ...request.Option) (r0 *servicediscovery.GetServiceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetServiceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicediscovery.GetServiceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) fakeGetServiceWithContext(ctx context.Context, in *servicediscovery.GetServiceInput, _ ...request.Option) (*servicediscovery.GetServiceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetService cancelled", ctx.Err())
	default:
		return d.GetService(in)
	}
}

func (d *ServiceDiscoveryDouble) ListInstances(i0 *servicediscovery.ListInstancesInput) (r0 *servicediscovery.ListInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInstances", i0)
	r0, _ = returns[0].(*servicediscovery.ListInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) ListInstancesPages(i0 *servicediscovery.ListInstancesInput, i1 func(*servicediscovery.ListInstancesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInstancesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceDiscoveryDouble) fakeListInstancesPages(in *servicediscovery.ListInstancesInput, pager func(*servicediscovery.ListInstancesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListInstances", paginators, in, pager)
}

func (d *ServiceDiscoveryDouble) ListInstancesPagesWithContext(i0 context.Context, i1 *servicediscovery.ListInstancesInput, i2 func(*servicediscovery.ListInstancesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInstancesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceDiscoveryDouble) fakeListInstancesPagesWithContext(ctx context.Context, in *servicediscovery.ListInstancesInput, pager func(*servicediscovery.ListInstancesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListInstances", paginators, ctx, in, pager, options...)
}

func (d *ServiceDiscoveryDouble) ListInstancesRequest(i0 *servicediscovery.ListInstancesInput) (r0 *request.Request, r1 *servicediscovery.ListInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicediscovery.ListInstancesOutput)
	return
}

func (d *ServiceDiscoveryDouble) ListInstancesWithContext(i0 context.Context, i1 *servicediscovery.ListInstancesInput, i2 ...request.Option) (r0 *servicediscovery.ListInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicediscovery.ListInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) fakeListInstancesWithContext(ctx context.Context, in *servicediscovery.ListInstancesInput, _ ...request.Option) (*servicediscovery.ListInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListInstances cancelled", ctx.Err())
	default:
		return d.ListInstances(in)
	}
}

func (d *ServiceDiscoveryDouble) ListNamespaces(i0 *servicediscovery.ListNamespacesInput) (r0 *servicediscovery.ListNamespacesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListNamespaces", i0)
	r0, _ = returns[0].(*servicediscovery.ListNamespacesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) ListNamespacesPages(i0 *servicediscovery.ListNamespacesInput, i1 func(*servicediscovery.ListNamespacesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListNamespacesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceDiscoveryDouble) fakeListNamespacesPages(in *servicediscovery.ListNamespacesInput, pager func(*servicediscovery.ListNamespacesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListNamespaces", paginators, in, pager)
}

func (d *ServiceDiscoveryDouble) ListNamespacesPagesWithContext(i0 context.Context, i1 *servicediscovery.ListNamespacesInput, i2 func(*servicediscovery.ListNamespacesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListNamespacesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceDiscoveryDouble) fakeListNamespacesPagesWithContext(ctx context.Context, in *servicediscovery.ListNamespacesInput, pager func(*servicediscovery.ListNamespacesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListNamespaces", paginators, ctx, in, pager, options...)
}

func (d *ServiceDiscoveryDouble) ListNamespacesRequest(i0 *servicediscovery.ListNamespacesInput) (r0 *request.Request, r1 *servicediscovery.ListNamespacesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListNamespacesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicediscovery.ListNamespacesOutput)
	return
}

func (d *ServiceDiscoveryDouble) ListNamespacesWithContext(i0 context.Context, i1 *servicediscovery.ListNamespacesInput, i2 ...request.Option) (r0 *servicediscovery.ListNamespacesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListNamespacesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicediscovery.ListNamespacesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) fakeListNamespacesWithContext(ctx context.Context, in *servicediscovery.ListNamespacesInput, _ ...request.Option) (*servicediscovery.ListNamespacesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListNamespaces cancelled", ctx.Err())
	default:
		return d.ListNamespaces(in)
	}
}

func (d *ServiceDiscoveryDouble) ListOperations(i0 *servicediscovery.ListOperationsInput) (r0 *servicediscovery.ListOperationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOperations", i0)
	r0, _ = returns[0].(*servicediscovery.ListOperationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) ListOperationsPages(i0 *servicediscovery.ListOperationsInput, i1 func(*servicediscovery.ListOperationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOperationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceDiscoveryDouble) fakeListOperationsPages(in *servicediscovery.ListOperationsInput, pager func(*servicediscovery.ListOperationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListOperations", paginators, in, pager)
}

func (d *ServiceDiscoveryDouble) ListOperationsPagesWithContext(i0 context.Context, i1 *servicediscovery.ListOperationsInput, i2 func(*servicediscovery.ListOperationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOperationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceDiscoveryDouble) fakeListOperationsPagesWithContext(ctx context.Context, in *servicediscovery.ListOperationsInput, pager func(*servicediscovery.ListOperationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListOperations", paginators, ctx, in, pager, options...)
}

func (d *ServiceDiscoveryDouble) ListOperationsRequest(i0 *servicediscovery.ListOperationsInput) (r0 *request.Request, r1 *servicediscovery.ListOperationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOperationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicediscovery.ListOperationsOutput)
	return
}

func (d *ServiceDiscoveryDouble) ListOperationsWithContext(i0 context.Context, i1 *servicediscovery.ListOperationsInput, i2 ...request.Option) (r0 *servicediscovery.ListOperationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOperationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicediscovery.ListOperationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) fakeListOperationsWithContext(ctx context.Context, in *servicediscovery.ListOperationsInput, _ ...request.Option) (*servicediscovery.ListOperationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListOperations cancelled", ctx.Err())
	default:
		return d.ListOperations(in)
	}
}

func (d *ServiceDiscoveryDouble) ListServices(i0 *servicediscovery.ListServicesInput) (r0 *servicediscovery.ListServicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListServices", i0)
	r0, _ = returns[0].(*servicediscovery.ListServicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) ListServicesPages(i0 *servicediscovery.ListServicesInput, i1 func(*servicediscovery.ListServicesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListServicesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceDiscoveryDouble) fakeListServicesPages(in *servicediscovery.ListServicesInput, pager func(*servicediscovery.ListServicesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListServices", paginators, in, pager)
}

func (d *ServiceDiscoveryDouble) ListServicesPagesWithContext(i0 context.Context, i1 *servicediscovery.ListServicesInput, i2 func(*servicediscovery.ListServicesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListServicesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ServiceDiscoveryDouble) fakeListServicesPagesWithContext(ctx context.Context, in *servicediscovery.ListServicesInput, pager func(*servicediscovery.ListServicesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListServices", paginators, ctx, in, pager, options...)
}

func (d *ServiceDiscoveryDouble) ListServicesRequest(i0 *servicediscovery.ListServicesInput) (r0 *request.Request, r1 *servicediscovery.ListServicesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListServicesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicediscovery.ListServicesOutput)
	return
}

func (d *ServiceDiscoveryDouble) ListServicesWithContext(i0 context.Context, i1 *servicediscovery.ListServicesInput, i2 ...request.Option) (r0 *servicediscovery.ListServicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListServicesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicediscovery.ListServicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) fakeListServicesWithContext(ctx context.Context, in *servicediscovery.ListServicesInput, _ ...request.Option) (*servicediscovery.ListServicesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListServices cancelled", ctx.Err())
	default:
		return d.ListServices(in)
	}
}

func (d *ServiceDiscoveryDouble) RegisterInstance(i0 *servicediscovery.RegisterInstanceInput) (r0 *servicediscovery.RegisterInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterInstance", i0)
	r0, _ = returns[0].(*servicediscovery.RegisterInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) RegisterInstanceRequest(i0 *servicediscovery.RegisterInstanceInput) (r0 *request.Request, r1 *servicediscovery.RegisterInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicediscovery.RegisterInstanceOutput)
	return
}

func (d *ServiceDiscoveryDouble) RegisterInstanceWithContext(i0 context.Context, i1 *servicediscovery.RegisterInstanceInput, i2 ...request.Option) (r0 *servicediscovery.RegisterInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicediscovery.RegisterInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) fakeRegisterInstanceWithContext(ctx context.Context, in *servicediscovery.RegisterInstanceInput, _ ...request.Option) (*servicediscovery.RegisterInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterInstance cancelled", ctx.Err())
	default:
		return d.RegisterInstance(in)
	}
}

func (d *ServiceDiscoveryDouble) UpdateInstanceCustomHealthStatus(i0 *servicediscovery.UpdateInstanceCustomHealthStatusInput) (r0 *servicediscovery.UpdateInstanceCustomHealthStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateInstanceCustomHealthStatus", i0)
	r0, _ = returns[0].(*servicediscovery.UpdateInstanceCustomHealthStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) UpdateInstanceCustomHealthStatusRequest(i0 *servicediscovery.UpdateInstanceCustomHealthStatusInput) (r0 *request.Request, r1 *servicediscovery.UpdateInstanceCustomHealthStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateInstanceCustomHealthStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicediscovery.UpdateInstanceCustomHealthStatusOutput)
	return
}

func (d *ServiceDiscoveryDouble) UpdateInstanceCustomHealthStatusWithContext(i0 context.Context, i1 *servicediscovery.UpdateInstanceCustomHealthStatusInput, i2 ...request.Option) (r0 *servicediscovery.UpdateInstanceCustomHealthStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateInstanceCustomHealthStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicediscovery.UpdateInstanceCustomHealthStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) fakeUpdateInstanceCustomHealthStatusWithContext(ctx context.Context, in *servicediscovery.UpdateInstanceCustomHealthStatusInput, _ ...request.Option) (*servicediscovery.UpdateInstanceCustomHealthStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateInstanceCustomHealthStatus cancelled", ctx.Err())
	default:
		return d.UpdateInstanceCustomHealthStatus(in)
	}
}

func (d *ServiceDiscoveryDouble) UpdateService(i0 *servicediscovery.UpdateServiceInput) (r0 *servicediscovery.UpdateServiceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateService", i0)
	r0, _ = returns[0].(*servicediscovery.UpdateServiceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) UpdateServiceRequest(i0 *servicediscovery.UpdateServiceInput) (r0 *request.Request, r1 *servicediscovery.UpdateServiceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateServiceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*servicediscovery.UpdateServiceOutput)
	return
}

func (d *ServiceDiscoveryDouble) UpdateServiceWithContext(i0 context.Context, i1 *servicediscovery.UpdateServiceInput, i2 ...request.Option) (r0 *servicediscovery.UpdateServiceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateServiceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*servicediscovery.UpdateServiceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ServiceDiscoveryDouble) fakeUpdateServiceWithContext(ctx context.Context, in *servicediscovery.UpdateServiceInput, _ ...request.Option) (*servicediscovery.UpdateServiceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateService cancelled", ctx.Err())
	default:
		return d.UpdateService(in)
	}
}
