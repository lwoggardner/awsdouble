// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:12:26+11:00

// Package dynamodbstreamsdouble provides a TestDouble implementation of dynamodbstreamsiface.DynamoDBStreamsAPI
package dynamodbstreamsdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/dynamodbstreams"
	"github.com/aws/aws-sdk-go/service/dynamodbstreams/dynamodbstreamsiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// DynamoDBStreamsDouble is TestDouble for dynamodbstreamsiface.DynamoDBStreamsAPI
type DynamoDBStreamsDouble struct {
	dynamodbstreamsiface.DynamoDBStreamsAPI
	*awsdouble.AWSTestDouble
}

// Constructor for DynamoDBStreamsDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *DynamoDBStreamsDouble {
	result := &DynamoDBStreamsDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*dynamodbstreamsiface.DynamoDBStreamsAPI)(nil), configurators...)
	return result
}

func (d *DynamoDBStreamsDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *DynamoDBStreamsDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "DescribeStreamWithContext":
		return m.Fake(d.fakeDescribeStreamWithContext)

	case "GetRecordsWithContext":
		return m.Fake(d.fakeGetRecordsWithContext)

	case "GetShardIteratorWithContext":
		return m.Fake(d.fakeGetShardIteratorWithContext)

	case "ListStreamsWithContext":
		return m.Fake(d.fakeListStreamsWithContext)

	default:
		return nil
	}
}

func (d *DynamoDBStreamsDouble) DescribeStream(i0 *dynamodbstreams.DescribeStreamInput) (r0 *dynamodbstreams.DescribeStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStream", i0)
	r0, _ = returns[0].(*dynamodbstreams.DescribeStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBStreamsDouble) DescribeStreamRequest(i0 *dynamodbstreams.DescribeStreamInput) (r0 *request.Request, r1 *dynamodbstreams.DescribeStreamOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStreamRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodbstreams.DescribeStreamOutput)
	return
}

func (d *DynamoDBStreamsDouble) DescribeStreamWithContext(i0 context.Context, i1 *dynamodbstreams.DescribeStreamInput, i2 ...request.Option) (r0 *dynamodbstreams.DescribeStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStreamWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodbstreams.DescribeStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBStreamsDouble) fakeDescribeStreamWithContext(ctx context.Context, in *dynamodbstreams.DescribeStreamInput, _ ...request.Option) (*dynamodbstreams.DescribeStreamOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeStream cancelled", ctx.Err())
	default:
		return d.DescribeStream(in)
	}
}

func (d *DynamoDBStreamsDouble) GetRecords(i0 *dynamodbstreams.GetRecordsInput) (r0 *dynamodbstreams.GetRecordsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRecords", i0)
	r0, _ = returns[0].(*dynamodbstreams.GetRecordsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBStreamsDouble) GetRecordsRequest(i0 *dynamodbstreams.GetRecordsInput) (r0 *request.Request, r1 *dynamodbstreams.GetRecordsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRecordsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodbstreams.GetRecordsOutput)
	return
}

func (d *DynamoDBStreamsDouble) GetRecordsWithContext(i0 context.Context, i1 *dynamodbstreams.GetRecordsInput, i2 ...request.Option) (r0 *dynamodbstreams.GetRecordsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRecordsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodbstreams.GetRecordsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBStreamsDouble) fakeGetRecordsWithContext(ctx context.Context, in *dynamodbstreams.GetRecordsInput, _ ...request.Option) (*dynamodbstreams.GetRecordsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRecords cancelled", ctx.Err())
	default:
		return d.GetRecords(in)
	}
}

func (d *DynamoDBStreamsDouble) GetShardIterator(i0 *dynamodbstreams.GetShardIteratorInput) (r0 *dynamodbstreams.GetShardIteratorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetShardIterator", i0)
	r0, _ = returns[0].(*dynamodbstreams.GetShardIteratorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBStreamsDouble) GetShardIteratorRequest(i0 *dynamodbstreams.GetShardIteratorInput) (r0 *request.Request, r1 *dynamodbstreams.GetShardIteratorOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetShardIteratorRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodbstreams.GetShardIteratorOutput)
	return
}

func (d *DynamoDBStreamsDouble) GetShardIteratorWithContext(i0 context.Context, i1 *dynamodbstreams.GetShardIteratorInput, i2 ...request.Option) (r0 *dynamodbstreams.GetShardIteratorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetShardIteratorWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodbstreams.GetShardIteratorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBStreamsDouble) fakeGetShardIteratorWithContext(ctx context.Context, in *dynamodbstreams.GetShardIteratorInput, _ ...request.Option) (*dynamodbstreams.GetShardIteratorOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetShardIterator cancelled", ctx.Err())
	default:
		return d.GetShardIterator(in)
	}
}

func (d *DynamoDBStreamsDouble) ListStreams(i0 *dynamodbstreams.ListStreamsInput) (r0 *dynamodbstreams.ListStreamsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStreams", i0)
	r0, _ = returns[0].(*dynamodbstreams.ListStreamsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBStreamsDouble) ListStreamsRequest(i0 *dynamodbstreams.ListStreamsInput) (r0 *request.Request, r1 *dynamodbstreams.ListStreamsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStreamsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*dynamodbstreams.ListStreamsOutput)
	return
}

func (d *DynamoDBStreamsDouble) ListStreamsWithContext(i0 context.Context, i1 *dynamodbstreams.ListStreamsInput, i2 ...request.Option) (r0 *dynamodbstreams.ListStreamsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStreamsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*dynamodbstreams.ListStreamsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DynamoDBStreamsDouble) fakeListStreamsWithContext(ctx context.Context, in *dynamodbstreams.ListStreamsInput, _ ...request.Option) (*dynamodbstreams.ListStreamsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListStreams cancelled", ctx.Err())
	default:
		return d.ListStreams(in)
	}
}
