// Code generated by go awsdoublegen; DO NOT EDIT.
// This file was generated at 2020-01-29T21:22:05+11:00
package rdsdouble

import (
	"time"

	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/lwoggardner/awsdouble"
)

var waiters = map[string]*awsdouble.Waiter{

	"DBClusterSnapshotAvailable": &awsdouble.Waiter{
		OperationName: "DescribeDBClusterSnapshots",
		Waiter: request.Waiter{
			Name:        "WaitUntilDBClusterSnapshotAvailable",
			MaxAttempts: 60,
			Delay:       request.ConstantWaiterDelay(30 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathAllWaiterMatch, Argument: "DBClusterSnapshots[].Status",
					Expected: "available",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "DBClusterSnapshots[].Status",
					Expected: "deleted",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "DBClusterSnapshots[].Status",
					Expected: "deleting",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "DBClusterSnapshots[].Status",
					Expected: "failed",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "DBClusterSnapshots[].Status",
					Expected: "incompatible-restore",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "DBClusterSnapshots[].Status",
					Expected: "incompatible-parameters",
				},
			},
		},
	},

	"DBClusterSnapshotDeleted": &awsdouble.Waiter{
		OperationName: "DescribeDBClusterSnapshots",
		Waiter: request.Waiter{
			Name:        "WaitUntilDBClusterSnapshotDeleted",
			MaxAttempts: 60,
			Delay:       request.ConstantWaiterDelay(30 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "length(DBClusterSnapshots) == `0`",
					Expected: true,
				},
				{
					State:    request.SuccessWaiterState,
					Matcher:  request.ErrorWaiterMatch,
					Expected: "DBClusterSnapshotNotFoundFault",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "DBClusterSnapshots[].Status",
					Expected: "creating",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "DBClusterSnapshots[].Status",
					Expected: "modifying",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "DBClusterSnapshots[].Status",
					Expected: "rebooting",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "DBClusterSnapshots[].Status",
					Expected: "resetting-master-credentials",
				},
			},
		},
	},

	"DBInstanceAvailable": &awsdouble.Waiter{
		OperationName: "DescribeDBInstances",
		Waiter: request.Waiter{
			Name:        "WaitUntilDBInstanceAvailable",
			MaxAttempts: 60,
			Delay:       request.ConstantWaiterDelay(30 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathAllWaiterMatch, Argument: "DBInstances[].DBInstanceStatus",
					Expected: "available",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "DBInstances[].DBInstanceStatus",
					Expected: "deleted",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "DBInstances[].DBInstanceStatus",
					Expected: "deleting",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "DBInstances[].DBInstanceStatus",
					Expected: "failed",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "DBInstances[].DBInstanceStatus",
					Expected: "incompatible-restore",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "DBInstances[].DBInstanceStatus",
					Expected: "incompatible-parameters",
				},
			},
		},
	},

	"DBInstanceDeleted": &awsdouble.Waiter{
		OperationName: "DescribeDBInstances",
		Waiter: request.Waiter{
			Name:        "WaitUntilDBInstanceDeleted",
			MaxAttempts: 60,
			Delay:       request.ConstantWaiterDelay(30 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "length(DBInstances) == `0`",
					Expected: true,
				},
				{
					State:    request.SuccessWaiterState,
					Matcher:  request.ErrorWaiterMatch,
					Expected: "DBInstanceNotFound",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "DBInstances[].DBInstanceStatus",
					Expected: "creating",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "DBInstances[].DBInstanceStatus",
					Expected: "modifying",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "DBInstances[].DBInstanceStatus",
					Expected: "rebooting",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "DBInstances[].DBInstanceStatus",
					Expected: "resetting-master-credentials",
				},
			},
		},
	},

	"DBSnapshotAvailable": &awsdouble.Waiter{
		OperationName: "DescribeDBSnapshots",
		Waiter: request.Waiter{
			Name:        "WaitUntilDBSnapshotAvailable",
			MaxAttempts: 60,
			Delay:       request.ConstantWaiterDelay(30 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathAllWaiterMatch, Argument: "DBSnapshots[].Status",
					Expected: "available",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "DBSnapshots[].Status",
					Expected: "deleted",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "DBSnapshots[].Status",
					Expected: "deleting",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "DBSnapshots[].Status",
					Expected: "failed",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "DBSnapshots[].Status",
					Expected: "incompatible-restore",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "DBSnapshots[].Status",
					Expected: "incompatible-parameters",
				},
			},
		},
	},

	"DBSnapshotDeleted": &awsdouble.Waiter{
		OperationName: "DescribeDBSnapshots",
		Waiter: request.Waiter{
			Name:        "WaitUntilDBSnapshotDeleted",
			MaxAttempts: 60,
			Delay:       request.ConstantWaiterDelay(30 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "length(DBSnapshots) == `0`",
					Expected: true,
				},
				{
					State:    request.SuccessWaiterState,
					Matcher:  request.ErrorWaiterMatch,
					Expected: "DBSnapshotNotFound",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "DBSnapshots[].Status",
					Expected: "creating",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "DBSnapshots[].Status",
					Expected: "modifying",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "DBSnapshots[].Status",
					Expected: "rebooting",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "DBSnapshots[].Status",
					Expected: "resetting-master-credentials",
				},
			},
		},
	},
}
