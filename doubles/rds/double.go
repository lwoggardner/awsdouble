// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:14:33+11:00

// Package rdsdouble provides a TestDouble implementation of rdsiface.RDSAPI
package rdsdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/rds"
	"github.com/aws/aws-sdk-go/service/rds/rdsiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// RDSDouble is TestDouble for rdsiface.RDSAPI
type RDSDouble struct {
	rdsiface.RDSAPI
	*awsdouble.AWSTestDouble
}

// Constructor for RDSDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *RDSDouble {
	result := &RDSDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*rdsiface.RDSAPI)(nil), configurators...)
	return result
}

func (d *RDSDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *RDSDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AddRoleToDBClusterWithContext":
		return m.Fake(d.fakeAddRoleToDBClusterWithContext)

	case "AddRoleToDBInstanceWithContext":
		return m.Fake(d.fakeAddRoleToDBInstanceWithContext)

	case "AddSourceIdentifierToSubscriptionWithContext":
		return m.Fake(d.fakeAddSourceIdentifierToSubscriptionWithContext)

	case "AddTagsToResourceWithContext":
		return m.Fake(d.fakeAddTagsToResourceWithContext)

	case "ApplyPendingMaintenanceActionWithContext":
		return m.Fake(d.fakeApplyPendingMaintenanceActionWithContext)

	case "AuthorizeDBSecurityGroupIngressWithContext":
		return m.Fake(d.fakeAuthorizeDBSecurityGroupIngressWithContext)

	case "BacktrackDBClusterWithContext":
		return m.Fake(d.fakeBacktrackDBClusterWithContext)

	case "CancelExportTaskWithContext":
		return m.Fake(d.fakeCancelExportTaskWithContext)

	case "CopyDBClusterParameterGroupWithContext":
		return m.Fake(d.fakeCopyDBClusterParameterGroupWithContext)

	case "CopyDBClusterSnapshotWithContext":
		return m.Fake(d.fakeCopyDBClusterSnapshotWithContext)

	case "CopyDBParameterGroupWithContext":
		return m.Fake(d.fakeCopyDBParameterGroupWithContext)

	case "CopyDBSnapshotWithContext":
		return m.Fake(d.fakeCopyDBSnapshotWithContext)

	case "CopyOptionGroupWithContext":
		return m.Fake(d.fakeCopyOptionGroupWithContext)

	case "CreateCustomAvailabilityZoneWithContext":
		return m.Fake(d.fakeCreateCustomAvailabilityZoneWithContext)

	case "CreateDBClusterEndpointWithContext":
		return m.Fake(d.fakeCreateDBClusterEndpointWithContext)

	case "CreateDBClusterParameterGroupWithContext":
		return m.Fake(d.fakeCreateDBClusterParameterGroupWithContext)

	case "CreateDBClusterSnapshotWithContext":
		return m.Fake(d.fakeCreateDBClusterSnapshotWithContext)

	case "CreateDBClusterWithContext":
		return m.Fake(d.fakeCreateDBClusterWithContext)

	case "CreateDBInstanceReadReplicaWithContext":
		return m.Fake(d.fakeCreateDBInstanceReadReplicaWithContext)

	case "CreateDBInstanceWithContext":
		return m.Fake(d.fakeCreateDBInstanceWithContext)

	case "CreateDBParameterGroupWithContext":
		return m.Fake(d.fakeCreateDBParameterGroupWithContext)

	case "CreateDBProxyWithContext":
		return m.Fake(d.fakeCreateDBProxyWithContext)

	case "CreateDBSecurityGroupWithContext":
		return m.Fake(d.fakeCreateDBSecurityGroupWithContext)

	case "CreateDBSnapshotWithContext":
		return m.Fake(d.fakeCreateDBSnapshotWithContext)

	case "CreateDBSubnetGroupWithContext":
		return m.Fake(d.fakeCreateDBSubnetGroupWithContext)

	case "CreateEventSubscriptionWithContext":
		return m.Fake(d.fakeCreateEventSubscriptionWithContext)

	case "CreateGlobalClusterWithContext":
		return m.Fake(d.fakeCreateGlobalClusterWithContext)

	case "CreateOptionGroupWithContext":
		return m.Fake(d.fakeCreateOptionGroupWithContext)

	case "DeleteCustomAvailabilityZoneWithContext":
		return m.Fake(d.fakeDeleteCustomAvailabilityZoneWithContext)

	case "DeleteDBClusterEndpointWithContext":
		return m.Fake(d.fakeDeleteDBClusterEndpointWithContext)

	case "DeleteDBClusterParameterGroupWithContext":
		return m.Fake(d.fakeDeleteDBClusterParameterGroupWithContext)

	case "DeleteDBClusterSnapshotWithContext":
		return m.Fake(d.fakeDeleteDBClusterSnapshotWithContext)

	case "DeleteDBClusterWithContext":
		return m.Fake(d.fakeDeleteDBClusterWithContext)

	case "DeleteDBInstanceAutomatedBackupWithContext":
		return m.Fake(d.fakeDeleteDBInstanceAutomatedBackupWithContext)

	case "DeleteDBInstanceWithContext":
		return m.Fake(d.fakeDeleteDBInstanceWithContext)

	case "DeleteDBParameterGroupWithContext":
		return m.Fake(d.fakeDeleteDBParameterGroupWithContext)

	case "DeleteDBProxyWithContext":
		return m.Fake(d.fakeDeleteDBProxyWithContext)

	case "DeleteDBSecurityGroupWithContext":
		return m.Fake(d.fakeDeleteDBSecurityGroupWithContext)

	case "DeleteDBSnapshotWithContext":
		return m.Fake(d.fakeDeleteDBSnapshotWithContext)

	case "DeleteDBSubnetGroupWithContext":
		return m.Fake(d.fakeDeleteDBSubnetGroupWithContext)

	case "DeleteEventSubscriptionWithContext":
		return m.Fake(d.fakeDeleteEventSubscriptionWithContext)

	case "DeleteGlobalClusterWithContext":
		return m.Fake(d.fakeDeleteGlobalClusterWithContext)

	case "DeleteInstallationMediaWithContext":
		return m.Fake(d.fakeDeleteInstallationMediaWithContext)

	case "DeleteOptionGroupWithContext":
		return m.Fake(d.fakeDeleteOptionGroupWithContext)

	case "DeregisterDBProxyTargetsWithContext":
		return m.Fake(d.fakeDeregisterDBProxyTargetsWithContext)

	case "DescribeAccountAttributesWithContext":
		return m.Fake(d.fakeDescribeAccountAttributesWithContext)

	case "DescribeCertificatesWithContext":
		return m.Fake(d.fakeDescribeCertificatesWithContext)

	case "DescribeCustomAvailabilityZonesPages":
		return m.Fake(d.fakeDescribeCustomAvailabilityZonesPages)

	case "DescribeCustomAvailabilityZonesPagesWithContext":
		return m.Fake(d.fakeDescribeCustomAvailabilityZonesPagesWithContext)

	case "DescribeCustomAvailabilityZonesWithContext":
		return m.Fake(d.fakeDescribeCustomAvailabilityZonesWithContext)

	case "DescribeDBClusterBacktracksWithContext":
		return m.Fake(d.fakeDescribeDBClusterBacktracksWithContext)

	case "DescribeDBClusterEndpointsWithContext":
		return m.Fake(d.fakeDescribeDBClusterEndpointsWithContext)

	case "DescribeDBClusterParameterGroupsWithContext":
		return m.Fake(d.fakeDescribeDBClusterParameterGroupsWithContext)

	case "DescribeDBClusterParametersWithContext":
		return m.Fake(d.fakeDescribeDBClusterParametersWithContext)

	case "DescribeDBClusterSnapshotAttributesWithContext":
		return m.Fake(d.fakeDescribeDBClusterSnapshotAttributesWithContext)

	case "DescribeDBClusterSnapshotsWithContext":
		return m.Fake(d.fakeDescribeDBClusterSnapshotsWithContext)

	case "DescribeDBClustersPages":
		return m.Fake(d.fakeDescribeDBClustersPages)

	case "DescribeDBClustersPagesWithContext":
		return m.Fake(d.fakeDescribeDBClustersPagesWithContext)

	case "DescribeDBClustersWithContext":
		return m.Fake(d.fakeDescribeDBClustersWithContext)

	case "DescribeDBEngineVersionsPages":
		return m.Fake(d.fakeDescribeDBEngineVersionsPages)

	case "DescribeDBEngineVersionsPagesWithContext":
		return m.Fake(d.fakeDescribeDBEngineVersionsPagesWithContext)

	case "DescribeDBEngineVersionsWithContext":
		return m.Fake(d.fakeDescribeDBEngineVersionsWithContext)

	case "DescribeDBInstanceAutomatedBackupsPages":
		return m.Fake(d.fakeDescribeDBInstanceAutomatedBackupsPages)

	case "DescribeDBInstanceAutomatedBackupsPagesWithContext":
		return m.Fake(d.fakeDescribeDBInstanceAutomatedBackupsPagesWithContext)

	case "DescribeDBInstanceAutomatedBackupsWithContext":
		return m.Fake(d.fakeDescribeDBInstanceAutomatedBackupsWithContext)

	case "DescribeDBInstancesPages":
		return m.Fake(d.fakeDescribeDBInstancesPages)

	case "DescribeDBInstancesPagesWithContext":
		return m.Fake(d.fakeDescribeDBInstancesPagesWithContext)

	case "DescribeDBInstancesWithContext":
		return m.Fake(d.fakeDescribeDBInstancesWithContext)

	case "DescribeDBLogFilesPages":
		return m.Fake(d.fakeDescribeDBLogFilesPages)

	case "DescribeDBLogFilesPagesWithContext":
		return m.Fake(d.fakeDescribeDBLogFilesPagesWithContext)

	case "DescribeDBLogFilesWithContext":
		return m.Fake(d.fakeDescribeDBLogFilesWithContext)

	case "DescribeDBParameterGroupsPages":
		return m.Fake(d.fakeDescribeDBParameterGroupsPages)

	case "DescribeDBParameterGroupsPagesWithContext":
		return m.Fake(d.fakeDescribeDBParameterGroupsPagesWithContext)

	case "DescribeDBParameterGroupsWithContext":
		return m.Fake(d.fakeDescribeDBParameterGroupsWithContext)

	case "DescribeDBParametersPages":
		return m.Fake(d.fakeDescribeDBParametersPages)

	case "DescribeDBParametersPagesWithContext":
		return m.Fake(d.fakeDescribeDBParametersPagesWithContext)

	case "DescribeDBParametersWithContext":
		return m.Fake(d.fakeDescribeDBParametersWithContext)

	case "DescribeDBProxiesPages":
		return m.Fake(d.fakeDescribeDBProxiesPages)

	case "DescribeDBProxiesPagesWithContext":
		return m.Fake(d.fakeDescribeDBProxiesPagesWithContext)

	case "DescribeDBProxiesWithContext":
		return m.Fake(d.fakeDescribeDBProxiesWithContext)

	case "DescribeDBProxyTargetGroupsPages":
		return m.Fake(d.fakeDescribeDBProxyTargetGroupsPages)

	case "DescribeDBProxyTargetGroupsPagesWithContext":
		return m.Fake(d.fakeDescribeDBProxyTargetGroupsPagesWithContext)

	case "DescribeDBProxyTargetGroupsWithContext":
		return m.Fake(d.fakeDescribeDBProxyTargetGroupsWithContext)

	case "DescribeDBProxyTargetsPages":
		return m.Fake(d.fakeDescribeDBProxyTargetsPages)

	case "DescribeDBProxyTargetsPagesWithContext":
		return m.Fake(d.fakeDescribeDBProxyTargetsPagesWithContext)

	case "DescribeDBProxyTargetsWithContext":
		return m.Fake(d.fakeDescribeDBProxyTargetsWithContext)

	case "DescribeDBSecurityGroupsPages":
		return m.Fake(d.fakeDescribeDBSecurityGroupsPages)

	case "DescribeDBSecurityGroupsPagesWithContext":
		return m.Fake(d.fakeDescribeDBSecurityGroupsPagesWithContext)

	case "DescribeDBSecurityGroupsWithContext":
		return m.Fake(d.fakeDescribeDBSecurityGroupsWithContext)

	case "DescribeDBSnapshotAttributesWithContext":
		return m.Fake(d.fakeDescribeDBSnapshotAttributesWithContext)

	case "DescribeDBSnapshotsPages":
		return m.Fake(d.fakeDescribeDBSnapshotsPages)

	case "DescribeDBSnapshotsPagesWithContext":
		return m.Fake(d.fakeDescribeDBSnapshotsPagesWithContext)

	case "DescribeDBSnapshotsWithContext":
		return m.Fake(d.fakeDescribeDBSnapshotsWithContext)

	case "DescribeDBSubnetGroupsPages":
		return m.Fake(d.fakeDescribeDBSubnetGroupsPages)

	case "DescribeDBSubnetGroupsPagesWithContext":
		return m.Fake(d.fakeDescribeDBSubnetGroupsPagesWithContext)

	case "DescribeDBSubnetGroupsWithContext":
		return m.Fake(d.fakeDescribeDBSubnetGroupsWithContext)

	case "DescribeEngineDefaultClusterParametersWithContext":
		return m.Fake(d.fakeDescribeEngineDefaultClusterParametersWithContext)

	case "DescribeEngineDefaultParametersPages":
		return m.Fake(d.fakeDescribeEngineDefaultParametersPages)

	case "DescribeEngineDefaultParametersPagesWithContext":
		return m.Fake(d.fakeDescribeEngineDefaultParametersPagesWithContext)

	case "DescribeEngineDefaultParametersWithContext":
		return m.Fake(d.fakeDescribeEngineDefaultParametersWithContext)

	case "DescribeEventCategoriesWithContext":
		return m.Fake(d.fakeDescribeEventCategoriesWithContext)

	case "DescribeEventSubscriptionsPages":
		return m.Fake(d.fakeDescribeEventSubscriptionsPages)

	case "DescribeEventSubscriptionsPagesWithContext":
		return m.Fake(d.fakeDescribeEventSubscriptionsPagesWithContext)

	case "DescribeEventSubscriptionsWithContext":
		return m.Fake(d.fakeDescribeEventSubscriptionsWithContext)

	case "DescribeEventsPages":
		return m.Fake(d.fakeDescribeEventsPages)

	case "DescribeEventsPagesWithContext":
		return m.Fake(d.fakeDescribeEventsPagesWithContext)

	case "DescribeEventsWithContext":
		return m.Fake(d.fakeDescribeEventsWithContext)

	case "DescribeExportTasksPages":
		return m.Fake(d.fakeDescribeExportTasksPages)

	case "DescribeExportTasksPagesWithContext":
		return m.Fake(d.fakeDescribeExportTasksPagesWithContext)

	case "DescribeExportTasksWithContext":
		return m.Fake(d.fakeDescribeExportTasksWithContext)

	case "DescribeGlobalClustersPages":
		return m.Fake(d.fakeDescribeGlobalClustersPages)

	case "DescribeGlobalClustersPagesWithContext":
		return m.Fake(d.fakeDescribeGlobalClustersPagesWithContext)

	case "DescribeGlobalClustersWithContext":
		return m.Fake(d.fakeDescribeGlobalClustersWithContext)

	case "DescribeInstallationMediaPages":
		return m.Fake(d.fakeDescribeInstallationMediaPages)

	case "DescribeInstallationMediaPagesWithContext":
		return m.Fake(d.fakeDescribeInstallationMediaPagesWithContext)

	case "DescribeInstallationMediaWithContext":
		return m.Fake(d.fakeDescribeInstallationMediaWithContext)

	case "DescribeOptionGroupOptionsPages":
		return m.Fake(d.fakeDescribeOptionGroupOptionsPages)

	case "DescribeOptionGroupOptionsPagesWithContext":
		return m.Fake(d.fakeDescribeOptionGroupOptionsPagesWithContext)

	case "DescribeOptionGroupOptionsWithContext":
		return m.Fake(d.fakeDescribeOptionGroupOptionsWithContext)

	case "DescribeOptionGroupsPages":
		return m.Fake(d.fakeDescribeOptionGroupsPages)

	case "DescribeOptionGroupsPagesWithContext":
		return m.Fake(d.fakeDescribeOptionGroupsPagesWithContext)

	case "DescribeOptionGroupsWithContext":
		return m.Fake(d.fakeDescribeOptionGroupsWithContext)

	case "DescribeOrderableDBInstanceOptionsPages":
		return m.Fake(d.fakeDescribeOrderableDBInstanceOptionsPages)

	case "DescribeOrderableDBInstanceOptionsPagesWithContext":
		return m.Fake(d.fakeDescribeOrderableDBInstanceOptionsPagesWithContext)

	case "DescribeOrderableDBInstanceOptionsWithContext":
		return m.Fake(d.fakeDescribeOrderableDBInstanceOptionsWithContext)

	case "DescribePendingMaintenanceActionsWithContext":
		return m.Fake(d.fakeDescribePendingMaintenanceActionsWithContext)

	case "DescribeReservedDBInstancesOfferingsPages":
		return m.Fake(d.fakeDescribeReservedDBInstancesOfferingsPages)

	case "DescribeReservedDBInstancesOfferingsPagesWithContext":
		return m.Fake(d.fakeDescribeReservedDBInstancesOfferingsPagesWithContext)

	case "DescribeReservedDBInstancesOfferingsWithContext":
		return m.Fake(d.fakeDescribeReservedDBInstancesOfferingsWithContext)

	case "DescribeReservedDBInstancesPages":
		return m.Fake(d.fakeDescribeReservedDBInstancesPages)

	case "DescribeReservedDBInstancesPagesWithContext":
		return m.Fake(d.fakeDescribeReservedDBInstancesPagesWithContext)

	case "DescribeReservedDBInstancesWithContext":
		return m.Fake(d.fakeDescribeReservedDBInstancesWithContext)

	case "DescribeSourceRegionsWithContext":
		return m.Fake(d.fakeDescribeSourceRegionsWithContext)

	case "DescribeValidDBInstanceModificationsWithContext":
		return m.Fake(d.fakeDescribeValidDBInstanceModificationsWithContext)

	case "DownloadDBLogFilePortionPages":
		return m.Fake(d.fakeDownloadDBLogFilePortionPages)

	case "DownloadDBLogFilePortionPagesWithContext":
		return m.Fake(d.fakeDownloadDBLogFilePortionPagesWithContext)

	case "DownloadDBLogFilePortionWithContext":
		return m.Fake(d.fakeDownloadDBLogFilePortionWithContext)

	case "FailoverDBClusterWithContext":
		return m.Fake(d.fakeFailoverDBClusterWithContext)

	case "ImportInstallationMediaWithContext":
		return m.Fake(d.fakeImportInstallationMediaWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "ModifyCertificatesWithContext":
		return m.Fake(d.fakeModifyCertificatesWithContext)

	case "ModifyCurrentDBClusterCapacityWithContext":
		return m.Fake(d.fakeModifyCurrentDBClusterCapacityWithContext)

	case "ModifyDBClusterEndpointWithContext":
		return m.Fake(d.fakeModifyDBClusterEndpointWithContext)

	case "ModifyDBClusterParameterGroupWithContext":
		return m.Fake(d.fakeModifyDBClusterParameterGroupWithContext)

	case "ModifyDBClusterSnapshotAttributeWithContext":
		return m.Fake(d.fakeModifyDBClusterSnapshotAttributeWithContext)

	case "ModifyDBClusterWithContext":
		return m.Fake(d.fakeModifyDBClusterWithContext)

	case "ModifyDBInstanceWithContext":
		return m.Fake(d.fakeModifyDBInstanceWithContext)

	case "ModifyDBParameterGroupWithContext":
		return m.Fake(d.fakeModifyDBParameterGroupWithContext)

	case "ModifyDBProxyTargetGroupWithContext":
		return m.Fake(d.fakeModifyDBProxyTargetGroupWithContext)

	case "ModifyDBProxyWithContext":
		return m.Fake(d.fakeModifyDBProxyWithContext)

	case "ModifyDBSnapshotAttributeWithContext":
		return m.Fake(d.fakeModifyDBSnapshotAttributeWithContext)

	case "ModifyDBSnapshotWithContext":
		return m.Fake(d.fakeModifyDBSnapshotWithContext)

	case "ModifyDBSubnetGroupWithContext":
		return m.Fake(d.fakeModifyDBSubnetGroupWithContext)

	case "ModifyEventSubscriptionWithContext":
		return m.Fake(d.fakeModifyEventSubscriptionWithContext)

	case "ModifyGlobalClusterWithContext":
		return m.Fake(d.fakeModifyGlobalClusterWithContext)

	case "ModifyOptionGroupWithContext":
		return m.Fake(d.fakeModifyOptionGroupWithContext)

	case "PromoteReadReplicaDBClusterWithContext":
		return m.Fake(d.fakePromoteReadReplicaDBClusterWithContext)

	case "PromoteReadReplicaWithContext":
		return m.Fake(d.fakePromoteReadReplicaWithContext)

	case "PurchaseReservedDBInstancesOfferingWithContext":
		return m.Fake(d.fakePurchaseReservedDBInstancesOfferingWithContext)

	case "RebootDBInstanceWithContext":
		return m.Fake(d.fakeRebootDBInstanceWithContext)

	case "RegisterDBProxyTargetsWithContext":
		return m.Fake(d.fakeRegisterDBProxyTargetsWithContext)

	case "RemoveFromGlobalClusterWithContext":
		return m.Fake(d.fakeRemoveFromGlobalClusterWithContext)

	case "RemoveRoleFromDBClusterWithContext":
		return m.Fake(d.fakeRemoveRoleFromDBClusterWithContext)

	case "RemoveRoleFromDBInstanceWithContext":
		return m.Fake(d.fakeRemoveRoleFromDBInstanceWithContext)

	case "RemoveSourceIdentifierFromSubscriptionWithContext":
		return m.Fake(d.fakeRemoveSourceIdentifierFromSubscriptionWithContext)

	case "RemoveTagsFromResourceWithContext":
		return m.Fake(d.fakeRemoveTagsFromResourceWithContext)

	case "ResetDBClusterParameterGroupWithContext":
		return m.Fake(d.fakeResetDBClusterParameterGroupWithContext)

	case "ResetDBParameterGroupWithContext":
		return m.Fake(d.fakeResetDBParameterGroupWithContext)

	case "RestoreDBClusterFromS3WithContext":
		return m.Fake(d.fakeRestoreDBClusterFromS3WithContext)

	case "RestoreDBClusterFromSnapshotWithContext":
		return m.Fake(d.fakeRestoreDBClusterFromSnapshotWithContext)

	case "RestoreDBClusterToPointInTimeWithContext":
		return m.Fake(d.fakeRestoreDBClusterToPointInTimeWithContext)

	case "RestoreDBInstanceFromDBSnapshotWithContext":
		return m.Fake(d.fakeRestoreDBInstanceFromDBSnapshotWithContext)

	case "RestoreDBInstanceFromS3WithContext":
		return m.Fake(d.fakeRestoreDBInstanceFromS3WithContext)

	case "RestoreDBInstanceToPointInTimeWithContext":
		return m.Fake(d.fakeRestoreDBInstanceToPointInTimeWithContext)

	case "RevokeDBSecurityGroupIngressWithContext":
		return m.Fake(d.fakeRevokeDBSecurityGroupIngressWithContext)

	case "StartActivityStreamWithContext":
		return m.Fake(d.fakeStartActivityStreamWithContext)

	case "StartDBClusterWithContext":
		return m.Fake(d.fakeStartDBClusterWithContext)

	case "StartDBInstanceWithContext":
		return m.Fake(d.fakeStartDBInstanceWithContext)

	case "StartExportTaskWithContext":
		return m.Fake(d.fakeStartExportTaskWithContext)

	case "StopActivityStreamWithContext":
		return m.Fake(d.fakeStopActivityStreamWithContext)

	case "StopDBClusterWithContext":
		return m.Fake(d.fakeStopDBClusterWithContext)

	case "StopDBInstanceWithContext":
		return m.Fake(d.fakeStopDBInstanceWithContext)

	case "WaitUntilDBClusterSnapshotAvailable":
		return m.Fake(d.fakeWaitUntilDBClusterSnapshotAvailable)

	case "WaitUntilDBClusterSnapshotAvailableWithContext":
		return m.Fake(d.fakeWaitUntilDBClusterSnapshotAvailableWithContext)

	case "WaitUntilDBClusterSnapshotDeleted":
		return m.Fake(d.fakeWaitUntilDBClusterSnapshotDeleted)

	case "WaitUntilDBClusterSnapshotDeletedWithContext":
		return m.Fake(d.fakeWaitUntilDBClusterSnapshotDeletedWithContext)

	case "WaitUntilDBInstanceAvailable":
		return m.Fake(d.fakeWaitUntilDBInstanceAvailable)

	case "WaitUntilDBInstanceAvailableWithContext":
		return m.Fake(d.fakeWaitUntilDBInstanceAvailableWithContext)

	case "WaitUntilDBInstanceDeleted":
		return m.Fake(d.fakeWaitUntilDBInstanceDeleted)

	case "WaitUntilDBInstanceDeletedWithContext":
		return m.Fake(d.fakeWaitUntilDBInstanceDeletedWithContext)

	case "WaitUntilDBSnapshotAvailable":
		return m.Fake(d.fakeWaitUntilDBSnapshotAvailable)

	case "WaitUntilDBSnapshotAvailableWithContext":
		return m.Fake(d.fakeWaitUntilDBSnapshotAvailableWithContext)

	case "WaitUntilDBSnapshotDeleted":
		return m.Fake(d.fakeWaitUntilDBSnapshotDeleted)

	case "WaitUntilDBSnapshotDeletedWithContext":
		return m.Fake(d.fakeWaitUntilDBSnapshotDeletedWithContext)

	default:
		return nil
	}
}

func (d *RDSDouble) AddRoleToDBCluster(i0 *rds.AddRoleToDBClusterInput) (r0 *rds.AddRoleToDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddRoleToDBCluster", i0)
	r0, _ = returns[0].(*rds.AddRoleToDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) AddRoleToDBClusterRequest(i0 *rds.AddRoleToDBClusterInput) (r0 *request.Request, r1 *rds.AddRoleToDBClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddRoleToDBClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.AddRoleToDBClusterOutput)
	return
}

func (d *RDSDouble) AddRoleToDBClusterWithContext(i0 context.Context, i1 *rds.AddRoleToDBClusterInput, i2 ...request.Option) (r0 *rds.AddRoleToDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddRoleToDBClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.AddRoleToDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeAddRoleToDBClusterWithContext(ctx context.Context, in *rds.AddRoleToDBClusterInput, _ ...request.Option) (*rds.AddRoleToDBClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddRoleToDBCluster cancelled", ctx.Err())
	default:
		return d.AddRoleToDBCluster(in)
	}
}

func (d *RDSDouble) AddRoleToDBInstance(i0 *rds.AddRoleToDBInstanceInput) (r0 *rds.AddRoleToDBInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddRoleToDBInstance", i0)
	r0, _ = returns[0].(*rds.AddRoleToDBInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) AddRoleToDBInstanceRequest(i0 *rds.AddRoleToDBInstanceInput) (r0 *request.Request, r1 *rds.AddRoleToDBInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddRoleToDBInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.AddRoleToDBInstanceOutput)
	return
}

func (d *RDSDouble) AddRoleToDBInstanceWithContext(i0 context.Context, i1 *rds.AddRoleToDBInstanceInput, i2 ...request.Option) (r0 *rds.AddRoleToDBInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddRoleToDBInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.AddRoleToDBInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeAddRoleToDBInstanceWithContext(ctx context.Context, in *rds.AddRoleToDBInstanceInput, _ ...request.Option) (*rds.AddRoleToDBInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddRoleToDBInstance cancelled", ctx.Err())
	default:
		return d.AddRoleToDBInstance(in)
	}
}

func (d *RDSDouble) AddSourceIdentifierToSubscription(i0 *rds.AddSourceIdentifierToSubscriptionInput) (r0 *rds.AddSourceIdentifierToSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddSourceIdentifierToSubscription", i0)
	r0, _ = returns[0].(*rds.AddSourceIdentifierToSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) AddSourceIdentifierToSubscriptionRequest(i0 *rds.AddSourceIdentifierToSubscriptionInput) (r0 *request.Request, r1 *rds.AddSourceIdentifierToSubscriptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddSourceIdentifierToSubscriptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.AddSourceIdentifierToSubscriptionOutput)
	return
}

func (d *RDSDouble) AddSourceIdentifierToSubscriptionWithContext(i0 context.Context, i1 *rds.AddSourceIdentifierToSubscriptionInput, i2 ...request.Option) (r0 *rds.AddSourceIdentifierToSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddSourceIdentifierToSubscriptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.AddSourceIdentifierToSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeAddSourceIdentifierToSubscriptionWithContext(ctx context.Context, in *rds.AddSourceIdentifierToSubscriptionInput, _ ...request.Option) (*rds.AddSourceIdentifierToSubscriptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddSourceIdentifierToSubscription cancelled", ctx.Err())
	default:
		return d.AddSourceIdentifierToSubscription(in)
	}
}

func (d *RDSDouble) AddTagsToResource(i0 *rds.AddTagsToResourceInput) (r0 *rds.AddTagsToResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToResource", i0)
	r0, _ = returns[0].(*rds.AddTagsToResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) AddTagsToResourceRequest(i0 *rds.AddTagsToResourceInput) (r0 *request.Request, r1 *rds.AddTagsToResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.AddTagsToResourceOutput)
	return
}

func (d *RDSDouble) AddTagsToResourceWithContext(i0 context.Context, i1 *rds.AddTagsToResourceInput, i2 ...request.Option) (r0 *rds.AddTagsToResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.AddTagsToResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeAddTagsToResourceWithContext(ctx context.Context, in *rds.AddTagsToResourceInput, _ ...request.Option) (*rds.AddTagsToResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddTagsToResource cancelled", ctx.Err())
	default:
		return d.AddTagsToResource(in)
	}
}

func (d *RDSDouble) ApplyPendingMaintenanceAction(i0 *rds.ApplyPendingMaintenanceActionInput) (r0 *rds.ApplyPendingMaintenanceActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ApplyPendingMaintenanceAction", i0)
	r0, _ = returns[0].(*rds.ApplyPendingMaintenanceActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) ApplyPendingMaintenanceActionRequest(i0 *rds.ApplyPendingMaintenanceActionInput) (r0 *request.Request, r1 *rds.ApplyPendingMaintenanceActionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ApplyPendingMaintenanceActionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.ApplyPendingMaintenanceActionOutput)
	return
}

func (d *RDSDouble) ApplyPendingMaintenanceActionWithContext(i0 context.Context, i1 *rds.ApplyPendingMaintenanceActionInput, i2 ...request.Option) (r0 *rds.ApplyPendingMaintenanceActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ApplyPendingMaintenanceActionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.ApplyPendingMaintenanceActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeApplyPendingMaintenanceActionWithContext(ctx context.Context, in *rds.ApplyPendingMaintenanceActionInput, _ ...request.Option) (*rds.ApplyPendingMaintenanceActionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ApplyPendingMaintenanceAction cancelled", ctx.Err())
	default:
		return d.ApplyPendingMaintenanceAction(in)
	}
}

func (d *RDSDouble) AuthorizeDBSecurityGroupIngress(i0 *rds.AuthorizeDBSecurityGroupIngressInput) (r0 *rds.AuthorizeDBSecurityGroupIngressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AuthorizeDBSecurityGroupIngress", i0)
	r0, _ = returns[0].(*rds.AuthorizeDBSecurityGroupIngressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) AuthorizeDBSecurityGroupIngressRequest(i0 *rds.AuthorizeDBSecurityGroupIngressInput) (r0 *request.Request, r1 *rds.AuthorizeDBSecurityGroupIngressOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AuthorizeDBSecurityGroupIngressRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.AuthorizeDBSecurityGroupIngressOutput)
	return
}

func (d *RDSDouble) AuthorizeDBSecurityGroupIngressWithContext(i0 context.Context, i1 *rds.AuthorizeDBSecurityGroupIngressInput, i2 ...request.Option) (r0 *rds.AuthorizeDBSecurityGroupIngressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AuthorizeDBSecurityGroupIngressWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.AuthorizeDBSecurityGroupIngressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeAuthorizeDBSecurityGroupIngressWithContext(ctx context.Context, in *rds.AuthorizeDBSecurityGroupIngressInput, _ ...request.Option) (*rds.AuthorizeDBSecurityGroupIngressOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AuthorizeDBSecurityGroupIngress cancelled", ctx.Err())
	default:
		return d.AuthorizeDBSecurityGroupIngress(in)
	}
}

func (d *RDSDouble) BacktrackDBCluster(i0 *rds.BacktrackDBClusterInput) (r0 *rds.BacktrackDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BacktrackDBCluster", i0)
	r0, _ = returns[0].(*rds.BacktrackDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) BacktrackDBClusterRequest(i0 *rds.BacktrackDBClusterInput) (r0 *request.Request, r1 *rds.BacktrackDBClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BacktrackDBClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.BacktrackDBClusterOutput)
	return
}

func (d *RDSDouble) BacktrackDBClusterWithContext(i0 context.Context, i1 *rds.BacktrackDBClusterInput, i2 ...request.Option) (r0 *rds.BacktrackDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BacktrackDBClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.BacktrackDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeBacktrackDBClusterWithContext(ctx context.Context, in *rds.BacktrackDBClusterInput, _ ...request.Option) (*rds.BacktrackDBClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BacktrackDBCluster cancelled", ctx.Err())
	default:
		return d.BacktrackDBCluster(in)
	}
}

func (d *RDSDouble) CancelExportTask(i0 *rds.CancelExportTaskInput) (r0 *rds.CancelExportTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelExportTask", i0)
	r0, _ = returns[0].(*rds.CancelExportTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) CancelExportTaskRequest(i0 *rds.CancelExportTaskInput) (r0 *request.Request, r1 *rds.CancelExportTaskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelExportTaskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.CancelExportTaskOutput)
	return
}

func (d *RDSDouble) CancelExportTaskWithContext(i0 context.Context, i1 *rds.CancelExportTaskInput, i2 ...request.Option) (r0 *rds.CancelExportTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelExportTaskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.CancelExportTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeCancelExportTaskWithContext(ctx context.Context, in *rds.CancelExportTaskInput, _ ...request.Option) (*rds.CancelExportTaskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelExportTask cancelled", ctx.Err())
	default:
		return d.CancelExportTask(in)
	}
}

func (d *RDSDouble) CopyDBClusterParameterGroup(i0 *rds.CopyDBClusterParameterGroupInput) (r0 *rds.CopyDBClusterParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyDBClusterParameterGroup", i0)
	r0, _ = returns[0].(*rds.CopyDBClusterParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) CopyDBClusterParameterGroupRequest(i0 *rds.CopyDBClusterParameterGroupInput) (r0 *request.Request, r1 *rds.CopyDBClusterParameterGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyDBClusterParameterGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.CopyDBClusterParameterGroupOutput)
	return
}

func (d *RDSDouble) CopyDBClusterParameterGroupWithContext(i0 context.Context, i1 *rds.CopyDBClusterParameterGroupInput, i2 ...request.Option) (r0 *rds.CopyDBClusterParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyDBClusterParameterGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.CopyDBClusterParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeCopyDBClusterParameterGroupWithContext(ctx context.Context, in *rds.CopyDBClusterParameterGroupInput, _ ...request.Option) (*rds.CopyDBClusterParameterGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CopyDBClusterParameterGroup cancelled", ctx.Err())
	default:
		return d.CopyDBClusterParameterGroup(in)
	}
}

func (d *RDSDouble) CopyDBClusterSnapshot(i0 *rds.CopyDBClusterSnapshotInput) (r0 *rds.CopyDBClusterSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyDBClusterSnapshot", i0)
	r0, _ = returns[0].(*rds.CopyDBClusterSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) CopyDBClusterSnapshotRequest(i0 *rds.CopyDBClusterSnapshotInput) (r0 *request.Request, r1 *rds.CopyDBClusterSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyDBClusterSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.CopyDBClusterSnapshotOutput)
	return
}

func (d *RDSDouble) CopyDBClusterSnapshotWithContext(i0 context.Context, i1 *rds.CopyDBClusterSnapshotInput, i2 ...request.Option) (r0 *rds.CopyDBClusterSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyDBClusterSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.CopyDBClusterSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeCopyDBClusterSnapshotWithContext(ctx context.Context, in *rds.CopyDBClusterSnapshotInput, _ ...request.Option) (*rds.CopyDBClusterSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CopyDBClusterSnapshot cancelled", ctx.Err())
	default:
		return d.CopyDBClusterSnapshot(in)
	}
}

func (d *RDSDouble) CopyDBParameterGroup(i0 *rds.CopyDBParameterGroupInput) (r0 *rds.CopyDBParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyDBParameterGroup", i0)
	r0, _ = returns[0].(*rds.CopyDBParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) CopyDBParameterGroupRequest(i0 *rds.CopyDBParameterGroupInput) (r0 *request.Request, r1 *rds.CopyDBParameterGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyDBParameterGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.CopyDBParameterGroupOutput)
	return
}

func (d *RDSDouble) CopyDBParameterGroupWithContext(i0 context.Context, i1 *rds.CopyDBParameterGroupInput, i2 ...request.Option) (r0 *rds.CopyDBParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyDBParameterGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.CopyDBParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeCopyDBParameterGroupWithContext(ctx context.Context, in *rds.CopyDBParameterGroupInput, _ ...request.Option) (*rds.CopyDBParameterGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CopyDBParameterGroup cancelled", ctx.Err())
	default:
		return d.CopyDBParameterGroup(in)
	}
}

func (d *RDSDouble) CopyDBSnapshot(i0 *rds.CopyDBSnapshotInput) (r0 *rds.CopyDBSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyDBSnapshot", i0)
	r0, _ = returns[0].(*rds.CopyDBSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) CopyDBSnapshotRequest(i0 *rds.CopyDBSnapshotInput) (r0 *request.Request, r1 *rds.CopyDBSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyDBSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.CopyDBSnapshotOutput)
	return
}

func (d *RDSDouble) CopyDBSnapshotWithContext(i0 context.Context, i1 *rds.CopyDBSnapshotInput, i2 ...request.Option) (r0 *rds.CopyDBSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyDBSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.CopyDBSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeCopyDBSnapshotWithContext(ctx context.Context, in *rds.CopyDBSnapshotInput, _ ...request.Option) (*rds.CopyDBSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CopyDBSnapshot cancelled", ctx.Err())
	default:
		return d.CopyDBSnapshot(in)
	}
}

func (d *RDSDouble) CopyOptionGroup(i0 *rds.CopyOptionGroupInput) (r0 *rds.CopyOptionGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyOptionGroup", i0)
	r0, _ = returns[0].(*rds.CopyOptionGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) CopyOptionGroupRequest(i0 *rds.CopyOptionGroupInput) (r0 *request.Request, r1 *rds.CopyOptionGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyOptionGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.CopyOptionGroupOutput)
	return
}

func (d *RDSDouble) CopyOptionGroupWithContext(i0 context.Context, i1 *rds.CopyOptionGroupInput, i2 ...request.Option) (r0 *rds.CopyOptionGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyOptionGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.CopyOptionGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeCopyOptionGroupWithContext(ctx context.Context, in *rds.CopyOptionGroupInput, _ ...request.Option) (*rds.CopyOptionGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CopyOptionGroup cancelled", ctx.Err())
	default:
		return d.CopyOptionGroup(in)
	}
}

func (d *RDSDouble) CreateCustomAvailabilityZone(i0 *rds.CreateCustomAvailabilityZoneInput) (r0 *rds.CreateCustomAvailabilityZoneOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCustomAvailabilityZone", i0)
	r0, _ = returns[0].(*rds.CreateCustomAvailabilityZoneOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) CreateCustomAvailabilityZoneRequest(i0 *rds.CreateCustomAvailabilityZoneInput) (r0 *request.Request, r1 *rds.CreateCustomAvailabilityZoneOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCustomAvailabilityZoneRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.CreateCustomAvailabilityZoneOutput)
	return
}

func (d *RDSDouble) CreateCustomAvailabilityZoneWithContext(i0 context.Context, i1 *rds.CreateCustomAvailabilityZoneInput, i2 ...request.Option) (r0 *rds.CreateCustomAvailabilityZoneOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCustomAvailabilityZoneWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.CreateCustomAvailabilityZoneOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeCreateCustomAvailabilityZoneWithContext(ctx context.Context, in *rds.CreateCustomAvailabilityZoneInput, _ ...request.Option) (*rds.CreateCustomAvailabilityZoneOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateCustomAvailabilityZone cancelled", ctx.Err())
	default:
		return d.CreateCustomAvailabilityZone(in)
	}
}

func (d *RDSDouble) CreateDBCluster(i0 *rds.CreateDBClusterInput) (r0 *rds.CreateDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBCluster", i0)
	r0, _ = returns[0].(*rds.CreateDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) CreateDBClusterEndpoint(i0 *rds.CreateDBClusterEndpointInput) (r0 *rds.CreateDBClusterEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBClusterEndpoint", i0)
	r0, _ = returns[0].(*rds.CreateDBClusterEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) CreateDBClusterEndpointRequest(i0 *rds.CreateDBClusterEndpointInput) (r0 *request.Request, r1 *rds.CreateDBClusterEndpointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBClusterEndpointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.CreateDBClusterEndpointOutput)
	return
}

func (d *RDSDouble) CreateDBClusterEndpointWithContext(i0 context.Context, i1 *rds.CreateDBClusterEndpointInput, i2 ...request.Option) (r0 *rds.CreateDBClusterEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBClusterEndpointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.CreateDBClusterEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeCreateDBClusterEndpointWithContext(ctx context.Context, in *rds.CreateDBClusterEndpointInput, _ ...request.Option) (*rds.CreateDBClusterEndpointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDBClusterEndpoint cancelled", ctx.Err())
	default:
		return d.CreateDBClusterEndpoint(in)
	}
}

func (d *RDSDouble) CreateDBClusterParameterGroup(i0 *rds.CreateDBClusterParameterGroupInput) (r0 *rds.CreateDBClusterParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBClusterParameterGroup", i0)
	r0, _ = returns[0].(*rds.CreateDBClusterParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) CreateDBClusterParameterGroupRequest(i0 *rds.CreateDBClusterParameterGroupInput) (r0 *request.Request, r1 *rds.CreateDBClusterParameterGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBClusterParameterGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.CreateDBClusterParameterGroupOutput)
	return
}

func (d *RDSDouble) CreateDBClusterParameterGroupWithContext(i0 context.Context, i1 *rds.CreateDBClusterParameterGroupInput, i2 ...request.Option) (r0 *rds.CreateDBClusterParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBClusterParameterGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.CreateDBClusterParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeCreateDBClusterParameterGroupWithContext(ctx context.Context, in *rds.CreateDBClusterParameterGroupInput, _ ...request.Option) (*rds.CreateDBClusterParameterGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDBClusterParameterGroup cancelled", ctx.Err())
	default:
		return d.CreateDBClusterParameterGroup(in)
	}
}

func (d *RDSDouble) CreateDBClusterRequest(i0 *rds.CreateDBClusterInput) (r0 *request.Request, r1 *rds.CreateDBClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.CreateDBClusterOutput)
	return
}

func (d *RDSDouble) CreateDBClusterSnapshot(i0 *rds.CreateDBClusterSnapshotInput) (r0 *rds.CreateDBClusterSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBClusterSnapshot", i0)
	r0, _ = returns[0].(*rds.CreateDBClusterSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) CreateDBClusterSnapshotRequest(i0 *rds.CreateDBClusterSnapshotInput) (r0 *request.Request, r1 *rds.CreateDBClusterSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBClusterSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.CreateDBClusterSnapshotOutput)
	return
}

func (d *RDSDouble) CreateDBClusterSnapshotWithContext(i0 context.Context, i1 *rds.CreateDBClusterSnapshotInput, i2 ...request.Option) (r0 *rds.CreateDBClusterSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBClusterSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.CreateDBClusterSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeCreateDBClusterSnapshotWithContext(ctx context.Context, in *rds.CreateDBClusterSnapshotInput, _ ...request.Option) (*rds.CreateDBClusterSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDBClusterSnapshot cancelled", ctx.Err())
	default:
		return d.CreateDBClusterSnapshot(in)
	}
}

func (d *RDSDouble) CreateDBClusterWithContext(i0 context.Context, i1 *rds.CreateDBClusterInput, i2 ...request.Option) (r0 *rds.CreateDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.CreateDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeCreateDBClusterWithContext(ctx context.Context, in *rds.CreateDBClusterInput, _ ...request.Option) (*rds.CreateDBClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDBCluster cancelled", ctx.Err())
	default:
		return d.CreateDBCluster(in)
	}
}

func (d *RDSDouble) CreateDBInstance(i0 *rds.CreateDBInstanceInput) (r0 *rds.CreateDBInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBInstance", i0)
	r0, _ = returns[0].(*rds.CreateDBInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) CreateDBInstanceReadReplica(i0 *rds.CreateDBInstanceReadReplicaInput) (r0 *rds.CreateDBInstanceReadReplicaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBInstanceReadReplica", i0)
	r0, _ = returns[0].(*rds.CreateDBInstanceReadReplicaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) CreateDBInstanceReadReplicaRequest(i0 *rds.CreateDBInstanceReadReplicaInput) (r0 *request.Request, r1 *rds.CreateDBInstanceReadReplicaOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBInstanceReadReplicaRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.CreateDBInstanceReadReplicaOutput)
	return
}

func (d *RDSDouble) CreateDBInstanceReadReplicaWithContext(i0 context.Context, i1 *rds.CreateDBInstanceReadReplicaInput, i2 ...request.Option) (r0 *rds.CreateDBInstanceReadReplicaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBInstanceReadReplicaWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.CreateDBInstanceReadReplicaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeCreateDBInstanceReadReplicaWithContext(ctx context.Context, in *rds.CreateDBInstanceReadReplicaInput, _ ...request.Option) (*rds.CreateDBInstanceReadReplicaOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDBInstanceReadReplica cancelled", ctx.Err())
	default:
		return d.CreateDBInstanceReadReplica(in)
	}
}

func (d *RDSDouble) CreateDBInstanceRequest(i0 *rds.CreateDBInstanceInput) (r0 *request.Request, r1 *rds.CreateDBInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.CreateDBInstanceOutput)
	return
}

func (d *RDSDouble) CreateDBInstanceWithContext(i0 context.Context, i1 *rds.CreateDBInstanceInput, i2 ...request.Option) (r0 *rds.CreateDBInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.CreateDBInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeCreateDBInstanceWithContext(ctx context.Context, in *rds.CreateDBInstanceInput, _ ...request.Option) (*rds.CreateDBInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDBInstance cancelled", ctx.Err())
	default:
		return d.CreateDBInstance(in)
	}
}

func (d *RDSDouble) CreateDBParameterGroup(i0 *rds.CreateDBParameterGroupInput) (r0 *rds.CreateDBParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBParameterGroup", i0)
	r0, _ = returns[0].(*rds.CreateDBParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) CreateDBParameterGroupRequest(i0 *rds.CreateDBParameterGroupInput) (r0 *request.Request, r1 *rds.CreateDBParameterGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBParameterGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.CreateDBParameterGroupOutput)
	return
}

func (d *RDSDouble) CreateDBParameterGroupWithContext(i0 context.Context, i1 *rds.CreateDBParameterGroupInput, i2 ...request.Option) (r0 *rds.CreateDBParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBParameterGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.CreateDBParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeCreateDBParameterGroupWithContext(ctx context.Context, in *rds.CreateDBParameterGroupInput, _ ...request.Option) (*rds.CreateDBParameterGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDBParameterGroup cancelled", ctx.Err())
	default:
		return d.CreateDBParameterGroup(in)
	}
}

func (d *RDSDouble) CreateDBProxy(i0 *rds.CreateDBProxyInput) (r0 *rds.CreateDBProxyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBProxy", i0)
	r0, _ = returns[0].(*rds.CreateDBProxyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) CreateDBProxyRequest(i0 *rds.CreateDBProxyInput) (r0 *request.Request, r1 *rds.CreateDBProxyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBProxyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.CreateDBProxyOutput)
	return
}

func (d *RDSDouble) CreateDBProxyWithContext(i0 context.Context, i1 *rds.CreateDBProxyInput, i2 ...request.Option) (r0 *rds.CreateDBProxyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBProxyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.CreateDBProxyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeCreateDBProxyWithContext(ctx context.Context, in *rds.CreateDBProxyInput, _ ...request.Option) (*rds.CreateDBProxyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDBProxy cancelled", ctx.Err())
	default:
		return d.CreateDBProxy(in)
	}
}

func (d *RDSDouble) CreateDBSecurityGroup(i0 *rds.CreateDBSecurityGroupInput) (r0 *rds.CreateDBSecurityGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBSecurityGroup", i0)
	r0, _ = returns[0].(*rds.CreateDBSecurityGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) CreateDBSecurityGroupRequest(i0 *rds.CreateDBSecurityGroupInput) (r0 *request.Request, r1 *rds.CreateDBSecurityGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBSecurityGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.CreateDBSecurityGroupOutput)
	return
}

func (d *RDSDouble) CreateDBSecurityGroupWithContext(i0 context.Context, i1 *rds.CreateDBSecurityGroupInput, i2 ...request.Option) (r0 *rds.CreateDBSecurityGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBSecurityGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.CreateDBSecurityGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeCreateDBSecurityGroupWithContext(ctx context.Context, in *rds.CreateDBSecurityGroupInput, _ ...request.Option) (*rds.CreateDBSecurityGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDBSecurityGroup cancelled", ctx.Err())
	default:
		return d.CreateDBSecurityGroup(in)
	}
}

func (d *RDSDouble) CreateDBSnapshot(i0 *rds.CreateDBSnapshotInput) (r0 *rds.CreateDBSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBSnapshot", i0)
	r0, _ = returns[0].(*rds.CreateDBSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) CreateDBSnapshotRequest(i0 *rds.CreateDBSnapshotInput) (r0 *request.Request, r1 *rds.CreateDBSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.CreateDBSnapshotOutput)
	return
}

func (d *RDSDouble) CreateDBSnapshotWithContext(i0 context.Context, i1 *rds.CreateDBSnapshotInput, i2 ...request.Option) (r0 *rds.CreateDBSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.CreateDBSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeCreateDBSnapshotWithContext(ctx context.Context, in *rds.CreateDBSnapshotInput, _ ...request.Option) (*rds.CreateDBSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDBSnapshot cancelled", ctx.Err())
	default:
		return d.CreateDBSnapshot(in)
	}
}

func (d *RDSDouble) CreateDBSubnetGroup(i0 *rds.CreateDBSubnetGroupInput) (r0 *rds.CreateDBSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBSubnetGroup", i0)
	r0, _ = returns[0].(*rds.CreateDBSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) CreateDBSubnetGroupRequest(i0 *rds.CreateDBSubnetGroupInput) (r0 *request.Request, r1 *rds.CreateDBSubnetGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBSubnetGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.CreateDBSubnetGroupOutput)
	return
}

func (d *RDSDouble) CreateDBSubnetGroupWithContext(i0 context.Context, i1 *rds.CreateDBSubnetGroupInput, i2 ...request.Option) (r0 *rds.CreateDBSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBSubnetGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.CreateDBSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeCreateDBSubnetGroupWithContext(ctx context.Context, in *rds.CreateDBSubnetGroupInput, _ ...request.Option) (*rds.CreateDBSubnetGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDBSubnetGroup cancelled", ctx.Err())
	default:
		return d.CreateDBSubnetGroup(in)
	}
}

func (d *RDSDouble) CreateEventSubscription(i0 *rds.CreateEventSubscriptionInput) (r0 *rds.CreateEventSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEventSubscription", i0)
	r0, _ = returns[0].(*rds.CreateEventSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) CreateEventSubscriptionRequest(i0 *rds.CreateEventSubscriptionInput) (r0 *request.Request, r1 *rds.CreateEventSubscriptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEventSubscriptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.CreateEventSubscriptionOutput)
	return
}

func (d *RDSDouble) CreateEventSubscriptionWithContext(i0 context.Context, i1 *rds.CreateEventSubscriptionInput, i2 ...request.Option) (r0 *rds.CreateEventSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEventSubscriptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.CreateEventSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeCreateEventSubscriptionWithContext(ctx context.Context, in *rds.CreateEventSubscriptionInput, _ ...request.Option) (*rds.CreateEventSubscriptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateEventSubscription cancelled", ctx.Err())
	default:
		return d.CreateEventSubscription(in)
	}
}

func (d *RDSDouble) CreateGlobalCluster(i0 *rds.CreateGlobalClusterInput) (r0 *rds.CreateGlobalClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGlobalCluster", i0)
	r0, _ = returns[0].(*rds.CreateGlobalClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) CreateGlobalClusterRequest(i0 *rds.CreateGlobalClusterInput) (r0 *request.Request, r1 *rds.CreateGlobalClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGlobalClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.CreateGlobalClusterOutput)
	return
}

func (d *RDSDouble) CreateGlobalClusterWithContext(i0 context.Context, i1 *rds.CreateGlobalClusterInput, i2 ...request.Option) (r0 *rds.CreateGlobalClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGlobalClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.CreateGlobalClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeCreateGlobalClusterWithContext(ctx context.Context, in *rds.CreateGlobalClusterInput, _ ...request.Option) (*rds.CreateGlobalClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateGlobalCluster cancelled", ctx.Err())
	default:
		return d.CreateGlobalCluster(in)
	}
}

func (d *RDSDouble) CreateOptionGroup(i0 *rds.CreateOptionGroupInput) (r0 *rds.CreateOptionGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateOptionGroup", i0)
	r0, _ = returns[0].(*rds.CreateOptionGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) CreateOptionGroupRequest(i0 *rds.CreateOptionGroupInput) (r0 *request.Request, r1 *rds.CreateOptionGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateOptionGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.CreateOptionGroupOutput)
	return
}

func (d *RDSDouble) CreateOptionGroupWithContext(i0 context.Context, i1 *rds.CreateOptionGroupInput, i2 ...request.Option) (r0 *rds.CreateOptionGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateOptionGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.CreateOptionGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeCreateOptionGroupWithContext(ctx context.Context, in *rds.CreateOptionGroupInput, _ ...request.Option) (*rds.CreateOptionGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateOptionGroup cancelled", ctx.Err())
	default:
		return d.CreateOptionGroup(in)
	}
}

func (d *RDSDouble) DeleteCustomAvailabilityZone(i0 *rds.DeleteCustomAvailabilityZoneInput) (r0 *rds.DeleteCustomAvailabilityZoneOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCustomAvailabilityZone", i0)
	r0, _ = returns[0].(*rds.DeleteCustomAvailabilityZoneOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DeleteCustomAvailabilityZoneRequest(i0 *rds.DeleteCustomAvailabilityZoneInput) (r0 *request.Request, r1 *rds.DeleteCustomAvailabilityZoneOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCustomAvailabilityZoneRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DeleteCustomAvailabilityZoneOutput)
	return
}

func (d *RDSDouble) DeleteCustomAvailabilityZoneWithContext(i0 context.Context, i1 *rds.DeleteCustomAvailabilityZoneInput, i2 ...request.Option) (r0 *rds.DeleteCustomAvailabilityZoneOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCustomAvailabilityZoneWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DeleteCustomAvailabilityZoneOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDeleteCustomAvailabilityZoneWithContext(ctx context.Context, in *rds.DeleteCustomAvailabilityZoneInput, _ ...request.Option) (*rds.DeleteCustomAvailabilityZoneOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteCustomAvailabilityZone cancelled", ctx.Err())
	default:
		return d.DeleteCustomAvailabilityZone(in)
	}
}

func (d *RDSDouble) DeleteDBCluster(i0 *rds.DeleteDBClusterInput) (r0 *rds.DeleteDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBCluster", i0)
	r0, _ = returns[0].(*rds.DeleteDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DeleteDBClusterEndpoint(i0 *rds.DeleteDBClusterEndpointInput) (r0 *rds.DeleteDBClusterEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBClusterEndpoint", i0)
	r0, _ = returns[0].(*rds.DeleteDBClusterEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DeleteDBClusterEndpointRequest(i0 *rds.DeleteDBClusterEndpointInput) (r0 *request.Request, r1 *rds.DeleteDBClusterEndpointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBClusterEndpointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DeleteDBClusterEndpointOutput)
	return
}

func (d *RDSDouble) DeleteDBClusterEndpointWithContext(i0 context.Context, i1 *rds.DeleteDBClusterEndpointInput, i2 ...request.Option) (r0 *rds.DeleteDBClusterEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBClusterEndpointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DeleteDBClusterEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDeleteDBClusterEndpointWithContext(ctx context.Context, in *rds.DeleteDBClusterEndpointInput, _ ...request.Option) (*rds.DeleteDBClusterEndpointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDBClusterEndpoint cancelled", ctx.Err())
	default:
		return d.DeleteDBClusterEndpoint(in)
	}
}

func (d *RDSDouble) DeleteDBClusterParameterGroup(i0 *rds.DeleteDBClusterParameterGroupInput) (r0 *rds.DeleteDBClusterParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBClusterParameterGroup", i0)
	r0, _ = returns[0].(*rds.DeleteDBClusterParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DeleteDBClusterParameterGroupRequest(i0 *rds.DeleteDBClusterParameterGroupInput) (r0 *request.Request, r1 *rds.DeleteDBClusterParameterGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBClusterParameterGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DeleteDBClusterParameterGroupOutput)
	return
}

func (d *RDSDouble) DeleteDBClusterParameterGroupWithContext(i0 context.Context, i1 *rds.DeleteDBClusterParameterGroupInput, i2 ...request.Option) (r0 *rds.DeleteDBClusterParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBClusterParameterGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DeleteDBClusterParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDeleteDBClusterParameterGroupWithContext(ctx context.Context, in *rds.DeleteDBClusterParameterGroupInput, _ ...request.Option) (*rds.DeleteDBClusterParameterGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDBClusterParameterGroup cancelled", ctx.Err())
	default:
		return d.DeleteDBClusterParameterGroup(in)
	}
}

func (d *RDSDouble) DeleteDBClusterRequest(i0 *rds.DeleteDBClusterInput) (r0 *request.Request, r1 *rds.DeleteDBClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DeleteDBClusterOutput)
	return
}

func (d *RDSDouble) DeleteDBClusterSnapshot(i0 *rds.DeleteDBClusterSnapshotInput) (r0 *rds.DeleteDBClusterSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBClusterSnapshot", i0)
	r0, _ = returns[0].(*rds.DeleteDBClusterSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DeleteDBClusterSnapshotRequest(i0 *rds.DeleteDBClusterSnapshotInput) (r0 *request.Request, r1 *rds.DeleteDBClusterSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBClusterSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DeleteDBClusterSnapshotOutput)
	return
}

func (d *RDSDouble) DeleteDBClusterSnapshotWithContext(i0 context.Context, i1 *rds.DeleteDBClusterSnapshotInput, i2 ...request.Option) (r0 *rds.DeleteDBClusterSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBClusterSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DeleteDBClusterSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDeleteDBClusterSnapshotWithContext(ctx context.Context, in *rds.DeleteDBClusterSnapshotInput, _ ...request.Option) (*rds.DeleteDBClusterSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDBClusterSnapshot cancelled", ctx.Err())
	default:
		return d.DeleteDBClusterSnapshot(in)
	}
}

func (d *RDSDouble) DeleteDBClusterWithContext(i0 context.Context, i1 *rds.DeleteDBClusterInput, i2 ...request.Option) (r0 *rds.DeleteDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DeleteDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDeleteDBClusterWithContext(ctx context.Context, in *rds.DeleteDBClusterInput, _ ...request.Option) (*rds.DeleteDBClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDBCluster cancelled", ctx.Err())
	default:
		return d.DeleteDBCluster(in)
	}
}

func (d *RDSDouble) DeleteDBInstance(i0 *rds.DeleteDBInstanceInput) (r0 *rds.DeleteDBInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBInstance", i0)
	r0, _ = returns[0].(*rds.DeleteDBInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DeleteDBInstanceAutomatedBackup(i0 *rds.DeleteDBInstanceAutomatedBackupInput) (r0 *rds.DeleteDBInstanceAutomatedBackupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBInstanceAutomatedBackup", i0)
	r0, _ = returns[0].(*rds.DeleteDBInstanceAutomatedBackupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DeleteDBInstanceAutomatedBackupRequest(i0 *rds.DeleteDBInstanceAutomatedBackupInput) (r0 *request.Request, r1 *rds.DeleteDBInstanceAutomatedBackupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBInstanceAutomatedBackupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DeleteDBInstanceAutomatedBackupOutput)
	return
}

func (d *RDSDouble) DeleteDBInstanceAutomatedBackupWithContext(i0 context.Context, i1 *rds.DeleteDBInstanceAutomatedBackupInput, i2 ...request.Option) (r0 *rds.DeleteDBInstanceAutomatedBackupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBInstanceAutomatedBackupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DeleteDBInstanceAutomatedBackupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDeleteDBInstanceAutomatedBackupWithContext(ctx context.Context, in *rds.DeleteDBInstanceAutomatedBackupInput, _ ...request.Option) (*rds.DeleteDBInstanceAutomatedBackupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDBInstanceAutomatedBackup cancelled", ctx.Err())
	default:
		return d.DeleteDBInstanceAutomatedBackup(in)
	}
}

func (d *RDSDouble) DeleteDBInstanceRequest(i0 *rds.DeleteDBInstanceInput) (r0 *request.Request, r1 *rds.DeleteDBInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DeleteDBInstanceOutput)
	return
}

func (d *RDSDouble) DeleteDBInstanceWithContext(i0 context.Context, i1 *rds.DeleteDBInstanceInput, i2 ...request.Option) (r0 *rds.DeleteDBInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DeleteDBInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDeleteDBInstanceWithContext(ctx context.Context, in *rds.DeleteDBInstanceInput, _ ...request.Option) (*rds.DeleteDBInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDBInstance cancelled", ctx.Err())
	default:
		return d.DeleteDBInstance(in)
	}
}

func (d *RDSDouble) DeleteDBParameterGroup(i0 *rds.DeleteDBParameterGroupInput) (r0 *rds.DeleteDBParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBParameterGroup", i0)
	r0, _ = returns[0].(*rds.DeleteDBParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DeleteDBParameterGroupRequest(i0 *rds.DeleteDBParameterGroupInput) (r0 *request.Request, r1 *rds.DeleteDBParameterGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBParameterGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DeleteDBParameterGroupOutput)
	return
}

func (d *RDSDouble) DeleteDBParameterGroupWithContext(i0 context.Context, i1 *rds.DeleteDBParameterGroupInput, i2 ...request.Option) (r0 *rds.DeleteDBParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBParameterGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DeleteDBParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDeleteDBParameterGroupWithContext(ctx context.Context, in *rds.DeleteDBParameterGroupInput, _ ...request.Option) (*rds.DeleteDBParameterGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDBParameterGroup cancelled", ctx.Err())
	default:
		return d.DeleteDBParameterGroup(in)
	}
}

func (d *RDSDouble) DeleteDBProxy(i0 *rds.DeleteDBProxyInput) (r0 *rds.DeleteDBProxyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBProxy", i0)
	r0, _ = returns[0].(*rds.DeleteDBProxyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DeleteDBProxyRequest(i0 *rds.DeleteDBProxyInput) (r0 *request.Request, r1 *rds.DeleteDBProxyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBProxyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DeleteDBProxyOutput)
	return
}

func (d *RDSDouble) DeleteDBProxyWithContext(i0 context.Context, i1 *rds.DeleteDBProxyInput, i2 ...request.Option) (r0 *rds.DeleteDBProxyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBProxyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DeleteDBProxyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDeleteDBProxyWithContext(ctx context.Context, in *rds.DeleteDBProxyInput, _ ...request.Option) (*rds.DeleteDBProxyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDBProxy cancelled", ctx.Err())
	default:
		return d.DeleteDBProxy(in)
	}
}

func (d *RDSDouble) DeleteDBSecurityGroup(i0 *rds.DeleteDBSecurityGroupInput) (r0 *rds.DeleteDBSecurityGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBSecurityGroup", i0)
	r0, _ = returns[0].(*rds.DeleteDBSecurityGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DeleteDBSecurityGroupRequest(i0 *rds.DeleteDBSecurityGroupInput) (r0 *request.Request, r1 *rds.DeleteDBSecurityGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBSecurityGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DeleteDBSecurityGroupOutput)
	return
}

func (d *RDSDouble) DeleteDBSecurityGroupWithContext(i0 context.Context, i1 *rds.DeleteDBSecurityGroupInput, i2 ...request.Option) (r0 *rds.DeleteDBSecurityGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBSecurityGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DeleteDBSecurityGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDeleteDBSecurityGroupWithContext(ctx context.Context, in *rds.DeleteDBSecurityGroupInput, _ ...request.Option) (*rds.DeleteDBSecurityGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDBSecurityGroup cancelled", ctx.Err())
	default:
		return d.DeleteDBSecurityGroup(in)
	}
}

func (d *RDSDouble) DeleteDBSnapshot(i0 *rds.DeleteDBSnapshotInput) (r0 *rds.DeleteDBSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBSnapshot", i0)
	r0, _ = returns[0].(*rds.DeleteDBSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DeleteDBSnapshotRequest(i0 *rds.DeleteDBSnapshotInput) (r0 *request.Request, r1 *rds.DeleteDBSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DeleteDBSnapshotOutput)
	return
}

func (d *RDSDouble) DeleteDBSnapshotWithContext(i0 context.Context, i1 *rds.DeleteDBSnapshotInput, i2 ...request.Option) (r0 *rds.DeleteDBSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DeleteDBSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDeleteDBSnapshotWithContext(ctx context.Context, in *rds.DeleteDBSnapshotInput, _ ...request.Option) (*rds.DeleteDBSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDBSnapshot cancelled", ctx.Err())
	default:
		return d.DeleteDBSnapshot(in)
	}
}

func (d *RDSDouble) DeleteDBSubnetGroup(i0 *rds.DeleteDBSubnetGroupInput) (r0 *rds.DeleteDBSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBSubnetGroup", i0)
	r0, _ = returns[0].(*rds.DeleteDBSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DeleteDBSubnetGroupRequest(i0 *rds.DeleteDBSubnetGroupInput) (r0 *request.Request, r1 *rds.DeleteDBSubnetGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBSubnetGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DeleteDBSubnetGroupOutput)
	return
}

func (d *RDSDouble) DeleteDBSubnetGroupWithContext(i0 context.Context, i1 *rds.DeleteDBSubnetGroupInput, i2 ...request.Option) (r0 *rds.DeleteDBSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBSubnetGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DeleteDBSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDeleteDBSubnetGroupWithContext(ctx context.Context, in *rds.DeleteDBSubnetGroupInput, _ ...request.Option) (*rds.DeleteDBSubnetGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDBSubnetGroup cancelled", ctx.Err())
	default:
		return d.DeleteDBSubnetGroup(in)
	}
}

func (d *RDSDouble) DeleteEventSubscription(i0 *rds.DeleteEventSubscriptionInput) (r0 *rds.DeleteEventSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEventSubscription", i0)
	r0, _ = returns[0].(*rds.DeleteEventSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DeleteEventSubscriptionRequest(i0 *rds.DeleteEventSubscriptionInput) (r0 *request.Request, r1 *rds.DeleteEventSubscriptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEventSubscriptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DeleteEventSubscriptionOutput)
	return
}

func (d *RDSDouble) DeleteEventSubscriptionWithContext(i0 context.Context, i1 *rds.DeleteEventSubscriptionInput, i2 ...request.Option) (r0 *rds.DeleteEventSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEventSubscriptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DeleteEventSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDeleteEventSubscriptionWithContext(ctx context.Context, in *rds.DeleteEventSubscriptionInput, _ ...request.Option) (*rds.DeleteEventSubscriptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteEventSubscription cancelled", ctx.Err())
	default:
		return d.DeleteEventSubscription(in)
	}
}

func (d *RDSDouble) DeleteGlobalCluster(i0 *rds.DeleteGlobalClusterInput) (r0 *rds.DeleteGlobalClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGlobalCluster", i0)
	r0, _ = returns[0].(*rds.DeleteGlobalClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DeleteGlobalClusterRequest(i0 *rds.DeleteGlobalClusterInput) (r0 *request.Request, r1 *rds.DeleteGlobalClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGlobalClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DeleteGlobalClusterOutput)
	return
}

func (d *RDSDouble) DeleteGlobalClusterWithContext(i0 context.Context, i1 *rds.DeleteGlobalClusterInput, i2 ...request.Option) (r0 *rds.DeleteGlobalClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGlobalClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DeleteGlobalClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDeleteGlobalClusterWithContext(ctx context.Context, in *rds.DeleteGlobalClusterInput, _ ...request.Option) (*rds.DeleteGlobalClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteGlobalCluster cancelled", ctx.Err())
	default:
		return d.DeleteGlobalCluster(in)
	}
}

func (d *RDSDouble) DeleteInstallationMedia(i0 *rds.DeleteInstallationMediaInput) (r0 *rds.DeleteInstallationMediaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInstallationMedia", i0)
	r0, _ = returns[0].(*rds.DeleteInstallationMediaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DeleteInstallationMediaRequest(i0 *rds.DeleteInstallationMediaInput) (r0 *request.Request, r1 *rds.DeleteInstallationMediaOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInstallationMediaRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DeleteInstallationMediaOutput)
	return
}

func (d *RDSDouble) DeleteInstallationMediaWithContext(i0 context.Context, i1 *rds.DeleteInstallationMediaInput, i2 ...request.Option) (r0 *rds.DeleteInstallationMediaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInstallationMediaWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DeleteInstallationMediaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDeleteInstallationMediaWithContext(ctx context.Context, in *rds.DeleteInstallationMediaInput, _ ...request.Option) (*rds.DeleteInstallationMediaOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteInstallationMedia cancelled", ctx.Err())
	default:
		return d.DeleteInstallationMedia(in)
	}
}

func (d *RDSDouble) DeleteOptionGroup(i0 *rds.DeleteOptionGroupInput) (r0 *rds.DeleteOptionGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteOptionGroup", i0)
	r0, _ = returns[0].(*rds.DeleteOptionGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DeleteOptionGroupRequest(i0 *rds.DeleteOptionGroupInput) (r0 *request.Request, r1 *rds.DeleteOptionGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteOptionGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DeleteOptionGroupOutput)
	return
}

func (d *RDSDouble) DeleteOptionGroupWithContext(i0 context.Context, i1 *rds.DeleteOptionGroupInput, i2 ...request.Option) (r0 *rds.DeleteOptionGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteOptionGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DeleteOptionGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDeleteOptionGroupWithContext(ctx context.Context, in *rds.DeleteOptionGroupInput, _ ...request.Option) (*rds.DeleteOptionGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteOptionGroup cancelled", ctx.Err())
	default:
		return d.DeleteOptionGroup(in)
	}
}

func (d *RDSDouble) DeregisterDBProxyTargets(i0 *rds.DeregisterDBProxyTargetsInput) (r0 *rds.DeregisterDBProxyTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterDBProxyTargets", i0)
	r0, _ = returns[0].(*rds.DeregisterDBProxyTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DeregisterDBProxyTargetsRequest(i0 *rds.DeregisterDBProxyTargetsInput) (r0 *request.Request, r1 *rds.DeregisterDBProxyTargetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterDBProxyTargetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DeregisterDBProxyTargetsOutput)
	return
}

func (d *RDSDouble) DeregisterDBProxyTargetsWithContext(i0 context.Context, i1 *rds.DeregisterDBProxyTargetsInput, i2 ...request.Option) (r0 *rds.DeregisterDBProxyTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterDBProxyTargetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DeregisterDBProxyTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDeregisterDBProxyTargetsWithContext(ctx context.Context, in *rds.DeregisterDBProxyTargetsInput, _ ...request.Option) (*rds.DeregisterDBProxyTargetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeregisterDBProxyTargets cancelled", ctx.Err())
	default:
		return d.DeregisterDBProxyTargets(in)
	}
}

func (d *RDSDouble) DescribeAccountAttributes(i0 *rds.DescribeAccountAttributesInput) (r0 *rds.DescribeAccountAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAccountAttributes", i0)
	r0, _ = returns[0].(*rds.DescribeAccountAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeAccountAttributesRequest(i0 *rds.DescribeAccountAttributesInput) (r0 *request.Request, r1 *rds.DescribeAccountAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAccountAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeAccountAttributesOutput)
	return
}

func (d *RDSDouble) DescribeAccountAttributesWithContext(i0 context.Context, i1 *rds.DescribeAccountAttributesInput, i2 ...request.Option) (r0 *rds.DescribeAccountAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAccountAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeAccountAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeAccountAttributesWithContext(ctx context.Context, in *rds.DescribeAccountAttributesInput, _ ...request.Option) (*rds.DescribeAccountAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAccountAttributes cancelled", ctx.Err())
	default:
		return d.DescribeAccountAttributes(in)
	}
}

func (d *RDSDouble) DescribeCertificates(i0 *rds.DescribeCertificatesInput) (r0 *rds.DescribeCertificatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCertificates", i0)
	r0, _ = returns[0].(*rds.DescribeCertificatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeCertificatesRequest(i0 *rds.DescribeCertificatesInput) (r0 *request.Request, r1 *rds.DescribeCertificatesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCertificatesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeCertificatesOutput)
	return
}

func (d *RDSDouble) DescribeCertificatesWithContext(i0 context.Context, i1 *rds.DescribeCertificatesInput, i2 ...request.Option) (r0 *rds.DescribeCertificatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCertificatesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeCertificatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeCertificatesWithContext(ctx context.Context, in *rds.DescribeCertificatesInput, _ ...request.Option) (*rds.DescribeCertificatesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeCertificates cancelled", ctx.Err())
	default:
		return d.DescribeCertificates(in)
	}
}

func (d *RDSDouble) DescribeCustomAvailabilityZones(i0 *rds.DescribeCustomAvailabilityZonesInput) (r0 *rds.DescribeCustomAvailabilityZonesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCustomAvailabilityZones", i0)
	r0, _ = returns[0].(*rds.DescribeCustomAvailabilityZonesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeCustomAvailabilityZonesPages(i0 *rds.DescribeCustomAvailabilityZonesInput, i1 func(*rds.DescribeCustomAvailabilityZonesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCustomAvailabilityZonesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeCustomAvailabilityZonesPages(in *rds.DescribeCustomAvailabilityZonesInput, pager func(*rds.DescribeCustomAvailabilityZonesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeCustomAvailabilityZones", paginators, in, pager)
}

func (d *RDSDouble) DescribeCustomAvailabilityZonesPagesWithContext(i0 context.Context, i1 *rds.DescribeCustomAvailabilityZonesInput, i2 func(*rds.DescribeCustomAvailabilityZonesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCustomAvailabilityZonesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeCustomAvailabilityZonesPagesWithContext(ctx context.Context, in *rds.DescribeCustomAvailabilityZonesInput, pager func(*rds.DescribeCustomAvailabilityZonesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeCustomAvailabilityZones", paginators, ctx, in, pager, options...)
}

func (d *RDSDouble) DescribeCustomAvailabilityZonesRequest(i0 *rds.DescribeCustomAvailabilityZonesInput) (r0 *request.Request, r1 *rds.DescribeCustomAvailabilityZonesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCustomAvailabilityZonesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeCustomAvailabilityZonesOutput)
	return
}

func (d *RDSDouble) DescribeCustomAvailabilityZonesWithContext(i0 context.Context, i1 *rds.DescribeCustomAvailabilityZonesInput, i2 ...request.Option) (r0 *rds.DescribeCustomAvailabilityZonesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCustomAvailabilityZonesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeCustomAvailabilityZonesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeCustomAvailabilityZonesWithContext(ctx context.Context, in *rds.DescribeCustomAvailabilityZonesInput, _ ...request.Option) (*rds.DescribeCustomAvailabilityZonesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeCustomAvailabilityZones cancelled", ctx.Err())
	default:
		return d.DescribeCustomAvailabilityZones(in)
	}
}

func (d *RDSDouble) DescribeDBClusterBacktracks(i0 *rds.DescribeDBClusterBacktracksInput) (r0 *rds.DescribeDBClusterBacktracksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterBacktracks", i0)
	r0, _ = returns[0].(*rds.DescribeDBClusterBacktracksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeDBClusterBacktracksRequest(i0 *rds.DescribeDBClusterBacktracksInput) (r0 *request.Request, r1 *rds.DescribeDBClusterBacktracksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterBacktracksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeDBClusterBacktracksOutput)
	return
}

func (d *RDSDouble) DescribeDBClusterBacktracksWithContext(i0 context.Context, i1 *rds.DescribeDBClusterBacktracksInput, i2 ...request.Option) (r0 *rds.DescribeDBClusterBacktracksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterBacktracksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeDBClusterBacktracksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBClusterBacktracksWithContext(ctx context.Context, in *rds.DescribeDBClusterBacktracksInput, _ ...request.Option) (*rds.DescribeDBClusterBacktracksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBClusterBacktracks cancelled", ctx.Err())
	default:
		return d.DescribeDBClusterBacktracks(in)
	}
}

func (d *RDSDouble) DescribeDBClusterEndpoints(i0 *rds.DescribeDBClusterEndpointsInput) (r0 *rds.DescribeDBClusterEndpointsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterEndpoints", i0)
	r0, _ = returns[0].(*rds.DescribeDBClusterEndpointsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeDBClusterEndpointsRequest(i0 *rds.DescribeDBClusterEndpointsInput) (r0 *request.Request, r1 *rds.DescribeDBClusterEndpointsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterEndpointsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeDBClusterEndpointsOutput)
	return
}

func (d *RDSDouble) DescribeDBClusterEndpointsWithContext(i0 context.Context, i1 *rds.DescribeDBClusterEndpointsInput, i2 ...request.Option) (r0 *rds.DescribeDBClusterEndpointsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterEndpointsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeDBClusterEndpointsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBClusterEndpointsWithContext(ctx context.Context, in *rds.DescribeDBClusterEndpointsInput, _ ...request.Option) (*rds.DescribeDBClusterEndpointsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBClusterEndpoints cancelled", ctx.Err())
	default:
		return d.DescribeDBClusterEndpoints(in)
	}
}

func (d *RDSDouble) DescribeDBClusterParameterGroups(i0 *rds.DescribeDBClusterParameterGroupsInput) (r0 *rds.DescribeDBClusterParameterGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterParameterGroups", i0)
	r0, _ = returns[0].(*rds.DescribeDBClusterParameterGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeDBClusterParameterGroupsRequest(i0 *rds.DescribeDBClusterParameterGroupsInput) (r0 *request.Request, r1 *rds.DescribeDBClusterParameterGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterParameterGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeDBClusterParameterGroupsOutput)
	return
}

func (d *RDSDouble) DescribeDBClusterParameterGroupsWithContext(i0 context.Context, i1 *rds.DescribeDBClusterParameterGroupsInput, i2 ...request.Option) (r0 *rds.DescribeDBClusterParameterGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterParameterGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeDBClusterParameterGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBClusterParameterGroupsWithContext(ctx context.Context, in *rds.DescribeDBClusterParameterGroupsInput, _ ...request.Option) (*rds.DescribeDBClusterParameterGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBClusterParameterGroups cancelled", ctx.Err())
	default:
		return d.DescribeDBClusterParameterGroups(in)
	}
}

func (d *RDSDouble) DescribeDBClusterParameters(i0 *rds.DescribeDBClusterParametersInput) (r0 *rds.DescribeDBClusterParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterParameters", i0)
	r0, _ = returns[0].(*rds.DescribeDBClusterParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeDBClusterParametersRequest(i0 *rds.DescribeDBClusterParametersInput) (r0 *request.Request, r1 *rds.DescribeDBClusterParametersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterParametersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeDBClusterParametersOutput)
	return
}

func (d *RDSDouble) DescribeDBClusterParametersWithContext(i0 context.Context, i1 *rds.DescribeDBClusterParametersInput, i2 ...request.Option) (r0 *rds.DescribeDBClusterParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterParametersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeDBClusterParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBClusterParametersWithContext(ctx context.Context, in *rds.DescribeDBClusterParametersInput, _ ...request.Option) (*rds.DescribeDBClusterParametersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBClusterParameters cancelled", ctx.Err())
	default:
		return d.DescribeDBClusterParameters(in)
	}
}

func (d *RDSDouble) DescribeDBClusterSnapshotAttributes(i0 *rds.DescribeDBClusterSnapshotAttributesInput) (r0 *rds.DescribeDBClusterSnapshotAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterSnapshotAttributes", i0)
	r0, _ = returns[0].(*rds.DescribeDBClusterSnapshotAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeDBClusterSnapshotAttributesRequest(i0 *rds.DescribeDBClusterSnapshotAttributesInput) (r0 *request.Request, r1 *rds.DescribeDBClusterSnapshotAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterSnapshotAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeDBClusterSnapshotAttributesOutput)
	return
}

func (d *RDSDouble) DescribeDBClusterSnapshotAttributesWithContext(i0 context.Context, i1 *rds.DescribeDBClusterSnapshotAttributesInput, i2 ...request.Option) (r0 *rds.DescribeDBClusterSnapshotAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterSnapshotAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeDBClusterSnapshotAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBClusterSnapshotAttributesWithContext(ctx context.Context, in *rds.DescribeDBClusterSnapshotAttributesInput, _ ...request.Option) (*rds.DescribeDBClusterSnapshotAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBClusterSnapshotAttributes cancelled", ctx.Err())
	default:
		return d.DescribeDBClusterSnapshotAttributes(in)
	}
}

func (d *RDSDouble) DescribeDBClusterSnapshots(i0 *rds.DescribeDBClusterSnapshotsInput) (r0 *rds.DescribeDBClusterSnapshotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterSnapshots", i0)
	r0, _ = returns[0].(*rds.DescribeDBClusterSnapshotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeDBClusterSnapshotsRequest(i0 *rds.DescribeDBClusterSnapshotsInput) (r0 *request.Request, r1 *rds.DescribeDBClusterSnapshotsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterSnapshotsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeDBClusterSnapshotsOutput)
	return
}

func (d *RDSDouble) DescribeDBClusterSnapshotsWithContext(i0 context.Context, i1 *rds.DescribeDBClusterSnapshotsInput, i2 ...request.Option) (r0 *rds.DescribeDBClusterSnapshotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterSnapshotsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeDBClusterSnapshotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBClusterSnapshotsWithContext(ctx context.Context, in *rds.DescribeDBClusterSnapshotsInput, _ ...request.Option) (*rds.DescribeDBClusterSnapshotsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBClusterSnapshots cancelled", ctx.Err())
	default:
		return d.DescribeDBClusterSnapshots(in)
	}
}

func (d *RDSDouble) DescribeDBClusters(i0 *rds.DescribeDBClustersInput) (r0 *rds.DescribeDBClustersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusters", i0)
	r0, _ = returns[0].(*rds.DescribeDBClustersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeDBClustersPages(i0 *rds.DescribeDBClustersInput, i1 func(*rds.DescribeDBClustersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClustersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBClustersPages(in *rds.DescribeDBClustersInput, pager func(*rds.DescribeDBClustersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeDBClusters", paginators, in, pager)
}

func (d *RDSDouble) DescribeDBClustersPagesWithContext(i0 context.Context, i1 *rds.DescribeDBClustersInput, i2 func(*rds.DescribeDBClustersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClustersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBClustersPagesWithContext(ctx context.Context, in *rds.DescribeDBClustersInput, pager func(*rds.DescribeDBClustersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeDBClusters", paginators, ctx, in, pager, options...)
}

func (d *RDSDouble) DescribeDBClustersRequest(i0 *rds.DescribeDBClustersInput) (r0 *request.Request, r1 *rds.DescribeDBClustersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClustersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeDBClustersOutput)
	return
}

func (d *RDSDouble) DescribeDBClustersWithContext(i0 context.Context, i1 *rds.DescribeDBClustersInput, i2 ...request.Option) (r0 *rds.DescribeDBClustersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClustersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeDBClustersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBClustersWithContext(ctx context.Context, in *rds.DescribeDBClustersInput, _ ...request.Option) (*rds.DescribeDBClustersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBClusters cancelled", ctx.Err())
	default:
		return d.DescribeDBClusters(in)
	}
}

func (d *RDSDouble) DescribeDBEngineVersions(i0 *rds.DescribeDBEngineVersionsInput) (r0 *rds.DescribeDBEngineVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBEngineVersions", i0)
	r0, _ = returns[0].(*rds.DescribeDBEngineVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeDBEngineVersionsPages(i0 *rds.DescribeDBEngineVersionsInput, i1 func(*rds.DescribeDBEngineVersionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBEngineVersionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBEngineVersionsPages(in *rds.DescribeDBEngineVersionsInput, pager func(*rds.DescribeDBEngineVersionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeDBEngineVersions", paginators, in, pager)
}

func (d *RDSDouble) DescribeDBEngineVersionsPagesWithContext(i0 context.Context, i1 *rds.DescribeDBEngineVersionsInput, i2 func(*rds.DescribeDBEngineVersionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBEngineVersionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBEngineVersionsPagesWithContext(ctx context.Context, in *rds.DescribeDBEngineVersionsInput, pager func(*rds.DescribeDBEngineVersionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeDBEngineVersions", paginators, ctx, in, pager, options...)
}

func (d *RDSDouble) DescribeDBEngineVersionsRequest(i0 *rds.DescribeDBEngineVersionsInput) (r0 *request.Request, r1 *rds.DescribeDBEngineVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBEngineVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeDBEngineVersionsOutput)
	return
}

func (d *RDSDouble) DescribeDBEngineVersionsWithContext(i0 context.Context, i1 *rds.DescribeDBEngineVersionsInput, i2 ...request.Option) (r0 *rds.DescribeDBEngineVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBEngineVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeDBEngineVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBEngineVersionsWithContext(ctx context.Context, in *rds.DescribeDBEngineVersionsInput, _ ...request.Option) (*rds.DescribeDBEngineVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBEngineVersions cancelled", ctx.Err())
	default:
		return d.DescribeDBEngineVersions(in)
	}
}

func (d *RDSDouble) DescribeDBInstanceAutomatedBackups(i0 *rds.DescribeDBInstanceAutomatedBackupsInput) (r0 *rds.DescribeDBInstanceAutomatedBackupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBInstanceAutomatedBackups", i0)
	r0, _ = returns[0].(*rds.DescribeDBInstanceAutomatedBackupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeDBInstanceAutomatedBackupsPages(i0 *rds.DescribeDBInstanceAutomatedBackupsInput, i1 func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBInstanceAutomatedBackupsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBInstanceAutomatedBackupsPages(in *rds.DescribeDBInstanceAutomatedBackupsInput, pager func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeDBInstanceAutomatedBackups", paginators, in, pager)
}

func (d *RDSDouble) DescribeDBInstanceAutomatedBackupsPagesWithContext(i0 context.Context, i1 *rds.DescribeDBInstanceAutomatedBackupsInput, i2 func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBInstanceAutomatedBackupsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBInstanceAutomatedBackupsPagesWithContext(ctx context.Context, in *rds.DescribeDBInstanceAutomatedBackupsInput, pager func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeDBInstanceAutomatedBackups", paginators, ctx, in, pager, options...)
}

func (d *RDSDouble) DescribeDBInstanceAutomatedBackupsRequest(i0 *rds.DescribeDBInstanceAutomatedBackupsInput) (r0 *request.Request, r1 *rds.DescribeDBInstanceAutomatedBackupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBInstanceAutomatedBackupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeDBInstanceAutomatedBackupsOutput)
	return
}

func (d *RDSDouble) DescribeDBInstanceAutomatedBackupsWithContext(i0 context.Context, i1 *rds.DescribeDBInstanceAutomatedBackupsInput, i2 ...request.Option) (r0 *rds.DescribeDBInstanceAutomatedBackupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBInstanceAutomatedBackupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeDBInstanceAutomatedBackupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBInstanceAutomatedBackupsWithContext(ctx context.Context, in *rds.DescribeDBInstanceAutomatedBackupsInput, _ ...request.Option) (*rds.DescribeDBInstanceAutomatedBackupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBInstanceAutomatedBackups cancelled", ctx.Err())
	default:
		return d.DescribeDBInstanceAutomatedBackups(in)
	}
}

func (d *RDSDouble) DescribeDBInstances(i0 *rds.DescribeDBInstancesInput) (r0 *rds.DescribeDBInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBInstances", i0)
	r0, _ = returns[0].(*rds.DescribeDBInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeDBInstancesPages(i0 *rds.DescribeDBInstancesInput, i1 func(*rds.DescribeDBInstancesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBInstancesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBInstancesPages(in *rds.DescribeDBInstancesInput, pager func(*rds.DescribeDBInstancesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeDBInstances", paginators, in, pager)
}

func (d *RDSDouble) DescribeDBInstancesPagesWithContext(i0 context.Context, i1 *rds.DescribeDBInstancesInput, i2 func(*rds.DescribeDBInstancesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBInstancesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBInstancesPagesWithContext(ctx context.Context, in *rds.DescribeDBInstancesInput, pager func(*rds.DescribeDBInstancesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeDBInstances", paginators, ctx, in, pager, options...)
}

func (d *RDSDouble) DescribeDBInstancesRequest(i0 *rds.DescribeDBInstancesInput) (r0 *request.Request, r1 *rds.DescribeDBInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeDBInstancesOutput)
	return
}

func (d *RDSDouble) DescribeDBInstancesWithContext(i0 context.Context, i1 *rds.DescribeDBInstancesInput, i2 ...request.Option) (r0 *rds.DescribeDBInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeDBInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBInstancesWithContext(ctx context.Context, in *rds.DescribeDBInstancesInput, _ ...request.Option) (*rds.DescribeDBInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBInstances cancelled", ctx.Err())
	default:
		return d.DescribeDBInstances(in)
	}
}

func (d *RDSDouble) DescribeDBLogFiles(i0 *rds.DescribeDBLogFilesInput) (r0 *rds.DescribeDBLogFilesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBLogFiles", i0)
	r0, _ = returns[0].(*rds.DescribeDBLogFilesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeDBLogFilesPages(i0 *rds.DescribeDBLogFilesInput, i1 func(*rds.DescribeDBLogFilesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBLogFilesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBLogFilesPages(in *rds.DescribeDBLogFilesInput, pager func(*rds.DescribeDBLogFilesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeDBLogFiles", paginators, in, pager)
}

func (d *RDSDouble) DescribeDBLogFilesPagesWithContext(i0 context.Context, i1 *rds.DescribeDBLogFilesInput, i2 func(*rds.DescribeDBLogFilesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBLogFilesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBLogFilesPagesWithContext(ctx context.Context, in *rds.DescribeDBLogFilesInput, pager func(*rds.DescribeDBLogFilesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeDBLogFiles", paginators, ctx, in, pager, options...)
}

func (d *RDSDouble) DescribeDBLogFilesRequest(i0 *rds.DescribeDBLogFilesInput) (r0 *request.Request, r1 *rds.DescribeDBLogFilesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBLogFilesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeDBLogFilesOutput)
	return
}

func (d *RDSDouble) DescribeDBLogFilesWithContext(i0 context.Context, i1 *rds.DescribeDBLogFilesInput, i2 ...request.Option) (r0 *rds.DescribeDBLogFilesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBLogFilesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeDBLogFilesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBLogFilesWithContext(ctx context.Context, in *rds.DescribeDBLogFilesInput, _ ...request.Option) (*rds.DescribeDBLogFilesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBLogFiles cancelled", ctx.Err())
	default:
		return d.DescribeDBLogFiles(in)
	}
}

func (d *RDSDouble) DescribeDBParameterGroups(i0 *rds.DescribeDBParameterGroupsInput) (r0 *rds.DescribeDBParameterGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBParameterGroups", i0)
	r0, _ = returns[0].(*rds.DescribeDBParameterGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeDBParameterGroupsPages(i0 *rds.DescribeDBParameterGroupsInput, i1 func(*rds.DescribeDBParameterGroupsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBParameterGroupsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBParameterGroupsPages(in *rds.DescribeDBParameterGroupsInput, pager func(*rds.DescribeDBParameterGroupsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeDBParameterGroups", paginators, in, pager)
}

func (d *RDSDouble) DescribeDBParameterGroupsPagesWithContext(i0 context.Context, i1 *rds.DescribeDBParameterGroupsInput, i2 func(*rds.DescribeDBParameterGroupsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBParameterGroupsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBParameterGroupsPagesWithContext(ctx context.Context, in *rds.DescribeDBParameterGroupsInput, pager func(*rds.DescribeDBParameterGroupsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeDBParameterGroups", paginators, ctx, in, pager, options...)
}

func (d *RDSDouble) DescribeDBParameterGroupsRequest(i0 *rds.DescribeDBParameterGroupsInput) (r0 *request.Request, r1 *rds.DescribeDBParameterGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBParameterGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeDBParameterGroupsOutput)
	return
}

func (d *RDSDouble) DescribeDBParameterGroupsWithContext(i0 context.Context, i1 *rds.DescribeDBParameterGroupsInput, i2 ...request.Option) (r0 *rds.DescribeDBParameterGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBParameterGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeDBParameterGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBParameterGroupsWithContext(ctx context.Context, in *rds.DescribeDBParameterGroupsInput, _ ...request.Option) (*rds.DescribeDBParameterGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBParameterGroups cancelled", ctx.Err())
	default:
		return d.DescribeDBParameterGroups(in)
	}
}

func (d *RDSDouble) DescribeDBParameters(i0 *rds.DescribeDBParametersInput) (r0 *rds.DescribeDBParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBParameters", i0)
	r0, _ = returns[0].(*rds.DescribeDBParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeDBParametersPages(i0 *rds.DescribeDBParametersInput, i1 func(*rds.DescribeDBParametersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBParametersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBParametersPages(in *rds.DescribeDBParametersInput, pager func(*rds.DescribeDBParametersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeDBParameters", paginators, in, pager)
}

func (d *RDSDouble) DescribeDBParametersPagesWithContext(i0 context.Context, i1 *rds.DescribeDBParametersInput, i2 func(*rds.DescribeDBParametersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBParametersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBParametersPagesWithContext(ctx context.Context, in *rds.DescribeDBParametersInput, pager func(*rds.DescribeDBParametersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeDBParameters", paginators, ctx, in, pager, options...)
}

func (d *RDSDouble) DescribeDBParametersRequest(i0 *rds.DescribeDBParametersInput) (r0 *request.Request, r1 *rds.DescribeDBParametersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBParametersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeDBParametersOutput)
	return
}

func (d *RDSDouble) DescribeDBParametersWithContext(i0 context.Context, i1 *rds.DescribeDBParametersInput, i2 ...request.Option) (r0 *rds.DescribeDBParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBParametersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeDBParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBParametersWithContext(ctx context.Context, in *rds.DescribeDBParametersInput, _ ...request.Option) (*rds.DescribeDBParametersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBParameters cancelled", ctx.Err())
	default:
		return d.DescribeDBParameters(in)
	}
}

func (d *RDSDouble) DescribeDBProxies(i0 *rds.DescribeDBProxiesInput) (r0 *rds.DescribeDBProxiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBProxies", i0)
	r0, _ = returns[0].(*rds.DescribeDBProxiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeDBProxiesPages(i0 *rds.DescribeDBProxiesInput, i1 func(*rds.DescribeDBProxiesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBProxiesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBProxiesPages(in *rds.DescribeDBProxiesInput, pager func(*rds.DescribeDBProxiesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeDBProxies", paginators, in, pager)
}

func (d *RDSDouble) DescribeDBProxiesPagesWithContext(i0 context.Context, i1 *rds.DescribeDBProxiesInput, i2 func(*rds.DescribeDBProxiesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBProxiesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBProxiesPagesWithContext(ctx context.Context, in *rds.DescribeDBProxiesInput, pager func(*rds.DescribeDBProxiesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeDBProxies", paginators, ctx, in, pager, options...)
}

func (d *RDSDouble) DescribeDBProxiesRequest(i0 *rds.DescribeDBProxiesInput) (r0 *request.Request, r1 *rds.DescribeDBProxiesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBProxiesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeDBProxiesOutput)
	return
}

func (d *RDSDouble) DescribeDBProxiesWithContext(i0 context.Context, i1 *rds.DescribeDBProxiesInput, i2 ...request.Option) (r0 *rds.DescribeDBProxiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBProxiesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeDBProxiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBProxiesWithContext(ctx context.Context, in *rds.DescribeDBProxiesInput, _ ...request.Option) (*rds.DescribeDBProxiesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBProxies cancelled", ctx.Err())
	default:
		return d.DescribeDBProxies(in)
	}
}

func (d *RDSDouble) DescribeDBProxyTargetGroups(i0 *rds.DescribeDBProxyTargetGroupsInput) (r0 *rds.DescribeDBProxyTargetGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBProxyTargetGroups", i0)
	r0, _ = returns[0].(*rds.DescribeDBProxyTargetGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeDBProxyTargetGroupsPages(i0 *rds.DescribeDBProxyTargetGroupsInput, i1 func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBProxyTargetGroupsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBProxyTargetGroupsPages(in *rds.DescribeDBProxyTargetGroupsInput, pager func(*rds.DescribeDBProxyTargetGroupsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeDBProxyTargetGroups", paginators, in, pager)
}

func (d *RDSDouble) DescribeDBProxyTargetGroupsPagesWithContext(i0 context.Context, i1 *rds.DescribeDBProxyTargetGroupsInput, i2 func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBProxyTargetGroupsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBProxyTargetGroupsPagesWithContext(ctx context.Context, in *rds.DescribeDBProxyTargetGroupsInput, pager func(*rds.DescribeDBProxyTargetGroupsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeDBProxyTargetGroups", paginators, ctx, in, pager, options...)
}

func (d *RDSDouble) DescribeDBProxyTargetGroupsRequest(i0 *rds.DescribeDBProxyTargetGroupsInput) (r0 *request.Request, r1 *rds.DescribeDBProxyTargetGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBProxyTargetGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeDBProxyTargetGroupsOutput)
	return
}

func (d *RDSDouble) DescribeDBProxyTargetGroupsWithContext(i0 context.Context, i1 *rds.DescribeDBProxyTargetGroupsInput, i2 ...request.Option) (r0 *rds.DescribeDBProxyTargetGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBProxyTargetGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeDBProxyTargetGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBProxyTargetGroupsWithContext(ctx context.Context, in *rds.DescribeDBProxyTargetGroupsInput, _ ...request.Option) (*rds.DescribeDBProxyTargetGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBProxyTargetGroups cancelled", ctx.Err())
	default:
		return d.DescribeDBProxyTargetGroups(in)
	}
}

func (d *RDSDouble) DescribeDBProxyTargets(i0 *rds.DescribeDBProxyTargetsInput) (r0 *rds.DescribeDBProxyTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBProxyTargets", i0)
	r0, _ = returns[0].(*rds.DescribeDBProxyTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeDBProxyTargetsPages(i0 *rds.DescribeDBProxyTargetsInput, i1 func(*rds.DescribeDBProxyTargetsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBProxyTargetsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBProxyTargetsPages(in *rds.DescribeDBProxyTargetsInput, pager func(*rds.DescribeDBProxyTargetsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeDBProxyTargets", paginators, in, pager)
}

func (d *RDSDouble) DescribeDBProxyTargetsPagesWithContext(i0 context.Context, i1 *rds.DescribeDBProxyTargetsInput, i2 func(*rds.DescribeDBProxyTargetsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBProxyTargetsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBProxyTargetsPagesWithContext(ctx context.Context, in *rds.DescribeDBProxyTargetsInput, pager func(*rds.DescribeDBProxyTargetsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeDBProxyTargets", paginators, ctx, in, pager, options...)
}

func (d *RDSDouble) DescribeDBProxyTargetsRequest(i0 *rds.DescribeDBProxyTargetsInput) (r0 *request.Request, r1 *rds.DescribeDBProxyTargetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBProxyTargetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeDBProxyTargetsOutput)
	return
}

func (d *RDSDouble) DescribeDBProxyTargetsWithContext(i0 context.Context, i1 *rds.DescribeDBProxyTargetsInput, i2 ...request.Option) (r0 *rds.DescribeDBProxyTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBProxyTargetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeDBProxyTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBProxyTargetsWithContext(ctx context.Context, in *rds.DescribeDBProxyTargetsInput, _ ...request.Option) (*rds.DescribeDBProxyTargetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBProxyTargets cancelled", ctx.Err())
	default:
		return d.DescribeDBProxyTargets(in)
	}
}

func (d *RDSDouble) DescribeDBSecurityGroups(i0 *rds.DescribeDBSecurityGroupsInput) (r0 *rds.DescribeDBSecurityGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBSecurityGroups", i0)
	r0, _ = returns[0].(*rds.DescribeDBSecurityGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeDBSecurityGroupsPages(i0 *rds.DescribeDBSecurityGroupsInput, i1 func(*rds.DescribeDBSecurityGroupsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBSecurityGroupsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBSecurityGroupsPages(in *rds.DescribeDBSecurityGroupsInput, pager func(*rds.DescribeDBSecurityGroupsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeDBSecurityGroups", paginators, in, pager)
}

func (d *RDSDouble) DescribeDBSecurityGroupsPagesWithContext(i0 context.Context, i1 *rds.DescribeDBSecurityGroupsInput, i2 func(*rds.DescribeDBSecurityGroupsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBSecurityGroupsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBSecurityGroupsPagesWithContext(ctx context.Context, in *rds.DescribeDBSecurityGroupsInput, pager func(*rds.DescribeDBSecurityGroupsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeDBSecurityGroups", paginators, ctx, in, pager, options...)
}

func (d *RDSDouble) DescribeDBSecurityGroupsRequest(i0 *rds.DescribeDBSecurityGroupsInput) (r0 *request.Request, r1 *rds.DescribeDBSecurityGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBSecurityGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeDBSecurityGroupsOutput)
	return
}

func (d *RDSDouble) DescribeDBSecurityGroupsWithContext(i0 context.Context, i1 *rds.DescribeDBSecurityGroupsInput, i2 ...request.Option) (r0 *rds.DescribeDBSecurityGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBSecurityGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeDBSecurityGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBSecurityGroupsWithContext(ctx context.Context, in *rds.DescribeDBSecurityGroupsInput, _ ...request.Option) (*rds.DescribeDBSecurityGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBSecurityGroups cancelled", ctx.Err())
	default:
		return d.DescribeDBSecurityGroups(in)
	}
}

func (d *RDSDouble) DescribeDBSnapshotAttributes(i0 *rds.DescribeDBSnapshotAttributesInput) (r0 *rds.DescribeDBSnapshotAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBSnapshotAttributes", i0)
	r0, _ = returns[0].(*rds.DescribeDBSnapshotAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeDBSnapshotAttributesRequest(i0 *rds.DescribeDBSnapshotAttributesInput) (r0 *request.Request, r1 *rds.DescribeDBSnapshotAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBSnapshotAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeDBSnapshotAttributesOutput)
	return
}

func (d *RDSDouble) DescribeDBSnapshotAttributesWithContext(i0 context.Context, i1 *rds.DescribeDBSnapshotAttributesInput, i2 ...request.Option) (r0 *rds.DescribeDBSnapshotAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBSnapshotAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeDBSnapshotAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBSnapshotAttributesWithContext(ctx context.Context, in *rds.DescribeDBSnapshotAttributesInput, _ ...request.Option) (*rds.DescribeDBSnapshotAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBSnapshotAttributes cancelled", ctx.Err())
	default:
		return d.DescribeDBSnapshotAttributes(in)
	}
}

func (d *RDSDouble) DescribeDBSnapshots(i0 *rds.DescribeDBSnapshotsInput) (r0 *rds.DescribeDBSnapshotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBSnapshots", i0)
	r0, _ = returns[0].(*rds.DescribeDBSnapshotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeDBSnapshotsPages(i0 *rds.DescribeDBSnapshotsInput, i1 func(*rds.DescribeDBSnapshotsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBSnapshotsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBSnapshotsPages(in *rds.DescribeDBSnapshotsInput, pager func(*rds.DescribeDBSnapshotsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeDBSnapshots", paginators, in, pager)
}

func (d *RDSDouble) DescribeDBSnapshotsPagesWithContext(i0 context.Context, i1 *rds.DescribeDBSnapshotsInput, i2 func(*rds.DescribeDBSnapshotsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBSnapshotsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBSnapshotsPagesWithContext(ctx context.Context, in *rds.DescribeDBSnapshotsInput, pager func(*rds.DescribeDBSnapshotsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeDBSnapshots", paginators, ctx, in, pager, options...)
}

func (d *RDSDouble) DescribeDBSnapshotsRequest(i0 *rds.DescribeDBSnapshotsInput) (r0 *request.Request, r1 *rds.DescribeDBSnapshotsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBSnapshotsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeDBSnapshotsOutput)
	return
}

func (d *RDSDouble) DescribeDBSnapshotsWithContext(i0 context.Context, i1 *rds.DescribeDBSnapshotsInput, i2 ...request.Option) (r0 *rds.DescribeDBSnapshotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBSnapshotsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeDBSnapshotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBSnapshotsWithContext(ctx context.Context, in *rds.DescribeDBSnapshotsInput, _ ...request.Option) (*rds.DescribeDBSnapshotsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBSnapshots cancelled", ctx.Err())
	default:
		return d.DescribeDBSnapshots(in)
	}
}

func (d *RDSDouble) DescribeDBSubnetGroups(i0 *rds.DescribeDBSubnetGroupsInput) (r0 *rds.DescribeDBSubnetGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBSubnetGroups", i0)
	r0, _ = returns[0].(*rds.DescribeDBSubnetGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeDBSubnetGroupsPages(i0 *rds.DescribeDBSubnetGroupsInput, i1 func(*rds.DescribeDBSubnetGroupsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBSubnetGroupsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBSubnetGroupsPages(in *rds.DescribeDBSubnetGroupsInput, pager func(*rds.DescribeDBSubnetGroupsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeDBSubnetGroups", paginators, in, pager)
}

func (d *RDSDouble) DescribeDBSubnetGroupsPagesWithContext(i0 context.Context, i1 *rds.DescribeDBSubnetGroupsInput, i2 func(*rds.DescribeDBSubnetGroupsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBSubnetGroupsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBSubnetGroupsPagesWithContext(ctx context.Context, in *rds.DescribeDBSubnetGroupsInput, pager func(*rds.DescribeDBSubnetGroupsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeDBSubnetGroups", paginators, ctx, in, pager, options...)
}

func (d *RDSDouble) DescribeDBSubnetGroupsRequest(i0 *rds.DescribeDBSubnetGroupsInput) (r0 *request.Request, r1 *rds.DescribeDBSubnetGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBSubnetGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeDBSubnetGroupsOutput)
	return
}

func (d *RDSDouble) DescribeDBSubnetGroupsWithContext(i0 context.Context, i1 *rds.DescribeDBSubnetGroupsInput, i2 ...request.Option) (r0 *rds.DescribeDBSubnetGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBSubnetGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeDBSubnetGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeDBSubnetGroupsWithContext(ctx context.Context, in *rds.DescribeDBSubnetGroupsInput, _ ...request.Option) (*rds.DescribeDBSubnetGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBSubnetGroups cancelled", ctx.Err())
	default:
		return d.DescribeDBSubnetGroups(in)
	}
}

func (d *RDSDouble) DescribeEngineDefaultClusterParameters(i0 *rds.DescribeEngineDefaultClusterParametersInput) (r0 *rds.DescribeEngineDefaultClusterParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEngineDefaultClusterParameters", i0)
	r0, _ = returns[0].(*rds.DescribeEngineDefaultClusterParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeEngineDefaultClusterParametersRequest(i0 *rds.DescribeEngineDefaultClusterParametersInput) (r0 *request.Request, r1 *rds.DescribeEngineDefaultClusterParametersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEngineDefaultClusterParametersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeEngineDefaultClusterParametersOutput)
	return
}

func (d *RDSDouble) DescribeEngineDefaultClusterParametersWithContext(i0 context.Context, i1 *rds.DescribeEngineDefaultClusterParametersInput, i2 ...request.Option) (r0 *rds.DescribeEngineDefaultClusterParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEngineDefaultClusterParametersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeEngineDefaultClusterParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeEngineDefaultClusterParametersWithContext(ctx context.Context, in *rds.DescribeEngineDefaultClusterParametersInput, _ ...request.Option) (*rds.DescribeEngineDefaultClusterParametersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEngineDefaultClusterParameters cancelled", ctx.Err())
	default:
		return d.DescribeEngineDefaultClusterParameters(in)
	}
}

func (d *RDSDouble) DescribeEngineDefaultParameters(i0 *rds.DescribeEngineDefaultParametersInput) (r0 *rds.DescribeEngineDefaultParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEngineDefaultParameters", i0)
	r0, _ = returns[0].(*rds.DescribeEngineDefaultParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeEngineDefaultParametersPages(i0 *rds.DescribeEngineDefaultParametersInput, i1 func(*rds.DescribeEngineDefaultParametersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEngineDefaultParametersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeEngineDefaultParametersPages(in *rds.DescribeEngineDefaultParametersInput, pager func(*rds.DescribeEngineDefaultParametersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeEngineDefaultParameters", paginators, in, pager)
}

func (d *RDSDouble) DescribeEngineDefaultParametersPagesWithContext(i0 context.Context, i1 *rds.DescribeEngineDefaultParametersInput, i2 func(*rds.DescribeEngineDefaultParametersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEngineDefaultParametersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeEngineDefaultParametersPagesWithContext(ctx context.Context, in *rds.DescribeEngineDefaultParametersInput, pager func(*rds.DescribeEngineDefaultParametersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeEngineDefaultParameters", paginators, ctx, in, pager, options...)
}

func (d *RDSDouble) DescribeEngineDefaultParametersRequest(i0 *rds.DescribeEngineDefaultParametersInput) (r0 *request.Request, r1 *rds.DescribeEngineDefaultParametersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEngineDefaultParametersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeEngineDefaultParametersOutput)
	return
}

func (d *RDSDouble) DescribeEngineDefaultParametersWithContext(i0 context.Context, i1 *rds.DescribeEngineDefaultParametersInput, i2 ...request.Option) (r0 *rds.DescribeEngineDefaultParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEngineDefaultParametersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeEngineDefaultParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeEngineDefaultParametersWithContext(ctx context.Context, in *rds.DescribeEngineDefaultParametersInput, _ ...request.Option) (*rds.DescribeEngineDefaultParametersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEngineDefaultParameters cancelled", ctx.Err())
	default:
		return d.DescribeEngineDefaultParameters(in)
	}
}

func (d *RDSDouble) DescribeEventCategories(i0 *rds.DescribeEventCategoriesInput) (r0 *rds.DescribeEventCategoriesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventCategories", i0)
	r0, _ = returns[0].(*rds.DescribeEventCategoriesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeEventCategoriesRequest(i0 *rds.DescribeEventCategoriesInput) (r0 *request.Request, r1 *rds.DescribeEventCategoriesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventCategoriesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeEventCategoriesOutput)
	return
}

func (d *RDSDouble) DescribeEventCategoriesWithContext(i0 context.Context, i1 *rds.DescribeEventCategoriesInput, i2 ...request.Option) (r0 *rds.DescribeEventCategoriesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventCategoriesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeEventCategoriesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeEventCategoriesWithContext(ctx context.Context, in *rds.DescribeEventCategoriesInput, _ ...request.Option) (*rds.DescribeEventCategoriesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEventCategories cancelled", ctx.Err())
	default:
		return d.DescribeEventCategories(in)
	}
}

func (d *RDSDouble) DescribeEventSubscriptions(i0 *rds.DescribeEventSubscriptionsInput) (r0 *rds.DescribeEventSubscriptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventSubscriptions", i0)
	r0, _ = returns[0].(*rds.DescribeEventSubscriptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeEventSubscriptionsPages(i0 *rds.DescribeEventSubscriptionsInput, i1 func(*rds.DescribeEventSubscriptionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventSubscriptionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeEventSubscriptionsPages(in *rds.DescribeEventSubscriptionsInput, pager func(*rds.DescribeEventSubscriptionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeEventSubscriptions", paginators, in, pager)
}

func (d *RDSDouble) DescribeEventSubscriptionsPagesWithContext(i0 context.Context, i1 *rds.DescribeEventSubscriptionsInput, i2 func(*rds.DescribeEventSubscriptionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventSubscriptionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeEventSubscriptionsPagesWithContext(ctx context.Context, in *rds.DescribeEventSubscriptionsInput, pager func(*rds.DescribeEventSubscriptionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeEventSubscriptions", paginators, ctx, in, pager, options...)
}

func (d *RDSDouble) DescribeEventSubscriptionsRequest(i0 *rds.DescribeEventSubscriptionsInput) (r0 *request.Request, r1 *rds.DescribeEventSubscriptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventSubscriptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeEventSubscriptionsOutput)
	return
}

func (d *RDSDouble) DescribeEventSubscriptionsWithContext(i0 context.Context, i1 *rds.DescribeEventSubscriptionsInput, i2 ...request.Option) (r0 *rds.DescribeEventSubscriptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventSubscriptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeEventSubscriptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeEventSubscriptionsWithContext(ctx context.Context, in *rds.DescribeEventSubscriptionsInput, _ ...request.Option) (*rds.DescribeEventSubscriptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEventSubscriptions cancelled", ctx.Err())
	default:
		return d.DescribeEventSubscriptions(in)
	}
}

func (d *RDSDouble) DescribeEvents(i0 *rds.DescribeEventsInput) (r0 *rds.DescribeEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEvents", i0)
	r0, _ = returns[0].(*rds.DescribeEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeEventsPages(i0 *rds.DescribeEventsInput, i1 func(*rds.DescribeEventsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeEventsPages(in *rds.DescribeEventsInput, pager func(*rds.DescribeEventsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeEvents", paginators, in, pager)
}

func (d *RDSDouble) DescribeEventsPagesWithContext(i0 context.Context, i1 *rds.DescribeEventsInput, i2 func(*rds.DescribeEventsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeEventsPagesWithContext(ctx context.Context, in *rds.DescribeEventsInput, pager func(*rds.DescribeEventsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeEvents", paginators, ctx, in, pager, options...)
}

func (d *RDSDouble) DescribeEventsRequest(i0 *rds.DescribeEventsInput) (r0 *request.Request, r1 *rds.DescribeEventsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeEventsOutput)
	return
}

func (d *RDSDouble) DescribeEventsWithContext(i0 context.Context, i1 *rds.DescribeEventsInput, i2 ...request.Option) (r0 *rds.DescribeEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeEventsWithContext(ctx context.Context, in *rds.DescribeEventsInput, _ ...request.Option) (*rds.DescribeEventsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEvents cancelled", ctx.Err())
	default:
		return d.DescribeEvents(in)
	}
}

func (d *RDSDouble) DescribeExportTasks(i0 *rds.DescribeExportTasksInput) (r0 *rds.DescribeExportTasksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeExportTasks", i0)
	r0, _ = returns[0].(*rds.DescribeExportTasksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeExportTasksPages(i0 *rds.DescribeExportTasksInput, i1 func(*rds.DescribeExportTasksOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeExportTasksPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeExportTasksPages(in *rds.DescribeExportTasksInput, pager func(*rds.DescribeExportTasksOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeExportTasks", paginators, in, pager)
}

func (d *RDSDouble) DescribeExportTasksPagesWithContext(i0 context.Context, i1 *rds.DescribeExportTasksInput, i2 func(*rds.DescribeExportTasksOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeExportTasksPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeExportTasksPagesWithContext(ctx context.Context, in *rds.DescribeExportTasksInput, pager func(*rds.DescribeExportTasksOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeExportTasks", paginators, ctx, in, pager, options...)
}

func (d *RDSDouble) DescribeExportTasksRequest(i0 *rds.DescribeExportTasksInput) (r0 *request.Request, r1 *rds.DescribeExportTasksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeExportTasksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeExportTasksOutput)
	return
}

func (d *RDSDouble) DescribeExportTasksWithContext(i0 context.Context, i1 *rds.DescribeExportTasksInput, i2 ...request.Option) (r0 *rds.DescribeExportTasksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeExportTasksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeExportTasksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeExportTasksWithContext(ctx context.Context, in *rds.DescribeExportTasksInput, _ ...request.Option) (*rds.DescribeExportTasksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeExportTasks cancelled", ctx.Err())
	default:
		return d.DescribeExportTasks(in)
	}
}

func (d *RDSDouble) DescribeGlobalClusters(i0 *rds.DescribeGlobalClustersInput) (r0 *rds.DescribeGlobalClustersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGlobalClusters", i0)
	r0, _ = returns[0].(*rds.DescribeGlobalClustersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeGlobalClustersPages(i0 *rds.DescribeGlobalClustersInput, i1 func(*rds.DescribeGlobalClustersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGlobalClustersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeGlobalClustersPages(in *rds.DescribeGlobalClustersInput, pager func(*rds.DescribeGlobalClustersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeGlobalClusters", paginators, in, pager)
}

func (d *RDSDouble) DescribeGlobalClustersPagesWithContext(i0 context.Context, i1 *rds.DescribeGlobalClustersInput, i2 func(*rds.DescribeGlobalClustersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGlobalClustersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeGlobalClustersPagesWithContext(ctx context.Context, in *rds.DescribeGlobalClustersInput, pager func(*rds.DescribeGlobalClustersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeGlobalClusters", paginators, ctx, in, pager, options...)
}

func (d *RDSDouble) DescribeGlobalClustersRequest(i0 *rds.DescribeGlobalClustersInput) (r0 *request.Request, r1 *rds.DescribeGlobalClustersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGlobalClustersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeGlobalClustersOutput)
	return
}

func (d *RDSDouble) DescribeGlobalClustersWithContext(i0 context.Context, i1 *rds.DescribeGlobalClustersInput, i2 ...request.Option) (r0 *rds.DescribeGlobalClustersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGlobalClustersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeGlobalClustersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeGlobalClustersWithContext(ctx context.Context, in *rds.DescribeGlobalClustersInput, _ ...request.Option) (*rds.DescribeGlobalClustersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeGlobalClusters cancelled", ctx.Err())
	default:
		return d.DescribeGlobalClusters(in)
	}
}

func (d *RDSDouble) DescribeInstallationMedia(i0 *rds.DescribeInstallationMediaInput) (r0 *rds.DescribeInstallationMediaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstallationMedia", i0)
	r0, _ = returns[0].(*rds.DescribeInstallationMediaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeInstallationMediaPages(i0 *rds.DescribeInstallationMediaInput, i1 func(*rds.DescribeInstallationMediaOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstallationMediaPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeInstallationMediaPages(in *rds.DescribeInstallationMediaInput, pager func(*rds.DescribeInstallationMediaOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeInstallationMedia", paginators, in, pager)
}

func (d *RDSDouble) DescribeInstallationMediaPagesWithContext(i0 context.Context, i1 *rds.DescribeInstallationMediaInput, i2 func(*rds.DescribeInstallationMediaOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstallationMediaPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeInstallationMediaPagesWithContext(ctx context.Context, in *rds.DescribeInstallationMediaInput, pager func(*rds.DescribeInstallationMediaOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeInstallationMedia", paginators, ctx, in, pager, options...)
}

func (d *RDSDouble) DescribeInstallationMediaRequest(i0 *rds.DescribeInstallationMediaInput) (r0 *request.Request, r1 *rds.DescribeInstallationMediaOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstallationMediaRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeInstallationMediaOutput)
	return
}

func (d *RDSDouble) DescribeInstallationMediaWithContext(i0 context.Context, i1 *rds.DescribeInstallationMediaInput, i2 ...request.Option) (r0 *rds.DescribeInstallationMediaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstallationMediaWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeInstallationMediaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeInstallationMediaWithContext(ctx context.Context, in *rds.DescribeInstallationMediaInput, _ ...request.Option) (*rds.DescribeInstallationMediaOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeInstallationMedia cancelled", ctx.Err())
	default:
		return d.DescribeInstallationMedia(in)
	}
}

func (d *RDSDouble) DescribeOptionGroupOptions(i0 *rds.DescribeOptionGroupOptionsInput) (r0 *rds.DescribeOptionGroupOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOptionGroupOptions", i0)
	r0, _ = returns[0].(*rds.DescribeOptionGroupOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeOptionGroupOptionsPages(i0 *rds.DescribeOptionGroupOptionsInput, i1 func(*rds.DescribeOptionGroupOptionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOptionGroupOptionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeOptionGroupOptionsPages(in *rds.DescribeOptionGroupOptionsInput, pager func(*rds.DescribeOptionGroupOptionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeOptionGroupOptions", paginators, in, pager)
}

func (d *RDSDouble) DescribeOptionGroupOptionsPagesWithContext(i0 context.Context, i1 *rds.DescribeOptionGroupOptionsInput, i2 func(*rds.DescribeOptionGroupOptionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOptionGroupOptionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeOptionGroupOptionsPagesWithContext(ctx context.Context, in *rds.DescribeOptionGroupOptionsInput, pager func(*rds.DescribeOptionGroupOptionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeOptionGroupOptions", paginators, ctx, in, pager, options...)
}

func (d *RDSDouble) DescribeOptionGroupOptionsRequest(i0 *rds.DescribeOptionGroupOptionsInput) (r0 *request.Request, r1 *rds.DescribeOptionGroupOptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOptionGroupOptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeOptionGroupOptionsOutput)
	return
}

func (d *RDSDouble) DescribeOptionGroupOptionsWithContext(i0 context.Context, i1 *rds.DescribeOptionGroupOptionsInput, i2 ...request.Option) (r0 *rds.DescribeOptionGroupOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOptionGroupOptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeOptionGroupOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeOptionGroupOptionsWithContext(ctx context.Context, in *rds.DescribeOptionGroupOptionsInput, _ ...request.Option) (*rds.DescribeOptionGroupOptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeOptionGroupOptions cancelled", ctx.Err())
	default:
		return d.DescribeOptionGroupOptions(in)
	}
}

func (d *RDSDouble) DescribeOptionGroups(i0 *rds.DescribeOptionGroupsInput) (r0 *rds.DescribeOptionGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOptionGroups", i0)
	r0, _ = returns[0].(*rds.DescribeOptionGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeOptionGroupsPages(i0 *rds.DescribeOptionGroupsInput, i1 func(*rds.DescribeOptionGroupsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOptionGroupsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeOptionGroupsPages(in *rds.DescribeOptionGroupsInput, pager func(*rds.DescribeOptionGroupsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeOptionGroups", paginators, in, pager)
}

func (d *RDSDouble) DescribeOptionGroupsPagesWithContext(i0 context.Context, i1 *rds.DescribeOptionGroupsInput, i2 func(*rds.DescribeOptionGroupsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOptionGroupsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeOptionGroupsPagesWithContext(ctx context.Context, in *rds.DescribeOptionGroupsInput, pager func(*rds.DescribeOptionGroupsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeOptionGroups", paginators, ctx, in, pager, options...)
}

func (d *RDSDouble) DescribeOptionGroupsRequest(i0 *rds.DescribeOptionGroupsInput) (r0 *request.Request, r1 *rds.DescribeOptionGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOptionGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeOptionGroupsOutput)
	return
}

func (d *RDSDouble) DescribeOptionGroupsWithContext(i0 context.Context, i1 *rds.DescribeOptionGroupsInput, i2 ...request.Option) (r0 *rds.DescribeOptionGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOptionGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeOptionGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeOptionGroupsWithContext(ctx context.Context, in *rds.DescribeOptionGroupsInput, _ ...request.Option) (*rds.DescribeOptionGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeOptionGroups cancelled", ctx.Err())
	default:
		return d.DescribeOptionGroups(in)
	}
}

func (d *RDSDouble) DescribeOrderableDBInstanceOptions(i0 *rds.DescribeOrderableDBInstanceOptionsInput) (r0 *rds.DescribeOrderableDBInstanceOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrderableDBInstanceOptions", i0)
	r0, _ = returns[0].(*rds.DescribeOrderableDBInstanceOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeOrderableDBInstanceOptionsPages(i0 *rds.DescribeOrderableDBInstanceOptionsInput, i1 func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrderableDBInstanceOptionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeOrderableDBInstanceOptionsPages(in *rds.DescribeOrderableDBInstanceOptionsInput, pager func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeOrderableDBInstanceOptions", paginators, in, pager)
}

func (d *RDSDouble) DescribeOrderableDBInstanceOptionsPagesWithContext(i0 context.Context, i1 *rds.DescribeOrderableDBInstanceOptionsInput, i2 func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrderableDBInstanceOptionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeOrderableDBInstanceOptionsPagesWithContext(ctx context.Context, in *rds.DescribeOrderableDBInstanceOptionsInput, pager func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeOrderableDBInstanceOptions", paginators, ctx, in, pager, options...)
}

func (d *RDSDouble) DescribeOrderableDBInstanceOptionsRequest(i0 *rds.DescribeOrderableDBInstanceOptionsInput) (r0 *request.Request, r1 *rds.DescribeOrderableDBInstanceOptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrderableDBInstanceOptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeOrderableDBInstanceOptionsOutput)
	return
}

func (d *RDSDouble) DescribeOrderableDBInstanceOptionsWithContext(i0 context.Context, i1 *rds.DescribeOrderableDBInstanceOptionsInput, i2 ...request.Option) (r0 *rds.DescribeOrderableDBInstanceOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrderableDBInstanceOptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeOrderableDBInstanceOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeOrderableDBInstanceOptionsWithContext(ctx context.Context, in *rds.DescribeOrderableDBInstanceOptionsInput, _ ...request.Option) (*rds.DescribeOrderableDBInstanceOptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeOrderableDBInstanceOptions cancelled", ctx.Err())
	default:
		return d.DescribeOrderableDBInstanceOptions(in)
	}
}

func (d *RDSDouble) DescribePendingMaintenanceActions(i0 *rds.DescribePendingMaintenanceActionsInput) (r0 *rds.DescribePendingMaintenanceActionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePendingMaintenanceActions", i0)
	r0, _ = returns[0].(*rds.DescribePendingMaintenanceActionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribePendingMaintenanceActionsRequest(i0 *rds.DescribePendingMaintenanceActionsInput) (r0 *request.Request, r1 *rds.DescribePendingMaintenanceActionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePendingMaintenanceActionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribePendingMaintenanceActionsOutput)
	return
}

func (d *RDSDouble) DescribePendingMaintenanceActionsWithContext(i0 context.Context, i1 *rds.DescribePendingMaintenanceActionsInput, i2 ...request.Option) (r0 *rds.DescribePendingMaintenanceActionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePendingMaintenanceActionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribePendingMaintenanceActionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribePendingMaintenanceActionsWithContext(ctx context.Context, in *rds.DescribePendingMaintenanceActionsInput, _ ...request.Option) (*rds.DescribePendingMaintenanceActionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribePendingMaintenanceActions cancelled", ctx.Err())
	default:
		return d.DescribePendingMaintenanceActions(in)
	}
}

func (d *RDSDouble) DescribeReservedDBInstances(i0 *rds.DescribeReservedDBInstancesInput) (r0 *rds.DescribeReservedDBInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedDBInstances", i0)
	r0, _ = returns[0].(*rds.DescribeReservedDBInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeReservedDBInstancesOfferings(i0 *rds.DescribeReservedDBInstancesOfferingsInput) (r0 *rds.DescribeReservedDBInstancesOfferingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedDBInstancesOfferings", i0)
	r0, _ = returns[0].(*rds.DescribeReservedDBInstancesOfferingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeReservedDBInstancesOfferingsPages(i0 *rds.DescribeReservedDBInstancesOfferingsInput, i1 func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedDBInstancesOfferingsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeReservedDBInstancesOfferingsPages(in *rds.DescribeReservedDBInstancesOfferingsInput, pager func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeReservedDBInstancesOfferings", paginators, in, pager)
}

func (d *RDSDouble) DescribeReservedDBInstancesOfferingsPagesWithContext(i0 context.Context, i1 *rds.DescribeReservedDBInstancesOfferingsInput, i2 func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedDBInstancesOfferingsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeReservedDBInstancesOfferingsPagesWithContext(ctx context.Context, in *rds.DescribeReservedDBInstancesOfferingsInput, pager func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeReservedDBInstancesOfferings", paginators, ctx, in, pager, options...)
}

func (d *RDSDouble) DescribeReservedDBInstancesOfferingsRequest(i0 *rds.DescribeReservedDBInstancesOfferingsInput) (r0 *request.Request, r1 *rds.DescribeReservedDBInstancesOfferingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedDBInstancesOfferingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeReservedDBInstancesOfferingsOutput)
	return
}

func (d *RDSDouble) DescribeReservedDBInstancesOfferingsWithContext(i0 context.Context, i1 *rds.DescribeReservedDBInstancesOfferingsInput, i2 ...request.Option) (r0 *rds.DescribeReservedDBInstancesOfferingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedDBInstancesOfferingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeReservedDBInstancesOfferingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeReservedDBInstancesOfferingsWithContext(ctx context.Context, in *rds.DescribeReservedDBInstancesOfferingsInput, _ ...request.Option) (*rds.DescribeReservedDBInstancesOfferingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeReservedDBInstancesOfferings cancelled", ctx.Err())
	default:
		return d.DescribeReservedDBInstancesOfferings(in)
	}
}

func (d *RDSDouble) DescribeReservedDBInstancesPages(i0 *rds.DescribeReservedDBInstancesInput, i1 func(*rds.DescribeReservedDBInstancesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedDBInstancesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeReservedDBInstancesPages(in *rds.DescribeReservedDBInstancesInput, pager func(*rds.DescribeReservedDBInstancesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeReservedDBInstances", paginators, in, pager)
}

func (d *RDSDouble) DescribeReservedDBInstancesPagesWithContext(i0 context.Context, i1 *rds.DescribeReservedDBInstancesInput, i2 func(*rds.DescribeReservedDBInstancesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedDBInstancesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDescribeReservedDBInstancesPagesWithContext(ctx context.Context, in *rds.DescribeReservedDBInstancesInput, pager func(*rds.DescribeReservedDBInstancesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeReservedDBInstances", paginators, ctx, in, pager, options...)
}

func (d *RDSDouble) DescribeReservedDBInstancesRequest(i0 *rds.DescribeReservedDBInstancesInput) (r0 *request.Request, r1 *rds.DescribeReservedDBInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedDBInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeReservedDBInstancesOutput)
	return
}

func (d *RDSDouble) DescribeReservedDBInstancesWithContext(i0 context.Context, i1 *rds.DescribeReservedDBInstancesInput, i2 ...request.Option) (r0 *rds.DescribeReservedDBInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedDBInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeReservedDBInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeReservedDBInstancesWithContext(ctx context.Context, in *rds.DescribeReservedDBInstancesInput, _ ...request.Option) (*rds.DescribeReservedDBInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeReservedDBInstances cancelled", ctx.Err())
	default:
		return d.DescribeReservedDBInstances(in)
	}
}

func (d *RDSDouble) DescribeSourceRegions(i0 *rds.DescribeSourceRegionsInput) (r0 *rds.DescribeSourceRegionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSourceRegions", i0)
	r0, _ = returns[0].(*rds.DescribeSourceRegionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeSourceRegionsRequest(i0 *rds.DescribeSourceRegionsInput) (r0 *request.Request, r1 *rds.DescribeSourceRegionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSourceRegionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeSourceRegionsOutput)
	return
}

func (d *RDSDouble) DescribeSourceRegionsWithContext(i0 context.Context, i1 *rds.DescribeSourceRegionsInput, i2 ...request.Option) (r0 *rds.DescribeSourceRegionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSourceRegionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeSourceRegionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeSourceRegionsWithContext(ctx context.Context, in *rds.DescribeSourceRegionsInput, _ ...request.Option) (*rds.DescribeSourceRegionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSourceRegions cancelled", ctx.Err())
	default:
		return d.DescribeSourceRegions(in)
	}
}

func (d *RDSDouble) DescribeValidDBInstanceModifications(i0 *rds.DescribeValidDBInstanceModificationsInput) (r0 *rds.DescribeValidDBInstanceModificationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeValidDBInstanceModifications", i0)
	r0, _ = returns[0].(*rds.DescribeValidDBInstanceModificationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DescribeValidDBInstanceModificationsRequest(i0 *rds.DescribeValidDBInstanceModificationsInput) (r0 *request.Request, r1 *rds.DescribeValidDBInstanceModificationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeValidDBInstanceModificationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DescribeValidDBInstanceModificationsOutput)
	return
}

func (d *RDSDouble) DescribeValidDBInstanceModificationsWithContext(i0 context.Context, i1 *rds.DescribeValidDBInstanceModificationsInput, i2 ...request.Option) (r0 *rds.DescribeValidDBInstanceModificationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeValidDBInstanceModificationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DescribeValidDBInstanceModificationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDescribeValidDBInstanceModificationsWithContext(ctx context.Context, in *rds.DescribeValidDBInstanceModificationsInput, _ ...request.Option) (*rds.DescribeValidDBInstanceModificationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeValidDBInstanceModifications cancelled", ctx.Err())
	default:
		return d.DescribeValidDBInstanceModifications(in)
	}
}

func (d *RDSDouble) DownloadDBLogFilePortion(i0 *rds.DownloadDBLogFilePortionInput) (r0 *rds.DownloadDBLogFilePortionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DownloadDBLogFilePortion", i0)
	r0, _ = returns[0].(*rds.DownloadDBLogFilePortionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) DownloadDBLogFilePortionPages(i0 *rds.DownloadDBLogFilePortionInput, i1 func(*rds.DownloadDBLogFilePortionOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DownloadDBLogFilePortionPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDownloadDBLogFilePortionPages(in *rds.DownloadDBLogFilePortionInput, pager func(*rds.DownloadDBLogFilePortionOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DownloadDBLogFilePortion", paginators, in, pager)
}

func (d *RDSDouble) DownloadDBLogFilePortionPagesWithContext(i0 context.Context, i1 *rds.DownloadDBLogFilePortionInput, i2 func(*rds.DownloadDBLogFilePortionOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DownloadDBLogFilePortionPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeDownloadDBLogFilePortionPagesWithContext(ctx context.Context, in *rds.DownloadDBLogFilePortionInput, pager func(*rds.DownloadDBLogFilePortionOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DownloadDBLogFilePortion", paginators, ctx, in, pager, options...)
}

func (d *RDSDouble) DownloadDBLogFilePortionRequest(i0 *rds.DownloadDBLogFilePortionInput) (r0 *request.Request, r1 *rds.DownloadDBLogFilePortionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DownloadDBLogFilePortionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DownloadDBLogFilePortionOutput)
	return
}

func (d *RDSDouble) DownloadDBLogFilePortionWithContext(i0 context.Context, i1 *rds.DownloadDBLogFilePortionInput, i2 ...request.Option) (r0 *rds.DownloadDBLogFilePortionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DownloadDBLogFilePortionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DownloadDBLogFilePortionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeDownloadDBLogFilePortionWithContext(ctx context.Context, in *rds.DownloadDBLogFilePortionInput, _ ...request.Option) (*rds.DownloadDBLogFilePortionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DownloadDBLogFilePortion cancelled", ctx.Err())
	default:
		return d.DownloadDBLogFilePortion(in)
	}
}

func (d *RDSDouble) FailoverDBCluster(i0 *rds.FailoverDBClusterInput) (r0 *rds.FailoverDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("FailoverDBCluster", i0)
	r0, _ = returns[0].(*rds.FailoverDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) FailoverDBClusterRequest(i0 *rds.FailoverDBClusterInput) (r0 *request.Request, r1 *rds.FailoverDBClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("FailoverDBClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.FailoverDBClusterOutput)
	return
}

func (d *RDSDouble) FailoverDBClusterWithContext(i0 context.Context, i1 *rds.FailoverDBClusterInput, i2 ...request.Option) (r0 *rds.FailoverDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("FailoverDBClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.FailoverDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeFailoverDBClusterWithContext(ctx context.Context, in *rds.FailoverDBClusterInput, _ ...request.Option) (*rds.FailoverDBClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "FailoverDBCluster cancelled", ctx.Err())
	default:
		return d.FailoverDBCluster(in)
	}
}

func (d *RDSDouble) ImportInstallationMedia(i0 *rds.ImportInstallationMediaInput) (r0 *rds.ImportInstallationMediaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportInstallationMedia", i0)
	r0, _ = returns[0].(*rds.ImportInstallationMediaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) ImportInstallationMediaRequest(i0 *rds.ImportInstallationMediaInput) (r0 *request.Request, r1 *rds.ImportInstallationMediaOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportInstallationMediaRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.ImportInstallationMediaOutput)
	return
}

func (d *RDSDouble) ImportInstallationMediaWithContext(i0 context.Context, i1 *rds.ImportInstallationMediaInput, i2 ...request.Option) (r0 *rds.ImportInstallationMediaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportInstallationMediaWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.ImportInstallationMediaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeImportInstallationMediaWithContext(ctx context.Context, in *rds.ImportInstallationMediaInput, _ ...request.Option) (*rds.ImportInstallationMediaOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ImportInstallationMedia cancelled", ctx.Err())
	default:
		return d.ImportInstallationMedia(in)
	}
}

func (d *RDSDouble) ListTagsForResource(i0 *rds.ListTagsForResourceInput) (r0 *rds.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*rds.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) ListTagsForResourceRequest(i0 *rds.ListTagsForResourceInput) (r0 *request.Request, r1 *rds.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.ListTagsForResourceOutput)
	return
}

func (d *RDSDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *rds.ListTagsForResourceInput, i2 ...request.Option) (r0 *rds.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *rds.ListTagsForResourceInput, _ ...request.Option) (*rds.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *RDSDouble) ModifyCertificates(i0 *rds.ModifyCertificatesInput) (r0 *rds.ModifyCertificatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyCertificates", i0)
	r0, _ = returns[0].(*rds.ModifyCertificatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) ModifyCertificatesRequest(i0 *rds.ModifyCertificatesInput) (r0 *request.Request, r1 *rds.ModifyCertificatesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyCertificatesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.ModifyCertificatesOutput)
	return
}

func (d *RDSDouble) ModifyCertificatesWithContext(i0 context.Context, i1 *rds.ModifyCertificatesInput, i2 ...request.Option) (r0 *rds.ModifyCertificatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyCertificatesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.ModifyCertificatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeModifyCertificatesWithContext(ctx context.Context, in *rds.ModifyCertificatesInput, _ ...request.Option) (*rds.ModifyCertificatesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyCertificates cancelled", ctx.Err())
	default:
		return d.ModifyCertificates(in)
	}
}

func (d *RDSDouble) ModifyCurrentDBClusterCapacity(i0 *rds.ModifyCurrentDBClusterCapacityInput) (r0 *rds.ModifyCurrentDBClusterCapacityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyCurrentDBClusterCapacity", i0)
	r0, _ = returns[0].(*rds.ModifyCurrentDBClusterCapacityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) ModifyCurrentDBClusterCapacityRequest(i0 *rds.ModifyCurrentDBClusterCapacityInput) (r0 *request.Request, r1 *rds.ModifyCurrentDBClusterCapacityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyCurrentDBClusterCapacityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.ModifyCurrentDBClusterCapacityOutput)
	return
}

func (d *RDSDouble) ModifyCurrentDBClusterCapacityWithContext(i0 context.Context, i1 *rds.ModifyCurrentDBClusterCapacityInput, i2 ...request.Option) (r0 *rds.ModifyCurrentDBClusterCapacityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyCurrentDBClusterCapacityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.ModifyCurrentDBClusterCapacityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeModifyCurrentDBClusterCapacityWithContext(ctx context.Context, in *rds.ModifyCurrentDBClusterCapacityInput, _ ...request.Option) (*rds.ModifyCurrentDBClusterCapacityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyCurrentDBClusterCapacity cancelled", ctx.Err())
	default:
		return d.ModifyCurrentDBClusterCapacity(in)
	}
}

func (d *RDSDouble) ModifyDBCluster(i0 *rds.ModifyDBClusterInput) (r0 *rds.ModifyDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBCluster", i0)
	r0, _ = returns[0].(*rds.ModifyDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) ModifyDBClusterEndpoint(i0 *rds.ModifyDBClusterEndpointInput) (r0 *rds.ModifyDBClusterEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBClusterEndpoint", i0)
	r0, _ = returns[0].(*rds.ModifyDBClusterEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) ModifyDBClusterEndpointRequest(i0 *rds.ModifyDBClusterEndpointInput) (r0 *request.Request, r1 *rds.ModifyDBClusterEndpointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBClusterEndpointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.ModifyDBClusterEndpointOutput)
	return
}

func (d *RDSDouble) ModifyDBClusterEndpointWithContext(i0 context.Context, i1 *rds.ModifyDBClusterEndpointInput, i2 ...request.Option) (r0 *rds.ModifyDBClusterEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBClusterEndpointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.ModifyDBClusterEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeModifyDBClusterEndpointWithContext(ctx context.Context, in *rds.ModifyDBClusterEndpointInput, _ ...request.Option) (*rds.ModifyDBClusterEndpointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyDBClusterEndpoint cancelled", ctx.Err())
	default:
		return d.ModifyDBClusterEndpoint(in)
	}
}

func (d *RDSDouble) ModifyDBClusterParameterGroup(i0 *rds.ModifyDBClusterParameterGroupInput) (r0 *rds.DBClusterParameterGroupNameMessage, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBClusterParameterGroup", i0)
	r0, _ = returns[0].(*rds.DBClusterParameterGroupNameMessage)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) ModifyDBClusterParameterGroupRequest(i0 *rds.ModifyDBClusterParameterGroupInput) (r0 *request.Request, r1 *rds.DBClusterParameterGroupNameMessage) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBClusterParameterGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DBClusterParameterGroupNameMessage)
	return
}

func (d *RDSDouble) ModifyDBClusterParameterGroupWithContext(i0 context.Context, i1 *rds.ModifyDBClusterParameterGroupInput, i2 ...request.Option) (r0 *rds.DBClusterParameterGroupNameMessage, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBClusterParameterGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DBClusterParameterGroupNameMessage)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeModifyDBClusterParameterGroupWithContext(ctx context.Context, in *rds.ModifyDBClusterParameterGroupInput, _ ...request.Option) (*rds.DBClusterParameterGroupNameMessage, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyDBClusterParameterGroup cancelled", ctx.Err())
	default:
		return d.ModifyDBClusterParameterGroup(in)
	}
}

func (d *RDSDouble) ModifyDBClusterRequest(i0 *rds.ModifyDBClusterInput) (r0 *request.Request, r1 *rds.ModifyDBClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.ModifyDBClusterOutput)
	return
}

func (d *RDSDouble) ModifyDBClusterSnapshotAttribute(i0 *rds.ModifyDBClusterSnapshotAttributeInput) (r0 *rds.ModifyDBClusterSnapshotAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBClusterSnapshotAttribute", i0)
	r0, _ = returns[0].(*rds.ModifyDBClusterSnapshotAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) ModifyDBClusterSnapshotAttributeRequest(i0 *rds.ModifyDBClusterSnapshotAttributeInput) (r0 *request.Request, r1 *rds.ModifyDBClusterSnapshotAttributeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBClusterSnapshotAttributeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.ModifyDBClusterSnapshotAttributeOutput)
	return
}

func (d *RDSDouble) ModifyDBClusterSnapshotAttributeWithContext(i0 context.Context, i1 *rds.ModifyDBClusterSnapshotAttributeInput, i2 ...request.Option) (r0 *rds.ModifyDBClusterSnapshotAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBClusterSnapshotAttributeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.ModifyDBClusterSnapshotAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeModifyDBClusterSnapshotAttributeWithContext(ctx context.Context, in *rds.ModifyDBClusterSnapshotAttributeInput, _ ...request.Option) (*rds.ModifyDBClusterSnapshotAttributeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyDBClusterSnapshotAttribute cancelled", ctx.Err())
	default:
		return d.ModifyDBClusterSnapshotAttribute(in)
	}
}

func (d *RDSDouble) ModifyDBClusterWithContext(i0 context.Context, i1 *rds.ModifyDBClusterInput, i2 ...request.Option) (r0 *rds.ModifyDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.ModifyDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeModifyDBClusterWithContext(ctx context.Context, in *rds.ModifyDBClusterInput, _ ...request.Option) (*rds.ModifyDBClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyDBCluster cancelled", ctx.Err())
	default:
		return d.ModifyDBCluster(in)
	}
}

func (d *RDSDouble) ModifyDBInstance(i0 *rds.ModifyDBInstanceInput) (r0 *rds.ModifyDBInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBInstance", i0)
	r0, _ = returns[0].(*rds.ModifyDBInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) ModifyDBInstanceRequest(i0 *rds.ModifyDBInstanceInput) (r0 *request.Request, r1 *rds.ModifyDBInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.ModifyDBInstanceOutput)
	return
}

func (d *RDSDouble) ModifyDBInstanceWithContext(i0 context.Context, i1 *rds.ModifyDBInstanceInput, i2 ...request.Option) (r0 *rds.ModifyDBInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.ModifyDBInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeModifyDBInstanceWithContext(ctx context.Context, in *rds.ModifyDBInstanceInput, _ ...request.Option) (*rds.ModifyDBInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyDBInstance cancelled", ctx.Err())
	default:
		return d.ModifyDBInstance(in)
	}
}

func (d *RDSDouble) ModifyDBParameterGroup(i0 *rds.ModifyDBParameterGroupInput) (r0 *rds.DBParameterGroupNameMessage, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBParameterGroup", i0)
	r0, _ = returns[0].(*rds.DBParameterGroupNameMessage)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) ModifyDBParameterGroupRequest(i0 *rds.ModifyDBParameterGroupInput) (r0 *request.Request, r1 *rds.DBParameterGroupNameMessage) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBParameterGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DBParameterGroupNameMessage)
	return
}

func (d *RDSDouble) ModifyDBParameterGroupWithContext(i0 context.Context, i1 *rds.ModifyDBParameterGroupInput, i2 ...request.Option) (r0 *rds.DBParameterGroupNameMessage, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBParameterGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DBParameterGroupNameMessage)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeModifyDBParameterGroupWithContext(ctx context.Context, in *rds.ModifyDBParameterGroupInput, _ ...request.Option) (*rds.DBParameterGroupNameMessage, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyDBParameterGroup cancelled", ctx.Err())
	default:
		return d.ModifyDBParameterGroup(in)
	}
}

func (d *RDSDouble) ModifyDBProxy(i0 *rds.ModifyDBProxyInput) (r0 *rds.ModifyDBProxyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBProxy", i0)
	r0, _ = returns[0].(*rds.ModifyDBProxyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) ModifyDBProxyRequest(i0 *rds.ModifyDBProxyInput) (r0 *request.Request, r1 *rds.ModifyDBProxyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBProxyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.ModifyDBProxyOutput)
	return
}

func (d *RDSDouble) ModifyDBProxyTargetGroup(i0 *rds.ModifyDBProxyTargetGroupInput) (r0 *rds.ModifyDBProxyTargetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBProxyTargetGroup", i0)
	r0, _ = returns[0].(*rds.ModifyDBProxyTargetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) ModifyDBProxyTargetGroupRequest(i0 *rds.ModifyDBProxyTargetGroupInput) (r0 *request.Request, r1 *rds.ModifyDBProxyTargetGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBProxyTargetGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.ModifyDBProxyTargetGroupOutput)
	return
}

func (d *RDSDouble) ModifyDBProxyTargetGroupWithContext(i0 context.Context, i1 *rds.ModifyDBProxyTargetGroupInput, i2 ...request.Option) (r0 *rds.ModifyDBProxyTargetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBProxyTargetGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.ModifyDBProxyTargetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeModifyDBProxyTargetGroupWithContext(ctx context.Context, in *rds.ModifyDBProxyTargetGroupInput, _ ...request.Option) (*rds.ModifyDBProxyTargetGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyDBProxyTargetGroup cancelled", ctx.Err())
	default:
		return d.ModifyDBProxyTargetGroup(in)
	}
}

func (d *RDSDouble) ModifyDBProxyWithContext(i0 context.Context, i1 *rds.ModifyDBProxyInput, i2 ...request.Option) (r0 *rds.ModifyDBProxyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBProxyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.ModifyDBProxyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeModifyDBProxyWithContext(ctx context.Context, in *rds.ModifyDBProxyInput, _ ...request.Option) (*rds.ModifyDBProxyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyDBProxy cancelled", ctx.Err())
	default:
		return d.ModifyDBProxy(in)
	}
}

func (d *RDSDouble) ModifyDBSnapshot(i0 *rds.ModifyDBSnapshotInput) (r0 *rds.ModifyDBSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBSnapshot", i0)
	r0, _ = returns[0].(*rds.ModifyDBSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) ModifyDBSnapshotAttribute(i0 *rds.ModifyDBSnapshotAttributeInput) (r0 *rds.ModifyDBSnapshotAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBSnapshotAttribute", i0)
	r0, _ = returns[0].(*rds.ModifyDBSnapshotAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) ModifyDBSnapshotAttributeRequest(i0 *rds.ModifyDBSnapshotAttributeInput) (r0 *request.Request, r1 *rds.ModifyDBSnapshotAttributeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBSnapshotAttributeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.ModifyDBSnapshotAttributeOutput)
	return
}

func (d *RDSDouble) ModifyDBSnapshotAttributeWithContext(i0 context.Context, i1 *rds.ModifyDBSnapshotAttributeInput, i2 ...request.Option) (r0 *rds.ModifyDBSnapshotAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBSnapshotAttributeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.ModifyDBSnapshotAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeModifyDBSnapshotAttributeWithContext(ctx context.Context, in *rds.ModifyDBSnapshotAttributeInput, _ ...request.Option) (*rds.ModifyDBSnapshotAttributeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyDBSnapshotAttribute cancelled", ctx.Err())
	default:
		return d.ModifyDBSnapshotAttribute(in)
	}
}

func (d *RDSDouble) ModifyDBSnapshotRequest(i0 *rds.ModifyDBSnapshotInput) (r0 *request.Request, r1 *rds.ModifyDBSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.ModifyDBSnapshotOutput)
	return
}

func (d *RDSDouble) ModifyDBSnapshotWithContext(i0 context.Context, i1 *rds.ModifyDBSnapshotInput, i2 ...request.Option) (r0 *rds.ModifyDBSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.ModifyDBSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeModifyDBSnapshotWithContext(ctx context.Context, in *rds.ModifyDBSnapshotInput, _ ...request.Option) (*rds.ModifyDBSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyDBSnapshot cancelled", ctx.Err())
	default:
		return d.ModifyDBSnapshot(in)
	}
}

func (d *RDSDouble) ModifyDBSubnetGroup(i0 *rds.ModifyDBSubnetGroupInput) (r0 *rds.ModifyDBSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBSubnetGroup", i0)
	r0, _ = returns[0].(*rds.ModifyDBSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) ModifyDBSubnetGroupRequest(i0 *rds.ModifyDBSubnetGroupInput) (r0 *request.Request, r1 *rds.ModifyDBSubnetGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBSubnetGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.ModifyDBSubnetGroupOutput)
	return
}

func (d *RDSDouble) ModifyDBSubnetGroupWithContext(i0 context.Context, i1 *rds.ModifyDBSubnetGroupInput, i2 ...request.Option) (r0 *rds.ModifyDBSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBSubnetGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.ModifyDBSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeModifyDBSubnetGroupWithContext(ctx context.Context, in *rds.ModifyDBSubnetGroupInput, _ ...request.Option) (*rds.ModifyDBSubnetGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyDBSubnetGroup cancelled", ctx.Err())
	default:
		return d.ModifyDBSubnetGroup(in)
	}
}

func (d *RDSDouble) ModifyEventSubscription(i0 *rds.ModifyEventSubscriptionInput) (r0 *rds.ModifyEventSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyEventSubscription", i0)
	r0, _ = returns[0].(*rds.ModifyEventSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) ModifyEventSubscriptionRequest(i0 *rds.ModifyEventSubscriptionInput) (r0 *request.Request, r1 *rds.ModifyEventSubscriptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyEventSubscriptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.ModifyEventSubscriptionOutput)
	return
}

func (d *RDSDouble) ModifyEventSubscriptionWithContext(i0 context.Context, i1 *rds.ModifyEventSubscriptionInput, i2 ...request.Option) (r0 *rds.ModifyEventSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyEventSubscriptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.ModifyEventSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeModifyEventSubscriptionWithContext(ctx context.Context, in *rds.ModifyEventSubscriptionInput, _ ...request.Option) (*rds.ModifyEventSubscriptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyEventSubscription cancelled", ctx.Err())
	default:
		return d.ModifyEventSubscription(in)
	}
}

func (d *RDSDouble) ModifyGlobalCluster(i0 *rds.ModifyGlobalClusterInput) (r0 *rds.ModifyGlobalClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyGlobalCluster", i0)
	r0, _ = returns[0].(*rds.ModifyGlobalClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) ModifyGlobalClusterRequest(i0 *rds.ModifyGlobalClusterInput) (r0 *request.Request, r1 *rds.ModifyGlobalClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyGlobalClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.ModifyGlobalClusterOutput)
	return
}

func (d *RDSDouble) ModifyGlobalClusterWithContext(i0 context.Context, i1 *rds.ModifyGlobalClusterInput, i2 ...request.Option) (r0 *rds.ModifyGlobalClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyGlobalClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.ModifyGlobalClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeModifyGlobalClusterWithContext(ctx context.Context, in *rds.ModifyGlobalClusterInput, _ ...request.Option) (*rds.ModifyGlobalClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyGlobalCluster cancelled", ctx.Err())
	default:
		return d.ModifyGlobalCluster(in)
	}
}

func (d *RDSDouble) ModifyOptionGroup(i0 *rds.ModifyOptionGroupInput) (r0 *rds.ModifyOptionGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyOptionGroup", i0)
	r0, _ = returns[0].(*rds.ModifyOptionGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) ModifyOptionGroupRequest(i0 *rds.ModifyOptionGroupInput) (r0 *request.Request, r1 *rds.ModifyOptionGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyOptionGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.ModifyOptionGroupOutput)
	return
}

func (d *RDSDouble) ModifyOptionGroupWithContext(i0 context.Context, i1 *rds.ModifyOptionGroupInput, i2 ...request.Option) (r0 *rds.ModifyOptionGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyOptionGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.ModifyOptionGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeModifyOptionGroupWithContext(ctx context.Context, in *rds.ModifyOptionGroupInput, _ ...request.Option) (*rds.ModifyOptionGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyOptionGroup cancelled", ctx.Err())
	default:
		return d.ModifyOptionGroup(in)
	}
}

func (d *RDSDouble) PromoteReadReplica(i0 *rds.PromoteReadReplicaInput) (r0 *rds.PromoteReadReplicaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PromoteReadReplica", i0)
	r0, _ = returns[0].(*rds.PromoteReadReplicaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) PromoteReadReplicaDBCluster(i0 *rds.PromoteReadReplicaDBClusterInput) (r0 *rds.PromoteReadReplicaDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PromoteReadReplicaDBCluster", i0)
	r0, _ = returns[0].(*rds.PromoteReadReplicaDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) PromoteReadReplicaDBClusterRequest(i0 *rds.PromoteReadReplicaDBClusterInput) (r0 *request.Request, r1 *rds.PromoteReadReplicaDBClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PromoteReadReplicaDBClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.PromoteReadReplicaDBClusterOutput)
	return
}

func (d *RDSDouble) PromoteReadReplicaDBClusterWithContext(i0 context.Context, i1 *rds.PromoteReadReplicaDBClusterInput, i2 ...request.Option) (r0 *rds.PromoteReadReplicaDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PromoteReadReplicaDBClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.PromoteReadReplicaDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakePromoteReadReplicaDBClusterWithContext(ctx context.Context, in *rds.PromoteReadReplicaDBClusterInput, _ ...request.Option) (*rds.PromoteReadReplicaDBClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PromoteReadReplicaDBCluster cancelled", ctx.Err())
	default:
		return d.PromoteReadReplicaDBCluster(in)
	}
}

func (d *RDSDouble) PromoteReadReplicaRequest(i0 *rds.PromoteReadReplicaInput) (r0 *request.Request, r1 *rds.PromoteReadReplicaOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PromoteReadReplicaRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.PromoteReadReplicaOutput)
	return
}

func (d *RDSDouble) PromoteReadReplicaWithContext(i0 context.Context, i1 *rds.PromoteReadReplicaInput, i2 ...request.Option) (r0 *rds.PromoteReadReplicaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PromoteReadReplicaWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.PromoteReadReplicaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakePromoteReadReplicaWithContext(ctx context.Context, in *rds.PromoteReadReplicaInput, _ ...request.Option) (*rds.PromoteReadReplicaOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PromoteReadReplica cancelled", ctx.Err())
	default:
		return d.PromoteReadReplica(in)
	}
}

func (d *RDSDouble) PurchaseReservedDBInstancesOffering(i0 *rds.PurchaseReservedDBInstancesOfferingInput) (r0 *rds.PurchaseReservedDBInstancesOfferingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PurchaseReservedDBInstancesOffering", i0)
	r0, _ = returns[0].(*rds.PurchaseReservedDBInstancesOfferingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) PurchaseReservedDBInstancesOfferingRequest(i0 *rds.PurchaseReservedDBInstancesOfferingInput) (r0 *request.Request, r1 *rds.PurchaseReservedDBInstancesOfferingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PurchaseReservedDBInstancesOfferingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.PurchaseReservedDBInstancesOfferingOutput)
	return
}

func (d *RDSDouble) PurchaseReservedDBInstancesOfferingWithContext(i0 context.Context, i1 *rds.PurchaseReservedDBInstancesOfferingInput, i2 ...request.Option) (r0 *rds.PurchaseReservedDBInstancesOfferingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PurchaseReservedDBInstancesOfferingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.PurchaseReservedDBInstancesOfferingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakePurchaseReservedDBInstancesOfferingWithContext(ctx context.Context, in *rds.PurchaseReservedDBInstancesOfferingInput, _ ...request.Option) (*rds.PurchaseReservedDBInstancesOfferingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PurchaseReservedDBInstancesOffering cancelled", ctx.Err())
	default:
		return d.PurchaseReservedDBInstancesOffering(in)
	}
}

func (d *RDSDouble) RebootDBInstance(i0 *rds.RebootDBInstanceInput) (r0 *rds.RebootDBInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebootDBInstance", i0)
	r0, _ = returns[0].(*rds.RebootDBInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) RebootDBInstanceRequest(i0 *rds.RebootDBInstanceInput) (r0 *request.Request, r1 *rds.RebootDBInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebootDBInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.RebootDBInstanceOutput)
	return
}

func (d *RDSDouble) RebootDBInstanceWithContext(i0 context.Context, i1 *rds.RebootDBInstanceInput, i2 ...request.Option) (r0 *rds.RebootDBInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebootDBInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.RebootDBInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeRebootDBInstanceWithContext(ctx context.Context, in *rds.RebootDBInstanceInput, _ ...request.Option) (*rds.RebootDBInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RebootDBInstance cancelled", ctx.Err())
	default:
		return d.RebootDBInstance(in)
	}
}

func (d *RDSDouble) RegisterDBProxyTargets(i0 *rds.RegisterDBProxyTargetsInput) (r0 *rds.RegisterDBProxyTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterDBProxyTargets", i0)
	r0, _ = returns[0].(*rds.RegisterDBProxyTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) RegisterDBProxyTargetsRequest(i0 *rds.RegisterDBProxyTargetsInput) (r0 *request.Request, r1 *rds.RegisterDBProxyTargetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterDBProxyTargetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.RegisterDBProxyTargetsOutput)
	return
}

func (d *RDSDouble) RegisterDBProxyTargetsWithContext(i0 context.Context, i1 *rds.RegisterDBProxyTargetsInput, i2 ...request.Option) (r0 *rds.RegisterDBProxyTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterDBProxyTargetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.RegisterDBProxyTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeRegisterDBProxyTargetsWithContext(ctx context.Context, in *rds.RegisterDBProxyTargetsInput, _ ...request.Option) (*rds.RegisterDBProxyTargetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterDBProxyTargets cancelled", ctx.Err())
	default:
		return d.RegisterDBProxyTargets(in)
	}
}

func (d *RDSDouble) RemoveFromGlobalCluster(i0 *rds.RemoveFromGlobalClusterInput) (r0 *rds.RemoveFromGlobalClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveFromGlobalCluster", i0)
	r0, _ = returns[0].(*rds.RemoveFromGlobalClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) RemoveFromGlobalClusterRequest(i0 *rds.RemoveFromGlobalClusterInput) (r0 *request.Request, r1 *rds.RemoveFromGlobalClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveFromGlobalClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.RemoveFromGlobalClusterOutput)
	return
}

func (d *RDSDouble) RemoveFromGlobalClusterWithContext(i0 context.Context, i1 *rds.RemoveFromGlobalClusterInput, i2 ...request.Option) (r0 *rds.RemoveFromGlobalClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveFromGlobalClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.RemoveFromGlobalClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeRemoveFromGlobalClusterWithContext(ctx context.Context, in *rds.RemoveFromGlobalClusterInput, _ ...request.Option) (*rds.RemoveFromGlobalClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveFromGlobalCluster cancelled", ctx.Err())
	default:
		return d.RemoveFromGlobalCluster(in)
	}
}

func (d *RDSDouble) RemoveRoleFromDBCluster(i0 *rds.RemoveRoleFromDBClusterInput) (r0 *rds.RemoveRoleFromDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveRoleFromDBCluster", i0)
	r0, _ = returns[0].(*rds.RemoveRoleFromDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) RemoveRoleFromDBClusterRequest(i0 *rds.RemoveRoleFromDBClusterInput) (r0 *request.Request, r1 *rds.RemoveRoleFromDBClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveRoleFromDBClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.RemoveRoleFromDBClusterOutput)
	return
}

func (d *RDSDouble) RemoveRoleFromDBClusterWithContext(i0 context.Context, i1 *rds.RemoveRoleFromDBClusterInput, i2 ...request.Option) (r0 *rds.RemoveRoleFromDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveRoleFromDBClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.RemoveRoleFromDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeRemoveRoleFromDBClusterWithContext(ctx context.Context, in *rds.RemoveRoleFromDBClusterInput, _ ...request.Option) (*rds.RemoveRoleFromDBClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveRoleFromDBCluster cancelled", ctx.Err())
	default:
		return d.RemoveRoleFromDBCluster(in)
	}
}

func (d *RDSDouble) RemoveRoleFromDBInstance(i0 *rds.RemoveRoleFromDBInstanceInput) (r0 *rds.RemoveRoleFromDBInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveRoleFromDBInstance", i0)
	r0, _ = returns[0].(*rds.RemoveRoleFromDBInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) RemoveRoleFromDBInstanceRequest(i0 *rds.RemoveRoleFromDBInstanceInput) (r0 *request.Request, r1 *rds.RemoveRoleFromDBInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveRoleFromDBInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.RemoveRoleFromDBInstanceOutput)
	return
}

func (d *RDSDouble) RemoveRoleFromDBInstanceWithContext(i0 context.Context, i1 *rds.RemoveRoleFromDBInstanceInput, i2 ...request.Option) (r0 *rds.RemoveRoleFromDBInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveRoleFromDBInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.RemoveRoleFromDBInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeRemoveRoleFromDBInstanceWithContext(ctx context.Context, in *rds.RemoveRoleFromDBInstanceInput, _ ...request.Option) (*rds.RemoveRoleFromDBInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveRoleFromDBInstance cancelled", ctx.Err())
	default:
		return d.RemoveRoleFromDBInstance(in)
	}
}

func (d *RDSDouble) RemoveSourceIdentifierFromSubscription(i0 *rds.RemoveSourceIdentifierFromSubscriptionInput) (r0 *rds.RemoveSourceIdentifierFromSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveSourceIdentifierFromSubscription", i0)
	r0, _ = returns[0].(*rds.RemoveSourceIdentifierFromSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) RemoveSourceIdentifierFromSubscriptionRequest(i0 *rds.RemoveSourceIdentifierFromSubscriptionInput) (r0 *request.Request, r1 *rds.RemoveSourceIdentifierFromSubscriptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveSourceIdentifierFromSubscriptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.RemoveSourceIdentifierFromSubscriptionOutput)
	return
}

func (d *RDSDouble) RemoveSourceIdentifierFromSubscriptionWithContext(i0 context.Context, i1 *rds.RemoveSourceIdentifierFromSubscriptionInput, i2 ...request.Option) (r0 *rds.RemoveSourceIdentifierFromSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveSourceIdentifierFromSubscriptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.RemoveSourceIdentifierFromSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeRemoveSourceIdentifierFromSubscriptionWithContext(ctx context.Context, in *rds.RemoveSourceIdentifierFromSubscriptionInput, _ ...request.Option) (*rds.RemoveSourceIdentifierFromSubscriptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveSourceIdentifierFromSubscription cancelled", ctx.Err())
	default:
		return d.RemoveSourceIdentifierFromSubscription(in)
	}
}

func (d *RDSDouble) RemoveTagsFromResource(i0 *rds.RemoveTagsFromResourceInput) (r0 *rds.RemoveTagsFromResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromResource", i0)
	r0, _ = returns[0].(*rds.RemoveTagsFromResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) RemoveTagsFromResourceRequest(i0 *rds.RemoveTagsFromResourceInput) (r0 *request.Request, r1 *rds.RemoveTagsFromResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.RemoveTagsFromResourceOutput)
	return
}

func (d *RDSDouble) RemoveTagsFromResourceWithContext(i0 context.Context, i1 *rds.RemoveTagsFromResourceInput, i2 ...request.Option) (r0 *rds.RemoveTagsFromResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.RemoveTagsFromResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeRemoveTagsFromResourceWithContext(ctx context.Context, in *rds.RemoveTagsFromResourceInput, _ ...request.Option) (*rds.RemoveTagsFromResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveTagsFromResource cancelled", ctx.Err())
	default:
		return d.RemoveTagsFromResource(in)
	}
}

func (d *RDSDouble) ResetDBClusterParameterGroup(i0 *rds.ResetDBClusterParameterGroupInput) (r0 *rds.DBClusterParameterGroupNameMessage, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetDBClusterParameterGroup", i0)
	r0, _ = returns[0].(*rds.DBClusterParameterGroupNameMessage)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) ResetDBClusterParameterGroupRequest(i0 *rds.ResetDBClusterParameterGroupInput) (r0 *request.Request, r1 *rds.DBClusterParameterGroupNameMessage) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetDBClusterParameterGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DBClusterParameterGroupNameMessage)
	return
}

func (d *RDSDouble) ResetDBClusterParameterGroupWithContext(i0 context.Context, i1 *rds.ResetDBClusterParameterGroupInput, i2 ...request.Option) (r0 *rds.DBClusterParameterGroupNameMessage, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetDBClusterParameterGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DBClusterParameterGroupNameMessage)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeResetDBClusterParameterGroupWithContext(ctx context.Context, in *rds.ResetDBClusterParameterGroupInput, _ ...request.Option) (*rds.DBClusterParameterGroupNameMessage, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ResetDBClusterParameterGroup cancelled", ctx.Err())
	default:
		return d.ResetDBClusterParameterGroup(in)
	}
}

func (d *RDSDouble) ResetDBParameterGroup(i0 *rds.ResetDBParameterGroupInput) (r0 *rds.DBParameterGroupNameMessage, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetDBParameterGroup", i0)
	r0, _ = returns[0].(*rds.DBParameterGroupNameMessage)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) ResetDBParameterGroupRequest(i0 *rds.ResetDBParameterGroupInput) (r0 *request.Request, r1 *rds.DBParameterGroupNameMessage) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetDBParameterGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.DBParameterGroupNameMessage)
	return
}

func (d *RDSDouble) ResetDBParameterGroupWithContext(i0 context.Context, i1 *rds.ResetDBParameterGroupInput, i2 ...request.Option) (r0 *rds.DBParameterGroupNameMessage, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetDBParameterGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.DBParameterGroupNameMessage)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeResetDBParameterGroupWithContext(ctx context.Context, in *rds.ResetDBParameterGroupInput, _ ...request.Option) (*rds.DBParameterGroupNameMessage, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ResetDBParameterGroup cancelled", ctx.Err())
	default:
		return d.ResetDBParameterGroup(in)
	}
}

func (d *RDSDouble) RestoreDBClusterFromS3(i0 *rds.RestoreDBClusterFromS3Input) (r0 *rds.RestoreDBClusterFromS3Output, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreDBClusterFromS3", i0)
	r0, _ = returns[0].(*rds.RestoreDBClusterFromS3Output)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) RestoreDBClusterFromS3Request(i0 *rds.RestoreDBClusterFromS3Input) (r0 *request.Request, r1 *rds.RestoreDBClusterFromS3Output) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreDBClusterFromS3Request", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.RestoreDBClusterFromS3Output)
	return
}

func (d *RDSDouble) RestoreDBClusterFromS3WithContext(i0 context.Context, i1 *rds.RestoreDBClusterFromS3Input, i2 ...request.Option) (r0 *rds.RestoreDBClusterFromS3Output, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreDBClusterFromS3WithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.RestoreDBClusterFromS3Output)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeRestoreDBClusterFromS3WithContext(ctx context.Context, in *rds.RestoreDBClusterFromS3Input, _ ...request.Option) (*rds.RestoreDBClusterFromS3Output, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RestoreDBClusterFromS3 cancelled", ctx.Err())
	default:
		return d.RestoreDBClusterFromS3(in)
	}
}

func (d *RDSDouble) RestoreDBClusterFromSnapshot(i0 *rds.RestoreDBClusterFromSnapshotInput) (r0 *rds.RestoreDBClusterFromSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreDBClusterFromSnapshot", i0)
	r0, _ = returns[0].(*rds.RestoreDBClusterFromSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) RestoreDBClusterFromSnapshotRequest(i0 *rds.RestoreDBClusterFromSnapshotInput) (r0 *request.Request, r1 *rds.RestoreDBClusterFromSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreDBClusterFromSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.RestoreDBClusterFromSnapshotOutput)
	return
}

func (d *RDSDouble) RestoreDBClusterFromSnapshotWithContext(i0 context.Context, i1 *rds.RestoreDBClusterFromSnapshotInput, i2 ...request.Option) (r0 *rds.RestoreDBClusterFromSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreDBClusterFromSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.RestoreDBClusterFromSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeRestoreDBClusterFromSnapshotWithContext(ctx context.Context, in *rds.RestoreDBClusterFromSnapshotInput, _ ...request.Option) (*rds.RestoreDBClusterFromSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RestoreDBClusterFromSnapshot cancelled", ctx.Err())
	default:
		return d.RestoreDBClusterFromSnapshot(in)
	}
}

func (d *RDSDouble) RestoreDBClusterToPointInTime(i0 *rds.RestoreDBClusterToPointInTimeInput) (r0 *rds.RestoreDBClusterToPointInTimeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreDBClusterToPointInTime", i0)
	r0, _ = returns[0].(*rds.RestoreDBClusterToPointInTimeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) RestoreDBClusterToPointInTimeRequest(i0 *rds.RestoreDBClusterToPointInTimeInput) (r0 *request.Request, r1 *rds.RestoreDBClusterToPointInTimeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreDBClusterToPointInTimeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.RestoreDBClusterToPointInTimeOutput)
	return
}

func (d *RDSDouble) RestoreDBClusterToPointInTimeWithContext(i0 context.Context, i1 *rds.RestoreDBClusterToPointInTimeInput, i2 ...request.Option) (r0 *rds.RestoreDBClusterToPointInTimeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreDBClusterToPointInTimeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.RestoreDBClusterToPointInTimeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeRestoreDBClusterToPointInTimeWithContext(ctx context.Context, in *rds.RestoreDBClusterToPointInTimeInput, _ ...request.Option) (*rds.RestoreDBClusterToPointInTimeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RestoreDBClusterToPointInTime cancelled", ctx.Err())
	default:
		return d.RestoreDBClusterToPointInTime(in)
	}
}

func (d *RDSDouble) RestoreDBInstanceFromDBSnapshot(i0 *rds.RestoreDBInstanceFromDBSnapshotInput) (r0 *rds.RestoreDBInstanceFromDBSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreDBInstanceFromDBSnapshot", i0)
	r0, _ = returns[0].(*rds.RestoreDBInstanceFromDBSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) RestoreDBInstanceFromDBSnapshotRequest(i0 *rds.RestoreDBInstanceFromDBSnapshotInput) (r0 *request.Request, r1 *rds.RestoreDBInstanceFromDBSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreDBInstanceFromDBSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.RestoreDBInstanceFromDBSnapshotOutput)
	return
}

func (d *RDSDouble) RestoreDBInstanceFromDBSnapshotWithContext(i0 context.Context, i1 *rds.RestoreDBInstanceFromDBSnapshotInput, i2 ...request.Option) (r0 *rds.RestoreDBInstanceFromDBSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreDBInstanceFromDBSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.RestoreDBInstanceFromDBSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeRestoreDBInstanceFromDBSnapshotWithContext(ctx context.Context, in *rds.RestoreDBInstanceFromDBSnapshotInput, _ ...request.Option) (*rds.RestoreDBInstanceFromDBSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RestoreDBInstanceFromDBSnapshot cancelled", ctx.Err())
	default:
		return d.RestoreDBInstanceFromDBSnapshot(in)
	}
}

func (d *RDSDouble) RestoreDBInstanceFromS3(i0 *rds.RestoreDBInstanceFromS3Input) (r0 *rds.RestoreDBInstanceFromS3Output, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreDBInstanceFromS3", i0)
	r0, _ = returns[0].(*rds.RestoreDBInstanceFromS3Output)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) RestoreDBInstanceFromS3Request(i0 *rds.RestoreDBInstanceFromS3Input) (r0 *request.Request, r1 *rds.RestoreDBInstanceFromS3Output) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreDBInstanceFromS3Request", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.RestoreDBInstanceFromS3Output)
	return
}

func (d *RDSDouble) RestoreDBInstanceFromS3WithContext(i0 context.Context, i1 *rds.RestoreDBInstanceFromS3Input, i2 ...request.Option) (r0 *rds.RestoreDBInstanceFromS3Output, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreDBInstanceFromS3WithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.RestoreDBInstanceFromS3Output)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeRestoreDBInstanceFromS3WithContext(ctx context.Context, in *rds.RestoreDBInstanceFromS3Input, _ ...request.Option) (*rds.RestoreDBInstanceFromS3Output, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RestoreDBInstanceFromS3 cancelled", ctx.Err())
	default:
		return d.RestoreDBInstanceFromS3(in)
	}
}

func (d *RDSDouble) RestoreDBInstanceToPointInTime(i0 *rds.RestoreDBInstanceToPointInTimeInput) (r0 *rds.RestoreDBInstanceToPointInTimeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreDBInstanceToPointInTime", i0)
	r0, _ = returns[0].(*rds.RestoreDBInstanceToPointInTimeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) RestoreDBInstanceToPointInTimeRequest(i0 *rds.RestoreDBInstanceToPointInTimeInput) (r0 *request.Request, r1 *rds.RestoreDBInstanceToPointInTimeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreDBInstanceToPointInTimeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.RestoreDBInstanceToPointInTimeOutput)
	return
}

func (d *RDSDouble) RestoreDBInstanceToPointInTimeWithContext(i0 context.Context, i1 *rds.RestoreDBInstanceToPointInTimeInput, i2 ...request.Option) (r0 *rds.RestoreDBInstanceToPointInTimeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreDBInstanceToPointInTimeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.RestoreDBInstanceToPointInTimeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeRestoreDBInstanceToPointInTimeWithContext(ctx context.Context, in *rds.RestoreDBInstanceToPointInTimeInput, _ ...request.Option) (*rds.RestoreDBInstanceToPointInTimeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RestoreDBInstanceToPointInTime cancelled", ctx.Err())
	default:
		return d.RestoreDBInstanceToPointInTime(in)
	}
}

func (d *RDSDouble) RevokeDBSecurityGroupIngress(i0 *rds.RevokeDBSecurityGroupIngressInput) (r0 *rds.RevokeDBSecurityGroupIngressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeDBSecurityGroupIngress", i0)
	r0, _ = returns[0].(*rds.RevokeDBSecurityGroupIngressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) RevokeDBSecurityGroupIngressRequest(i0 *rds.RevokeDBSecurityGroupIngressInput) (r0 *request.Request, r1 *rds.RevokeDBSecurityGroupIngressOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeDBSecurityGroupIngressRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.RevokeDBSecurityGroupIngressOutput)
	return
}

func (d *RDSDouble) RevokeDBSecurityGroupIngressWithContext(i0 context.Context, i1 *rds.RevokeDBSecurityGroupIngressInput, i2 ...request.Option) (r0 *rds.RevokeDBSecurityGroupIngressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeDBSecurityGroupIngressWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.RevokeDBSecurityGroupIngressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeRevokeDBSecurityGroupIngressWithContext(ctx context.Context, in *rds.RevokeDBSecurityGroupIngressInput, _ ...request.Option) (*rds.RevokeDBSecurityGroupIngressOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RevokeDBSecurityGroupIngress cancelled", ctx.Err())
	default:
		return d.RevokeDBSecurityGroupIngress(in)
	}
}

func (d *RDSDouble) StartActivityStream(i0 *rds.StartActivityStreamInput) (r0 *rds.StartActivityStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartActivityStream", i0)
	r0, _ = returns[0].(*rds.StartActivityStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) StartActivityStreamRequest(i0 *rds.StartActivityStreamInput) (r0 *request.Request, r1 *rds.StartActivityStreamOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartActivityStreamRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.StartActivityStreamOutput)
	return
}

func (d *RDSDouble) StartActivityStreamWithContext(i0 context.Context, i1 *rds.StartActivityStreamInput, i2 ...request.Option) (r0 *rds.StartActivityStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartActivityStreamWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.StartActivityStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeStartActivityStreamWithContext(ctx context.Context, in *rds.StartActivityStreamInput, _ ...request.Option) (*rds.StartActivityStreamOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartActivityStream cancelled", ctx.Err())
	default:
		return d.StartActivityStream(in)
	}
}

func (d *RDSDouble) StartDBCluster(i0 *rds.StartDBClusterInput) (r0 *rds.StartDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartDBCluster", i0)
	r0, _ = returns[0].(*rds.StartDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) StartDBClusterRequest(i0 *rds.StartDBClusterInput) (r0 *request.Request, r1 *rds.StartDBClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartDBClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.StartDBClusterOutput)
	return
}

func (d *RDSDouble) StartDBClusterWithContext(i0 context.Context, i1 *rds.StartDBClusterInput, i2 ...request.Option) (r0 *rds.StartDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartDBClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.StartDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeStartDBClusterWithContext(ctx context.Context, in *rds.StartDBClusterInput, _ ...request.Option) (*rds.StartDBClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartDBCluster cancelled", ctx.Err())
	default:
		return d.StartDBCluster(in)
	}
}

func (d *RDSDouble) StartDBInstance(i0 *rds.StartDBInstanceInput) (r0 *rds.StartDBInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartDBInstance", i0)
	r0, _ = returns[0].(*rds.StartDBInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) StartDBInstanceRequest(i0 *rds.StartDBInstanceInput) (r0 *request.Request, r1 *rds.StartDBInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartDBInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.StartDBInstanceOutput)
	return
}

func (d *RDSDouble) StartDBInstanceWithContext(i0 context.Context, i1 *rds.StartDBInstanceInput, i2 ...request.Option) (r0 *rds.StartDBInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartDBInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.StartDBInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeStartDBInstanceWithContext(ctx context.Context, in *rds.StartDBInstanceInput, _ ...request.Option) (*rds.StartDBInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartDBInstance cancelled", ctx.Err())
	default:
		return d.StartDBInstance(in)
	}
}

func (d *RDSDouble) StartExportTask(i0 *rds.StartExportTaskInput) (r0 *rds.StartExportTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartExportTask", i0)
	r0, _ = returns[0].(*rds.StartExportTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) StartExportTaskRequest(i0 *rds.StartExportTaskInput) (r0 *request.Request, r1 *rds.StartExportTaskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartExportTaskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.StartExportTaskOutput)
	return
}

func (d *RDSDouble) StartExportTaskWithContext(i0 context.Context, i1 *rds.StartExportTaskInput, i2 ...request.Option) (r0 *rds.StartExportTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartExportTaskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.StartExportTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeStartExportTaskWithContext(ctx context.Context, in *rds.StartExportTaskInput, _ ...request.Option) (*rds.StartExportTaskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartExportTask cancelled", ctx.Err())
	default:
		return d.StartExportTask(in)
	}
}

func (d *RDSDouble) StopActivityStream(i0 *rds.StopActivityStreamInput) (r0 *rds.StopActivityStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopActivityStream", i0)
	r0, _ = returns[0].(*rds.StopActivityStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) StopActivityStreamRequest(i0 *rds.StopActivityStreamInput) (r0 *request.Request, r1 *rds.StopActivityStreamOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopActivityStreamRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.StopActivityStreamOutput)
	return
}

func (d *RDSDouble) StopActivityStreamWithContext(i0 context.Context, i1 *rds.StopActivityStreamInput, i2 ...request.Option) (r0 *rds.StopActivityStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopActivityStreamWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.StopActivityStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeStopActivityStreamWithContext(ctx context.Context, in *rds.StopActivityStreamInput, _ ...request.Option) (*rds.StopActivityStreamOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopActivityStream cancelled", ctx.Err())
	default:
		return d.StopActivityStream(in)
	}
}

func (d *RDSDouble) StopDBCluster(i0 *rds.StopDBClusterInput) (r0 *rds.StopDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopDBCluster", i0)
	r0, _ = returns[0].(*rds.StopDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) StopDBClusterRequest(i0 *rds.StopDBClusterInput) (r0 *request.Request, r1 *rds.StopDBClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopDBClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.StopDBClusterOutput)
	return
}

func (d *RDSDouble) StopDBClusterWithContext(i0 context.Context, i1 *rds.StopDBClusterInput, i2 ...request.Option) (r0 *rds.StopDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopDBClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.StopDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeStopDBClusterWithContext(ctx context.Context, in *rds.StopDBClusterInput, _ ...request.Option) (*rds.StopDBClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopDBCluster cancelled", ctx.Err())
	default:
		return d.StopDBCluster(in)
	}
}

func (d *RDSDouble) StopDBInstance(i0 *rds.StopDBInstanceInput) (r0 *rds.StopDBInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopDBInstance", i0)
	r0, _ = returns[0].(*rds.StopDBInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) StopDBInstanceRequest(i0 *rds.StopDBInstanceInput) (r0 *request.Request, r1 *rds.StopDBInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopDBInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rds.StopDBInstanceOutput)
	return
}

func (d *RDSDouble) StopDBInstanceWithContext(i0 context.Context, i1 *rds.StopDBInstanceInput, i2 ...request.Option) (r0 *rds.StopDBInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopDBInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rds.StopDBInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RDSDouble) fakeStopDBInstanceWithContext(ctx context.Context, in *rds.StopDBInstanceInput, _ ...request.Option) (*rds.StopDBInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopDBInstance cancelled", ctx.Err())
	default:
		return d.StopDBInstance(in)
	}
}

func (d *RDSDouble) WaitUntilDBClusterSnapshotAvailable(i0 *rds.DescribeDBClusterSnapshotsInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilDBClusterSnapshotAvailable", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeWaitUntilDBClusterSnapshotAvailable(in *rds.DescribeDBClusterSnapshotsInput) error {
	return d.WaitUntil("DBClusterSnapshotAvailable", waiters, in)
}

func (d *RDSDouble) WaitUntilDBClusterSnapshotAvailableWithContext(i0 context.Context, i1 *rds.DescribeDBClusterSnapshotsInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilDBClusterSnapshotAvailableWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeWaitUntilDBClusterSnapshotAvailableWithContext(ctx context.Context, in *rds.DescribeDBClusterSnapshotsInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("DBClusterSnapshotAvailable", waiters, ctx, in, waitOption...)
}

func (d *RDSDouble) WaitUntilDBClusterSnapshotDeleted(i0 *rds.DescribeDBClusterSnapshotsInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilDBClusterSnapshotDeleted", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeWaitUntilDBClusterSnapshotDeleted(in *rds.DescribeDBClusterSnapshotsInput) error {
	return d.WaitUntil("DBClusterSnapshotDeleted", waiters, in)
}

func (d *RDSDouble) WaitUntilDBClusterSnapshotDeletedWithContext(i0 context.Context, i1 *rds.DescribeDBClusterSnapshotsInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilDBClusterSnapshotDeletedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeWaitUntilDBClusterSnapshotDeletedWithContext(ctx context.Context, in *rds.DescribeDBClusterSnapshotsInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("DBClusterSnapshotDeleted", waiters, ctx, in, waitOption...)
}

func (d *RDSDouble) WaitUntilDBInstanceAvailable(i0 *rds.DescribeDBInstancesInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilDBInstanceAvailable", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeWaitUntilDBInstanceAvailable(in *rds.DescribeDBInstancesInput) error {
	return d.WaitUntil("DBInstanceAvailable", waiters, in)
}

func (d *RDSDouble) WaitUntilDBInstanceAvailableWithContext(i0 context.Context, i1 *rds.DescribeDBInstancesInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilDBInstanceAvailableWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeWaitUntilDBInstanceAvailableWithContext(ctx context.Context, in *rds.DescribeDBInstancesInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("DBInstanceAvailable", waiters, ctx, in, waitOption...)
}

func (d *RDSDouble) WaitUntilDBInstanceDeleted(i0 *rds.DescribeDBInstancesInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilDBInstanceDeleted", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeWaitUntilDBInstanceDeleted(in *rds.DescribeDBInstancesInput) error {
	return d.WaitUntil("DBInstanceDeleted", waiters, in)
}

func (d *RDSDouble) WaitUntilDBInstanceDeletedWithContext(i0 context.Context, i1 *rds.DescribeDBInstancesInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilDBInstanceDeletedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeWaitUntilDBInstanceDeletedWithContext(ctx context.Context, in *rds.DescribeDBInstancesInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("DBInstanceDeleted", waiters, ctx, in, waitOption...)
}

func (d *RDSDouble) WaitUntilDBSnapshotAvailable(i0 *rds.DescribeDBSnapshotsInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilDBSnapshotAvailable", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeWaitUntilDBSnapshotAvailable(in *rds.DescribeDBSnapshotsInput) error {
	return d.WaitUntil("DBSnapshotAvailable", waiters, in)
}

func (d *RDSDouble) WaitUntilDBSnapshotAvailableWithContext(i0 context.Context, i1 *rds.DescribeDBSnapshotsInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilDBSnapshotAvailableWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeWaitUntilDBSnapshotAvailableWithContext(ctx context.Context, in *rds.DescribeDBSnapshotsInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("DBSnapshotAvailable", waiters, ctx, in, waitOption...)
}

func (d *RDSDouble) WaitUntilDBSnapshotDeleted(i0 *rds.DescribeDBSnapshotsInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilDBSnapshotDeleted", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeWaitUntilDBSnapshotDeleted(in *rds.DescribeDBSnapshotsInput) error {
	return d.WaitUntil("DBSnapshotDeleted", waiters, in)
}

func (d *RDSDouble) WaitUntilDBSnapshotDeletedWithContext(i0 context.Context, i1 *rds.DescribeDBSnapshotsInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilDBSnapshotDeletedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *RDSDouble) fakeWaitUntilDBSnapshotDeletedWithContext(ctx context.Context, in *rds.DescribeDBSnapshotsInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("DBSnapshotDeleted", waiters, ctx, in, waitOption...)
}
