// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:15:27+11:00

// Package translatedouble provides a TestDouble implementation of translateiface.TranslateAPI
package translatedouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/translate"
	"github.com/aws/aws-sdk-go/service/translate/translateiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// TranslateDouble is TestDouble for translateiface.TranslateAPI
type TranslateDouble struct {
	translateiface.TranslateAPI
	*awsdouble.AWSTestDouble
}

// Constructor for TranslateDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *TranslateDouble {
	result := &TranslateDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*translateiface.TranslateAPI)(nil), configurators...)
	return result
}

func (d *TranslateDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *TranslateDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "DeleteTerminologyWithContext":
		return m.Fake(d.fakeDeleteTerminologyWithContext)

	case "DescribeTextTranslationJobWithContext":
		return m.Fake(d.fakeDescribeTextTranslationJobWithContext)

	case "GetTerminologyWithContext":
		return m.Fake(d.fakeGetTerminologyWithContext)

	case "ImportTerminologyWithContext":
		return m.Fake(d.fakeImportTerminologyWithContext)

	case "ListTerminologiesPages":
		return m.Fake(d.fakeListTerminologiesPages)

	case "ListTerminologiesPagesWithContext":
		return m.Fake(d.fakeListTerminologiesPagesWithContext)

	case "ListTerminologiesWithContext":
		return m.Fake(d.fakeListTerminologiesWithContext)

	case "ListTextTranslationJobsPages":
		return m.Fake(d.fakeListTextTranslationJobsPages)

	case "ListTextTranslationJobsPagesWithContext":
		return m.Fake(d.fakeListTextTranslationJobsPagesWithContext)

	case "ListTextTranslationJobsWithContext":
		return m.Fake(d.fakeListTextTranslationJobsWithContext)

	case "StartTextTranslationJobWithContext":
		return m.Fake(d.fakeStartTextTranslationJobWithContext)

	case "StopTextTranslationJobWithContext":
		return m.Fake(d.fakeStopTextTranslationJobWithContext)

	case "TextWithContext":
		return m.Fake(d.fakeTextWithContext)

	default:
		return nil
	}
}

func (d *TranslateDouble) DeleteTerminology(i0 *translate.DeleteTerminologyInput) (r0 *translate.DeleteTerminologyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTerminology", i0)
	r0, _ = returns[0].(*translate.DeleteTerminologyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranslateDouble) DeleteTerminologyRequest(i0 *translate.DeleteTerminologyInput) (r0 *request.Request, r1 *translate.DeleteTerminologyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTerminologyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*translate.DeleteTerminologyOutput)
	return
}

func (d *TranslateDouble) DeleteTerminologyWithContext(i0 context.Context, i1 *translate.DeleteTerminologyInput, i2 ...request.Option) (r0 *translate.DeleteTerminologyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTerminologyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*translate.DeleteTerminologyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranslateDouble) fakeDeleteTerminologyWithContext(ctx context.Context, in *translate.DeleteTerminologyInput, _ ...request.Option) (*translate.DeleteTerminologyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTerminology cancelled", ctx.Err())
	default:
		return d.DeleteTerminology(in)
	}
}

func (d *TranslateDouble) DescribeTextTranslationJob(i0 *translate.DescribeTextTranslationJobInput) (r0 *translate.DescribeTextTranslationJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTextTranslationJob", i0)
	r0, _ = returns[0].(*translate.DescribeTextTranslationJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranslateDouble) DescribeTextTranslationJobRequest(i0 *translate.DescribeTextTranslationJobInput) (r0 *request.Request, r1 *translate.DescribeTextTranslationJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTextTranslationJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*translate.DescribeTextTranslationJobOutput)
	return
}

func (d *TranslateDouble) DescribeTextTranslationJobWithContext(i0 context.Context, i1 *translate.DescribeTextTranslationJobInput, i2 ...request.Option) (r0 *translate.DescribeTextTranslationJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTextTranslationJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*translate.DescribeTextTranslationJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranslateDouble) fakeDescribeTextTranslationJobWithContext(ctx context.Context, in *translate.DescribeTextTranslationJobInput, _ ...request.Option) (*translate.DescribeTextTranslationJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTextTranslationJob cancelled", ctx.Err())
	default:
		return d.DescribeTextTranslationJob(in)
	}
}

func (d *TranslateDouble) GetTerminology(i0 *translate.GetTerminologyInput) (r0 *translate.GetTerminologyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTerminology", i0)
	r0, _ = returns[0].(*translate.GetTerminologyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranslateDouble) GetTerminologyRequest(i0 *translate.GetTerminologyInput) (r0 *request.Request, r1 *translate.GetTerminologyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTerminologyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*translate.GetTerminologyOutput)
	return
}

func (d *TranslateDouble) GetTerminologyWithContext(i0 context.Context, i1 *translate.GetTerminologyInput, i2 ...request.Option) (r0 *translate.GetTerminologyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTerminologyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*translate.GetTerminologyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranslateDouble) fakeGetTerminologyWithContext(ctx context.Context, in *translate.GetTerminologyInput, _ ...request.Option) (*translate.GetTerminologyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetTerminology cancelled", ctx.Err())
	default:
		return d.GetTerminology(in)
	}
}

func (d *TranslateDouble) ImportTerminology(i0 *translate.ImportTerminologyInput) (r0 *translate.ImportTerminologyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportTerminology", i0)
	r0, _ = returns[0].(*translate.ImportTerminologyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranslateDouble) ImportTerminologyRequest(i0 *translate.ImportTerminologyInput) (r0 *request.Request, r1 *translate.ImportTerminologyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportTerminologyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*translate.ImportTerminologyOutput)
	return
}

func (d *TranslateDouble) ImportTerminologyWithContext(i0 context.Context, i1 *translate.ImportTerminologyInput, i2 ...request.Option) (r0 *translate.ImportTerminologyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportTerminologyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*translate.ImportTerminologyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranslateDouble) fakeImportTerminologyWithContext(ctx context.Context, in *translate.ImportTerminologyInput, _ ...request.Option) (*translate.ImportTerminologyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ImportTerminology cancelled", ctx.Err())
	default:
		return d.ImportTerminology(in)
	}
}

func (d *TranslateDouble) ListTerminologies(i0 *translate.ListTerminologiesInput) (r0 *translate.ListTerminologiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTerminologies", i0)
	r0, _ = returns[0].(*translate.ListTerminologiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranslateDouble) ListTerminologiesPages(i0 *translate.ListTerminologiesInput, i1 func(*translate.ListTerminologiesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTerminologiesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *TranslateDouble) fakeListTerminologiesPages(in *translate.ListTerminologiesInput, pager func(*translate.ListTerminologiesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTerminologies", paginators, in, pager)
}

func (d *TranslateDouble) ListTerminologiesPagesWithContext(i0 context.Context, i1 *translate.ListTerminologiesInput, i2 func(*translate.ListTerminologiesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTerminologiesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *TranslateDouble) fakeListTerminologiesPagesWithContext(ctx context.Context, in *translate.ListTerminologiesInput, pager func(*translate.ListTerminologiesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTerminologies", paginators, ctx, in, pager, options...)
}

func (d *TranslateDouble) ListTerminologiesRequest(i0 *translate.ListTerminologiesInput) (r0 *request.Request, r1 *translate.ListTerminologiesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTerminologiesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*translate.ListTerminologiesOutput)
	return
}

func (d *TranslateDouble) ListTerminologiesWithContext(i0 context.Context, i1 *translate.ListTerminologiesInput, i2 ...request.Option) (r0 *translate.ListTerminologiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTerminologiesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*translate.ListTerminologiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranslateDouble) fakeListTerminologiesWithContext(ctx context.Context, in *translate.ListTerminologiesInput, _ ...request.Option) (*translate.ListTerminologiesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTerminologies cancelled", ctx.Err())
	default:
		return d.ListTerminologies(in)
	}
}

func (d *TranslateDouble) ListTextTranslationJobs(i0 *translate.ListTextTranslationJobsInput) (r0 *translate.ListTextTranslationJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTextTranslationJobs", i0)
	r0, _ = returns[0].(*translate.ListTextTranslationJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranslateDouble) ListTextTranslationJobsPages(i0 *translate.ListTextTranslationJobsInput, i1 func(*translate.ListTextTranslationJobsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTextTranslationJobsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *TranslateDouble) fakeListTextTranslationJobsPages(in *translate.ListTextTranslationJobsInput, pager func(*translate.ListTextTranslationJobsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTextTranslationJobs", paginators, in, pager)
}

func (d *TranslateDouble) ListTextTranslationJobsPagesWithContext(i0 context.Context, i1 *translate.ListTextTranslationJobsInput, i2 func(*translate.ListTextTranslationJobsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTextTranslationJobsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *TranslateDouble) fakeListTextTranslationJobsPagesWithContext(ctx context.Context, in *translate.ListTextTranslationJobsInput, pager func(*translate.ListTextTranslationJobsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTextTranslationJobs", paginators, ctx, in, pager, options...)
}

func (d *TranslateDouble) ListTextTranslationJobsRequest(i0 *translate.ListTextTranslationJobsInput) (r0 *request.Request, r1 *translate.ListTextTranslationJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTextTranslationJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*translate.ListTextTranslationJobsOutput)
	return
}

func (d *TranslateDouble) ListTextTranslationJobsWithContext(i0 context.Context, i1 *translate.ListTextTranslationJobsInput, i2 ...request.Option) (r0 *translate.ListTextTranslationJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTextTranslationJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*translate.ListTextTranslationJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranslateDouble) fakeListTextTranslationJobsWithContext(ctx context.Context, in *translate.ListTextTranslationJobsInput, _ ...request.Option) (*translate.ListTextTranslationJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTextTranslationJobs cancelled", ctx.Err())
	default:
		return d.ListTextTranslationJobs(in)
	}
}

func (d *TranslateDouble) StartTextTranslationJob(i0 *translate.StartTextTranslationJobInput) (r0 *translate.StartTextTranslationJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartTextTranslationJob", i0)
	r0, _ = returns[0].(*translate.StartTextTranslationJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranslateDouble) StartTextTranslationJobRequest(i0 *translate.StartTextTranslationJobInput) (r0 *request.Request, r1 *translate.StartTextTranslationJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartTextTranslationJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*translate.StartTextTranslationJobOutput)
	return
}

func (d *TranslateDouble) StartTextTranslationJobWithContext(i0 context.Context, i1 *translate.StartTextTranslationJobInput, i2 ...request.Option) (r0 *translate.StartTextTranslationJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartTextTranslationJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*translate.StartTextTranslationJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranslateDouble) fakeStartTextTranslationJobWithContext(ctx context.Context, in *translate.StartTextTranslationJobInput, _ ...request.Option) (*translate.StartTextTranslationJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartTextTranslationJob cancelled", ctx.Err())
	default:
		return d.StartTextTranslationJob(in)
	}
}

func (d *TranslateDouble) StopTextTranslationJob(i0 *translate.StopTextTranslationJobInput) (r0 *translate.StopTextTranslationJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopTextTranslationJob", i0)
	r0, _ = returns[0].(*translate.StopTextTranslationJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranslateDouble) StopTextTranslationJobRequest(i0 *translate.StopTextTranslationJobInput) (r0 *request.Request, r1 *translate.StopTextTranslationJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopTextTranslationJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*translate.StopTextTranslationJobOutput)
	return
}

func (d *TranslateDouble) StopTextTranslationJobWithContext(i0 context.Context, i1 *translate.StopTextTranslationJobInput, i2 ...request.Option) (r0 *translate.StopTextTranslationJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopTextTranslationJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*translate.StopTextTranslationJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranslateDouble) fakeStopTextTranslationJobWithContext(ctx context.Context, in *translate.StopTextTranslationJobInput, _ ...request.Option) (*translate.StopTextTranslationJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopTextTranslationJob cancelled", ctx.Err())
	default:
		return d.StopTextTranslationJob(in)
	}
}

func (d *TranslateDouble) Text(i0 *translate.TextInput) (r0 *translate.TextOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("Text", i0)
	r0, _ = returns[0].(*translate.TextOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranslateDouble) TextRequest(i0 *translate.TextInput) (r0 *request.Request, r1 *translate.TextOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TextRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*translate.TextOutput)
	return
}

func (d *TranslateDouble) TextWithContext(i0 context.Context, i1 *translate.TextInput, i2 ...request.Option) (r0 *translate.TextOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TextWithContext", i0, i1, i2)
	r0, _ = returns[0].(*translate.TextOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranslateDouble) fakeTextWithContext(ctx context.Context, in *translate.TextInput, _ ...request.Option) (*translate.TextOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "Text cancelled", ctx.Err())
	default:
		return d.Text(in)
	}
}
