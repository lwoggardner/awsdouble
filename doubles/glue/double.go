// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:13:00+11:00

// Package gluedouble provides a TestDouble implementation of glueiface.GlueAPI
package gluedouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/glue"
	"github.com/aws/aws-sdk-go/service/glue/glueiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// GlueDouble is TestDouble for glueiface.GlueAPI
type GlueDouble struct {
	glueiface.GlueAPI
	*awsdouble.AWSTestDouble
}

// Constructor for GlueDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *GlueDouble {
	result := &GlueDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*glueiface.GlueAPI)(nil), configurators...)
	return result
}

func (d *GlueDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *GlueDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "BatchCreatePartitionWithContext":
		return m.Fake(d.fakeBatchCreatePartitionWithContext)

	case "BatchDeleteConnectionWithContext":
		return m.Fake(d.fakeBatchDeleteConnectionWithContext)

	case "BatchDeletePartitionWithContext":
		return m.Fake(d.fakeBatchDeletePartitionWithContext)

	case "BatchDeleteTableVersionWithContext":
		return m.Fake(d.fakeBatchDeleteTableVersionWithContext)

	case "BatchDeleteTableWithContext":
		return m.Fake(d.fakeBatchDeleteTableWithContext)

	case "BatchGetCrawlersWithContext":
		return m.Fake(d.fakeBatchGetCrawlersWithContext)

	case "BatchGetDevEndpointsWithContext":
		return m.Fake(d.fakeBatchGetDevEndpointsWithContext)

	case "BatchGetJobsWithContext":
		return m.Fake(d.fakeBatchGetJobsWithContext)

	case "BatchGetPartitionWithContext":
		return m.Fake(d.fakeBatchGetPartitionWithContext)

	case "BatchGetTriggersWithContext":
		return m.Fake(d.fakeBatchGetTriggersWithContext)

	case "BatchGetWorkflowsWithContext":
		return m.Fake(d.fakeBatchGetWorkflowsWithContext)

	case "BatchStopJobRunWithContext":
		return m.Fake(d.fakeBatchStopJobRunWithContext)

	case "CancelMLTaskRunWithContext":
		return m.Fake(d.fakeCancelMLTaskRunWithContext)

	case "CreateClassifierWithContext":
		return m.Fake(d.fakeCreateClassifierWithContext)

	case "CreateConnectionWithContext":
		return m.Fake(d.fakeCreateConnectionWithContext)

	case "CreateCrawlerWithContext":
		return m.Fake(d.fakeCreateCrawlerWithContext)

	case "CreateDatabaseWithContext":
		return m.Fake(d.fakeCreateDatabaseWithContext)

	case "CreateDevEndpointWithContext":
		return m.Fake(d.fakeCreateDevEndpointWithContext)

	case "CreateJobWithContext":
		return m.Fake(d.fakeCreateJobWithContext)

	case "CreateMLTransformWithContext":
		return m.Fake(d.fakeCreateMLTransformWithContext)

	case "CreatePartitionWithContext":
		return m.Fake(d.fakeCreatePartitionWithContext)

	case "CreateScriptWithContext":
		return m.Fake(d.fakeCreateScriptWithContext)

	case "CreateSecurityConfigurationWithContext":
		return m.Fake(d.fakeCreateSecurityConfigurationWithContext)

	case "CreateTableWithContext":
		return m.Fake(d.fakeCreateTableWithContext)

	case "CreateTriggerWithContext":
		return m.Fake(d.fakeCreateTriggerWithContext)

	case "CreateUserDefinedFunctionWithContext":
		return m.Fake(d.fakeCreateUserDefinedFunctionWithContext)

	case "CreateWorkflowWithContext":
		return m.Fake(d.fakeCreateWorkflowWithContext)

	case "DeleteClassifierWithContext":
		return m.Fake(d.fakeDeleteClassifierWithContext)

	case "DeleteConnectionWithContext":
		return m.Fake(d.fakeDeleteConnectionWithContext)

	case "DeleteCrawlerWithContext":
		return m.Fake(d.fakeDeleteCrawlerWithContext)

	case "DeleteDatabaseWithContext":
		return m.Fake(d.fakeDeleteDatabaseWithContext)

	case "DeleteDevEndpointWithContext":
		return m.Fake(d.fakeDeleteDevEndpointWithContext)

	case "DeleteJobWithContext":
		return m.Fake(d.fakeDeleteJobWithContext)

	case "DeleteMLTransformWithContext":
		return m.Fake(d.fakeDeleteMLTransformWithContext)

	case "DeletePartitionWithContext":
		return m.Fake(d.fakeDeletePartitionWithContext)

	case "DeleteResourcePolicyWithContext":
		return m.Fake(d.fakeDeleteResourcePolicyWithContext)

	case "DeleteSecurityConfigurationWithContext":
		return m.Fake(d.fakeDeleteSecurityConfigurationWithContext)

	case "DeleteTableVersionWithContext":
		return m.Fake(d.fakeDeleteTableVersionWithContext)

	case "DeleteTableWithContext":
		return m.Fake(d.fakeDeleteTableWithContext)

	case "DeleteTriggerWithContext":
		return m.Fake(d.fakeDeleteTriggerWithContext)

	case "DeleteUserDefinedFunctionWithContext":
		return m.Fake(d.fakeDeleteUserDefinedFunctionWithContext)

	case "DeleteWorkflowWithContext":
		return m.Fake(d.fakeDeleteWorkflowWithContext)

	case "GetCatalogImportStatusWithContext":
		return m.Fake(d.fakeGetCatalogImportStatusWithContext)

	case "GetClassifierWithContext":
		return m.Fake(d.fakeGetClassifierWithContext)

	case "GetClassifiersPages":
		return m.Fake(d.fakeGetClassifiersPages)

	case "GetClassifiersPagesWithContext":
		return m.Fake(d.fakeGetClassifiersPagesWithContext)

	case "GetClassifiersWithContext":
		return m.Fake(d.fakeGetClassifiersWithContext)

	case "GetConnectionWithContext":
		return m.Fake(d.fakeGetConnectionWithContext)

	case "GetConnectionsPages":
		return m.Fake(d.fakeGetConnectionsPages)

	case "GetConnectionsPagesWithContext":
		return m.Fake(d.fakeGetConnectionsPagesWithContext)

	case "GetConnectionsWithContext":
		return m.Fake(d.fakeGetConnectionsWithContext)

	case "GetCrawlerMetricsPages":
		return m.Fake(d.fakeGetCrawlerMetricsPages)

	case "GetCrawlerMetricsPagesWithContext":
		return m.Fake(d.fakeGetCrawlerMetricsPagesWithContext)

	case "GetCrawlerMetricsWithContext":
		return m.Fake(d.fakeGetCrawlerMetricsWithContext)

	case "GetCrawlerWithContext":
		return m.Fake(d.fakeGetCrawlerWithContext)

	case "GetCrawlersPages":
		return m.Fake(d.fakeGetCrawlersPages)

	case "GetCrawlersPagesWithContext":
		return m.Fake(d.fakeGetCrawlersPagesWithContext)

	case "GetCrawlersWithContext":
		return m.Fake(d.fakeGetCrawlersWithContext)

	case "GetDataCatalogEncryptionSettingsWithContext":
		return m.Fake(d.fakeGetDataCatalogEncryptionSettingsWithContext)

	case "GetDatabaseWithContext":
		return m.Fake(d.fakeGetDatabaseWithContext)

	case "GetDatabasesPages":
		return m.Fake(d.fakeGetDatabasesPages)

	case "GetDatabasesPagesWithContext":
		return m.Fake(d.fakeGetDatabasesPagesWithContext)

	case "GetDatabasesWithContext":
		return m.Fake(d.fakeGetDatabasesWithContext)

	case "GetDataflowGraphWithContext":
		return m.Fake(d.fakeGetDataflowGraphWithContext)

	case "GetDevEndpointWithContext":
		return m.Fake(d.fakeGetDevEndpointWithContext)

	case "GetDevEndpointsPages":
		return m.Fake(d.fakeGetDevEndpointsPages)

	case "GetDevEndpointsPagesWithContext":
		return m.Fake(d.fakeGetDevEndpointsPagesWithContext)

	case "GetDevEndpointsWithContext":
		return m.Fake(d.fakeGetDevEndpointsWithContext)

	case "GetJobBookmarkWithContext":
		return m.Fake(d.fakeGetJobBookmarkWithContext)

	case "GetJobRunWithContext":
		return m.Fake(d.fakeGetJobRunWithContext)

	case "GetJobRunsPages":
		return m.Fake(d.fakeGetJobRunsPages)

	case "GetJobRunsPagesWithContext":
		return m.Fake(d.fakeGetJobRunsPagesWithContext)

	case "GetJobRunsWithContext":
		return m.Fake(d.fakeGetJobRunsWithContext)

	case "GetJobWithContext":
		return m.Fake(d.fakeGetJobWithContext)

	case "GetJobsPages":
		return m.Fake(d.fakeGetJobsPages)

	case "GetJobsPagesWithContext":
		return m.Fake(d.fakeGetJobsPagesWithContext)

	case "GetJobsWithContext":
		return m.Fake(d.fakeGetJobsWithContext)

	case "GetMLTaskRunWithContext":
		return m.Fake(d.fakeGetMLTaskRunWithContext)

	case "GetMLTaskRunsPages":
		return m.Fake(d.fakeGetMLTaskRunsPages)

	case "GetMLTaskRunsPagesWithContext":
		return m.Fake(d.fakeGetMLTaskRunsPagesWithContext)

	case "GetMLTaskRunsWithContext":
		return m.Fake(d.fakeGetMLTaskRunsWithContext)

	case "GetMLTransformWithContext":
		return m.Fake(d.fakeGetMLTransformWithContext)

	case "GetMLTransformsPages":
		return m.Fake(d.fakeGetMLTransformsPages)

	case "GetMLTransformsPagesWithContext":
		return m.Fake(d.fakeGetMLTransformsPagesWithContext)

	case "GetMLTransformsWithContext":
		return m.Fake(d.fakeGetMLTransformsWithContext)

	case "GetMappingWithContext":
		return m.Fake(d.fakeGetMappingWithContext)

	case "GetPartitionWithContext":
		return m.Fake(d.fakeGetPartitionWithContext)

	case "GetPartitionsPages":
		return m.Fake(d.fakeGetPartitionsPages)

	case "GetPartitionsPagesWithContext":
		return m.Fake(d.fakeGetPartitionsPagesWithContext)

	case "GetPartitionsWithContext":
		return m.Fake(d.fakeGetPartitionsWithContext)

	case "GetPlanWithContext":
		return m.Fake(d.fakeGetPlanWithContext)

	case "GetResourcePolicyWithContext":
		return m.Fake(d.fakeGetResourcePolicyWithContext)

	case "GetSecurityConfigurationWithContext":
		return m.Fake(d.fakeGetSecurityConfigurationWithContext)

	case "GetSecurityConfigurationsPages":
		return m.Fake(d.fakeGetSecurityConfigurationsPages)

	case "GetSecurityConfigurationsPagesWithContext":
		return m.Fake(d.fakeGetSecurityConfigurationsPagesWithContext)

	case "GetSecurityConfigurationsWithContext":
		return m.Fake(d.fakeGetSecurityConfigurationsWithContext)

	case "GetTableVersionWithContext":
		return m.Fake(d.fakeGetTableVersionWithContext)

	case "GetTableVersionsPages":
		return m.Fake(d.fakeGetTableVersionsPages)

	case "GetTableVersionsPagesWithContext":
		return m.Fake(d.fakeGetTableVersionsPagesWithContext)

	case "GetTableVersionsWithContext":
		return m.Fake(d.fakeGetTableVersionsWithContext)

	case "GetTableWithContext":
		return m.Fake(d.fakeGetTableWithContext)

	case "GetTablesPages":
		return m.Fake(d.fakeGetTablesPages)

	case "GetTablesPagesWithContext":
		return m.Fake(d.fakeGetTablesPagesWithContext)

	case "GetTablesWithContext":
		return m.Fake(d.fakeGetTablesWithContext)

	case "GetTagsWithContext":
		return m.Fake(d.fakeGetTagsWithContext)

	case "GetTriggerWithContext":
		return m.Fake(d.fakeGetTriggerWithContext)

	case "GetTriggersPages":
		return m.Fake(d.fakeGetTriggersPages)

	case "GetTriggersPagesWithContext":
		return m.Fake(d.fakeGetTriggersPagesWithContext)

	case "GetTriggersWithContext":
		return m.Fake(d.fakeGetTriggersWithContext)

	case "GetUserDefinedFunctionWithContext":
		return m.Fake(d.fakeGetUserDefinedFunctionWithContext)

	case "GetUserDefinedFunctionsPages":
		return m.Fake(d.fakeGetUserDefinedFunctionsPages)

	case "GetUserDefinedFunctionsPagesWithContext":
		return m.Fake(d.fakeGetUserDefinedFunctionsPagesWithContext)

	case "GetUserDefinedFunctionsWithContext":
		return m.Fake(d.fakeGetUserDefinedFunctionsWithContext)

	case "GetWorkflowRunPropertiesWithContext":
		return m.Fake(d.fakeGetWorkflowRunPropertiesWithContext)

	case "GetWorkflowRunWithContext":
		return m.Fake(d.fakeGetWorkflowRunWithContext)

	case "GetWorkflowRunsPages":
		return m.Fake(d.fakeGetWorkflowRunsPages)

	case "GetWorkflowRunsPagesWithContext":
		return m.Fake(d.fakeGetWorkflowRunsPagesWithContext)

	case "GetWorkflowRunsWithContext":
		return m.Fake(d.fakeGetWorkflowRunsWithContext)

	case "GetWorkflowWithContext":
		return m.Fake(d.fakeGetWorkflowWithContext)

	case "ImportCatalogToGlueWithContext":
		return m.Fake(d.fakeImportCatalogToGlueWithContext)

	case "ListCrawlersPages":
		return m.Fake(d.fakeListCrawlersPages)

	case "ListCrawlersPagesWithContext":
		return m.Fake(d.fakeListCrawlersPagesWithContext)

	case "ListCrawlersWithContext":
		return m.Fake(d.fakeListCrawlersWithContext)

	case "ListDevEndpointsPages":
		return m.Fake(d.fakeListDevEndpointsPages)

	case "ListDevEndpointsPagesWithContext":
		return m.Fake(d.fakeListDevEndpointsPagesWithContext)

	case "ListDevEndpointsWithContext":
		return m.Fake(d.fakeListDevEndpointsWithContext)

	case "ListJobsPages":
		return m.Fake(d.fakeListJobsPages)

	case "ListJobsPagesWithContext":
		return m.Fake(d.fakeListJobsPagesWithContext)

	case "ListJobsWithContext":
		return m.Fake(d.fakeListJobsWithContext)

	case "ListTriggersPages":
		return m.Fake(d.fakeListTriggersPages)

	case "ListTriggersPagesWithContext":
		return m.Fake(d.fakeListTriggersPagesWithContext)

	case "ListTriggersWithContext":
		return m.Fake(d.fakeListTriggersWithContext)

	case "ListWorkflowsPages":
		return m.Fake(d.fakeListWorkflowsPages)

	case "ListWorkflowsPagesWithContext":
		return m.Fake(d.fakeListWorkflowsPagesWithContext)

	case "ListWorkflowsWithContext":
		return m.Fake(d.fakeListWorkflowsWithContext)

	case "PutDataCatalogEncryptionSettingsWithContext":
		return m.Fake(d.fakePutDataCatalogEncryptionSettingsWithContext)

	case "PutResourcePolicyWithContext":
		return m.Fake(d.fakePutResourcePolicyWithContext)

	case "PutWorkflowRunPropertiesWithContext":
		return m.Fake(d.fakePutWorkflowRunPropertiesWithContext)

	case "ResetJobBookmarkWithContext":
		return m.Fake(d.fakeResetJobBookmarkWithContext)

	case "SearchTablesPages":
		return m.Fake(d.fakeSearchTablesPages)

	case "SearchTablesPagesWithContext":
		return m.Fake(d.fakeSearchTablesPagesWithContext)

	case "SearchTablesWithContext":
		return m.Fake(d.fakeSearchTablesWithContext)

	case "StartCrawlerScheduleWithContext":
		return m.Fake(d.fakeStartCrawlerScheduleWithContext)

	case "StartCrawlerWithContext":
		return m.Fake(d.fakeStartCrawlerWithContext)

	case "StartExportLabelsTaskRunWithContext":
		return m.Fake(d.fakeStartExportLabelsTaskRunWithContext)

	case "StartImportLabelsTaskRunWithContext":
		return m.Fake(d.fakeStartImportLabelsTaskRunWithContext)

	case "StartJobRunWithContext":
		return m.Fake(d.fakeStartJobRunWithContext)

	case "StartMLEvaluationTaskRunWithContext":
		return m.Fake(d.fakeStartMLEvaluationTaskRunWithContext)

	case "StartMLLabelingSetGenerationTaskRunWithContext":
		return m.Fake(d.fakeStartMLLabelingSetGenerationTaskRunWithContext)

	case "StartTriggerWithContext":
		return m.Fake(d.fakeStartTriggerWithContext)

	case "StartWorkflowRunWithContext":
		return m.Fake(d.fakeStartWorkflowRunWithContext)

	case "StopCrawlerScheduleWithContext":
		return m.Fake(d.fakeStopCrawlerScheduleWithContext)

	case "StopCrawlerWithContext":
		return m.Fake(d.fakeStopCrawlerWithContext)

	case "StopTriggerWithContext":
		return m.Fake(d.fakeStopTriggerWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateClassifierWithContext":
		return m.Fake(d.fakeUpdateClassifierWithContext)

	case "UpdateConnectionWithContext":
		return m.Fake(d.fakeUpdateConnectionWithContext)

	case "UpdateCrawlerScheduleWithContext":
		return m.Fake(d.fakeUpdateCrawlerScheduleWithContext)

	case "UpdateCrawlerWithContext":
		return m.Fake(d.fakeUpdateCrawlerWithContext)

	case "UpdateDatabaseWithContext":
		return m.Fake(d.fakeUpdateDatabaseWithContext)

	case "UpdateDevEndpointWithContext":
		return m.Fake(d.fakeUpdateDevEndpointWithContext)

	case "UpdateJobWithContext":
		return m.Fake(d.fakeUpdateJobWithContext)

	case "UpdateMLTransformWithContext":
		return m.Fake(d.fakeUpdateMLTransformWithContext)

	case "UpdatePartitionWithContext":
		return m.Fake(d.fakeUpdatePartitionWithContext)

	case "UpdateTableWithContext":
		return m.Fake(d.fakeUpdateTableWithContext)

	case "UpdateTriggerWithContext":
		return m.Fake(d.fakeUpdateTriggerWithContext)

	case "UpdateUserDefinedFunctionWithContext":
		return m.Fake(d.fakeUpdateUserDefinedFunctionWithContext)

	case "UpdateWorkflowWithContext":
		return m.Fake(d.fakeUpdateWorkflowWithContext)

	default:
		return nil
	}
}

func (d *GlueDouble) BatchCreatePartition(i0 *glue.BatchCreatePartitionInput) (r0 *glue.BatchCreatePartitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchCreatePartition", i0)
	r0, _ = returns[0].(*glue.BatchCreatePartitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) BatchCreatePartitionRequest(i0 *glue.BatchCreatePartitionInput) (r0 *request.Request, r1 *glue.BatchCreatePartitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchCreatePartitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.BatchCreatePartitionOutput)
	return
}

func (d *GlueDouble) BatchCreatePartitionWithContext(i0 context.Context, i1 *glue.BatchCreatePartitionInput, i2 ...request.Option) (r0 *glue.BatchCreatePartitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchCreatePartitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.BatchCreatePartitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeBatchCreatePartitionWithContext(ctx context.Context, in *glue.BatchCreatePartitionInput, _ ...request.Option) (*glue.BatchCreatePartitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchCreatePartition cancelled", ctx.Err())
	default:
		return d.BatchCreatePartition(in)
	}
}

func (d *GlueDouble) BatchDeleteConnection(i0 *glue.BatchDeleteConnectionInput) (r0 *glue.BatchDeleteConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDeleteConnection", i0)
	r0, _ = returns[0].(*glue.BatchDeleteConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) BatchDeleteConnectionRequest(i0 *glue.BatchDeleteConnectionInput) (r0 *request.Request, r1 *glue.BatchDeleteConnectionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDeleteConnectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.BatchDeleteConnectionOutput)
	return
}

func (d *GlueDouble) BatchDeleteConnectionWithContext(i0 context.Context, i1 *glue.BatchDeleteConnectionInput, i2 ...request.Option) (r0 *glue.BatchDeleteConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDeleteConnectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.BatchDeleteConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeBatchDeleteConnectionWithContext(ctx context.Context, in *glue.BatchDeleteConnectionInput, _ ...request.Option) (*glue.BatchDeleteConnectionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchDeleteConnection cancelled", ctx.Err())
	default:
		return d.BatchDeleteConnection(in)
	}
}

func (d *GlueDouble) BatchDeletePartition(i0 *glue.BatchDeletePartitionInput) (r0 *glue.BatchDeletePartitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDeletePartition", i0)
	r0, _ = returns[0].(*glue.BatchDeletePartitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) BatchDeletePartitionRequest(i0 *glue.BatchDeletePartitionInput) (r0 *request.Request, r1 *glue.BatchDeletePartitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDeletePartitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.BatchDeletePartitionOutput)
	return
}

func (d *GlueDouble) BatchDeletePartitionWithContext(i0 context.Context, i1 *glue.BatchDeletePartitionInput, i2 ...request.Option) (r0 *glue.BatchDeletePartitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDeletePartitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.BatchDeletePartitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeBatchDeletePartitionWithContext(ctx context.Context, in *glue.BatchDeletePartitionInput, _ ...request.Option) (*glue.BatchDeletePartitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchDeletePartition cancelled", ctx.Err())
	default:
		return d.BatchDeletePartition(in)
	}
}

func (d *GlueDouble) BatchDeleteTable(i0 *glue.BatchDeleteTableInput) (r0 *glue.BatchDeleteTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDeleteTable", i0)
	r0, _ = returns[0].(*glue.BatchDeleteTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) BatchDeleteTableRequest(i0 *glue.BatchDeleteTableInput) (r0 *request.Request, r1 *glue.BatchDeleteTableOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDeleteTableRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.BatchDeleteTableOutput)
	return
}

func (d *GlueDouble) BatchDeleteTableVersion(i0 *glue.BatchDeleteTableVersionInput) (r0 *glue.BatchDeleteTableVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDeleteTableVersion", i0)
	r0, _ = returns[0].(*glue.BatchDeleteTableVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) BatchDeleteTableVersionRequest(i0 *glue.BatchDeleteTableVersionInput) (r0 *request.Request, r1 *glue.BatchDeleteTableVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDeleteTableVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.BatchDeleteTableVersionOutput)
	return
}

func (d *GlueDouble) BatchDeleteTableVersionWithContext(i0 context.Context, i1 *glue.BatchDeleteTableVersionInput, i2 ...request.Option) (r0 *glue.BatchDeleteTableVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDeleteTableVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.BatchDeleteTableVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeBatchDeleteTableVersionWithContext(ctx context.Context, in *glue.BatchDeleteTableVersionInput, _ ...request.Option) (*glue.BatchDeleteTableVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchDeleteTableVersion cancelled", ctx.Err())
	default:
		return d.BatchDeleteTableVersion(in)
	}
}

func (d *GlueDouble) BatchDeleteTableWithContext(i0 context.Context, i1 *glue.BatchDeleteTableInput, i2 ...request.Option) (r0 *glue.BatchDeleteTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDeleteTableWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.BatchDeleteTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeBatchDeleteTableWithContext(ctx context.Context, in *glue.BatchDeleteTableInput, _ ...request.Option) (*glue.BatchDeleteTableOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchDeleteTable cancelled", ctx.Err())
	default:
		return d.BatchDeleteTable(in)
	}
}

func (d *GlueDouble) BatchGetCrawlers(i0 *glue.BatchGetCrawlersInput) (r0 *glue.BatchGetCrawlersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetCrawlers", i0)
	r0, _ = returns[0].(*glue.BatchGetCrawlersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) BatchGetCrawlersRequest(i0 *glue.BatchGetCrawlersInput) (r0 *request.Request, r1 *glue.BatchGetCrawlersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetCrawlersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.BatchGetCrawlersOutput)
	return
}

func (d *GlueDouble) BatchGetCrawlersWithContext(i0 context.Context, i1 *glue.BatchGetCrawlersInput, i2 ...request.Option) (r0 *glue.BatchGetCrawlersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetCrawlersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.BatchGetCrawlersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeBatchGetCrawlersWithContext(ctx context.Context, in *glue.BatchGetCrawlersInput, _ ...request.Option) (*glue.BatchGetCrawlersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchGetCrawlers cancelled", ctx.Err())
	default:
		return d.BatchGetCrawlers(in)
	}
}

func (d *GlueDouble) BatchGetDevEndpoints(i0 *glue.BatchGetDevEndpointsInput) (r0 *glue.BatchGetDevEndpointsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetDevEndpoints", i0)
	r0, _ = returns[0].(*glue.BatchGetDevEndpointsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) BatchGetDevEndpointsRequest(i0 *glue.BatchGetDevEndpointsInput) (r0 *request.Request, r1 *glue.BatchGetDevEndpointsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetDevEndpointsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.BatchGetDevEndpointsOutput)
	return
}

func (d *GlueDouble) BatchGetDevEndpointsWithContext(i0 context.Context, i1 *glue.BatchGetDevEndpointsInput, i2 ...request.Option) (r0 *glue.BatchGetDevEndpointsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetDevEndpointsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.BatchGetDevEndpointsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeBatchGetDevEndpointsWithContext(ctx context.Context, in *glue.BatchGetDevEndpointsInput, _ ...request.Option) (*glue.BatchGetDevEndpointsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchGetDevEndpoints cancelled", ctx.Err())
	default:
		return d.BatchGetDevEndpoints(in)
	}
}

func (d *GlueDouble) BatchGetJobs(i0 *glue.BatchGetJobsInput) (r0 *glue.BatchGetJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetJobs", i0)
	r0, _ = returns[0].(*glue.BatchGetJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) BatchGetJobsRequest(i0 *glue.BatchGetJobsInput) (r0 *request.Request, r1 *glue.BatchGetJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.BatchGetJobsOutput)
	return
}

func (d *GlueDouble) BatchGetJobsWithContext(i0 context.Context, i1 *glue.BatchGetJobsInput, i2 ...request.Option) (r0 *glue.BatchGetJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.BatchGetJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeBatchGetJobsWithContext(ctx context.Context, in *glue.BatchGetJobsInput, _ ...request.Option) (*glue.BatchGetJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchGetJobs cancelled", ctx.Err())
	default:
		return d.BatchGetJobs(in)
	}
}

func (d *GlueDouble) BatchGetPartition(i0 *glue.BatchGetPartitionInput) (r0 *glue.BatchGetPartitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetPartition", i0)
	r0, _ = returns[0].(*glue.BatchGetPartitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) BatchGetPartitionRequest(i0 *glue.BatchGetPartitionInput) (r0 *request.Request, r1 *glue.BatchGetPartitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetPartitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.BatchGetPartitionOutput)
	return
}

func (d *GlueDouble) BatchGetPartitionWithContext(i0 context.Context, i1 *glue.BatchGetPartitionInput, i2 ...request.Option) (r0 *glue.BatchGetPartitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetPartitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.BatchGetPartitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeBatchGetPartitionWithContext(ctx context.Context, in *glue.BatchGetPartitionInput, _ ...request.Option) (*glue.BatchGetPartitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchGetPartition cancelled", ctx.Err())
	default:
		return d.BatchGetPartition(in)
	}
}

func (d *GlueDouble) BatchGetTriggers(i0 *glue.BatchGetTriggersInput) (r0 *glue.BatchGetTriggersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetTriggers", i0)
	r0, _ = returns[0].(*glue.BatchGetTriggersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) BatchGetTriggersRequest(i0 *glue.BatchGetTriggersInput) (r0 *request.Request, r1 *glue.BatchGetTriggersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetTriggersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.BatchGetTriggersOutput)
	return
}

func (d *GlueDouble) BatchGetTriggersWithContext(i0 context.Context, i1 *glue.BatchGetTriggersInput, i2 ...request.Option) (r0 *glue.BatchGetTriggersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetTriggersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.BatchGetTriggersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeBatchGetTriggersWithContext(ctx context.Context, in *glue.BatchGetTriggersInput, _ ...request.Option) (*glue.BatchGetTriggersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchGetTriggers cancelled", ctx.Err())
	default:
		return d.BatchGetTriggers(in)
	}
}

func (d *GlueDouble) BatchGetWorkflows(i0 *glue.BatchGetWorkflowsInput) (r0 *glue.BatchGetWorkflowsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetWorkflows", i0)
	r0, _ = returns[0].(*glue.BatchGetWorkflowsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) BatchGetWorkflowsRequest(i0 *glue.BatchGetWorkflowsInput) (r0 *request.Request, r1 *glue.BatchGetWorkflowsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetWorkflowsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.BatchGetWorkflowsOutput)
	return
}

func (d *GlueDouble) BatchGetWorkflowsWithContext(i0 context.Context, i1 *glue.BatchGetWorkflowsInput, i2 ...request.Option) (r0 *glue.BatchGetWorkflowsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetWorkflowsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.BatchGetWorkflowsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeBatchGetWorkflowsWithContext(ctx context.Context, in *glue.BatchGetWorkflowsInput, _ ...request.Option) (*glue.BatchGetWorkflowsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchGetWorkflows cancelled", ctx.Err())
	default:
		return d.BatchGetWorkflows(in)
	}
}

func (d *GlueDouble) BatchStopJobRun(i0 *glue.BatchStopJobRunInput) (r0 *glue.BatchStopJobRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchStopJobRun", i0)
	r0, _ = returns[0].(*glue.BatchStopJobRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) BatchStopJobRunRequest(i0 *glue.BatchStopJobRunInput) (r0 *request.Request, r1 *glue.BatchStopJobRunOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchStopJobRunRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.BatchStopJobRunOutput)
	return
}

func (d *GlueDouble) BatchStopJobRunWithContext(i0 context.Context, i1 *glue.BatchStopJobRunInput, i2 ...request.Option) (r0 *glue.BatchStopJobRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchStopJobRunWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.BatchStopJobRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeBatchStopJobRunWithContext(ctx context.Context, in *glue.BatchStopJobRunInput, _ ...request.Option) (*glue.BatchStopJobRunOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchStopJobRun cancelled", ctx.Err())
	default:
		return d.BatchStopJobRun(in)
	}
}

func (d *GlueDouble) CancelMLTaskRun(i0 *glue.CancelMLTaskRunInput) (r0 *glue.CancelMLTaskRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelMLTaskRun", i0)
	r0, _ = returns[0].(*glue.CancelMLTaskRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) CancelMLTaskRunRequest(i0 *glue.CancelMLTaskRunInput) (r0 *request.Request, r1 *glue.CancelMLTaskRunOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelMLTaskRunRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.CancelMLTaskRunOutput)
	return
}

func (d *GlueDouble) CancelMLTaskRunWithContext(i0 context.Context, i1 *glue.CancelMLTaskRunInput, i2 ...request.Option) (r0 *glue.CancelMLTaskRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelMLTaskRunWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.CancelMLTaskRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeCancelMLTaskRunWithContext(ctx context.Context, in *glue.CancelMLTaskRunInput, _ ...request.Option) (*glue.CancelMLTaskRunOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelMLTaskRun cancelled", ctx.Err())
	default:
		return d.CancelMLTaskRun(in)
	}
}

func (d *GlueDouble) CreateClassifier(i0 *glue.CreateClassifierInput) (r0 *glue.CreateClassifierOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateClassifier", i0)
	r0, _ = returns[0].(*glue.CreateClassifierOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) CreateClassifierRequest(i0 *glue.CreateClassifierInput) (r0 *request.Request, r1 *glue.CreateClassifierOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateClassifierRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.CreateClassifierOutput)
	return
}

func (d *GlueDouble) CreateClassifierWithContext(i0 context.Context, i1 *glue.CreateClassifierInput, i2 ...request.Option) (r0 *glue.CreateClassifierOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateClassifierWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.CreateClassifierOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeCreateClassifierWithContext(ctx context.Context, in *glue.CreateClassifierInput, _ ...request.Option) (*glue.CreateClassifierOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateClassifier cancelled", ctx.Err())
	default:
		return d.CreateClassifier(in)
	}
}

func (d *GlueDouble) CreateConnection(i0 *glue.CreateConnectionInput) (r0 *glue.CreateConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateConnection", i0)
	r0, _ = returns[0].(*glue.CreateConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) CreateConnectionRequest(i0 *glue.CreateConnectionInput) (r0 *request.Request, r1 *glue.CreateConnectionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateConnectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.CreateConnectionOutput)
	return
}

func (d *GlueDouble) CreateConnectionWithContext(i0 context.Context, i1 *glue.CreateConnectionInput, i2 ...request.Option) (r0 *glue.CreateConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateConnectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.CreateConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeCreateConnectionWithContext(ctx context.Context, in *glue.CreateConnectionInput, _ ...request.Option) (*glue.CreateConnectionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateConnection cancelled", ctx.Err())
	default:
		return d.CreateConnection(in)
	}
}

func (d *GlueDouble) CreateCrawler(i0 *glue.CreateCrawlerInput) (r0 *glue.CreateCrawlerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCrawler", i0)
	r0, _ = returns[0].(*glue.CreateCrawlerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) CreateCrawlerRequest(i0 *glue.CreateCrawlerInput) (r0 *request.Request, r1 *glue.CreateCrawlerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCrawlerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.CreateCrawlerOutput)
	return
}

func (d *GlueDouble) CreateCrawlerWithContext(i0 context.Context, i1 *glue.CreateCrawlerInput, i2 ...request.Option) (r0 *glue.CreateCrawlerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCrawlerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.CreateCrawlerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeCreateCrawlerWithContext(ctx context.Context, in *glue.CreateCrawlerInput, _ ...request.Option) (*glue.CreateCrawlerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateCrawler cancelled", ctx.Err())
	default:
		return d.CreateCrawler(in)
	}
}

func (d *GlueDouble) CreateDatabase(i0 *glue.CreateDatabaseInput) (r0 *glue.CreateDatabaseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDatabase", i0)
	r0, _ = returns[0].(*glue.CreateDatabaseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) CreateDatabaseRequest(i0 *glue.CreateDatabaseInput) (r0 *request.Request, r1 *glue.CreateDatabaseOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDatabaseRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.CreateDatabaseOutput)
	return
}

func (d *GlueDouble) CreateDatabaseWithContext(i0 context.Context, i1 *glue.CreateDatabaseInput, i2 ...request.Option) (r0 *glue.CreateDatabaseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDatabaseWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.CreateDatabaseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeCreateDatabaseWithContext(ctx context.Context, in *glue.CreateDatabaseInput, _ ...request.Option) (*glue.CreateDatabaseOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDatabase cancelled", ctx.Err())
	default:
		return d.CreateDatabase(in)
	}
}

func (d *GlueDouble) CreateDevEndpoint(i0 *glue.CreateDevEndpointInput) (r0 *glue.CreateDevEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDevEndpoint", i0)
	r0, _ = returns[0].(*glue.CreateDevEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) CreateDevEndpointRequest(i0 *glue.CreateDevEndpointInput) (r0 *request.Request, r1 *glue.CreateDevEndpointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDevEndpointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.CreateDevEndpointOutput)
	return
}

func (d *GlueDouble) CreateDevEndpointWithContext(i0 context.Context, i1 *glue.CreateDevEndpointInput, i2 ...request.Option) (r0 *glue.CreateDevEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDevEndpointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.CreateDevEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeCreateDevEndpointWithContext(ctx context.Context, in *glue.CreateDevEndpointInput, _ ...request.Option) (*glue.CreateDevEndpointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDevEndpoint cancelled", ctx.Err())
	default:
		return d.CreateDevEndpoint(in)
	}
}

func (d *GlueDouble) CreateJob(i0 *glue.CreateJobInput) (r0 *glue.CreateJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateJob", i0)
	r0, _ = returns[0].(*glue.CreateJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) CreateJobRequest(i0 *glue.CreateJobInput) (r0 *request.Request, r1 *glue.CreateJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.CreateJobOutput)
	return
}

func (d *GlueDouble) CreateJobWithContext(i0 context.Context, i1 *glue.CreateJobInput, i2 ...request.Option) (r0 *glue.CreateJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.CreateJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeCreateJobWithContext(ctx context.Context, in *glue.CreateJobInput, _ ...request.Option) (*glue.CreateJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateJob cancelled", ctx.Err())
	default:
		return d.CreateJob(in)
	}
}

func (d *GlueDouble) CreateMLTransform(i0 *glue.CreateMLTransformInput) (r0 *glue.CreateMLTransformOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMLTransform", i0)
	r0, _ = returns[0].(*glue.CreateMLTransformOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) CreateMLTransformRequest(i0 *glue.CreateMLTransformInput) (r0 *request.Request, r1 *glue.CreateMLTransformOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMLTransformRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.CreateMLTransformOutput)
	return
}

func (d *GlueDouble) CreateMLTransformWithContext(i0 context.Context, i1 *glue.CreateMLTransformInput, i2 ...request.Option) (r0 *glue.CreateMLTransformOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMLTransformWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.CreateMLTransformOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeCreateMLTransformWithContext(ctx context.Context, in *glue.CreateMLTransformInput, _ ...request.Option) (*glue.CreateMLTransformOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateMLTransform cancelled", ctx.Err())
	default:
		return d.CreateMLTransform(in)
	}
}

func (d *GlueDouble) CreatePartition(i0 *glue.CreatePartitionInput) (r0 *glue.CreatePartitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePartition", i0)
	r0, _ = returns[0].(*glue.CreatePartitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) CreatePartitionRequest(i0 *glue.CreatePartitionInput) (r0 *request.Request, r1 *glue.CreatePartitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePartitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.CreatePartitionOutput)
	return
}

func (d *GlueDouble) CreatePartitionWithContext(i0 context.Context, i1 *glue.CreatePartitionInput, i2 ...request.Option) (r0 *glue.CreatePartitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePartitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.CreatePartitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeCreatePartitionWithContext(ctx context.Context, in *glue.CreatePartitionInput, _ ...request.Option) (*glue.CreatePartitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreatePartition cancelled", ctx.Err())
	default:
		return d.CreatePartition(in)
	}
}

func (d *GlueDouble) CreateScript(i0 *glue.CreateScriptInput) (r0 *glue.CreateScriptOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateScript", i0)
	r0, _ = returns[0].(*glue.CreateScriptOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) CreateScriptRequest(i0 *glue.CreateScriptInput) (r0 *request.Request, r1 *glue.CreateScriptOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateScriptRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.CreateScriptOutput)
	return
}

func (d *GlueDouble) CreateScriptWithContext(i0 context.Context, i1 *glue.CreateScriptInput, i2 ...request.Option) (r0 *glue.CreateScriptOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateScriptWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.CreateScriptOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeCreateScriptWithContext(ctx context.Context, in *glue.CreateScriptInput, _ ...request.Option) (*glue.CreateScriptOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateScript cancelled", ctx.Err())
	default:
		return d.CreateScript(in)
	}
}

func (d *GlueDouble) CreateSecurityConfiguration(i0 *glue.CreateSecurityConfigurationInput) (r0 *glue.CreateSecurityConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSecurityConfiguration", i0)
	r0, _ = returns[0].(*glue.CreateSecurityConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) CreateSecurityConfigurationRequest(i0 *glue.CreateSecurityConfigurationInput) (r0 *request.Request, r1 *glue.CreateSecurityConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSecurityConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.CreateSecurityConfigurationOutput)
	return
}

func (d *GlueDouble) CreateSecurityConfigurationWithContext(i0 context.Context, i1 *glue.CreateSecurityConfigurationInput, i2 ...request.Option) (r0 *glue.CreateSecurityConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSecurityConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.CreateSecurityConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeCreateSecurityConfigurationWithContext(ctx context.Context, in *glue.CreateSecurityConfigurationInput, _ ...request.Option) (*glue.CreateSecurityConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateSecurityConfiguration cancelled", ctx.Err())
	default:
		return d.CreateSecurityConfiguration(in)
	}
}

func (d *GlueDouble) CreateTable(i0 *glue.CreateTableInput) (r0 *glue.CreateTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTable", i0)
	r0, _ = returns[0].(*glue.CreateTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) CreateTableRequest(i0 *glue.CreateTableInput) (r0 *request.Request, r1 *glue.CreateTableOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTableRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.CreateTableOutput)
	return
}

func (d *GlueDouble) CreateTableWithContext(i0 context.Context, i1 *glue.CreateTableInput, i2 ...request.Option) (r0 *glue.CreateTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTableWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.CreateTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeCreateTableWithContext(ctx context.Context, in *glue.CreateTableInput, _ ...request.Option) (*glue.CreateTableOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTable cancelled", ctx.Err())
	default:
		return d.CreateTable(in)
	}
}

func (d *GlueDouble) CreateTrigger(i0 *glue.CreateTriggerInput) (r0 *glue.CreateTriggerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTrigger", i0)
	r0, _ = returns[0].(*glue.CreateTriggerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) CreateTriggerRequest(i0 *glue.CreateTriggerInput) (r0 *request.Request, r1 *glue.CreateTriggerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTriggerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.CreateTriggerOutput)
	return
}

func (d *GlueDouble) CreateTriggerWithContext(i0 context.Context, i1 *glue.CreateTriggerInput, i2 ...request.Option) (r0 *glue.CreateTriggerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTriggerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.CreateTriggerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeCreateTriggerWithContext(ctx context.Context, in *glue.CreateTriggerInput, _ ...request.Option) (*glue.CreateTriggerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTrigger cancelled", ctx.Err())
	default:
		return d.CreateTrigger(in)
	}
}

func (d *GlueDouble) CreateUserDefinedFunction(i0 *glue.CreateUserDefinedFunctionInput) (r0 *glue.CreateUserDefinedFunctionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserDefinedFunction", i0)
	r0, _ = returns[0].(*glue.CreateUserDefinedFunctionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) CreateUserDefinedFunctionRequest(i0 *glue.CreateUserDefinedFunctionInput) (r0 *request.Request, r1 *glue.CreateUserDefinedFunctionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserDefinedFunctionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.CreateUserDefinedFunctionOutput)
	return
}

func (d *GlueDouble) CreateUserDefinedFunctionWithContext(i0 context.Context, i1 *glue.CreateUserDefinedFunctionInput, i2 ...request.Option) (r0 *glue.CreateUserDefinedFunctionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserDefinedFunctionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.CreateUserDefinedFunctionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeCreateUserDefinedFunctionWithContext(ctx context.Context, in *glue.CreateUserDefinedFunctionInput, _ ...request.Option) (*glue.CreateUserDefinedFunctionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateUserDefinedFunction cancelled", ctx.Err())
	default:
		return d.CreateUserDefinedFunction(in)
	}
}

func (d *GlueDouble) CreateWorkflow(i0 *glue.CreateWorkflowInput) (r0 *glue.CreateWorkflowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateWorkflow", i0)
	r0, _ = returns[0].(*glue.CreateWorkflowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) CreateWorkflowRequest(i0 *glue.CreateWorkflowInput) (r0 *request.Request, r1 *glue.CreateWorkflowOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateWorkflowRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.CreateWorkflowOutput)
	return
}

func (d *GlueDouble) CreateWorkflowWithContext(i0 context.Context, i1 *glue.CreateWorkflowInput, i2 ...request.Option) (r0 *glue.CreateWorkflowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateWorkflowWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.CreateWorkflowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeCreateWorkflowWithContext(ctx context.Context, in *glue.CreateWorkflowInput, _ ...request.Option) (*glue.CreateWorkflowOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateWorkflow cancelled", ctx.Err())
	default:
		return d.CreateWorkflow(in)
	}
}

func (d *GlueDouble) DeleteClassifier(i0 *glue.DeleteClassifierInput) (r0 *glue.DeleteClassifierOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteClassifier", i0)
	r0, _ = returns[0].(*glue.DeleteClassifierOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) DeleteClassifierRequest(i0 *glue.DeleteClassifierInput) (r0 *request.Request, r1 *glue.DeleteClassifierOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteClassifierRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.DeleteClassifierOutput)
	return
}

func (d *GlueDouble) DeleteClassifierWithContext(i0 context.Context, i1 *glue.DeleteClassifierInput, i2 ...request.Option) (r0 *glue.DeleteClassifierOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteClassifierWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.DeleteClassifierOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeDeleteClassifierWithContext(ctx context.Context, in *glue.DeleteClassifierInput, _ ...request.Option) (*glue.DeleteClassifierOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteClassifier cancelled", ctx.Err())
	default:
		return d.DeleteClassifier(in)
	}
}

func (d *GlueDouble) DeleteConnection(i0 *glue.DeleteConnectionInput) (r0 *glue.DeleteConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteConnection", i0)
	r0, _ = returns[0].(*glue.DeleteConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) DeleteConnectionRequest(i0 *glue.DeleteConnectionInput) (r0 *request.Request, r1 *glue.DeleteConnectionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteConnectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.DeleteConnectionOutput)
	return
}

func (d *GlueDouble) DeleteConnectionWithContext(i0 context.Context, i1 *glue.DeleteConnectionInput, i2 ...request.Option) (r0 *glue.DeleteConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteConnectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.DeleteConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeDeleteConnectionWithContext(ctx context.Context, in *glue.DeleteConnectionInput, _ ...request.Option) (*glue.DeleteConnectionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteConnection cancelled", ctx.Err())
	default:
		return d.DeleteConnection(in)
	}
}

func (d *GlueDouble) DeleteCrawler(i0 *glue.DeleteCrawlerInput) (r0 *glue.DeleteCrawlerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCrawler", i0)
	r0, _ = returns[0].(*glue.DeleteCrawlerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) DeleteCrawlerRequest(i0 *glue.DeleteCrawlerInput) (r0 *request.Request, r1 *glue.DeleteCrawlerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCrawlerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.DeleteCrawlerOutput)
	return
}

func (d *GlueDouble) DeleteCrawlerWithContext(i0 context.Context, i1 *glue.DeleteCrawlerInput, i2 ...request.Option) (r0 *glue.DeleteCrawlerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCrawlerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.DeleteCrawlerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeDeleteCrawlerWithContext(ctx context.Context, in *glue.DeleteCrawlerInput, _ ...request.Option) (*glue.DeleteCrawlerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteCrawler cancelled", ctx.Err())
	default:
		return d.DeleteCrawler(in)
	}
}

func (d *GlueDouble) DeleteDatabase(i0 *glue.DeleteDatabaseInput) (r0 *glue.DeleteDatabaseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDatabase", i0)
	r0, _ = returns[0].(*glue.DeleteDatabaseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) DeleteDatabaseRequest(i0 *glue.DeleteDatabaseInput) (r0 *request.Request, r1 *glue.DeleteDatabaseOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDatabaseRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.DeleteDatabaseOutput)
	return
}

func (d *GlueDouble) DeleteDatabaseWithContext(i0 context.Context, i1 *glue.DeleteDatabaseInput, i2 ...request.Option) (r0 *glue.DeleteDatabaseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDatabaseWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.DeleteDatabaseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeDeleteDatabaseWithContext(ctx context.Context, in *glue.DeleteDatabaseInput, _ ...request.Option) (*glue.DeleteDatabaseOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDatabase cancelled", ctx.Err())
	default:
		return d.DeleteDatabase(in)
	}
}

func (d *GlueDouble) DeleteDevEndpoint(i0 *glue.DeleteDevEndpointInput) (r0 *glue.DeleteDevEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDevEndpoint", i0)
	r0, _ = returns[0].(*glue.DeleteDevEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) DeleteDevEndpointRequest(i0 *glue.DeleteDevEndpointInput) (r0 *request.Request, r1 *glue.DeleteDevEndpointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDevEndpointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.DeleteDevEndpointOutput)
	return
}

func (d *GlueDouble) DeleteDevEndpointWithContext(i0 context.Context, i1 *glue.DeleteDevEndpointInput, i2 ...request.Option) (r0 *glue.DeleteDevEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDevEndpointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.DeleteDevEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeDeleteDevEndpointWithContext(ctx context.Context, in *glue.DeleteDevEndpointInput, _ ...request.Option) (*glue.DeleteDevEndpointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDevEndpoint cancelled", ctx.Err())
	default:
		return d.DeleteDevEndpoint(in)
	}
}

func (d *GlueDouble) DeleteJob(i0 *glue.DeleteJobInput) (r0 *glue.DeleteJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteJob", i0)
	r0, _ = returns[0].(*glue.DeleteJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) DeleteJobRequest(i0 *glue.DeleteJobInput) (r0 *request.Request, r1 *glue.DeleteJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.DeleteJobOutput)
	return
}

func (d *GlueDouble) DeleteJobWithContext(i0 context.Context, i1 *glue.DeleteJobInput, i2 ...request.Option) (r0 *glue.DeleteJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.DeleteJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeDeleteJobWithContext(ctx context.Context, in *glue.DeleteJobInput, _ ...request.Option) (*glue.DeleteJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteJob cancelled", ctx.Err())
	default:
		return d.DeleteJob(in)
	}
}

func (d *GlueDouble) DeleteMLTransform(i0 *glue.DeleteMLTransformInput) (r0 *glue.DeleteMLTransformOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMLTransform", i0)
	r0, _ = returns[0].(*glue.DeleteMLTransformOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) DeleteMLTransformRequest(i0 *glue.DeleteMLTransformInput) (r0 *request.Request, r1 *glue.DeleteMLTransformOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMLTransformRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.DeleteMLTransformOutput)
	return
}

func (d *GlueDouble) DeleteMLTransformWithContext(i0 context.Context, i1 *glue.DeleteMLTransformInput, i2 ...request.Option) (r0 *glue.DeleteMLTransformOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMLTransformWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.DeleteMLTransformOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeDeleteMLTransformWithContext(ctx context.Context, in *glue.DeleteMLTransformInput, _ ...request.Option) (*glue.DeleteMLTransformOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteMLTransform cancelled", ctx.Err())
	default:
		return d.DeleteMLTransform(in)
	}
}

func (d *GlueDouble) DeletePartition(i0 *glue.DeletePartitionInput) (r0 *glue.DeletePartitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePartition", i0)
	r0, _ = returns[0].(*glue.DeletePartitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) DeletePartitionRequest(i0 *glue.DeletePartitionInput) (r0 *request.Request, r1 *glue.DeletePartitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePartitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.DeletePartitionOutput)
	return
}

func (d *GlueDouble) DeletePartitionWithContext(i0 context.Context, i1 *glue.DeletePartitionInput, i2 ...request.Option) (r0 *glue.DeletePartitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePartitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.DeletePartitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeDeletePartitionWithContext(ctx context.Context, in *glue.DeletePartitionInput, _ ...request.Option) (*glue.DeletePartitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeletePartition cancelled", ctx.Err())
	default:
		return d.DeletePartition(in)
	}
}

func (d *GlueDouble) DeleteResourcePolicy(i0 *glue.DeleteResourcePolicyInput) (r0 *glue.DeleteResourcePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResourcePolicy", i0)
	r0, _ = returns[0].(*glue.DeleteResourcePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) DeleteResourcePolicyRequest(i0 *glue.DeleteResourcePolicyInput) (r0 *request.Request, r1 *glue.DeleteResourcePolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResourcePolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.DeleteResourcePolicyOutput)
	return
}

func (d *GlueDouble) DeleteResourcePolicyWithContext(i0 context.Context, i1 *glue.DeleteResourcePolicyInput, i2 ...request.Option) (r0 *glue.DeleteResourcePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResourcePolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.DeleteResourcePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeDeleteResourcePolicyWithContext(ctx context.Context, in *glue.DeleteResourcePolicyInput, _ ...request.Option) (*glue.DeleteResourcePolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteResourcePolicy cancelled", ctx.Err())
	default:
		return d.DeleteResourcePolicy(in)
	}
}

func (d *GlueDouble) DeleteSecurityConfiguration(i0 *glue.DeleteSecurityConfigurationInput) (r0 *glue.DeleteSecurityConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSecurityConfiguration", i0)
	r0, _ = returns[0].(*glue.DeleteSecurityConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) DeleteSecurityConfigurationRequest(i0 *glue.DeleteSecurityConfigurationInput) (r0 *request.Request, r1 *glue.DeleteSecurityConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSecurityConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.DeleteSecurityConfigurationOutput)
	return
}

func (d *GlueDouble) DeleteSecurityConfigurationWithContext(i0 context.Context, i1 *glue.DeleteSecurityConfigurationInput, i2 ...request.Option) (r0 *glue.DeleteSecurityConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSecurityConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.DeleteSecurityConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeDeleteSecurityConfigurationWithContext(ctx context.Context, in *glue.DeleteSecurityConfigurationInput, _ ...request.Option) (*glue.DeleteSecurityConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteSecurityConfiguration cancelled", ctx.Err())
	default:
		return d.DeleteSecurityConfiguration(in)
	}
}

func (d *GlueDouble) DeleteTable(i0 *glue.DeleteTableInput) (r0 *glue.DeleteTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTable", i0)
	r0, _ = returns[0].(*glue.DeleteTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) DeleteTableRequest(i0 *glue.DeleteTableInput) (r0 *request.Request, r1 *glue.DeleteTableOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTableRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.DeleteTableOutput)
	return
}

func (d *GlueDouble) DeleteTableVersion(i0 *glue.DeleteTableVersionInput) (r0 *glue.DeleteTableVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTableVersion", i0)
	r0, _ = returns[0].(*glue.DeleteTableVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) DeleteTableVersionRequest(i0 *glue.DeleteTableVersionInput) (r0 *request.Request, r1 *glue.DeleteTableVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTableVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.DeleteTableVersionOutput)
	return
}

func (d *GlueDouble) DeleteTableVersionWithContext(i0 context.Context, i1 *glue.DeleteTableVersionInput, i2 ...request.Option) (r0 *glue.DeleteTableVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTableVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.DeleteTableVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeDeleteTableVersionWithContext(ctx context.Context, in *glue.DeleteTableVersionInput, _ ...request.Option) (*glue.DeleteTableVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTableVersion cancelled", ctx.Err())
	default:
		return d.DeleteTableVersion(in)
	}
}

func (d *GlueDouble) DeleteTableWithContext(i0 context.Context, i1 *glue.DeleteTableInput, i2 ...request.Option) (r0 *glue.DeleteTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTableWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.DeleteTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeDeleteTableWithContext(ctx context.Context, in *glue.DeleteTableInput, _ ...request.Option) (*glue.DeleteTableOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTable cancelled", ctx.Err())
	default:
		return d.DeleteTable(in)
	}
}

func (d *GlueDouble) DeleteTrigger(i0 *glue.DeleteTriggerInput) (r0 *glue.DeleteTriggerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTrigger", i0)
	r0, _ = returns[0].(*glue.DeleteTriggerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) DeleteTriggerRequest(i0 *glue.DeleteTriggerInput) (r0 *request.Request, r1 *glue.DeleteTriggerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTriggerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.DeleteTriggerOutput)
	return
}

func (d *GlueDouble) DeleteTriggerWithContext(i0 context.Context, i1 *glue.DeleteTriggerInput, i2 ...request.Option) (r0 *glue.DeleteTriggerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTriggerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.DeleteTriggerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeDeleteTriggerWithContext(ctx context.Context, in *glue.DeleteTriggerInput, _ ...request.Option) (*glue.DeleteTriggerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTrigger cancelled", ctx.Err())
	default:
		return d.DeleteTrigger(in)
	}
}

func (d *GlueDouble) DeleteUserDefinedFunction(i0 *glue.DeleteUserDefinedFunctionInput) (r0 *glue.DeleteUserDefinedFunctionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserDefinedFunction", i0)
	r0, _ = returns[0].(*glue.DeleteUserDefinedFunctionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) DeleteUserDefinedFunctionRequest(i0 *glue.DeleteUserDefinedFunctionInput) (r0 *request.Request, r1 *glue.DeleteUserDefinedFunctionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserDefinedFunctionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.DeleteUserDefinedFunctionOutput)
	return
}

func (d *GlueDouble) DeleteUserDefinedFunctionWithContext(i0 context.Context, i1 *glue.DeleteUserDefinedFunctionInput, i2 ...request.Option) (r0 *glue.DeleteUserDefinedFunctionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserDefinedFunctionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.DeleteUserDefinedFunctionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeDeleteUserDefinedFunctionWithContext(ctx context.Context, in *glue.DeleteUserDefinedFunctionInput, _ ...request.Option) (*glue.DeleteUserDefinedFunctionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteUserDefinedFunction cancelled", ctx.Err())
	default:
		return d.DeleteUserDefinedFunction(in)
	}
}

func (d *GlueDouble) DeleteWorkflow(i0 *glue.DeleteWorkflowInput) (r0 *glue.DeleteWorkflowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteWorkflow", i0)
	r0, _ = returns[0].(*glue.DeleteWorkflowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) DeleteWorkflowRequest(i0 *glue.DeleteWorkflowInput) (r0 *request.Request, r1 *glue.DeleteWorkflowOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteWorkflowRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.DeleteWorkflowOutput)
	return
}

func (d *GlueDouble) DeleteWorkflowWithContext(i0 context.Context, i1 *glue.DeleteWorkflowInput, i2 ...request.Option) (r0 *glue.DeleteWorkflowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteWorkflowWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.DeleteWorkflowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeDeleteWorkflowWithContext(ctx context.Context, in *glue.DeleteWorkflowInput, _ ...request.Option) (*glue.DeleteWorkflowOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteWorkflow cancelled", ctx.Err())
	default:
		return d.DeleteWorkflow(in)
	}
}

func (d *GlueDouble) GetCatalogImportStatus(i0 *glue.GetCatalogImportStatusInput) (r0 *glue.GetCatalogImportStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCatalogImportStatus", i0)
	r0, _ = returns[0].(*glue.GetCatalogImportStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetCatalogImportStatusRequest(i0 *glue.GetCatalogImportStatusInput) (r0 *request.Request, r1 *glue.GetCatalogImportStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCatalogImportStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetCatalogImportStatusOutput)
	return
}

func (d *GlueDouble) GetCatalogImportStatusWithContext(i0 context.Context, i1 *glue.GetCatalogImportStatusInput, i2 ...request.Option) (r0 *glue.GetCatalogImportStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCatalogImportStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetCatalogImportStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetCatalogImportStatusWithContext(ctx context.Context, in *glue.GetCatalogImportStatusInput, _ ...request.Option) (*glue.GetCatalogImportStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetCatalogImportStatus cancelled", ctx.Err())
	default:
		return d.GetCatalogImportStatus(in)
	}
}

func (d *GlueDouble) GetClassifier(i0 *glue.GetClassifierInput) (r0 *glue.GetClassifierOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetClassifier", i0)
	r0, _ = returns[0].(*glue.GetClassifierOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetClassifierRequest(i0 *glue.GetClassifierInput) (r0 *request.Request, r1 *glue.GetClassifierOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetClassifierRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetClassifierOutput)
	return
}

func (d *GlueDouble) GetClassifierWithContext(i0 context.Context, i1 *glue.GetClassifierInput, i2 ...request.Option) (r0 *glue.GetClassifierOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetClassifierWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetClassifierOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetClassifierWithContext(ctx context.Context, in *glue.GetClassifierInput, _ ...request.Option) (*glue.GetClassifierOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetClassifier cancelled", ctx.Err())
	default:
		return d.GetClassifier(in)
	}
}

func (d *GlueDouble) GetClassifiers(i0 *glue.GetClassifiersInput) (r0 *glue.GetClassifiersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetClassifiers", i0)
	r0, _ = returns[0].(*glue.GetClassifiersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetClassifiersPages(i0 *glue.GetClassifiersInput, i1 func(*glue.GetClassifiersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetClassifiersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeGetClassifiersPages(in *glue.GetClassifiersInput, pager func(*glue.GetClassifiersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetClassifiers", paginators, in, pager)
}

func (d *GlueDouble) GetClassifiersPagesWithContext(i0 context.Context, i1 *glue.GetClassifiersInput, i2 func(*glue.GetClassifiersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetClassifiersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeGetClassifiersPagesWithContext(ctx context.Context, in *glue.GetClassifiersInput, pager func(*glue.GetClassifiersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetClassifiers", paginators, ctx, in, pager, options...)
}

func (d *GlueDouble) GetClassifiersRequest(i0 *glue.GetClassifiersInput) (r0 *request.Request, r1 *glue.GetClassifiersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetClassifiersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetClassifiersOutput)
	return
}

func (d *GlueDouble) GetClassifiersWithContext(i0 context.Context, i1 *glue.GetClassifiersInput, i2 ...request.Option) (r0 *glue.GetClassifiersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetClassifiersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetClassifiersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetClassifiersWithContext(ctx context.Context, in *glue.GetClassifiersInput, _ ...request.Option) (*glue.GetClassifiersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetClassifiers cancelled", ctx.Err())
	default:
		return d.GetClassifiers(in)
	}
}

func (d *GlueDouble) GetConnection(i0 *glue.GetConnectionInput) (r0 *glue.GetConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConnection", i0)
	r0, _ = returns[0].(*glue.GetConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetConnectionRequest(i0 *glue.GetConnectionInput) (r0 *request.Request, r1 *glue.GetConnectionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConnectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetConnectionOutput)
	return
}

func (d *GlueDouble) GetConnectionWithContext(i0 context.Context, i1 *glue.GetConnectionInput, i2 ...request.Option) (r0 *glue.GetConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConnectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetConnectionWithContext(ctx context.Context, in *glue.GetConnectionInput, _ ...request.Option) (*glue.GetConnectionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetConnection cancelled", ctx.Err())
	default:
		return d.GetConnection(in)
	}
}

func (d *GlueDouble) GetConnections(i0 *glue.GetConnectionsInput) (r0 *glue.GetConnectionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConnections", i0)
	r0, _ = returns[0].(*glue.GetConnectionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetConnectionsPages(i0 *glue.GetConnectionsInput, i1 func(*glue.GetConnectionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConnectionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeGetConnectionsPages(in *glue.GetConnectionsInput, pager func(*glue.GetConnectionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetConnections", paginators, in, pager)
}

func (d *GlueDouble) GetConnectionsPagesWithContext(i0 context.Context, i1 *glue.GetConnectionsInput, i2 func(*glue.GetConnectionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConnectionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeGetConnectionsPagesWithContext(ctx context.Context, in *glue.GetConnectionsInput, pager func(*glue.GetConnectionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetConnections", paginators, ctx, in, pager, options...)
}

func (d *GlueDouble) GetConnectionsRequest(i0 *glue.GetConnectionsInput) (r0 *request.Request, r1 *glue.GetConnectionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConnectionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetConnectionsOutput)
	return
}

func (d *GlueDouble) GetConnectionsWithContext(i0 context.Context, i1 *glue.GetConnectionsInput, i2 ...request.Option) (r0 *glue.GetConnectionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConnectionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetConnectionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetConnectionsWithContext(ctx context.Context, in *glue.GetConnectionsInput, _ ...request.Option) (*glue.GetConnectionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetConnections cancelled", ctx.Err())
	default:
		return d.GetConnections(in)
	}
}

func (d *GlueDouble) GetCrawler(i0 *glue.GetCrawlerInput) (r0 *glue.GetCrawlerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCrawler", i0)
	r0, _ = returns[0].(*glue.GetCrawlerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetCrawlerMetrics(i0 *glue.GetCrawlerMetricsInput) (r0 *glue.GetCrawlerMetricsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCrawlerMetrics", i0)
	r0, _ = returns[0].(*glue.GetCrawlerMetricsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetCrawlerMetricsPages(i0 *glue.GetCrawlerMetricsInput, i1 func(*glue.GetCrawlerMetricsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCrawlerMetricsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeGetCrawlerMetricsPages(in *glue.GetCrawlerMetricsInput, pager func(*glue.GetCrawlerMetricsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetCrawlerMetrics", paginators, in, pager)
}

func (d *GlueDouble) GetCrawlerMetricsPagesWithContext(i0 context.Context, i1 *glue.GetCrawlerMetricsInput, i2 func(*glue.GetCrawlerMetricsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCrawlerMetricsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeGetCrawlerMetricsPagesWithContext(ctx context.Context, in *glue.GetCrawlerMetricsInput, pager func(*glue.GetCrawlerMetricsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetCrawlerMetrics", paginators, ctx, in, pager, options...)
}

func (d *GlueDouble) GetCrawlerMetricsRequest(i0 *glue.GetCrawlerMetricsInput) (r0 *request.Request, r1 *glue.GetCrawlerMetricsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCrawlerMetricsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetCrawlerMetricsOutput)
	return
}

func (d *GlueDouble) GetCrawlerMetricsWithContext(i0 context.Context, i1 *glue.GetCrawlerMetricsInput, i2 ...request.Option) (r0 *glue.GetCrawlerMetricsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCrawlerMetricsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetCrawlerMetricsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetCrawlerMetricsWithContext(ctx context.Context, in *glue.GetCrawlerMetricsInput, _ ...request.Option) (*glue.GetCrawlerMetricsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetCrawlerMetrics cancelled", ctx.Err())
	default:
		return d.GetCrawlerMetrics(in)
	}
}

func (d *GlueDouble) GetCrawlerRequest(i0 *glue.GetCrawlerInput) (r0 *request.Request, r1 *glue.GetCrawlerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCrawlerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetCrawlerOutput)
	return
}

func (d *GlueDouble) GetCrawlerWithContext(i0 context.Context, i1 *glue.GetCrawlerInput, i2 ...request.Option) (r0 *glue.GetCrawlerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCrawlerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetCrawlerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetCrawlerWithContext(ctx context.Context, in *glue.GetCrawlerInput, _ ...request.Option) (*glue.GetCrawlerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetCrawler cancelled", ctx.Err())
	default:
		return d.GetCrawler(in)
	}
}

func (d *GlueDouble) GetCrawlers(i0 *glue.GetCrawlersInput) (r0 *glue.GetCrawlersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCrawlers", i0)
	r0, _ = returns[0].(*glue.GetCrawlersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetCrawlersPages(i0 *glue.GetCrawlersInput, i1 func(*glue.GetCrawlersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCrawlersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeGetCrawlersPages(in *glue.GetCrawlersInput, pager func(*glue.GetCrawlersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetCrawlers", paginators, in, pager)
}

func (d *GlueDouble) GetCrawlersPagesWithContext(i0 context.Context, i1 *glue.GetCrawlersInput, i2 func(*glue.GetCrawlersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCrawlersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeGetCrawlersPagesWithContext(ctx context.Context, in *glue.GetCrawlersInput, pager func(*glue.GetCrawlersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetCrawlers", paginators, ctx, in, pager, options...)
}

func (d *GlueDouble) GetCrawlersRequest(i0 *glue.GetCrawlersInput) (r0 *request.Request, r1 *glue.GetCrawlersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCrawlersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetCrawlersOutput)
	return
}

func (d *GlueDouble) GetCrawlersWithContext(i0 context.Context, i1 *glue.GetCrawlersInput, i2 ...request.Option) (r0 *glue.GetCrawlersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCrawlersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetCrawlersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetCrawlersWithContext(ctx context.Context, in *glue.GetCrawlersInput, _ ...request.Option) (*glue.GetCrawlersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetCrawlers cancelled", ctx.Err())
	default:
		return d.GetCrawlers(in)
	}
}

func (d *GlueDouble) GetDataCatalogEncryptionSettings(i0 *glue.GetDataCatalogEncryptionSettingsInput) (r0 *glue.GetDataCatalogEncryptionSettingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDataCatalogEncryptionSettings", i0)
	r0, _ = returns[0].(*glue.GetDataCatalogEncryptionSettingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetDataCatalogEncryptionSettingsRequest(i0 *glue.GetDataCatalogEncryptionSettingsInput) (r0 *request.Request, r1 *glue.GetDataCatalogEncryptionSettingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDataCatalogEncryptionSettingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetDataCatalogEncryptionSettingsOutput)
	return
}

func (d *GlueDouble) GetDataCatalogEncryptionSettingsWithContext(i0 context.Context, i1 *glue.GetDataCatalogEncryptionSettingsInput, i2 ...request.Option) (r0 *glue.GetDataCatalogEncryptionSettingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDataCatalogEncryptionSettingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetDataCatalogEncryptionSettingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetDataCatalogEncryptionSettingsWithContext(ctx context.Context, in *glue.GetDataCatalogEncryptionSettingsInput, _ ...request.Option) (*glue.GetDataCatalogEncryptionSettingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDataCatalogEncryptionSettings cancelled", ctx.Err())
	default:
		return d.GetDataCatalogEncryptionSettings(in)
	}
}

func (d *GlueDouble) GetDatabase(i0 *glue.GetDatabaseInput) (r0 *glue.GetDatabaseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDatabase", i0)
	r0, _ = returns[0].(*glue.GetDatabaseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetDatabaseRequest(i0 *glue.GetDatabaseInput) (r0 *request.Request, r1 *glue.GetDatabaseOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDatabaseRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetDatabaseOutput)
	return
}

func (d *GlueDouble) GetDatabaseWithContext(i0 context.Context, i1 *glue.GetDatabaseInput, i2 ...request.Option) (r0 *glue.GetDatabaseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDatabaseWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetDatabaseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetDatabaseWithContext(ctx context.Context, in *glue.GetDatabaseInput, _ ...request.Option) (*glue.GetDatabaseOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDatabase cancelled", ctx.Err())
	default:
		return d.GetDatabase(in)
	}
}

func (d *GlueDouble) GetDatabases(i0 *glue.GetDatabasesInput) (r0 *glue.GetDatabasesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDatabases", i0)
	r0, _ = returns[0].(*glue.GetDatabasesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetDatabasesPages(i0 *glue.GetDatabasesInput, i1 func(*glue.GetDatabasesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDatabasesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeGetDatabasesPages(in *glue.GetDatabasesInput, pager func(*glue.GetDatabasesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetDatabases", paginators, in, pager)
}

func (d *GlueDouble) GetDatabasesPagesWithContext(i0 context.Context, i1 *glue.GetDatabasesInput, i2 func(*glue.GetDatabasesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDatabasesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeGetDatabasesPagesWithContext(ctx context.Context, in *glue.GetDatabasesInput, pager func(*glue.GetDatabasesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetDatabases", paginators, ctx, in, pager, options...)
}

func (d *GlueDouble) GetDatabasesRequest(i0 *glue.GetDatabasesInput) (r0 *request.Request, r1 *glue.GetDatabasesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDatabasesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetDatabasesOutput)
	return
}

func (d *GlueDouble) GetDatabasesWithContext(i0 context.Context, i1 *glue.GetDatabasesInput, i2 ...request.Option) (r0 *glue.GetDatabasesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDatabasesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetDatabasesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetDatabasesWithContext(ctx context.Context, in *glue.GetDatabasesInput, _ ...request.Option) (*glue.GetDatabasesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDatabases cancelled", ctx.Err())
	default:
		return d.GetDatabases(in)
	}
}

func (d *GlueDouble) GetDataflowGraph(i0 *glue.GetDataflowGraphInput) (r0 *glue.GetDataflowGraphOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDataflowGraph", i0)
	r0, _ = returns[0].(*glue.GetDataflowGraphOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetDataflowGraphRequest(i0 *glue.GetDataflowGraphInput) (r0 *request.Request, r1 *glue.GetDataflowGraphOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDataflowGraphRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetDataflowGraphOutput)
	return
}

func (d *GlueDouble) GetDataflowGraphWithContext(i0 context.Context, i1 *glue.GetDataflowGraphInput, i2 ...request.Option) (r0 *glue.GetDataflowGraphOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDataflowGraphWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetDataflowGraphOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetDataflowGraphWithContext(ctx context.Context, in *glue.GetDataflowGraphInput, _ ...request.Option) (*glue.GetDataflowGraphOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDataflowGraph cancelled", ctx.Err())
	default:
		return d.GetDataflowGraph(in)
	}
}

func (d *GlueDouble) GetDevEndpoint(i0 *glue.GetDevEndpointInput) (r0 *glue.GetDevEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDevEndpoint", i0)
	r0, _ = returns[0].(*glue.GetDevEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetDevEndpointRequest(i0 *glue.GetDevEndpointInput) (r0 *request.Request, r1 *glue.GetDevEndpointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDevEndpointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetDevEndpointOutput)
	return
}

func (d *GlueDouble) GetDevEndpointWithContext(i0 context.Context, i1 *glue.GetDevEndpointInput, i2 ...request.Option) (r0 *glue.GetDevEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDevEndpointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetDevEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetDevEndpointWithContext(ctx context.Context, in *glue.GetDevEndpointInput, _ ...request.Option) (*glue.GetDevEndpointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDevEndpoint cancelled", ctx.Err())
	default:
		return d.GetDevEndpoint(in)
	}
}

func (d *GlueDouble) GetDevEndpoints(i0 *glue.GetDevEndpointsInput) (r0 *glue.GetDevEndpointsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDevEndpoints", i0)
	r0, _ = returns[0].(*glue.GetDevEndpointsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetDevEndpointsPages(i0 *glue.GetDevEndpointsInput, i1 func(*glue.GetDevEndpointsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDevEndpointsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeGetDevEndpointsPages(in *glue.GetDevEndpointsInput, pager func(*glue.GetDevEndpointsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetDevEndpoints", paginators, in, pager)
}

func (d *GlueDouble) GetDevEndpointsPagesWithContext(i0 context.Context, i1 *glue.GetDevEndpointsInput, i2 func(*glue.GetDevEndpointsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDevEndpointsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeGetDevEndpointsPagesWithContext(ctx context.Context, in *glue.GetDevEndpointsInput, pager func(*glue.GetDevEndpointsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetDevEndpoints", paginators, ctx, in, pager, options...)
}

func (d *GlueDouble) GetDevEndpointsRequest(i0 *glue.GetDevEndpointsInput) (r0 *request.Request, r1 *glue.GetDevEndpointsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDevEndpointsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetDevEndpointsOutput)
	return
}

func (d *GlueDouble) GetDevEndpointsWithContext(i0 context.Context, i1 *glue.GetDevEndpointsInput, i2 ...request.Option) (r0 *glue.GetDevEndpointsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDevEndpointsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetDevEndpointsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetDevEndpointsWithContext(ctx context.Context, in *glue.GetDevEndpointsInput, _ ...request.Option) (*glue.GetDevEndpointsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDevEndpoints cancelled", ctx.Err())
	default:
		return d.GetDevEndpoints(in)
	}
}

func (d *GlueDouble) GetJob(i0 *glue.GetJobInput) (r0 *glue.GetJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJob", i0)
	r0, _ = returns[0].(*glue.GetJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetJobBookmark(i0 *glue.GetJobBookmarkInput) (r0 *glue.GetJobBookmarkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobBookmark", i0)
	r0, _ = returns[0].(*glue.GetJobBookmarkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetJobBookmarkRequest(i0 *glue.GetJobBookmarkInput) (r0 *request.Request, r1 *glue.GetJobBookmarkOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobBookmarkRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetJobBookmarkOutput)
	return
}

func (d *GlueDouble) GetJobBookmarkWithContext(i0 context.Context, i1 *glue.GetJobBookmarkInput, i2 ...request.Option) (r0 *glue.GetJobBookmarkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobBookmarkWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetJobBookmarkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetJobBookmarkWithContext(ctx context.Context, in *glue.GetJobBookmarkInput, _ ...request.Option) (*glue.GetJobBookmarkOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetJobBookmark cancelled", ctx.Err())
	default:
		return d.GetJobBookmark(in)
	}
}

func (d *GlueDouble) GetJobRequest(i0 *glue.GetJobInput) (r0 *request.Request, r1 *glue.GetJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetJobOutput)
	return
}

func (d *GlueDouble) GetJobRun(i0 *glue.GetJobRunInput) (r0 *glue.GetJobRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobRun", i0)
	r0, _ = returns[0].(*glue.GetJobRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetJobRunRequest(i0 *glue.GetJobRunInput) (r0 *request.Request, r1 *glue.GetJobRunOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobRunRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetJobRunOutput)
	return
}

func (d *GlueDouble) GetJobRunWithContext(i0 context.Context, i1 *glue.GetJobRunInput, i2 ...request.Option) (r0 *glue.GetJobRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobRunWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetJobRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetJobRunWithContext(ctx context.Context, in *glue.GetJobRunInput, _ ...request.Option) (*glue.GetJobRunOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetJobRun cancelled", ctx.Err())
	default:
		return d.GetJobRun(in)
	}
}

func (d *GlueDouble) GetJobRuns(i0 *glue.GetJobRunsInput) (r0 *glue.GetJobRunsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobRuns", i0)
	r0, _ = returns[0].(*glue.GetJobRunsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetJobRunsPages(i0 *glue.GetJobRunsInput, i1 func(*glue.GetJobRunsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobRunsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeGetJobRunsPages(in *glue.GetJobRunsInput, pager func(*glue.GetJobRunsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetJobRuns", paginators, in, pager)
}

func (d *GlueDouble) GetJobRunsPagesWithContext(i0 context.Context, i1 *glue.GetJobRunsInput, i2 func(*glue.GetJobRunsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobRunsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeGetJobRunsPagesWithContext(ctx context.Context, in *glue.GetJobRunsInput, pager func(*glue.GetJobRunsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetJobRuns", paginators, ctx, in, pager, options...)
}

func (d *GlueDouble) GetJobRunsRequest(i0 *glue.GetJobRunsInput) (r0 *request.Request, r1 *glue.GetJobRunsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobRunsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetJobRunsOutput)
	return
}

func (d *GlueDouble) GetJobRunsWithContext(i0 context.Context, i1 *glue.GetJobRunsInput, i2 ...request.Option) (r0 *glue.GetJobRunsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobRunsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetJobRunsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetJobRunsWithContext(ctx context.Context, in *glue.GetJobRunsInput, _ ...request.Option) (*glue.GetJobRunsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetJobRuns cancelled", ctx.Err())
	default:
		return d.GetJobRuns(in)
	}
}

func (d *GlueDouble) GetJobWithContext(i0 context.Context, i1 *glue.GetJobInput, i2 ...request.Option) (r0 *glue.GetJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetJobWithContext(ctx context.Context, in *glue.GetJobInput, _ ...request.Option) (*glue.GetJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetJob cancelled", ctx.Err())
	default:
		return d.GetJob(in)
	}
}

func (d *GlueDouble) GetJobs(i0 *glue.GetJobsInput) (r0 *glue.GetJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobs", i0)
	r0, _ = returns[0].(*glue.GetJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetJobsPages(i0 *glue.GetJobsInput, i1 func(*glue.GetJobsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeGetJobsPages(in *glue.GetJobsInput, pager func(*glue.GetJobsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetJobs", paginators, in, pager)
}

func (d *GlueDouble) GetJobsPagesWithContext(i0 context.Context, i1 *glue.GetJobsInput, i2 func(*glue.GetJobsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeGetJobsPagesWithContext(ctx context.Context, in *glue.GetJobsInput, pager func(*glue.GetJobsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetJobs", paginators, ctx, in, pager, options...)
}

func (d *GlueDouble) GetJobsRequest(i0 *glue.GetJobsInput) (r0 *request.Request, r1 *glue.GetJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetJobsOutput)
	return
}

func (d *GlueDouble) GetJobsWithContext(i0 context.Context, i1 *glue.GetJobsInput, i2 ...request.Option) (r0 *glue.GetJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetJobsWithContext(ctx context.Context, in *glue.GetJobsInput, _ ...request.Option) (*glue.GetJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetJobs cancelled", ctx.Err())
	default:
		return d.GetJobs(in)
	}
}

func (d *GlueDouble) GetMLTaskRun(i0 *glue.GetMLTaskRunInput) (r0 *glue.GetMLTaskRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMLTaskRun", i0)
	r0, _ = returns[0].(*glue.GetMLTaskRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetMLTaskRunRequest(i0 *glue.GetMLTaskRunInput) (r0 *request.Request, r1 *glue.GetMLTaskRunOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMLTaskRunRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetMLTaskRunOutput)
	return
}

func (d *GlueDouble) GetMLTaskRunWithContext(i0 context.Context, i1 *glue.GetMLTaskRunInput, i2 ...request.Option) (r0 *glue.GetMLTaskRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMLTaskRunWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetMLTaskRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetMLTaskRunWithContext(ctx context.Context, in *glue.GetMLTaskRunInput, _ ...request.Option) (*glue.GetMLTaskRunOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetMLTaskRun cancelled", ctx.Err())
	default:
		return d.GetMLTaskRun(in)
	}
}

func (d *GlueDouble) GetMLTaskRuns(i0 *glue.GetMLTaskRunsInput) (r0 *glue.GetMLTaskRunsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMLTaskRuns", i0)
	r0, _ = returns[0].(*glue.GetMLTaskRunsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetMLTaskRunsPages(i0 *glue.GetMLTaskRunsInput, i1 func(*glue.GetMLTaskRunsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMLTaskRunsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeGetMLTaskRunsPages(in *glue.GetMLTaskRunsInput, pager func(*glue.GetMLTaskRunsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetMLTaskRuns", paginators, in, pager)
}

func (d *GlueDouble) GetMLTaskRunsPagesWithContext(i0 context.Context, i1 *glue.GetMLTaskRunsInput, i2 func(*glue.GetMLTaskRunsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMLTaskRunsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeGetMLTaskRunsPagesWithContext(ctx context.Context, in *glue.GetMLTaskRunsInput, pager func(*glue.GetMLTaskRunsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetMLTaskRuns", paginators, ctx, in, pager, options...)
}

func (d *GlueDouble) GetMLTaskRunsRequest(i0 *glue.GetMLTaskRunsInput) (r0 *request.Request, r1 *glue.GetMLTaskRunsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMLTaskRunsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetMLTaskRunsOutput)
	return
}

func (d *GlueDouble) GetMLTaskRunsWithContext(i0 context.Context, i1 *glue.GetMLTaskRunsInput, i2 ...request.Option) (r0 *glue.GetMLTaskRunsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMLTaskRunsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetMLTaskRunsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetMLTaskRunsWithContext(ctx context.Context, in *glue.GetMLTaskRunsInput, _ ...request.Option) (*glue.GetMLTaskRunsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetMLTaskRuns cancelled", ctx.Err())
	default:
		return d.GetMLTaskRuns(in)
	}
}

func (d *GlueDouble) GetMLTransform(i0 *glue.GetMLTransformInput) (r0 *glue.GetMLTransformOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMLTransform", i0)
	r0, _ = returns[0].(*glue.GetMLTransformOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetMLTransformRequest(i0 *glue.GetMLTransformInput) (r0 *request.Request, r1 *glue.GetMLTransformOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMLTransformRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetMLTransformOutput)
	return
}

func (d *GlueDouble) GetMLTransformWithContext(i0 context.Context, i1 *glue.GetMLTransformInput, i2 ...request.Option) (r0 *glue.GetMLTransformOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMLTransformWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetMLTransformOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetMLTransformWithContext(ctx context.Context, in *glue.GetMLTransformInput, _ ...request.Option) (*glue.GetMLTransformOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetMLTransform cancelled", ctx.Err())
	default:
		return d.GetMLTransform(in)
	}
}

func (d *GlueDouble) GetMLTransforms(i0 *glue.GetMLTransformsInput) (r0 *glue.GetMLTransformsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMLTransforms", i0)
	r0, _ = returns[0].(*glue.GetMLTransformsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetMLTransformsPages(i0 *glue.GetMLTransformsInput, i1 func(*glue.GetMLTransformsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMLTransformsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeGetMLTransformsPages(in *glue.GetMLTransformsInput, pager func(*glue.GetMLTransformsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetMLTransforms", paginators, in, pager)
}

func (d *GlueDouble) GetMLTransformsPagesWithContext(i0 context.Context, i1 *glue.GetMLTransformsInput, i2 func(*glue.GetMLTransformsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMLTransformsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeGetMLTransformsPagesWithContext(ctx context.Context, in *glue.GetMLTransformsInput, pager func(*glue.GetMLTransformsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetMLTransforms", paginators, ctx, in, pager, options...)
}

func (d *GlueDouble) GetMLTransformsRequest(i0 *glue.GetMLTransformsInput) (r0 *request.Request, r1 *glue.GetMLTransformsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMLTransformsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetMLTransformsOutput)
	return
}

func (d *GlueDouble) GetMLTransformsWithContext(i0 context.Context, i1 *glue.GetMLTransformsInput, i2 ...request.Option) (r0 *glue.GetMLTransformsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMLTransformsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetMLTransformsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetMLTransformsWithContext(ctx context.Context, in *glue.GetMLTransformsInput, _ ...request.Option) (*glue.GetMLTransformsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetMLTransforms cancelled", ctx.Err())
	default:
		return d.GetMLTransforms(in)
	}
}

func (d *GlueDouble) GetMapping(i0 *glue.GetMappingInput) (r0 *glue.GetMappingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMapping", i0)
	r0, _ = returns[0].(*glue.GetMappingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetMappingRequest(i0 *glue.GetMappingInput) (r0 *request.Request, r1 *glue.GetMappingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMappingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetMappingOutput)
	return
}

func (d *GlueDouble) GetMappingWithContext(i0 context.Context, i1 *glue.GetMappingInput, i2 ...request.Option) (r0 *glue.GetMappingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMappingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetMappingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetMappingWithContext(ctx context.Context, in *glue.GetMappingInput, _ ...request.Option) (*glue.GetMappingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetMapping cancelled", ctx.Err())
	default:
		return d.GetMapping(in)
	}
}

func (d *GlueDouble) GetPartition(i0 *glue.GetPartitionInput) (r0 *glue.GetPartitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPartition", i0)
	r0, _ = returns[0].(*glue.GetPartitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetPartitionRequest(i0 *glue.GetPartitionInput) (r0 *request.Request, r1 *glue.GetPartitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPartitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetPartitionOutput)
	return
}

func (d *GlueDouble) GetPartitionWithContext(i0 context.Context, i1 *glue.GetPartitionInput, i2 ...request.Option) (r0 *glue.GetPartitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPartitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetPartitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetPartitionWithContext(ctx context.Context, in *glue.GetPartitionInput, _ ...request.Option) (*glue.GetPartitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetPartition cancelled", ctx.Err())
	default:
		return d.GetPartition(in)
	}
}

func (d *GlueDouble) GetPartitions(i0 *glue.GetPartitionsInput) (r0 *glue.GetPartitionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPartitions", i0)
	r0, _ = returns[0].(*glue.GetPartitionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetPartitionsPages(i0 *glue.GetPartitionsInput, i1 func(*glue.GetPartitionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPartitionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeGetPartitionsPages(in *glue.GetPartitionsInput, pager func(*glue.GetPartitionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetPartitions", paginators, in, pager)
}

func (d *GlueDouble) GetPartitionsPagesWithContext(i0 context.Context, i1 *glue.GetPartitionsInput, i2 func(*glue.GetPartitionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPartitionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeGetPartitionsPagesWithContext(ctx context.Context, in *glue.GetPartitionsInput, pager func(*glue.GetPartitionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetPartitions", paginators, ctx, in, pager, options...)
}

func (d *GlueDouble) GetPartitionsRequest(i0 *glue.GetPartitionsInput) (r0 *request.Request, r1 *glue.GetPartitionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPartitionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetPartitionsOutput)
	return
}

func (d *GlueDouble) GetPartitionsWithContext(i0 context.Context, i1 *glue.GetPartitionsInput, i2 ...request.Option) (r0 *glue.GetPartitionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPartitionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetPartitionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetPartitionsWithContext(ctx context.Context, in *glue.GetPartitionsInput, _ ...request.Option) (*glue.GetPartitionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetPartitions cancelled", ctx.Err())
	default:
		return d.GetPartitions(in)
	}
}

func (d *GlueDouble) GetPlan(i0 *glue.GetPlanInput) (r0 *glue.GetPlanOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPlan", i0)
	r0, _ = returns[0].(*glue.GetPlanOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetPlanRequest(i0 *glue.GetPlanInput) (r0 *request.Request, r1 *glue.GetPlanOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPlanRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetPlanOutput)
	return
}

func (d *GlueDouble) GetPlanWithContext(i0 context.Context, i1 *glue.GetPlanInput, i2 ...request.Option) (r0 *glue.GetPlanOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPlanWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetPlanOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetPlanWithContext(ctx context.Context, in *glue.GetPlanInput, _ ...request.Option) (*glue.GetPlanOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetPlan cancelled", ctx.Err())
	default:
		return d.GetPlan(in)
	}
}

func (d *GlueDouble) GetResourcePolicy(i0 *glue.GetResourcePolicyInput) (r0 *glue.GetResourcePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResourcePolicy", i0)
	r0, _ = returns[0].(*glue.GetResourcePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetResourcePolicyRequest(i0 *glue.GetResourcePolicyInput) (r0 *request.Request, r1 *glue.GetResourcePolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResourcePolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetResourcePolicyOutput)
	return
}

func (d *GlueDouble) GetResourcePolicyWithContext(i0 context.Context, i1 *glue.GetResourcePolicyInput, i2 ...request.Option) (r0 *glue.GetResourcePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResourcePolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetResourcePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetResourcePolicyWithContext(ctx context.Context, in *glue.GetResourcePolicyInput, _ ...request.Option) (*glue.GetResourcePolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetResourcePolicy cancelled", ctx.Err())
	default:
		return d.GetResourcePolicy(in)
	}
}

func (d *GlueDouble) GetSecurityConfiguration(i0 *glue.GetSecurityConfigurationInput) (r0 *glue.GetSecurityConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSecurityConfiguration", i0)
	r0, _ = returns[0].(*glue.GetSecurityConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetSecurityConfigurationRequest(i0 *glue.GetSecurityConfigurationInput) (r0 *request.Request, r1 *glue.GetSecurityConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSecurityConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetSecurityConfigurationOutput)
	return
}

func (d *GlueDouble) GetSecurityConfigurationWithContext(i0 context.Context, i1 *glue.GetSecurityConfigurationInput, i2 ...request.Option) (r0 *glue.GetSecurityConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSecurityConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetSecurityConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetSecurityConfigurationWithContext(ctx context.Context, in *glue.GetSecurityConfigurationInput, _ ...request.Option) (*glue.GetSecurityConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetSecurityConfiguration cancelled", ctx.Err())
	default:
		return d.GetSecurityConfiguration(in)
	}
}

func (d *GlueDouble) GetSecurityConfigurations(i0 *glue.GetSecurityConfigurationsInput) (r0 *glue.GetSecurityConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSecurityConfigurations", i0)
	r0, _ = returns[0].(*glue.GetSecurityConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetSecurityConfigurationsPages(i0 *glue.GetSecurityConfigurationsInput, i1 func(*glue.GetSecurityConfigurationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSecurityConfigurationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeGetSecurityConfigurationsPages(in *glue.GetSecurityConfigurationsInput, pager func(*glue.GetSecurityConfigurationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetSecurityConfigurations", paginators, in, pager)
}

func (d *GlueDouble) GetSecurityConfigurationsPagesWithContext(i0 context.Context, i1 *glue.GetSecurityConfigurationsInput, i2 func(*glue.GetSecurityConfigurationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSecurityConfigurationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeGetSecurityConfigurationsPagesWithContext(ctx context.Context, in *glue.GetSecurityConfigurationsInput, pager func(*glue.GetSecurityConfigurationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetSecurityConfigurations", paginators, ctx, in, pager, options...)
}

func (d *GlueDouble) GetSecurityConfigurationsRequest(i0 *glue.GetSecurityConfigurationsInput) (r0 *request.Request, r1 *glue.GetSecurityConfigurationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSecurityConfigurationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetSecurityConfigurationsOutput)
	return
}

func (d *GlueDouble) GetSecurityConfigurationsWithContext(i0 context.Context, i1 *glue.GetSecurityConfigurationsInput, i2 ...request.Option) (r0 *glue.GetSecurityConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSecurityConfigurationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetSecurityConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetSecurityConfigurationsWithContext(ctx context.Context, in *glue.GetSecurityConfigurationsInput, _ ...request.Option) (*glue.GetSecurityConfigurationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetSecurityConfigurations cancelled", ctx.Err())
	default:
		return d.GetSecurityConfigurations(in)
	}
}

func (d *GlueDouble) GetTable(i0 *glue.GetTableInput) (r0 *glue.GetTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTable", i0)
	r0, _ = returns[0].(*glue.GetTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetTableRequest(i0 *glue.GetTableInput) (r0 *request.Request, r1 *glue.GetTableOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTableRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetTableOutput)
	return
}

func (d *GlueDouble) GetTableVersion(i0 *glue.GetTableVersionInput) (r0 *glue.GetTableVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTableVersion", i0)
	r0, _ = returns[0].(*glue.GetTableVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetTableVersionRequest(i0 *glue.GetTableVersionInput) (r0 *request.Request, r1 *glue.GetTableVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTableVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetTableVersionOutput)
	return
}

func (d *GlueDouble) GetTableVersionWithContext(i0 context.Context, i1 *glue.GetTableVersionInput, i2 ...request.Option) (r0 *glue.GetTableVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTableVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetTableVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetTableVersionWithContext(ctx context.Context, in *glue.GetTableVersionInput, _ ...request.Option) (*glue.GetTableVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetTableVersion cancelled", ctx.Err())
	default:
		return d.GetTableVersion(in)
	}
}

func (d *GlueDouble) GetTableVersions(i0 *glue.GetTableVersionsInput) (r0 *glue.GetTableVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTableVersions", i0)
	r0, _ = returns[0].(*glue.GetTableVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetTableVersionsPages(i0 *glue.GetTableVersionsInput, i1 func(*glue.GetTableVersionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTableVersionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeGetTableVersionsPages(in *glue.GetTableVersionsInput, pager func(*glue.GetTableVersionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetTableVersions", paginators, in, pager)
}

func (d *GlueDouble) GetTableVersionsPagesWithContext(i0 context.Context, i1 *glue.GetTableVersionsInput, i2 func(*glue.GetTableVersionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTableVersionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeGetTableVersionsPagesWithContext(ctx context.Context, in *glue.GetTableVersionsInput, pager func(*glue.GetTableVersionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetTableVersions", paginators, ctx, in, pager, options...)
}

func (d *GlueDouble) GetTableVersionsRequest(i0 *glue.GetTableVersionsInput) (r0 *request.Request, r1 *glue.GetTableVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTableVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetTableVersionsOutput)
	return
}

func (d *GlueDouble) GetTableVersionsWithContext(i0 context.Context, i1 *glue.GetTableVersionsInput, i2 ...request.Option) (r0 *glue.GetTableVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTableVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetTableVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetTableVersionsWithContext(ctx context.Context, in *glue.GetTableVersionsInput, _ ...request.Option) (*glue.GetTableVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetTableVersions cancelled", ctx.Err())
	default:
		return d.GetTableVersions(in)
	}
}

func (d *GlueDouble) GetTableWithContext(i0 context.Context, i1 *glue.GetTableInput, i2 ...request.Option) (r0 *glue.GetTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTableWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetTableWithContext(ctx context.Context, in *glue.GetTableInput, _ ...request.Option) (*glue.GetTableOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetTable cancelled", ctx.Err())
	default:
		return d.GetTable(in)
	}
}

func (d *GlueDouble) GetTables(i0 *glue.GetTablesInput) (r0 *glue.GetTablesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTables", i0)
	r0, _ = returns[0].(*glue.GetTablesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetTablesPages(i0 *glue.GetTablesInput, i1 func(*glue.GetTablesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTablesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeGetTablesPages(in *glue.GetTablesInput, pager func(*glue.GetTablesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetTables", paginators, in, pager)
}

func (d *GlueDouble) GetTablesPagesWithContext(i0 context.Context, i1 *glue.GetTablesInput, i2 func(*glue.GetTablesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTablesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeGetTablesPagesWithContext(ctx context.Context, in *glue.GetTablesInput, pager func(*glue.GetTablesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetTables", paginators, ctx, in, pager, options...)
}

func (d *GlueDouble) GetTablesRequest(i0 *glue.GetTablesInput) (r0 *request.Request, r1 *glue.GetTablesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTablesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetTablesOutput)
	return
}

func (d *GlueDouble) GetTablesWithContext(i0 context.Context, i1 *glue.GetTablesInput, i2 ...request.Option) (r0 *glue.GetTablesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTablesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetTablesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetTablesWithContext(ctx context.Context, in *glue.GetTablesInput, _ ...request.Option) (*glue.GetTablesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetTables cancelled", ctx.Err())
	default:
		return d.GetTables(in)
	}
}

func (d *GlueDouble) GetTags(i0 *glue.GetTagsInput) (r0 *glue.GetTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTags", i0)
	r0, _ = returns[0].(*glue.GetTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetTagsRequest(i0 *glue.GetTagsInput) (r0 *request.Request, r1 *glue.GetTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetTagsOutput)
	return
}

func (d *GlueDouble) GetTagsWithContext(i0 context.Context, i1 *glue.GetTagsInput, i2 ...request.Option) (r0 *glue.GetTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetTagsWithContext(ctx context.Context, in *glue.GetTagsInput, _ ...request.Option) (*glue.GetTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetTags cancelled", ctx.Err())
	default:
		return d.GetTags(in)
	}
}

func (d *GlueDouble) GetTrigger(i0 *glue.GetTriggerInput) (r0 *glue.GetTriggerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTrigger", i0)
	r0, _ = returns[0].(*glue.GetTriggerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetTriggerRequest(i0 *glue.GetTriggerInput) (r0 *request.Request, r1 *glue.GetTriggerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTriggerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetTriggerOutput)
	return
}

func (d *GlueDouble) GetTriggerWithContext(i0 context.Context, i1 *glue.GetTriggerInput, i2 ...request.Option) (r0 *glue.GetTriggerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTriggerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetTriggerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetTriggerWithContext(ctx context.Context, in *glue.GetTriggerInput, _ ...request.Option) (*glue.GetTriggerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetTrigger cancelled", ctx.Err())
	default:
		return d.GetTrigger(in)
	}
}

func (d *GlueDouble) GetTriggers(i0 *glue.GetTriggersInput) (r0 *glue.GetTriggersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTriggers", i0)
	r0, _ = returns[0].(*glue.GetTriggersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetTriggersPages(i0 *glue.GetTriggersInput, i1 func(*glue.GetTriggersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTriggersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeGetTriggersPages(in *glue.GetTriggersInput, pager func(*glue.GetTriggersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetTriggers", paginators, in, pager)
}

func (d *GlueDouble) GetTriggersPagesWithContext(i0 context.Context, i1 *glue.GetTriggersInput, i2 func(*glue.GetTriggersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTriggersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeGetTriggersPagesWithContext(ctx context.Context, in *glue.GetTriggersInput, pager func(*glue.GetTriggersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetTriggers", paginators, ctx, in, pager, options...)
}

func (d *GlueDouble) GetTriggersRequest(i0 *glue.GetTriggersInput) (r0 *request.Request, r1 *glue.GetTriggersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTriggersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetTriggersOutput)
	return
}

func (d *GlueDouble) GetTriggersWithContext(i0 context.Context, i1 *glue.GetTriggersInput, i2 ...request.Option) (r0 *glue.GetTriggersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTriggersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetTriggersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetTriggersWithContext(ctx context.Context, in *glue.GetTriggersInput, _ ...request.Option) (*glue.GetTriggersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetTriggers cancelled", ctx.Err())
	default:
		return d.GetTriggers(in)
	}
}

func (d *GlueDouble) GetUserDefinedFunction(i0 *glue.GetUserDefinedFunctionInput) (r0 *glue.GetUserDefinedFunctionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUserDefinedFunction", i0)
	r0, _ = returns[0].(*glue.GetUserDefinedFunctionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetUserDefinedFunctionRequest(i0 *glue.GetUserDefinedFunctionInput) (r0 *request.Request, r1 *glue.GetUserDefinedFunctionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUserDefinedFunctionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetUserDefinedFunctionOutput)
	return
}

func (d *GlueDouble) GetUserDefinedFunctionWithContext(i0 context.Context, i1 *glue.GetUserDefinedFunctionInput, i2 ...request.Option) (r0 *glue.GetUserDefinedFunctionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUserDefinedFunctionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetUserDefinedFunctionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetUserDefinedFunctionWithContext(ctx context.Context, in *glue.GetUserDefinedFunctionInput, _ ...request.Option) (*glue.GetUserDefinedFunctionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetUserDefinedFunction cancelled", ctx.Err())
	default:
		return d.GetUserDefinedFunction(in)
	}
}

func (d *GlueDouble) GetUserDefinedFunctions(i0 *glue.GetUserDefinedFunctionsInput) (r0 *glue.GetUserDefinedFunctionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUserDefinedFunctions", i0)
	r0, _ = returns[0].(*glue.GetUserDefinedFunctionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetUserDefinedFunctionsPages(i0 *glue.GetUserDefinedFunctionsInput, i1 func(*glue.GetUserDefinedFunctionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUserDefinedFunctionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeGetUserDefinedFunctionsPages(in *glue.GetUserDefinedFunctionsInput, pager func(*glue.GetUserDefinedFunctionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetUserDefinedFunctions", paginators, in, pager)
}

func (d *GlueDouble) GetUserDefinedFunctionsPagesWithContext(i0 context.Context, i1 *glue.GetUserDefinedFunctionsInput, i2 func(*glue.GetUserDefinedFunctionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUserDefinedFunctionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeGetUserDefinedFunctionsPagesWithContext(ctx context.Context, in *glue.GetUserDefinedFunctionsInput, pager func(*glue.GetUserDefinedFunctionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetUserDefinedFunctions", paginators, ctx, in, pager, options...)
}

func (d *GlueDouble) GetUserDefinedFunctionsRequest(i0 *glue.GetUserDefinedFunctionsInput) (r0 *request.Request, r1 *glue.GetUserDefinedFunctionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUserDefinedFunctionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetUserDefinedFunctionsOutput)
	return
}

func (d *GlueDouble) GetUserDefinedFunctionsWithContext(i0 context.Context, i1 *glue.GetUserDefinedFunctionsInput, i2 ...request.Option) (r0 *glue.GetUserDefinedFunctionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetUserDefinedFunctionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetUserDefinedFunctionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetUserDefinedFunctionsWithContext(ctx context.Context, in *glue.GetUserDefinedFunctionsInput, _ ...request.Option) (*glue.GetUserDefinedFunctionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetUserDefinedFunctions cancelled", ctx.Err())
	default:
		return d.GetUserDefinedFunctions(in)
	}
}

func (d *GlueDouble) GetWorkflow(i0 *glue.GetWorkflowInput) (r0 *glue.GetWorkflowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetWorkflow", i0)
	r0, _ = returns[0].(*glue.GetWorkflowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetWorkflowRequest(i0 *glue.GetWorkflowInput) (r0 *request.Request, r1 *glue.GetWorkflowOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetWorkflowRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetWorkflowOutput)
	return
}

func (d *GlueDouble) GetWorkflowRun(i0 *glue.GetWorkflowRunInput) (r0 *glue.GetWorkflowRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetWorkflowRun", i0)
	r0, _ = returns[0].(*glue.GetWorkflowRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetWorkflowRunProperties(i0 *glue.GetWorkflowRunPropertiesInput) (r0 *glue.GetWorkflowRunPropertiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetWorkflowRunProperties", i0)
	r0, _ = returns[0].(*glue.GetWorkflowRunPropertiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetWorkflowRunPropertiesRequest(i0 *glue.GetWorkflowRunPropertiesInput) (r0 *request.Request, r1 *glue.GetWorkflowRunPropertiesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetWorkflowRunPropertiesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetWorkflowRunPropertiesOutput)
	return
}

func (d *GlueDouble) GetWorkflowRunPropertiesWithContext(i0 context.Context, i1 *glue.GetWorkflowRunPropertiesInput, i2 ...request.Option) (r0 *glue.GetWorkflowRunPropertiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetWorkflowRunPropertiesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetWorkflowRunPropertiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetWorkflowRunPropertiesWithContext(ctx context.Context, in *glue.GetWorkflowRunPropertiesInput, _ ...request.Option) (*glue.GetWorkflowRunPropertiesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetWorkflowRunProperties cancelled", ctx.Err())
	default:
		return d.GetWorkflowRunProperties(in)
	}
}

func (d *GlueDouble) GetWorkflowRunRequest(i0 *glue.GetWorkflowRunInput) (r0 *request.Request, r1 *glue.GetWorkflowRunOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetWorkflowRunRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetWorkflowRunOutput)
	return
}

func (d *GlueDouble) GetWorkflowRunWithContext(i0 context.Context, i1 *glue.GetWorkflowRunInput, i2 ...request.Option) (r0 *glue.GetWorkflowRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetWorkflowRunWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetWorkflowRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetWorkflowRunWithContext(ctx context.Context, in *glue.GetWorkflowRunInput, _ ...request.Option) (*glue.GetWorkflowRunOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetWorkflowRun cancelled", ctx.Err())
	default:
		return d.GetWorkflowRun(in)
	}
}

func (d *GlueDouble) GetWorkflowRuns(i0 *glue.GetWorkflowRunsInput) (r0 *glue.GetWorkflowRunsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetWorkflowRuns", i0)
	r0, _ = returns[0].(*glue.GetWorkflowRunsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) GetWorkflowRunsPages(i0 *glue.GetWorkflowRunsInput, i1 func(*glue.GetWorkflowRunsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetWorkflowRunsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeGetWorkflowRunsPages(in *glue.GetWorkflowRunsInput, pager func(*glue.GetWorkflowRunsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetWorkflowRuns", paginators, in, pager)
}

func (d *GlueDouble) GetWorkflowRunsPagesWithContext(i0 context.Context, i1 *glue.GetWorkflowRunsInput, i2 func(*glue.GetWorkflowRunsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetWorkflowRunsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeGetWorkflowRunsPagesWithContext(ctx context.Context, in *glue.GetWorkflowRunsInput, pager func(*glue.GetWorkflowRunsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetWorkflowRuns", paginators, ctx, in, pager, options...)
}

func (d *GlueDouble) GetWorkflowRunsRequest(i0 *glue.GetWorkflowRunsInput) (r0 *request.Request, r1 *glue.GetWorkflowRunsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetWorkflowRunsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.GetWorkflowRunsOutput)
	return
}

func (d *GlueDouble) GetWorkflowRunsWithContext(i0 context.Context, i1 *glue.GetWorkflowRunsInput, i2 ...request.Option) (r0 *glue.GetWorkflowRunsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetWorkflowRunsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetWorkflowRunsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetWorkflowRunsWithContext(ctx context.Context, in *glue.GetWorkflowRunsInput, _ ...request.Option) (*glue.GetWorkflowRunsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetWorkflowRuns cancelled", ctx.Err())
	default:
		return d.GetWorkflowRuns(in)
	}
}

func (d *GlueDouble) GetWorkflowWithContext(i0 context.Context, i1 *glue.GetWorkflowInput, i2 ...request.Option) (r0 *glue.GetWorkflowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetWorkflowWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.GetWorkflowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeGetWorkflowWithContext(ctx context.Context, in *glue.GetWorkflowInput, _ ...request.Option) (*glue.GetWorkflowOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetWorkflow cancelled", ctx.Err())
	default:
		return d.GetWorkflow(in)
	}
}

func (d *GlueDouble) ImportCatalogToGlue(i0 *glue.ImportCatalogToGlueInput) (r0 *glue.ImportCatalogToGlueOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportCatalogToGlue", i0)
	r0, _ = returns[0].(*glue.ImportCatalogToGlueOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) ImportCatalogToGlueRequest(i0 *glue.ImportCatalogToGlueInput) (r0 *request.Request, r1 *glue.ImportCatalogToGlueOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportCatalogToGlueRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.ImportCatalogToGlueOutput)
	return
}

func (d *GlueDouble) ImportCatalogToGlueWithContext(i0 context.Context, i1 *glue.ImportCatalogToGlueInput, i2 ...request.Option) (r0 *glue.ImportCatalogToGlueOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportCatalogToGlueWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.ImportCatalogToGlueOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeImportCatalogToGlueWithContext(ctx context.Context, in *glue.ImportCatalogToGlueInput, _ ...request.Option) (*glue.ImportCatalogToGlueOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ImportCatalogToGlue cancelled", ctx.Err())
	default:
		return d.ImportCatalogToGlue(in)
	}
}

func (d *GlueDouble) ListCrawlers(i0 *glue.ListCrawlersInput) (r0 *glue.ListCrawlersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCrawlers", i0)
	r0, _ = returns[0].(*glue.ListCrawlersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) ListCrawlersPages(i0 *glue.ListCrawlersInput, i1 func(*glue.ListCrawlersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCrawlersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeListCrawlersPages(in *glue.ListCrawlersInput, pager func(*glue.ListCrawlersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListCrawlers", paginators, in, pager)
}

func (d *GlueDouble) ListCrawlersPagesWithContext(i0 context.Context, i1 *glue.ListCrawlersInput, i2 func(*glue.ListCrawlersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCrawlersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeListCrawlersPagesWithContext(ctx context.Context, in *glue.ListCrawlersInput, pager func(*glue.ListCrawlersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListCrawlers", paginators, ctx, in, pager, options...)
}

func (d *GlueDouble) ListCrawlersRequest(i0 *glue.ListCrawlersInput) (r0 *request.Request, r1 *glue.ListCrawlersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCrawlersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.ListCrawlersOutput)
	return
}

func (d *GlueDouble) ListCrawlersWithContext(i0 context.Context, i1 *glue.ListCrawlersInput, i2 ...request.Option) (r0 *glue.ListCrawlersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCrawlersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.ListCrawlersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeListCrawlersWithContext(ctx context.Context, in *glue.ListCrawlersInput, _ ...request.Option) (*glue.ListCrawlersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListCrawlers cancelled", ctx.Err())
	default:
		return d.ListCrawlers(in)
	}
}

func (d *GlueDouble) ListDevEndpoints(i0 *glue.ListDevEndpointsInput) (r0 *glue.ListDevEndpointsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDevEndpoints", i0)
	r0, _ = returns[0].(*glue.ListDevEndpointsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) ListDevEndpointsPages(i0 *glue.ListDevEndpointsInput, i1 func(*glue.ListDevEndpointsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDevEndpointsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeListDevEndpointsPages(in *glue.ListDevEndpointsInput, pager func(*glue.ListDevEndpointsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListDevEndpoints", paginators, in, pager)
}

func (d *GlueDouble) ListDevEndpointsPagesWithContext(i0 context.Context, i1 *glue.ListDevEndpointsInput, i2 func(*glue.ListDevEndpointsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDevEndpointsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeListDevEndpointsPagesWithContext(ctx context.Context, in *glue.ListDevEndpointsInput, pager func(*glue.ListDevEndpointsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListDevEndpoints", paginators, ctx, in, pager, options...)
}

func (d *GlueDouble) ListDevEndpointsRequest(i0 *glue.ListDevEndpointsInput) (r0 *request.Request, r1 *glue.ListDevEndpointsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDevEndpointsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.ListDevEndpointsOutput)
	return
}

func (d *GlueDouble) ListDevEndpointsWithContext(i0 context.Context, i1 *glue.ListDevEndpointsInput, i2 ...request.Option) (r0 *glue.ListDevEndpointsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDevEndpointsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.ListDevEndpointsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeListDevEndpointsWithContext(ctx context.Context, in *glue.ListDevEndpointsInput, _ ...request.Option) (*glue.ListDevEndpointsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDevEndpoints cancelled", ctx.Err())
	default:
		return d.ListDevEndpoints(in)
	}
}

func (d *GlueDouble) ListJobs(i0 *glue.ListJobsInput) (r0 *glue.ListJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobs", i0)
	r0, _ = returns[0].(*glue.ListJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) ListJobsPages(i0 *glue.ListJobsInput, i1 func(*glue.ListJobsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeListJobsPages(in *glue.ListJobsInput, pager func(*glue.ListJobsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListJobs", paginators, in, pager)
}

func (d *GlueDouble) ListJobsPagesWithContext(i0 context.Context, i1 *glue.ListJobsInput, i2 func(*glue.ListJobsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeListJobsPagesWithContext(ctx context.Context, in *glue.ListJobsInput, pager func(*glue.ListJobsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListJobs", paginators, ctx, in, pager, options...)
}

func (d *GlueDouble) ListJobsRequest(i0 *glue.ListJobsInput) (r0 *request.Request, r1 *glue.ListJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.ListJobsOutput)
	return
}

func (d *GlueDouble) ListJobsWithContext(i0 context.Context, i1 *glue.ListJobsInput, i2 ...request.Option) (r0 *glue.ListJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.ListJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeListJobsWithContext(ctx context.Context, in *glue.ListJobsInput, _ ...request.Option) (*glue.ListJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListJobs cancelled", ctx.Err())
	default:
		return d.ListJobs(in)
	}
}

func (d *GlueDouble) ListTriggers(i0 *glue.ListTriggersInput) (r0 *glue.ListTriggersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTriggers", i0)
	r0, _ = returns[0].(*glue.ListTriggersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) ListTriggersPages(i0 *glue.ListTriggersInput, i1 func(*glue.ListTriggersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTriggersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeListTriggersPages(in *glue.ListTriggersInput, pager func(*glue.ListTriggersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTriggers", paginators, in, pager)
}

func (d *GlueDouble) ListTriggersPagesWithContext(i0 context.Context, i1 *glue.ListTriggersInput, i2 func(*glue.ListTriggersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTriggersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeListTriggersPagesWithContext(ctx context.Context, in *glue.ListTriggersInput, pager func(*glue.ListTriggersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTriggers", paginators, ctx, in, pager, options...)
}

func (d *GlueDouble) ListTriggersRequest(i0 *glue.ListTriggersInput) (r0 *request.Request, r1 *glue.ListTriggersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTriggersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.ListTriggersOutput)
	return
}

func (d *GlueDouble) ListTriggersWithContext(i0 context.Context, i1 *glue.ListTriggersInput, i2 ...request.Option) (r0 *glue.ListTriggersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTriggersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.ListTriggersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeListTriggersWithContext(ctx context.Context, in *glue.ListTriggersInput, _ ...request.Option) (*glue.ListTriggersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTriggers cancelled", ctx.Err())
	default:
		return d.ListTriggers(in)
	}
}

func (d *GlueDouble) ListWorkflows(i0 *glue.ListWorkflowsInput) (r0 *glue.ListWorkflowsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWorkflows", i0)
	r0, _ = returns[0].(*glue.ListWorkflowsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) ListWorkflowsPages(i0 *glue.ListWorkflowsInput, i1 func(*glue.ListWorkflowsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWorkflowsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeListWorkflowsPages(in *glue.ListWorkflowsInput, pager func(*glue.ListWorkflowsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListWorkflows", paginators, in, pager)
}

func (d *GlueDouble) ListWorkflowsPagesWithContext(i0 context.Context, i1 *glue.ListWorkflowsInput, i2 func(*glue.ListWorkflowsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWorkflowsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeListWorkflowsPagesWithContext(ctx context.Context, in *glue.ListWorkflowsInput, pager func(*glue.ListWorkflowsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListWorkflows", paginators, ctx, in, pager, options...)
}

func (d *GlueDouble) ListWorkflowsRequest(i0 *glue.ListWorkflowsInput) (r0 *request.Request, r1 *glue.ListWorkflowsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWorkflowsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.ListWorkflowsOutput)
	return
}

func (d *GlueDouble) ListWorkflowsWithContext(i0 context.Context, i1 *glue.ListWorkflowsInput, i2 ...request.Option) (r0 *glue.ListWorkflowsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWorkflowsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.ListWorkflowsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeListWorkflowsWithContext(ctx context.Context, in *glue.ListWorkflowsInput, _ ...request.Option) (*glue.ListWorkflowsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListWorkflows cancelled", ctx.Err())
	default:
		return d.ListWorkflows(in)
	}
}

func (d *GlueDouble) PutDataCatalogEncryptionSettings(i0 *glue.PutDataCatalogEncryptionSettingsInput) (r0 *glue.PutDataCatalogEncryptionSettingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutDataCatalogEncryptionSettings", i0)
	r0, _ = returns[0].(*glue.PutDataCatalogEncryptionSettingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) PutDataCatalogEncryptionSettingsRequest(i0 *glue.PutDataCatalogEncryptionSettingsInput) (r0 *request.Request, r1 *glue.PutDataCatalogEncryptionSettingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutDataCatalogEncryptionSettingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.PutDataCatalogEncryptionSettingsOutput)
	return
}

func (d *GlueDouble) PutDataCatalogEncryptionSettingsWithContext(i0 context.Context, i1 *glue.PutDataCatalogEncryptionSettingsInput, i2 ...request.Option) (r0 *glue.PutDataCatalogEncryptionSettingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutDataCatalogEncryptionSettingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.PutDataCatalogEncryptionSettingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakePutDataCatalogEncryptionSettingsWithContext(ctx context.Context, in *glue.PutDataCatalogEncryptionSettingsInput, _ ...request.Option) (*glue.PutDataCatalogEncryptionSettingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutDataCatalogEncryptionSettings cancelled", ctx.Err())
	default:
		return d.PutDataCatalogEncryptionSettings(in)
	}
}

func (d *GlueDouble) PutResourcePolicy(i0 *glue.PutResourcePolicyInput) (r0 *glue.PutResourcePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutResourcePolicy", i0)
	r0, _ = returns[0].(*glue.PutResourcePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) PutResourcePolicyRequest(i0 *glue.PutResourcePolicyInput) (r0 *request.Request, r1 *glue.PutResourcePolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutResourcePolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.PutResourcePolicyOutput)
	return
}

func (d *GlueDouble) PutResourcePolicyWithContext(i0 context.Context, i1 *glue.PutResourcePolicyInput, i2 ...request.Option) (r0 *glue.PutResourcePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutResourcePolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.PutResourcePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakePutResourcePolicyWithContext(ctx context.Context, in *glue.PutResourcePolicyInput, _ ...request.Option) (*glue.PutResourcePolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutResourcePolicy cancelled", ctx.Err())
	default:
		return d.PutResourcePolicy(in)
	}
}

func (d *GlueDouble) PutWorkflowRunProperties(i0 *glue.PutWorkflowRunPropertiesInput) (r0 *glue.PutWorkflowRunPropertiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutWorkflowRunProperties", i0)
	r0, _ = returns[0].(*glue.PutWorkflowRunPropertiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) PutWorkflowRunPropertiesRequest(i0 *glue.PutWorkflowRunPropertiesInput) (r0 *request.Request, r1 *glue.PutWorkflowRunPropertiesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutWorkflowRunPropertiesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.PutWorkflowRunPropertiesOutput)
	return
}

func (d *GlueDouble) PutWorkflowRunPropertiesWithContext(i0 context.Context, i1 *glue.PutWorkflowRunPropertiesInput, i2 ...request.Option) (r0 *glue.PutWorkflowRunPropertiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutWorkflowRunPropertiesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.PutWorkflowRunPropertiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakePutWorkflowRunPropertiesWithContext(ctx context.Context, in *glue.PutWorkflowRunPropertiesInput, _ ...request.Option) (*glue.PutWorkflowRunPropertiesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutWorkflowRunProperties cancelled", ctx.Err())
	default:
		return d.PutWorkflowRunProperties(in)
	}
}

func (d *GlueDouble) ResetJobBookmark(i0 *glue.ResetJobBookmarkInput) (r0 *glue.ResetJobBookmarkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetJobBookmark", i0)
	r0, _ = returns[0].(*glue.ResetJobBookmarkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) ResetJobBookmarkRequest(i0 *glue.ResetJobBookmarkInput) (r0 *request.Request, r1 *glue.ResetJobBookmarkOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetJobBookmarkRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.ResetJobBookmarkOutput)
	return
}

func (d *GlueDouble) ResetJobBookmarkWithContext(i0 context.Context, i1 *glue.ResetJobBookmarkInput, i2 ...request.Option) (r0 *glue.ResetJobBookmarkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetJobBookmarkWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.ResetJobBookmarkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeResetJobBookmarkWithContext(ctx context.Context, in *glue.ResetJobBookmarkInput, _ ...request.Option) (*glue.ResetJobBookmarkOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ResetJobBookmark cancelled", ctx.Err())
	default:
		return d.ResetJobBookmark(in)
	}
}

func (d *GlueDouble) SearchTables(i0 *glue.SearchTablesInput) (r0 *glue.SearchTablesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchTables", i0)
	r0, _ = returns[0].(*glue.SearchTablesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) SearchTablesPages(i0 *glue.SearchTablesInput, i1 func(*glue.SearchTablesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchTablesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeSearchTablesPages(in *glue.SearchTablesInput, pager func(*glue.SearchTablesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("SearchTables", paginators, in, pager)
}

func (d *GlueDouble) SearchTablesPagesWithContext(i0 context.Context, i1 *glue.SearchTablesInput, i2 func(*glue.SearchTablesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchTablesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *GlueDouble) fakeSearchTablesPagesWithContext(ctx context.Context, in *glue.SearchTablesInput, pager func(*glue.SearchTablesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("SearchTables", paginators, ctx, in, pager, options...)
}

func (d *GlueDouble) SearchTablesRequest(i0 *glue.SearchTablesInput) (r0 *request.Request, r1 *glue.SearchTablesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchTablesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.SearchTablesOutput)
	return
}

func (d *GlueDouble) SearchTablesWithContext(i0 context.Context, i1 *glue.SearchTablesInput, i2 ...request.Option) (r0 *glue.SearchTablesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchTablesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.SearchTablesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeSearchTablesWithContext(ctx context.Context, in *glue.SearchTablesInput, _ ...request.Option) (*glue.SearchTablesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SearchTables cancelled", ctx.Err())
	default:
		return d.SearchTables(in)
	}
}

func (d *GlueDouble) StartCrawler(i0 *glue.StartCrawlerInput) (r0 *glue.StartCrawlerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartCrawler", i0)
	r0, _ = returns[0].(*glue.StartCrawlerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) StartCrawlerRequest(i0 *glue.StartCrawlerInput) (r0 *request.Request, r1 *glue.StartCrawlerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartCrawlerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.StartCrawlerOutput)
	return
}

func (d *GlueDouble) StartCrawlerSchedule(i0 *glue.StartCrawlerScheduleInput) (r0 *glue.StartCrawlerScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartCrawlerSchedule", i0)
	r0, _ = returns[0].(*glue.StartCrawlerScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) StartCrawlerScheduleRequest(i0 *glue.StartCrawlerScheduleInput) (r0 *request.Request, r1 *glue.StartCrawlerScheduleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartCrawlerScheduleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.StartCrawlerScheduleOutput)
	return
}

func (d *GlueDouble) StartCrawlerScheduleWithContext(i0 context.Context, i1 *glue.StartCrawlerScheduleInput, i2 ...request.Option) (r0 *glue.StartCrawlerScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartCrawlerScheduleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.StartCrawlerScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeStartCrawlerScheduleWithContext(ctx context.Context, in *glue.StartCrawlerScheduleInput, _ ...request.Option) (*glue.StartCrawlerScheduleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartCrawlerSchedule cancelled", ctx.Err())
	default:
		return d.StartCrawlerSchedule(in)
	}
}

func (d *GlueDouble) StartCrawlerWithContext(i0 context.Context, i1 *glue.StartCrawlerInput, i2 ...request.Option) (r0 *glue.StartCrawlerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartCrawlerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.StartCrawlerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeStartCrawlerWithContext(ctx context.Context, in *glue.StartCrawlerInput, _ ...request.Option) (*glue.StartCrawlerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartCrawler cancelled", ctx.Err())
	default:
		return d.StartCrawler(in)
	}
}

func (d *GlueDouble) StartExportLabelsTaskRun(i0 *glue.StartExportLabelsTaskRunInput) (r0 *glue.StartExportLabelsTaskRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartExportLabelsTaskRun", i0)
	r0, _ = returns[0].(*glue.StartExportLabelsTaskRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) StartExportLabelsTaskRunRequest(i0 *glue.StartExportLabelsTaskRunInput) (r0 *request.Request, r1 *glue.StartExportLabelsTaskRunOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartExportLabelsTaskRunRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.StartExportLabelsTaskRunOutput)
	return
}

func (d *GlueDouble) StartExportLabelsTaskRunWithContext(i0 context.Context, i1 *glue.StartExportLabelsTaskRunInput, i2 ...request.Option) (r0 *glue.StartExportLabelsTaskRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartExportLabelsTaskRunWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.StartExportLabelsTaskRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeStartExportLabelsTaskRunWithContext(ctx context.Context, in *glue.StartExportLabelsTaskRunInput, _ ...request.Option) (*glue.StartExportLabelsTaskRunOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartExportLabelsTaskRun cancelled", ctx.Err())
	default:
		return d.StartExportLabelsTaskRun(in)
	}
}

func (d *GlueDouble) StartImportLabelsTaskRun(i0 *glue.StartImportLabelsTaskRunInput) (r0 *glue.StartImportLabelsTaskRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartImportLabelsTaskRun", i0)
	r0, _ = returns[0].(*glue.StartImportLabelsTaskRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) StartImportLabelsTaskRunRequest(i0 *glue.StartImportLabelsTaskRunInput) (r0 *request.Request, r1 *glue.StartImportLabelsTaskRunOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartImportLabelsTaskRunRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.StartImportLabelsTaskRunOutput)
	return
}

func (d *GlueDouble) StartImportLabelsTaskRunWithContext(i0 context.Context, i1 *glue.StartImportLabelsTaskRunInput, i2 ...request.Option) (r0 *glue.StartImportLabelsTaskRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartImportLabelsTaskRunWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.StartImportLabelsTaskRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeStartImportLabelsTaskRunWithContext(ctx context.Context, in *glue.StartImportLabelsTaskRunInput, _ ...request.Option) (*glue.StartImportLabelsTaskRunOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartImportLabelsTaskRun cancelled", ctx.Err())
	default:
		return d.StartImportLabelsTaskRun(in)
	}
}

func (d *GlueDouble) StartJobRun(i0 *glue.StartJobRunInput) (r0 *glue.StartJobRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartJobRun", i0)
	r0, _ = returns[0].(*glue.StartJobRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) StartJobRunRequest(i0 *glue.StartJobRunInput) (r0 *request.Request, r1 *glue.StartJobRunOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartJobRunRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.StartJobRunOutput)
	return
}

func (d *GlueDouble) StartJobRunWithContext(i0 context.Context, i1 *glue.StartJobRunInput, i2 ...request.Option) (r0 *glue.StartJobRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartJobRunWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.StartJobRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeStartJobRunWithContext(ctx context.Context, in *glue.StartJobRunInput, _ ...request.Option) (*glue.StartJobRunOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartJobRun cancelled", ctx.Err())
	default:
		return d.StartJobRun(in)
	}
}

func (d *GlueDouble) StartMLEvaluationTaskRun(i0 *glue.StartMLEvaluationTaskRunInput) (r0 *glue.StartMLEvaluationTaskRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartMLEvaluationTaskRun", i0)
	r0, _ = returns[0].(*glue.StartMLEvaluationTaskRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) StartMLEvaluationTaskRunRequest(i0 *glue.StartMLEvaluationTaskRunInput) (r0 *request.Request, r1 *glue.StartMLEvaluationTaskRunOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartMLEvaluationTaskRunRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.StartMLEvaluationTaskRunOutput)
	return
}

func (d *GlueDouble) StartMLEvaluationTaskRunWithContext(i0 context.Context, i1 *glue.StartMLEvaluationTaskRunInput, i2 ...request.Option) (r0 *glue.StartMLEvaluationTaskRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartMLEvaluationTaskRunWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.StartMLEvaluationTaskRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeStartMLEvaluationTaskRunWithContext(ctx context.Context, in *glue.StartMLEvaluationTaskRunInput, _ ...request.Option) (*glue.StartMLEvaluationTaskRunOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartMLEvaluationTaskRun cancelled", ctx.Err())
	default:
		return d.StartMLEvaluationTaskRun(in)
	}
}

func (d *GlueDouble) StartMLLabelingSetGenerationTaskRun(i0 *glue.StartMLLabelingSetGenerationTaskRunInput) (r0 *glue.StartMLLabelingSetGenerationTaskRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartMLLabelingSetGenerationTaskRun", i0)
	r0, _ = returns[0].(*glue.StartMLLabelingSetGenerationTaskRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) StartMLLabelingSetGenerationTaskRunRequest(i0 *glue.StartMLLabelingSetGenerationTaskRunInput) (r0 *request.Request, r1 *glue.StartMLLabelingSetGenerationTaskRunOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartMLLabelingSetGenerationTaskRunRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.StartMLLabelingSetGenerationTaskRunOutput)
	return
}

func (d *GlueDouble) StartMLLabelingSetGenerationTaskRunWithContext(i0 context.Context, i1 *glue.StartMLLabelingSetGenerationTaskRunInput, i2 ...request.Option) (r0 *glue.StartMLLabelingSetGenerationTaskRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartMLLabelingSetGenerationTaskRunWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.StartMLLabelingSetGenerationTaskRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeStartMLLabelingSetGenerationTaskRunWithContext(ctx context.Context, in *glue.StartMLLabelingSetGenerationTaskRunInput, _ ...request.Option) (*glue.StartMLLabelingSetGenerationTaskRunOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartMLLabelingSetGenerationTaskRun cancelled", ctx.Err())
	default:
		return d.StartMLLabelingSetGenerationTaskRun(in)
	}
}

func (d *GlueDouble) StartTrigger(i0 *glue.StartTriggerInput) (r0 *glue.StartTriggerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartTrigger", i0)
	r0, _ = returns[0].(*glue.StartTriggerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) StartTriggerRequest(i0 *glue.StartTriggerInput) (r0 *request.Request, r1 *glue.StartTriggerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartTriggerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.StartTriggerOutput)
	return
}

func (d *GlueDouble) StartTriggerWithContext(i0 context.Context, i1 *glue.StartTriggerInput, i2 ...request.Option) (r0 *glue.StartTriggerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartTriggerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.StartTriggerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeStartTriggerWithContext(ctx context.Context, in *glue.StartTriggerInput, _ ...request.Option) (*glue.StartTriggerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartTrigger cancelled", ctx.Err())
	default:
		return d.StartTrigger(in)
	}
}

func (d *GlueDouble) StartWorkflowRun(i0 *glue.StartWorkflowRunInput) (r0 *glue.StartWorkflowRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartWorkflowRun", i0)
	r0, _ = returns[0].(*glue.StartWorkflowRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) StartWorkflowRunRequest(i0 *glue.StartWorkflowRunInput) (r0 *request.Request, r1 *glue.StartWorkflowRunOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartWorkflowRunRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.StartWorkflowRunOutput)
	return
}

func (d *GlueDouble) StartWorkflowRunWithContext(i0 context.Context, i1 *glue.StartWorkflowRunInput, i2 ...request.Option) (r0 *glue.StartWorkflowRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartWorkflowRunWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.StartWorkflowRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeStartWorkflowRunWithContext(ctx context.Context, in *glue.StartWorkflowRunInput, _ ...request.Option) (*glue.StartWorkflowRunOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartWorkflowRun cancelled", ctx.Err())
	default:
		return d.StartWorkflowRun(in)
	}
}

func (d *GlueDouble) StopCrawler(i0 *glue.StopCrawlerInput) (r0 *glue.StopCrawlerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopCrawler", i0)
	r0, _ = returns[0].(*glue.StopCrawlerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) StopCrawlerRequest(i0 *glue.StopCrawlerInput) (r0 *request.Request, r1 *glue.StopCrawlerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopCrawlerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.StopCrawlerOutput)
	return
}

func (d *GlueDouble) StopCrawlerSchedule(i0 *glue.StopCrawlerScheduleInput) (r0 *glue.StopCrawlerScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopCrawlerSchedule", i0)
	r0, _ = returns[0].(*glue.StopCrawlerScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) StopCrawlerScheduleRequest(i0 *glue.StopCrawlerScheduleInput) (r0 *request.Request, r1 *glue.StopCrawlerScheduleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopCrawlerScheduleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.StopCrawlerScheduleOutput)
	return
}

func (d *GlueDouble) StopCrawlerScheduleWithContext(i0 context.Context, i1 *glue.StopCrawlerScheduleInput, i2 ...request.Option) (r0 *glue.StopCrawlerScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopCrawlerScheduleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.StopCrawlerScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeStopCrawlerScheduleWithContext(ctx context.Context, in *glue.StopCrawlerScheduleInput, _ ...request.Option) (*glue.StopCrawlerScheduleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopCrawlerSchedule cancelled", ctx.Err())
	default:
		return d.StopCrawlerSchedule(in)
	}
}

func (d *GlueDouble) StopCrawlerWithContext(i0 context.Context, i1 *glue.StopCrawlerInput, i2 ...request.Option) (r0 *glue.StopCrawlerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopCrawlerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.StopCrawlerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeStopCrawlerWithContext(ctx context.Context, in *glue.StopCrawlerInput, _ ...request.Option) (*glue.StopCrawlerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopCrawler cancelled", ctx.Err())
	default:
		return d.StopCrawler(in)
	}
}

func (d *GlueDouble) StopTrigger(i0 *glue.StopTriggerInput) (r0 *glue.StopTriggerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopTrigger", i0)
	r0, _ = returns[0].(*glue.StopTriggerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) StopTriggerRequest(i0 *glue.StopTriggerInput) (r0 *request.Request, r1 *glue.StopTriggerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopTriggerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.StopTriggerOutput)
	return
}

func (d *GlueDouble) StopTriggerWithContext(i0 context.Context, i1 *glue.StopTriggerInput, i2 ...request.Option) (r0 *glue.StopTriggerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopTriggerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.StopTriggerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeStopTriggerWithContext(ctx context.Context, in *glue.StopTriggerInput, _ ...request.Option) (*glue.StopTriggerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopTrigger cancelled", ctx.Err())
	default:
		return d.StopTrigger(in)
	}
}

func (d *GlueDouble) TagResource(i0 *glue.TagResourceInput) (r0 *glue.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*glue.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) TagResourceRequest(i0 *glue.TagResourceInput) (r0 *request.Request, r1 *glue.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.TagResourceOutput)
	return
}

func (d *GlueDouble) TagResourceWithContext(i0 context.Context, i1 *glue.TagResourceInput, i2 ...request.Option) (r0 *glue.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeTagResourceWithContext(ctx context.Context, in *glue.TagResourceInput, _ ...request.Option) (*glue.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *GlueDouble) UntagResource(i0 *glue.UntagResourceInput) (r0 *glue.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*glue.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) UntagResourceRequest(i0 *glue.UntagResourceInput) (r0 *request.Request, r1 *glue.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.UntagResourceOutput)
	return
}

func (d *GlueDouble) UntagResourceWithContext(i0 context.Context, i1 *glue.UntagResourceInput, i2 ...request.Option) (r0 *glue.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeUntagResourceWithContext(ctx context.Context, in *glue.UntagResourceInput, _ ...request.Option) (*glue.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *GlueDouble) UpdateClassifier(i0 *glue.UpdateClassifierInput) (r0 *glue.UpdateClassifierOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateClassifier", i0)
	r0, _ = returns[0].(*glue.UpdateClassifierOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) UpdateClassifierRequest(i0 *glue.UpdateClassifierInput) (r0 *request.Request, r1 *glue.UpdateClassifierOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateClassifierRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.UpdateClassifierOutput)
	return
}

func (d *GlueDouble) UpdateClassifierWithContext(i0 context.Context, i1 *glue.UpdateClassifierInput, i2 ...request.Option) (r0 *glue.UpdateClassifierOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateClassifierWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.UpdateClassifierOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeUpdateClassifierWithContext(ctx context.Context, in *glue.UpdateClassifierInput, _ ...request.Option) (*glue.UpdateClassifierOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateClassifier cancelled", ctx.Err())
	default:
		return d.UpdateClassifier(in)
	}
}

func (d *GlueDouble) UpdateConnection(i0 *glue.UpdateConnectionInput) (r0 *glue.UpdateConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateConnection", i0)
	r0, _ = returns[0].(*glue.UpdateConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) UpdateConnectionRequest(i0 *glue.UpdateConnectionInput) (r0 *request.Request, r1 *glue.UpdateConnectionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateConnectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.UpdateConnectionOutput)
	return
}

func (d *GlueDouble) UpdateConnectionWithContext(i0 context.Context, i1 *glue.UpdateConnectionInput, i2 ...request.Option) (r0 *glue.UpdateConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateConnectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.UpdateConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeUpdateConnectionWithContext(ctx context.Context, in *glue.UpdateConnectionInput, _ ...request.Option) (*glue.UpdateConnectionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateConnection cancelled", ctx.Err())
	default:
		return d.UpdateConnection(in)
	}
}

func (d *GlueDouble) UpdateCrawler(i0 *glue.UpdateCrawlerInput) (r0 *glue.UpdateCrawlerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCrawler", i0)
	r0, _ = returns[0].(*glue.UpdateCrawlerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) UpdateCrawlerRequest(i0 *glue.UpdateCrawlerInput) (r0 *request.Request, r1 *glue.UpdateCrawlerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCrawlerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.UpdateCrawlerOutput)
	return
}

func (d *GlueDouble) UpdateCrawlerSchedule(i0 *glue.UpdateCrawlerScheduleInput) (r0 *glue.UpdateCrawlerScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCrawlerSchedule", i0)
	r0, _ = returns[0].(*glue.UpdateCrawlerScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) UpdateCrawlerScheduleRequest(i0 *glue.UpdateCrawlerScheduleInput) (r0 *request.Request, r1 *glue.UpdateCrawlerScheduleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCrawlerScheduleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.UpdateCrawlerScheduleOutput)
	return
}

func (d *GlueDouble) UpdateCrawlerScheduleWithContext(i0 context.Context, i1 *glue.UpdateCrawlerScheduleInput, i2 ...request.Option) (r0 *glue.UpdateCrawlerScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCrawlerScheduleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.UpdateCrawlerScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeUpdateCrawlerScheduleWithContext(ctx context.Context, in *glue.UpdateCrawlerScheduleInput, _ ...request.Option) (*glue.UpdateCrawlerScheduleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateCrawlerSchedule cancelled", ctx.Err())
	default:
		return d.UpdateCrawlerSchedule(in)
	}
}

func (d *GlueDouble) UpdateCrawlerWithContext(i0 context.Context, i1 *glue.UpdateCrawlerInput, i2 ...request.Option) (r0 *glue.UpdateCrawlerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCrawlerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.UpdateCrawlerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeUpdateCrawlerWithContext(ctx context.Context, in *glue.UpdateCrawlerInput, _ ...request.Option) (*glue.UpdateCrawlerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateCrawler cancelled", ctx.Err())
	default:
		return d.UpdateCrawler(in)
	}
}

func (d *GlueDouble) UpdateDatabase(i0 *glue.UpdateDatabaseInput) (r0 *glue.UpdateDatabaseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDatabase", i0)
	r0, _ = returns[0].(*glue.UpdateDatabaseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) UpdateDatabaseRequest(i0 *glue.UpdateDatabaseInput) (r0 *request.Request, r1 *glue.UpdateDatabaseOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDatabaseRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.UpdateDatabaseOutput)
	return
}

func (d *GlueDouble) UpdateDatabaseWithContext(i0 context.Context, i1 *glue.UpdateDatabaseInput, i2 ...request.Option) (r0 *glue.UpdateDatabaseOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDatabaseWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.UpdateDatabaseOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeUpdateDatabaseWithContext(ctx context.Context, in *glue.UpdateDatabaseInput, _ ...request.Option) (*glue.UpdateDatabaseOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDatabase cancelled", ctx.Err())
	default:
		return d.UpdateDatabase(in)
	}
}

func (d *GlueDouble) UpdateDevEndpoint(i0 *glue.UpdateDevEndpointInput) (r0 *glue.UpdateDevEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDevEndpoint", i0)
	r0, _ = returns[0].(*glue.UpdateDevEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) UpdateDevEndpointRequest(i0 *glue.UpdateDevEndpointInput) (r0 *request.Request, r1 *glue.UpdateDevEndpointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDevEndpointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.UpdateDevEndpointOutput)
	return
}

func (d *GlueDouble) UpdateDevEndpointWithContext(i0 context.Context, i1 *glue.UpdateDevEndpointInput, i2 ...request.Option) (r0 *glue.UpdateDevEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDevEndpointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.UpdateDevEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeUpdateDevEndpointWithContext(ctx context.Context, in *glue.UpdateDevEndpointInput, _ ...request.Option) (*glue.UpdateDevEndpointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDevEndpoint cancelled", ctx.Err())
	default:
		return d.UpdateDevEndpoint(in)
	}
}

func (d *GlueDouble) UpdateJob(i0 *glue.UpdateJobInput) (r0 *glue.UpdateJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateJob", i0)
	r0, _ = returns[0].(*glue.UpdateJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) UpdateJobRequest(i0 *glue.UpdateJobInput) (r0 *request.Request, r1 *glue.UpdateJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.UpdateJobOutput)
	return
}

func (d *GlueDouble) UpdateJobWithContext(i0 context.Context, i1 *glue.UpdateJobInput, i2 ...request.Option) (r0 *glue.UpdateJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.UpdateJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeUpdateJobWithContext(ctx context.Context, in *glue.UpdateJobInput, _ ...request.Option) (*glue.UpdateJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateJob cancelled", ctx.Err())
	default:
		return d.UpdateJob(in)
	}
}

func (d *GlueDouble) UpdateMLTransform(i0 *glue.UpdateMLTransformInput) (r0 *glue.UpdateMLTransformOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMLTransform", i0)
	r0, _ = returns[0].(*glue.UpdateMLTransformOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) UpdateMLTransformRequest(i0 *glue.UpdateMLTransformInput) (r0 *request.Request, r1 *glue.UpdateMLTransformOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMLTransformRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.UpdateMLTransformOutput)
	return
}

func (d *GlueDouble) UpdateMLTransformWithContext(i0 context.Context, i1 *glue.UpdateMLTransformInput, i2 ...request.Option) (r0 *glue.UpdateMLTransformOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMLTransformWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.UpdateMLTransformOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeUpdateMLTransformWithContext(ctx context.Context, in *glue.UpdateMLTransformInput, _ ...request.Option) (*glue.UpdateMLTransformOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateMLTransform cancelled", ctx.Err())
	default:
		return d.UpdateMLTransform(in)
	}
}

func (d *GlueDouble) UpdatePartition(i0 *glue.UpdatePartitionInput) (r0 *glue.UpdatePartitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePartition", i0)
	r0, _ = returns[0].(*glue.UpdatePartitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) UpdatePartitionRequest(i0 *glue.UpdatePartitionInput) (r0 *request.Request, r1 *glue.UpdatePartitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePartitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.UpdatePartitionOutput)
	return
}

func (d *GlueDouble) UpdatePartitionWithContext(i0 context.Context, i1 *glue.UpdatePartitionInput, i2 ...request.Option) (r0 *glue.UpdatePartitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePartitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.UpdatePartitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeUpdatePartitionWithContext(ctx context.Context, in *glue.UpdatePartitionInput, _ ...request.Option) (*glue.UpdatePartitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdatePartition cancelled", ctx.Err())
	default:
		return d.UpdatePartition(in)
	}
}

func (d *GlueDouble) UpdateTable(i0 *glue.UpdateTableInput) (r0 *glue.UpdateTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTable", i0)
	r0, _ = returns[0].(*glue.UpdateTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) UpdateTableRequest(i0 *glue.UpdateTableInput) (r0 *request.Request, r1 *glue.UpdateTableOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTableRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.UpdateTableOutput)
	return
}

func (d *GlueDouble) UpdateTableWithContext(i0 context.Context, i1 *glue.UpdateTableInput, i2 ...request.Option) (r0 *glue.UpdateTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTableWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.UpdateTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeUpdateTableWithContext(ctx context.Context, in *glue.UpdateTableInput, _ ...request.Option) (*glue.UpdateTableOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateTable cancelled", ctx.Err())
	default:
		return d.UpdateTable(in)
	}
}

func (d *GlueDouble) UpdateTrigger(i0 *glue.UpdateTriggerInput) (r0 *glue.UpdateTriggerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTrigger", i0)
	r0, _ = returns[0].(*glue.UpdateTriggerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) UpdateTriggerRequest(i0 *glue.UpdateTriggerInput) (r0 *request.Request, r1 *glue.UpdateTriggerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTriggerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.UpdateTriggerOutput)
	return
}

func (d *GlueDouble) UpdateTriggerWithContext(i0 context.Context, i1 *glue.UpdateTriggerInput, i2 ...request.Option) (r0 *glue.UpdateTriggerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTriggerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.UpdateTriggerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeUpdateTriggerWithContext(ctx context.Context, in *glue.UpdateTriggerInput, _ ...request.Option) (*glue.UpdateTriggerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateTrigger cancelled", ctx.Err())
	default:
		return d.UpdateTrigger(in)
	}
}

func (d *GlueDouble) UpdateUserDefinedFunction(i0 *glue.UpdateUserDefinedFunctionInput) (r0 *glue.UpdateUserDefinedFunctionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserDefinedFunction", i0)
	r0, _ = returns[0].(*glue.UpdateUserDefinedFunctionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) UpdateUserDefinedFunctionRequest(i0 *glue.UpdateUserDefinedFunctionInput) (r0 *request.Request, r1 *glue.UpdateUserDefinedFunctionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserDefinedFunctionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.UpdateUserDefinedFunctionOutput)
	return
}

func (d *GlueDouble) UpdateUserDefinedFunctionWithContext(i0 context.Context, i1 *glue.UpdateUserDefinedFunctionInput, i2 ...request.Option) (r0 *glue.UpdateUserDefinedFunctionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateUserDefinedFunctionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.UpdateUserDefinedFunctionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeUpdateUserDefinedFunctionWithContext(ctx context.Context, in *glue.UpdateUserDefinedFunctionInput, _ ...request.Option) (*glue.UpdateUserDefinedFunctionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateUserDefinedFunction cancelled", ctx.Err())
	default:
		return d.UpdateUserDefinedFunction(in)
	}
}

func (d *GlueDouble) UpdateWorkflow(i0 *glue.UpdateWorkflowInput) (r0 *glue.UpdateWorkflowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateWorkflow", i0)
	r0, _ = returns[0].(*glue.UpdateWorkflowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) UpdateWorkflowRequest(i0 *glue.UpdateWorkflowInput) (r0 *request.Request, r1 *glue.UpdateWorkflowOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateWorkflowRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*glue.UpdateWorkflowOutput)
	return
}

func (d *GlueDouble) UpdateWorkflowWithContext(i0 context.Context, i1 *glue.UpdateWorkflowInput, i2 ...request.Option) (r0 *glue.UpdateWorkflowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateWorkflowWithContext", i0, i1, i2)
	r0, _ = returns[0].(*glue.UpdateWorkflowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GlueDouble) fakeUpdateWorkflowWithContext(ctx context.Context, in *glue.UpdateWorkflowInput, _ ...request.Option) (*glue.UpdateWorkflowOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateWorkflow cancelled", ctx.Err())
	default:
		return d.UpdateWorkflow(in)
	}
}
