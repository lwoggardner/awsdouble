// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:12:19+11:00

// Package directconnectdouble provides a TestDouble implementation of directconnectiface.DirectConnectAPI
package directconnectdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/directconnect"
	"github.com/aws/aws-sdk-go/service/directconnect/directconnectiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// DirectConnectDouble is TestDouble for directconnectiface.DirectConnectAPI
type DirectConnectDouble struct {
	directconnectiface.DirectConnectAPI
	*awsdouble.AWSTestDouble
}

// Constructor for DirectConnectDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *DirectConnectDouble {
	result := &DirectConnectDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*directconnectiface.DirectConnectAPI)(nil), configurators...)
	return result
}

func (d *DirectConnectDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *DirectConnectDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AcceptDirectConnectGatewayAssociationProposalWithContext":
		return m.Fake(d.fakeAcceptDirectConnectGatewayAssociationProposalWithContext)

	case "AllocateConnectionOnInterconnectWithContext":
		return m.Fake(d.fakeAllocateConnectionOnInterconnectWithContext)

	case "AllocateHostedConnectionWithContext":
		return m.Fake(d.fakeAllocateHostedConnectionWithContext)

	case "AllocatePrivateVirtualInterfaceWithContext":
		return m.Fake(d.fakeAllocatePrivateVirtualInterfaceWithContext)

	case "AllocatePublicVirtualInterfaceWithContext":
		return m.Fake(d.fakeAllocatePublicVirtualInterfaceWithContext)

	case "AllocateTransitVirtualInterfaceWithContext":
		return m.Fake(d.fakeAllocateTransitVirtualInterfaceWithContext)

	case "AssociateConnectionWithLagWithContext":
		return m.Fake(d.fakeAssociateConnectionWithLagWithContext)

	case "AssociateHostedConnectionWithContext":
		return m.Fake(d.fakeAssociateHostedConnectionWithContext)

	case "AssociateVirtualInterfaceWithContext":
		return m.Fake(d.fakeAssociateVirtualInterfaceWithContext)

	case "ConfirmConnectionWithContext":
		return m.Fake(d.fakeConfirmConnectionWithContext)

	case "ConfirmPrivateVirtualInterfaceWithContext":
		return m.Fake(d.fakeConfirmPrivateVirtualInterfaceWithContext)

	case "ConfirmPublicVirtualInterfaceWithContext":
		return m.Fake(d.fakeConfirmPublicVirtualInterfaceWithContext)

	case "ConfirmTransitVirtualInterfaceWithContext":
		return m.Fake(d.fakeConfirmTransitVirtualInterfaceWithContext)

	case "CreateBGPPeerWithContext":
		return m.Fake(d.fakeCreateBGPPeerWithContext)

	case "CreateConnectionWithContext":
		return m.Fake(d.fakeCreateConnectionWithContext)

	case "CreateDirectConnectGatewayAssociationProposalWithContext":
		return m.Fake(d.fakeCreateDirectConnectGatewayAssociationProposalWithContext)

	case "CreateDirectConnectGatewayAssociationWithContext":
		return m.Fake(d.fakeCreateDirectConnectGatewayAssociationWithContext)

	case "CreateDirectConnectGatewayWithContext":
		return m.Fake(d.fakeCreateDirectConnectGatewayWithContext)

	case "CreateInterconnectWithContext":
		return m.Fake(d.fakeCreateInterconnectWithContext)

	case "CreateLagWithContext":
		return m.Fake(d.fakeCreateLagWithContext)

	case "CreatePrivateVirtualInterfaceWithContext":
		return m.Fake(d.fakeCreatePrivateVirtualInterfaceWithContext)

	case "CreatePublicVirtualInterfaceWithContext":
		return m.Fake(d.fakeCreatePublicVirtualInterfaceWithContext)

	case "CreateTransitVirtualInterfaceWithContext":
		return m.Fake(d.fakeCreateTransitVirtualInterfaceWithContext)

	case "DeleteBGPPeerWithContext":
		return m.Fake(d.fakeDeleteBGPPeerWithContext)

	case "DeleteConnectionWithContext":
		return m.Fake(d.fakeDeleteConnectionWithContext)

	case "DeleteDirectConnectGatewayAssociationProposalWithContext":
		return m.Fake(d.fakeDeleteDirectConnectGatewayAssociationProposalWithContext)

	case "DeleteDirectConnectGatewayAssociationWithContext":
		return m.Fake(d.fakeDeleteDirectConnectGatewayAssociationWithContext)

	case "DeleteDirectConnectGatewayWithContext":
		return m.Fake(d.fakeDeleteDirectConnectGatewayWithContext)

	case "DeleteInterconnectWithContext":
		return m.Fake(d.fakeDeleteInterconnectWithContext)

	case "DeleteLagWithContext":
		return m.Fake(d.fakeDeleteLagWithContext)

	case "DeleteVirtualInterfaceWithContext":
		return m.Fake(d.fakeDeleteVirtualInterfaceWithContext)

	case "DescribeConnectionLoaWithContext":
		return m.Fake(d.fakeDescribeConnectionLoaWithContext)

	case "DescribeConnectionsOnInterconnectWithContext":
		return m.Fake(d.fakeDescribeConnectionsOnInterconnectWithContext)

	case "DescribeConnectionsWithContext":
		return m.Fake(d.fakeDescribeConnectionsWithContext)

	case "DescribeDirectConnectGatewayAssociationProposalsWithContext":
		return m.Fake(d.fakeDescribeDirectConnectGatewayAssociationProposalsWithContext)

	case "DescribeDirectConnectGatewayAssociationsWithContext":
		return m.Fake(d.fakeDescribeDirectConnectGatewayAssociationsWithContext)

	case "DescribeDirectConnectGatewayAttachmentsWithContext":
		return m.Fake(d.fakeDescribeDirectConnectGatewayAttachmentsWithContext)

	case "DescribeDirectConnectGatewaysWithContext":
		return m.Fake(d.fakeDescribeDirectConnectGatewaysWithContext)

	case "DescribeHostedConnectionsWithContext":
		return m.Fake(d.fakeDescribeHostedConnectionsWithContext)

	case "DescribeInterconnectLoaWithContext":
		return m.Fake(d.fakeDescribeInterconnectLoaWithContext)

	case "DescribeInterconnectsWithContext":
		return m.Fake(d.fakeDescribeInterconnectsWithContext)

	case "DescribeLagsWithContext":
		return m.Fake(d.fakeDescribeLagsWithContext)

	case "DescribeLoaWithContext":
		return m.Fake(d.fakeDescribeLoaWithContext)

	case "DescribeLocationsWithContext":
		return m.Fake(d.fakeDescribeLocationsWithContext)

	case "DescribeTagsWithContext":
		return m.Fake(d.fakeDescribeTagsWithContext)

	case "DescribeVirtualGatewaysWithContext":
		return m.Fake(d.fakeDescribeVirtualGatewaysWithContext)

	case "DescribeVirtualInterfacesWithContext":
		return m.Fake(d.fakeDescribeVirtualInterfacesWithContext)

	case "DisassociateConnectionFromLagWithContext":
		return m.Fake(d.fakeDisassociateConnectionFromLagWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateDirectConnectGatewayAssociationWithContext":
		return m.Fake(d.fakeUpdateDirectConnectGatewayAssociationWithContext)

	case "UpdateLagWithContext":
		return m.Fake(d.fakeUpdateLagWithContext)

	case "UpdateVirtualInterfaceAttributesWithContext":
		return m.Fake(d.fakeUpdateVirtualInterfaceAttributesWithContext)

	default:
		return nil
	}
}

func (d *DirectConnectDouble) AcceptDirectConnectGatewayAssociationProposal(i0 *directconnect.AcceptDirectConnectGatewayAssociationProposalInput) (r0 *directconnect.AcceptDirectConnectGatewayAssociationProposalOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptDirectConnectGatewayAssociationProposal", i0)
	r0, _ = returns[0].(*directconnect.AcceptDirectConnectGatewayAssociationProposalOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) AcceptDirectConnectGatewayAssociationProposalRequest(i0 *directconnect.AcceptDirectConnectGatewayAssociationProposalInput) (r0 *request.Request, r1 *directconnect.AcceptDirectConnectGatewayAssociationProposalOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptDirectConnectGatewayAssociationProposalRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.AcceptDirectConnectGatewayAssociationProposalOutput)
	return
}

func (d *DirectConnectDouble) AcceptDirectConnectGatewayAssociationProposalWithContext(i0 context.Context, i1 *directconnect.AcceptDirectConnectGatewayAssociationProposalInput, i2 ...request.Option) (r0 *directconnect.AcceptDirectConnectGatewayAssociationProposalOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptDirectConnectGatewayAssociationProposalWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.AcceptDirectConnectGatewayAssociationProposalOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeAcceptDirectConnectGatewayAssociationProposalWithContext(ctx context.Context, in *directconnect.AcceptDirectConnectGatewayAssociationProposalInput, _ ...request.Option) (*directconnect.AcceptDirectConnectGatewayAssociationProposalOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AcceptDirectConnectGatewayAssociationProposal cancelled", ctx.Err())
	default:
		return d.AcceptDirectConnectGatewayAssociationProposal(in)
	}
}

func (d *DirectConnectDouble) AllocateConnectionOnInterconnect(i0 *directconnect.AllocateConnectionOnInterconnectInput) (r0 *directconnect.Connection, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AllocateConnectionOnInterconnect", i0)
	r0, _ = returns[0].(*directconnect.Connection)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) AllocateConnectionOnInterconnectRequest(i0 *directconnect.AllocateConnectionOnInterconnectInput) (r0 *request.Request, r1 *directconnect.Connection) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AllocateConnectionOnInterconnectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.Connection)
	return
}

func (d *DirectConnectDouble) AllocateConnectionOnInterconnectWithContext(i0 context.Context, i1 *directconnect.AllocateConnectionOnInterconnectInput, i2 ...request.Option) (r0 *directconnect.Connection, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AllocateConnectionOnInterconnectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.Connection)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeAllocateConnectionOnInterconnectWithContext(ctx context.Context, in *directconnect.AllocateConnectionOnInterconnectInput, _ ...request.Option) (*directconnect.Connection, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AllocateConnectionOnInterconnect cancelled", ctx.Err())
	default:
		return d.AllocateConnectionOnInterconnect(in)
	}
}

func (d *DirectConnectDouble) AllocateHostedConnection(i0 *directconnect.AllocateHostedConnectionInput) (r0 *directconnect.Connection, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AllocateHostedConnection", i0)
	r0, _ = returns[0].(*directconnect.Connection)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) AllocateHostedConnectionRequest(i0 *directconnect.AllocateHostedConnectionInput) (r0 *request.Request, r1 *directconnect.Connection) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AllocateHostedConnectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.Connection)
	return
}

func (d *DirectConnectDouble) AllocateHostedConnectionWithContext(i0 context.Context, i1 *directconnect.AllocateHostedConnectionInput, i2 ...request.Option) (r0 *directconnect.Connection, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AllocateHostedConnectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.Connection)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeAllocateHostedConnectionWithContext(ctx context.Context, in *directconnect.AllocateHostedConnectionInput, _ ...request.Option) (*directconnect.Connection, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AllocateHostedConnection cancelled", ctx.Err())
	default:
		return d.AllocateHostedConnection(in)
	}
}

func (d *DirectConnectDouble) AllocatePrivateVirtualInterface(i0 *directconnect.AllocatePrivateVirtualInterfaceInput) (r0 *directconnect.VirtualInterface, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AllocatePrivateVirtualInterface", i0)
	r0, _ = returns[0].(*directconnect.VirtualInterface)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) AllocatePrivateVirtualInterfaceRequest(i0 *directconnect.AllocatePrivateVirtualInterfaceInput) (r0 *request.Request, r1 *directconnect.VirtualInterface) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AllocatePrivateVirtualInterfaceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.VirtualInterface)
	return
}

func (d *DirectConnectDouble) AllocatePrivateVirtualInterfaceWithContext(i0 context.Context, i1 *directconnect.AllocatePrivateVirtualInterfaceInput, i2 ...request.Option) (r0 *directconnect.VirtualInterface, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AllocatePrivateVirtualInterfaceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.VirtualInterface)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeAllocatePrivateVirtualInterfaceWithContext(ctx context.Context, in *directconnect.AllocatePrivateVirtualInterfaceInput, _ ...request.Option) (*directconnect.VirtualInterface, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AllocatePrivateVirtualInterface cancelled", ctx.Err())
	default:
		return d.AllocatePrivateVirtualInterface(in)
	}
}

func (d *DirectConnectDouble) AllocatePublicVirtualInterface(i0 *directconnect.AllocatePublicVirtualInterfaceInput) (r0 *directconnect.VirtualInterface, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AllocatePublicVirtualInterface", i0)
	r0, _ = returns[0].(*directconnect.VirtualInterface)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) AllocatePublicVirtualInterfaceRequest(i0 *directconnect.AllocatePublicVirtualInterfaceInput) (r0 *request.Request, r1 *directconnect.VirtualInterface) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AllocatePublicVirtualInterfaceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.VirtualInterface)
	return
}

func (d *DirectConnectDouble) AllocatePublicVirtualInterfaceWithContext(i0 context.Context, i1 *directconnect.AllocatePublicVirtualInterfaceInput, i2 ...request.Option) (r0 *directconnect.VirtualInterface, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AllocatePublicVirtualInterfaceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.VirtualInterface)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeAllocatePublicVirtualInterfaceWithContext(ctx context.Context, in *directconnect.AllocatePublicVirtualInterfaceInput, _ ...request.Option) (*directconnect.VirtualInterface, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AllocatePublicVirtualInterface cancelled", ctx.Err())
	default:
		return d.AllocatePublicVirtualInterface(in)
	}
}

func (d *DirectConnectDouble) AllocateTransitVirtualInterface(i0 *directconnect.AllocateTransitVirtualInterfaceInput) (r0 *directconnect.AllocateTransitVirtualInterfaceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AllocateTransitVirtualInterface", i0)
	r0, _ = returns[0].(*directconnect.AllocateTransitVirtualInterfaceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) AllocateTransitVirtualInterfaceRequest(i0 *directconnect.AllocateTransitVirtualInterfaceInput) (r0 *request.Request, r1 *directconnect.AllocateTransitVirtualInterfaceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AllocateTransitVirtualInterfaceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.AllocateTransitVirtualInterfaceOutput)
	return
}

func (d *DirectConnectDouble) AllocateTransitVirtualInterfaceWithContext(i0 context.Context, i1 *directconnect.AllocateTransitVirtualInterfaceInput, i2 ...request.Option) (r0 *directconnect.AllocateTransitVirtualInterfaceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AllocateTransitVirtualInterfaceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.AllocateTransitVirtualInterfaceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeAllocateTransitVirtualInterfaceWithContext(ctx context.Context, in *directconnect.AllocateTransitVirtualInterfaceInput, _ ...request.Option) (*directconnect.AllocateTransitVirtualInterfaceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AllocateTransitVirtualInterface cancelled", ctx.Err())
	default:
		return d.AllocateTransitVirtualInterface(in)
	}
}

func (d *DirectConnectDouble) AssociateConnectionWithLag(i0 *directconnect.AssociateConnectionWithLagInput) (r0 *directconnect.Connection, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateConnectionWithLag", i0)
	r0, _ = returns[0].(*directconnect.Connection)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) AssociateConnectionWithLagRequest(i0 *directconnect.AssociateConnectionWithLagInput) (r0 *request.Request, r1 *directconnect.Connection) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateConnectionWithLagRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.Connection)
	return
}

func (d *DirectConnectDouble) AssociateConnectionWithLagWithContext(i0 context.Context, i1 *directconnect.AssociateConnectionWithLagInput, i2 ...request.Option) (r0 *directconnect.Connection, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateConnectionWithLagWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.Connection)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeAssociateConnectionWithLagWithContext(ctx context.Context, in *directconnect.AssociateConnectionWithLagInput, _ ...request.Option) (*directconnect.Connection, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateConnectionWithLag cancelled", ctx.Err())
	default:
		return d.AssociateConnectionWithLag(in)
	}
}

func (d *DirectConnectDouble) AssociateHostedConnection(i0 *directconnect.AssociateHostedConnectionInput) (r0 *directconnect.Connection, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateHostedConnection", i0)
	r0, _ = returns[0].(*directconnect.Connection)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) AssociateHostedConnectionRequest(i0 *directconnect.AssociateHostedConnectionInput) (r0 *request.Request, r1 *directconnect.Connection) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateHostedConnectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.Connection)
	return
}

func (d *DirectConnectDouble) AssociateHostedConnectionWithContext(i0 context.Context, i1 *directconnect.AssociateHostedConnectionInput, i2 ...request.Option) (r0 *directconnect.Connection, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateHostedConnectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.Connection)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeAssociateHostedConnectionWithContext(ctx context.Context, in *directconnect.AssociateHostedConnectionInput, _ ...request.Option) (*directconnect.Connection, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateHostedConnection cancelled", ctx.Err())
	default:
		return d.AssociateHostedConnection(in)
	}
}

func (d *DirectConnectDouble) AssociateVirtualInterface(i0 *directconnect.AssociateVirtualInterfaceInput) (r0 *directconnect.VirtualInterface, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateVirtualInterface", i0)
	r0, _ = returns[0].(*directconnect.VirtualInterface)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) AssociateVirtualInterfaceRequest(i0 *directconnect.AssociateVirtualInterfaceInput) (r0 *request.Request, r1 *directconnect.VirtualInterface) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateVirtualInterfaceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.VirtualInterface)
	return
}

func (d *DirectConnectDouble) AssociateVirtualInterfaceWithContext(i0 context.Context, i1 *directconnect.AssociateVirtualInterfaceInput, i2 ...request.Option) (r0 *directconnect.VirtualInterface, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateVirtualInterfaceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.VirtualInterface)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeAssociateVirtualInterfaceWithContext(ctx context.Context, in *directconnect.AssociateVirtualInterfaceInput, _ ...request.Option) (*directconnect.VirtualInterface, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateVirtualInterface cancelled", ctx.Err())
	default:
		return d.AssociateVirtualInterface(in)
	}
}

func (d *DirectConnectDouble) ConfirmConnection(i0 *directconnect.ConfirmConnectionInput) (r0 *directconnect.ConfirmConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ConfirmConnection", i0)
	r0, _ = returns[0].(*directconnect.ConfirmConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) ConfirmConnectionRequest(i0 *directconnect.ConfirmConnectionInput) (r0 *request.Request, r1 *directconnect.ConfirmConnectionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ConfirmConnectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.ConfirmConnectionOutput)
	return
}

func (d *DirectConnectDouble) ConfirmConnectionWithContext(i0 context.Context, i1 *directconnect.ConfirmConnectionInput, i2 ...request.Option) (r0 *directconnect.ConfirmConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ConfirmConnectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.ConfirmConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeConfirmConnectionWithContext(ctx context.Context, in *directconnect.ConfirmConnectionInput, _ ...request.Option) (*directconnect.ConfirmConnectionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ConfirmConnection cancelled", ctx.Err())
	default:
		return d.ConfirmConnection(in)
	}
}

func (d *DirectConnectDouble) ConfirmPrivateVirtualInterface(i0 *directconnect.ConfirmPrivateVirtualInterfaceInput) (r0 *directconnect.ConfirmPrivateVirtualInterfaceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ConfirmPrivateVirtualInterface", i0)
	r0, _ = returns[0].(*directconnect.ConfirmPrivateVirtualInterfaceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) ConfirmPrivateVirtualInterfaceRequest(i0 *directconnect.ConfirmPrivateVirtualInterfaceInput) (r0 *request.Request, r1 *directconnect.ConfirmPrivateVirtualInterfaceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ConfirmPrivateVirtualInterfaceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.ConfirmPrivateVirtualInterfaceOutput)
	return
}

func (d *DirectConnectDouble) ConfirmPrivateVirtualInterfaceWithContext(i0 context.Context, i1 *directconnect.ConfirmPrivateVirtualInterfaceInput, i2 ...request.Option) (r0 *directconnect.ConfirmPrivateVirtualInterfaceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ConfirmPrivateVirtualInterfaceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.ConfirmPrivateVirtualInterfaceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeConfirmPrivateVirtualInterfaceWithContext(ctx context.Context, in *directconnect.ConfirmPrivateVirtualInterfaceInput, _ ...request.Option) (*directconnect.ConfirmPrivateVirtualInterfaceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ConfirmPrivateVirtualInterface cancelled", ctx.Err())
	default:
		return d.ConfirmPrivateVirtualInterface(in)
	}
}

func (d *DirectConnectDouble) ConfirmPublicVirtualInterface(i0 *directconnect.ConfirmPublicVirtualInterfaceInput) (r0 *directconnect.ConfirmPublicVirtualInterfaceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ConfirmPublicVirtualInterface", i0)
	r0, _ = returns[0].(*directconnect.ConfirmPublicVirtualInterfaceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) ConfirmPublicVirtualInterfaceRequest(i0 *directconnect.ConfirmPublicVirtualInterfaceInput) (r0 *request.Request, r1 *directconnect.ConfirmPublicVirtualInterfaceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ConfirmPublicVirtualInterfaceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.ConfirmPublicVirtualInterfaceOutput)
	return
}

func (d *DirectConnectDouble) ConfirmPublicVirtualInterfaceWithContext(i0 context.Context, i1 *directconnect.ConfirmPublicVirtualInterfaceInput, i2 ...request.Option) (r0 *directconnect.ConfirmPublicVirtualInterfaceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ConfirmPublicVirtualInterfaceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.ConfirmPublicVirtualInterfaceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeConfirmPublicVirtualInterfaceWithContext(ctx context.Context, in *directconnect.ConfirmPublicVirtualInterfaceInput, _ ...request.Option) (*directconnect.ConfirmPublicVirtualInterfaceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ConfirmPublicVirtualInterface cancelled", ctx.Err())
	default:
		return d.ConfirmPublicVirtualInterface(in)
	}
}

func (d *DirectConnectDouble) ConfirmTransitVirtualInterface(i0 *directconnect.ConfirmTransitVirtualInterfaceInput) (r0 *directconnect.ConfirmTransitVirtualInterfaceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ConfirmTransitVirtualInterface", i0)
	r0, _ = returns[0].(*directconnect.ConfirmTransitVirtualInterfaceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) ConfirmTransitVirtualInterfaceRequest(i0 *directconnect.ConfirmTransitVirtualInterfaceInput) (r0 *request.Request, r1 *directconnect.ConfirmTransitVirtualInterfaceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ConfirmTransitVirtualInterfaceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.ConfirmTransitVirtualInterfaceOutput)
	return
}

func (d *DirectConnectDouble) ConfirmTransitVirtualInterfaceWithContext(i0 context.Context, i1 *directconnect.ConfirmTransitVirtualInterfaceInput, i2 ...request.Option) (r0 *directconnect.ConfirmTransitVirtualInterfaceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ConfirmTransitVirtualInterfaceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.ConfirmTransitVirtualInterfaceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeConfirmTransitVirtualInterfaceWithContext(ctx context.Context, in *directconnect.ConfirmTransitVirtualInterfaceInput, _ ...request.Option) (*directconnect.ConfirmTransitVirtualInterfaceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ConfirmTransitVirtualInterface cancelled", ctx.Err())
	default:
		return d.ConfirmTransitVirtualInterface(in)
	}
}

func (d *DirectConnectDouble) CreateBGPPeer(i0 *directconnect.CreateBGPPeerInput) (r0 *directconnect.CreateBGPPeerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBGPPeer", i0)
	r0, _ = returns[0].(*directconnect.CreateBGPPeerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) CreateBGPPeerRequest(i0 *directconnect.CreateBGPPeerInput) (r0 *request.Request, r1 *directconnect.CreateBGPPeerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBGPPeerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.CreateBGPPeerOutput)
	return
}

func (d *DirectConnectDouble) CreateBGPPeerWithContext(i0 context.Context, i1 *directconnect.CreateBGPPeerInput, i2 ...request.Option) (r0 *directconnect.CreateBGPPeerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBGPPeerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.CreateBGPPeerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeCreateBGPPeerWithContext(ctx context.Context, in *directconnect.CreateBGPPeerInput, _ ...request.Option) (*directconnect.CreateBGPPeerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateBGPPeer cancelled", ctx.Err())
	default:
		return d.CreateBGPPeer(in)
	}
}

func (d *DirectConnectDouble) CreateConnection(i0 *directconnect.CreateConnectionInput) (r0 *directconnect.Connection, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateConnection", i0)
	r0, _ = returns[0].(*directconnect.Connection)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) CreateConnectionRequest(i0 *directconnect.CreateConnectionInput) (r0 *request.Request, r1 *directconnect.Connection) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateConnectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.Connection)
	return
}

func (d *DirectConnectDouble) CreateConnectionWithContext(i0 context.Context, i1 *directconnect.CreateConnectionInput, i2 ...request.Option) (r0 *directconnect.Connection, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateConnectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.Connection)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeCreateConnectionWithContext(ctx context.Context, in *directconnect.CreateConnectionInput, _ ...request.Option) (*directconnect.Connection, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateConnection cancelled", ctx.Err())
	default:
		return d.CreateConnection(in)
	}
}

func (d *DirectConnectDouble) CreateDirectConnectGateway(i0 *directconnect.CreateDirectConnectGatewayInput) (r0 *directconnect.CreateDirectConnectGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDirectConnectGateway", i0)
	r0, _ = returns[0].(*directconnect.CreateDirectConnectGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) CreateDirectConnectGatewayAssociation(i0 *directconnect.CreateDirectConnectGatewayAssociationInput) (r0 *directconnect.CreateDirectConnectGatewayAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDirectConnectGatewayAssociation", i0)
	r0, _ = returns[0].(*directconnect.CreateDirectConnectGatewayAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) CreateDirectConnectGatewayAssociationProposal(i0 *directconnect.CreateDirectConnectGatewayAssociationProposalInput) (r0 *directconnect.CreateDirectConnectGatewayAssociationProposalOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDirectConnectGatewayAssociationProposal", i0)
	r0, _ = returns[0].(*directconnect.CreateDirectConnectGatewayAssociationProposalOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) CreateDirectConnectGatewayAssociationProposalRequest(i0 *directconnect.CreateDirectConnectGatewayAssociationProposalInput) (r0 *request.Request, r1 *directconnect.CreateDirectConnectGatewayAssociationProposalOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDirectConnectGatewayAssociationProposalRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.CreateDirectConnectGatewayAssociationProposalOutput)
	return
}

func (d *DirectConnectDouble) CreateDirectConnectGatewayAssociationProposalWithContext(i0 context.Context, i1 *directconnect.CreateDirectConnectGatewayAssociationProposalInput, i2 ...request.Option) (r0 *directconnect.CreateDirectConnectGatewayAssociationProposalOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDirectConnectGatewayAssociationProposalWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.CreateDirectConnectGatewayAssociationProposalOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeCreateDirectConnectGatewayAssociationProposalWithContext(ctx context.Context, in *directconnect.CreateDirectConnectGatewayAssociationProposalInput, _ ...request.Option) (*directconnect.CreateDirectConnectGatewayAssociationProposalOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDirectConnectGatewayAssociationProposal cancelled", ctx.Err())
	default:
		return d.CreateDirectConnectGatewayAssociationProposal(in)
	}
}

func (d *DirectConnectDouble) CreateDirectConnectGatewayAssociationRequest(i0 *directconnect.CreateDirectConnectGatewayAssociationInput) (r0 *request.Request, r1 *directconnect.CreateDirectConnectGatewayAssociationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDirectConnectGatewayAssociationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.CreateDirectConnectGatewayAssociationOutput)
	return
}

func (d *DirectConnectDouble) CreateDirectConnectGatewayAssociationWithContext(i0 context.Context, i1 *directconnect.CreateDirectConnectGatewayAssociationInput, i2 ...request.Option) (r0 *directconnect.CreateDirectConnectGatewayAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDirectConnectGatewayAssociationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.CreateDirectConnectGatewayAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeCreateDirectConnectGatewayAssociationWithContext(ctx context.Context, in *directconnect.CreateDirectConnectGatewayAssociationInput, _ ...request.Option) (*directconnect.CreateDirectConnectGatewayAssociationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDirectConnectGatewayAssociation cancelled", ctx.Err())
	default:
		return d.CreateDirectConnectGatewayAssociation(in)
	}
}

func (d *DirectConnectDouble) CreateDirectConnectGatewayRequest(i0 *directconnect.CreateDirectConnectGatewayInput) (r0 *request.Request, r1 *directconnect.CreateDirectConnectGatewayOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDirectConnectGatewayRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.CreateDirectConnectGatewayOutput)
	return
}

func (d *DirectConnectDouble) CreateDirectConnectGatewayWithContext(i0 context.Context, i1 *directconnect.CreateDirectConnectGatewayInput, i2 ...request.Option) (r0 *directconnect.CreateDirectConnectGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDirectConnectGatewayWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.CreateDirectConnectGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeCreateDirectConnectGatewayWithContext(ctx context.Context, in *directconnect.CreateDirectConnectGatewayInput, _ ...request.Option) (*directconnect.CreateDirectConnectGatewayOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDirectConnectGateway cancelled", ctx.Err())
	default:
		return d.CreateDirectConnectGateway(in)
	}
}

func (d *DirectConnectDouble) CreateInterconnect(i0 *directconnect.CreateInterconnectInput) (r0 *directconnect.Interconnect, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInterconnect", i0)
	r0, _ = returns[0].(*directconnect.Interconnect)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) CreateInterconnectRequest(i0 *directconnect.CreateInterconnectInput) (r0 *request.Request, r1 *directconnect.Interconnect) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInterconnectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.Interconnect)
	return
}

func (d *DirectConnectDouble) CreateInterconnectWithContext(i0 context.Context, i1 *directconnect.CreateInterconnectInput, i2 ...request.Option) (r0 *directconnect.Interconnect, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInterconnectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.Interconnect)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeCreateInterconnectWithContext(ctx context.Context, in *directconnect.CreateInterconnectInput, _ ...request.Option) (*directconnect.Interconnect, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateInterconnect cancelled", ctx.Err())
	default:
		return d.CreateInterconnect(in)
	}
}

func (d *DirectConnectDouble) CreateLag(i0 *directconnect.CreateLagInput) (r0 *directconnect.Lag, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLag", i0)
	r0, _ = returns[0].(*directconnect.Lag)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) CreateLagRequest(i0 *directconnect.CreateLagInput) (r0 *request.Request, r1 *directconnect.Lag) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLagRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.Lag)
	return
}

func (d *DirectConnectDouble) CreateLagWithContext(i0 context.Context, i1 *directconnect.CreateLagInput, i2 ...request.Option) (r0 *directconnect.Lag, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLagWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.Lag)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeCreateLagWithContext(ctx context.Context, in *directconnect.CreateLagInput, _ ...request.Option) (*directconnect.Lag, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateLag cancelled", ctx.Err())
	default:
		return d.CreateLag(in)
	}
}

func (d *DirectConnectDouble) CreatePrivateVirtualInterface(i0 *directconnect.CreatePrivateVirtualInterfaceInput) (r0 *directconnect.VirtualInterface, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePrivateVirtualInterface", i0)
	r0, _ = returns[0].(*directconnect.VirtualInterface)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) CreatePrivateVirtualInterfaceRequest(i0 *directconnect.CreatePrivateVirtualInterfaceInput) (r0 *request.Request, r1 *directconnect.VirtualInterface) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePrivateVirtualInterfaceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.VirtualInterface)
	return
}

func (d *DirectConnectDouble) CreatePrivateVirtualInterfaceWithContext(i0 context.Context, i1 *directconnect.CreatePrivateVirtualInterfaceInput, i2 ...request.Option) (r0 *directconnect.VirtualInterface, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePrivateVirtualInterfaceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.VirtualInterface)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeCreatePrivateVirtualInterfaceWithContext(ctx context.Context, in *directconnect.CreatePrivateVirtualInterfaceInput, _ ...request.Option) (*directconnect.VirtualInterface, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreatePrivateVirtualInterface cancelled", ctx.Err())
	default:
		return d.CreatePrivateVirtualInterface(in)
	}
}

func (d *DirectConnectDouble) CreatePublicVirtualInterface(i0 *directconnect.CreatePublicVirtualInterfaceInput) (r0 *directconnect.VirtualInterface, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePublicVirtualInterface", i0)
	r0, _ = returns[0].(*directconnect.VirtualInterface)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) CreatePublicVirtualInterfaceRequest(i0 *directconnect.CreatePublicVirtualInterfaceInput) (r0 *request.Request, r1 *directconnect.VirtualInterface) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePublicVirtualInterfaceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.VirtualInterface)
	return
}

func (d *DirectConnectDouble) CreatePublicVirtualInterfaceWithContext(i0 context.Context, i1 *directconnect.CreatePublicVirtualInterfaceInput, i2 ...request.Option) (r0 *directconnect.VirtualInterface, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePublicVirtualInterfaceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.VirtualInterface)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeCreatePublicVirtualInterfaceWithContext(ctx context.Context, in *directconnect.CreatePublicVirtualInterfaceInput, _ ...request.Option) (*directconnect.VirtualInterface, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreatePublicVirtualInterface cancelled", ctx.Err())
	default:
		return d.CreatePublicVirtualInterface(in)
	}
}

func (d *DirectConnectDouble) CreateTransitVirtualInterface(i0 *directconnect.CreateTransitVirtualInterfaceInput) (r0 *directconnect.CreateTransitVirtualInterfaceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTransitVirtualInterface", i0)
	r0, _ = returns[0].(*directconnect.CreateTransitVirtualInterfaceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) CreateTransitVirtualInterfaceRequest(i0 *directconnect.CreateTransitVirtualInterfaceInput) (r0 *request.Request, r1 *directconnect.CreateTransitVirtualInterfaceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTransitVirtualInterfaceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.CreateTransitVirtualInterfaceOutput)
	return
}

func (d *DirectConnectDouble) CreateTransitVirtualInterfaceWithContext(i0 context.Context, i1 *directconnect.CreateTransitVirtualInterfaceInput, i2 ...request.Option) (r0 *directconnect.CreateTransitVirtualInterfaceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTransitVirtualInterfaceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.CreateTransitVirtualInterfaceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeCreateTransitVirtualInterfaceWithContext(ctx context.Context, in *directconnect.CreateTransitVirtualInterfaceInput, _ ...request.Option) (*directconnect.CreateTransitVirtualInterfaceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTransitVirtualInterface cancelled", ctx.Err())
	default:
		return d.CreateTransitVirtualInterface(in)
	}
}

func (d *DirectConnectDouble) DeleteBGPPeer(i0 *directconnect.DeleteBGPPeerInput) (r0 *directconnect.DeleteBGPPeerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBGPPeer", i0)
	r0, _ = returns[0].(*directconnect.DeleteBGPPeerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) DeleteBGPPeerRequest(i0 *directconnect.DeleteBGPPeerInput) (r0 *request.Request, r1 *directconnect.DeleteBGPPeerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBGPPeerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.DeleteBGPPeerOutput)
	return
}

func (d *DirectConnectDouble) DeleteBGPPeerWithContext(i0 context.Context, i1 *directconnect.DeleteBGPPeerInput, i2 ...request.Option) (r0 *directconnect.DeleteBGPPeerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBGPPeerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.DeleteBGPPeerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeDeleteBGPPeerWithContext(ctx context.Context, in *directconnect.DeleteBGPPeerInput, _ ...request.Option) (*directconnect.DeleteBGPPeerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteBGPPeer cancelled", ctx.Err())
	default:
		return d.DeleteBGPPeer(in)
	}
}

func (d *DirectConnectDouble) DeleteConnection(i0 *directconnect.DeleteConnectionInput) (r0 *directconnect.Connection, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteConnection", i0)
	r0, _ = returns[0].(*directconnect.Connection)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) DeleteConnectionRequest(i0 *directconnect.DeleteConnectionInput) (r0 *request.Request, r1 *directconnect.Connection) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteConnectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.Connection)
	return
}

func (d *DirectConnectDouble) DeleteConnectionWithContext(i0 context.Context, i1 *directconnect.DeleteConnectionInput, i2 ...request.Option) (r0 *directconnect.Connection, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteConnectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.Connection)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeDeleteConnectionWithContext(ctx context.Context, in *directconnect.DeleteConnectionInput, _ ...request.Option) (*directconnect.Connection, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteConnection cancelled", ctx.Err())
	default:
		return d.DeleteConnection(in)
	}
}

func (d *DirectConnectDouble) DeleteDirectConnectGateway(i0 *directconnect.DeleteDirectConnectGatewayInput) (r0 *directconnect.DeleteDirectConnectGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDirectConnectGateway", i0)
	r0, _ = returns[0].(*directconnect.DeleteDirectConnectGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) DeleteDirectConnectGatewayAssociation(i0 *directconnect.DeleteDirectConnectGatewayAssociationInput) (r0 *directconnect.DeleteDirectConnectGatewayAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDirectConnectGatewayAssociation", i0)
	r0, _ = returns[0].(*directconnect.DeleteDirectConnectGatewayAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) DeleteDirectConnectGatewayAssociationProposal(i0 *directconnect.DeleteDirectConnectGatewayAssociationProposalInput) (r0 *directconnect.DeleteDirectConnectGatewayAssociationProposalOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDirectConnectGatewayAssociationProposal", i0)
	r0, _ = returns[0].(*directconnect.DeleteDirectConnectGatewayAssociationProposalOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) DeleteDirectConnectGatewayAssociationProposalRequest(i0 *directconnect.DeleteDirectConnectGatewayAssociationProposalInput) (r0 *request.Request, r1 *directconnect.DeleteDirectConnectGatewayAssociationProposalOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDirectConnectGatewayAssociationProposalRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.DeleteDirectConnectGatewayAssociationProposalOutput)
	return
}

func (d *DirectConnectDouble) DeleteDirectConnectGatewayAssociationProposalWithContext(i0 context.Context, i1 *directconnect.DeleteDirectConnectGatewayAssociationProposalInput, i2 ...request.Option) (r0 *directconnect.DeleteDirectConnectGatewayAssociationProposalOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDirectConnectGatewayAssociationProposalWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.DeleteDirectConnectGatewayAssociationProposalOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeDeleteDirectConnectGatewayAssociationProposalWithContext(ctx context.Context, in *directconnect.DeleteDirectConnectGatewayAssociationProposalInput, _ ...request.Option) (*directconnect.DeleteDirectConnectGatewayAssociationProposalOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDirectConnectGatewayAssociationProposal cancelled", ctx.Err())
	default:
		return d.DeleteDirectConnectGatewayAssociationProposal(in)
	}
}

func (d *DirectConnectDouble) DeleteDirectConnectGatewayAssociationRequest(i0 *directconnect.DeleteDirectConnectGatewayAssociationInput) (r0 *request.Request, r1 *directconnect.DeleteDirectConnectGatewayAssociationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDirectConnectGatewayAssociationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.DeleteDirectConnectGatewayAssociationOutput)
	return
}

func (d *DirectConnectDouble) DeleteDirectConnectGatewayAssociationWithContext(i0 context.Context, i1 *directconnect.DeleteDirectConnectGatewayAssociationInput, i2 ...request.Option) (r0 *directconnect.DeleteDirectConnectGatewayAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDirectConnectGatewayAssociationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.DeleteDirectConnectGatewayAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeDeleteDirectConnectGatewayAssociationWithContext(ctx context.Context, in *directconnect.DeleteDirectConnectGatewayAssociationInput, _ ...request.Option) (*directconnect.DeleteDirectConnectGatewayAssociationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDirectConnectGatewayAssociation cancelled", ctx.Err())
	default:
		return d.DeleteDirectConnectGatewayAssociation(in)
	}
}

func (d *DirectConnectDouble) DeleteDirectConnectGatewayRequest(i0 *directconnect.DeleteDirectConnectGatewayInput) (r0 *request.Request, r1 *directconnect.DeleteDirectConnectGatewayOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDirectConnectGatewayRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.DeleteDirectConnectGatewayOutput)
	return
}

func (d *DirectConnectDouble) DeleteDirectConnectGatewayWithContext(i0 context.Context, i1 *directconnect.DeleteDirectConnectGatewayInput, i2 ...request.Option) (r0 *directconnect.DeleteDirectConnectGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDirectConnectGatewayWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.DeleteDirectConnectGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeDeleteDirectConnectGatewayWithContext(ctx context.Context, in *directconnect.DeleteDirectConnectGatewayInput, _ ...request.Option) (*directconnect.DeleteDirectConnectGatewayOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDirectConnectGateway cancelled", ctx.Err())
	default:
		return d.DeleteDirectConnectGateway(in)
	}
}

func (d *DirectConnectDouble) DeleteInterconnect(i0 *directconnect.DeleteInterconnectInput) (r0 *directconnect.DeleteInterconnectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInterconnect", i0)
	r0, _ = returns[0].(*directconnect.DeleteInterconnectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) DeleteInterconnectRequest(i0 *directconnect.DeleteInterconnectInput) (r0 *request.Request, r1 *directconnect.DeleteInterconnectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInterconnectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.DeleteInterconnectOutput)
	return
}

func (d *DirectConnectDouble) DeleteInterconnectWithContext(i0 context.Context, i1 *directconnect.DeleteInterconnectInput, i2 ...request.Option) (r0 *directconnect.DeleteInterconnectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInterconnectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.DeleteInterconnectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeDeleteInterconnectWithContext(ctx context.Context, in *directconnect.DeleteInterconnectInput, _ ...request.Option) (*directconnect.DeleteInterconnectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteInterconnect cancelled", ctx.Err())
	default:
		return d.DeleteInterconnect(in)
	}
}

func (d *DirectConnectDouble) DeleteLag(i0 *directconnect.DeleteLagInput) (r0 *directconnect.Lag, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLag", i0)
	r0, _ = returns[0].(*directconnect.Lag)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) DeleteLagRequest(i0 *directconnect.DeleteLagInput) (r0 *request.Request, r1 *directconnect.Lag) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLagRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.Lag)
	return
}

func (d *DirectConnectDouble) DeleteLagWithContext(i0 context.Context, i1 *directconnect.DeleteLagInput, i2 ...request.Option) (r0 *directconnect.Lag, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLagWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.Lag)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeDeleteLagWithContext(ctx context.Context, in *directconnect.DeleteLagInput, _ ...request.Option) (*directconnect.Lag, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteLag cancelled", ctx.Err())
	default:
		return d.DeleteLag(in)
	}
}

func (d *DirectConnectDouble) DeleteVirtualInterface(i0 *directconnect.DeleteVirtualInterfaceInput) (r0 *directconnect.DeleteVirtualInterfaceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVirtualInterface", i0)
	r0, _ = returns[0].(*directconnect.DeleteVirtualInterfaceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) DeleteVirtualInterfaceRequest(i0 *directconnect.DeleteVirtualInterfaceInput) (r0 *request.Request, r1 *directconnect.DeleteVirtualInterfaceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVirtualInterfaceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.DeleteVirtualInterfaceOutput)
	return
}

func (d *DirectConnectDouble) DeleteVirtualInterfaceWithContext(i0 context.Context, i1 *directconnect.DeleteVirtualInterfaceInput, i2 ...request.Option) (r0 *directconnect.DeleteVirtualInterfaceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVirtualInterfaceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.DeleteVirtualInterfaceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeDeleteVirtualInterfaceWithContext(ctx context.Context, in *directconnect.DeleteVirtualInterfaceInput, _ ...request.Option) (*directconnect.DeleteVirtualInterfaceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteVirtualInterface cancelled", ctx.Err())
	default:
		return d.DeleteVirtualInterface(in)
	}
}

func (d *DirectConnectDouble) DescribeConnectionLoa(i0 *directconnect.DescribeConnectionLoaInput) (r0 *directconnect.DescribeConnectionLoaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConnectionLoa", i0)
	r0, _ = returns[0].(*directconnect.DescribeConnectionLoaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) DescribeConnectionLoaRequest(i0 *directconnect.DescribeConnectionLoaInput) (r0 *request.Request, r1 *directconnect.DescribeConnectionLoaOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConnectionLoaRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.DescribeConnectionLoaOutput)
	return
}

func (d *DirectConnectDouble) DescribeConnectionLoaWithContext(i0 context.Context, i1 *directconnect.DescribeConnectionLoaInput, i2 ...request.Option) (r0 *directconnect.DescribeConnectionLoaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConnectionLoaWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.DescribeConnectionLoaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeDescribeConnectionLoaWithContext(ctx context.Context, in *directconnect.DescribeConnectionLoaInput, _ ...request.Option) (*directconnect.DescribeConnectionLoaOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeConnectionLoa cancelled", ctx.Err())
	default:
		return d.DescribeConnectionLoa(in)
	}
}

func (d *DirectConnectDouble) DescribeConnections(i0 *directconnect.DescribeConnectionsInput) (r0 *directconnect.Connections, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConnections", i0)
	r0, _ = returns[0].(*directconnect.Connections)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) DescribeConnectionsOnInterconnect(i0 *directconnect.DescribeConnectionsOnInterconnectInput) (r0 *directconnect.Connections, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConnectionsOnInterconnect", i0)
	r0, _ = returns[0].(*directconnect.Connections)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) DescribeConnectionsOnInterconnectRequest(i0 *directconnect.DescribeConnectionsOnInterconnectInput) (r0 *request.Request, r1 *directconnect.Connections) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConnectionsOnInterconnectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.Connections)
	return
}

func (d *DirectConnectDouble) DescribeConnectionsOnInterconnectWithContext(i0 context.Context, i1 *directconnect.DescribeConnectionsOnInterconnectInput, i2 ...request.Option) (r0 *directconnect.Connections, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConnectionsOnInterconnectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.Connections)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeDescribeConnectionsOnInterconnectWithContext(ctx context.Context, in *directconnect.DescribeConnectionsOnInterconnectInput, _ ...request.Option) (*directconnect.Connections, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeConnectionsOnInterconnect cancelled", ctx.Err())
	default:
		return d.DescribeConnectionsOnInterconnect(in)
	}
}

func (d *DirectConnectDouble) DescribeConnectionsRequest(i0 *directconnect.DescribeConnectionsInput) (r0 *request.Request, r1 *directconnect.Connections) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConnectionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.Connections)
	return
}

func (d *DirectConnectDouble) DescribeConnectionsWithContext(i0 context.Context, i1 *directconnect.DescribeConnectionsInput, i2 ...request.Option) (r0 *directconnect.Connections, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConnectionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.Connections)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeDescribeConnectionsWithContext(ctx context.Context, in *directconnect.DescribeConnectionsInput, _ ...request.Option) (*directconnect.Connections, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeConnections cancelled", ctx.Err())
	default:
		return d.DescribeConnections(in)
	}
}

func (d *DirectConnectDouble) DescribeDirectConnectGatewayAssociationProposals(i0 *directconnect.DescribeDirectConnectGatewayAssociationProposalsInput) (r0 *directconnect.DescribeDirectConnectGatewayAssociationProposalsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDirectConnectGatewayAssociationProposals", i0)
	r0, _ = returns[0].(*directconnect.DescribeDirectConnectGatewayAssociationProposalsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) DescribeDirectConnectGatewayAssociationProposalsRequest(i0 *directconnect.DescribeDirectConnectGatewayAssociationProposalsInput) (r0 *request.Request, r1 *directconnect.DescribeDirectConnectGatewayAssociationProposalsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDirectConnectGatewayAssociationProposalsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.DescribeDirectConnectGatewayAssociationProposalsOutput)
	return
}

func (d *DirectConnectDouble) DescribeDirectConnectGatewayAssociationProposalsWithContext(i0 context.Context, i1 *directconnect.DescribeDirectConnectGatewayAssociationProposalsInput, i2 ...request.Option) (r0 *directconnect.DescribeDirectConnectGatewayAssociationProposalsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDirectConnectGatewayAssociationProposalsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.DescribeDirectConnectGatewayAssociationProposalsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeDescribeDirectConnectGatewayAssociationProposalsWithContext(ctx context.Context, in *directconnect.DescribeDirectConnectGatewayAssociationProposalsInput, _ ...request.Option) (*directconnect.DescribeDirectConnectGatewayAssociationProposalsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDirectConnectGatewayAssociationProposals cancelled", ctx.Err())
	default:
		return d.DescribeDirectConnectGatewayAssociationProposals(in)
	}
}

func (d *DirectConnectDouble) DescribeDirectConnectGatewayAssociations(i0 *directconnect.DescribeDirectConnectGatewayAssociationsInput) (r0 *directconnect.DescribeDirectConnectGatewayAssociationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDirectConnectGatewayAssociations", i0)
	r0, _ = returns[0].(*directconnect.DescribeDirectConnectGatewayAssociationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) DescribeDirectConnectGatewayAssociationsRequest(i0 *directconnect.DescribeDirectConnectGatewayAssociationsInput) (r0 *request.Request, r1 *directconnect.DescribeDirectConnectGatewayAssociationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDirectConnectGatewayAssociationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.DescribeDirectConnectGatewayAssociationsOutput)
	return
}

func (d *DirectConnectDouble) DescribeDirectConnectGatewayAssociationsWithContext(i0 context.Context, i1 *directconnect.DescribeDirectConnectGatewayAssociationsInput, i2 ...request.Option) (r0 *directconnect.DescribeDirectConnectGatewayAssociationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDirectConnectGatewayAssociationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.DescribeDirectConnectGatewayAssociationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeDescribeDirectConnectGatewayAssociationsWithContext(ctx context.Context, in *directconnect.DescribeDirectConnectGatewayAssociationsInput, _ ...request.Option) (*directconnect.DescribeDirectConnectGatewayAssociationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDirectConnectGatewayAssociations cancelled", ctx.Err())
	default:
		return d.DescribeDirectConnectGatewayAssociations(in)
	}
}

func (d *DirectConnectDouble) DescribeDirectConnectGatewayAttachments(i0 *directconnect.DescribeDirectConnectGatewayAttachmentsInput) (r0 *directconnect.DescribeDirectConnectGatewayAttachmentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDirectConnectGatewayAttachments", i0)
	r0, _ = returns[0].(*directconnect.DescribeDirectConnectGatewayAttachmentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) DescribeDirectConnectGatewayAttachmentsRequest(i0 *directconnect.DescribeDirectConnectGatewayAttachmentsInput) (r0 *request.Request, r1 *directconnect.DescribeDirectConnectGatewayAttachmentsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDirectConnectGatewayAttachmentsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.DescribeDirectConnectGatewayAttachmentsOutput)
	return
}

func (d *DirectConnectDouble) DescribeDirectConnectGatewayAttachmentsWithContext(i0 context.Context, i1 *directconnect.DescribeDirectConnectGatewayAttachmentsInput, i2 ...request.Option) (r0 *directconnect.DescribeDirectConnectGatewayAttachmentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDirectConnectGatewayAttachmentsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.DescribeDirectConnectGatewayAttachmentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeDescribeDirectConnectGatewayAttachmentsWithContext(ctx context.Context, in *directconnect.DescribeDirectConnectGatewayAttachmentsInput, _ ...request.Option) (*directconnect.DescribeDirectConnectGatewayAttachmentsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDirectConnectGatewayAttachments cancelled", ctx.Err())
	default:
		return d.DescribeDirectConnectGatewayAttachments(in)
	}
}

func (d *DirectConnectDouble) DescribeDirectConnectGateways(i0 *directconnect.DescribeDirectConnectGatewaysInput) (r0 *directconnect.DescribeDirectConnectGatewaysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDirectConnectGateways", i0)
	r0, _ = returns[0].(*directconnect.DescribeDirectConnectGatewaysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) DescribeDirectConnectGatewaysRequest(i0 *directconnect.DescribeDirectConnectGatewaysInput) (r0 *request.Request, r1 *directconnect.DescribeDirectConnectGatewaysOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDirectConnectGatewaysRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.DescribeDirectConnectGatewaysOutput)
	return
}

func (d *DirectConnectDouble) DescribeDirectConnectGatewaysWithContext(i0 context.Context, i1 *directconnect.DescribeDirectConnectGatewaysInput, i2 ...request.Option) (r0 *directconnect.DescribeDirectConnectGatewaysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDirectConnectGatewaysWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.DescribeDirectConnectGatewaysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeDescribeDirectConnectGatewaysWithContext(ctx context.Context, in *directconnect.DescribeDirectConnectGatewaysInput, _ ...request.Option) (*directconnect.DescribeDirectConnectGatewaysOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDirectConnectGateways cancelled", ctx.Err())
	default:
		return d.DescribeDirectConnectGateways(in)
	}
}

func (d *DirectConnectDouble) DescribeHostedConnections(i0 *directconnect.DescribeHostedConnectionsInput) (r0 *directconnect.Connections, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHostedConnections", i0)
	r0, _ = returns[0].(*directconnect.Connections)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) DescribeHostedConnectionsRequest(i0 *directconnect.DescribeHostedConnectionsInput) (r0 *request.Request, r1 *directconnect.Connections) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHostedConnectionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.Connections)
	return
}

func (d *DirectConnectDouble) DescribeHostedConnectionsWithContext(i0 context.Context, i1 *directconnect.DescribeHostedConnectionsInput, i2 ...request.Option) (r0 *directconnect.Connections, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHostedConnectionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.Connections)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeDescribeHostedConnectionsWithContext(ctx context.Context, in *directconnect.DescribeHostedConnectionsInput, _ ...request.Option) (*directconnect.Connections, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeHostedConnections cancelled", ctx.Err())
	default:
		return d.DescribeHostedConnections(in)
	}
}

func (d *DirectConnectDouble) DescribeInterconnectLoa(i0 *directconnect.DescribeInterconnectLoaInput) (r0 *directconnect.DescribeInterconnectLoaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInterconnectLoa", i0)
	r0, _ = returns[0].(*directconnect.DescribeInterconnectLoaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) DescribeInterconnectLoaRequest(i0 *directconnect.DescribeInterconnectLoaInput) (r0 *request.Request, r1 *directconnect.DescribeInterconnectLoaOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInterconnectLoaRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.DescribeInterconnectLoaOutput)
	return
}

func (d *DirectConnectDouble) DescribeInterconnectLoaWithContext(i0 context.Context, i1 *directconnect.DescribeInterconnectLoaInput, i2 ...request.Option) (r0 *directconnect.DescribeInterconnectLoaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInterconnectLoaWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.DescribeInterconnectLoaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeDescribeInterconnectLoaWithContext(ctx context.Context, in *directconnect.DescribeInterconnectLoaInput, _ ...request.Option) (*directconnect.DescribeInterconnectLoaOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeInterconnectLoa cancelled", ctx.Err())
	default:
		return d.DescribeInterconnectLoa(in)
	}
}

func (d *DirectConnectDouble) DescribeInterconnects(i0 *directconnect.DescribeInterconnectsInput) (r0 *directconnect.DescribeInterconnectsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInterconnects", i0)
	r0, _ = returns[0].(*directconnect.DescribeInterconnectsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) DescribeInterconnectsRequest(i0 *directconnect.DescribeInterconnectsInput) (r0 *request.Request, r1 *directconnect.DescribeInterconnectsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInterconnectsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.DescribeInterconnectsOutput)
	return
}

func (d *DirectConnectDouble) DescribeInterconnectsWithContext(i0 context.Context, i1 *directconnect.DescribeInterconnectsInput, i2 ...request.Option) (r0 *directconnect.DescribeInterconnectsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInterconnectsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.DescribeInterconnectsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeDescribeInterconnectsWithContext(ctx context.Context, in *directconnect.DescribeInterconnectsInput, _ ...request.Option) (*directconnect.DescribeInterconnectsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeInterconnects cancelled", ctx.Err())
	default:
		return d.DescribeInterconnects(in)
	}
}

func (d *DirectConnectDouble) DescribeLags(i0 *directconnect.DescribeLagsInput) (r0 *directconnect.DescribeLagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLags", i0)
	r0, _ = returns[0].(*directconnect.DescribeLagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) DescribeLagsRequest(i0 *directconnect.DescribeLagsInput) (r0 *request.Request, r1 *directconnect.DescribeLagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.DescribeLagsOutput)
	return
}

func (d *DirectConnectDouble) DescribeLagsWithContext(i0 context.Context, i1 *directconnect.DescribeLagsInput, i2 ...request.Option) (r0 *directconnect.DescribeLagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.DescribeLagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeDescribeLagsWithContext(ctx context.Context, in *directconnect.DescribeLagsInput, _ ...request.Option) (*directconnect.DescribeLagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeLags cancelled", ctx.Err())
	default:
		return d.DescribeLags(in)
	}
}

func (d *DirectConnectDouble) DescribeLoa(i0 *directconnect.DescribeLoaInput) (r0 *directconnect.Loa, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoa", i0)
	r0, _ = returns[0].(*directconnect.Loa)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) DescribeLoaRequest(i0 *directconnect.DescribeLoaInput) (r0 *request.Request, r1 *directconnect.Loa) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoaRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.Loa)
	return
}

func (d *DirectConnectDouble) DescribeLoaWithContext(i0 context.Context, i1 *directconnect.DescribeLoaInput, i2 ...request.Option) (r0 *directconnect.Loa, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoaWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.Loa)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeDescribeLoaWithContext(ctx context.Context, in *directconnect.DescribeLoaInput, _ ...request.Option) (*directconnect.Loa, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeLoa cancelled", ctx.Err())
	default:
		return d.DescribeLoa(in)
	}
}

func (d *DirectConnectDouble) DescribeLocations(i0 *directconnect.DescribeLocationsInput) (r0 *directconnect.DescribeLocationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLocations", i0)
	r0, _ = returns[0].(*directconnect.DescribeLocationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) DescribeLocationsRequest(i0 *directconnect.DescribeLocationsInput) (r0 *request.Request, r1 *directconnect.DescribeLocationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLocationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.DescribeLocationsOutput)
	return
}

func (d *DirectConnectDouble) DescribeLocationsWithContext(i0 context.Context, i1 *directconnect.DescribeLocationsInput, i2 ...request.Option) (r0 *directconnect.DescribeLocationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLocationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.DescribeLocationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeDescribeLocationsWithContext(ctx context.Context, in *directconnect.DescribeLocationsInput, _ ...request.Option) (*directconnect.DescribeLocationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeLocations cancelled", ctx.Err())
	default:
		return d.DescribeLocations(in)
	}
}

func (d *DirectConnectDouble) DescribeTags(i0 *directconnect.DescribeTagsInput) (r0 *directconnect.DescribeTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTags", i0)
	r0, _ = returns[0].(*directconnect.DescribeTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) DescribeTagsRequest(i0 *directconnect.DescribeTagsInput) (r0 *request.Request, r1 *directconnect.DescribeTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.DescribeTagsOutput)
	return
}

func (d *DirectConnectDouble) DescribeTagsWithContext(i0 context.Context, i1 *directconnect.DescribeTagsInput, i2 ...request.Option) (r0 *directconnect.DescribeTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.DescribeTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeDescribeTagsWithContext(ctx context.Context, in *directconnect.DescribeTagsInput, _ ...request.Option) (*directconnect.DescribeTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTags cancelled", ctx.Err())
	default:
		return d.DescribeTags(in)
	}
}

func (d *DirectConnectDouble) DescribeVirtualGateways(i0 *directconnect.DescribeVirtualGatewaysInput) (r0 *directconnect.DescribeVirtualGatewaysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVirtualGateways", i0)
	r0, _ = returns[0].(*directconnect.DescribeVirtualGatewaysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) DescribeVirtualGatewaysRequest(i0 *directconnect.DescribeVirtualGatewaysInput) (r0 *request.Request, r1 *directconnect.DescribeVirtualGatewaysOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVirtualGatewaysRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.DescribeVirtualGatewaysOutput)
	return
}

func (d *DirectConnectDouble) DescribeVirtualGatewaysWithContext(i0 context.Context, i1 *directconnect.DescribeVirtualGatewaysInput, i2 ...request.Option) (r0 *directconnect.DescribeVirtualGatewaysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVirtualGatewaysWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.DescribeVirtualGatewaysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeDescribeVirtualGatewaysWithContext(ctx context.Context, in *directconnect.DescribeVirtualGatewaysInput, _ ...request.Option) (*directconnect.DescribeVirtualGatewaysOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeVirtualGateways cancelled", ctx.Err())
	default:
		return d.DescribeVirtualGateways(in)
	}
}

func (d *DirectConnectDouble) DescribeVirtualInterfaces(i0 *directconnect.DescribeVirtualInterfacesInput) (r0 *directconnect.DescribeVirtualInterfacesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVirtualInterfaces", i0)
	r0, _ = returns[0].(*directconnect.DescribeVirtualInterfacesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) DescribeVirtualInterfacesRequest(i0 *directconnect.DescribeVirtualInterfacesInput) (r0 *request.Request, r1 *directconnect.DescribeVirtualInterfacesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVirtualInterfacesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.DescribeVirtualInterfacesOutput)
	return
}

func (d *DirectConnectDouble) DescribeVirtualInterfacesWithContext(i0 context.Context, i1 *directconnect.DescribeVirtualInterfacesInput, i2 ...request.Option) (r0 *directconnect.DescribeVirtualInterfacesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVirtualInterfacesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.DescribeVirtualInterfacesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeDescribeVirtualInterfacesWithContext(ctx context.Context, in *directconnect.DescribeVirtualInterfacesInput, _ ...request.Option) (*directconnect.DescribeVirtualInterfacesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeVirtualInterfaces cancelled", ctx.Err())
	default:
		return d.DescribeVirtualInterfaces(in)
	}
}

func (d *DirectConnectDouble) DisassociateConnectionFromLag(i0 *directconnect.DisassociateConnectionFromLagInput) (r0 *directconnect.Connection, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateConnectionFromLag", i0)
	r0, _ = returns[0].(*directconnect.Connection)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) DisassociateConnectionFromLagRequest(i0 *directconnect.DisassociateConnectionFromLagInput) (r0 *request.Request, r1 *directconnect.Connection) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateConnectionFromLagRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.Connection)
	return
}

func (d *DirectConnectDouble) DisassociateConnectionFromLagWithContext(i0 context.Context, i1 *directconnect.DisassociateConnectionFromLagInput, i2 ...request.Option) (r0 *directconnect.Connection, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateConnectionFromLagWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.Connection)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeDisassociateConnectionFromLagWithContext(ctx context.Context, in *directconnect.DisassociateConnectionFromLagInput, _ ...request.Option) (*directconnect.Connection, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateConnectionFromLag cancelled", ctx.Err())
	default:
		return d.DisassociateConnectionFromLag(in)
	}
}

func (d *DirectConnectDouble) TagResource(i0 *directconnect.TagResourceInput) (r0 *directconnect.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*directconnect.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) TagResourceRequest(i0 *directconnect.TagResourceInput) (r0 *request.Request, r1 *directconnect.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.TagResourceOutput)
	return
}

func (d *DirectConnectDouble) TagResourceWithContext(i0 context.Context, i1 *directconnect.TagResourceInput, i2 ...request.Option) (r0 *directconnect.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeTagResourceWithContext(ctx context.Context, in *directconnect.TagResourceInput, _ ...request.Option) (*directconnect.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *DirectConnectDouble) UntagResource(i0 *directconnect.UntagResourceInput) (r0 *directconnect.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*directconnect.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) UntagResourceRequest(i0 *directconnect.UntagResourceInput) (r0 *request.Request, r1 *directconnect.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.UntagResourceOutput)
	return
}

func (d *DirectConnectDouble) UntagResourceWithContext(i0 context.Context, i1 *directconnect.UntagResourceInput, i2 ...request.Option) (r0 *directconnect.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeUntagResourceWithContext(ctx context.Context, in *directconnect.UntagResourceInput, _ ...request.Option) (*directconnect.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *DirectConnectDouble) UpdateDirectConnectGatewayAssociation(i0 *directconnect.UpdateDirectConnectGatewayAssociationInput) (r0 *directconnect.UpdateDirectConnectGatewayAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDirectConnectGatewayAssociation", i0)
	r0, _ = returns[0].(*directconnect.UpdateDirectConnectGatewayAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) UpdateDirectConnectGatewayAssociationRequest(i0 *directconnect.UpdateDirectConnectGatewayAssociationInput) (r0 *request.Request, r1 *directconnect.UpdateDirectConnectGatewayAssociationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDirectConnectGatewayAssociationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.UpdateDirectConnectGatewayAssociationOutput)
	return
}

func (d *DirectConnectDouble) UpdateDirectConnectGatewayAssociationWithContext(i0 context.Context, i1 *directconnect.UpdateDirectConnectGatewayAssociationInput, i2 ...request.Option) (r0 *directconnect.UpdateDirectConnectGatewayAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDirectConnectGatewayAssociationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.UpdateDirectConnectGatewayAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeUpdateDirectConnectGatewayAssociationWithContext(ctx context.Context, in *directconnect.UpdateDirectConnectGatewayAssociationInput, _ ...request.Option) (*directconnect.UpdateDirectConnectGatewayAssociationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDirectConnectGatewayAssociation cancelled", ctx.Err())
	default:
		return d.UpdateDirectConnectGatewayAssociation(in)
	}
}

func (d *DirectConnectDouble) UpdateLag(i0 *directconnect.UpdateLagInput) (r0 *directconnect.Lag, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateLag", i0)
	r0, _ = returns[0].(*directconnect.Lag)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) UpdateLagRequest(i0 *directconnect.UpdateLagInput) (r0 *request.Request, r1 *directconnect.Lag) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateLagRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.Lag)
	return
}

func (d *DirectConnectDouble) UpdateLagWithContext(i0 context.Context, i1 *directconnect.UpdateLagInput, i2 ...request.Option) (r0 *directconnect.Lag, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateLagWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.Lag)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeUpdateLagWithContext(ctx context.Context, in *directconnect.UpdateLagInput, _ ...request.Option) (*directconnect.Lag, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateLag cancelled", ctx.Err())
	default:
		return d.UpdateLag(in)
	}
}

func (d *DirectConnectDouble) UpdateVirtualInterfaceAttributes(i0 *directconnect.UpdateVirtualInterfaceAttributesInput) (r0 *directconnect.UpdateVirtualInterfaceAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateVirtualInterfaceAttributes", i0)
	r0, _ = returns[0].(*directconnect.UpdateVirtualInterfaceAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) UpdateVirtualInterfaceAttributesRequest(i0 *directconnect.UpdateVirtualInterfaceAttributesInput) (r0 *request.Request, r1 *directconnect.UpdateVirtualInterfaceAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateVirtualInterfaceAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*directconnect.UpdateVirtualInterfaceAttributesOutput)
	return
}

func (d *DirectConnectDouble) UpdateVirtualInterfaceAttributesWithContext(i0 context.Context, i1 *directconnect.UpdateVirtualInterfaceAttributesInput, i2 ...request.Option) (r0 *directconnect.UpdateVirtualInterfaceAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateVirtualInterfaceAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*directconnect.UpdateVirtualInterfaceAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DirectConnectDouble) fakeUpdateVirtualInterfaceAttributesWithContext(ctx context.Context, in *directconnect.UpdateVirtualInterfaceAttributesInput, _ ...request.Option) (*directconnect.UpdateVirtualInterfaceAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateVirtualInterfaceAttributes cancelled", ctx.Err())
	default:
		return d.UpdateVirtualInterfaceAttributes(in)
	}
}
