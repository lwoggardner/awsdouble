// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:12:29+11:00

// Package ec2double provides a TestDouble implementation of ec2iface.EC2API
package ec2double

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/ec2"
	"github.com/aws/aws-sdk-go/service/ec2/ec2iface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// EC2Double is TestDouble for ec2iface.EC2API
type EC2Double struct {
	ec2iface.EC2API
	*awsdouble.AWSTestDouble
}

// Constructor for EC2Double
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *EC2Double {
	result := &EC2Double{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*ec2iface.EC2API)(nil), configurators...)
	return result
}

func (d *EC2Double) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *EC2Double) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AcceptReservedInstancesExchangeQuoteWithContext":
		return m.Fake(d.fakeAcceptReservedInstancesExchangeQuoteWithContext)

	case "AcceptTransitGatewayPeeringAttachmentWithContext":
		return m.Fake(d.fakeAcceptTransitGatewayPeeringAttachmentWithContext)

	case "AcceptTransitGatewayVpcAttachmentWithContext":
		return m.Fake(d.fakeAcceptTransitGatewayVpcAttachmentWithContext)

	case "AcceptVpcEndpointConnectionsWithContext":
		return m.Fake(d.fakeAcceptVpcEndpointConnectionsWithContext)

	case "AcceptVpcPeeringConnectionWithContext":
		return m.Fake(d.fakeAcceptVpcPeeringConnectionWithContext)

	case "AdvertiseByoipCidrWithContext":
		return m.Fake(d.fakeAdvertiseByoipCidrWithContext)

	case "AllocateAddressWithContext":
		return m.Fake(d.fakeAllocateAddressWithContext)

	case "AllocateHostsWithContext":
		return m.Fake(d.fakeAllocateHostsWithContext)

	case "ApplySecurityGroupsToClientVpnTargetNetworkWithContext":
		return m.Fake(d.fakeApplySecurityGroupsToClientVpnTargetNetworkWithContext)

	case "AssignIpv6AddressesWithContext":
		return m.Fake(d.fakeAssignIpv6AddressesWithContext)

	case "AssignPrivateIpAddressesWithContext":
		return m.Fake(d.fakeAssignPrivateIpAddressesWithContext)

	case "AssociateAddressWithContext":
		return m.Fake(d.fakeAssociateAddressWithContext)

	case "AssociateClientVpnTargetNetworkWithContext":
		return m.Fake(d.fakeAssociateClientVpnTargetNetworkWithContext)

	case "AssociateDhcpOptionsWithContext":
		return m.Fake(d.fakeAssociateDhcpOptionsWithContext)

	case "AssociateIamInstanceProfileWithContext":
		return m.Fake(d.fakeAssociateIamInstanceProfileWithContext)

	case "AssociateRouteTableWithContext":
		return m.Fake(d.fakeAssociateRouteTableWithContext)

	case "AssociateSubnetCidrBlockWithContext":
		return m.Fake(d.fakeAssociateSubnetCidrBlockWithContext)

	case "AssociateTransitGatewayMulticastDomainWithContext":
		return m.Fake(d.fakeAssociateTransitGatewayMulticastDomainWithContext)

	case "AssociateTransitGatewayRouteTableWithContext":
		return m.Fake(d.fakeAssociateTransitGatewayRouteTableWithContext)

	case "AssociateVpcCidrBlockWithContext":
		return m.Fake(d.fakeAssociateVpcCidrBlockWithContext)

	case "AttachClassicLinkVpcWithContext":
		return m.Fake(d.fakeAttachClassicLinkVpcWithContext)

	case "AttachInternetGatewayWithContext":
		return m.Fake(d.fakeAttachInternetGatewayWithContext)

	case "AttachNetworkInterfaceWithContext":
		return m.Fake(d.fakeAttachNetworkInterfaceWithContext)

	case "AttachVolumeWithContext":
		return m.Fake(d.fakeAttachVolumeWithContext)

	case "AttachVpnGatewayWithContext":
		return m.Fake(d.fakeAttachVpnGatewayWithContext)

	case "AuthorizeClientVpnIngressWithContext":
		return m.Fake(d.fakeAuthorizeClientVpnIngressWithContext)

	case "AuthorizeSecurityGroupEgressWithContext":
		return m.Fake(d.fakeAuthorizeSecurityGroupEgressWithContext)

	case "AuthorizeSecurityGroupIngressWithContext":
		return m.Fake(d.fakeAuthorizeSecurityGroupIngressWithContext)

	case "BundleInstanceWithContext":
		return m.Fake(d.fakeBundleInstanceWithContext)

	case "CancelBundleTaskWithContext":
		return m.Fake(d.fakeCancelBundleTaskWithContext)

	case "CancelCapacityReservationWithContext":
		return m.Fake(d.fakeCancelCapacityReservationWithContext)

	case "CancelConversionTaskWithContext":
		return m.Fake(d.fakeCancelConversionTaskWithContext)

	case "CancelExportTaskWithContext":
		return m.Fake(d.fakeCancelExportTaskWithContext)

	case "CancelImportTaskWithContext":
		return m.Fake(d.fakeCancelImportTaskWithContext)

	case "CancelReservedInstancesListingWithContext":
		return m.Fake(d.fakeCancelReservedInstancesListingWithContext)

	case "CancelSpotFleetRequestsWithContext":
		return m.Fake(d.fakeCancelSpotFleetRequestsWithContext)

	case "CancelSpotInstanceRequestsWithContext":
		return m.Fake(d.fakeCancelSpotInstanceRequestsWithContext)

	case "ConfirmProductInstanceWithContext":
		return m.Fake(d.fakeConfirmProductInstanceWithContext)

	case "CopyFpgaImageWithContext":
		return m.Fake(d.fakeCopyFpgaImageWithContext)

	case "CopyImageWithContext":
		return m.Fake(d.fakeCopyImageWithContext)

	case "CopySnapshotWithContext":
		return m.Fake(d.fakeCopySnapshotWithContext)

	case "CreateCapacityReservationWithContext":
		return m.Fake(d.fakeCreateCapacityReservationWithContext)

	case "CreateClientVpnEndpointWithContext":
		return m.Fake(d.fakeCreateClientVpnEndpointWithContext)

	case "CreateClientVpnRouteWithContext":
		return m.Fake(d.fakeCreateClientVpnRouteWithContext)

	case "CreateCustomerGatewayWithContext":
		return m.Fake(d.fakeCreateCustomerGatewayWithContext)

	case "CreateDefaultSubnetWithContext":
		return m.Fake(d.fakeCreateDefaultSubnetWithContext)

	case "CreateDefaultVpcWithContext":
		return m.Fake(d.fakeCreateDefaultVpcWithContext)

	case "CreateDhcpOptionsWithContext":
		return m.Fake(d.fakeCreateDhcpOptionsWithContext)

	case "CreateEgressOnlyInternetGatewayWithContext":
		return m.Fake(d.fakeCreateEgressOnlyInternetGatewayWithContext)

	case "CreateFleetWithContext":
		return m.Fake(d.fakeCreateFleetWithContext)

	case "CreateFlowLogsWithContext":
		return m.Fake(d.fakeCreateFlowLogsWithContext)

	case "CreateFpgaImageWithContext":
		return m.Fake(d.fakeCreateFpgaImageWithContext)

	case "CreateImageWithContext":
		return m.Fake(d.fakeCreateImageWithContext)

	case "CreateInstanceExportTaskWithContext":
		return m.Fake(d.fakeCreateInstanceExportTaskWithContext)

	case "CreateInternetGatewayWithContext":
		return m.Fake(d.fakeCreateInternetGatewayWithContext)

	case "CreateKeyPairWithContext":
		return m.Fake(d.fakeCreateKeyPairWithContext)

	case "CreateLaunchTemplateVersionWithContext":
		return m.Fake(d.fakeCreateLaunchTemplateVersionWithContext)

	case "CreateLaunchTemplateWithContext":
		return m.Fake(d.fakeCreateLaunchTemplateWithContext)

	case "CreateLocalGatewayRouteTableVpcAssociationWithContext":
		return m.Fake(d.fakeCreateLocalGatewayRouteTableVpcAssociationWithContext)

	case "CreateLocalGatewayRouteWithContext":
		return m.Fake(d.fakeCreateLocalGatewayRouteWithContext)

	case "CreateNatGatewayWithContext":
		return m.Fake(d.fakeCreateNatGatewayWithContext)

	case "CreateNetworkAclEntryWithContext":
		return m.Fake(d.fakeCreateNetworkAclEntryWithContext)

	case "CreateNetworkAclWithContext":
		return m.Fake(d.fakeCreateNetworkAclWithContext)

	case "CreateNetworkInterfacePermissionWithContext":
		return m.Fake(d.fakeCreateNetworkInterfacePermissionWithContext)

	case "CreateNetworkInterfaceWithContext":
		return m.Fake(d.fakeCreateNetworkInterfaceWithContext)

	case "CreatePlacementGroupWithContext":
		return m.Fake(d.fakeCreatePlacementGroupWithContext)

	case "CreateReservedInstancesListingWithContext":
		return m.Fake(d.fakeCreateReservedInstancesListingWithContext)

	case "CreateRouteTableWithContext":
		return m.Fake(d.fakeCreateRouteTableWithContext)

	case "CreateRouteWithContext":
		return m.Fake(d.fakeCreateRouteWithContext)

	case "CreateSecurityGroupWithContext":
		return m.Fake(d.fakeCreateSecurityGroupWithContext)

	case "CreateSnapshotWithContext":
		return m.Fake(d.fakeCreateSnapshotWithContext)

	case "CreateSnapshotsWithContext":
		return m.Fake(d.fakeCreateSnapshotsWithContext)

	case "CreateSpotDatafeedSubscriptionWithContext":
		return m.Fake(d.fakeCreateSpotDatafeedSubscriptionWithContext)

	case "CreateSubnetWithContext":
		return m.Fake(d.fakeCreateSubnetWithContext)

	case "CreateTagsWithContext":
		return m.Fake(d.fakeCreateTagsWithContext)

	case "CreateTrafficMirrorFilterRuleWithContext":
		return m.Fake(d.fakeCreateTrafficMirrorFilterRuleWithContext)

	case "CreateTrafficMirrorFilterWithContext":
		return m.Fake(d.fakeCreateTrafficMirrorFilterWithContext)

	case "CreateTrafficMirrorSessionWithContext":
		return m.Fake(d.fakeCreateTrafficMirrorSessionWithContext)

	case "CreateTrafficMirrorTargetWithContext":
		return m.Fake(d.fakeCreateTrafficMirrorTargetWithContext)

	case "CreateTransitGatewayMulticastDomainWithContext":
		return m.Fake(d.fakeCreateTransitGatewayMulticastDomainWithContext)

	case "CreateTransitGatewayPeeringAttachmentWithContext":
		return m.Fake(d.fakeCreateTransitGatewayPeeringAttachmentWithContext)

	case "CreateTransitGatewayRouteTableWithContext":
		return m.Fake(d.fakeCreateTransitGatewayRouteTableWithContext)

	case "CreateTransitGatewayRouteWithContext":
		return m.Fake(d.fakeCreateTransitGatewayRouteWithContext)

	case "CreateTransitGatewayVpcAttachmentWithContext":
		return m.Fake(d.fakeCreateTransitGatewayVpcAttachmentWithContext)

	case "CreateTransitGatewayWithContext":
		return m.Fake(d.fakeCreateTransitGatewayWithContext)

	case "CreateVolumeWithContext":
		return m.Fake(d.fakeCreateVolumeWithContext)

	case "CreateVpcEndpointConnectionNotificationWithContext":
		return m.Fake(d.fakeCreateVpcEndpointConnectionNotificationWithContext)

	case "CreateVpcEndpointServiceConfigurationWithContext":
		return m.Fake(d.fakeCreateVpcEndpointServiceConfigurationWithContext)

	case "CreateVpcEndpointWithContext":
		return m.Fake(d.fakeCreateVpcEndpointWithContext)

	case "CreateVpcPeeringConnectionWithContext":
		return m.Fake(d.fakeCreateVpcPeeringConnectionWithContext)

	case "CreateVpcWithContext":
		return m.Fake(d.fakeCreateVpcWithContext)

	case "CreateVpnConnectionRouteWithContext":
		return m.Fake(d.fakeCreateVpnConnectionRouteWithContext)

	case "CreateVpnConnectionWithContext":
		return m.Fake(d.fakeCreateVpnConnectionWithContext)

	case "CreateVpnGatewayWithContext":
		return m.Fake(d.fakeCreateVpnGatewayWithContext)

	case "DeleteClientVpnEndpointWithContext":
		return m.Fake(d.fakeDeleteClientVpnEndpointWithContext)

	case "DeleteClientVpnRouteWithContext":
		return m.Fake(d.fakeDeleteClientVpnRouteWithContext)

	case "DeleteCustomerGatewayWithContext":
		return m.Fake(d.fakeDeleteCustomerGatewayWithContext)

	case "DeleteDhcpOptionsWithContext":
		return m.Fake(d.fakeDeleteDhcpOptionsWithContext)

	case "DeleteEgressOnlyInternetGatewayWithContext":
		return m.Fake(d.fakeDeleteEgressOnlyInternetGatewayWithContext)

	case "DeleteFleetsWithContext":
		return m.Fake(d.fakeDeleteFleetsWithContext)

	case "DeleteFlowLogsWithContext":
		return m.Fake(d.fakeDeleteFlowLogsWithContext)

	case "DeleteFpgaImageWithContext":
		return m.Fake(d.fakeDeleteFpgaImageWithContext)

	case "DeleteInternetGatewayWithContext":
		return m.Fake(d.fakeDeleteInternetGatewayWithContext)

	case "DeleteKeyPairWithContext":
		return m.Fake(d.fakeDeleteKeyPairWithContext)

	case "DeleteLaunchTemplateVersionsWithContext":
		return m.Fake(d.fakeDeleteLaunchTemplateVersionsWithContext)

	case "DeleteLaunchTemplateWithContext":
		return m.Fake(d.fakeDeleteLaunchTemplateWithContext)

	case "DeleteLocalGatewayRouteTableVpcAssociationWithContext":
		return m.Fake(d.fakeDeleteLocalGatewayRouteTableVpcAssociationWithContext)

	case "DeleteLocalGatewayRouteWithContext":
		return m.Fake(d.fakeDeleteLocalGatewayRouteWithContext)

	case "DeleteNatGatewayWithContext":
		return m.Fake(d.fakeDeleteNatGatewayWithContext)

	case "DeleteNetworkAclEntryWithContext":
		return m.Fake(d.fakeDeleteNetworkAclEntryWithContext)

	case "DeleteNetworkAclWithContext":
		return m.Fake(d.fakeDeleteNetworkAclWithContext)

	case "DeleteNetworkInterfacePermissionWithContext":
		return m.Fake(d.fakeDeleteNetworkInterfacePermissionWithContext)

	case "DeleteNetworkInterfaceWithContext":
		return m.Fake(d.fakeDeleteNetworkInterfaceWithContext)

	case "DeletePlacementGroupWithContext":
		return m.Fake(d.fakeDeletePlacementGroupWithContext)

	case "DeleteQueuedReservedInstancesWithContext":
		return m.Fake(d.fakeDeleteQueuedReservedInstancesWithContext)

	case "DeleteRouteTableWithContext":
		return m.Fake(d.fakeDeleteRouteTableWithContext)

	case "DeleteRouteWithContext":
		return m.Fake(d.fakeDeleteRouteWithContext)

	case "DeleteSecurityGroupWithContext":
		return m.Fake(d.fakeDeleteSecurityGroupWithContext)

	case "DeleteSnapshotWithContext":
		return m.Fake(d.fakeDeleteSnapshotWithContext)

	case "DeleteSpotDatafeedSubscriptionWithContext":
		return m.Fake(d.fakeDeleteSpotDatafeedSubscriptionWithContext)

	case "DeleteSubnetWithContext":
		return m.Fake(d.fakeDeleteSubnetWithContext)

	case "DeleteTagsWithContext":
		return m.Fake(d.fakeDeleteTagsWithContext)

	case "DeleteTrafficMirrorFilterRuleWithContext":
		return m.Fake(d.fakeDeleteTrafficMirrorFilterRuleWithContext)

	case "DeleteTrafficMirrorFilterWithContext":
		return m.Fake(d.fakeDeleteTrafficMirrorFilterWithContext)

	case "DeleteTrafficMirrorSessionWithContext":
		return m.Fake(d.fakeDeleteTrafficMirrorSessionWithContext)

	case "DeleteTrafficMirrorTargetWithContext":
		return m.Fake(d.fakeDeleteTrafficMirrorTargetWithContext)

	case "DeleteTransitGatewayMulticastDomainWithContext":
		return m.Fake(d.fakeDeleteTransitGatewayMulticastDomainWithContext)

	case "DeleteTransitGatewayPeeringAttachmentWithContext":
		return m.Fake(d.fakeDeleteTransitGatewayPeeringAttachmentWithContext)

	case "DeleteTransitGatewayRouteTableWithContext":
		return m.Fake(d.fakeDeleteTransitGatewayRouteTableWithContext)

	case "DeleteTransitGatewayRouteWithContext":
		return m.Fake(d.fakeDeleteTransitGatewayRouteWithContext)

	case "DeleteTransitGatewayVpcAttachmentWithContext":
		return m.Fake(d.fakeDeleteTransitGatewayVpcAttachmentWithContext)

	case "DeleteTransitGatewayWithContext":
		return m.Fake(d.fakeDeleteTransitGatewayWithContext)

	case "DeleteVolumeWithContext":
		return m.Fake(d.fakeDeleteVolumeWithContext)

	case "DeleteVpcEndpointConnectionNotificationsWithContext":
		return m.Fake(d.fakeDeleteVpcEndpointConnectionNotificationsWithContext)

	case "DeleteVpcEndpointServiceConfigurationsWithContext":
		return m.Fake(d.fakeDeleteVpcEndpointServiceConfigurationsWithContext)

	case "DeleteVpcEndpointsWithContext":
		return m.Fake(d.fakeDeleteVpcEndpointsWithContext)

	case "DeleteVpcPeeringConnectionWithContext":
		return m.Fake(d.fakeDeleteVpcPeeringConnectionWithContext)

	case "DeleteVpcWithContext":
		return m.Fake(d.fakeDeleteVpcWithContext)

	case "DeleteVpnConnectionRouteWithContext":
		return m.Fake(d.fakeDeleteVpnConnectionRouteWithContext)

	case "DeleteVpnConnectionWithContext":
		return m.Fake(d.fakeDeleteVpnConnectionWithContext)

	case "DeleteVpnGatewayWithContext":
		return m.Fake(d.fakeDeleteVpnGatewayWithContext)

	case "DeprovisionByoipCidrWithContext":
		return m.Fake(d.fakeDeprovisionByoipCidrWithContext)

	case "DeregisterImageWithContext":
		return m.Fake(d.fakeDeregisterImageWithContext)

	case "DeregisterTransitGatewayMulticastGroupMembersWithContext":
		return m.Fake(d.fakeDeregisterTransitGatewayMulticastGroupMembersWithContext)

	case "DeregisterTransitGatewayMulticastGroupSourcesWithContext":
		return m.Fake(d.fakeDeregisterTransitGatewayMulticastGroupSourcesWithContext)

	case "DescribeAccountAttributesWithContext":
		return m.Fake(d.fakeDescribeAccountAttributesWithContext)

	case "DescribeAddressesWithContext":
		return m.Fake(d.fakeDescribeAddressesWithContext)

	case "DescribeAggregateIdFormatWithContext":
		return m.Fake(d.fakeDescribeAggregateIdFormatWithContext)

	case "DescribeAvailabilityZonesWithContext":
		return m.Fake(d.fakeDescribeAvailabilityZonesWithContext)

	case "DescribeBundleTasksWithContext":
		return m.Fake(d.fakeDescribeBundleTasksWithContext)

	case "DescribeByoipCidrsPages":
		return m.Fake(d.fakeDescribeByoipCidrsPages)

	case "DescribeByoipCidrsPagesWithContext":
		return m.Fake(d.fakeDescribeByoipCidrsPagesWithContext)

	case "DescribeByoipCidrsWithContext":
		return m.Fake(d.fakeDescribeByoipCidrsWithContext)

	case "DescribeCapacityReservationsPages":
		return m.Fake(d.fakeDescribeCapacityReservationsPages)

	case "DescribeCapacityReservationsPagesWithContext":
		return m.Fake(d.fakeDescribeCapacityReservationsPagesWithContext)

	case "DescribeCapacityReservationsWithContext":
		return m.Fake(d.fakeDescribeCapacityReservationsWithContext)

	case "DescribeClassicLinkInstancesPages":
		return m.Fake(d.fakeDescribeClassicLinkInstancesPages)

	case "DescribeClassicLinkInstancesPagesWithContext":
		return m.Fake(d.fakeDescribeClassicLinkInstancesPagesWithContext)

	case "DescribeClassicLinkInstancesWithContext":
		return m.Fake(d.fakeDescribeClassicLinkInstancesWithContext)

	case "DescribeClientVpnAuthorizationRulesPages":
		return m.Fake(d.fakeDescribeClientVpnAuthorizationRulesPages)

	case "DescribeClientVpnAuthorizationRulesPagesWithContext":
		return m.Fake(d.fakeDescribeClientVpnAuthorizationRulesPagesWithContext)

	case "DescribeClientVpnAuthorizationRulesWithContext":
		return m.Fake(d.fakeDescribeClientVpnAuthorizationRulesWithContext)

	case "DescribeClientVpnConnectionsPages":
		return m.Fake(d.fakeDescribeClientVpnConnectionsPages)

	case "DescribeClientVpnConnectionsPagesWithContext":
		return m.Fake(d.fakeDescribeClientVpnConnectionsPagesWithContext)

	case "DescribeClientVpnConnectionsWithContext":
		return m.Fake(d.fakeDescribeClientVpnConnectionsWithContext)

	case "DescribeClientVpnEndpointsPages":
		return m.Fake(d.fakeDescribeClientVpnEndpointsPages)

	case "DescribeClientVpnEndpointsPagesWithContext":
		return m.Fake(d.fakeDescribeClientVpnEndpointsPagesWithContext)

	case "DescribeClientVpnEndpointsWithContext":
		return m.Fake(d.fakeDescribeClientVpnEndpointsWithContext)

	case "DescribeClientVpnRoutesPages":
		return m.Fake(d.fakeDescribeClientVpnRoutesPages)

	case "DescribeClientVpnRoutesPagesWithContext":
		return m.Fake(d.fakeDescribeClientVpnRoutesPagesWithContext)

	case "DescribeClientVpnRoutesWithContext":
		return m.Fake(d.fakeDescribeClientVpnRoutesWithContext)

	case "DescribeClientVpnTargetNetworksPages":
		return m.Fake(d.fakeDescribeClientVpnTargetNetworksPages)

	case "DescribeClientVpnTargetNetworksPagesWithContext":
		return m.Fake(d.fakeDescribeClientVpnTargetNetworksPagesWithContext)

	case "DescribeClientVpnTargetNetworksWithContext":
		return m.Fake(d.fakeDescribeClientVpnTargetNetworksWithContext)

	case "DescribeCoipPoolsWithContext":
		return m.Fake(d.fakeDescribeCoipPoolsWithContext)

	case "DescribeConversionTasksWithContext":
		return m.Fake(d.fakeDescribeConversionTasksWithContext)

	case "DescribeCustomerGatewaysWithContext":
		return m.Fake(d.fakeDescribeCustomerGatewaysWithContext)

	case "DescribeDhcpOptionsPages":
		return m.Fake(d.fakeDescribeDhcpOptionsPages)

	case "DescribeDhcpOptionsPagesWithContext":
		return m.Fake(d.fakeDescribeDhcpOptionsPagesWithContext)

	case "DescribeDhcpOptionsWithContext":
		return m.Fake(d.fakeDescribeDhcpOptionsWithContext)

	case "DescribeEgressOnlyInternetGatewaysPages":
		return m.Fake(d.fakeDescribeEgressOnlyInternetGatewaysPages)

	case "DescribeEgressOnlyInternetGatewaysPagesWithContext":
		return m.Fake(d.fakeDescribeEgressOnlyInternetGatewaysPagesWithContext)

	case "DescribeEgressOnlyInternetGatewaysWithContext":
		return m.Fake(d.fakeDescribeEgressOnlyInternetGatewaysWithContext)

	case "DescribeElasticGpusWithContext":
		return m.Fake(d.fakeDescribeElasticGpusWithContext)

	case "DescribeExportImageTasksPages":
		return m.Fake(d.fakeDescribeExportImageTasksPages)

	case "DescribeExportImageTasksPagesWithContext":
		return m.Fake(d.fakeDescribeExportImageTasksPagesWithContext)

	case "DescribeExportImageTasksWithContext":
		return m.Fake(d.fakeDescribeExportImageTasksWithContext)

	case "DescribeExportTasksWithContext":
		return m.Fake(d.fakeDescribeExportTasksWithContext)

	case "DescribeFastSnapshotRestoresPages":
		return m.Fake(d.fakeDescribeFastSnapshotRestoresPages)

	case "DescribeFastSnapshotRestoresPagesWithContext":
		return m.Fake(d.fakeDescribeFastSnapshotRestoresPagesWithContext)

	case "DescribeFastSnapshotRestoresWithContext":
		return m.Fake(d.fakeDescribeFastSnapshotRestoresWithContext)

	case "DescribeFleetHistoryWithContext":
		return m.Fake(d.fakeDescribeFleetHistoryWithContext)

	case "DescribeFleetInstancesWithContext":
		return m.Fake(d.fakeDescribeFleetInstancesWithContext)

	case "DescribeFleetsPages":
		return m.Fake(d.fakeDescribeFleetsPages)

	case "DescribeFleetsPagesWithContext":
		return m.Fake(d.fakeDescribeFleetsPagesWithContext)

	case "DescribeFleetsWithContext":
		return m.Fake(d.fakeDescribeFleetsWithContext)

	case "DescribeFlowLogsPages":
		return m.Fake(d.fakeDescribeFlowLogsPages)

	case "DescribeFlowLogsPagesWithContext":
		return m.Fake(d.fakeDescribeFlowLogsPagesWithContext)

	case "DescribeFlowLogsWithContext":
		return m.Fake(d.fakeDescribeFlowLogsWithContext)

	case "DescribeFpgaImageAttributeWithContext":
		return m.Fake(d.fakeDescribeFpgaImageAttributeWithContext)

	case "DescribeFpgaImagesPages":
		return m.Fake(d.fakeDescribeFpgaImagesPages)

	case "DescribeFpgaImagesPagesWithContext":
		return m.Fake(d.fakeDescribeFpgaImagesPagesWithContext)

	case "DescribeFpgaImagesWithContext":
		return m.Fake(d.fakeDescribeFpgaImagesWithContext)

	case "DescribeHostReservationOfferingsPages":
		return m.Fake(d.fakeDescribeHostReservationOfferingsPages)

	case "DescribeHostReservationOfferingsPagesWithContext":
		return m.Fake(d.fakeDescribeHostReservationOfferingsPagesWithContext)

	case "DescribeHostReservationOfferingsWithContext":
		return m.Fake(d.fakeDescribeHostReservationOfferingsWithContext)

	case "DescribeHostReservationsPages":
		return m.Fake(d.fakeDescribeHostReservationsPages)

	case "DescribeHostReservationsPagesWithContext":
		return m.Fake(d.fakeDescribeHostReservationsPagesWithContext)

	case "DescribeHostReservationsWithContext":
		return m.Fake(d.fakeDescribeHostReservationsWithContext)

	case "DescribeHostsPages":
		return m.Fake(d.fakeDescribeHostsPages)

	case "DescribeHostsPagesWithContext":
		return m.Fake(d.fakeDescribeHostsPagesWithContext)

	case "DescribeHostsWithContext":
		return m.Fake(d.fakeDescribeHostsWithContext)

	case "DescribeIamInstanceProfileAssociationsPages":
		return m.Fake(d.fakeDescribeIamInstanceProfileAssociationsPages)

	case "DescribeIamInstanceProfileAssociationsPagesWithContext":
		return m.Fake(d.fakeDescribeIamInstanceProfileAssociationsPagesWithContext)

	case "DescribeIamInstanceProfileAssociationsWithContext":
		return m.Fake(d.fakeDescribeIamInstanceProfileAssociationsWithContext)

	case "DescribeIdFormatWithContext":
		return m.Fake(d.fakeDescribeIdFormatWithContext)

	case "DescribeIdentityIdFormatWithContext":
		return m.Fake(d.fakeDescribeIdentityIdFormatWithContext)

	case "DescribeImageAttributeWithContext":
		return m.Fake(d.fakeDescribeImageAttributeWithContext)

	case "DescribeImagesWithContext":
		return m.Fake(d.fakeDescribeImagesWithContext)

	case "DescribeImportImageTasksPages":
		return m.Fake(d.fakeDescribeImportImageTasksPages)

	case "DescribeImportImageTasksPagesWithContext":
		return m.Fake(d.fakeDescribeImportImageTasksPagesWithContext)

	case "DescribeImportImageTasksWithContext":
		return m.Fake(d.fakeDescribeImportImageTasksWithContext)

	case "DescribeImportSnapshotTasksPages":
		return m.Fake(d.fakeDescribeImportSnapshotTasksPages)

	case "DescribeImportSnapshotTasksPagesWithContext":
		return m.Fake(d.fakeDescribeImportSnapshotTasksPagesWithContext)

	case "DescribeImportSnapshotTasksWithContext":
		return m.Fake(d.fakeDescribeImportSnapshotTasksWithContext)

	case "DescribeInstanceAttributeWithContext":
		return m.Fake(d.fakeDescribeInstanceAttributeWithContext)

	case "DescribeInstanceCreditSpecificationsPages":
		return m.Fake(d.fakeDescribeInstanceCreditSpecificationsPages)

	case "DescribeInstanceCreditSpecificationsPagesWithContext":
		return m.Fake(d.fakeDescribeInstanceCreditSpecificationsPagesWithContext)

	case "DescribeInstanceCreditSpecificationsWithContext":
		return m.Fake(d.fakeDescribeInstanceCreditSpecificationsWithContext)

	case "DescribeInstanceStatusPages":
		return m.Fake(d.fakeDescribeInstanceStatusPages)

	case "DescribeInstanceStatusPagesWithContext":
		return m.Fake(d.fakeDescribeInstanceStatusPagesWithContext)

	case "DescribeInstanceStatusWithContext":
		return m.Fake(d.fakeDescribeInstanceStatusWithContext)

	case "DescribeInstanceTypeOfferingsWithContext":
		return m.Fake(d.fakeDescribeInstanceTypeOfferingsWithContext)

	case "DescribeInstanceTypesWithContext":
		return m.Fake(d.fakeDescribeInstanceTypesWithContext)

	case "DescribeInstancesPages":
		return m.Fake(d.fakeDescribeInstancesPages)

	case "DescribeInstancesPagesWithContext":
		return m.Fake(d.fakeDescribeInstancesPagesWithContext)

	case "DescribeInstancesWithContext":
		return m.Fake(d.fakeDescribeInstancesWithContext)

	case "DescribeInternetGatewaysPages":
		return m.Fake(d.fakeDescribeInternetGatewaysPages)

	case "DescribeInternetGatewaysPagesWithContext":
		return m.Fake(d.fakeDescribeInternetGatewaysPagesWithContext)

	case "DescribeInternetGatewaysWithContext":
		return m.Fake(d.fakeDescribeInternetGatewaysWithContext)

	case "DescribeIpv6PoolsPages":
		return m.Fake(d.fakeDescribeIpv6PoolsPages)

	case "DescribeIpv6PoolsPagesWithContext":
		return m.Fake(d.fakeDescribeIpv6PoolsPagesWithContext)

	case "DescribeIpv6PoolsWithContext":
		return m.Fake(d.fakeDescribeIpv6PoolsWithContext)

	case "DescribeKeyPairsWithContext":
		return m.Fake(d.fakeDescribeKeyPairsWithContext)

	case "DescribeLaunchTemplateVersionsPages":
		return m.Fake(d.fakeDescribeLaunchTemplateVersionsPages)

	case "DescribeLaunchTemplateVersionsPagesWithContext":
		return m.Fake(d.fakeDescribeLaunchTemplateVersionsPagesWithContext)

	case "DescribeLaunchTemplateVersionsWithContext":
		return m.Fake(d.fakeDescribeLaunchTemplateVersionsWithContext)

	case "DescribeLaunchTemplatesPages":
		return m.Fake(d.fakeDescribeLaunchTemplatesPages)

	case "DescribeLaunchTemplatesPagesWithContext":
		return m.Fake(d.fakeDescribeLaunchTemplatesPagesWithContext)

	case "DescribeLaunchTemplatesWithContext":
		return m.Fake(d.fakeDescribeLaunchTemplatesWithContext)

	case "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsWithContext":
		return m.Fake(d.fakeDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsWithContext)

	case "DescribeLocalGatewayRouteTableVpcAssociationsWithContext":
		return m.Fake(d.fakeDescribeLocalGatewayRouteTableVpcAssociationsWithContext)

	case "DescribeLocalGatewayRouteTablesWithContext":
		return m.Fake(d.fakeDescribeLocalGatewayRouteTablesWithContext)

	case "DescribeLocalGatewayVirtualInterfaceGroupsWithContext":
		return m.Fake(d.fakeDescribeLocalGatewayVirtualInterfaceGroupsWithContext)

	case "DescribeLocalGatewayVirtualInterfacesWithContext":
		return m.Fake(d.fakeDescribeLocalGatewayVirtualInterfacesWithContext)

	case "DescribeLocalGatewaysWithContext":
		return m.Fake(d.fakeDescribeLocalGatewaysWithContext)

	case "DescribeMovingAddressesPages":
		return m.Fake(d.fakeDescribeMovingAddressesPages)

	case "DescribeMovingAddressesPagesWithContext":
		return m.Fake(d.fakeDescribeMovingAddressesPagesWithContext)

	case "DescribeMovingAddressesWithContext":
		return m.Fake(d.fakeDescribeMovingAddressesWithContext)

	case "DescribeNatGatewaysPages":
		return m.Fake(d.fakeDescribeNatGatewaysPages)

	case "DescribeNatGatewaysPagesWithContext":
		return m.Fake(d.fakeDescribeNatGatewaysPagesWithContext)

	case "DescribeNatGatewaysWithContext":
		return m.Fake(d.fakeDescribeNatGatewaysWithContext)

	case "DescribeNetworkAclsPages":
		return m.Fake(d.fakeDescribeNetworkAclsPages)

	case "DescribeNetworkAclsPagesWithContext":
		return m.Fake(d.fakeDescribeNetworkAclsPagesWithContext)

	case "DescribeNetworkAclsWithContext":
		return m.Fake(d.fakeDescribeNetworkAclsWithContext)

	case "DescribeNetworkInterfaceAttributeWithContext":
		return m.Fake(d.fakeDescribeNetworkInterfaceAttributeWithContext)

	case "DescribeNetworkInterfacePermissionsPages":
		return m.Fake(d.fakeDescribeNetworkInterfacePermissionsPages)

	case "DescribeNetworkInterfacePermissionsPagesWithContext":
		return m.Fake(d.fakeDescribeNetworkInterfacePermissionsPagesWithContext)

	case "DescribeNetworkInterfacePermissionsWithContext":
		return m.Fake(d.fakeDescribeNetworkInterfacePermissionsWithContext)

	case "DescribeNetworkInterfacesPages":
		return m.Fake(d.fakeDescribeNetworkInterfacesPages)

	case "DescribeNetworkInterfacesPagesWithContext":
		return m.Fake(d.fakeDescribeNetworkInterfacesPagesWithContext)

	case "DescribeNetworkInterfacesWithContext":
		return m.Fake(d.fakeDescribeNetworkInterfacesWithContext)

	case "DescribePlacementGroupsWithContext":
		return m.Fake(d.fakeDescribePlacementGroupsWithContext)

	case "DescribePrefixListsPages":
		return m.Fake(d.fakeDescribePrefixListsPages)

	case "DescribePrefixListsPagesWithContext":
		return m.Fake(d.fakeDescribePrefixListsPagesWithContext)

	case "DescribePrefixListsWithContext":
		return m.Fake(d.fakeDescribePrefixListsWithContext)

	case "DescribePrincipalIdFormatPages":
		return m.Fake(d.fakeDescribePrincipalIdFormatPages)

	case "DescribePrincipalIdFormatPagesWithContext":
		return m.Fake(d.fakeDescribePrincipalIdFormatPagesWithContext)

	case "DescribePrincipalIdFormatWithContext":
		return m.Fake(d.fakeDescribePrincipalIdFormatWithContext)

	case "DescribePublicIpv4PoolsPages":
		return m.Fake(d.fakeDescribePublicIpv4PoolsPages)

	case "DescribePublicIpv4PoolsPagesWithContext":
		return m.Fake(d.fakeDescribePublicIpv4PoolsPagesWithContext)

	case "DescribePublicIpv4PoolsWithContext":
		return m.Fake(d.fakeDescribePublicIpv4PoolsWithContext)

	case "DescribeRegionsWithContext":
		return m.Fake(d.fakeDescribeRegionsWithContext)

	case "DescribeReservedInstancesListingsWithContext":
		return m.Fake(d.fakeDescribeReservedInstancesListingsWithContext)

	case "DescribeReservedInstancesModificationsPages":
		return m.Fake(d.fakeDescribeReservedInstancesModificationsPages)

	case "DescribeReservedInstancesModificationsPagesWithContext":
		return m.Fake(d.fakeDescribeReservedInstancesModificationsPagesWithContext)

	case "DescribeReservedInstancesModificationsWithContext":
		return m.Fake(d.fakeDescribeReservedInstancesModificationsWithContext)

	case "DescribeReservedInstancesOfferingsPages":
		return m.Fake(d.fakeDescribeReservedInstancesOfferingsPages)

	case "DescribeReservedInstancesOfferingsPagesWithContext":
		return m.Fake(d.fakeDescribeReservedInstancesOfferingsPagesWithContext)

	case "DescribeReservedInstancesOfferingsWithContext":
		return m.Fake(d.fakeDescribeReservedInstancesOfferingsWithContext)

	case "DescribeReservedInstancesWithContext":
		return m.Fake(d.fakeDescribeReservedInstancesWithContext)

	case "DescribeRouteTablesPages":
		return m.Fake(d.fakeDescribeRouteTablesPages)

	case "DescribeRouteTablesPagesWithContext":
		return m.Fake(d.fakeDescribeRouteTablesPagesWithContext)

	case "DescribeRouteTablesWithContext":
		return m.Fake(d.fakeDescribeRouteTablesWithContext)

	case "DescribeScheduledInstanceAvailabilityPages":
		return m.Fake(d.fakeDescribeScheduledInstanceAvailabilityPages)

	case "DescribeScheduledInstanceAvailabilityPagesWithContext":
		return m.Fake(d.fakeDescribeScheduledInstanceAvailabilityPagesWithContext)

	case "DescribeScheduledInstanceAvailabilityWithContext":
		return m.Fake(d.fakeDescribeScheduledInstanceAvailabilityWithContext)

	case "DescribeScheduledInstancesPages":
		return m.Fake(d.fakeDescribeScheduledInstancesPages)

	case "DescribeScheduledInstancesPagesWithContext":
		return m.Fake(d.fakeDescribeScheduledInstancesPagesWithContext)

	case "DescribeScheduledInstancesWithContext":
		return m.Fake(d.fakeDescribeScheduledInstancesWithContext)

	case "DescribeSecurityGroupReferencesWithContext":
		return m.Fake(d.fakeDescribeSecurityGroupReferencesWithContext)

	case "DescribeSecurityGroupsPages":
		return m.Fake(d.fakeDescribeSecurityGroupsPages)

	case "DescribeSecurityGroupsPagesWithContext":
		return m.Fake(d.fakeDescribeSecurityGroupsPagesWithContext)

	case "DescribeSecurityGroupsWithContext":
		return m.Fake(d.fakeDescribeSecurityGroupsWithContext)

	case "DescribeSnapshotAttributeWithContext":
		return m.Fake(d.fakeDescribeSnapshotAttributeWithContext)

	case "DescribeSnapshotsPages":
		return m.Fake(d.fakeDescribeSnapshotsPages)

	case "DescribeSnapshotsPagesWithContext":
		return m.Fake(d.fakeDescribeSnapshotsPagesWithContext)

	case "DescribeSnapshotsWithContext":
		return m.Fake(d.fakeDescribeSnapshotsWithContext)

	case "DescribeSpotDatafeedSubscriptionWithContext":
		return m.Fake(d.fakeDescribeSpotDatafeedSubscriptionWithContext)

	case "DescribeSpotFleetInstancesWithContext":
		return m.Fake(d.fakeDescribeSpotFleetInstancesWithContext)

	case "DescribeSpotFleetRequestHistoryWithContext":
		return m.Fake(d.fakeDescribeSpotFleetRequestHistoryWithContext)

	case "DescribeSpotFleetRequestsPages":
		return m.Fake(d.fakeDescribeSpotFleetRequestsPages)

	case "DescribeSpotFleetRequestsPagesWithContext":
		return m.Fake(d.fakeDescribeSpotFleetRequestsPagesWithContext)

	case "DescribeSpotFleetRequestsWithContext":
		return m.Fake(d.fakeDescribeSpotFleetRequestsWithContext)

	case "DescribeSpotInstanceRequestsPages":
		return m.Fake(d.fakeDescribeSpotInstanceRequestsPages)

	case "DescribeSpotInstanceRequestsPagesWithContext":
		return m.Fake(d.fakeDescribeSpotInstanceRequestsPagesWithContext)

	case "DescribeSpotInstanceRequestsWithContext":
		return m.Fake(d.fakeDescribeSpotInstanceRequestsWithContext)

	case "DescribeSpotPriceHistoryPages":
		return m.Fake(d.fakeDescribeSpotPriceHistoryPages)

	case "DescribeSpotPriceHistoryPagesWithContext":
		return m.Fake(d.fakeDescribeSpotPriceHistoryPagesWithContext)

	case "DescribeSpotPriceHistoryWithContext":
		return m.Fake(d.fakeDescribeSpotPriceHistoryWithContext)

	case "DescribeStaleSecurityGroupsPages":
		return m.Fake(d.fakeDescribeStaleSecurityGroupsPages)

	case "DescribeStaleSecurityGroupsPagesWithContext":
		return m.Fake(d.fakeDescribeStaleSecurityGroupsPagesWithContext)

	case "DescribeStaleSecurityGroupsWithContext":
		return m.Fake(d.fakeDescribeStaleSecurityGroupsWithContext)

	case "DescribeSubnetsPages":
		return m.Fake(d.fakeDescribeSubnetsPages)

	case "DescribeSubnetsPagesWithContext":
		return m.Fake(d.fakeDescribeSubnetsPagesWithContext)

	case "DescribeSubnetsWithContext":
		return m.Fake(d.fakeDescribeSubnetsWithContext)

	case "DescribeTagsPages":
		return m.Fake(d.fakeDescribeTagsPages)

	case "DescribeTagsPagesWithContext":
		return m.Fake(d.fakeDescribeTagsPagesWithContext)

	case "DescribeTagsWithContext":
		return m.Fake(d.fakeDescribeTagsWithContext)

	case "DescribeTrafficMirrorFiltersPages":
		return m.Fake(d.fakeDescribeTrafficMirrorFiltersPages)

	case "DescribeTrafficMirrorFiltersPagesWithContext":
		return m.Fake(d.fakeDescribeTrafficMirrorFiltersPagesWithContext)

	case "DescribeTrafficMirrorFiltersWithContext":
		return m.Fake(d.fakeDescribeTrafficMirrorFiltersWithContext)

	case "DescribeTrafficMirrorSessionsPages":
		return m.Fake(d.fakeDescribeTrafficMirrorSessionsPages)

	case "DescribeTrafficMirrorSessionsPagesWithContext":
		return m.Fake(d.fakeDescribeTrafficMirrorSessionsPagesWithContext)

	case "DescribeTrafficMirrorSessionsWithContext":
		return m.Fake(d.fakeDescribeTrafficMirrorSessionsWithContext)

	case "DescribeTrafficMirrorTargetsPages":
		return m.Fake(d.fakeDescribeTrafficMirrorTargetsPages)

	case "DescribeTrafficMirrorTargetsPagesWithContext":
		return m.Fake(d.fakeDescribeTrafficMirrorTargetsPagesWithContext)

	case "DescribeTrafficMirrorTargetsWithContext":
		return m.Fake(d.fakeDescribeTrafficMirrorTargetsWithContext)

	case "DescribeTransitGatewayAttachmentsPages":
		return m.Fake(d.fakeDescribeTransitGatewayAttachmentsPages)

	case "DescribeTransitGatewayAttachmentsPagesWithContext":
		return m.Fake(d.fakeDescribeTransitGatewayAttachmentsPagesWithContext)

	case "DescribeTransitGatewayAttachmentsWithContext":
		return m.Fake(d.fakeDescribeTransitGatewayAttachmentsWithContext)

	case "DescribeTransitGatewayMulticastDomainsWithContext":
		return m.Fake(d.fakeDescribeTransitGatewayMulticastDomainsWithContext)

	case "DescribeTransitGatewayPeeringAttachmentsWithContext":
		return m.Fake(d.fakeDescribeTransitGatewayPeeringAttachmentsWithContext)

	case "DescribeTransitGatewayRouteTablesPages":
		return m.Fake(d.fakeDescribeTransitGatewayRouteTablesPages)

	case "DescribeTransitGatewayRouteTablesPagesWithContext":
		return m.Fake(d.fakeDescribeTransitGatewayRouteTablesPagesWithContext)

	case "DescribeTransitGatewayRouteTablesWithContext":
		return m.Fake(d.fakeDescribeTransitGatewayRouteTablesWithContext)

	case "DescribeTransitGatewayVpcAttachmentsPages":
		return m.Fake(d.fakeDescribeTransitGatewayVpcAttachmentsPages)

	case "DescribeTransitGatewayVpcAttachmentsPagesWithContext":
		return m.Fake(d.fakeDescribeTransitGatewayVpcAttachmentsPagesWithContext)

	case "DescribeTransitGatewayVpcAttachmentsWithContext":
		return m.Fake(d.fakeDescribeTransitGatewayVpcAttachmentsWithContext)

	case "DescribeTransitGatewaysPages":
		return m.Fake(d.fakeDescribeTransitGatewaysPages)

	case "DescribeTransitGatewaysPagesWithContext":
		return m.Fake(d.fakeDescribeTransitGatewaysPagesWithContext)

	case "DescribeTransitGatewaysWithContext":
		return m.Fake(d.fakeDescribeTransitGatewaysWithContext)

	case "DescribeVolumeAttributeWithContext":
		return m.Fake(d.fakeDescribeVolumeAttributeWithContext)

	case "DescribeVolumeStatusPages":
		return m.Fake(d.fakeDescribeVolumeStatusPages)

	case "DescribeVolumeStatusPagesWithContext":
		return m.Fake(d.fakeDescribeVolumeStatusPagesWithContext)

	case "DescribeVolumeStatusWithContext":
		return m.Fake(d.fakeDescribeVolumeStatusWithContext)

	case "DescribeVolumesModificationsPages":
		return m.Fake(d.fakeDescribeVolumesModificationsPages)

	case "DescribeVolumesModificationsPagesWithContext":
		return m.Fake(d.fakeDescribeVolumesModificationsPagesWithContext)

	case "DescribeVolumesModificationsWithContext":
		return m.Fake(d.fakeDescribeVolumesModificationsWithContext)

	case "DescribeVolumesPages":
		return m.Fake(d.fakeDescribeVolumesPages)

	case "DescribeVolumesPagesWithContext":
		return m.Fake(d.fakeDescribeVolumesPagesWithContext)

	case "DescribeVolumesWithContext":
		return m.Fake(d.fakeDescribeVolumesWithContext)

	case "DescribeVpcAttributeWithContext":
		return m.Fake(d.fakeDescribeVpcAttributeWithContext)

	case "DescribeVpcClassicLinkDnsSupportPages":
		return m.Fake(d.fakeDescribeVpcClassicLinkDnsSupportPages)

	case "DescribeVpcClassicLinkDnsSupportPagesWithContext":
		return m.Fake(d.fakeDescribeVpcClassicLinkDnsSupportPagesWithContext)

	case "DescribeVpcClassicLinkDnsSupportWithContext":
		return m.Fake(d.fakeDescribeVpcClassicLinkDnsSupportWithContext)

	case "DescribeVpcClassicLinkWithContext":
		return m.Fake(d.fakeDescribeVpcClassicLinkWithContext)

	case "DescribeVpcEndpointConnectionNotificationsPages":
		return m.Fake(d.fakeDescribeVpcEndpointConnectionNotificationsPages)

	case "DescribeVpcEndpointConnectionNotificationsPagesWithContext":
		return m.Fake(d.fakeDescribeVpcEndpointConnectionNotificationsPagesWithContext)

	case "DescribeVpcEndpointConnectionNotificationsWithContext":
		return m.Fake(d.fakeDescribeVpcEndpointConnectionNotificationsWithContext)

	case "DescribeVpcEndpointConnectionsPages":
		return m.Fake(d.fakeDescribeVpcEndpointConnectionsPages)

	case "DescribeVpcEndpointConnectionsPagesWithContext":
		return m.Fake(d.fakeDescribeVpcEndpointConnectionsPagesWithContext)

	case "DescribeVpcEndpointConnectionsWithContext":
		return m.Fake(d.fakeDescribeVpcEndpointConnectionsWithContext)

	case "DescribeVpcEndpointServiceConfigurationsPages":
		return m.Fake(d.fakeDescribeVpcEndpointServiceConfigurationsPages)

	case "DescribeVpcEndpointServiceConfigurationsPagesWithContext":
		return m.Fake(d.fakeDescribeVpcEndpointServiceConfigurationsPagesWithContext)

	case "DescribeVpcEndpointServiceConfigurationsWithContext":
		return m.Fake(d.fakeDescribeVpcEndpointServiceConfigurationsWithContext)

	case "DescribeVpcEndpointServicePermissionsPages":
		return m.Fake(d.fakeDescribeVpcEndpointServicePermissionsPages)

	case "DescribeVpcEndpointServicePermissionsPagesWithContext":
		return m.Fake(d.fakeDescribeVpcEndpointServicePermissionsPagesWithContext)

	case "DescribeVpcEndpointServicePermissionsWithContext":
		return m.Fake(d.fakeDescribeVpcEndpointServicePermissionsWithContext)

	case "DescribeVpcEndpointServicesWithContext":
		return m.Fake(d.fakeDescribeVpcEndpointServicesWithContext)

	case "DescribeVpcEndpointsPages":
		return m.Fake(d.fakeDescribeVpcEndpointsPages)

	case "DescribeVpcEndpointsPagesWithContext":
		return m.Fake(d.fakeDescribeVpcEndpointsPagesWithContext)

	case "DescribeVpcEndpointsWithContext":
		return m.Fake(d.fakeDescribeVpcEndpointsWithContext)

	case "DescribeVpcPeeringConnectionsPages":
		return m.Fake(d.fakeDescribeVpcPeeringConnectionsPages)

	case "DescribeVpcPeeringConnectionsPagesWithContext":
		return m.Fake(d.fakeDescribeVpcPeeringConnectionsPagesWithContext)

	case "DescribeVpcPeeringConnectionsWithContext":
		return m.Fake(d.fakeDescribeVpcPeeringConnectionsWithContext)

	case "DescribeVpcsPages":
		return m.Fake(d.fakeDescribeVpcsPages)

	case "DescribeVpcsPagesWithContext":
		return m.Fake(d.fakeDescribeVpcsPagesWithContext)

	case "DescribeVpcsWithContext":
		return m.Fake(d.fakeDescribeVpcsWithContext)

	case "DescribeVpnConnectionsWithContext":
		return m.Fake(d.fakeDescribeVpnConnectionsWithContext)

	case "DescribeVpnGatewaysWithContext":
		return m.Fake(d.fakeDescribeVpnGatewaysWithContext)

	case "DetachClassicLinkVpcWithContext":
		return m.Fake(d.fakeDetachClassicLinkVpcWithContext)

	case "DetachInternetGatewayWithContext":
		return m.Fake(d.fakeDetachInternetGatewayWithContext)

	case "DetachNetworkInterfaceWithContext":
		return m.Fake(d.fakeDetachNetworkInterfaceWithContext)

	case "DetachVolumeWithContext":
		return m.Fake(d.fakeDetachVolumeWithContext)

	case "DetachVpnGatewayWithContext":
		return m.Fake(d.fakeDetachVpnGatewayWithContext)

	case "DisableEbsEncryptionByDefaultWithContext":
		return m.Fake(d.fakeDisableEbsEncryptionByDefaultWithContext)

	case "DisableFastSnapshotRestoresWithContext":
		return m.Fake(d.fakeDisableFastSnapshotRestoresWithContext)

	case "DisableTransitGatewayRouteTablePropagationWithContext":
		return m.Fake(d.fakeDisableTransitGatewayRouteTablePropagationWithContext)

	case "DisableVgwRoutePropagationWithContext":
		return m.Fake(d.fakeDisableVgwRoutePropagationWithContext)

	case "DisableVpcClassicLinkDnsSupportWithContext":
		return m.Fake(d.fakeDisableVpcClassicLinkDnsSupportWithContext)

	case "DisableVpcClassicLinkWithContext":
		return m.Fake(d.fakeDisableVpcClassicLinkWithContext)

	case "DisassociateAddressWithContext":
		return m.Fake(d.fakeDisassociateAddressWithContext)

	case "DisassociateClientVpnTargetNetworkWithContext":
		return m.Fake(d.fakeDisassociateClientVpnTargetNetworkWithContext)

	case "DisassociateIamInstanceProfileWithContext":
		return m.Fake(d.fakeDisassociateIamInstanceProfileWithContext)

	case "DisassociateRouteTableWithContext":
		return m.Fake(d.fakeDisassociateRouteTableWithContext)

	case "DisassociateSubnetCidrBlockWithContext":
		return m.Fake(d.fakeDisassociateSubnetCidrBlockWithContext)

	case "DisassociateTransitGatewayMulticastDomainWithContext":
		return m.Fake(d.fakeDisassociateTransitGatewayMulticastDomainWithContext)

	case "DisassociateTransitGatewayRouteTableWithContext":
		return m.Fake(d.fakeDisassociateTransitGatewayRouteTableWithContext)

	case "DisassociateVpcCidrBlockWithContext":
		return m.Fake(d.fakeDisassociateVpcCidrBlockWithContext)

	case "EnableEbsEncryptionByDefaultWithContext":
		return m.Fake(d.fakeEnableEbsEncryptionByDefaultWithContext)

	case "EnableFastSnapshotRestoresWithContext":
		return m.Fake(d.fakeEnableFastSnapshotRestoresWithContext)

	case "EnableTransitGatewayRouteTablePropagationWithContext":
		return m.Fake(d.fakeEnableTransitGatewayRouteTablePropagationWithContext)

	case "EnableVgwRoutePropagationWithContext":
		return m.Fake(d.fakeEnableVgwRoutePropagationWithContext)

	case "EnableVolumeIOWithContext":
		return m.Fake(d.fakeEnableVolumeIOWithContext)

	case "EnableVpcClassicLinkDnsSupportWithContext":
		return m.Fake(d.fakeEnableVpcClassicLinkDnsSupportWithContext)

	case "EnableVpcClassicLinkWithContext":
		return m.Fake(d.fakeEnableVpcClassicLinkWithContext)

	case "ExportClientVpnClientCertificateRevocationListWithContext":
		return m.Fake(d.fakeExportClientVpnClientCertificateRevocationListWithContext)

	case "ExportClientVpnClientConfigurationWithContext":
		return m.Fake(d.fakeExportClientVpnClientConfigurationWithContext)

	case "ExportImageWithContext":
		return m.Fake(d.fakeExportImageWithContext)

	case "ExportTransitGatewayRoutesWithContext":
		return m.Fake(d.fakeExportTransitGatewayRoutesWithContext)

	case "GetAssociatedIpv6PoolCidrsPages":
		return m.Fake(d.fakeGetAssociatedIpv6PoolCidrsPages)

	case "GetAssociatedIpv6PoolCidrsPagesWithContext":
		return m.Fake(d.fakeGetAssociatedIpv6PoolCidrsPagesWithContext)

	case "GetAssociatedIpv6PoolCidrsWithContext":
		return m.Fake(d.fakeGetAssociatedIpv6PoolCidrsWithContext)

	case "GetCapacityReservationUsageWithContext":
		return m.Fake(d.fakeGetCapacityReservationUsageWithContext)

	case "GetCoipPoolUsageWithContext":
		return m.Fake(d.fakeGetCoipPoolUsageWithContext)

	case "GetConsoleOutputWithContext":
		return m.Fake(d.fakeGetConsoleOutputWithContext)

	case "GetConsoleScreenshotWithContext":
		return m.Fake(d.fakeGetConsoleScreenshotWithContext)

	case "GetDefaultCreditSpecificationWithContext":
		return m.Fake(d.fakeGetDefaultCreditSpecificationWithContext)

	case "GetEbsDefaultKmsKeyIdWithContext":
		return m.Fake(d.fakeGetEbsDefaultKmsKeyIdWithContext)

	case "GetEbsEncryptionByDefaultWithContext":
		return m.Fake(d.fakeGetEbsEncryptionByDefaultWithContext)

	case "GetHostReservationPurchasePreviewWithContext":
		return m.Fake(d.fakeGetHostReservationPurchasePreviewWithContext)

	case "GetLaunchTemplateDataWithContext":
		return m.Fake(d.fakeGetLaunchTemplateDataWithContext)

	case "GetPasswordDataWithContext":
		return m.Fake(d.fakeGetPasswordDataWithContext)

	case "GetReservedInstancesExchangeQuoteWithContext":
		return m.Fake(d.fakeGetReservedInstancesExchangeQuoteWithContext)

	case "GetTransitGatewayAttachmentPropagationsPages":
		return m.Fake(d.fakeGetTransitGatewayAttachmentPropagationsPages)

	case "GetTransitGatewayAttachmentPropagationsPagesWithContext":
		return m.Fake(d.fakeGetTransitGatewayAttachmentPropagationsPagesWithContext)

	case "GetTransitGatewayAttachmentPropagationsWithContext":
		return m.Fake(d.fakeGetTransitGatewayAttachmentPropagationsWithContext)

	case "GetTransitGatewayMulticastDomainAssociationsWithContext":
		return m.Fake(d.fakeGetTransitGatewayMulticastDomainAssociationsWithContext)

	case "GetTransitGatewayRouteTableAssociationsPages":
		return m.Fake(d.fakeGetTransitGatewayRouteTableAssociationsPages)

	case "GetTransitGatewayRouteTableAssociationsPagesWithContext":
		return m.Fake(d.fakeGetTransitGatewayRouteTableAssociationsPagesWithContext)

	case "GetTransitGatewayRouteTableAssociationsWithContext":
		return m.Fake(d.fakeGetTransitGatewayRouteTableAssociationsWithContext)

	case "GetTransitGatewayRouteTablePropagationsPages":
		return m.Fake(d.fakeGetTransitGatewayRouteTablePropagationsPages)

	case "GetTransitGatewayRouteTablePropagationsPagesWithContext":
		return m.Fake(d.fakeGetTransitGatewayRouteTablePropagationsPagesWithContext)

	case "GetTransitGatewayRouteTablePropagationsWithContext":
		return m.Fake(d.fakeGetTransitGatewayRouteTablePropagationsWithContext)

	case "ImportClientVpnClientCertificateRevocationListWithContext":
		return m.Fake(d.fakeImportClientVpnClientCertificateRevocationListWithContext)

	case "ImportImageWithContext":
		return m.Fake(d.fakeImportImageWithContext)

	case "ImportInstanceWithContext":
		return m.Fake(d.fakeImportInstanceWithContext)

	case "ImportKeyPairWithContext":
		return m.Fake(d.fakeImportKeyPairWithContext)

	case "ImportSnapshotWithContext":
		return m.Fake(d.fakeImportSnapshotWithContext)

	case "ImportVolumeWithContext":
		return m.Fake(d.fakeImportVolumeWithContext)

	case "ModifyCapacityReservationWithContext":
		return m.Fake(d.fakeModifyCapacityReservationWithContext)

	case "ModifyClientVpnEndpointWithContext":
		return m.Fake(d.fakeModifyClientVpnEndpointWithContext)

	case "ModifyDefaultCreditSpecificationWithContext":
		return m.Fake(d.fakeModifyDefaultCreditSpecificationWithContext)

	case "ModifyEbsDefaultKmsKeyIdWithContext":
		return m.Fake(d.fakeModifyEbsDefaultKmsKeyIdWithContext)

	case "ModifyFleetWithContext":
		return m.Fake(d.fakeModifyFleetWithContext)

	case "ModifyFpgaImageAttributeWithContext":
		return m.Fake(d.fakeModifyFpgaImageAttributeWithContext)

	case "ModifyHostsWithContext":
		return m.Fake(d.fakeModifyHostsWithContext)

	case "ModifyIdFormatWithContext":
		return m.Fake(d.fakeModifyIdFormatWithContext)

	case "ModifyIdentityIdFormatWithContext":
		return m.Fake(d.fakeModifyIdentityIdFormatWithContext)

	case "ModifyImageAttributeWithContext":
		return m.Fake(d.fakeModifyImageAttributeWithContext)

	case "ModifyInstanceAttributeWithContext":
		return m.Fake(d.fakeModifyInstanceAttributeWithContext)

	case "ModifyInstanceCapacityReservationAttributesWithContext":
		return m.Fake(d.fakeModifyInstanceCapacityReservationAttributesWithContext)

	case "ModifyInstanceCreditSpecificationWithContext":
		return m.Fake(d.fakeModifyInstanceCreditSpecificationWithContext)

	case "ModifyInstanceEventStartTimeWithContext":
		return m.Fake(d.fakeModifyInstanceEventStartTimeWithContext)

	case "ModifyInstanceMetadataOptionsWithContext":
		return m.Fake(d.fakeModifyInstanceMetadataOptionsWithContext)

	case "ModifyInstancePlacementWithContext":
		return m.Fake(d.fakeModifyInstancePlacementWithContext)

	case "ModifyLaunchTemplateWithContext":
		return m.Fake(d.fakeModifyLaunchTemplateWithContext)

	case "ModifyNetworkInterfaceAttributeWithContext":
		return m.Fake(d.fakeModifyNetworkInterfaceAttributeWithContext)

	case "ModifyReservedInstancesWithContext":
		return m.Fake(d.fakeModifyReservedInstancesWithContext)

	case "ModifySnapshotAttributeWithContext":
		return m.Fake(d.fakeModifySnapshotAttributeWithContext)

	case "ModifySpotFleetRequestWithContext":
		return m.Fake(d.fakeModifySpotFleetRequestWithContext)

	case "ModifySubnetAttributeWithContext":
		return m.Fake(d.fakeModifySubnetAttributeWithContext)

	case "ModifyTrafficMirrorFilterNetworkServicesWithContext":
		return m.Fake(d.fakeModifyTrafficMirrorFilterNetworkServicesWithContext)

	case "ModifyTrafficMirrorFilterRuleWithContext":
		return m.Fake(d.fakeModifyTrafficMirrorFilterRuleWithContext)

	case "ModifyTrafficMirrorSessionWithContext":
		return m.Fake(d.fakeModifyTrafficMirrorSessionWithContext)

	case "ModifyTransitGatewayVpcAttachmentWithContext":
		return m.Fake(d.fakeModifyTransitGatewayVpcAttachmentWithContext)

	case "ModifyVolumeAttributeWithContext":
		return m.Fake(d.fakeModifyVolumeAttributeWithContext)

	case "ModifyVolumeWithContext":
		return m.Fake(d.fakeModifyVolumeWithContext)

	case "ModifyVpcAttributeWithContext":
		return m.Fake(d.fakeModifyVpcAttributeWithContext)

	case "ModifyVpcEndpointConnectionNotificationWithContext":
		return m.Fake(d.fakeModifyVpcEndpointConnectionNotificationWithContext)

	case "ModifyVpcEndpointServiceConfigurationWithContext":
		return m.Fake(d.fakeModifyVpcEndpointServiceConfigurationWithContext)

	case "ModifyVpcEndpointServicePermissionsWithContext":
		return m.Fake(d.fakeModifyVpcEndpointServicePermissionsWithContext)

	case "ModifyVpcEndpointWithContext":
		return m.Fake(d.fakeModifyVpcEndpointWithContext)

	case "ModifyVpcPeeringConnectionOptionsWithContext":
		return m.Fake(d.fakeModifyVpcPeeringConnectionOptionsWithContext)

	case "ModifyVpcTenancyWithContext":
		return m.Fake(d.fakeModifyVpcTenancyWithContext)

	case "ModifyVpnConnectionWithContext":
		return m.Fake(d.fakeModifyVpnConnectionWithContext)

	case "ModifyVpnTunnelCertificateWithContext":
		return m.Fake(d.fakeModifyVpnTunnelCertificateWithContext)

	case "ModifyVpnTunnelOptionsWithContext":
		return m.Fake(d.fakeModifyVpnTunnelOptionsWithContext)

	case "MonitorInstancesWithContext":
		return m.Fake(d.fakeMonitorInstancesWithContext)

	case "MoveAddressToVpcWithContext":
		return m.Fake(d.fakeMoveAddressToVpcWithContext)

	case "ProvisionByoipCidrWithContext":
		return m.Fake(d.fakeProvisionByoipCidrWithContext)

	case "PurchaseHostReservationWithContext":
		return m.Fake(d.fakePurchaseHostReservationWithContext)

	case "PurchaseReservedInstancesOfferingWithContext":
		return m.Fake(d.fakePurchaseReservedInstancesOfferingWithContext)

	case "PurchaseScheduledInstancesWithContext":
		return m.Fake(d.fakePurchaseScheduledInstancesWithContext)

	case "RebootInstancesWithContext":
		return m.Fake(d.fakeRebootInstancesWithContext)

	case "RegisterImageWithContext":
		return m.Fake(d.fakeRegisterImageWithContext)

	case "RegisterTransitGatewayMulticastGroupMembersWithContext":
		return m.Fake(d.fakeRegisterTransitGatewayMulticastGroupMembersWithContext)

	case "RegisterTransitGatewayMulticastGroupSourcesWithContext":
		return m.Fake(d.fakeRegisterTransitGatewayMulticastGroupSourcesWithContext)

	case "RejectTransitGatewayPeeringAttachmentWithContext":
		return m.Fake(d.fakeRejectTransitGatewayPeeringAttachmentWithContext)

	case "RejectTransitGatewayVpcAttachmentWithContext":
		return m.Fake(d.fakeRejectTransitGatewayVpcAttachmentWithContext)

	case "RejectVpcEndpointConnectionsWithContext":
		return m.Fake(d.fakeRejectVpcEndpointConnectionsWithContext)

	case "RejectVpcPeeringConnectionWithContext":
		return m.Fake(d.fakeRejectVpcPeeringConnectionWithContext)

	case "ReleaseAddressWithContext":
		return m.Fake(d.fakeReleaseAddressWithContext)

	case "ReleaseHostsWithContext":
		return m.Fake(d.fakeReleaseHostsWithContext)

	case "ReplaceIamInstanceProfileAssociationWithContext":
		return m.Fake(d.fakeReplaceIamInstanceProfileAssociationWithContext)

	case "ReplaceNetworkAclAssociationWithContext":
		return m.Fake(d.fakeReplaceNetworkAclAssociationWithContext)

	case "ReplaceNetworkAclEntryWithContext":
		return m.Fake(d.fakeReplaceNetworkAclEntryWithContext)

	case "ReplaceRouteTableAssociationWithContext":
		return m.Fake(d.fakeReplaceRouteTableAssociationWithContext)

	case "ReplaceRouteWithContext":
		return m.Fake(d.fakeReplaceRouteWithContext)

	case "ReplaceTransitGatewayRouteWithContext":
		return m.Fake(d.fakeReplaceTransitGatewayRouteWithContext)

	case "ReportInstanceStatusWithContext":
		return m.Fake(d.fakeReportInstanceStatusWithContext)

	case "RequestSpotFleetWithContext":
		return m.Fake(d.fakeRequestSpotFleetWithContext)

	case "RequestSpotInstancesWithContext":
		return m.Fake(d.fakeRequestSpotInstancesWithContext)

	case "ResetEbsDefaultKmsKeyIdWithContext":
		return m.Fake(d.fakeResetEbsDefaultKmsKeyIdWithContext)

	case "ResetFpgaImageAttributeWithContext":
		return m.Fake(d.fakeResetFpgaImageAttributeWithContext)

	case "ResetImageAttributeWithContext":
		return m.Fake(d.fakeResetImageAttributeWithContext)

	case "ResetInstanceAttributeWithContext":
		return m.Fake(d.fakeResetInstanceAttributeWithContext)

	case "ResetNetworkInterfaceAttributeWithContext":
		return m.Fake(d.fakeResetNetworkInterfaceAttributeWithContext)

	case "ResetSnapshotAttributeWithContext":
		return m.Fake(d.fakeResetSnapshotAttributeWithContext)

	case "RestoreAddressToClassicWithContext":
		return m.Fake(d.fakeRestoreAddressToClassicWithContext)

	case "RevokeClientVpnIngressWithContext":
		return m.Fake(d.fakeRevokeClientVpnIngressWithContext)

	case "RevokeSecurityGroupEgressWithContext":
		return m.Fake(d.fakeRevokeSecurityGroupEgressWithContext)

	case "RevokeSecurityGroupIngressWithContext":
		return m.Fake(d.fakeRevokeSecurityGroupIngressWithContext)

	case "RunInstancesWithContext":
		return m.Fake(d.fakeRunInstancesWithContext)

	case "RunScheduledInstancesWithContext":
		return m.Fake(d.fakeRunScheduledInstancesWithContext)

	case "SearchLocalGatewayRoutesWithContext":
		return m.Fake(d.fakeSearchLocalGatewayRoutesWithContext)

	case "SearchTransitGatewayMulticastGroupsWithContext":
		return m.Fake(d.fakeSearchTransitGatewayMulticastGroupsWithContext)

	case "SearchTransitGatewayRoutesWithContext":
		return m.Fake(d.fakeSearchTransitGatewayRoutesWithContext)

	case "SendDiagnosticInterruptWithContext":
		return m.Fake(d.fakeSendDiagnosticInterruptWithContext)

	case "StartInstancesWithContext":
		return m.Fake(d.fakeStartInstancesWithContext)

	case "StartVpcEndpointServicePrivateDnsVerificationWithContext":
		return m.Fake(d.fakeStartVpcEndpointServicePrivateDnsVerificationWithContext)

	case "StopInstancesWithContext":
		return m.Fake(d.fakeStopInstancesWithContext)

	case "TerminateClientVpnConnectionsWithContext":
		return m.Fake(d.fakeTerminateClientVpnConnectionsWithContext)

	case "TerminateInstancesWithContext":
		return m.Fake(d.fakeTerminateInstancesWithContext)

	case "UnassignIpv6AddressesWithContext":
		return m.Fake(d.fakeUnassignIpv6AddressesWithContext)

	case "UnassignPrivateIpAddressesWithContext":
		return m.Fake(d.fakeUnassignPrivateIpAddressesWithContext)

	case "UnmonitorInstancesWithContext":
		return m.Fake(d.fakeUnmonitorInstancesWithContext)

	case "UpdateSecurityGroupRuleDescriptionsEgressWithContext":
		return m.Fake(d.fakeUpdateSecurityGroupRuleDescriptionsEgressWithContext)

	case "UpdateSecurityGroupRuleDescriptionsIngressWithContext":
		return m.Fake(d.fakeUpdateSecurityGroupRuleDescriptionsIngressWithContext)

	case "WaitUntilBundleTaskComplete":
		return m.Fake(d.fakeWaitUntilBundleTaskComplete)

	case "WaitUntilBundleTaskCompleteWithContext":
		return m.Fake(d.fakeWaitUntilBundleTaskCompleteWithContext)

	case "WaitUntilConversionTaskCancelled":
		return m.Fake(d.fakeWaitUntilConversionTaskCancelled)

	case "WaitUntilConversionTaskCancelledWithContext":
		return m.Fake(d.fakeWaitUntilConversionTaskCancelledWithContext)

	case "WaitUntilConversionTaskCompleted":
		return m.Fake(d.fakeWaitUntilConversionTaskCompleted)

	case "WaitUntilConversionTaskCompletedWithContext":
		return m.Fake(d.fakeWaitUntilConversionTaskCompletedWithContext)

	case "WaitUntilConversionTaskDeleted":
		return m.Fake(d.fakeWaitUntilConversionTaskDeleted)

	case "WaitUntilConversionTaskDeletedWithContext":
		return m.Fake(d.fakeWaitUntilConversionTaskDeletedWithContext)

	case "WaitUntilCustomerGatewayAvailable":
		return m.Fake(d.fakeWaitUntilCustomerGatewayAvailable)

	case "WaitUntilCustomerGatewayAvailableWithContext":
		return m.Fake(d.fakeWaitUntilCustomerGatewayAvailableWithContext)

	case "WaitUntilExportTaskCancelled":
		return m.Fake(d.fakeWaitUntilExportTaskCancelled)

	case "WaitUntilExportTaskCancelledWithContext":
		return m.Fake(d.fakeWaitUntilExportTaskCancelledWithContext)

	case "WaitUntilExportTaskCompleted":
		return m.Fake(d.fakeWaitUntilExportTaskCompleted)

	case "WaitUntilExportTaskCompletedWithContext":
		return m.Fake(d.fakeWaitUntilExportTaskCompletedWithContext)

	case "WaitUntilImageAvailable":
		return m.Fake(d.fakeWaitUntilImageAvailable)

	case "WaitUntilImageAvailableWithContext":
		return m.Fake(d.fakeWaitUntilImageAvailableWithContext)

	case "WaitUntilImageExists":
		return m.Fake(d.fakeWaitUntilImageExists)

	case "WaitUntilImageExistsWithContext":
		return m.Fake(d.fakeWaitUntilImageExistsWithContext)

	case "WaitUntilInstanceExists":
		return m.Fake(d.fakeWaitUntilInstanceExists)

	case "WaitUntilInstanceExistsWithContext":
		return m.Fake(d.fakeWaitUntilInstanceExistsWithContext)

	case "WaitUntilInstanceRunning":
		return m.Fake(d.fakeWaitUntilInstanceRunning)

	case "WaitUntilInstanceRunningWithContext":
		return m.Fake(d.fakeWaitUntilInstanceRunningWithContext)

	case "WaitUntilInstanceStatusOk":
		return m.Fake(d.fakeWaitUntilInstanceStatusOk)

	case "WaitUntilInstanceStatusOkWithContext":
		return m.Fake(d.fakeWaitUntilInstanceStatusOkWithContext)

	case "WaitUntilInstanceStopped":
		return m.Fake(d.fakeWaitUntilInstanceStopped)

	case "WaitUntilInstanceStoppedWithContext":
		return m.Fake(d.fakeWaitUntilInstanceStoppedWithContext)

	case "WaitUntilInstanceTerminated":
		return m.Fake(d.fakeWaitUntilInstanceTerminated)

	case "WaitUntilInstanceTerminatedWithContext":
		return m.Fake(d.fakeWaitUntilInstanceTerminatedWithContext)

	case "WaitUntilKeyPairExists":
		return m.Fake(d.fakeWaitUntilKeyPairExists)

	case "WaitUntilKeyPairExistsWithContext":
		return m.Fake(d.fakeWaitUntilKeyPairExistsWithContext)

	case "WaitUntilNatGatewayAvailable":
		return m.Fake(d.fakeWaitUntilNatGatewayAvailable)

	case "WaitUntilNatGatewayAvailableWithContext":
		return m.Fake(d.fakeWaitUntilNatGatewayAvailableWithContext)

	case "WaitUntilNetworkInterfaceAvailable":
		return m.Fake(d.fakeWaitUntilNetworkInterfaceAvailable)

	case "WaitUntilNetworkInterfaceAvailableWithContext":
		return m.Fake(d.fakeWaitUntilNetworkInterfaceAvailableWithContext)

	case "WaitUntilPasswordDataAvailable":
		return m.Fake(d.fakeWaitUntilPasswordDataAvailable)

	case "WaitUntilPasswordDataAvailableWithContext":
		return m.Fake(d.fakeWaitUntilPasswordDataAvailableWithContext)

	case "WaitUntilSecurityGroupExists":
		return m.Fake(d.fakeWaitUntilSecurityGroupExists)

	case "WaitUntilSecurityGroupExistsWithContext":
		return m.Fake(d.fakeWaitUntilSecurityGroupExistsWithContext)

	case "WaitUntilSnapshotCompleted":
		return m.Fake(d.fakeWaitUntilSnapshotCompleted)

	case "WaitUntilSnapshotCompletedWithContext":
		return m.Fake(d.fakeWaitUntilSnapshotCompletedWithContext)

	case "WaitUntilSpotInstanceRequestFulfilled":
		return m.Fake(d.fakeWaitUntilSpotInstanceRequestFulfilled)

	case "WaitUntilSpotInstanceRequestFulfilledWithContext":
		return m.Fake(d.fakeWaitUntilSpotInstanceRequestFulfilledWithContext)

	case "WaitUntilSubnetAvailable":
		return m.Fake(d.fakeWaitUntilSubnetAvailable)

	case "WaitUntilSubnetAvailableWithContext":
		return m.Fake(d.fakeWaitUntilSubnetAvailableWithContext)

	case "WaitUntilSystemStatusOk":
		return m.Fake(d.fakeWaitUntilSystemStatusOk)

	case "WaitUntilSystemStatusOkWithContext":
		return m.Fake(d.fakeWaitUntilSystemStatusOkWithContext)

	case "WaitUntilVolumeAvailable":
		return m.Fake(d.fakeWaitUntilVolumeAvailable)

	case "WaitUntilVolumeAvailableWithContext":
		return m.Fake(d.fakeWaitUntilVolumeAvailableWithContext)

	case "WaitUntilVolumeDeleted":
		return m.Fake(d.fakeWaitUntilVolumeDeleted)

	case "WaitUntilVolumeDeletedWithContext":
		return m.Fake(d.fakeWaitUntilVolumeDeletedWithContext)

	case "WaitUntilVolumeInUse":
		return m.Fake(d.fakeWaitUntilVolumeInUse)

	case "WaitUntilVolumeInUseWithContext":
		return m.Fake(d.fakeWaitUntilVolumeInUseWithContext)

	case "WaitUntilVpcAvailable":
		return m.Fake(d.fakeWaitUntilVpcAvailable)

	case "WaitUntilVpcAvailableWithContext":
		return m.Fake(d.fakeWaitUntilVpcAvailableWithContext)

	case "WaitUntilVpcExists":
		return m.Fake(d.fakeWaitUntilVpcExists)

	case "WaitUntilVpcExistsWithContext":
		return m.Fake(d.fakeWaitUntilVpcExistsWithContext)

	case "WaitUntilVpcPeeringConnectionDeleted":
		return m.Fake(d.fakeWaitUntilVpcPeeringConnectionDeleted)

	case "WaitUntilVpcPeeringConnectionDeletedWithContext":
		return m.Fake(d.fakeWaitUntilVpcPeeringConnectionDeletedWithContext)

	case "WaitUntilVpcPeeringConnectionExists":
		return m.Fake(d.fakeWaitUntilVpcPeeringConnectionExists)

	case "WaitUntilVpcPeeringConnectionExistsWithContext":
		return m.Fake(d.fakeWaitUntilVpcPeeringConnectionExistsWithContext)

	case "WaitUntilVpnConnectionAvailable":
		return m.Fake(d.fakeWaitUntilVpnConnectionAvailable)

	case "WaitUntilVpnConnectionAvailableWithContext":
		return m.Fake(d.fakeWaitUntilVpnConnectionAvailableWithContext)

	case "WaitUntilVpnConnectionDeleted":
		return m.Fake(d.fakeWaitUntilVpnConnectionDeleted)

	case "WaitUntilVpnConnectionDeletedWithContext":
		return m.Fake(d.fakeWaitUntilVpnConnectionDeletedWithContext)

	case "WithdrawByoipCidrWithContext":
		return m.Fake(d.fakeWithdrawByoipCidrWithContext)

	default:
		return nil
	}
}

func (d *EC2Double) AcceptReservedInstancesExchangeQuote(i0 *ec2.AcceptReservedInstancesExchangeQuoteInput) (r0 *ec2.AcceptReservedInstancesExchangeQuoteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptReservedInstancesExchangeQuote", i0)
	r0, _ = returns[0].(*ec2.AcceptReservedInstancesExchangeQuoteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) AcceptReservedInstancesExchangeQuoteRequest(i0 *ec2.AcceptReservedInstancesExchangeQuoteInput) (r0 *request.Request, r1 *ec2.AcceptReservedInstancesExchangeQuoteOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptReservedInstancesExchangeQuoteRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.AcceptReservedInstancesExchangeQuoteOutput)
	return
}

func (d *EC2Double) AcceptReservedInstancesExchangeQuoteWithContext(i0 context.Context, i1 *ec2.AcceptReservedInstancesExchangeQuoteInput, i2 ...request.Option) (r0 *ec2.AcceptReservedInstancesExchangeQuoteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptReservedInstancesExchangeQuoteWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.AcceptReservedInstancesExchangeQuoteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeAcceptReservedInstancesExchangeQuoteWithContext(ctx context.Context, in *ec2.AcceptReservedInstancesExchangeQuoteInput, _ ...request.Option) (*ec2.AcceptReservedInstancesExchangeQuoteOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AcceptReservedInstancesExchangeQuote cancelled", ctx.Err())
	default:
		return d.AcceptReservedInstancesExchangeQuote(in)
	}
}

func (d *EC2Double) AcceptTransitGatewayPeeringAttachment(i0 *ec2.AcceptTransitGatewayPeeringAttachmentInput) (r0 *ec2.AcceptTransitGatewayPeeringAttachmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptTransitGatewayPeeringAttachment", i0)
	r0, _ = returns[0].(*ec2.AcceptTransitGatewayPeeringAttachmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) AcceptTransitGatewayPeeringAttachmentRequest(i0 *ec2.AcceptTransitGatewayPeeringAttachmentInput) (r0 *request.Request, r1 *ec2.AcceptTransitGatewayPeeringAttachmentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptTransitGatewayPeeringAttachmentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.AcceptTransitGatewayPeeringAttachmentOutput)
	return
}

func (d *EC2Double) AcceptTransitGatewayPeeringAttachmentWithContext(i0 context.Context, i1 *ec2.AcceptTransitGatewayPeeringAttachmentInput, i2 ...request.Option) (r0 *ec2.AcceptTransitGatewayPeeringAttachmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptTransitGatewayPeeringAttachmentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.AcceptTransitGatewayPeeringAttachmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeAcceptTransitGatewayPeeringAttachmentWithContext(ctx context.Context, in *ec2.AcceptTransitGatewayPeeringAttachmentInput, _ ...request.Option) (*ec2.AcceptTransitGatewayPeeringAttachmentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AcceptTransitGatewayPeeringAttachment cancelled", ctx.Err())
	default:
		return d.AcceptTransitGatewayPeeringAttachment(in)
	}
}

func (d *EC2Double) AcceptTransitGatewayVpcAttachment(i0 *ec2.AcceptTransitGatewayVpcAttachmentInput) (r0 *ec2.AcceptTransitGatewayVpcAttachmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptTransitGatewayVpcAttachment", i0)
	r0, _ = returns[0].(*ec2.AcceptTransitGatewayVpcAttachmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) AcceptTransitGatewayVpcAttachmentRequest(i0 *ec2.AcceptTransitGatewayVpcAttachmentInput) (r0 *request.Request, r1 *ec2.AcceptTransitGatewayVpcAttachmentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptTransitGatewayVpcAttachmentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.AcceptTransitGatewayVpcAttachmentOutput)
	return
}

func (d *EC2Double) AcceptTransitGatewayVpcAttachmentWithContext(i0 context.Context, i1 *ec2.AcceptTransitGatewayVpcAttachmentInput, i2 ...request.Option) (r0 *ec2.AcceptTransitGatewayVpcAttachmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptTransitGatewayVpcAttachmentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.AcceptTransitGatewayVpcAttachmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeAcceptTransitGatewayVpcAttachmentWithContext(ctx context.Context, in *ec2.AcceptTransitGatewayVpcAttachmentInput, _ ...request.Option) (*ec2.AcceptTransitGatewayVpcAttachmentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AcceptTransitGatewayVpcAttachment cancelled", ctx.Err())
	default:
		return d.AcceptTransitGatewayVpcAttachment(in)
	}
}

func (d *EC2Double) AcceptVpcEndpointConnections(i0 *ec2.AcceptVpcEndpointConnectionsInput) (r0 *ec2.AcceptVpcEndpointConnectionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptVpcEndpointConnections", i0)
	r0, _ = returns[0].(*ec2.AcceptVpcEndpointConnectionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) AcceptVpcEndpointConnectionsRequest(i0 *ec2.AcceptVpcEndpointConnectionsInput) (r0 *request.Request, r1 *ec2.AcceptVpcEndpointConnectionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptVpcEndpointConnectionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.AcceptVpcEndpointConnectionsOutput)
	return
}

func (d *EC2Double) AcceptVpcEndpointConnectionsWithContext(i0 context.Context, i1 *ec2.AcceptVpcEndpointConnectionsInput, i2 ...request.Option) (r0 *ec2.AcceptVpcEndpointConnectionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptVpcEndpointConnectionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.AcceptVpcEndpointConnectionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeAcceptVpcEndpointConnectionsWithContext(ctx context.Context, in *ec2.AcceptVpcEndpointConnectionsInput, _ ...request.Option) (*ec2.AcceptVpcEndpointConnectionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AcceptVpcEndpointConnections cancelled", ctx.Err())
	default:
		return d.AcceptVpcEndpointConnections(in)
	}
}

func (d *EC2Double) AcceptVpcPeeringConnection(i0 *ec2.AcceptVpcPeeringConnectionInput) (r0 *ec2.AcceptVpcPeeringConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptVpcPeeringConnection", i0)
	r0, _ = returns[0].(*ec2.AcceptVpcPeeringConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) AcceptVpcPeeringConnectionRequest(i0 *ec2.AcceptVpcPeeringConnectionInput) (r0 *request.Request, r1 *ec2.AcceptVpcPeeringConnectionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptVpcPeeringConnectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.AcceptVpcPeeringConnectionOutput)
	return
}

func (d *EC2Double) AcceptVpcPeeringConnectionWithContext(i0 context.Context, i1 *ec2.AcceptVpcPeeringConnectionInput, i2 ...request.Option) (r0 *ec2.AcceptVpcPeeringConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptVpcPeeringConnectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.AcceptVpcPeeringConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeAcceptVpcPeeringConnectionWithContext(ctx context.Context, in *ec2.AcceptVpcPeeringConnectionInput, _ ...request.Option) (*ec2.AcceptVpcPeeringConnectionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AcceptVpcPeeringConnection cancelled", ctx.Err())
	default:
		return d.AcceptVpcPeeringConnection(in)
	}
}

func (d *EC2Double) AdvertiseByoipCidr(i0 *ec2.AdvertiseByoipCidrInput) (r0 *ec2.AdvertiseByoipCidrOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdvertiseByoipCidr", i0)
	r0, _ = returns[0].(*ec2.AdvertiseByoipCidrOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) AdvertiseByoipCidrRequest(i0 *ec2.AdvertiseByoipCidrInput) (r0 *request.Request, r1 *ec2.AdvertiseByoipCidrOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdvertiseByoipCidrRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.AdvertiseByoipCidrOutput)
	return
}

func (d *EC2Double) AdvertiseByoipCidrWithContext(i0 context.Context, i1 *ec2.AdvertiseByoipCidrInput, i2 ...request.Option) (r0 *ec2.AdvertiseByoipCidrOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AdvertiseByoipCidrWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.AdvertiseByoipCidrOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeAdvertiseByoipCidrWithContext(ctx context.Context, in *ec2.AdvertiseByoipCidrInput, _ ...request.Option) (*ec2.AdvertiseByoipCidrOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AdvertiseByoipCidr cancelled", ctx.Err())
	default:
		return d.AdvertiseByoipCidr(in)
	}
}

func (d *EC2Double) AllocateAddress(i0 *ec2.AllocateAddressInput) (r0 *ec2.AllocateAddressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AllocateAddress", i0)
	r0, _ = returns[0].(*ec2.AllocateAddressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) AllocateAddressRequest(i0 *ec2.AllocateAddressInput) (r0 *request.Request, r1 *ec2.AllocateAddressOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AllocateAddressRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.AllocateAddressOutput)
	return
}

func (d *EC2Double) AllocateAddressWithContext(i0 context.Context, i1 *ec2.AllocateAddressInput, i2 ...request.Option) (r0 *ec2.AllocateAddressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AllocateAddressWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.AllocateAddressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeAllocateAddressWithContext(ctx context.Context, in *ec2.AllocateAddressInput, _ ...request.Option) (*ec2.AllocateAddressOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AllocateAddress cancelled", ctx.Err())
	default:
		return d.AllocateAddress(in)
	}
}

func (d *EC2Double) AllocateHosts(i0 *ec2.AllocateHostsInput) (r0 *ec2.AllocateHostsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AllocateHosts", i0)
	r0, _ = returns[0].(*ec2.AllocateHostsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) AllocateHostsRequest(i0 *ec2.AllocateHostsInput) (r0 *request.Request, r1 *ec2.AllocateHostsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AllocateHostsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.AllocateHostsOutput)
	return
}

func (d *EC2Double) AllocateHostsWithContext(i0 context.Context, i1 *ec2.AllocateHostsInput, i2 ...request.Option) (r0 *ec2.AllocateHostsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AllocateHostsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.AllocateHostsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeAllocateHostsWithContext(ctx context.Context, in *ec2.AllocateHostsInput, _ ...request.Option) (*ec2.AllocateHostsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AllocateHosts cancelled", ctx.Err())
	default:
		return d.AllocateHosts(in)
	}
}

func (d *EC2Double) ApplySecurityGroupsToClientVpnTargetNetwork(i0 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput) (r0 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ApplySecurityGroupsToClientVpnTargetNetwork", i0)
	r0, _ = returns[0].(*ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ApplySecurityGroupsToClientVpnTargetNetworkRequest(i0 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput) (r0 *request.Request, r1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ApplySecurityGroupsToClientVpnTargetNetworkRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput)
	return
}

func (d *EC2Double) ApplySecurityGroupsToClientVpnTargetNetworkWithContext(i0 context.Context, i1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput, i2 ...request.Option) (r0 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ApplySecurityGroupsToClientVpnTargetNetworkWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeApplySecurityGroupsToClientVpnTargetNetworkWithContext(ctx context.Context, in *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput, _ ...request.Option) (*ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ApplySecurityGroupsToClientVpnTargetNetwork cancelled", ctx.Err())
	default:
		return d.ApplySecurityGroupsToClientVpnTargetNetwork(in)
	}
}

func (d *EC2Double) AssignIpv6Addresses(i0 *ec2.AssignIpv6AddressesInput) (r0 *ec2.AssignIpv6AddressesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssignIpv6Addresses", i0)
	r0, _ = returns[0].(*ec2.AssignIpv6AddressesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) AssignIpv6AddressesRequest(i0 *ec2.AssignIpv6AddressesInput) (r0 *request.Request, r1 *ec2.AssignIpv6AddressesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssignIpv6AddressesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.AssignIpv6AddressesOutput)
	return
}

func (d *EC2Double) AssignIpv6AddressesWithContext(i0 context.Context, i1 *ec2.AssignIpv6AddressesInput, i2 ...request.Option) (r0 *ec2.AssignIpv6AddressesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssignIpv6AddressesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.AssignIpv6AddressesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeAssignIpv6AddressesWithContext(ctx context.Context, in *ec2.AssignIpv6AddressesInput, _ ...request.Option) (*ec2.AssignIpv6AddressesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssignIpv6Addresses cancelled", ctx.Err())
	default:
		return d.AssignIpv6Addresses(in)
	}
}

func (d *EC2Double) AssignPrivateIpAddresses(i0 *ec2.AssignPrivateIpAddressesInput) (r0 *ec2.AssignPrivateIpAddressesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssignPrivateIpAddresses", i0)
	r0, _ = returns[0].(*ec2.AssignPrivateIpAddressesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) AssignPrivateIpAddressesRequest(i0 *ec2.AssignPrivateIpAddressesInput) (r0 *request.Request, r1 *ec2.AssignPrivateIpAddressesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssignPrivateIpAddressesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.AssignPrivateIpAddressesOutput)
	return
}

func (d *EC2Double) AssignPrivateIpAddressesWithContext(i0 context.Context, i1 *ec2.AssignPrivateIpAddressesInput, i2 ...request.Option) (r0 *ec2.AssignPrivateIpAddressesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssignPrivateIpAddressesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.AssignPrivateIpAddressesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeAssignPrivateIpAddressesWithContext(ctx context.Context, in *ec2.AssignPrivateIpAddressesInput, _ ...request.Option) (*ec2.AssignPrivateIpAddressesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssignPrivateIpAddresses cancelled", ctx.Err())
	default:
		return d.AssignPrivateIpAddresses(in)
	}
}

func (d *EC2Double) AssociateAddress(i0 *ec2.AssociateAddressInput) (r0 *ec2.AssociateAddressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateAddress", i0)
	r0, _ = returns[0].(*ec2.AssociateAddressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) AssociateAddressRequest(i0 *ec2.AssociateAddressInput) (r0 *request.Request, r1 *ec2.AssociateAddressOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateAddressRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.AssociateAddressOutput)
	return
}

func (d *EC2Double) AssociateAddressWithContext(i0 context.Context, i1 *ec2.AssociateAddressInput, i2 ...request.Option) (r0 *ec2.AssociateAddressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateAddressWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.AssociateAddressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeAssociateAddressWithContext(ctx context.Context, in *ec2.AssociateAddressInput, _ ...request.Option) (*ec2.AssociateAddressOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateAddress cancelled", ctx.Err())
	default:
		return d.AssociateAddress(in)
	}
}

func (d *EC2Double) AssociateClientVpnTargetNetwork(i0 *ec2.AssociateClientVpnTargetNetworkInput) (r0 *ec2.AssociateClientVpnTargetNetworkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateClientVpnTargetNetwork", i0)
	r0, _ = returns[0].(*ec2.AssociateClientVpnTargetNetworkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) AssociateClientVpnTargetNetworkRequest(i0 *ec2.AssociateClientVpnTargetNetworkInput) (r0 *request.Request, r1 *ec2.AssociateClientVpnTargetNetworkOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateClientVpnTargetNetworkRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.AssociateClientVpnTargetNetworkOutput)
	return
}

func (d *EC2Double) AssociateClientVpnTargetNetworkWithContext(i0 context.Context, i1 *ec2.AssociateClientVpnTargetNetworkInput, i2 ...request.Option) (r0 *ec2.AssociateClientVpnTargetNetworkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateClientVpnTargetNetworkWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.AssociateClientVpnTargetNetworkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeAssociateClientVpnTargetNetworkWithContext(ctx context.Context, in *ec2.AssociateClientVpnTargetNetworkInput, _ ...request.Option) (*ec2.AssociateClientVpnTargetNetworkOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateClientVpnTargetNetwork cancelled", ctx.Err())
	default:
		return d.AssociateClientVpnTargetNetwork(in)
	}
}

func (d *EC2Double) AssociateDhcpOptions(i0 *ec2.AssociateDhcpOptionsInput) (r0 *ec2.AssociateDhcpOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateDhcpOptions", i0)
	r0, _ = returns[0].(*ec2.AssociateDhcpOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) AssociateDhcpOptionsRequest(i0 *ec2.AssociateDhcpOptionsInput) (r0 *request.Request, r1 *ec2.AssociateDhcpOptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateDhcpOptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.AssociateDhcpOptionsOutput)
	return
}

func (d *EC2Double) AssociateDhcpOptionsWithContext(i0 context.Context, i1 *ec2.AssociateDhcpOptionsInput, i2 ...request.Option) (r0 *ec2.AssociateDhcpOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateDhcpOptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.AssociateDhcpOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeAssociateDhcpOptionsWithContext(ctx context.Context, in *ec2.AssociateDhcpOptionsInput, _ ...request.Option) (*ec2.AssociateDhcpOptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateDhcpOptions cancelled", ctx.Err())
	default:
		return d.AssociateDhcpOptions(in)
	}
}

func (d *EC2Double) AssociateIamInstanceProfile(i0 *ec2.AssociateIamInstanceProfileInput) (r0 *ec2.AssociateIamInstanceProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateIamInstanceProfile", i0)
	r0, _ = returns[0].(*ec2.AssociateIamInstanceProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) AssociateIamInstanceProfileRequest(i0 *ec2.AssociateIamInstanceProfileInput) (r0 *request.Request, r1 *ec2.AssociateIamInstanceProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateIamInstanceProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.AssociateIamInstanceProfileOutput)
	return
}

func (d *EC2Double) AssociateIamInstanceProfileWithContext(i0 context.Context, i1 *ec2.AssociateIamInstanceProfileInput, i2 ...request.Option) (r0 *ec2.AssociateIamInstanceProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateIamInstanceProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.AssociateIamInstanceProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeAssociateIamInstanceProfileWithContext(ctx context.Context, in *ec2.AssociateIamInstanceProfileInput, _ ...request.Option) (*ec2.AssociateIamInstanceProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateIamInstanceProfile cancelled", ctx.Err())
	default:
		return d.AssociateIamInstanceProfile(in)
	}
}

func (d *EC2Double) AssociateRouteTable(i0 *ec2.AssociateRouteTableInput) (r0 *ec2.AssociateRouteTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateRouteTable", i0)
	r0, _ = returns[0].(*ec2.AssociateRouteTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) AssociateRouteTableRequest(i0 *ec2.AssociateRouteTableInput) (r0 *request.Request, r1 *ec2.AssociateRouteTableOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateRouteTableRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.AssociateRouteTableOutput)
	return
}

func (d *EC2Double) AssociateRouteTableWithContext(i0 context.Context, i1 *ec2.AssociateRouteTableInput, i2 ...request.Option) (r0 *ec2.AssociateRouteTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateRouteTableWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.AssociateRouteTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeAssociateRouteTableWithContext(ctx context.Context, in *ec2.AssociateRouteTableInput, _ ...request.Option) (*ec2.AssociateRouteTableOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateRouteTable cancelled", ctx.Err())
	default:
		return d.AssociateRouteTable(in)
	}
}

func (d *EC2Double) AssociateSubnetCidrBlock(i0 *ec2.AssociateSubnetCidrBlockInput) (r0 *ec2.AssociateSubnetCidrBlockOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateSubnetCidrBlock", i0)
	r0, _ = returns[0].(*ec2.AssociateSubnetCidrBlockOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) AssociateSubnetCidrBlockRequest(i0 *ec2.AssociateSubnetCidrBlockInput) (r0 *request.Request, r1 *ec2.AssociateSubnetCidrBlockOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateSubnetCidrBlockRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.AssociateSubnetCidrBlockOutput)
	return
}

func (d *EC2Double) AssociateSubnetCidrBlockWithContext(i0 context.Context, i1 *ec2.AssociateSubnetCidrBlockInput, i2 ...request.Option) (r0 *ec2.AssociateSubnetCidrBlockOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateSubnetCidrBlockWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.AssociateSubnetCidrBlockOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeAssociateSubnetCidrBlockWithContext(ctx context.Context, in *ec2.AssociateSubnetCidrBlockInput, _ ...request.Option) (*ec2.AssociateSubnetCidrBlockOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateSubnetCidrBlock cancelled", ctx.Err())
	default:
		return d.AssociateSubnetCidrBlock(in)
	}
}

func (d *EC2Double) AssociateTransitGatewayMulticastDomain(i0 *ec2.AssociateTransitGatewayMulticastDomainInput) (r0 *ec2.AssociateTransitGatewayMulticastDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateTransitGatewayMulticastDomain", i0)
	r0, _ = returns[0].(*ec2.AssociateTransitGatewayMulticastDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) AssociateTransitGatewayMulticastDomainRequest(i0 *ec2.AssociateTransitGatewayMulticastDomainInput) (r0 *request.Request, r1 *ec2.AssociateTransitGatewayMulticastDomainOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateTransitGatewayMulticastDomainRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.AssociateTransitGatewayMulticastDomainOutput)
	return
}

func (d *EC2Double) AssociateTransitGatewayMulticastDomainWithContext(i0 context.Context, i1 *ec2.AssociateTransitGatewayMulticastDomainInput, i2 ...request.Option) (r0 *ec2.AssociateTransitGatewayMulticastDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateTransitGatewayMulticastDomainWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.AssociateTransitGatewayMulticastDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeAssociateTransitGatewayMulticastDomainWithContext(ctx context.Context, in *ec2.AssociateTransitGatewayMulticastDomainInput, _ ...request.Option) (*ec2.AssociateTransitGatewayMulticastDomainOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateTransitGatewayMulticastDomain cancelled", ctx.Err())
	default:
		return d.AssociateTransitGatewayMulticastDomain(in)
	}
}

func (d *EC2Double) AssociateTransitGatewayRouteTable(i0 *ec2.AssociateTransitGatewayRouteTableInput) (r0 *ec2.AssociateTransitGatewayRouteTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateTransitGatewayRouteTable", i0)
	r0, _ = returns[0].(*ec2.AssociateTransitGatewayRouteTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) AssociateTransitGatewayRouteTableRequest(i0 *ec2.AssociateTransitGatewayRouteTableInput) (r0 *request.Request, r1 *ec2.AssociateTransitGatewayRouteTableOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateTransitGatewayRouteTableRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.AssociateTransitGatewayRouteTableOutput)
	return
}

func (d *EC2Double) AssociateTransitGatewayRouteTableWithContext(i0 context.Context, i1 *ec2.AssociateTransitGatewayRouteTableInput, i2 ...request.Option) (r0 *ec2.AssociateTransitGatewayRouteTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateTransitGatewayRouteTableWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.AssociateTransitGatewayRouteTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeAssociateTransitGatewayRouteTableWithContext(ctx context.Context, in *ec2.AssociateTransitGatewayRouteTableInput, _ ...request.Option) (*ec2.AssociateTransitGatewayRouteTableOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateTransitGatewayRouteTable cancelled", ctx.Err())
	default:
		return d.AssociateTransitGatewayRouteTable(in)
	}
}

func (d *EC2Double) AssociateVpcCidrBlock(i0 *ec2.AssociateVpcCidrBlockInput) (r0 *ec2.AssociateVpcCidrBlockOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateVpcCidrBlock", i0)
	r0, _ = returns[0].(*ec2.AssociateVpcCidrBlockOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) AssociateVpcCidrBlockRequest(i0 *ec2.AssociateVpcCidrBlockInput) (r0 *request.Request, r1 *ec2.AssociateVpcCidrBlockOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateVpcCidrBlockRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.AssociateVpcCidrBlockOutput)
	return
}

func (d *EC2Double) AssociateVpcCidrBlockWithContext(i0 context.Context, i1 *ec2.AssociateVpcCidrBlockInput, i2 ...request.Option) (r0 *ec2.AssociateVpcCidrBlockOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateVpcCidrBlockWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.AssociateVpcCidrBlockOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeAssociateVpcCidrBlockWithContext(ctx context.Context, in *ec2.AssociateVpcCidrBlockInput, _ ...request.Option) (*ec2.AssociateVpcCidrBlockOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateVpcCidrBlock cancelled", ctx.Err())
	default:
		return d.AssociateVpcCidrBlock(in)
	}
}

func (d *EC2Double) AttachClassicLinkVpc(i0 *ec2.AttachClassicLinkVpcInput) (r0 *ec2.AttachClassicLinkVpcOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachClassicLinkVpc", i0)
	r0, _ = returns[0].(*ec2.AttachClassicLinkVpcOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) AttachClassicLinkVpcRequest(i0 *ec2.AttachClassicLinkVpcInput) (r0 *request.Request, r1 *ec2.AttachClassicLinkVpcOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachClassicLinkVpcRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.AttachClassicLinkVpcOutput)
	return
}

func (d *EC2Double) AttachClassicLinkVpcWithContext(i0 context.Context, i1 *ec2.AttachClassicLinkVpcInput, i2 ...request.Option) (r0 *ec2.AttachClassicLinkVpcOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachClassicLinkVpcWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.AttachClassicLinkVpcOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeAttachClassicLinkVpcWithContext(ctx context.Context, in *ec2.AttachClassicLinkVpcInput, _ ...request.Option) (*ec2.AttachClassicLinkVpcOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AttachClassicLinkVpc cancelled", ctx.Err())
	default:
		return d.AttachClassicLinkVpc(in)
	}
}

func (d *EC2Double) AttachInternetGateway(i0 *ec2.AttachInternetGatewayInput) (r0 *ec2.AttachInternetGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachInternetGateway", i0)
	r0, _ = returns[0].(*ec2.AttachInternetGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) AttachInternetGatewayRequest(i0 *ec2.AttachInternetGatewayInput) (r0 *request.Request, r1 *ec2.AttachInternetGatewayOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachInternetGatewayRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.AttachInternetGatewayOutput)
	return
}

func (d *EC2Double) AttachInternetGatewayWithContext(i0 context.Context, i1 *ec2.AttachInternetGatewayInput, i2 ...request.Option) (r0 *ec2.AttachInternetGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachInternetGatewayWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.AttachInternetGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeAttachInternetGatewayWithContext(ctx context.Context, in *ec2.AttachInternetGatewayInput, _ ...request.Option) (*ec2.AttachInternetGatewayOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AttachInternetGateway cancelled", ctx.Err())
	default:
		return d.AttachInternetGateway(in)
	}
}

func (d *EC2Double) AttachNetworkInterface(i0 *ec2.AttachNetworkInterfaceInput) (r0 *ec2.AttachNetworkInterfaceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachNetworkInterface", i0)
	r0, _ = returns[0].(*ec2.AttachNetworkInterfaceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) AttachNetworkInterfaceRequest(i0 *ec2.AttachNetworkInterfaceInput) (r0 *request.Request, r1 *ec2.AttachNetworkInterfaceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachNetworkInterfaceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.AttachNetworkInterfaceOutput)
	return
}

func (d *EC2Double) AttachNetworkInterfaceWithContext(i0 context.Context, i1 *ec2.AttachNetworkInterfaceInput, i2 ...request.Option) (r0 *ec2.AttachNetworkInterfaceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachNetworkInterfaceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.AttachNetworkInterfaceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeAttachNetworkInterfaceWithContext(ctx context.Context, in *ec2.AttachNetworkInterfaceInput, _ ...request.Option) (*ec2.AttachNetworkInterfaceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AttachNetworkInterface cancelled", ctx.Err())
	default:
		return d.AttachNetworkInterface(in)
	}
}

func (d *EC2Double) AttachVolume(i0 *ec2.AttachVolumeInput) (r0 *ec2.VolumeAttachment, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachVolume", i0)
	r0, _ = returns[0].(*ec2.VolumeAttachment)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) AttachVolumeRequest(i0 *ec2.AttachVolumeInput) (r0 *request.Request, r1 *ec2.VolumeAttachment) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachVolumeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.VolumeAttachment)
	return
}

func (d *EC2Double) AttachVolumeWithContext(i0 context.Context, i1 *ec2.AttachVolumeInput, i2 ...request.Option) (r0 *ec2.VolumeAttachment, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachVolumeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.VolumeAttachment)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeAttachVolumeWithContext(ctx context.Context, in *ec2.AttachVolumeInput, _ ...request.Option) (*ec2.VolumeAttachment, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AttachVolume cancelled", ctx.Err())
	default:
		return d.AttachVolume(in)
	}
}

func (d *EC2Double) AttachVpnGateway(i0 *ec2.AttachVpnGatewayInput) (r0 *ec2.AttachVpnGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachVpnGateway", i0)
	r0, _ = returns[0].(*ec2.AttachVpnGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) AttachVpnGatewayRequest(i0 *ec2.AttachVpnGatewayInput) (r0 *request.Request, r1 *ec2.AttachVpnGatewayOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachVpnGatewayRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.AttachVpnGatewayOutput)
	return
}

func (d *EC2Double) AttachVpnGatewayWithContext(i0 context.Context, i1 *ec2.AttachVpnGatewayInput, i2 ...request.Option) (r0 *ec2.AttachVpnGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachVpnGatewayWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.AttachVpnGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeAttachVpnGatewayWithContext(ctx context.Context, in *ec2.AttachVpnGatewayInput, _ ...request.Option) (*ec2.AttachVpnGatewayOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AttachVpnGateway cancelled", ctx.Err())
	default:
		return d.AttachVpnGateway(in)
	}
}

func (d *EC2Double) AuthorizeClientVpnIngress(i0 *ec2.AuthorizeClientVpnIngressInput) (r0 *ec2.AuthorizeClientVpnIngressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AuthorizeClientVpnIngress", i0)
	r0, _ = returns[0].(*ec2.AuthorizeClientVpnIngressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) AuthorizeClientVpnIngressRequest(i0 *ec2.AuthorizeClientVpnIngressInput) (r0 *request.Request, r1 *ec2.AuthorizeClientVpnIngressOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AuthorizeClientVpnIngressRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.AuthorizeClientVpnIngressOutput)
	return
}

func (d *EC2Double) AuthorizeClientVpnIngressWithContext(i0 context.Context, i1 *ec2.AuthorizeClientVpnIngressInput, i2 ...request.Option) (r0 *ec2.AuthorizeClientVpnIngressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AuthorizeClientVpnIngressWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.AuthorizeClientVpnIngressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeAuthorizeClientVpnIngressWithContext(ctx context.Context, in *ec2.AuthorizeClientVpnIngressInput, _ ...request.Option) (*ec2.AuthorizeClientVpnIngressOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AuthorizeClientVpnIngress cancelled", ctx.Err())
	default:
		return d.AuthorizeClientVpnIngress(in)
	}
}

func (d *EC2Double) AuthorizeSecurityGroupEgress(i0 *ec2.AuthorizeSecurityGroupEgressInput) (r0 *ec2.AuthorizeSecurityGroupEgressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AuthorizeSecurityGroupEgress", i0)
	r0, _ = returns[0].(*ec2.AuthorizeSecurityGroupEgressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) AuthorizeSecurityGroupEgressRequest(i0 *ec2.AuthorizeSecurityGroupEgressInput) (r0 *request.Request, r1 *ec2.AuthorizeSecurityGroupEgressOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AuthorizeSecurityGroupEgressRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.AuthorizeSecurityGroupEgressOutput)
	return
}

func (d *EC2Double) AuthorizeSecurityGroupEgressWithContext(i0 context.Context, i1 *ec2.AuthorizeSecurityGroupEgressInput, i2 ...request.Option) (r0 *ec2.AuthorizeSecurityGroupEgressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AuthorizeSecurityGroupEgressWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.AuthorizeSecurityGroupEgressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeAuthorizeSecurityGroupEgressWithContext(ctx context.Context, in *ec2.AuthorizeSecurityGroupEgressInput, _ ...request.Option) (*ec2.AuthorizeSecurityGroupEgressOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AuthorizeSecurityGroupEgress cancelled", ctx.Err())
	default:
		return d.AuthorizeSecurityGroupEgress(in)
	}
}

func (d *EC2Double) AuthorizeSecurityGroupIngress(i0 *ec2.AuthorizeSecurityGroupIngressInput) (r0 *ec2.AuthorizeSecurityGroupIngressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AuthorizeSecurityGroupIngress", i0)
	r0, _ = returns[0].(*ec2.AuthorizeSecurityGroupIngressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) AuthorizeSecurityGroupIngressRequest(i0 *ec2.AuthorizeSecurityGroupIngressInput) (r0 *request.Request, r1 *ec2.AuthorizeSecurityGroupIngressOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AuthorizeSecurityGroupIngressRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.AuthorizeSecurityGroupIngressOutput)
	return
}

func (d *EC2Double) AuthorizeSecurityGroupIngressWithContext(i0 context.Context, i1 *ec2.AuthorizeSecurityGroupIngressInput, i2 ...request.Option) (r0 *ec2.AuthorizeSecurityGroupIngressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AuthorizeSecurityGroupIngressWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.AuthorizeSecurityGroupIngressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeAuthorizeSecurityGroupIngressWithContext(ctx context.Context, in *ec2.AuthorizeSecurityGroupIngressInput, _ ...request.Option) (*ec2.AuthorizeSecurityGroupIngressOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AuthorizeSecurityGroupIngress cancelled", ctx.Err())
	default:
		return d.AuthorizeSecurityGroupIngress(in)
	}
}

func (d *EC2Double) BundleInstance(i0 *ec2.BundleInstanceInput) (r0 *ec2.BundleInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BundleInstance", i0)
	r0, _ = returns[0].(*ec2.BundleInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) BundleInstanceRequest(i0 *ec2.BundleInstanceInput) (r0 *request.Request, r1 *ec2.BundleInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BundleInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.BundleInstanceOutput)
	return
}

func (d *EC2Double) BundleInstanceWithContext(i0 context.Context, i1 *ec2.BundleInstanceInput, i2 ...request.Option) (r0 *ec2.BundleInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BundleInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.BundleInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeBundleInstanceWithContext(ctx context.Context, in *ec2.BundleInstanceInput, _ ...request.Option) (*ec2.BundleInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BundleInstance cancelled", ctx.Err())
	default:
		return d.BundleInstance(in)
	}
}

func (d *EC2Double) CancelBundleTask(i0 *ec2.CancelBundleTaskInput) (r0 *ec2.CancelBundleTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelBundleTask", i0)
	r0, _ = returns[0].(*ec2.CancelBundleTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CancelBundleTaskRequest(i0 *ec2.CancelBundleTaskInput) (r0 *request.Request, r1 *ec2.CancelBundleTaskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelBundleTaskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CancelBundleTaskOutput)
	return
}

func (d *EC2Double) CancelBundleTaskWithContext(i0 context.Context, i1 *ec2.CancelBundleTaskInput, i2 ...request.Option) (r0 *ec2.CancelBundleTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelBundleTaskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CancelBundleTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCancelBundleTaskWithContext(ctx context.Context, in *ec2.CancelBundleTaskInput, _ ...request.Option) (*ec2.CancelBundleTaskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelBundleTask cancelled", ctx.Err())
	default:
		return d.CancelBundleTask(in)
	}
}

func (d *EC2Double) CancelCapacityReservation(i0 *ec2.CancelCapacityReservationInput) (r0 *ec2.CancelCapacityReservationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelCapacityReservation", i0)
	r0, _ = returns[0].(*ec2.CancelCapacityReservationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CancelCapacityReservationRequest(i0 *ec2.CancelCapacityReservationInput) (r0 *request.Request, r1 *ec2.CancelCapacityReservationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelCapacityReservationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CancelCapacityReservationOutput)
	return
}

func (d *EC2Double) CancelCapacityReservationWithContext(i0 context.Context, i1 *ec2.CancelCapacityReservationInput, i2 ...request.Option) (r0 *ec2.CancelCapacityReservationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelCapacityReservationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CancelCapacityReservationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCancelCapacityReservationWithContext(ctx context.Context, in *ec2.CancelCapacityReservationInput, _ ...request.Option) (*ec2.CancelCapacityReservationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelCapacityReservation cancelled", ctx.Err())
	default:
		return d.CancelCapacityReservation(in)
	}
}

func (d *EC2Double) CancelConversionTask(i0 *ec2.CancelConversionTaskInput) (r0 *ec2.CancelConversionTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelConversionTask", i0)
	r0, _ = returns[0].(*ec2.CancelConversionTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CancelConversionTaskRequest(i0 *ec2.CancelConversionTaskInput) (r0 *request.Request, r1 *ec2.CancelConversionTaskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelConversionTaskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CancelConversionTaskOutput)
	return
}

func (d *EC2Double) CancelConversionTaskWithContext(i0 context.Context, i1 *ec2.CancelConversionTaskInput, i2 ...request.Option) (r0 *ec2.CancelConversionTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelConversionTaskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CancelConversionTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCancelConversionTaskWithContext(ctx context.Context, in *ec2.CancelConversionTaskInput, _ ...request.Option) (*ec2.CancelConversionTaskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelConversionTask cancelled", ctx.Err())
	default:
		return d.CancelConversionTask(in)
	}
}

func (d *EC2Double) CancelExportTask(i0 *ec2.CancelExportTaskInput) (r0 *ec2.CancelExportTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelExportTask", i0)
	r0, _ = returns[0].(*ec2.CancelExportTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CancelExportTaskRequest(i0 *ec2.CancelExportTaskInput) (r0 *request.Request, r1 *ec2.CancelExportTaskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelExportTaskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CancelExportTaskOutput)
	return
}

func (d *EC2Double) CancelExportTaskWithContext(i0 context.Context, i1 *ec2.CancelExportTaskInput, i2 ...request.Option) (r0 *ec2.CancelExportTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelExportTaskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CancelExportTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCancelExportTaskWithContext(ctx context.Context, in *ec2.CancelExportTaskInput, _ ...request.Option) (*ec2.CancelExportTaskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelExportTask cancelled", ctx.Err())
	default:
		return d.CancelExportTask(in)
	}
}

func (d *EC2Double) CancelImportTask(i0 *ec2.CancelImportTaskInput) (r0 *ec2.CancelImportTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelImportTask", i0)
	r0, _ = returns[0].(*ec2.CancelImportTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CancelImportTaskRequest(i0 *ec2.CancelImportTaskInput) (r0 *request.Request, r1 *ec2.CancelImportTaskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelImportTaskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CancelImportTaskOutput)
	return
}

func (d *EC2Double) CancelImportTaskWithContext(i0 context.Context, i1 *ec2.CancelImportTaskInput, i2 ...request.Option) (r0 *ec2.CancelImportTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelImportTaskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CancelImportTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCancelImportTaskWithContext(ctx context.Context, in *ec2.CancelImportTaskInput, _ ...request.Option) (*ec2.CancelImportTaskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelImportTask cancelled", ctx.Err())
	default:
		return d.CancelImportTask(in)
	}
}

func (d *EC2Double) CancelReservedInstancesListing(i0 *ec2.CancelReservedInstancesListingInput) (r0 *ec2.CancelReservedInstancesListingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelReservedInstancesListing", i0)
	r0, _ = returns[0].(*ec2.CancelReservedInstancesListingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CancelReservedInstancesListingRequest(i0 *ec2.CancelReservedInstancesListingInput) (r0 *request.Request, r1 *ec2.CancelReservedInstancesListingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelReservedInstancesListingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CancelReservedInstancesListingOutput)
	return
}

func (d *EC2Double) CancelReservedInstancesListingWithContext(i0 context.Context, i1 *ec2.CancelReservedInstancesListingInput, i2 ...request.Option) (r0 *ec2.CancelReservedInstancesListingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelReservedInstancesListingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CancelReservedInstancesListingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCancelReservedInstancesListingWithContext(ctx context.Context, in *ec2.CancelReservedInstancesListingInput, _ ...request.Option) (*ec2.CancelReservedInstancesListingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelReservedInstancesListing cancelled", ctx.Err())
	default:
		return d.CancelReservedInstancesListing(in)
	}
}

func (d *EC2Double) CancelSpotFleetRequests(i0 *ec2.CancelSpotFleetRequestsInput) (r0 *ec2.CancelSpotFleetRequestsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelSpotFleetRequests", i0)
	r0, _ = returns[0].(*ec2.CancelSpotFleetRequestsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CancelSpotFleetRequestsRequest(i0 *ec2.CancelSpotFleetRequestsInput) (r0 *request.Request, r1 *ec2.CancelSpotFleetRequestsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelSpotFleetRequestsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CancelSpotFleetRequestsOutput)
	return
}

func (d *EC2Double) CancelSpotFleetRequestsWithContext(i0 context.Context, i1 *ec2.CancelSpotFleetRequestsInput, i2 ...request.Option) (r0 *ec2.CancelSpotFleetRequestsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelSpotFleetRequestsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CancelSpotFleetRequestsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCancelSpotFleetRequestsWithContext(ctx context.Context, in *ec2.CancelSpotFleetRequestsInput, _ ...request.Option) (*ec2.CancelSpotFleetRequestsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelSpotFleetRequests cancelled", ctx.Err())
	default:
		return d.CancelSpotFleetRequests(in)
	}
}

func (d *EC2Double) CancelSpotInstanceRequests(i0 *ec2.CancelSpotInstanceRequestsInput) (r0 *ec2.CancelSpotInstanceRequestsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelSpotInstanceRequests", i0)
	r0, _ = returns[0].(*ec2.CancelSpotInstanceRequestsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CancelSpotInstanceRequestsRequest(i0 *ec2.CancelSpotInstanceRequestsInput) (r0 *request.Request, r1 *ec2.CancelSpotInstanceRequestsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelSpotInstanceRequestsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CancelSpotInstanceRequestsOutput)
	return
}

func (d *EC2Double) CancelSpotInstanceRequestsWithContext(i0 context.Context, i1 *ec2.CancelSpotInstanceRequestsInput, i2 ...request.Option) (r0 *ec2.CancelSpotInstanceRequestsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelSpotInstanceRequestsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CancelSpotInstanceRequestsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCancelSpotInstanceRequestsWithContext(ctx context.Context, in *ec2.CancelSpotInstanceRequestsInput, _ ...request.Option) (*ec2.CancelSpotInstanceRequestsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelSpotInstanceRequests cancelled", ctx.Err())
	default:
		return d.CancelSpotInstanceRequests(in)
	}
}

func (d *EC2Double) ConfirmProductInstance(i0 *ec2.ConfirmProductInstanceInput) (r0 *ec2.ConfirmProductInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ConfirmProductInstance", i0)
	r0, _ = returns[0].(*ec2.ConfirmProductInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ConfirmProductInstanceRequest(i0 *ec2.ConfirmProductInstanceInput) (r0 *request.Request, r1 *ec2.ConfirmProductInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ConfirmProductInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ConfirmProductInstanceOutput)
	return
}

func (d *EC2Double) ConfirmProductInstanceWithContext(i0 context.Context, i1 *ec2.ConfirmProductInstanceInput, i2 ...request.Option) (r0 *ec2.ConfirmProductInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ConfirmProductInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ConfirmProductInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeConfirmProductInstanceWithContext(ctx context.Context, in *ec2.ConfirmProductInstanceInput, _ ...request.Option) (*ec2.ConfirmProductInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ConfirmProductInstance cancelled", ctx.Err())
	default:
		return d.ConfirmProductInstance(in)
	}
}

func (d *EC2Double) CopyFpgaImage(i0 *ec2.CopyFpgaImageInput) (r0 *ec2.CopyFpgaImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyFpgaImage", i0)
	r0, _ = returns[0].(*ec2.CopyFpgaImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CopyFpgaImageRequest(i0 *ec2.CopyFpgaImageInput) (r0 *request.Request, r1 *ec2.CopyFpgaImageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyFpgaImageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CopyFpgaImageOutput)
	return
}

func (d *EC2Double) CopyFpgaImageWithContext(i0 context.Context, i1 *ec2.CopyFpgaImageInput, i2 ...request.Option) (r0 *ec2.CopyFpgaImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyFpgaImageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CopyFpgaImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCopyFpgaImageWithContext(ctx context.Context, in *ec2.CopyFpgaImageInput, _ ...request.Option) (*ec2.CopyFpgaImageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CopyFpgaImage cancelled", ctx.Err())
	default:
		return d.CopyFpgaImage(in)
	}
}

func (d *EC2Double) CopyImage(i0 *ec2.CopyImageInput) (r0 *ec2.CopyImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyImage", i0)
	r0, _ = returns[0].(*ec2.CopyImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CopyImageRequest(i0 *ec2.CopyImageInput) (r0 *request.Request, r1 *ec2.CopyImageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyImageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CopyImageOutput)
	return
}

func (d *EC2Double) CopyImageWithContext(i0 context.Context, i1 *ec2.CopyImageInput, i2 ...request.Option) (r0 *ec2.CopyImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyImageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CopyImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCopyImageWithContext(ctx context.Context, in *ec2.CopyImageInput, _ ...request.Option) (*ec2.CopyImageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CopyImage cancelled", ctx.Err())
	default:
		return d.CopyImage(in)
	}
}

func (d *EC2Double) CopySnapshot(i0 *ec2.CopySnapshotInput) (r0 *ec2.CopySnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopySnapshot", i0)
	r0, _ = returns[0].(*ec2.CopySnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CopySnapshotRequest(i0 *ec2.CopySnapshotInput) (r0 *request.Request, r1 *ec2.CopySnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopySnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CopySnapshotOutput)
	return
}

func (d *EC2Double) CopySnapshotWithContext(i0 context.Context, i1 *ec2.CopySnapshotInput, i2 ...request.Option) (r0 *ec2.CopySnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopySnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CopySnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCopySnapshotWithContext(ctx context.Context, in *ec2.CopySnapshotInput, _ ...request.Option) (*ec2.CopySnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CopySnapshot cancelled", ctx.Err())
	default:
		return d.CopySnapshot(in)
	}
}

func (d *EC2Double) CreateCapacityReservation(i0 *ec2.CreateCapacityReservationInput) (r0 *ec2.CreateCapacityReservationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCapacityReservation", i0)
	r0, _ = returns[0].(*ec2.CreateCapacityReservationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateCapacityReservationRequest(i0 *ec2.CreateCapacityReservationInput) (r0 *request.Request, r1 *ec2.CreateCapacityReservationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCapacityReservationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateCapacityReservationOutput)
	return
}

func (d *EC2Double) CreateCapacityReservationWithContext(i0 context.Context, i1 *ec2.CreateCapacityReservationInput, i2 ...request.Option) (r0 *ec2.CreateCapacityReservationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCapacityReservationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateCapacityReservationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateCapacityReservationWithContext(ctx context.Context, in *ec2.CreateCapacityReservationInput, _ ...request.Option) (*ec2.CreateCapacityReservationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateCapacityReservation cancelled", ctx.Err())
	default:
		return d.CreateCapacityReservation(in)
	}
}

func (d *EC2Double) CreateClientVpnEndpoint(i0 *ec2.CreateClientVpnEndpointInput) (r0 *ec2.CreateClientVpnEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateClientVpnEndpoint", i0)
	r0, _ = returns[0].(*ec2.CreateClientVpnEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateClientVpnEndpointRequest(i0 *ec2.CreateClientVpnEndpointInput) (r0 *request.Request, r1 *ec2.CreateClientVpnEndpointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateClientVpnEndpointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateClientVpnEndpointOutput)
	return
}

func (d *EC2Double) CreateClientVpnEndpointWithContext(i0 context.Context, i1 *ec2.CreateClientVpnEndpointInput, i2 ...request.Option) (r0 *ec2.CreateClientVpnEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateClientVpnEndpointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateClientVpnEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateClientVpnEndpointWithContext(ctx context.Context, in *ec2.CreateClientVpnEndpointInput, _ ...request.Option) (*ec2.CreateClientVpnEndpointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateClientVpnEndpoint cancelled", ctx.Err())
	default:
		return d.CreateClientVpnEndpoint(in)
	}
}

func (d *EC2Double) CreateClientVpnRoute(i0 *ec2.CreateClientVpnRouteInput) (r0 *ec2.CreateClientVpnRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateClientVpnRoute", i0)
	r0, _ = returns[0].(*ec2.CreateClientVpnRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateClientVpnRouteRequest(i0 *ec2.CreateClientVpnRouteInput) (r0 *request.Request, r1 *ec2.CreateClientVpnRouteOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateClientVpnRouteRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateClientVpnRouteOutput)
	return
}

func (d *EC2Double) CreateClientVpnRouteWithContext(i0 context.Context, i1 *ec2.CreateClientVpnRouteInput, i2 ...request.Option) (r0 *ec2.CreateClientVpnRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateClientVpnRouteWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateClientVpnRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateClientVpnRouteWithContext(ctx context.Context, in *ec2.CreateClientVpnRouteInput, _ ...request.Option) (*ec2.CreateClientVpnRouteOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateClientVpnRoute cancelled", ctx.Err())
	default:
		return d.CreateClientVpnRoute(in)
	}
}

func (d *EC2Double) CreateCustomerGateway(i0 *ec2.CreateCustomerGatewayInput) (r0 *ec2.CreateCustomerGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCustomerGateway", i0)
	r0, _ = returns[0].(*ec2.CreateCustomerGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateCustomerGatewayRequest(i0 *ec2.CreateCustomerGatewayInput) (r0 *request.Request, r1 *ec2.CreateCustomerGatewayOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCustomerGatewayRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateCustomerGatewayOutput)
	return
}

func (d *EC2Double) CreateCustomerGatewayWithContext(i0 context.Context, i1 *ec2.CreateCustomerGatewayInput, i2 ...request.Option) (r0 *ec2.CreateCustomerGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCustomerGatewayWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateCustomerGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateCustomerGatewayWithContext(ctx context.Context, in *ec2.CreateCustomerGatewayInput, _ ...request.Option) (*ec2.CreateCustomerGatewayOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateCustomerGateway cancelled", ctx.Err())
	default:
		return d.CreateCustomerGateway(in)
	}
}

func (d *EC2Double) CreateDefaultSubnet(i0 *ec2.CreateDefaultSubnetInput) (r0 *ec2.CreateDefaultSubnetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDefaultSubnet", i0)
	r0, _ = returns[0].(*ec2.CreateDefaultSubnetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateDefaultSubnetRequest(i0 *ec2.CreateDefaultSubnetInput) (r0 *request.Request, r1 *ec2.CreateDefaultSubnetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDefaultSubnetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateDefaultSubnetOutput)
	return
}

func (d *EC2Double) CreateDefaultSubnetWithContext(i0 context.Context, i1 *ec2.CreateDefaultSubnetInput, i2 ...request.Option) (r0 *ec2.CreateDefaultSubnetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDefaultSubnetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateDefaultSubnetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateDefaultSubnetWithContext(ctx context.Context, in *ec2.CreateDefaultSubnetInput, _ ...request.Option) (*ec2.CreateDefaultSubnetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDefaultSubnet cancelled", ctx.Err())
	default:
		return d.CreateDefaultSubnet(in)
	}
}

func (d *EC2Double) CreateDefaultVpc(i0 *ec2.CreateDefaultVpcInput) (r0 *ec2.CreateDefaultVpcOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDefaultVpc", i0)
	r0, _ = returns[0].(*ec2.CreateDefaultVpcOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateDefaultVpcRequest(i0 *ec2.CreateDefaultVpcInput) (r0 *request.Request, r1 *ec2.CreateDefaultVpcOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDefaultVpcRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateDefaultVpcOutput)
	return
}

func (d *EC2Double) CreateDefaultVpcWithContext(i0 context.Context, i1 *ec2.CreateDefaultVpcInput, i2 ...request.Option) (r0 *ec2.CreateDefaultVpcOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDefaultVpcWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateDefaultVpcOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateDefaultVpcWithContext(ctx context.Context, in *ec2.CreateDefaultVpcInput, _ ...request.Option) (*ec2.CreateDefaultVpcOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDefaultVpc cancelled", ctx.Err())
	default:
		return d.CreateDefaultVpc(in)
	}
}

func (d *EC2Double) CreateDhcpOptions(i0 *ec2.CreateDhcpOptionsInput) (r0 *ec2.CreateDhcpOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDhcpOptions", i0)
	r0, _ = returns[0].(*ec2.CreateDhcpOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateDhcpOptionsRequest(i0 *ec2.CreateDhcpOptionsInput) (r0 *request.Request, r1 *ec2.CreateDhcpOptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDhcpOptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateDhcpOptionsOutput)
	return
}

func (d *EC2Double) CreateDhcpOptionsWithContext(i0 context.Context, i1 *ec2.CreateDhcpOptionsInput, i2 ...request.Option) (r0 *ec2.CreateDhcpOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDhcpOptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateDhcpOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateDhcpOptionsWithContext(ctx context.Context, in *ec2.CreateDhcpOptionsInput, _ ...request.Option) (*ec2.CreateDhcpOptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDhcpOptions cancelled", ctx.Err())
	default:
		return d.CreateDhcpOptions(in)
	}
}

func (d *EC2Double) CreateEgressOnlyInternetGateway(i0 *ec2.CreateEgressOnlyInternetGatewayInput) (r0 *ec2.CreateEgressOnlyInternetGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEgressOnlyInternetGateway", i0)
	r0, _ = returns[0].(*ec2.CreateEgressOnlyInternetGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateEgressOnlyInternetGatewayRequest(i0 *ec2.CreateEgressOnlyInternetGatewayInput) (r0 *request.Request, r1 *ec2.CreateEgressOnlyInternetGatewayOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEgressOnlyInternetGatewayRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateEgressOnlyInternetGatewayOutput)
	return
}

func (d *EC2Double) CreateEgressOnlyInternetGatewayWithContext(i0 context.Context, i1 *ec2.CreateEgressOnlyInternetGatewayInput, i2 ...request.Option) (r0 *ec2.CreateEgressOnlyInternetGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEgressOnlyInternetGatewayWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateEgressOnlyInternetGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateEgressOnlyInternetGatewayWithContext(ctx context.Context, in *ec2.CreateEgressOnlyInternetGatewayInput, _ ...request.Option) (*ec2.CreateEgressOnlyInternetGatewayOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateEgressOnlyInternetGateway cancelled", ctx.Err())
	default:
		return d.CreateEgressOnlyInternetGateway(in)
	}
}

func (d *EC2Double) CreateFleet(i0 *ec2.CreateFleetInput) (r0 *ec2.CreateFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFleet", i0)
	r0, _ = returns[0].(*ec2.CreateFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateFleetRequest(i0 *ec2.CreateFleetInput) (r0 *request.Request, r1 *ec2.CreateFleetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFleetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateFleetOutput)
	return
}

func (d *EC2Double) CreateFleetWithContext(i0 context.Context, i1 *ec2.CreateFleetInput, i2 ...request.Option) (r0 *ec2.CreateFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFleetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateFleetWithContext(ctx context.Context, in *ec2.CreateFleetInput, _ ...request.Option) (*ec2.CreateFleetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateFleet cancelled", ctx.Err())
	default:
		return d.CreateFleet(in)
	}
}

func (d *EC2Double) CreateFlowLogs(i0 *ec2.CreateFlowLogsInput) (r0 *ec2.CreateFlowLogsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFlowLogs", i0)
	r0, _ = returns[0].(*ec2.CreateFlowLogsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateFlowLogsRequest(i0 *ec2.CreateFlowLogsInput) (r0 *request.Request, r1 *ec2.CreateFlowLogsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFlowLogsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateFlowLogsOutput)
	return
}

func (d *EC2Double) CreateFlowLogsWithContext(i0 context.Context, i1 *ec2.CreateFlowLogsInput, i2 ...request.Option) (r0 *ec2.CreateFlowLogsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFlowLogsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateFlowLogsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateFlowLogsWithContext(ctx context.Context, in *ec2.CreateFlowLogsInput, _ ...request.Option) (*ec2.CreateFlowLogsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateFlowLogs cancelled", ctx.Err())
	default:
		return d.CreateFlowLogs(in)
	}
}

func (d *EC2Double) CreateFpgaImage(i0 *ec2.CreateFpgaImageInput) (r0 *ec2.CreateFpgaImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFpgaImage", i0)
	r0, _ = returns[0].(*ec2.CreateFpgaImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateFpgaImageRequest(i0 *ec2.CreateFpgaImageInput) (r0 *request.Request, r1 *ec2.CreateFpgaImageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFpgaImageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateFpgaImageOutput)
	return
}

func (d *EC2Double) CreateFpgaImageWithContext(i0 context.Context, i1 *ec2.CreateFpgaImageInput, i2 ...request.Option) (r0 *ec2.CreateFpgaImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFpgaImageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateFpgaImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateFpgaImageWithContext(ctx context.Context, in *ec2.CreateFpgaImageInput, _ ...request.Option) (*ec2.CreateFpgaImageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateFpgaImage cancelled", ctx.Err())
	default:
		return d.CreateFpgaImage(in)
	}
}

func (d *EC2Double) CreateImage(i0 *ec2.CreateImageInput) (r0 *ec2.CreateImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateImage", i0)
	r0, _ = returns[0].(*ec2.CreateImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateImageRequest(i0 *ec2.CreateImageInput) (r0 *request.Request, r1 *ec2.CreateImageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateImageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateImageOutput)
	return
}

func (d *EC2Double) CreateImageWithContext(i0 context.Context, i1 *ec2.CreateImageInput, i2 ...request.Option) (r0 *ec2.CreateImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateImageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateImageWithContext(ctx context.Context, in *ec2.CreateImageInput, _ ...request.Option) (*ec2.CreateImageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateImage cancelled", ctx.Err())
	default:
		return d.CreateImage(in)
	}
}

func (d *EC2Double) CreateInstanceExportTask(i0 *ec2.CreateInstanceExportTaskInput) (r0 *ec2.CreateInstanceExportTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInstanceExportTask", i0)
	r0, _ = returns[0].(*ec2.CreateInstanceExportTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateInstanceExportTaskRequest(i0 *ec2.CreateInstanceExportTaskInput) (r0 *request.Request, r1 *ec2.CreateInstanceExportTaskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInstanceExportTaskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateInstanceExportTaskOutput)
	return
}

func (d *EC2Double) CreateInstanceExportTaskWithContext(i0 context.Context, i1 *ec2.CreateInstanceExportTaskInput, i2 ...request.Option) (r0 *ec2.CreateInstanceExportTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInstanceExportTaskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateInstanceExportTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateInstanceExportTaskWithContext(ctx context.Context, in *ec2.CreateInstanceExportTaskInput, _ ...request.Option) (*ec2.CreateInstanceExportTaskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateInstanceExportTask cancelled", ctx.Err())
	default:
		return d.CreateInstanceExportTask(in)
	}
}

func (d *EC2Double) CreateInternetGateway(i0 *ec2.CreateInternetGatewayInput) (r0 *ec2.CreateInternetGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInternetGateway", i0)
	r0, _ = returns[0].(*ec2.CreateInternetGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateInternetGatewayRequest(i0 *ec2.CreateInternetGatewayInput) (r0 *request.Request, r1 *ec2.CreateInternetGatewayOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInternetGatewayRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateInternetGatewayOutput)
	return
}

func (d *EC2Double) CreateInternetGatewayWithContext(i0 context.Context, i1 *ec2.CreateInternetGatewayInput, i2 ...request.Option) (r0 *ec2.CreateInternetGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInternetGatewayWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateInternetGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateInternetGatewayWithContext(ctx context.Context, in *ec2.CreateInternetGatewayInput, _ ...request.Option) (*ec2.CreateInternetGatewayOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateInternetGateway cancelled", ctx.Err())
	default:
		return d.CreateInternetGateway(in)
	}
}

func (d *EC2Double) CreateKeyPair(i0 *ec2.CreateKeyPairInput) (r0 *ec2.CreateKeyPairOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateKeyPair", i0)
	r0, _ = returns[0].(*ec2.CreateKeyPairOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateKeyPairRequest(i0 *ec2.CreateKeyPairInput) (r0 *request.Request, r1 *ec2.CreateKeyPairOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateKeyPairRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateKeyPairOutput)
	return
}

func (d *EC2Double) CreateKeyPairWithContext(i0 context.Context, i1 *ec2.CreateKeyPairInput, i2 ...request.Option) (r0 *ec2.CreateKeyPairOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateKeyPairWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateKeyPairOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateKeyPairWithContext(ctx context.Context, in *ec2.CreateKeyPairInput, _ ...request.Option) (*ec2.CreateKeyPairOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateKeyPair cancelled", ctx.Err())
	default:
		return d.CreateKeyPair(in)
	}
}

func (d *EC2Double) CreateLaunchTemplate(i0 *ec2.CreateLaunchTemplateInput) (r0 *ec2.CreateLaunchTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLaunchTemplate", i0)
	r0, _ = returns[0].(*ec2.CreateLaunchTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateLaunchTemplateRequest(i0 *ec2.CreateLaunchTemplateInput) (r0 *request.Request, r1 *ec2.CreateLaunchTemplateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLaunchTemplateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateLaunchTemplateOutput)
	return
}

func (d *EC2Double) CreateLaunchTemplateVersion(i0 *ec2.CreateLaunchTemplateVersionInput) (r0 *ec2.CreateLaunchTemplateVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLaunchTemplateVersion", i0)
	r0, _ = returns[0].(*ec2.CreateLaunchTemplateVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateLaunchTemplateVersionRequest(i0 *ec2.CreateLaunchTemplateVersionInput) (r0 *request.Request, r1 *ec2.CreateLaunchTemplateVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLaunchTemplateVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateLaunchTemplateVersionOutput)
	return
}

func (d *EC2Double) CreateLaunchTemplateVersionWithContext(i0 context.Context, i1 *ec2.CreateLaunchTemplateVersionInput, i2 ...request.Option) (r0 *ec2.CreateLaunchTemplateVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLaunchTemplateVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateLaunchTemplateVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateLaunchTemplateVersionWithContext(ctx context.Context, in *ec2.CreateLaunchTemplateVersionInput, _ ...request.Option) (*ec2.CreateLaunchTemplateVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateLaunchTemplateVersion cancelled", ctx.Err())
	default:
		return d.CreateLaunchTemplateVersion(in)
	}
}

func (d *EC2Double) CreateLaunchTemplateWithContext(i0 context.Context, i1 *ec2.CreateLaunchTemplateInput, i2 ...request.Option) (r0 *ec2.CreateLaunchTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLaunchTemplateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateLaunchTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateLaunchTemplateWithContext(ctx context.Context, in *ec2.CreateLaunchTemplateInput, _ ...request.Option) (*ec2.CreateLaunchTemplateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateLaunchTemplate cancelled", ctx.Err())
	default:
		return d.CreateLaunchTemplate(in)
	}
}

func (d *EC2Double) CreateLocalGatewayRoute(i0 *ec2.CreateLocalGatewayRouteInput) (r0 *ec2.CreateLocalGatewayRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLocalGatewayRoute", i0)
	r0, _ = returns[0].(*ec2.CreateLocalGatewayRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateLocalGatewayRouteRequest(i0 *ec2.CreateLocalGatewayRouteInput) (r0 *request.Request, r1 *ec2.CreateLocalGatewayRouteOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLocalGatewayRouteRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateLocalGatewayRouteOutput)
	return
}

func (d *EC2Double) CreateLocalGatewayRouteTableVpcAssociation(i0 *ec2.CreateLocalGatewayRouteTableVpcAssociationInput) (r0 *ec2.CreateLocalGatewayRouteTableVpcAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLocalGatewayRouteTableVpcAssociation", i0)
	r0, _ = returns[0].(*ec2.CreateLocalGatewayRouteTableVpcAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateLocalGatewayRouteTableVpcAssociationRequest(i0 *ec2.CreateLocalGatewayRouteTableVpcAssociationInput) (r0 *request.Request, r1 *ec2.CreateLocalGatewayRouteTableVpcAssociationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLocalGatewayRouteTableVpcAssociationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateLocalGatewayRouteTableVpcAssociationOutput)
	return
}

func (d *EC2Double) CreateLocalGatewayRouteTableVpcAssociationWithContext(i0 context.Context, i1 *ec2.CreateLocalGatewayRouteTableVpcAssociationInput, i2 ...request.Option) (r0 *ec2.CreateLocalGatewayRouteTableVpcAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLocalGatewayRouteTableVpcAssociationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateLocalGatewayRouteTableVpcAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateLocalGatewayRouteTableVpcAssociationWithContext(ctx context.Context, in *ec2.CreateLocalGatewayRouteTableVpcAssociationInput, _ ...request.Option) (*ec2.CreateLocalGatewayRouteTableVpcAssociationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateLocalGatewayRouteTableVpcAssociation cancelled", ctx.Err())
	default:
		return d.CreateLocalGatewayRouteTableVpcAssociation(in)
	}
}

func (d *EC2Double) CreateLocalGatewayRouteWithContext(i0 context.Context, i1 *ec2.CreateLocalGatewayRouteInput, i2 ...request.Option) (r0 *ec2.CreateLocalGatewayRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLocalGatewayRouteWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateLocalGatewayRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateLocalGatewayRouteWithContext(ctx context.Context, in *ec2.CreateLocalGatewayRouteInput, _ ...request.Option) (*ec2.CreateLocalGatewayRouteOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateLocalGatewayRoute cancelled", ctx.Err())
	default:
		return d.CreateLocalGatewayRoute(in)
	}
}

func (d *EC2Double) CreateNatGateway(i0 *ec2.CreateNatGatewayInput) (r0 *ec2.CreateNatGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNatGateway", i0)
	r0, _ = returns[0].(*ec2.CreateNatGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateNatGatewayRequest(i0 *ec2.CreateNatGatewayInput) (r0 *request.Request, r1 *ec2.CreateNatGatewayOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNatGatewayRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateNatGatewayOutput)
	return
}

func (d *EC2Double) CreateNatGatewayWithContext(i0 context.Context, i1 *ec2.CreateNatGatewayInput, i2 ...request.Option) (r0 *ec2.CreateNatGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNatGatewayWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateNatGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateNatGatewayWithContext(ctx context.Context, in *ec2.CreateNatGatewayInput, _ ...request.Option) (*ec2.CreateNatGatewayOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateNatGateway cancelled", ctx.Err())
	default:
		return d.CreateNatGateway(in)
	}
}

func (d *EC2Double) CreateNetworkAcl(i0 *ec2.CreateNetworkAclInput) (r0 *ec2.CreateNetworkAclOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNetworkAcl", i0)
	r0, _ = returns[0].(*ec2.CreateNetworkAclOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateNetworkAclEntry(i0 *ec2.CreateNetworkAclEntryInput) (r0 *ec2.CreateNetworkAclEntryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNetworkAclEntry", i0)
	r0, _ = returns[0].(*ec2.CreateNetworkAclEntryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateNetworkAclEntryRequest(i0 *ec2.CreateNetworkAclEntryInput) (r0 *request.Request, r1 *ec2.CreateNetworkAclEntryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNetworkAclEntryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateNetworkAclEntryOutput)
	return
}

func (d *EC2Double) CreateNetworkAclEntryWithContext(i0 context.Context, i1 *ec2.CreateNetworkAclEntryInput, i2 ...request.Option) (r0 *ec2.CreateNetworkAclEntryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNetworkAclEntryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateNetworkAclEntryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateNetworkAclEntryWithContext(ctx context.Context, in *ec2.CreateNetworkAclEntryInput, _ ...request.Option) (*ec2.CreateNetworkAclEntryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateNetworkAclEntry cancelled", ctx.Err())
	default:
		return d.CreateNetworkAclEntry(in)
	}
}

func (d *EC2Double) CreateNetworkAclRequest(i0 *ec2.CreateNetworkAclInput) (r0 *request.Request, r1 *ec2.CreateNetworkAclOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNetworkAclRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateNetworkAclOutput)
	return
}

func (d *EC2Double) CreateNetworkAclWithContext(i0 context.Context, i1 *ec2.CreateNetworkAclInput, i2 ...request.Option) (r0 *ec2.CreateNetworkAclOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNetworkAclWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateNetworkAclOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateNetworkAclWithContext(ctx context.Context, in *ec2.CreateNetworkAclInput, _ ...request.Option) (*ec2.CreateNetworkAclOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateNetworkAcl cancelled", ctx.Err())
	default:
		return d.CreateNetworkAcl(in)
	}
}

func (d *EC2Double) CreateNetworkInterface(i0 *ec2.CreateNetworkInterfaceInput) (r0 *ec2.CreateNetworkInterfaceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNetworkInterface", i0)
	r0, _ = returns[0].(*ec2.CreateNetworkInterfaceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateNetworkInterfacePermission(i0 *ec2.CreateNetworkInterfacePermissionInput) (r0 *ec2.CreateNetworkInterfacePermissionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNetworkInterfacePermission", i0)
	r0, _ = returns[0].(*ec2.CreateNetworkInterfacePermissionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateNetworkInterfacePermissionRequest(i0 *ec2.CreateNetworkInterfacePermissionInput) (r0 *request.Request, r1 *ec2.CreateNetworkInterfacePermissionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNetworkInterfacePermissionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateNetworkInterfacePermissionOutput)
	return
}

func (d *EC2Double) CreateNetworkInterfacePermissionWithContext(i0 context.Context, i1 *ec2.CreateNetworkInterfacePermissionInput, i2 ...request.Option) (r0 *ec2.CreateNetworkInterfacePermissionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNetworkInterfacePermissionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateNetworkInterfacePermissionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateNetworkInterfacePermissionWithContext(ctx context.Context, in *ec2.CreateNetworkInterfacePermissionInput, _ ...request.Option) (*ec2.CreateNetworkInterfacePermissionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateNetworkInterfacePermission cancelled", ctx.Err())
	default:
		return d.CreateNetworkInterfacePermission(in)
	}
}

func (d *EC2Double) CreateNetworkInterfaceRequest(i0 *ec2.CreateNetworkInterfaceInput) (r0 *request.Request, r1 *ec2.CreateNetworkInterfaceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNetworkInterfaceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateNetworkInterfaceOutput)
	return
}

func (d *EC2Double) CreateNetworkInterfaceWithContext(i0 context.Context, i1 *ec2.CreateNetworkInterfaceInput, i2 ...request.Option) (r0 *ec2.CreateNetworkInterfaceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNetworkInterfaceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateNetworkInterfaceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateNetworkInterfaceWithContext(ctx context.Context, in *ec2.CreateNetworkInterfaceInput, _ ...request.Option) (*ec2.CreateNetworkInterfaceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateNetworkInterface cancelled", ctx.Err())
	default:
		return d.CreateNetworkInterface(in)
	}
}

func (d *EC2Double) CreatePlacementGroup(i0 *ec2.CreatePlacementGroupInput) (r0 *ec2.CreatePlacementGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePlacementGroup", i0)
	r0, _ = returns[0].(*ec2.CreatePlacementGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreatePlacementGroupRequest(i0 *ec2.CreatePlacementGroupInput) (r0 *request.Request, r1 *ec2.CreatePlacementGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePlacementGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreatePlacementGroupOutput)
	return
}

func (d *EC2Double) CreatePlacementGroupWithContext(i0 context.Context, i1 *ec2.CreatePlacementGroupInput, i2 ...request.Option) (r0 *ec2.CreatePlacementGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePlacementGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreatePlacementGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreatePlacementGroupWithContext(ctx context.Context, in *ec2.CreatePlacementGroupInput, _ ...request.Option) (*ec2.CreatePlacementGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreatePlacementGroup cancelled", ctx.Err())
	default:
		return d.CreatePlacementGroup(in)
	}
}

func (d *EC2Double) CreateReservedInstancesListing(i0 *ec2.CreateReservedInstancesListingInput) (r0 *ec2.CreateReservedInstancesListingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateReservedInstancesListing", i0)
	r0, _ = returns[0].(*ec2.CreateReservedInstancesListingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateReservedInstancesListingRequest(i0 *ec2.CreateReservedInstancesListingInput) (r0 *request.Request, r1 *ec2.CreateReservedInstancesListingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateReservedInstancesListingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateReservedInstancesListingOutput)
	return
}

func (d *EC2Double) CreateReservedInstancesListingWithContext(i0 context.Context, i1 *ec2.CreateReservedInstancesListingInput, i2 ...request.Option) (r0 *ec2.CreateReservedInstancesListingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateReservedInstancesListingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateReservedInstancesListingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateReservedInstancesListingWithContext(ctx context.Context, in *ec2.CreateReservedInstancesListingInput, _ ...request.Option) (*ec2.CreateReservedInstancesListingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateReservedInstancesListing cancelled", ctx.Err())
	default:
		return d.CreateReservedInstancesListing(in)
	}
}

func (d *EC2Double) CreateRoute(i0 *ec2.CreateRouteInput) (r0 *ec2.CreateRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRoute", i0)
	r0, _ = returns[0].(*ec2.CreateRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateRouteRequest(i0 *ec2.CreateRouteInput) (r0 *request.Request, r1 *ec2.CreateRouteOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRouteRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateRouteOutput)
	return
}

func (d *EC2Double) CreateRouteTable(i0 *ec2.CreateRouteTableInput) (r0 *ec2.CreateRouteTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRouteTable", i0)
	r0, _ = returns[0].(*ec2.CreateRouteTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateRouteTableRequest(i0 *ec2.CreateRouteTableInput) (r0 *request.Request, r1 *ec2.CreateRouteTableOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRouteTableRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateRouteTableOutput)
	return
}

func (d *EC2Double) CreateRouteTableWithContext(i0 context.Context, i1 *ec2.CreateRouteTableInput, i2 ...request.Option) (r0 *ec2.CreateRouteTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRouteTableWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateRouteTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateRouteTableWithContext(ctx context.Context, in *ec2.CreateRouteTableInput, _ ...request.Option) (*ec2.CreateRouteTableOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateRouteTable cancelled", ctx.Err())
	default:
		return d.CreateRouteTable(in)
	}
}

func (d *EC2Double) CreateRouteWithContext(i0 context.Context, i1 *ec2.CreateRouteInput, i2 ...request.Option) (r0 *ec2.CreateRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRouteWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateRouteWithContext(ctx context.Context, in *ec2.CreateRouteInput, _ ...request.Option) (*ec2.CreateRouteOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateRoute cancelled", ctx.Err())
	default:
		return d.CreateRoute(in)
	}
}

func (d *EC2Double) CreateSecurityGroup(i0 *ec2.CreateSecurityGroupInput) (r0 *ec2.CreateSecurityGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSecurityGroup", i0)
	r0, _ = returns[0].(*ec2.CreateSecurityGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateSecurityGroupRequest(i0 *ec2.CreateSecurityGroupInput) (r0 *request.Request, r1 *ec2.CreateSecurityGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSecurityGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateSecurityGroupOutput)
	return
}

func (d *EC2Double) CreateSecurityGroupWithContext(i0 context.Context, i1 *ec2.CreateSecurityGroupInput, i2 ...request.Option) (r0 *ec2.CreateSecurityGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSecurityGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateSecurityGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateSecurityGroupWithContext(ctx context.Context, in *ec2.CreateSecurityGroupInput, _ ...request.Option) (*ec2.CreateSecurityGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateSecurityGroup cancelled", ctx.Err())
	default:
		return d.CreateSecurityGroup(in)
	}
}

func (d *EC2Double) CreateSnapshot(i0 *ec2.CreateSnapshotInput) (r0 *ec2.Snapshot, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSnapshot", i0)
	r0, _ = returns[0].(*ec2.Snapshot)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateSnapshotRequest(i0 *ec2.CreateSnapshotInput) (r0 *request.Request, r1 *ec2.Snapshot) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.Snapshot)
	return
}

func (d *EC2Double) CreateSnapshotWithContext(i0 context.Context, i1 *ec2.CreateSnapshotInput, i2 ...request.Option) (r0 *ec2.Snapshot, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.Snapshot)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateSnapshotWithContext(ctx context.Context, in *ec2.CreateSnapshotInput, _ ...request.Option) (*ec2.Snapshot, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateSnapshot cancelled", ctx.Err())
	default:
		return d.CreateSnapshot(in)
	}
}

func (d *EC2Double) CreateSnapshots(i0 *ec2.CreateSnapshotsInput) (r0 *ec2.CreateSnapshotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSnapshots", i0)
	r0, _ = returns[0].(*ec2.CreateSnapshotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateSnapshotsRequest(i0 *ec2.CreateSnapshotsInput) (r0 *request.Request, r1 *ec2.CreateSnapshotsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSnapshotsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateSnapshotsOutput)
	return
}

func (d *EC2Double) CreateSnapshotsWithContext(i0 context.Context, i1 *ec2.CreateSnapshotsInput, i2 ...request.Option) (r0 *ec2.CreateSnapshotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSnapshotsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateSnapshotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateSnapshotsWithContext(ctx context.Context, in *ec2.CreateSnapshotsInput, _ ...request.Option) (*ec2.CreateSnapshotsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateSnapshots cancelled", ctx.Err())
	default:
		return d.CreateSnapshots(in)
	}
}

func (d *EC2Double) CreateSpotDatafeedSubscription(i0 *ec2.CreateSpotDatafeedSubscriptionInput) (r0 *ec2.CreateSpotDatafeedSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSpotDatafeedSubscription", i0)
	r0, _ = returns[0].(*ec2.CreateSpotDatafeedSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateSpotDatafeedSubscriptionRequest(i0 *ec2.CreateSpotDatafeedSubscriptionInput) (r0 *request.Request, r1 *ec2.CreateSpotDatafeedSubscriptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSpotDatafeedSubscriptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateSpotDatafeedSubscriptionOutput)
	return
}

func (d *EC2Double) CreateSpotDatafeedSubscriptionWithContext(i0 context.Context, i1 *ec2.CreateSpotDatafeedSubscriptionInput, i2 ...request.Option) (r0 *ec2.CreateSpotDatafeedSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSpotDatafeedSubscriptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateSpotDatafeedSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateSpotDatafeedSubscriptionWithContext(ctx context.Context, in *ec2.CreateSpotDatafeedSubscriptionInput, _ ...request.Option) (*ec2.CreateSpotDatafeedSubscriptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateSpotDatafeedSubscription cancelled", ctx.Err())
	default:
		return d.CreateSpotDatafeedSubscription(in)
	}
}

func (d *EC2Double) CreateSubnet(i0 *ec2.CreateSubnetInput) (r0 *ec2.CreateSubnetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSubnet", i0)
	r0, _ = returns[0].(*ec2.CreateSubnetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateSubnetRequest(i0 *ec2.CreateSubnetInput) (r0 *request.Request, r1 *ec2.CreateSubnetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSubnetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateSubnetOutput)
	return
}

func (d *EC2Double) CreateSubnetWithContext(i0 context.Context, i1 *ec2.CreateSubnetInput, i2 ...request.Option) (r0 *ec2.CreateSubnetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSubnetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateSubnetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateSubnetWithContext(ctx context.Context, in *ec2.CreateSubnetInput, _ ...request.Option) (*ec2.CreateSubnetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateSubnet cancelled", ctx.Err())
	default:
		return d.CreateSubnet(in)
	}
}

func (d *EC2Double) CreateTags(i0 *ec2.CreateTagsInput) (r0 *ec2.CreateTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTags", i0)
	r0, _ = returns[0].(*ec2.CreateTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateTagsRequest(i0 *ec2.CreateTagsInput) (r0 *request.Request, r1 *ec2.CreateTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateTagsOutput)
	return
}

func (d *EC2Double) CreateTagsWithContext(i0 context.Context, i1 *ec2.CreateTagsInput, i2 ...request.Option) (r0 *ec2.CreateTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateTagsWithContext(ctx context.Context, in *ec2.CreateTagsInput, _ ...request.Option) (*ec2.CreateTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTags cancelled", ctx.Err())
	default:
		return d.CreateTags(in)
	}
}

func (d *EC2Double) CreateTrafficMirrorFilter(i0 *ec2.CreateTrafficMirrorFilterInput) (r0 *ec2.CreateTrafficMirrorFilterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTrafficMirrorFilter", i0)
	r0, _ = returns[0].(*ec2.CreateTrafficMirrorFilterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateTrafficMirrorFilterRequest(i0 *ec2.CreateTrafficMirrorFilterInput) (r0 *request.Request, r1 *ec2.CreateTrafficMirrorFilterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTrafficMirrorFilterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateTrafficMirrorFilterOutput)
	return
}

func (d *EC2Double) CreateTrafficMirrorFilterRule(i0 *ec2.CreateTrafficMirrorFilterRuleInput) (r0 *ec2.CreateTrafficMirrorFilterRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTrafficMirrorFilterRule", i0)
	r0, _ = returns[0].(*ec2.CreateTrafficMirrorFilterRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateTrafficMirrorFilterRuleRequest(i0 *ec2.CreateTrafficMirrorFilterRuleInput) (r0 *request.Request, r1 *ec2.CreateTrafficMirrorFilterRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTrafficMirrorFilterRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateTrafficMirrorFilterRuleOutput)
	return
}

func (d *EC2Double) CreateTrafficMirrorFilterRuleWithContext(i0 context.Context, i1 *ec2.CreateTrafficMirrorFilterRuleInput, i2 ...request.Option) (r0 *ec2.CreateTrafficMirrorFilterRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTrafficMirrorFilterRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateTrafficMirrorFilterRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateTrafficMirrorFilterRuleWithContext(ctx context.Context, in *ec2.CreateTrafficMirrorFilterRuleInput, _ ...request.Option) (*ec2.CreateTrafficMirrorFilterRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTrafficMirrorFilterRule cancelled", ctx.Err())
	default:
		return d.CreateTrafficMirrorFilterRule(in)
	}
}

func (d *EC2Double) CreateTrafficMirrorFilterWithContext(i0 context.Context, i1 *ec2.CreateTrafficMirrorFilterInput, i2 ...request.Option) (r0 *ec2.CreateTrafficMirrorFilterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTrafficMirrorFilterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateTrafficMirrorFilterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateTrafficMirrorFilterWithContext(ctx context.Context, in *ec2.CreateTrafficMirrorFilterInput, _ ...request.Option) (*ec2.CreateTrafficMirrorFilterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTrafficMirrorFilter cancelled", ctx.Err())
	default:
		return d.CreateTrafficMirrorFilter(in)
	}
}

func (d *EC2Double) CreateTrafficMirrorSession(i0 *ec2.CreateTrafficMirrorSessionInput) (r0 *ec2.CreateTrafficMirrorSessionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTrafficMirrorSession", i0)
	r0, _ = returns[0].(*ec2.CreateTrafficMirrorSessionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateTrafficMirrorSessionRequest(i0 *ec2.CreateTrafficMirrorSessionInput) (r0 *request.Request, r1 *ec2.CreateTrafficMirrorSessionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTrafficMirrorSessionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateTrafficMirrorSessionOutput)
	return
}

func (d *EC2Double) CreateTrafficMirrorSessionWithContext(i0 context.Context, i1 *ec2.CreateTrafficMirrorSessionInput, i2 ...request.Option) (r0 *ec2.CreateTrafficMirrorSessionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTrafficMirrorSessionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateTrafficMirrorSessionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateTrafficMirrorSessionWithContext(ctx context.Context, in *ec2.CreateTrafficMirrorSessionInput, _ ...request.Option) (*ec2.CreateTrafficMirrorSessionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTrafficMirrorSession cancelled", ctx.Err())
	default:
		return d.CreateTrafficMirrorSession(in)
	}
}

func (d *EC2Double) CreateTrafficMirrorTarget(i0 *ec2.CreateTrafficMirrorTargetInput) (r0 *ec2.CreateTrafficMirrorTargetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTrafficMirrorTarget", i0)
	r0, _ = returns[0].(*ec2.CreateTrafficMirrorTargetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateTrafficMirrorTargetRequest(i0 *ec2.CreateTrafficMirrorTargetInput) (r0 *request.Request, r1 *ec2.CreateTrafficMirrorTargetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTrafficMirrorTargetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateTrafficMirrorTargetOutput)
	return
}

func (d *EC2Double) CreateTrafficMirrorTargetWithContext(i0 context.Context, i1 *ec2.CreateTrafficMirrorTargetInput, i2 ...request.Option) (r0 *ec2.CreateTrafficMirrorTargetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTrafficMirrorTargetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateTrafficMirrorTargetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateTrafficMirrorTargetWithContext(ctx context.Context, in *ec2.CreateTrafficMirrorTargetInput, _ ...request.Option) (*ec2.CreateTrafficMirrorTargetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTrafficMirrorTarget cancelled", ctx.Err())
	default:
		return d.CreateTrafficMirrorTarget(in)
	}
}

func (d *EC2Double) CreateTransitGateway(i0 *ec2.CreateTransitGatewayInput) (r0 *ec2.CreateTransitGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTransitGateway", i0)
	r0, _ = returns[0].(*ec2.CreateTransitGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateTransitGatewayMulticastDomain(i0 *ec2.CreateTransitGatewayMulticastDomainInput) (r0 *ec2.CreateTransitGatewayMulticastDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTransitGatewayMulticastDomain", i0)
	r0, _ = returns[0].(*ec2.CreateTransitGatewayMulticastDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateTransitGatewayMulticastDomainRequest(i0 *ec2.CreateTransitGatewayMulticastDomainInput) (r0 *request.Request, r1 *ec2.CreateTransitGatewayMulticastDomainOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTransitGatewayMulticastDomainRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateTransitGatewayMulticastDomainOutput)
	return
}

func (d *EC2Double) CreateTransitGatewayMulticastDomainWithContext(i0 context.Context, i1 *ec2.CreateTransitGatewayMulticastDomainInput, i2 ...request.Option) (r0 *ec2.CreateTransitGatewayMulticastDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTransitGatewayMulticastDomainWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateTransitGatewayMulticastDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateTransitGatewayMulticastDomainWithContext(ctx context.Context, in *ec2.CreateTransitGatewayMulticastDomainInput, _ ...request.Option) (*ec2.CreateTransitGatewayMulticastDomainOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTransitGatewayMulticastDomain cancelled", ctx.Err())
	default:
		return d.CreateTransitGatewayMulticastDomain(in)
	}
}

func (d *EC2Double) CreateTransitGatewayPeeringAttachment(i0 *ec2.CreateTransitGatewayPeeringAttachmentInput) (r0 *ec2.CreateTransitGatewayPeeringAttachmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTransitGatewayPeeringAttachment", i0)
	r0, _ = returns[0].(*ec2.CreateTransitGatewayPeeringAttachmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateTransitGatewayPeeringAttachmentRequest(i0 *ec2.CreateTransitGatewayPeeringAttachmentInput) (r0 *request.Request, r1 *ec2.CreateTransitGatewayPeeringAttachmentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTransitGatewayPeeringAttachmentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateTransitGatewayPeeringAttachmentOutput)
	return
}

func (d *EC2Double) CreateTransitGatewayPeeringAttachmentWithContext(i0 context.Context, i1 *ec2.CreateTransitGatewayPeeringAttachmentInput, i2 ...request.Option) (r0 *ec2.CreateTransitGatewayPeeringAttachmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTransitGatewayPeeringAttachmentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateTransitGatewayPeeringAttachmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateTransitGatewayPeeringAttachmentWithContext(ctx context.Context, in *ec2.CreateTransitGatewayPeeringAttachmentInput, _ ...request.Option) (*ec2.CreateTransitGatewayPeeringAttachmentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTransitGatewayPeeringAttachment cancelled", ctx.Err())
	default:
		return d.CreateTransitGatewayPeeringAttachment(in)
	}
}

func (d *EC2Double) CreateTransitGatewayRequest(i0 *ec2.CreateTransitGatewayInput) (r0 *request.Request, r1 *ec2.CreateTransitGatewayOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTransitGatewayRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateTransitGatewayOutput)
	return
}

func (d *EC2Double) CreateTransitGatewayRoute(i0 *ec2.CreateTransitGatewayRouteInput) (r0 *ec2.CreateTransitGatewayRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTransitGatewayRoute", i0)
	r0, _ = returns[0].(*ec2.CreateTransitGatewayRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateTransitGatewayRouteRequest(i0 *ec2.CreateTransitGatewayRouteInput) (r0 *request.Request, r1 *ec2.CreateTransitGatewayRouteOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTransitGatewayRouteRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateTransitGatewayRouteOutput)
	return
}

func (d *EC2Double) CreateTransitGatewayRouteTable(i0 *ec2.CreateTransitGatewayRouteTableInput) (r0 *ec2.CreateTransitGatewayRouteTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTransitGatewayRouteTable", i0)
	r0, _ = returns[0].(*ec2.CreateTransitGatewayRouteTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateTransitGatewayRouteTableRequest(i0 *ec2.CreateTransitGatewayRouteTableInput) (r0 *request.Request, r1 *ec2.CreateTransitGatewayRouteTableOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTransitGatewayRouteTableRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateTransitGatewayRouteTableOutput)
	return
}

func (d *EC2Double) CreateTransitGatewayRouteTableWithContext(i0 context.Context, i1 *ec2.CreateTransitGatewayRouteTableInput, i2 ...request.Option) (r0 *ec2.CreateTransitGatewayRouteTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTransitGatewayRouteTableWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateTransitGatewayRouteTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateTransitGatewayRouteTableWithContext(ctx context.Context, in *ec2.CreateTransitGatewayRouteTableInput, _ ...request.Option) (*ec2.CreateTransitGatewayRouteTableOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTransitGatewayRouteTable cancelled", ctx.Err())
	default:
		return d.CreateTransitGatewayRouteTable(in)
	}
}

func (d *EC2Double) CreateTransitGatewayRouteWithContext(i0 context.Context, i1 *ec2.CreateTransitGatewayRouteInput, i2 ...request.Option) (r0 *ec2.CreateTransitGatewayRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTransitGatewayRouteWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateTransitGatewayRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateTransitGatewayRouteWithContext(ctx context.Context, in *ec2.CreateTransitGatewayRouteInput, _ ...request.Option) (*ec2.CreateTransitGatewayRouteOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTransitGatewayRoute cancelled", ctx.Err())
	default:
		return d.CreateTransitGatewayRoute(in)
	}
}

func (d *EC2Double) CreateTransitGatewayVpcAttachment(i0 *ec2.CreateTransitGatewayVpcAttachmentInput) (r0 *ec2.CreateTransitGatewayVpcAttachmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTransitGatewayVpcAttachment", i0)
	r0, _ = returns[0].(*ec2.CreateTransitGatewayVpcAttachmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateTransitGatewayVpcAttachmentRequest(i0 *ec2.CreateTransitGatewayVpcAttachmentInput) (r0 *request.Request, r1 *ec2.CreateTransitGatewayVpcAttachmentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTransitGatewayVpcAttachmentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateTransitGatewayVpcAttachmentOutput)
	return
}

func (d *EC2Double) CreateTransitGatewayVpcAttachmentWithContext(i0 context.Context, i1 *ec2.CreateTransitGatewayVpcAttachmentInput, i2 ...request.Option) (r0 *ec2.CreateTransitGatewayVpcAttachmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTransitGatewayVpcAttachmentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateTransitGatewayVpcAttachmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateTransitGatewayVpcAttachmentWithContext(ctx context.Context, in *ec2.CreateTransitGatewayVpcAttachmentInput, _ ...request.Option) (*ec2.CreateTransitGatewayVpcAttachmentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTransitGatewayVpcAttachment cancelled", ctx.Err())
	default:
		return d.CreateTransitGatewayVpcAttachment(in)
	}
}

func (d *EC2Double) CreateTransitGatewayWithContext(i0 context.Context, i1 *ec2.CreateTransitGatewayInput, i2 ...request.Option) (r0 *ec2.CreateTransitGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTransitGatewayWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateTransitGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateTransitGatewayWithContext(ctx context.Context, in *ec2.CreateTransitGatewayInput, _ ...request.Option) (*ec2.CreateTransitGatewayOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTransitGateway cancelled", ctx.Err())
	default:
		return d.CreateTransitGateway(in)
	}
}

func (d *EC2Double) CreateVolume(i0 *ec2.CreateVolumeInput) (r0 *ec2.Volume, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVolume", i0)
	r0, _ = returns[0].(*ec2.Volume)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateVolumeRequest(i0 *ec2.CreateVolumeInput) (r0 *request.Request, r1 *ec2.Volume) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVolumeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.Volume)
	return
}

func (d *EC2Double) CreateVolumeWithContext(i0 context.Context, i1 *ec2.CreateVolumeInput, i2 ...request.Option) (r0 *ec2.Volume, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVolumeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.Volume)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateVolumeWithContext(ctx context.Context, in *ec2.CreateVolumeInput, _ ...request.Option) (*ec2.Volume, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateVolume cancelled", ctx.Err())
	default:
		return d.CreateVolume(in)
	}
}

func (d *EC2Double) CreateVpc(i0 *ec2.CreateVpcInput) (r0 *ec2.CreateVpcOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVpc", i0)
	r0, _ = returns[0].(*ec2.CreateVpcOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateVpcEndpoint(i0 *ec2.CreateVpcEndpointInput) (r0 *ec2.CreateVpcEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVpcEndpoint", i0)
	r0, _ = returns[0].(*ec2.CreateVpcEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateVpcEndpointConnectionNotification(i0 *ec2.CreateVpcEndpointConnectionNotificationInput) (r0 *ec2.CreateVpcEndpointConnectionNotificationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVpcEndpointConnectionNotification", i0)
	r0, _ = returns[0].(*ec2.CreateVpcEndpointConnectionNotificationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateVpcEndpointConnectionNotificationRequest(i0 *ec2.CreateVpcEndpointConnectionNotificationInput) (r0 *request.Request, r1 *ec2.CreateVpcEndpointConnectionNotificationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVpcEndpointConnectionNotificationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateVpcEndpointConnectionNotificationOutput)
	return
}

func (d *EC2Double) CreateVpcEndpointConnectionNotificationWithContext(i0 context.Context, i1 *ec2.CreateVpcEndpointConnectionNotificationInput, i2 ...request.Option) (r0 *ec2.CreateVpcEndpointConnectionNotificationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVpcEndpointConnectionNotificationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateVpcEndpointConnectionNotificationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateVpcEndpointConnectionNotificationWithContext(ctx context.Context, in *ec2.CreateVpcEndpointConnectionNotificationInput, _ ...request.Option) (*ec2.CreateVpcEndpointConnectionNotificationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateVpcEndpointConnectionNotification cancelled", ctx.Err())
	default:
		return d.CreateVpcEndpointConnectionNotification(in)
	}
}

func (d *EC2Double) CreateVpcEndpointRequest(i0 *ec2.CreateVpcEndpointInput) (r0 *request.Request, r1 *ec2.CreateVpcEndpointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVpcEndpointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateVpcEndpointOutput)
	return
}

func (d *EC2Double) CreateVpcEndpointServiceConfiguration(i0 *ec2.CreateVpcEndpointServiceConfigurationInput) (r0 *ec2.CreateVpcEndpointServiceConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVpcEndpointServiceConfiguration", i0)
	r0, _ = returns[0].(*ec2.CreateVpcEndpointServiceConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateVpcEndpointServiceConfigurationRequest(i0 *ec2.CreateVpcEndpointServiceConfigurationInput) (r0 *request.Request, r1 *ec2.CreateVpcEndpointServiceConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVpcEndpointServiceConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateVpcEndpointServiceConfigurationOutput)
	return
}

func (d *EC2Double) CreateVpcEndpointServiceConfigurationWithContext(i0 context.Context, i1 *ec2.CreateVpcEndpointServiceConfigurationInput, i2 ...request.Option) (r0 *ec2.CreateVpcEndpointServiceConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVpcEndpointServiceConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateVpcEndpointServiceConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateVpcEndpointServiceConfigurationWithContext(ctx context.Context, in *ec2.CreateVpcEndpointServiceConfigurationInput, _ ...request.Option) (*ec2.CreateVpcEndpointServiceConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateVpcEndpointServiceConfiguration cancelled", ctx.Err())
	default:
		return d.CreateVpcEndpointServiceConfiguration(in)
	}
}

func (d *EC2Double) CreateVpcEndpointWithContext(i0 context.Context, i1 *ec2.CreateVpcEndpointInput, i2 ...request.Option) (r0 *ec2.CreateVpcEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVpcEndpointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateVpcEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateVpcEndpointWithContext(ctx context.Context, in *ec2.CreateVpcEndpointInput, _ ...request.Option) (*ec2.CreateVpcEndpointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateVpcEndpoint cancelled", ctx.Err())
	default:
		return d.CreateVpcEndpoint(in)
	}
}

func (d *EC2Double) CreateVpcPeeringConnection(i0 *ec2.CreateVpcPeeringConnectionInput) (r0 *ec2.CreateVpcPeeringConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVpcPeeringConnection", i0)
	r0, _ = returns[0].(*ec2.CreateVpcPeeringConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateVpcPeeringConnectionRequest(i0 *ec2.CreateVpcPeeringConnectionInput) (r0 *request.Request, r1 *ec2.CreateVpcPeeringConnectionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVpcPeeringConnectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateVpcPeeringConnectionOutput)
	return
}

func (d *EC2Double) CreateVpcPeeringConnectionWithContext(i0 context.Context, i1 *ec2.CreateVpcPeeringConnectionInput, i2 ...request.Option) (r0 *ec2.CreateVpcPeeringConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVpcPeeringConnectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateVpcPeeringConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateVpcPeeringConnectionWithContext(ctx context.Context, in *ec2.CreateVpcPeeringConnectionInput, _ ...request.Option) (*ec2.CreateVpcPeeringConnectionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateVpcPeeringConnection cancelled", ctx.Err())
	default:
		return d.CreateVpcPeeringConnection(in)
	}
}

func (d *EC2Double) CreateVpcRequest(i0 *ec2.CreateVpcInput) (r0 *request.Request, r1 *ec2.CreateVpcOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVpcRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateVpcOutput)
	return
}

func (d *EC2Double) CreateVpcWithContext(i0 context.Context, i1 *ec2.CreateVpcInput, i2 ...request.Option) (r0 *ec2.CreateVpcOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVpcWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateVpcOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateVpcWithContext(ctx context.Context, in *ec2.CreateVpcInput, _ ...request.Option) (*ec2.CreateVpcOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateVpc cancelled", ctx.Err())
	default:
		return d.CreateVpc(in)
	}
}

func (d *EC2Double) CreateVpnConnection(i0 *ec2.CreateVpnConnectionInput) (r0 *ec2.CreateVpnConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVpnConnection", i0)
	r0, _ = returns[0].(*ec2.CreateVpnConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateVpnConnectionRequest(i0 *ec2.CreateVpnConnectionInput) (r0 *request.Request, r1 *ec2.CreateVpnConnectionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVpnConnectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateVpnConnectionOutput)
	return
}

func (d *EC2Double) CreateVpnConnectionRoute(i0 *ec2.CreateVpnConnectionRouteInput) (r0 *ec2.CreateVpnConnectionRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVpnConnectionRoute", i0)
	r0, _ = returns[0].(*ec2.CreateVpnConnectionRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateVpnConnectionRouteRequest(i0 *ec2.CreateVpnConnectionRouteInput) (r0 *request.Request, r1 *ec2.CreateVpnConnectionRouteOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVpnConnectionRouteRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateVpnConnectionRouteOutput)
	return
}

func (d *EC2Double) CreateVpnConnectionRouteWithContext(i0 context.Context, i1 *ec2.CreateVpnConnectionRouteInput, i2 ...request.Option) (r0 *ec2.CreateVpnConnectionRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVpnConnectionRouteWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateVpnConnectionRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateVpnConnectionRouteWithContext(ctx context.Context, in *ec2.CreateVpnConnectionRouteInput, _ ...request.Option) (*ec2.CreateVpnConnectionRouteOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateVpnConnectionRoute cancelled", ctx.Err())
	default:
		return d.CreateVpnConnectionRoute(in)
	}
}

func (d *EC2Double) CreateVpnConnectionWithContext(i0 context.Context, i1 *ec2.CreateVpnConnectionInput, i2 ...request.Option) (r0 *ec2.CreateVpnConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVpnConnectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateVpnConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateVpnConnectionWithContext(ctx context.Context, in *ec2.CreateVpnConnectionInput, _ ...request.Option) (*ec2.CreateVpnConnectionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateVpnConnection cancelled", ctx.Err())
	default:
		return d.CreateVpnConnection(in)
	}
}

func (d *EC2Double) CreateVpnGateway(i0 *ec2.CreateVpnGatewayInput) (r0 *ec2.CreateVpnGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVpnGateway", i0)
	r0, _ = returns[0].(*ec2.CreateVpnGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) CreateVpnGatewayRequest(i0 *ec2.CreateVpnGatewayInput) (r0 *request.Request, r1 *ec2.CreateVpnGatewayOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVpnGatewayRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.CreateVpnGatewayOutput)
	return
}

func (d *EC2Double) CreateVpnGatewayWithContext(i0 context.Context, i1 *ec2.CreateVpnGatewayInput, i2 ...request.Option) (r0 *ec2.CreateVpnGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVpnGatewayWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.CreateVpnGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeCreateVpnGatewayWithContext(ctx context.Context, in *ec2.CreateVpnGatewayInput, _ ...request.Option) (*ec2.CreateVpnGatewayOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateVpnGateway cancelled", ctx.Err())
	default:
		return d.CreateVpnGateway(in)
	}
}

func (d *EC2Double) DeleteClientVpnEndpoint(i0 *ec2.DeleteClientVpnEndpointInput) (r0 *ec2.DeleteClientVpnEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteClientVpnEndpoint", i0)
	r0, _ = returns[0].(*ec2.DeleteClientVpnEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteClientVpnEndpointRequest(i0 *ec2.DeleteClientVpnEndpointInput) (r0 *request.Request, r1 *ec2.DeleteClientVpnEndpointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteClientVpnEndpointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteClientVpnEndpointOutput)
	return
}

func (d *EC2Double) DeleteClientVpnEndpointWithContext(i0 context.Context, i1 *ec2.DeleteClientVpnEndpointInput, i2 ...request.Option) (r0 *ec2.DeleteClientVpnEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteClientVpnEndpointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteClientVpnEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteClientVpnEndpointWithContext(ctx context.Context, in *ec2.DeleteClientVpnEndpointInput, _ ...request.Option) (*ec2.DeleteClientVpnEndpointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteClientVpnEndpoint cancelled", ctx.Err())
	default:
		return d.DeleteClientVpnEndpoint(in)
	}
}

func (d *EC2Double) DeleteClientVpnRoute(i0 *ec2.DeleteClientVpnRouteInput) (r0 *ec2.DeleteClientVpnRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteClientVpnRoute", i0)
	r0, _ = returns[0].(*ec2.DeleteClientVpnRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteClientVpnRouteRequest(i0 *ec2.DeleteClientVpnRouteInput) (r0 *request.Request, r1 *ec2.DeleteClientVpnRouteOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteClientVpnRouteRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteClientVpnRouteOutput)
	return
}

func (d *EC2Double) DeleteClientVpnRouteWithContext(i0 context.Context, i1 *ec2.DeleteClientVpnRouteInput, i2 ...request.Option) (r0 *ec2.DeleteClientVpnRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteClientVpnRouteWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteClientVpnRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteClientVpnRouteWithContext(ctx context.Context, in *ec2.DeleteClientVpnRouteInput, _ ...request.Option) (*ec2.DeleteClientVpnRouteOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteClientVpnRoute cancelled", ctx.Err())
	default:
		return d.DeleteClientVpnRoute(in)
	}
}

func (d *EC2Double) DeleteCustomerGateway(i0 *ec2.DeleteCustomerGatewayInput) (r0 *ec2.DeleteCustomerGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCustomerGateway", i0)
	r0, _ = returns[0].(*ec2.DeleteCustomerGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteCustomerGatewayRequest(i0 *ec2.DeleteCustomerGatewayInput) (r0 *request.Request, r1 *ec2.DeleteCustomerGatewayOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCustomerGatewayRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteCustomerGatewayOutput)
	return
}

func (d *EC2Double) DeleteCustomerGatewayWithContext(i0 context.Context, i1 *ec2.DeleteCustomerGatewayInput, i2 ...request.Option) (r0 *ec2.DeleteCustomerGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCustomerGatewayWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteCustomerGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteCustomerGatewayWithContext(ctx context.Context, in *ec2.DeleteCustomerGatewayInput, _ ...request.Option) (*ec2.DeleteCustomerGatewayOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteCustomerGateway cancelled", ctx.Err())
	default:
		return d.DeleteCustomerGateway(in)
	}
}

func (d *EC2Double) DeleteDhcpOptions(i0 *ec2.DeleteDhcpOptionsInput) (r0 *ec2.DeleteDhcpOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDhcpOptions", i0)
	r0, _ = returns[0].(*ec2.DeleteDhcpOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteDhcpOptionsRequest(i0 *ec2.DeleteDhcpOptionsInput) (r0 *request.Request, r1 *ec2.DeleteDhcpOptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDhcpOptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteDhcpOptionsOutput)
	return
}

func (d *EC2Double) DeleteDhcpOptionsWithContext(i0 context.Context, i1 *ec2.DeleteDhcpOptionsInput, i2 ...request.Option) (r0 *ec2.DeleteDhcpOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDhcpOptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteDhcpOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteDhcpOptionsWithContext(ctx context.Context, in *ec2.DeleteDhcpOptionsInput, _ ...request.Option) (*ec2.DeleteDhcpOptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDhcpOptions cancelled", ctx.Err())
	default:
		return d.DeleteDhcpOptions(in)
	}
}

func (d *EC2Double) DeleteEgressOnlyInternetGateway(i0 *ec2.DeleteEgressOnlyInternetGatewayInput) (r0 *ec2.DeleteEgressOnlyInternetGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEgressOnlyInternetGateway", i0)
	r0, _ = returns[0].(*ec2.DeleteEgressOnlyInternetGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteEgressOnlyInternetGatewayRequest(i0 *ec2.DeleteEgressOnlyInternetGatewayInput) (r0 *request.Request, r1 *ec2.DeleteEgressOnlyInternetGatewayOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEgressOnlyInternetGatewayRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteEgressOnlyInternetGatewayOutput)
	return
}

func (d *EC2Double) DeleteEgressOnlyInternetGatewayWithContext(i0 context.Context, i1 *ec2.DeleteEgressOnlyInternetGatewayInput, i2 ...request.Option) (r0 *ec2.DeleteEgressOnlyInternetGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEgressOnlyInternetGatewayWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteEgressOnlyInternetGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteEgressOnlyInternetGatewayWithContext(ctx context.Context, in *ec2.DeleteEgressOnlyInternetGatewayInput, _ ...request.Option) (*ec2.DeleteEgressOnlyInternetGatewayOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteEgressOnlyInternetGateway cancelled", ctx.Err())
	default:
		return d.DeleteEgressOnlyInternetGateway(in)
	}
}

func (d *EC2Double) DeleteFleets(i0 *ec2.DeleteFleetsInput) (r0 *ec2.DeleteFleetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFleets", i0)
	r0, _ = returns[0].(*ec2.DeleteFleetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteFleetsRequest(i0 *ec2.DeleteFleetsInput) (r0 *request.Request, r1 *ec2.DeleteFleetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFleetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteFleetsOutput)
	return
}

func (d *EC2Double) DeleteFleetsWithContext(i0 context.Context, i1 *ec2.DeleteFleetsInput, i2 ...request.Option) (r0 *ec2.DeleteFleetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFleetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteFleetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteFleetsWithContext(ctx context.Context, in *ec2.DeleteFleetsInput, _ ...request.Option) (*ec2.DeleteFleetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteFleets cancelled", ctx.Err())
	default:
		return d.DeleteFleets(in)
	}
}

func (d *EC2Double) DeleteFlowLogs(i0 *ec2.DeleteFlowLogsInput) (r0 *ec2.DeleteFlowLogsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFlowLogs", i0)
	r0, _ = returns[0].(*ec2.DeleteFlowLogsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteFlowLogsRequest(i0 *ec2.DeleteFlowLogsInput) (r0 *request.Request, r1 *ec2.DeleteFlowLogsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFlowLogsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteFlowLogsOutput)
	return
}

func (d *EC2Double) DeleteFlowLogsWithContext(i0 context.Context, i1 *ec2.DeleteFlowLogsInput, i2 ...request.Option) (r0 *ec2.DeleteFlowLogsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFlowLogsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteFlowLogsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteFlowLogsWithContext(ctx context.Context, in *ec2.DeleteFlowLogsInput, _ ...request.Option) (*ec2.DeleteFlowLogsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteFlowLogs cancelled", ctx.Err())
	default:
		return d.DeleteFlowLogs(in)
	}
}

func (d *EC2Double) DeleteFpgaImage(i0 *ec2.DeleteFpgaImageInput) (r0 *ec2.DeleteFpgaImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFpgaImage", i0)
	r0, _ = returns[0].(*ec2.DeleteFpgaImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteFpgaImageRequest(i0 *ec2.DeleteFpgaImageInput) (r0 *request.Request, r1 *ec2.DeleteFpgaImageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFpgaImageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteFpgaImageOutput)
	return
}

func (d *EC2Double) DeleteFpgaImageWithContext(i0 context.Context, i1 *ec2.DeleteFpgaImageInput, i2 ...request.Option) (r0 *ec2.DeleteFpgaImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFpgaImageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteFpgaImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteFpgaImageWithContext(ctx context.Context, in *ec2.DeleteFpgaImageInput, _ ...request.Option) (*ec2.DeleteFpgaImageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteFpgaImage cancelled", ctx.Err())
	default:
		return d.DeleteFpgaImage(in)
	}
}

func (d *EC2Double) DeleteInternetGateway(i0 *ec2.DeleteInternetGatewayInput) (r0 *ec2.DeleteInternetGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInternetGateway", i0)
	r0, _ = returns[0].(*ec2.DeleteInternetGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteInternetGatewayRequest(i0 *ec2.DeleteInternetGatewayInput) (r0 *request.Request, r1 *ec2.DeleteInternetGatewayOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInternetGatewayRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteInternetGatewayOutput)
	return
}

func (d *EC2Double) DeleteInternetGatewayWithContext(i0 context.Context, i1 *ec2.DeleteInternetGatewayInput, i2 ...request.Option) (r0 *ec2.DeleteInternetGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInternetGatewayWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteInternetGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteInternetGatewayWithContext(ctx context.Context, in *ec2.DeleteInternetGatewayInput, _ ...request.Option) (*ec2.DeleteInternetGatewayOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteInternetGateway cancelled", ctx.Err())
	default:
		return d.DeleteInternetGateway(in)
	}
}

func (d *EC2Double) DeleteKeyPair(i0 *ec2.DeleteKeyPairInput) (r0 *ec2.DeleteKeyPairOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteKeyPair", i0)
	r0, _ = returns[0].(*ec2.DeleteKeyPairOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteKeyPairRequest(i0 *ec2.DeleteKeyPairInput) (r0 *request.Request, r1 *ec2.DeleteKeyPairOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteKeyPairRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteKeyPairOutput)
	return
}

func (d *EC2Double) DeleteKeyPairWithContext(i0 context.Context, i1 *ec2.DeleteKeyPairInput, i2 ...request.Option) (r0 *ec2.DeleteKeyPairOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteKeyPairWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteKeyPairOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteKeyPairWithContext(ctx context.Context, in *ec2.DeleteKeyPairInput, _ ...request.Option) (*ec2.DeleteKeyPairOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteKeyPair cancelled", ctx.Err())
	default:
		return d.DeleteKeyPair(in)
	}
}

func (d *EC2Double) DeleteLaunchTemplate(i0 *ec2.DeleteLaunchTemplateInput) (r0 *ec2.DeleteLaunchTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLaunchTemplate", i0)
	r0, _ = returns[0].(*ec2.DeleteLaunchTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteLaunchTemplateRequest(i0 *ec2.DeleteLaunchTemplateInput) (r0 *request.Request, r1 *ec2.DeleteLaunchTemplateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLaunchTemplateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteLaunchTemplateOutput)
	return
}

func (d *EC2Double) DeleteLaunchTemplateVersions(i0 *ec2.DeleteLaunchTemplateVersionsInput) (r0 *ec2.DeleteLaunchTemplateVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLaunchTemplateVersions", i0)
	r0, _ = returns[0].(*ec2.DeleteLaunchTemplateVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteLaunchTemplateVersionsRequest(i0 *ec2.DeleteLaunchTemplateVersionsInput) (r0 *request.Request, r1 *ec2.DeleteLaunchTemplateVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLaunchTemplateVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteLaunchTemplateVersionsOutput)
	return
}

func (d *EC2Double) DeleteLaunchTemplateVersionsWithContext(i0 context.Context, i1 *ec2.DeleteLaunchTemplateVersionsInput, i2 ...request.Option) (r0 *ec2.DeleteLaunchTemplateVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLaunchTemplateVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteLaunchTemplateVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteLaunchTemplateVersionsWithContext(ctx context.Context, in *ec2.DeleteLaunchTemplateVersionsInput, _ ...request.Option) (*ec2.DeleteLaunchTemplateVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteLaunchTemplateVersions cancelled", ctx.Err())
	default:
		return d.DeleteLaunchTemplateVersions(in)
	}
}

func (d *EC2Double) DeleteLaunchTemplateWithContext(i0 context.Context, i1 *ec2.DeleteLaunchTemplateInput, i2 ...request.Option) (r0 *ec2.DeleteLaunchTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLaunchTemplateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteLaunchTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteLaunchTemplateWithContext(ctx context.Context, in *ec2.DeleteLaunchTemplateInput, _ ...request.Option) (*ec2.DeleteLaunchTemplateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteLaunchTemplate cancelled", ctx.Err())
	default:
		return d.DeleteLaunchTemplate(in)
	}
}

func (d *EC2Double) DeleteLocalGatewayRoute(i0 *ec2.DeleteLocalGatewayRouteInput) (r0 *ec2.DeleteLocalGatewayRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLocalGatewayRoute", i0)
	r0, _ = returns[0].(*ec2.DeleteLocalGatewayRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteLocalGatewayRouteRequest(i0 *ec2.DeleteLocalGatewayRouteInput) (r0 *request.Request, r1 *ec2.DeleteLocalGatewayRouteOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLocalGatewayRouteRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteLocalGatewayRouteOutput)
	return
}

func (d *EC2Double) DeleteLocalGatewayRouteTableVpcAssociation(i0 *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput) (r0 *ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLocalGatewayRouteTableVpcAssociation", i0)
	r0, _ = returns[0].(*ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteLocalGatewayRouteTableVpcAssociationRequest(i0 *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput) (r0 *request.Request, r1 *ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLocalGatewayRouteTableVpcAssociationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput)
	return
}

func (d *EC2Double) DeleteLocalGatewayRouteTableVpcAssociationWithContext(i0 context.Context, i1 *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput, i2 ...request.Option) (r0 *ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLocalGatewayRouteTableVpcAssociationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteLocalGatewayRouteTableVpcAssociationWithContext(ctx context.Context, in *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput, _ ...request.Option) (*ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteLocalGatewayRouteTableVpcAssociation cancelled", ctx.Err())
	default:
		return d.DeleteLocalGatewayRouteTableVpcAssociation(in)
	}
}

func (d *EC2Double) DeleteLocalGatewayRouteWithContext(i0 context.Context, i1 *ec2.DeleteLocalGatewayRouteInput, i2 ...request.Option) (r0 *ec2.DeleteLocalGatewayRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLocalGatewayRouteWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteLocalGatewayRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteLocalGatewayRouteWithContext(ctx context.Context, in *ec2.DeleteLocalGatewayRouteInput, _ ...request.Option) (*ec2.DeleteLocalGatewayRouteOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteLocalGatewayRoute cancelled", ctx.Err())
	default:
		return d.DeleteLocalGatewayRoute(in)
	}
}

func (d *EC2Double) DeleteNatGateway(i0 *ec2.DeleteNatGatewayInput) (r0 *ec2.DeleteNatGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNatGateway", i0)
	r0, _ = returns[0].(*ec2.DeleteNatGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteNatGatewayRequest(i0 *ec2.DeleteNatGatewayInput) (r0 *request.Request, r1 *ec2.DeleteNatGatewayOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNatGatewayRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteNatGatewayOutput)
	return
}

func (d *EC2Double) DeleteNatGatewayWithContext(i0 context.Context, i1 *ec2.DeleteNatGatewayInput, i2 ...request.Option) (r0 *ec2.DeleteNatGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNatGatewayWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteNatGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteNatGatewayWithContext(ctx context.Context, in *ec2.DeleteNatGatewayInput, _ ...request.Option) (*ec2.DeleteNatGatewayOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteNatGateway cancelled", ctx.Err())
	default:
		return d.DeleteNatGateway(in)
	}
}

func (d *EC2Double) DeleteNetworkAcl(i0 *ec2.DeleteNetworkAclInput) (r0 *ec2.DeleteNetworkAclOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNetworkAcl", i0)
	r0, _ = returns[0].(*ec2.DeleteNetworkAclOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteNetworkAclEntry(i0 *ec2.DeleteNetworkAclEntryInput) (r0 *ec2.DeleteNetworkAclEntryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNetworkAclEntry", i0)
	r0, _ = returns[0].(*ec2.DeleteNetworkAclEntryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteNetworkAclEntryRequest(i0 *ec2.DeleteNetworkAclEntryInput) (r0 *request.Request, r1 *ec2.DeleteNetworkAclEntryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNetworkAclEntryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteNetworkAclEntryOutput)
	return
}

func (d *EC2Double) DeleteNetworkAclEntryWithContext(i0 context.Context, i1 *ec2.DeleteNetworkAclEntryInput, i2 ...request.Option) (r0 *ec2.DeleteNetworkAclEntryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNetworkAclEntryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteNetworkAclEntryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteNetworkAclEntryWithContext(ctx context.Context, in *ec2.DeleteNetworkAclEntryInput, _ ...request.Option) (*ec2.DeleteNetworkAclEntryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteNetworkAclEntry cancelled", ctx.Err())
	default:
		return d.DeleteNetworkAclEntry(in)
	}
}

func (d *EC2Double) DeleteNetworkAclRequest(i0 *ec2.DeleteNetworkAclInput) (r0 *request.Request, r1 *ec2.DeleteNetworkAclOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNetworkAclRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteNetworkAclOutput)
	return
}

func (d *EC2Double) DeleteNetworkAclWithContext(i0 context.Context, i1 *ec2.DeleteNetworkAclInput, i2 ...request.Option) (r0 *ec2.DeleteNetworkAclOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNetworkAclWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteNetworkAclOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteNetworkAclWithContext(ctx context.Context, in *ec2.DeleteNetworkAclInput, _ ...request.Option) (*ec2.DeleteNetworkAclOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteNetworkAcl cancelled", ctx.Err())
	default:
		return d.DeleteNetworkAcl(in)
	}
}

func (d *EC2Double) DeleteNetworkInterface(i0 *ec2.DeleteNetworkInterfaceInput) (r0 *ec2.DeleteNetworkInterfaceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNetworkInterface", i0)
	r0, _ = returns[0].(*ec2.DeleteNetworkInterfaceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteNetworkInterfacePermission(i0 *ec2.DeleteNetworkInterfacePermissionInput) (r0 *ec2.DeleteNetworkInterfacePermissionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNetworkInterfacePermission", i0)
	r0, _ = returns[0].(*ec2.DeleteNetworkInterfacePermissionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteNetworkInterfacePermissionRequest(i0 *ec2.DeleteNetworkInterfacePermissionInput) (r0 *request.Request, r1 *ec2.DeleteNetworkInterfacePermissionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNetworkInterfacePermissionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteNetworkInterfacePermissionOutput)
	return
}

func (d *EC2Double) DeleteNetworkInterfacePermissionWithContext(i0 context.Context, i1 *ec2.DeleteNetworkInterfacePermissionInput, i2 ...request.Option) (r0 *ec2.DeleteNetworkInterfacePermissionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNetworkInterfacePermissionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteNetworkInterfacePermissionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteNetworkInterfacePermissionWithContext(ctx context.Context, in *ec2.DeleteNetworkInterfacePermissionInput, _ ...request.Option) (*ec2.DeleteNetworkInterfacePermissionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteNetworkInterfacePermission cancelled", ctx.Err())
	default:
		return d.DeleteNetworkInterfacePermission(in)
	}
}

func (d *EC2Double) DeleteNetworkInterfaceRequest(i0 *ec2.DeleteNetworkInterfaceInput) (r0 *request.Request, r1 *ec2.DeleteNetworkInterfaceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNetworkInterfaceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteNetworkInterfaceOutput)
	return
}

func (d *EC2Double) DeleteNetworkInterfaceWithContext(i0 context.Context, i1 *ec2.DeleteNetworkInterfaceInput, i2 ...request.Option) (r0 *ec2.DeleteNetworkInterfaceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNetworkInterfaceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteNetworkInterfaceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteNetworkInterfaceWithContext(ctx context.Context, in *ec2.DeleteNetworkInterfaceInput, _ ...request.Option) (*ec2.DeleteNetworkInterfaceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteNetworkInterface cancelled", ctx.Err())
	default:
		return d.DeleteNetworkInterface(in)
	}
}

func (d *EC2Double) DeletePlacementGroup(i0 *ec2.DeletePlacementGroupInput) (r0 *ec2.DeletePlacementGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePlacementGroup", i0)
	r0, _ = returns[0].(*ec2.DeletePlacementGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeletePlacementGroupRequest(i0 *ec2.DeletePlacementGroupInput) (r0 *request.Request, r1 *ec2.DeletePlacementGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePlacementGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeletePlacementGroupOutput)
	return
}

func (d *EC2Double) DeletePlacementGroupWithContext(i0 context.Context, i1 *ec2.DeletePlacementGroupInput, i2 ...request.Option) (r0 *ec2.DeletePlacementGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePlacementGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeletePlacementGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeletePlacementGroupWithContext(ctx context.Context, in *ec2.DeletePlacementGroupInput, _ ...request.Option) (*ec2.DeletePlacementGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeletePlacementGroup cancelled", ctx.Err())
	default:
		return d.DeletePlacementGroup(in)
	}
}

func (d *EC2Double) DeleteQueuedReservedInstances(i0 *ec2.DeleteQueuedReservedInstancesInput) (r0 *ec2.DeleteQueuedReservedInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteQueuedReservedInstances", i0)
	r0, _ = returns[0].(*ec2.DeleteQueuedReservedInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteQueuedReservedInstancesRequest(i0 *ec2.DeleteQueuedReservedInstancesInput) (r0 *request.Request, r1 *ec2.DeleteQueuedReservedInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteQueuedReservedInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteQueuedReservedInstancesOutput)
	return
}

func (d *EC2Double) DeleteQueuedReservedInstancesWithContext(i0 context.Context, i1 *ec2.DeleteQueuedReservedInstancesInput, i2 ...request.Option) (r0 *ec2.DeleteQueuedReservedInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteQueuedReservedInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteQueuedReservedInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteQueuedReservedInstancesWithContext(ctx context.Context, in *ec2.DeleteQueuedReservedInstancesInput, _ ...request.Option) (*ec2.DeleteQueuedReservedInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteQueuedReservedInstances cancelled", ctx.Err())
	default:
		return d.DeleteQueuedReservedInstances(in)
	}
}

func (d *EC2Double) DeleteRoute(i0 *ec2.DeleteRouteInput) (r0 *ec2.DeleteRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRoute", i0)
	r0, _ = returns[0].(*ec2.DeleteRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteRouteRequest(i0 *ec2.DeleteRouteInput) (r0 *request.Request, r1 *ec2.DeleteRouteOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRouteRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteRouteOutput)
	return
}

func (d *EC2Double) DeleteRouteTable(i0 *ec2.DeleteRouteTableInput) (r0 *ec2.DeleteRouteTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRouteTable", i0)
	r0, _ = returns[0].(*ec2.DeleteRouteTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteRouteTableRequest(i0 *ec2.DeleteRouteTableInput) (r0 *request.Request, r1 *ec2.DeleteRouteTableOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRouteTableRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteRouteTableOutput)
	return
}

func (d *EC2Double) DeleteRouteTableWithContext(i0 context.Context, i1 *ec2.DeleteRouteTableInput, i2 ...request.Option) (r0 *ec2.DeleteRouteTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRouteTableWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteRouteTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteRouteTableWithContext(ctx context.Context, in *ec2.DeleteRouteTableInput, _ ...request.Option) (*ec2.DeleteRouteTableOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRouteTable cancelled", ctx.Err())
	default:
		return d.DeleteRouteTable(in)
	}
}

func (d *EC2Double) DeleteRouteWithContext(i0 context.Context, i1 *ec2.DeleteRouteInput, i2 ...request.Option) (r0 *ec2.DeleteRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRouteWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteRouteWithContext(ctx context.Context, in *ec2.DeleteRouteInput, _ ...request.Option) (*ec2.DeleteRouteOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRoute cancelled", ctx.Err())
	default:
		return d.DeleteRoute(in)
	}
}

func (d *EC2Double) DeleteSecurityGroup(i0 *ec2.DeleteSecurityGroupInput) (r0 *ec2.DeleteSecurityGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSecurityGroup", i0)
	r0, _ = returns[0].(*ec2.DeleteSecurityGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteSecurityGroupRequest(i0 *ec2.DeleteSecurityGroupInput) (r0 *request.Request, r1 *ec2.DeleteSecurityGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSecurityGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteSecurityGroupOutput)
	return
}

func (d *EC2Double) DeleteSecurityGroupWithContext(i0 context.Context, i1 *ec2.DeleteSecurityGroupInput, i2 ...request.Option) (r0 *ec2.DeleteSecurityGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSecurityGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteSecurityGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteSecurityGroupWithContext(ctx context.Context, in *ec2.DeleteSecurityGroupInput, _ ...request.Option) (*ec2.DeleteSecurityGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteSecurityGroup cancelled", ctx.Err())
	default:
		return d.DeleteSecurityGroup(in)
	}
}

func (d *EC2Double) DeleteSnapshot(i0 *ec2.DeleteSnapshotInput) (r0 *ec2.DeleteSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSnapshot", i0)
	r0, _ = returns[0].(*ec2.DeleteSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteSnapshotRequest(i0 *ec2.DeleteSnapshotInput) (r0 *request.Request, r1 *ec2.DeleteSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteSnapshotOutput)
	return
}

func (d *EC2Double) DeleteSnapshotWithContext(i0 context.Context, i1 *ec2.DeleteSnapshotInput, i2 ...request.Option) (r0 *ec2.DeleteSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteSnapshotWithContext(ctx context.Context, in *ec2.DeleteSnapshotInput, _ ...request.Option) (*ec2.DeleteSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteSnapshot cancelled", ctx.Err())
	default:
		return d.DeleteSnapshot(in)
	}
}

func (d *EC2Double) DeleteSpotDatafeedSubscription(i0 *ec2.DeleteSpotDatafeedSubscriptionInput) (r0 *ec2.DeleteSpotDatafeedSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSpotDatafeedSubscription", i0)
	r0, _ = returns[0].(*ec2.DeleteSpotDatafeedSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteSpotDatafeedSubscriptionRequest(i0 *ec2.DeleteSpotDatafeedSubscriptionInput) (r0 *request.Request, r1 *ec2.DeleteSpotDatafeedSubscriptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSpotDatafeedSubscriptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteSpotDatafeedSubscriptionOutput)
	return
}

func (d *EC2Double) DeleteSpotDatafeedSubscriptionWithContext(i0 context.Context, i1 *ec2.DeleteSpotDatafeedSubscriptionInput, i2 ...request.Option) (r0 *ec2.DeleteSpotDatafeedSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSpotDatafeedSubscriptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteSpotDatafeedSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteSpotDatafeedSubscriptionWithContext(ctx context.Context, in *ec2.DeleteSpotDatafeedSubscriptionInput, _ ...request.Option) (*ec2.DeleteSpotDatafeedSubscriptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteSpotDatafeedSubscription cancelled", ctx.Err())
	default:
		return d.DeleteSpotDatafeedSubscription(in)
	}
}

func (d *EC2Double) DeleteSubnet(i0 *ec2.DeleteSubnetInput) (r0 *ec2.DeleteSubnetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSubnet", i0)
	r0, _ = returns[0].(*ec2.DeleteSubnetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteSubnetRequest(i0 *ec2.DeleteSubnetInput) (r0 *request.Request, r1 *ec2.DeleteSubnetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSubnetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteSubnetOutput)
	return
}

func (d *EC2Double) DeleteSubnetWithContext(i0 context.Context, i1 *ec2.DeleteSubnetInput, i2 ...request.Option) (r0 *ec2.DeleteSubnetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSubnetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteSubnetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteSubnetWithContext(ctx context.Context, in *ec2.DeleteSubnetInput, _ ...request.Option) (*ec2.DeleteSubnetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteSubnet cancelled", ctx.Err())
	default:
		return d.DeleteSubnet(in)
	}
}

func (d *EC2Double) DeleteTags(i0 *ec2.DeleteTagsInput) (r0 *ec2.DeleteTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTags", i0)
	r0, _ = returns[0].(*ec2.DeleteTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteTagsRequest(i0 *ec2.DeleteTagsInput) (r0 *request.Request, r1 *ec2.DeleteTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteTagsOutput)
	return
}

func (d *EC2Double) DeleteTagsWithContext(i0 context.Context, i1 *ec2.DeleteTagsInput, i2 ...request.Option) (r0 *ec2.DeleteTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteTagsWithContext(ctx context.Context, in *ec2.DeleteTagsInput, _ ...request.Option) (*ec2.DeleteTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTags cancelled", ctx.Err())
	default:
		return d.DeleteTags(in)
	}
}

func (d *EC2Double) DeleteTrafficMirrorFilter(i0 *ec2.DeleteTrafficMirrorFilterInput) (r0 *ec2.DeleteTrafficMirrorFilterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTrafficMirrorFilter", i0)
	r0, _ = returns[0].(*ec2.DeleteTrafficMirrorFilterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteTrafficMirrorFilterRequest(i0 *ec2.DeleteTrafficMirrorFilterInput) (r0 *request.Request, r1 *ec2.DeleteTrafficMirrorFilterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTrafficMirrorFilterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteTrafficMirrorFilterOutput)
	return
}

func (d *EC2Double) DeleteTrafficMirrorFilterRule(i0 *ec2.DeleteTrafficMirrorFilterRuleInput) (r0 *ec2.DeleteTrafficMirrorFilterRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTrafficMirrorFilterRule", i0)
	r0, _ = returns[0].(*ec2.DeleteTrafficMirrorFilterRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteTrafficMirrorFilterRuleRequest(i0 *ec2.DeleteTrafficMirrorFilterRuleInput) (r0 *request.Request, r1 *ec2.DeleteTrafficMirrorFilterRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTrafficMirrorFilterRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteTrafficMirrorFilterRuleOutput)
	return
}

func (d *EC2Double) DeleteTrafficMirrorFilterRuleWithContext(i0 context.Context, i1 *ec2.DeleteTrafficMirrorFilterRuleInput, i2 ...request.Option) (r0 *ec2.DeleteTrafficMirrorFilterRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTrafficMirrorFilterRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteTrafficMirrorFilterRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteTrafficMirrorFilterRuleWithContext(ctx context.Context, in *ec2.DeleteTrafficMirrorFilterRuleInput, _ ...request.Option) (*ec2.DeleteTrafficMirrorFilterRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTrafficMirrorFilterRule cancelled", ctx.Err())
	default:
		return d.DeleteTrafficMirrorFilterRule(in)
	}
}

func (d *EC2Double) DeleteTrafficMirrorFilterWithContext(i0 context.Context, i1 *ec2.DeleteTrafficMirrorFilterInput, i2 ...request.Option) (r0 *ec2.DeleteTrafficMirrorFilterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTrafficMirrorFilterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteTrafficMirrorFilterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteTrafficMirrorFilterWithContext(ctx context.Context, in *ec2.DeleteTrafficMirrorFilterInput, _ ...request.Option) (*ec2.DeleteTrafficMirrorFilterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTrafficMirrorFilter cancelled", ctx.Err())
	default:
		return d.DeleteTrafficMirrorFilter(in)
	}
}

func (d *EC2Double) DeleteTrafficMirrorSession(i0 *ec2.DeleteTrafficMirrorSessionInput) (r0 *ec2.DeleteTrafficMirrorSessionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTrafficMirrorSession", i0)
	r0, _ = returns[0].(*ec2.DeleteTrafficMirrorSessionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteTrafficMirrorSessionRequest(i0 *ec2.DeleteTrafficMirrorSessionInput) (r0 *request.Request, r1 *ec2.DeleteTrafficMirrorSessionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTrafficMirrorSessionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteTrafficMirrorSessionOutput)
	return
}

func (d *EC2Double) DeleteTrafficMirrorSessionWithContext(i0 context.Context, i1 *ec2.DeleteTrafficMirrorSessionInput, i2 ...request.Option) (r0 *ec2.DeleteTrafficMirrorSessionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTrafficMirrorSessionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteTrafficMirrorSessionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteTrafficMirrorSessionWithContext(ctx context.Context, in *ec2.DeleteTrafficMirrorSessionInput, _ ...request.Option) (*ec2.DeleteTrafficMirrorSessionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTrafficMirrorSession cancelled", ctx.Err())
	default:
		return d.DeleteTrafficMirrorSession(in)
	}
}

func (d *EC2Double) DeleteTrafficMirrorTarget(i0 *ec2.DeleteTrafficMirrorTargetInput) (r0 *ec2.DeleteTrafficMirrorTargetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTrafficMirrorTarget", i0)
	r0, _ = returns[0].(*ec2.DeleteTrafficMirrorTargetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteTrafficMirrorTargetRequest(i0 *ec2.DeleteTrafficMirrorTargetInput) (r0 *request.Request, r1 *ec2.DeleteTrafficMirrorTargetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTrafficMirrorTargetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteTrafficMirrorTargetOutput)
	return
}

func (d *EC2Double) DeleteTrafficMirrorTargetWithContext(i0 context.Context, i1 *ec2.DeleteTrafficMirrorTargetInput, i2 ...request.Option) (r0 *ec2.DeleteTrafficMirrorTargetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTrafficMirrorTargetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteTrafficMirrorTargetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteTrafficMirrorTargetWithContext(ctx context.Context, in *ec2.DeleteTrafficMirrorTargetInput, _ ...request.Option) (*ec2.DeleteTrafficMirrorTargetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTrafficMirrorTarget cancelled", ctx.Err())
	default:
		return d.DeleteTrafficMirrorTarget(in)
	}
}

func (d *EC2Double) DeleteTransitGateway(i0 *ec2.DeleteTransitGatewayInput) (r0 *ec2.DeleteTransitGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTransitGateway", i0)
	r0, _ = returns[0].(*ec2.DeleteTransitGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteTransitGatewayMulticastDomain(i0 *ec2.DeleteTransitGatewayMulticastDomainInput) (r0 *ec2.DeleteTransitGatewayMulticastDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTransitGatewayMulticastDomain", i0)
	r0, _ = returns[0].(*ec2.DeleteTransitGatewayMulticastDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteTransitGatewayMulticastDomainRequest(i0 *ec2.DeleteTransitGatewayMulticastDomainInput) (r0 *request.Request, r1 *ec2.DeleteTransitGatewayMulticastDomainOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTransitGatewayMulticastDomainRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteTransitGatewayMulticastDomainOutput)
	return
}

func (d *EC2Double) DeleteTransitGatewayMulticastDomainWithContext(i0 context.Context, i1 *ec2.DeleteTransitGatewayMulticastDomainInput, i2 ...request.Option) (r0 *ec2.DeleteTransitGatewayMulticastDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTransitGatewayMulticastDomainWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteTransitGatewayMulticastDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteTransitGatewayMulticastDomainWithContext(ctx context.Context, in *ec2.DeleteTransitGatewayMulticastDomainInput, _ ...request.Option) (*ec2.DeleteTransitGatewayMulticastDomainOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTransitGatewayMulticastDomain cancelled", ctx.Err())
	default:
		return d.DeleteTransitGatewayMulticastDomain(in)
	}
}

func (d *EC2Double) DeleteTransitGatewayPeeringAttachment(i0 *ec2.DeleteTransitGatewayPeeringAttachmentInput) (r0 *ec2.DeleteTransitGatewayPeeringAttachmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTransitGatewayPeeringAttachment", i0)
	r0, _ = returns[0].(*ec2.DeleteTransitGatewayPeeringAttachmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteTransitGatewayPeeringAttachmentRequest(i0 *ec2.DeleteTransitGatewayPeeringAttachmentInput) (r0 *request.Request, r1 *ec2.DeleteTransitGatewayPeeringAttachmentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTransitGatewayPeeringAttachmentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteTransitGatewayPeeringAttachmentOutput)
	return
}

func (d *EC2Double) DeleteTransitGatewayPeeringAttachmentWithContext(i0 context.Context, i1 *ec2.DeleteTransitGatewayPeeringAttachmentInput, i2 ...request.Option) (r0 *ec2.DeleteTransitGatewayPeeringAttachmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTransitGatewayPeeringAttachmentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteTransitGatewayPeeringAttachmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteTransitGatewayPeeringAttachmentWithContext(ctx context.Context, in *ec2.DeleteTransitGatewayPeeringAttachmentInput, _ ...request.Option) (*ec2.DeleteTransitGatewayPeeringAttachmentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTransitGatewayPeeringAttachment cancelled", ctx.Err())
	default:
		return d.DeleteTransitGatewayPeeringAttachment(in)
	}
}

func (d *EC2Double) DeleteTransitGatewayRequest(i0 *ec2.DeleteTransitGatewayInput) (r0 *request.Request, r1 *ec2.DeleteTransitGatewayOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTransitGatewayRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteTransitGatewayOutput)
	return
}

func (d *EC2Double) DeleteTransitGatewayRoute(i0 *ec2.DeleteTransitGatewayRouteInput) (r0 *ec2.DeleteTransitGatewayRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTransitGatewayRoute", i0)
	r0, _ = returns[0].(*ec2.DeleteTransitGatewayRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteTransitGatewayRouteRequest(i0 *ec2.DeleteTransitGatewayRouteInput) (r0 *request.Request, r1 *ec2.DeleteTransitGatewayRouteOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTransitGatewayRouteRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteTransitGatewayRouteOutput)
	return
}

func (d *EC2Double) DeleteTransitGatewayRouteTable(i0 *ec2.DeleteTransitGatewayRouteTableInput) (r0 *ec2.DeleteTransitGatewayRouteTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTransitGatewayRouteTable", i0)
	r0, _ = returns[0].(*ec2.DeleteTransitGatewayRouteTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteTransitGatewayRouteTableRequest(i0 *ec2.DeleteTransitGatewayRouteTableInput) (r0 *request.Request, r1 *ec2.DeleteTransitGatewayRouteTableOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTransitGatewayRouteTableRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteTransitGatewayRouteTableOutput)
	return
}

func (d *EC2Double) DeleteTransitGatewayRouteTableWithContext(i0 context.Context, i1 *ec2.DeleteTransitGatewayRouteTableInput, i2 ...request.Option) (r0 *ec2.DeleteTransitGatewayRouteTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTransitGatewayRouteTableWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteTransitGatewayRouteTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteTransitGatewayRouteTableWithContext(ctx context.Context, in *ec2.DeleteTransitGatewayRouteTableInput, _ ...request.Option) (*ec2.DeleteTransitGatewayRouteTableOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTransitGatewayRouteTable cancelled", ctx.Err())
	default:
		return d.DeleteTransitGatewayRouteTable(in)
	}
}

func (d *EC2Double) DeleteTransitGatewayRouteWithContext(i0 context.Context, i1 *ec2.DeleteTransitGatewayRouteInput, i2 ...request.Option) (r0 *ec2.DeleteTransitGatewayRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTransitGatewayRouteWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteTransitGatewayRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteTransitGatewayRouteWithContext(ctx context.Context, in *ec2.DeleteTransitGatewayRouteInput, _ ...request.Option) (*ec2.DeleteTransitGatewayRouteOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTransitGatewayRoute cancelled", ctx.Err())
	default:
		return d.DeleteTransitGatewayRoute(in)
	}
}

func (d *EC2Double) DeleteTransitGatewayVpcAttachment(i0 *ec2.DeleteTransitGatewayVpcAttachmentInput) (r0 *ec2.DeleteTransitGatewayVpcAttachmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTransitGatewayVpcAttachment", i0)
	r0, _ = returns[0].(*ec2.DeleteTransitGatewayVpcAttachmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteTransitGatewayVpcAttachmentRequest(i0 *ec2.DeleteTransitGatewayVpcAttachmentInput) (r0 *request.Request, r1 *ec2.DeleteTransitGatewayVpcAttachmentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTransitGatewayVpcAttachmentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteTransitGatewayVpcAttachmentOutput)
	return
}

func (d *EC2Double) DeleteTransitGatewayVpcAttachmentWithContext(i0 context.Context, i1 *ec2.DeleteTransitGatewayVpcAttachmentInput, i2 ...request.Option) (r0 *ec2.DeleteTransitGatewayVpcAttachmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTransitGatewayVpcAttachmentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteTransitGatewayVpcAttachmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteTransitGatewayVpcAttachmentWithContext(ctx context.Context, in *ec2.DeleteTransitGatewayVpcAttachmentInput, _ ...request.Option) (*ec2.DeleteTransitGatewayVpcAttachmentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTransitGatewayVpcAttachment cancelled", ctx.Err())
	default:
		return d.DeleteTransitGatewayVpcAttachment(in)
	}
}

func (d *EC2Double) DeleteTransitGatewayWithContext(i0 context.Context, i1 *ec2.DeleteTransitGatewayInput, i2 ...request.Option) (r0 *ec2.DeleteTransitGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTransitGatewayWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteTransitGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteTransitGatewayWithContext(ctx context.Context, in *ec2.DeleteTransitGatewayInput, _ ...request.Option) (*ec2.DeleteTransitGatewayOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTransitGateway cancelled", ctx.Err())
	default:
		return d.DeleteTransitGateway(in)
	}
}

func (d *EC2Double) DeleteVolume(i0 *ec2.DeleteVolumeInput) (r0 *ec2.DeleteVolumeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVolume", i0)
	r0, _ = returns[0].(*ec2.DeleteVolumeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteVolumeRequest(i0 *ec2.DeleteVolumeInput) (r0 *request.Request, r1 *ec2.DeleteVolumeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVolumeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteVolumeOutput)
	return
}

func (d *EC2Double) DeleteVolumeWithContext(i0 context.Context, i1 *ec2.DeleteVolumeInput, i2 ...request.Option) (r0 *ec2.DeleteVolumeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVolumeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteVolumeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteVolumeWithContext(ctx context.Context, in *ec2.DeleteVolumeInput, _ ...request.Option) (*ec2.DeleteVolumeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteVolume cancelled", ctx.Err())
	default:
		return d.DeleteVolume(in)
	}
}

func (d *EC2Double) DeleteVpc(i0 *ec2.DeleteVpcInput) (r0 *ec2.DeleteVpcOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVpc", i0)
	r0, _ = returns[0].(*ec2.DeleteVpcOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteVpcEndpointConnectionNotifications(i0 *ec2.DeleteVpcEndpointConnectionNotificationsInput) (r0 *ec2.DeleteVpcEndpointConnectionNotificationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVpcEndpointConnectionNotifications", i0)
	r0, _ = returns[0].(*ec2.DeleteVpcEndpointConnectionNotificationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteVpcEndpointConnectionNotificationsRequest(i0 *ec2.DeleteVpcEndpointConnectionNotificationsInput) (r0 *request.Request, r1 *ec2.DeleteVpcEndpointConnectionNotificationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVpcEndpointConnectionNotificationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteVpcEndpointConnectionNotificationsOutput)
	return
}

func (d *EC2Double) DeleteVpcEndpointConnectionNotificationsWithContext(i0 context.Context, i1 *ec2.DeleteVpcEndpointConnectionNotificationsInput, i2 ...request.Option) (r0 *ec2.DeleteVpcEndpointConnectionNotificationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVpcEndpointConnectionNotificationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteVpcEndpointConnectionNotificationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteVpcEndpointConnectionNotificationsWithContext(ctx context.Context, in *ec2.DeleteVpcEndpointConnectionNotificationsInput, _ ...request.Option) (*ec2.DeleteVpcEndpointConnectionNotificationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteVpcEndpointConnectionNotifications cancelled", ctx.Err())
	default:
		return d.DeleteVpcEndpointConnectionNotifications(in)
	}
}

func (d *EC2Double) DeleteVpcEndpointServiceConfigurations(i0 *ec2.DeleteVpcEndpointServiceConfigurationsInput) (r0 *ec2.DeleteVpcEndpointServiceConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVpcEndpointServiceConfigurations", i0)
	r0, _ = returns[0].(*ec2.DeleteVpcEndpointServiceConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteVpcEndpointServiceConfigurationsRequest(i0 *ec2.DeleteVpcEndpointServiceConfigurationsInput) (r0 *request.Request, r1 *ec2.DeleteVpcEndpointServiceConfigurationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVpcEndpointServiceConfigurationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteVpcEndpointServiceConfigurationsOutput)
	return
}

func (d *EC2Double) DeleteVpcEndpointServiceConfigurationsWithContext(i0 context.Context, i1 *ec2.DeleteVpcEndpointServiceConfigurationsInput, i2 ...request.Option) (r0 *ec2.DeleteVpcEndpointServiceConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVpcEndpointServiceConfigurationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteVpcEndpointServiceConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteVpcEndpointServiceConfigurationsWithContext(ctx context.Context, in *ec2.DeleteVpcEndpointServiceConfigurationsInput, _ ...request.Option) (*ec2.DeleteVpcEndpointServiceConfigurationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteVpcEndpointServiceConfigurations cancelled", ctx.Err())
	default:
		return d.DeleteVpcEndpointServiceConfigurations(in)
	}
}

func (d *EC2Double) DeleteVpcEndpoints(i0 *ec2.DeleteVpcEndpointsInput) (r0 *ec2.DeleteVpcEndpointsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVpcEndpoints", i0)
	r0, _ = returns[0].(*ec2.DeleteVpcEndpointsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteVpcEndpointsRequest(i0 *ec2.DeleteVpcEndpointsInput) (r0 *request.Request, r1 *ec2.DeleteVpcEndpointsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVpcEndpointsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteVpcEndpointsOutput)
	return
}

func (d *EC2Double) DeleteVpcEndpointsWithContext(i0 context.Context, i1 *ec2.DeleteVpcEndpointsInput, i2 ...request.Option) (r0 *ec2.DeleteVpcEndpointsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVpcEndpointsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteVpcEndpointsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteVpcEndpointsWithContext(ctx context.Context, in *ec2.DeleteVpcEndpointsInput, _ ...request.Option) (*ec2.DeleteVpcEndpointsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteVpcEndpoints cancelled", ctx.Err())
	default:
		return d.DeleteVpcEndpoints(in)
	}
}

func (d *EC2Double) DeleteVpcPeeringConnection(i0 *ec2.DeleteVpcPeeringConnectionInput) (r0 *ec2.DeleteVpcPeeringConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVpcPeeringConnection", i0)
	r0, _ = returns[0].(*ec2.DeleteVpcPeeringConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteVpcPeeringConnectionRequest(i0 *ec2.DeleteVpcPeeringConnectionInput) (r0 *request.Request, r1 *ec2.DeleteVpcPeeringConnectionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVpcPeeringConnectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteVpcPeeringConnectionOutput)
	return
}

func (d *EC2Double) DeleteVpcPeeringConnectionWithContext(i0 context.Context, i1 *ec2.DeleteVpcPeeringConnectionInput, i2 ...request.Option) (r0 *ec2.DeleteVpcPeeringConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVpcPeeringConnectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteVpcPeeringConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteVpcPeeringConnectionWithContext(ctx context.Context, in *ec2.DeleteVpcPeeringConnectionInput, _ ...request.Option) (*ec2.DeleteVpcPeeringConnectionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteVpcPeeringConnection cancelled", ctx.Err())
	default:
		return d.DeleteVpcPeeringConnection(in)
	}
}

func (d *EC2Double) DeleteVpcRequest(i0 *ec2.DeleteVpcInput) (r0 *request.Request, r1 *ec2.DeleteVpcOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVpcRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteVpcOutput)
	return
}

func (d *EC2Double) DeleteVpcWithContext(i0 context.Context, i1 *ec2.DeleteVpcInput, i2 ...request.Option) (r0 *ec2.DeleteVpcOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVpcWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteVpcOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteVpcWithContext(ctx context.Context, in *ec2.DeleteVpcInput, _ ...request.Option) (*ec2.DeleteVpcOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteVpc cancelled", ctx.Err())
	default:
		return d.DeleteVpc(in)
	}
}

func (d *EC2Double) DeleteVpnConnection(i0 *ec2.DeleteVpnConnectionInput) (r0 *ec2.DeleteVpnConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVpnConnection", i0)
	r0, _ = returns[0].(*ec2.DeleteVpnConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteVpnConnectionRequest(i0 *ec2.DeleteVpnConnectionInput) (r0 *request.Request, r1 *ec2.DeleteVpnConnectionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVpnConnectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteVpnConnectionOutput)
	return
}

func (d *EC2Double) DeleteVpnConnectionRoute(i0 *ec2.DeleteVpnConnectionRouteInput) (r0 *ec2.DeleteVpnConnectionRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVpnConnectionRoute", i0)
	r0, _ = returns[0].(*ec2.DeleteVpnConnectionRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteVpnConnectionRouteRequest(i0 *ec2.DeleteVpnConnectionRouteInput) (r0 *request.Request, r1 *ec2.DeleteVpnConnectionRouteOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVpnConnectionRouteRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteVpnConnectionRouteOutput)
	return
}

func (d *EC2Double) DeleteVpnConnectionRouteWithContext(i0 context.Context, i1 *ec2.DeleteVpnConnectionRouteInput, i2 ...request.Option) (r0 *ec2.DeleteVpnConnectionRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVpnConnectionRouteWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteVpnConnectionRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteVpnConnectionRouteWithContext(ctx context.Context, in *ec2.DeleteVpnConnectionRouteInput, _ ...request.Option) (*ec2.DeleteVpnConnectionRouteOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteVpnConnectionRoute cancelled", ctx.Err())
	default:
		return d.DeleteVpnConnectionRoute(in)
	}
}

func (d *EC2Double) DeleteVpnConnectionWithContext(i0 context.Context, i1 *ec2.DeleteVpnConnectionInput, i2 ...request.Option) (r0 *ec2.DeleteVpnConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVpnConnectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteVpnConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteVpnConnectionWithContext(ctx context.Context, in *ec2.DeleteVpnConnectionInput, _ ...request.Option) (*ec2.DeleteVpnConnectionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteVpnConnection cancelled", ctx.Err())
	default:
		return d.DeleteVpnConnection(in)
	}
}

func (d *EC2Double) DeleteVpnGateway(i0 *ec2.DeleteVpnGatewayInput) (r0 *ec2.DeleteVpnGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVpnGateway", i0)
	r0, _ = returns[0].(*ec2.DeleteVpnGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeleteVpnGatewayRequest(i0 *ec2.DeleteVpnGatewayInput) (r0 *request.Request, r1 *ec2.DeleteVpnGatewayOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVpnGatewayRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeleteVpnGatewayOutput)
	return
}

func (d *EC2Double) DeleteVpnGatewayWithContext(i0 context.Context, i1 *ec2.DeleteVpnGatewayInput, i2 ...request.Option) (r0 *ec2.DeleteVpnGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVpnGatewayWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeleteVpnGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeleteVpnGatewayWithContext(ctx context.Context, in *ec2.DeleteVpnGatewayInput, _ ...request.Option) (*ec2.DeleteVpnGatewayOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteVpnGateway cancelled", ctx.Err())
	default:
		return d.DeleteVpnGateway(in)
	}
}

func (d *EC2Double) DeprovisionByoipCidr(i0 *ec2.DeprovisionByoipCidrInput) (r0 *ec2.DeprovisionByoipCidrOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeprovisionByoipCidr", i0)
	r0, _ = returns[0].(*ec2.DeprovisionByoipCidrOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeprovisionByoipCidrRequest(i0 *ec2.DeprovisionByoipCidrInput) (r0 *request.Request, r1 *ec2.DeprovisionByoipCidrOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeprovisionByoipCidrRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeprovisionByoipCidrOutput)
	return
}

func (d *EC2Double) DeprovisionByoipCidrWithContext(i0 context.Context, i1 *ec2.DeprovisionByoipCidrInput, i2 ...request.Option) (r0 *ec2.DeprovisionByoipCidrOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeprovisionByoipCidrWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeprovisionByoipCidrOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeprovisionByoipCidrWithContext(ctx context.Context, in *ec2.DeprovisionByoipCidrInput, _ ...request.Option) (*ec2.DeprovisionByoipCidrOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeprovisionByoipCidr cancelled", ctx.Err())
	default:
		return d.DeprovisionByoipCidr(in)
	}
}

func (d *EC2Double) DeregisterImage(i0 *ec2.DeregisterImageInput) (r0 *ec2.DeregisterImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterImage", i0)
	r0, _ = returns[0].(*ec2.DeregisterImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeregisterImageRequest(i0 *ec2.DeregisterImageInput) (r0 *request.Request, r1 *ec2.DeregisterImageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterImageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeregisterImageOutput)
	return
}

func (d *EC2Double) DeregisterImageWithContext(i0 context.Context, i1 *ec2.DeregisterImageInput, i2 ...request.Option) (r0 *ec2.DeregisterImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterImageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeregisterImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeregisterImageWithContext(ctx context.Context, in *ec2.DeregisterImageInput, _ ...request.Option) (*ec2.DeregisterImageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeregisterImage cancelled", ctx.Err())
	default:
		return d.DeregisterImage(in)
	}
}

func (d *EC2Double) DeregisterTransitGatewayMulticastGroupMembers(i0 *ec2.DeregisterTransitGatewayMulticastGroupMembersInput) (r0 *ec2.DeregisterTransitGatewayMulticastGroupMembersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterTransitGatewayMulticastGroupMembers", i0)
	r0, _ = returns[0].(*ec2.DeregisterTransitGatewayMulticastGroupMembersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeregisterTransitGatewayMulticastGroupMembersRequest(i0 *ec2.DeregisterTransitGatewayMulticastGroupMembersInput) (r0 *request.Request, r1 *ec2.DeregisterTransitGatewayMulticastGroupMembersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterTransitGatewayMulticastGroupMembersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeregisterTransitGatewayMulticastGroupMembersOutput)
	return
}

func (d *EC2Double) DeregisterTransitGatewayMulticastGroupMembersWithContext(i0 context.Context, i1 *ec2.DeregisterTransitGatewayMulticastGroupMembersInput, i2 ...request.Option) (r0 *ec2.DeregisterTransitGatewayMulticastGroupMembersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterTransitGatewayMulticastGroupMembersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeregisterTransitGatewayMulticastGroupMembersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeregisterTransitGatewayMulticastGroupMembersWithContext(ctx context.Context, in *ec2.DeregisterTransitGatewayMulticastGroupMembersInput, _ ...request.Option) (*ec2.DeregisterTransitGatewayMulticastGroupMembersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeregisterTransitGatewayMulticastGroupMembers cancelled", ctx.Err())
	default:
		return d.DeregisterTransitGatewayMulticastGroupMembers(in)
	}
}

func (d *EC2Double) DeregisterTransitGatewayMulticastGroupSources(i0 *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput) (r0 *ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterTransitGatewayMulticastGroupSources", i0)
	r0, _ = returns[0].(*ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DeregisterTransitGatewayMulticastGroupSourcesRequest(i0 *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput) (r0 *request.Request, r1 *ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterTransitGatewayMulticastGroupSourcesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput)
	return
}

func (d *EC2Double) DeregisterTransitGatewayMulticastGroupSourcesWithContext(i0 context.Context, i1 *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput, i2 ...request.Option) (r0 *ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterTransitGatewayMulticastGroupSourcesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDeregisterTransitGatewayMulticastGroupSourcesWithContext(ctx context.Context, in *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput, _ ...request.Option) (*ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeregisterTransitGatewayMulticastGroupSources cancelled", ctx.Err())
	default:
		return d.DeregisterTransitGatewayMulticastGroupSources(in)
	}
}

func (d *EC2Double) DescribeAccountAttributes(i0 *ec2.DescribeAccountAttributesInput) (r0 *ec2.DescribeAccountAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAccountAttributes", i0)
	r0, _ = returns[0].(*ec2.DescribeAccountAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeAccountAttributesRequest(i0 *ec2.DescribeAccountAttributesInput) (r0 *request.Request, r1 *ec2.DescribeAccountAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAccountAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeAccountAttributesOutput)
	return
}

func (d *EC2Double) DescribeAccountAttributesWithContext(i0 context.Context, i1 *ec2.DescribeAccountAttributesInput, i2 ...request.Option) (r0 *ec2.DescribeAccountAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAccountAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeAccountAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeAccountAttributesWithContext(ctx context.Context, in *ec2.DescribeAccountAttributesInput, _ ...request.Option) (*ec2.DescribeAccountAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAccountAttributes cancelled", ctx.Err())
	default:
		return d.DescribeAccountAttributes(in)
	}
}

func (d *EC2Double) DescribeAddresses(i0 *ec2.DescribeAddressesInput) (r0 *ec2.DescribeAddressesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAddresses", i0)
	r0, _ = returns[0].(*ec2.DescribeAddressesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeAddressesRequest(i0 *ec2.DescribeAddressesInput) (r0 *request.Request, r1 *ec2.DescribeAddressesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAddressesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeAddressesOutput)
	return
}

func (d *EC2Double) DescribeAddressesWithContext(i0 context.Context, i1 *ec2.DescribeAddressesInput, i2 ...request.Option) (r0 *ec2.DescribeAddressesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAddressesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeAddressesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeAddressesWithContext(ctx context.Context, in *ec2.DescribeAddressesInput, _ ...request.Option) (*ec2.DescribeAddressesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAddresses cancelled", ctx.Err())
	default:
		return d.DescribeAddresses(in)
	}
}

func (d *EC2Double) DescribeAggregateIdFormat(i0 *ec2.DescribeAggregateIdFormatInput) (r0 *ec2.DescribeAggregateIdFormatOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAggregateIdFormat", i0)
	r0, _ = returns[0].(*ec2.DescribeAggregateIdFormatOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeAggregateIdFormatRequest(i0 *ec2.DescribeAggregateIdFormatInput) (r0 *request.Request, r1 *ec2.DescribeAggregateIdFormatOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAggregateIdFormatRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeAggregateIdFormatOutput)
	return
}

func (d *EC2Double) DescribeAggregateIdFormatWithContext(i0 context.Context, i1 *ec2.DescribeAggregateIdFormatInput, i2 ...request.Option) (r0 *ec2.DescribeAggregateIdFormatOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAggregateIdFormatWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeAggregateIdFormatOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeAggregateIdFormatWithContext(ctx context.Context, in *ec2.DescribeAggregateIdFormatInput, _ ...request.Option) (*ec2.DescribeAggregateIdFormatOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAggregateIdFormat cancelled", ctx.Err())
	default:
		return d.DescribeAggregateIdFormat(in)
	}
}

func (d *EC2Double) DescribeAvailabilityZones(i0 *ec2.DescribeAvailabilityZonesInput) (r0 *ec2.DescribeAvailabilityZonesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAvailabilityZones", i0)
	r0, _ = returns[0].(*ec2.DescribeAvailabilityZonesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeAvailabilityZonesRequest(i0 *ec2.DescribeAvailabilityZonesInput) (r0 *request.Request, r1 *ec2.DescribeAvailabilityZonesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAvailabilityZonesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeAvailabilityZonesOutput)
	return
}

func (d *EC2Double) DescribeAvailabilityZonesWithContext(i0 context.Context, i1 *ec2.DescribeAvailabilityZonesInput, i2 ...request.Option) (r0 *ec2.DescribeAvailabilityZonesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAvailabilityZonesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeAvailabilityZonesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeAvailabilityZonesWithContext(ctx context.Context, in *ec2.DescribeAvailabilityZonesInput, _ ...request.Option) (*ec2.DescribeAvailabilityZonesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAvailabilityZones cancelled", ctx.Err())
	default:
		return d.DescribeAvailabilityZones(in)
	}
}

func (d *EC2Double) DescribeBundleTasks(i0 *ec2.DescribeBundleTasksInput) (r0 *ec2.DescribeBundleTasksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBundleTasks", i0)
	r0, _ = returns[0].(*ec2.DescribeBundleTasksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeBundleTasksRequest(i0 *ec2.DescribeBundleTasksInput) (r0 *request.Request, r1 *ec2.DescribeBundleTasksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBundleTasksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeBundleTasksOutput)
	return
}

func (d *EC2Double) DescribeBundleTasksWithContext(i0 context.Context, i1 *ec2.DescribeBundleTasksInput, i2 ...request.Option) (r0 *ec2.DescribeBundleTasksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBundleTasksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeBundleTasksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeBundleTasksWithContext(ctx context.Context, in *ec2.DescribeBundleTasksInput, _ ...request.Option) (*ec2.DescribeBundleTasksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeBundleTasks cancelled", ctx.Err())
	default:
		return d.DescribeBundleTasks(in)
	}
}

func (d *EC2Double) DescribeByoipCidrs(i0 *ec2.DescribeByoipCidrsInput) (r0 *ec2.DescribeByoipCidrsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeByoipCidrs", i0)
	r0, _ = returns[0].(*ec2.DescribeByoipCidrsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeByoipCidrsPages(i0 *ec2.DescribeByoipCidrsInput, i1 func(*ec2.DescribeByoipCidrsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeByoipCidrsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeByoipCidrsPages(in *ec2.DescribeByoipCidrsInput, pager func(*ec2.DescribeByoipCidrsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeByoipCidrs", paginators, in, pager)
}

func (d *EC2Double) DescribeByoipCidrsPagesWithContext(i0 context.Context, i1 *ec2.DescribeByoipCidrsInput, i2 func(*ec2.DescribeByoipCidrsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeByoipCidrsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeByoipCidrsPagesWithContext(ctx context.Context, in *ec2.DescribeByoipCidrsInput, pager func(*ec2.DescribeByoipCidrsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeByoipCidrs", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeByoipCidrsRequest(i0 *ec2.DescribeByoipCidrsInput) (r0 *request.Request, r1 *ec2.DescribeByoipCidrsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeByoipCidrsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeByoipCidrsOutput)
	return
}

func (d *EC2Double) DescribeByoipCidrsWithContext(i0 context.Context, i1 *ec2.DescribeByoipCidrsInput, i2 ...request.Option) (r0 *ec2.DescribeByoipCidrsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeByoipCidrsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeByoipCidrsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeByoipCidrsWithContext(ctx context.Context, in *ec2.DescribeByoipCidrsInput, _ ...request.Option) (*ec2.DescribeByoipCidrsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeByoipCidrs cancelled", ctx.Err())
	default:
		return d.DescribeByoipCidrs(in)
	}
}

func (d *EC2Double) DescribeCapacityReservations(i0 *ec2.DescribeCapacityReservationsInput) (r0 *ec2.DescribeCapacityReservationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCapacityReservations", i0)
	r0, _ = returns[0].(*ec2.DescribeCapacityReservationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeCapacityReservationsPages(i0 *ec2.DescribeCapacityReservationsInput, i1 func(*ec2.DescribeCapacityReservationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCapacityReservationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeCapacityReservationsPages(in *ec2.DescribeCapacityReservationsInput, pager func(*ec2.DescribeCapacityReservationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeCapacityReservations", paginators, in, pager)
}

func (d *EC2Double) DescribeCapacityReservationsPagesWithContext(i0 context.Context, i1 *ec2.DescribeCapacityReservationsInput, i2 func(*ec2.DescribeCapacityReservationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCapacityReservationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeCapacityReservationsPagesWithContext(ctx context.Context, in *ec2.DescribeCapacityReservationsInput, pager func(*ec2.DescribeCapacityReservationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeCapacityReservations", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeCapacityReservationsRequest(i0 *ec2.DescribeCapacityReservationsInput) (r0 *request.Request, r1 *ec2.DescribeCapacityReservationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCapacityReservationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeCapacityReservationsOutput)
	return
}

func (d *EC2Double) DescribeCapacityReservationsWithContext(i0 context.Context, i1 *ec2.DescribeCapacityReservationsInput, i2 ...request.Option) (r0 *ec2.DescribeCapacityReservationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCapacityReservationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeCapacityReservationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeCapacityReservationsWithContext(ctx context.Context, in *ec2.DescribeCapacityReservationsInput, _ ...request.Option) (*ec2.DescribeCapacityReservationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeCapacityReservations cancelled", ctx.Err())
	default:
		return d.DescribeCapacityReservations(in)
	}
}

func (d *EC2Double) DescribeClassicLinkInstances(i0 *ec2.DescribeClassicLinkInstancesInput) (r0 *ec2.DescribeClassicLinkInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClassicLinkInstances", i0)
	r0, _ = returns[0].(*ec2.DescribeClassicLinkInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeClassicLinkInstancesPages(i0 *ec2.DescribeClassicLinkInstancesInput, i1 func(*ec2.DescribeClassicLinkInstancesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClassicLinkInstancesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeClassicLinkInstancesPages(in *ec2.DescribeClassicLinkInstancesInput, pager func(*ec2.DescribeClassicLinkInstancesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeClassicLinkInstances", paginators, in, pager)
}

func (d *EC2Double) DescribeClassicLinkInstancesPagesWithContext(i0 context.Context, i1 *ec2.DescribeClassicLinkInstancesInput, i2 func(*ec2.DescribeClassicLinkInstancesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClassicLinkInstancesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeClassicLinkInstancesPagesWithContext(ctx context.Context, in *ec2.DescribeClassicLinkInstancesInput, pager func(*ec2.DescribeClassicLinkInstancesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeClassicLinkInstances", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeClassicLinkInstancesRequest(i0 *ec2.DescribeClassicLinkInstancesInput) (r0 *request.Request, r1 *ec2.DescribeClassicLinkInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClassicLinkInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeClassicLinkInstancesOutput)
	return
}

func (d *EC2Double) DescribeClassicLinkInstancesWithContext(i0 context.Context, i1 *ec2.DescribeClassicLinkInstancesInput, i2 ...request.Option) (r0 *ec2.DescribeClassicLinkInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClassicLinkInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeClassicLinkInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeClassicLinkInstancesWithContext(ctx context.Context, in *ec2.DescribeClassicLinkInstancesInput, _ ...request.Option) (*ec2.DescribeClassicLinkInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeClassicLinkInstances cancelled", ctx.Err())
	default:
		return d.DescribeClassicLinkInstances(in)
	}
}

func (d *EC2Double) DescribeClientVpnAuthorizationRules(i0 *ec2.DescribeClientVpnAuthorizationRulesInput) (r0 *ec2.DescribeClientVpnAuthorizationRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClientVpnAuthorizationRules", i0)
	r0, _ = returns[0].(*ec2.DescribeClientVpnAuthorizationRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeClientVpnAuthorizationRulesPages(i0 *ec2.DescribeClientVpnAuthorizationRulesInput, i1 func(*ec2.DescribeClientVpnAuthorizationRulesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClientVpnAuthorizationRulesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeClientVpnAuthorizationRulesPages(in *ec2.DescribeClientVpnAuthorizationRulesInput, pager func(*ec2.DescribeClientVpnAuthorizationRulesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeClientVpnAuthorizationRules", paginators, in, pager)
}

func (d *EC2Double) DescribeClientVpnAuthorizationRulesPagesWithContext(i0 context.Context, i1 *ec2.DescribeClientVpnAuthorizationRulesInput, i2 func(*ec2.DescribeClientVpnAuthorizationRulesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClientVpnAuthorizationRulesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeClientVpnAuthorizationRulesPagesWithContext(ctx context.Context, in *ec2.DescribeClientVpnAuthorizationRulesInput, pager func(*ec2.DescribeClientVpnAuthorizationRulesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeClientVpnAuthorizationRules", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeClientVpnAuthorizationRulesRequest(i0 *ec2.DescribeClientVpnAuthorizationRulesInput) (r0 *request.Request, r1 *ec2.DescribeClientVpnAuthorizationRulesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClientVpnAuthorizationRulesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeClientVpnAuthorizationRulesOutput)
	return
}

func (d *EC2Double) DescribeClientVpnAuthorizationRulesWithContext(i0 context.Context, i1 *ec2.DescribeClientVpnAuthorizationRulesInput, i2 ...request.Option) (r0 *ec2.DescribeClientVpnAuthorizationRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClientVpnAuthorizationRulesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeClientVpnAuthorizationRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeClientVpnAuthorizationRulesWithContext(ctx context.Context, in *ec2.DescribeClientVpnAuthorizationRulesInput, _ ...request.Option) (*ec2.DescribeClientVpnAuthorizationRulesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeClientVpnAuthorizationRules cancelled", ctx.Err())
	default:
		return d.DescribeClientVpnAuthorizationRules(in)
	}
}

func (d *EC2Double) DescribeClientVpnConnections(i0 *ec2.DescribeClientVpnConnectionsInput) (r0 *ec2.DescribeClientVpnConnectionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClientVpnConnections", i0)
	r0, _ = returns[0].(*ec2.DescribeClientVpnConnectionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeClientVpnConnectionsPages(i0 *ec2.DescribeClientVpnConnectionsInput, i1 func(*ec2.DescribeClientVpnConnectionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClientVpnConnectionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeClientVpnConnectionsPages(in *ec2.DescribeClientVpnConnectionsInput, pager func(*ec2.DescribeClientVpnConnectionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeClientVpnConnections", paginators, in, pager)
}

func (d *EC2Double) DescribeClientVpnConnectionsPagesWithContext(i0 context.Context, i1 *ec2.DescribeClientVpnConnectionsInput, i2 func(*ec2.DescribeClientVpnConnectionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClientVpnConnectionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeClientVpnConnectionsPagesWithContext(ctx context.Context, in *ec2.DescribeClientVpnConnectionsInput, pager func(*ec2.DescribeClientVpnConnectionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeClientVpnConnections", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeClientVpnConnectionsRequest(i0 *ec2.DescribeClientVpnConnectionsInput) (r0 *request.Request, r1 *ec2.DescribeClientVpnConnectionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClientVpnConnectionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeClientVpnConnectionsOutput)
	return
}

func (d *EC2Double) DescribeClientVpnConnectionsWithContext(i0 context.Context, i1 *ec2.DescribeClientVpnConnectionsInput, i2 ...request.Option) (r0 *ec2.DescribeClientVpnConnectionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClientVpnConnectionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeClientVpnConnectionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeClientVpnConnectionsWithContext(ctx context.Context, in *ec2.DescribeClientVpnConnectionsInput, _ ...request.Option) (*ec2.DescribeClientVpnConnectionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeClientVpnConnections cancelled", ctx.Err())
	default:
		return d.DescribeClientVpnConnections(in)
	}
}

func (d *EC2Double) DescribeClientVpnEndpoints(i0 *ec2.DescribeClientVpnEndpointsInput) (r0 *ec2.DescribeClientVpnEndpointsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClientVpnEndpoints", i0)
	r0, _ = returns[0].(*ec2.DescribeClientVpnEndpointsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeClientVpnEndpointsPages(i0 *ec2.DescribeClientVpnEndpointsInput, i1 func(*ec2.DescribeClientVpnEndpointsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClientVpnEndpointsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeClientVpnEndpointsPages(in *ec2.DescribeClientVpnEndpointsInput, pager func(*ec2.DescribeClientVpnEndpointsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeClientVpnEndpoints", paginators, in, pager)
}

func (d *EC2Double) DescribeClientVpnEndpointsPagesWithContext(i0 context.Context, i1 *ec2.DescribeClientVpnEndpointsInput, i2 func(*ec2.DescribeClientVpnEndpointsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClientVpnEndpointsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeClientVpnEndpointsPagesWithContext(ctx context.Context, in *ec2.DescribeClientVpnEndpointsInput, pager func(*ec2.DescribeClientVpnEndpointsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeClientVpnEndpoints", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeClientVpnEndpointsRequest(i0 *ec2.DescribeClientVpnEndpointsInput) (r0 *request.Request, r1 *ec2.DescribeClientVpnEndpointsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClientVpnEndpointsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeClientVpnEndpointsOutput)
	return
}

func (d *EC2Double) DescribeClientVpnEndpointsWithContext(i0 context.Context, i1 *ec2.DescribeClientVpnEndpointsInput, i2 ...request.Option) (r0 *ec2.DescribeClientVpnEndpointsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClientVpnEndpointsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeClientVpnEndpointsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeClientVpnEndpointsWithContext(ctx context.Context, in *ec2.DescribeClientVpnEndpointsInput, _ ...request.Option) (*ec2.DescribeClientVpnEndpointsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeClientVpnEndpoints cancelled", ctx.Err())
	default:
		return d.DescribeClientVpnEndpoints(in)
	}
}

func (d *EC2Double) DescribeClientVpnRoutes(i0 *ec2.DescribeClientVpnRoutesInput) (r0 *ec2.DescribeClientVpnRoutesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClientVpnRoutes", i0)
	r0, _ = returns[0].(*ec2.DescribeClientVpnRoutesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeClientVpnRoutesPages(i0 *ec2.DescribeClientVpnRoutesInput, i1 func(*ec2.DescribeClientVpnRoutesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClientVpnRoutesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeClientVpnRoutesPages(in *ec2.DescribeClientVpnRoutesInput, pager func(*ec2.DescribeClientVpnRoutesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeClientVpnRoutes", paginators, in, pager)
}

func (d *EC2Double) DescribeClientVpnRoutesPagesWithContext(i0 context.Context, i1 *ec2.DescribeClientVpnRoutesInput, i2 func(*ec2.DescribeClientVpnRoutesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClientVpnRoutesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeClientVpnRoutesPagesWithContext(ctx context.Context, in *ec2.DescribeClientVpnRoutesInput, pager func(*ec2.DescribeClientVpnRoutesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeClientVpnRoutes", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeClientVpnRoutesRequest(i0 *ec2.DescribeClientVpnRoutesInput) (r0 *request.Request, r1 *ec2.DescribeClientVpnRoutesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClientVpnRoutesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeClientVpnRoutesOutput)
	return
}

func (d *EC2Double) DescribeClientVpnRoutesWithContext(i0 context.Context, i1 *ec2.DescribeClientVpnRoutesInput, i2 ...request.Option) (r0 *ec2.DescribeClientVpnRoutesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClientVpnRoutesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeClientVpnRoutesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeClientVpnRoutesWithContext(ctx context.Context, in *ec2.DescribeClientVpnRoutesInput, _ ...request.Option) (*ec2.DescribeClientVpnRoutesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeClientVpnRoutes cancelled", ctx.Err())
	default:
		return d.DescribeClientVpnRoutes(in)
	}
}

func (d *EC2Double) DescribeClientVpnTargetNetworks(i0 *ec2.DescribeClientVpnTargetNetworksInput) (r0 *ec2.DescribeClientVpnTargetNetworksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClientVpnTargetNetworks", i0)
	r0, _ = returns[0].(*ec2.DescribeClientVpnTargetNetworksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeClientVpnTargetNetworksPages(i0 *ec2.DescribeClientVpnTargetNetworksInput, i1 func(*ec2.DescribeClientVpnTargetNetworksOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClientVpnTargetNetworksPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeClientVpnTargetNetworksPages(in *ec2.DescribeClientVpnTargetNetworksInput, pager func(*ec2.DescribeClientVpnTargetNetworksOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeClientVpnTargetNetworks", paginators, in, pager)
}

func (d *EC2Double) DescribeClientVpnTargetNetworksPagesWithContext(i0 context.Context, i1 *ec2.DescribeClientVpnTargetNetworksInput, i2 func(*ec2.DescribeClientVpnTargetNetworksOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClientVpnTargetNetworksPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeClientVpnTargetNetworksPagesWithContext(ctx context.Context, in *ec2.DescribeClientVpnTargetNetworksInput, pager func(*ec2.DescribeClientVpnTargetNetworksOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeClientVpnTargetNetworks", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeClientVpnTargetNetworksRequest(i0 *ec2.DescribeClientVpnTargetNetworksInput) (r0 *request.Request, r1 *ec2.DescribeClientVpnTargetNetworksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClientVpnTargetNetworksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeClientVpnTargetNetworksOutput)
	return
}

func (d *EC2Double) DescribeClientVpnTargetNetworksWithContext(i0 context.Context, i1 *ec2.DescribeClientVpnTargetNetworksInput, i2 ...request.Option) (r0 *ec2.DescribeClientVpnTargetNetworksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClientVpnTargetNetworksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeClientVpnTargetNetworksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeClientVpnTargetNetworksWithContext(ctx context.Context, in *ec2.DescribeClientVpnTargetNetworksInput, _ ...request.Option) (*ec2.DescribeClientVpnTargetNetworksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeClientVpnTargetNetworks cancelled", ctx.Err())
	default:
		return d.DescribeClientVpnTargetNetworks(in)
	}
}

func (d *EC2Double) DescribeCoipPools(i0 *ec2.DescribeCoipPoolsInput) (r0 *ec2.DescribeCoipPoolsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCoipPools", i0)
	r0, _ = returns[0].(*ec2.DescribeCoipPoolsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeCoipPoolsRequest(i0 *ec2.DescribeCoipPoolsInput) (r0 *request.Request, r1 *ec2.DescribeCoipPoolsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCoipPoolsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeCoipPoolsOutput)
	return
}

func (d *EC2Double) DescribeCoipPoolsWithContext(i0 context.Context, i1 *ec2.DescribeCoipPoolsInput, i2 ...request.Option) (r0 *ec2.DescribeCoipPoolsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCoipPoolsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeCoipPoolsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeCoipPoolsWithContext(ctx context.Context, in *ec2.DescribeCoipPoolsInput, _ ...request.Option) (*ec2.DescribeCoipPoolsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeCoipPools cancelled", ctx.Err())
	default:
		return d.DescribeCoipPools(in)
	}
}

func (d *EC2Double) DescribeConversionTasks(i0 *ec2.DescribeConversionTasksInput) (r0 *ec2.DescribeConversionTasksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConversionTasks", i0)
	r0, _ = returns[0].(*ec2.DescribeConversionTasksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeConversionTasksRequest(i0 *ec2.DescribeConversionTasksInput) (r0 *request.Request, r1 *ec2.DescribeConversionTasksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConversionTasksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeConversionTasksOutput)
	return
}

func (d *EC2Double) DescribeConversionTasksWithContext(i0 context.Context, i1 *ec2.DescribeConversionTasksInput, i2 ...request.Option) (r0 *ec2.DescribeConversionTasksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConversionTasksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeConversionTasksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeConversionTasksWithContext(ctx context.Context, in *ec2.DescribeConversionTasksInput, _ ...request.Option) (*ec2.DescribeConversionTasksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeConversionTasks cancelled", ctx.Err())
	default:
		return d.DescribeConversionTasks(in)
	}
}

func (d *EC2Double) DescribeCustomerGateways(i0 *ec2.DescribeCustomerGatewaysInput) (r0 *ec2.DescribeCustomerGatewaysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCustomerGateways", i0)
	r0, _ = returns[0].(*ec2.DescribeCustomerGatewaysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeCustomerGatewaysRequest(i0 *ec2.DescribeCustomerGatewaysInput) (r0 *request.Request, r1 *ec2.DescribeCustomerGatewaysOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCustomerGatewaysRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeCustomerGatewaysOutput)
	return
}

func (d *EC2Double) DescribeCustomerGatewaysWithContext(i0 context.Context, i1 *ec2.DescribeCustomerGatewaysInput, i2 ...request.Option) (r0 *ec2.DescribeCustomerGatewaysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCustomerGatewaysWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeCustomerGatewaysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeCustomerGatewaysWithContext(ctx context.Context, in *ec2.DescribeCustomerGatewaysInput, _ ...request.Option) (*ec2.DescribeCustomerGatewaysOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeCustomerGateways cancelled", ctx.Err())
	default:
		return d.DescribeCustomerGateways(in)
	}
}

func (d *EC2Double) DescribeDhcpOptions(i0 *ec2.DescribeDhcpOptionsInput) (r0 *ec2.DescribeDhcpOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDhcpOptions", i0)
	r0, _ = returns[0].(*ec2.DescribeDhcpOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeDhcpOptionsPages(i0 *ec2.DescribeDhcpOptionsInput, i1 func(*ec2.DescribeDhcpOptionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDhcpOptionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeDhcpOptionsPages(in *ec2.DescribeDhcpOptionsInput, pager func(*ec2.DescribeDhcpOptionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeDhcpOptions", paginators, in, pager)
}

func (d *EC2Double) DescribeDhcpOptionsPagesWithContext(i0 context.Context, i1 *ec2.DescribeDhcpOptionsInput, i2 func(*ec2.DescribeDhcpOptionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDhcpOptionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeDhcpOptionsPagesWithContext(ctx context.Context, in *ec2.DescribeDhcpOptionsInput, pager func(*ec2.DescribeDhcpOptionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeDhcpOptions", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeDhcpOptionsRequest(i0 *ec2.DescribeDhcpOptionsInput) (r0 *request.Request, r1 *ec2.DescribeDhcpOptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDhcpOptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeDhcpOptionsOutput)
	return
}

func (d *EC2Double) DescribeDhcpOptionsWithContext(i0 context.Context, i1 *ec2.DescribeDhcpOptionsInput, i2 ...request.Option) (r0 *ec2.DescribeDhcpOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDhcpOptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeDhcpOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeDhcpOptionsWithContext(ctx context.Context, in *ec2.DescribeDhcpOptionsInput, _ ...request.Option) (*ec2.DescribeDhcpOptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDhcpOptions cancelled", ctx.Err())
	default:
		return d.DescribeDhcpOptions(in)
	}
}

func (d *EC2Double) DescribeEgressOnlyInternetGateways(i0 *ec2.DescribeEgressOnlyInternetGatewaysInput) (r0 *ec2.DescribeEgressOnlyInternetGatewaysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEgressOnlyInternetGateways", i0)
	r0, _ = returns[0].(*ec2.DescribeEgressOnlyInternetGatewaysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeEgressOnlyInternetGatewaysPages(i0 *ec2.DescribeEgressOnlyInternetGatewaysInput, i1 func(*ec2.DescribeEgressOnlyInternetGatewaysOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEgressOnlyInternetGatewaysPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeEgressOnlyInternetGatewaysPages(in *ec2.DescribeEgressOnlyInternetGatewaysInput, pager func(*ec2.DescribeEgressOnlyInternetGatewaysOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeEgressOnlyInternetGateways", paginators, in, pager)
}

func (d *EC2Double) DescribeEgressOnlyInternetGatewaysPagesWithContext(i0 context.Context, i1 *ec2.DescribeEgressOnlyInternetGatewaysInput, i2 func(*ec2.DescribeEgressOnlyInternetGatewaysOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEgressOnlyInternetGatewaysPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeEgressOnlyInternetGatewaysPagesWithContext(ctx context.Context, in *ec2.DescribeEgressOnlyInternetGatewaysInput, pager func(*ec2.DescribeEgressOnlyInternetGatewaysOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeEgressOnlyInternetGateways", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeEgressOnlyInternetGatewaysRequest(i0 *ec2.DescribeEgressOnlyInternetGatewaysInput) (r0 *request.Request, r1 *ec2.DescribeEgressOnlyInternetGatewaysOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEgressOnlyInternetGatewaysRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeEgressOnlyInternetGatewaysOutput)
	return
}

func (d *EC2Double) DescribeEgressOnlyInternetGatewaysWithContext(i0 context.Context, i1 *ec2.DescribeEgressOnlyInternetGatewaysInput, i2 ...request.Option) (r0 *ec2.DescribeEgressOnlyInternetGatewaysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEgressOnlyInternetGatewaysWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeEgressOnlyInternetGatewaysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeEgressOnlyInternetGatewaysWithContext(ctx context.Context, in *ec2.DescribeEgressOnlyInternetGatewaysInput, _ ...request.Option) (*ec2.DescribeEgressOnlyInternetGatewaysOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEgressOnlyInternetGateways cancelled", ctx.Err())
	default:
		return d.DescribeEgressOnlyInternetGateways(in)
	}
}

func (d *EC2Double) DescribeElasticGpus(i0 *ec2.DescribeElasticGpusInput) (r0 *ec2.DescribeElasticGpusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeElasticGpus", i0)
	r0, _ = returns[0].(*ec2.DescribeElasticGpusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeElasticGpusRequest(i0 *ec2.DescribeElasticGpusInput) (r0 *request.Request, r1 *ec2.DescribeElasticGpusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeElasticGpusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeElasticGpusOutput)
	return
}

func (d *EC2Double) DescribeElasticGpusWithContext(i0 context.Context, i1 *ec2.DescribeElasticGpusInput, i2 ...request.Option) (r0 *ec2.DescribeElasticGpusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeElasticGpusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeElasticGpusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeElasticGpusWithContext(ctx context.Context, in *ec2.DescribeElasticGpusInput, _ ...request.Option) (*ec2.DescribeElasticGpusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeElasticGpus cancelled", ctx.Err())
	default:
		return d.DescribeElasticGpus(in)
	}
}

func (d *EC2Double) DescribeExportImageTasks(i0 *ec2.DescribeExportImageTasksInput) (r0 *ec2.DescribeExportImageTasksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeExportImageTasks", i0)
	r0, _ = returns[0].(*ec2.DescribeExportImageTasksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeExportImageTasksPages(i0 *ec2.DescribeExportImageTasksInput, i1 func(*ec2.DescribeExportImageTasksOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeExportImageTasksPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeExportImageTasksPages(in *ec2.DescribeExportImageTasksInput, pager func(*ec2.DescribeExportImageTasksOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeExportImageTasks", paginators, in, pager)
}

func (d *EC2Double) DescribeExportImageTasksPagesWithContext(i0 context.Context, i1 *ec2.DescribeExportImageTasksInput, i2 func(*ec2.DescribeExportImageTasksOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeExportImageTasksPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeExportImageTasksPagesWithContext(ctx context.Context, in *ec2.DescribeExportImageTasksInput, pager func(*ec2.DescribeExportImageTasksOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeExportImageTasks", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeExportImageTasksRequest(i0 *ec2.DescribeExportImageTasksInput) (r0 *request.Request, r1 *ec2.DescribeExportImageTasksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeExportImageTasksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeExportImageTasksOutput)
	return
}

func (d *EC2Double) DescribeExportImageTasksWithContext(i0 context.Context, i1 *ec2.DescribeExportImageTasksInput, i2 ...request.Option) (r0 *ec2.DescribeExportImageTasksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeExportImageTasksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeExportImageTasksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeExportImageTasksWithContext(ctx context.Context, in *ec2.DescribeExportImageTasksInput, _ ...request.Option) (*ec2.DescribeExportImageTasksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeExportImageTasks cancelled", ctx.Err())
	default:
		return d.DescribeExportImageTasks(in)
	}
}

func (d *EC2Double) DescribeExportTasks(i0 *ec2.DescribeExportTasksInput) (r0 *ec2.DescribeExportTasksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeExportTasks", i0)
	r0, _ = returns[0].(*ec2.DescribeExportTasksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeExportTasksRequest(i0 *ec2.DescribeExportTasksInput) (r0 *request.Request, r1 *ec2.DescribeExportTasksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeExportTasksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeExportTasksOutput)
	return
}

func (d *EC2Double) DescribeExportTasksWithContext(i0 context.Context, i1 *ec2.DescribeExportTasksInput, i2 ...request.Option) (r0 *ec2.DescribeExportTasksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeExportTasksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeExportTasksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeExportTasksWithContext(ctx context.Context, in *ec2.DescribeExportTasksInput, _ ...request.Option) (*ec2.DescribeExportTasksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeExportTasks cancelled", ctx.Err())
	default:
		return d.DescribeExportTasks(in)
	}
}

func (d *EC2Double) DescribeFastSnapshotRestores(i0 *ec2.DescribeFastSnapshotRestoresInput) (r0 *ec2.DescribeFastSnapshotRestoresOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFastSnapshotRestores", i0)
	r0, _ = returns[0].(*ec2.DescribeFastSnapshotRestoresOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeFastSnapshotRestoresPages(i0 *ec2.DescribeFastSnapshotRestoresInput, i1 func(*ec2.DescribeFastSnapshotRestoresOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFastSnapshotRestoresPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeFastSnapshotRestoresPages(in *ec2.DescribeFastSnapshotRestoresInput, pager func(*ec2.DescribeFastSnapshotRestoresOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeFastSnapshotRestores", paginators, in, pager)
}

func (d *EC2Double) DescribeFastSnapshotRestoresPagesWithContext(i0 context.Context, i1 *ec2.DescribeFastSnapshotRestoresInput, i2 func(*ec2.DescribeFastSnapshotRestoresOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFastSnapshotRestoresPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeFastSnapshotRestoresPagesWithContext(ctx context.Context, in *ec2.DescribeFastSnapshotRestoresInput, pager func(*ec2.DescribeFastSnapshotRestoresOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeFastSnapshotRestores", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeFastSnapshotRestoresRequest(i0 *ec2.DescribeFastSnapshotRestoresInput) (r0 *request.Request, r1 *ec2.DescribeFastSnapshotRestoresOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFastSnapshotRestoresRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeFastSnapshotRestoresOutput)
	return
}

func (d *EC2Double) DescribeFastSnapshotRestoresWithContext(i0 context.Context, i1 *ec2.DescribeFastSnapshotRestoresInput, i2 ...request.Option) (r0 *ec2.DescribeFastSnapshotRestoresOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFastSnapshotRestoresWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeFastSnapshotRestoresOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeFastSnapshotRestoresWithContext(ctx context.Context, in *ec2.DescribeFastSnapshotRestoresInput, _ ...request.Option) (*ec2.DescribeFastSnapshotRestoresOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeFastSnapshotRestores cancelled", ctx.Err())
	default:
		return d.DescribeFastSnapshotRestores(in)
	}
}

func (d *EC2Double) DescribeFleetHistory(i0 *ec2.DescribeFleetHistoryInput) (r0 *ec2.DescribeFleetHistoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFleetHistory", i0)
	r0, _ = returns[0].(*ec2.DescribeFleetHistoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeFleetHistoryRequest(i0 *ec2.DescribeFleetHistoryInput) (r0 *request.Request, r1 *ec2.DescribeFleetHistoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFleetHistoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeFleetHistoryOutput)
	return
}

func (d *EC2Double) DescribeFleetHistoryWithContext(i0 context.Context, i1 *ec2.DescribeFleetHistoryInput, i2 ...request.Option) (r0 *ec2.DescribeFleetHistoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFleetHistoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeFleetHistoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeFleetHistoryWithContext(ctx context.Context, in *ec2.DescribeFleetHistoryInput, _ ...request.Option) (*ec2.DescribeFleetHistoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeFleetHistory cancelled", ctx.Err())
	default:
		return d.DescribeFleetHistory(in)
	}
}

func (d *EC2Double) DescribeFleetInstances(i0 *ec2.DescribeFleetInstancesInput) (r0 *ec2.DescribeFleetInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFleetInstances", i0)
	r0, _ = returns[0].(*ec2.DescribeFleetInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeFleetInstancesRequest(i0 *ec2.DescribeFleetInstancesInput) (r0 *request.Request, r1 *ec2.DescribeFleetInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFleetInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeFleetInstancesOutput)
	return
}

func (d *EC2Double) DescribeFleetInstancesWithContext(i0 context.Context, i1 *ec2.DescribeFleetInstancesInput, i2 ...request.Option) (r0 *ec2.DescribeFleetInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFleetInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeFleetInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeFleetInstancesWithContext(ctx context.Context, in *ec2.DescribeFleetInstancesInput, _ ...request.Option) (*ec2.DescribeFleetInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeFleetInstances cancelled", ctx.Err())
	default:
		return d.DescribeFleetInstances(in)
	}
}

func (d *EC2Double) DescribeFleets(i0 *ec2.DescribeFleetsInput) (r0 *ec2.DescribeFleetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFleets", i0)
	r0, _ = returns[0].(*ec2.DescribeFleetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeFleetsPages(i0 *ec2.DescribeFleetsInput, i1 func(*ec2.DescribeFleetsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFleetsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeFleetsPages(in *ec2.DescribeFleetsInput, pager func(*ec2.DescribeFleetsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeFleets", paginators, in, pager)
}

func (d *EC2Double) DescribeFleetsPagesWithContext(i0 context.Context, i1 *ec2.DescribeFleetsInput, i2 func(*ec2.DescribeFleetsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFleetsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeFleetsPagesWithContext(ctx context.Context, in *ec2.DescribeFleetsInput, pager func(*ec2.DescribeFleetsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeFleets", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeFleetsRequest(i0 *ec2.DescribeFleetsInput) (r0 *request.Request, r1 *ec2.DescribeFleetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFleetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeFleetsOutput)
	return
}

func (d *EC2Double) DescribeFleetsWithContext(i0 context.Context, i1 *ec2.DescribeFleetsInput, i2 ...request.Option) (r0 *ec2.DescribeFleetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFleetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeFleetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeFleetsWithContext(ctx context.Context, in *ec2.DescribeFleetsInput, _ ...request.Option) (*ec2.DescribeFleetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeFleets cancelled", ctx.Err())
	default:
		return d.DescribeFleets(in)
	}
}

func (d *EC2Double) DescribeFlowLogs(i0 *ec2.DescribeFlowLogsInput) (r0 *ec2.DescribeFlowLogsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFlowLogs", i0)
	r0, _ = returns[0].(*ec2.DescribeFlowLogsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeFlowLogsPages(i0 *ec2.DescribeFlowLogsInput, i1 func(*ec2.DescribeFlowLogsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFlowLogsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeFlowLogsPages(in *ec2.DescribeFlowLogsInput, pager func(*ec2.DescribeFlowLogsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeFlowLogs", paginators, in, pager)
}

func (d *EC2Double) DescribeFlowLogsPagesWithContext(i0 context.Context, i1 *ec2.DescribeFlowLogsInput, i2 func(*ec2.DescribeFlowLogsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFlowLogsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeFlowLogsPagesWithContext(ctx context.Context, in *ec2.DescribeFlowLogsInput, pager func(*ec2.DescribeFlowLogsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeFlowLogs", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeFlowLogsRequest(i0 *ec2.DescribeFlowLogsInput) (r0 *request.Request, r1 *ec2.DescribeFlowLogsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFlowLogsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeFlowLogsOutput)
	return
}

func (d *EC2Double) DescribeFlowLogsWithContext(i0 context.Context, i1 *ec2.DescribeFlowLogsInput, i2 ...request.Option) (r0 *ec2.DescribeFlowLogsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFlowLogsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeFlowLogsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeFlowLogsWithContext(ctx context.Context, in *ec2.DescribeFlowLogsInput, _ ...request.Option) (*ec2.DescribeFlowLogsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeFlowLogs cancelled", ctx.Err())
	default:
		return d.DescribeFlowLogs(in)
	}
}

func (d *EC2Double) DescribeFpgaImageAttribute(i0 *ec2.DescribeFpgaImageAttributeInput) (r0 *ec2.DescribeFpgaImageAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFpgaImageAttribute", i0)
	r0, _ = returns[0].(*ec2.DescribeFpgaImageAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeFpgaImageAttributeRequest(i0 *ec2.DescribeFpgaImageAttributeInput) (r0 *request.Request, r1 *ec2.DescribeFpgaImageAttributeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFpgaImageAttributeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeFpgaImageAttributeOutput)
	return
}

func (d *EC2Double) DescribeFpgaImageAttributeWithContext(i0 context.Context, i1 *ec2.DescribeFpgaImageAttributeInput, i2 ...request.Option) (r0 *ec2.DescribeFpgaImageAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFpgaImageAttributeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeFpgaImageAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeFpgaImageAttributeWithContext(ctx context.Context, in *ec2.DescribeFpgaImageAttributeInput, _ ...request.Option) (*ec2.DescribeFpgaImageAttributeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeFpgaImageAttribute cancelled", ctx.Err())
	default:
		return d.DescribeFpgaImageAttribute(in)
	}
}

func (d *EC2Double) DescribeFpgaImages(i0 *ec2.DescribeFpgaImagesInput) (r0 *ec2.DescribeFpgaImagesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFpgaImages", i0)
	r0, _ = returns[0].(*ec2.DescribeFpgaImagesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeFpgaImagesPages(i0 *ec2.DescribeFpgaImagesInput, i1 func(*ec2.DescribeFpgaImagesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFpgaImagesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeFpgaImagesPages(in *ec2.DescribeFpgaImagesInput, pager func(*ec2.DescribeFpgaImagesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeFpgaImages", paginators, in, pager)
}

func (d *EC2Double) DescribeFpgaImagesPagesWithContext(i0 context.Context, i1 *ec2.DescribeFpgaImagesInput, i2 func(*ec2.DescribeFpgaImagesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFpgaImagesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeFpgaImagesPagesWithContext(ctx context.Context, in *ec2.DescribeFpgaImagesInput, pager func(*ec2.DescribeFpgaImagesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeFpgaImages", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeFpgaImagesRequest(i0 *ec2.DescribeFpgaImagesInput) (r0 *request.Request, r1 *ec2.DescribeFpgaImagesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFpgaImagesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeFpgaImagesOutput)
	return
}

func (d *EC2Double) DescribeFpgaImagesWithContext(i0 context.Context, i1 *ec2.DescribeFpgaImagesInput, i2 ...request.Option) (r0 *ec2.DescribeFpgaImagesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFpgaImagesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeFpgaImagesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeFpgaImagesWithContext(ctx context.Context, in *ec2.DescribeFpgaImagesInput, _ ...request.Option) (*ec2.DescribeFpgaImagesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeFpgaImages cancelled", ctx.Err())
	default:
		return d.DescribeFpgaImages(in)
	}
}

func (d *EC2Double) DescribeHostReservationOfferings(i0 *ec2.DescribeHostReservationOfferingsInput) (r0 *ec2.DescribeHostReservationOfferingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHostReservationOfferings", i0)
	r0, _ = returns[0].(*ec2.DescribeHostReservationOfferingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeHostReservationOfferingsPages(i0 *ec2.DescribeHostReservationOfferingsInput, i1 func(*ec2.DescribeHostReservationOfferingsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHostReservationOfferingsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeHostReservationOfferingsPages(in *ec2.DescribeHostReservationOfferingsInput, pager func(*ec2.DescribeHostReservationOfferingsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeHostReservationOfferings", paginators, in, pager)
}

func (d *EC2Double) DescribeHostReservationOfferingsPagesWithContext(i0 context.Context, i1 *ec2.DescribeHostReservationOfferingsInput, i2 func(*ec2.DescribeHostReservationOfferingsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHostReservationOfferingsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeHostReservationOfferingsPagesWithContext(ctx context.Context, in *ec2.DescribeHostReservationOfferingsInput, pager func(*ec2.DescribeHostReservationOfferingsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeHostReservationOfferings", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeHostReservationOfferingsRequest(i0 *ec2.DescribeHostReservationOfferingsInput) (r0 *request.Request, r1 *ec2.DescribeHostReservationOfferingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHostReservationOfferingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeHostReservationOfferingsOutput)
	return
}

func (d *EC2Double) DescribeHostReservationOfferingsWithContext(i0 context.Context, i1 *ec2.DescribeHostReservationOfferingsInput, i2 ...request.Option) (r0 *ec2.DescribeHostReservationOfferingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHostReservationOfferingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeHostReservationOfferingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeHostReservationOfferingsWithContext(ctx context.Context, in *ec2.DescribeHostReservationOfferingsInput, _ ...request.Option) (*ec2.DescribeHostReservationOfferingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeHostReservationOfferings cancelled", ctx.Err())
	default:
		return d.DescribeHostReservationOfferings(in)
	}
}

func (d *EC2Double) DescribeHostReservations(i0 *ec2.DescribeHostReservationsInput) (r0 *ec2.DescribeHostReservationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHostReservations", i0)
	r0, _ = returns[0].(*ec2.DescribeHostReservationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeHostReservationsPages(i0 *ec2.DescribeHostReservationsInput, i1 func(*ec2.DescribeHostReservationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHostReservationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeHostReservationsPages(in *ec2.DescribeHostReservationsInput, pager func(*ec2.DescribeHostReservationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeHostReservations", paginators, in, pager)
}

func (d *EC2Double) DescribeHostReservationsPagesWithContext(i0 context.Context, i1 *ec2.DescribeHostReservationsInput, i2 func(*ec2.DescribeHostReservationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHostReservationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeHostReservationsPagesWithContext(ctx context.Context, in *ec2.DescribeHostReservationsInput, pager func(*ec2.DescribeHostReservationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeHostReservations", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeHostReservationsRequest(i0 *ec2.DescribeHostReservationsInput) (r0 *request.Request, r1 *ec2.DescribeHostReservationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHostReservationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeHostReservationsOutput)
	return
}

func (d *EC2Double) DescribeHostReservationsWithContext(i0 context.Context, i1 *ec2.DescribeHostReservationsInput, i2 ...request.Option) (r0 *ec2.DescribeHostReservationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHostReservationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeHostReservationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeHostReservationsWithContext(ctx context.Context, in *ec2.DescribeHostReservationsInput, _ ...request.Option) (*ec2.DescribeHostReservationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeHostReservations cancelled", ctx.Err())
	default:
		return d.DescribeHostReservations(in)
	}
}

func (d *EC2Double) DescribeHosts(i0 *ec2.DescribeHostsInput) (r0 *ec2.DescribeHostsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHosts", i0)
	r0, _ = returns[0].(*ec2.DescribeHostsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeHostsPages(i0 *ec2.DescribeHostsInput, i1 func(*ec2.DescribeHostsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHostsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeHostsPages(in *ec2.DescribeHostsInput, pager func(*ec2.DescribeHostsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeHosts", paginators, in, pager)
}

func (d *EC2Double) DescribeHostsPagesWithContext(i0 context.Context, i1 *ec2.DescribeHostsInput, i2 func(*ec2.DescribeHostsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHostsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeHostsPagesWithContext(ctx context.Context, in *ec2.DescribeHostsInput, pager func(*ec2.DescribeHostsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeHosts", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeHostsRequest(i0 *ec2.DescribeHostsInput) (r0 *request.Request, r1 *ec2.DescribeHostsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHostsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeHostsOutput)
	return
}

func (d *EC2Double) DescribeHostsWithContext(i0 context.Context, i1 *ec2.DescribeHostsInput, i2 ...request.Option) (r0 *ec2.DescribeHostsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHostsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeHostsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeHostsWithContext(ctx context.Context, in *ec2.DescribeHostsInput, _ ...request.Option) (*ec2.DescribeHostsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeHosts cancelled", ctx.Err())
	default:
		return d.DescribeHosts(in)
	}
}

func (d *EC2Double) DescribeIamInstanceProfileAssociations(i0 *ec2.DescribeIamInstanceProfileAssociationsInput) (r0 *ec2.DescribeIamInstanceProfileAssociationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIamInstanceProfileAssociations", i0)
	r0, _ = returns[0].(*ec2.DescribeIamInstanceProfileAssociationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeIamInstanceProfileAssociationsPages(i0 *ec2.DescribeIamInstanceProfileAssociationsInput, i1 func(*ec2.DescribeIamInstanceProfileAssociationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIamInstanceProfileAssociationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeIamInstanceProfileAssociationsPages(in *ec2.DescribeIamInstanceProfileAssociationsInput, pager func(*ec2.DescribeIamInstanceProfileAssociationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeIamInstanceProfileAssociations", paginators, in, pager)
}

func (d *EC2Double) DescribeIamInstanceProfileAssociationsPagesWithContext(i0 context.Context, i1 *ec2.DescribeIamInstanceProfileAssociationsInput, i2 func(*ec2.DescribeIamInstanceProfileAssociationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIamInstanceProfileAssociationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeIamInstanceProfileAssociationsPagesWithContext(ctx context.Context, in *ec2.DescribeIamInstanceProfileAssociationsInput, pager func(*ec2.DescribeIamInstanceProfileAssociationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeIamInstanceProfileAssociations", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeIamInstanceProfileAssociationsRequest(i0 *ec2.DescribeIamInstanceProfileAssociationsInput) (r0 *request.Request, r1 *ec2.DescribeIamInstanceProfileAssociationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIamInstanceProfileAssociationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeIamInstanceProfileAssociationsOutput)
	return
}

func (d *EC2Double) DescribeIamInstanceProfileAssociationsWithContext(i0 context.Context, i1 *ec2.DescribeIamInstanceProfileAssociationsInput, i2 ...request.Option) (r0 *ec2.DescribeIamInstanceProfileAssociationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIamInstanceProfileAssociationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeIamInstanceProfileAssociationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeIamInstanceProfileAssociationsWithContext(ctx context.Context, in *ec2.DescribeIamInstanceProfileAssociationsInput, _ ...request.Option) (*ec2.DescribeIamInstanceProfileAssociationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeIamInstanceProfileAssociations cancelled", ctx.Err())
	default:
		return d.DescribeIamInstanceProfileAssociations(in)
	}
}

func (d *EC2Double) DescribeIdFormat(i0 *ec2.DescribeIdFormatInput) (r0 *ec2.DescribeIdFormatOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIdFormat", i0)
	r0, _ = returns[0].(*ec2.DescribeIdFormatOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeIdFormatRequest(i0 *ec2.DescribeIdFormatInput) (r0 *request.Request, r1 *ec2.DescribeIdFormatOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIdFormatRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeIdFormatOutput)
	return
}

func (d *EC2Double) DescribeIdFormatWithContext(i0 context.Context, i1 *ec2.DescribeIdFormatInput, i2 ...request.Option) (r0 *ec2.DescribeIdFormatOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIdFormatWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeIdFormatOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeIdFormatWithContext(ctx context.Context, in *ec2.DescribeIdFormatInput, _ ...request.Option) (*ec2.DescribeIdFormatOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeIdFormat cancelled", ctx.Err())
	default:
		return d.DescribeIdFormat(in)
	}
}

func (d *EC2Double) DescribeIdentityIdFormat(i0 *ec2.DescribeIdentityIdFormatInput) (r0 *ec2.DescribeIdentityIdFormatOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIdentityIdFormat", i0)
	r0, _ = returns[0].(*ec2.DescribeIdentityIdFormatOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeIdentityIdFormatRequest(i0 *ec2.DescribeIdentityIdFormatInput) (r0 *request.Request, r1 *ec2.DescribeIdentityIdFormatOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIdentityIdFormatRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeIdentityIdFormatOutput)
	return
}

func (d *EC2Double) DescribeIdentityIdFormatWithContext(i0 context.Context, i1 *ec2.DescribeIdentityIdFormatInput, i2 ...request.Option) (r0 *ec2.DescribeIdentityIdFormatOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIdentityIdFormatWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeIdentityIdFormatOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeIdentityIdFormatWithContext(ctx context.Context, in *ec2.DescribeIdentityIdFormatInput, _ ...request.Option) (*ec2.DescribeIdentityIdFormatOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeIdentityIdFormat cancelled", ctx.Err())
	default:
		return d.DescribeIdentityIdFormat(in)
	}
}

func (d *EC2Double) DescribeImageAttribute(i0 *ec2.DescribeImageAttributeInput) (r0 *ec2.DescribeImageAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImageAttribute", i0)
	r0, _ = returns[0].(*ec2.DescribeImageAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeImageAttributeRequest(i0 *ec2.DescribeImageAttributeInput) (r0 *request.Request, r1 *ec2.DescribeImageAttributeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImageAttributeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeImageAttributeOutput)
	return
}

func (d *EC2Double) DescribeImageAttributeWithContext(i0 context.Context, i1 *ec2.DescribeImageAttributeInput, i2 ...request.Option) (r0 *ec2.DescribeImageAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImageAttributeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeImageAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeImageAttributeWithContext(ctx context.Context, in *ec2.DescribeImageAttributeInput, _ ...request.Option) (*ec2.DescribeImageAttributeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeImageAttribute cancelled", ctx.Err())
	default:
		return d.DescribeImageAttribute(in)
	}
}

func (d *EC2Double) DescribeImages(i0 *ec2.DescribeImagesInput) (r0 *ec2.DescribeImagesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImages", i0)
	r0, _ = returns[0].(*ec2.DescribeImagesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeImagesRequest(i0 *ec2.DescribeImagesInput) (r0 *request.Request, r1 *ec2.DescribeImagesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImagesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeImagesOutput)
	return
}

func (d *EC2Double) DescribeImagesWithContext(i0 context.Context, i1 *ec2.DescribeImagesInput, i2 ...request.Option) (r0 *ec2.DescribeImagesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImagesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeImagesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeImagesWithContext(ctx context.Context, in *ec2.DescribeImagesInput, _ ...request.Option) (*ec2.DescribeImagesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeImages cancelled", ctx.Err())
	default:
		return d.DescribeImages(in)
	}
}

func (d *EC2Double) DescribeImportImageTasks(i0 *ec2.DescribeImportImageTasksInput) (r0 *ec2.DescribeImportImageTasksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImportImageTasks", i0)
	r0, _ = returns[0].(*ec2.DescribeImportImageTasksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeImportImageTasksPages(i0 *ec2.DescribeImportImageTasksInput, i1 func(*ec2.DescribeImportImageTasksOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImportImageTasksPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeImportImageTasksPages(in *ec2.DescribeImportImageTasksInput, pager func(*ec2.DescribeImportImageTasksOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeImportImageTasks", paginators, in, pager)
}

func (d *EC2Double) DescribeImportImageTasksPagesWithContext(i0 context.Context, i1 *ec2.DescribeImportImageTasksInput, i2 func(*ec2.DescribeImportImageTasksOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImportImageTasksPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeImportImageTasksPagesWithContext(ctx context.Context, in *ec2.DescribeImportImageTasksInput, pager func(*ec2.DescribeImportImageTasksOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeImportImageTasks", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeImportImageTasksRequest(i0 *ec2.DescribeImportImageTasksInput) (r0 *request.Request, r1 *ec2.DescribeImportImageTasksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImportImageTasksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeImportImageTasksOutput)
	return
}

func (d *EC2Double) DescribeImportImageTasksWithContext(i0 context.Context, i1 *ec2.DescribeImportImageTasksInput, i2 ...request.Option) (r0 *ec2.DescribeImportImageTasksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImportImageTasksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeImportImageTasksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeImportImageTasksWithContext(ctx context.Context, in *ec2.DescribeImportImageTasksInput, _ ...request.Option) (*ec2.DescribeImportImageTasksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeImportImageTasks cancelled", ctx.Err())
	default:
		return d.DescribeImportImageTasks(in)
	}
}

func (d *EC2Double) DescribeImportSnapshotTasks(i0 *ec2.DescribeImportSnapshotTasksInput) (r0 *ec2.DescribeImportSnapshotTasksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImportSnapshotTasks", i0)
	r0, _ = returns[0].(*ec2.DescribeImportSnapshotTasksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeImportSnapshotTasksPages(i0 *ec2.DescribeImportSnapshotTasksInput, i1 func(*ec2.DescribeImportSnapshotTasksOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImportSnapshotTasksPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeImportSnapshotTasksPages(in *ec2.DescribeImportSnapshotTasksInput, pager func(*ec2.DescribeImportSnapshotTasksOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeImportSnapshotTasks", paginators, in, pager)
}

func (d *EC2Double) DescribeImportSnapshotTasksPagesWithContext(i0 context.Context, i1 *ec2.DescribeImportSnapshotTasksInput, i2 func(*ec2.DescribeImportSnapshotTasksOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImportSnapshotTasksPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeImportSnapshotTasksPagesWithContext(ctx context.Context, in *ec2.DescribeImportSnapshotTasksInput, pager func(*ec2.DescribeImportSnapshotTasksOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeImportSnapshotTasks", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeImportSnapshotTasksRequest(i0 *ec2.DescribeImportSnapshotTasksInput) (r0 *request.Request, r1 *ec2.DescribeImportSnapshotTasksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImportSnapshotTasksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeImportSnapshotTasksOutput)
	return
}

func (d *EC2Double) DescribeImportSnapshotTasksWithContext(i0 context.Context, i1 *ec2.DescribeImportSnapshotTasksInput, i2 ...request.Option) (r0 *ec2.DescribeImportSnapshotTasksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImportSnapshotTasksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeImportSnapshotTasksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeImportSnapshotTasksWithContext(ctx context.Context, in *ec2.DescribeImportSnapshotTasksInput, _ ...request.Option) (*ec2.DescribeImportSnapshotTasksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeImportSnapshotTasks cancelled", ctx.Err())
	default:
		return d.DescribeImportSnapshotTasks(in)
	}
}

func (d *EC2Double) DescribeInstanceAttribute(i0 *ec2.DescribeInstanceAttributeInput) (r0 *ec2.DescribeInstanceAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstanceAttribute", i0)
	r0, _ = returns[0].(*ec2.DescribeInstanceAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeInstanceAttributeRequest(i0 *ec2.DescribeInstanceAttributeInput) (r0 *request.Request, r1 *ec2.DescribeInstanceAttributeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstanceAttributeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeInstanceAttributeOutput)
	return
}

func (d *EC2Double) DescribeInstanceAttributeWithContext(i0 context.Context, i1 *ec2.DescribeInstanceAttributeInput, i2 ...request.Option) (r0 *ec2.DescribeInstanceAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstanceAttributeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeInstanceAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeInstanceAttributeWithContext(ctx context.Context, in *ec2.DescribeInstanceAttributeInput, _ ...request.Option) (*ec2.DescribeInstanceAttributeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeInstanceAttribute cancelled", ctx.Err())
	default:
		return d.DescribeInstanceAttribute(in)
	}
}

func (d *EC2Double) DescribeInstanceCreditSpecifications(i0 *ec2.DescribeInstanceCreditSpecificationsInput) (r0 *ec2.DescribeInstanceCreditSpecificationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstanceCreditSpecifications", i0)
	r0, _ = returns[0].(*ec2.DescribeInstanceCreditSpecificationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeInstanceCreditSpecificationsPages(i0 *ec2.DescribeInstanceCreditSpecificationsInput, i1 func(*ec2.DescribeInstanceCreditSpecificationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstanceCreditSpecificationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeInstanceCreditSpecificationsPages(in *ec2.DescribeInstanceCreditSpecificationsInput, pager func(*ec2.DescribeInstanceCreditSpecificationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeInstanceCreditSpecifications", paginators, in, pager)
}

func (d *EC2Double) DescribeInstanceCreditSpecificationsPagesWithContext(i0 context.Context, i1 *ec2.DescribeInstanceCreditSpecificationsInput, i2 func(*ec2.DescribeInstanceCreditSpecificationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstanceCreditSpecificationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeInstanceCreditSpecificationsPagesWithContext(ctx context.Context, in *ec2.DescribeInstanceCreditSpecificationsInput, pager func(*ec2.DescribeInstanceCreditSpecificationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeInstanceCreditSpecifications", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeInstanceCreditSpecificationsRequest(i0 *ec2.DescribeInstanceCreditSpecificationsInput) (r0 *request.Request, r1 *ec2.DescribeInstanceCreditSpecificationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstanceCreditSpecificationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeInstanceCreditSpecificationsOutput)
	return
}

func (d *EC2Double) DescribeInstanceCreditSpecificationsWithContext(i0 context.Context, i1 *ec2.DescribeInstanceCreditSpecificationsInput, i2 ...request.Option) (r0 *ec2.DescribeInstanceCreditSpecificationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstanceCreditSpecificationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeInstanceCreditSpecificationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeInstanceCreditSpecificationsWithContext(ctx context.Context, in *ec2.DescribeInstanceCreditSpecificationsInput, _ ...request.Option) (*ec2.DescribeInstanceCreditSpecificationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeInstanceCreditSpecifications cancelled", ctx.Err())
	default:
		return d.DescribeInstanceCreditSpecifications(in)
	}
}

func (d *EC2Double) DescribeInstanceStatus(i0 *ec2.DescribeInstanceStatusInput) (r0 *ec2.DescribeInstanceStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstanceStatus", i0)
	r0, _ = returns[0].(*ec2.DescribeInstanceStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeInstanceStatusPages(i0 *ec2.DescribeInstanceStatusInput, i1 func(*ec2.DescribeInstanceStatusOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstanceStatusPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeInstanceStatusPages(in *ec2.DescribeInstanceStatusInput, pager func(*ec2.DescribeInstanceStatusOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeInstanceStatus", paginators, in, pager)
}

func (d *EC2Double) DescribeInstanceStatusPagesWithContext(i0 context.Context, i1 *ec2.DescribeInstanceStatusInput, i2 func(*ec2.DescribeInstanceStatusOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstanceStatusPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeInstanceStatusPagesWithContext(ctx context.Context, in *ec2.DescribeInstanceStatusInput, pager func(*ec2.DescribeInstanceStatusOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeInstanceStatus", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeInstanceStatusRequest(i0 *ec2.DescribeInstanceStatusInput) (r0 *request.Request, r1 *ec2.DescribeInstanceStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstanceStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeInstanceStatusOutput)
	return
}

func (d *EC2Double) DescribeInstanceStatusWithContext(i0 context.Context, i1 *ec2.DescribeInstanceStatusInput, i2 ...request.Option) (r0 *ec2.DescribeInstanceStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstanceStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeInstanceStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeInstanceStatusWithContext(ctx context.Context, in *ec2.DescribeInstanceStatusInput, _ ...request.Option) (*ec2.DescribeInstanceStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeInstanceStatus cancelled", ctx.Err())
	default:
		return d.DescribeInstanceStatus(in)
	}
}

func (d *EC2Double) DescribeInstanceTypeOfferings(i0 *ec2.DescribeInstanceTypeOfferingsInput) (r0 *ec2.DescribeInstanceTypeOfferingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstanceTypeOfferings", i0)
	r0, _ = returns[0].(*ec2.DescribeInstanceTypeOfferingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeInstanceTypeOfferingsRequest(i0 *ec2.DescribeInstanceTypeOfferingsInput) (r0 *request.Request, r1 *ec2.DescribeInstanceTypeOfferingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstanceTypeOfferingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeInstanceTypeOfferingsOutput)
	return
}

func (d *EC2Double) DescribeInstanceTypeOfferingsWithContext(i0 context.Context, i1 *ec2.DescribeInstanceTypeOfferingsInput, i2 ...request.Option) (r0 *ec2.DescribeInstanceTypeOfferingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstanceTypeOfferingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeInstanceTypeOfferingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeInstanceTypeOfferingsWithContext(ctx context.Context, in *ec2.DescribeInstanceTypeOfferingsInput, _ ...request.Option) (*ec2.DescribeInstanceTypeOfferingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeInstanceTypeOfferings cancelled", ctx.Err())
	default:
		return d.DescribeInstanceTypeOfferings(in)
	}
}

func (d *EC2Double) DescribeInstanceTypes(i0 *ec2.DescribeInstanceTypesInput) (r0 *ec2.DescribeInstanceTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstanceTypes", i0)
	r0, _ = returns[0].(*ec2.DescribeInstanceTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeInstanceTypesRequest(i0 *ec2.DescribeInstanceTypesInput) (r0 *request.Request, r1 *ec2.DescribeInstanceTypesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstanceTypesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeInstanceTypesOutput)
	return
}

func (d *EC2Double) DescribeInstanceTypesWithContext(i0 context.Context, i1 *ec2.DescribeInstanceTypesInput, i2 ...request.Option) (r0 *ec2.DescribeInstanceTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstanceTypesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeInstanceTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeInstanceTypesWithContext(ctx context.Context, in *ec2.DescribeInstanceTypesInput, _ ...request.Option) (*ec2.DescribeInstanceTypesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeInstanceTypes cancelled", ctx.Err())
	default:
		return d.DescribeInstanceTypes(in)
	}
}

func (d *EC2Double) DescribeInstances(i0 *ec2.DescribeInstancesInput) (r0 *ec2.DescribeInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstances", i0)
	r0, _ = returns[0].(*ec2.DescribeInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeInstancesPages(i0 *ec2.DescribeInstancesInput, i1 func(*ec2.DescribeInstancesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstancesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeInstancesPages(in *ec2.DescribeInstancesInput, pager func(*ec2.DescribeInstancesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeInstances", paginators, in, pager)
}

func (d *EC2Double) DescribeInstancesPagesWithContext(i0 context.Context, i1 *ec2.DescribeInstancesInput, i2 func(*ec2.DescribeInstancesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstancesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeInstancesPagesWithContext(ctx context.Context, in *ec2.DescribeInstancesInput, pager func(*ec2.DescribeInstancesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeInstances", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeInstancesRequest(i0 *ec2.DescribeInstancesInput) (r0 *request.Request, r1 *ec2.DescribeInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeInstancesOutput)
	return
}

func (d *EC2Double) DescribeInstancesWithContext(i0 context.Context, i1 *ec2.DescribeInstancesInput, i2 ...request.Option) (r0 *ec2.DescribeInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeInstancesWithContext(ctx context.Context, in *ec2.DescribeInstancesInput, _ ...request.Option) (*ec2.DescribeInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeInstances cancelled", ctx.Err())
	default:
		return d.DescribeInstances(in)
	}
}

func (d *EC2Double) DescribeInternetGateways(i0 *ec2.DescribeInternetGatewaysInput) (r0 *ec2.DescribeInternetGatewaysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInternetGateways", i0)
	r0, _ = returns[0].(*ec2.DescribeInternetGatewaysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeInternetGatewaysPages(i0 *ec2.DescribeInternetGatewaysInput, i1 func(*ec2.DescribeInternetGatewaysOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInternetGatewaysPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeInternetGatewaysPages(in *ec2.DescribeInternetGatewaysInput, pager func(*ec2.DescribeInternetGatewaysOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeInternetGateways", paginators, in, pager)
}

func (d *EC2Double) DescribeInternetGatewaysPagesWithContext(i0 context.Context, i1 *ec2.DescribeInternetGatewaysInput, i2 func(*ec2.DescribeInternetGatewaysOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInternetGatewaysPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeInternetGatewaysPagesWithContext(ctx context.Context, in *ec2.DescribeInternetGatewaysInput, pager func(*ec2.DescribeInternetGatewaysOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeInternetGateways", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeInternetGatewaysRequest(i0 *ec2.DescribeInternetGatewaysInput) (r0 *request.Request, r1 *ec2.DescribeInternetGatewaysOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInternetGatewaysRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeInternetGatewaysOutput)
	return
}

func (d *EC2Double) DescribeInternetGatewaysWithContext(i0 context.Context, i1 *ec2.DescribeInternetGatewaysInput, i2 ...request.Option) (r0 *ec2.DescribeInternetGatewaysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInternetGatewaysWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeInternetGatewaysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeInternetGatewaysWithContext(ctx context.Context, in *ec2.DescribeInternetGatewaysInput, _ ...request.Option) (*ec2.DescribeInternetGatewaysOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeInternetGateways cancelled", ctx.Err())
	default:
		return d.DescribeInternetGateways(in)
	}
}

func (d *EC2Double) DescribeIpv6Pools(i0 *ec2.DescribeIpv6PoolsInput) (r0 *ec2.DescribeIpv6PoolsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIpv6Pools", i0)
	r0, _ = returns[0].(*ec2.DescribeIpv6PoolsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeIpv6PoolsPages(i0 *ec2.DescribeIpv6PoolsInput, i1 func(*ec2.DescribeIpv6PoolsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIpv6PoolsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeIpv6PoolsPages(in *ec2.DescribeIpv6PoolsInput, pager func(*ec2.DescribeIpv6PoolsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeIpv6Pools", paginators, in, pager)
}

func (d *EC2Double) DescribeIpv6PoolsPagesWithContext(i0 context.Context, i1 *ec2.DescribeIpv6PoolsInput, i2 func(*ec2.DescribeIpv6PoolsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIpv6PoolsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeIpv6PoolsPagesWithContext(ctx context.Context, in *ec2.DescribeIpv6PoolsInput, pager func(*ec2.DescribeIpv6PoolsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeIpv6Pools", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeIpv6PoolsRequest(i0 *ec2.DescribeIpv6PoolsInput) (r0 *request.Request, r1 *ec2.DescribeIpv6PoolsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIpv6PoolsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeIpv6PoolsOutput)
	return
}

func (d *EC2Double) DescribeIpv6PoolsWithContext(i0 context.Context, i1 *ec2.DescribeIpv6PoolsInput, i2 ...request.Option) (r0 *ec2.DescribeIpv6PoolsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIpv6PoolsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeIpv6PoolsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeIpv6PoolsWithContext(ctx context.Context, in *ec2.DescribeIpv6PoolsInput, _ ...request.Option) (*ec2.DescribeIpv6PoolsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeIpv6Pools cancelled", ctx.Err())
	default:
		return d.DescribeIpv6Pools(in)
	}
}

func (d *EC2Double) DescribeKeyPairs(i0 *ec2.DescribeKeyPairsInput) (r0 *ec2.DescribeKeyPairsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeKeyPairs", i0)
	r0, _ = returns[0].(*ec2.DescribeKeyPairsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeKeyPairsRequest(i0 *ec2.DescribeKeyPairsInput) (r0 *request.Request, r1 *ec2.DescribeKeyPairsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeKeyPairsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeKeyPairsOutput)
	return
}

func (d *EC2Double) DescribeKeyPairsWithContext(i0 context.Context, i1 *ec2.DescribeKeyPairsInput, i2 ...request.Option) (r0 *ec2.DescribeKeyPairsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeKeyPairsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeKeyPairsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeKeyPairsWithContext(ctx context.Context, in *ec2.DescribeKeyPairsInput, _ ...request.Option) (*ec2.DescribeKeyPairsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeKeyPairs cancelled", ctx.Err())
	default:
		return d.DescribeKeyPairs(in)
	}
}

func (d *EC2Double) DescribeLaunchTemplateVersions(i0 *ec2.DescribeLaunchTemplateVersionsInput) (r0 *ec2.DescribeLaunchTemplateVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLaunchTemplateVersions", i0)
	r0, _ = returns[0].(*ec2.DescribeLaunchTemplateVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeLaunchTemplateVersionsPages(i0 *ec2.DescribeLaunchTemplateVersionsInput, i1 func(*ec2.DescribeLaunchTemplateVersionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLaunchTemplateVersionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeLaunchTemplateVersionsPages(in *ec2.DescribeLaunchTemplateVersionsInput, pager func(*ec2.DescribeLaunchTemplateVersionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeLaunchTemplateVersions", paginators, in, pager)
}

func (d *EC2Double) DescribeLaunchTemplateVersionsPagesWithContext(i0 context.Context, i1 *ec2.DescribeLaunchTemplateVersionsInput, i2 func(*ec2.DescribeLaunchTemplateVersionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLaunchTemplateVersionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeLaunchTemplateVersionsPagesWithContext(ctx context.Context, in *ec2.DescribeLaunchTemplateVersionsInput, pager func(*ec2.DescribeLaunchTemplateVersionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeLaunchTemplateVersions", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeLaunchTemplateVersionsRequest(i0 *ec2.DescribeLaunchTemplateVersionsInput) (r0 *request.Request, r1 *ec2.DescribeLaunchTemplateVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLaunchTemplateVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeLaunchTemplateVersionsOutput)
	return
}

func (d *EC2Double) DescribeLaunchTemplateVersionsWithContext(i0 context.Context, i1 *ec2.DescribeLaunchTemplateVersionsInput, i2 ...request.Option) (r0 *ec2.DescribeLaunchTemplateVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLaunchTemplateVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeLaunchTemplateVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeLaunchTemplateVersionsWithContext(ctx context.Context, in *ec2.DescribeLaunchTemplateVersionsInput, _ ...request.Option) (*ec2.DescribeLaunchTemplateVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeLaunchTemplateVersions cancelled", ctx.Err())
	default:
		return d.DescribeLaunchTemplateVersions(in)
	}
}

func (d *EC2Double) DescribeLaunchTemplates(i0 *ec2.DescribeLaunchTemplatesInput) (r0 *ec2.DescribeLaunchTemplatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLaunchTemplates", i0)
	r0, _ = returns[0].(*ec2.DescribeLaunchTemplatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeLaunchTemplatesPages(i0 *ec2.DescribeLaunchTemplatesInput, i1 func(*ec2.DescribeLaunchTemplatesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLaunchTemplatesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeLaunchTemplatesPages(in *ec2.DescribeLaunchTemplatesInput, pager func(*ec2.DescribeLaunchTemplatesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeLaunchTemplates", paginators, in, pager)
}

func (d *EC2Double) DescribeLaunchTemplatesPagesWithContext(i0 context.Context, i1 *ec2.DescribeLaunchTemplatesInput, i2 func(*ec2.DescribeLaunchTemplatesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLaunchTemplatesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeLaunchTemplatesPagesWithContext(ctx context.Context, in *ec2.DescribeLaunchTemplatesInput, pager func(*ec2.DescribeLaunchTemplatesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeLaunchTemplates", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeLaunchTemplatesRequest(i0 *ec2.DescribeLaunchTemplatesInput) (r0 *request.Request, r1 *ec2.DescribeLaunchTemplatesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLaunchTemplatesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeLaunchTemplatesOutput)
	return
}

func (d *EC2Double) DescribeLaunchTemplatesWithContext(i0 context.Context, i1 *ec2.DescribeLaunchTemplatesInput, i2 ...request.Option) (r0 *ec2.DescribeLaunchTemplatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLaunchTemplatesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeLaunchTemplatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeLaunchTemplatesWithContext(ctx context.Context, in *ec2.DescribeLaunchTemplatesInput, _ ...request.Option) (*ec2.DescribeLaunchTemplatesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeLaunchTemplates cancelled", ctx.Err())
	default:
		return d.DescribeLaunchTemplates(in)
	}
}

func (d *EC2Double) DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations(i0 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput) (r0 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations", i0)
	r0, _ = returns[0].(*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest(i0 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput) (r0 *request.Request, r1 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput)
	return
}

func (d *EC2Double) DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsWithContext(i0 context.Context, i1 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput, i2 ...request.Option) (r0 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsWithContext(ctx context.Context, in *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput, _ ...request.Option) (*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations cancelled", ctx.Err())
	default:
		return d.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations(in)
	}
}

func (d *EC2Double) DescribeLocalGatewayRouteTableVpcAssociations(i0 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput) (r0 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLocalGatewayRouteTableVpcAssociations", i0)
	r0, _ = returns[0].(*ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeLocalGatewayRouteTableVpcAssociationsRequest(i0 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput) (r0 *request.Request, r1 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLocalGatewayRouteTableVpcAssociationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput)
	return
}

func (d *EC2Double) DescribeLocalGatewayRouteTableVpcAssociationsWithContext(i0 context.Context, i1 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput, i2 ...request.Option) (r0 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLocalGatewayRouteTableVpcAssociationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeLocalGatewayRouteTableVpcAssociationsWithContext(ctx context.Context, in *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput, _ ...request.Option) (*ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeLocalGatewayRouteTableVpcAssociations cancelled", ctx.Err())
	default:
		return d.DescribeLocalGatewayRouteTableVpcAssociations(in)
	}
}

func (d *EC2Double) DescribeLocalGatewayRouteTables(i0 *ec2.DescribeLocalGatewayRouteTablesInput) (r0 *ec2.DescribeLocalGatewayRouteTablesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLocalGatewayRouteTables", i0)
	r0, _ = returns[0].(*ec2.DescribeLocalGatewayRouteTablesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeLocalGatewayRouteTablesRequest(i0 *ec2.DescribeLocalGatewayRouteTablesInput) (r0 *request.Request, r1 *ec2.DescribeLocalGatewayRouteTablesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLocalGatewayRouteTablesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeLocalGatewayRouteTablesOutput)
	return
}

func (d *EC2Double) DescribeLocalGatewayRouteTablesWithContext(i0 context.Context, i1 *ec2.DescribeLocalGatewayRouteTablesInput, i2 ...request.Option) (r0 *ec2.DescribeLocalGatewayRouteTablesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLocalGatewayRouteTablesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeLocalGatewayRouteTablesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeLocalGatewayRouteTablesWithContext(ctx context.Context, in *ec2.DescribeLocalGatewayRouteTablesInput, _ ...request.Option) (*ec2.DescribeLocalGatewayRouteTablesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeLocalGatewayRouteTables cancelled", ctx.Err())
	default:
		return d.DescribeLocalGatewayRouteTables(in)
	}
}

func (d *EC2Double) DescribeLocalGatewayVirtualInterfaceGroups(i0 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput) (r0 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLocalGatewayVirtualInterfaceGroups", i0)
	r0, _ = returns[0].(*ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeLocalGatewayVirtualInterfaceGroupsRequest(i0 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput) (r0 *request.Request, r1 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLocalGatewayVirtualInterfaceGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput)
	return
}

func (d *EC2Double) DescribeLocalGatewayVirtualInterfaceGroupsWithContext(i0 context.Context, i1 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput, i2 ...request.Option) (r0 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLocalGatewayVirtualInterfaceGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeLocalGatewayVirtualInterfaceGroupsWithContext(ctx context.Context, in *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput, _ ...request.Option) (*ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeLocalGatewayVirtualInterfaceGroups cancelled", ctx.Err())
	default:
		return d.DescribeLocalGatewayVirtualInterfaceGroups(in)
	}
}

func (d *EC2Double) DescribeLocalGatewayVirtualInterfaces(i0 *ec2.DescribeLocalGatewayVirtualInterfacesInput) (r0 *ec2.DescribeLocalGatewayVirtualInterfacesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLocalGatewayVirtualInterfaces", i0)
	r0, _ = returns[0].(*ec2.DescribeLocalGatewayVirtualInterfacesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeLocalGatewayVirtualInterfacesRequest(i0 *ec2.DescribeLocalGatewayVirtualInterfacesInput) (r0 *request.Request, r1 *ec2.DescribeLocalGatewayVirtualInterfacesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLocalGatewayVirtualInterfacesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeLocalGatewayVirtualInterfacesOutput)
	return
}

func (d *EC2Double) DescribeLocalGatewayVirtualInterfacesWithContext(i0 context.Context, i1 *ec2.DescribeLocalGatewayVirtualInterfacesInput, i2 ...request.Option) (r0 *ec2.DescribeLocalGatewayVirtualInterfacesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLocalGatewayVirtualInterfacesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeLocalGatewayVirtualInterfacesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeLocalGatewayVirtualInterfacesWithContext(ctx context.Context, in *ec2.DescribeLocalGatewayVirtualInterfacesInput, _ ...request.Option) (*ec2.DescribeLocalGatewayVirtualInterfacesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeLocalGatewayVirtualInterfaces cancelled", ctx.Err())
	default:
		return d.DescribeLocalGatewayVirtualInterfaces(in)
	}
}

func (d *EC2Double) DescribeLocalGateways(i0 *ec2.DescribeLocalGatewaysInput) (r0 *ec2.DescribeLocalGatewaysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLocalGateways", i0)
	r0, _ = returns[0].(*ec2.DescribeLocalGatewaysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeLocalGatewaysRequest(i0 *ec2.DescribeLocalGatewaysInput) (r0 *request.Request, r1 *ec2.DescribeLocalGatewaysOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLocalGatewaysRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeLocalGatewaysOutput)
	return
}

func (d *EC2Double) DescribeLocalGatewaysWithContext(i0 context.Context, i1 *ec2.DescribeLocalGatewaysInput, i2 ...request.Option) (r0 *ec2.DescribeLocalGatewaysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLocalGatewaysWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeLocalGatewaysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeLocalGatewaysWithContext(ctx context.Context, in *ec2.DescribeLocalGatewaysInput, _ ...request.Option) (*ec2.DescribeLocalGatewaysOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeLocalGateways cancelled", ctx.Err())
	default:
		return d.DescribeLocalGateways(in)
	}
}

func (d *EC2Double) DescribeMovingAddresses(i0 *ec2.DescribeMovingAddressesInput) (r0 *ec2.DescribeMovingAddressesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMovingAddresses", i0)
	r0, _ = returns[0].(*ec2.DescribeMovingAddressesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeMovingAddressesPages(i0 *ec2.DescribeMovingAddressesInput, i1 func(*ec2.DescribeMovingAddressesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMovingAddressesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeMovingAddressesPages(in *ec2.DescribeMovingAddressesInput, pager func(*ec2.DescribeMovingAddressesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeMovingAddresses", paginators, in, pager)
}

func (d *EC2Double) DescribeMovingAddressesPagesWithContext(i0 context.Context, i1 *ec2.DescribeMovingAddressesInput, i2 func(*ec2.DescribeMovingAddressesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMovingAddressesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeMovingAddressesPagesWithContext(ctx context.Context, in *ec2.DescribeMovingAddressesInput, pager func(*ec2.DescribeMovingAddressesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeMovingAddresses", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeMovingAddressesRequest(i0 *ec2.DescribeMovingAddressesInput) (r0 *request.Request, r1 *ec2.DescribeMovingAddressesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMovingAddressesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeMovingAddressesOutput)
	return
}

func (d *EC2Double) DescribeMovingAddressesWithContext(i0 context.Context, i1 *ec2.DescribeMovingAddressesInput, i2 ...request.Option) (r0 *ec2.DescribeMovingAddressesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMovingAddressesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeMovingAddressesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeMovingAddressesWithContext(ctx context.Context, in *ec2.DescribeMovingAddressesInput, _ ...request.Option) (*ec2.DescribeMovingAddressesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeMovingAddresses cancelled", ctx.Err())
	default:
		return d.DescribeMovingAddresses(in)
	}
}

func (d *EC2Double) DescribeNatGateways(i0 *ec2.DescribeNatGatewaysInput) (r0 *ec2.DescribeNatGatewaysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNatGateways", i0)
	r0, _ = returns[0].(*ec2.DescribeNatGatewaysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeNatGatewaysPages(i0 *ec2.DescribeNatGatewaysInput, i1 func(*ec2.DescribeNatGatewaysOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNatGatewaysPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeNatGatewaysPages(in *ec2.DescribeNatGatewaysInput, pager func(*ec2.DescribeNatGatewaysOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeNatGateways", paginators, in, pager)
}

func (d *EC2Double) DescribeNatGatewaysPagesWithContext(i0 context.Context, i1 *ec2.DescribeNatGatewaysInput, i2 func(*ec2.DescribeNatGatewaysOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNatGatewaysPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeNatGatewaysPagesWithContext(ctx context.Context, in *ec2.DescribeNatGatewaysInput, pager func(*ec2.DescribeNatGatewaysOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeNatGateways", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeNatGatewaysRequest(i0 *ec2.DescribeNatGatewaysInput) (r0 *request.Request, r1 *ec2.DescribeNatGatewaysOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNatGatewaysRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeNatGatewaysOutput)
	return
}

func (d *EC2Double) DescribeNatGatewaysWithContext(i0 context.Context, i1 *ec2.DescribeNatGatewaysInput, i2 ...request.Option) (r0 *ec2.DescribeNatGatewaysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNatGatewaysWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeNatGatewaysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeNatGatewaysWithContext(ctx context.Context, in *ec2.DescribeNatGatewaysInput, _ ...request.Option) (*ec2.DescribeNatGatewaysOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeNatGateways cancelled", ctx.Err())
	default:
		return d.DescribeNatGateways(in)
	}
}

func (d *EC2Double) DescribeNetworkAcls(i0 *ec2.DescribeNetworkAclsInput) (r0 *ec2.DescribeNetworkAclsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNetworkAcls", i0)
	r0, _ = returns[0].(*ec2.DescribeNetworkAclsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeNetworkAclsPages(i0 *ec2.DescribeNetworkAclsInput, i1 func(*ec2.DescribeNetworkAclsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNetworkAclsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeNetworkAclsPages(in *ec2.DescribeNetworkAclsInput, pager func(*ec2.DescribeNetworkAclsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeNetworkAcls", paginators, in, pager)
}

func (d *EC2Double) DescribeNetworkAclsPagesWithContext(i0 context.Context, i1 *ec2.DescribeNetworkAclsInput, i2 func(*ec2.DescribeNetworkAclsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNetworkAclsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeNetworkAclsPagesWithContext(ctx context.Context, in *ec2.DescribeNetworkAclsInput, pager func(*ec2.DescribeNetworkAclsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeNetworkAcls", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeNetworkAclsRequest(i0 *ec2.DescribeNetworkAclsInput) (r0 *request.Request, r1 *ec2.DescribeNetworkAclsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNetworkAclsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeNetworkAclsOutput)
	return
}

func (d *EC2Double) DescribeNetworkAclsWithContext(i0 context.Context, i1 *ec2.DescribeNetworkAclsInput, i2 ...request.Option) (r0 *ec2.DescribeNetworkAclsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNetworkAclsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeNetworkAclsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeNetworkAclsWithContext(ctx context.Context, in *ec2.DescribeNetworkAclsInput, _ ...request.Option) (*ec2.DescribeNetworkAclsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeNetworkAcls cancelled", ctx.Err())
	default:
		return d.DescribeNetworkAcls(in)
	}
}

func (d *EC2Double) DescribeNetworkInterfaceAttribute(i0 *ec2.DescribeNetworkInterfaceAttributeInput) (r0 *ec2.DescribeNetworkInterfaceAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNetworkInterfaceAttribute", i0)
	r0, _ = returns[0].(*ec2.DescribeNetworkInterfaceAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeNetworkInterfaceAttributeRequest(i0 *ec2.DescribeNetworkInterfaceAttributeInput) (r0 *request.Request, r1 *ec2.DescribeNetworkInterfaceAttributeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNetworkInterfaceAttributeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeNetworkInterfaceAttributeOutput)
	return
}

func (d *EC2Double) DescribeNetworkInterfaceAttributeWithContext(i0 context.Context, i1 *ec2.DescribeNetworkInterfaceAttributeInput, i2 ...request.Option) (r0 *ec2.DescribeNetworkInterfaceAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNetworkInterfaceAttributeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeNetworkInterfaceAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeNetworkInterfaceAttributeWithContext(ctx context.Context, in *ec2.DescribeNetworkInterfaceAttributeInput, _ ...request.Option) (*ec2.DescribeNetworkInterfaceAttributeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeNetworkInterfaceAttribute cancelled", ctx.Err())
	default:
		return d.DescribeNetworkInterfaceAttribute(in)
	}
}

func (d *EC2Double) DescribeNetworkInterfacePermissions(i0 *ec2.DescribeNetworkInterfacePermissionsInput) (r0 *ec2.DescribeNetworkInterfacePermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNetworkInterfacePermissions", i0)
	r0, _ = returns[0].(*ec2.DescribeNetworkInterfacePermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeNetworkInterfacePermissionsPages(i0 *ec2.DescribeNetworkInterfacePermissionsInput, i1 func(*ec2.DescribeNetworkInterfacePermissionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNetworkInterfacePermissionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeNetworkInterfacePermissionsPages(in *ec2.DescribeNetworkInterfacePermissionsInput, pager func(*ec2.DescribeNetworkInterfacePermissionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeNetworkInterfacePermissions", paginators, in, pager)
}

func (d *EC2Double) DescribeNetworkInterfacePermissionsPagesWithContext(i0 context.Context, i1 *ec2.DescribeNetworkInterfacePermissionsInput, i2 func(*ec2.DescribeNetworkInterfacePermissionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNetworkInterfacePermissionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeNetworkInterfacePermissionsPagesWithContext(ctx context.Context, in *ec2.DescribeNetworkInterfacePermissionsInput, pager func(*ec2.DescribeNetworkInterfacePermissionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeNetworkInterfacePermissions", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeNetworkInterfacePermissionsRequest(i0 *ec2.DescribeNetworkInterfacePermissionsInput) (r0 *request.Request, r1 *ec2.DescribeNetworkInterfacePermissionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNetworkInterfacePermissionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeNetworkInterfacePermissionsOutput)
	return
}

func (d *EC2Double) DescribeNetworkInterfacePermissionsWithContext(i0 context.Context, i1 *ec2.DescribeNetworkInterfacePermissionsInput, i2 ...request.Option) (r0 *ec2.DescribeNetworkInterfacePermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNetworkInterfacePermissionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeNetworkInterfacePermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeNetworkInterfacePermissionsWithContext(ctx context.Context, in *ec2.DescribeNetworkInterfacePermissionsInput, _ ...request.Option) (*ec2.DescribeNetworkInterfacePermissionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeNetworkInterfacePermissions cancelled", ctx.Err())
	default:
		return d.DescribeNetworkInterfacePermissions(in)
	}
}

func (d *EC2Double) DescribeNetworkInterfaces(i0 *ec2.DescribeNetworkInterfacesInput) (r0 *ec2.DescribeNetworkInterfacesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNetworkInterfaces", i0)
	r0, _ = returns[0].(*ec2.DescribeNetworkInterfacesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeNetworkInterfacesPages(i0 *ec2.DescribeNetworkInterfacesInput, i1 func(*ec2.DescribeNetworkInterfacesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNetworkInterfacesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeNetworkInterfacesPages(in *ec2.DescribeNetworkInterfacesInput, pager func(*ec2.DescribeNetworkInterfacesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeNetworkInterfaces", paginators, in, pager)
}

func (d *EC2Double) DescribeNetworkInterfacesPagesWithContext(i0 context.Context, i1 *ec2.DescribeNetworkInterfacesInput, i2 func(*ec2.DescribeNetworkInterfacesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNetworkInterfacesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeNetworkInterfacesPagesWithContext(ctx context.Context, in *ec2.DescribeNetworkInterfacesInput, pager func(*ec2.DescribeNetworkInterfacesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeNetworkInterfaces", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeNetworkInterfacesRequest(i0 *ec2.DescribeNetworkInterfacesInput) (r0 *request.Request, r1 *ec2.DescribeNetworkInterfacesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNetworkInterfacesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeNetworkInterfacesOutput)
	return
}

func (d *EC2Double) DescribeNetworkInterfacesWithContext(i0 context.Context, i1 *ec2.DescribeNetworkInterfacesInput, i2 ...request.Option) (r0 *ec2.DescribeNetworkInterfacesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNetworkInterfacesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeNetworkInterfacesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeNetworkInterfacesWithContext(ctx context.Context, in *ec2.DescribeNetworkInterfacesInput, _ ...request.Option) (*ec2.DescribeNetworkInterfacesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeNetworkInterfaces cancelled", ctx.Err())
	default:
		return d.DescribeNetworkInterfaces(in)
	}
}

func (d *EC2Double) DescribePlacementGroups(i0 *ec2.DescribePlacementGroupsInput) (r0 *ec2.DescribePlacementGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePlacementGroups", i0)
	r0, _ = returns[0].(*ec2.DescribePlacementGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribePlacementGroupsRequest(i0 *ec2.DescribePlacementGroupsInput) (r0 *request.Request, r1 *ec2.DescribePlacementGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePlacementGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribePlacementGroupsOutput)
	return
}

func (d *EC2Double) DescribePlacementGroupsWithContext(i0 context.Context, i1 *ec2.DescribePlacementGroupsInput, i2 ...request.Option) (r0 *ec2.DescribePlacementGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePlacementGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribePlacementGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribePlacementGroupsWithContext(ctx context.Context, in *ec2.DescribePlacementGroupsInput, _ ...request.Option) (*ec2.DescribePlacementGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribePlacementGroups cancelled", ctx.Err())
	default:
		return d.DescribePlacementGroups(in)
	}
}

func (d *EC2Double) DescribePrefixLists(i0 *ec2.DescribePrefixListsInput) (r0 *ec2.DescribePrefixListsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePrefixLists", i0)
	r0, _ = returns[0].(*ec2.DescribePrefixListsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribePrefixListsPages(i0 *ec2.DescribePrefixListsInput, i1 func(*ec2.DescribePrefixListsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePrefixListsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribePrefixListsPages(in *ec2.DescribePrefixListsInput, pager func(*ec2.DescribePrefixListsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribePrefixLists", paginators, in, pager)
}

func (d *EC2Double) DescribePrefixListsPagesWithContext(i0 context.Context, i1 *ec2.DescribePrefixListsInput, i2 func(*ec2.DescribePrefixListsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePrefixListsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribePrefixListsPagesWithContext(ctx context.Context, in *ec2.DescribePrefixListsInput, pager func(*ec2.DescribePrefixListsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribePrefixLists", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribePrefixListsRequest(i0 *ec2.DescribePrefixListsInput) (r0 *request.Request, r1 *ec2.DescribePrefixListsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePrefixListsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribePrefixListsOutput)
	return
}

func (d *EC2Double) DescribePrefixListsWithContext(i0 context.Context, i1 *ec2.DescribePrefixListsInput, i2 ...request.Option) (r0 *ec2.DescribePrefixListsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePrefixListsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribePrefixListsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribePrefixListsWithContext(ctx context.Context, in *ec2.DescribePrefixListsInput, _ ...request.Option) (*ec2.DescribePrefixListsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribePrefixLists cancelled", ctx.Err())
	default:
		return d.DescribePrefixLists(in)
	}
}

func (d *EC2Double) DescribePrincipalIdFormat(i0 *ec2.DescribePrincipalIdFormatInput) (r0 *ec2.DescribePrincipalIdFormatOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePrincipalIdFormat", i0)
	r0, _ = returns[0].(*ec2.DescribePrincipalIdFormatOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribePrincipalIdFormatPages(i0 *ec2.DescribePrincipalIdFormatInput, i1 func(*ec2.DescribePrincipalIdFormatOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePrincipalIdFormatPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribePrincipalIdFormatPages(in *ec2.DescribePrincipalIdFormatInput, pager func(*ec2.DescribePrincipalIdFormatOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribePrincipalIdFormat", paginators, in, pager)
}

func (d *EC2Double) DescribePrincipalIdFormatPagesWithContext(i0 context.Context, i1 *ec2.DescribePrincipalIdFormatInput, i2 func(*ec2.DescribePrincipalIdFormatOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePrincipalIdFormatPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribePrincipalIdFormatPagesWithContext(ctx context.Context, in *ec2.DescribePrincipalIdFormatInput, pager func(*ec2.DescribePrincipalIdFormatOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribePrincipalIdFormat", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribePrincipalIdFormatRequest(i0 *ec2.DescribePrincipalIdFormatInput) (r0 *request.Request, r1 *ec2.DescribePrincipalIdFormatOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePrincipalIdFormatRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribePrincipalIdFormatOutput)
	return
}

func (d *EC2Double) DescribePrincipalIdFormatWithContext(i0 context.Context, i1 *ec2.DescribePrincipalIdFormatInput, i2 ...request.Option) (r0 *ec2.DescribePrincipalIdFormatOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePrincipalIdFormatWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribePrincipalIdFormatOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribePrincipalIdFormatWithContext(ctx context.Context, in *ec2.DescribePrincipalIdFormatInput, _ ...request.Option) (*ec2.DescribePrincipalIdFormatOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribePrincipalIdFormat cancelled", ctx.Err())
	default:
		return d.DescribePrincipalIdFormat(in)
	}
}

func (d *EC2Double) DescribePublicIpv4Pools(i0 *ec2.DescribePublicIpv4PoolsInput) (r0 *ec2.DescribePublicIpv4PoolsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePublicIpv4Pools", i0)
	r0, _ = returns[0].(*ec2.DescribePublicIpv4PoolsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribePublicIpv4PoolsPages(i0 *ec2.DescribePublicIpv4PoolsInput, i1 func(*ec2.DescribePublicIpv4PoolsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePublicIpv4PoolsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribePublicIpv4PoolsPages(in *ec2.DescribePublicIpv4PoolsInput, pager func(*ec2.DescribePublicIpv4PoolsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribePublicIpv4Pools", paginators, in, pager)
}

func (d *EC2Double) DescribePublicIpv4PoolsPagesWithContext(i0 context.Context, i1 *ec2.DescribePublicIpv4PoolsInput, i2 func(*ec2.DescribePublicIpv4PoolsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePublicIpv4PoolsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribePublicIpv4PoolsPagesWithContext(ctx context.Context, in *ec2.DescribePublicIpv4PoolsInput, pager func(*ec2.DescribePublicIpv4PoolsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribePublicIpv4Pools", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribePublicIpv4PoolsRequest(i0 *ec2.DescribePublicIpv4PoolsInput) (r0 *request.Request, r1 *ec2.DescribePublicIpv4PoolsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePublicIpv4PoolsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribePublicIpv4PoolsOutput)
	return
}

func (d *EC2Double) DescribePublicIpv4PoolsWithContext(i0 context.Context, i1 *ec2.DescribePublicIpv4PoolsInput, i2 ...request.Option) (r0 *ec2.DescribePublicIpv4PoolsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePublicIpv4PoolsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribePublicIpv4PoolsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribePublicIpv4PoolsWithContext(ctx context.Context, in *ec2.DescribePublicIpv4PoolsInput, _ ...request.Option) (*ec2.DescribePublicIpv4PoolsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribePublicIpv4Pools cancelled", ctx.Err())
	default:
		return d.DescribePublicIpv4Pools(in)
	}
}

func (d *EC2Double) DescribeRegions(i0 *ec2.DescribeRegionsInput) (r0 *ec2.DescribeRegionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRegions", i0)
	r0, _ = returns[0].(*ec2.DescribeRegionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeRegionsRequest(i0 *ec2.DescribeRegionsInput) (r0 *request.Request, r1 *ec2.DescribeRegionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRegionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeRegionsOutput)
	return
}

func (d *EC2Double) DescribeRegionsWithContext(i0 context.Context, i1 *ec2.DescribeRegionsInput, i2 ...request.Option) (r0 *ec2.DescribeRegionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRegionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeRegionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeRegionsWithContext(ctx context.Context, in *ec2.DescribeRegionsInput, _ ...request.Option) (*ec2.DescribeRegionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeRegions cancelled", ctx.Err())
	default:
		return d.DescribeRegions(in)
	}
}

func (d *EC2Double) DescribeReservedInstances(i0 *ec2.DescribeReservedInstancesInput) (r0 *ec2.DescribeReservedInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedInstances", i0)
	r0, _ = returns[0].(*ec2.DescribeReservedInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeReservedInstancesListings(i0 *ec2.DescribeReservedInstancesListingsInput) (r0 *ec2.DescribeReservedInstancesListingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedInstancesListings", i0)
	r0, _ = returns[0].(*ec2.DescribeReservedInstancesListingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeReservedInstancesListingsRequest(i0 *ec2.DescribeReservedInstancesListingsInput) (r0 *request.Request, r1 *ec2.DescribeReservedInstancesListingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedInstancesListingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeReservedInstancesListingsOutput)
	return
}

func (d *EC2Double) DescribeReservedInstancesListingsWithContext(i0 context.Context, i1 *ec2.DescribeReservedInstancesListingsInput, i2 ...request.Option) (r0 *ec2.DescribeReservedInstancesListingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedInstancesListingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeReservedInstancesListingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeReservedInstancesListingsWithContext(ctx context.Context, in *ec2.DescribeReservedInstancesListingsInput, _ ...request.Option) (*ec2.DescribeReservedInstancesListingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeReservedInstancesListings cancelled", ctx.Err())
	default:
		return d.DescribeReservedInstancesListings(in)
	}
}

func (d *EC2Double) DescribeReservedInstancesModifications(i0 *ec2.DescribeReservedInstancesModificationsInput) (r0 *ec2.DescribeReservedInstancesModificationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedInstancesModifications", i0)
	r0, _ = returns[0].(*ec2.DescribeReservedInstancesModificationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeReservedInstancesModificationsPages(i0 *ec2.DescribeReservedInstancesModificationsInput, i1 func(*ec2.DescribeReservedInstancesModificationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedInstancesModificationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeReservedInstancesModificationsPages(in *ec2.DescribeReservedInstancesModificationsInput, pager func(*ec2.DescribeReservedInstancesModificationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeReservedInstancesModifications", paginators, in, pager)
}

func (d *EC2Double) DescribeReservedInstancesModificationsPagesWithContext(i0 context.Context, i1 *ec2.DescribeReservedInstancesModificationsInput, i2 func(*ec2.DescribeReservedInstancesModificationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedInstancesModificationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeReservedInstancesModificationsPagesWithContext(ctx context.Context, in *ec2.DescribeReservedInstancesModificationsInput, pager func(*ec2.DescribeReservedInstancesModificationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeReservedInstancesModifications", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeReservedInstancesModificationsRequest(i0 *ec2.DescribeReservedInstancesModificationsInput) (r0 *request.Request, r1 *ec2.DescribeReservedInstancesModificationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedInstancesModificationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeReservedInstancesModificationsOutput)
	return
}

func (d *EC2Double) DescribeReservedInstancesModificationsWithContext(i0 context.Context, i1 *ec2.DescribeReservedInstancesModificationsInput, i2 ...request.Option) (r0 *ec2.DescribeReservedInstancesModificationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedInstancesModificationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeReservedInstancesModificationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeReservedInstancesModificationsWithContext(ctx context.Context, in *ec2.DescribeReservedInstancesModificationsInput, _ ...request.Option) (*ec2.DescribeReservedInstancesModificationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeReservedInstancesModifications cancelled", ctx.Err())
	default:
		return d.DescribeReservedInstancesModifications(in)
	}
}

func (d *EC2Double) DescribeReservedInstancesOfferings(i0 *ec2.DescribeReservedInstancesOfferingsInput) (r0 *ec2.DescribeReservedInstancesOfferingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedInstancesOfferings", i0)
	r0, _ = returns[0].(*ec2.DescribeReservedInstancesOfferingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeReservedInstancesOfferingsPages(i0 *ec2.DescribeReservedInstancesOfferingsInput, i1 func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedInstancesOfferingsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeReservedInstancesOfferingsPages(in *ec2.DescribeReservedInstancesOfferingsInput, pager func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeReservedInstancesOfferings", paginators, in, pager)
}

func (d *EC2Double) DescribeReservedInstancesOfferingsPagesWithContext(i0 context.Context, i1 *ec2.DescribeReservedInstancesOfferingsInput, i2 func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedInstancesOfferingsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeReservedInstancesOfferingsPagesWithContext(ctx context.Context, in *ec2.DescribeReservedInstancesOfferingsInput, pager func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeReservedInstancesOfferings", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeReservedInstancesOfferingsRequest(i0 *ec2.DescribeReservedInstancesOfferingsInput) (r0 *request.Request, r1 *ec2.DescribeReservedInstancesOfferingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedInstancesOfferingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeReservedInstancesOfferingsOutput)
	return
}

func (d *EC2Double) DescribeReservedInstancesOfferingsWithContext(i0 context.Context, i1 *ec2.DescribeReservedInstancesOfferingsInput, i2 ...request.Option) (r0 *ec2.DescribeReservedInstancesOfferingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedInstancesOfferingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeReservedInstancesOfferingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeReservedInstancesOfferingsWithContext(ctx context.Context, in *ec2.DescribeReservedInstancesOfferingsInput, _ ...request.Option) (*ec2.DescribeReservedInstancesOfferingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeReservedInstancesOfferings cancelled", ctx.Err())
	default:
		return d.DescribeReservedInstancesOfferings(in)
	}
}

func (d *EC2Double) DescribeReservedInstancesRequest(i0 *ec2.DescribeReservedInstancesInput) (r0 *request.Request, r1 *ec2.DescribeReservedInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeReservedInstancesOutput)
	return
}

func (d *EC2Double) DescribeReservedInstancesWithContext(i0 context.Context, i1 *ec2.DescribeReservedInstancesInput, i2 ...request.Option) (r0 *ec2.DescribeReservedInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeReservedInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeReservedInstancesWithContext(ctx context.Context, in *ec2.DescribeReservedInstancesInput, _ ...request.Option) (*ec2.DescribeReservedInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeReservedInstances cancelled", ctx.Err())
	default:
		return d.DescribeReservedInstances(in)
	}
}

func (d *EC2Double) DescribeRouteTables(i0 *ec2.DescribeRouteTablesInput) (r0 *ec2.DescribeRouteTablesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRouteTables", i0)
	r0, _ = returns[0].(*ec2.DescribeRouteTablesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeRouteTablesPages(i0 *ec2.DescribeRouteTablesInput, i1 func(*ec2.DescribeRouteTablesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRouteTablesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeRouteTablesPages(in *ec2.DescribeRouteTablesInput, pager func(*ec2.DescribeRouteTablesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeRouteTables", paginators, in, pager)
}

func (d *EC2Double) DescribeRouteTablesPagesWithContext(i0 context.Context, i1 *ec2.DescribeRouteTablesInput, i2 func(*ec2.DescribeRouteTablesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRouteTablesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeRouteTablesPagesWithContext(ctx context.Context, in *ec2.DescribeRouteTablesInput, pager func(*ec2.DescribeRouteTablesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeRouteTables", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeRouteTablesRequest(i0 *ec2.DescribeRouteTablesInput) (r0 *request.Request, r1 *ec2.DescribeRouteTablesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRouteTablesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeRouteTablesOutput)
	return
}

func (d *EC2Double) DescribeRouteTablesWithContext(i0 context.Context, i1 *ec2.DescribeRouteTablesInput, i2 ...request.Option) (r0 *ec2.DescribeRouteTablesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRouteTablesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeRouteTablesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeRouteTablesWithContext(ctx context.Context, in *ec2.DescribeRouteTablesInput, _ ...request.Option) (*ec2.DescribeRouteTablesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeRouteTables cancelled", ctx.Err())
	default:
		return d.DescribeRouteTables(in)
	}
}

func (d *EC2Double) DescribeScheduledInstanceAvailability(i0 *ec2.DescribeScheduledInstanceAvailabilityInput) (r0 *ec2.DescribeScheduledInstanceAvailabilityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScheduledInstanceAvailability", i0)
	r0, _ = returns[0].(*ec2.DescribeScheduledInstanceAvailabilityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeScheduledInstanceAvailabilityPages(i0 *ec2.DescribeScheduledInstanceAvailabilityInput, i1 func(*ec2.DescribeScheduledInstanceAvailabilityOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScheduledInstanceAvailabilityPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeScheduledInstanceAvailabilityPages(in *ec2.DescribeScheduledInstanceAvailabilityInput, pager func(*ec2.DescribeScheduledInstanceAvailabilityOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeScheduledInstanceAvailability", paginators, in, pager)
}

func (d *EC2Double) DescribeScheduledInstanceAvailabilityPagesWithContext(i0 context.Context, i1 *ec2.DescribeScheduledInstanceAvailabilityInput, i2 func(*ec2.DescribeScheduledInstanceAvailabilityOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScheduledInstanceAvailabilityPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeScheduledInstanceAvailabilityPagesWithContext(ctx context.Context, in *ec2.DescribeScheduledInstanceAvailabilityInput, pager func(*ec2.DescribeScheduledInstanceAvailabilityOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeScheduledInstanceAvailability", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeScheduledInstanceAvailabilityRequest(i0 *ec2.DescribeScheduledInstanceAvailabilityInput) (r0 *request.Request, r1 *ec2.DescribeScheduledInstanceAvailabilityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScheduledInstanceAvailabilityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeScheduledInstanceAvailabilityOutput)
	return
}

func (d *EC2Double) DescribeScheduledInstanceAvailabilityWithContext(i0 context.Context, i1 *ec2.DescribeScheduledInstanceAvailabilityInput, i2 ...request.Option) (r0 *ec2.DescribeScheduledInstanceAvailabilityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScheduledInstanceAvailabilityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeScheduledInstanceAvailabilityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeScheduledInstanceAvailabilityWithContext(ctx context.Context, in *ec2.DescribeScheduledInstanceAvailabilityInput, _ ...request.Option) (*ec2.DescribeScheduledInstanceAvailabilityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeScheduledInstanceAvailability cancelled", ctx.Err())
	default:
		return d.DescribeScheduledInstanceAvailability(in)
	}
}

func (d *EC2Double) DescribeScheduledInstances(i0 *ec2.DescribeScheduledInstancesInput) (r0 *ec2.DescribeScheduledInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScheduledInstances", i0)
	r0, _ = returns[0].(*ec2.DescribeScheduledInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeScheduledInstancesPages(i0 *ec2.DescribeScheduledInstancesInput, i1 func(*ec2.DescribeScheduledInstancesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScheduledInstancesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeScheduledInstancesPages(in *ec2.DescribeScheduledInstancesInput, pager func(*ec2.DescribeScheduledInstancesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeScheduledInstances", paginators, in, pager)
}

func (d *EC2Double) DescribeScheduledInstancesPagesWithContext(i0 context.Context, i1 *ec2.DescribeScheduledInstancesInput, i2 func(*ec2.DescribeScheduledInstancesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScheduledInstancesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeScheduledInstancesPagesWithContext(ctx context.Context, in *ec2.DescribeScheduledInstancesInput, pager func(*ec2.DescribeScheduledInstancesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeScheduledInstances", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeScheduledInstancesRequest(i0 *ec2.DescribeScheduledInstancesInput) (r0 *request.Request, r1 *ec2.DescribeScheduledInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScheduledInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeScheduledInstancesOutput)
	return
}

func (d *EC2Double) DescribeScheduledInstancesWithContext(i0 context.Context, i1 *ec2.DescribeScheduledInstancesInput, i2 ...request.Option) (r0 *ec2.DescribeScheduledInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScheduledInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeScheduledInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeScheduledInstancesWithContext(ctx context.Context, in *ec2.DescribeScheduledInstancesInput, _ ...request.Option) (*ec2.DescribeScheduledInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeScheduledInstances cancelled", ctx.Err())
	default:
		return d.DescribeScheduledInstances(in)
	}
}

func (d *EC2Double) DescribeSecurityGroupReferences(i0 *ec2.DescribeSecurityGroupReferencesInput) (r0 *ec2.DescribeSecurityGroupReferencesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSecurityGroupReferences", i0)
	r0, _ = returns[0].(*ec2.DescribeSecurityGroupReferencesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeSecurityGroupReferencesRequest(i0 *ec2.DescribeSecurityGroupReferencesInput) (r0 *request.Request, r1 *ec2.DescribeSecurityGroupReferencesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSecurityGroupReferencesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeSecurityGroupReferencesOutput)
	return
}

func (d *EC2Double) DescribeSecurityGroupReferencesWithContext(i0 context.Context, i1 *ec2.DescribeSecurityGroupReferencesInput, i2 ...request.Option) (r0 *ec2.DescribeSecurityGroupReferencesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSecurityGroupReferencesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeSecurityGroupReferencesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeSecurityGroupReferencesWithContext(ctx context.Context, in *ec2.DescribeSecurityGroupReferencesInput, _ ...request.Option) (*ec2.DescribeSecurityGroupReferencesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSecurityGroupReferences cancelled", ctx.Err())
	default:
		return d.DescribeSecurityGroupReferences(in)
	}
}

func (d *EC2Double) DescribeSecurityGroups(i0 *ec2.DescribeSecurityGroupsInput) (r0 *ec2.DescribeSecurityGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSecurityGroups", i0)
	r0, _ = returns[0].(*ec2.DescribeSecurityGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeSecurityGroupsPages(i0 *ec2.DescribeSecurityGroupsInput, i1 func(*ec2.DescribeSecurityGroupsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSecurityGroupsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeSecurityGroupsPages(in *ec2.DescribeSecurityGroupsInput, pager func(*ec2.DescribeSecurityGroupsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeSecurityGroups", paginators, in, pager)
}

func (d *EC2Double) DescribeSecurityGroupsPagesWithContext(i0 context.Context, i1 *ec2.DescribeSecurityGroupsInput, i2 func(*ec2.DescribeSecurityGroupsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSecurityGroupsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeSecurityGroupsPagesWithContext(ctx context.Context, in *ec2.DescribeSecurityGroupsInput, pager func(*ec2.DescribeSecurityGroupsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeSecurityGroups", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeSecurityGroupsRequest(i0 *ec2.DescribeSecurityGroupsInput) (r0 *request.Request, r1 *ec2.DescribeSecurityGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSecurityGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeSecurityGroupsOutput)
	return
}

func (d *EC2Double) DescribeSecurityGroupsWithContext(i0 context.Context, i1 *ec2.DescribeSecurityGroupsInput, i2 ...request.Option) (r0 *ec2.DescribeSecurityGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSecurityGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeSecurityGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeSecurityGroupsWithContext(ctx context.Context, in *ec2.DescribeSecurityGroupsInput, _ ...request.Option) (*ec2.DescribeSecurityGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSecurityGroups cancelled", ctx.Err())
	default:
		return d.DescribeSecurityGroups(in)
	}
}

func (d *EC2Double) DescribeSnapshotAttribute(i0 *ec2.DescribeSnapshotAttributeInput) (r0 *ec2.DescribeSnapshotAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSnapshotAttribute", i0)
	r0, _ = returns[0].(*ec2.DescribeSnapshotAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeSnapshotAttributeRequest(i0 *ec2.DescribeSnapshotAttributeInput) (r0 *request.Request, r1 *ec2.DescribeSnapshotAttributeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSnapshotAttributeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeSnapshotAttributeOutput)
	return
}

func (d *EC2Double) DescribeSnapshotAttributeWithContext(i0 context.Context, i1 *ec2.DescribeSnapshotAttributeInput, i2 ...request.Option) (r0 *ec2.DescribeSnapshotAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSnapshotAttributeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeSnapshotAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeSnapshotAttributeWithContext(ctx context.Context, in *ec2.DescribeSnapshotAttributeInput, _ ...request.Option) (*ec2.DescribeSnapshotAttributeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSnapshotAttribute cancelled", ctx.Err())
	default:
		return d.DescribeSnapshotAttribute(in)
	}
}

func (d *EC2Double) DescribeSnapshots(i0 *ec2.DescribeSnapshotsInput) (r0 *ec2.DescribeSnapshotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSnapshots", i0)
	r0, _ = returns[0].(*ec2.DescribeSnapshotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeSnapshotsPages(i0 *ec2.DescribeSnapshotsInput, i1 func(*ec2.DescribeSnapshotsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSnapshotsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeSnapshotsPages(in *ec2.DescribeSnapshotsInput, pager func(*ec2.DescribeSnapshotsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeSnapshots", paginators, in, pager)
}

func (d *EC2Double) DescribeSnapshotsPagesWithContext(i0 context.Context, i1 *ec2.DescribeSnapshotsInput, i2 func(*ec2.DescribeSnapshotsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSnapshotsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeSnapshotsPagesWithContext(ctx context.Context, in *ec2.DescribeSnapshotsInput, pager func(*ec2.DescribeSnapshotsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeSnapshots", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeSnapshotsRequest(i0 *ec2.DescribeSnapshotsInput) (r0 *request.Request, r1 *ec2.DescribeSnapshotsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSnapshotsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeSnapshotsOutput)
	return
}

func (d *EC2Double) DescribeSnapshotsWithContext(i0 context.Context, i1 *ec2.DescribeSnapshotsInput, i2 ...request.Option) (r0 *ec2.DescribeSnapshotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSnapshotsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeSnapshotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeSnapshotsWithContext(ctx context.Context, in *ec2.DescribeSnapshotsInput, _ ...request.Option) (*ec2.DescribeSnapshotsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSnapshots cancelled", ctx.Err())
	default:
		return d.DescribeSnapshots(in)
	}
}

func (d *EC2Double) DescribeSpotDatafeedSubscription(i0 *ec2.DescribeSpotDatafeedSubscriptionInput) (r0 *ec2.DescribeSpotDatafeedSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSpotDatafeedSubscription", i0)
	r0, _ = returns[0].(*ec2.DescribeSpotDatafeedSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeSpotDatafeedSubscriptionRequest(i0 *ec2.DescribeSpotDatafeedSubscriptionInput) (r0 *request.Request, r1 *ec2.DescribeSpotDatafeedSubscriptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSpotDatafeedSubscriptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeSpotDatafeedSubscriptionOutput)
	return
}

func (d *EC2Double) DescribeSpotDatafeedSubscriptionWithContext(i0 context.Context, i1 *ec2.DescribeSpotDatafeedSubscriptionInput, i2 ...request.Option) (r0 *ec2.DescribeSpotDatafeedSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSpotDatafeedSubscriptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeSpotDatafeedSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeSpotDatafeedSubscriptionWithContext(ctx context.Context, in *ec2.DescribeSpotDatafeedSubscriptionInput, _ ...request.Option) (*ec2.DescribeSpotDatafeedSubscriptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSpotDatafeedSubscription cancelled", ctx.Err())
	default:
		return d.DescribeSpotDatafeedSubscription(in)
	}
}

func (d *EC2Double) DescribeSpotFleetInstances(i0 *ec2.DescribeSpotFleetInstancesInput) (r0 *ec2.DescribeSpotFleetInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSpotFleetInstances", i0)
	r0, _ = returns[0].(*ec2.DescribeSpotFleetInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeSpotFleetInstancesRequest(i0 *ec2.DescribeSpotFleetInstancesInput) (r0 *request.Request, r1 *ec2.DescribeSpotFleetInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSpotFleetInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeSpotFleetInstancesOutput)
	return
}

func (d *EC2Double) DescribeSpotFleetInstancesWithContext(i0 context.Context, i1 *ec2.DescribeSpotFleetInstancesInput, i2 ...request.Option) (r0 *ec2.DescribeSpotFleetInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSpotFleetInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeSpotFleetInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeSpotFleetInstancesWithContext(ctx context.Context, in *ec2.DescribeSpotFleetInstancesInput, _ ...request.Option) (*ec2.DescribeSpotFleetInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSpotFleetInstances cancelled", ctx.Err())
	default:
		return d.DescribeSpotFleetInstances(in)
	}
}

func (d *EC2Double) DescribeSpotFleetRequestHistory(i0 *ec2.DescribeSpotFleetRequestHistoryInput) (r0 *ec2.DescribeSpotFleetRequestHistoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSpotFleetRequestHistory", i0)
	r0, _ = returns[0].(*ec2.DescribeSpotFleetRequestHistoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeSpotFleetRequestHistoryRequest(i0 *ec2.DescribeSpotFleetRequestHistoryInput) (r0 *request.Request, r1 *ec2.DescribeSpotFleetRequestHistoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSpotFleetRequestHistoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeSpotFleetRequestHistoryOutput)
	return
}

func (d *EC2Double) DescribeSpotFleetRequestHistoryWithContext(i0 context.Context, i1 *ec2.DescribeSpotFleetRequestHistoryInput, i2 ...request.Option) (r0 *ec2.DescribeSpotFleetRequestHistoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSpotFleetRequestHistoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeSpotFleetRequestHistoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeSpotFleetRequestHistoryWithContext(ctx context.Context, in *ec2.DescribeSpotFleetRequestHistoryInput, _ ...request.Option) (*ec2.DescribeSpotFleetRequestHistoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSpotFleetRequestHistory cancelled", ctx.Err())
	default:
		return d.DescribeSpotFleetRequestHistory(in)
	}
}

func (d *EC2Double) DescribeSpotFleetRequests(i0 *ec2.DescribeSpotFleetRequestsInput) (r0 *ec2.DescribeSpotFleetRequestsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSpotFleetRequests", i0)
	r0, _ = returns[0].(*ec2.DescribeSpotFleetRequestsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeSpotFleetRequestsPages(i0 *ec2.DescribeSpotFleetRequestsInput, i1 func(*ec2.DescribeSpotFleetRequestsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSpotFleetRequestsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeSpotFleetRequestsPages(in *ec2.DescribeSpotFleetRequestsInput, pager func(*ec2.DescribeSpotFleetRequestsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeSpotFleetRequests", paginators, in, pager)
}

func (d *EC2Double) DescribeSpotFleetRequestsPagesWithContext(i0 context.Context, i1 *ec2.DescribeSpotFleetRequestsInput, i2 func(*ec2.DescribeSpotFleetRequestsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSpotFleetRequestsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeSpotFleetRequestsPagesWithContext(ctx context.Context, in *ec2.DescribeSpotFleetRequestsInput, pager func(*ec2.DescribeSpotFleetRequestsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeSpotFleetRequests", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeSpotFleetRequestsRequest(i0 *ec2.DescribeSpotFleetRequestsInput) (r0 *request.Request, r1 *ec2.DescribeSpotFleetRequestsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSpotFleetRequestsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeSpotFleetRequestsOutput)
	return
}

func (d *EC2Double) DescribeSpotFleetRequestsWithContext(i0 context.Context, i1 *ec2.DescribeSpotFleetRequestsInput, i2 ...request.Option) (r0 *ec2.DescribeSpotFleetRequestsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSpotFleetRequestsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeSpotFleetRequestsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeSpotFleetRequestsWithContext(ctx context.Context, in *ec2.DescribeSpotFleetRequestsInput, _ ...request.Option) (*ec2.DescribeSpotFleetRequestsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSpotFleetRequests cancelled", ctx.Err())
	default:
		return d.DescribeSpotFleetRequests(in)
	}
}

func (d *EC2Double) DescribeSpotInstanceRequests(i0 *ec2.DescribeSpotInstanceRequestsInput) (r0 *ec2.DescribeSpotInstanceRequestsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSpotInstanceRequests", i0)
	r0, _ = returns[0].(*ec2.DescribeSpotInstanceRequestsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeSpotInstanceRequestsPages(i0 *ec2.DescribeSpotInstanceRequestsInput, i1 func(*ec2.DescribeSpotInstanceRequestsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSpotInstanceRequestsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeSpotInstanceRequestsPages(in *ec2.DescribeSpotInstanceRequestsInput, pager func(*ec2.DescribeSpotInstanceRequestsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeSpotInstanceRequests", paginators, in, pager)
}

func (d *EC2Double) DescribeSpotInstanceRequestsPagesWithContext(i0 context.Context, i1 *ec2.DescribeSpotInstanceRequestsInput, i2 func(*ec2.DescribeSpotInstanceRequestsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSpotInstanceRequestsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeSpotInstanceRequestsPagesWithContext(ctx context.Context, in *ec2.DescribeSpotInstanceRequestsInput, pager func(*ec2.DescribeSpotInstanceRequestsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeSpotInstanceRequests", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeSpotInstanceRequestsRequest(i0 *ec2.DescribeSpotInstanceRequestsInput) (r0 *request.Request, r1 *ec2.DescribeSpotInstanceRequestsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSpotInstanceRequestsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeSpotInstanceRequestsOutput)
	return
}

func (d *EC2Double) DescribeSpotInstanceRequestsWithContext(i0 context.Context, i1 *ec2.DescribeSpotInstanceRequestsInput, i2 ...request.Option) (r0 *ec2.DescribeSpotInstanceRequestsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSpotInstanceRequestsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeSpotInstanceRequestsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeSpotInstanceRequestsWithContext(ctx context.Context, in *ec2.DescribeSpotInstanceRequestsInput, _ ...request.Option) (*ec2.DescribeSpotInstanceRequestsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSpotInstanceRequests cancelled", ctx.Err())
	default:
		return d.DescribeSpotInstanceRequests(in)
	}
}

func (d *EC2Double) DescribeSpotPriceHistory(i0 *ec2.DescribeSpotPriceHistoryInput) (r0 *ec2.DescribeSpotPriceHistoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSpotPriceHistory", i0)
	r0, _ = returns[0].(*ec2.DescribeSpotPriceHistoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeSpotPriceHistoryPages(i0 *ec2.DescribeSpotPriceHistoryInput, i1 func(*ec2.DescribeSpotPriceHistoryOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSpotPriceHistoryPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeSpotPriceHistoryPages(in *ec2.DescribeSpotPriceHistoryInput, pager func(*ec2.DescribeSpotPriceHistoryOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeSpotPriceHistory", paginators, in, pager)
}

func (d *EC2Double) DescribeSpotPriceHistoryPagesWithContext(i0 context.Context, i1 *ec2.DescribeSpotPriceHistoryInput, i2 func(*ec2.DescribeSpotPriceHistoryOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSpotPriceHistoryPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeSpotPriceHistoryPagesWithContext(ctx context.Context, in *ec2.DescribeSpotPriceHistoryInput, pager func(*ec2.DescribeSpotPriceHistoryOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeSpotPriceHistory", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeSpotPriceHistoryRequest(i0 *ec2.DescribeSpotPriceHistoryInput) (r0 *request.Request, r1 *ec2.DescribeSpotPriceHistoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSpotPriceHistoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeSpotPriceHistoryOutput)
	return
}

func (d *EC2Double) DescribeSpotPriceHistoryWithContext(i0 context.Context, i1 *ec2.DescribeSpotPriceHistoryInput, i2 ...request.Option) (r0 *ec2.DescribeSpotPriceHistoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSpotPriceHistoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeSpotPriceHistoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeSpotPriceHistoryWithContext(ctx context.Context, in *ec2.DescribeSpotPriceHistoryInput, _ ...request.Option) (*ec2.DescribeSpotPriceHistoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSpotPriceHistory cancelled", ctx.Err())
	default:
		return d.DescribeSpotPriceHistory(in)
	}
}

func (d *EC2Double) DescribeStaleSecurityGroups(i0 *ec2.DescribeStaleSecurityGroupsInput) (r0 *ec2.DescribeStaleSecurityGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStaleSecurityGroups", i0)
	r0, _ = returns[0].(*ec2.DescribeStaleSecurityGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeStaleSecurityGroupsPages(i0 *ec2.DescribeStaleSecurityGroupsInput, i1 func(*ec2.DescribeStaleSecurityGroupsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStaleSecurityGroupsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeStaleSecurityGroupsPages(in *ec2.DescribeStaleSecurityGroupsInput, pager func(*ec2.DescribeStaleSecurityGroupsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeStaleSecurityGroups", paginators, in, pager)
}

func (d *EC2Double) DescribeStaleSecurityGroupsPagesWithContext(i0 context.Context, i1 *ec2.DescribeStaleSecurityGroupsInput, i2 func(*ec2.DescribeStaleSecurityGroupsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStaleSecurityGroupsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeStaleSecurityGroupsPagesWithContext(ctx context.Context, in *ec2.DescribeStaleSecurityGroupsInput, pager func(*ec2.DescribeStaleSecurityGroupsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeStaleSecurityGroups", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeStaleSecurityGroupsRequest(i0 *ec2.DescribeStaleSecurityGroupsInput) (r0 *request.Request, r1 *ec2.DescribeStaleSecurityGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStaleSecurityGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeStaleSecurityGroupsOutput)
	return
}

func (d *EC2Double) DescribeStaleSecurityGroupsWithContext(i0 context.Context, i1 *ec2.DescribeStaleSecurityGroupsInput, i2 ...request.Option) (r0 *ec2.DescribeStaleSecurityGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStaleSecurityGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeStaleSecurityGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeStaleSecurityGroupsWithContext(ctx context.Context, in *ec2.DescribeStaleSecurityGroupsInput, _ ...request.Option) (*ec2.DescribeStaleSecurityGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeStaleSecurityGroups cancelled", ctx.Err())
	default:
		return d.DescribeStaleSecurityGroups(in)
	}
}

func (d *EC2Double) DescribeSubnets(i0 *ec2.DescribeSubnetsInput) (r0 *ec2.DescribeSubnetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSubnets", i0)
	r0, _ = returns[0].(*ec2.DescribeSubnetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeSubnetsPages(i0 *ec2.DescribeSubnetsInput, i1 func(*ec2.DescribeSubnetsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSubnetsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeSubnetsPages(in *ec2.DescribeSubnetsInput, pager func(*ec2.DescribeSubnetsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeSubnets", paginators, in, pager)
}

func (d *EC2Double) DescribeSubnetsPagesWithContext(i0 context.Context, i1 *ec2.DescribeSubnetsInput, i2 func(*ec2.DescribeSubnetsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSubnetsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeSubnetsPagesWithContext(ctx context.Context, in *ec2.DescribeSubnetsInput, pager func(*ec2.DescribeSubnetsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeSubnets", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeSubnetsRequest(i0 *ec2.DescribeSubnetsInput) (r0 *request.Request, r1 *ec2.DescribeSubnetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSubnetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeSubnetsOutput)
	return
}

func (d *EC2Double) DescribeSubnetsWithContext(i0 context.Context, i1 *ec2.DescribeSubnetsInput, i2 ...request.Option) (r0 *ec2.DescribeSubnetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSubnetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeSubnetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeSubnetsWithContext(ctx context.Context, in *ec2.DescribeSubnetsInput, _ ...request.Option) (*ec2.DescribeSubnetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSubnets cancelled", ctx.Err())
	default:
		return d.DescribeSubnets(in)
	}
}

func (d *EC2Double) DescribeTags(i0 *ec2.DescribeTagsInput) (r0 *ec2.DescribeTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTags", i0)
	r0, _ = returns[0].(*ec2.DescribeTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeTagsPages(i0 *ec2.DescribeTagsInput, i1 func(*ec2.DescribeTagsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTagsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeTagsPages(in *ec2.DescribeTagsInput, pager func(*ec2.DescribeTagsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeTags", paginators, in, pager)
}

func (d *EC2Double) DescribeTagsPagesWithContext(i0 context.Context, i1 *ec2.DescribeTagsInput, i2 func(*ec2.DescribeTagsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTagsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeTagsPagesWithContext(ctx context.Context, in *ec2.DescribeTagsInput, pager func(*ec2.DescribeTagsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeTags", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeTagsRequest(i0 *ec2.DescribeTagsInput) (r0 *request.Request, r1 *ec2.DescribeTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeTagsOutput)
	return
}

func (d *EC2Double) DescribeTagsWithContext(i0 context.Context, i1 *ec2.DescribeTagsInput, i2 ...request.Option) (r0 *ec2.DescribeTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeTagsWithContext(ctx context.Context, in *ec2.DescribeTagsInput, _ ...request.Option) (*ec2.DescribeTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTags cancelled", ctx.Err())
	default:
		return d.DescribeTags(in)
	}
}

func (d *EC2Double) DescribeTrafficMirrorFilters(i0 *ec2.DescribeTrafficMirrorFiltersInput) (r0 *ec2.DescribeTrafficMirrorFiltersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTrafficMirrorFilters", i0)
	r0, _ = returns[0].(*ec2.DescribeTrafficMirrorFiltersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeTrafficMirrorFiltersPages(i0 *ec2.DescribeTrafficMirrorFiltersInput, i1 func(*ec2.DescribeTrafficMirrorFiltersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTrafficMirrorFiltersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeTrafficMirrorFiltersPages(in *ec2.DescribeTrafficMirrorFiltersInput, pager func(*ec2.DescribeTrafficMirrorFiltersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeTrafficMirrorFilters", paginators, in, pager)
}

func (d *EC2Double) DescribeTrafficMirrorFiltersPagesWithContext(i0 context.Context, i1 *ec2.DescribeTrafficMirrorFiltersInput, i2 func(*ec2.DescribeTrafficMirrorFiltersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTrafficMirrorFiltersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeTrafficMirrorFiltersPagesWithContext(ctx context.Context, in *ec2.DescribeTrafficMirrorFiltersInput, pager func(*ec2.DescribeTrafficMirrorFiltersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeTrafficMirrorFilters", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeTrafficMirrorFiltersRequest(i0 *ec2.DescribeTrafficMirrorFiltersInput) (r0 *request.Request, r1 *ec2.DescribeTrafficMirrorFiltersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTrafficMirrorFiltersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeTrafficMirrorFiltersOutput)
	return
}

func (d *EC2Double) DescribeTrafficMirrorFiltersWithContext(i0 context.Context, i1 *ec2.DescribeTrafficMirrorFiltersInput, i2 ...request.Option) (r0 *ec2.DescribeTrafficMirrorFiltersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTrafficMirrorFiltersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeTrafficMirrorFiltersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeTrafficMirrorFiltersWithContext(ctx context.Context, in *ec2.DescribeTrafficMirrorFiltersInput, _ ...request.Option) (*ec2.DescribeTrafficMirrorFiltersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTrafficMirrorFilters cancelled", ctx.Err())
	default:
		return d.DescribeTrafficMirrorFilters(in)
	}
}

func (d *EC2Double) DescribeTrafficMirrorSessions(i0 *ec2.DescribeTrafficMirrorSessionsInput) (r0 *ec2.DescribeTrafficMirrorSessionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTrafficMirrorSessions", i0)
	r0, _ = returns[0].(*ec2.DescribeTrafficMirrorSessionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeTrafficMirrorSessionsPages(i0 *ec2.DescribeTrafficMirrorSessionsInput, i1 func(*ec2.DescribeTrafficMirrorSessionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTrafficMirrorSessionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeTrafficMirrorSessionsPages(in *ec2.DescribeTrafficMirrorSessionsInput, pager func(*ec2.DescribeTrafficMirrorSessionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeTrafficMirrorSessions", paginators, in, pager)
}

func (d *EC2Double) DescribeTrafficMirrorSessionsPagesWithContext(i0 context.Context, i1 *ec2.DescribeTrafficMirrorSessionsInput, i2 func(*ec2.DescribeTrafficMirrorSessionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTrafficMirrorSessionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeTrafficMirrorSessionsPagesWithContext(ctx context.Context, in *ec2.DescribeTrafficMirrorSessionsInput, pager func(*ec2.DescribeTrafficMirrorSessionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeTrafficMirrorSessions", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeTrafficMirrorSessionsRequest(i0 *ec2.DescribeTrafficMirrorSessionsInput) (r0 *request.Request, r1 *ec2.DescribeTrafficMirrorSessionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTrafficMirrorSessionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeTrafficMirrorSessionsOutput)
	return
}

func (d *EC2Double) DescribeTrafficMirrorSessionsWithContext(i0 context.Context, i1 *ec2.DescribeTrafficMirrorSessionsInput, i2 ...request.Option) (r0 *ec2.DescribeTrafficMirrorSessionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTrafficMirrorSessionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeTrafficMirrorSessionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeTrafficMirrorSessionsWithContext(ctx context.Context, in *ec2.DescribeTrafficMirrorSessionsInput, _ ...request.Option) (*ec2.DescribeTrafficMirrorSessionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTrafficMirrorSessions cancelled", ctx.Err())
	default:
		return d.DescribeTrafficMirrorSessions(in)
	}
}

func (d *EC2Double) DescribeTrafficMirrorTargets(i0 *ec2.DescribeTrafficMirrorTargetsInput) (r0 *ec2.DescribeTrafficMirrorTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTrafficMirrorTargets", i0)
	r0, _ = returns[0].(*ec2.DescribeTrafficMirrorTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeTrafficMirrorTargetsPages(i0 *ec2.DescribeTrafficMirrorTargetsInput, i1 func(*ec2.DescribeTrafficMirrorTargetsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTrafficMirrorTargetsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeTrafficMirrorTargetsPages(in *ec2.DescribeTrafficMirrorTargetsInput, pager func(*ec2.DescribeTrafficMirrorTargetsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeTrafficMirrorTargets", paginators, in, pager)
}

func (d *EC2Double) DescribeTrafficMirrorTargetsPagesWithContext(i0 context.Context, i1 *ec2.DescribeTrafficMirrorTargetsInput, i2 func(*ec2.DescribeTrafficMirrorTargetsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTrafficMirrorTargetsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeTrafficMirrorTargetsPagesWithContext(ctx context.Context, in *ec2.DescribeTrafficMirrorTargetsInput, pager func(*ec2.DescribeTrafficMirrorTargetsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeTrafficMirrorTargets", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeTrafficMirrorTargetsRequest(i0 *ec2.DescribeTrafficMirrorTargetsInput) (r0 *request.Request, r1 *ec2.DescribeTrafficMirrorTargetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTrafficMirrorTargetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeTrafficMirrorTargetsOutput)
	return
}

func (d *EC2Double) DescribeTrafficMirrorTargetsWithContext(i0 context.Context, i1 *ec2.DescribeTrafficMirrorTargetsInput, i2 ...request.Option) (r0 *ec2.DescribeTrafficMirrorTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTrafficMirrorTargetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeTrafficMirrorTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeTrafficMirrorTargetsWithContext(ctx context.Context, in *ec2.DescribeTrafficMirrorTargetsInput, _ ...request.Option) (*ec2.DescribeTrafficMirrorTargetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTrafficMirrorTargets cancelled", ctx.Err())
	default:
		return d.DescribeTrafficMirrorTargets(in)
	}
}

func (d *EC2Double) DescribeTransitGatewayAttachments(i0 *ec2.DescribeTransitGatewayAttachmentsInput) (r0 *ec2.DescribeTransitGatewayAttachmentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTransitGatewayAttachments", i0)
	r0, _ = returns[0].(*ec2.DescribeTransitGatewayAttachmentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeTransitGatewayAttachmentsPages(i0 *ec2.DescribeTransitGatewayAttachmentsInput, i1 func(*ec2.DescribeTransitGatewayAttachmentsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTransitGatewayAttachmentsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeTransitGatewayAttachmentsPages(in *ec2.DescribeTransitGatewayAttachmentsInput, pager func(*ec2.DescribeTransitGatewayAttachmentsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeTransitGatewayAttachments", paginators, in, pager)
}

func (d *EC2Double) DescribeTransitGatewayAttachmentsPagesWithContext(i0 context.Context, i1 *ec2.DescribeTransitGatewayAttachmentsInput, i2 func(*ec2.DescribeTransitGatewayAttachmentsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTransitGatewayAttachmentsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeTransitGatewayAttachmentsPagesWithContext(ctx context.Context, in *ec2.DescribeTransitGatewayAttachmentsInput, pager func(*ec2.DescribeTransitGatewayAttachmentsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeTransitGatewayAttachments", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeTransitGatewayAttachmentsRequest(i0 *ec2.DescribeTransitGatewayAttachmentsInput) (r0 *request.Request, r1 *ec2.DescribeTransitGatewayAttachmentsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTransitGatewayAttachmentsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeTransitGatewayAttachmentsOutput)
	return
}

func (d *EC2Double) DescribeTransitGatewayAttachmentsWithContext(i0 context.Context, i1 *ec2.DescribeTransitGatewayAttachmentsInput, i2 ...request.Option) (r0 *ec2.DescribeTransitGatewayAttachmentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTransitGatewayAttachmentsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeTransitGatewayAttachmentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeTransitGatewayAttachmentsWithContext(ctx context.Context, in *ec2.DescribeTransitGatewayAttachmentsInput, _ ...request.Option) (*ec2.DescribeTransitGatewayAttachmentsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTransitGatewayAttachments cancelled", ctx.Err())
	default:
		return d.DescribeTransitGatewayAttachments(in)
	}
}

func (d *EC2Double) DescribeTransitGatewayMulticastDomains(i0 *ec2.DescribeTransitGatewayMulticastDomainsInput) (r0 *ec2.DescribeTransitGatewayMulticastDomainsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTransitGatewayMulticastDomains", i0)
	r0, _ = returns[0].(*ec2.DescribeTransitGatewayMulticastDomainsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeTransitGatewayMulticastDomainsRequest(i0 *ec2.DescribeTransitGatewayMulticastDomainsInput) (r0 *request.Request, r1 *ec2.DescribeTransitGatewayMulticastDomainsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTransitGatewayMulticastDomainsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeTransitGatewayMulticastDomainsOutput)
	return
}

func (d *EC2Double) DescribeTransitGatewayMulticastDomainsWithContext(i0 context.Context, i1 *ec2.DescribeTransitGatewayMulticastDomainsInput, i2 ...request.Option) (r0 *ec2.DescribeTransitGatewayMulticastDomainsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTransitGatewayMulticastDomainsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeTransitGatewayMulticastDomainsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeTransitGatewayMulticastDomainsWithContext(ctx context.Context, in *ec2.DescribeTransitGatewayMulticastDomainsInput, _ ...request.Option) (*ec2.DescribeTransitGatewayMulticastDomainsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTransitGatewayMulticastDomains cancelled", ctx.Err())
	default:
		return d.DescribeTransitGatewayMulticastDomains(in)
	}
}

func (d *EC2Double) DescribeTransitGatewayPeeringAttachments(i0 *ec2.DescribeTransitGatewayPeeringAttachmentsInput) (r0 *ec2.DescribeTransitGatewayPeeringAttachmentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTransitGatewayPeeringAttachments", i0)
	r0, _ = returns[0].(*ec2.DescribeTransitGatewayPeeringAttachmentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeTransitGatewayPeeringAttachmentsRequest(i0 *ec2.DescribeTransitGatewayPeeringAttachmentsInput) (r0 *request.Request, r1 *ec2.DescribeTransitGatewayPeeringAttachmentsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTransitGatewayPeeringAttachmentsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeTransitGatewayPeeringAttachmentsOutput)
	return
}

func (d *EC2Double) DescribeTransitGatewayPeeringAttachmentsWithContext(i0 context.Context, i1 *ec2.DescribeTransitGatewayPeeringAttachmentsInput, i2 ...request.Option) (r0 *ec2.DescribeTransitGatewayPeeringAttachmentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTransitGatewayPeeringAttachmentsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeTransitGatewayPeeringAttachmentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeTransitGatewayPeeringAttachmentsWithContext(ctx context.Context, in *ec2.DescribeTransitGatewayPeeringAttachmentsInput, _ ...request.Option) (*ec2.DescribeTransitGatewayPeeringAttachmentsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTransitGatewayPeeringAttachments cancelled", ctx.Err())
	default:
		return d.DescribeTransitGatewayPeeringAttachments(in)
	}
}

func (d *EC2Double) DescribeTransitGatewayRouteTables(i0 *ec2.DescribeTransitGatewayRouteTablesInput) (r0 *ec2.DescribeTransitGatewayRouteTablesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTransitGatewayRouteTables", i0)
	r0, _ = returns[0].(*ec2.DescribeTransitGatewayRouteTablesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeTransitGatewayRouteTablesPages(i0 *ec2.DescribeTransitGatewayRouteTablesInput, i1 func(*ec2.DescribeTransitGatewayRouteTablesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTransitGatewayRouteTablesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeTransitGatewayRouteTablesPages(in *ec2.DescribeTransitGatewayRouteTablesInput, pager func(*ec2.DescribeTransitGatewayRouteTablesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeTransitGatewayRouteTables", paginators, in, pager)
}

func (d *EC2Double) DescribeTransitGatewayRouteTablesPagesWithContext(i0 context.Context, i1 *ec2.DescribeTransitGatewayRouteTablesInput, i2 func(*ec2.DescribeTransitGatewayRouteTablesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTransitGatewayRouteTablesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeTransitGatewayRouteTablesPagesWithContext(ctx context.Context, in *ec2.DescribeTransitGatewayRouteTablesInput, pager func(*ec2.DescribeTransitGatewayRouteTablesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeTransitGatewayRouteTables", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeTransitGatewayRouteTablesRequest(i0 *ec2.DescribeTransitGatewayRouteTablesInput) (r0 *request.Request, r1 *ec2.DescribeTransitGatewayRouteTablesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTransitGatewayRouteTablesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeTransitGatewayRouteTablesOutput)
	return
}

func (d *EC2Double) DescribeTransitGatewayRouteTablesWithContext(i0 context.Context, i1 *ec2.DescribeTransitGatewayRouteTablesInput, i2 ...request.Option) (r0 *ec2.DescribeTransitGatewayRouteTablesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTransitGatewayRouteTablesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeTransitGatewayRouteTablesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeTransitGatewayRouteTablesWithContext(ctx context.Context, in *ec2.DescribeTransitGatewayRouteTablesInput, _ ...request.Option) (*ec2.DescribeTransitGatewayRouteTablesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTransitGatewayRouteTables cancelled", ctx.Err())
	default:
		return d.DescribeTransitGatewayRouteTables(in)
	}
}

func (d *EC2Double) DescribeTransitGatewayVpcAttachments(i0 *ec2.DescribeTransitGatewayVpcAttachmentsInput) (r0 *ec2.DescribeTransitGatewayVpcAttachmentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTransitGatewayVpcAttachments", i0)
	r0, _ = returns[0].(*ec2.DescribeTransitGatewayVpcAttachmentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeTransitGatewayVpcAttachmentsPages(i0 *ec2.DescribeTransitGatewayVpcAttachmentsInput, i1 func(*ec2.DescribeTransitGatewayVpcAttachmentsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTransitGatewayVpcAttachmentsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeTransitGatewayVpcAttachmentsPages(in *ec2.DescribeTransitGatewayVpcAttachmentsInput, pager func(*ec2.DescribeTransitGatewayVpcAttachmentsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeTransitGatewayVpcAttachments", paginators, in, pager)
}

func (d *EC2Double) DescribeTransitGatewayVpcAttachmentsPagesWithContext(i0 context.Context, i1 *ec2.DescribeTransitGatewayVpcAttachmentsInput, i2 func(*ec2.DescribeTransitGatewayVpcAttachmentsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTransitGatewayVpcAttachmentsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeTransitGatewayVpcAttachmentsPagesWithContext(ctx context.Context, in *ec2.DescribeTransitGatewayVpcAttachmentsInput, pager func(*ec2.DescribeTransitGatewayVpcAttachmentsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeTransitGatewayVpcAttachments", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeTransitGatewayVpcAttachmentsRequest(i0 *ec2.DescribeTransitGatewayVpcAttachmentsInput) (r0 *request.Request, r1 *ec2.DescribeTransitGatewayVpcAttachmentsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTransitGatewayVpcAttachmentsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeTransitGatewayVpcAttachmentsOutput)
	return
}

func (d *EC2Double) DescribeTransitGatewayVpcAttachmentsWithContext(i0 context.Context, i1 *ec2.DescribeTransitGatewayVpcAttachmentsInput, i2 ...request.Option) (r0 *ec2.DescribeTransitGatewayVpcAttachmentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTransitGatewayVpcAttachmentsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeTransitGatewayVpcAttachmentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeTransitGatewayVpcAttachmentsWithContext(ctx context.Context, in *ec2.DescribeTransitGatewayVpcAttachmentsInput, _ ...request.Option) (*ec2.DescribeTransitGatewayVpcAttachmentsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTransitGatewayVpcAttachments cancelled", ctx.Err())
	default:
		return d.DescribeTransitGatewayVpcAttachments(in)
	}
}

func (d *EC2Double) DescribeTransitGateways(i0 *ec2.DescribeTransitGatewaysInput) (r0 *ec2.DescribeTransitGatewaysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTransitGateways", i0)
	r0, _ = returns[0].(*ec2.DescribeTransitGatewaysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeTransitGatewaysPages(i0 *ec2.DescribeTransitGatewaysInput, i1 func(*ec2.DescribeTransitGatewaysOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTransitGatewaysPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeTransitGatewaysPages(in *ec2.DescribeTransitGatewaysInput, pager func(*ec2.DescribeTransitGatewaysOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeTransitGateways", paginators, in, pager)
}

func (d *EC2Double) DescribeTransitGatewaysPagesWithContext(i0 context.Context, i1 *ec2.DescribeTransitGatewaysInput, i2 func(*ec2.DescribeTransitGatewaysOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTransitGatewaysPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeTransitGatewaysPagesWithContext(ctx context.Context, in *ec2.DescribeTransitGatewaysInput, pager func(*ec2.DescribeTransitGatewaysOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeTransitGateways", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeTransitGatewaysRequest(i0 *ec2.DescribeTransitGatewaysInput) (r0 *request.Request, r1 *ec2.DescribeTransitGatewaysOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTransitGatewaysRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeTransitGatewaysOutput)
	return
}

func (d *EC2Double) DescribeTransitGatewaysWithContext(i0 context.Context, i1 *ec2.DescribeTransitGatewaysInput, i2 ...request.Option) (r0 *ec2.DescribeTransitGatewaysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTransitGatewaysWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeTransitGatewaysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeTransitGatewaysWithContext(ctx context.Context, in *ec2.DescribeTransitGatewaysInput, _ ...request.Option) (*ec2.DescribeTransitGatewaysOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTransitGateways cancelled", ctx.Err())
	default:
		return d.DescribeTransitGateways(in)
	}
}

func (d *EC2Double) DescribeVolumeAttribute(i0 *ec2.DescribeVolumeAttributeInput) (r0 *ec2.DescribeVolumeAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVolumeAttribute", i0)
	r0, _ = returns[0].(*ec2.DescribeVolumeAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeVolumeAttributeRequest(i0 *ec2.DescribeVolumeAttributeInput) (r0 *request.Request, r1 *ec2.DescribeVolumeAttributeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVolumeAttributeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeVolumeAttributeOutput)
	return
}

func (d *EC2Double) DescribeVolumeAttributeWithContext(i0 context.Context, i1 *ec2.DescribeVolumeAttributeInput, i2 ...request.Option) (r0 *ec2.DescribeVolumeAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVolumeAttributeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeVolumeAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeVolumeAttributeWithContext(ctx context.Context, in *ec2.DescribeVolumeAttributeInput, _ ...request.Option) (*ec2.DescribeVolumeAttributeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeVolumeAttribute cancelled", ctx.Err())
	default:
		return d.DescribeVolumeAttribute(in)
	}
}

func (d *EC2Double) DescribeVolumeStatus(i0 *ec2.DescribeVolumeStatusInput) (r0 *ec2.DescribeVolumeStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVolumeStatus", i0)
	r0, _ = returns[0].(*ec2.DescribeVolumeStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeVolumeStatusPages(i0 *ec2.DescribeVolumeStatusInput, i1 func(*ec2.DescribeVolumeStatusOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVolumeStatusPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeVolumeStatusPages(in *ec2.DescribeVolumeStatusInput, pager func(*ec2.DescribeVolumeStatusOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeVolumeStatus", paginators, in, pager)
}

func (d *EC2Double) DescribeVolumeStatusPagesWithContext(i0 context.Context, i1 *ec2.DescribeVolumeStatusInput, i2 func(*ec2.DescribeVolumeStatusOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVolumeStatusPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeVolumeStatusPagesWithContext(ctx context.Context, in *ec2.DescribeVolumeStatusInput, pager func(*ec2.DescribeVolumeStatusOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeVolumeStatus", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeVolumeStatusRequest(i0 *ec2.DescribeVolumeStatusInput) (r0 *request.Request, r1 *ec2.DescribeVolumeStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVolumeStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeVolumeStatusOutput)
	return
}

func (d *EC2Double) DescribeVolumeStatusWithContext(i0 context.Context, i1 *ec2.DescribeVolumeStatusInput, i2 ...request.Option) (r0 *ec2.DescribeVolumeStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVolumeStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeVolumeStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeVolumeStatusWithContext(ctx context.Context, in *ec2.DescribeVolumeStatusInput, _ ...request.Option) (*ec2.DescribeVolumeStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeVolumeStatus cancelled", ctx.Err())
	default:
		return d.DescribeVolumeStatus(in)
	}
}

func (d *EC2Double) DescribeVolumes(i0 *ec2.DescribeVolumesInput) (r0 *ec2.DescribeVolumesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVolumes", i0)
	r0, _ = returns[0].(*ec2.DescribeVolumesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeVolumesModifications(i0 *ec2.DescribeVolumesModificationsInput) (r0 *ec2.DescribeVolumesModificationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVolumesModifications", i0)
	r0, _ = returns[0].(*ec2.DescribeVolumesModificationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeVolumesModificationsPages(i0 *ec2.DescribeVolumesModificationsInput, i1 func(*ec2.DescribeVolumesModificationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVolumesModificationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeVolumesModificationsPages(in *ec2.DescribeVolumesModificationsInput, pager func(*ec2.DescribeVolumesModificationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeVolumesModifications", paginators, in, pager)
}

func (d *EC2Double) DescribeVolumesModificationsPagesWithContext(i0 context.Context, i1 *ec2.DescribeVolumesModificationsInput, i2 func(*ec2.DescribeVolumesModificationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVolumesModificationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeVolumesModificationsPagesWithContext(ctx context.Context, in *ec2.DescribeVolumesModificationsInput, pager func(*ec2.DescribeVolumesModificationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeVolumesModifications", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeVolumesModificationsRequest(i0 *ec2.DescribeVolumesModificationsInput) (r0 *request.Request, r1 *ec2.DescribeVolumesModificationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVolumesModificationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeVolumesModificationsOutput)
	return
}

func (d *EC2Double) DescribeVolumesModificationsWithContext(i0 context.Context, i1 *ec2.DescribeVolumesModificationsInput, i2 ...request.Option) (r0 *ec2.DescribeVolumesModificationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVolumesModificationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeVolumesModificationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeVolumesModificationsWithContext(ctx context.Context, in *ec2.DescribeVolumesModificationsInput, _ ...request.Option) (*ec2.DescribeVolumesModificationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeVolumesModifications cancelled", ctx.Err())
	default:
		return d.DescribeVolumesModifications(in)
	}
}

func (d *EC2Double) DescribeVolumesPages(i0 *ec2.DescribeVolumesInput, i1 func(*ec2.DescribeVolumesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVolumesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeVolumesPages(in *ec2.DescribeVolumesInput, pager func(*ec2.DescribeVolumesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeVolumes", paginators, in, pager)
}

func (d *EC2Double) DescribeVolumesPagesWithContext(i0 context.Context, i1 *ec2.DescribeVolumesInput, i2 func(*ec2.DescribeVolumesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVolumesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeVolumesPagesWithContext(ctx context.Context, in *ec2.DescribeVolumesInput, pager func(*ec2.DescribeVolumesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeVolumes", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeVolumesRequest(i0 *ec2.DescribeVolumesInput) (r0 *request.Request, r1 *ec2.DescribeVolumesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVolumesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeVolumesOutput)
	return
}

func (d *EC2Double) DescribeVolumesWithContext(i0 context.Context, i1 *ec2.DescribeVolumesInput, i2 ...request.Option) (r0 *ec2.DescribeVolumesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVolumesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeVolumesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeVolumesWithContext(ctx context.Context, in *ec2.DescribeVolumesInput, _ ...request.Option) (*ec2.DescribeVolumesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeVolumes cancelled", ctx.Err())
	default:
		return d.DescribeVolumes(in)
	}
}

func (d *EC2Double) DescribeVpcAttribute(i0 *ec2.DescribeVpcAttributeInput) (r0 *ec2.DescribeVpcAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcAttribute", i0)
	r0, _ = returns[0].(*ec2.DescribeVpcAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeVpcAttributeRequest(i0 *ec2.DescribeVpcAttributeInput) (r0 *request.Request, r1 *ec2.DescribeVpcAttributeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcAttributeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeVpcAttributeOutput)
	return
}

func (d *EC2Double) DescribeVpcAttributeWithContext(i0 context.Context, i1 *ec2.DescribeVpcAttributeInput, i2 ...request.Option) (r0 *ec2.DescribeVpcAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcAttributeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeVpcAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeVpcAttributeWithContext(ctx context.Context, in *ec2.DescribeVpcAttributeInput, _ ...request.Option) (*ec2.DescribeVpcAttributeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeVpcAttribute cancelled", ctx.Err())
	default:
		return d.DescribeVpcAttribute(in)
	}
}

func (d *EC2Double) DescribeVpcClassicLink(i0 *ec2.DescribeVpcClassicLinkInput) (r0 *ec2.DescribeVpcClassicLinkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcClassicLink", i0)
	r0, _ = returns[0].(*ec2.DescribeVpcClassicLinkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeVpcClassicLinkDnsSupport(i0 *ec2.DescribeVpcClassicLinkDnsSupportInput) (r0 *ec2.DescribeVpcClassicLinkDnsSupportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcClassicLinkDnsSupport", i0)
	r0, _ = returns[0].(*ec2.DescribeVpcClassicLinkDnsSupportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeVpcClassicLinkDnsSupportPages(i0 *ec2.DescribeVpcClassicLinkDnsSupportInput, i1 func(*ec2.DescribeVpcClassicLinkDnsSupportOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcClassicLinkDnsSupportPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeVpcClassicLinkDnsSupportPages(in *ec2.DescribeVpcClassicLinkDnsSupportInput, pager func(*ec2.DescribeVpcClassicLinkDnsSupportOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeVpcClassicLinkDnsSupport", paginators, in, pager)
}

func (d *EC2Double) DescribeVpcClassicLinkDnsSupportPagesWithContext(i0 context.Context, i1 *ec2.DescribeVpcClassicLinkDnsSupportInput, i2 func(*ec2.DescribeVpcClassicLinkDnsSupportOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcClassicLinkDnsSupportPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeVpcClassicLinkDnsSupportPagesWithContext(ctx context.Context, in *ec2.DescribeVpcClassicLinkDnsSupportInput, pager func(*ec2.DescribeVpcClassicLinkDnsSupportOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeVpcClassicLinkDnsSupport", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeVpcClassicLinkDnsSupportRequest(i0 *ec2.DescribeVpcClassicLinkDnsSupportInput) (r0 *request.Request, r1 *ec2.DescribeVpcClassicLinkDnsSupportOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcClassicLinkDnsSupportRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeVpcClassicLinkDnsSupportOutput)
	return
}

func (d *EC2Double) DescribeVpcClassicLinkDnsSupportWithContext(i0 context.Context, i1 *ec2.DescribeVpcClassicLinkDnsSupportInput, i2 ...request.Option) (r0 *ec2.DescribeVpcClassicLinkDnsSupportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcClassicLinkDnsSupportWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeVpcClassicLinkDnsSupportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeVpcClassicLinkDnsSupportWithContext(ctx context.Context, in *ec2.DescribeVpcClassicLinkDnsSupportInput, _ ...request.Option) (*ec2.DescribeVpcClassicLinkDnsSupportOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeVpcClassicLinkDnsSupport cancelled", ctx.Err())
	default:
		return d.DescribeVpcClassicLinkDnsSupport(in)
	}
}

func (d *EC2Double) DescribeVpcClassicLinkRequest(i0 *ec2.DescribeVpcClassicLinkInput) (r0 *request.Request, r1 *ec2.DescribeVpcClassicLinkOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcClassicLinkRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeVpcClassicLinkOutput)
	return
}

func (d *EC2Double) DescribeVpcClassicLinkWithContext(i0 context.Context, i1 *ec2.DescribeVpcClassicLinkInput, i2 ...request.Option) (r0 *ec2.DescribeVpcClassicLinkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcClassicLinkWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeVpcClassicLinkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeVpcClassicLinkWithContext(ctx context.Context, in *ec2.DescribeVpcClassicLinkInput, _ ...request.Option) (*ec2.DescribeVpcClassicLinkOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeVpcClassicLink cancelled", ctx.Err())
	default:
		return d.DescribeVpcClassicLink(in)
	}
}

func (d *EC2Double) DescribeVpcEndpointConnectionNotifications(i0 *ec2.DescribeVpcEndpointConnectionNotificationsInput) (r0 *ec2.DescribeVpcEndpointConnectionNotificationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcEndpointConnectionNotifications", i0)
	r0, _ = returns[0].(*ec2.DescribeVpcEndpointConnectionNotificationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeVpcEndpointConnectionNotificationsPages(i0 *ec2.DescribeVpcEndpointConnectionNotificationsInput, i1 func(*ec2.DescribeVpcEndpointConnectionNotificationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcEndpointConnectionNotificationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeVpcEndpointConnectionNotificationsPages(in *ec2.DescribeVpcEndpointConnectionNotificationsInput, pager func(*ec2.DescribeVpcEndpointConnectionNotificationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeVpcEndpointConnectionNotifications", paginators, in, pager)
}

func (d *EC2Double) DescribeVpcEndpointConnectionNotificationsPagesWithContext(i0 context.Context, i1 *ec2.DescribeVpcEndpointConnectionNotificationsInput, i2 func(*ec2.DescribeVpcEndpointConnectionNotificationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcEndpointConnectionNotificationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeVpcEndpointConnectionNotificationsPagesWithContext(ctx context.Context, in *ec2.DescribeVpcEndpointConnectionNotificationsInput, pager func(*ec2.DescribeVpcEndpointConnectionNotificationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeVpcEndpointConnectionNotifications", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeVpcEndpointConnectionNotificationsRequest(i0 *ec2.DescribeVpcEndpointConnectionNotificationsInput) (r0 *request.Request, r1 *ec2.DescribeVpcEndpointConnectionNotificationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcEndpointConnectionNotificationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeVpcEndpointConnectionNotificationsOutput)
	return
}

func (d *EC2Double) DescribeVpcEndpointConnectionNotificationsWithContext(i0 context.Context, i1 *ec2.DescribeVpcEndpointConnectionNotificationsInput, i2 ...request.Option) (r0 *ec2.DescribeVpcEndpointConnectionNotificationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcEndpointConnectionNotificationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeVpcEndpointConnectionNotificationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeVpcEndpointConnectionNotificationsWithContext(ctx context.Context, in *ec2.DescribeVpcEndpointConnectionNotificationsInput, _ ...request.Option) (*ec2.DescribeVpcEndpointConnectionNotificationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeVpcEndpointConnectionNotifications cancelled", ctx.Err())
	default:
		return d.DescribeVpcEndpointConnectionNotifications(in)
	}
}

func (d *EC2Double) DescribeVpcEndpointConnections(i0 *ec2.DescribeVpcEndpointConnectionsInput) (r0 *ec2.DescribeVpcEndpointConnectionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcEndpointConnections", i0)
	r0, _ = returns[0].(*ec2.DescribeVpcEndpointConnectionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeVpcEndpointConnectionsPages(i0 *ec2.DescribeVpcEndpointConnectionsInput, i1 func(*ec2.DescribeVpcEndpointConnectionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcEndpointConnectionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeVpcEndpointConnectionsPages(in *ec2.DescribeVpcEndpointConnectionsInput, pager func(*ec2.DescribeVpcEndpointConnectionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeVpcEndpointConnections", paginators, in, pager)
}

func (d *EC2Double) DescribeVpcEndpointConnectionsPagesWithContext(i0 context.Context, i1 *ec2.DescribeVpcEndpointConnectionsInput, i2 func(*ec2.DescribeVpcEndpointConnectionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcEndpointConnectionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeVpcEndpointConnectionsPagesWithContext(ctx context.Context, in *ec2.DescribeVpcEndpointConnectionsInput, pager func(*ec2.DescribeVpcEndpointConnectionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeVpcEndpointConnections", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeVpcEndpointConnectionsRequest(i0 *ec2.DescribeVpcEndpointConnectionsInput) (r0 *request.Request, r1 *ec2.DescribeVpcEndpointConnectionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcEndpointConnectionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeVpcEndpointConnectionsOutput)
	return
}

func (d *EC2Double) DescribeVpcEndpointConnectionsWithContext(i0 context.Context, i1 *ec2.DescribeVpcEndpointConnectionsInput, i2 ...request.Option) (r0 *ec2.DescribeVpcEndpointConnectionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcEndpointConnectionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeVpcEndpointConnectionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeVpcEndpointConnectionsWithContext(ctx context.Context, in *ec2.DescribeVpcEndpointConnectionsInput, _ ...request.Option) (*ec2.DescribeVpcEndpointConnectionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeVpcEndpointConnections cancelled", ctx.Err())
	default:
		return d.DescribeVpcEndpointConnections(in)
	}
}

func (d *EC2Double) DescribeVpcEndpointServiceConfigurations(i0 *ec2.DescribeVpcEndpointServiceConfigurationsInput) (r0 *ec2.DescribeVpcEndpointServiceConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcEndpointServiceConfigurations", i0)
	r0, _ = returns[0].(*ec2.DescribeVpcEndpointServiceConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeVpcEndpointServiceConfigurationsPages(i0 *ec2.DescribeVpcEndpointServiceConfigurationsInput, i1 func(*ec2.DescribeVpcEndpointServiceConfigurationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcEndpointServiceConfigurationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeVpcEndpointServiceConfigurationsPages(in *ec2.DescribeVpcEndpointServiceConfigurationsInput, pager func(*ec2.DescribeVpcEndpointServiceConfigurationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeVpcEndpointServiceConfigurations", paginators, in, pager)
}

func (d *EC2Double) DescribeVpcEndpointServiceConfigurationsPagesWithContext(i0 context.Context, i1 *ec2.DescribeVpcEndpointServiceConfigurationsInput, i2 func(*ec2.DescribeVpcEndpointServiceConfigurationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcEndpointServiceConfigurationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeVpcEndpointServiceConfigurationsPagesWithContext(ctx context.Context, in *ec2.DescribeVpcEndpointServiceConfigurationsInput, pager func(*ec2.DescribeVpcEndpointServiceConfigurationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeVpcEndpointServiceConfigurations", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeVpcEndpointServiceConfigurationsRequest(i0 *ec2.DescribeVpcEndpointServiceConfigurationsInput) (r0 *request.Request, r1 *ec2.DescribeVpcEndpointServiceConfigurationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcEndpointServiceConfigurationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeVpcEndpointServiceConfigurationsOutput)
	return
}

func (d *EC2Double) DescribeVpcEndpointServiceConfigurationsWithContext(i0 context.Context, i1 *ec2.DescribeVpcEndpointServiceConfigurationsInput, i2 ...request.Option) (r0 *ec2.DescribeVpcEndpointServiceConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcEndpointServiceConfigurationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeVpcEndpointServiceConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeVpcEndpointServiceConfigurationsWithContext(ctx context.Context, in *ec2.DescribeVpcEndpointServiceConfigurationsInput, _ ...request.Option) (*ec2.DescribeVpcEndpointServiceConfigurationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeVpcEndpointServiceConfigurations cancelled", ctx.Err())
	default:
		return d.DescribeVpcEndpointServiceConfigurations(in)
	}
}

func (d *EC2Double) DescribeVpcEndpointServicePermissions(i0 *ec2.DescribeVpcEndpointServicePermissionsInput) (r0 *ec2.DescribeVpcEndpointServicePermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcEndpointServicePermissions", i0)
	r0, _ = returns[0].(*ec2.DescribeVpcEndpointServicePermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeVpcEndpointServicePermissionsPages(i0 *ec2.DescribeVpcEndpointServicePermissionsInput, i1 func(*ec2.DescribeVpcEndpointServicePermissionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcEndpointServicePermissionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeVpcEndpointServicePermissionsPages(in *ec2.DescribeVpcEndpointServicePermissionsInput, pager func(*ec2.DescribeVpcEndpointServicePermissionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeVpcEndpointServicePermissions", paginators, in, pager)
}

func (d *EC2Double) DescribeVpcEndpointServicePermissionsPagesWithContext(i0 context.Context, i1 *ec2.DescribeVpcEndpointServicePermissionsInput, i2 func(*ec2.DescribeVpcEndpointServicePermissionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcEndpointServicePermissionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeVpcEndpointServicePermissionsPagesWithContext(ctx context.Context, in *ec2.DescribeVpcEndpointServicePermissionsInput, pager func(*ec2.DescribeVpcEndpointServicePermissionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeVpcEndpointServicePermissions", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeVpcEndpointServicePermissionsRequest(i0 *ec2.DescribeVpcEndpointServicePermissionsInput) (r0 *request.Request, r1 *ec2.DescribeVpcEndpointServicePermissionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcEndpointServicePermissionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeVpcEndpointServicePermissionsOutput)
	return
}

func (d *EC2Double) DescribeVpcEndpointServicePermissionsWithContext(i0 context.Context, i1 *ec2.DescribeVpcEndpointServicePermissionsInput, i2 ...request.Option) (r0 *ec2.DescribeVpcEndpointServicePermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcEndpointServicePermissionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeVpcEndpointServicePermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeVpcEndpointServicePermissionsWithContext(ctx context.Context, in *ec2.DescribeVpcEndpointServicePermissionsInput, _ ...request.Option) (*ec2.DescribeVpcEndpointServicePermissionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeVpcEndpointServicePermissions cancelled", ctx.Err())
	default:
		return d.DescribeVpcEndpointServicePermissions(in)
	}
}

func (d *EC2Double) DescribeVpcEndpointServices(i0 *ec2.DescribeVpcEndpointServicesInput) (r0 *ec2.DescribeVpcEndpointServicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcEndpointServices", i0)
	r0, _ = returns[0].(*ec2.DescribeVpcEndpointServicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeVpcEndpointServicesRequest(i0 *ec2.DescribeVpcEndpointServicesInput) (r0 *request.Request, r1 *ec2.DescribeVpcEndpointServicesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcEndpointServicesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeVpcEndpointServicesOutput)
	return
}

func (d *EC2Double) DescribeVpcEndpointServicesWithContext(i0 context.Context, i1 *ec2.DescribeVpcEndpointServicesInput, i2 ...request.Option) (r0 *ec2.DescribeVpcEndpointServicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcEndpointServicesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeVpcEndpointServicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeVpcEndpointServicesWithContext(ctx context.Context, in *ec2.DescribeVpcEndpointServicesInput, _ ...request.Option) (*ec2.DescribeVpcEndpointServicesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeVpcEndpointServices cancelled", ctx.Err())
	default:
		return d.DescribeVpcEndpointServices(in)
	}
}

func (d *EC2Double) DescribeVpcEndpoints(i0 *ec2.DescribeVpcEndpointsInput) (r0 *ec2.DescribeVpcEndpointsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcEndpoints", i0)
	r0, _ = returns[0].(*ec2.DescribeVpcEndpointsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeVpcEndpointsPages(i0 *ec2.DescribeVpcEndpointsInput, i1 func(*ec2.DescribeVpcEndpointsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcEndpointsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeVpcEndpointsPages(in *ec2.DescribeVpcEndpointsInput, pager func(*ec2.DescribeVpcEndpointsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeVpcEndpoints", paginators, in, pager)
}

func (d *EC2Double) DescribeVpcEndpointsPagesWithContext(i0 context.Context, i1 *ec2.DescribeVpcEndpointsInput, i2 func(*ec2.DescribeVpcEndpointsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcEndpointsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeVpcEndpointsPagesWithContext(ctx context.Context, in *ec2.DescribeVpcEndpointsInput, pager func(*ec2.DescribeVpcEndpointsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeVpcEndpoints", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeVpcEndpointsRequest(i0 *ec2.DescribeVpcEndpointsInput) (r0 *request.Request, r1 *ec2.DescribeVpcEndpointsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcEndpointsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeVpcEndpointsOutput)
	return
}

func (d *EC2Double) DescribeVpcEndpointsWithContext(i0 context.Context, i1 *ec2.DescribeVpcEndpointsInput, i2 ...request.Option) (r0 *ec2.DescribeVpcEndpointsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcEndpointsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeVpcEndpointsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeVpcEndpointsWithContext(ctx context.Context, in *ec2.DescribeVpcEndpointsInput, _ ...request.Option) (*ec2.DescribeVpcEndpointsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeVpcEndpoints cancelled", ctx.Err())
	default:
		return d.DescribeVpcEndpoints(in)
	}
}

func (d *EC2Double) DescribeVpcPeeringConnections(i0 *ec2.DescribeVpcPeeringConnectionsInput) (r0 *ec2.DescribeVpcPeeringConnectionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcPeeringConnections", i0)
	r0, _ = returns[0].(*ec2.DescribeVpcPeeringConnectionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeVpcPeeringConnectionsPages(i0 *ec2.DescribeVpcPeeringConnectionsInput, i1 func(*ec2.DescribeVpcPeeringConnectionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcPeeringConnectionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeVpcPeeringConnectionsPages(in *ec2.DescribeVpcPeeringConnectionsInput, pager func(*ec2.DescribeVpcPeeringConnectionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeVpcPeeringConnections", paginators, in, pager)
}

func (d *EC2Double) DescribeVpcPeeringConnectionsPagesWithContext(i0 context.Context, i1 *ec2.DescribeVpcPeeringConnectionsInput, i2 func(*ec2.DescribeVpcPeeringConnectionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcPeeringConnectionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeVpcPeeringConnectionsPagesWithContext(ctx context.Context, in *ec2.DescribeVpcPeeringConnectionsInput, pager func(*ec2.DescribeVpcPeeringConnectionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeVpcPeeringConnections", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeVpcPeeringConnectionsRequest(i0 *ec2.DescribeVpcPeeringConnectionsInput) (r0 *request.Request, r1 *ec2.DescribeVpcPeeringConnectionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcPeeringConnectionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeVpcPeeringConnectionsOutput)
	return
}

func (d *EC2Double) DescribeVpcPeeringConnectionsWithContext(i0 context.Context, i1 *ec2.DescribeVpcPeeringConnectionsInput, i2 ...request.Option) (r0 *ec2.DescribeVpcPeeringConnectionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcPeeringConnectionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeVpcPeeringConnectionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeVpcPeeringConnectionsWithContext(ctx context.Context, in *ec2.DescribeVpcPeeringConnectionsInput, _ ...request.Option) (*ec2.DescribeVpcPeeringConnectionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeVpcPeeringConnections cancelled", ctx.Err())
	default:
		return d.DescribeVpcPeeringConnections(in)
	}
}

func (d *EC2Double) DescribeVpcs(i0 *ec2.DescribeVpcsInput) (r0 *ec2.DescribeVpcsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcs", i0)
	r0, _ = returns[0].(*ec2.DescribeVpcsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeVpcsPages(i0 *ec2.DescribeVpcsInput, i1 func(*ec2.DescribeVpcsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeVpcsPages(in *ec2.DescribeVpcsInput, pager func(*ec2.DescribeVpcsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeVpcs", paginators, in, pager)
}

func (d *EC2Double) DescribeVpcsPagesWithContext(i0 context.Context, i1 *ec2.DescribeVpcsInput, i2 func(*ec2.DescribeVpcsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeDescribeVpcsPagesWithContext(ctx context.Context, in *ec2.DescribeVpcsInput, pager func(*ec2.DescribeVpcsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeVpcs", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) DescribeVpcsRequest(i0 *ec2.DescribeVpcsInput) (r0 *request.Request, r1 *ec2.DescribeVpcsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeVpcsOutput)
	return
}

func (d *EC2Double) DescribeVpcsWithContext(i0 context.Context, i1 *ec2.DescribeVpcsInput, i2 ...request.Option) (r0 *ec2.DescribeVpcsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpcsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeVpcsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeVpcsWithContext(ctx context.Context, in *ec2.DescribeVpcsInput, _ ...request.Option) (*ec2.DescribeVpcsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeVpcs cancelled", ctx.Err())
	default:
		return d.DescribeVpcs(in)
	}
}

func (d *EC2Double) DescribeVpnConnections(i0 *ec2.DescribeVpnConnectionsInput) (r0 *ec2.DescribeVpnConnectionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpnConnections", i0)
	r0, _ = returns[0].(*ec2.DescribeVpnConnectionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeVpnConnectionsRequest(i0 *ec2.DescribeVpnConnectionsInput) (r0 *request.Request, r1 *ec2.DescribeVpnConnectionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpnConnectionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeVpnConnectionsOutput)
	return
}

func (d *EC2Double) DescribeVpnConnectionsWithContext(i0 context.Context, i1 *ec2.DescribeVpnConnectionsInput, i2 ...request.Option) (r0 *ec2.DescribeVpnConnectionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpnConnectionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeVpnConnectionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeVpnConnectionsWithContext(ctx context.Context, in *ec2.DescribeVpnConnectionsInput, _ ...request.Option) (*ec2.DescribeVpnConnectionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeVpnConnections cancelled", ctx.Err())
	default:
		return d.DescribeVpnConnections(in)
	}
}

func (d *EC2Double) DescribeVpnGateways(i0 *ec2.DescribeVpnGatewaysInput) (r0 *ec2.DescribeVpnGatewaysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpnGateways", i0)
	r0, _ = returns[0].(*ec2.DescribeVpnGatewaysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DescribeVpnGatewaysRequest(i0 *ec2.DescribeVpnGatewaysInput) (r0 *request.Request, r1 *ec2.DescribeVpnGatewaysOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpnGatewaysRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DescribeVpnGatewaysOutput)
	return
}

func (d *EC2Double) DescribeVpnGatewaysWithContext(i0 context.Context, i1 *ec2.DescribeVpnGatewaysInput, i2 ...request.Option) (r0 *ec2.DescribeVpnGatewaysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVpnGatewaysWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DescribeVpnGatewaysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDescribeVpnGatewaysWithContext(ctx context.Context, in *ec2.DescribeVpnGatewaysInput, _ ...request.Option) (*ec2.DescribeVpnGatewaysOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeVpnGateways cancelled", ctx.Err())
	default:
		return d.DescribeVpnGateways(in)
	}
}

func (d *EC2Double) DetachClassicLinkVpc(i0 *ec2.DetachClassicLinkVpcInput) (r0 *ec2.DetachClassicLinkVpcOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachClassicLinkVpc", i0)
	r0, _ = returns[0].(*ec2.DetachClassicLinkVpcOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DetachClassicLinkVpcRequest(i0 *ec2.DetachClassicLinkVpcInput) (r0 *request.Request, r1 *ec2.DetachClassicLinkVpcOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachClassicLinkVpcRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DetachClassicLinkVpcOutput)
	return
}

func (d *EC2Double) DetachClassicLinkVpcWithContext(i0 context.Context, i1 *ec2.DetachClassicLinkVpcInput, i2 ...request.Option) (r0 *ec2.DetachClassicLinkVpcOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachClassicLinkVpcWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DetachClassicLinkVpcOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDetachClassicLinkVpcWithContext(ctx context.Context, in *ec2.DetachClassicLinkVpcInput, _ ...request.Option) (*ec2.DetachClassicLinkVpcOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DetachClassicLinkVpc cancelled", ctx.Err())
	default:
		return d.DetachClassicLinkVpc(in)
	}
}

func (d *EC2Double) DetachInternetGateway(i0 *ec2.DetachInternetGatewayInput) (r0 *ec2.DetachInternetGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachInternetGateway", i0)
	r0, _ = returns[0].(*ec2.DetachInternetGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DetachInternetGatewayRequest(i0 *ec2.DetachInternetGatewayInput) (r0 *request.Request, r1 *ec2.DetachInternetGatewayOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachInternetGatewayRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DetachInternetGatewayOutput)
	return
}

func (d *EC2Double) DetachInternetGatewayWithContext(i0 context.Context, i1 *ec2.DetachInternetGatewayInput, i2 ...request.Option) (r0 *ec2.DetachInternetGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachInternetGatewayWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DetachInternetGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDetachInternetGatewayWithContext(ctx context.Context, in *ec2.DetachInternetGatewayInput, _ ...request.Option) (*ec2.DetachInternetGatewayOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DetachInternetGateway cancelled", ctx.Err())
	default:
		return d.DetachInternetGateway(in)
	}
}

func (d *EC2Double) DetachNetworkInterface(i0 *ec2.DetachNetworkInterfaceInput) (r0 *ec2.DetachNetworkInterfaceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachNetworkInterface", i0)
	r0, _ = returns[0].(*ec2.DetachNetworkInterfaceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DetachNetworkInterfaceRequest(i0 *ec2.DetachNetworkInterfaceInput) (r0 *request.Request, r1 *ec2.DetachNetworkInterfaceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachNetworkInterfaceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DetachNetworkInterfaceOutput)
	return
}

func (d *EC2Double) DetachNetworkInterfaceWithContext(i0 context.Context, i1 *ec2.DetachNetworkInterfaceInput, i2 ...request.Option) (r0 *ec2.DetachNetworkInterfaceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachNetworkInterfaceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DetachNetworkInterfaceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDetachNetworkInterfaceWithContext(ctx context.Context, in *ec2.DetachNetworkInterfaceInput, _ ...request.Option) (*ec2.DetachNetworkInterfaceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DetachNetworkInterface cancelled", ctx.Err())
	default:
		return d.DetachNetworkInterface(in)
	}
}

func (d *EC2Double) DetachVolume(i0 *ec2.DetachVolumeInput) (r0 *ec2.VolumeAttachment, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachVolume", i0)
	r0, _ = returns[0].(*ec2.VolumeAttachment)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DetachVolumeRequest(i0 *ec2.DetachVolumeInput) (r0 *request.Request, r1 *ec2.VolumeAttachment) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachVolumeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.VolumeAttachment)
	return
}

func (d *EC2Double) DetachVolumeWithContext(i0 context.Context, i1 *ec2.DetachVolumeInput, i2 ...request.Option) (r0 *ec2.VolumeAttachment, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachVolumeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.VolumeAttachment)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDetachVolumeWithContext(ctx context.Context, in *ec2.DetachVolumeInput, _ ...request.Option) (*ec2.VolumeAttachment, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DetachVolume cancelled", ctx.Err())
	default:
		return d.DetachVolume(in)
	}
}

func (d *EC2Double) DetachVpnGateway(i0 *ec2.DetachVpnGatewayInput) (r0 *ec2.DetachVpnGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachVpnGateway", i0)
	r0, _ = returns[0].(*ec2.DetachVpnGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DetachVpnGatewayRequest(i0 *ec2.DetachVpnGatewayInput) (r0 *request.Request, r1 *ec2.DetachVpnGatewayOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachVpnGatewayRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DetachVpnGatewayOutput)
	return
}

func (d *EC2Double) DetachVpnGatewayWithContext(i0 context.Context, i1 *ec2.DetachVpnGatewayInput, i2 ...request.Option) (r0 *ec2.DetachVpnGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachVpnGatewayWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DetachVpnGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDetachVpnGatewayWithContext(ctx context.Context, in *ec2.DetachVpnGatewayInput, _ ...request.Option) (*ec2.DetachVpnGatewayOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DetachVpnGateway cancelled", ctx.Err())
	default:
		return d.DetachVpnGateway(in)
	}
}

func (d *EC2Double) DisableEbsEncryptionByDefault(i0 *ec2.DisableEbsEncryptionByDefaultInput) (r0 *ec2.DisableEbsEncryptionByDefaultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableEbsEncryptionByDefault", i0)
	r0, _ = returns[0].(*ec2.DisableEbsEncryptionByDefaultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DisableEbsEncryptionByDefaultRequest(i0 *ec2.DisableEbsEncryptionByDefaultInput) (r0 *request.Request, r1 *ec2.DisableEbsEncryptionByDefaultOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableEbsEncryptionByDefaultRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DisableEbsEncryptionByDefaultOutput)
	return
}

func (d *EC2Double) DisableEbsEncryptionByDefaultWithContext(i0 context.Context, i1 *ec2.DisableEbsEncryptionByDefaultInput, i2 ...request.Option) (r0 *ec2.DisableEbsEncryptionByDefaultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableEbsEncryptionByDefaultWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DisableEbsEncryptionByDefaultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDisableEbsEncryptionByDefaultWithContext(ctx context.Context, in *ec2.DisableEbsEncryptionByDefaultInput, _ ...request.Option) (*ec2.DisableEbsEncryptionByDefaultOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisableEbsEncryptionByDefault cancelled", ctx.Err())
	default:
		return d.DisableEbsEncryptionByDefault(in)
	}
}

func (d *EC2Double) DisableFastSnapshotRestores(i0 *ec2.DisableFastSnapshotRestoresInput) (r0 *ec2.DisableFastSnapshotRestoresOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableFastSnapshotRestores", i0)
	r0, _ = returns[0].(*ec2.DisableFastSnapshotRestoresOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DisableFastSnapshotRestoresRequest(i0 *ec2.DisableFastSnapshotRestoresInput) (r0 *request.Request, r1 *ec2.DisableFastSnapshotRestoresOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableFastSnapshotRestoresRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DisableFastSnapshotRestoresOutput)
	return
}

func (d *EC2Double) DisableFastSnapshotRestoresWithContext(i0 context.Context, i1 *ec2.DisableFastSnapshotRestoresInput, i2 ...request.Option) (r0 *ec2.DisableFastSnapshotRestoresOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableFastSnapshotRestoresWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DisableFastSnapshotRestoresOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDisableFastSnapshotRestoresWithContext(ctx context.Context, in *ec2.DisableFastSnapshotRestoresInput, _ ...request.Option) (*ec2.DisableFastSnapshotRestoresOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisableFastSnapshotRestores cancelled", ctx.Err())
	default:
		return d.DisableFastSnapshotRestores(in)
	}
}

func (d *EC2Double) DisableTransitGatewayRouteTablePropagation(i0 *ec2.DisableTransitGatewayRouteTablePropagationInput) (r0 *ec2.DisableTransitGatewayRouteTablePropagationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableTransitGatewayRouteTablePropagation", i0)
	r0, _ = returns[0].(*ec2.DisableTransitGatewayRouteTablePropagationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DisableTransitGatewayRouteTablePropagationRequest(i0 *ec2.DisableTransitGatewayRouteTablePropagationInput) (r0 *request.Request, r1 *ec2.DisableTransitGatewayRouteTablePropagationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableTransitGatewayRouteTablePropagationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DisableTransitGatewayRouteTablePropagationOutput)
	return
}

func (d *EC2Double) DisableTransitGatewayRouteTablePropagationWithContext(i0 context.Context, i1 *ec2.DisableTransitGatewayRouteTablePropagationInput, i2 ...request.Option) (r0 *ec2.DisableTransitGatewayRouteTablePropagationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableTransitGatewayRouteTablePropagationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DisableTransitGatewayRouteTablePropagationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDisableTransitGatewayRouteTablePropagationWithContext(ctx context.Context, in *ec2.DisableTransitGatewayRouteTablePropagationInput, _ ...request.Option) (*ec2.DisableTransitGatewayRouteTablePropagationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisableTransitGatewayRouteTablePropagation cancelled", ctx.Err())
	default:
		return d.DisableTransitGatewayRouteTablePropagation(in)
	}
}

func (d *EC2Double) DisableVgwRoutePropagation(i0 *ec2.DisableVgwRoutePropagationInput) (r0 *ec2.DisableVgwRoutePropagationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableVgwRoutePropagation", i0)
	r0, _ = returns[0].(*ec2.DisableVgwRoutePropagationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DisableVgwRoutePropagationRequest(i0 *ec2.DisableVgwRoutePropagationInput) (r0 *request.Request, r1 *ec2.DisableVgwRoutePropagationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableVgwRoutePropagationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DisableVgwRoutePropagationOutput)
	return
}

func (d *EC2Double) DisableVgwRoutePropagationWithContext(i0 context.Context, i1 *ec2.DisableVgwRoutePropagationInput, i2 ...request.Option) (r0 *ec2.DisableVgwRoutePropagationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableVgwRoutePropagationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DisableVgwRoutePropagationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDisableVgwRoutePropagationWithContext(ctx context.Context, in *ec2.DisableVgwRoutePropagationInput, _ ...request.Option) (*ec2.DisableVgwRoutePropagationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisableVgwRoutePropagation cancelled", ctx.Err())
	default:
		return d.DisableVgwRoutePropagation(in)
	}
}

func (d *EC2Double) DisableVpcClassicLink(i0 *ec2.DisableVpcClassicLinkInput) (r0 *ec2.DisableVpcClassicLinkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableVpcClassicLink", i0)
	r0, _ = returns[0].(*ec2.DisableVpcClassicLinkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DisableVpcClassicLinkDnsSupport(i0 *ec2.DisableVpcClassicLinkDnsSupportInput) (r0 *ec2.DisableVpcClassicLinkDnsSupportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableVpcClassicLinkDnsSupport", i0)
	r0, _ = returns[0].(*ec2.DisableVpcClassicLinkDnsSupportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DisableVpcClassicLinkDnsSupportRequest(i0 *ec2.DisableVpcClassicLinkDnsSupportInput) (r0 *request.Request, r1 *ec2.DisableVpcClassicLinkDnsSupportOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableVpcClassicLinkDnsSupportRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DisableVpcClassicLinkDnsSupportOutput)
	return
}

func (d *EC2Double) DisableVpcClassicLinkDnsSupportWithContext(i0 context.Context, i1 *ec2.DisableVpcClassicLinkDnsSupportInput, i2 ...request.Option) (r0 *ec2.DisableVpcClassicLinkDnsSupportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableVpcClassicLinkDnsSupportWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DisableVpcClassicLinkDnsSupportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDisableVpcClassicLinkDnsSupportWithContext(ctx context.Context, in *ec2.DisableVpcClassicLinkDnsSupportInput, _ ...request.Option) (*ec2.DisableVpcClassicLinkDnsSupportOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisableVpcClassicLinkDnsSupport cancelled", ctx.Err())
	default:
		return d.DisableVpcClassicLinkDnsSupport(in)
	}
}

func (d *EC2Double) DisableVpcClassicLinkRequest(i0 *ec2.DisableVpcClassicLinkInput) (r0 *request.Request, r1 *ec2.DisableVpcClassicLinkOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableVpcClassicLinkRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DisableVpcClassicLinkOutput)
	return
}

func (d *EC2Double) DisableVpcClassicLinkWithContext(i0 context.Context, i1 *ec2.DisableVpcClassicLinkInput, i2 ...request.Option) (r0 *ec2.DisableVpcClassicLinkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableVpcClassicLinkWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DisableVpcClassicLinkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDisableVpcClassicLinkWithContext(ctx context.Context, in *ec2.DisableVpcClassicLinkInput, _ ...request.Option) (*ec2.DisableVpcClassicLinkOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisableVpcClassicLink cancelled", ctx.Err())
	default:
		return d.DisableVpcClassicLink(in)
	}
}

func (d *EC2Double) DisassociateAddress(i0 *ec2.DisassociateAddressInput) (r0 *ec2.DisassociateAddressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateAddress", i0)
	r0, _ = returns[0].(*ec2.DisassociateAddressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DisassociateAddressRequest(i0 *ec2.DisassociateAddressInput) (r0 *request.Request, r1 *ec2.DisassociateAddressOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateAddressRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DisassociateAddressOutput)
	return
}

func (d *EC2Double) DisassociateAddressWithContext(i0 context.Context, i1 *ec2.DisassociateAddressInput, i2 ...request.Option) (r0 *ec2.DisassociateAddressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateAddressWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DisassociateAddressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDisassociateAddressWithContext(ctx context.Context, in *ec2.DisassociateAddressInput, _ ...request.Option) (*ec2.DisassociateAddressOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateAddress cancelled", ctx.Err())
	default:
		return d.DisassociateAddress(in)
	}
}

func (d *EC2Double) DisassociateClientVpnTargetNetwork(i0 *ec2.DisassociateClientVpnTargetNetworkInput) (r0 *ec2.DisassociateClientVpnTargetNetworkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateClientVpnTargetNetwork", i0)
	r0, _ = returns[0].(*ec2.DisassociateClientVpnTargetNetworkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DisassociateClientVpnTargetNetworkRequest(i0 *ec2.DisassociateClientVpnTargetNetworkInput) (r0 *request.Request, r1 *ec2.DisassociateClientVpnTargetNetworkOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateClientVpnTargetNetworkRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DisassociateClientVpnTargetNetworkOutput)
	return
}

func (d *EC2Double) DisassociateClientVpnTargetNetworkWithContext(i0 context.Context, i1 *ec2.DisassociateClientVpnTargetNetworkInput, i2 ...request.Option) (r0 *ec2.DisassociateClientVpnTargetNetworkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateClientVpnTargetNetworkWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DisassociateClientVpnTargetNetworkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDisassociateClientVpnTargetNetworkWithContext(ctx context.Context, in *ec2.DisassociateClientVpnTargetNetworkInput, _ ...request.Option) (*ec2.DisassociateClientVpnTargetNetworkOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateClientVpnTargetNetwork cancelled", ctx.Err())
	default:
		return d.DisassociateClientVpnTargetNetwork(in)
	}
}

func (d *EC2Double) DisassociateIamInstanceProfile(i0 *ec2.DisassociateIamInstanceProfileInput) (r0 *ec2.DisassociateIamInstanceProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateIamInstanceProfile", i0)
	r0, _ = returns[0].(*ec2.DisassociateIamInstanceProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DisassociateIamInstanceProfileRequest(i0 *ec2.DisassociateIamInstanceProfileInput) (r0 *request.Request, r1 *ec2.DisassociateIamInstanceProfileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateIamInstanceProfileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DisassociateIamInstanceProfileOutput)
	return
}

func (d *EC2Double) DisassociateIamInstanceProfileWithContext(i0 context.Context, i1 *ec2.DisassociateIamInstanceProfileInput, i2 ...request.Option) (r0 *ec2.DisassociateIamInstanceProfileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateIamInstanceProfileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DisassociateIamInstanceProfileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDisassociateIamInstanceProfileWithContext(ctx context.Context, in *ec2.DisassociateIamInstanceProfileInput, _ ...request.Option) (*ec2.DisassociateIamInstanceProfileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateIamInstanceProfile cancelled", ctx.Err())
	default:
		return d.DisassociateIamInstanceProfile(in)
	}
}

func (d *EC2Double) DisassociateRouteTable(i0 *ec2.DisassociateRouteTableInput) (r0 *ec2.DisassociateRouteTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateRouteTable", i0)
	r0, _ = returns[0].(*ec2.DisassociateRouteTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DisassociateRouteTableRequest(i0 *ec2.DisassociateRouteTableInput) (r0 *request.Request, r1 *ec2.DisassociateRouteTableOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateRouteTableRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DisassociateRouteTableOutput)
	return
}

func (d *EC2Double) DisassociateRouteTableWithContext(i0 context.Context, i1 *ec2.DisassociateRouteTableInput, i2 ...request.Option) (r0 *ec2.DisassociateRouteTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateRouteTableWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DisassociateRouteTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDisassociateRouteTableWithContext(ctx context.Context, in *ec2.DisassociateRouteTableInput, _ ...request.Option) (*ec2.DisassociateRouteTableOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateRouteTable cancelled", ctx.Err())
	default:
		return d.DisassociateRouteTable(in)
	}
}

func (d *EC2Double) DisassociateSubnetCidrBlock(i0 *ec2.DisassociateSubnetCidrBlockInput) (r0 *ec2.DisassociateSubnetCidrBlockOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateSubnetCidrBlock", i0)
	r0, _ = returns[0].(*ec2.DisassociateSubnetCidrBlockOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DisassociateSubnetCidrBlockRequest(i0 *ec2.DisassociateSubnetCidrBlockInput) (r0 *request.Request, r1 *ec2.DisassociateSubnetCidrBlockOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateSubnetCidrBlockRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DisassociateSubnetCidrBlockOutput)
	return
}

func (d *EC2Double) DisassociateSubnetCidrBlockWithContext(i0 context.Context, i1 *ec2.DisassociateSubnetCidrBlockInput, i2 ...request.Option) (r0 *ec2.DisassociateSubnetCidrBlockOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateSubnetCidrBlockWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DisassociateSubnetCidrBlockOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDisassociateSubnetCidrBlockWithContext(ctx context.Context, in *ec2.DisassociateSubnetCidrBlockInput, _ ...request.Option) (*ec2.DisassociateSubnetCidrBlockOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateSubnetCidrBlock cancelled", ctx.Err())
	default:
		return d.DisassociateSubnetCidrBlock(in)
	}
}

func (d *EC2Double) DisassociateTransitGatewayMulticastDomain(i0 *ec2.DisassociateTransitGatewayMulticastDomainInput) (r0 *ec2.DisassociateTransitGatewayMulticastDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateTransitGatewayMulticastDomain", i0)
	r0, _ = returns[0].(*ec2.DisassociateTransitGatewayMulticastDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DisassociateTransitGatewayMulticastDomainRequest(i0 *ec2.DisassociateTransitGatewayMulticastDomainInput) (r0 *request.Request, r1 *ec2.DisassociateTransitGatewayMulticastDomainOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateTransitGatewayMulticastDomainRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DisassociateTransitGatewayMulticastDomainOutput)
	return
}

func (d *EC2Double) DisassociateTransitGatewayMulticastDomainWithContext(i0 context.Context, i1 *ec2.DisassociateTransitGatewayMulticastDomainInput, i2 ...request.Option) (r0 *ec2.DisassociateTransitGatewayMulticastDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateTransitGatewayMulticastDomainWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DisassociateTransitGatewayMulticastDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDisassociateTransitGatewayMulticastDomainWithContext(ctx context.Context, in *ec2.DisassociateTransitGatewayMulticastDomainInput, _ ...request.Option) (*ec2.DisassociateTransitGatewayMulticastDomainOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateTransitGatewayMulticastDomain cancelled", ctx.Err())
	default:
		return d.DisassociateTransitGatewayMulticastDomain(in)
	}
}

func (d *EC2Double) DisassociateTransitGatewayRouteTable(i0 *ec2.DisassociateTransitGatewayRouteTableInput) (r0 *ec2.DisassociateTransitGatewayRouteTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateTransitGatewayRouteTable", i0)
	r0, _ = returns[0].(*ec2.DisassociateTransitGatewayRouteTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DisassociateTransitGatewayRouteTableRequest(i0 *ec2.DisassociateTransitGatewayRouteTableInput) (r0 *request.Request, r1 *ec2.DisassociateTransitGatewayRouteTableOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateTransitGatewayRouteTableRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DisassociateTransitGatewayRouteTableOutput)
	return
}

func (d *EC2Double) DisassociateTransitGatewayRouteTableWithContext(i0 context.Context, i1 *ec2.DisassociateTransitGatewayRouteTableInput, i2 ...request.Option) (r0 *ec2.DisassociateTransitGatewayRouteTableOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateTransitGatewayRouteTableWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DisassociateTransitGatewayRouteTableOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDisassociateTransitGatewayRouteTableWithContext(ctx context.Context, in *ec2.DisassociateTransitGatewayRouteTableInput, _ ...request.Option) (*ec2.DisassociateTransitGatewayRouteTableOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateTransitGatewayRouteTable cancelled", ctx.Err())
	default:
		return d.DisassociateTransitGatewayRouteTable(in)
	}
}

func (d *EC2Double) DisassociateVpcCidrBlock(i0 *ec2.DisassociateVpcCidrBlockInput) (r0 *ec2.DisassociateVpcCidrBlockOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateVpcCidrBlock", i0)
	r0, _ = returns[0].(*ec2.DisassociateVpcCidrBlockOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) DisassociateVpcCidrBlockRequest(i0 *ec2.DisassociateVpcCidrBlockInput) (r0 *request.Request, r1 *ec2.DisassociateVpcCidrBlockOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateVpcCidrBlockRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.DisassociateVpcCidrBlockOutput)
	return
}

func (d *EC2Double) DisassociateVpcCidrBlockWithContext(i0 context.Context, i1 *ec2.DisassociateVpcCidrBlockInput, i2 ...request.Option) (r0 *ec2.DisassociateVpcCidrBlockOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateVpcCidrBlockWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.DisassociateVpcCidrBlockOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeDisassociateVpcCidrBlockWithContext(ctx context.Context, in *ec2.DisassociateVpcCidrBlockInput, _ ...request.Option) (*ec2.DisassociateVpcCidrBlockOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateVpcCidrBlock cancelled", ctx.Err())
	default:
		return d.DisassociateVpcCidrBlock(in)
	}
}

func (d *EC2Double) EnableEbsEncryptionByDefault(i0 *ec2.EnableEbsEncryptionByDefaultInput) (r0 *ec2.EnableEbsEncryptionByDefaultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableEbsEncryptionByDefault", i0)
	r0, _ = returns[0].(*ec2.EnableEbsEncryptionByDefaultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) EnableEbsEncryptionByDefaultRequest(i0 *ec2.EnableEbsEncryptionByDefaultInput) (r0 *request.Request, r1 *ec2.EnableEbsEncryptionByDefaultOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableEbsEncryptionByDefaultRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.EnableEbsEncryptionByDefaultOutput)
	return
}

func (d *EC2Double) EnableEbsEncryptionByDefaultWithContext(i0 context.Context, i1 *ec2.EnableEbsEncryptionByDefaultInput, i2 ...request.Option) (r0 *ec2.EnableEbsEncryptionByDefaultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableEbsEncryptionByDefaultWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.EnableEbsEncryptionByDefaultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeEnableEbsEncryptionByDefaultWithContext(ctx context.Context, in *ec2.EnableEbsEncryptionByDefaultInput, _ ...request.Option) (*ec2.EnableEbsEncryptionByDefaultOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "EnableEbsEncryptionByDefault cancelled", ctx.Err())
	default:
		return d.EnableEbsEncryptionByDefault(in)
	}
}

func (d *EC2Double) EnableFastSnapshotRestores(i0 *ec2.EnableFastSnapshotRestoresInput) (r0 *ec2.EnableFastSnapshotRestoresOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableFastSnapshotRestores", i0)
	r0, _ = returns[0].(*ec2.EnableFastSnapshotRestoresOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) EnableFastSnapshotRestoresRequest(i0 *ec2.EnableFastSnapshotRestoresInput) (r0 *request.Request, r1 *ec2.EnableFastSnapshotRestoresOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableFastSnapshotRestoresRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.EnableFastSnapshotRestoresOutput)
	return
}

func (d *EC2Double) EnableFastSnapshotRestoresWithContext(i0 context.Context, i1 *ec2.EnableFastSnapshotRestoresInput, i2 ...request.Option) (r0 *ec2.EnableFastSnapshotRestoresOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableFastSnapshotRestoresWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.EnableFastSnapshotRestoresOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeEnableFastSnapshotRestoresWithContext(ctx context.Context, in *ec2.EnableFastSnapshotRestoresInput, _ ...request.Option) (*ec2.EnableFastSnapshotRestoresOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "EnableFastSnapshotRestores cancelled", ctx.Err())
	default:
		return d.EnableFastSnapshotRestores(in)
	}
}

func (d *EC2Double) EnableTransitGatewayRouteTablePropagation(i0 *ec2.EnableTransitGatewayRouteTablePropagationInput) (r0 *ec2.EnableTransitGatewayRouteTablePropagationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableTransitGatewayRouteTablePropagation", i0)
	r0, _ = returns[0].(*ec2.EnableTransitGatewayRouteTablePropagationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) EnableTransitGatewayRouteTablePropagationRequest(i0 *ec2.EnableTransitGatewayRouteTablePropagationInput) (r0 *request.Request, r1 *ec2.EnableTransitGatewayRouteTablePropagationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableTransitGatewayRouteTablePropagationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.EnableTransitGatewayRouteTablePropagationOutput)
	return
}

func (d *EC2Double) EnableTransitGatewayRouteTablePropagationWithContext(i0 context.Context, i1 *ec2.EnableTransitGatewayRouteTablePropagationInput, i2 ...request.Option) (r0 *ec2.EnableTransitGatewayRouteTablePropagationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableTransitGatewayRouteTablePropagationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.EnableTransitGatewayRouteTablePropagationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeEnableTransitGatewayRouteTablePropagationWithContext(ctx context.Context, in *ec2.EnableTransitGatewayRouteTablePropagationInput, _ ...request.Option) (*ec2.EnableTransitGatewayRouteTablePropagationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "EnableTransitGatewayRouteTablePropagation cancelled", ctx.Err())
	default:
		return d.EnableTransitGatewayRouteTablePropagation(in)
	}
}

func (d *EC2Double) EnableVgwRoutePropagation(i0 *ec2.EnableVgwRoutePropagationInput) (r0 *ec2.EnableVgwRoutePropagationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableVgwRoutePropagation", i0)
	r0, _ = returns[0].(*ec2.EnableVgwRoutePropagationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) EnableVgwRoutePropagationRequest(i0 *ec2.EnableVgwRoutePropagationInput) (r0 *request.Request, r1 *ec2.EnableVgwRoutePropagationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableVgwRoutePropagationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.EnableVgwRoutePropagationOutput)
	return
}

func (d *EC2Double) EnableVgwRoutePropagationWithContext(i0 context.Context, i1 *ec2.EnableVgwRoutePropagationInput, i2 ...request.Option) (r0 *ec2.EnableVgwRoutePropagationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableVgwRoutePropagationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.EnableVgwRoutePropagationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeEnableVgwRoutePropagationWithContext(ctx context.Context, in *ec2.EnableVgwRoutePropagationInput, _ ...request.Option) (*ec2.EnableVgwRoutePropagationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "EnableVgwRoutePropagation cancelled", ctx.Err())
	default:
		return d.EnableVgwRoutePropagation(in)
	}
}

func (d *EC2Double) EnableVolumeIO(i0 *ec2.EnableVolumeIOInput) (r0 *ec2.EnableVolumeIOOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableVolumeIO", i0)
	r0, _ = returns[0].(*ec2.EnableVolumeIOOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) EnableVolumeIORequest(i0 *ec2.EnableVolumeIOInput) (r0 *request.Request, r1 *ec2.EnableVolumeIOOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableVolumeIORequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.EnableVolumeIOOutput)
	return
}

func (d *EC2Double) EnableVolumeIOWithContext(i0 context.Context, i1 *ec2.EnableVolumeIOInput, i2 ...request.Option) (r0 *ec2.EnableVolumeIOOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableVolumeIOWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.EnableVolumeIOOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeEnableVolumeIOWithContext(ctx context.Context, in *ec2.EnableVolumeIOInput, _ ...request.Option) (*ec2.EnableVolumeIOOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "EnableVolumeIO cancelled", ctx.Err())
	default:
		return d.EnableVolumeIO(in)
	}
}

func (d *EC2Double) EnableVpcClassicLink(i0 *ec2.EnableVpcClassicLinkInput) (r0 *ec2.EnableVpcClassicLinkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableVpcClassicLink", i0)
	r0, _ = returns[0].(*ec2.EnableVpcClassicLinkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) EnableVpcClassicLinkDnsSupport(i0 *ec2.EnableVpcClassicLinkDnsSupportInput) (r0 *ec2.EnableVpcClassicLinkDnsSupportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableVpcClassicLinkDnsSupport", i0)
	r0, _ = returns[0].(*ec2.EnableVpcClassicLinkDnsSupportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) EnableVpcClassicLinkDnsSupportRequest(i0 *ec2.EnableVpcClassicLinkDnsSupportInput) (r0 *request.Request, r1 *ec2.EnableVpcClassicLinkDnsSupportOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableVpcClassicLinkDnsSupportRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.EnableVpcClassicLinkDnsSupportOutput)
	return
}

func (d *EC2Double) EnableVpcClassicLinkDnsSupportWithContext(i0 context.Context, i1 *ec2.EnableVpcClassicLinkDnsSupportInput, i2 ...request.Option) (r0 *ec2.EnableVpcClassicLinkDnsSupportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableVpcClassicLinkDnsSupportWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.EnableVpcClassicLinkDnsSupportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeEnableVpcClassicLinkDnsSupportWithContext(ctx context.Context, in *ec2.EnableVpcClassicLinkDnsSupportInput, _ ...request.Option) (*ec2.EnableVpcClassicLinkDnsSupportOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "EnableVpcClassicLinkDnsSupport cancelled", ctx.Err())
	default:
		return d.EnableVpcClassicLinkDnsSupport(in)
	}
}

func (d *EC2Double) EnableVpcClassicLinkRequest(i0 *ec2.EnableVpcClassicLinkInput) (r0 *request.Request, r1 *ec2.EnableVpcClassicLinkOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableVpcClassicLinkRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.EnableVpcClassicLinkOutput)
	return
}

func (d *EC2Double) EnableVpcClassicLinkWithContext(i0 context.Context, i1 *ec2.EnableVpcClassicLinkInput, i2 ...request.Option) (r0 *ec2.EnableVpcClassicLinkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableVpcClassicLinkWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.EnableVpcClassicLinkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeEnableVpcClassicLinkWithContext(ctx context.Context, in *ec2.EnableVpcClassicLinkInput, _ ...request.Option) (*ec2.EnableVpcClassicLinkOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "EnableVpcClassicLink cancelled", ctx.Err())
	default:
		return d.EnableVpcClassicLink(in)
	}
}

func (d *EC2Double) ExportClientVpnClientCertificateRevocationList(i0 *ec2.ExportClientVpnClientCertificateRevocationListInput) (r0 *ec2.ExportClientVpnClientCertificateRevocationListOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExportClientVpnClientCertificateRevocationList", i0)
	r0, _ = returns[0].(*ec2.ExportClientVpnClientCertificateRevocationListOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ExportClientVpnClientCertificateRevocationListRequest(i0 *ec2.ExportClientVpnClientCertificateRevocationListInput) (r0 *request.Request, r1 *ec2.ExportClientVpnClientCertificateRevocationListOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExportClientVpnClientCertificateRevocationListRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ExportClientVpnClientCertificateRevocationListOutput)
	return
}

func (d *EC2Double) ExportClientVpnClientCertificateRevocationListWithContext(i0 context.Context, i1 *ec2.ExportClientVpnClientCertificateRevocationListInput, i2 ...request.Option) (r0 *ec2.ExportClientVpnClientCertificateRevocationListOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExportClientVpnClientCertificateRevocationListWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ExportClientVpnClientCertificateRevocationListOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeExportClientVpnClientCertificateRevocationListWithContext(ctx context.Context, in *ec2.ExportClientVpnClientCertificateRevocationListInput, _ ...request.Option) (*ec2.ExportClientVpnClientCertificateRevocationListOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ExportClientVpnClientCertificateRevocationList cancelled", ctx.Err())
	default:
		return d.ExportClientVpnClientCertificateRevocationList(in)
	}
}

func (d *EC2Double) ExportClientVpnClientConfiguration(i0 *ec2.ExportClientVpnClientConfigurationInput) (r0 *ec2.ExportClientVpnClientConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExportClientVpnClientConfiguration", i0)
	r0, _ = returns[0].(*ec2.ExportClientVpnClientConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ExportClientVpnClientConfigurationRequest(i0 *ec2.ExportClientVpnClientConfigurationInput) (r0 *request.Request, r1 *ec2.ExportClientVpnClientConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExportClientVpnClientConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ExportClientVpnClientConfigurationOutput)
	return
}

func (d *EC2Double) ExportClientVpnClientConfigurationWithContext(i0 context.Context, i1 *ec2.ExportClientVpnClientConfigurationInput, i2 ...request.Option) (r0 *ec2.ExportClientVpnClientConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExportClientVpnClientConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ExportClientVpnClientConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeExportClientVpnClientConfigurationWithContext(ctx context.Context, in *ec2.ExportClientVpnClientConfigurationInput, _ ...request.Option) (*ec2.ExportClientVpnClientConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ExportClientVpnClientConfiguration cancelled", ctx.Err())
	default:
		return d.ExportClientVpnClientConfiguration(in)
	}
}

func (d *EC2Double) ExportImage(i0 *ec2.ExportImageInput) (r0 *ec2.ExportImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExportImage", i0)
	r0, _ = returns[0].(*ec2.ExportImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ExportImageRequest(i0 *ec2.ExportImageInput) (r0 *request.Request, r1 *ec2.ExportImageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExportImageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ExportImageOutput)
	return
}

func (d *EC2Double) ExportImageWithContext(i0 context.Context, i1 *ec2.ExportImageInput, i2 ...request.Option) (r0 *ec2.ExportImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExportImageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ExportImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeExportImageWithContext(ctx context.Context, in *ec2.ExportImageInput, _ ...request.Option) (*ec2.ExportImageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ExportImage cancelled", ctx.Err())
	default:
		return d.ExportImage(in)
	}
}

func (d *EC2Double) ExportTransitGatewayRoutes(i0 *ec2.ExportTransitGatewayRoutesInput) (r0 *ec2.ExportTransitGatewayRoutesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExportTransitGatewayRoutes", i0)
	r0, _ = returns[0].(*ec2.ExportTransitGatewayRoutesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ExportTransitGatewayRoutesRequest(i0 *ec2.ExportTransitGatewayRoutesInput) (r0 *request.Request, r1 *ec2.ExportTransitGatewayRoutesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExportTransitGatewayRoutesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ExportTransitGatewayRoutesOutput)
	return
}

func (d *EC2Double) ExportTransitGatewayRoutesWithContext(i0 context.Context, i1 *ec2.ExportTransitGatewayRoutesInput, i2 ...request.Option) (r0 *ec2.ExportTransitGatewayRoutesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExportTransitGatewayRoutesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ExportTransitGatewayRoutesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeExportTransitGatewayRoutesWithContext(ctx context.Context, in *ec2.ExportTransitGatewayRoutesInput, _ ...request.Option) (*ec2.ExportTransitGatewayRoutesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ExportTransitGatewayRoutes cancelled", ctx.Err())
	default:
		return d.ExportTransitGatewayRoutes(in)
	}
}

func (d *EC2Double) GetAssociatedIpv6PoolCidrs(i0 *ec2.GetAssociatedIpv6PoolCidrsInput) (r0 *ec2.GetAssociatedIpv6PoolCidrsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAssociatedIpv6PoolCidrs", i0)
	r0, _ = returns[0].(*ec2.GetAssociatedIpv6PoolCidrsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) GetAssociatedIpv6PoolCidrsPages(i0 *ec2.GetAssociatedIpv6PoolCidrsInput, i1 func(*ec2.GetAssociatedIpv6PoolCidrsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAssociatedIpv6PoolCidrsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeGetAssociatedIpv6PoolCidrsPages(in *ec2.GetAssociatedIpv6PoolCidrsInput, pager func(*ec2.GetAssociatedIpv6PoolCidrsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetAssociatedIpv6PoolCidrs", paginators, in, pager)
}

func (d *EC2Double) GetAssociatedIpv6PoolCidrsPagesWithContext(i0 context.Context, i1 *ec2.GetAssociatedIpv6PoolCidrsInput, i2 func(*ec2.GetAssociatedIpv6PoolCidrsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAssociatedIpv6PoolCidrsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeGetAssociatedIpv6PoolCidrsPagesWithContext(ctx context.Context, in *ec2.GetAssociatedIpv6PoolCidrsInput, pager func(*ec2.GetAssociatedIpv6PoolCidrsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetAssociatedIpv6PoolCidrs", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) GetAssociatedIpv6PoolCidrsRequest(i0 *ec2.GetAssociatedIpv6PoolCidrsInput) (r0 *request.Request, r1 *ec2.GetAssociatedIpv6PoolCidrsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAssociatedIpv6PoolCidrsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.GetAssociatedIpv6PoolCidrsOutput)
	return
}

func (d *EC2Double) GetAssociatedIpv6PoolCidrsWithContext(i0 context.Context, i1 *ec2.GetAssociatedIpv6PoolCidrsInput, i2 ...request.Option) (r0 *ec2.GetAssociatedIpv6PoolCidrsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAssociatedIpv6PoolCidrsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.GetAssociatedIpv6PoolCidrsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeGetAssociatedIpv6PoolCidrsWithContext(ctx context.Context, in *ec2.GetAssociatedIpv6PoolCidrsInput, _ ...request.Option) (*ec2.GetAssociatedIpv6PoolCidrsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetAssociatedIpv6PoolCidrs cancelled", ctx.Err())
	default:
		return d.GetAssociatedIpv6PoolCidrs(in)
	}
}

func (d *EC2Double) GetCapacityReservationUsage(i0 *ec2.GetCapacityReservationUsageInput) (r0 *ec2.GetCapacityReservationUsageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCapacityReservationUsage", i0)
	r0, _ = returns[0].(*ec2.GetCapacityReservationUsageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) GetCapacityReservationUsageRequest(i0 *ec2.GetCapacityReservationUsageInput) (r0 *request.Request, r1 *ec2.GetCapacityReservationUsageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCapacityReservationUsageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.GetCapacityReservationUsageOutput)
	return
}

func (d *EC2Double) GetCapacityReservationUsageWithContext(i0 context.Context, i1 *ec2.GetCapacityReservationUsageInput, i2 ...request.Option) (r0 *ec2.GetCapacityReservationUsageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCapacityReservationUsageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.GetCapacityReservationUsageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeGetCapacityReservationUsageWithContext(ctx context.Context, in *ec2.GetCapacityReservationUsageInput, _ ...request.Option) (*ec2.GetCapacityReservationUsageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetCapacityReservationUsage cancelled", ctx.Err())
	default:
		return d.GetCapacityReservationUsage(in)
	}
}

func (d *EC2Double) GetCoipPoolUsage(i0 *ec2.GetCoipPoolUsageInput) (r0 *ec2.GetCoipPoolUsageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCoipPoolUsage", i0)
	r0, _ = returns[0].(*ec2.GetCoipPoolUsageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) GetCoipPoolUsageRequest(i0 *ec2.GetCoipPoolUsageInput) (r0 *request.Request, r1 *ec2.GetCoipPoolUsageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCoipPoolUsageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.GetCoipPoolUsageOutput)
	return
}

func (d *EC2Double) GetCoipPoolUsageWithContext(i0 context.Context, i1 *ec2.GetCoipPoolUsageInput, i2 ...request.Option) (r0 *ec2.GetCoipPoolUsageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCoipPoolUsageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.GetCoipPoolUsageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeGetCoipPoolUsageWithContext(ctx context.Context, in *ec2.GetCoipPoolUsageInput, _ ...request.Option) (*ec2.GetCoipPoolUsageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetCoipPoolUsage cancelled", ctx.Err())
	default:
		return d.GetCoipPoolUsage(in)
	}
}

func (d *EC2Double) GetConsoleOutput(i0 *ec2.GetConsoleOutputInput) (r0 *ec2.GetConsoleOutputOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConsoleOutput", i0)
	r0, _ = returns[0].(*ec2.GetConsoleOutputOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) GetConsoleOutputRequest(i0 *ec2.GetConsoleOutputInput) (r0 *request.Request, r1 *ec2.GetConsoleOutputOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConsoleOutputRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.GetConsoleOutputOutput)
	return
}

func (d *EC2Double) GetConsoleOutputWithContext(i0 context.Context, i1 *ec2.GetConsoleOutputInput, i2 ...request.Option) (r0 *ec2.GetConsoleOutputOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConsoleOutputWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.GetConsoleOutputOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeGetConsoleOutputWithContext(ctx context.Context, in *ec2.GetConsoleOutputInput, _ ...request.Option) (*ec2.GetConsoleOutputOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetConsoleOutput cancelled", ctx.Err())
	default:
		return d.GetConsoleOutput(in)
	}
}

func (d *EC2Double) GetConsoleScreenshot(i0 *ec2.GetConsoleScreenshotInput) (r0 *ec2.GetConsoleScreenshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConsoleScreenshot", i0)
	r0, _ = returns[0].(*ec2.GetConsoleScreenshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) GetConsoleScreenshotRequest(i0 *ec2.GetConsoleScreenshotInput) (r0 *request.Request, r1 *ec2.GetConsoleScreenshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConsoleScreenshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.GetConsoleScreenshotOutput)
	return
}

func (d *EC2Double) GetConsoleScreenshotWithContext(i0 context.Context, i1 *ec2.GetConsoleScreenshotInput, i2 ...request.Option) (r0 *ec2.GetConsoleScreenshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConsoleScreenshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.GetConsoleScreenshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeGetConsoleScreenshotWithContext(ctx context.Context, in *ec2.GetConsoleScreenshotInput, _ ...request.Option) (*ec2.GetConsoleScreenshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetConsoleScreenshot cancelled", ctx.Err())
	default:
		return d.GetConsoleScreenshot(in)
	}
}

func (d *EC2Double) GetDefaultCreditSpecification(i0 *ec2.GetDefaultCreditSpecificationInput) (r0 *ec2.GetDefaultCreditSpecificationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDefaultCreditSpecification", i0)
	r0, _ = returns[0].(*ec2.GetDefaultCreditSpecificationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) GetDefaultCreditSpecificationRequest(i0 *ec2.GetDefaultCreditSpecificationInput) (r0 *request.Request, r1 *ec2.GetDefaultCreditSpecificationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDefaultCreditSpecificationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.GetDefaultCreditSpecificationOutput)
	return
}

func (d *EC2Double) GetDefaultCreditSpecificationWithContext(i0 context.Context, i1 *ec2.GetDefaultCreditSpecificationInput, i2 ...request.Option) (r0 *ec2.GetDefaultCreditSpecificationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDefaultCreditSpecificationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.GetDefaultCreditSpecificationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeGetDefaultCreditSpecificationWithContext(ctx context.Context, in *ec2.GetDefaultCreditSpecificationInput, _ ...request.Option) (*ec2.GetDefaultCreditSpecificationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDefaultCreditSpecification cancelled", ctx.Err())
	default:
		return d.GetDefaultCreditSpecification(in)
	}
}

func (d *EC2Double) GetEbsDefaultKmsKeyId(i0 *ec2.GetEbsDefaultKmsKeyIdInput) (r0 *ec2.GetEbsDefaultKmsKeyIdOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetEbsDefaultKmsKeyId", i0)
	r0, _ = returns[0].(*ec2.GetEbsDefaultKmsKeyIdOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) GetEbsDefaultKmsKeyIdRequest(i0 *ec2.GetEbsDefaultKmsKeyIdInput) (r0 *request.Request, r1 *ec2.GetEbsDefaultKmsKeyIdOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetEbsDefaultKmsKeyIdRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.GetEbsDefaultKmsKeyIdOutput)
	return
}

func (d *EC2Double) GetEbsDefaultKmsKeyIdWithContext(i0 context.Context, i1 *ec2.GetEbsDefaultKmsKeyIdInput, i2 ...request.Option) (r0 *ec2.GetEbsDefaultKmsKeyIdOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetEbsDefaultKmsKeyIdWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.GetEbsDefaultKmsKeyIdOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeGetEbsDefaultKmsKeyIdWithContext(ctx context.Context, in *ec2.GetEbsDefaultKmsKeyIdInput, _ ...request.Option) (*ec2.GetEbsDefaultKmsKeyIdOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetEbsDefaultKmsKeyId cancelled", ctx.Err())
	default:
		return d.GetEbsDefaultKmsKeyId(in)
	}
}

func (d *EC2Double) GetEbsEncryptionByDefault(i0 *ec2.GetEbsEncryptionByDefaultInput) (r0 *ec2.GetEbsEncryptionByDefaultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetEbsEncryptionByDefault", i0)
	r0, _ = returns[0].(*ec2.GetEbsEncryptionByDefaultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) GetEbsEncryptionByDefaultRequest(i0 *ec2.GetEbsEncryptionByDefaultInput) (r0 *request.Request, r1 *ec2.GetEbsEncryptionByDefaultOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetEbsEncryptionByDefaultRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.GetEbsEncryptionByDefaultOutput)
	return
}

func (d *EC2Double) GetEbsEncryptionByDefaultWithContext(i0 context.Context, i1 *ec2.GetEbsEncryptionByDefaultInput, i2 ...request.Option) (r0 *ec2.GetEbsEncryptionByDefaultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetEbsEncryptionByDefaultWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.GetEbsEncryptionByDefaultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeGetEbsEncryptionByDefaultWithContext(ctx context.Context, in *ec2.GetEbsEncryptionByDefaultInput, _ ...request.Option) (*ec2.GetEbsEncryptionByDefaultOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetEbsEncryptionByDefault cancelled", ctx.Err())
	default:
		return d.GetEbsEncryptionByDefault(in)
	}
}

func (d *EC2Double) GetHostReservationPurchasePreview(i0 *ec2.GetHostReservationPurchasePreviewInput) (r0 *ec2.GetHostReservationPurchasePreviewOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetHostReservationPurchasePreview", i0)
	r0, _ = returns[0].(*ec2.GetHostReservationPurchasePreviewOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) GetHostReservationPurchasePreviewRequest(i0 *ec2.GetHostReservationPurchasePreviewInput) (r0 *request.Request, r1 *ec2.GetHostReservationPurchasePreviewOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetHostReservationPurchasePreviewRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.GetHostReservationPurchasePreviewOutput)
	return
}

func (d *EC2Double) GetHostReservationPurchasePreviewWithContext(i0 context.Context, i1 *ec2.GetHostReservationPurchasePreviewInput, i2 ...request.Option) (r0 *ec2.GetHostReservationPurchasePreviewOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetHostReservationPurchasePreviewWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.GetHostReservationPurchasePreviewOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeGetHostReservationPurchasePreviewWithContext(ctx context.Context, in *ec2.GetHostReservationPurchasePreviewInput, _ ...request.Option) (*ec2.GetHostReservationPurchasePreviewOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetHostReservationPurchasePreview cancelled", ctx.Err())
	default:
		return d.GetHostReservationPurchasePreview(in)
	}
}

func (d *EC2Double) GetLaunchTemplateData(i0 *ec2.GetLaunchTemplateDataInput) (r0 *ec2.GetLaunchTemplateDataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLaunchTemplateData", i0)
	r0, _ = returns[0].(*ec2.GetLaunchTemplateDataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) GetLaunchTemplateDataRequest(i0 *ec2.GetLaunchTemplateDataInput) (r0 *request.Request, r1 *ec2.GetLaunchTemplateDataOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLaunchTemplateDataRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.GetLaunchTemplateDataOutput)
	return
}

func (d *EC2Double) GetLaunchTemplateDataWithContext(i0 context.Context, i1 *ec2.GetLaunchTemplateDataInput, i2 ...request.Option) (r0 *ec2.GetLaunchTemplateDataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLaunchTemplateDataWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.GetLaunchTemplateDataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeGetLaunchTemplateDataWithContext(ctx context.Context, in *ec2.GetLaunchTemplateDataInput, _ ...request.Option) (*ec2.GetLaunchTemplateDataOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetLaunchTemplateData cancelled", ctx.Err())
	default:
		return d.GetLaunchTemplateData(in)
	}
}

func (d *EC2Double) GetPasswordData(i0 *ec2.GetPasswordDataInput) (r0 *ec2.GetPasswordDataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPasswordData", i0)
	r0, _ = returns[0].(*ec2.GetPasswordDataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) GetPasswordDataRequest(i0 *ec2.GetPasswordDataInput) (r0 *request.Request, r1 *ec2.GetPasswordDataOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPasswordDataRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.GetPasswordDataOutput)
	return
}

func (d *EC2Double) GetPasswordDataWithContext(i0 context.Context, i1 *ec2.GetPasswordDataInput, i2 ...request.Option) (r0 *ec2.GetPasswordDataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPasswordDataWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.GetPasswordDataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeGetPasswordDataWithContext(ctx context.Context, in *ec2.GetPasswordDataInput, _ ...request.Option) (*ec2.GetPasswordDataOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetPasswordData cancelled", ctx.Err())
	default:
		return d.GetPasswordData(in)
	}
}

func (d *EC2Double) GetReservedInstancesExchangeQuote(i0 *ec2.GetReservedInstancesExchangeQuoteInput) (r0 *ec2.GetReservedInstancesExchangeQuoteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetReservedInstancesExchangeQuote", i0)
	r0, _ = returns[0].(*ec2.GetReservedInstancesExchangeQuoteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) GetReservedInstancesExchangeQuoteRequest(i0 *ec2.GetReservedInstancesExchangeQuoteInput) (r0 *request.Request, r1 *ec2.GetReservedInstancesExchangeQuoteOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetReservedInstancesExchangeQuoteRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.GetReservedInstancesExchangeQuoteOutput)
	return
}

func (d *EC2Double) GetReservedInstancesExchangeQuoteWithContext(i0 context.Context, i1 *ec2.GetReservedInstancesExchangeQuoteInput, i2 ...request.Option) (r0 *ec2.GetReservedInstancesExchangeQuoteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetReservedInstancesExchangeQuoteWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.GetReservedInstancesExchangeQuoteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeGetReservedInstancesExchangeQuoteWithContext(ctx context.Context, in *ec2.GetReservedInstancesExchangeQuoteInput, _ ...request.Option) (*ec2.GetReservedInstancesExchangeQuoteOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetReservedInstancesExchangeQuote cancelled", ctx.Err())
	default:
		return d.GetReservedInstancesExchangeQuote(in)
	}
}

func (d *EC2Double) GetTransitGatewayAttachmentPropagations(i0 *ec2.GetTransitGatewayAttachmentPropagationsInput) (r0 *ec2.GetTransitGatewayAttachmentPropagationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTransitGatewayAttachmentPropagations", i0)
	r0, _ = returns[0].(*ec2.GetTransitGatewayAttachmentPropagationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) GetTransitGatewayAttachmentPropagationsPages(i0 *ec2.GetTransitGatewayAttachmentPropagationsInput, i1 func(*ec2.GetTransitGatewayAttachmentPropagationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTransitGatewayAttachmentPropagationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeGetTransitGatewayAttachmentPropagationsPages(in *ec2.GetTransitGatewayAttachmentPropagationsInput, pager func(*ec2.GetTransitGatewayAttachmentPropagationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetTransitGatewayAttachmentPropagations", paginators, in, pager)
}

func (d *EC2Double) GetTransitGatewayAttachmentPropagationsPagesWithContext(i0 context.Context, i1 *ec2.GetTransitGatewayAttachmentPropagationsInput, i2 func(*ec2.GetTransitGatewayAttachmentPropagationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTransitGatewayAttachmentPropagationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeGetTransitGatewayAttachmentPropagationsPagesWithContext(ctx context.Context, in *ec2.GetTransitGatewayAttachmentPropagationsInput, pager func(*ec2.GetTransitGatewayAttachmentPropagationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetTransitGatewayAttachmentPropagations", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) GetTransitGatewayAttachmentPropagationsRequest(i0 *ec2.GetTransitGatewayAttachmentPropagationsInput) (r0 *request.Request, r1 *ec2.GetTransitGatewayAttachmentPropagationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTransitGatewayAttachmentPropagationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.GetTransitGatewayAttachmentPropagationsOutput)
	return
}

func (d *EC2Double) GetTransitGatewayAttachmentPropagationsWithContext(i0 context.Context, i1 *ec2.GetTransitGatewayAttachmentPropagationsInput, i2 ...request.Option) (r0 *ec2.GetTransitGatewayAttachmentPropagationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTransitGatewayAttachmentPropagationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.GetTransitGatewayAttachmentPropagationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeGetTransitGatewayAttachmentPropagationsWithContext(ctx context.Context, in *ec2.GetTransitGatewayAttachmentPropagationsInput, _ ...request.Option) (*ec2.GetTransitGatewayAttachmentPropagationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetTransitGatewayAttachmentPropagations cancelled", ctx.Err())
	default:
		return d.GetTransitGatewayAttachmentPropagations(in)
	}
}

func (d *EC2Double) GetTransitGatewayMulticastDomainAssociations(i0 *ec2.GetTransitGatewayMulticastDomainAssociationsInput) (r0 *ec2.GetTransitGatewayMulticastDomainAssociationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTransitGatewayMulticastDomainAssociations", i0)
	r0, _ = returns[0].(*ec2.GetTransitGatewayMulticastDomainAssociationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) GetTransitGatewayMulticastDomainAssociationsRequest(i0 *ec2.GetTransitGatewayMulticastDomainAssociationsInput) (r0 *request.Request, r1 *ec2.GetTransitGatewayMulticastDomainAssociationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTransitGatewayMulticastDomainAssociationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.GetTransitGatewayMulticastDomainAssociationsOutput)
	return
}

func (d *EC2Double) GetTransitGatewayMulticastDomainAssociationsWithContext(i0 context.Context, i1 *ec2.GetTransitGatewayMulticastDomainAssociationsInput, i2 ...request.Option) (r0 *ec2.GetTransitGatewayMulticastDomainAssociationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTransitGatewayMulticastDomainAssociationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.GetTransitGatewayMulticastDomainAssociationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeGetTransitGatewayMulticastDomainAssociationsWithContext(ctx context.Context, in *ec2.GetTransitGatewayMulticastDomainAssociationsInput, _ ...request.Option) (*ec2.GetTransitGatewayMulticastDomainAssociationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetTransitGatewayMulticastDomainAssociations cancelled", ctx.Err())
	default:
		return d.GetTransitGatewayMulticastDomainAssociations(in)
	}
}

func (d *EC2Double) GetTransitGatewayRouteTableAssociations(i0 *ec2.GetTransitGatewayRouteTableAssociationsInput) (r0 *ec2.GetTransitGatewayRouteTableAssociationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTransitGatewayRouteTableAssociations", i0)
	r0, _ = returns[0].(*ec2.GetTransitGatewayRouteTableAssociationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) GetTransitGatewayRouteTableAssociationsPages(i0 *ec2.GetTransitGatewayRouteTableAssociationsInput, i1 func(*ec2.GetTransitGatewayRouteTableAssociationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTransitGatewayRouteTableAssociationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeGetTransitGatewayRouteTableAssociationsPages(in *ec2.GetTransitGatewayRouteTableAssociationsInput, pager func(*ec2.GetTransitGatewayRouteTableAssociationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetTransitGatewayRouteTableAssociations", paginators, in, pager)
}

func (d *EC2Double) GetTransitGatewayRouteTableAssociationsPagesWithContext(i0 context.Context, i1 *ec2.GetTransitGatewayRouteTableAssociationsInput, i2 func(*ec2.GetTransitGatewayRouteTableAssociationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTransitGatewayRouteTableAssociationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeGetTransitGatewayRouteTableAssociationsPagesWithContext(ctx context.Context, in *ec2.GetTransitGatewayRouteTableAssociationsInput, pager func(*ec2.GetTransitGatewayRouteTableAssociationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetTransitGatewayRouteTableAssociations", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) GetTransitGatewayRouteTableAssociationsRequest(i0 *ec2.GetTransitGatewayRouteTableAssociationsInput) (r0 *request.Request, r1 *ec2.GetTransitGatewayRouteTableAssociationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTransitGatewayRouteTableAssociationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.GetTransitGatewayRouteTableAssociationsOutput)
	return
}

func (d *EC2Double) GetTransitGatewayRouteTableAssociationsWithContext(i0 context.Context, i1 *ec2.GetTransitGatewayRouteTableAssociationsInput, i2 ...request.Option) (r0 *ec2.GetTransitGatewayRouteTableAssociationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTransitGatewayRouteTableAssociationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.GetTransitGatewayRouteTableAssociationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeGetTransitGatewayRouteTableAssociationsWithContext(ctx context.Context, in *ec2.GetTransitGatewayRouteTableAssociationsInput, _ ...request.Option) (*ec2.GetTransitGatewayRouteTableAssociationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetTransitGatewayRouteTableAssociations cancelled", ctx.Err())
	default:
		return d.GetTransitGatewayRouteTableAssociations(in)
	}
}

func (d *EC2Double) GetTransitGatewayRouteTablePropagations(i0 *ec2.GetTransitGatewayRouteTablePropagationsInput) (r0 *ec2.GetTransitGatewayRouteTablePropagationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTransitGatewayRouteTablePropagations", i0)
	r0, _ = returns[0].(*ec2.GetTransitGatewayRouteTablePropagationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) GetTransitGatewayRouteTablePropagationsPages(i0 *ec2.GetTransitGatewayRouteTablePropagationsInput, i1 func(*ec2.GetTransitGatewayRouteTablePropagationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTransitGatewayRouteTablePropagationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeGetTransitGatewayRouteTablePropagationsPages(in *ec2.GetTransitGatewayRouteTablePropagationsInput, pager func(*ec2.GetTransitGatewayRouteTablePropagationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetTransitGatewayRouteTablePropagations", paginators, in, pager)
}

func (d *EC2Double) GetTransitGatewayRouteTablePropagationsPagesWithContext(i0 context.Context, i1 *ec2.GetTransitGatewayRouteTablePropagationsInput, i2 func(*ec2.GetTransitGatewayRouteTablePropagationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTransitGatewayRouteTablePropagationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeGetTransitGatewayRouteTablePropagationsPagesWithContext(ctx context.Context, in *ec2.GetTransitGatewayRouteTablePropagationsInput, pager func(*ec2.GetTransitGatewayRouteTablePropagationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetTransitGatewayRouteTablePropagations", paginators, ctx, in, pager, options...)
}

func (d *EC2Double) GetTransitGatewayRouteTablePropagationsRequest(i0 *ec2.GetTransitGatewayRouteTablePropagationsInput) (r0 *request.Request, r1 *ec2.GetTransitGatewayRouteTablePropagationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTransitGatewayRouteTablePropagationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.GetTransitGatewayRouteTablePropagationsOutput)
	return
}

func (d *EC2Double) GetTransitGatewayRouteTablePropagationsWithContext(i0 context.Context, i1 *ec2.GetTransitGatewayRouteTablePropagationsInput, i2 ...request.Option) (r0 *ec2.GetTransitGatewayRouteTablePropagationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTransitGatewayRouteTablePropagationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.GetTransitGatewayRouteTablePropagationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeGetTransitGatewayRouteTablePropagationsWithContext(ctx context.Context, in *ec2.GetTransitGatewayRouteTablePropagationsInput, _ ...request.Option) (*ec2.GetTransitGatewayRouteTablePropagationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetTransitGatewayRouteTablePropagations cancelled", ctx.Err())
	default:
		return d.GetTransitGatewayRouteTablePropagations(in)
	}
}

func (d *EC2Double) ImportClientVpnClientCertificateRevocationList(i0 *ec2.ImportClientVpnClientCertificateRevocationListInput) (r0 *ec2.ImportClientVpnClientCertificateRevocationListOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportClientVpnClientCertificateRevocationList", i0)
	r0, _ = returns[0].(*ec2.ImportClientVpnClientCertificateRevocationListOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ImportClientVpnClientCertificateRevocationListRequest(i0 *ec2.ImportClientVpnClientCertificateRevocationListInput) (r0 *request.Request, r1 *ec2.ImportClientVpnClientCertificateRevocationListOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportClientVpnClientCertificateRevocationListRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ImportClientVpnClientCertificateRevocationListOutput)
	return
}

func (d *EC2Double) ImportClientVpnClientCertificateRevocationListWithContext(i0 context.Context, i1 *ec2.ImportClientVpnClientCertificateRevocationListInput, i2 ...request.Option) (r0 *ec2.ImportClientVpnClientCertificateRevocationListOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportClientVpnClientCertificateRevocationListWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ImportClientVpnClientCertificateRevocationListOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeImportClientVpnClientCertificateRevocationListWithContext(ctx context.Context, in *ec2.ImportClientVpnClientCertificateRevocationListInput, _ ...request.Option) (*ec2.ImportClientVpnClientCertificateRevocationListOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ImportClientVpnClientCertificateRevocationList cancelled", ctx.Err())
	default:
		return d.ImportClientVpnClientCertificateRevocationList(in)
	}
}

func (d *EC2Double) ImportImage(i0 *ec2.ImportImageInput) (r0 *ec2.ImportImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportImage", i0)
	r0, _ = returns[0].(*ec2.ImportImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ImportImageRequest(i0 *ec2.ImportImageInput) (r0 *request.Request, r1 *ec2.ImportImageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportImageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ImportImageOutput)
	return
}

func (d *EC2Double) ImportImageWithContext(i0 context.Context, i1 *ec2.ImportImageInput, i2 ...request.Option) (r0 *ec2.ImportImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportImageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ImportImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeImportImageWithContext(ctx context.Context, in *ec2.ImportImageInput, _ ...request.Option) (*ec2.ImportImageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ImportImage cancelled", ctx.Err())
	default:
		return d.ImportImage(in)
	}
}

func (d *EC2Double) ImportInstance(i0 *ec2.ImportInstanceInput) (r0 *ec2.ImportInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportInstance", i0)
	r0, _ = returns[0].(*ec2.ImportInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ImportInstanceRequest(i0 *ec2.ImportInstanceInput) (r0 *request.Request, r1 *ec2.ImportInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ImportInstanceOutput)
	return
}

func (d *EC2Double) ImportInstanceWithContext(i0 context.Context, i1 *ec2.ImportInstanceInput, i2 ...request.Option) (r0 *ec2.ImportInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ImportInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeImportInstanceWithContext(ctx context.Context, in *ec2.ImportInstanceInput, _ ...request.Option) (*ec2.ImportInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ImportInstance cancelled", ctx.Err())
	default:
		return d.ImportInstance(in)
	}
}

func (d *EC2Double) ImportKeyPair(i0 *ec2.ImportKeyPairInput) (r0 *ec2.ImportKeyPairOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportKeyPair", i0)
	r0, _ = returns[0].(*ec2.ImportKeyPairOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ImportKeyPairRequest(i0 *ec2.ImportKeyPairInput) (r0 *request.Request, r1 *ec2.ImportKeyPairOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportKeyPairRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ImportKeyPairOutput)
	return
}

func (d *EC2Double) ImportKeyPairWithContext(i0 context.Context, i1 *ec2.ImportKeyPairInput, i2 ...request.Option) (r0 *ec2.ImportKeyPairOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportKeyPairWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ImportKeyPairOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeImportKeyPairWithContext(ctx context.Context, in *ec2.ImportKeyPairInput, _ ...request.Option) (*ec2.ImportKeyPairOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ImportKeyPair cancelled", ctx.Err())
	default:
		return d.ImportKeyPair(in)
	}
}

func (d *EC2Double) ImportSnapshot(i0 *ec2.ImportSnapshotInput) (r0 *ec2.ImportSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportSnapshot", i0)
	r0, _ = returns[0].(*ec2.ImportSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ImportSnapshotRequest(i0 *ec2.ImportSnapshotInput) (r0 *request.Request, r1 *ec2.ImportSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ImportSnapshotOutput)
	return
}

func (d *EC2Double) ImportSnapshotWithContext(i0 context.Context, i1 *ec2.ImportSnapshotInput, i2 ...request.Option) (r0 *ec2.ImportSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ImportSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeImportSnapshotWithContext(ctx context.Context, in *ec2.ImportSnapshotInput, _ ...request.Option) (*ec2.ImportSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ImportSnapshot cancelled", ctx.Err())
	default:
		return d.ImportSnapshot(in)
	}
}

func (d *EC2Double) ImportVolume(i0 *ec2.ImportVolumeInput) (r0 *ec2.ImportVolumeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportVolume", i0)
	r0, _ = returns[0].(*ec2.ImportVolumeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ImportVolumeRequest(i0 *ec2.ImportVolumeInput) (r0 *request.Request, r1 *ec2.ImportVolumeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportVolumeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ImportVolumeOutput)
	return
}

func (d *EC2Double) ImportVolumeWithContext(i0 context.Context, i1 *ec2.ImportVolumeInput, i2 ...request.Option) (r0 *ec2.ImportVolumeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportVolumeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ImportVolumeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeImportVolumeWithContext(ctx context.Context, in *ec2.ImportVolumeInput, _ ...request.Option) (*ec2.ImportVolumeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ImportVolume cancelled", ctx.Err())
	default:
		return d.ImportVolume(in)
	}
}

func (d *EC2Double) ModifyCapacityReservation(i0 *ec2.ModifyCapacityReservationInput) (r0 *ec2.ModifyCapacityReservationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyCapacityReservation", i0)
	r0, _ = returns[0].(*ec2.ModifyCapacityReservationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifyCapacityReservationRequest(i0 *ec2.ModifyCapacityReservationInput) (r0 *request.Request, r1 *ec2.ModifyCapacityReservationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyCapacityReservationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifyCapacityReservationOutput)
	return
}

func (d *EC2Double) ModifyCapacityReservationWithContext(i0 context.Context, i1 *ec2.ModifyCapacityReservationInput, i2 ...request.Option) (r0 *ec2.ModifyCapacityReservationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyCapacityReservationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifyCapacityReservationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifyCapacityReservationWithContext(ctx context.Context, in *ec2.ModifyCapacityReservationInput, _ ...request.Option) (*ec2.ModifyCapacityReservationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyCapacityReservation cancelled", ctx.Err())
	default:
		return d.ModifyCapacityReservation(in)
	}
}

func (d *EC2Double) ModifyClientVpnEndpoint(i0 *ec2.ModifyClientVpnEndpointInput) (r0 *ec2.ModifyClientVpnEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyClientVpnEndpoint", i0)
	r0, _ = returns[0].(*ec2.ModifyClientVpnEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifyClientVpnEndpointRequest(i0 *ec2.ModifyClientVpnEndpointInput) (r0 *request.Request, r1 *ec2.ModifyClientVpnEndpointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyClientVpnEndpointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifyClientVpnEndpointOutput)
	return
}

func (d *EC2Double) ModifyClientVpnEndpointWithContext(i0 context.Context, i1 *ec2.ModifyClientVpnEndpointInput, i2 ...request.Option) (r0 *ec2.ModifyClientVpnEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyClientVpnEndpointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifyClientVpnEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifyClientVpnEndpointWithContext(ctx context.Context, in *ec2.ModifyClientVpnEndpointInput, _ ...request.Option) (*ec2.ModifyClientVpnEndpointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyClientVpnEndpoint cancelled", ctx.Err())
	default:
		return d.ModifyClientVpnEndpoint(in)
	}
}

func (d *EC2Double) ModifyDefaultCreditSpecification(i0 *ec2.ModifyDefaultCreditSpecificationInput) (r0 *ec2.ModifyDefaultCreditSpecificationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDefaultCreditSpecification", i0)
	r0, _ = returns[0].(*ec2.ModifyDefaultCreditSpecificationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifyDefaultCreditSpecificationRequest(i0 *ec2.ModifyDefaultCreditSpecificationInput) (r0 *request.Request, r1 *ec2.ModifyDefaultCreditSpecificationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDefaultCreditSpecificationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifyDefaultCreditSpecificationOutput)
	return
}

func (d *EC2Double) ModifyDefaultCreditSpecificationWithContext(i0 context.Context, i1 *ec2.ModifyDefaultCreditSpecificationInput, i2 ...request.Option) (r0 *ec2.ModifyDefaultCreditSpecificationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDefaultCreditSpecificationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifyDefaultCreditSpecificationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifyDefaultCreditSpecificationWithContext(ctx context.Context, in *ec2.ModifyDefaultCreditSpecificationInput, _ ...request.Option) (*ec2.ModifyDefaultCreditSpecificationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyDefaultCreditSpecification cancelled", ctx.Err())
	default:
		return d.ModifyDefaultCreditSpecification(in)
	}
}

func (d *EC2Double) ModifyEbsDefaultKmsKeyId(i0 *ec2.ModifyEbsDefaultKmsKeyIdInput) (r0 *ec2.ModifyEbsDefaultKmsKeyIdOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyEbsDefaultKmsKeyId", i0)
	r0, _ = returns[0].(*ec2.ModifyEbsDefaultKmsKeyIdOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifyEbsDefaultKmsKeyIdRequest(i0 *ec2.ModifyEbsDefaultKmsKeyIdInput) (r0 *request.Request, r1 *ec2.ModifyEbsDefaultKmsKeyIdOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyEbsDefaultKmsKeyIdRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifyEbsDefaultKmsKeyIdOutput)
	return
}

func (d *EC2Double) ModifyEbsDefaultKmsKeyIdWithContext(i0 context.Context, i1 *ec2.ModifyEbsDefaultKmsKeyIdInput, i2 ...request.Option) (r0 *ec2.ModifyEbsDefaultKmsKeyIdOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyEbsDefaultKmsKeyIdWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifyEbsDefaultKmsKeyIdOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifyEbsDefaultKmsKeyIdWithContext(ctx context.Context, in *ec2.ModifyEbsDefaultKmsKeyIdInput, _ ...request.Option) (*ec2.ModifyEbsDefaultKmsKeyIdOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyEbsDefaultKmsKeyId cancelled", ctx.Err())
	default:
		return d.ModifyEbsDefaultKmsKeyId(in)
	}
}

func (d *EC2Double) ModifyFleet(i0 *ec2.ModifyFleetInput) (r0 *ec2.ModifyFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyFleet", i0)
	r0, _ = returns[0].(*ec2.ModifyFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifyFleetRequest(i0 *ec2.ModifyFleetInput) (r0 *request.Request, r1 *ec2.ModifyFleetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyFleetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifyFleetOutput)
	return
}

func (d *EC2Double) ModifyFleetWithContext(i0 context.Context, i1 *ec2.ModifyFleetInput, i2 ...request.Option) (r0 *ec2.ModifyFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyFleetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifyFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifyFleetWithContext(ctx context.Context, in *ec2.ModifyFleetInput, _ ...request.Option) (*ec2.ModifyFleetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyFleet cancelled", ctx.Err())
	default:
		return d.ModifyFleet(in)
	}
}

func (d *EC2Double) ModifyFpgaImageAttribute(i0 *ec2.ModifyFpgaImageAttributeInput) (r0 *ec2.ModifyFpgaImageAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyFpgaImageAttribute", i0)
	r0, _ = returns[0].(*ec2.ModifyFpgaImageAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifyFpgaImageAttributeRequest(i0 *ec2.ModifyFpgaImageAttributeInput) (r0 *request.Request, r1 *ec2.ModifyFpgaImageAttributeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyFpgaImageAttributeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifyFpgaImageAttributeOutput)
	return
}

func (d *EC2Double) ModifyFpgaImageAttributeWithContext(i0 context.Context, i1 *ec2.ModifyFpgaImageAttributeInput, i2 ...request.Option) (r0 *ec2.ModifyFpgaImageAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyFpgaImageAttributeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifyFpgaImageAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifyFpgaImageAttributeWithContext(ctx context.Context, in *ec2.ModifyFpgaImageAttributeInput, _ ...request.Option) (*ec2.ModifyFpgaImageAttributeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyFpgaImageAttribute cancelled", ctx.Err())
	default:
		return d.ModifyFpgaImageAttribute(in)
	}
}

func (d *EC2Double) ModifyHosts(i0 *ec2.ModifyHostsInput) (r0 *ec2.ModifyHostsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyHosts", i0)
	r0, _ = returns[0].(*ec2.ModifyHostsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifyHostsRequest(i0 *ec2.ModifyHostsInput) (r0 *request.Request, r1 *ec2.ModifyHostsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyHostsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifyHostsOutput)
	return
}

func (d *EC2Double) ModifyHostsWithContext(i0 context.Context, i1 *ec2.ModifyHostsInput, i2 ...request.Option) (r0 *ec2.ModifyHostsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyHostsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifyHostsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifyHostsWithContext(ctx context.Context, in *ec2.ModifyHostsInput, _ ...request.Option) (*ec2.ModifyHostsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyHosts cancelled", ctx.Err())
	default:
		return d.ModifyHosts(in)
	}
}

func (d *EC2Double) ModifyIdFormat(i0 *ec2.ModifyIdFormatInput) (r0 *ec2.ModifyIdFormatOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyIdFormat", i0)
	r0, _ = returns[0].(*ec2.ModifyIdFormatOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifyIdFormatRequest(i0 *ec2.ModifyIdFormatInput) (r0 *request.Request, r1 *ec2.ModifyIdFormatOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyIdFormatRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifyIdFormatOutput)
	return
}

func (d *EC2Double) ModifyIdFormatWithContext(i0 context.Context, i1 *ec2.ModifyIdFormatInput, i2 ...request.Option) (r0 *ec2.ModifyIdFormatOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyIdFormatWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifyIdFormatOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifyIdFormatWithContext(ctx context.Context, in *ec2.ModifyIdFormatInput, _ ...request.Option) (*ec2.ModifyIdFormatOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyIdFormat cancelled", ctx.Err())
	default:
		return d.ModifyIdFormat(in)
	}
}

func (d *EC2Double) ModifyIdentityIdFormat(i0 *ec2.ModifyIdentityIdFormatInput) (r0 *ec2.ModifyIdentityIdFormatOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyIdentityIdFormat", i0)
	r0, _ = returns[0].(*ec2.ModifyIdentityIdFormatOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifyIdentityIdFormatRequest(i0 *ec2.ModifyIdentityIdFormatInput) (r0 *request.Request, r1 *ec2.ModifyIdentityIdFormatOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyIdentityIdFormatRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifyIdentityIdFormatOutput)
	return
}

func (d *EC2Double) ModifyIdentityIdFormatWithContext(i0 context.Context, i1 *ec2.ModifyIdentityIdFormatInput, i2 ...request.Option) (r0 *ec2.ModifyIdentityIdFormatOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyIdentityIdFormatWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifyIdentityIdFormatOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifyIdentityIdFormatWithContext(ctx context.Context, in *ec2.ModifyIdentityIdFormatInput, _ ...request.Option) (*ec2.ModifyIdentityIdFormatOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyIdentityIdFormat cancelled", ctx.Err())
	default:
		return d.ModifyIdentityIdFormat(in)
	}
}

func (d *EC2Double) ModifyImageAttribute(i0 *ec2.ModifyImageAttributeInput) (r0 *ec2.ModifyImageAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyImageAttribute", i0)
	r0, _ = returns[0].(*ec2.ModifyImageAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifyImageAttributeRequest(i0 *ec2.ModifyImageAttributeInput) (r0 *request.Request, r1 *ec2.ModifyImageAttributeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyImageAttributeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifyImageAttributeOutput)
	return
}

func (d *EC2Double) ModifyImageAttributeWithContext(i0 context.Context, i1 *ec2.ModifyImageAttributeInput, i2 ...request.Option) (r0 *ec2.ModifyImageAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyImageAttributeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifyImageAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifyImageAttributeWithContext(ctx context.Context, in *ec2.ModifyImageAttributeInput, _ ...request.Option) (*ec2.ModifyImageAttributeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyImageAttribute cancelled", ctx.Err())
	default:
		return d.ModifyImageAttribute(in)
	}
}

func (d *EC2Double) ModifyInstanceAttribute(i0 *ec2.ModifyInstanceAttributeInput) (r0 *ec2.ModifyInstanceAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyInstanceAttribute", i0)
	r0, _ = returns[0].(*ec2.ModifyInstanceAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifyInstanceAttributeRequest(i0 *ec2.ModifyInstanceAttributeInput) (r0 *request.Request, r1 *ec2.ModifyInstanceAttributeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyInstanceAttributeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifyInstanceAttributeOutput)
	return
}

func (d *EC2Double) ModifyInstanceAttributeWithContext(i0 context.Context, i1 *ec2.ModifyInstanceAttributeInput, i2 ...request.Option) (r0 *ec2.ModifyInstanceAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyInstanceAttributeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifyInstanceAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifyInstanceAttributeWithContext(ctx context.Context, in *ec2.ModifyInstanceAttributeInput, _ ...request.Option) (*ec2.ModifyInstanceAttributeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyInstanceAttribute cancelled", ctx.Err())
	default:
		return d.ModifyInstanceAttribute(in)
	}
}

func (d *EC2Double) ModifyInstanceCapacityReservationAttributes(i0 *ec2.ModifyInstanceCapacityReservationAttributesInput) (r0 *ec2.ModifyInstanceCapacityReservationAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyInstanceCapacityReservationAttributes", i0)
	r0, _ = returns[0].(*ec2.ModifyInstanceCapacityReservationAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifyInstanceCapacityReservationAttributesRequest(i0 *ec2.ModifyInstanceCapacityReservationAttributesInput) (r0 *request.Request, r1 *ec2.ModifyInstanceCapacityReservationAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyInstanceCapacityReservationAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifyInstanceCapacityReservationAttributesOutput)
	return
}

func (d *EC2Double) ModifyInstanceCapacityReservationAttributesWithContext(i0 context.Context, i1 *ec2.ModifyInstanceCapacityReservationAttributesInput, i2 ...request.Option) (r0 *ec2.ModifyInstanceCapacityReservationAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyInstanceCapacityReservationAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifyInstanceCapacityReservationAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifyInstanceCapacityReservationAttributesWithContext(ctx context.Context, in *ec2.ModifyInstanceCapacityReservationAttributesInput, _ ...request.Option) (*ec2.ModifyInstanceCapacityReservationAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyInstanceCapacityReservationAttributes cancelled", ctx.Err())
	default:
		return d.ModifyInstanceCapacityReservationAttributes(in)
	}
}

func (d *EC2Double) ModifyInstanceCreditSpecification(i0 *ec2.ModifyInstanceCreditSpecificationInput) (r0 *ec2.ModifyInstanceCreditSpecificationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyInstanceCreditSpecification", i0)
	r0, _ = returns[0].(*ec2.ModifyInstanceCreditSpecificationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifyInstanceCreditSpecificationRequest(i0 *ec2.ModifyInstanceCreditSpecificationInput) (r0 *request.Request, r1 *ec2.ModifyInstanceCreditSpecificationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyInstanceCreditSpecificationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifyInstanceCreditSpecificationOutput)
	return
}

func (d *EC2Double) ModifyInstanceCreditSpecificationWithContext(i0 context.Context, i1 *ec2.ModifyInstanceCreditSpecificationInput, i2 ...request.Option) (r0 *ec2.ModifyInstanceCreditSpecificationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyInstanceCreditSpecificationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifyInstanceCreditSpecificationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifyInstanceCreditSpecificationWithContext(ctx context.Context, in *ec2.ModifyInstanceCreditSpecificationInput, _ ...request.Option) (*ec2.ModifyInstanceCreditSpecificationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyInstanceCreditSpecification cancelled", ctx.Err())
	default:
		return d.ModifyInstanceCreditSpecification(in)
	}
}

func (d *EC2Double) ModifyInstanceEventStartTime(i0 *ec2.ModifyInstanceEventStartTimeInput) (r0 *ec2.ModifyInstanceEventStartTimeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyInstanceEventStartTime", i0)
	r0, _ = returns[0].(*ec2.ModifyInstanceEventStartTimeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifyInstanceEventStartTimeRequest(i0 *ec2.ModifyInstanceEventStartTimeInput) (r0 *request.Request, r1 *ec2.ModifyInstanceEventStartTimeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyInstanceEventStartTimeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifyInstanceEventStartTimeOutput)
	return
}

func (d *EC2Double) ModifyInstanceEventStartTimeWithContext(i0 context.Context, i1 *ec2.ModifyInstanceEventStartTimeInput, i2 ...request.Option) (r0 *ec2.ModifyInstanceEventStartTimeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyInstanceEventStartTimeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifyInstanceEventStartTimeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifyInstanceEventStartTimeWithContext(ctx context.Context, in *ec2.ModifyInstanceEventStartTimeInput, _ ...request.Option) (*ec2.ModifyInstanceEventStartTimeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyInstanceEventStartTime cancelled", ctx.Err())
	default:
		return d.ModifyInstanceEventStartTime(in)
	}
}

func (d *EC2Double) ModifyInstanceMetadataOptions(i0 *ec2.ModifyInstanceMetadataOptionsInput) (r0 *ec2.ModifyInstanceMetadataOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyInstanceMetadataOptions", i0)
	r0, _ = returns[0].(*ec2.ModifyInstanceMetadataOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifyInstanceMetadataOptionsRequest(i0 *ec2.ModifyInstanceMetadataOptionsInput) (r0 *request.Request, r1 *ec2.ModifyInstanceMetadataOptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyInstanceMetadataOptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifyInstanceMetadataOptionsOutput)
	return
}

func (d *EC2Double) ModifyInstanceMetadataOptionsWithContext(i0 context.Context, i1 *ec2.ModifyInstanceMetadataOptionsInput, i2 ...request.Option) (r0 *ec2.ModifyInstanceMetadataOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyInstanceMetadataOptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifyInstanceMetadataOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifyInstanceMetadataOptionsWithContext(ctx context.Context, in *ec2.ModifyInstanceMetadataOptionsInput, _ ...request.Option) (*ec2.ModifyInstanceMetadataOptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyInstanceMetadataOptions cancelled", ctx.Err())
	default:
		return d.ModifyInstanceMetadataOptions(in)
	}
}

func (d *EC2Double) ModifyInstancePlacement(i0 *ec2.ModifyInstancePlacementInput) (r0 *ec2.ModifyInstancePlacementOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyInstancePlacement", i0)
	r0, _ = returns[0].(*ec2.ModifyInstancePlacementOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifyInstancePlacementRequest(i0 *ec2.ModifyInstancePlacementInput) (r0 *request.Request, r1 *ec2.ModifyInstancePlacementOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyInstancePlacementRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifyInstancePlacementOutput)
	return
}

func (d *EC2Double) ModifyInstancePlacementWithContext(i0 context.Context, i1 *ec2.ModifyInstancePlacementInput, i2 ...request.Option) (r0 *ec2.ModifyInstancePlacementOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyInstancePlacementWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifyInstancePlacementOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifyInstancePlacementWithContext(ctx context.Context, in *ec2.ModifyInstancePlacementInput, _ ...request.Option) (*ec2.ModifyInstancePlacementOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyInstancePlacement cancelled", ctx.Err())
	default:
		return d.ModifyInstancePlacement(in)
	}
}

func (d *EC2Double) ModifyLaunchTemplate(i0 *ec2.ModifyLaunchTemplateInput) (r0 *ec2.ModifyLaunchTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyLaunchTemplate", i0)
	r0, _ = returns[0].(*ec2.ModifyLaunchTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifyLaunchTemplateRequest(i0 *ec2.ModifyLaunchTemplateInput) (r0 *request.Request, r1 *ec2.ModifyLaunchTemplateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyLaunchTemplateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifyLaunchTemplateOutput)
	return
}

func (d *EC2Double) ModifyLaunchTemplateWithContext(i0 context.Context, i1 *ec2.ModifyLaunchTemplateInput, i2 ...request.Option) (r0 *ec2.ModifyLaunchTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyLaunchTemplateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifyLaunchTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifyLaunchTemplateWithContext(ctx context.Context, in *ec2.ModifyLaunchTemplateInput, _ ...request.Option) (*ec2.ModifyLaunchTemplateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyLaunchTemplate cancelled", ctx.Err())
	default:
		return d.ModifyLaunchTemplate(in)
	}
}

func (d *EC2Double) ModifyNetworkInterfaceAttribute(i0 *ec2.ModifyNetworkInterfaceAttributeInput) (r0 *ec2.ModifyNetworkInterfaceAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyNetworkInterfaceAttribute", i0)
	r0, _ = returns[0].(*ec2.ModifyNetworkInterfaceAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifyNetworkInterfaceAttributeRequest(i0 *ec2.ModifyNetworkInterfaceAttributeInput) (r0 *request.Request, r1 *ec2.ModifyNetworkInterfaceAttributeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyNetworkInterfaceAttributeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifyNetworkInterfaceAttributeOutput)
	return
}

func (d *EC2Double) ModifyNetworkInterfaceAttributeWithContext(i0 context.Context, i1 *ec2.ModifyNetworkInterfaceAttributeInput, i2 ...request.Option) (r0 *ec2.ModifyNetworkInterfaceAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyNetworkInterfaceAttributeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifyNetworkInterfaceAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifyNetworkInterfaceAttributeWithContext(ctx context.Context, in *ec2.ModifyNetworkInterfaceAttributeInput, _ ...request.Option) (*ec2.ModifyNetworkInterfaceAttributeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyNetworkInterfaceAttribute cancelled", ctx.Err())
	default:
		return d.ModifyNetworkInterfaceAttribute(in)
	}
}

func (d *EC2Double) ModifyReservedInstances(i0 *ec2.ModifyReservedInstancesInput) (r0 *ec2.ModifyReservedInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyReservedInstances", i0)
	r0, _ = returns[0].(*ec2.ModifyReservedInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifyReservedInstancesRequest(i0 *ec2.ModifyReservedInstancesInput) (r0 *request.Request, r1 *ec2.ModifyReservedInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyReservedInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifyReservedInstancesOutput)
	return
}

func (d *EC2Double) ModifyReservedInstancesWithContext(i0 context.Context, i1 *ec2.ModifyReservedInstancesInput, i2 ...request.Option) (r0 *ec2.ModifyReservedInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyReservedInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifyReservedInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifyReservedInstancesWithContext(ctx context.Context, in *ec2.ModifyReservedInstancesInput, _ ...request.Option) (*ec2.ModifyReservedInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyReservedInstances cancelled", ctx.Err())
	default:
		return d.ModifyReservedInstances(in)
	}
}

func (d *EC2Double) ModifySnapshotAttribute(i0 *ec2.ModifySnapshotAttributeInput) (r0 *ec2.ModifySnapshotAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifySnapshotAttribute", i0)
	r0, _ = returns[0].(*ec2.ModifySnapshotAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifySnapshotAttributeRequest(i0 *ec2.ModifySnapshotAttributeInput) (r0 *request.Request, r1 *ec2.ModifySnapshotAttributeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifySnapshotAttributeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifySnapshotAttributeOutput)
	return
}

func (d *EC2Double) ModifySnapshotAttributeWithContext(i0 context.Context, i1 *ec2.ModifySnapshotAttributeInput, i2 ...request.Option) (r0 *ec2.ModifySnapshotAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifySnapshotAttributeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifySnapshotAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifySnapshotAttributeWithContext(ctx context.Context, in *ec2.ModifySnapshotAttributeInput, _ ...request.Option) (*ec2.ModifySnapshotAttributeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifySnapshotAttribute cancelled", ctx.Err())
	default:
		return d.ModifySnapshotAttribute(in)
	}
}

func (d *EC2Double) ModifySpotFleetRequest(i0 *ec2.ModifySpotFleetRequestInput) (r0 *ec2.ModifySpotFleetRequestOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifySpotFleetRequest", i0)
	r0, _ = returns[0].(*ec2.ModifySpotFleetRequestOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifySpotFleetRequestRequest(i0 *ec2.ModifySpotFleetRequestInput) (r0 *request.Request, r1 *ec2.ModifySpotFleetRequestOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifySpotFleetRequestRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifySpotFleetRequestOutput)
	return
}

func (d *EC2Double) ModifySpotFleetRequestWithContext(i0 context.Context, i1 *ec2.ModifySpotFleetRequestInput, i2 ...request.Option) (r0 *ec2.ModifySpotFleetRequestOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifySpotFleetRequestWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifySpotFleetRequestOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifySpotFleetRequestWithContext(ctx context.Context, in *ec2.ModifySpotFleetRequestInput, _ ...request.Option) (*ec2.ModifySpotFleetRequestOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifySpotFleetRequest cancelled", ctx.Err())
	default:
		return d.ModifySpotFleetRequest(in)
	}
}

func (d *EC2Double) ModifySubnetAttribute(i0 *ec2.ModifySubnetAttributeInput) (r0 *ec2.ModifySubnetAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifySubnetAttribute", i0)
	r0, _ = returns[0].(*ec2.ModifySubnetAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifySubnetAttributeRequest(i0 *ec2.ModifySubnetAttributeInput) (r0 *request.Request, r1 *ec2.ModifySubnetAttributeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifySubnetAttributeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifySubnetAttributeOutput)
	return
}

func (d *EC2Double) ModifySubnetAttributeWithContext(i0 context.Context, i1 *ec2.ModifySubnetAttributeInput, i2 ...request.Option) (r0 *ec2.ModifySubnetAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifySubnetAttributeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifySubnetAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifySubnetAttributeWithContext(ctx context.Context, in *ec2.ModifySubnetAttributeInput, _ ...request.Option) (*ec2.ModifySubnetAttributeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifySubnetAttribute cancelled", ctx.Err())
	default:
		return d.ModifySubnetAttribute(in)
	}
}

func (d *EC2Double) ModifyTrafficMirrorFilterNetworkServices(i0 *ec2.ModifyTrafficMirrorFilterNetworkServicesInput) (r0 *ec2.ModifyTrafficMirrorFilterNetworkServicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyTrafficMirrorFilterNetworkServices", i0)
	r0, _ = returns[0].(*ec2.ModifyTrafficMirrorFilterNetworkServicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifyTrafficMirrorFilterNetworkServicesRequest(i0 *ec2.ModifyTrafficMirrorFilterNetworkServicesInput) (r0 *request.Request, r1 *ec2.ModifyTrafficMirrorFilterNetworkServicesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyTrafficMirrorFilterNetworkServicesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifyTrafficMirrorFilterNetworkServicesOutput)
	return
}

func (d *EC2Double) ModifyTrafficMirrorFilterNetworkServicesWithContext(i0 context.Context, i1 *ec2.ModifyTrafficMirrorFilterNetworkServicesInput, i2 ...request.Option) (r0 *ec2.ModifyTrafficMirrorFilterNetworkServicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyTrafficMirrorFilterNetworkServicesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifyTrafficMirrorFilterNetworkServicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifyTrafficMirrorFilterNetworkServicesWithContext(ctx context.Context, in *ec2.ModifyTrafficMirrorFilterNetworkServicesInput, _ ...request.Option) (*ec2.ModifyTrafficMirrorFilterNetworkServicesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyTrafficMirrorFilterNetworkServices cancelled", ctx.Err())
	default:
		return d.ModifyTrafficMirrorFilterNetworkServices(in)
	}
}

func (d *EC2Double) ModifyTrafficMirrorFilterRule(i0 *ec2.ModifyTrafficMirrorFilterRuleInput) (r0 *ec2.ModifyTrafficMirrorFilterRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyTrafficMirrorFilterRule", i0)
	r0, _ = returns[0].(*ec2.ModifyTrafficMirrorFilterRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifyTrafficMirrorFilterRuleRequest(i0 *ec2.ModifyTrafficMirrorFilterRuleInput) (r0 *request.Request, r1 *ec2.ModifyTrafficMirrorFilterRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyTrafficMirrorFilterRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifyTrafficMirrorFilterRuleOutput)
	return
}

func (d *EC2Double) ModifyTrafficMirrorFilterRuleWithContext(i0 context.Context, i1 *ec2.ModifyTrafficMirrorFilterRuleInput, i2 ...request.Option) (r0 *ec2.ModifyTrafficMirrorFilterRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyTrafficMirrorFilterRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifyTrafficMirrorFilterRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifyTrafficMirrorFilterRuleWithContext(ctx context.Context, in *ec2.ModifyTrafficMirrorFilterRuleInput, _ ...request.Option) (*ec2.ModifyTrafficMirrorFilterRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyTrafficMirrorFilterRule cancelled", ctx.Err())
	default:
		return d.ModifyTrafficMirrorFilterRule(in)
	}
}

func (d *EC2Double) ModifyTrafficMirrorSession(i0 *ec2.ModifyTrafficMirrorSessionInput) (r0 *ec2.ModifyTrafficMirrorSessionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyTrafficMirrorSession", i0)
	r0, _ = returns[0].(*ec2.ModifyTrafficMirrorSessionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifyTrafficMirrorSessionRequest(i0 *ec2.ModifyTrafficMirrorSessionInput) (r0 *request.Request, r1 *ec2.ModifyTrafficMirrorSessionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyTrafficMirrorSessionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifyTrafficMirrorSessionOutput)
	return
}

func (d *EC2Double) ModifyTrafficMirrorSessionWithContext(i0 context.Context, i1 *ec2.ModifyTrafficMirrorSessionInput, i2 ...request.Option) (r0 *ec2.ModifyTrafficMirrorSessionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyTrafficMirrorSessionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifyTrafficMirrorSessionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifyTrafficMirrorSessionWithContext(ctx context.Context, in *ec2.ModifyTrafficMirrorSessionInput, _ ...request.Option) (*ec2.ModifyTrafficMirrorSessionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyTrafficMirrorSession cancelled", ctx.Err())
	default:
		return d.ModifyTrafficMirrorSession(in)
	}
}

func (d *EC2Double) ModifyTransitGatewayVpcAttachment(i0 *ec2.ModifyTransitGatewayVpcAttachmentInput) (r0 *ec2.ModifyTransitGatewayVpcAttachmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyTransitGatewayVpcAttachment", i0)
	r0, _ = returns[0].(*ec2.ModifyTransitGatewayVpcAttachmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifyTransitGatewayVpcAttachmentRequest(i0 *ec2.ModifyTransitGatewayVpcAttachmentInput) (r0 *request.Request, r1 *ec2.ModifyTransitGatewayVpcAttachmentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyTransitGatewayVpcAttachmentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifyTransitGatewayVpcAttachmentOutput)
	return
}

func (d *EC2Double) ModifyTransitGatewayVpcAttachmentWithContext(i0 context.Context, i1 *ec2.ModifyTransitGatewayVpcAttachmentInput, i2 ...request.Option) (r0 *ec2.ModifyTransitGatewayVpcAttachmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyTransitGatewayVpcAttachmentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifyTransitGatewayVpcAttachmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifyTransitGatewayVpcAttachmentWithContext(ctx context.Context, in *ec2.ModifyTransitGatewayVpcAttachmentInput, _ ...request.Option) (*ec2.ModifyTransitGatewayVpcAttachmentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyTransitGatewayVpcAttachment cancelled", ctx.Err())
	default:
		return d.ModifyTransitGatewayVpcAttachment(in)
	}
}

func (d *EC2Double) ModifyVolume(i0 *ec2.ModifyVolumeInput) (r0 *ec2.ModifyVolumeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyVolume", i0)
	r0, _ = returns[0].(*ec2.ModifyVolumeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifyVolumeAttribute(i0 *ec2.ModifyVolumeAttributeInput) (r0 *ec2.ModifyVolumeAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyVolumeAttribute", i0)
	r0, _ = returns[0].(*ec2.ModifyVolumeAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifyVolumeAttributeRequest(i0 *ec2.ModifyVolumeAttributeInput) (r0 *request.Request, r1 *ec2.ModifyVolumeAttributeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyVolumeAttributeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifyVolumeAttributeOutput)
	return
}

func (d *EC2Double) ModifyVolumeAttributeWithContext(i0 context.Context, i1 *ec2.ModifyVolumeAttributeInput, i2 ...request.Option) (r0 *ec2.ModifyVolumeAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyVolumeAttributeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifyVolumeAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifyVolumeAttributeWithContext(ctx context.Context, in *ec2.ModifyVolumeAttributeInput, _ ...request.Option) (*ec2.ModifyVolumeAttributeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyVolumeAttribute cancelled", ctx.Err())
	default:
		return d.ModifyVolumeAttribute(in)
	}
}

func (d *EC2Double) ModifyVolumeRequest(i0 *ec2.ModifyVolumeInput) (r0 *request.Request, r1 *ec2.ModifyVolumeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyVolumeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifyVolumeOutput)
	return
}

func (d *EC2Double) ModifyVolumeWithContext(i0 context.Context, i1 *ec2.ModifyVolumeInput, i2 ...request.Option) (r0 *ec2.ModifyVolumeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyVolumeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifyVolumeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifyVolumeWithContext(ctx context.Context, in *ec2.ModifyVolumeInput, _ ...request.Option) (*ec2.ModifyVolumeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyVolume cancelled", ctx.Err())
	default:
		return d.ModifyVolume(in)
	}
}

func (d *EC2Double) ModifyVpcAttribute(i0 *ec2.ModifyVpcAttributeInput) (r0 *ec2.ModifyVpcAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyVpcAttribute", i0)
	r0, _ = returns[0].(*ec2.ModifyVpcAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifyVpcAttributeRequest(i0 *ec2.ModifyVpcAttributeInput) (r0 *request.Request, r1 *ec2.ModifyVpcAttributeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyVpcAttributeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifyVpcAttributeOutput)
	return
}

func (d *EC2Double) ModifyVpcAttributeWithContext(i0 context.Context, i1 *ec2.ModifyVpcAttributeInput, i2 ...request.Option) (r0 *ec2.ModifyVpcAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyVpcAttributeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifyVpcAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifyVpcAttributeWithContext(ctx context.Context, in *ec2.ModifyVpcAttributeInput, _ ...request.Option) (*ec2.ModifyVpcAttributeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyVpcAttribute cancelled", ctx.Err())
	default:
		return d.ModifyVpcAttribute(in)
	}
}

func (d *EC2Double) ModifyVpcEndpoint(i0 *ec2.ModifyVpcEndpointInput) (r0 *ec2.ModifyVpcEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyVpcEndpoint", i0)
	r0, _ = returns[0].(*ec2.ModifyVpcEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifyVpcEndpointConnectionNotification(i0 *ec2.ModifyVpcEndpointConnectionNotificationInput) (r0 *ec2.ModifyVpcEndpointConnectionNotificationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyVpcEndpointConnectionNotification", i0)
	r0, _ = returns[0].(*ec2.ModifyVpcEndpointConnectionNotificationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifyVpcEndpointConnectionNotificationRequest(i0 *ec2.ModifyVpcEndpointConnectionNotificationInput) (r0 *request.Request, r1 *ec2.ModifyVpcEndpointConnectionNotificationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyVpcEndpointConnectionNotificationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifyVpcEndpointConnectionNotificationOutput)
	return
}

func (d *EC2Double) ModifyVpcEndpointConnectionNotificationWithContext(i0 context.Context, i1 *ec2.ModifyVpcEndpointConnectionNotificationInput, i2 ...request.Option) (r0 *ec2.ModifyVpcEndpointConnectionNotificationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyVpcEndpointConnectionNotificationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifyVpcEndpointConnectionNotificationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifyVpcEndpointConnectionNotificationWithContext(ctx context.Context, in *ec2.ModifyVpcEndpointConnectionNotificationInput, _ ...request.Option) (*ec2.ModifyVpcEndpointConnectionNotificationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyVpcEndpointConnectionNotification cancelled", ctx.Err())
	default:
		return d.ModifyVpcEndpointConnectionNotification(in)
	}
}

func (d *EC2Double) ModifyVpcEndpointRequest(i0 *ec2.ModifyVpcEndpointInput) (r0 *request.Request, r1 *ec2.ModifyVpcEndpointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyVpcEndpointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifyVpcEndpointOutput)
	return
}

func (d *EC2Double) ModifyVpcEndpointServiceConfiguration(i0 *ec2.ModifyVpcEndpointServiceConfigurationInput) (r0 *ec2.ModifyVpcEndpointServiceConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyVpcEndpointServiceConfiguration", i0)
	r0, _ = returns[0].(*ec2.ModifyVpcEndpointServiceConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifyVpcEndpointServiceConfigurationRequest(i0 *ec2.ModifyVpcEndpointServiceConfigurationInput) (r0 *request.Request, r1 *ec2.ModifyVpcEndpointServiceConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyVpcEndpointServiceConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifyVpcEndpointServiceConfigurationOutput)
	return
}

func (d *EC2Double) ModifyVpcEndpointServiceConfigurationWithContext(i0 context.Context, i1 *ec2.ModifyVpcEndpointServiceConfigurationInput, i2 ...request.Option) (r0 *ec2.ModifyVpcEndpointServiceConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyVpcEndpointServiceConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifyVpcEndpointServiceConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifyVpcEndpointServiceConfigurationWithContext(ctx context.Context, in *ec2.ModifyVpcEndpointServiceConfigurationInput, _ ...request.Option) (*ec2.ModifyVpcEndpointServiceConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyVpcEndpointServiceConfiguration cancelled", ctx.Err())
	default:
		return d.ModifyVpcEndpointServiceConfiguration(in)
	}
}

func (d *EC2Double) ModifyVpcEndpointServicePermissions(i0 *ec2.ModifyVpcEndpointServicePermissionsInput) (r0 *ec2.ModifyVpcEndpointServicePermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyVpcEndpointServicePermissions", i0)
	r0, _ = returns[0].(*ec2.ModifyVpcEndpointServicePermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifyVpcEndpointServicePermissionsRequest(i0 *ec2.ModifyVpcEndpointServicePermissionsInput) (r0 *request.Request, r1 *ec2.ModifyVpcEndpointServicePermissionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyVpcEndpointServicePermissionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifyVpcEndpointServicePermissionsOutput)
	return
}

func (d *EC2Double) ModifyVpcEndpointServicePermissionsWithContext(i0 context.Context, i1 *ec2.ModifyVpcEndpointServicePermissionsInput, i2 ...request.Option) (r0 *ec2.ModifyVpcEndpointServicePermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyVpcEndpointServicePermissionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifyVpcEndpointServicePermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifyVpcEndpointServicePermissionsWithContext(ctx context.Context, in *ec2.ModifyVpcEndpointServicePermissionsInput, _ ...request.Option) (*ec2.ModifyVpcEndpointServicePermissionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyVpcEndpointServicePermissions cancelled", ctx.Err())
	default:
		return d.ModifyVpcEndpointServicePermissions(in)
	}
}

func (d *EC2Double) ModifyVpcEndpointWithContext(i0 context.Context, i1 *ec2.ModifyVpcEndpointInput, i2 ...request.Option) (r0 *ec2.ModifyVpcEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyVpcEndpointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifyVpcEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifyVpcEndpointWithContext(ctx context.Context, in *ec2.ModifyVpcEndpointInput, _ ...request.Option) (*ec2.ModifyVpcEndpointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyVpcEndpoint cancelled", ctx.Err())
	default:
		return d.ModifyVpcEndpoint(in)
	}
}

func (d *EC2Double) ModifyVpcPeeringConnectionOptions(i0 *ec2.ModifyVpcPeeringConnectionOptionsInput) (r0 *ec2.ModifyVpcPeeringConnectionOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyVpcPeeringConnectionOptions", i0)
	r0, _ = returns[0].(*ec2.ModifyVpcPeeringConnectionOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifyVpcPeeringConnectionOptionsRequest(i0 *ec2.ModifyVpcPeeringConnectionOptionsInput) (r0 *request.Request, r1 *ec2.ModifyVpcPeeringConnectionOptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyVpcPeeringConnectionOptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifyVpcPeeringConnectionOptionsOutput)
	return
}

func (d *EC2Double) ModifyVpcPeeringConnectionOptionsWithContext(i0 context.Context, i1 *ec2.ModifyVpcPeeringConnectionOptionsInput, i2 ...request.Option) (r0 *ec2.ModifyVpcPeeringConnectionOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyVpcPeeringConnectionOptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifyVpcPeeringConnectionOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifyVpcPeeringConnectionOptionsWithContext(ctx context.Context, in *ec2.ModifyVpcPeeringConnectionOptionsInput, _ ...request.Option) (*ec2.ModifyVpcPeeringConnectionOptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyVpcPeeringConnectionOptions cancelled", ctx.Err())
	default:
		return d.ModifyVpcPeeringConnectionOptions(in)
	}
}

func (d *EC2Double) ModifyVpcTenancy(i0 *ec2.ModifyVpcTenancyInput) (r0 *ec2.ModifyVpcTenancyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyVpcTenancy", i0)
	r0, _ = returns[0].(*ec2.ModifyVpcTenancyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifyVpcTenancyRequest(i0 *ec2.ModifyVpcTenancyInput) (r0 *request.Request, r1 *ec2.ModifyVpcTenancyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyVpcTenancyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifyVpcTenancyOutput)
	return
}

func (d *EC2Double) ModifyVpcTenancyWithContext(i0 context.Context, i1 *ec2.ModifyVpcTenancyInput, i2 ...request.Option) (r0 *ec2.ModifyVpcTenancyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyVpcTenancyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifyVpcTenancyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifyVpcTenancyWithContext(ctx context.Context, in *ec2.ModifyVpcTenancyInput, _ ...request.Option) (*ec2.ModifyVpcTenancyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyVpcTenancy cancelled", ctx.Err())
	default:
		return d.ModifyVpcTenancy(in)
	}
}

func (d *EC2Double) ModifyVpnConnection(i0 *ec2.ModifyVpnConnectionInput) (r0 *ec2.ModifyVpnConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyVpnConnection", i0)
	r0, _ = returns[0].(*ec2.ModifyVpnConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifyVpnConnectionRequest(i0 *ec2.ModifyVpnConnectionInput) (r0 *request.Request, r1 *ec2.ModifyVpnConnectionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyVpnConnectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifyVpnConnectionOutput)
	return
}

func (d *EC2Double) ModifyVpnConnectionWithContext(i0 context.Context, i1 *ec2.ModifyVpnConnectionInput, i2 ...request.Option) (r0 *ec2.ModifyVpnConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyVpnConnectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifyVpnConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifyVpnConnectionWithContext(ctx context.Context, in *ec2.ModifyVpnConnectionInput, _ ...request.Option) (*ec2.ModifyVpnConnectionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyVpnConnection cancelled", ctx.Err())
	default:
		return d.ModifyVpnConnection(in)
	}
}

func (d *EC2Double) ModifyVpnTunnelCertificate(i0 *ec2.ModifyVpnTunnelCertificateInput) (r0 *ec2.ModifyVpnTunnelCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyVpnTunnelCertificate", i0)
	r0, _ = returns[0].(*ec2.ModifyVpnTunnelCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifyVpnTunnelCertificateRequest(i0 *ec2.ModifyVpnTunnelCertificateInput) (r0 *request.Request, r1 *ec2.ModifyVpnTunnelCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyVpnTunnelCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifyVpnTunnelCertificateOutput)
	return
}

func (d *EC2Double) ModifyVpnTunnelCertificateWithContext(i0 context.Context, i1 *ec2.ModifyVpnTunnelCertificateInput, i2 ...request.Option) (r0 *ec2.ModifyVpnTunnelCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyVpnTunnelCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifyVpnTunnelCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifyVpnTunnelCertificateWithContext(ctx context.Context, in *ec2.ModifyVpnTunnelCertificateInput, _ ...request.Option) (*ec2.ModifyVpnTunnelCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyVpnTunnelCertificate cancelled", ctx.Err())
	default:
		return d.ModifyVpnTunnelCertificate(in)
	}
}

func (d *EC2Double) ModifyVpnTunnelOptions(i0 *ec2.ModifyVpnTunnelOptionsInput) (r0 *ec2.ModifyVpnTunnelOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyVpnTunnelOptions", i0)
	r0, _ = returns[0].(*ec2.ModifyVpnTunnelOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ModifyVpnTunnelOptionsRequest(i0 *ec2.ModifyVpnTunnelOptionsInput) (r0 *request.Request, r1 *ec2.ModifyVpnTunnelOptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyVpnTunnelOptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ModifyVpnTunnelOptionsOutput)
	return
}

func (d *EC2Double) ModifyVpnTunnelOptionsWithContext(i0 context.Context, i1 *ec2.ModifyVpnTunnelOptionsInput, i2 ...request.Option) (r0 *ec2.ModifyVpnTunnelOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyVpnTunnelOptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ModifyVpnTunnelOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeModifyVpnTunnelOptionsWithContext(ctx context.Context, in *ec2.ModifyVpnTunnelOptionsInput, _ ...request.Option) (*ec2.ModifyVpnTunnelOptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyVpnTunnelOptions cancelled", ctx.Err())
	default:
		return d.ModifyVpnTunnelOptions(in)
	}
}

func (d *EC2Double) MonitorInstances(i0 *ec2.MonitorInstancesInput) (r0 *ec2.MonitorInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("MonitorInstances", i0)
	r0, _ = returns[0].(*ec2.MonitorInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) MonitorInstancesRequest(i0 *ec2.MonitorInstancesInput) (r0 *request.Request, r1 *ec2.MonitorInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("MonitorInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.MonitorInstancesOutput)
	return
}

func (d *EC2Double) MonitorInstancesWithContext(i0 context.Context, i1 *ec2.MonitorInstancesInput, i2 ...request.Option) (r0 *ec2.MonitorInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("MonitorInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.MonitorInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeMonitorInstancesWithContext(ctx context.Context, in *ec2.MonitorInstancesInput, _ ...request.Option) (*ec2.MonitorInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "MonitorInstances cancelled", ctx.Err())
	default:
		return d.MonitorInstances(in)
	}
}

func (d *EC2Double) MoveAddressToVpc(i0 *ec2.MoveAddressToVpcInput) (r0 *ec2.MoveAddressToVpcOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("MoveAddressToVpc", i0)
	r0, _ = returns[0].(*ec2.MoveAddressToVpcOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) MoveAddressToVpcRequest(i0 *ec2.MoveAddressToVpcInput) (r0 *request.Request, r1 *ec2.MoveAddressToVpcOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("MoveAddressToVpcRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.MoveAddressToVpcOutput)
	return
}

func (d *EC2Double) MoveAddressToVpcWithContext(i0 context.Context, i1 *ec2.MoveAddressToVpcInput, i2 ...request.Option) (r0 *ec2.MoveAddressToVpcOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("MoveAddressToVpcWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.MoveAddressToVpcOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeMoveAddressToVpcWithContext(ctx context.Context, in *ec2.MoveAddressToVpcInput, _ ...request.Option) (*ec2.MoveAddressToVpcOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "MoveAddressToVpc cancelled", ctx.Err())
	default:
		return d.MoveAddressToVpc(in)
	}
}

func (d *EC2Double) ProvisionByoipCidr(i0 *ec2.ProvisionByoipCidrInput) (r0 *ec2.ProvisionByoipCidrOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ProvisionByoipCidr", i0)
	r0, _ = returns[0].(*ec2.ProvisionByoipCidrOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ProvisionByoipCidrRequest(i0 *ec2.ProvisionByoipCidrInput) (r0 *request.Request, r1 *ec2.ProvisionByoipCidrOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ProvisionByoipCidrRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ProvisionByoipCidrOutput)
	return
}

func (d *EC2Double) ProvisionByoipCidrWithContext(i0 context.Context, i1 *ec2.ProvisionByoipCidrInput, i2 ...request.Option) (r0 *ec2.ProvisionByoipCidrOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ProvisionByoipCidrWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ProvisionByoipCidrOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeProvisionByoipCidrWithContext(ctx context.Context, in *ec2.ProvisionByoipCidrInput, _ ...request.Option) (*ec2.ProvisionByoipCidrOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ProvisionByoipCidr cancelled", ctx.Err())
	default:
		return d.ProvisionByoipCidr(in)
	}
}

func (d *EC2Double) PurchaseHostReservation(i0 *ec2.PurchaseHostReservationInput) (r0 *ec2.PurchaseHostReservationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PurchaseHostReservation", i0)
	r0, _ = returns[0].(*ec2.PurchaseHostReservationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) PurchaseHostReservationRequest(i0 *ec2.PurchaseHostReservationInput) (r0 *request.Request, r1 *ec2.PurchaseHostReservationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PurchaseHostReservationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.PurchaseHostReservationOutput)
	return
}

func (d *EC2Double) PurchaseHostReservationWithContext(i0 context.Context, i1 *ec2.PurchaseHostReservationInput, i2 ...request.Option) (r0 *ec2.PurchaseHostReservationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PurchaseHostReservationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.PurchaseHostReservationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakePurchaseHostReservationWithContext(ctx context.Context, in *ec2.PurchaseHostReservationInput, _ ...request.Option) (*ec2.PurchaseHostReservationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PurchaseHostReservation cancelled", ctx.Err())
	default:
		return d.PurchaseHostReservation(in)
	}
}

func (d *EC2Double) PurchaseReservedInstancesOffering(i0 *ec2.PurchaseReservedInstancesOfferingInput) (r0 *ec2.PurchaseReservedInstancesOfferingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PurchaseReservedInstancesOffering", i0)
	r0, _ = returns[0].(*ec2.PurchaseReservedInstancesOfferingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) PurchaseReservedInstancesOfferingRequest(i0 *ec2.PurchaseReservedInstancesOfferingInput) (r0 *request.Request, r1 *ec2.PurchaseReservedInstancesOfferingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PurchaseReservedInstancesOfferingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.PurchaseReservedInstancesOfferingOutput)
	return
}

func (d *EC2Double) PurchaseReservedInstancesOfferingWithContext(i0 context.Context, i1 *ec2.PurchaseReservedInstancesOfferingInput, i2 ...request.Option) (r0 *ec2.PurchaseReservedInstancesOfferingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PurchaseReservedInstancesOfferingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.PurchaseReservedInstancesOfferingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakePurchaseReservedInstancesOfferingWithContext(ctx context.Context, in *ec2.PurchaseReservedInstancesOfferingInput, _ ...request.Option) (*ec2.PurchaseReservedInstancesOfferingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PurchaseReservedInstancesOffering cancelled", ctx.Err())
	default:
		return d.PurchaseReservedInstancesOffering(in)
	}
}

func (d *EC2Double) PurchaseScheduledInstances(i0 *ec2.PurchaseScheduledInstancesInput) (r0 *ec2.PurchaseScheduledInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PurchaseScheduledInstances", i0)
	r0, _ = returns[0].(*ec2.PurchaseScheduledInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) PurchaseScheduledInstancesRequest(i0 *ec2.PurchaseScheduledInstancesInput) (r0 *request.Request, r1 *ec2.PurchaseScheduledInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PurchaseScheduledInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.PurchaseScheduledInstancesOutput)
	return
}

func (d *EC2Double) PurchaseScheduledInstancesWithContext(i0 context.Context, i1 *ec2.PurchaseScheduledInstancesInput, i2 ...request.Option) (r0 *ec2.PurchaseScheduledInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PurchaseScheduledInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.PurchaseScheduledInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakePurchaseScheduledInstancesWithContext(ctx context.Context, in *ec2.PurchaseScheduledInstancesInput, _ ...request.Option) (*ec2.PurchaseScheduledInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PurchaseScheduledInstances cancelled", ctx.Err())
	default:
		return d.PurchaseScheduledInstances(in)
	}
}

func (d *EC2Double) RebootInstances(i0 *ec2.RebootInstancesInput) (r0 *ec2.RebootInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebootInstances", i0)
	r0, _ = returns[0].(*ec2.RebootInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) RebootInstancesRequest(i0 *ec2.RebootInstancesInput) (r0 *request.Request, r1 *ec2.RebootInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebootInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.RebootInstancesOutput)
	return
}

func (d *EC2Double) RebootInstancesWithContext(i0 context.Context, i1 *ec2.RebootInstancesInput, i2 ...request.Option) (r0 *ec2.RebootInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebootInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.RebootInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeRebootInstancesWithContext(ctx context.Context, in *ec2.RebootInstancesInput, _ ...request.Option) (*ec2.RebootInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RebootInstances cancelled", ctx.Err())
	default:
		return d.RebootInstances(in)
	}
}

func (d *EC2Double) RegisterImage(i0 *ec2.RegisterImageInput) (r0 *ec2.RegisterImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterImage", i0)
	r0, _ = returns[0].(*ec2.RegisterImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) RegisterImageRequest(i0 *ec2.RegisterImageInput) (r0 *request.Request, r1 *ec2.RegisterImageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterImageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.RegisterImageOutput)
	return
}

func (d *EC2Double) RegisterImageWithContext(i0 context.Context, i1 *ec2.RegisterImageInput, i2 ...request.Option) (r0 *ec2.RegisterImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterImageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.RegisterImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeRegisterImageWithContext(ctx context.Context, in *ec2.RegisterImageInput, _ ...request.Option) (*ec2.RegisterImageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterImage cancelled", ctx.Err())
	default:
		return d.RegisterImage(in)
	}
}

func (d *EC2Double) RegisterTransitGatewayMulticastGroupMembers(i0 *ec2.RegisterTransitGatewayMulticastGroupMembersInput) (r0 *ec2.RegisterTransitGatewayMulticastGroupMembersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterTransitGatewayMulticastGroupMembers", i0)
	r0, _ = returns[0].(*ec2.RegisterTransitGatewayMulticastGroupMembersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) RegisterTransitGatewayMulticastGroupMembersRequest(i0 *ec2.RegisterTransitGatewayMulticastGroupMembersInput) (r0 *request.Request, r1 *ec2.RegisterTransitGatewayMulticastGroupMembersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterTransitGatewayMulticastGroupMembersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.RegisterTransitGatewayMulticastGroupMembersOutput)
	return
}

func (d *EC2Double) RegisterTransitGatewayMulticastGroupMembersWithContext(i0 context.Context, i1 *ec2.RegisterTransitGatewayMulticastGroupMembersInput, i2 ...request.Option) (r0 *ec2.RegisterTransitGatewayMulticastGroupMembersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterTransitGatewayMulticastGroupMembersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.RegisterTransitGatewayMulticastGroupMembersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeRegisterTransitGatewayMulticastGroupMembersWithContext(ctx context.Context, in *ec2.RegisterTransitGatewayMulticastGroupMembersInput, _ ...request.Option) (*ec2.RegisterTransitGatewayMulticastGroupMembersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterTransitGatewayMulticastGroupMembers cancelled", ctx.Err())
	default:
		return d.RegisterTransitGatewayMulticastGroupMembers(in)
	}
}

func (d *EC2Double) RegisterTransitGatewayMulticastGroupSources(i0 *ec2.RegisterTransitGatewayMulticastGroupSourcesInput) (r0 *ec2.RegisterTransitGatewayMulticastGroupSourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterTransitGatewayMulticastGroupSources", i0)
	r0, _ = returns[0].(*ec2.RegisterTransitGatewayMulticastGroupSourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) RegisterTransitGatewayMulticastGroupSourcesRequest(i0 *ec2.RegisterTransitGatewayMulticastGroupSourcesInput) (r0 *request.Request, r1 *ec2.RegisterTransitGatewayMulticastGroupSourcesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterTransitGatewayMulticastGroupSourcesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.RegisterTransitGatewayMulticastGroupSourcesOutput)
	return
}

func (d *EC2Double) RegisterTransitGatewayMulticastGroupSourcesWithContext(i0 context.Context, i1 *ec2.RegisterTransitGatewayMulticastGroupSourcesInput, i2 ...request.Option) (r0 *ec2.RegisterTransitGatewayMulticastGroupSourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterTransitGatewayMulticastGroupSourcesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.RegisterTransitGatewayMulticastGroupSourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeRegisterTransitGatewayMulticastGroupSourcesWithContext(ctx context.Context, in *ec2.RegisterTransitGatewayMulticastGroupSourcesInput, _ ...request.Option) (*ec2.RegisterTransitGatewayMulticastGroupSourcesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterTransitGatewayMulticastGroupSources cancelled", ctx.Err())
	default:
		return d.RegisterTransitGatewayMulticastGroupSources(in)
	}
}

func (d *EC2Double) RejectTransitGatewayPeeringAttachment(i0 *ec2.RejectTransitGatewayPeeringAttachmentInput) (r0 *ec2.RejectTransitGatewayPeeringAttachmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RejectTransitGatewayPeeringAttachment", i0)
	r0, _ = returns[0].(*ec2.RejectTransitGatewayPeeringAttachmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) RejectTransitGatewayPeeringAttachmentRequest(i0 *ec2.RejectTransitGatewayPeeringAttachmentInput) (r0 *request.Request, r1 *ec2.RejectTransitGatewayPeeringAttachmentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RejectTransitGatewayPeeringAttachmentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.RejectTransitGatewayPeeringAttachmentOutput)
	return
}

func (d *EC2Double) RejectTransitGatewayPeeringAttachmentWithContext(i0 context.Context, i1 *ec2.RejectTransitGatewayPeeringAttachmentInput, i2 ...request.Option) (r0 *ec2.RejectTransitGatewayPeeringAttachmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RejectTransitGatewayPeeringAttachmentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.RejectTransitGatewayPeeringAttachmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeRejectTransitGatewayPeeringAttachmentWithContext(ctx context.Context, in *ec2.RejectTransitGatewayPeeringAttachmentInput, _ ...request.Option) (*ec2.RejectTransitGatewayPeeringAttachmentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RejectTransitGatewayPeeringAttachment cancelled", ctx.Err())
	default:
		return d.RejectTransitGatewayPeeringAttachment(in)
	}
}

func (d *EC2Double) RejectTransitGatewayVpcAttachment(i0 *ec2.RejectTransitGatewayVpcAttachmentInput) (r0 *ec2.RejectTransitGatewayVpcAttachmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RejectTransitGatewayVpcAttachment", i0)
	r0, _ = returns[0].(*ec2.RejectTransitGatewayVpcAttachmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) RejectTransitGatewayVpcAttachmentRequest(i0 *ec2.RejectTransitGatewayVpcAttachmentInput) (r0 *request.Request, r1 *ec2.RejectTransitGatewayVpcAttachmentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RejectTransitGatewayVpcAttachmentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.RejectTransitGatewayVpcAttachmentOutput)
	return
}

func (d *EC2Double) RejectTransitGatewayVpcAttachmentWithContext(i0 context.Context, i1 *ec2.RejectTransitGatewayVpcAttachmentInput, i2 ...request.Option) (r0 *ec2.RejectTransitGatewayVpcAttachmentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RejectTransitGatewayVpcAttachmentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.RejectTransitGatewayVpcAttachmentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeRejectTransitGatewayVpcAttachmentWithContext(ctx context.Context, in *ec2.RejectTransitGatewayVpcAttachmentInput, _ ...request.Option) (*ec2.RejectTransitGatewayVpcAttachmentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RejectTransitGatewayVpcAttachment cancelled", ctx.Err())
	default:
		return d.RejectTransitGatewayVpcAttachment(in)
	}
}

func (d *EC2Double) RejectVpcEndpointConnections(i0 *ec2.RejectVpcEndpointConnectionsInput) (r0 *ec2.RejectVpcEndpointConnectionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RejectVpcEndpointConnections", i0)
	r0, _ = returns[0].(*ec2.RejectVpcEndpointConnectionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) RejectVpcEndpointConnectionsRequest(i0 *ec2.RejectVpcEndpointConnectionsInput) (r0 *request.Request, r1 *ec2.RejectVpcEndpointConnectionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RejectVpcEndpointConnectionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.RejectVpcEndpointConnectionsOutput)
	return
}

func (d *EC2Double) RejectVpcEndpointConnectionsWithContext(i0 context.Context, i1 *ec2.RejectVpcEndpointConnectionsInput, i2 ...request.Option) (r0 *ec2.RejectVpcEndpointConnectionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RejectVpcEndpointConnectionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.RejectVpcEndpointConnectionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeRejectVpcEndpointConnectionsWithContext(ctx context.Context, in *ec2.RejectVpcEndpointConnectionsInput, _ ...request.Option) (*ec2.RejectVpcEndpointConnectionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RejectVpcEndpointConnections cancelled", ctx.Err())
	default:
		return d.RejectVpcEndpointConnections(in)
	}
}

func (d *EC2Double) RejectVpcPeeringConnection(i0 *ec2.RejectVpcPeeringConnectionInput) (r0 *ec2.RejectVpcPeeringConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RejectVpcPeeringConnection", i0)
	r0, _ = returns[0].(*ec2.RejectVpcPeeringConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) RejectVpcPeeringConnectionRequest(i0 *ec2.RejectVpcPeeringConnectionInput) (r0 *request.Request, r1 *ec2.RejectVpcPeeringConnectionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RejectVpcPeeringConnectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.RejectVpcPeeringConnectionOutput)
	return
}

func (d *EC2Double) RejectVpcPeeringConnectionWithContext(i0 context.Context, i1 *ec2.RejectVpcPeeringConnectionInput, i2 ...request.Option) (r0 *ec2.RejectVpcPeeringConnectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RejectVpcPeeringConnectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.RejectVpcPeeringConnectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeRejectVpcPeeringConnectionWithContext(ctx context.Context, in *ec2.RejectVpcPeeringConnectionInput, _ ...request.Option) (*ec2.RejectVpcPeeringConnectionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RejectVpcPeeringConnection cancelled", ctx.Err())
	default:
		return d.RejectVpcPeeringConnection(in)
	}
}

func (d *EC2Double) ReleaseAddress(i0 *ec2.ReleaseAddressInput) (r0 *ec2.ReleaseAddressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReleaseAddress", i0)
	r0, _ = returns[0].(*ec2.ReleaseAddressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ReleaseAddressRequest(i0 *ec2.ReleaseAddressInput) (r0 *request.Request, r1 *ec2.ReleaseAddressOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReleaseAddressRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ReleaseAddressOutput)
	return
}

func (d *EC2Double) ReleaseAddressWithContext(i0 context.Context, i1 *ec2.ReleaseAddressInput, i2 ...request.Option) (r0 *ec2.ReleaseAddressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReleaseAddressWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ReleaseAddressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeReleaseAddressWithContext(ctx context.Context, in *ec2.ReleaseAddressInput, _ ...request.Option) (*ec2.ReleaseAddressOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ReleaseAddress cancelled", ctx.Err())
	default:
		return d.ReleaseAddress(in)
	}
}

func (d *EC2Double) ReleaseHosts(i0 *ec2.ReleaseHostsInput) (r0 *ec2.ReleaseHostsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReleaseHosts", i0)
	r0, _ = returns[0].(*ec2.ReleaseHostsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ReleaseHostsRequest(i0 *ec2.ReleaseHostsInput) (r0 *request.Request, r1 *ec2.ReleaseHostsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReleaseHostsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ReleaseHostsOutput)
	return
}

func (d *EC2Double) ReleaseHostsWithContext(i0 context.Context, i1 *ec2.ReleaseHostsInput, i2 ...request.Option) (r0 *ec2.ReleaseHostsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReleaseHostsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ReleaseHostsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeReleaseHostsWithContext(ctx context.Context, in *ec2.ReleaseHostsInput, _ ...request.Option) (*ec2.ReleaseHostsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ReleaseHosts cancelled", ctx.Err())
	default:
		return d.ReleaseHosts(in)
	}
}

func (d *EC2Double) ReplaceIamInstanceProfileAssociation(i0 *ec2.ReplaceIamInstanceProfileAssociationInput) (r0 *ec2.ReplaceIamInstanceProfileAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReplaceIamInstanceProfileAssociation", i0)
	r0, _ = returns[0].(*ec2.ReplaceIamInstanceProfileAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ReplaceIamInstanceProfileAssociationRequest(i0 *ec2.ReplaceIamInstanceProfileAssociationInput) (r0 *request.Request, r1 *ec2.ReplaceIamInstanceProfileAssociationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReplaceIamInstanceProfileAssociationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ReplaceIamInstanceProfileAssociationOutput)
	return
}

func (d *EC2Double) ReplaceIamInstanceProfileAssociationWithContext(i0 context.Context, i1 *ec2.ReplaceIamInstanceProfileAssociationInput, i2 ...request.Option) (r0 *ec2.ReplaceIamInstanceProfileAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReplaceIamInstanceProfileAssociationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ReplaceIamInstanceProfileAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeReplaceIamInstanceProfileAssociationWithContext(ctx context.Context, in *ec2.ReplaceIamInstanceProfileAssociationInput, _ ...request.Option) (*ec2.ReplaceIamInstanceProfileAssociationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ReplaceIamInstanceProfileAssociation cancelled", ctx.Err())
	default:
		return d.ReplaceIamInstanceProfileAssociation(in)
	}
}

func (d *EC2Double) ReplaceNetworkAclAssociation(i0 *ec2.ReplaceNetworkAclAssociationInput) (r0 *ec2.ReplaceNetworkAclAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReplaceNetworkAclAssociation", i0)
	r0, _ = returns[0].(*ec2.ReplaceNetworkAclAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ReplaceNetworkAclAssociationRequest(i0 *ec2.ReplaceNetworkAclAssociationInput) (r0 *request.Request, r1 *ec2.ReplaceNetworkAclAssociationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReplaceNetworkAclAssociationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ReplaceNetworkAclAssociationOutput)
	return
}

func (d *EC2Double) ReplaceNetworkAclAssociationWithContext(i0 context.Context, i1 *ec2.ReplaceNetworkAclAssociationInput, i2 ...request.Option) (r0 *ec2.ReplaceNetworkAclAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReplaceNetworkAclAssociationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ReplaceNetworkAclAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeReplaceNetworkAclAssociationWithContext(ctx context.Context, in *ec2.ReplaceNetworkAclAssociationInput, _ ...request.Option) (*ec2.ReplaceNetworkAclAssociationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ReplaceNetworkAclAssociation cancelled", ctx.Err())
	default:
		return d.ReplaceNetworkAclAssociation(in)
	}
}

func (d *EC2Double) ReplaceNetworkAclEntry(i0 *ec2.ReplaceNetworkAclEntryInput) (r0 *ec2.ReplaceNetworkAclEntryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReplaceNetworkAclEntry", i0)
	r0, _ = returns[0].(*ec2.ReplaceNetworkAclEntryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ReplaceNetworkAclEntryRequest(i0 *ec2.ReplaceNetworkAclEntryInput) (r0 *request.Request, r1 *ec2.ReplaceNetworkAclEntryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReplaceNetworkAclEntryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ReplaceNetworkAclEntryOutput)
	return
}

func (d *EC2Double) ReplaceNetworkAclEntryWithContext(i0 context.Context, i1 *ec2.ReplaceNetworkAclEntryInput, i2 ...request.Option) (r0 *ec2.ReplaceNetworkAclEntryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReplaceNetworkAclEntryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ReplaceNetworkAclEntryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeReplaceNetworkAclEntryWithContext(ctx context.Context, in *ec2.ReplaceNetworkAclEntryInput, _ ...request.Option) (*ec2.ReplaceNetworkAclEntryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ReplaceNetworkAclEntry cancelled", ctx.Err())
	default:
		return d.ReplaceNetworkAclEntry(in)
	}
}

func (d *EC2Double) ReplaceRoute(i0 *ec2.ReplaceRouteInput) (r0 *ec2.ReplaceRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReplaceRoute", i0)
	r0, _ = returns[0].(*ec2.ReplaceRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ReplaceRouteRequest(i0 *ec2.ReplaceRouteInput) (r0 *request.Request, r1 *ec2.ReplaceRouteOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReplaceRouteRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ReplaceRouteOutput)
	return
}

func (d *EC2Double) ReplaceRouteTableAssociation(i0 *ec2.ReplaceRouteTableAssociationInput) (r0 *ec2.ReplaceRouteTableAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReplaceRouteTableAssociation", i0)
	r0, _ = returns[0].(*ec2.ReplaceRouteTableAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ReplaceRouteTableAssociationRequest(i0 *ec2.ReplaceRouteTableAssociationInput) (r0 *request.Request, r1 *ec2.ReplaceRouteTableAssociationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReplaceRouteTableAssociationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ReplaceRouteTableAssociationOutput)
	return
}

func (d *EC2Double) ReplaceRouteTableAssociationWithContext(i0 context.Context, i1 *ec2.ReplaceRouteTableAssociationInput, i2 ...request.Option) (r0 *ec2.ReplaceRouteTableAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReplaceRouteTableAssociationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ReplaceRouteTableAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeReplaceRouteTableAssociationWithContext(ctx context.Context, in *ec2.ReplaceRouteTableAssociationInput, _ ...request.Option) (*ec2.ReplaceRouteTableAssociationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ReplaceRouteTableAssociation cancelled", ctx.Err())
	default:
		return d.ReplaceRouteTableAssociation(in)
	}
}

func (d *EC2Double) ReplaceRouteWithContext(i0 context.Context, i1 *ec2.ReplaceRouteInput, i2 ...request.Option) (r0 *ec2.ReplaceRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReplaceRouteWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ReplaceRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeReplaceRouteWithContext(ctx context.Context, in *ec2.ReplaceRouteInput, _ ...request.Option) (*ec2.ReplaceRouteOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ReplaceRoute cancelled", ctx.Err())
	default:
		return d.ReplaceRoute(in)
	}
}

func (d *EC2Double) ReplaceTransitGatewayRoute(i0 *ec2.ReplaceTransitGatewayRouteInput) (r0 *ec2.ReplaceTransitGatewayRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReplaceTransitGatewayRoute", i0)
	r0, _ = returns[0].(*ec2.ReplaceTransitGatewayRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ReplaceTransitGatewayRouteRequest(i0 *ec2.ReplaceTransitGatewayRouteInput) (r0 *request.Request, r1 *ec2.ReplaceTransitGatewayRouteOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReplaceTransitGatewayRouteRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ReplaceTransitGatewayRouteOutput)
	return
}

func (d *EC2Double) ReplaceTransitGatewayRouteWithContext(i0 context.Context, i1 *ec2.ReplaceTransitGatewayRouteInput, i2 ...request.Option) (r0 *ec2.ReplaceTransitGatewayRouteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReplaceTransitGatewayRouteWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ReplaceTransitGatewayRouteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeReplaceTransitGatewayRouteWithContext(ctx context.Context, in *ec2.ReplaceTransitGatewayRouteInput, _ ...request.Option) (*ec2.ReplaceTransitGatewayRouteOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ReplaceTransitGatewayRoute cancelled", ctx.Err())
	default:
		return d.ReplaceTransitGatewayRoute(in)
	}
}

func (d *EC2Double) ReportInstanceStatus(i0 *ec2.ReportInstanceStatusInput) (r0 *ec2.ReportInstanceStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReportInstanceStatus", i0)
	r0, _ = returns[0].(*ec2.ReportInstanceStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ReportInstanceStatusRequest(i0 *ec2.ReportInstanceStatusInput) (r0 *request.Request, r1 *ec2.ReportInstanceStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReportInstanceStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ReportInstanceStatusOutput)
	return
}

func (d *EC2Double) ReportInstanceStatusWithContext(i0 context.Context, i1 *ec2.ReportInstanceStatusInput, i2 ...request.Option) (r0 *ec2.ReportInstanceStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReportInstanceStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ReportInstanceStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeReportInstanceStatusWithContext(ctx context.Context, in *ec2.ReportInstanceStatusInput, _ ...request.Option) (*ec2.ReportInstanceStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ReportInstanceStatus cancelled", ctx.Err())
	default:
		return d.ReportInstanceStatus(in)
	}
}

func (d *EC2Double) RequestSpotFleet(i0 *ec2.RequestSpotFleetInput) (r0 *ec2.RequestSpotFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RequestSpotFleet", i0)
	r0, _ = returns[0].(*ec2.RequestSpotFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) RequestSpotFleetRequest(i0 *ec2.RequestSpotFleetInput) (r0 *request.Request, r1 *ec2.RequestSpotFleetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RequestSpotFleetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.RequestSpotFleetOutput)
	return
}

func (d *EC2Double) RequestSpotFleetWithContext(i0 context.Context, i1 *ec2.RequestSpotFleetInput, i2 ...request.Option) (r0 *ec2.RequestSpotFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RequestSpotFleetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.RequestSpotFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeRequestSpotFleetWithContext(ctx context.Context, in *ec2.RequestSpotFleetInput, _ ...request.Option) (*ec2.RequestSpotFleetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RequestSpotFleet cancelled", ctx.Err())
	default:
		return d.RequestSpotFleet(in)
	}
}

func (d *EC2Double) RequestSpotInstances(i0 *ec2.RequestSpotInstancesInput) (r0 *ec2.RequestSpotInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RequestSpotInstances", i0)
	r0, _ = returns[0].(*ec2.RequestSpotInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) RequestSpotInstancesRequest(i0 *ec2.RequestSpotInstancesInput) (r0 *request.Request, r1 *ec2.RequestSpotInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RequestSpotInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.RequestSpotInstancesOutput)
	return
}

func (d *EC2Double) RequestSpotInstancesWithContext(i0 context.Context, i1 *ec2.RequestSpotInstancesInput, i2 ...request.Option) (r0 *ec2.RequestSpotInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RequestSpotInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.RequestSpotInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeRequestSpotInstancesWithContext(ctx context.Context, in *ec2.RequestSpotInstancesInput, _ ...request.Option) (*ec2.RequestSpotInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RequestSpotInstances cancelled", ctx.Err())
	default:
		return d.RequestSpotInstances(in)
	}
}

func (d *EC2Double) ResetEbsDefaultKmsKeyId(i0 *ec2.ResetEbsDefaultKmsKeyIdInput) (r0 *ec2.ResetEbsDefaultKmsKeyIdOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetEbsDefaultKmsKeyId", i0)
	r0, _ = returns[0].(*ec2.ResetEbsDefaultKmsKeyIdOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ResetEbsDefaultKmsKeyIdRequest(i0 *ec2.ResetEbsDefaultKmsKeyIdInput) (r0 *request.Request, r1 *ec2.ResetEbsDefaultKmsKeyIdOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetEbsDefaultKmsKeyIdRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ResetEbsDefaultKmsKeyIdOutput)
	return
}

func (d *EC2Double) ResetEbsDefaultKmsKeyIdWithContext(i0 context.Context, i1 *ec2.ResetEbsDefaultKmsKeyIdInput, i2 ...request.Option) (r0 *ec2.ResetEbsDefaultKmsKeyIdOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetEbsDefaultKmsKeyIdWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ResetEbsDefaultKmsKeyIdOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeResetEbsDefaultKmsKeyIdWithContext(ctx context.Context, in *ec2.ResetEbsDefaultKmsKeyIdInput, _ ...request.Option) (*ec2.ResetEbsDefaultKmsKeyIdOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ResetEbsDefaultKmsKeyId cancelled", ctx.Err())
	default:
		return d.ResetEbsDefaultKmsKeyId(in)
	}
}

func (d *EC2Double) ResetFpgaImageAttribute(i0 *ec2.ResetFpgaImageAttributeInput) (r0 *ec2.ResetFpgaImageAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetFpgaImageAttribute", i0)
	r0, _ = returns[0].(*ec2.ResetFpgaImageAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ResetFpgaImageAttributeRequest(i0 *ec2.ResetFpgaImageAttributeInput) (r0 *request.Request, r1 *ec2.ResetFpgaImageAttributeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetFpgaImageAttributeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ResetFpgaImageAttributeOutput)
	return
}

func (d *EC2Double) ResetFpgaImageAttributeWithContext(i0 context.Context, i1 *ec2.ResetFpgaImageAttributeInput, i2 ...request.Option) (r0 *ec2.ResetFpgaImageAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetFpgaImageAttributeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ResetFpgaImageAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeResetFpgaImageAttributeWithContext(ctx context.Context, in *ec2.ResetFpgaImageAttributeInput, _ ...request.Option) (*ec2.ResetFpgaImageAttributeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ResetFpgaImageAttribute cancelled", ctx.Err())
	default:
		return d.ResetFpgaImageAttribute(in)
	}
}

func (d *EC2Double) ResetImageAttribute(i0 *ec2.ResetImageAttributeInput) (r0 *ec2.ResetImageAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetImageAttribute", i0)
	r0, _ = returns[0].(*ec2.ResetImageAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ResetImageAttributeRequest(i0 *ec2.ResetImageAttributeInput) (r0 *request.Request, r1 *ec2.ResetImageAttributeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetImageAttributeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ResetImageAttributeOutput)
	return
}

func (d *EC2Double) ResetImageAttributeWithContext(i0 context.Context, i1 *ec2.ResetImageAttributeInput, i2 ...request.Option) (r0 *ec2.ResetImageAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetImageAttributeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ResetImageAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeResetImageAttributeWithContext(ctx context.Context, in *ec2.ResetImageAttributeInput, _ ...request.Option) (*ec2.ResetImageAttributeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ResetImageAttribute cancelled", ctx.Err())
	default:
		return d.ResetImageAttribute(in)
	}
}

func (d *EC2Double) ResetInstanceAttribute(i0 *ec2.ResetInstanceAttributeInput) (r0 *ec2.ResetInstanceAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetInstanceAttribute", i0)
	r0, _ = returns[0].(*ec2.ResetInstanceAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ResetInstanceAttributeRequest(i0 *ec2.ResetInstanceAttributeInput) (r0 *request.Request, r1 *ec2.ResetInstanceAttributeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetInstanceAttributeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ResetInstanceAttributeOutput)
	return
}

func (d *EC2Double) ResetInstanceAttributeWithContext(i0 context.Context, i1 *ec2.ResetInstanceAttributeInput, i2 ...request.Option) (r0 *ec2.ResetInstanceAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetInstanceAttributeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ResetInstanceAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeResetInstanceAttributeWithContext(ctx context.Context, in *ec2.ResetInstanceAttributeInput, _ ...request.Option) (*ec2.ResetInstanceAttributeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ResetInstanceAttribute cancelled", ctx.Err())
	default:
		return d.ResetInstanceAttribute(in)
	}
}

func (d *EC2Double) ResetNetworkInterfaceAttribute(i0 *ec2.ResetNetworkInterfaceAttributeInput) (r0 *ec2.ResetNetworkInterfaceAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetNetworkInterfaceAttribute", i0)
	r0, _ = returns[0].(*ec2.ResetNetworkInterfaceAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ResetNetworkInterfaceAttributeRequest(i0 *ec2.ResetNetworkInterfaceAttributeInput) (r0 *request.Request, r1 *ec2.ResetNetworkInterfaceAttributeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetNetworkInterfaceAttributeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ResetNetworkInterfaceAttributeOutput)
	return
}

func (d *EC2Double) ResetNetworkInterfaceAttributeWithContext(i0 context.Context, i1 *ec2.ResetNetworkInterfaceAttributeInput, i2 ...request.Option) (r0 *ec2.ResetNetworkInterfaceAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetNetworkInterfaceAttributeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ResetNetworkInterfaceAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeResetNetworkInterfaceAttributeWithContext(ctx context.Context, in *ec2.ResetNetworkInterfaceAttributeInput, _ ...request.Option) (*ec2.ResetNetworkInterfaceAttributeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ResetNetworkInterfaceAttribute cancelled", ctx.Err())
	default:
		return d.ResetNetworkInterfaceAttribute(in)
	}
}

func (d *EC2Double) ResetSnapshotAttribute(i0 *ec2.ResetSnapshotAttributeInput) (r0 *ec2.ResetSnapshotAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetSnapshotAttribute", i0)
	r0, _ = returns[0].(*ec2.ResetSnapshotAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) ResetSnapshotAttributeRequest(i0 *ec2.ResetSnapshotAttributeInput) (r0 *request.Request, r1 *ec2.ResetSnapshotAttributeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetSnapshotAttributeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.ResetSnapshotAttributeOutput)
	return
}

func (d *EC2Double) ResetSnapshotAttributeWithContext(i0 context.Context, i1 *ec2.ResetSnapshotAttributeInput, i2 ...request.Option) (r0 *ec2.ResetSnapshotAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetSnapshotAttributeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.ResetSnapshotAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeResetSnapshotAttributeWithContext(ctx context.Context, in *ec2.ResetSnapshotAttributeInput, _ ...request.Option) (*ec2.ResetSnapshotAttributeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ResetSnapshotAttribute cancelled", ctx.Err())
	default:
		return d.ResetSnapshotAttribute(in)
	}
}

func (d *EC2Double) RestoreAddressToClassic(i0 *ec2.RestoreAddressToClassicInput) (r0 *ec2.RestoreAddressToClassicOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreAddressToClassic", i0)
	r0, _ = returns[0].(*ec2.RestoreAddressToClassicOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) RestoreAddressToClassicRequest(i0 *ec2.RestoreAddressToClassicInput) (r0 *request.Request, r1 *ec2.RestoreAddressToClassicOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreAddressToClassicRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.RestoreAddressToClassicOutput)
	return
}

func (d *EC2Double) RestoreAddressToClassicWithContext(i0 context.Context, i1 *ec2.RestoreAddressToClassicInput, i2 ...request.Option) (r0 *ec2.RestoreAddressToClassicOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreAddressToClassicWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.RestoreAddressToClassicOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeRestoreAddressToClassicWithContext(ctx context.Context, in *ec2.RestoreAddressToClassicInput, _ ...request.Option) (*ec2.RestoreAddressToClassicOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RestoreAddressToClassic cancelled", ctx.Err())
	default:
		return d.RestoreAddressToClassic(in)
	}
}

func (d *EC2Double) RevokeClientVpnIngress(i0 *ec2.RevokeClientVpnIngressInput) (r0 *ec2.RevokeClientVpnIngressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeClientVpnIngress", i0)
	r0, _ = returns[0].(*ec2.RevokeClientVpnIngressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) RevokeClientVpnIngressRequest(i0 *ec2.RevokeClientVpnIngressInput) (r0 *request.Request, r1 *ec2.RevokeClientVpnIngressOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeClientVpnIngressRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.RevokeClientVpnIngressOutput)
	return
}

func (d *EC2Double) RevokeClientVpnIngressWithContext(i0 context.Context, i1 *ec2.RevokeClientVpnIngressInput, i2 ...request.Option) (r0 *ec2.RevokeClientVpnIngressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeClientVpnIngressWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.RevokeClientVpnIngressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeRevokeClientVpnIngressWithContext(ctx context.Context, in *ec2.RevokeClientVpnIngressInput, _ ...request.Option) (*ec2.RevokeClientVpnIngressOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RevokeClientVpnIngress cancelled", ctx.Err())
	default:
		return d.RevokeClientVpnIngress(in)
	}
}

func (d *EC2Double) RevokeSecurityGroupEgress(i0 *ec2.RevokeSecurityGroupEgressInput) (r0 *ec2.RevokeSecurityGroupEgressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeSecurityGroupEgress", i0)
	r0, _ = returns[0].(*ec2.RevokeSecurityGroupEgressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) RevokeSecurityGroupEgressRequest(i0 *ec2.RevokeSecurityGroupEgressInput) (r0 *request.Request, r1 *ec2.RevokeSecurityGroupEgressOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeSecurityGroupEgressRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.RevokeSecurityGroupEgressOutput)
	return
}

func (d *EC2Double) RevokeSecurityGroupEgressWithContext(i0 context.Context, i1 *ec2.RevokeSecurityGroupEgressInput, i2 ...request.Option) (r0 *ec2.RevokeSecurityGroupEgressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeSecurityGroupEgressWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.RevokeSecurityGroupEgressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeRevokeSecurityGroupEgressWithContext(ctx context.Context, in *ec2.RevokeSecurityGroupEgressInput, _ ...request.Option) (*ec2.RevokeSecurityGroupEgressOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RevokeSecurityGroupEgress cancelled", ctx.Err())
	default:
		return d.RevokeSecurityGroupEgress(in)
	}
}

func (d *EC2Double) RevokeSecurityGroupIngress(i0 *ec2.RevokeSecurityGroupIngressInput) (r0 *ec2.RevokeSecurityGroupIngressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeSecurityGroupIngress", i0)
	r0, _ = returns[0].(*ec2.RevokeSecurityGroupIngressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) RevokeSecurityGroupIngressRequest(i0 *ec2.RevokeSecurityGroupIngressInput) (r0 *request.Request, r1 *ec2.RevokeSecurityGroupIngressOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeSecurityGroupIngressRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.RevokeSecurityGroupIngressOutput)
	return
}

func (d *EC2Double) RevokeSecurityGroupIngressWithContext(i0 context.Context, i1 *ec2.RevokeSecurityGroupIngressInput, i2 ...request.Option) (r0 *ec2.RevokeSecurityGroupIngressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeSecurityGroupIngressWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.RevokeSecurityGroupIngressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeRevokeSecurityGroupIngressWithContext(ctx context.Context, in *ec2.RevokeSecurityGroupIngressInput, _ ...request.Option) (*ec2.RevokeSecurityGroupIngressOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RevokeSecurityGroupIngress cancelled", ctx.Err())
	default:
		return d.RevokeSecurityGroupIngress(in)
	}
}

func (d *EC2Double) RunInstances(i0 *ec2.RunInstancesInput) (r0 *ec2.Reservation, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RunInstances", i0)
	r0, _ = returns[0].(*ec2.Reservation)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) RunInstancesRequest(i0 *ec2.RunInstancesInput) (r0 *request.Request, r1 *ec2.Reservation) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RunInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.Reservation)
	return
}

func (d *EC2Double) RunInstancesWithContext(i0 context.Context, i1 *ec2.RunInstancesInput, i2 ...request.Option) (r0 *ec2.Reservation, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RunInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.Reservation)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeRunInstancesWithContext(ctx context.Context, in *ec2.RunInstancesInput, _ ...request.Option) (*ec2.Reservation, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RunInstances cancelled", ctx.Err())
	default:
		return d.RunInstances(in)
	}
}

func (d *EC2Double) RunScheduledInstances(i0 *ec2.RunScheduledInstancesInput) (r0 *ec2.RunScheduledInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RunScheduledInstances", i0)
	r0, _ = returns[0].(*ec2.RunScheduledInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) RunScheduledInstancesRequest(i0 *ec2.RunScheduledInstancesInput) (r0 *request.Request, r1 *ec2.RunScheduledInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RunScheduledInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.RunScheduledInstancesOutput)
	return
}

func (d *EC2Double) RunScheduledInstancesWithContext(i0 context.Context, i1 *ec2.RunScheduledInstancesInput, i2 ...request.Option) (r0 *ec2.RunScheduledInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RunScheduledInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.RunScheduledInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeRunScheduledInstancesWithContext(ctx context.Context, in *ec2.RunScheduledInstancesInput, _ ...request.Option) (*ec2.RunScheduledInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RunScheduledInstances cancelled", ctx.Err())
	default:
		return d.RunScheduledInstances(in)
	}
}

func (d *EC2Double) SearchLocalGatewayRoutes(i0 *ec2.SearchLocalGatewayRoutesInput) (r0 *ec2.SearchLocalGatewayRoutesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchLocalGatewayRoutes", i0)
	r0, _ = returns[0].(*ec2.SearchLocalGatewayRoutesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) SearchLocalGatewayRoutesRequest(i0 *ec2.SearchLocalGatewayRoutesInput) (r0 *request.Request, r1 *ec2.SearchLocalGatewayRoutesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchLocalGatewayRoutesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.SearchLocalGatewayRoutesOutput)
	return
}

func (d *EC2Double) SearchLocalGatewayRoutesWithContext(i0 context.Context, i1 *ec2.SearchLocalGatewayRoutesInput, i2 ...request.Option) (r0 *ec2.SearchLocalGatewayRoutesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchLocalGatewayRoutesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.SearchLocalGatewayRoutesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeSearchLocalGatewayRoutesWithContext(ctx context.Context, in *ec2.SearchLocalGatewayRoutesInput, _ ...request.Option) (*ec2.SearchLocalGatewayRoutesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SearchLocalGatewayRoutes cancelled", ctx.Err())
	default:
		return d.SearchLocalGatewayRoutes(in)
	}
}

func (d *EC2Double) SearchTransitGatewayMulticastGroups(i0 *ec2.SearchTransitGatewayMulticastGroupsInput) (r0 *ec2.SearchTransitGatewayMulticastGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchTransitGatewayMulticastGroups", i0)
	r0, _ = returns[0].(*ec2.SearchTransitGatewayMulticastGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) SearchTransitGatewayMulticastGroupsRequest(i0 *ec2.SearchTransitGatewayMulticastGroupsInput) (r0 *request.Request, r1 *ec2.SearchTransitGatewayMulticastGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchTransitGatewayMulticastGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.SearchTransitGatewayMulticastGroupsOutput)
	return
}

func (d *EC2Double) SearchTransitGatewayMulticastGroupsWithContext(i0 context.Context, i1 *ec2.SearchTransitGatewayMulticastGroupsInput, i2 ...request.Option) (r0 *ec2.SearchTransitGatewayMulticastGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchTransitGatewayMulticastGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.SearchTransitGatewayMulticastGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeSearchTransitGatewayMulticastGroupsWithContext(ctx context.Context, in *ec2.SearchTransitGatewayMulticastGroupsInput, _ ...request.Option) (*ec2.SearchTransitGatewayMulticastGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SearchTransitGatewayMulticastGroups cancelled", ctx.Err())
	default:
		return d.SearchTransitGatewayMulticastGroups(in)
	}
}

func (d *EC2Double) SearchTransitGatewayRoutes(i0 *ec2.SearchTransitGatewayRoutesInput) (r0 *ec2.SearchTransitGatewayRoutesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchTransitGatewayRoutes", i0)
	r0, _ = returns[0].(*ec2.SearchTransitGatewayRoutesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) SearchTransitGatewayRoutesRequest(i0 *ec2.SearchTransitGatewayRoutesInput) (r0 *request.Request, r1 *ec2.SearchTransitGatewayRoutesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchTransitGatewayRoutesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.SearchTransitGatewayRoutesOutput)
	return
}

func (d *EC2Double) SearchTransitGatewayRoutesWithContext(i0 context.Context, i1 *ec2.SearchTransitGatewayRoutesInput, i2 ...request.Option) (r0 *ec2.SearchTransitGatewayRoutesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchTransitGatewayRoutesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.SearchTransitGatewayRoutesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeSearchTransitGatewayRoutesWithContext(ctx context.Context, in *ec2.SearchTransitGatewayRoutesInput, _ ...request.Option) (*ec2.SearchTransitGatewayRoutesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SearchTransitGatewayRoutes cancelled", ctx.Err())
	default:
		return d.SearchTransitGatewayRoutes(in)
	}
}

func (d *EC2Double) SendDiagnosticInterrupt(i0 *ec2.SendDiagnosticInterruptInput) (r0 *ec2.SendDiagnosticInterruptOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendDiagnosticInterrupt", i0)
	r0, _ = returns[0].(*ec2.SendDiagnosticInterruptOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) SendDiagnosticInterruptRequest(i0 *ec2.SendDiagnosticInterruptInput) (r0 *request.Request, r1 *ec2.SendDiagnosticInterruptOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendDiagnosticInterruptRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.SendDiagnosticInterruptOutput)
	return
}

func (d *EC2Double) SendDiagnosticInterruptWithContext(i0 context.Context, i1 *ec2.SendDiagnosticInterruptInput, i2 ...request.Option) (r0 *ec2.SendDiagnosticInterruptOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendDiagnosticInterruptWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.SendDiagnosticInterruptOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeSendDiagnosticInterruptWithContext(ctx context.Context, in *ec2.SendDiagnosticInterruptInput, _ ...request.Option) (*ec2.SendDiagnosticInterruptOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SendDiagnosticInterrupt cancelled", ctx.Err())
	default:
		return d.SendDiagnosticInterrupt(in)
	}
}

func (d *EC2Double) StartInstances(i0 *ec2.StartInstancesInput) (r0 *ec2.StartInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartInstances", i0)
	r0, _ = returns[0].(*ec2.StartInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) StartInstancesRequest(i0 *ec2.StartInstancesInput) (r0 *request.Request, r1 *ec2.StartInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.StartInstancesOutput)
	return
}

func (d *EC2Double) StartInstancesWithContext(i0 context.Context, i1 *ec2.StartInstancesInput, i2 ...request.Option) (r0 *ec2.StartInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.StartInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeStartInstancesWithContext(ctx context.Context, in *ec2.StartInstancesInput, _ ...request.Option) (*ec2.StartInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartInstances cancelled", ctx.Err())
	default:
		return d.StartInstances(in)
	}
}

func (d *EC2Double) StartVpcEndpointServicePrivateDnsVerification(i0 *ec2.StartVpcEndpointServicePrivateDnsVerificationInput) (r0 *ec2.StartVpcEndpointServicePrivateDnsVerificationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartVpcEndpointServicePrivateDnsVerification", i0)
	r0, _ = returns[0].(*ec2.StartVpcEndpointServicePrivateDnsVerificationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) StartVpcEndpointServicePrivateDnsVerificationRequest(i0 *ec2.StartVpcEndpointServicePrivateDnsVerificationInput) (r0 *request.Request, r1 *ec2.StartVpcEndpointServicePrivateDnsVerificationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartVpcEndpointServicePrivateDnsVerificationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.StartVpcEndpointServicePrivateDnsVerificationOutput)
	return
}

func (d *EC2Double) StartVpcEndpointServicePrivateDnsVerificationWithContext(i0 context.Context, i1 *ec2.StartVpcEndpointServicePrivateDnsVerificationInput, i2 ...request.Option) (r0 *ec2.StartVpcEndpointServicePrivateDnsVerificationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartVpcEndpointServicePrivateDnsVerificationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.StartVpcEndpointServicePrivateDnsVerificationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeStartVpcEndpointServicePrivateDnsVerificationWithContext(ctx context.Context, in *ec2.StartVpcEndpointServicePrivateDnsVerificationInput, _ ...request.Option) (*ec2.StartVpcEndpointServicePrivateDnsVerificationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartVpcEndpointServicePrivateDnsVerification cancelled", ctx.Err())
	default:
		return d.StartVpcEndpointServicePrivateDnsVerification(in)
	}
}

func (d *EC2Double) StopInstances(i0 *ec2.StopInstancesInput) (r0 *ec2.StopInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopInstances", i0)
	r0, _ = returns[0].(*ec2.StopInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) StopInstancesRequest(i0 *ec2.StopInstancesInput) (r0 *request.Request, r1 *ec2.StopInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.StopInstancesOutput)
	return
}

func (d *EC2Double) StopInstancesWithContext(i0 context.Context, i1 *ec2.StopInstancesInput, i2 ...request.Option) (r0 *ec2.StopInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.StopInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeStopInstancesWithContext(ctx context.Context, in *ec2.StopInstancesInput, _ ...request.Option) (*ec2.StopInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopInstances cancelled", ctx.Err())
	default:
		return d.StopInstances(in)
	}
}

func (d *EC2Double) TerminateClientVpnConnections(i0 *ec2.TerminateClientVpnConnectionsInput) (r0 *ec2.TerminateClientVpnConnectionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TerminateClientVpnConnections", i0)
	r0, _ = returns[0].(*ec2.TerminateClientVpnConnectionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) TerminateClientVpnConnectionsRequest(i0 *ec2.TerminateClientVpnConnectionsInput) (r0 *request.Request, r1 *ec2.TerminateClientVpnConnectionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TerminateClientVpnConnectionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.TerminateClientVpnConnectionsOutput)
	return
}

func (d *EC2Double) TerminateClientVpnConnectionsWithContext(i0 context.Context, i1 *ec2.TerminateClientVpnConnectionsInput, i2 ...request.Option) (r0 *ec2.TerminateClientVpnConnectionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TerminateClientVpnConnectionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.TerminateClientVpnConnectionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeTerminateClientVpnConnectionsWithContext(ctx context.Context, in *ec2.TerminateClientVpnConnectionsInput, _ ...request.Option) (*ec2.TerminateClientVpnConnectionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TerminateClientVpnConnections cancelled", ctx.Err())
	default:
		return d.TerminateClientVpnConnections(in)
	}
}

func (d *EC2Double) TerminateInstances(i0 *ec2.TerminateInstancesInput) (r0 *ec2.TerminateInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TerminateInstances", i0)
	r0, _ = returns[0].(*ec2.TerminateInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) TerminateInstancesRequest(i0 *ec2.TerminateInstancesInput) (r0 *request.Request, r1 *ec2.TerminateInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TerminateInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.TerminateInstancesOutput)
	return
}

func (d *EC2Double) TerminateInstancesWithContext(i0 context.Context, i1 *ec2.TerminateInstancesInput, i2 ...request.Option) (r0 *ec2.TerminateInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TerminateInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.TerminateInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeTerminateInstancesWithContext(ctx context.Context, in *ec2.TerminateInstancesInput, _ ...request.Option) (*ec2.TerminateInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TerminateInstances cancelled", ctx.Err())
	default:
		return d.TerminateInstances(in)
	}
}

func (d *EC2Double) UnassignIpv6Addresses(i0 *ec2.UnassignIpv6AddressesInput) (r0 *ec2.UnassignIpv6AddressesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnassignIpv6Addresses", i0)
	r0, _ = returns[0].(*ec2.UnassignIpv6AddressesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) UnassignIpv6AddressesRequest(i0 *ec2.UnassignIpv6AddressesInput) (r0 *request.Request, r1 *ec2.UnassignIpv6AddressesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnassignIpv6AddressesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.UnassignIpv6AddressesOutput)
	return
}

func (d *EC2Double) UnassignIpv6AddressesWithContext(i0 context.Context, i1 *ec2.UnassignIpv6AddressesInput, i2 ...request.Option) (r0 *ec2.UnassignIpv6AddressesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnassignIpv6AddressesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.UnassignIpv6AddressesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeUnassignIpv6AddressesWithContext(ctx context.Context, in *ec2.UnassignIpv6AddressesInput, _ ...request.Option) (*ec2.UnassignIpv6AddressesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UnassignIpv6Addresses cancelled", ctx.Err())
	default:
		return d.UnassignIpv6Addresses(in)
	}
}

func (d *EC2Double) UnassignPrivateIpAddresses(i0 *ec2.UnassignPrivateIpAddressesInput) (r0 *ec2.UnassignPrivateIpAddressesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnassignPrivateIpAddresses", i0)
	r0, _ = returns[0].(*ec2.UnassignPrivateIpAddressesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) UnassignPrivateIpAddressesRequest(i0 *ec2.UnassignPrivateIpAddressesInput) (r0 *request.Request, r1 *ec2.UnassignPrivateIpAddressesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnassignPrivateIpAddressesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.UnassignPrivateIpAddressesOutput)
	return
}

func (d *EC2Double) UnassignPrivateIpAddressesWithContext(i0 context.Context, i1 *ec2.UnassignPrivateIpAddressesInput, i2 ...request.Option) (r0 *ec2.UnassignPrivateIpAddressesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnassignPrivateIpAddressesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.UnassignPrivateIpAddressesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeUnassignPrivateIpAddressesWithContext(ctx context.Context, in *ec2.UnassignPrivateIpAddressesInput, _ ...request.Option) (*ec2.UnassignPrivateIpAddressesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UnassignPrivateIpAddresses cancelled", ctx.Err())
	default:
		return d.UnassignPrivateIpAddresses(in)
	}
}

func (d *EC2Double) UnmonitorInstances(i0 *ec2.UnmonitorInstancesInput) (r0 *ec2.UnmonitorInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnmonitorInstances", i0)
	r0, _ = returns[0].(*ec2.UnmonitorInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) UnmonitorInstancesRequest(i0 *ec2.UnmonitorInstancesInput) (r0 *request.Request, r1 *ec2.UnmonitorInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnmonitorInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.UnmonitorInstancesOutput)
	return
}

func (d *EC2Double) UnmonitorInstancesWithContext(i0 context.Context, i1 *ec2.UnmonitorInstancesInput, i2 ...request.Option) (r0 *ec2.UnmonitorInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnmonitorInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.UnmonitorInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeUnmonitorInstancesWithContext(ctx context.Context, in *ec2.UnmonitorInstancesInput, _ ...request.Option) (*ec2.UnmonitorInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UnmonitorInstances cancelled", ctx.Err())
	default:
		return d.UnmonitorInstances(in)
	}
}

func (d *EC2Double) UpdateSecurityGroupRuleDescriptionsEgress(i0 *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput) (r0 *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSecurityGroupRuleDescriptionsEgress", i0)
	r0, _ = returns[0].(*ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) UpdateSecurityGroupRuleDescriptionsEgressRequest(i0 *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput) (r0 *request.Request, r1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSecurityGroupRuleDescriptionsEgressRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput)
	return
}

func (d *EC2Double) UpdateSecurityGroupRuleDescriptionsEgressWithContext(i0 context.Context, i1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput, i2 ...request.Option) (r0 *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSecurityGroupRuleDescriptionsEgressWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeUpdateSecurityGroupRuleDescriptionsEgressWithContext(ctx context.Context, in *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput, _ ...request.Option) (*ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateSecurityGroupRuleDescriptionsEgress cancelled", ctx.Err())
	default:
		return d.UpdateSecurityGroupRuleDescriptionsEgress(in)
	}
}

func (d *EC2Double) UpdateSecurityGroupRuleDescriptionsIngress(i0 *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput) (r0 *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSecurityGroupRuleDescriptionsIngress", i0)
	r0, _ = returns[0].(*ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) UpdateSecurityGroupRuleDescriptionsIngressRequest(i0 *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput) (r0 *request.Request, r1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSecurityGroupRuleDescriptionsIngressRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput)
	return
}

func (d *EC2Double) UpdateSecurityGroupRuleDescriptionsIngressWithContext(i0 context.Context, i1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput, i2 ...request.Option) (r0 *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSecurityGroupRuleDescriptionsIngressWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeUpdateSecurityGroupRuleDescriptionsIngressWithContext(ctx context.Context, in *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput, _ ...request.Option) (*ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateSecurityGroupRuleDescriptionsIngress cancelled", ctx.Err())
	default:
		return d.UpdateSecurityGroupRuleDescriptionsIngress(in)
	}
}

func (d *EC2Double) WaitUntilBundleTaskComplete(i0 *ec2.DescribeBundleTasksInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilBundleTaskComplete", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilBundleTaskComplete(in *ec2.DescribeBundleTasksInput) error {
	return d.WaitUntil("BundleTaskComplete", waiters, in)
}

func (d *EC2Double) WaitUntilBundleTaskCompleteWithContext(i0 context.Context, i1 *ec2.DescribeBundleTasksInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilBundleTaskCompleteWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilBundleTaskCompleteWithContext(ctx context.Context, in *ec2.DescribeBundleTasksInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("BundleTaskComplete", waiters, ctx, in, waitOption...)
}

func (d *EC2Double) WaitUntilConversionTaskCancelled(i0 *ec2.DescribeConversionTasksInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilConversionTaskCancelled", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilConversionTaskCancelled(in *ec2.DescribeConversionTasksInput) error {
	return d.WaitUntil("ConversionTaskCancelled", waiters, in)
}

func (d *EC2Double) WaitUntilConversionTaskCancelledWithContext(i0 context.Context, i1 *ec2.DescribeConversionTasksInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilConversionTaskCancelledWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilConversionTaskCancelledWithContext(ctx context.Context, in *ec2.DescribeConversionTasksInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("ConversionTaskCancelled", waiters, ctx, in, waitOption...)
}

func (d *EC2Double) WaitUntilConversionTaskCompleted(i0 *ec2.DescribeConversionTasksInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilConversionTaskCompleted", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilConversionTaskCompleted(in *ec2.DescribeConversionTasksInput) error {
	return d.WaitUntil("ConversionTaskCompleted", waiters, in)
}

func (d *EC2Double) WaitUntilConversionTaskCompletedWithContext(i0 context.Context, i1 *ec2.DescribeConversionTasksInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilConversionTaskCompletedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilConversionTaskCompletedWithContext(ctx context.Context, in *ec2.DescribeConversionTasksInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("ConversionTaskCompleted", waiters, ctx, in, waitOption...)
}

func (d *EC2Double) WaitUntilConversionTaskDeleted(i0 *ec2.DescribeConversionTasksInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilConversionTaskDeleted", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilConversionTaskDeleted(in *ec2.DescribeConversionTasksInput) error {
	return d.WaitUntil("ConversionTaskDeleted", waiters, in)
}

func (d *EC2Double) WaitUntilConversionTaskDeletedWithContext(i0 context.Context, i1 *ec2.DescribeConversionTasksInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilConversionTaskDeletedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilConversionTaskDeletedWithContext(ctx context.Context, in *ec2.DescribeConversionTasksInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("ConversionTaskDeleted", waiters, ctx, in, waitOption...)
}

func (d *EC2Double) WaitUntilCustomerGatewayAvailable(i0 *ec2.DescribeCustomerGatewaysInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilCustomerGatewayAvailable", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilCustomerGatewayAvailable(in *ec2.DescribeCustomerGatewaysInput) error {
	return d.WaitUntil("CustomerGatewayAvailable", waiters, in)
}

func (d *EC2Double) WaitUntilCustomerGatewayAvailableWithContext(i0 context.Context, i1 *ec2.DescribeCustomerGatewaysInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilCustomerGatewayAvailableWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilCustomerGatewayAvailableWithContext(ctx context.Context, in *ec2.DescribeCustomerGatewaysInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("CustomerGatewayAvailable", waiters, ctx, in, waitOption...)
}

func (d *EC2Double) WaitUntilExportTaskCancelled(i0 *ec2.DescribeExportTasksInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilExportTaskCancelled", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilExportTaskCancelled(in *ec2.DescribeExportTasksInput) error {
	return d.WaitUntil("ExportTaskCancelled", waiters, in)
}

func (d *EC2Double) WaitUntilExportTaskCancelledWithContext(i0 context.Context, i1 *ec2.DescribeExportTasksInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilExportTaskCancelledWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilExportTaskCancelledWithContext(ctx context.Context, in *ec2.DescribeExportTasksInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("ExportTaskCancelled", waiters, ctx, in, waitOption...)
}

func (d *EC2Double) WaitUntilExportTaskCompleted(i0 *ec2.DescribeExportTasksInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilExportTaskCompleted", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilExportTaskCompleted(in *ec2.DescribeExportTasksInput) error {
	return d.WaitUntil("ExportTaskCompleted", waiters, in)
}

func (d *EC2Double) WaitUntilExportTaskCompletedWithContext(i0 context.Context, i1 *ec2.DescribeExportTasksInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilExportTaskCompletedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilExportTaskCompletedWithContext(ctx context.Context, in *ec2.DescribeExportTasksInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("ExportTaskCompleted", waiters, ctx, in, waitOption...)
}

func (d *EC2Double) WaitUntilImageAvailable(i0 *ec2.DescribeImagesInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilImageAvailable", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilImageAvailable(in *ec2.DescribeImagesInput) error {
	return d.WaitUntil("ImageAvailable", waiters, in)
}

func (d *EC2Double) WaitUntilImageAvailableWithContext(i0 context.Context, i1 *ec2.DescribeImagesInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilImageAvailableWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilImageAvailableWithContext(ctx context.Context, in *ec2.DescribeImagesInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("ImageAvailable", waiters, ctx, in, waitOption...)
}

func (d *EC2Double) WaitUntilImageExists(i0 *ec2.DescribeImagesInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilImageExists", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilImageExists(in *ec2.DescribeImagesInput) error {
	return d.WaitUntil("ImageExists", waiters, in)
}

func (d *EC2Double) WaitUntilImageExistsWithContext(i0 context.Context, i1 *ec2.DescribeImagesInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilImageExistsWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilImageExistsWithContext(ctx context.Context, in *ec2.DescribeImagesInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("ImageExists", waiters, ctx, in, waitOption...)
}

func (d *EC2Double) WaitUntilInstanceExists(i0 *ec2.DescribeInstancesInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilInstanceExists", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilInstanceExists(in *ec2.DescribeInstancesInput) error {
	return d.WaitUntil("InstanceExists", waiters, in)
}

func (d *EC2Double) WaitUntilInstanceExistsWithContext(i0 context.Context, i1 *ec2.DescribeInstancesInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilInstanceExistsWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilInstanceExistsWithContext(ctx context.Context, in *ec2.DescribeInstancesInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("InstanceExists", waiters, ctx, in, waitOption...)
}

func (d *EC2Double) WaitUntilInstanceRunning(i0 *ec2.DescribeInstancesInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilInstanceRunning", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilInstanceRunning(in *ec2.DescribeInstancesInput) error {
	return d.WaitUntil("InstanceRunning", waiters, in)
}

func (d *EC2Double) WaitUntilInstanceRunningWithContext(i0 context.Context, i1 *ec2.DescribeInstancesInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilInstanceRunningWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilInstanceRunningWithContext(ctx context.Context, in *ec2.DescribeInstancesInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("InstanceRunning", waiters, ctx, in, waitOption...)
}

func (d *EC2Double) WaitUntilInstanceStatusOk(i0 *ec2.DescribeInstanceStatusInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilInstanceStatusOk", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilInstanceStatusOk(in *ec2.DescribeInstanceStatusInput) error {
	return d.WaitUntil("InstanceStatusOk", waiters, in)
}

func (d *EC2Double) WaitUntilInstanceStatusOkWithContext(i0 context.Context, i1 *ec2.DescribeInstanceStatusInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilInstanceStatusOkWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilInstanceStatusOkWithContext(ctx context.Context, in *ec2.DescribeInstanceStatusInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("InstanceStatusOk", waiters, ctx, in, waitOption...)
}

func (d *EC2Double) WaitUntilInstanceStopped(i0 *ec2.DescribeInstancesInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilInstanceStopped", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilInstanceStopped(in *ec2.DescribeInstancesInput) error {
	return d.WaitUntil("InstanceStopped", waiters, in)
}

func (d *EC2Double) WaitUntilInstanceStoppedWithContext(i0 context.Context, i1 *ec2.DescribeInstancesInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilInstanceStoppedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilInstanceStoppedWithContext(ctx context.Context, in *ec2.DescribeInstancesInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("InstanceStopped", waiters, ctx, in, waitOption...)
}

func (d *EC2Double) WaitUntilInstanceTerminated(i0 *ec2.DescribeInstancesInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilInstanceTerminated", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilInstanceTerminated(in *ec2.DescribeInstancesInput) error {
	return d.WaitUntil("InstanceTerminated", waiters, in)
}

func (d *EC2Double) WaitUntilInstanceTerminatedWithContext(i0 context.Context, i1 *ec2.DescribeInstancesInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilInstanceTerminatedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilInstanceTerminatedWithContext(ctx context.Context, in *ec2.DescribeInstancesInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("InstanceTerminated", waiters, ctx, in, waitOption...)
}

func (d *EC2Double) WaitUntilKeyPairExists(i0 *ec2.DescribeKeyPairsInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilKeyPairExists", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilKeyPairExists(in *ec2.DescribeKeyPairsInput) error {
	return d.WaitUntil("KeyPairExists", waiters, in)
}

func (d *EC2Double) WaitUntilKeyPairExistsWithContext(i0 context.Context, i1 *ec2.DescribeKeyPairsInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilKeyPairExistsWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilKeyPairExistsWithContext(ctx context.Context, in *ec2.DescribeKeyPairsInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("KeyPairExists", waiters, ctx, in, waitOption...)
}

func (d *EC2Double) WaitUntilNatGatewayAvailable(i0 *ec2.DescribeNatGatewaysInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilNatGatewayAvailable", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilNatGatewayAvailable(in *ec2.DescribeNatGatewaysInput) error {
	return d.WaitUntil("NatGatewayAvailable", waiters, in)
}

func (d *EC2Double) WaitUntilNatGatewayAvailableWithContext(i0 context.Context, i1 *ec2.DescribeNatGatewaysInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilNatGatewayAvailableWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilNatGatewayAvailableWithContext(ctx context.Context, in *ec2.DescribeNatGatewaysInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("NatGatewayAvailable", waiters, ctx, in, waitOption...)
}

func (d *EC2Double) WaitUntilNetworkInterfaceAvailable(i0 *ec2.DescribeNetworkInterfacesInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilNetworkInterfaceAvailable", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilNetworkInterfaceAvailable(in *ec2.DescribeNetworkInterfacesInput) error {
	return d.WaitUntil("NetworkInterfaceAvailable", waiters, in)
}

func (d *EC2Double) WaitUntilNetworkInterfaceAvailableWithContext(i0 context.Context, i1 *ec2.DescribeNetworkInterfacesInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilNetworkInterfaceAvailableWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilNetworkInterfaceAvailableWithContext(ctx context.Context, in *ec2.DescribeNetworkInterfacesInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("NetworkInterfaceAvailable", waiters, ctx, in, waitOption...)
}

func (d *EC2Double) WaitUntilPasswordDataAvailable(i0 *ec2.GetPasswordDataInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilPasswordDataAvailable", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilPasswordDataAvailable(in *ec2.GetPasswordDataInput) error {
	return d.WaitUntil("PasswordDataAvailable", waiters, in)
}

func (d *EC2Double) WaitUntilPasswordDataAvailableWithContext(i0 context.Context, i1 *ec2.GetPasswordDataInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilPasswordDataAvailableWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilPasswordDataAvailableWithContext(ctx context.Context, in *ec2.GetPasswordDataInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("PasswordDataAvailable", waiters, ctx, in, waitOption...)
}

func (d *EC2Double) WaitUntilSecurityGroupExists(i0 *ec2.DescribeSecurityGroupsInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilSecurityGroupExists", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilSecurityGroupExists(in *ec2.DescribeSecurityGroupsInput) error {
	return d.WaitUntil("SecurityGroupExists", waiters, in)
}

func (d *EC2Double) WaitUntilSecurityGroupExistsWithContext(i0 context.Context, i1 *ec2.DescribeSecurityGroupsInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilSecurityGroupExistsWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilSecurityGroupExistsWithContext(ctx context.Context, in *ec2.DescribeSecurityGroupsInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("SecurityGroupExists", waiters, ctx, in, waitOption...)
}

func (d *EC2Double) WaitUntilSnapshotCompleted(i0 *ec2.DescribeSnapshotsInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilSnapshotCompleted", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilSnapshotCompleted(in *ec2.DescribeSnapshotsInput) error {
	return d.WaitUntil("SnapshotCompleted", waiters, in)
}

func (d *EC2Double) WaitUntilSnapshotCompletedWithContext(i0 context.Context, i1 *ec2.DescribeSnapshotsInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilSnapshotCompletedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilSnapshotCompletedWithContext(ctx context.Context, in *ec2.DescribeSnapshotsInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("SnapshotCompleted", waiters, ctx, in, waitOption...)
}

func (d *EC2Double) WaitUntilSpotInstanceRequestFulfilled(i0 *ec2.DescribeSpotInstanceRequestsInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilSpotInstanceRequestFulfilled", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilSpotInstanceRequestFulfilled(in *ec2.DescribeSpotInstanceRequestsInput) error {
	return d.WaitUntil("SpotInstanceRequestFulfilled", waiters, in)
}

func (d *EC2Double) WaitUntilSpotInstanceRequestFulfilledWithContext(i0 context.Context, i1 *ec2.DescribeSpotInstanceRequestsInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilSpotInstanceRequestFulfilledWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilSpotInstanceRequestFulfilledWithContext(ctx context.Context, in *ec2.DescribeSpotInstanceRequestsInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("SpotInstanceRequestFulfilled", waiters, ctx, in, waitOption...)
}

func (d *EC2Double) WaitUntilSubnetAvailable(i0 *ec2.DescribeSubnetsInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilSubnetAvailable", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilSubnetAvailable(in *ec2.DescribeSubnetsInput) error {
	return d.WaitUntil("SubnetAvailable", waiters, in)
}

func (d *EC2Double) WaitUntilSubnetAvailableWithContext(i0 context.Context, i1 *ec2.DescribeSubnetsInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilSubnetAvailableWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilSubnetAvailableWithContext(ctx context.Context, in *ec2.DescribeSubnetsInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("SubnetAvailable", waiters, ctx, in, waitOption...)
}

func (d *EC2Double) WaitUntilSystemStatusOk(i0 *ec2.DescribeInstanceStatusInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilSystemStatusOk", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilSystemStatusOk(in *ec2.DescribeInstanceStatusInput) error {
	return d.WaitUntil("SystemStatusOk", waiters, in)
}

func (d *EC2Double) WaitUntilSystemStatusOkWithContext(i0 context.Context, i1 *ec2.DescribeInstanceStatusInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilSystemStatusOkWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilSystemStatusOkWithContext(ctx context.Context, in *ec2.DescribeInstanceStatusInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("SystemStatusOk", waiters, ctx, in, waitOption...)
}

func (d *EC2Double) WaitUntilVolumeAvailable(i0 *ec2.DescribeVolumesInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilVolumeAvailable", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilVolumeAvailable(in *ec2.DescribeVolumesInput) error {
	return d.WaitUntil("VolumeAvailable", waiters, in)
}

func (d *EC2Double) WaitUntilVolumeAvailableWithContext(i0 context.Context, i1 *ec2.DescribeVolumesInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilVolumeAvailableWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilVolumeAvailableWithContext(ctx context.Context, in *ec2.DescribeVolumesInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("VolumeAvailable", waiters, ctx, in, waitOption...)
}

func (d *EC2Double) WaitUntilVolumeDeleted(i0 *ec2.DescribeVolumesInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilVolumeDeleted", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilVolumeDeleted(in *ec2.DescribeVolumesInput) error {
	return d.WaitUntil("VolumeDeleted", waiters, in)
}

func (d *EC2Double) WaitUntilVolumeDeletedWithContext(i0 context.Context, i1 *ec2.DescribeVolumesInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilVolumeDeletedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilVolumeDeletedWithContext(ctx context.Context, in *ec2.DescribeVolumesInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("VolumeDeleted", waiters, ctx, in, waitOption...)
}

func (d *EC2Double) WaitUntilVolumeInUse(i0 *ec2.DescribeVolumesInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilVolumeInUse", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilVolumeInUse(in *ec2.DescribeVolumesInput) error {
	return d.WaitUntil("VolumeInUse", waiters, in)
}

func (d *EC2Double) WaitUntilVolumeInUseWithContext(i0 context.Context, i1 *ec2.DescribeVolumesInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilVolumeInUseWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilVolumeInUseWithContext(ctx context.Context, in *ec2.DescribeVolumesInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("VolumeInUse", waiters, ctx, in, waitOption...)
}

func (d *EC2Double) WaitUntilVpcAvailable(i0 *ec2.DescribeVpcsInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilVpcAvailable", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilVpcAvailable(in *ec2.DescribeVpcsInput) error {
	return d.WaitUntil("VpcAvailable", waiters, in)
}

func (d *EC2Double) WaitUntilVpcAvailableWithContext(i0 context.Context, i1 *ec2.DescribeVpcsInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilVpcAvailableWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilVpcAvailableWithContext(ctx context.Context, in *ec2.DescribeVpcsInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("VpcAvailable", waiters, ctx, in, waitOption...)
}

func (d *EC2Double) WaitUntilVpcExists(i0 *ec2.DescribeVpcsInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilVpcExists", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilVpcExists(in *ec2.DescribeVpcsInput) error {
	return d.WaitUntil("VpcExists", waiters, in)
}

func (d *EC2Double) WaitUntilVpcExistsWithContext(i0 context.Context, i1 *ec2.DescribeVpcsInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilVpcExistsWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilVpcExistsWithContext(ctx context.Context, in *ec2.DescribeVpcsInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("VpcExists", waiters, ctx, in, waitOption...)
}

func (d *EC2Double) WaitUntilVpcPeeringConnectionDeleted(i0 *ec2.DescribeVpcPeeringConnectionsInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilVpcPeeringConnectionDeleted", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilVpcPeeringConnectionDeleted(in *ec2.DescribeVpcPeeringConnectionsInput) error {
	return d.WaitUntil("VpcPeeringConnectionDeleted", waiters, in)
}

func (d *EC2Double) WaitUntilVpcPeeringConnectionDeletedWithContext(i0 context.Context, i1 *ec2.DescribeVpcPeeringConnectionsInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilVpcPeeringConnectionDeletedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilVpcPeeringConnectionDeletedWithContext(ctx context.Context, in *ec2.DescribeVpcPeeringConnectionsInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("VpcPeeringConnectionDeleted", waiters, ctx, in, waitOption...)
}

func (d *EC2Double) WaitUntilVpcPeeringConnectionExists(i0 *ec2.DescribeVpcPeeringConnectionsInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilVpcPeeringConnectionExists", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilVpcPeeringConnectionExists(in *ec2.DescribeVpcPeeringConnectionsInput) error {
	return d.WaitUntil("VpcPeeringConnectionExists", waiters, in)
}

func (d *EC2Double) WaitUntilVpcPeeringConnectionExistsWithContext(i0 context.Context, i1 *ec2.DescribeVpcPeeringConnectionsInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilVpcPeeringConnectionExistsWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilVpcPeeringConnectionExistsWithContext(ctx context.Context, in *ec2.DescribeVpcPeeringConnectionsInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("VpcPeeringConnectionExists", waiters, ctx, in, waitOption...)
}

func (d *EC2Double) WaitUntilVpnConnectionAvailable(i0 *ec2.DescribeVpnConnectionsInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilVpnConnectionAvailable", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilVpnConnectionAvailable(in *ec2.DescribeVpnConnectionsInput) error {
	return d.WaitUntil("VpnConnectionAvailable", waiters, in)
}

func (d *EC2Double) WaitUntilVpnConnectionAvailableWithContext(i0 context.Context, i1 *ec2.DescribeVpnConnectionsInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilVpnConnectionAvailableWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilVpnConnectionAvailableWithContext(ctx context.Context, in *ec2.DescribeVpnConnectionsInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("VpnConnectionAvailable", waiters, ctx, in, waitOption...)
}

func (d *EC2Double) WaitUntilVpnConnectionDeleted(i0 *ec2.DescribeVpnConnectionsInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilVpnConnectionDeleted", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilVpnConnectionDeleted(in *ec2.DescribeVpnConnectionsInput) error {
	return d.WaitUntil("VpnConnectionDeleted", waiters, in)
}

func (d *EC2Double) WaitUntilVpnConnectionDeletedWithContext(i0 context.Context, i1 *ec2.DescribeVpnConnectionsInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilVpnConnectionDeletedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EC2Double) fakeWaitUntilVpnConnectionDeletedWithContext(ctx context.Context, in *ec2.DescribeVpnConnectionsInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("VpnConnectionDeleted", waiters, ctx, in, waitOption...)
}

func (d *EC2Double) WithdrawByoipCidr(i0 *ec2.WithdrawByoipCidrInput) (r0 *ec2.WithdrawByoipCidrOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WithdrawByoipCidr", i0)
	r0, _ = returns[0].(*ec2.WithdrawByoipCidrOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) WithdrawByoipCidrRequest(i0 *ec2.WithdrawByoipCidrInput) (r0 *request.Request, r1 *ec2.WithdrawByoipCidrOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WithdrawByoipCidrRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ec2.WithdrawByoipCidrOutput)
	return
}

func (d *EC2Double) WithdrawByoipCidrWithContext(i0 context.Context, i1 *ec2.WithdrawByoipCidrInput, i2 ...request.Option) (r0 *ec2.WithdrawByoipCidrOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WithdrawByoipCidrWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ec2.WithdrawByoipCidrOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EC2Double) fakeWithdrawByoipCidrWithContext(ctx context.Context, in *ec2.WithdrawByoipCidrInput, _ ...request.Option) (*ec2.WithdrawByoipCidrOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "WithdrawByoipCidr cancelled", ctx.Err())
	default:
		return d.WithdrawByoipCidr(in)
	}
}
