// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:11:45+11:00

// Package codebuilddouble provides a TestDouble implementation of codebuildiface.CodeBuildAPI
package codebuilddouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/codebuild"
	"github.com/aws/aws-sdk-go/service/codebuild/codebuildiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// CodeBuildDouble is TestDouble for codebuildiface.CodeBuildAPI
type CodeBuildDouble struct {
	codebuildiface.CodeBuildAPI
	*awsdouble.AWSTestDouble
}

// Constructor for CodeBuildDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *CodeBuildDouble {
	result := &CodeBuildDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*codebuildiface.CodeBuildAPI)(nil), configurators...)
	return result
}

func (d *CodeBuildDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *CodeBuildDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "BatchDeleteBuildsWithContext":
		return m.Fake(d.fakeBatchDeleteBuildsWithContext)

	case "BatchGetBuildsWithContext":
		return m.Fake(d.fakeBatchGetBuildsWithContext)

	case "BatchGetProjectsWithContext":
		return m.Fake(d.fakeBatchGetProjectsWithContext)

	case "BatchGetReportGroupsWithContext":
		return m.Fake(d.fakeBatchGetReportGroupsWithContext)

	case "BatchGetReportsWithContext":
		return m.Fake(d.fakeBatchGetReportsWithContext)

	case "CreateProjectWithContext":
		return m.Fake(d.fakeCreateProjectWithContext)

	case "CreateReportGroupWithContext":
		return m.Fake(d.fakeCreateReportGroupWithContext)

	case "CreateWebhookWithContext":
		return m.Fake(d.fakeCreateWebhookWithContext)

	case "DeleteProjectWithContext":
		return m.Fake(d.fakeDeleteProjectWithContext)

	case "DeleteReportGroupWithContext":
		return m.Fake(d.fakeDeleteReportGroupWithContext)

	case "DeleteReportWithContext":
		return m.Fake(d.fakeDeleteReportWithContext)

	case "DeleteResourcePolicyWithContext":
		return m.Fake(d.fakeDeleteResourcePolicyWithContext)

	case "DeleteSourceCredentialsWithContext":
		return m.Fake(d.fakeDeleteSourceCredentialsWithContext)

	case "DeleteWebhookWithContext":
		return m.Fake(d.fakeDeleteWebhookWithContext)

	case "DescribeTestCasesWithContext":
		return m.Fake(d.fakeDescribeTestCasesWithContext)

	case "GetResourcePolicyWithContext":
		return m.Fake(d.fakeGetResourcePolicyWithContext)

	case "ImportSourceCredentialsWithContext":
		return m.Fake(d.fakeImportSourceCredentialsWithContext)

	case "InvalidateProjectCacheWithContext":
		return m.Fake(d.fakeInvalidateProjectCacheWithContext)

	case "ListBuildsForProjectWithContext":
		return m.Fake(d.fakeListBuildsForProjectWithContext)

	case "ListBuildsWithContext":
		return m.Fake(d.fakeListBuildsWithContext)

	case "ListCuratedEnvironmentImagesWithContext":
		return m.Fake(d.fakeListCuratedEnvironmentImagesWithContext)

	case "ListProjectsWithContext":
		return m.Fake(d.fakeListProjectsWithContext)

	case "ListReportGroupsWithContext":
		return m.Fake(d.fakeListReportGroupsWithContext)

	case "ListReportsForReportGroupWithContext":
		return m.Fake(d.fakeListReportsForReportGroupWithContext)

	case "ListReportsWithContext":
		return m.Fake(d.fakeListReportsWithContext)

	case "ListSharedProjectsWithContext":
		return m.Fake(d.fakeListSharedProjectsWithContext)

	case "ListSharedReportGroupsWithContext":
		return m.Fake(d.fakeListSharedReportGroupsWithContext)

	case "ListSourceCredentialsWithContext":
		return m.Fake(d.fakeListSourceCredentialsWithContext)

	case "PutResourcePolicyWithContext":
		return m.Fake(d.fakePutResourcePolicyWithContext)

	case "StartBuildWithContext":
		return m.Fake(d.fakeStartBuildWithContext)

	case "StopBuildWithContext":
		return m.Fake(d.fakeStopBuildWithContext)

	case "UpdateProjectWithContext":
		return m.Fake(d.fakeUpdateProjectWithContext)

	case "UpdateReportGroupWithContext":
		return m.Fake(d.fakeUpdateReportGroupWithContext)

	case "UpdateWebhookWithContext":
		return m.Fake(d.fakeUpdateWebhookWithContext)

	default:
		return nil
	}
}

func (d *CodeBuildDouble) BatchDeleteBuilds(i0 *codebuild.BatchDeleteBuildsInput) (r0 *codebuild.BatchDeleteBuildsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDeleteBuilds", i0)
	r0, _ = returns[0].(*codebuild.BatchDeleteBuildsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) BatchDeleteBuildsRequest(i0 *codebuild.BatchDeleteBuildsInput) (r0 *request.Request, r1 *codebuild.BatchDeleteBuildsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDeleteBuildsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codebuild.BatchDeleteBuildsOutput)
	return
}

func (d *CodeBuildDouble) BatchDeleteBuildsWithContext(i0 context.Context, i1 *codebuild.BatchDeleteBuildsInput, i2 ...request.Option) (r0 *codebuild.BatchDeleteBuildsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDeleteBuildsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codebuild.BatchDeleteBuildsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) fakeBatchDeleteBuildsWithContext(ctx context.Context, in *codebuild.BatchDeleteBuildsInput, _ ...request.Option) (*codebuild.BatchDeleteBuildsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchDeleteBuilds cancelled", ctx.Err())
	default:
		return d.BatchDeleteBuilds(in)
	}
}

func (d *CodeBuildDouble) BatchGetBuilds(i0 *codebuild.BatchGetBuildsInput) (r0 *codebuild.BatchGetBuildsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetBuilds", i0)
	r0, _ = returns[0].(*codebuild.BatchGetBuildsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) BatchGetBuildsRequest(i0 *codebuild.BatchGetBuildsInput) (r0 *request.Request, r1 *codebuild.BatchGetBuildsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetBuildsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codebuild.BatchGetBuildsOutput)
	return
}

func (d *CodeBuildDouble) BatchGetBuildsWithContext(i0 context.Context, i1 *codebuild.BatchGetBuildsInput, i2 ...request.Option) (r0 *codebuild.BatchGetBuildsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetBuildsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codebuild.BatchGetBuildsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) fakeBatchGetBuildsWithContext(ctx context.Context, in *codebuild.BatchGetBuildsInput, _ ...request.Option) (*codebuild.BatchGetBuildsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchGetBuilds cancelled", ctx.Err())
	default:
		return d.BatchGetBuilds(in)
	}
}

func (d *CodeBuildDouble) BatchGetProjects(i0 *codebuild.BatchGetProjectsInput) (r0 *codebuild.BatchGetProjectsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetProjects", i0)
	r0, _ = returns[0].(*codebuild.BatchGetProjectsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) BatchGetProjectsRequest(i0 *codebuild.BatchGetProjectsInput) (r0 *request.Request, r1 *codebuild.BatchGetProjectsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetProjectsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codebuild.BatchGetProjectsOutput)
	return
}

func (d *CodeBuildDouble) BatchGetProjectsWithContext(i0 context.Context, i1 *codebuild.BatchGetProjectsInput, i2 ...request.Option) (r0 *codebuild.BatchGetProjectsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetProjectsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codebuild.BatchGetProjectsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) fakeBatchGetProjectsWithContext(ctx context.Context, in *codebuild.BatchGetProjectsInput, _ ...request.Option) (*codebuild.BatchGetProjectsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchGetProjects cancelled", ctx.Err())
	default:
		return d.BatchGetProjects(in)
	}
}

func (d *CodeBuildDouble) BatchGetReportGroups(i0 *codebuild.BatchGetReportGroupsInput) (r0 *codebuild.BatchGetReportGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetReportGroups", i0)
	r0, _ = returns[0].(*codebuild.BatchGetReportGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) BatchGetReportGroupsRequest(i0 *codebuild.BatchGetReportGroupsInput) (r0 *request.Request, r1 *codebuild.BatchGetReportGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetReportGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codebuild.BatchGetReportGroupsOutput)
	return
}

func (d *CodeBuildDouble) BatchGetReportGroupsWithContext(i0 context.Context, i1 *codebuild.BatchGetReportGroupsInput, i2 ...request.Option) (r0 *codebuild.BatchGetReportGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetReportGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codebuild.BatchGetReportGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) fakeBatchGetReportGroupsWithContext(ctx context.Context, in *codebuild.BatchGetReportGroupsInput, _ ...request.Option) (*codebuild.BatchGetReportGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchGetReportGroups cancelled", ctx.Err())
	default:
		return d.BatchGetReportGroups(in)
	}
}

func (d *CodeBuildDouble) BatchGetReports(i0 *codebuild.BatchGetReportsInput) (r0 *codebuild.BatchGetReportsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetReports", i0)
	r0, _ = returns[0].(*codebuild.BatchGetReportsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) BatchGetReportsRequest(i0 *codebuild.BatchGetReportsInput) (r0 *request.Request, r1 *codebuild.BatchGetReportsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetReportsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codebuild.BatchGetReportsOutput)
	return
}

func (d *CodeBuildDouble) BatchGetReportsWithContext(i0 context.Context, i1 *codebuild.BatchGetReportsInput, i2 ...request.Option) (r0 *codebuild.BatchGetReportsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetReportsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codebuild.BatchGetReportsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) fakeBatchGetReportsWithContext(ctx context.Context, in *codebuild.BatchGetReportsInput, _ ...request.Option) (*codebuild.BatchGetReportsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchGetReports cancelled", ctx.Err())
	default:
		return d.BatchGetReports(in)
	}
}

func (d *CodeBuildDouble) CreateProject(i0 *codebuild.CreateProjectInput) (r0 *codebuild.CreateProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProject", i0)
	r0, _ = returns[0].(*codebuild.CreateProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) CreateProjectRequest(i0 *codebuild.CreateProjectInput) (r0 *request.Request, r1 *codebuild.CreateProjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codebuild.CreateProjectOutput)
	return
}

func (d *CodeBuildDouble) CreateProjectWithContext(i0 context.Context, i1 *codebuild.CreateProjectInput, i2 ...request.Option) (r0 *codebuild.CreateProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codebuild.CreateProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) fakeCreateProjectWithContext(ctx context.Context, in *codebuild.CreateProjectInput, _ ...request.Option) (*codebuild.CreateProjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateProject cancelled", ctx.Err())
	default:
		return d.CreateProject(in)
	}
}

func (d *CodeBuildDouble) CreateReportGroup(i0 *codebuild.CreateReportGroupInput) (r0 *codebuild.CreateReportGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateReportGroup", i0)
	r0, _ = returns[0].(*codebuild.CreateReportGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) CreateReportGroupRequest(i0 *codebuild.CreateReportGroupInput) (r0 *request.Request, r1 *codebuild.CreateReportGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateReportGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codebuild.CreateReportGroupOutput)
	return
}

func (d *CodeBuildDouble) CreateReportGroupWithContext(i0 context.Context, i1 *codebuild.CreateReportGroupInput, i2 ...request.Option) (r0 *codebuild.CreateReportGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateReportGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codebuild.CreateReportGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) fakeCreateReportGroupWithContext(ctx context.Context, in *codebuild.CreateReportGroupInput, _ ...request.Option) (*codebuild.CreateReportGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateReportGroup cancelled", ctx.Err())
	default:
		return d.CreateReportGroup(in)
	}
}

func (d *CodeBuildDouble) CreateWebhook(i0 *codebuild.CreateWebhookInput) (r0 *codebuild.CreateWebhookOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateWebhook", i0)
	r0, _ = returns[0].(*codebuild.CreateWebhookOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) CreateWebhookRequest(i0 *codebuild.CreateWebhookInput) (r0 *request.Request, r1 *codebuild.CreateWebhookOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateWebhookRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codebuild.CreateWebhookOutput)
	return
}

func (d *CodeBuildDouble) CreateWebhookWithContext(i0 context.Context, i1 *codebuild.CreateWebhookInput, i2 ...request.Option) (r0 *codebuild.CreateWebhookOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateWebhookWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codebuild.CreateWebhookOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) fakeCreateWebhookWithContext(ctx context.Context, in *codebuild.CreateWebhookInput, _ ...request.Option) (*codebuild.CreateWebhookOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateWebhook cancelled", ctx.Err())
	default:
		return d.CreateWebhook(in)
	}
}

func (d *CodeBuildDouble) DeleteProject(i0 *codebuild.DeleteProjectInput) (r0 *codebuild.DeleteProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteProject", i0)
	r0, _ = returns[0].(*codebuild.DeleteProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) DeleteProjectRequest(i0 *codebuild.DeleteProjectInput) (r0 *request.Request, r1 *codebuild.DeleteProjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteProjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codebuild.DeleteProjectOutput)
	return
}

func (d *CodeBuildDouble) DeleteProjectWithContext(i0 context.Context, i1 *codebuild.DeleteProjectInput, i2 ...request.Option) (r0 *codebuild.DeleteProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteProjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codebuild.DeleteProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) fakeDeleteProjectWithContext(ctx context.Context, in *codebuild.DeleteProjectInput, _ ...request.Option) (*codebuild.DeleteProjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteProject cancelled", ctx.Err())
	default:
		return d.DeleteProject(in)
	}
}

func (d *CodeBuildDouble) DeleteReport(i0 *codebuild.DeleteReportInput) (r0 *codebuild.DeleteReportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteReport", i0)
	r0, _ = returns[0].(*codebuild.DeleteReportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) DeleteReportGroup(i0 *codebuild.DeleteReportGroupInput) (r0 *codebuild.DeleteReportGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteReportGroup", i0)
	r0, _ = returns[0].(*codebuild.DeleteReportGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) DeleteReportGroupRequest(i0 *codebuild.DeleteReportGroupInput) (r0 *request.Request, r1 *codebuild.DeleteReportGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteReportGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codebuild.DeleteReportGroupOutput)
	return
}

func (d *CodeBuildDouble) DeleteReportGroupWithContext(i0 context.Context, i1 *codebuild.DeleteReportGroupInput, i2 ...request.Option) (r0 *codebuild.DeleteReportGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteReportGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codebuild.DeleteReportGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) fakeDeleteReportGroupWithContext(ctx context.Context, in *codebuild.DeleteReportGroupInput, _ ...request.Option) (*codebuild.DeleteReportGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteReportGroup cancelled", ctx.Err())
	default:
		return d.DeleteReportGroup(in)
	}
}

func (d *CodeBuildDouble) DeleteReportRequest(i0 *codebuild.DeleteReportInput) (r0 *request.Request, r1 *codebuild.DeleteReportOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteReportRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codebuild.DeleteReportOutput)
	return
}

func (d *CodeBuildDouble) DeleteReportWithContext(i0 context.Context, i1 *codebuild.DeleteReportInput, i2 ...request.Option) (r0 *codebuild.DeleteReportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteReportWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codebuild.DeleteReportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) fakeDeleteReportWithContext(ctx context.Context, in *codebuild.DeleteReportInput, _ ...request.Option) (*codebuild.DeleteReportOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteReport cancelled", ctx.Err())
	default:
		return d.DeleteReport(in)
	}
}

func (d *CodeBuildDouble) DeleteResourcePolicy(i0 *codebuild.DeleteResourcePolicyInput) (r0 *codebuild.DeleteResourcePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResourcePolicy", i0)
	r0, _ = returns[0].(*codebuild.DeleteResourcePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) DeleteResourcePolicyRequest(i0 *codebuild.DeleteResourcePolicyInput) (r0 *request.Request, r1 *codebuild.DeleteResourcePolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResourcePolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codebuild.DeleteResourcePolicyOutput)
	return
}

func (d *CodeBuildDouble) DeleteResourcePolicyWithContext(i0 context.Context, i1 *codebuild.DeleteResourcePolicyInput, i2 ...request.Option) (r0 *codebuild.DeleteResourcePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResourcePolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codebuild.DeleteResourcePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) fakeDeleteResourcePolicyWithContext(ctx context.Context, in *codebuild.DeleteResourcePolicyInput, _ ...request.Option) (*codebuild.DeleteResourcePolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteResourcePolicy cancelled", ctx.Err())
	default:
		return d.DeleteResourcePolicy(in)
	}
}

func (d *CodeBuildDouble) DeleteSourceCredentials(i0 *codebuild.DeleteSourceCredentialsInput) (r0 *codebuild.DeleteSourceCredentialsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSourceCredentials", i0)
	r0, _ = returns[0].(*codebuild.DeleteSourceCredentialsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) DeleteSourceCredentialsRequest(i0 *codebuild.DeleteSourceCredentialsInput) (r0 *request.Request, r1 *codebuild.DeleteSourceCredentialsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSourceCredentialsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codebuild.DeleteSourceCredentialsOutput)
	return
}

func (d *CodeBuildDouble) DeleteSourceCredentialsWithContext(i0 context.Context, i1 *codebuild.DeleteSourceCredentialsInput, i2 ...request.Option) (r0 *codebuild.DeleteSourceCredentialsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSourceCredentialsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codebuild.DeleteSourceCredentialsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) fakeDeleteSourceCredentialsWithContext(ctx context.Context, in *codebuild.DeleteSourceCredentialsInput, _ ...request.Option) (*codebuild.DeleteSourceCredentialsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteSourceCredentials cancelled", ctx.Err())
	default:
		return d.DeleteSourceCredentials(in)
	}
}

func (d *CodeBuildDouble) DeleteWebhook(i0 *codebuild.DeleteWebhookInput) (r0 *codebuild.DeleteWebhookOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteWebhook", i0)
	r0, _ = returns[0].(*codebuild.DeleteWebhookOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) DeleteWebhookRequest(i0 *codebuild.DeleteWebhookInput) (r0 *request.Request, r1 *codebuild.DeleteWebhookOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteWebhookRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codebuild.DeleteWebhookOutput)
	return
}

func (d *CodeBuildDouble) DeleteWebhookWithContext(i0 context.Context, i1 *codebuild.DeleteWebhookInput, i2 ...request.Option) (r0 *codebuild.DeleteWebhookOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteWebhookWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codebuild.DeleteWebhookOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) fakeDeleteWebhookWithContext(ctx context.Context, in *codebuild.DeleteWebhookInput, _ ...request.Option) (*codebuild.DeleteWebhookOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteWebhook cancelled", ctx.Err())
	default:
		return d.DeleteWebhook(in)
	}
}

func (d *CodeBuildDouble) DescribeTestCases(i0 *codebuild.DescribeTestCasesInput) (r0 *codebuild.DescribeTestCasesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTestCases", i0)
	r0, _ = returns[0].(*codebuild.DescribeTestCasesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) DescribeTestCasesRequest(i0 *codebuild.DescribeTestCasesInput) (r0 *request.Request, r1 *codebuild.DescribeTestCasesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTestCasesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codebuild.DescribeTestCasesOutput)
	return
}

func (d *CodeBuildDouble) DescribeTestCasesWithContext(i0 context.Context, i1 *codebuild.DescribeTestCasesInput, i2 ...request.Option) (r0 *codebuild.DescribeTestCasesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTestCasesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codebuild.DescribeTestCasesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) fakeDescribeTestCasesWithContext(ctx context.Context, in *codebuild.DescribeTestCasesInput, _ ...request.Option) (*codebuild.DescribeTestCasesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTestCases cancelled", ctx.Err())
	default:
		return d.DescribeTestCases(in)
	}
}

func (d *CodeBuildDouble) GetResourcePolicy(i0 *codebuild.GetResourcePolicyInput) (r0 *codebuild.GetResourcePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResourcePolicy", i0)
	r0, _ = returns[0].(*codebuild.GetResourcePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) GetResourcePolicyRequest(i0 *codebuild.GetResourcePolicyInput) (r0 *request.Request, r1 *codebuild.GetResourcePolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResourcePolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codebuild.GetResourcePolicyOutput)
	return
}

func (d *CodeBuildDouble) GetResourcePolicyWithContext(i0 context.Context, i1 *codebuild.GetResourcePolicyInput, i2 ...request.Option) (r0 *codebuild.GetResourcePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResourcePolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codebuild.GetResourcePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) fakeGetResourcePolicyWithContext(ctx context.Context, in *codebuild.GetResourcePolicyInput, _ ...request.Option) (*codebuild.GetResourcePolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetResourcePolicy cancelled", ctx.Err())
	default:
		return d.GetResourcePolicy(in)
	}
}

func (d *CodeBuildDouble) ImportSourceCredentials(i0 *codebuild.ImportSourceCredentialsInput) (r0 *codebuild.ImportSourceCredentialsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportSourceCredentials", i0)
	r0, _ = returns[0].(*codebuild.ImportSourceCredentialsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) ImportSourceCredentialsRequest(i0 *codebuild.ImportSourceCredentialsInput) (r0 *request.Request, r1 *codebuild.ImportSourceCredentialsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportSourceCredentialsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codebuild.ImportSourceCredentialsOutput)
	return
}

func (d *CodeBuildDouble) ImportSourceCredentialsWithContext(i0 context.Context, i1 *codebuild.ImportSourceCredentialsInput, i2 ...request.Option) (r0 *codebuild.ImportSourceCredentialsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportSourceCredentialsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codebuild.ImportSourceCredentialsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) fakeImportSourceCredentialsWithContext(ctx context.Context, in *codebuild.ImportSourceCredentialsInput, _ ...request.Option) (*codebuild.ImportSourceCredentialsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ImportSourceCredentials cancelled", ctx.Err())
	default:
		return d.ImportSourceCredentials(in)
	}
}

func (d *CodeBuildDouble) InvalidateProjectCache(i0 *codebuild.InvalidateProjectCacheInput) (r0 *codebuild.InvalidateProjectCacheOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("InvalidateProjectCache", i0)
	r0, _ = returns[0].(*codebuild.InvalidateProjectCacheOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) InvalidateProjectCacheRequest(i0 *codebuild.InvalidateProjectCacheInput) (r0 *request.Request, r1 *codebuild.InvalidateProjectCacheOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("InvalidateProjectCacheRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codebuild.InvalidateProjectCacheOutput)
	return
}

func (d *CodeBuildDouble) InvalidateProjectCacheWithContext(i0 context.Context, i1 *codebuild.InvalidateProjectCacheInput, i2 ...request.Option) (r0 *codebuild.InvalidateProjectCacheOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("InvalidateProjectCacheWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codebuild.InvalidateProjectCacheOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) fakeInvalidateProjectCacheWithContext(ctx context.Context, in *codebuild.InvalidateProjectCacheInput, _ ...request.Option) (*codebuild.InvalidateProjectCacheOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "InvalidateProjectCache cancelled", ctx.Err())
	default:
		return d.InvalidateProjectCache(in)
	}
}

func (d *CodeBuildDouble) ListBuilds(i0 *codebuild.ListBuildsInput) (r0 *codebuild.ListBuildsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBuilds", i0)
	r0, _ = returns[0].(*codebuild.ListBuildsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) ListBuildsForProject(i0 *codebuild.ListBuildsForProjectInput) (r0 *codebuild.ListBuildsForProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBuildsForProject", i0)
	r0, _ = returns[0].(*codebuild.ListBuildsForProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) ListBuildsForProjectRequest(i0 *codebuild.ListBuildsForProjectInput) (r0 *request.Request, r1 *codebuild.ListBuildsForProjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBuildsForProjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codebuild.ListBuildsForProjectOutput)
	return
}

func (d *CodeBuildDouble) ListBuildsForProjectWithContext(i0 context.Context, i1 *codebuild.ListBuildsForProjectInput, i2 ...request.Option) (r0 *codebuild.ListBuildsForProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBuildsForProjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codebuild.ListBuildsForProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) fakeListBuildsForProjectWithContext(ctx context.Context, in *codebuild.ListBuildsForProjectInput, _ ...request.Option) (*codebuild.ListBuildsForProjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListBuildsForProject cancelled", ctx.Err())
	default:
		return d.ListBuildsForProject(in)
	}
}

func (d *CodeBuildDouble) ListBuildsRequest(i0 *codebuild.ListBuildsInput) (r0 *request.Request, r1 *codebuild.ListBuildsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBuildsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codebuild.ListBuildsOutput)
	return
}

func (d *CodeBuildDouble) ListBuildsWithContext(i0 context.Context, i1 *codebuild.ListBuildsInput, i2 ...request.Option) (r0 *codebuild.ListBuildsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBuildsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codebuild.ListBuildsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) fakeListBuildsWithContext(ctx context.Context, in *codebuild.ListBuildsInput, _ ...request.Option) (*codebuild.ListBuildsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListBuilds cancelled", ctx.Err())
	default:
		return d.ListBuilds(in)
	}
}

func (d *CodeBuildDouble) ListCuratedEnvironmentImages(i0 *codebuild.ListCuratedEnvironmentImagesInput) (r0 *codebuild.ListCuratedEnvironmentImagesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCuratedEnvironmentImages", i0)
	r0, _ = returns[0].(*codebuild.ListCuratedEnvironmentImagesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) ListCuratedEnvironmentImagesRequest(i0 *codebuild.ListCuratedEnvironmentImagesInput) (r0 *request.Request, r1 *codebuild.ListCuratedEnvironmentImagesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCuratedEnvironmentImagesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codebuild.ListCuratedEnvironmentImagesOutput)
	return
}

func (d *CodeBuildDouble) ListCuratedEnvironmentImagesWithContext(i0 context.Context, i1 *codebuild.ListCuratedEnvironmentImagesInput, i2 ...request.Option) (r0 *codebuild.ListCuratedEnvironmentImagesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCuratedEnvironmentImagesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codebuild.ListCuratedEnvironmentImagesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) fakeListCuratedEnvironmentImagesWithContext(ctx context.Context, in *codebuild.ListCuratedEnvironmentImagesInput, _ ...request.Option) (*codebuild.ListCuratedEnvironmentImagesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListCuratedEnvironmentImages cancelled", ctx.Err())
	default:
		return d.ListCuratedEnvironmentImages(in)
	}
}

func (d *CodeBuildDouble) ListProjects(i0 *codebuild.ListProjectsInput) (r0 *codebuild.ListProjectsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProjects", i0)
	r0, _ = returns[0].(*codebuild.ListProjectsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) ListProjectsRequest(i0 *codebuild.ListProjectsInput) (r0 *request.Request, r1 *codebuild.ListProjectsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProjectsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codebuild.ListProjectsOutput)
	return
}

func (d *CodeBuildDouble) ListProjectsWithContext(i0 context.Context, i1 *codebuild.ListProjectsInput, i2 ...request.Option) (r0 *codebuild.ListProjectsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListProjectsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codebuild.ListProjectsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) fakeListProjectsWithContext(ctx context.Context, in *codebuild.ListProjectsInput, _ ...request.Option) (*codebuild.ListProjectsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListProjects cancelled", ctx.Err())
	default:
		return d.ListProjects(in)
	}
}

func (d *CodeBuildDouble) ListReportGroups(i0 *codebuild.ListReportGroupsInput) (r0 *codebuild.ListReportGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListReportGroups", i0)
	r0, _ = returns[0].(*codebuild.ListReportGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) ListReportGroupsRequest(i0 *codebuild.ListReportGroupsInput) (r0 *request.Request, r1 *codebuild.ListReportGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListReportGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codebuild.ListReportGroupsOutput)
	return
}

func (d *CodeBuildDouble) ListReportGroupsWithContext(i0 context.Context, i1 *codebuild.ListReportGroupsInput, i2 ...request.Option) (r0 *codebuild.ListReportGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListReportGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codebuild.ListReportGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) fakeListReportGroupsWithContext(ctx context.Context, in *codebuild.ListReportGroupsInput, _ ...request.Option) (*codebuild.ListReportGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListReportGroups cancelled", ctx.Err())
	default:
		return d.ListReportGroups(in)
	}
}

func (d *CodeBuildDouble) ListReports(i0 *codebuild.ListReportsInput) (r0 *codebuild.ListReportsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListReports", i0)
	r0, _ = returns[0].(*codebuild.ListReportsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) ListReportsForReportGroup(i0 *codebuild.ListReportsForReportGroupInput) (r0 *codebuild.ListReportsForReportGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListReportsForReportGroup", i0)
	r0, _ = returns[0].(*codebuild.ListReportsForReportGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) ListReportsForReportGroupRequest(i0 *codebuild.ListReportsForReportGroupInput) (r0 *request.Request, r1 *codebuild.ListReportsForReportGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListReportsForReportGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codebuild.ListReportsForReportGroupOutput)
	return
}

func (d *CodeBuildDouble) ListReportsForReportGroupWithContext(i0 context.Context, i1 *codebuild.ListReportsForReportGroupInput, i2 ...request.Option) (r0 *codebuild.ListReportsForReportGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListReportsForReportGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codebuild.ListReportsForReportGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) fakeListReportsForReportGroupWithContext(ctx context.Context, in *codebuild.ListReportsForReportGroupInput, _ ...request.Option) (*codebuild.ListReportsForReportGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListReportsForReportGroup cancelled", ctx.Err())
	default:
		return d.ListReportsForReportGroup(in)
	}
}

func (d *CodeBuildDouble) ListReportsRequest(i0 *codebuild.ListReportsInput) (r0 *request.Request, r1 *codebuild.ListReportsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListReportsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codebuild.ListReportsOutput)
	return
}

func (d *CodeBuildDouble) ListReportsWithContext(i0 context.Context, i1 *codebuild.ListReportsInput, i2 ...request.Option) (r0 *codebuild.ListReportsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListReportsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codebuild.ListReportsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) fakeListReportsWithContext(ctx context.Context, in *codebuild.ListReportsInput, _ ...request.Option) (*codebuild.ListReportsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListReports cancelled", ctx.Err())
	default:
		return d.ListReports(in)
	}
}

func (d *CodeBuildDouble) ListSharedProjects(i0 *codebuild.ListSharedProjectsInput) (r0 *codebuild.ListSharedProjectsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSharedProjects", i0)
	r0, _ = returns[0].(*codebuild.ListSharedProjectsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) ListSharedProjectsRequest(i0 *codebuild.ListSharedProjectsInput) (r0 *request.Request, r1 *codebuild.ListSharedProjectsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSharedProjectsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codebuild.ListSharedProjectsOutput)
	return
}

func (d *CodeBuildDouble) ListSharedProjectsWithContext(i0 context.Context, i1 *codebuild.ListSharedProjectsInput, i2 ...request.Option) (r0 *codebuild.ListSharedProjectsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSharedProjectsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codebuild.ListSharedProjectsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) fakeListSharedProjectsWithContext(ctx context.Context, in *codebuild.ListSharedProjectsInput, _ ...request.Option) (*codebuild.ListSharedProjectsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListSharedProjects cancelled", ctx.Err())
	default:
		return d.ListSharedProjects(in)
	}
}

func (d *CodeBuildDouble) ListSharedReportGroups(i0 *codebuild.ListSharedReportGroupsInput) (r0 *codebuild.ListSharedReportGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSharedReportGroups", i0)
	r0, _ = returns[0].(*codebuild.ListSharedReportGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) ListSharedReportGroupsRequest(i0 *codebuild.ListSharedReportGroupsInput) (r0 *request.Request, r1 *codebuild.ListSharedReportGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSharedReportGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codebuild.ListSharedReportGroupsOutput)
	return
}

func (d *CodeBuildDouble) ListSharedReportGroupsWithContext(i0 context.Context, i1 *codebuild.ListSharedReportGroupsInput, i2 ...request.Option) (r0 *codebuild.ListSharedReportGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSharedReportGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codebuild.ListSharedReportGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) fakeListSharedReportGroupsWithContext(ctx context.Context, in *codebuild.ListSharedReportGroupsInput, _ ...request.Option) (*codebuild.ListSharedReportGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListSharedReportGroups cancelled", ctx.Err())
	default:
		return d.ListSharedReportGroups(in)
	}
}

func (d *CodeBuildDouble) ListSourceCredentials(i0 *codebuild.ListSourceCredentialsInput) (r0 *codebuild.ListSourceCredentialsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSourceCredentials", i0)
	r0, _ = returns[0].(*codebuild.ListSourceCredentialsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) ListSourceCredentialsRequest(i0 *codebuild.ListSourceCredentialsInput) (r0 *request.Request, r1 *codebuild.ListSourceCredentialsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSourceCredentialsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codebuild.ListSourceCredentialsOutput)
	return
}

func (d *CodeBuildDouble) ListSourceCredentialsWithContext(i0 context.Context, i1 *codebuild.ListSourceCredentialsInput, i2 ...request.Option) (r0 *codebuild.ListSourceCredentialsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSourceCredentialsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codebuild.ListSourceCredentialsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) fakeListSourceCredentialsWithContext(ctx context.Context, in *codebuild.ListSourceCredentialsInput, _ ...request.Option) (*codebuild.ListSourceCredentialsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListSourceCredentials cancelled", ctx.Err())
	default:
		return d.ListSourceCredentials(in)
	}
}

func (d *CodeBuildDouble) PutResourcePolicy(i0 *codebuild.PutResourcePolicyInput) (r0 *codebuild.PutResourcePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutResourcePolicy", i0)
	r0, _ = returns[0].(*codebuild.PutResourcePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) PutResourcePolicyRequest(i0 *codebuild.PutResourcePolicyInput) (r0 *request.Request, r1 *codebuild.PutResourcePolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutResourcePolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codebuild.PutResourcePolicyOutput)
	return
}

func (d *CodeBuildDouble) PutResourcePolicyWithContext(i0 context.Context, i1 *codebuild.PutResourcePolicyInput, i2 ...request.Option) (r0 *codebuild.PutResourcePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutResourcePolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codebuild.PutResourcePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) fakePutResourcePolicyWithContext(ctx context.Context, in *codebuild.PutResourcePolicyInput, _ ...request.Option) (*codebuild.PutResourcePolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutResourcePolicy cancelled", ctx.Err())
	default:
		return d.PutResourcePolicy(in)
	}
}

func (d *CodeBuildDouble) StartBuild(i0 *codebuild.StartBuildInput) (r0 *codebuild.StartBuildOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartBuild", i0)
	r0, _ = returns[0].(*codebuild.StartBuildOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) StartBuildRequest(i0 *codebuild.StartBuildInput) (r0 *request.Request, r1 *codebuild.StartBuildOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartBuildRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codebuild.StartBuildOutput)
	return
}

func (d *CodeBuildDouble) StartBuildWithContext(i0 context.Context, i1 *codebuild.StartBuildInput, i2 ...request.Option) (r0 *codebuild.StartBuildOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartBuildWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codebuild.StartBuildOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) fakeStartBuildWithContext(ctx context.Context, in *codebuild.StartBuildInput, _ ...request.Option) (*codebuild.StartBuildOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartBuild cancelled", ctx.Err())
	default:
		return d.StartBuild(in)
	}
}

func (d *CodeBuildDouble) StopBuild(i0 *codebuild.StopBuildInput) (r0 *codebuild.StopBuildOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopBuild", i0)
	r0, _ = returns[0].(*codebuild.StopBuildOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) StopBuildRequest(i0 *codebuild.StopBuildInput) (r0 *request.Request, r1 *codebuild.StopBuildOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopBuildRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codebuild.StopBuildOutput)
	return
}

func (d *CodeBuildDouble) StopBuildWithContext(i0 context.Context, i1 *codebuild.StopBuildInput, i2 ...request.Option) (r0 *codebuild.StopBuildOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopBuildWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codebuild.StopBuildOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) fakeStopBuildWithContext(ctx context.Context, in *codebuild.StopBuildInput, _ ...request.Option) (*codebuild.StopBuildOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopBuild cancelled", ctx.Err())
	default:
		return d.StopBuild(in)
	}
}

func (d *CodeBuildDouble) UpdateProject(i0 *codebuild.UpdateProjectInput) (r0 *codebuild.UpdateProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateProject", i0)
	r0, _ = returns[0].(*codebuild.UpdateProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) UpdateProjectRequest(i0 *codebuild.UpdateProjectInput) (r0 *request.Request, r1 *codebuild.UpdateProjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateProjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codebuild.UpdateProjectOutput)
	return
}

func (d *CodeBuildDouble) UpdateProjectWithContext(i0 context.Context, i1 *codebuild.UpdateProjectInput, i2 ...request.Option) (r0 *codebuild.UpdateProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateProjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codebuild.UpdateProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) fakeUpdateProjectWithContext(ctx context.Context, in *codebuild.UpdateProjectInput, _ ...request.Option) (*codebuild.UpdateProjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateProject cancelled", ctx.Err())
	default:
		return d.UpdateProject(in)
	}
}

func (d *CodeBuildDouble) UpdateReportGroup(i0 *codebuild.UpdateReportGroupInput) (r0 *codebuild.UpdateReportGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateReportGroup", i0)
	r0, _ = returns[0].(*codebuild.UpdateReportGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) UpdateReportGroupRequest(i0 *codebuild.UpdateReportGroupInput) (r0 *request.Request, r1 *codebuild.UpdateReportGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateReportGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codebuild.UpdateReportGroupOutput)
	return
}

func (d *CodeBuildDouble) UpdateReportGroupWithContext(i0 context.Context, i1 *codebuild.UpdateReportGroupInput, i2 ...request.Option) (r0 *codebuild.UpdateReportGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateReportGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codebuild.UpdateReportGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) fakeUpdateReportGroupWithContext(ctx context.Context, in *codebuild.UpdateReportGroupInput, _ ...request.Option) (*codebuild.UpdateReportGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateReportGroup cancelled", ctx.Err())
	default:
		return d.UpdateReportGroup(in)
	}
}

func (d *CodeBuildDouble) UpdateWebhook(i0 *codebuild.UpdateWebhookInput) (r0 *codebuild.UpdateWebhookOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateWebhook", i0)
	r0, _ = returns[0].(*codebuild.UpdateWebhookOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) UpdateWebhookRequest(i0 *codebuild.UpdateWebhookInput) (r0 *request.Request, r1 *codebuild.UpdateWebhookOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateWebhookRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codebuild.UpdateWebhookOutput)
	return
}

func (d *CodeBuildDouble) UpdateWebhookWithContext(i0 context.Context, i1 *codebuild.UpdateWebhookInput, i2 ...request.Option) (r0 *codebuild.UpdateWebhookOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateWebhookWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codebuild.UpdateWebhookOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeBuildDouble) fakeUpdateWebhookWithContext(ctx context.Context, in *codebuild.UpdateWebhookInput, _ ...request.Option) (*codebuild.UpdateWebhookOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateWebhook cancelled", ctx.Err())
	default:
		return d.UpdateWebhook(in)
	}
}
