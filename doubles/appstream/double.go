// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:11:17+11:00

// Package appstreamdouble provides a TestDouble implementation of appstreamiface.AppStreamAPI
package appstreamdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/appstream"
	"github.com/aws/aws-sdk-go/service/appstream/appstreamiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// AppStreamDouble is TestDouble for appstreamiface.AppStreamAPI
type AppStreamDouble struct {
	appstreamiface.AppStreamAPI
	*awsdouble.AWSTestDouble
}

// Constructor for AppStreamDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *AppStreamDouble {
	result := &AppStreamDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*appstreamiface.AppStreamAPI)(nil), configurators...)
	return result
}

func (d *AppStreamDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *AppStreamDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AssociateFleetWithContext":
		return m.Fake(d.fakeAssociateFleetWithContext)

	case "BatchAssociateUserStackWithContext":
		return m.Fake(d.fakeBatchAssociateUserStackWithContext)

	case "BatchDisassociateUserStackWithContext":
		return m.Fake(d.fakeBatchDisassociateUserStackWithContext)

	case "CopyImageWithContext":
		return m.Fake(d.fakeCopyImageWithContext)

	case "CreateDirectoryConfigWithContext":
		return m.Fake(d.fakeCreateDirectoryConfigWithContext)

	case "CreateFleetWithContext":
		return m.Fake(d.fakeCreateFleetWithContext)

	case "CreateImageBuilderStreamingURLWithContext":
		return m.Fake(d.fakeCreateImageBuilderStreamingURLWithContext)

	case "CreateImageBuilderWithContext":
		return m.Fake(d.fakeCreateImageBuilderWithContext)

	case "CreateStackWithContext":
		return m.Fake(d.fakeCreateStackWithContext)

	case "CreateStreamingURLWithContext":
		return m.Fake(d.fakeCreateStreamingURLWithContext)

	case "CreateUsageReportSubscriptionWithContext":
		return m.Fake(d.fakeCreateUsageReportSubscriptionWithContext)

	case "CreateUserWithContext":
		return m.Fake(d.fakeCreateUserWithContext)

	case "DeleteDirectoryConfigWithContext":
		return m.Fake(d.fakeDeleteDirectoryConfigWithContext)

	case "DeleteFleetWithContext":
		return m.Fake(d.fakeDeleteFleetWithContext)

	case "DeleteImageBuilderWithContext":
		return m.Fake(d.fakeDeleteImageBuilderWithContext)

	case "DeleteImagePermissionsWithContext":
		return m.Fake(d.fakeDeleteImagePermissionsWithContext)

	case "DeleteImageWithContext":
		return m.Fake(d.fakeDeleteImageWithContext)

	case "DeleteStackWithContext":
		return m.Fake(d.fakeDeleteStackWithContext)

	case "DeleteUsageReportSubscriptionWithContext":
		return m.Fake(d.fakeDeleteUsageReportSubscriptionWithContext)

	case "DeleteUserWithContext":
		return m.Fake(d.fakeDeleteUserWithContext)

	case "DescribeDirectoryConfigsWithContext":
		return m.Fake(d.fakeDescribeDirectoryConfigsWithContext)

	case "DescribeFleetsWithContext":
		return m.Fake(d.fakeDescribeFleetsWithContext)

	case "DescribeImageBuildersWithContext":
		return m.Fake(d.fakeDescribeImageBuildersWithContext)

	case "DescribeImagePermissionsPages":
		return m.Fake(d.fakeDescribeImagePermissionsPages)

	case "DescribeImagePermissionsPagesWithContext":
		return m.Fake(d.fakeDescribeImagePermissionsPagesWithContext)

	case "DescribeImagePermissionsWithContext":
		return m.Fake(d.fakeDescribeImagePermissionsWithContext)

	case "DescribeImagesPages":
		return m.Fake(d.fakeDescribeImagesPages)

	case "DescribeImagesPagesWithContext":
		return m.Fake(d.fakeDescribeImagesPagesWithContext)

	case "DescribeImagesWithContext":
		return m.Fake(d.fakeDescribeImagesWithContext)

	case "DescribeSessionsWithContext":
		return m.Fake(d.fakeDescribeSessionsWithContext)

	case "DescribeStacksWithContext":
		return m.Fake(d.fakeDescribeStacksWithContext)

	case "DescribeUsageReportSubscriptionsWithContext":
		return m.Fake(d.fakeDescribeUsageReportSubscriptionsWithContext)

	case "DescribeUserStackAssociationsWithContext":
		return m.Fake(d.fakeDescribeUserStackAssociationsWithContext)

	case "DescribeUsersWithContext":
		return m.Fake(d.fakeDescribeUsersWithContext)

	case "DisableUserWithContext":
		return m.Fake(d.fakeDisableUserWithContext)

	case "DisassociateFleetWithContext":
		return m.Fake(d.fakeDisassociateFleetWithContext)

	case "EnableUserWithContext":
		return m.Fake(d.fakeEnableUserWithContext)

	case "ExpireSessionWithContext":
		return m.Fake(d.fakeExpireSessionWithContext)

	case "ListAssociatedFleetsWithContext":
		return m.Fake(d.fakeListAssociatedFleetsWithContext)

	case "ListAssociatedStacksWithContext":
		return m.Fake(d.fakeListAssociatedStacksWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "StartFleetWithContext":
		return m.Fake(d.fakeStartFleetWithContext)

	case "StartImageBuilderWithContext":
		return m.Fake(d.fakeStartImageBuilderWithContext)

	case "StopFleetWithContext":
		return m.Fake(d.fakeStopFleetWithContext)

	case "StopImageBuilderWithContext":
		return m.Fake(d.fakeStopImageBuilderWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateDirectoryConfigWithContext":
		return m.Fake(d.fakeUpdateDirectoryConfigWithContext)

	case "UpdateFleetWithContext":
		return m.Fake(d.fakeUpdateFleetWithContext)

	case "UpdateImagePermissionsWithContext":
		return m.Fake(d.fakeUpdateImagePermissionsWithContext)

	case "UpdateStackWithContext":
		return m.Fake(d.fakeUpdateStackWithContext)

	case "WaitUntilFleetStarted":
		return m.Fake(d.fakeWaitUntilFleetStarted)

	case "WaitUntilFleetStartedWithContext":
		return m.Fake(d.fakeWaitUntilFleetStartedWithContext)

	case "WaitUntilFleetStopped":
		return m.Fake(d.fakeWaitUntilFleetStopped)

	case "WaitUntilFleetStoppedWithContext":
		return m.Fake(d.fakeWaitUntilFleetStoppedWithContext)

	default:
		return nil
	}
}

func (d *AppStreamDouble) AssociateFleet(i0 *appstream.AssociateFleetInput) (r0 *appstream.AssociateFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateFleet", i0)
	r0, _ = returns[0].(*appstream.AssociateFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) AssociateFleetRequest(i0 *appstream.AssociateFleetInput) (r0 *request.Request, r1 *appstream.AssociateFleetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateFleetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.AssociateFleetOutput)
	return
}

func (d *AppStreamDouble) AssociateFleetWithContext(i0 context.Context, i1 *appstream.AssociateFleetInput, i2 ...request.Option) (r0 *appstream.AssociateFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateFleetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.AssociateFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeAssociateFleetWithContext(ctx context.Context, in *appstream.AssociateFleetInput, _ ...request.Option) (*appstream.AssociateFleetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateFleet cancelled", ctx.Err())
	default:
		return d.AssociateFleet(in)
	}
}

func (d *AppStreamDouble) BatchAssociateUserStack(i0 *appstream.BatchAssociateUserStackInput) (r0 *appstream.BatchAssociateUserStackOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchAssociateUserStack", i0)
	r0, _ = returns[0].(*appstream.BatchAssociateUserStackOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) BatchAssociateUserStackRequest(i0 *appstream.BatchAssociateUserStackInput) (r0 *request.Request, r1 *appstream.BatchAssociateUserStackOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchAssociateUserStackRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.BatchAssociateUserStackOutput)
	return
}

func (d *AppStreamDouble) BatchAssociateUserStackWithContext(i0 context.Context, i1 *appstream.BatchAssociateUserStackInput, i2 ...request.Option) (r0 *appstream.BatchAssociateUserStackOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchAssociateUserStackWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.BatchAssociateUserStackOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeBatchAssociateUserStackWithContext(ctx context.Context, in *appstream.BatchAssociateUserStackInput, _ ...request.Option) (*appstream.BatchAssociateUserStackOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchAssociateUserStack cancelled", ctx.Err())
	default:
		return d.BatchAssociateUserStack(in)
	}
}

func (d *AppStreamDouble) BatchDisassociateUserStack(i0 *appstream.BatchDisassociateUserStackInput) (r0 *appstream.BatchDisassociateUserStackOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDisassociateUserStack", i0)
	r0, _ = returns[0].(*appstream.BatchDisassociateUserStackOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) BatchDisassociateUserStackRequest(i0 *appstream.BatchDisassociateUserStackInput) (r0 *request.Request, r1 *appstream.BatchDisassociateUserStackOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDisassociateUserStackRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.BatchDisassociateUserStackOutput)
	return
}

func (d *AppStreamDouble) BatchDisassociateUserStackWithContext(i0 context.Context, i1 *appstream.BatchDisassociateUserStackInput, i2 ...request.Option) (r0 *appstream.BatchDisassociateUserStackOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDisassociateUserStackWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.BatchDisassociateUserStackOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeBatchDisassociateUserStackWithContext(ctx context.Context, in *appstream.BatchDisassociateUserStackInput, _ ...request.Option) (*appstream.BatchDisassociateUserStackOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchDisassociateUserStack cancelled", ctx.Err())
	default:
		return d.BatchDisassociateUserStack(in)
	}
}

func (d *AppStreamDouble) CopyImage(i0 *appstream.CopyImageInput) (r0 *appstream.CopyImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyImage", i0)
	r0, _ = returns[0].(*appstream.CopyImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) CopyImageRequest(i0 *appstream.CopyImageInput) (r0 *request.Request, r1 *appstream.CopyImageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyImageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.CopyImageOutput)
	return
}

func (d *AppStreamDouble) CopyImageWithContext(i0 context.Context, i1 *appstream.CopyImageInput, i2 ...request.Option) (r0 *appstream.CopyImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyImageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.CopyImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeCopyImageWithContext(ctx context.Context, in *appstream.CopyImageInput, _ ...request.Option) (*appstream.CopyImageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CopyImage cancelled", ctx.Err())
	default:
		return d.CopyImage(in)
	}
}

func (d *AppStreamDouble) CreateDirectoryConfig(i0 *appstream.CreateDirectoryConfigInput) (r0 *appstream.CreateDirectoryConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDirectoryConfig", i0)
	r0, _ = returns[0].(*appstream.CreateDirectoryConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) CreateDirectoryConfigRequest(i0 *appstream.CreateDirectoryConfigInput) (r0 *request.Request, r1 *appstream.CreateDirectoryConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDirectoryConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.CreateDirectoryConfigOutput)
	return
}

func (d *AppStreamDouble) CreateDirectoryConfigWithContext(i0 context.Context, i1 *appstream.CreateDirectoryConfigInput, i2 ...request.Option) (r0 *appstream.CreateDirectoryConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDirectoryConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.CreateDirectoryConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeCreateDirectoryConfigWithContext(ctx context.Context, in *appstream.CreateDirectoryConfigInput, _ ...request.Option) (*appstream.CreateDirectoryConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDirectoryConfig cancelled", ctx.Err())
	default:
		return d.CreateDirectoryConfig(in)
	}
}

func (d *AppStreamDouble) CreateFleet(i0 *appstream.CreateFleetInput) (r0 *appstream.CreateFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFleet", i0)
	r0, _ = returns[0].(*appstream.CreateFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) CreateFleetRequest(i0 *appstream.CreateFleetInput) (r0 *request.Request, r1 *appstream.CreateFleetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFleetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.CreateFleetOutput)
	return
}

func (d *AppStreamDouble) CreateFleetWithContext(i0 context.Context, i1 *appstream.CreateFleetInput, i2 ...request.Option) (r0 *appstream.CreateFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFleetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.CreateFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeCreateFleetWithContext(ctx context.Context, in *appstream.CreateFleetInput, _ ...request.Option) (*appstream.CreateFleetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateFleet cancelled", ctx.Err())
	default:
		return d.CreateFleet(in)
	}
}

func (d *AppStreamDouble) CreateImageBuilder(i0 *appstream.CreateImageBuilderInput) (r0 *appstream.CreateImageBuilderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateImageBuilder", i0)
	r0, _ = returns[0].(*appstream.CreateImageBuilderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) CreateImageBuilderRequest(i0 *appstream.CreateImageBuilderInput) (r0 *request.Request, r1 *appstream.CreateImageBuilderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateImageBuilderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.CreateImageBuilderOutput)
	return
}

func (d *AppStreamDouble) CreateImageBuilderStreamingURL(i0 *appstream.CreateImageBuilderStreamingURLInput) (r0 *appstream.CreateImageBuilderStreamingURLOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateImageBuilderStreamingURL", i0)
	r0, _ = returns[0].(*appstream.CreateImageBuilderStreamingURLOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) CreateImageBuilderStreamingURLRequest(i0 *appstream.CreateImageBuilderStreamingURLInput) (r0 *request.Request, r1 *appstream.CreateImageBuilderStreamingURLOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateImageBuilderStreamingURLRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.CreateImageBuilderStreamingURLOutput)
	return
}

func (d *AppStreamDouble) CreateImageBuilderStreamingURLWithContext(i0 context.Context, i1 *appstream.CreateImageBuilderStreamingURLInput, i2 ...request.Option) (r0 *appstream.CreateImageBuilderStreamingURLOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateImageBuilderStreamingURLWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.CreateImageBuilderStreamingURLOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeCreateImageBuilderStreamingURLWithContext(ctx context.Context, in *appstream.CreateImageBuilderStreamingURLInput, _ ...request.Option) (*appstream.CreateImageBuilderStreamingURLOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateImageBuilderStreamingURL cancelled", ctx.Err())
	default:
		return d.CreateImageBuilderStreamingURL(in)
	}
}

func (d *AppStreamDouble) CreateImageBuilderWithContext(i0 context.Context, i1 *appstream.CreateImageBuilderInput, i2 ...request.Option) (r0 *appstream.CreateImageBuilderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateImageBuilderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.CreateImageBuilderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeCreateImageBuilderWithContext(ctx context.Context, in *appstream.CreateImageBuilderInput, _ ...request.Option) (*appstream.CreateImageBuilderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateImageBuilder cancelled", ctx.Err())
	default:
		return d.CreateImageBuilder(in)
	}
}

func (d *AppStreamDouble) CreateStack(i0 *appstream.CreateStackInput) (r0 *appstream.CreateStackOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStack", i0)
	r0, _ = returns[0].(*appstream.CreateStackOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) CreateStackRequest(i0 *appstream.CreateStackInput) (r0 *request.Request, r1 *appstream.CreateStackOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStackRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.CreateStackOutput)
	return
}

func (d *AppStreamDouble) CreateStackWithContext(i0 context.Context, i1 *appstream.CreateStackInput, i2 ...request.Option) (r0 *appstream.CreateStackOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStackWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.CreateStackOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeCreateStackWithContext(ctx context.Context, in *appstream.CreateStackInput, _ ...request.Option) (*appstream.CreateStackOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateStack cancelled", ctx.Err())
	default:
		return d.CreateStack(in)
	}
}

func (d *AppStreamDouble) CreateStreamingURL(i0 *appstream.CreateStreamingURLInput) (r0 *appstream.CreateStreamingURLOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStreamingURL", i0)
	r0, _ = returns[0].(*appstream.CreateStreamingURLOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) CreateStreamingURLRequest(i0 *appstream.CreateStreamingURLInput) (r0 *request.Request, r1 *appstream.CreateStreamingURLOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStreamingURLRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.CreateStreamingURLOutput)
	return
}

func (d *AppStreamDouble) CreateStreamingURLWithContext(i0 context.Context, i1 *appstream.CreateStreamingURLInput, i2 ...request.Option) (r0 *appstream.CreateStreamingURLOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStreamingURLWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.CreateStreamingURLOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeCreateStreamingURLWithContext(ctx context.Context, in *appstream.CreateStreamingURLInput, _ ...request.Option) (*appstream.CreateStreamingURLOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateStreamingURL cancelled", ctx.Err())
	default:
		return d.CreateStreamingURL(in)
	}
}

func (d *AppStreamDouble) CreateUsageReportSubscription(i0 *appstream.CreateUsageReportSubscriptionInput) (r0 *appstream.CreateUsageReportSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUsageReportSubscription", i0)
	r0, _ = returns[0].(*appstream.CreateUsageReportSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) CreateUsageReportSubscriptionRequest(i0 *appstream.CreateUsageReportSubscriptionInput) (r0 *request.Request, r1 *appstream.CreateUsageReportSubscriptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUsageReportSubscriptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.CreateUsageReportSubscriptionOutput)
	return
}

func (d *AppStreamDouble) CreateUsageReportSubscriptionWithContext(i0 context.Context, i1 *appstream.CreateUsageReportSubscriptionInput, i2 ...request.Option) (r0 *appstream.CreateUsageReportSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUsageReportSubscriptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.CreateUsageReportSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeCreateUsageReportSubscriptionWithContext(ctx context.Context, in *appstream.CreateUsageReportSubscriptionInput, _ ...request.Option) (*appstream.CreateUsageReportSubscriptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateUsageReportSubscription cancelled", ctx.Err())
	default:
		return d.CreateUsageReportSubscription(in)
	}
}

func (d *AppStreamDouble) CreateUser(i0 *appstream.CreateUserInput) (r0 *appstream.CreateUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUser", i0)
	r0, _ = returns[0].(*appstream.CreateUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) CreateUserRequest(i0 *appstream.CreateUserInput) (r0 *request.Request, r1 *appstream.CreateUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.CreateUserOutput)
	return
}

func (d *AppStreamDouble) CreateUserWithContext(i0 context.Context, i1 *appstream.CreateUserInput, i2 ...request.Option) (r0 *appstream.CreateUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.CreateUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeCreateUserWithContext(ctx context.Context, in *appstream.CreateUserInput, _ ...request.Option) (*appstream.CreateUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateUser cancelled", ctx.Err())
	default:
		return d.CreateUser(in)
	}
}

func (d *AppStreamDouble) DeleteDirectoryConfig(i0 *appstream.DeleteDirectoryConfigInput) (r0 *appstream.DeleteDirectoryConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDirectoryConfig", i0)
	r0, _ = returns[0].(*appstream.DeleteDirectoryConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) DeleteDirectoryConfigRequest(i0 *appstream.DeleteDirectoryConfigInput) (r0 *request.Request, r1 *appstream.DeleteDirectoryConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDirectoryConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.DeleteDirectoryConfigOutput)
	return
}

func (d *AppStreamDouble) DeleteDirectoryConfigWithContext(i0 context.Context, i1 *appstream.DeleteDirectoryConfigInput, i2 ...request.Option) (r0 *appstream.DeleteDirectoryConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDirectoryConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.DeleteDirectoryConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeDeleteDirectoryConfigWithContext(ctx context.Context, in *appstream.DeleteDirectoryConfigInput, _ ...request.Option) (*appstream.DeleteDirectoryConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDirectoryConfig cancelled", ctx.Err())
	default:
		return d.DeleteDirectoryConfig(in)
	}
}

func (d *AppStreamDouble) DeleteFleet(i0 *appstream.DeleteFleetInput) (r0 *appstream.DeleteFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFleet", i0)
	r0, _ = returns[0].(*appstream.DeleteFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) DeleteFleetRequest(i0 *appstream.DeleteFleetInput) (r0 *request.Request, r1 *appstream.DeleteFleetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFleetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.DeleteFleetOutput)
	return
}

func (d *AppStreamDouble) DeleteFleetWithContext(i0 context.Context, i1 *appstream.DeleteFleetInput, i2 ...request.Option) (r0 *appstream.DeleteFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFleetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.DeleteFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeDeleteFleetWithContext(ctx context.Context, in *appstream.DeleteFleetInput, _ ...request.Option) (*appstream.DeleteFleetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteFleet cancelled", ctx.Err())
	default:
		return d.DeleteFleet(in)
	}
}

func (d *AppStreamDouble) DeleteImage(i0 *appstream.DeleteImageInput) (r0 *appstream.DeleteImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteImage", i0)
	r0, _ = returns[0].(*appstream.DeleteImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) DeleteImageBuilder(i0 *appstream.DeleteImageBuilderInput) (r0 *appstream.DeleteImageBuilderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteImageBuilder", i0)
	r0, _ = returns[0].(*appstream.DeleteImageBuilderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) DeleteImageBuilderRequest(i0 *appstream.DeleteImageBuilderInput) (r0 *request.Request, r1 *appstream.DeleteImageBuilderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteImageBuilderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.DeleteImageBuilderOutput)
	return
}

func (d *AppStreamDouble) DeleteImageBuilderWithContext(i0 context.Context, i1 *appstream.DeleteImageBuilderInput, i2 ...request.Option) (r0 *appstream.DeleteImageBuilderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteImageBuilderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.DeleteImageBuilderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeDeleteImageBuilderWithContext(ctx context.Context, in *appstream.DeleteImageBuilderInput, _ ...request.Option) (*appstream.DeleteImageBuilderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteImageBuilder cancelled", ctx.Err())
	default:
		return d.DeleteImageBuilder(in)
	}
}

func (d *AppStreamDouble) DeleteImagePermissions(i0 *appstream.DeleteImagePermissionsInput) (r0 *appstream.DeleteImagePermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteImagePermissions", i0)
	r0, _ = returns[0].(*appstream.DeleteImagePermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) DeleteImagePermissionsRequest(i0 *appstream.DeleteImagePermissionsInput) (r0 *request.Request, r1 *appstream.DeleteImagePermissionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteImagePermissionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.DeleteImagePermissionsOutput)
	return
}

func (d *AppStreamDouble) DeleteImagePermissionsWithContext(i0 context.Context, i1 *appstream.DeleteImagePermissionsInput, i2 ...request.Option) (r0 *appstream.DeleteImagePermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteImagePermissionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.DeleteImagePermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeDeleteImagePermissionsWithContext(ctx context.Context, in *appstream.DeleteImagePermissionsInput, _ ...request.Option) (*appstream.DeleteImagePermissionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteImagePermissions cancelled", ctx.Err())
	default:
		return d.DeleteImagePermissions(in)
	}
}

func (d *AppStreamDouble) DeleteImageRequest(i0 *appstream.DeleteImageInput) (r0 *request.Request, r1 *appstream.DeleteImageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteImageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.DeleteImageOutput)
	return
}

func (d *AppStreamDouble) DeleteImageWithContext(i0 context.Context, i1 *appstream.DeleteImageInput, i2 ...request.Option) (r0 *appstream.DeleteImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteImageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.DeleteImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeDeleteImageWithContext(ctx context.Context, in *appstream.DeleteImageInput, _ ...request.Option) (*appstream.DeleteImageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteImage cancelled", ctx.Err())
	default:
		return d.DeleteImage(in)
	}
}

func (d *AppStreamDouble) DeleteStack(i0 *appstream.DeleteStackInput) (r0 *appstream.DeleteStackOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteStack", i0)
	r0, _ = returns[0].(*appstream.DeleteStackOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) DeleteStackRequest(i0 *appstream.DeleteStackInput) (r0 *request.Request, r1 *appstream.DeleteStackOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteStackRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.DeleteStackOutput)
	return
}

func (d *AppStreamDouble) DeleteStackWithContext(i0 context.Context, i1 *appstream.DeleteStackInput, i2 ...request.Option) (r0 *appstream.DeleteStackOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteStackWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.DeleteStackOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeDeleteStackWithContext(ctx context.Context, in *appstream.DeleteStackInput, _ ...request.Option) (*appstream.DeleteStackOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteStack cancelled", ctx.Err())
	default:
		return d.DeleteStack(in)
	}
}

func (d *AppStreamDouble) DeleteUsageReportSubscription(i0 *appstream.DeleteUsageReportSubscriptionInput) (r0 *appstream.DeleteUsageReportSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUsageReportSubscription", i0)
	r0, _ = returns[0].(*appstream.DeleteUsageReportSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) DeleteUsageReportSubscriptionRequest(i0 *appstream.DeleteUsageReportSubscriptionInput) (r0 *request.Request, r1 *appstream.DeleteUsageReportSubscriptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUsageReportSubscriptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.DeleteUsageReportSubscriptionOutput)
	return
}

func (d *AppStreamDouble) DeleteUsageReportSubscriptionWithContext(i0 context.Context, i1 *appstream.DeleteUsageReportSubscriptionInput, i2 ...request.Option) (r0 *appstream.DeleteUsageReportSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUsageReportSubscriptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.DeleteUsageReportSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeDeleteUsageReportSubscriptionWithContext(ctx context.Context, in *appstream.DeleteUsageReportSubscriptionInput, _ ...request.Option) (*appstream.DeleteUsageReportSubscriptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteUsageReportSubscription cancelled", ctx.Err())
	default:
		return d.DeleteUsageReportSubscription(in)
	}
}

func (d *AppStreamDouble) DeleteUser(i0 *appstream.DeleteUserInput) (r0 *appstream.DeleteUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUser", i0)
	r0, _ = returns[0].(*appstream.DeleteUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) DeleteUserRequest(i0 *appstream.DeleteUserInput) (r0 *request.Request, r1 *appstream.DeleteUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.DeleteUserOutput)
	return
}

func (d *AppStreamDouble) DeleteUserWithContext(i0 context.Context, i1 *appstream.DeleteUserInput, i2 ...request.Option) (r0 *appstream.DeleteUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.DeleteUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeDeleteUserWithContext(ctx context.Context, in *appstream.DeleteUserInput, _ ...request.Option) (*appstream.DeleteUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteUser cancelled", ctx.Err())
	default:
		return d.DeleteUser(in)
	}
}

func (d *AppStreamDouble) DescribeDirectoryConfigs(i0 *appstream.DescribeDirectoryConfigsInput) (r0 *appstream.DescribeDirectoryConfigsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDirectoryConfigs", i0)
	r0, _ = returns[0].(*appstream.DescribeDirectoryConfigsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) DescribeDirectoryConfigsRequest(i0 *appstream.DescribeDirectoryConfigsInput) (r0 *request.Request, r1 *appstream.DescribeDirectoryConfigsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDirectoryConfigsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.DescribeDirectoryConfigsOutput)
	return
}

func (d *AppStreamDouble) DescribeDirectoryConfigsWithContext(i0 context.Context, i1 *appstream.DescribeDirectoryConfigsInput, i2 ...request.Option) (r0 *appstream.DescribeDirectoryConfigsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDirectoryConfigsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.DescribeDirectoryConfigsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeDescribeDirectoryConfigsWithContext(ctx context.Context, in *appstream.DescribeDirectoryConfigsInput, _ ...request.Option) (*appstream.DescribeDirectoryConfigsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDirectoryConfigs cancelled", ctx.Err())
	default:
		return d.DescribeDirectoryConfigs(in)
	}
}

func (d *AppStreamDouble) DescribeFleets(i0 *appstream.DescribeFleetsInput) (r0 *appstream.DescribeFleetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFleets", i0)
	r0, _ = returns[0].(*appstream.DescribeFleetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) DescribeFleetsRequest(i0 *appstream.DescribeFleetsInput) (r0 *request.Request, r1 *appstream.DescribeFleetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFleetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.DescribeFleetsOutput)
	return
}

func (d *AppStreamDouble) DescribeFleetsWithContext(i0 context.Context, i1 *appstream.DescribeFleetsInput, i2 ...request.Option) (r0 *appstream.DescribeFleetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFleetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.DescribeFleetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeDescribeFleetsWithContext(ctx context.Context, in *appstream.DescribeFleetsInput, _ ...request.Option) (*appstream.DescribeFleetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeFleets cancelled", ctx.Err())
	default:
		return d.DescribeFleets(in)
	}
}

func (d *AppStreamDouble) DescribeImageBuilders(i0 *appstream.DescribeImageBuildersInput) (r0 *appstream.DescribeImageBuildersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImageBuilders", i0)
	r0, _ = returns[0].(*appstream.DescribeImageBuildersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) DescribeImageBuildersRequest(i0 *appstream.DescribeImageBuildersInput) (r0 *request.Request, r1 *appstream.DescribeImageBuildersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImageBuildersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.DescribeImageBuildersOutput)
	return
}

func (d *AppStreamDouble) DescribeImageBuildersWithContext(i0 context.Context, i1 *appstream.DescribeImageBuildersInput, i2 ...request.Option) (r0 *appstream.DescribeImageBuildersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImageBuildersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.DescribeImageBuildersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeDescribeImageBuildersWithContext(ctx context.Context, in *appstream.DescribeImageBuildersInput, _ ...request.Option) (*appstream.DescribeImageBuildersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeImageBuilders cancelled", ctx.Err())
	default:
		return d.DescribeImageBuilders(in)
	}
}

func (d *AppStreamDouble) DescribeImagePermissions(i0 *appstream.DescribeImagePermissionsInput) (r0 *appstream.DescribeImagePermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImagePermissions", i0)
	r0, _ = returns[0].(*appstream.DescribeImagePermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) DescribeImagePermissionsPages(i0 *appstream.DescribeImagePermissionsInput, i1 func(*appstream.DescribeImagePermissionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImagePermissionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AppStreamDouble) fakeDescribeImagePermissionsPages(in *appstream.DescribeImagePermissionsInput, pager func(*appstream.DescribeImagePermissionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeImagePermissions", paginators, in, pager)
}

func (d *AppStreamDouble) DescribeImagePermissionsPagesWithContext(i0 context.Context, i1 *appstream.DescribeImagePermissionsInput, i2 func(*appstream.DescribeImagePermissionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImagePermissionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AppStreamDouble) fakeDescribeImagePermissionsPagesWithContext(ctx context.Context, in *appstream.DescribeImagePermissionsInput, pager func(*appstream.DescribeImagePermissionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeImagePermissions", paginators, ctx, in, pager, options...)
}

func (d *AppStreamDouble) DescribeImagePermissionsRequest(i0 *appstream.DescribeImagePermissionsInput) (r0 *request.Request, r1 *appstream.DescribeImagePermissionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImagePermissionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.DescribeImagePermissionsOutput)
	return
}

func (d *AppStreamDouble) DescribeImagePermissionsWithContext(i0 context.Context, i1 *appstream.DescribeImagePermissionsInput, i2 ...request.Option) (r0 *appstream.DescribeImagePermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImagePermissionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.DescribeImagePermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeDescribeImagePermissionsWithContext(ctx context.Context, in *appstream.DescribeImagePermissionsInput, _ ...request.Option) (*appstream.DescribeImagePermissionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeImagePermissions cancelled", ctx.Err())
	default:
		return d.DescribeImagePermissions(in)
	}
}

func (d *AppStreamDouble) DescribeImages(i0 *appstream.DescribeImagesInput) (r0 *appstream.DescribeImagesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImages", i0)
	r0, _ = returns[0].(*appstream.DescribeImagesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) DescribeImagesPages(i0 *appstream.DescribeImagesInput, i1 func(*appstream.DescribeImagesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImagesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AppStreamDouble) fakeDescribeImagesPages(in *appstream.DescribeImagesInput, pager func(*appstream.DescribeImagesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeImages", paginators, in, pager)
}

func (d *AppStreamDouble) DescribeImagesPagesWithContext(i0 context.Context, i1 *appstream.DescribeImagesInput, i2 func(*appstream.DescribeImagesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImagesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AppStreamDouble) fakeDescribeImagesPagesWithContext(ctx context.Context, in *appstream.DescribeImagesInput, pager func(*appstream.DescribeImagesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeImages", paginators, ctx, in, pager, options...)
}

func (d *AppStreamDouble) DescribeImagesRequest(i0 *appstream.DescribeImagesInput) (r0 *request.Request, r1 *appstream.DescribeImagesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImagesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.DescribeImagesOutput)
	return
}

func (d *AppStreamDouble) DescribeImagesWithContext(i0 context.Context, i1 *appstream.DescribeImagesInput, i2 ...request.Option) (r0 *appstream.DescribeImagesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeImagesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.DescribeImagesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeDescribeImagesWithContext(ctx context.Context, in *appstream.DescribeImagesInput, _ ...request.Option) (*appstream.DescribeImagesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeImages cancelled", ctx.Err())
	default:
		return d.DescribeImages(in)
	}
}

func (d *AppStreamDouble) DescribeSessions(i0 *appstream.DescribeSessionsInput) (r0 *appstream.DescribeSessionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSessions", i0)
	r0, _ = returns[0].(*appstream.DescribeSessionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) DescribeSessionsRequest(i0 *appstream.DescribeSessionsInput) (r0 *request.Request, r1 *appstream.DescribeSessionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSessionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.DescribeSessionsOutput)
	return
}

func (d *AppStreamDouble) DescribeSessionsWithContext(i0 context.Context, i1 *appstream.DescribeSessionsInput, i2 ...request.Option) (r0 *appstream.DescribeSessionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSessionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.DescribeSessionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeDescribeSessionsWithContext(ctx context.Context, in *appstream.DescribeSessionsInput, _ ...request.Option) (*appstream.DescribeSessionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSessions cancelled", ctx.Err())
	default:
		return d.DescribeSessions(in)
	}
}

func (d *AppStreamDouble) DescribeStacks(i0 *appstream.DescribeStacksInput) (r0 *appstream.DescribeStacksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStacks", i0)
	r0, _ = returns[0].(*appstream.DescribeStacksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) DescribeStacksRequest(i0 *appstream.DescribeStacksInput) (r0 *request.Request, r1 *appstream.DescribeStacksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStacksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.DescribeStacksOutput)
	return
}

func (d *AppStreamDouble) DescribeStacksWithContext(i0 context.Context, i1 *appstream.DescribeStacksInput, i2 ...request.Option) (r0 *appstream.DescribeStacksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStacksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.DescribeStacksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeDescribeStacksWithContext(ctx context.Context, in *appstream.DescribeStacksInput, _ ...request.Option) (*appstream.DescribeStacksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeStacks cancelled", ctx.Err())
	default:
		return d.DescribeStacks(in)
	}
}

func (d *AppStreamDouble) DescribeUsageReportSubscriptions(i0 *appstream.DescribeUsageReportSubscriptionsInput) (r0 *appstream.DescribeUsageReportSubscriptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUsageReportSubscriptions", i0)
	r0, _ = returns[0].(*appstream.DescribeUsageReportSubscriptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) DescribeUsageReportSubscriptionsRequest(i0 *appstream.DescribeUsageReportSubscriptionsInput) (r0 *request.Request, r1 *appstream.DescribeUsageReportSubscriptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUsageReportSubscriptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.DescribeUsageReportSubscriptionsOutput)
	return
}

func (d *AppStreamDouble) DescribeUsageReportSubscriptionsWithContext(i0 context.Context, i1 *appstream.DescribeUsageReportSubscriptionsInput, i2 ...request.Option) (r0 *appstream.DescribeUsageReportSubscriptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUsageReportSubscriptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.DescribeUsageReportSubscriptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeDescribeUsageReportSubscriptionsWithContext(ctx context.Context, in *appstream.DescribeUsageReportSubscriptionsInput, _ ...request.Option) (*appstream.DescribeUsageReportSubscriptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeUsageReportSubscriptions cancelled", ctx.Err())
	default:
		return d.DescribeUsageReportSubscriptions(in)
	}
}

func (d *AppStreamDouble) DescribeUserStackAssociations(i0 *appstream.DescribeUserStackAssociationsInput) (r0 *appstream.DescribeUserStackAssociationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserStackAssociations", i0)
	r0, _ = returns[0].(*appstream.DescribeUserStackAssociationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) DescribeUserStackAssociationsRequest(i0 *appstream.DescribeUserStackAssociationsInput) (r0 *request.Request, r1 *appstream.DescribeUserStackAssociationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserStackAssociationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.DescribeUserStackAssociationsOutput)
	return
}

func (d *AppStreamDouble) DescribeUserStackAssociationsWithContext(i0 context.Context, i1 *appstream.DescribeUserStackAssociationsInput, i2 ...request.Option) (r0 *appstream.DescribeUserStackAssociationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUserStackAssociationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.DescribeUserStackAssociationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeDescribeUserStackAssociationsWithContext(ctx context.Context, in *appstream.DescribeUserStackAssociationsInput, _ ...request.Option) (*appstream.DescribeUserStackAssociationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeUserStackAssociations cancelled", ctx.Err())
	default:
		return d.DescribeUserStackAssociations(in)
	}
}

func (d *AppStreamDouble) DescribeUsers(i0 *appstream.DescribeUsersInput) (r0 *appstream.DescribeUsersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUsers", i0)
	r0, _ = returns[0].(*appstream.DescribeUsersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) DescribeUsersRequest(i0 *appstream.DescribeUsersInput) (r0 *request.Request, r1 *appstream.DescribeUsersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUsersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.DescribeUsersOutput)
	return
}

func (d *AppStreamDouble) DescribeUsersWithContext(i0 context.Context, i1 *appstream.DescribeUsersInput, i2 ...request.Option) (r0 *appstream.DescribeUsersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUsersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.DescribeUsersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeDescribeUsersWithContext(ctx context.Context, in *appstream.DescribeUsersInput, _ ...request.Option) (*appstream.DescribeUsersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeUsers cancelled", ctx.Err())
	default:
		return d.DescribeUsers(in)
	}
}

func (d *AppStreamDouble) DisableUser(i0 *appstream.DisableUserInput) (r0 *appstream.DisableUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableUser", i0)
	r0, _ = returns[0].(*appstream.DisableUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) DisableUserRequest(i0 *appstream.DisableUserInput) (r0 *request.Request, r1 *appstream.DisableUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.DisableUserOutput)
	return
}

func (d *AppStreamDouble) DisableUserWithContext(i0 context.Context, i1 *appstream.DisableUserInput, i2 ...request.Option) (r0 *appstream.DisableUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.DisableUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeDisableUserWithContext(ctx context.Context, in *appstream.DisableUserInput, _ ...request.Option) (*appstream.DisableUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisableUser cancelled", ctx.Err())
	default:
		return d.DisableUser(in)
	}
}

func (d *AppStreamDouble) DisassociateFleet(i0 *appstream.DisassociateFleetInput) (r0 *appstream.DisassociateFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateFleet", i0)
	r0, _ = returns[0].(*appstream.DisassociateFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) DisassociateFleetRequest(i0 *appstream.DisassociateFleetInput) (r0 *request.Request, r1 *appstream.DisassociateFleetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateFleetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.DisassociateFleetOutput)
	return
}

func (d *AppStreamDouble) DisassociateFleetWithContext(i0 context.Context, i1 *appstream.DisassociateFleetInput, i2 ...request.Option) (r0 *appstream.DisassociateFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateFleetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.DisassociateFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeDisassociateFleetWithContext(ctx context.Context, in *appstream.DisassociateFleetInput, _ ...request.Option) (*appstream.DisassociateFleetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateFleet cancelled", ctx.Err())
	default:
		return d.DisassociateFleet(in)
	}
}

func (d *AppStreamDouble) EnableUser(i0 *appstream.EnableUserInput) (r0 *appstream.EnableUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableUser", i0)
	r0, _ = returns[0].(*appstream.EnableUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) EnableUserRequest(i0 *appstream.EnableUserInput) (r0 *request.Request, r1 *appstream.EnableUserOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableUserRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.EnableUserOutput)
	return
}

func (d *AppStreamDouble) EnableUserWithContext(i0 context.Context, i1 *appstream.EnableUserInput, i2 ...request.Option) (r0 *appstream.EnableUserOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableUserWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.EnableUserOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeEnableUserWithContext(ctx context.Context, in *appstream.EnableUserInput, _ ...request.Option) (*appstream.EnableUserOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "EnableUser cancelled", ctx.Err())
	default:
		return d.EnableUser(in)
	}
}

func (d *AppStreamDouble) ExpireSession(i0 *appstream.ExpireSessionInput) (r0 *appstream.ExpireSessionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExpireSession", i0)
	r0, _ = returns[0].(*appstream.ExpireSessionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) ExpireSessionRequest(i0 *appstream.ExpireSessionInput) (r0 *request.Request, r1 *appstream.ExpireSessionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExpireSessionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.ExpireSessionOutput)
	return
}

func (d *AppStreamDouble) ExpireSessionWithContext(i0 context.Context, i1 *appstream.ExpireSessionInput, i2 ...request.Option) (r0 *appstream.ExpireSessionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExpireSessionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.ExpireSessionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeExpireSessionWithContext(ctx context.Context, in *appstream.ExpireSessionInput, _ ...request.Option) (*appstream.ExpireSessionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ExpireSession cancelled", ctx.Err())
	default:
		return d.ExpireSession(in)
	}
}

func (d *AppStreamDouble) ListAssociatedFleets(i0 *appstream.ListAssociatedFleetsInput) (r0 *appstream.ListAssociatedFleetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssociatedFleets", i0)
	r0, _ = returns[0].(*appstream.ListAssociatedFleetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) ListAssociatedFleetsRequest(i0 *appstream.ListAssociatedFleetsInput) (r0 *request.Request, r1 *appstream.ListAssociatedFleetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssociatedFleetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.ListAssociatedFleetsOutput)
	return
}

func (d *AppStreamDouble) ListAssociatedFleetsWithContext(i0 context.Context, i1 *appstream.ListAssociatedFleetsInput, i2 ...request.Option) (r0 *appstream.ListAssociatedFleetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssociatedFleetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.ListAssociatedFleetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeListAssociatedFleetsWithContext(ctx context.Context, in *appstream.ListAssociatedFleetsInput, _ ...request.Option) (*appstream.ListAssociatedFleetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAssociatedFleets cancelled", ctx.Err())
	default:
		return d.ListAssociatedFleets(in)
	}
}

func (d *AppStreamDouble) ListAssociatedStacks(i0 *appstream.ListAssociatedStacksInput) (r0 *appstream.ListAssociatedStacksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssociatedStacks", i0)
	r0, _ = returns[0].(*appstream.ListAssociatedStacksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) ListAssociatedStacksRequest(i0 *appstream.ListAssociatedStacksInput) (r0 *request.Request, r1 *appstream.ListAssociatedStacksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssociatedStacksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.ListAssociatedStacksOutput)
	return
}

func (d *AppStreamDouble) ListAssociatedStacksWithContext(i0 context.Context, i1 *appstream.ListAssociatedStacksInput, i2 ...request.Option) (r0 *appstream.ListAssociatedStacksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssociatedStacksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.ListAssociatedStacksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeListAssociatedStacksWithContext(ctx context.Context, in *appstream.ListAssociatedStacksInput, _ ...request.Option) (*appstream.ListAssociatedStacksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAssociatedStacks cancelled", ctx.Err())
	default:
		return d.ListAssociatedStacks(in)
	}
}

func (d *AppStreamDouble) ListTagsForResource(i0 *appstream.ListTagsForResourceInput) (r0 *appstream.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*appstream.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) ListTagsForResourceRequest(i0 *appstream.ListTagsForResourceInput) (r0 *request.Request, r1 *appstream.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.ListTagsForResourceOutput)
	return
}

func (d *AppStreamDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *appstream.ListTagsForResourceInput, i2 ...request.Option) (r0 *appstream.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *appstream.ListTagsForResourceInput, _ ...request.Option) (*appstream.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *AppStreamDouble) StartFleet(i0 *appstream.StartFleetInput) (r0 *appstream.StartFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartFleet", i0)
	r0, _ = returns[0].(*appstream.StartFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) StartFleetRequest(i0 *appstream.StartFleetInput) (r0 *request.Request, r1 *appstream.StartFleetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartFleetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.StartFleetOutput)
	return
}

func (d *AppStreamDouble) StartFleetWithContext(i0 context.Context, i1 *appstream.StartFleetInput, i2 ...request.Option) (r0 *appstream.StartFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartFleetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.StartFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeStartFleetWithContext(ctx context.Context, in *appstream.StartFleetInput, _ ...request.Option) (*appstream.StartFleetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartFleet cancelled", ctx.Err())
	default:
		return d.StartFleet(in)
	}
}

func (d *AppStreamDouble) StartImageBuilder(i0 *appstream.StartImageBuilderInput) (r0 *appstream.StartImageBuilderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartImageBuilder", i0)
	r0, _ = returns[0].(*appstream.StartImageBuilderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) StartImageBuilderRequest(i0 *appstream.StartImageBuilderInput) (r0 *request.Request, r1 *appstream.StartImageBuilderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartImageBuilderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.StartImageBuilderOutput)
	return
}

func (d *AppStreamDouble) StartImageBuilderWithContext(i0 context.Context, i1 *appstream.StartImageBuilderInput, i2 ...request.Option) (r0 *appstream.StartImageBuilderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartImageBuilderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.StartImageBuilderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeStartImageBuilderWithContext(ctx context.Context, in *appstream.StartImageBuilderInput, _ ...request.Option) (*appstream.StartImageBuilderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartImageBuilder cancelled", ctx.Err())
	default:
		return d.StartImageBuilder(in)
	}
}

func (d *AppStreamDouble) StopFleet(i0 *appstream.StopFleetInput) (r0 *appstream.StopFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopFleet", i0)
	r0, _ = returns[0].(*appstream.StopFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) StopFleetRequest(i0 *appstream.StopFleetInput) (r0 *request.Request, r1 *appstream.StopFleetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopFleetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.StopFleetOutput)
	return
}

func (d *AppStreamDouble) StopFleetWithContext(i0 context.Context, i1 *appstream.StopFleetInput, i2 ...request.Option) (r0 *appstream.StopFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopFleetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.StopFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeStopFleetWithContext(ctx context.Context, in *appstream.StopFleetInput, _ ...request.Option) (*appstream.StopFleetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopFleet cancelled", ctx.Err())
	default:
		return d.StopFleet(in)
	}
}

func (d *AppStreamDouble) StopImageBuilder(i0 *appstream.StopImageBuilderInput) (r0 *appstream.StopImageBuilderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopImageBuilder", i0)
	r0, _ = returns[0].(*appstream.StopImageBuilderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) StopImageBuilderRequest(i0 *appstream.StopImageBuilderInput) (r0 *request.Request, r1 *appstream.StopImageBuilderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopImageBuilderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.StopImageBuilderOutput)
	return
}

func (d *AppStreamDouble) StopImageBuilderWithContext(i0 context.Context, i1 *appstream.StopImageBuilderInput, i2 ...request.Option) (r0 *appstream.StopImageBuilderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopImageBuilderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.StopImageBuilderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeStopImageBuilderWithContext(ctx context.Context, in *appstream.StopImageBuilderInput, _ ...request.Option) (*appstream.StopImageBuilderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopImageBuilder cancelled", ctx.Err())
	default:
		return d.StopImageBuilder(in)
	}
}

func (d *AppStreamDouble) TagResource(i0 *appstream.TagResourceInput) (r0 *appstream.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*appstream.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) TagResourceRequest(i0 *appstream.TagResourceInput) (r0 *request.Request, r1 *appstream.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.TagResourceOutput)
	return
}

func (d *AppStreamDouble) TagResourceWithContext(i0 context.Context, i1 *appstream.TagResourceInput, i2 ...request.Option) (r0 *appstream.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeTagResourceWithContext(ctx context.Context, in *appstream.TagResourceInput, _ ...request.Option) (*appstream.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *AppStreamDouble) UntagResource(i0 *appstream.UntagResourceInput) (r0 *appstream.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*appstream.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) UntagResourceRequest(i0 *appstream.UntagResourceInput) (r0 *request.Request, r1 *appstream.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.UntagResourceOutput)
	return
}

func (d *AppStreamDouble) UntagResourceWithContext(i0 context.Context, i1 *appstream.UntagResourceInput, i2 ...request.Option) (r0 *appstream.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeUntagResourceWithContext(ctx context.Context, in *appstream.UntagResourceInput, _ ...request.Option) (*appstream.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *AppStreamDouble) UpdateDirectoryConfig(i0 *appstream.UpdateDirectoryConfigInput) (r0 *appstream.UpdateDirectoryConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDirectoryConfig", i0)
	r0, _ = returns[0].(*appstream.UpdateDirectoryConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) UpdateDirectoryConfigRequest(i0 *appstream.UpdateDirectoryConfigInput) (r0 *request.Request, r1 *appstream.UpdateDirectoryConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDirectoryConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.UpdateDirectoryConfigOutput)
	return
}

func (d *AppStreamDouble) UpdateDirectoryConfigWithContext(i0 context.Context, i1 *appstream.UpdateDirectoryConfigInput, i2 ...request.Option) (r0 *appstream.UpdateDirectoryConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDirectoryConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.UpdateDirectoryConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeUpdateDirectoryConfigWithContext(ctx context.Context, in *appstream.UpdateDirectoryConfigInput, _ ...request.Option) (*appstream.UpdateDirectoryConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDirectoryConfig cancelled", ctx.Err())
	default:
		return d.UpdateDirectoryConfig(in)
	}
}

func (d *AppStreamDouble) UpdateFleet(i0 *appstream.UpdateFleetInput) (r0 *appstream.UpdateFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFleet", i0)
	r0, _ = returns[0].(*appstream.UpdateFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) UpdateFleetRequest(i0 *appstream.UpdateFleetInput) (r0 *request.Request, r1 *appstream.UpdateFleetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFleetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.UpdateFleetOutput)
	return
}

func (d *AppStreamDouble) UpdateFleetWithContext(i0 context.Context, i1 *appstream.UpdateFleetInput, i2 ...request.Option) (r0 *appstream.UpdateFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFleetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.UpdateFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeUpdateFleetWithContext(ctx context.Context, in *appstream.UpdateFleetInput, _ ...request.Option) (*appstream.UpdateFleetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateFleet cancelled", ctx.Err())
	default:
		return d.UpdateFleet(in)
	}
}

func (d *AppStreamDouble) UpdateImagePermissions(i0 *appstream.UpdateImagePermissionsInput) (r0 *appstream.UpdateImagePermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateImagePermissions", i0)
	r0, _ = returns[0].(*appstream.UpdateImagePermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) UpdateImagePermissionsRequest(i0 *appstream.UpdateImagePermissionsInput) (r0 *request.Request, r1 *appstream.UpdateImagePermissionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateImagePermissionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.UpdateImagePermissionsOutput)
	return
}

func (d *AppStreamDouble) UpdateImagePermissionsWithContext(i0 context.Context, i1 *appstream.UpdateImagePermissionsInput, i2 ...request.Option) (r0 *appstream.UpdateImagePermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateImagePermissionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.UpdateImagePermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeUpdateImagePermissionsWithContext(ctx context.Context, in *appstream.UpdateImagePermissionsInput, _ ...request.Option) (*appstream.UpdateImagePermissionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateImagePermissions cancelled", ctx.Err())
	default:
		return d.UpdateImagePermissions(in)
	}
}

func (d *AppStreamDouble) UpdateStack(i0 *appstream.UpdateStackInput) (r0 *appstream.UpdateStackOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateStack", i0)
	r0, _ = returns[0].(*appstream.UpdateStackOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) UpdateStackRequest(i0 *appstream.UpdateStackInput) (r0 *request.Request, r1 *appstream.UpdateStackOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateStackRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*appstream.UpdateStackOutput)
	return
}

func (d *AppStreamDouble) UpdateStackWithContext(i0 context.Context, i1 *appstream.UpdateStackInput, i2 ...request.Option) (r0 *appstream.UpdateStackOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateStackWithContext", i0, i1, i2)
	r0, _ = returns[0].(*appstream.UpdateStackOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AppStreamDouble) fakeUpdateStackWithContext(ctx context.Context, in *appstream.UpdateStackInput, _ ...request.Option) (*appstream.UpdateStackOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateStack cancelled", ctx.Err())
	default:
		return d.UpdateStack(in)
	}
}

func (d *AppStreamDouble) WaitUntilFleetStarted(i0 *appstream.DescribeFleetsInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilFleetStarted", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *AppStreamDouble) fakeWaitUntilFleetStarted(in *appstream.DescribeFleetsInput) error {
	return d.WaitUntil("FleetStarted", waiters, in)
}

func (d *AppStreamDouble) WaitUntilFleetStartedWithContext(i0 context.Context, i1 *appstream.DescribeFleetsInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilFleetStartedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *AppStreamDouble) fakeWaitUntilFleetStartedWithContext(ctx context.Context, in *appstream.DescribeFleetsInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("FleetStarted", waiters, ctx, in, waitOption...)
}

func (d *AppStreamDouble) WaitUntilFleetStopped(i0 *appstream.DescribeFleetsInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilFleetStopped", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *AppStreamDouble) fakeWaitUntilFleetStopped(in *appstream.DescribeFleetsInput) error {
	return d.WaitUntil("FleetStopped", waiters, in)
}

func (d *AppStreamDouble) WaitUntilFleetStoppedWithContext(i0 context.Context, i1 *appstream.DescribeFleetsInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilFleetStoppedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *AppStreamDouble) fakeWaitUntilFleetStoppedWithContext(ctx context.Context, in *appstream.DescribeFleetsInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("FleetStopped", waiters, ctx, in, waitOption...)
}
