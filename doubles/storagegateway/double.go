// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:15:17+11:00

// Package storagegatewaydouble provides a TestDouble implementation of storagegatewayiface.StorageGatewayAPI
package storagegatewaydouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/storagegateway"
	"github.com/aws/aws-sdk-go/service/storagegateway/storagegatewayiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// StorageGatewayDouble is TestDouble for storagegatewayiface.StorageGatewayAPI
type StorageGatewayDouble struct {
	storagegatewayiface.StorageGatewayAPI
	*awsdouble.AWSTestDouble
}

// Constructor for StorageGatewayDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *StorageGatewayDouble {
	result := &StorageGatewayDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*storagegatewayiface.StorageGatewayAPI)(nil), configurators...)
	return result
}

func (d *StorageGatewayDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *StorageGatewayDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "ActivateGatewayWithContext":
		return m.Fake(d.fakeActivateGatewayWithContext)

	case "AddCacheWithContext":
		return m.Fake(d.fakeAddCacheWithContext)

	case "AddTagsToResourceWithContext":
		return m.Fake(d.fakeAddTagsToResourceWithContext)

	case "AddUploadBufferWithContext":
		return m.Fake(d.fakeAddUploadBufferWithContext)

	case "AddWorkingStorageWithContext":
		return m.Fake(d.fakeAddWorkingStorageWithContext)

	case "AssignTapePoolWithContext":
		return m.Fake(d.fakeAssignTapePoolWithContext)

	case "AttachVolumeWithContext":
		return m.Fake(d.fakeAttachVolumeWithContext)

	case "CancelArchivalWithContext":
		return m.Fake(d.fakeCancelArchivalWithContext)

	case "CancelRetrievalWithContext":
		return m.Fake(d.fakeCancelRetrievalWithContext)

	case "CreateCachediSCSIVolumeWithContext":
		return m.Fake(d.fakeCreateCachediSCSIVolumeWithContext)

	case "CreateNFSFileShareWithContext":
		return m.Fake(d.fakeCreateNFSFileShareWithContext)

	case "CreateSMBFileShareWithContext":
		return m.Fake(d.fakeCreateSMBFileShareWithContext)

	case "CreateSnapshotFromVolumeRecoveryPointWithContext":
		return m.Fake(d.fakeCreateSnapshotFromVolumeRecoveryPointWithContext)

	case "CreateSnapshotWithContext":
		return m.Fake(d.fakeCreateSnapshotWithContext)

	case "CreateStorediSCSIVolumeWithContext":
		return m.Fake(d.fakeCreateStorediSCSIVolumeWithContext)

	case "CreateTapeWithBarcodeWithContext":
		return m.Fake(d.fakeCreateTapeWithBarcodeWithContext)

	case "CreateTapesWithContext":
		return m.Fake(d.fakeCreateTapesWithContext)

	case "DeleteBandwidthRateLimitWithContext":
		return m.Fake(d.fakeDeleteBandwidthRateLimitWithContext)

	case "DeleteChapCredentialsWithContext":
		return m.Fake(d.fakeDeleteChapCredentialsWithContext)

	case "DeleteFileShareWithContext":
		return m.Fake(d.fakeDeleteFileShareWithContext)

	case "DeleteGatewayWithContext":
		return m.Fake(d.fakeDeleteGatewayWithContext)

	case "DeleteSnapshotScheduleWithContext":
		return m.Fake(d.fakeDeleteSnapshotScheduleWithContext)

	case "DeleteTapeArchiveWithContext":
		return m.Fake(d.fakeDeleteTapeArchiveWithContext)

	case "DeleteTapeWithContext":
		return m.Fake(d.fakeDeleteTapeWithContext)

	case "DeleteVolumeWithContext":
		return m.Fake(d.fakeDeleteVolumeWithContext)

	case "DescribeAvailabilityMonitorTestWithContext":
		return m.Fake(d.fakeDescribeAvailabilityMonitorTestWithContext)

	case "DescribeBandwidthRateLimitWithContext":
		return m.Fake(d.fakeDescribeBandwidthRateLimitWithContext)

	case "DescribeCacheWithContext":
		return m.Fake(d.fakeDescribeCacheWithContext)

	case "DescribeCachediSCSIVolumesWithContext":
		return m.Fake(d.fakeDescribeCachediSCSIVolumesWithContext)

	case "DescribeChapCredentialsWithContext":
		return m.Fake(d.fakeDescribeChapCredentialsWithContext)

	case "DescribeGatewayInformationWithContext":
		return m.Fake(d.fakeDescribeGatewayInformationWithContext)

	case "DescribeMaintenanceStartTimeWithContext":
		return m.Fake(d.fakeDescribeMaintenanceStartTimeWithContext)

	case "DescribeNFSFileSharesWithContext":
		return m.Fake(d.fakeDescribeNFSFileSharesWithContext)

	case "DescribeSMBFileSharesWithContext":
		return m.Fake(d.fakeDescribeSMBFileSharesWithContext)

	case "DescribeSMBSettingsWithContext":
		return m.Fake(d.fakeDescribeSMBSettingsWithContext)

	case "DescribeSnapshotScheduleWithContext":
		return m.Fake(d.fakeDescribeSnapshotScheduleWithContext)

	case "DescribeStorediSCSIVolumesWithContext":
		return m.Fake(d.fakeDescribeStorediSCSIVolumesWithContext)

	case "DescribeTapeArchivesPages":
		return m.Fake(d.fakeDescribeTapeArchivesPages)

	case "DescribeTapeArchivesPagesWithContext":
		return m.Fake(d.fakeDescribeTapeArchivesPagesWithContext)

	case "DescribeTapeArchivesWithContext":
		return m.Fake(d.fakeDescribeTapeArchivesWithContext)

	case "DescribeTapeRecoveryPointsPages":
		return m.Fake(d.fakeDescribeTapeRecoveryPointsPages)

	case "DescribeTapeRecoveryPointsPagesWithContext":
		return m.Fake(d.fakeDescribeTapeRecoveryPointsPagesWithContext)

	case "DescribeTapeRecoveryPointsWithContext":
		return m.Fake(d.fakeDescribeTapeRecoveryPointsWithContext)

	case "DescribeTapesPages":
		return m.Fake(d.fakeDescribeTapesPages)

	case "DescribeTapesPagesWithContext":
		return m.Fake(d.fakeDescribeTapesPagesWithContext)

	case "DescribeTapesWithContext":
		return m.Fake(d.fakeDescribeTapesWithContext)

	case "DescribeUploadBufferWithContext":
		return m.Fake(d.fakeDescribeUploadBufferWithContext)

	case "DescribeVTLDevicesPages":
		return m.Fake(d.fakeDescribeVTLDevicesPages)

	case "DescribeVTLDevicesPagesWithContext":
		return m.Fake(d.fakeDescribeVTLDevicesPagesWithContext)

	case "DescribeVTLDevicesWithContext":
		return m.Fake(d.fakeDescribeVTLDevicesWithContext)

	case "DescribeWorkingStorageWithContext":
		return m.Fake(d.fakeDescribeWorkingStorageWithContext)

	case "DetachVolumeWithContext":
		return m.Fake(d.fakeDetachVolumeWithContext)

	case "DisableGatewayWithContext":
		return m.Fake(d.fakeDisableGatewayWithContext)

	case "JoinDomainWithContext":
		return m.Fake(d.fakeJoinDomainWithContext)

	case "ListFileSharesPages":
		return m.Fake(d.fakeListFileSharesPages)

	case "ListFileSharesPagesWithContext":
		return m.Fake(d.fakeListFileSharesPagesWithContext)

	case "ListFileSharesWithContext":
		return m.Fake(d.fakeListFileSharesWithContext)

	case "ListGatewaysPages":
		return m.Fake(d.fakeListGatewaysPages)

	case "ListGatewaysPagesWithContext":
		return m.Fake(d.fakeListGatewaysPagesWithContext)

	case "ListGatewaysWithContext":
		return m.Fake(d.fakeListGatewaysWithContext)

	case "ListLocalDisksWithContext":
		return m.Fake(d.fakeListLocalDisksWithContext)

	case "ListTagsForResourcePages":
		return m.Fake(d.fakeListTagsForResourcePages)

	case "ListTagsForResourcePagesWithContext":
		return m.Fake(d.fakeListTagsForResourcePagesWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "ListTapesPages":
		return m.Fake(d.fakeListTapesPages)

	case "ListTapesPagesWithContext":
		return m.Fake(d.fakeListTapesPagesWithContext)

	case "ListTapesWithContext":
		return m.Fake(d.fakeListTapesWithContext)

	case "ListVolumeInitiatorsWithContext":
		return m.Fake(d.fakeListVolumeInitiatorsWithContext)

	case "ListVolumeRecoveryPointsWithContext":
		return m.Fake(d.fakeListVolumeRecoveryPointsWithContext)

	case "ListVolumesPages":
		return m.Fake(d.fakeListVolumesPages)

	case "ListVolumesPagesWithContext":
		return m.Fake(d.fakeListVolumesPagesWithContext)

	case "ListVolumesWithContext":
		return m.Fake(d.fakeListVolumesWithContext)

	case "NotifyWhenUploadedWithContext":
		return m.Fake(d.fakeNotifyWhenUploadedWithContext)

	case "RefreshCacheWithContext":
		return m.Fake(d.fakeRefreshCacheWithContext)

	case "RemoveTagsFromResourceWithContext":
		return m.Fake(d.fakeRemoveTagsFromResourceWithContext)

	case "ResetCacheWithContext":
		return m.Fake(d.fakeResetCacheWithContext)

	case "RetrieveTapeArchiveWithContext":
		return m.Fake(d.fakeRetrieveTapeArchiveWithContext)

	case "RetrieveTapeRecoveryPointWithContext":
		return m.Fake(d.fakeRetrieveTapeRecoveryPointWithContext)

	case "SetLocalConsolePasswordWithContext":
		return m.Fake(d.fakeSetLocalConsolePasswordWithContext)

	case "SetSMBGuestPasswordWithContext":
		return m.Fake(d.fakeSetSMBGuestPasswordWithContext)

	case "ShutdownGatewayWithContext":
		return m.Fake(d.fakeShutdownGatewayWithContext)

	case "StartAvailabilityMonitorTestWithContext":
		return m.Fake(d.fakeStartAvailabilityMonitorTestWithContext)

	case "StartGatewayWithContext":
		return m.Fake(d.fakeStartGatewayWithContext)

	case "UpdateBandwidthRateLimitWithContext":
		return m.Fake(d.fakeUpdateBandwidthRateLimitWithContext)

	case "UpdateChapCredentialsWithContext":
		return m.Fake(d.fakeUpdateChapCredentialsWithContext)

	case "UpdateGatewayInformationWithContext":
		return m.Fake(d.fakeUpdateGatewayInformationWithContext)

	case "UpdateGatewaySoftwareNowWithContext":
		return m.Fake(d.fakeUpdateGatewaySoftwareNowWithContext)

	case "UpdateMaintenanceStartTimeWithContext":
		return m.Fake(d.fakeUpdateMaintenanceStartTimeWithContext)

	case "UpdateNFSFileShareWithContext":
		return m.Fake(d.fakeUpdateNFSFileShareWithContext)

	case "UpdateSMBFileShareWithContext":
		return m.Fake(d.fakeUpdateSMBFileShareWithContext)

	case "UpdateSMBSecurityStrategyWithContext":
		return m.Fake(d.fakeUpdateSMBSecurityStrategyWithContext)

	case "UpdateSnapshotScheduleWithContext":
		return m.Fake(d.fakeUpdateSnapshotScheduleWithContext)

	case "UpdateVTLDeviceTypeWithContext":
		return m.Fake(d.fakeUpdateVTLDeviceTypeWithContext)

	default:
		return nil
	}
}

func (d *StorageGatewayDouble) ActivateGateway(i0 *storagegateway.ActivateGatewayInput) (r0 *storagegateway.ActivateGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ActivateGateway", i0)
	r0, _ = returns[0].(*storagegateway.ActivateGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) ActivateGatewayRequest(i0 *storagegateway.ActivateGatewayInput) (r0 *request.Request, r1 *storagegateway.ActivateGatewayOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ActivateGatewayRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.ActivateGatewayOutput)
	return
}

func (d *StorageGatewayDouble) ActivateGatewayWithContext(i0 context.Context, i1 *storagegateway.ActivateGatewayInput, i2 ...request.Option) (r0 *storagegateway.ActivateGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ActivateGatewayWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.ActivateGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeActivateGatewayWithContext(ctx context.Context, in *storagegateway.ActivateGatewayInput, _ ...request.Option) (*storagegateway.ActivateGatewayOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ActivateGateway cancelled", ctx.Err())
	default:
		return d.ActivateGateway(in)
	}
}

func (d *StorageGatewayDouble) AddCache(i0 *storagegateway.AddCacheInput) (r0 *storagegateway.AddCacheOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddCache", i0)
	r0, _ = returns[0].(*storagegateway.AddCacheOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) AddCacheRequest(i0 *storagegateway.AddCacheInput) (r0 *request.Request, r1 *storagegateway.AddCacheOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddCacheRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.AddCacheOutput)
	return
}

func (d *StorageGatewayDouble) AddCacheWithContext(i0 context.Context, i1 *storagegateway.AddCacheInput, i2 ...request.Option) (r0 *storagegateway.AddCacheOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddCacheWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.AddCacheOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeAddCacheWithContext(ctx context.Context, in *storagegateway.AddCacheInput, _ ...request.Option) (*storagegateway.AddCacheOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddCache cancelled", ctx.Err())
	default:
		return d.AddCache(in)
	}
}

func (d *StorageGatewayDouble) AddTagsToResource(i0 *storagegateway.AddTagsToResourceInput) (r0 *storagegateway.AddTagsToResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToResource", i0)
	r0, _ = returns[0].(*storagegateway.AddTagsToResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) AddTagsToResourceRequest(i0 *storagegateway.AddTagsToResourceInput) (r0 *request.Request, r1 *storagegateway.AddTagsToResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.AddTagsToResourceOutput)
	return
}

func (d *StorageGatewayDouble) AddTagsToResourceWithContext(i0 context.Context, i1 *storagegateway.AddTagsToResourceInput, i2 ...request.Option) (r0 *storagegateway.AddTagsToResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.AddTagsToResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeAddTagsToResourceWithContext(ctx context.Context, in *storagegateway.AddTagsToResourceInput, _ ...request.Option) (*storagegateway.AddTagsToResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddTagsToResource cancelled", ctx.Err())
	default:
		return d.AddTagsToResource(in)
	}
}

func (d *StorageGatewayDouble) AddUploadBuffer(i0 *storagegateway.AddUploadBufferInput) (r0 *storagegateway.AddUploadBufferOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddUploadBuffer", i0)
	r0, _ = returns[0].(*storagegateway.AddUploadBufferOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) AddUploadBufferRequest(i0 *storagegateway.AddUploadBufferInput) (r0 *request.Request, r1 *storagegateway.AddUploadBufferOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddUploadBufferRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.AddUploadBufferOutput)
	return
}

func (d *StorageGatewayDouble) AddUploadBufferWithContext(i0 context.Context, i1 *storagegateway.AddUploadBufferInput, i2 ...request.Option) (r0 *storagegateway.AddUploadBufferOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddUploadBufferWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.AddUploadBufferOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeAddUploadBufferWithContext(ctx context.Context, in *storagegateway.AddUploadBufferInput, _ ...request.Option) (*storagegateway.AddUploadBufferOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddUploadBuffer cancelled", ctx.Err())
	default:
		return d.AddUploadBuffer(in)
	}
}

func (d *StorageGatewayDouble) AddWorkingStorage(i0 *storagegateway.AddWorkingStorageInput) (r0 *storagegateway.AddWorkingStorageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddWorkingStorage", i0)
	r0, _ = returns[0].(*storagegateway.AddWorkingStorageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) AddWorkingStorageRequest(i0 *storagegateway.AddWorkingStorageInput) (r0 *request.Request, r1 *storagegateway.AddWorkingStorageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddWorkingStorageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.AddWorkingStorageOutput)
	return
}

func (d *StorageGatewayDouble) AddWorkingStorageWithContext(i0 context.Context, i1 *storagegateway.AddWorkingStorageInput, i2 ...request.Option) (r0 *storagegateway.AddWorkingStorageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddWorkingStorageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.AddWorkingStorageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeAddWorkingStorageWithContext(ctx context.Context, in *storagegateway.AddWorkingStorageInput, _ ...request.Option) (*storagegateway.AddWorkingStorageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddWorkingStorage cancelled", ctx.Err())
	default:
		return d.AddWorkingStorage(in)
	}
}

func (d *StorageGatewayDouble) AssignTapePool(i0 *storagegateway.AssignTapePoolInput) (r0 *storagegateway.AssignTapePoolOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssignTapePool", i0)
	r0, _ = returns[0].(*storagegateway.AssignTapePoolOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) AssignTapePoolRequest(i0 *storagegateway.AssignTapePoolInput) (r0 *request.Request, r1 *storagegateway.AssignTapePoolOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssignTapePoolRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.AssignTapePoolOutput)
	return
}

func (d *StorageGatewayDouble) AssignTapePoolWithContext(i0 context.Context, i1 *storagegateway.AssignTapePoolInput, i2 ...request.Option) (r0 *storagegateway.AssignTapePoolOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssignTapePoolWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.AssignTapePoolOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeAssignTapePoolWithContext(ctx context.Context, in *storagegateway.AssignTapePoolInput, _ ...request.Option) (*storagegateway.AssignTapePoolOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssignTapePool cancelled", ctx.Err())
	default:
		return d.AssignTapePool(in)
	}
}

func (d *StorageGatewayDouble) AttachVolume(i0 *storagegateway.AttachVolumeInput) (r0 *storagegateway.AttachVolumeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachVolume", i0)
	r0, _ = returns[0].(*storagegateway.AttachVolumeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) AttachVolumeRequest(i0 *storagegateway.AttachVolumeInput) (r0 *request.Request, r1 *storagegateway.AttachVolumeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachVolumeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.AttachVolumeOutput)
	return
}

func (d *StorageGatewayDouble) AttachVolumeWithContext(i0 context.Context, i1 *storagegateway.AttachVolumeInput, i2 ...request.Option) (r0 *storagegateway.AttachVolumeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachVolumeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.AttachVolumeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeAttachVolumeWithContext(ctx context.Context, in *storagegateway.AttachVolumeInput, _ ...request.Option) (*storagegateway.AttachVolumeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AttachVolume cancelled", ctx.Err())
	default:
		return d.AttachVolume(in)
	}
}

func (d *StorageGatewayDouble) CancelArchival(i0 *storagegateway.CancelArchivalInput) (r0 *storagegateway.CancelArchivalOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelArchival", i0)
	r0, _ = returns[0].(*storagegateway.CancelArchivalOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) CancelArchivalRequest(i0 *storagegateway.CancelArchivalInput) (r0 *request.Request, r1 *storagegateway.CancelArchivalOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelArchivalRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.CancelArchivalOutput)
	return
}

func (d *StorageGatewayDouble) CancelArchivalWithContext(i0 context.Context, i1 *storagegateway.CancelArchivalInput, i2 ...request.Option) (r0 *storagegateway.CancelArchivalOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelArchivalWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.CancelArchivalOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeCancelArchivalWithContext(ctx context.Context, in *storagegateway.CancelArchivalInput, _ ...request.Option) (*storagegateway.CancelArchivalOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelArchival cancelled", ctx.Err())
	default:
		return d.CancelArchival(in)
	}
}

func (d *StorageGatewayDouble) CancelRetrieval(i0 *storagegateway.CancelRetrievalInput) (r0 *storagegateway.CancelRetrievalOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelRetrieval", i0)
	r0, _ = returns[0].(*storagegateway.CancelRetrievalOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) CancelRetrievalRequest(i0 *storagegateway.CancelRetrievalInput) (r0 *request.Request, r1 *storagegateway.CancelRetrievalOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelRetrievalRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.CancelRetrievalOutput)
	return
}

func (d *StorageGatewayDouble) CancelRetrievalWithContext(i0 context.Context, i1 *storagegateway.CancelRetrievalInput, i2 ...request.Option) (r0 *storagegateway.CancelRetrievalOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelRetrievalWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.CancelRetrievalOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeCancelRetrievalWithContext(ctx context.Context, in *storagegateway.CancelRetrievalInput, _ ...request.Option) (*storagegateway.CancelRetrievalOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelRetrieval cancelled", ctx.Err())
	default:
		return d.CancelRetrieval(in)
	}
}

func (d *StorageGatewayDouble) CreateCachediSCSIVolume(i0 *storagegateway.CreateCachediSCSIVolumeInput) (r0 *storagegateway.CreateCachediSCSIVolumeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCachediSCSIVolume", i0)
	r0, _ = returns[0].(*storagegateway.CreateCachediSCSIVolumeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) CreateCachediSCSIVolumeRequest(i0 *storagegateway.CreateCachediSCSIVolumeInput) (r0 *request.Request, r1 *storagegateway.CreateCachediSCSIVolumeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCachediSCSIVolumeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.CreateCachediSCSIVolumeOutput)
	return
}

func (d *StorageGatewayDouble) CreateCachediSCSIVolumeWithContext(i0 context.Context, i1 *storagegateway.CreateCachediSCSIVolumeInput, i2 ...request.Option) (r0 *storagegateway.CreateCachediSCSIVolumeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCachediSCSIVolumeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.CreateCachediSCSIVolumeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeCreateCachediSCSIVolumeWithContext(ctx context.Context, in *storagegateway.CreateCachediSCSIVolumeInput, _ ...request.Option) (*storagegateway.CreateCachediSCSIVolumeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateCachediSCSIVolume cancelled", ctx.Err())
	default:
		return d.CreateCachediSCSIVolume(in)
	}
}

func (d *StorageGatewayDouble) CreateNFSFileShare(i0 *storagegateway.CreateNFSFileShareInput) (r0 *storagegateway.CreateNFSFileShareOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNFSFileShare", i0)
	r0, _ = returns[0].(*storagegateway.CreateNFSFileShareOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) CreateNFSFileShareRequest(i0 *storagegateway.CreateNFSFileShareInput) (r0 *request.Request, r1 *storagegateway.CreateNFSFileShareOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNFSFileShareRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.CreateNFSFileShareOutput)
	return
}

func (d *StorageGatewayDouble) CreateNFSFileShareWithContext(i0 context.Context, i1 *storagegateway.CreateNFSFileShareInput, i2 ...request.Option) (r0 *storagegateway.CreateNFSFileShareOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateNFSFileShareWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.CreateNFSFileShareOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeCreateNFSFileShareWithContext(ctx context.Context, in *storagegateway.CreateNFSFileShareInput, _ ...request.Option) (*storagegateway.CreateNFSFileShareOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateNFSFileShare cancelled", ctx.Err())
	default:
		return d.CreateNFSFileShare(in)
	}
}

func (d *StorageGatewayDouble) CreateSMBFileShare(i0 *storagegateway.CreateSMBFileShareInput) (r0 *storagegateway.CreateSMBFileShareOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSMBFileShare", i0)
	r0, _ = returns[0].(*storagegateway.CreateSMBFileShareOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) CreateSMBFileShareRequest(i0 *storagegateway.CreateSMBFileShareInput) (r0 *request.Request, r1 *storagegateway.CreateSMBFileShareOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSMBFileShareRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.CreateSMBFileShareOutput)
	return
}

func (d *StorageGatewayDouble) CreateSMBFileShareWithContext(i0 context.Context, i1 *storagegateway.CreateSMBFileShareInput, i2 ...request.Option) (r0 *storagegateway.CreateSMBFileShareOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSMBFileShareWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.CreateSMBFileShareOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeCreateSMBFileShareWithContext(ctx context.Context, in *storagegateway.CreateSMBFileShareInput, _ ...request.Option) (*storagegateway.CreateSMBFileShareOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateSMBFileShare cancelled", ctx.Err())
	default:
		return d.CreateSMBFileShare(in)
	}
}

func (d *StorageGatewayDouble) CreateSnapshot(i0 *storagegateway.CreateSnapshotInput) (r0 *storagegateway.CreateSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSnapshot", i0)
	r0, _ = returns[0].(*storagegateway.CreateSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) CreateSnapshotFromVolumeRecoveryPoint(i0 *storagegateway.CreateSnapshotFromVolumeRecoveryPointInput) (r0 *storagegateway.CreateSnapshotFromVolumeRecoveryPointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSnapshotFromVolumeRecoveryPoint", i0)
	r0, _ = returns[0].(*storagegateway.CreateSnapshotFromVolumeRecoveryPointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) CreateSnapshotFromVolumeRecoveryPointRequest(i0 *storagegateway.CreateSnapshotFromVolumeRecoveryPointInput) (r0 *request.Request, r1 *storagegateway.CreateSnapshotFromVolumeRecoveryPointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSnapshotFromVolumeRecoveryPointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.CreateSnapshotFromVolumeRecoveryPointOutput)
	return
}

func (d *StorageGatewayDouble) CreateSnapshotFromVolumeRecoveryPointWithContext(i0 context.Context, i1 *storagegateway.CreateSnapshotFromVolumeRecoveryPointInput, i2 ...request.Option) (r0 *storagegateway.CreateSnapshotFromVolumeRecoveryPointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSnapshotFromVolumeRecoveryPointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.CreateSnapshotFromVolumeRecoveryPointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeCreateSnapshotFromVolumeRecoveryPointWithContext(ctx context.Context, in *storagegateway.CreateSnapshotFromVolumeRecoveryPointInput, _ ...request.Option) (*storagegateway.CreateSnapshotFromVolumeRecoveryPointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateSnapshotFromVolumeRecoveryPoint cancelled", ctx.Err())
	default:
		return d.CreateSnapshotFromVolumeRecoveryPoint(in)
	}
}

func (d *StorageGatewayDouble) CreateSnapshotRequest(i0 *storagegateway.CreateSnapshotInput) (r0 *request.Request, r1 *storagegateway.CreateSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.CreateSnapshotOutput)
	return
}

func (d *StorageGatewayDouble) CreateSnapshotWithContext(i0 context.Context, i1 *storagegateway.CreateSnapshotInput, i2 ...request.Option) (r0 *storagegateway.CreateSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.CreateSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeCreateSnapshotWithContext(ctx context.Context, in *storagegateway.CreateSnapshotInput, _ ...request.Option) (*storagegateway.CreateSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateSnapshot cancelled", ctx.Err())
	default:
		return d.CreateSnapshot(in)
	}
}

func (d *StorageGatewayDouble) CreateStorediSCSIVolume(i0 *storagegateway.CreateStorediSCSIVolumeInput) (r0 *storagegateway.CreateStorediSCSIVolumeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStorediSCSIVolume", i0)
	r0, _ = returns[0].(*storagegateway.CreateStorediSCSIVolumeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) CreateStorediSCSIVolumeRequest(i0 *storagegateway.CreateStorediSCSIVolumeInput) (r0 *request.Request, r1 *storagegateway.CreateStorediSCSIVolumeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStorediSCSIVolumeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.CreateStorediSCSIVolumeOutput)
	return
}

func (d *StorageGatewayDouble) CreateStorediSCSIVolumeWithContext(i0 context.Context, i1 *storagegateway.CreateStorediSCSIVolumeInput, i2 ...request.Option) (r0 *storagegateway.CreateStorediSCSIVolumeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStorediSCSIVolumeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.CreateStorediSCSIVolumeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeCreateStorediSCSIVolumeWithContext(ctx context.Context, in *storagegateway.CreateStorediSCSIVolumeInput, _ ...request.Option) (*storagegateway.CreateStorediSCSIVolumeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateStorediSCSIVolume cancelled", ctx.Err())
	default:
		return d.CreateStorediSCSIVolume(in)
	}
}

func (d *StorageGatewayDouble) CreateTapeWithBarcode(i0 *storagegateway.CreateTapeWithBarcodeInput) (r0 *storagegateway.CreateTapeWithBarcodeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTapeWithBarcode", i0)
	r0, _ = returns[0].(*storagegateway.CreateTapeWithBarcodeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) CreateTapeWithBarcodeRequest(i0 *storagegateway.CreateTapeWithBarcodeInput) (r0 *request.Request, r1 *storagegateway.CreateTapeWithBarcodeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTapeWithBarcodeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.CreateTapeWithBarcodeOutput)
	return
}

func (d *StorageGatewayDouble) CreateTapeWithBarcodeWithContext(i0 context.Context, i1 *storagegateway.CreateTapeWithBarcodeInput, i2 ...request.Option) (r0 *storagegateway.CreateTapeWithBarcodeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTapeWithBarcodeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.CreateTapeWithBarcodeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeCreateTapeWithBarcodeWithContext(ctx context.Context, in *storagegateway.CreateTapeWithBarcodeInput, _ ...request.Option) (*storagegateway.CreateTapeWithBarcodeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTapeWithBarcode cancelled", ctx.Err())
	default:
		return d.CreateTapeWithBarcode(in)
	}
}

func (d *StorageGatewayDouble) CreateTapes(i0 *storagegateway.CreateTapesInput) (r0 *storagegateway.CreateTapesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTapes", i0)
	r0, _ = returns[0].(*storagegateway.CreateTapesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) CreateTapesRequest(i0 *storagegateway.CreateTapesInput) (r0 *request.Request, r1 *storagegateway.CreateTapesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTapesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.CreateTapesOutput)
	return
}

func (d *StorageGatewayDouble) CreateTapesWithContext(i0 context.Context, i1 *storagegateway.CreateTapesInput, i2 ...request.Option) (r0 *storagegateway.CreateTapesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTapesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.CreateTapesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeCreateTapesWithContext(ctx context.Context, in *storagegateway.CreateTapesInput, _ ...request.Option) (*storagegateway.CreateTapesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTapes cancelled", ctx.Err())
	default:
		return d.CreateTapes(in)
	}
}

func (d *StorageGatewayDouble) DeleteBandwidthRateLimit(i0 *storagegateway.DeleteBandwidthRateLimitInput) (r0 *storagegateway.DeleteBandwidthRateLimitOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBandwidthRateLimit", i0)
	r0, _ = returns[0].(*storagegateway.DeleteBandwidthRateLimitOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) DeleteBandwidthRateLimitRequest(i0 *storagegateway.DeleteBandwidthRateLimitInput) (r0 *request.Request, r1 *storagegateway.DeleteBandwidthRateLimitOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBandwidthRateLimitRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.DeleteBandwidthRateLimitOutput)
	return
}

func (d *StorageGatewayDouble) DeleteBandwidthRateLimitWithContext(i0 context.Context, i1 *storagegateway.DeleteBandwidthRateLimitInput, i2 ...request.Option) (r0 *storagegateway.DeleteBandwidthRateLimitOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBandwidthRateLimitWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.DeleteBandwidthRateLimitOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeDeleteBandwidthRateLimitWithContext(ctx context.Context, in *storagegateway.DeleteBandwidthRateLimitInput, _ ...request.Option) (*storagegateway.DeleteBandwidthRateLimitOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteBandwidthRateLimit cancelled", ctx.Err())
	default:
		return d.DeleteBandwidthRateLimit(in)
	}
}

func (d *StorageGatewayDouble) DeleteChapCredentials(i0 *storagegateway.DeleteChapCredentialsInput) (r0 *storagegateway.DeleteChapCredentialsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteChapCredentials", i0)
	r0, _ = returns[0].(*storagegateway.DeleteChapCredentialsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) DeleteChapCredentialsRequest(i0 *storagegateway.DeleteChapCredentialsInput) (r0 *request.Request, r1 *storagegateway.DeleteChapCredentialsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteChapCredentialsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.DeleteChapCredentialsOutput)
	return
}

func (d *StorageGatewayDouble) DeleteChapCredentialsWithContext(i0 context.Context, i1 *storagegateway.DeleteChapCredentialsInput, i2 ...request.Option) (r0 *storagegateway.DeleteChapCredentialsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteChapCredentialsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.DeleteChapCredentialsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeDeleteChapCredentialsWithContext(ctx context.Context, in *storagegateway.DeleteChapCredentialsInput, _ ...request.Option) (*storagegateway.DeleteChapCredentialsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteChapCredentials cancelled", ctx.Err())
	default:
		return d.DeleteChapCredentials(in)
	}
}

func (d *StorageGatewayDouble) DeleteFileShare(i0 *storagegateway.DeleteFileShareInput) (r0 *storagegateway.DeleteFileShareOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFileShare", i0)
	r0, _ = returns[0].(*storagegateway.DeleteFileShareOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) DeleteFileShareRequest(i0 *storagegateway.DeleteFileShareInput) (r0 *request.Request, r1 *storagegateway.DeleteFileShareOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFileShareRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.DeleteFileShareOutput)
	return
}

func (d *StorageGatewayDouble) DeleteFileShareWithContext(i0 context.Context, i1 *storagegateway.DeleteFileShareInput, i2 ...request.Option) (r0 *storagegateway.DeleteFileShareOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFileShareWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.DeleteFileShareOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeDeleteFileShareWithContext(ctx context.Context, in *storagegateway.DeleteFileShareInput, _ ...request.Option) (*storagegateway.DeleteFileShareOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteFileShare cancelled", ctx.Err())
	default:
		return d.DeleteFileShare(in)
	}
}

func (d *StorageGatewayDouble) DeleteGateway(i0 *storagegateway.DeleteGatewayInput) (r0 *storagegateway.DeleteGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGateway", i0)
	r0, _ = returns[0].(*storagegateway.DeleteGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) DeleteGatewayRequest(i0 *storagegateway.DeleteGatewayInput) (r0 *request.Request, r1 *storagegateway.DeleteGatewayOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGatewayRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.DeleteGatewayOutput)
	return
}

func (d *StorageGatewayDouble) DeleteGatewayWithContext(i0 context.Context, i1 *storagegateway.DeleteGatewayInput, i2 ...request.Option) (r0 *storagegateway.DeleteGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGatewayWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.DeleteGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeDeleteGatewayWithContext(ctx context.Context, in *storagegateway.DeleteGatewayInput, _ ...request.Option) (*storagegateway.DeleteGatewayOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteGateway cancelled", ctx.Err())
	default:
		return d.DeleteGateway(in)
	}
}

func (d *StorageGatewayDouble) DeleteSnapshotSchedule(i0 *storagegateway.DeleteSnapshotScheduleInput) (r0 *storagegateway.DeleteSnapshotScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSnapshotSchedule", i0)
	r0, _ = returns[0].(*storagegateway.DeleteSnapshotScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) DeleteSnapshotScheduleRequest(i0 *storagegateway.DeleteSnapshotScheduleInput) (r0 *request.Request, r1 *storagegateway.DeleteSnapshotScheduleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSnapshotScheduleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.DeleteSnapshotScheduleOutput)
	return
}

func (d *StorageGatewayDouble) DeleteSnapshotScheduleWithContext(i0 context.Context, i1 *storagegateway.DeleteSnapshotScheduleInput, i2 ...request.Option) (r0 *storagegateway.DeleteSnapshotScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSnapshotScheduleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.DeleteSnapshotScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeDeleteSnapshotScheduleWithContext(ctx context.Context, in *storagegateway.DeleteSnapshotScheduleInput, _ ...request.Option) (*storagegateway.DeleteSnapshotScheduleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteSnapshotSchedule cancelled", ctx.Err())
	default:
		return d.DeleteSnapshotSchedule(in)
	}
}

func (d *StorageGatewayDouble) DeleteTape(i0 *storagegateway.DeleteTapeInput) (r0 *storagegateway.DeleteTapeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTape", i0)
	r0, _ = returns[0].(*storagegateway.DeleteTapeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) DeleteTapeArchive(i0 *storagegateway.DeleteTapeArchiveInput) (r0 *storagegateway.DeleteTapeArchiveOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTapeArchive", i0)
	r0, _ = returns[0].(*storagegateway.DeleteTapeArchiveOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) DeleteTapeArchiveRequest(i0 *storagegateway.DeleteTapeArchiveInput) (r0 *request.Request, r1 *storagegateway.DeleteTapeArchiveOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTapeArchiveRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.DeleteTapeArchiveOutput)
	return
}

func (d *StorageGatewayDouble) DeleteTapeArchiveWithContext(i0 context.Context, i1 *storagegateway.DeleteTapeArchiveInput, i2 ...request.Option) (r0 *storagegateway.DeleteTapeArchiveOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTapeArchiveWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.DeleteTapeArchiveOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeDeleteTapeArchiveWithContext(ctx context.Context, in *storagegateway.DeleteTapeArchiveInput, _ ...request.Option) (*storagegateway.DeleteTapeArchiveOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTapeArchive cancelled", ctx.Err())
	default:
		return d.DeleteTapeArchive(in)
	}
}

func (d *StorageGatewayDouble) DeleteTapeRequest(i0 *storagegateway.DeleteTapeInput) (r0 *request.Request, r1 *storagegateway.DeleteTapeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTapeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.DeleteTapeOutput)
	return
}

func (d *StorageGatewayDouble) DeleteTapeWithContext(i0 context.Context, i1 *storagegateway.DeleteTapeInput, i2 ...request.Option) (r0 *storagegateway.DeleteTapeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTapeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.DeleteTapeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeDeleteTapeWithContext(ctx context.Context, in *storagegateway.DeleteTapeInput, _ ...request.Option) (*storagegateway.DeleteTapeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTape cancelled", ctx.Err())
	default:
		return d.DeleteTape(in)
	}
}

func (d *StorageGatewayDouble) DeleteVolume(i0 *storagegateway.DeleteVolumeInput) (r0 *storagegateway.DeleteVolumeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVolume", i0)
	r0, _ = returns[0].(*storagegateway.DeleteVolumeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) DeleteVolumeRequest(i0 *storagegateway.DeleteVolumeInput) (r0 *request.Request, r1 *storagegateway.DeleteVolumeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVolumeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.DeleteVolumeOutput)
	return
}

func (d *StorageGatewayDouble) DeleteVolumeWithContext(i0 context.Context, i1 *storagegateway.DeleteVolumeInput, i2 ...request.Option) (r0 *storagegateway.DeleteVolumeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVolumeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.DeleteVolumeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeDeleteVolumeWithContext(ctx context.Context, in *storagegateway.DeleteVolumeInput, _ ...request.Option) (*storagegateway.DeleteVolumeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteVolume cancelled", ctx.Err())
	default:
		return d.DeleteVolume(in)
	}
}

func (d *StorageGatewayDouble) DescribeAvailabilityMonitorTest(i0 *storagegateway.DescribeAvailabilityMonitorTestInput) (r0 *storagegateway.DescribeAvailabilityMonitorTestOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAvailabilityMonitorTest", i0)
	r0, _ = returns[0].(*storagegateway.DescribeAvailabilityMonitorTestOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) DescribeAvailabilityMonitorTestRequest(i0 *storagegateway.DescribeAvailabilityMonitorTestInput) (r0 *request.Request, r1 *storagegateway.DescribeAvailabilityMonitorTestOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAvailabilityMonitorTestRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.DescribeAvailabilityMonitorTestOutput)
	return
}

func (d *StorageGatewayDouble) DescribeAvailabilityMonitorTestWithContext(i0 context.Context, i1 *storagegateway.DescribeAvailabilityMonitorTestInput, i2 ...request.Option) (r0 *storagegateway.DescribeAvailabilityMonitorTestOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAvailabilityMonitorTestWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.DescribeAvailabilityMonitorTestOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeDescribeAvailabilityMonitorTestWithContext(ctx context.Context, in *storagegateway.DescribeAvailabilityMonitorTestInput, _ ...request.Option) (*storagegateway.DescribeAvailabilityMonitorTestOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAvailabilityMonitorTest cancelled", ctx.Err())
	default:
		return d.DescribeAvailabilityMonitorTest(in)
	}
}

func (d *StorageGatewayDouble) DescribeBandwidthRateLimit(i0 *storagegateway.DescribeBandwidthRateLimitInput) (r0 *storagegateway.DescribeBandwidthRateLimitOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBandwidthRateLimit", i0)
	r0, _ = returns[0].(*storagegateway.DescribeBandwidthRateLimitOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) DescribeBandwidthRateLimitRequest(i0 *storagegateway.DescribeBandwidthRateLimitInput) (r0 *request.Request, r1 *storagegateway.DescribeBandwidthRateLimitOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBandwidthRateLimitRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.DescribeBandwidthRateLimitOutput)
	return
}

func (d *StorageGatewayDouble) DescribeBandwidthRateLimitWithContext(i0 context.Context, i1 *storagegateway.DescribeBandwidthRateLimitInput, i2 ...request.Option) (r0 *storagegateway.DescribeBandwidthRateLimitOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBandwidthRateLimitWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.DescribeBandwidthRateLimitOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeDescribeBandwidthRateLimitWithContext(ctx context.Context, in *storagegateway.DescribeBandwidthRateLimitInput, _ ...request.Option) (*storagegateway.DescribeBandwidthRateLimitOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeBandwidthRateLimit cancelled", ctx.Err())
	default:
		return d.DescribeBandwidthRateLimit(in)
	}
}

func (d *StorageGatewayDouble) DescribeCache(i0 *storagegateway.DescribeCacheInput) (r0 *storagegateway.DescribeCacheOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCache", i0)
	r0, _ = returns[0].(*storagegateway.DescribeCacheOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) DescribeCacheRequest(i0 *storagegateway.DescribeCacheInput) (r0 *request.Request, r1 *storagegateway.DescribeCacheOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCacheRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.DescribeCacheOutput)
	return
}

func (d *StorageGatewayDouble) DescribeCacheWithContext(i0 context.Context, i1 *storagegateway.DescribeCacheInput, i2 ...request.Option) (r0 *storagegateway.DescribeCacheOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCacheWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.DescribeCacheOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeDescribeCacheWithContext(ctx context.Context, in *storagegateway.DescribeCacheInput, _ ...request.Option) (*storagegateway.DescribeCacheOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeCache cancelled", ctx.Err())
	default:
		return d.DescribeCache(in)
	}
}

func (d *StorageGatewayDouble) DescribeCachediSCSIVolumes(i0 *storagegateway.DescribeCachediSCSIVolumesInput) (r0 *storagegateway.DescribeCachediSCSIVolumesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCachediSCSIVolumes", i0)
	r0, _ = returns[0].(*storagegateway.DescribeCachediSCSIVolumesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) DescribeCachediSCSIVolumesRequest(i0 *storagegateway.DescribeCachediSCSIVolumesInput) (r0 *request.Request, r1 *storagegateway.DescribeCachediSCSIVolumesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCachediSCSIVolumesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.DescribeCachediSCSIVolumesOutput)
	return
}

func (d *StorageGatewayDouble) DescribeCachediSCSIVolumesWithContext(i0 context.Context, i1 *storagegateway.DescribeCachediSCSIVolumesInput, i2 ...request.Option) (r0 *storagegateway.DescribeCachediSCSIVolumesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCachediSCSIVolumesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.DescribeCachediSCSIVolumesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeDescribeCachediSCSIVolumesWithContext(ctx context.Context, in *storagegateway.DescribeCachediSCSIVolumesInput, _ ...request.Option) (*storagegateway.DescribeCachediSCSIVolumesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeCachediSCSIVolumes cancelled", ctx.Err())
	default:
		return d.DescribeCachediSCSIVolumes(in)
	}
}

func (d *StorageGatewayDouble) DescribeChapCredentials(i0 *storagegateway.DescribeChapCredentialsInput) (r0 *storagegateway.DescribeChapCredentialsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeChapCredentials", i0)
	r0, _ = returns[0].(*storagegateway.DescribeChapCredentialsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) DescribeChapCredentialsRequest(i0 *storagegateway.DescribeChapCredentialsInput) (r0 *request.Request, r1 *storagegateway.DescribeChapCredentialsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeChapCredentialsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.DescribeChapCredentialsOutput)
	return
}

func (d *StorageGatewayDouble) DescribeChapCredentialsWithContext(i0 context.Context, i1 *storagegateway.DescribeChapCredentialsInput, i2 ...request.Option) (r0 *storagegateway.DescribeChapCredentialsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeChapCredentialsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.DescribeChapCredentialsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeDescribeChapCredentialsWithContext(ctx context.Context, in *storagegateway.DescribeChapCredentialsInput, _ ...request.Option) (*storagegateway.DescribeChapCredentialsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeChapCredentials cancelled", ctx.Err())
	default:
		return d.DescribeChapCredentials(in)
	}
}

func (d *StorageGatewayDouble) DescribeGatewayInformation(i0 *storagegateway.DescribeGatewayInformationInput) (r0 *storagegateway.DescribeGatewayInformationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGatewayInformation", i0)
	r0, _ = returns[0].(*storagegateway.DescribeGatewayInformationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) DescribeGatewayInformationRequest(i0 *storagegateway.DescribeGatewayInformationInput) (r0 *request.Request, r1 *storagegateway.DescribeGatewayInformationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGatewayInformationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.DescribeGatewayInformationOutput)
	return
}

func (d *StorageGatewayDouble) DescribeGatewayInformationWithContext(i0 context.Context, i1 *storagegateway.DescribeGatewayInformationInput, i2 ...request.Option) (r0 *storagegateway.DescribeGatewayInformationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeGatewayInformationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.DescribeGatewayInformationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeDescribeGatewayInformationWithContext(ctx context.Context, in *storagegateway.DescribeGatewayInformationInput, _ ...request.Option) (*storagegateway.DescribeGatewayInformationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeGatewayInformation cancelled", ctx.Err())
	default:
		return d.DescribeGatewayInformation(in)
	}
}

func (d *StorageGatewayDouble) DescribeMaintenanceStartTime(i0 *storagegateway.DescribeMaintenanceStartTimeInput) (r0 *storagegateway.DescribeMaintenanceStartTimeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMaintenanceStartTime", i0)
	r0, _ = returns[0].(*storagegateway.DescribeMaintenanceStartTimeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) DescribeMaintenanceStartTimeRequest(i0 *storagegateway.DescribeMaintenanceStartTimeInput) (r0 *request.Request, r1 *storagegateway.DescribeMaintenanceStartTimeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMaintenanceStartTimeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.DescribeMaintenanceStartTimeOutput)
	return
}

func (d *StorageGatewayDouble) DescribeMaintenanceStartTimeWithContext(i0 context.Context, i1 *storagegateway.DescribeMaintenanceStartTimeInput, i2 ...request.Option) (r0 *storagegateway.DescribeMaintenanceStartTimeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMaintenanceStartTimeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.DescribeMaintenanceStartTimeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeDescribeMaintenanceStartTimeWithContext(ctx context.Context, in *storagegateway.DescribeMaintenanceStartTimeInput, _ ...request.Option) (*storagegateway.DescribeMaintenanceStartTimeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeMaintenanceStartTime cancelled", ctx.Err())
	default:
		return d.DescribeMaintenanceStartTime(in)
	}
}

func (d *StorageGatewayDouble) DescribeNFSFileShares(i0 *storagegateway.DescribeNFSFileSharesInput) (r0 *storagegateway.DescribeNFSFileSharesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNFSFileShares", i0)
	r0, _ = returns[0].(*storagegateway.DescribeNFSFileSharesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) DescribeNFSFileSharesRequest(i0 *storagegateway.DescribeNFSFileSharesInput) (r0 *request.Request, r1 *storagegateway.DescribeNFSFileSharesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNFSFileSharesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.DescribeNFSFileSharesOutput)
	return
}

func (d *StorageGatewayDouble) DescribeNFSFileSharesWithContext(i0 context.Context, i1 *storagegateway.DescribeNFSFileSharesInput, i2 ...request.Option) (r0 *storagegateway.DescribeNFSFileSharesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNFSFileSharesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.DescribeNFSFileSharesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeDescribeNFSFileSharesWithContext(ctx context.Context, in *storagegateway.DescribeNFSFileSharesInput, _ ...request.Option) (*storagegateway.DescribeNFSFileSharesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeNFSFileShares cancelled", ctx.Err())
	default:
		return d.DescribeNFSFileShares(in)
	}
}

func (d *StorageGatewayDouble) DescribeSMBFileShares(i0 *storagegateway.DescribeSMBFileSharesInput) (r0 *storagegateway.DescribeSMBFileSharesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSMBFileShares", i0)
	r0, _ = returns[0].(*storagegateway.DescribeSMBFileSharesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) DescribeSMBFileSharesRequest(i0 *storagegateway.DescribeSMBFileSharesInput) (r0 *request.Request, r1 *storagegateway.DescribeSMBFileSharesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSMBFileSharesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.DescribeSMBFileSharesOutput)
	return
}

func (d *StorageGatewayDouble) DescribeSMBFileSharesWithContext(i0 context.Context, i1 *storagegateway.DescribeSMBFileSharesInput, i2 ...request.Option) (r0 *storagegateway.DescribeSMBFileSharesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSMBFileSharesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.DescribeSMBFileSharesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeDescribeSMBFileSharesWithContext(ctx context.Context, in *storagegateway.DescribeSMBFileSharesInput, _ ...request.Option) (*storagegateway.DescribeSMBFileSharesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSMBFileShares cancelled", ctx.Err())
	default:
		return d.DescribeSMBFileShares(in)
	}
}

func (d *StorageGatewayDouble) DescribeSMBSettings(i0 *storagegateway.DescribeSMBSettingsInput) (r0 *storagegateway.DescribeSMBSettingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSMBSettings", i0)
	r0, _ = returns[0].(*storagegateway.DescribeSMBSettingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) DescribeSMBSettingsRequest(i0 *storagegateway.DescribeSMBSettingsInput) (r0 *request.Request, r1 *storagegateway.DescribeSMBSettingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSMBSettingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.DescribeSMBSettingsOutput)
	return
}

func (d *StorageGatewayDouble) DescribeSMBSettingsWithContext(i0 context.Context, i1 *storagegateway.DescribeSMBSettingsInput, i2 ...request.Option) (r0 *storagegateway.DescribeSMBSettingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSMBSettingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.DescribeSMBSettingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeDescribeSMBSettingsWithContext(ctx context.Context, in *storagegateway.DescribeSMBSettingsInput, _ ...request.Option) (*storagegateway.DescribeSMBSettingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSMBSettings cancelled", ctx.Err())
	default:
		return d.DescribeSMBSettings(in)
	}
}

func (d *StorageGatewayDouble) DescribeSnapshotSchedule(i0 *storagegateway.DescribeSnapshotScheduleInput) (r0 *storagegateway.DescribeSnapshotScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSnapshotSchedule", i0)
	r0, _ = returns[0].(*storagegateway.DescribeSnapshotScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) DescribeSnapshotScheduleRequest(i0 *storagegateway.DescribeSnapshotScheduleInput) (r0 *request.Request, r1 *storagegateway.DescribeSnapshotScheduleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSnapshotScheduleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.DescribeSnapshotScheduleOutput)
	return
}

func (d *StorageGatewayDouble) DescribeSnapshotScheduleWithContext(i0 context.Context, i1 *storagegateway.DescribeSnapshotScheduleInput, i2 ...request.Option) (r0 *storagegateway.DescribeSnapshotScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSnapshotScheduleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.DescribeSnapshotScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeDescribeSnapshotScheduleWithContext(ctx context.Context, in *storagegateway.DescribeSnapshotScheduleInput, _ ...request.Option) (*storagegateway.DescribeSnapshotScheduleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSnapshotSchedule cancelled", ctx.Err())
	default:
		return d.DescribeSnapshotSchedule(in)
	}
}

func (d *StorageGatewayDouble) DescribeStorediSCSIVolumes(i0 *storagegateway.DescribeStorediSCSIVolumesInput) (r0 *storagegateway.DescribeStorediSCSIVolumesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStorediSCSIVolumes", i0)
	r0, _ = returns[0].(*storagegateway.DescribeStorediSCSIVolumesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) DescribeStorediSCSIVolumesRequest(i0 *storagegateway.DescribeStorediSCSIVolumesInput) (r0 *request.Request, r1 *storagegateway.DescribeStorediSCSIVolumesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStorediSCSIVolumesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.DescribeStorediSCSIVolumesOutput)
	return
}

func (d *StorageGatewayDouble) DescribeStorediSCSIVolumesWithContext(i0 context.Context, i1 *storagegateway.DescribeStorediSCSIVolumesInput, i2 ...request.Option) (r0 *storagegateway.DescribeStorediSCSIVolumesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStorediSCSIVolumesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.DescribeStorediSCSIVolumesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeDescribeStorediSCSIVolumesWithContext(ctx context.Context, in *storagegateway.DescribeStorediSCSIVolumesInput, _ ...request.Option) (*storagegateway.DescribeStorediSCSIVolumesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeStorediSCSIVolumes cancelled", ctx.Err())
	default:
		return d.DescribeStorediSCSIVolumes(in)
	}
}

func (d *StorageGatewayDouble) DescribeTapeArchives(i0 *storagegateway.DescribeTapeArchivesInput) (r0 *storagegateway.DescribeTapeArchivesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTapeArchives", i0)
	r0, _ = returns[0].(*storagegateway.DescribeTapeArchivesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) DescribeTapeArchivesPages(i0 *storagegateway.DescribeTapeArchivesInput, i1 func(*storagegateway.DescribeTapeArchivesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTapeArchivesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *StorageGatewayDouble) fakeDescribeTapeArchivesPages(in *storagegateway.DescribeTapeArchivesInput, pager func(*storagegateway.DescribeTapeArchivesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeTapeArchives", paginators, in, pager)
}

func (d *StorageGatewayDouble) DescribeTapeArchivesPagesWithContext(i0 context.Context, i1 *storagegateway.DescribeTapeArchivesInput, i2 func(*storagegateway.DescribeTapeArchivesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTapeArchivesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *StorageGatewayDouble) fakeDescribeTapeArchivesPagesWithContext(ctx context.Context, in *storagegateway.DescribeTapeArchivesInput, pager func(*storagegateway.DescribeTapeArchivesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeTapeArchives", paginators, ctx, in, pager, options...)
}

func (d *StorageGatewayDouble) DescribeTapeArchivesRequest(i0 *storagegateway.DescribeTapeArchivesInput) (r0 *request.Request, r1 *storagegateway.DescribeTapeArchivesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTapeArchivesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.DescribeTapeArchivesOutput)
	return
}

func (d *StorageGatewayDouble) DescribeTapeArchivesWithContext(i0 context.Context, i1 *storagegateway.DescribeTapeArchivesInput, i2 ...request.Option) (r0 *storagegateway.DescribeTapeArchivesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTapeArchivesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.DescribeTapeArchivesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeDescribeTapeArchivesWithContext(ctx context.Context, in *storagegateway.DescribeTapeArchivesInput, _ ...request.Option) (*storagegateway.DescribeTapeArchivesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTapeArchives cancelled", ctx.Err())
	default:
		return d.DescribeTapeArchives(in)
	}
}

func (d *StorageGatewayDouble) DescribeTapeRecoveryPoints(i0 *storagegateway.DescribeTapeRecoveryPointsInput) (r0 *storagegateway.DescribeTapeRecoveryPointsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTapeRecoveryPoints", i0)
	r0, _ = returns[0].(*storagegateway.DescribeTapeRecoveryPointsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) DescribeTapeRecoveryPointsPages(i0 *storagegateway.DescribeTapeRecoveryPointsInput, i1 func(*storagegateway.DescribeTapeRecoveryPointsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTapeRecoveryPointsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *StorageGatewayDouble) fakeDescribeTapeRecoveryPointsPages(in *storagegateway.DescribeTapeRecoveryPointsInput, pager func(*storagegateway.DescribeTapeRecoveryPointsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeTapeRecoveryPoints", paginators, in, pager)
}

func (d *StorageGatewayDouble) DescribeTapeRecoveryPointsPagesWithContext(i0 context.Context, i1 *storagegateway.DescribeTapeRecoveryPointsInput, i2 func(*storagegateway.DescribeTapeRecoveryPointsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTapeRecoveryPointsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *StorageGatewayDouble) fakeDescribeTapeRecoveryPointsPagesWithContext(ctx context.Context, in *storagegateway.DescribeTapeRecoveryPointsInput, pager func(*storagegateway.DescribeTapeRecoveryPointsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeTapeRecoveryPoints", paginators, ctx, in, pager, options...)
}

func (d *StorageGatewayDouble) DescribeTapeRecoveryPointsRequest(i0 *storagegateway.DescribeTapeRecoveryPointsInput) (r0 *request.Request, r1 *storagegateway.DescribeTapeRecoveryPointsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTapeRecoveryPointsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.DescribeTapeRecoveryPointsOutput)
	return
}

func (d *StorageGatewayDouble) DescribeTapeRecoveryPointsWithContext(i0 context.Context, i1 *storagegateway.DescribeTapeRecoveryPointsInput, i2 ...request.Option) (r0 *storagegateway.DescribeTapeRecoveryPointsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTapeRecoveryPointsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.DescribeTapeRecoveryPointsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeDescribeTapeRecoveryPointsWithContext(ctx context.Context, in *storagegateway.DescribeTapeRecoveryPointsInput, _ ...request.Option) (*storagegateway.DescribeTapeRecoveryPointsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTapeRecoveryPoints cancelled", ctx.Err())
	default:
		return d.DescribeTapeRecoveryPoints(in)
	}
}

func (d *StorageGatewayDouble) DescribeTapes(i0 *storagegateway.DescribeTapesInput) (r0 *storagegateway.DescribeTapesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTapes", i0)
	r0, _ = returns[0].(*storagegateway.DescribeTapesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) DescribeTapesPages(i0 *storagegateway.DescribeTapesInput, i1 func(*storagegateway.DescribeTapesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTapesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *StorageGatewayDouble) fakeDescribeTapesPages(in *storagegateway.DescribeTapesInput, pager func(*storagegateway.DescribeTapesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeTapes", paginators, in, pager)
}

func (d *StorageGatewayDouble) DescribeTapesPagesWithContext(i0 context.Context, i1 *storagegateway.DescribeTapesInput, i2 func(*storagegateway.DescribeTapesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTapesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *StorageGatewayDouble) fakeDescribeTapesPagesWithContext(ctx context.Context, in *storagegateway.DescribeTapesInput, pager func(*storagegateway.DescribeTapesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeTapes", paginators, ctx, in, pager, options...)
}

func (d *StorageGatewayDouble) DescribeTapesRequest(i0 *storagegateway.DescribeTapesInput) (r0 *request.Request, r1 *storagegateway.DescribeTapesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTapesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.DescribeTapesOutput)
	return
}

func (d *StorageGatewayDouble) DescribeTapesWithContext(i0 context.Context, i1 *storagegateway.DescribeTapesInput, i2 ...request.Option) (r0 *storagegateway.DescribeTapesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTapesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.DescribeTapesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeDescribeTapesWithContext(ctx context.Context, in *storagegateway.DescribeTapesInput, _ ...request.Option) (*storagegateway.DescribeTapesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTapes cancelled", ctx.Err())
	default:
		return d.DescribeTapes(in)
	}
}

func (d *StorageGatewayDouble) DescribeUploadBuffer(i0 *storagegateway.DescribeUploadBufferInput) (r0 *storagegateway.DescribeUploadBufferOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUploadBuffer", i0)
	r0, _ = returns[0].(*storagegateway.DescribeUploadBufferOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) DescribeUploadBufferRequest(i0 *storagegateway.DescribeUploadBufferInput) (r0 *request.Request, r1 *storagegateway.DescribeUploadBufferOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUploadBufferRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.DescribeUploadBufferOutput)
	return
}

func (d *StorageGatewayDouble) DescribeUploadBufferWithContext(i0 context.Context, i1 *storagegateway.DescribeUploadBufferInput, i2 ...request.Option) (r0 *storagegateway.DescribeUploadBufferOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeUploadBufferWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.DescribeUploadBufferOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeDescribeUploadBufferWithContext(ctx context.Context, in *storagegateway.DescribeUploadBufferInput, _ ...request.Option) (*storagegateway.DescribeUploadBufferOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeUploadBuffer cancelled", ctx.Err())
	default:
		return d.DescribeUploadBuffer(in)
	}
}

func (d *StorageGatewayDouble) DescribeVTLDevices(i0 *storagegateway.DescribeVTLDevicesInput) (r0 *storagegateway.DescribeVTLDevicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVTLDevices", i0)
	r0, _ = returns[0].(*storagegateway.DescribeVTLDevicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) DescribeVTLDevicesPages(i0 *storagegateway.DescribeVTLDevicesInput, i1 func(*storagegateway.DescribeVTLDevicesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVTLDevicesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *StorageGatewayDouble) fakeDescribeVTLDevicesPages(in *storagegateway.DescribeVTLDevicesInput, pager func(*storagegateway.DescribeVTLDevicesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeVTLDevices", paginators, in, pager)
}

func (d *StorageGatewayDouble) DescribeVTLDevicesPagesWithContext(i0 context.Context, i1 *storagegateway.DescribeVTLDevicesInput, i2 func(*storagegateway.DescribeVTLDevicesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVTLDevicesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *StorageGatewayDouble) fakeDescribeVTLDevicesPagesWithContext(ctx context.Context, in *storagegateway.DescribeVTLDevicesInput, pager func(*storagegateway.DescribeVTLDevicesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeVTLDevices", paginators, ctx, in, pager, options...)
}

func (d *StorageGatewayDouble) DescribeVTLDevicesRequest(i0 *storagegateway.DescribeVTLDevicesInput) (r0 *request.Request, r1 *storagegateway.DescribeVTLDevicesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVTLDevicesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.DescribeVTLDevicesOutput)
	return
}

func (d *StorageGatewayDouble) DescribeVTLDevicesWithContext(i0 context.Context, i1 *storagegateway.DescribeVTLDevicesInput, i2 ...request.Option) (r0 *storagegateway.DescribeVTLDevicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeVTLDevicesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.DescribeVTLDevicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeDescribeVTLDevicesWithContext(ctx context.Context, in *storagegateway.DescribeVTLDevicesInput, _ ...request.Option) (*storagegateway.DescribeVTLDevicesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeVTLDevices cancelled", ctx.Err())
	default:
		return d.DescribeVTLDevices(in)
	}
}

func (d *StorageGatewayDouble) DescribeWorkingStorage(i0 *storagegateway.DescribeWorkingStorageInput) (r0 *storagegateway.DescribeWorkingStorageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkingStorage", i0)
	r0, _ = returns[0].(*storagegateway.DescribeWorkingStorageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) DescribeWorkingStorageRequest(i0 *storagegateway.DescribeWorkingStorageInput) (r0 *request.Request, r1 *storagegateway.DescribeWorkingStorageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkingStorageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.DescribeWorkingStorageOutput)
	return
}

func (d *StorageGatewayDouble) DescribeWorkingStorageWithContext(i0 context.Context, i1 *storagegateway.DescribeWorkingStorageInput, i2 ...request.Option) (r0 *storagegateway.DescribeWorkingStorageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkingStorageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.DescribeWorkingStorageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeDescribeWorkingStorageWithContext(ctx context.Context, in *storagegateway.DescribeWorkingStorageInput, _ ...request.Option) (*storagegateway.DescribeWorkingStorageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeWorkingStorage cancelled", ctx.Err())
	default:
		return d.DescribeWorkingStorage(in)
	}
}

func (d *StorageGatewayDouble) DetachVolume(i0 *storagegateway.DetachVolumeInput) (r0 *storagegateway.DetachVolumeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachVolume", i0)
	r0, _ = returns[0].(*storagegateway.DetachVolumeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) DetachVolumeRequest(i0 *storagegateway.DetachVolumeInput) (r0 *request.Request, r1 *storagegateway.DetachVolumeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachVolumeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.DetachVolumeOutput)
	return
}

func (d *StorageGatewayDouble) DetachVolumeWithContext(i0 context.Context, i1 *storagegateway.DetachVolumeInput, i2 ...request.Option) (r0 *storagegateway.DetachVolumeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachVolumeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.DetachVolumeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeDetachVolumeWithContext(ctx context.Context, in *storagegateway.DetachVolumeInput, _ ...request.Option) (*storagegateway.DetachVolumeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DetachVolume cancelled", ctx.Err())
	default:
		return d.DetachVolume(in)
	}
}

func (d *StorageGatewayDouble) DisableGateway(i0 *storagegateway.DisableGatewayInput) (r0 *storagegateway.DisableGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableGateway", i0)
	r0, _ = returns[0].(*storagegateway.DisableGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) DisableGatewayRequest(i0 *storagegateway.DisableGatewayInput) (r0 *request.Request, r1 *storagegateway.DisableGatewayOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableGatewayRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.DisableGatewayOutput)
	return
}

func (d *StorageGatewayDouble) DisableGatewayWithContext(i0 context.Context, i1 *storagegateway.DisableGatewayInput, i2 ...request.Option) (r0 *storagegateway.DisableGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableGatewayWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.DisableGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeDisableGatewayWithContext(ctx context.Context, in *storagegateway.DisableGatewayInput, _ ...request.Option) (*storagegateway.DisableGatewayOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisableGateway cancelled", ctx.Err())
	default:
		return d.DisableGateway(in)
	}
}

func (d *StorageGatewayDouble) JoinDomain(i0 *storagegateway.JoinDomainInput) (r0 *storagegateway.JoinDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("JoinDomain", i0)
	r0, _ = returns[0].(*storagegateway.JoinDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) JoinDomainRequest(i0 *storagegateway.JoinDomainInput) (r0 *request.Request, r1 *storagegateway.JoinDomainOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("JoinDomainRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.JoinDomainOutput)
	return
}

func (d *StorageGatewayDouble) JoinDomainWithContext(i0 context.Context, i1 *storagegateway.JoinDomainInput, i2 ...request.Option) (r0 *storagegateway.JoinDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("JoinDomainWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.JoinDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeJoinDomainWithContext(ctx context.Context, in *storagegateway.JoinDomainInput, _ ...request.Option) (*storagegateway.JoinDomainOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "JoinDomain cancelled", ctx.Err())
	default:
		return d.JoinDomain(in)
	}
}

func (d *StorageGatewayDouble) ListFileShares(i0 *storagegateway.ListFileSharesInput) (r0 *storagegateway.ListFileSharesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFileShares", i0)
	r0, _ = returns[0].(*storagegateway.ListFileSharesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) ListFileSharesPages(i0 *storagegateway.ListFileSharesInput, i1 func(*storagegateway.ListFileSharesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFileSharesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *StorageGatewayDouble) fakeListFileSharesPages(in *storagegateway.ListFileSharesInput, pager func(*storagegateway.ListFileSharesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListFileShares", paginators, in, pager)
}

func (d *StorageGatewayDouble) ListFileSharesPagesWithContext(i0 context.Context, i1 *storagegateway.ListFileSharesInput, i2 func(*storagegateway.ListFileSharesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFileSharesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *StorageGatewayDouble) fakeListFileSharesPagesWithContext(ctx context.Context, in *storagegateway.ListFileSharesInput, pager func(*storagegateway.ListFileSharesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListFileShares", paginators, ctx, in, pager, options...)
}

func (d *StorageGatewayDouble) ListFileSharesRequest(i0 *storagegateway.ListFileSharesInput) (r0 *request.Request, r1 *storagegateway.ListFileSharesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFileSharesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.ListFileSharesOutput)
	return
}

func (d *StorageGatewayDouble) ListFileSharesWithContext(i0 context.Context, i1 *storagegateway.ListFileSharesInput, i2 ...request.Option) (r0 *storagegateway.ListFileSharesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFileSharesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.ListFileSharesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeListFileSharesWithContext(ctx context.Context, in *storagegateway.ListFileSharesInput, _ ...request.Option) (*storagegateway.ListFileSharesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListFileShares cancelled", ctx.Err())
	default:
		return d.ListFileShares(in)
	}
}

func (d *StorageGatewayDouble) ListGateways(i0 *storagegateway.ListGatewaysInput) (r0 *storagegateway.ListGatewaysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGateways", i0)
	r0, _ = returns[0].(*storagegateway.ListGatewaysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) ListGatewaysPages(i0 *storagegateway.ListGatewaysInput, i1 func(*storagegateway.ListGatewaysOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGatewaysPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *StorageGatewayDouble) fakeListGatewaysPages(in *storagegateway.ListGatewaysInput, pager func(*storagegateway.ListGatewaysOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListGateways", paginators, in, pager)
}

func (d *StorageGatewayDouble) ListGatewaysPagesWithContext(i0 context.Context, i1 *storagegateway.ListGatewaysInput, i2 func(*storagegateway.ListGatewaysOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGatewaysPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *StorageGatewayDouble) fakeListGatewaysPagesWithContext(ctx context.Context, in *storagegateway.ListGatewaysInput, pager func(*storagegateway.ListGatewaysOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListGateways", paginators, ctx, in, pager, options...)
}

func (d *StorageGatewayDouble) ListGatewaysRequest(i0 *storagegateway.ListGatewaysInput) (r0 *request.Request, r1 *storagegateway.ListGatewaysOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGatewaysRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.ListGatewaysOutput)
	return
}

func (d *StorageGatewayDouble) ListGatewaysWithContext(i0 context.Context, i1 *storagegateway.ListGatewaysInput, i2 ...request.Option) (r0 *storagegateway.ListGatewaysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGatewaysWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.ListGatewaysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeListGatewaysWithContext(ctx context.Context, in *storagegateway.ListGatewaysInput, _ ...request.Option) (*storagegateway.ListGatewaysOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListGateways cancelled", ctx.Err())
	default:
		return d.ListGateways(in)
	}
}

func (d *StorageGatewayDouble) ListLocalDisks(i0 *storagegateway.ListLocalDisksInput) (r0 *storagegateway.ListLocalDisksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLocalDisks", i0)
	r0, _ = returns[0].(*storagegateway.ListLocalDisksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) ListLocalDisksRequest(i0 *storagegateway.ListLocalDisksInput) (r0 *request.Request, r1 *storagegateway.ListLocalDisksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLocalDisksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.ListLocalDisksOutput)
	return
}

func (d *StorageGatewayDouble) ListLocalDisksWithContext(i0 context.Context, i1 *storagegateway.ListLocalDisksInput, i2 ...request.Option) (r0 *storagegateway.ListLocalDisksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLocalDisksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.ListLocalDisksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeListLocalDisksWithContext(ctx context.Context, in *storagegateway.ListLocalDisksInput, _ ...request.Option) (*storagegateway.ListLocalDisksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListLocalDisks cancelled", ctx.Err())
	default:
		return d.ListLocalDisks(in)
	}
}

func (d *StorageGatewayDouble) ListTagsForResource(i0 *storagegateway.ListTagsForResourceInput) (r0 *storagegateway.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*storagegateway.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) ListTagsForResourcePages(i0 *storagegateway.ListTagsForResourceInput, i1 func(*storagegateway.ListTagsForResourceOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourcePages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *StorageGatewayDouble) fakeListTagsForResourcePages(in *storagegateway.ListTagsForResourceInput, pager func(*storagegateway.ListTagsForResourceOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTagsForResource", paginators, in, pager)
}

func (d *StorageGatewayDouble) ListTagsForResourcePagesWithContext(i0 context.Context, i1 *storagegateway.ListTagsForResourceInput, i2 func(*storagegateway.ListTagsForResourceOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourcePagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *StorageGatewayDouble) fakeListTagsForResourcePagesWithContext(ctx context.Context, in *storagegateway.ListTagsForResourceInput, pager func(*storagegateway.ListTagsForResourceOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTagsForResource", paginators, ctx, in, pager, options...)
}

func (d *StorageGatewayDouble) ListTagsForResourceRequest(i0 *storagegateway.ListTagsForResourceInput) (r0 *request.Request, r1 *storagegateway.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.ListTagsForResourceOutput)
	return
}

func (d *StorageGatewayDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *storagegateway.ListTagsForResourceInput, i2 ...request.Option) (r0 *storagegateway.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *storagegateway.ListTagsForResourceInput, _ ...request.Option) (*storagegateway.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *StorageGatewayDouble) ListTapes(i0 *storagegateway.ListTapesInput) (r0 *storagegateway.ListTapesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTapes", i0)
	r0, _ = returns[0].(*storagegateway.ListTapesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) ListTapesPages(i0 *storagegateway.ListTapesInput, i1 func(*storagegateway.ListTapesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTapesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *StorageGatewayDouble) fakeListTapesPages(in *storagegateway.ListTapesInput, pager func(*storagegateway.ListTapesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTapes", paginators, in, pager)
}

func (d *StorageGatewayDouble) ListTapesPagesWithContext(i0 context.Context, i1 *storagegateway.ListTapesInput, i2 func(*storagegateway.ListTapesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTapesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *StorageGatewayDouble) fakeListTapesPagesWithContext(ctx context.Context, in *storagegateway.ListTapesInput, pager func(*storagegateway.ListTapesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTapes", paginators, ctx, in, pager, options...)
}

func (d *StorageGatewayDouble) ListTapesRequest(i0 *storagegateway.ListTapesInput) (r0 *request.Request, r1 *storagegateway.ListTapesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTapesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.ListTapesOutput)
	return
}

func (d *StorageGatewayDouble) ListTapesWithContext(i0 context.Context, i1 *storagegateway.ListTapesInput, i2 ...request.Option) (r0 *storagegateway.ListTapesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTapesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.ListTapesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeListTapesWithContext(ctx context.Context, in *storagegateway.ListTapesInput, _ ...request.Option) (*storagegateway.ListTapesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTapes cancelled", ctx.Err())
	default:
		return d.ListTapes(in)
	}
}

func (d *StorageGatewayDouble) ListVolumeInitiators(i0 *storagegateway.ListVolumeInitiatorsInput) (r0 *storagegateway.ListVolumeInitiatorsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVolumeInitiators", i0)
	r0, _ = returns[0].(*storagegateway.ListVolumeInitiatorsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) ListVolumeInitiatorsRequest(i0 *storagegateway.ListVolumeInitiatorsInput) (r0 *request.Request, r1 *storagegateway.ListVolumeInitiatorsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVolumeInitiatorsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.ListVolumeInitiatorsOutput)
	return
}

func (d *StorageGatewayDouble) ListVolumeInitiatorsWithContext(i0 context.Context, i1 *storagegateway.ListVolumeInitiatorsInput, i2 ...request.Option) (r0 *storagegateway.ListVolumeInitiatorsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVolumeInitiatorsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.ListVolumeInitiatorsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeListVolumeInitiatorsWithContext(ctx context.Context, in *storagegateway.ListVolumeInitiatorsInput, _ ...request.Option) (*storagegateway.ListVolumeInitiatorsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListVolumeInitiators cancelled", ctx.Err())
	default:
		return d.ListVolumeInitiators(in)
	}
}

func (d *StorageGatewayDouble) ListVolumeRecoveryPoints(i0 *storagegateway.ListVolumeRecoveryPointsInput) (r0 *storagegateway.ListVolumeRecoveryPointsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVolumeRecoveryPoints", i0)
	r0, _ = returns[0].(*storagegateway.ListVolumeRecoveryPointsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) ListVolumeRecoveryPointsRequest(i0 *storagegateway.ListVolumeRecoveryPointsInput) (r0 *request.Request, r1 *storagegateway.ListVolumeRecoveryPointsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVolumeRecoveryPointsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.ListVolumeRecoveryPointsOutput)
	return
}

func (d *StorageGatewayDouble) ListVolumeRecoveryPointsWithContext(i0 context.Context, i1 *storagegateway.ListVolumeRecoveryPointsInput, i2 ...request.Option) (r0 *storagegateway.ListVolumeRecoveryPointsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVolumeRecoveryPointsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.ListVolumeRecoveryPointsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeListVolumeRecoveryPointsWithContext(ctx context.Context, in *storagegateway.ListVolumeRecoveryPointsInput, _ ...request.Option) (*storagegateway.ListVolumeRecoveryPointsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListVolumeRecoveryPoints cancelled", ctx.Err())
	default:
		return d.ListVolumeRecoveryPoints(in)
	}
}

func (d *StorageGatewayDouble) ListVolumes(i0 *storagegateway.ListVolumesInput) (r0 *storagegateway.ListVolumesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVolumes", i0)
	r0, _ = returns[0].(*storagegateway.ListVolumesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) ListVolumesPages(i0 *storagegateway.ListVolumesInput, i1 func(*storagegateway.ListVolumesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVolumesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *StorageGatewayDouble) fakeListVolumesPages(in *storagegateway.ListVolumesInput, pager func(*storagegateway.ListVolumesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListVolumes", paginators, in, pager)
}

func (d *StorageGatewayDouble) ListVolumesPagesWithContext(i0 context.Context, i1 *storagegateway.ListVolumesInput, i2 func(*storagegateway.ListVolumesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVolumesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *StorageGatewayDouble) fakeListVolumesPagesWithContext(ctx context.Context, in *storagegateway.ListVolumesInput, pager func(*storagegateway.ListVolumesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListVolumes", paginators, ctx, in, pager, options...)
}

func (d *StorageGatewayDouble) ListVolumesRequest(i0 *storagegateway.ListVolumesInput) (r0 *request.Request, r1 *storagegateway.ListVolumesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVolumesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.ListVolumesOutput)
	return
}

func (d *StorageGatewayDouble) ListVolumesWithContext(i0 context.Context, i1 *storagegateway.ListVolumesInput, i2 ...request.Option) (r0 *storagegateway.ListVolumesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVolumesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.ListVolumesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeListVolumesWithContext(ctx context.Context, in *storagegateway.ListVolumesInput, _ ...request.Option) (*storagegateway.ListVolumesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListVolumes cancelled", ctx.Err())
	default:
		return d.ListVolumes(in)
	}
}

func (d *StorageGatewayDouble) NotifyWhenUploaded(i0 *storagegateway.NotifyWhenUploadedInput) (r0 *storagegateway.NotifyWhenUploadedOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("NotifyWhenUploaded", i0)
	r0, _ = returns[0].(*storagegateway.NotifyWhenUploadedOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) NotifyWhenUploadedRequest(i0 *storagegateway.NotifyWhenUploadedInput) (r0 *request.Request, r1 *storagegateway.NotifyWhenUploadedOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("NotifyWhenUploadedRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.NotifyWhenUploadedOutput)
	return
}

func (d *StorageGatewayDouble) NotifyWhenUploadedWithContext(i0 context.Context, i1 *storagegateway.NotifyWhenUploadedInput, i2 ...request.Option) (r0 *storagegateway.NotifyWhenUploadedOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("NotifyWhenUploadedWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.NotifyWhenUploadedOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeNotifyWhenUploadedWithContext(ctx context.Context, in *storagegateway.NotifyWhenUploadedInput, _ ...request.Option) (*storagegateway.NotifyWhenUploadedOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "NotifyWhenUploaded cancelled", ctx.Err())
	default:
		return d.NotifyWhenUploaded(in)
	}
}

func (d *StorageGatewayDouble) RefreshCache(i0 *storagegateway.RefreshCacheInput) (r0 *storagegateway.RefreshCacheOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RefreshCache", i0)
	r0, _ = returns[0].(*storagegateway.RefreshCacheOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) RefreshCacheRequest(i0 *storagegateway.RefreshCacheInput) (r0 *request.Request, r1 *storagegateway.RefreshCacheOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RefreshCacheRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.RefreshCacheOutput)
	return
}

func (d *StorageGatewayDouble) RefreshCacheWithContext(i0 context.Context, i1 *storagegateway.RefreshCacheInput, i2 ...request.Option) (r0 *storagegateway.RefreshCacheOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RefreshCacheWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.RefreshCacheOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeRefreshCacheWithContext(ctx context.Context, in *storagegateway.RefreshCacheInput, _ ...request.Option) (*storagegateway.RefreshCacheOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RefreshCache cancelled", ctx.Err())
	default:
		return d.RefreshCache(in)
	}
}

func (d *StorageGatewayDouble) RemoveTagsFromResource(i0 *storagegateway.RemoveTagsFromResourceInput) (r0 *storagegateway.RemoveTagsFromResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromResource", i0)
	r0, _ = returns[0].(*storagegateway.RemoveTagsFromResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) RemoveTagsFromResourceRequest(i0 *storagegateway.RemoveTagsFromResourceInput) (r0 *request.Request, r1 *storagegateway.RemoveTagsFromResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.RemoveTagsFromResourceOutput)
	return
}

func (d *StorageGatewayDouble) RemoveTagsFromResourceWithContext(i0 context.Context, i1 *storagegateway.RemoveTagsFromResourceInput, i2 ...request.Option) (r0 *storagegateway.RemoveTagsFromResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.RemoveTagsFromResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeRemoveTagsFromResourceWithContext(ctx context.Context, in *storagegateway.RemoveTagsFromResourceInput, _ ...request.Option) (*storagegateway.RemoveTagsFromResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveTagsFromResource cancelled", ctx.Err())
	default:
		return d.RemoveTagsFromResource(in)
	}
}

func (d *StorageGatewayDouble) ResetCache(i0 *storagegateway.ResetCacheInput) (r0 *storagegateway.ResetCacheOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetCache", i0)
	r0, _ = returns[0].(*storagegateway.ResetCacheOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) ResetCacheRequest(i0 *storagegateway.ResetCacheInput) (r0 *request.Request, r1 *storagegateway.ResetCacheOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetCacheRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.ResetCacheOutput)
	return
}

func (d *StorageGatewayDouble) ResetCacheWithContext(i0 context.Context, i1 *storagegateway.ResetCacheInput, i2 ...request.Option) (r0 *storagegateway.ResetCacheOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetCacheWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.ResetCacheOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeResetCacheWithContext(ctx context.Context, in *storagegateway.ResetCacheInput, _ ...request.Option) (*storagegateway.ResetCacheOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ResetCache cancelled", ctx.Err())
	default:
		return d.ResetCache(in)
	}
}

func (d *StorageGatewayDouble) RetrieveTapeArchive(i0 *storagegateway.RetrieveTapeArchiveInput) (r0 *storagegateway.RetrieveTapeArchiveOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RetrieveTapeArchive", i0)
	r0, _ = returns[0].(*storagegateway.RetrieveTapeArchiveOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) RetrieveTapeArchiveRequest(i0 *storagegateway.RetrieveTapeArchiveInput) (r0 *request.Request, r1 *storagegateway.RetrieveTapeArchiveOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RetrieveTapeArchiveRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.RetrieveTapeArchiveOutput)
	return
}

func (d *StorageGatewayDouble) RetrieveTapeArchiveWithContext(i0 context.Context, i1 *storagegateway.RetrieveTapeArchiveInput, i2 ...request.Option) (r0 *storagegateway.RetrieveTapeArchiveOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RetrieveTapeArchiveWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.RetrieveTapeArchiveOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeRetrieveTapeArchiveWithContext(ctx context.Context, in *storagegateway.RetrieveTapeArchiveInput, _ ...request.Option) (*storagegateway.RetrieveTapeArchiveOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RetrieveTapeArchive cancelled", ctx.Err())
	default:
		return d.RetrieveTapeArchive(in)
	}
}

func (d *StorageGatewayDouble) RetrieveTapeRecoveryPoint(i0 *storagegateway.RetrieveTapeRecoveryPointInput) (r0 *storagegateway.RetrieveTapeRecoveryPointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RetrieveTapeRecoveryPoint", i0)
	r0, _ = returns[0].(*storagegateway.RetrieveTapeRecoveryPointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) RetrieveTapeRecoveryPointRequest(i0 *storagegateway.RetrieveTapeRecoveryPointInput) (r0 *request.Request, r1 *storagegateway.RetrieveTapeRecoveryPointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RetrieveTapeRecoveryPointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.RetrieveTapeRecoveryPointOutput)
	return
}

func (d *StorageGatewayDouble) RetrieveTapeRecoveryPointWithContext(i0 context.Context, i1 *storagegateway.RetrieveTapeRecoveryPointInput, i2 ...request.Option) (r0 *storagegateway.RetrieveTapeRecoveryPointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RetrieveTapeRecoveryPointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.RetrieveTapeRecoveryPointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeRetrieveTapeRecoveryPointWithContext(ctx context.Context, in *storagegateway.RetrieveTapeRecoveryPointInput, _ ...request.Option) (*storagegateway.RetrieveTapeRecoveryPointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RetrieveTapeRecoveryPoint cancelled", ctx.Err())
	default:
		return d.RetrieveTapeRecoveryPoint(in)
	}
}

func (d *StorageGatewayDouble) SetLocalConsolePassword(i0 *storagegateway.SetLocalConsolePasswordInput) (r0 *storagegateway.SetLocalConsolePasswordOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetLocalConsolePassword", i0)
	r0, _ = returns[0].(*storagegateway.SetLocalConsolePasswordOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) SetLocalConsolePasswordRequest(i0 *storagegateway.SetLocalConsolePasswordInput) (r0 *request.Request, r1 *storagegateway.SetLocalConsolePasswordOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetLocalConsolePasswordRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.SetLocalConsolePasswordOutput)
	return
}

func (d *StorageGatewayDouble) SetLocalConsolePasswordWithContext(i0 context.Context, i1 *storagegateway.SetLocalConsolePasswordInput, i2 ...request.Option) (r0 *storagegateway.SetLocalConsolePasswordOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetLocalConsolePasswordWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.SetLocalConsolePasswordOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeSetLocalConsolePasswordWithContext(ctx context.Context, in *storagegateway.SetLocalConsolePasswordInput, _ ...request.Option) (*storagegateway.SetLocalConsolePasswordOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetLocalConsolePassword cancelled", ctx.Err())
	default:
		return d.SetLocalConsolePassword(in)
	}
}

func (d *StorageGatewayDouble) SetSMBGuestPassword(i0 *storagegateway.SetSMBGuestPasswordInput) (r0 *storagegateway.SetSMBGuestPasswordOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetSMBGuestPassword", i0)
	r0, _ = returns[0].(*storagegateway.SetSMBGuestPasswordOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) SetSMBGuestPasswordRequest(i0 *storagegateway.SetSMBGuestPasswordInput) (r0 *request.Request, r1 *storagegateway.SetSMBGuestPasswordOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetSMBGuestPasswordRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.SetSMBGuestPasswordOutput)
	return
}

func (d *StorageGatewayDouble) SetSMBGuestPasswordWithContext(i0 context.Context, i1 *storagegateway.SetSMBGuestPasswordInput, i2 ...request.Option) (r0 *storagegateway.SetSMBGuestPasswordOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetSMBGuestPasswordWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.SetSMBGuestPasswordOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeSetSMBGuestPasswordWithContext(ctx context.Context, in *storagegateway.SetSMBGuestPasswordInput, _ ...request.Option) (*storagegateway.SetSMBGuestPasswordOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetSMBGuestPassword cancelled", ctx.Err())
	default:
		return d.SetSMBGuestPassword(in)
	}
}

func (d *StorageGatewayDouble) ShutdownGateway(i0 *storagegateway.ShutdownGatewayInput) (r0 *storagegateway.ShutdownGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ShutdownGateway", i0)
	r0, _ = returns[0].(*storagegateway.ShutdownGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) ShutdownGatewayRequest(i0 *storagegateway.ShutdownGatewayInput) (r0 *request.Request, r1 *storagegateway.ShutdownGatewayOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ShutdownGatewayRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.ShutdownGatewayOutput)
	return
}

func (d *StorageGatewayDouble) ShutdownGatewayWithContext(i0 context.Context, i1 *storagegateway.ShutdownGatewayInput, i2 ...request.Option) (r0 *storagegateway.ShutdownGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ShutdownGatewayWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.ShutdownGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeShutdownGatewayWithContext(ctx context.Context, in *storagegateway.ShutdownGatewayInput, _ ...request.Option) (*storagegateway.ShutdownGatewayOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ShutdownGateway cancelled", ctx.Err())
	default:
		return d.ShutdownGateway(in)
	}
}

func (d *StorageGatewayDouble) StartAvailabilityMonitorTest(i0 *storagegateway.StartAvailabilityMonitorTestInput) (r0 *storagegateway.StartAvailabilityMonitorTestOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartAvailabilityMonitorTest", i0)
	r0, _ = returns[0].(*storagegateway.StartAvailabilityMonitorTestOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) StartAvailabilityMonitorTestRequest(i0 *storagegateway.StartAvailabilityMonitorTestInput) (r0 *request.Request, r1 *storagegateway.StartAvailabilityMonitorTestOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartAvailabilityMonitorTestRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.StartAvailabilityMonitorTestOutput)
	return
}

func (d *StorageGatewayDouble) StartAvailabilityMonitorTestWithContext(i0 context.Context, i1 *storagegateway.StartAvailabilityMonitorTestInput, i2 ...request.Option) (r0 *storagegateway.StartAvailabilityMonitorTestOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartAvailabilityMonitorTestWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.StartAvailabilityMonitorTestOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeStartAvailabilityMonitorTestWithContext(ctx context.Context, in *storagegateway.StartAvailabilityMonitorTestInput, _ ...request.Option) (*storagegateway.StartAvailabilityMonitorTestOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartAvailabilityMonitorTest cancelled", ctx.Err())
	default:
		return d.StartAvailabilityMonitorTest(in)
	}
}

func (d *StorageGatewayDouble) StartGateway(i0 *storagegateway.StartGatewayInput) (r0 *storagegateway.StartGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartGateway", i0)
	r0, _ = returns[0].(*storagegateway.StartGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) StartGatewayRequest(i0 *storagegateway.StartGatewayInput) (r0 *request.Request, r1 *storagegateway.StartGatewayOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartGatewayRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.StartGatewayOutput)
	return
}

func (d *StorageGatewayDouble) StartGatewayWithContext(i0 context.Context, i1 *storagegateway.StartGatewayInput, i2 ...request.Option) (r0 *storagegateway.StartGatewayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartGatewayWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.StartGatewayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeStartGatewayWithContext(ctx context.Context, in *storagegateway.StartGatewayInput, _ ...request.Option) (*storagegateway.StartGatewayOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartGateway cancelled", ctx.Err())
	default:
		return d.StartGateway(in)
	}
}

func (d *StorageGatewayDouble) UpdateBandwidthRateLimit(i0 *storagegateway.UpdateBandwidthRateLimitInput) (r0 *storagegateway.UpdateBandwidthRateLimitOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateBandwidthRateLimit", i0)
	r0, _ = returns[0].(*storagegateway.UpdateBandwidthRateLimitOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) UpdateBandwidthRateLimitRequest(i0 *storagegateway.UpdateBandwidthRateLimitInput) (r0 *request.Request, r1 *storagegateway.UpdateBandwidthRateLimitOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateBandwidthRateLimitRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.UpdateBandwidthRateLimitOutput)
	return
}

func (d *StorageGatewayDouble) UpdateBandwidthRateLimitWithContext(i0 context.Context, i1 *storagegateway.UpdateBandwidthRateLimitInput, i2 ...request.Option) (r0 *storagegateway.UpdateBandwidthRateLimitOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateBandwidthRateLimitWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.UpdateBandwidthRateLimitOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeUpdateBandwidthRateLimitWithContext(ctx context.Context, in *storagegateway.UpdateBandwidthRateLimitInput, _ ...request.Option) (*storagegateway.UpdateBandwidthRateLimitOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateBandwidthRateLimit cancelled", ctx.Err())
	default:
		return d.UpdateBandwidthRateLimit(in)
	}
}

func (d *StorageGatewayDouble) UpdateChapCredentials(i0 *storagegateway.UpdateChapCredentialsInput) (r0 *storagegateway.UpdateChapCredentialsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateChapCredentials", i0)
	r0, _ = returns[0].(*storagegateway.UpdateChapCredentialsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) UpdateChapCredentialsRequest(i0 *storagegateway.UpdateChapCredentialsInput) (r0 *request.Request, r1 *storagegateway.UpdateChapCredentialsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateChapCredentialsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.UpdateChapCredentialsOutput)
	return
}

func (d *StorageGatewayDouble) UpdateChapCredentialsWithContext(i0 context.Context, i1 *storagegateway.UpdateChapCredentialsInput, i2 ...request.Option) (r0 *storagegateway.UpdateChapCredentialsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateChapCredentialsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.UpdateChapCredentialsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeUpdateChapCredentialsWithContext(ctx context.Context, in *storagegateway.UpdateChapCredentialsInput, _ ...request.Option) (*storagegateway.UpdateChapCredentialsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateChapCredentials cancelled", ctx.Err())
	default:
		return d.UpdateChapCredentials(in)
	}
}

func (d *StorageGatewayDouble) UpdateGatewayInformation(i0 *storagegateway.UpdateGatewayInformationInput) (r0 *storagegateway.UpdateGatewayInformationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGatewayInformation", i0)
	r0, _ = returns[0].(*storagegateway.UpdateGatewayInformationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) UpdateGatewayInformationRequest(i0 *storagegateway.UpdateGatewayInformationInput) (r0 *request.Request, r1 *storagegateway.UpdateGatewayInformationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGatewayInformationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.UpdateGatewayInformationOutput)
	return
}

func (d *StorageGatewayDouble) UpdateGatewayInformationWithContext(i0 context.Context, i1 *storagegateway.UpdateGatewayInformationInput, i2 ...request.Option) (r0 *storagegateway.UpdateGatewayInformationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGatewayInformationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.UpdateGatewayInformationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeUpdateGatewayInformationWithContext(ctx context.Context, in *storagegateway.UpdateGatewayInformationInput, _ ...request.Option) (*storagegateway.UpdateGatewayInformationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateGatewayInformation cancelled", ctx.Err())
	default:
		return d.UpdateGatewayInformation(in)
	}
}

func (d *StorageGatewayDouble) UpdateGatewaySoftwareNow(i0 *storagegateway.UpdateGatewaySoftwareNowInput) (r0 *storagegateway.UpdateGatewaySoftwareNowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGatewaySoftwareNow", i0)
	r0, _ = returns[0].(*storagegateway.UpdateGatewaySoftwareNowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) UpdateGatewaySoftwareNowRequest(i0 *storagegateway.UpdateGatewaySoftwareNowInput) (r0 *request.Request, r1 *storagegateway.UpdateGatewaySoftwareNowOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGatewaySoftwareNowRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.UpdateGatewaySoftwareNowOutput)
	return
}

func (d *StorageGatewayDouble) UpdateGatewaySoftwareNowWithContext(i0 context.Context, i1 *storagegateway.UpdateGatewaySoftwareNowInput, i2 ...request.Option) (r0 *storagegateway.UpdateGatewaySoftwareNowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGatewaySoftwareNowWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.UpdateGatewaySoftwareNowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeUpdateGatewaySoftwareNowWithContext(ctx context.Context, in *storagegateway.UpdateGatewaySoftwareNowInput, _ ...request.Option) (*storagegateway.UpdateGatewaySoftwareNowOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateGatewaySoftwareNow cancelled", ctx.Err())
	default:
		return d.UpdateGatewaySoftwareNow(in)
	}
}

func (d *StorageGatewayDouble) UpdateMaintenanceStartTime(i0 *storagegateway.UpdateMaintenanceStartTimeInput) (r0 *storagegateway.UpdateMaintenanceStartTimeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMaintenanceStartTime", i0)
	r0, _ = returns[0].(*storagegateway.UpdateMaintenanceStartTimeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) UpdateMaintenanceStartTimeRequest(i0 *storagegateway.UpdateMaintenanceStartTimeInput) (r0 *request.Request, r1 *storagegateway.UpdateMaintenanceStartTimeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMaintenanceStartTimeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.UpdateMaintenanceStartTimeOutput)
	return
}

func (d *StorageGatewayDouble) UpdateMaintenanceStartTimeWithContext(i0 context.Context, i1 *storagegateway.UpdateMaintenanceStartTimeInput, i2 ...request.Option) (r0 *storagegateway.UpdateMaintenanceStartTimeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMaintenanceStartTimeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.UpdateMaintenanceStartTimeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeUpdateMaintenanceStartTimeWithContext(ctx context.Context, in *storagegateway.UpdateMaintenanceStartTimeInput, _ ...request.Option) (*storagegateway.UpdateMaintenanceStartTimeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateMaintenanceStartTime cancelled", ctx.Err())
	default:
		return d.UpdateMaintenanceStartTime(in)
	}
}

func (d *StorageGatewayDouble) UpdateNFSFileShare(i0 *storagegateway.UpdateNFSFileShareInput) (r0 *storagegateway.UpdateNFSFileShareOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateNFSFileShare", i0)
	r0, _ = returns[0].(*storagegateway.UpdateNFSFileShareOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) UpdateNFSFileShareRequest(i0 *storagegateway.UpdateNFSFileShareInput) (r0 *request.Request, r1 *storagegateway.UpdateNFSFileShareOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateNFSFileShareRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.UpdateNFSFileShareOutput)
	return
}

func (d *StorageGatewayDouble) UpdateNFSFileShareWithContext(i0 context.Context, i1 *storagegateway.UpdateNFSFileShareInput, i2 ...request.Option) (r0 *storagegateway.UpdateNFSFileShareOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateNFSFileShareWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.UpdateNFSFileShareOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeUpdateNFSFileShareWithContext(ctx context.Context, in *storagegateway.UpdateNFSFileShareInput, _ ...request.Option) (*storagegateway.UpdateNFSFileShareOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateNFSFileShare cancelled", ctx.Err())
	default:
		return d.UpdateNFSFileShare(in)
	}
}

func (d *StorageGatewayDouble) UpdateSMBFileShare(i0 *storagegateway.UpdateSMBFileShareInput) (r0 *storagegateway.UpdateSMBFileShareOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSMBFileShare", i0)
	r0, _ = returns[0].(*storagegateway.UpdateSMBFileShareOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) UpdateSMBFileShareRequest(i0 *storagegateway.UpdateSMBFileShareInput) (r0 *request.Request, r1 *storagegateway.UpdateSMBFileShareOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSMBFileShareRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.UpdateSMBFileShareOutput)
	return
}

func (d *StorageGatewayDouble) UpdateSMBFileShareWithContext(i0 context.Context, i1 *storagegateway.UpdateSMBFileShareInput, i2 ...request.Option) (r0 *storagegateway.UpdateSMBFileShareOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSMBFileShareWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.UpdateSMBFileShareOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeUpdateSMBFileShareWithContext(ctx context.Context, in *storagegateway.UpdateSMBFileShareInput, _ ...request.Option) (*storagegateway.UpdateSMBFileShareOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateSMBFileShare cancelled", ctx.Err())
	default:
		return d.UpdateSMBFileShare(in)
	}
}

func (d *StorageGatewayDouble) UpdateSMBSecurityStrategy(i0 *storagegateway.UpdateSMBSecurityStrategyInput) (r0 *storagegateway.UpdateSMBSecurityStrategyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSMBSecurityStrategy", i0)
	r0, _ = returns[0].(*storagegateway.UpdateSMBSecurityStrategyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) UpdateSMBSecurityStrategyRequest(i0 *storagegateway.UpdateSMBSecurityStrategyInput) (r0 *request.Request, r1 *storagegateway.UpdateSMBSecurityStrategyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSMBSecurityStrategyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.UpdateSMBSecurityStrategyOutput)
	return
}

func (d *StorageGatewayDouble) UpdateSMBSecurityStrategyWithContext(i0 context.Context, i1 *storagegateway.UpdateSMBSecurityStrategyInput, i2 ...request.Option) (r0 *storagegateway.UpdateSMBSecurityStrategyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSMBSecurityStrategyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.UpdateSMBSecurityStrategyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeUpdateSMBSecurityStrategyWithContext(ctx context.Context, in *storagegateway.UpdateSMBSecurityStrategyInput, _ ...request.Option) (*storagegateway.UpdateSMBSecurityStrategyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateSMBSecurityStrategy cancelled", ctx.Err())
	default:
		return d.UpdateSMBSecurityStrategy(in)
	}
}

func (d *StorageGatewayDouble) UpdateSnapshotSchedule(i0 *storagegateway.UpdateSnapshotScheduleInput) (r0 *storagegateway.UpdateSnapshotScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSnapshotSchedule", i0)
	r0, _ = returns[0].(*storagegateway.UpdateSnapshotScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) UpdateSnapshotScheduleRequest(i0 *storagegateway.UpdateSnapshotScheduleInput) (r0 *request.Request, r1 *storagegateway.UpdateSnapshotScheduleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSnapshotScheduleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.UpdateSnapshotScheduleOutput)
	return
}

func (d *StorageGatewayDouble) UpdateSnapshotScheduleWithContext(i0 context.Context, i1 *storagegateway.UpdateSnapshotScheduleInput, i2 ...request.Option) (r0 *storagegateway.UpdateSnapshotScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSnapshotScheduleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.UpdateSnapshotScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeUpdateSnapshotScheduleWithContext(ctx context.Context, in *storagegateway.UpdateSnapshotScheduleInput, _ ...request.Option) (*storagegateway.UpdateSnapshotScheduleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateSnapshotSchedule cancelled", ctx.Err())
	default:
		return d.UpdateSnapshotSchedule(in)
	}
}

func (d *StorageGatewayDouble) UpdateVTLDeviceType(i0 *storagegateway.UpdateVTLDeviceTypeInput) (r0 *storagegateway.UpdateVTLDeviceTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateVTLDeviceType", i0)
	r0, _ = returns[0].(*storagegateway.UpdateVTLDeviceTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) UpdateVTLDeviceTypeRequest(i0 *storagegateway.UpdateVTLDeviceTypeInput) (r0 *request.Request, r1 *storagegateway.UpdateVTLDeviceTypeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateVTLDeviceTypeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*storagegateway.UpdateVTLDeviceTypeOutput)
	return
}

func (d *StorageGatewayDouble) UpdateVTLDeviceTypeWithContext(i0 context.Context, i1 *storagegateway.UpdateVTLDeviceTypeInput, i2 ...request.Option) (r0 *storagegateway.UpdateVTLDeviceTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateVTLDeviceTypeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*storagegateway.UpdateVTLDeviceTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *StorageGatewayDouble) fakeUpdateVTLDeviceTypeWithContext(ctx context.Context, in *storagegateway.UpdateVTLDeviceTypeInput, _ ...request.Option) (*storagegateway.UpdateVTLDeviceTypeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateVTLDeviceType cancelled", ctx.Err())
	default:
		return d.UpdateVTLDeviceType(in)
	}
}
