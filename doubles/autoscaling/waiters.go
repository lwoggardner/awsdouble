// Code generated by go awsdoublegen; DO NOT EDIT.
// This file was generated at 2020-01-29T21:22:05+11:00
package autoscalingdouble

import (
	"time"

	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/lwoggardner/awsdouble"
)

var waiters = map[string]*awsdouble.Waiter{

	"GroupExists": &awsdouble.Waiter{
		OperationName: "DescribeAutoScalingGroups",
		Waiter: request.Waiter{
			Name:        "WaitUntilGroupExists",
			MaxAttempts: 10,
			Delay:       request.ConstantWaiterDelay(5 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "length(AutoScalingGroups) > `0`",
					Expected: true,
				},
				{
					State:   request.RetryWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "length(AutoScalingGroups) > `0`",
					Expected: false,
				},
			},
		},
	},

	"GroupInService": &awsdouble.Waiter{
		OperationName: "DescribeAutoScalingGroups",
		Waiter: request.Waiter{
			Name:        "WaitUntilGroupInService",
			MaxAttempts: 40,
			Delay:       request.ConstantWaiterDelay(15 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "contains(AutoScalingGroups[].[length(Instances[?LifecycleState=='InService']) >= MinSize][], `false`)",
					Expected: false,
				},
				{
					State:   request.RetryWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "contains(AutoScalingGroups[].[length(Instances[?LifecycleState=='InService']) >= MinSize][], `false`)",
					Expected: true,
				},
			},
		},
	},

	"GroupNotExists": &awsdouble.Waiter{
		OperationName: "DescribeAutoScalingGroups",
		Waiter: request.Waiter{
			Name:        "WaitUntilGroupNotExists",
			MaxAttempts: 40,
			Delay:       request.ConstantWaiterDelay(15 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "length(AutoScalingGroups) > `0`",
					Expected: false,
				},
				{
					State:   request.RetryWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "length(AutoScalingGroups) > `0`",
					Expected: true,
				},
			},
		},
	},
}
