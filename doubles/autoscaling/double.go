// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:11:22+11:00

// Package autoscalingdouble provides a TestDouble implementation of autoscalingiface.AutoScalingAPI
package autoscalingdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/autoscaling"
	"github.com/aws/aws-sdk-go/service/autoscaling/autoscalingiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// AutoScalingDouble is TestDouble for autoscalingiface.AutoScalingAPI
type AutoScalingDouble struct {
	autoscalingiface.AutoScalingAPI
	*awsdouble.AWSTestDouble
}

// Constructor for AutoScalingDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *AutoScalingDouble {
	result := &AutoScalingDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*autoscalingiface.AutoScalingAPI)(nil), configurators...)
	return result
}

func (d *AutoScalingDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *AutoScalingDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AttachInstancesWithContext":
		return m.Fake(d.fakeAttachInstancesWithContext)

	case "AttachLoadBalancerTargetGroupsWithContext":
		return m.Fake(d.fakeAttachLoadBalancerTargetGroupsWithContext)

	case "AttachLoadBalancersWithContext":
		return m.Fake(d.fakeAttachLoadBalancersWithContext)

	case "BatchDeleteScheduledActionWithContext":
		return m.Fake(d.fakeBatchDeleteScheduledActionWithContext)

	case "BatchPutScheduledUpdateGroupActionWithContext":
		return m.Fake(d.fakeBatchPutScheduledUpdateGroupActionWithContext)

	case "CompleteLifecycleActionWithContext":
		return m.Fake(d.fakeCompleteLifecycleActionWithContext)

	case "CreateAutoScalingGroupWithContext":
		return m.Fake(d.fakeCreateAutoScalingGroupWithContext)

	case "CreateLaunchConfigurationWithContext":
		return m.Fake(d.fakeCreateLaunchConfigurationWithContext)

	case "CreateOrUpdateTagsWithContext":
		return m.Fake(d.fakeCreateOrUpdateTagsWithContext)

	case "DeleteAutoScalingGroupWithContext":
		return m.Fake(d.fakeDeleteAutoScalingGroupWithContext)

	case "DeleteLaunchConfigurationWithContext":
		return m.Fake(d.fakeDeleteLaunchConfigurationWithContext)

	case "DeleteLifecycleHookWithContext":
		return m.Fake(d.fakeDeleteLifecycleHookWithContext)

	case "DeleteNotificationConfigurationWithContext":
		return m.Fake(d.fakeDeleteNotificationConfigurationWithContext)

	case "DeletePolicyWithContext":
		return m.Fake(d.fakeDeletePolicyWithContext)

	case "DeleteScheduledActionWithContext":
		return m.Fake(d.fakeDeleteScheduledActionWithContext)

	case "DeleteTagsWithContext":
		return m.Fake(d.fakeDeleteTagsWithContext)

	case "DescribeAccountLimitsWithContext":
		return m.Fake(d.fakeDescribeAccountLimitsWithContext)

	case "DescribeAdjustmentTypesWithContext":
		return m.Fake(d.fakeDescribeAdjustmentTypesWithContext)

	case "DescribeAutoScalingGroupsPages":
		return m.Fake(d.fakeDescribeAutoScalingGroupsPages)

	case "DescribeAutoScalingGroupsPagesWithContext":
		return m.Fake(d.fakeDescribeAutoScalingGroupsPagesWithContext)

	case "DescribeAutoScalingGroupsWithContext":
		return m.Fake(d.fakeDescribeAutoScalingGroupsWithContext)

	case "DescribeAutoScalingInstancesPages":
		return m.Fake(d.fakeDescribeAutoScalingInstancesPages)

	case "DescribeAutoScalingInstancesPagesWithContext":
		return m.Fake(d.fakeDescribeAutoScalingInstancesPagesWithContext)

	case "DescribeAutoScalingInstancesWithContext":
		return m.Fake(d.fakeDescribeAutoScalingInstancesWithContext)

	case "DescribeAutoScalingNotificationTypesWithContext":
		return m.Fake(d.fakeDescribeAutoScalingNotificationTypesWithContext)

	case "DescribeLaunchConfigurationsPages":
		return m.Fake(d.fakeDescribeLaunchConfigurationsPages)

	case "DescribeLaunchConfigurationsPagesWithContext":
		return m.Fake(d.fakeDescribeLaunchConfigurationsPagesWithContext)

	case "DescribeLaunchConfigurationsWithContext":
		return m.Fake(d.fakeDescribeLaunchConfigurationsWithContext)

	case "DescribeLifecycleHookTypesWithContext":
		return m.Fake(d.fakeDescribeLifecycleHookTypesWithContext)

	case "DescribeLifecycleHooksWithContext":
		return m.Fake(d.fakeDescribeLifecycleHooksWithContext)

	case "DescribeLoadBalancerTargetGroupsWithContext":
		return m.Fake(d.fakeDescribeLoadBalancerTargetGroupsWithContext)

	case "DescribeLoadBalancersWithContext":
		return m.Fake(d.fakeDescribeLoadBalancersWithContext)

	case "DescribeMetricCollectionTypesWithContext":
		return m.Fake(d.fakeDescribeMetricCollectionTypesWithContext)

	case "DescribeNotificationConfigurationsPages":
		return m.Fake(d.fakeDescribeNotificationConfigurationsPages)

	case "DescribeNotificationConfigurationsPagesWithContext":
		return m.Fake(d.fakeDescribeNotificationConfigurationsPagesWithContext)

	case "DescribeNotificationConfigurationsWithContext":
		return m.Fake(d.fakeDescribeNotificationConfigurationsWithContext)

	case "DescribePoliciesPages":
		return m.Fake(d.fakeDescribePoliciesPages)

	case "DescribePoliciesPagesWithContext":
		return m.Fake(d.fakeDescribePoliciesPagesWithContext)

	case "DescribePoliciesWithContext":
		return m.Fake(d.fakeDescribePoliciesWithContext)

	case "DescribeScalingActivitiesPages":
		return m.Fake(d.fakeDescribeScalingActivitiesPages)

	case "DescribeScalingActivitiesPagesWithContext":
		return m.Fake(d.fakeDescribeScalingActivitiesPagesWithContext)

	case "DescribeScalingActivitiesWithContext":
		return m.Fake(d.fakeDescribeScalingActivitiesWithContext)

	case "DescribeScalingProcessTypesWithContext":
		return m.Fake(d.fakeDescribeScalingProcessTypesWithContext)

	case "DescribeScheduledActionsPages":
		return m.Fake(d.fakeDescribeScheduledActionsPages)

	case "DescribeScheduledActionsPagesWithContext":
		return m.Fake(d.fakeDescribeScheduledActionsPagesWithContext)

	case "DescribeScheduledActionsWithContext":
		return m.Fake(d.fakeDescribeScheduledActionsWithContext)

	case "DescribeTagsPages":
		return m.Fake(d.fakeDescribeTagsPages)

	case "DescribeTagsPagesWithContext":
		return m.Fake(d.fakeDescribeTagsPagesWithContext)

	case "DescribeTagsWithContext":
		return m.Fake(d.fakeDescribeTagsWithContext)

	case "DescribeTerminationPolicyTypesWithContext":
		return m.Fake(d.fakeDescribeTerminationPolicyTypesWithContext)

	case "DetachInstancesWithContext":
		return m.Fake(d.fakeDetachInstancesWithContext)

	case "DetachLoadBalancerTargetGroupsWithContext":
		return m.Fake(d.fakeDetachLoadBalancerTargetGroupsWithContext)

	case "DetachLoadBalancersWithContext":
		return m.Fake(d.fakeDetachLoadBalancersWithContext)

	case "DisableMetricsCollectionWithContext":
		return m.Fake(d.fakeDisableMetricsCollectionWithContext)

	case "EnableMetricsCollectionWithContext":
		return m.Fake(d.fakeEnableMetricsCollectionWithContext)

	case "EnterStandbyWithContext":
		return m.Fake(d.fakeEnterStandbyWithContext)

	case "ExecutePolicyWithContext":
		return m.Fake(d.fakeExecutePolicyWithContext)

	case "ExitStandbyWithContext":
		return m.Fake(d.fakeExitStandbyWithContext)

	case "PutLifecycleHookWithContext":
		return m.Fake(d.fakePutLifecycleHookWithContext)

	case "PutNotificationConfigurationWithContext":
		return m.Fake(d.fakePutNotificationConfigurationWithContext)

	case "PutScalingPolicyWithContext":
		return m.Fake(d.fakePutScalingPolicyWithContext)

	case "PutScheduledUpdateGroupActionWithContext":
		return m.Fake(d.fakePutScheduledUpdateGroupActionWithContext)

	case "RecordLifecycleActionHeartbeatWithContext":
		return m.Fake(d.fakeRecordLifecycleActionHeartbeatWithContext)

	case "ResumeProcessesWithContext":
		return m.Fake(d.fakeResumeProcessesWithContext)

	case "SetDesiredCapacityWithContext":
		return m.Fake(d.fakeSetDesiredCapacityWithContext)

	case "SetInstanceHealthWithContext":
		return m.Fake(d.fakeSetInstanceHealthWithContext)

	case "SetInstanceProtectionWithContext":
		return m.Fake(d.fakeSetInstanceProtectionWithContext)

	case "SuspendProcessesWithContext":
		return m.Fake(d.fakeSuspendProcessesWithContext)

	case "TerminateInstanceInAutoScalingGroupWithContext":
		return m.Fake(d.fakeTerminateInstanceInAutoScalingGroupWithContext)

	case "UpdateAutoScalingGroupWithContext":
		return m.Fake(d.fakeUpdateAutoScalingGroupWithContext)

	case "WaitUntilGroupExists":
		return m.Fake(d.fakeWaitUntilGroupExists)

	case "WaitUntilGroupExistsWithContext":
		return m.Fake(d.fakeWaitUntilGroupExistsWithContext)

	case "WaitUntilGroupInService":
		return m.Fake(d.fakeWaitUntilGroupInService)

	case "WaitUntilGroupInServiceWithContext":
		return m.Fake(d.fakeWaitUntilGroupInServiceWithContext)

	case "WaitUntilGroupNotExists":
		return m.Fake(d.fakeWaitUntilGroupNotExists)

	case "WaitUntilGroupNotExistsWithContext":
		return m.Fake(d.fakeWaitUntilGroupNotExistsWithContext)

	default:
		return nil
	}
}

func (d *AutoScalingDouble) AttachInstances(i0 *autoscaling.AttachInstancesInput) (r0 *autoscaling.AttachInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachInstances", i0)
	r0, _ = returns[0].(*autoscaling.AttachInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) AttachInstancesRequest(i0 *autoscaling.AttachInstancesInput) (r0 *request.Request, r1 *autoscaling.AttachInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.AttachInstancesOutput)
	return
}

func (d *AutoScalingDouble) AttachInstancesWithContext(i0 context.Context, i1 *autoscaling.AttachInstancesInput, i2 ...request.Option) (r0 *autoscaling.AttachInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.AttachInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeAttachInstancesWithContext(ctx context.Context, in *autoscaling.AttachInstancesInput, _ ...request.Option) (*autoscaling.AttachInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AttachInstances cancelled", ctx.Err())
	default:
		return d.AttachInstances(in)
	}
}

func (d *AutoScalingDouble) AttachLoadBalancerTargetGroups(i0 *autoscaling.AttachLoadBalancerTargetGroupsInput) (r0 *autoscaling.AttachLoadBalancerTargetGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachLoadBalancerTargetGroups", i0)
	r0, _ = returns[0].(*autoscaling.AttachLoadBalancerTargetGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) AttachLoadBalancerTargetGroupsRequest(i0 *autoscaling.AttachLoadBalancerTargetGroupsInput) (r0 *request.Request, r1 *autoscaling.AttachLoadBalancerTargetGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachLoadBalancerTargetGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.AttachLoadBalancerTargetGroupsOutput)
	return
}

func (d *AutoScalingDouble) AttachLoadBalancerTargetGroupsWithContext(i0 context.Context, i1 *autoscaling.AttachLoadBalancerTargetGroupsInput, i2 ...request.Option) (r0 *autoscaling.AttachLoadBalancerTargetGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachLoadBalancerTargetGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.AttachLoadBalancerTargetGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeAttachLoadBalancerTargetGroupsWithContext(ctx context.Context, in *autoscaling.AttachLoadBalancerTargetGroupsInput, _ ...request.Option) (*autoscaling.AttachLoadBalancerTargetGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AttachLoadBalancerTargetGroups cancelled", ctx.Err())
	default:
		return d.AttachLoadBalancerTargetGroups(in)
	}
}

func (d *AutoScalingDouble) AttachLoadBalancers(i0 *autoscaling.AttachLoadBalancersInput) (r0 *autoscaling.AttachLoadBalancersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachLoadBalancers", i0)
	r0, _ = returns[0].(*autoscaling.AttachLoadBalancersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) AttachLoadBalancersRequest(i0 *autoscaling.AttachLoadBalancersInput) (r0 *request.Request, r1 *autoscaling.AttachLoadBalancersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachLoadBalancersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.AttachLoadBalancersOutput)
	return
}

func (d *AutoScalingDouble) AttachLoadBalancersWithContext(i0 context.Context, i1 *autoscaling.AttachLoadBalancersInput, i2 ...request.Option) (r0 *autoscaling.AttachLoadBalancersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachLoadBalancersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.AttachLoadBalancersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeAttachLoadBalancersWithContext(ctx context.Context, in *autoscaling.AttachLoadBalancersInput, _ ...request.Option) (*autoscaling.AttachLoadBalancersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AttachLoadBalancers cancelled", ctx.Err())
	default:
		return d.AttachLoadBalancers(in)
	}
}

func (d *AutoScalingDouble) BatchDeleteScheduledAction(i0 *autoscaling.BatchDeleteScheduledActionInput) (r0 *autoscaling.BatchDeleteScheduledActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDeleteScheduledAction", i0)
	r0, _ = returns[0].(*autoscaling.BatchDeleteScheduledActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) BatchDeleteScheduledActionRequest(i0 *autoscaling.BatchDeleteScheduledActionInput) (r0 *request.Request, r1 *autoscaling.BatchDeleteScheduledActionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDeleteScheduledActionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.BatchDeleteScheduledActionOutput)
	return
}

func (d *AutoScalingDouble) BatchDeleteScheduledActionWithContext(i0 context.Context, i1 *autoscaling.BatchDeleteScheduledActionInput, i2 ...request.Option) (r0 *autoscaling.BatchDeleteScheduledActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDeleteScheduledActionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.BatchDeleteScheduledActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeBatchDeleteScheduledActionWithContext(ctx context.Context, in *autoscaling.BatchDeleteScheduledActionInput, _ ...request.Option) (*autoscaling.BatchDeleteScheduledActionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchDeleteScheduledAction cancelled", ctx.Err())
	default:
		return d.BatchDeleteScheduledAction(in)
	}
}

func (d *AutoScalingDouble) BatchPutScheduledUpdateGroupAction(i0 *autoscaling.BatchPutScheduledUpdateGroupActionInput) (r0 *autoscaling.BatchPutScheduledUpdateGroupActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchPutScheduledUpdateGroupAction", i0)
	r0, _ = returns[0].(*autoscaling.BatchPutScheduledUpdateGroupActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) BatchPutScheduledUpdateGroupActionRequest(i0 *autoscaling.BatchPutScheduledUpdateGroupActionInput) (r0 *request.Request, r1 *autoscaling.BatchPutScheduledUpdateGroupActionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchPutScheduledUpdateGroupActionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.BatchPutScheduledUpdateGroupActionOutput)
	return
}

func (d *AutoScalingDouble) BatchPutScheduledUpdateGroupActionWithContext(i0 context.Context, i1 *autoscaling.BatchPutScheduledUpdateGroupActionInput, i2 ...request.Option) (r0 *autoscaling.BatchPutScheduledUpdateGroupActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchPutScheduledUpdateGroupActionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.BatchPutScheduledUpdateGroupActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeBatchPutScheduledUpdateGroupActionWithContext(ctx context.Context, in *autoscaling.BatchPutScheduledUpdateGroupActionInput, _ ...request.Option) (*autoscaling.BatchPutScheduledUpdateGroupActionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchPutScheduledUpdateGroupAction cancelled", ctx.Err())
	default:
		return d.BatchPutScheduledUpdateGroupAction(in)
	}
}

func (d *AutoScalingDouble) CompleteLifecycleAction(i0 *autoscaling.CompleteLifecycleActionInput) (r0 *autoscaling.CompleteLifecycleActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CompleteLifecycleAction", i0)
	r0, _ = returns[0].(*autoscaling.CompleteLifecycleActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) CompleteLifecycleActionRequest(i0 *autoscaling.CompleteLifecycleActionInput) (r0 *request.Request, r1 *autoscaling.CompleteLifecycleActionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CompleteLifecycleActionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.CompleteLifecycleActionOutput)
	return
}

func (d *AutoScalingDouble) CompleteLifecycleActionWithContext(i0 context.Context, i1 *autoscaling.CompleteLifecycleActionInput, i2 ...request.Option) (r0 *autoscaling.CompleteLifecycleActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CompleteLifecycleActionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.CompleteLifecycleActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeCompleteLifecycleActionWithContext(ctx context.Context, in *autoscaling.CompleteLifecycleActionInput, _ ...request.Option) (*autoscaling.CompleteLifecycleActionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CompleteLifecycleAction cancelled", ctx.Err())
	default:
		return d.CompleteLifecycleAction(in)
	}
}

func (d *AutoScalingDouble) CreateAutoScalingGroup(i0 *autoscaling.CreateAutoScalingGroupInput) (r0 *autoscaling.CreateAutoScalingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAutoScalingGroup", i0)
	r0, _ = returns[0].(*autoscaling.CreateAutoScalingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) CreateAutoScalingGroupRequest(i0 *autoscaling.CreateAutoScalingGroupInput) (r0 *request.Request, r1 *autoscaling.CreateAutoScalingGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAutoScalingGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.CreateAutoScalingGroupOutput)
	return
}

func (d *AutoScalingDouble) CreateAutoScalingGroupWithContext(i0 context.Context, i1 *autoscaling.CreateAutoScalingGroupInput, i2 ...request.Option) (r0 *autoscaling.CreateAutoScalingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAutoScalingGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.CreateAutoScalingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeCreateAutoScalingGroupWithContext(ctx context.Context, in *autoscaling.CreateAutoScalingGroupInput, _ ...request.Option) (*autoscaling.CreateAutoScalingGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateAutoScalingGroup cancelled", ctx.Err())
	default:
		return d.CreateAutoScalingGroup(in)
	}
}

func (d *AutoScalingDouble) CreateLaunchConfiguration(i0 *autoscaling.CreateLaunchConfigurationInput) (r0 *autoscaling.CreateLaunchConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLaunchConfiguration", i0)
	r0, _ = returns[0].(*autoscaling.CreateLaunchConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) CreateLaunchConfigurationRequest(i0 *autoscaling.CreateLaunchConfigurationInput) (r0 *request.Request, r1 *autoscaling.CreateLaunchConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLaunchConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.CreateLaunchConfigurationOutput)
	return
}

func (d *AutoScalingDouble) CreateLaunchConfigurationWithContext(i0 context.Context, i1 *autoscaling.CreateLaunchConfigurationInput, i2 ...request.Option) (r0 *autoscaling.CreateLaunchConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLaunchConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.CreateLaunchConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeCreateLaunchConfigurationWithContext(ctx context.Context, in *autoscaling.CreateLaunchConfigurationInput, _ ...request.Option) (*autoscaling.CreateLaunchConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateLaunchConfiguration cancelled", ctx.Err())
	default:
		return d.CreateLaunchConfiguration(in)
	}
}

func (d *AutoScalingDouble) CreateOrUpdateTags(i0 *autoscaling.CreateOrUpdateTagsInput) (r0 *autoscaling.CreateOrUpdateTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateOrUpdateTags", i0)
	r0, _ = returns[0].(*autoscaling.CreateOrUpdateTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) CreateOrUpdateTagsRequest(i0 *autoscaling.CreateOrUpdateTagsInput) (r0 *request.Request, r1 *autoscaling.CreateOrUpdateTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateOrUpdateTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.CreateOrUpdateTagsOutput)
	return
}

func (d *AutoScalingDouble) CreateOrUpdateTagsWithContext(i0 context.Context, i1 *autoscaling.CreateOrUpdateTagsInput, i2 ...request.Option) (r0 *autoscaling.CreateOrUpdateTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateOrUpdateTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.CreateOrUpdateTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeCreateOrUpdateTagsWithContext(ctx context.Context, in *autoscaling.CreateOrUpdateTagsInput, _ ...request.Option) (*autoscaling.CreateOrUpdateTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateOrUpdateTags cancelled", ctx.Err())
	default:
		return d.CreateOrUpdateTags(in)
	}
}

func (d *AutoScalingDouble) DeleteAutoScalingGroup(i0 *autoscaling.DeleteAutoScalingGroupInput) (r0 *autoscaling.DeleteAutoScalingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAutoScalingGroup", i0)
	r0, _ = returns[0].(*autoscaling.DeleteAutoScalingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) DeleteAutoScalingGroupRequest(i0 *autoscaling.DeleteAutoScalingGroupInput) (r0 *request.Request, r1 *autoscaling.DeleteAutoScalingGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAutoScalingGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.DeleteAutoScalingGroupOutput)
	return
}

func (d *AutoScalingDouble) DeleteAutoScalingGroupWithContext(i0 context.Context, i1 *autoscaling.DeleteAutoScalingGroupInput, i2 ...request.Option) (r0 *autoscaling.DeleteAutoScalingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAutoScalingGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.DeleteAutoScalingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeDeleteAutoScalingGroupWithContext(ctx context.Context, in *autoscaling.DeleteAutoScalingGroupInput, _ ...request.Option) (*autoscaling.DeleteAutoScalingGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteAutoScalingGroup cancelled", ctx.Err())
	default:
		return d.DeleteAutoScalingGroup(in)
	}
}

func (d *AutoScalingDouble) DeleteLaunchConfiguration(i0 *autoscaling.DeleteLaunchConfigurationInput) (r0 *autoscaling.DeleteLaunchConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLaunchConfiguration", i0)
	r0, _ = returns[0].(*autoscaling.DeleteLaunchConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) DeleteLaunchConfigurationRequest(i0 *autoscaling.DeleteLaunchConfigurationInput) (r0 *request.Request, r1 *autoscaling.DeleteLaunchConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLaunchConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.DeleteLaunchConfigurationOutput)
	return
}

func (d *AutoScalingDouble) DeleteLaunchConfigurationWithContext(i0 context.Context, i1 *autoscaling.DeleteLaunchConfigurationInput, i2 ...request.Option) (r0 *autoscaling.DeleteLaunchConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLaunchConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.DeleteLaunchConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeDeleteLaunchConfigurationWithContext(ctx context.Context, in *autoscaling.DeleteLaunchConfigurationInput, _ ...request.Option) (*autoscaling.DeleteLaunchConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteLaunchConfiguration cancelled", ctx.Err())
	default:
		return d.DeleteLaunchConfiguration(in)
	}
}

func (d *AutoScalingDouble) DeleteLifecycleHook(i0 *autoscaling.DeleteLifecycleHookInput) (r0 *autoscaling.DeleteLifecycleHookOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLifecycleHook", i0)
	r0, _ = returns[0].(*autoscaling.DeleteLifecycleHookOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) DeleteLifecycleHookRequest(i0 *autoscaling.DeleteLifecycleHookInput) (r0 *request.Request, r1 *autoscaling.DeleteLifecycleHookOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLifecycleHookRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.DeleteLifecycleHookOutput)
	return
}

func (d *AutoScalingDouble) DeleteLifecycleHookWithContext(i0 context.Context, i1 *autoscaling.DeleteLifecycleHookInput, i2 ...request.Option) (r0 *autoscaling.DeleteLifecycleHookOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLifecycleHookWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.DeleteLifecycleHookOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeDeleteLifecycleHookWithContext(ctx context.Context, in *autoscaling.DeleteLifecycleHookInput, _ ...request.Option) (*autoscaling.DeleteLifecycleHookOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteLifecycleHook cancelled", ctx.Err())
	default:
		return d.DeleteLifecycleHook(in)
	}
}

func (d *AutoScalingDouble) DeleteNotificationConfiguration(i0 *autoscaling.DeleteNotificationConfigurationInput) (r0 *autoscaling.DeleteNotificationConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNotificationConfiguration", i0)
	r0, _ = returns[0].(*autoscaling.DeleteNotificationConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) DeleteNotificationConfigurationRequest(i0 *autoscaling.DeleteNotificationConfigurationInput) (r0 *request.Request, r1 *autoscaling.DeleteNotificationConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNotificationConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.DeleteNotificationConfigurationOutput)
	return
}

func (d *AutoScalingDouble) DeleteNotificationConfigurationWithContext(i0 context.Context, i1 *autoscaling.DeleteNotificationConfigurationInput, i2 ...request.Option) (r0 *autoscaling.DeleteNotificationConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteNotificationConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.DeleteNotificationConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeDeleteNotificationConfigurationWithContext(ctx context.Context, in *autoscaling.DeleteNotificationConfigurationInput, _ ...request.Option) (*autoscaling.DeleteNotificationConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteNotificationConfiguration cancelled", ctx.Err())
	default:
		return d.DeleteNotificationConfiguration(in)
	}
}

func (d *AutoScalingDouble) DeletePolicy(i0 *autoscaling.DeletePolicyInput) (r0 *autoscaling.DeletePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePolicy", i0)
	r0, _ = returns[0].(*autoscaling.DeletePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) DeletePolicyRequest(i0 *autoscaling.DeletePolicyInput) (r0 *request.Request, r1 *autoscaling.DeletePolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.DeletePolicyOutput)
	return
}

func (d *AutoScalingDouble) DeletePolicyWithContext(i0 context.Context, i1 *autoscaling.DeletePolicyInput, i2 ...request.Option) (r0 *autoscaling.DeletePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.DeletePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeDeletePolicyWithContext(ctx context.Context, in *autoscaling.DeletePolicyInput, _ ...request.Option) (*autoscaling.DeletePolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeletePolicy cancelled", ctx.Err())
	default:
		return d.DeletePolicy(in)
	}
}

func (d *AutoScalingDouble) DeleteScheduledAction(i0 *autoscaling.DeleteScheduledActionInput) (r0 *autoscaling.DeleteScheduledActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteScheduledAction", i0)
	r0, _ = returns[0].(*autoscaling.DeleteScheduledActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) DeleteScheduledActionRequest(i0 *autoscaling.DeleteScheduledActionInput) (r0 *request.Request, r1 *autoscaling.DeleteScheduledActionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteScheduledActionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.DeleteScheduledActionOutput)
	return
}

func (d *AutoScalingDouble) DeleteScheduledActionWithContext(i0 context.Context, i1 *autoscaling.DeleteScheduledActionInput, i2 ...request.Option) (r0 *autoscaling.DeleteScheduledActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteScheduledActionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.DeleteScheduledActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeDeleteScheduledActionWithContext(ctx context.Context, in *autoscaling.DeleteScheduledActionInput, _ ...request.Option) (*autoscaling.DeleteScheduledActionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteScheduledAction cancelled", ctx.Err())
	default:
		return d.DeleteScheduledAction(in)
	}
}

func (d *AutoScalingDouble) DeleteTags(i0 *autoscaling.DeleteTagsInput) (r0 *autoscaling.DeleteTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTags", i0)
	r0, _ = returns[0].(*autoscaling.DeleteTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) DeleteTagsRequest(i0 *autoscaling.DeleteTagsInput) (r0 *request.Request, r1 *autoscaling.DeleteTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.DeleteTagsOutput)
	return
}

func (d *AutoScalingDouble) DeleteTagsWithContext(i0 context.Context, i1 *autoscaling.DeleteTagsInput, i2 ...request.Option) (r0 *autoscaling.DeleteTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.DeleteTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeDeleteTagsWithContext(ctx context.Context, in *autoscaling.DeleteTagsInput, _ ...request.Option) (*autoscaling.DeleteTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTags cancelled", ctx.Err())
	default:
		return d.DeleteTags(in)
	}
}

func (d *AutoScalingDouble) DescribeAccountLimits(i0 *autoscaling.DescribeAccountLimitsInput) (r0 *autoscaling.DescribeAccountLimitsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAccountLimits", i0)
	r0, _ = returns[0].(*autoscaling.DescribeAccountLimitsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) DescribeAccountLimitsRequest(i0 *autoscaling.DescribeAccountLimitsInput) (r0 *request.Request, r1 *autoscaling.DescribeAccountLimitsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAccountLimitsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.DescribeAccountLimitsOutput)
	return
}

func (d *AutoScalingDouble) DescribeAccountLimitsWithContext(i0 context.Context, i1 *autoscaling.DescribeAccountLimitsInput, i2 ...request.Option) (r0 *autoscaling.DescribeAccountLimitsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAccountLimitsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.DescribeAccountLimitsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeDescribeAccountLimitsWithContext(ctx context.Context, in *autoscaling.DescribeAccountLimitsInput, _ ...request.Option) (*autoscaling.DescribeAccountLimitsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAccountLimits cancelled", ctx.Err())
	default:
		return d.DescribeAccountLimits(in)
	}
}

func (d *AutoScalingDouble) DescribeAdjustmentTypes(i0 *autoscaling.DescribeAdjustmentTypesInput) (r0 *autoscaling.DescribeAdjustmentTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAdjustmentTypes", i0)
	r0, _ = returns[0].(*autoscaling.DescribeAdjustmentTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) DescribeAdjustmentTypesRequest(i0 *autoscaling.DescribeAdjustmentTypesInput) (r0 *request.Request, r1 *autoscaling.DescribeAdjustmentTypesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAdjustmentTypesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.DescribeAdjustmentTypesOutput)
	return
}

func (d *AutoScalingDouble) DescribeAdjustmentTypesWithContext(i0 context.Context, i1 *autoscaling.DescribeAdjustmentTypesInput, i2 ...request.Option) (r0 *autoscaling.DescribeAdjustmentTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAdjustmentTypesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.DescribeAdjustmentTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeDescribeAdjustmentTypesWithContext(ctx context.Context, in *autoscaling.DescribeAdjustmentTypesInput, _ ...request.Option) (*autoscaling.DescribeAdjustmentTypesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAdjustmentTypes cancelled", ctx.Err())
	default:
		return d.DescribeAdjustmentTypes(in)
	}
}

func (d *AutoScalingDouble) DescribeAutoScalingGroups(i0 *autoscaling.DescribeAutoScalingGroupsInput) (r0 *autoscaling.DescribeAutoScalingGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAutoScalingGroups", i0)
	r0, _ = returns[0].(*autoscaling.DescribeAutoScalingGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) DescribeAutoScalingGroupsPages(i0 *autoscaling.DescribeAutoScalingGroupsInput, i1 func(*autoscaling.DescribeAutoScalingGroupsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAutoScalingGroupsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AutoScalingDouble) fakeDescribeAutoScalingGroupsPages(in *autoscaling.DescribeAutoScalingGroupsInput, pager func(*autoscaling.DescribeAutoScalingGroupsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeAutoScalingGroups", paginators, in, pager)
}

func (d *AutoScalingDouble) DescribeAutoScalingGroupsPagesWithContext(i0 context.Context, i1 *autoscaling.DescribeAutoScalingGroupsInput, i2 func(*autoscaling.DescribeAutoScalingGroupsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAutoScalingGroupsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AutoScalingDouble) fakeDescribeAutoScalingGroupsPagesWithContext(ctx context.Context, in *autoscaling.DescribeAutoScalingGroupsInput, pager func(*autoscaling.DescribeAutoScalingGroupsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeAutoScalingGroups", paginators, ctx, in, pager, options...)
}

func (d *AutoScalingDouble) DescribeAutoScalingGroupsRequest(i0 *autoscaling.DescribeAutoScalingGroupsInput) (r0 *request.Request, r1 *autoscaling.DescribeAutoScalingGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAutoScalingGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.DescribeAutoScalingGroupsOutput)
	return
}

func (d *AutoScalingDouble) DescribeAutoScalingGroupsWithContext(i0 context.Context, i1 *autoscaling.DescribeAutoScalingGroupsInput, i2 ...request.Option) (r0 *autoscaling.DescribeAutoScalingGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAutoScalingGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.DescribeAutoScalingGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeDescribeAutoScalingGroupsWithContext(ctx context.Context, in *autoscaling.DescribeAutoScalingGroupsInput, _ ...request.Option) (*autoscaling.DescribeAutoScalingGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAutoScalingGroups cancelled", ctx.Err())
	default:
		return d.DescribeAutoScalingGroups(in)
	}
}

func (d *AutoScalingDouble) DescribeAutoScalingInstances(i0 *autoscaling.DescribeAutoScalingInstancesInput) (r0 *autoscaling.DescribeAutoScalingInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAutoScalingInstances", i0)
	r0, _ = returns[0].(*autoscaling.DescribeAutoScalingInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) DescribeAutoScalingInstancesPages(i0 *autoscaling.DescribeAutoScalingInstancesInput, i1 func(*autoscaling.DescribeAutoScalingInstancesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAutoScalingInstancesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AutoScalingDouble) fakeDescribeAutoScalingInstancesPages(in *autoscaling.DescribeAutoScalingInstancesInput, pager func(*autoscaling.DescribeAutoScalingInstancesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeAutoScalingInstances", paginators, in, pager)
}

func (d *AutoScalingDouble) DescribeAutoScalingInstancesPagesWithContext(i0 context.Context, i1 *autoscaling.DescribeAutoScalingInstancesInput, i2 func(*autoscaling.DescribeAutoScalingInstancesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAutoScalingInstancesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AutoScalingDouble) fakeDescribeAutoScalingInstancesPagesWithContext(ctx context.Context, in *autoscaling.DescribeAutoScalingInstancesInput, pager func(*autoscaling.DescribeAutoScalingInstancesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeAutoScalingInstances", paginators, ctx, in, pager, options...)
}

func (d *AutoScalingDouble) DescribeAutoScalingInstancesRequest(i0 *autoscaling.DescribeAutoScalingInstancesInput) (r0 *request.Request, r1 *autoscaling.DescribeAutoScalingInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAutoScalingInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.DescribeAutoScalingInstancesOutput)
	return
}

func (d *AutoScalingDouble) DescribeAutoScalingInstancesWithContext(i0 context.Context, i1 *autoscaling.DescribeAutoScalingInstancesInput, i2 ...request.Option) (r0 *autoscaling.DescribeAutoScalingInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAutoScalingInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.DescribeAutoScalingInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeDescribeAutoScalingInstancesWithContext(ctx context.Context, in *autoscaling.DescribeAutoScalingInstancesInput, _ ...request.Option) (*autoscaling.DescribeAutoScalingInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAutoScalingInstances cancelled", ctx.Err())
	default:
		return d.DescribeAutoScalingInstances(in)
	}
}

func (d *AutoScalingDouble) DescribeAutoScalingNotificationTypes(i0 *autoscaling.DescribeAutoScalingNotificationTypesInput) (r0 *autoscaling.DescribeAutoScalingNotificationTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAutoScalingNotificationTypes", i0)
	r0, _ = returns[0].(*autoscaling.DescribeAutoScalingNotificationTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) DescribeAutoScalingNotificationTypesRequest(i0 *autoscaling.DescribeAutoScalingNotificationTypesInput) (r0 *request.Request, r1 *autoscaling.DescribeAutoScalingNotificationTypesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAutoScalingNotificationTypesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.DescribeAutoScalingNotificationTypesOutput)
	return
}

func (d *AutoScalingDouble) DescribeAutoScalingNotificationTypesWithContext(i0 context.Context, i1 *autoscaling.DescribeAutoScalingNotificationTypesInput, i2 ...request.Option) (r0 *autoscaling.DescribeAutoScalingNotificationTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAutoScalingNotificationTypesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.DescribeAutoScalingNotificationTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeDescribeAutoScalingNotificationTypesWithContext(ctx context.Context, in *autoscaling.DescribeAutoScalingNotificationTypesInput, _ ...request.Option) (*autoscaling.DescribeAutoScalingNotificationTypesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAutoScalingNotificationTypes cancelled", ctx.Err())
	default:
		return d.DescribeAutoScalingNotificationTypes(in)
	}
}

func (d *AutoScalingDouble) DescribeLaunchConfigurations(i0 *autoscaling.DescribeLaunchConfigurationsInput) (r0 *autoscaling.DescribeLaunchConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLaunchConfigurations", i0)
	r0, _ = returns[0].(*autoscaling.DescribeLaunchConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) DescribeLaunchConfigurationsPages(i0 *autoscaling.DescribeLaunchConfigurationsInput, i1 func(*autoscaling.DescribeLaunchConfigurationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLaunchConfigurationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AutoScalingDouble) fakeDescribeLaunchConfigurationsPages(in *autoscaling.DescribeLaunchConfigurationsInput, pager func(*autoscaling.DescribeLaunchConfigurationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeLaunchConfigurations", paginators, in, pager)
}

func (d *AutoScalingDouble) DescribeLaunchConfigurationsPagesWithContext(i0 context.Context, i1 *autoscaling.DescribeLaunchConfigurationsInput, i2 func(*autoscaling.DescribeLaunchConfigurationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLaunchConfigurationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AutoScalingDouble) fakeDescribeLaunchConfigurationsPagesWithContext(ctx context.Context, in *autoscaling.DescribeLaunchConfigurationsInput, pager func(*autoscaling.DescribeLaunchConfigurationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeLaunchConfigurations", paginators, ctx, in, pager, options...)
}

func (d *AutoScalingDouble) DescribeLaunchConfigurationsRequest(i0 *autoscaling.DescribeLaunchConfigurationsInput) (r0 *request.Request, r1 *autoscaling.DescribeLaunchConfigurationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLaunchConfigurationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.DescribeLaunchConfigurationsOutput)
	return
}

func (d *AutoScalingDouble) DescribeLaunchConfigurationsWithContext(i0 context.Context, i1 *autoscaling.DescribeLaunchConfigurationsInput, i2 ...request.Option) (r0 *autoscaling.DescribeLaunchConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLaunchConfigurationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.DescribeLaunchConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeDescribeLaunchConfigurationsWithContext(ctx context.Context, in *autoscaling.DescribeLaunchConfigurationsInput, _ ...request.Option) (*autoscaling.DescribeLaunchConfigurationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeLaunchConfigurations cancelled", ctx.Err())
	default:
		return d.DescribeLaunchConfigurations(in)
	}
}

func (d *AutoScalingDouble) DescribeLifecycleHookTypes(i0 *autoscaling.DescribeLifecycleHookTypesInput) (r0 *autoscaling.DescribeLifecycleHookTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLifecycleHookTypes", i0)
	r0, _ = returns[0].(*autoscaling.DescribeLifecycleHookTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) DescribeLifecycleHookTypesRequest(i0 *autoscaling.DescribeLifecycleHookTypesInput) (r0 *request.Request, r1 *autoscaling.DescribeLifecycleHookTypesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLifecycleHookTypesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.DescribeLifecycleHookTypesOutput)
	return
}

func (d *AutoScalingDouble) DescribeLifecycleHookTypesWithContext(i0 context.Context, i1 *autoscaling.DescribeLifecycleHookTypesInput, i2 ...request.Option) (r0 *autoscaling.DescribeLifecycleHookTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLifecycleHookTypesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.DescribeLifecycleHookTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeDescribeLifecycleHookTypesWithContext(ctx context.Context, in *autoscaling.DescribeLifecycleHookTypesInput, _ ...request.Option) (*autoscaling.DescribeLifecycleHookTypesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeLifecycleHookTypes cancelled", ctx.Err())
	default:
		return d.DescribeLifecycleHookTypes(in)
	}
}

func (d *AutoScalingDouble) DescribeLifecycleHooks(i0 *autoscaling.DescribeLifecycleHooksInput) (r0 *autoscaling.DescribeLifecycleHooksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLifecycleHooks", i0)
	r0, _ = returns[0].(*autoscaling.DescribeLifecycleHooksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) DescribeLifecycleHooksRequest(i0 *autoscaling.DescribeLifecycleHooksInput) (r0 *request.Request, r1 *autoscaling.DescribeLifecycleHooksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLifecycleHooksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.DescribeLifecycleHooksOutput)
	return
}

func (d *AutoScalingDouble) DescribeLifecycleHooksWithContext(i0 context.Context, i1 *autoscaling.DescribeLifecycleHooksInput, i2 ...request.Option) (r0 *autoscaling.DescribeLifecycleHooksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLifecycleHooksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.DescribeLifecycleHooksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeDescribeLifecycleHooksWithContext(ctx context.Context, in *autoscaling.DescribeLifecycleHooksInput, _ ...request.Option) (*autoscaling.DescribeLifecycleHooksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeLifecycleHooks cancelled", ctx.Err())
	default:
		return d.DescribeLifecycleHooks(in)
	}
}

func (d *AutoScalingDouble) DescribeLoadBalancerTargetGroups(i0 *autoscaling.DescribeLoadBalancerTargetGroupsInput) (r0 *autoscaling.DescribeLoadBalancerTargetGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoadBalancerTargetGroups", i0)
	r0, _ = returns[0].(*autoscaling.DescribeLoadBalancerTargetGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) DescribeLoadBalancerTargetGroupsRequest(i0 *autoscaling.DescribeLoadBalancerTargetGroupsInput) (r0 *request.Request, r1 *autoscaling.DescribeLoadBalancerTargetGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoadBalancerTargetGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.DescribeLoadBalancerTargetGroupsOutput)
	return
}

func (d *AutoScalingDouble) DescribeLoadBalancerTargetGroupsWithContext(i0 context.Context, i1 *autoscaling.DescribeLoadBalancerTargetGroupsInput, i2 ...request.Option) (r0 *autoscaling.DescribeLoadBalancerTargetGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoadBalancerTargetGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.DescribeLoadBalancerTargetGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeDescribeLoadBalancerTargetGroupsWithContext(ctx context.Context, in *autoscaling.DescribeLoadBalancerTargetGroupsInput, _ ...request.Option) (*autoscaling.DescribeLoadBalancerTargetGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeLoadBalancerTargetGroups cancelled", ctx.Err())
	default:
		return d.DescribeLoadBalancerTargetGroups(in)
	}
}

func (d *AutoScalingDouble) DescribeLoadBalancers(i0 *autoscaling.DescribeLoadBalancersInput) (r0 *autoscaling.DescribeLoadBalancersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoadBalancers", i0)
	r0, _ = returns[0].(*autoscaling.DescribeLoadBalancersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) DescribeLoadBalancersRequest(i0 *autoscaling.DescribeLoadBalancersInput) (r0 *request.Request, r1 *autoscaling.DescribeLoadBalancersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoadBalancersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.DescribeLoadBalancersOutput)
	return
}

func (d *AutoScalingDouble) DescribeLoadBalancersWithContext(i0 context.Context, i1 *autoscaling.DescribeLoadBalancersInput, i2 ...request.Option) (r0 *autoscaling.DescribeLoadBalancersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoadBalancersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.DescribeLoadBalancersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeDescribeLoadBalancersWithContext(ctx context.Context, in *autoscaling.DescribeLoadBalancersInput, _ ...request.Option) (*autoscaling.DescribeLoadBalancersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeLoadBalancers cancelled", ctx.Err())
	default:
		return d.DescribeLoadBalancers(in)
	}
}

func (d *AutoScalingDouble) DescribeMetricCollectionTypes(i0 *autoscaling.DescribeMetricCollectionTypesInput) (r0 *autoscaling.DescribeMetricCollectionTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMetricCollectionTypes", i0)
	r0, _ = returns[0].(*autoscaling.DescribeMetricCollectionTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) DescribeMetricCollectionTypesRequest(i0 *autoscaling.DescribeMetricCollectionTypesInput) (r0 *request.Request, r1 *autoscaling.DescribeMetricCollectionTypesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMetricCollectionTypesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.DescribeMetricCollectionTypesOutput)
	return
}

func (d *AutoScalingDouble) DescribeMetricCollectionTypesWithContext(i0 context.Context, i1 *autoscaling.DescribeMetricCollectionTypesInput, i2 ...request.Option) (r0 *autoscaling.DescribeMetricCollectionTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMetricCollectionTypesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.DescribeMetricCollectionTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeDescribeMetricCollectionTypesWithContext(ctx context.Context, in *autoscaling.DescribeMetricCollectionTypesInput, _ ...request.Option) (*autoscaling.DescribeMetricCollectionTypesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeMetricCollectionTypes cancelled", ctx.Err())
	default:
		return d.DescribeMetricCollectionTypes(in)
	}
}

func (d *AutoScalingDouble) DescribeNotificationConfigurations(i0 *autoscaling.DescribeNotificationConfigurationsInput) (r0 *autoscaling.DescribeNotificationConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNotificationConfigurations", i0)
	r0, _ = returns[0].(*autoscaling.DescribeNotificationConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) DescribeNotificationConfigurationsPages(i0 *autoscaling.DescribeNotificationConfigurationsInput, i1 func(*autoscaling.DescribeNotificationConfigurationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNotificationConfigurationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AutoScalingDouble) fakeDescribeNotificationConfigurationsPages(in *autoscaling.DescribeNotificationConfigurationsInput, pager func(*autoscaling.DescribeNotificationConfigurationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeNotificationConfigurations", paginators, in, pager)
}

func (d *AutoScalingDouble) DescribeNotificationConfigurationsPagesWithContext(i0 context.Context, i1 *autoscaling.DescribeNotificationConfigurationsInput, i2 func(*autoscaling.DescribeNotificationConfigurationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNotificationConfigurationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AutoScalingDouble) fakeDescribeNotificationConfigurationsPagesWithContext(ctx context.Context, in *autoscaling.DescribeNotificationConfigurationsInput, pager func(*autoscaling.DescribeNotificationConfigurationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeNotificationConfigurations", paginators, ctx, in, pager, options...)
}

func (d *AutoScalingDouble) DescribeNotificationConfigurationsRequest(i0 *autoscaling.DescribeNotificationConfigurationsInput) (r0 *request.Request, r1 *autoscaling.DescribeNotificationConfigurationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNotificationConfigurationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.DescribeNotificationConfigurationsOutput)
	return
}

func (d *AutoScalingDouble) DescribeNotificationConfigurationsWithContext(i0 context.Context, i1 *autoscaling.DescribeNotificationConfigurationsInput, i2 ...request.Option) (r0 *autoscaling.DescribeNotificationConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNotificationConfigurationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.DescribeNotificationConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeDescribeNotificationConfigurationsWithContext(ctx context.Context, in *autoscaling.DescribeNotificationConfigurationsInput, _ ...request.Option) (*autoscaling.DescribeNotificationConfigurationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeNotificationConfigurations cancelled", ctx.Err())
	default:
		return d.DescribeNotificationConfigurations(in)
	}
}

func (d *AutoScalingDouble) DescribePolicies(i0 *autoscaling.DescribePoliciesInput) (r0 *autoscaling.DescribePoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePolicies", i0)
	r0, _ = returns[0].(*autoscaling.DescribePoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) DescribePoliciesPages(i0 *autoscaling.DescribePoliciesInput, i1 func(*autoscaling.DescribePoliciesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePoliciesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AutoScalingDouble) fakeDescribePoliciesPages(in *autoscaling.DescribePoliciesInput, pager func(*autoscaling.DescribePoliciesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribePolicies", paginators, in, pager)
}

func (d *AutoScalingDouble) DescribePoliciesPagesWithContext(i0 context.Context, i1 *autoscaling.DescribePoliciesInput, i2 func(*autoscaling.DescribePoliciesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePoliciesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AutoScalingDouble) fakeDescribePoliciesPagesWithContext(ctx context.Context, in *autoscaling.DescribePoliciesInput, pager func(*autoscaling.DescribePoliciesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribePolicies", paginators, ctx, in, pager, options...)
}

func (d *AutoScalingDouble) DescribePoliciesRequest(i0 *autoscaling.DescribePoliciesInput) (r0 *request.Request, r1 *autoscaling.DescribePoliciesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePoliciesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.DescribePoliciesOutput)
	return
}

func (d *AutoScalingDouble) DescribePoliciesWithContext(i0 context.Context, i1 *autoscaling.DescribePoliciesInput, i2 ...request.Option) (r0 *autoscaling.DescribePoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePoliciesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.DescribePoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeDescribePoliciesWithContext(ctx context.Context, in *autoscaling.DescribePoliciesInput, _ ...request.Option) (*autoscaling.DescribePoliciesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribePolicies cancelled", ctx.Err())
	default:
		return d.DescribePolicies(in)
	}
}

func (d *AutoScalingDouble) DescribeScalingActivities(i0 *autoscaling.DescribeScalingActivitiesInput) (r0 *autoscaling.DescribeScalingActivitiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScalingActivities", i0)
	r0, _ = returns[0].(*autoscaling.DescribeScalingActivitiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) DescribeScalingActivitiesPages(i0 *autoscaling.DescribeScalingActivitiesInput, i1 func(*autoscaling.DescribeScalingActivitiesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScalingActivitiesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AutoScalingDouble) fakeDescribeScalingActivitiesPages(in *autoscaling.DescribeScalingActivitiesInput, pager func(*autoscaling.DescribeScalingActivitiesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeScalingActivities", paginators, in, pager)
}

func (d *AutoScalingDouble) DescribeScalingActivitiesPagesWithContext(i0 context.Context, i1 *autoscaling.DescribeScalingActivitiesInput, i2 func(*autoscaling.DescribeScalingActivitiesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScalingActivitiesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AutoScalingDouble) fakeDescribeScalingActivitiesPagesWithContext(ctx context.Context, in *autoscaling.DescribeScalingActivitiesInput, pager func(*autoscaling.DescribeScalingActivitiesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeScalingActivities", paginators, ctx, in, pager, options...)
}

func (d *AutoScalingDouble) DescribeScalingActivitiesRequest(i0 *autoscaling.DescribeScalingActivitiesInput) (r0 *request.Request, r1 *autoscaling.DescribeScalingActivitiesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScalingActivitiesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.DescribeScalingActivitiesOutput)
	return
}

func (d *AutoScalingDouble) DescribeScalingActivitiesWithContext(i0 context.Context, i1 *autoscaling.DescribeScalingActivitiesInput, i2 ...request.Option) (r0 *autoscaling.DescribeScalingActivitiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScalingActivitiesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.DescribeScalingActivitiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeDescribeScalingActivitiesWithContext(ctx context.Context, in *autoscaling.DescribeScalingActivitiesInput, _ ...request.Option) (*autoscaling.DescribeScalingActivitiesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeScalingActivities cancelled", ctx.Err())
	default:
		return d.DescribeScalingActivities(in)
	}
}

func (d *AutoScalingDouble) DescribeScalingProcessTypes(i0 *autoscaling.DescribeScalingProcessTypesInput) (r0 *autoscaling.DescribeScalingProcessTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScalingProcessTypes", i0)
	r0, _ = returns[0].(*autoscaling.DescribeScalingProcessTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) DescribeScalingProcessTypesRequest(i0 *autoscaling.DescribeScalingProcessTypesInput) (r0 *request.Request, r1 *autoscaling.DescribeScalingProcessTypesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScalingProcessTypesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.DescribeScalingProcessTypesOutput)
	return
}

func (d *AutoScalingDouble) DescribeScalingProcessTypesWithContext(i0 context.Context, i1 *autoscaling.DescribeScalingProcessTypesInput, i2 ...request.Option) (r0 *autoscaling.DescribeScalingProcessTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScalingProcessTypesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.DescribeScalingProcessTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeDescribeScalingProcessTypesWithContext(ctx context.Context, in *autoscaling.DescribeScalingProcessTypesInput, _ ...request.Option) (*autoscaling.DescribeScalingProcessTypesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeScalingProcessTypes cancelled", ctx.Err())
	default:
		return d.DescribeScalingProcessTypes(in)
	}
}

func (d *AutoScalingDouble) DescribeScheduledActions(i0 *autoscaling.DescribeScheduledActionsInput) (r0 *autoscaling.DescribeScheduledActionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScheduledActions", i0)
	r0, _ = returns[0].(*autoscaling.DescribeScheduledActionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) DescribeScheduledActionsPages(i0 *autoscaling.DescribeScheduledActionsInput, i1 func(*autoscaling.DescribeScheduledActionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScheduledActionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AutoScalingDouble) fakeDescribeScheduledActionsPages(in *autoscaling.DescribeScheduledActionsInput, pager func(*autoscaling.DescribeScheduledActionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeScheduledActions", paginators, in, pager)
}

func (d *AutoScalingDouble) DescribeScheduledActionsPagesWithContext(i0 context.Context, i1 *autoscaling.DescribeScheduledActionsInput, i2 func(*autoscaling.DescribeScheduledActionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScheduledActionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AutoScalingDouble) fakeDescribeScheduledActionsPagesWithContext(ctx context.Context, in *autoscaling.DescribeScheduledActionsInput, pager func(*autoscaling.DescribeScheduledActionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeScheduledActions", paginators, ctx, in, pager, options...)
}

func (d *AutoScalingDouble) DescribeScheduledActionsRequest(i0 *autoscaling.DescribeScheduledActionsInput) (r0 *request.Request, r1 *autoscaling.DescribeScheduledActionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScheduledActionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.DescribeScheduledActionsOutput)
	return
}

func (d *AutoScalingDouble) DescribeScheduledActionsWithContext(i0 context.Context, i1 *autoscaling.DescribeScheduledActionsInput, i2 ...request.Option) (r0 *autoscaling.DescribeScheduledActionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScheduledActionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.DescribeScheduledActionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeDescribeScheduledActionsWithContext(ctx context.Context, in *autoscaling.DescribeScheduledActionsInput, _ ...request.Option) (*autoscaling.DescribeScheduledActionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeScheduledActions cancelled", ctx.Err())
	default:
		return d.DescribeScheduledActions(in)
	}
}

func (d *AutoScalingDouble) DescribeTags(i0 *autoscaling.DescribeTagsInput) (r0 *autoscaling.DescribeTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTags", i0)
	r0, _ = returns[0].(*autoscaling.DescribeTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) DescribeTagsPages(i0 *autoscaling.DescribeTagsInput, i1 func(*autoscaling.DescribeTagsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTagsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *AutoScalingDouble) fakeDescribeTagsPages(in *autoscaling.DescribeTagsInput, pager func(*autoscaling.DescribeTagsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeTags", paginators, in, pager)
}

func (d *AutoScalingDouble) DescribeTagsPagesWithContext(i0 context.Context, i1 *autoscaling.DescribeTagsInput, i2 func(*autoscaling.DescribeTagsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTagsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *AutoScalingDouble) fakeDescribeTagsPagesWithContext(ctx context.Context, in *autoscaling.DescribeTagsInput, pager func(*autoscaling.DescribeTagsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeTags", paginators, ctx, in, pager, options...)
}

func (d *AutoScalingDouble) DescribeTagsRequest(i0 *autoscaling.DescribeTagsInput) (r0 *request.Request, r1 *autoscaling.DescribeTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.DescribeTagsOutput)
	return
}

func (d *AutoScalingDouble) DescribeTagsWithContext(i0 context.Context, i1 *autoscaling.DescribeTagsInput, i2 ...request.Option) (r0 *autoscaling.DescribeTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.DescribeTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeDescribeTagsWithContext(ctx context.Context, in *autoscaling.DescribeTagsInput, _ ...request.Option) (*autoscaling.DescribeTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTags cancelled", ctx.Err())
	default:
		return d.DescribeTags(in)
	}
}

func (d *AutoScalingDouble) DescribeTerminationPolicyTypes(i0 *autoscaling.DescribeTerminationPolicyTypesInput) (r0 *autoscaling.DescribeTerminationPolicyTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTerminationPolicyTypes", i0)
	r0, _ = returns[0].(*autoscaling.DescribeTerminationPolicyTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) DescribeTerminationPolicyTypesRequest(i0 *autoscaling.DescribeTerminationPolicyTypesInput) (r0 *request.Request, r1 *autoscaling.DescribeTerminationPolicyTypesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTerminationPolicyTypesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.DescribeTerminationPolicyTypesOutput)
	return
}

func (d *AutoScalingDouble) DescribeTerminationPolicyTypesWithContext(i0 context.Context, i1 *autoscaling.DescribeTerminationPolicyTypesInput, i2 ...request.Option) (r0 *autoscaling.DescribeTerminationPolicyTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTerminationPolicyTypesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.DescribeTerminationPolicyTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeDescribeTerminationPolicyTypesWithContext(ctx context.Context, in *autoscaling.DescribeTerminationPolicyTypesInput, _ ...request.Option) (*autoscaling.DescribeTerminationPolicyTypesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTerminationPolicyTypes cancelled", ctx.Err())
	default:
		return d.DescribeTerminationPolicyTypes(in)
	}
}

func (d *AutoScalingDouble) DetachInstances(i0 *autoscaling.DetachInstancesInput) (r0 *autoscaling.DetachInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachInstances", i0)
	r0, _ = returns[0].(*autoscaling.DetachInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) DetachInstancesRequest(i0 *autoscaling.DetachInstancesInput) (r0 *request.Request, r1 *autoscaling.DetachInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.DetachInstancesOutput)
	return
}

func (d *AutoScalingDouble) DetachInstancesWithContext(i0 context.Context, i1 *autoscaling.DetachInstancesInput, i2 ...request.Option) (r0 *autoscaling.DetachInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.DetachInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeDetachInstancesWithContext(ctx context.Context, in *autoscaling.DetachInstancesInput, _ ...request.Option) (*autoscaling.DetachInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DetachInstances cancelled", ctx.Err())
	default:
		return d.DetachInstances(in)
	}
}

func (d *AutoScalingDouble) DetachLoadBalancerTargetGroups(i0 *autoscaling.DetachLoadBalancerTargetGroupsInput) (r0 *autoscaling.DetachLoadBalancerTargetGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachLoadBalancerTargetGroups", i0)
	r0, _ = returns[0].(*autoscaling.DetachLoadBalancerTargetGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) DetachLoadBalancerTargetGroupsRequest(i0 *autoscaling.DetachLoadBalancerTargetGroupsInput) (r0 *request.Request, r1 *autoscaling.DetachLoadBalancerTargetGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachLoadBalancerTargetGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.DetachLoadBalancerTargetGroupsOutput)
	return
}

func (d *AutoScalingDouble) DetachLoadBalancerTargetGroupsWithContext(i0 context.Context, i1 *autoscaling.DetachLoadBalancerTargetGroupsInput, i2 ...request.Option) (r0 *autoscaling.DetachLoadBalancerTargetGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachLoadBalancerTargetGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.DetachLoadBalancerTargetGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeDetachLoadBalancerTargetGroupsWithContext(ctx context.Context, in *autoscaling.DetachLoadBalancerTargetGroupsInput, _ ...request.Option) (*autoscaling.DetachLoadBalancerTargetGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DetachLoadBalancerTargetGroups cancelled", ctx.Err())
	default:
		return d.DetachLoadBalancerTargetGroups(in)
	}
}

func (d *AutoScalingDouble) DetachLoadBalancers(i0 *autoscaling.DetachLoadBalancersInput) (r0 *autoscaling.DetachLoadBalancersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachLoadBalancers", i0)
	r0, _ = returns[0].(*autoscaling.DetachLoadBalancersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) DetachLoadBalancersRequest(i0 *autoscaling.DetachLoadBalancersInput) (r0 *request.Request, r1 *autoscaling.DetachLoadBalancersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachLoadBalancersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.DetachLoadBalancersOutput)
	return
}

func (d *AutoScalingDouble) DetachLoadBalancersWithContext(i0 context.Context, i1 *autoscaling.DetachLoadBalancersInput, i2 ...request.Option) (r0 *autoscaling.DetachLoadBalancersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachLoadBalancersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.DetachLoadBalancersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeDetachLoadBalancersWithContext(ctx context.Context, in *autoscaling.DetachLoadBalancersInput, _ ...request.Option) (*autoscaling.DetachLoadBalancersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DetachLoadBalancers cancelled", ctx.Err())
	default:
		return d.DetachLoadBalancers(in)
	}
}

func (d *AutoScalingDouble) DisableMetricsCollection(i0 *autoscaling.DisableMetricsCollectionInput) (r0 *autoscaling.DisableMetricsCollectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableMetricsCollection", i0)
	r0, _ = returns[0].(*autoscaling.DisableMetricsCollectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) DisableMetricsCollectionRequest(i0 *autoscaling.DisableMetricsCollectionInput) (r0 *request.Request, r1 *autoscaling.DisableMetricsCollectionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableMetricsCollectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.DisableMetricsCollectionOutput)
	return
}

func (d *AutoScalingDouble) DisableMetricsCollectionWithContext(i0 context.Context, i1 *autoscaling.DisableMetricsCollectionInput, i2 ...request.Option) (r0 *autoscaling.DisableMetricsCollectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableMetricsCollectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.DisableMetricsCollectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeDisableMetricsCollectionWithContext(ctx context.Context, in *autoscaling.DisableMetricsCollectionInput, _ ...request.Option) (*autoscaling.DisableMetricsCollectionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisableMetricsCollection cancelled", ctx.Err())
	default:
		return d.DisableMetricsCollection(in)
	}
}

func (d *AutoScalingDouble) EnableMetricsCollection(i0 *autoscaling.EnableMetricsCollectionInput) (r0 *autoscaling.EnableMetricsCollectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableMetricsCollection", i0)
	r0, _ = returns[0].(*autoscaling.EnableMetricsCollectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) EnableMetricsCollectionRequest(i0 *autoscaling.EnableMetricsCollectionInput) (r0 *request.Request, r1 *autoscaling.EnableMetricsCollectionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableMetricsCollectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.EnableMetricsCollectionOutput)
	return
}

func (d *AutoScalingDouble) EnableMetricsCollectionWithContext(i0 context.Context, i1 *autoscaling.EnableMetricsCollectionInput, i2 ...request.Option) (r0 *autoscaling.EnableMetricsCollectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableMetricsCollectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.EnableMetricsCollectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeEnableMetricsCollectionWithContext(ctx context.Context, in *autoscaling.EnableMetricsCollectionInput, _ ...request.Option) (*autoscaling.EnableMetricsCollectionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "EnableMetricsCollection cancelled", ctx.Err())
	default:
		return d.EnableMetricsCollection(in)
	}
}

func (d *AutoScalingDouble) EnterStandby(i0 *autoscaling.EnterStandbyInput) (r0 *autoscaling.EnterStandbyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnterStandby", i0)
	r0, _ = returns[0].(*autoscaling.EnterStandbyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) EnterStandbyRequest(i0 *autoscaling.EnterStandbyInput) (r0 *request.Request, r1 *autoscaling.EnterStandbyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnterStandbyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.EnterStandbyOutput)
	return
}

func (d *AutoScalingDouble) EnterStandbyWithContext(i0 context.Context, i1 *autoscaling.EnterStandbyInput, i2 ...request.Option) (r0 *autoscaling.EnterStandbyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnterStandbyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.EnterStandbyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeEnterStandbyWithContext(ctx context.Context, in *autoscaling.EnterStandbyInput, _ ...request.Option) (*autoscaling.EnterStandbyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "EnterStandby cancelled", ctx.Err())
	default:
		return d.EnterStandby(in)
	}
}

func (d *AutoScalingDouble) ExecutePolicy(i0 *autoscaling.ExecutePolicyInput) (r0 *autoscaling.ExecutePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExecutePolicy", i0)
	r0, _ = returns[0].(*autoscaling.ExecutePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) ExecutePolicyRequest(i0 *autoscaling.ExecutePolicyInput) (r0 *request.Request, r1 *autoscaling.ExecutePolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExecutePolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.ExecutePolicyOutput)
	return
}

func (d *AutoScalingDouble) ExecutePolicyWithContext(i0 context.Context, i1 *autoscaling.ExecutePolicyInput, i2 ...request.Option) (r0 *autoscaling.ExecutePolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExecutePolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.ExecutePolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeExecutePolicyWithContext(ctx context.Context, in *autoscaling.ExecutePolicyInput, _ ...request.Option) (*autoscaling.ExecutePolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ExecutePolicy cancelled", ctx.Err())
	default:
		return d.ExecutePolicy(in)
	}
}

func (d *AutoScalingDouble) ExitStandby(i0 *autoscaling.ExitStandbyInput) (r0 *autoscaling.ExitStandbyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExitStandby", i0)
	r0, _ = returns[0].(*autoscaling.ExitStandbyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) ExitStandbyRequest(i0 *autoscaling.ExitStandbyInput) (r0 *request.Request, r1 *autoscaling.ExitStandbyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExitStandbyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.ExitStandbyOutput)
	return
}

func (d *AutoScalingDouble) ExitStandbyWithContext(i0 context.Context, i1 *autoscaling.ExitStandbyInput, i2 ...request.Option) (r0 *autoscaling.ExitStandbyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExitStandbyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.ExitStandbyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeExitStandbyWithContext(ctx context.Context, in *autoscaling.ExitStandbyInput, _ ...request.Option) (*autoscaling.ExitStandbyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ExitStandby cancelled", ctx.Err())
	default:
		return d.ExitStandby(in)
	}
}

func (d *AutoScalingDouble) PutLifecycleHook(i0 *autoscaling.PutLifecycleHookInput) (r0 *autoscaling.PutLifecycleHookOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutLifecycleHook", i0)
	r0, _ = returns[0].(*autoscaling.PutLifecycleHookOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) PutLifecycleHookRequest(i0 *autoscaling.PutLifecycleHookInput) (r0 *request.Request, r1 *autoscaling.PutLifecycleHookOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutLifecycleHookRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.PutLifecycleHookOutput)
	return
}

func (d *AutoScalingDouble) PutLifecycleHookWithContext(i0 context.Context, i1 *autoscaling.PutLifecycleHookInput, i2 ...request.Option) (r0 *autoscaling.PutLifecycleHookOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutLifecycleHookWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.PutLifecycleHookOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakePutLifecycleHookWithContext(ctx context.Context, in *autoscaling.PutLifecycleHookInput, _ ...request.Option) (*autoscaling.PutLifecycleHookOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutLifecycleHook cancelled", ctx.Err())
	default:
		return d.PutLifecycleHook(in)
	}
}

func (d *AutoScalingDouble) PutNotificationConfiguration(i0 *autoscaling.PutNotificationConfigurationInput) (r0 *autoscaling.PutNotificationConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutNotificationConfiguration", i0)
	r0, _ = returns[0].(*autoscaling.PutNotificationConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) PutNotificationConfigurationRequest(i0 *autoscaling.PutNotificationConfigurationInput) (r0 *request.Request, r1 *autoscaling.PutNotificationConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutNotificationConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.PutNotificationConfigurationOutput)
	return
}

func (d *AutoScalingDouble) PutNotificationConfigurationWithContext(i0 context.Context, i1 *autoscaling.PutNotificationConfigurationInput, i2 ...request.Option) (r0 *autoscaling.PutNotificationConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutNotificationConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.PutNotificationConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakePutNotificationConfigurationWithContext(ctx context.Context, in *autoscaling.PutNotificationConfigurationInput, _ ...request.Option) (*autoscaling.PutNotificationConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutNotificationConfiguration cancelled", ctx.Err())
	default:
		return d.PutNotificationConfiguration(in)
	}
}

func (d *AutoScalingDouble) PutScalingPolicy(i0 *autoscaling.PutScalingPolicyInput) (r0 *autoscaling.PutScalingPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutScalingPolicy", i0)
	r0, _ = returns[0].(*autoscaling.PutScalingPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) PutScalingPolicyRequest(i0 *autoscaling.PutScalingPolicyInput) (r0 *request.Request, r1 *autoscaling.PutScalingPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutScalingPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.PutScalingPolicyOutput)
	return
}

func (d *AutoScalingDouble) PutScalingPolicyWithContext(i0 context.Context, i1 *autoscaling.PutScalingPolicyInput, i2 ...request.Option) (r0 *autoscaling.PutScalingPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutScalingPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.PutScalingPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakePutScalingPolicyWithContext(ctx context.Context, in *autoscaling.PutScalingPolicyInput, _ ...request.Option) (*autoscaling.PutScalingPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutScalingPolicy cancelled", ctx.Err())
	default:
		return d.PutScalingPolicy(in)
	}
}

func (d *AutoScalingDouble) PutScheduledUpdateGroupAction(i0 *autoscaling.PutScheduledUpdateGroupActionInput) (r0 *autoscaling.PutScheduledUpdateGroupActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutScheduledUpdateGroupAction", i0)
	r0, _ = returns[0].(*autoscaling.PutScheduledUpdateGroupActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) PutScheduledUpdateGroupActionRequest(i0 *autoscaling.PutScheduledUpdateGroupActionInput) (r0 *request.Request, r1 *autoscaling.PutScheduledUpdateGroupActionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutScheduledUpdateGroupActionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.PutScheduledUpdateGroupActionOutput)
	return
}

func (d *AutoScalingDouble) PutScheduledUpdateGroupActionWithContext(i0 context.Context, i1 *autoscaling.PutScheduledUpdateGroupActionInput, i2 ...request.Option) (r0 *autoscaling.PutScheduledUpdateGroupActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutScheduledUpdateGroupActionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.PutScheduledUpdateGroupActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakePutScheduledUpdateGroupActionWithContext(ctx context.Context, in *autoscaling.PutScheduledUpdateGroupActionInput, _ ...request.Option) (*autoscaling.PutScheduledUpdateGroupActionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutScheduledUpdateGroupAction cancelled", ctx.Err())
	default:
		return d.PutScheduledUpdateGroupAction(in)
	}
}

func (d *AutoScalingDouble) RecordLifecycleActionHeartbeat(i0 *autoscaling.RecordLifecycleActionHeartbeatInput) (r0 *autoscaling.RecordLifecycleActionHeartbeatOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RecordLifecycleActionHeartbeat", i0)
	r0, _ = returns[0].(*autoscaling.RecordLifecycleActionHeartbeatOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) RecordLifecycleActionHeartbeatRequest(i0 *autoscaling.RecordLifecycleActionHeartbeatInput) (r0 *request.Request, r1 *autoscaling.RecordLifecycleActionHeartbeatOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RecordLifecycleActionHeartbeatRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.RecordLifecycleActionHeartbeatOutput)
	return
}

func (d *AutoScalingDouble) RecordLifecycleActionHeartbeatWithContext(i0 context.Context, i1 *autoscaling.RecordLifecycleActionHeartbeatInput, i2 ...request.Option) (r0 *autoscaling.RecordLifecycleActionHeartbeatOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RecordLifecycleActionHeartbeatWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.RecordLifecycleActionHeartbeatOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeRecordLifecycleActionHeartbeatWithContext(ctx context.Context, in *autoscaling.RecordLifecycleActionHeartbeatInput, _ ...request.Option) (*autoscaling.RecordLifecycleActionHeartbeatOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RecordLifecycleActionHeartbeat cancelled", ctx.Err())
	default:
		return d.RecordLifecycleActionHeartbeat(in)
	}
}

func (d *AutoScalingDouble) ResumeProcesses(i0 *autoscaling.ScalingProcessQuery) (r0 *autoscaling.ResumeProcessesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResumeProcesses", i0)
	r0, _ = returns[0].(*autoscaling.ResumeProcessesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) ResumeProcessesRequest(i0 *autoscaling.ScalingProcessQuery) (r0 *request.Request, r1 *autoscaling.ResumeProcessesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResumeProcessesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.ResumeProcessesOutput)
	return
}

func (d *AutoScalingDouble) ResumeProcessesWithContext(i0 context.Context, i1 *autoscaling.ScalingProcessQuery, i2 ...request.Option) (r0 *autoscaling.ResumeProcessesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResumeProcessesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.ResumeProcessesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeResumeProcessesWithContext(ctx context.Context, in *autoscaling.ScalingProcessQuery, _ ...request.Option) (*autoscaling.ResumeProcessesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ResumeProcesses cancelled", ctx.Err())
	default:
		return d.ResumeProcesses(in)
	}
}

func (d *AutoScalingDouble) SetDesiredCapacity(i0 *autoscaling.SetDesiredCapacityInput) (r0 *autoscaling.SetDesiredCapacityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetDesiredCapacity", i0)
	r0, _ = returns[0].(*autoscaling.SetDesiredCapacityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) SetDesiredCapacityRequest(i0 *autoscaling.SetDesiredCapacityInput) (r0 *request.Request, r1 *autoscaling.SetDesiredCapacityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetDesiredCapacityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.SetDesiredCapacityOutput)
	return
}

func (d *AutoScalingDouble) SetDesiredCapacityWithContext(i0 context.Context, i1 *autoscaling.SetDesiredCapacityInput, i2 ...request.Option) (r0 *autoscaling.SetDesiredCapacityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetDesiredCapacityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.SetDesiredCapacityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeSetDesiredCapacityWithContext(ctx context.Context, in *autoscaling.SetDesiredCapacityInput, _ ...request.Option) (*autoscaling.SetDesiredCapacityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetDesiredCapacity cancelled", ctx.Err())
	default:
		return d.SetDesiredCapacity(in)
	}
}

func (d *AutoScalingDouble) SetInstanceHealth(i0 *autoscaling.SetInstanceHealthInput) (r0 *autoscaling.SetInstanceHealthOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetInstanceHealth", i0)
	r0, _ = returns[0].(*autoscaling.SetInstanceHealthOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) SetInstanceHealthRequest(i0 *autoscaling.SetInstanceHealthInput) (r0 *request.Request, r1 *autoscaling.SetInstanceHealthOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetInstanceHealthRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.SetInstanceHealthOutput)
	return
}

func (d *AutoScalingDouble) SetInstanceHealthWithContext(i0 context.Context, i1 *autoscaling.SetInstanceHealthInput, i2 ...request.Option) (r0 *autoscaling.SetInstanceHealthOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetInstanceHealthWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.SetInstanceHealthOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeSetInstanceHealthWithContext(ctx context.Context, in *autoscaling.SetInstanceHealthInput, _ ...request.Option) (*autoscaling.SetInstanceHealthOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetInstanceHealth cancelled", ctx.Err())
	default:
		return d.SetInstanceHealth(in)
	}
}

func (d *AutoScalingDouble) SetInstanceProtection(i0 *autoscaling.SetInstanceProtectionInput) (r0 *autoscaling.SetInstanceProtectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetInstanceProtection", i0)
	r0, _ = returns[0].(*autoscaling.SetInstanceProtectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) SetInstanceProtectionRequest(i0 *autoscaling.SetInstanceProtectionInput) (r0 *request.Request, r1 *autoscaling.SetInstanceProtectionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetInstanceProtectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.SetInstanceProtectionOutput)
	return
}

func (d *AutoScalingDouble) SetInstanceProtectionWithContext(i0 context.Context, i1 *autoscaling.SetInstanceProtectionInput, i2 ...request.Option) (r0 *autoscaling.SetInstanceProtectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetInstanceProtectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.SetInstanceProtectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeSetInstanceProtectionWithContext(ctx context.Context, in *autoscaling.SetInstanceProtectionInput, _ ...request.Option) (*autoscaling.SetInstanceProtectionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetInstanceProtection cancelled", ctx.Err())
	default:
		return d.SetInstanceProtection(in)
	}
}

func (d *AutoScalingDouble) SuspendProcesses(i0 *autoscaling.ScalingProcessQuery) (r0 *autoscaling.SuspendProcessesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SuspendProcesses", i0)
	r0, _ = returns[0].(*autoscaling.SuspendProcessesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) SuspendProcessesRequest(i0 *autoscaling.ScalingProcessQuery) (r0 *request.Request, r1 *autoscaling.SuspendProcessesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SuspendProcessesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.SuspendProcessesOutput)
	return
}

func (d *AutoScalingDouble) SuspendProcessesWithContext(i0 context.Context, i1 *autoscaling.ScalingProcessQuery, i2 ...request.Option) (r0 *autoscaling.SuspendProcessesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SuspendProcessesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.SuspendProcessesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeSuspendProcessesWithContext(ctx context.Context, in *autoscaling.ScalingProcessQuery, _ ...request.Option) (*autoscaling.SuspendProcessesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SuspendProcesses cancelled", ctx.Err())
	default:
		return d.SuspendProcesses(in)
	}
}

func (d *AutoScalingDouble) TerminateInstanceInAutoScalingGroup(i0 *autoscaling.TerminateInstanceInAutoScalingGroupInput) (r0 *autoscaling.TerminateInstanceInAutoScalingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TerminateInstanceInAutoScalingGroup", i0)
	r0, _ = returns[0].(*autoscaling.TerminateInstanceInAutoScalingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) TerminateInstanceInAutoScalingGroupRequest(i0 *autoscaling.TerminateInstanceInAutoScalingGroupInput) (r0 *request.Request, r1 *autoscaling.TerminateInstanceInAutoScalingGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TerminateInstanceInAutoScalingGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.TerminateInstanceInAutoScalingGroupOutput)
	return
}

func (d *AutoScalingDouble) TerminateInstanceInAutoScalingGroupWithContext(i0 context.Context, i1 *autoscaling.TerminateInstanceInAutoScalingGroupInput, i2 ...request.Option) (r0 *autoscaling.TerminateInstanceInAutoScalingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TerminateInstanceInAutoScalingGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.TerminateInstanceInAutoScalingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeTerminateInstanceInAutoScalingGroupWithContext(ctx context.Context, in *autoscaling.TerminateInstanceInAutoScalingGroupInput, _ ...request.Option) (*autoscaling.TerminateInstanceInAutoScalingGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TerminateInstanceInAutoScalingGroup cancelled", ctx.Err())
	default:
		return d.TerminateInstanceInAutoScalingGroup(in)
	}
}

func (d *AutoScalingDouble) UpdateAutoScalingGroup(i0 *autoscaling.UpdateAutoScalingGroupInput) (r0 *autoscaling.UpdateAutoScalingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAutoScalingGroup", i0)
	r0, _ = returns[0].(*autoscaling.UpdateAutoScalingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) UpdateAutoScalingGroupRequest(i0 *autoscaling.UpdateAutoScalingGroupInput) (r0 *request.Request, r1 *autoscaling.UpdateAutoScalingGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAutoScalingGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*autoscaling.UpdateAutoScalingGroupOutput)
	return
}

func (d *AutoScalingDouble) UpdateAutoScalingGroupWithContext(i0 context.Context, i1 *autoscaling.UpdateAutoScalingGroupInput, i2 ...request.Option) (r0 *autoscaling.UpdateAutoScalingGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAutoScalingGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*autoscaling.UpdateAutoScalingGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *AutoScalingDouble) fakeUpdateAutoScalingGroupWithContext(ctx context.Context, in *autoscaling.UpdateAutoScalingGroupInput, _ ...request.Option) (*autoscaling.UpdateAutoScalingGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateAutoScalingGroup cancelled", ctx.Err())
	default:
		return d.UpdateAutoScalingGroup(in)
	}
}

func (d *AutoScalingDouble) WaitUntilGroupExists(i0 *autoscaling.DescribeAutoScalingGroupsInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilGroupExists", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *AutoScalingDouble) fakeWaitUntilGroupExists(in *autoscaling.DescribeAutoScalingGroupsInput) error {
	return d.WaitUntil("GroupExists", waiters, in)
}

func (d *AutoScalingDouble) WaitUntilGroupExistsWithContext(i0 context.Context, i1 *autoscaling.DescribeAutoScalingGroupsInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilGroupExistsWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *AutoScalingDouble) fakeWaitUntilGroupExistsWithContext(ctx context.Context, in *autoscaling.DescribeAutoScalingGroupsInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("GroupExists", waiters, ctx, in, waitOption...)
}

func (d *AutoScalingDouble) WaitUntilGroupInService(i0 *autoscaling.DescribeAutoScalingGroupsInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilGroupInService", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *AutoScalingDouble) fakeWaitUntilGroupInService(in *autoscaling.DescribeAutoScalingGroupsInput) error {
	return d.WaitUntil("GroupInService", waiters, in)
}

func (d *AutoScalingDouble) WaitUntilGroupInServiceWithContext(i0 context.Context, i1 *autoscaling.DescribeAutoScalingGroupsInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilGroupInServiceWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *AutoScalingDouble) fakeWaitUntilGroupInServiceWithContext(ctx context.Context, in *autoscaling.DescribeAutoScalingGroupsInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("GroupInService", waiters, ctx, in, waitOption...)
}

func (d *AutoScalingDouble) WaitUntilGroupNotExists(i0 *autoscaling.DescribeAutoScalingGroupsInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilGroupNotExists", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *AutoScalingDouble) fakeWaitUntilGroupNotExists(in *autoscaling.DescribeAutoScalingGroupsInput) error {
	return d.WaitUntil("GroupNotExists", waiters, in)
}

func (d *AutoScalingDouble) WaitUntilGroupNotExistsWithContext(i0 context.Context, i1 *autoscaling.DescribeAutoScalingGroupsInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilGroupNotExistsWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *AutoScalingDouble) fakeWaitUntilGroupNotExistsWithContext(ctx context.Context, in *autoscaling.DescribeAutoScalingGroupsInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("GroupNotExists", waiters, ctx, in, waitOption...)
}
