// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:12:33+11:00

// Package ecsdouble provides a TestDouble implementation of ecsiface.ECSAPI
package ecsdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/ecs"
	"github.com/aws/aws-sdk-go/service/ecs/ecsiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// ECSDouble is TestDouble for ecsiface.ECSAPI
type ECSDouble struct {
	ecsiface.ECSAPI
	*awsdouble.AWSTestDouble
}

// Constructor for ECSDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *ECSDouble {
	result := &ECSDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*ecsiface.ECSAPI)(nil), configurators...)
	return result
}

func (d *ECSDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *ECSDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CreateCapacityProviderWithContext":
		return m.Fake(d.fakeCreateCapacityProviderWithContext)

	case "CreateClusterWithContext":
		return m.Fake(d.fakeCreateClusterWithContext)

	case "CreateServiceWithContext":
		return m.Fake(d.fakeCreateServiceWithContext)

	case "CreateTaskSetWithContext":
		return m.Fake(d.fakeCreateTaskSetWithContext)

	case "DeleteAccountSettingWithContext":
		return m.Fake(d.fakeDeleteAccountSettingWithContext)

	case "DeleteAttributesWithContext":
		return m.Fake(d.fakeDeleteAttributesWithContext)

	case "DeleteClusterWithContext":
		return m.Fake(d.fakeDeleteClusterWithContext)

	case "DeleteServiceWithContext":
		return m.Fake(d.fakeDeleteServiceWithContext)

	case "DeleteTaskSetWithContext":
		return m.Fake(d.fakeDeleteTaskSetWithContext)

	case "DeregisterContainerInstanceWithContext":
		return m.Fake(d.fakeDeregisterContainerInstanceWithContext)

	case "DeregisterTaskDefinitionWithContext":
		return m.Fake(d.fakeDeregisterTaskDefinitionWithContext)

	case "DescribeCapacityProvidersWithContext":
		return m.Fake(d.fakeDescribeCapacityProvidersWithContext)

	case "DescribeClustersWithContext":
		return m.Fake(d.fakeDescribeClustersWithContext)

	case "DescribeContainerInstancesWithContext":
		return m.Fake(d.fakeDescribeContainerInstancesWithContext)

	case "DescribeServicesWithContext":
		return m.Fake(d.fakeDescribeServicesWithContext)

	case "DescribeTaskDefinitionWithContext":
		return m.Fake(d.fakeDescribeTaskDefinitionWithContext)

	case "DescribeTaskSetsWithContext":
		return m.Fake(d.fakeDescribeTaskSetsWithContext)

	case "DescribeTasksWithContext":
		return m.Fake(d.fakeDescribeTasksWithContext)

	case "DiscoverPollEndpointWithContext":
		return m.Fake(d.fakeDiscoverPollEndpointWithContext)

	case "ListAccountSettingsPages":
		return m.Fake(d.fakeListAccountSettingsPages)

	case "ListAccountSettingsPagesWithContext":
		return m.Fake(d.fakeListAccountSettingsPagesWithContext)

	case "ListAccountSettingsWithContext":
		return m.Fake(d.fakeListAccountSettingsWithContext)

	case "ListAttributesPages":
		return m.Fake(d.fakeListAttributesPages)

	case "ListAttributesPagesWithContext":
		return m.Fake(d.fakeListAttributesPagesWithContext)

	case "ListAttributesWithContext":
		return m.Fake(d.fakeListAttributesWithContext)

	case "ListClustersPages":
		return m.Fake(d.fakeListClustersPages)

	case "ListClustersPagesWithContext":
		return m.Fake(d.fakeListClustersPagesWithContext)

	case "ListClustersWithContext":
		return m.Fake(d.fakeListClustersWithContext)

	case "ListContainerInstancesPages":
		return m.Fake(d.fakeListContainerInstancesPages)

	case "ListContainerInstancesPagesWithContext":
		return m.Fake(d.fakeListContainerInstancesPagesWithContext)

	case "ListContainerInstancesWithContext":
		return m.Fake(d.fakeListContainerInstancesWithContext)

	case "ListServicesPages":
		return m.Fake(d.fakeListServicesPages)

	case "ListServicesPagesWithContext":
		return m.Fake(d.fakeListServicesPagesWithContext)

	case "ListServicesWithContext":
		return m.Fake(d.fakeListServicesWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "ListTaskDefinitionFamiliesPages":
		return m.Fake(d.fakeListTaskDefinitionFamiliesPages)

	case "ListTaskDefinitionFamiliesPagesWithContext":
		return m.Fake(d.fakeListTaskDefinitionFamiliesPagesWithContext)

	case "ListTaskDefinitionFamiliesWithContext":
		return m.Fake(d.fakeListTaskDefinitionFamiliesWithContext)

	case "ListTaskDefinitionsPages":
		return m.Fake(d.fakeListTaskDefinitionsPages)

	case "ListTaskDefinitionsPagesWithContext":
		return m.Fake(d.fakeListTaskDefinitionsPagesWithContext)

	case "ListTaskDefinitionsWithContext":
		return m.Fake(d.fakeListTaskDefinitionsWithContext)

	case "ListTasksPages":
		return m.Fake(d.fakeListTasksPages)

	case "ListTasksPagesWithContext":
		return m.Fake(d.fakeListTasksPagesWithContext)

	case "ListTasksWithContext":
		return m.Fake(d.fakeListTasksWithContext)

	case "PutAccountSettingDefaultWithContext":
		return m.Fake(d.fakePutAccountSettingDefaultWithContext)

	case "PutAccountSettingWithContext":
		return m.Fake(d.fakePutAccountSettingWithContext)

	case "PutAttributesWithContext":
		return m.Fake(d.fakePutAttributesWithContext)

	case "PutClusterCapacityProvidersWithContext":
		return m.Fake(d.fakePutClusterCapacityProvidersWithContext)

	case "RegisterContainerInstanceWithContext":
		return m.Fake(d.fakeRegisterContainerInstanceWithContext)

	case "RegisterTaskDefinitionWithContext":
		return m.Fake(d.fakeRegisterTaskDefinitionWithContext)

	case "RunTaskWithContext":
		return m.Fake(d.fakeRunTaskWithContext)

	case "StartTaskWithContext":
		return m.Fake(d.fakeStartTaskWithContext)

	case "StopTaskWithContext":
		return m.Fake(d.fakeStopTaskWithContext)

	case "SubmitAttachmentStateChangesWithContext":
		return m.Fake(d.fakeSubmitAttachmentStateChangesWithContext)

	case "SubmitContainerStateChangeWithContext":
		return m.Fake(d.fakeSubmitContainerStateChangeWithContext)

	case "SubmitTaskStateChangeWithContext":
		return m.Fake(d.fakeSubmitTaskStateChangeWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateClusterSettingsWithContext":
		return m.Fake(d.fakeUpdateClusterSettingsWithContext)

	case "UpdateContainerAgentWithContext":
		return m.Fake(d.fakeUpdateContainerAgentWithContext)

	case "UpdateContainerInstancesStateWithContext":
		return m.Fake(d.fakeUpdateContainerInstancesStateWithContext)

	case "UpdateServicePrimaryTaskSetWithContext":
		return m.Fake(d.fakeUpdateServicePrimaryTaskSetWithContext)

	case "UpdateServiceWithContext":
		return m.Fake(d.fakeUpdateServiceWithContext)

	case "UpdateTaskSetWithContext":
		return m.Fake(d.fakeUpdateTaskSetWithContext)

	case "WaitUntilServicesInactive":
		return m.Fake(d.fakeWaitUntilServicesInactive)

	case "WaitUntilServicesInactiveWithContext":
		return m.Fake(d.fakeWaitUntilServicesInactiveWithContext)

	case "WaitUntilServicesStable":
		return m.Fake(d.fakeWaitUntilServicesStable)

	case "WaitUntilServicesStableWithContext":
		return m.Fake(d.fakeWaitUntilServicesStableWithContext)

	case "WaitUntilTasksRunning":
		return m.Fake(d.fakeWaitUntilTasksRunning)

	case "WaitUntilTasksRunningWithContext":
		return m.Fake(d.fakeWaitUntilTasksRunningWithContext)

	case "WaitUntilTasksStopped":
		return m.Fake(d.fakeWaitUntilTasksStopped)

	case "WaitUntilTasksStoppedWithContext":
		return m.Fake(d.fakeWaitUntilTasksStoppedWithContext)

	default:
		return nil
	}
}

func (d *ECSDouble) CreateCapacityProvider(i0 *ecs.CreateCapacityProviderInput) (r0 *ecs.CreateCapacityProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCapacityProvider", i0)
	r0, _ = returns[0].(*ecs.CreateCapacityProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) CreateCapacityProviderRequest(i0 *ecs.CreateCapacityProviderInput) (r0 *request.Request, r1 *ecs.CreateCapacityProviderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCapacityProviderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.CreateCapacityProviderOutput)
	return
}

func (d *ECSDouble) CreateCapacityProviderWithContext(i0 context.Context, i1 *ecs.CreateCapacityProviderInput, i2 ...request.Option) (r0 *ecs.CreateCapacityProviderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCapacityProviderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.CreateCapacityProviderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeCreateCapacityProviderWithContext(ctx context.Context, in *ecs.CreateCapacityProviderInput, _ ...request.Option) (*ecs.CreateCapacityProviderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateCapacityProvider cancelled", ctx.Err())
	default:
		return d.CreateCapacityProvider(in)
	}
}

func (d *ECSDouble) CreateCluster(i0 *ecs.CreateClusterInput) (r0 *ecs.CreateClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCluster", i0)
	r0, _ = returns[0].(*ecs.CreateClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) CreateClusterRequest(i0 *ecs.CreateClusterInput) (r0 *request.Request, r1 *ecs.CreateClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.CreateClusterOutput)
	return
}

func (d *ECSDouble) CreateClusterWithContext(i0 context.Context, i1 *ecs.CreateClusterInput, i2 ...request.Option) (r0 *ecs.CreateClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.CreateClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeCreateClusterWithContext(ctx context.Context, in *ecs.CreateClusterInput, _ ...request.Option) (*ecs.CreateClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateCluster cancelled", ctx.Err())
	default:
		return d.CreateCluster(in)
	}
}

func (d *ECSDouble) CreateService(i0 *ecs.CreateServiceInput) (r0 *ecs.CreateServiceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateService", i0)
	r0, _ = returns[0].(*ecs.CreateServiceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) CreateServiceRequest(i0 *ecs.CreateServiceInput) (r0 *request.Request, r1 *ecs.CreateServiceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateServiceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.CreateServiceOutput)
	return
}

func (d *ECSDouble) CreateServiceWithContext(i0 context.Context, i1 *ecs.CreateServiceInput, i2 ...request.Option) (r0 *ecs.CreateServiceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateServiceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.CreateServiceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeCreateServiceWithContext(ctx context.Context, in *ecs.CreateServiceInput, _ ...request.Option) (*ecs.CreateServiceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateService cancelled", ctx.Err())
	default:
		return d.CreateService(in)
	}
}

func (d *ECSDouble) CreateTaskSet(i0 *ecs.CreateTaskSetInput) (r0 *ecs.CreateTaskSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTaskSet", i0)
	r0, _ = returns[0].(*ecs.CreateTaskSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) CreateTaskSetRequest(i0 *ecs.CreateTaskSetInput) (r0 *request.Request, r1 *ecs.CreateTaskSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTaskSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.CreateTaskSetOutput)
	return
}

func (d *ECSDouble) CreateTaskSetWithContext(i0 context.Context, i1 *ecs.CreateTaskSetInput, i2 ...request.Option) (r0 *ecs.CreateTaskSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTaskSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.CreateTaskSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeCreateTaskSetWithContext(ctx context.Context, in *ecs.CreateTaskSetInput, _ ...request.Option) (*ecs.CreateTaskSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTaskSet cancelled", ctx.Err())
	default:
		return d.CreateTaskSet(in)
	}
}

func (d *ECSDouble) DeleteAccountSetting(i0 *ecs.DeleteAccountSettingInput) (r0 *ecs.DeleteAccountSettingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAccountSetting", i0)
	r0, _ = returns[0].(*ecs.DeleteAccountSettingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) DeleteAccountSettingRequest(i0 *ecs.DeleteAccountSettingInput) (r0 *request.Request, r1 *ecs.DeleteAccountSettingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAccountSettingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.DeleteAccountSettingOutput)
	return
}

func (d *ECSDouble) DeleteAccountSettingWithContext(i0 context.Context, i1 *ecs.DeleteAccountSettingInput, i2 ...request.Option) (r0 *ecs.DeleteAccountSettingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAccountSettingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.DeleteAccountSettingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeDeleteAccountSettingWithContext(ctx context.Context, in *ecs.DeleteAccountSettingInput, _ ...request.Option) (*ecs.DeleteAccountSettingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteAccountSetting cancelled", ctx.Err())
	default:
		return d.DeleteAccountSetting(in)
	}
}

func (d *ECSDouble) DeleteAttributes(i0 *ecs.DeleteAttributesInput) (r0 *ecs.DeleteAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAttributes", i0)
	r0, _ = returns[0].(*ecs.DeleteAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) DeleteAttributesRequest(i0 *ecs.DeleteAttributesInput) (r0 *request.Request, r1 *ecs.DeleteAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.DeleteAttributesOutput)
	return
}

func (d *ECSDouble) DeleteAttributesWithContext(i0 context.Context, i1 *ecs.DeleteAttributesInput, i2 ...request.Option) (r0 *ecs.DeleteAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.DeleteAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeDeleteAttributesWithContext(ctx context.Context, in *ecs.DeleteAttributesInput, _ ...request.Option) (*ecs.DeleteAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteAttributes cancelled", ctx.Err())
	default:
		return d.DeleteAttributes(in)
	}
}

func (d *ECSDouble) DeleteCluster(i0 *ecs.DeleteClusterInput) (r0 *ecs.DeleteClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCluster", i0)
	r0, _ = returns[0].(*ecs.DeleteClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) DeleteClusterRequest(i0 *ecs.DeleteClusterInput) (r0 *request.Request, r1 *ecs.DeleteClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.DeleteClusterOutput)
	return
}

func (d *ECSDouble) DeleteClusterWithContext(i0 context.Context, i1 *ecs.DeleteClusterInput, i2 ...request.Option) (r0 *ecs.DeleteClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.DeleteClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeDeleteClusterWithContext(ctx context.Context, in *ecs.DeleteClusterInput, _ ...request.Option) (*ecs.DeleteClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteCluster cancelled", ctx.Err())
	default:
		return d.DeleteCluster(in)
	}
}

func (d *ECSDouble) DeleteService(i0 *ecs.DeleteServiceInput) (r0 *ecs.DeleteServiceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteService", i0)
	r0, _ = returns[0].(*ecs.DeleteServiceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) DeleteServiceRequest(i0 *ecs.DeleteServiceInput) (r0 *request.Request, r1 *ecs.DeleteServiceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteServiceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.DeleteServiceOutput)
	return
}

func (d *ECSDouble) DeleteServiceWithContext(i0 context.Context, i1 *ecs.DeleteServiceInput, i2 ...request.Option) (r0 *ecs.DeleteServiceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteServiceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.DeleteServiceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeDeleteServiceWithContext(ctx context.Context, in *ecs.DeleteServiceInput, _ ...request.Option) (*ecs.DeleteServiceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteService cancelled", ctx.Err())
	default:
		return d.DeleteService(in)
	}
}

func (d *ECSDouble) DeleteTaskSet(i0 *ecs.DeleteTaskSetInput) (r0 *ecs.DeleteTaskSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTaskSet", i0)
	r0, _ = returns[0].(*ecs.DeleteTaskSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) DeleteTaskSetRequest(i0 *ecs.DeleteTaskSetInput) (r0 *request.Request, r1 *ecs.DeleteTaskSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTaskSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.DeleteTaskSetOutput)
	return
}

func (d *ECSDouble) DeleteTaskSetWithContext(i0 context.Context, i1 *ecs.DeleteTaskSetInput, i2 ...request.Option) (r0 *ecs.DeleteTaskSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTaskSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.DeleteTaskSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeDeleteTaskSetWithContext(ctx context.Context, in *ecs.DeleteTaskSetInput, _ ...request.Option) (*ecs.DeleteTaskSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTaskSet cancelled", ctx.Err())
	default:
		return d.DeleteTaskSet(in)
	}
}

func (d *ECSDouble) DeregisterContainerInstance(i0 *ecs.DeregisterContainerInstanceInput) (r0 *ecs.DeregisterContainerInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterContainerInstance", i0)
	r0, _ = returns[0].(*ecs.DeregisterContainerInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) DeregisterContainerInstanceRequest(i0 *ecs.DeregisterContainerInstanceInput) (r0 *request.Request, r1 *ecs.DeregisterContainerInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterContainerInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.DeregisterContainerInstanceOutput)
	return
}

func (d *ECSDouble) DeregisterContainerInstanceWithContext(i0 context.Context, i1 *ecs.DeregisterContainerInstanceInput, i2 ...request.Option) (r0 *ecs.DeregisterContainerInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterContainerInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.DeregisterContainerInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeDeregisterContainerInstanceWithContext(ctx context.Context, in *ecs.DeregisterContainerInstanceInput, _ ...request.Option) (*ecs.DeregisterContainerInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeregisterContainerInstance cancelled", ctx.Err())
	default:
		return d.DeregisterContainerInstance(in)
	}
}

func (d *ECSDouble) DeregisterTaskDefinition(i0 *ecs.DeregisterTaskDefinitionInput) (r0 *ecs.DeregisterTaskDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterTaskDefinition", i0)
	r0, _ = returns[0].(*ecs.DeregisterTaskDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) DeregisterTaskDefinitionRequest(i0 *ecs.DeregisterTaskDefinitionInput) (r0 *request.Request, r1 *ecs.DeregisterTaskDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterTaskDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.DeregisterTaskDefinitionOutput)
	return
}

func (d *ECSDouble) DeregisterTaskDefinitionWithContext(i0 context.Context, i1 *ecs.DeregisterTaskDefinitionInput, i2 ...request.Option) (r0 *ecs.DeregisterTaskDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterTaskDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.DeregisterTaskDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeDeregisterTaskDefinitionWithContext(ctx context.Context, in *ecs.DeregisterTaskDefinitionInput, _ ...request.Option) (*ecs.DeregisterTaskDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeregisterTaskDefinition cancelled", ctx.Err())
	default:
		return d.DeregisterTaskDefinition(in)
	}
}

func (d *ECSDouble) DescribeCapacityProviders(i0 *ecs.DescribeCapacityProvidersInput) (r0 *ecs.DescribeCapacityProvidersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCapacityProviders", i0)
	r0, _ = returns[0].(*ecs.DescribeCapacityProvidersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) DescribeCapacityProvidersRequest(i0 *ecs.DescribeCapacityProvidersInput) (r0 *request.Request, r1 *ecs.DescribeCapacityProvidersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCapacityProvidersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.DescribeCapacityProvidersOutput)
	return
}

func (d *ECSDouble) DescribeCapacityProvidersWithContext(i0 context.Context, i1 *ecs.DescribeCapacityProvidersInput, i2 ...request.Option) (r0 *ecs.DescribeCapacityProvidersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCapacityProvidersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.DescribeCapacityProvidersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeDescribeCapacityProvidersWithContext(ctx context.Context, in *ecs.DescribeCapacityProvidersInput, _ ...request.Option) (*ecs.DescribeCapacityProvidersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeCapacityProviders cancelled", ctx.Err())
	default:
		return d.DescribeCapacityProviders(in)
	}
}

func (d *ECSDouble) DescribeClusters(i0 *ecs.DescribeClustersInput) (r0 *ecs.DescribeClustersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusters", i0)
	r0, _ = returns[0].(*ecs.DescribeClustersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) DescribeClustersRequest(i0 *ecs.DescribeClustersInput) (r0 *request.Request, r1 *ecs.DescribeClustersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClustersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.DescribeClustersOutput)
	return
}

func (d *ECSDouble) DescribeClustersWithContext(i0 context.Context, i1 *ecs.DescribeClustersInput, i2 ...request.Option) (r0 *ecs.DescribeClustersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClustersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.DescribeClustersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeDescribeClustersWithContext(ctx context.Context, in *ecs.DescribeClustersInput, _ ...request.Option) (*ecs.DescribeClustersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeClusters cancelled", ctx.Err())
	default:
		return d.DescribeClusters(in)
	}
}

func (d *ECSDouble) DescribeContainerInstances(i0 *ecs.DescribeContainerInstancesInput) (r0 *ecs.DescribeContainerInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeContainerInstances", i0)
	r0, _ = returns[0].(*ecs.DescribeContainerInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) DescribeContainerInstancesRequest(i0 *ecs.DescribeContainerInstancesInput) (r0 *request.Request, r1 *ecs.DescribeContainerInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeContainerInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.DescribeContainerInstancesOutput)
	return
}

func (d *ECSDouble) DescribeContainerInstancesWithContext(i0 context.Context, i1 *ecs.DescribeContainerInstancesInput, i2 ...request.Option) (r0 *ecs.DescribeContainerInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeContainerInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.DescribeContainerInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeDescribeContainerInstancesWithContext(ctx context.Context, in *ecs.DescribeContainerInstancesInput, _ ...request.Option) (*ecs.DescribeContainerInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeContainerInstances cancelled", ctx.Err())
	default:
		return d.DescribeContainerInstances(in)
	}
}

func (d *ECSDouble) DescribeServices(i0 *ecs.DescribeServicesInput) (r0 *ecs.DescribeServicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeServices", i0)
	r0, _ = returns[0].(*ecs.DescribeServicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) DescribeServicesRequest(i0 *ecs.DescribeServicesInput) (r0 *request.Request, r1 *ecs.DescribeServicesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeServicesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.DescribeServicesOutput)
	return
}

func (d *ECSDouble) DescribeServicesWithContext(i0 context.Context, i1 *ecs.DescribeServicesInput, i2 ...request.Option) (r0 *ecs.DescribeServicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeServicesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.DescribeServicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeDescribeServicesWithContext(ctx context.Context, in *ecs.DescribeServicesInput, _ ...request.Option) (*ecs.DescribeServicesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeServices cancelled", ctx.Err())
	default:
		return d.DescribeServices(in)
	}
}

func (d *ECSDouble) DescribeTaskDefinition(i0 *ecs.DescribeTaskDefinitionInput) (r0 *ecs.DescribeTaskDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTaskDefinition", i0)
	r0, _ = returns[0].(*ecs.DescribeTaskDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) DescribeTaskDefinitionRequest(i0 *ecs.DescribeTaskDefinitionInput) (r0 *request.Request, r1 *ecs.DescribeTaskDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTaskDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.DescribeTaskDefinitionOutput)
	return
}

func (d *ECSDouble) DescribeTaskDefinitionWithContext(i0 context.Context, i1 *ecs.DescribeTaskDefinitionInput, i2 ...request.Option) (r0 *ecs.DescribeTaskDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTaskDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.DescribeTaskDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeDescribeTaskDefinitionWithContext(ctx context.Context, in *ecs.DescribeTaskDefinitionInput, _ ...request.Option) (*ecs.DescribeTaskDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTaskDefinition cancelled", ctx.Err())
	default:
		return d.DescribeTaskDefinition(in)
	}
}

func (d *ECSDouble) DescribeTaskSets(i0 *ecs.DescribeTaskSetsInput) (r0 *ecs.DescribeTaskSetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTaskSets", i0)
	r0, _ = returns[0].(*ecs.DescribeTaskSetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) DescribeTaskSetsRequest(i0 *ecs.DescribeTaskSetsInput) (r0 *request.Request, r1 *ecs.DescribeTaskSetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTaskSetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.DescribeTaskSetsOutput)
	return
}

func (d *ECSDouble) DescribeTaskSetsWithContext(i0 context.Context, i1 *ecs.DescribeTaskSetsInput, i2 ...request.Option) (r0 *ecs.DescribeTaskSetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTaskSetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.DescribeTaskSetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeDescribeTaskSetsWithContext(ctx context.Context, in *ecs.DescribeTaskSetsInput, _ ...request.Option) (*ecs.DescribeTaskSetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTaskSets cancelled", ctx.Err())
	default:
		return d.DescribeTaskSets(in)
	}
}

func (d *ECSDouble) DescribeTasks(i0 *ecs.DescribeTasksInput) (r0 *ecs.DescribeTasksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTasks", i0)
	r0, _ = returns[0].(*ecs.DescribeTasksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) DescribeTasksRequest(i0 *ecs.DescribeTasksInput) (r0 *request.Request, r1 *ecs.DescribeTasksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTasksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.DescribeTasksOutput)
	return
}

func (d *ECSDouble) DescribeTasksWithContext(i0 context.Context, i1 *ecs.DescribeTasksInput, i2 ...request.Option) (r0 *ecs.DescribeTasksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTasksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.DescribeTasksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeDescribeTasksWithContext(ctx context.Context, in *ecs.DescribeTasksInput, _ ...request.Option) (*ecs.DescribeTasksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTasks cancelled", ctx.Err())
	default:
		return d.DescribeTasks(in)
	}
}

func (d *ECSDouble) DiscoverPollEndpoint(i0 *ecs.DiscoverPollEndpointInput) (r0 *ecs.DiscoverPollEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DiscoverPollEndpoint", i0)
	r0, _ = returns[0].(*ecs.DiscoverPollEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) DiscoverPollEndpointRequest(i0 *ecs.DiscoverPollEndpointInput) (r0 *request.Request, r1 *ecs.DiscoverPollEndpointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DiscoverPollEndpointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.DiscoverPollEndpointOutput)
	return
}

func (d *ECSDouble) DiscoverPollEndpointWithContext(i0 context.Context, i1 *ecs.DiscoverPollEndpointInput, i2 ...request.Option) (r0 *ecs.DiscoverPollEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DiscoverPollEndpointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.DiscoverPollEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeDiscoverPollEndpointWithContext(ctx context.Context, in *ecs.DiscoverPollEndpointInput, _ ...request.Option) (*ecs.DiscoverPollEndpointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DiscoverPollEndpoint cancelled", ctx.Err())
	default:
		return d.DiscoverPollEndpoint(in)
	}
}

func (d *ECSDouble) ListAccountSettings(i0 *ecs.ListAccountSettingsInput) (r0 *ecs.ListAccountSettingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAccountSettings", i0)
	r0, _ = returns[0].(*ecs.ListAccountSettingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) ListAccountSettingsPages(i0 *ecs.ListAccountSettingsInput, i1 func(*ecs.ListAccountSettingsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAccountSettingsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ECSDouble) fakeListAccountSettingsPages(in *ecs.ListAccountSettingsInput, pager func(*ecs.ListAccountSettingsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListAccountSettings", paginators, in, pager)
}

func (d *ECSDouble) ListAccountSettingsPagesWithContext(i0 context.Context, i1 *ecs.ListAccountSettingsInput, i2 func(*ecs.ListAccountSettingsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAccountSettingsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ECSDouble) fakeListAccountSettingsPagesWithContext(ctx context.Context, in *ecs.ListAccountSettingsInput, pager func(*ecs.ListAccountSettingsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListAccountSettings", paginators, ctx, in, pager, options...)
}

func (d *ECSDouble) ListAccountSettingsRequest(i0 *ecs.ListAccountSettingsInput) (r0 *request.Request, r1 *ecs.ListAccountSettingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAccountSettingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.ListAccountSettingsOutput)
	return
}

func (d *ECSDouble) ListAccountSettingsWithContext(i0 context.Context, i1 *ecs.ListAccountSettingsInput, i2 ...request.Option) (r0 *ecs.ListAccountSettingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAccountSettingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.ListAccountSettingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeListAccountSettingsWithContext(ctx context.Context, in *ecs.ListAccountSettingsInput, _ ...request.Option) (*ecs.ListAccountSettingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAccountSettings cancelled", ctx.Err())
	default:
		return d.ListAccountSettings(in)
	}
}

func (d *ECSDouble) ListAttributes(i0 *ecs.ListAttributesInput) (r0 *ecs.ListAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAttributes", i0)
	r0, _ = returns[0].(*ecs.ListAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) ListAttributesPages(i0 *ecs.ListAttributesInput, i1 func(*ecs.ListAttributesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAttributesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ECSDouble) fakeListAttributesPages(in *ecs.ListAttributesInput, pager func(*ecs.ListAttributesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListAttributes", paginators, in, pager)
}

func (d *ECSDouble) ListAttributesPagesWithContext(i0 context.Context, i1 *ecs.ListAttributesInput, i2 func(*ecs.ListAttributesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAttributesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ECSDouble) fakeListAttributesPagesWithContext(ctx context.Context, in *ecs.ListAttributesInput, pager func(*ecs.ListAttributesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListAttributes", paginators, ctx, in, pager, options...)
}

func (d *ECSDouble) ListAttributesRequest(i0 *ecs.ListAttributesInput) (r0 *request.Request, r1 *ecs.ListAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.ListAttributesOutput)
	return
}

func (d *ECSDouble) ListAttributesWithContext(i0 context.Context, i1 *ecs.ListAttributesInput, i2 ...request.Option) (r0 *ecs.ListAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.ListAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeListAttributesWithContext(ctx context.Context, in *ecs.ListAttributesInput, _ ...request.Option) (*ecs.ListAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAttributes cancelled", ctx.Err())
	default:
		return d.ListAttributes(in)
	}
}

func (d *ECSDouble) ListClusters(i0 *ecs.ListClustersInput) (r0 *ecs.ListClustersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListClusters", i0)
	r0, _ = returns[0].(*ecs.ListClustersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) ListClustersPages(i0 *ecs.ListClustersInput, i1 func(*ecs.ListClustersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListClustersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ECSDouble) fakeListClustersPages(in *ecs.ListClustersInput, pager func(*ecs.ListClustersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListClusters", paginators, in, pager)
}

func (d *ECSDouble) ListClustersPagesWithContext(i0 context.Context, i1 *ecs.ListClustersInput, i2 func(*ecs.ListClustersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListClustersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ECSDouble) fakeListClustersPagesWithContext(ctx context.Context, in *ecs.ListClustersInput, pager func(*ecs.ListClustersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListClusters", paginators, ctx, in, pager, options...)
}

func (d *ECSDouble) ListClustersRequest(i0 *ecs.ListClustersInput) (r0 *request.Request, r1 *ecs.ListClustersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListClustersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.ListClustersOutput)
	return
}

func (d *ECSDouble) ListClustersWithContext(i0 context.Context, i1 *ecs.ListClustersInput, i2 ...request.Option) (r0 *ecs.ListClustersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListClustersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.ListClustersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeListClustersWithContext(ctx context.Context, in *ecs.ListClustersInput, _ ...request.Option) (*ecs.ListClustersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListClusters cancelled", ctx.Err())
	default:
		return d.ListClusters(in)
	}
}

func (d *ECSDouble) ListContainerInstances(i0 *ecs.ListContainerInstancesInput) (r0 *ecs.ListContainerInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListContainerInstances", i0)
	r0, _ = returns[0].(*ecs.ListContainerInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) ListContainerInstancesPages(i0 *ecs.ListContainerInstancesInput, i1 func(*ecs.ListContainerInstancesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListContainerInstancesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ECSDouble) fakeListContainerInstancesPages(in *ecs.ListContainerInstancesInput, pager func(*ecs.ListContainerInstancesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListContainerInstances", paginators, in, pager)
}

func (d *ECSDouble) ListContainerInstancesPagesWithContext(i0 context.Context, i1 *ecs.ListContainerInstancesInput, i2 func(*ecs.ListContainerInstancesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListContainerInstancesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ECSDouble) fakeListContainerInstancesPagesWithContext(ctx context.Context, in *ecs.ListContainerInstancesInput, pager func(*ecs.ListContainerInstancesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListContainerInstances", paginators, ctx, in, pager, options...)
}

func (d *ECSDouble) ListContainerInstancesRequest(i0 *ecs.ListContainerInstancesInput) (r0 *request.Request, r1 *ecs.ListContainerInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListContainerInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.ListContainerInstancesOutput)
	return
}

func (d *ECSDouble) ListContainerInstancesWithContext(i0 context.Context, i1 *ecs.ListContainerInstancesInput, i2 ...request.Option) (r0 *ecs.ListContainerInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListContainerInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.ListContainerInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeListContainerInstancesWithContext(ctx context.Context, in *ecs.ListContainerInstancesInput, _ ...request.Option) (*ecs.ListContainerInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListContainerInstances cancelled", ctx.Err())
	default:
		return d.ListContainerInstances(in)
	}
}

func (d *ECSDouble) ListServices(i0 *ecs.ListServicesInput) (r0 *ecs.ListServicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListServices", i0)
	r0, _ = returns[0].(*ecs.ListServicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) ListServicesPages(i0 *ecs.ListServicesInput, i1 func(*ecs.ListServicesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListServicesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ECSDouble) fakeListServicesPages(in *ecs.ListServicesInput, pager func(*ecs.ListServicesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListServices", paginators, in, pager)
}

func (d *ECSDouble) ListServicesPagesWithContext(i0 context.Context, i1 *ecs.ListServicesInput, i2 func(*ecs.ListServicesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListServicesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ECSDouble) fakeListServicesPagesWithContext(ctx context.Context, in *ecs.ListServicesInput, pager func(*ecs.ListServicesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListServices", paginators, ctx, in, pager, options...)
}

func (d *ECSDouble) ListServicesRequest(i0 *ecs.ListServicesInput) (r0 *request.Request, r1 *ecs.ListServicesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListServicesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.ListServicesOutput)
	return
}

func (d *ECSDouble) ListServicesWithContext(i0 context.Context, i1 *ecs.ListServicesInput, i2 ...request.Option) (r0 *ecs.ListServicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListServicesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.ListServicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeListServicesWithContext(ctx context.Context, in *ecs.ListServicesInput, _ ...request.Option) (*ecs.ListServicesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListServices cancelled", ctx.Err())
	default:
		return d.ListServices(in)
	}
}

func (d *ECSDouble) ListTagsForResource(i0 *ecs.ListTagsForResourceInput) (r0 *ecs.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*ecs.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) ListTagsForResourceRequest(i0 *ecs.ListTagsForResourceInput) (r0 *request.Request, r1 *ecs.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.ListTagsForResourceOutput)
	return
}

func (d *ECSDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *ecs.ListTagsForResourceInput, i2 ...request.Option) (r0 *ecs.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *ecs.ListTagsForResourceInput, _ ...request.Option) (*ecs.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *ECSDouble) ListTaskDefinitionFamilies(i0 *ecs.ListTaskDefinitionFamiliesInput) (r0 *ecs.ListTaskDefinitionFamiliesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTaskDefinitionFamilies", i0)
	r0, _ = returns[0].(*ecs.ListTaskDefinitionFamiliesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) ListTaskDefinitionFamiliesPages(i0 *ecs.ListTaskDefinitionFamiliesInput, i1 func(*ecs.ListTaskDefinitionFamiliesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTaskDefinitionFamiliesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ECSDouble) fakeListTaskDefinitionFamiliesPages(in *ecs.ListTaskDefinitionFamiliesInput, pager func(*ecs.ListTaskDefinitionFamiliesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTaskDefinitionFamilies", paginators, in, pager)
}

func (d *ECSDouble) ListTaskDefinitionFamiliesPagesWithContext(i0 context.Context, i1 *ecs.ListTaskDefinitionFamiliesInput, i2 func(*ecs.ListTaskDefinitionFamiliesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTaskDefinitionFamiliesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ECSDouble) fakeListTaskDefinitionFamiliesPagesWithContext(ctx context.Context, in *ecs.ListTaskDefinitionFamiliesInput, pager func(*ecs.ListTaskDefinitionFamiliesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTaskDefinitionFamilies", paginators, ctx, in, pager, options...)
}

func (d *ECSDouble) ListTaskDefinitionFamiliesRequest(i0 *ecs.ListTaskDefinitionFamiliesInput) (r0 *request.Request, r1 *ecs.ListTaskDefinitionFamiliesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTaskDefinitionFamiliesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.ListTaskDefinitionFamiliesOutput)
	return
}

func (d *ECSDouble) ListTaskDefinitionFamiliesWithContext(i0 context.Context, i1 *ecs.ListTaskDefinitionFamiliesInput, i2 ...request.Option) (r0 *ecs.ListTaskDefinitionFamiliesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTaskDefinitionFamiliesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.ListTaskDefinitionFamiliesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeListTaskDefinitionFamiliesWithContext(ctx context.Context, in *ecs.ListTaskDefinitionFamiliesInput, _ ...request.Option) (*ecs.ListTaskDefinitionFamiliesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTaskDefinitionFamilies cancelled", ctx.Err())
	default:
		return d.ListTaskDefinitionFamilies(in)
	}
}

func (d *ECSDouble) ListTaskDefinitions(i0 *ecs.ListTaskDefinitionsInput) (r0 *ecs.ListTaskDefinitionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTaskDefinitions", i0)
	r0, _ = returns[0].(*ecs.ListTaskDefinitionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) ListTaskDefinitionsPages(i0 *ecs.ListTaskDefinitionsInput, i1 func(*ecs.ListTaskDefinitionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTaskDefinitionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ECSDouble) fakeListTaskDefinitionsPages(in *ecs.ListTaskDefinitionsInput, pager func(*ecs.ListTaskDefinitionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTaskDefinitions", paginators, in, pager)
}

func (d *ECSDouble) ListTaskDefinitionsPagesWithContext(i0 context.Context, i1 *ecs.ListTaskDefinitionsInput, i2 func(*ecs.ListTaskDefinitionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTaskDefinitionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ECSDouble) fakeListTaskDefinitionsPagesWithContext(ctx context.Context, in *ecs.ListTaskDefinitionsInput, pager func(*ecs.ListTaskDefinitionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTaskDefinitions", paginators, ctx, in, pager, options...)
}

func (d *ECSDouble) ListTaskDefinitionsRequest(i0 *ecs.ListTaskDefinitionsInput) (r0 *request.Request, r1 *ecs.ListTaskDefinitionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTaskDefinitionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.ListTaskDefinitionsOutput)
	return
}

func (d *ECSDouble) ListTaskDefinitionsWithContext(i0 context.Context, i1 *ecs.ListTaskDefinitionsInput, i2 ...request.Option) (r0 *ecs.ListTaskDefinitionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTaskDefinitionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.ListTaskDefinitionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeListTaskDefinitionsWithContext(ctx context.Context, in *ecs.ListTaskDefinitionsInput, _ ...request.Option) (*ecs.ListTaskDefinitionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTaskDefinitions cancelled", ctx.Err())
	default:
		return d.ListTaskDefinitions(in)
	}
}

func (d *ECSDouble) ListTasks(i0 *ecs.ListTasksInput) (r0 *ecs.ListTasksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTasks", i0)
	r0, _ = returns[0].(*ecs.ListTasksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) ListTasksPages(i0 *ecs.ListTasksInput, i1 func(*ecs.ListTasksOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTasksPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *ECSDouble) fakeListTasksPages(in *ecs.ListTasksInput, pager func(*ecs.ListTasksOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTasks", paginators, in, pager)
}

func (d *ECSDouble) ListTasksPagesWithContext(i0 context.Context, i1 *ecs.ListTasksInput, i2 func(*ecs.ListTasksOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTasksPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *ECSDouble) fakeListTasksPagesWithContext(ctx context.Context, in *ecs.ListTasksInput, pager func(*ecs.ListTasksOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTasks", paginators, ctx, in, pager, options...)
}

func (d *ECSDouble) ListTasksRequest(i0 *ecs.ListTasksInput) (r0 *request.Request, r1 *ecs.ListTasksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTasksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.ListTasksOutput)
	return
}

func (d *ECSDouble) ListTasksWithContext(i0 context.Context, i1 *ecs.ListTasksInput, i2 ...request.Option) (r0 *ecs.ListTasksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTasksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.ListTasksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeListTasksWithContext(ctx context.Context, in *ecs.ListTasksInput, _ ...request.Option) (*ecs.ListTasksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTasks cancelled", ctx.Err())
	default:
		return d.ListTasks(in)
	}
}

func (d *ECSDouble) PutAccountSetting(i0 *ecs.PutAccountSettingInput) (r0 *ecs.PutAccountSettingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutAccountSetting", i0)
	r0, _ = returns[0].(*ecs.PutAccountSettingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) PutAccountSettingDefault(i0 *ecs.PutAccountSettingDefaultInput) (r0 *ecs.PutAccountSettingDefaultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutAccountSettingDefault", i0)
	r0, _ = returns[0].(*ecs.PutAccountSettingDefaultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) PutAccountSettingDefaultRequest(i0 *ecs.PutAccountSettingDefaultInput) (r0 *request.Request, r1 *ecs.PutAccountSettingDefaultOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutAccountSettingDefaultRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.PutAccountSettingDefaultOutput)
	return
}

func (d *ECSDouble) PutAccountSettingDefaultWithContext(i0 context.Context, i1 *ecs.PutAccountSettingDefaultInput, i2 ...request.Option) (r0 *ecs.PutAccountSettingDefaultOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutAccountSettingDefaultWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.PutAccountSettingDefaultOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakePutAccountSettingDefaultWithContext(ctx context.Context, in *ecs.PutAccountSettingDefaultInput, _ ...request.Option) (*ecs.PutAccountSettingDefaultOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutAccountSettingDefault cancelled", ctx.Err())
	default:
		return d.PutAccountSettingDefault(in)
	}
}

func (d *ECSDouble) PutAccountSettingRequest(i0 *ecs.PutAccountSettingInput) (r0 *request.Request, r1 *ecs.PutAccountSettingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutAccountSettingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.PutAccountSettingOutput)
	return
}

func (d *ECSDouble) PutAccountSettingWithContext(i0 context.Context, i1 *ecs.PutAccountSettingInput, i2 ...request.Option) (r0 *ecs.PutAccountSettingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutAccountSettingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.PutAccountSettingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakePutAccountSettingWithContext(ctx context.Context, in *ecs.PutAccountSettingInput, _ ...request.Option) (*ecs.PutAccountSettingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutAccountSetting cancelled", ctx.Err())
	default:
		return d.PutAccountSetting(in)
	}
}

func (d *ECSDouble) PutAttributes(i0 *ecs.PutAttributesInput) (r0 *ecs.PutAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutAttributes", i0)
	r0, _ = returns[0].(*ecs.PutAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) PutAttributesRequest(i0 *ecs.PutAttributesInput) (r0 *request.Request, r1 *ecs.PutAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.PutAttributesOutput)
	return
}

func (d *ECSDouble) PutAttributesWithContext(i0 context.Context, i1 *ecs.PutAttributesInput, i2 ...request.Option) (r0 *ecs.PutAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.PutAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakePutAttributesWithContext(ctx context.Context, in *ecs.PutAttributesInput, _ ...request.Option) (*ecs.PutAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutAttributes cancelled", ctx.Err())
	default:
		return d.PutAttributes(in)
	}
}

func (d *ECSDouble) PutClusterCapacityProviders(i0 *ecs.PutClusterCapacityProvidersInput) (r0 *ecs.PutClusterCapacityProvidersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutClusterCapacityProviders", i0)
	r0, _ = returns[0].(*ecs.PutClusterCapacityProvidersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) PutClusterCapacityProvidersRequest(i0 *ecs.PutClusterCapacityProvidersInput) (r0 *request.Request, r1 *ecs.PutClusterCapacityProvidersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutClusterCapacityProvidersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.PutClusterCapacityProvidersOutput)
	return
}

func (d *ECSDouble) PutClusterCapacityProvidersWithContext(i0 context.Context, i1 *ecs.PutClusterCapacityProvidersInput, i2 ...request.Option) (r0 *ecs.PutClusterCapacityProvidersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutClusterCapacityProvidersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.PutClusterCapacityProvidersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakePutClusterCapacityProvidersWithContext(ctx context.Context, in *ecs.PutClusterCapacityProvidersInput, _ ...request.Option) (*ecs.PutClusterCapacityProvidersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutClusterCapacityProviders cancelled", ctx.Err())
	default:
		return d.PutClusterCapacityProviders(in)
	}
}

func (d *ECSDouble) RegisterContainerInstance(i0 *ecs.RegisterContainerInstanceInput) (r0 *ecs.RegisterContainerInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterContainerInstance", i0)
	r0, _ = returns[0].(*ecs.RegisterContainerInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) RegisterContainerInstanceRequest(i0 *ecs.RegisterContainerInstanceInput) (r0 *request.Request, r1 *ecs.RegisterContainerInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterContainerInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.RegisterContainerInstanceOutput)
	return
}

func (d *ECSDouble) RegisterContainerInstanceWithContext(i0 context.Context, i1 *ecs.RegisterContainerInstanceInput, i2 ...request.Option) (r0 *ecs.RegisterContainerInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterContainerInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.RegisterContainerInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeRegisterContainerInstanceWithContext(ctx context.Context, in *ecs.RegisterContainerInstanceInput, _ ...request.Option) (*ecs.RegisterContainerInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterContainerInstance cancelled", ctx.Err())
	default:
		return d.RegisterContainerInstance(in)
	}
}

func (d *ECSDouble) RegisterTaskDefinition(i0 *ecs.RegisterTaskDefinitionInput) (r0 *ecs.RegisterTaskDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterTaskDefinition", i0)
	r0, _ = returns[0].(*ecs.RegisterTaskDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) RegisterTaskDefinitionRequest(i0 *ecs.RegisterTaskDefinitionInput) (r0 *request.Request, r1 *ecs.RegisterTaskDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterTaskDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.RegisterTaskDefinitionOutput)
	return
}

func (d *ECSDouble) RegisterTaskDefinitionWithContext(i0 context.Context, i1 *ecs.RegisterTaskDefinitionInput, i2 ...request.Option) (r0 *ecs.RegisterTaskDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterTaskDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.RegisterTaskDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeRegisterTaskDefinitionWithContext(ctx context.Context, in *ecs.RegisterTaskDefinitionInput, _ ...request.Option) (*ecs.RegisterTaskDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterTaskDefinition cancelled", ctx.Err())
	default:
		return d.RegisterTaskDefinition(in)
	}
}

func (d *ECSDouble) RunTask(i0 *ecs.RunTaskInput) (r0 *ecs.RunTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RunTask", i0)
	r0, _ = returns[0].(*ecs.RunTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) RunTaskRequest(i0 *ecs.RunTaskInput) (r0 *request.Request, r1 *ecs.RunTaskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RunTaskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.RunTaskOutput)
	return
}

func (d *ECSDouble) RunTaskWithContext(i0 context.Context, i1 *ecs.RunTaskInput, i2 ...request.Option) (r0 *ecs.RunTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RunTaskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.RunTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeRunTaskWithContext(ctx context.Context, in *ecs.RunTaskInput, _ ...request.Option) (*ecs.RunTaskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RunTask cancelled", ctx.Err())
	default:
		return d.RunTask(in)
	}
}

func (d *ECSDouble) StartTask(i0 *ecs.StartTaskInput) (r0 *ecs.StartTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartTask", i0)
	r0, _ = returns[0].(*ecs.StartTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) StartTaskRequest(i0 *ecs.StartTaskInput) (r0 *request.Request, r1 *ecs.StartTaskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartTaskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.StartTaskOutput)
	return
}

func (d *ECSDouble) StartTaskWithContext(i0 context.Context, i1 *ecs.StartTaskInput, i2 ...request.Option) (r0 *ecs.StartTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartTaskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.StartTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeStartTaskWithContext(ctx context.Context, in *ecs.StartTaskInput, _ ...request.Option) (*ecs.StartTaskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartTask cancelled", ctx.Err())
	default:
		return d.StartTask(in)
	}
}

func (d *ECSDouble) StopTask(i0 *ecs.StopTaskInput) (r0 *ecs.StopTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopTask", i0)
	r0, _ = returns[0].(*ecs.StopTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) StopTaskRequest(i0 *ecs.StopTaskInput) (r0 *request.Request, r1 *ecs.StopTaskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopTaskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.StopTaskOutput)
	return
}

func (d *ECSDouble) StopTaskWithContext(i0 context.Context, i1 *ecs.StopTaskInput, i2 ...request.Option) (r0 *ecs.StopTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopTaskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.StopTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeStopTaskWithContext(ctx context.Context, in *ecs.StopTaskInput, _ ...request.Option) (*ecs.StopTaskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopTask cancelled", ctx.Err())
	default:
		return d.StopTask(in)
	}
}

func (d *ECSDouble) SubmitAttachmentStateChanges(i0 *ecs.SubmitAttachmentStateChangesInput) (r0 *ecs.SubmitAttachmentStateChangesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SubmitAttachmentStateChanges", i0)
	r0, _ = returns[0].(*ecs.SubmitAttachmentStateChangesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) SubmitAttachmentStateChangesRequest(i0 *ecs.SubmitAttachmentStateChangesInput) (r0 *request.Request, r1 *ecs.SubmitAttachmentStateChangesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SubmitAttachmentStateChangesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.SubmitAttachmentStateChangesOutput)
	return
}

func (d *ECSDouble) SubmitAttachmentStateChangesWithContext(i0 context.Context, i1 *ecs.SubmitAttachmentStateChangesInput, i2 ...request.Option) (r0 *ecs.SubmitAttachmentStateChangesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SubmitAttachmentStateChangesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.SubmitAttachmentStateChangesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeSubmitAttachmentStateChangesWithContext(ctx context.Context, in *ecs.SubmitAttachmentStateChangesInput, _ ...request.Option) (*ecs.SubmitAttachmentStateChangesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SubmitAttachmentStateChanges cancelled", ctx.Err())
	default:
		return d.SubmitAttachmentStateChanges(in)
	}
}

func (d *ECSDouble) SubmitContainerStateChange(i0 *ecs.SubmitContainerStateChangeInput) (r0 *ecs.SubmitContainerStateChangeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SubmitContainerStateChange", i0)
	r0, _ = returns[0].(*ecs.SubmitContainerStateChangeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) SubmitContainerStateChangeRequest(i0 *ecs.SubmitContainerStateChangeInput) (r0 *request.Request, r1 *ecs.SubmitContainerStateChangeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SubmitContainerStateChangeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.SubmitContainerStateChangeOutput)
	return
}

func (d *ECSDouble) SubmitContainerStateChangeWithContext(i0 context.Context, i1 *ecs.SubmitContainerStateChangeInput, i2 ...request.Option) (r0 *ecs.SubmitContainerStateChangeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SubmitContainerStateChangeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.SubmitContainerStateChangeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeSubmitContainerStateChangeWithContext(ctx context.Context, in *ecs.SubmitContainerStateChangeInput, _ ...request.Option) (*ecs.SubmitContainerStateChangeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SubmitContainerStateChange cancelled", ctx.Err())
	default:
		return d.SubmitContainerStateChange(in)
	}
}

func (d *ECSDouble) SubmitTaskStateChange(i0 *ecs.SubmitTaskStateChangeInput) (r0 *ecs.SubmitTaskStateChangeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SubmitTaskStateChange", i0)
	r0, _ = returns[0].(*ecs.SubmitTaskStateChangeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) SubmitTaskStateChangeRequest(i0 *ecs.SubmitTaskStateChangeInput) (r0 *request.Request, r1 *ecs.SubmitTaskStateChangeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SubmitTaskStateChangeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.SubmitTaskStateChangeOutput)
	return
}

func (d *ECSDouble) SubmitTaskStateChangeWithContext(i0 context.Context, i1 *ecs.SubmitTaskStateChangeInput, i2 ...request.Option) (r0 *ecs.SubmitTaskStateChangeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SubmitTaskStateChangeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.SubmitTaskStateChangeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeSubmitTaskStateChangeWithContext(ctx context.Context, in *ecs.SubmitTaskStateChangeInput, _ ...request.Option) (*ecs.SubmitTaskStateChangeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SubmitTaskStateChange cancelled", ctx.Err())
	default:
		return d.SubmitTaskStateChange(in)
	}
}

func (d *ECSDouble) TagResource(i0 *ecs.TagResourceInput) (r0 *ecs.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*ecs.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) TagResourceRequest(i0 *ecs.TagResourceInput) (r0 *request.Request, r1 *ecs.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.TagResourceOutput)
	return
}

func (d *ECSDouble) TagResourceWithContext(i0 context.Context, i1 *ecs.TagResourceInput, i2 ...request.Option) (r0 *ecs.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeTagResourceWithContext(ctx context.Context, in *ecs.TagResourceInput, _ ...request.Option) (*ecs.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *ECSDouble) UntagResource(i0 *ecs.UntagResourceInput) (r0 *ecs.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*ecs.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) UntagResourceRequest(i0 *ecs.UntagResourceInput) (r0 *request.Request, r1 *ecs.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.UntagResourceOutput)
	return
}

func (d *ECSDouble) UntagResourceWithContext(i0 context.Context, i1 *ecs.UntagResourceInput, i2 ...request.Option) (r0 *ecs.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeUntagResourceWithContext(ctx context.Context, in *ecs.UntagResourceInput, _ ...request.Option) (*ecs.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *ECSDouble) UpdateClusterSettings(i0 *ecs.UpdateClusterSettingsInput) (r0 *ecs.UpdateClusterSettingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateClusterSettings", i0)
	r0, _ = returns[0].(*ecs.UpdateClusterSettingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) UpdateClusterSettingsRequest(i0 *ecs.UpdateClusterSettingsInput) (r0 *request.Request, r1 *ecs.UpdateClusterSettingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateClusterSettingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.UpdateClusterSettingsOutput)
	return
}

func (d *ECSDouble) UpdateClusterSettingsWithContext(i0 context.Context, i1 *ecs.UpdateClusterSettingsInput, i2 ...request.Option) (r0 *ecs.UpdateClusterSettingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateClusterSettingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.UpdateClusterSettingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeUpdateClusterSettingsWithContext(ctx context.Context, in *ecs.UpdateClusterSettingsInput, _ ...request.Option) (*ecs.UpdateClusterSettingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateClusterSettings cancelled", ctx.Err())
	default:
		return d.UpdateClusterSettings(in)
	}
}

func (d *ECSDouble) UpdateContainerAgent(i0 *ecs.UpdateContainerAgentInput) (r0 *ecs.UpdateContainerAgentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateContainerAgent", i0)
	r0, _ = returns[0].(*ecs.UpdateContainerAgentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) UpdateContainerAgentRequest(i0 *ecs.UpdateContainerAgentInput) (r0 *request.Request, r1 *ecs.UpdateContainerAgentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateContainerAgentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.UpdateContainerAgentOutput)
	return
}

func (d *ECSDouble) UpdateContainerAgentWithContext(i0 context.Context, i1 *ecs.UpdateContainerAgentInput, i2 ...request.Option) (r0 *ecs.UpdateContainerAgentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateContainerAgentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.UpdateContainerAgentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeUpdateContainerAgentWithContext(ctx context.Context, in *ecs.UpdateContainerAgentInput, _ ...request.Option) (*ecs.UpdateContainerAgentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateContainerAgent cancelled", ctx.Err())
	default:
		return d.UpdateContainerAgent(in)
	}
}

func (d *ECSDouble) UpdateContainerInstancesState(i0 *ecs.UpdateContainerInstancesStateInput) (r0 *ecs.UpdateContainerInstancesStateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateContainerInstancesState", i0)
	r0, _ = returns[0].(*ecs.UpdateContainerInstancesStateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) UpdateContainerInstancesStateRequest(i0 *ecs.UpdateContainerInstancesStateInput) (r0 *request.Request, r1 *ecs.UpdateContainerInstancesStateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateContainerInstancesStateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.UpdateContainerInstancesStateOutput)
	return
}

func (d *ECSDouble) UpdateContainerInstancesStateWithContext(i0 context.Context, i1 *ecs.UpdateContainerInstancesStateInput, i2 ...request.Option) (r0 *ecs.UpdateContainerInstancesStateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateContainerInstancesStateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.UpdateContainerInstancesStateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeUpdateContainerInstancesStateWithContext(ctx context.Context, in *ecs.UpdateContainerInstancesStateInput, _ ...request.Option) (*ecs.UpdateContainerInstancesStateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateContainerInstancesState cancelled", ctx.Err())
	default:
		return d.UpdateContainerInstancesState(in)
	}
}

func (d *ECSDouble) UpdateService(i0 *ecs.UpdateServiceInput) (r0 *ecs.UpdateServiceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateService", i0)
	r0, _ = returns[0].(*ecs.UpdateServiceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) UpdateServicePrimaryTaskSet(i0 *ecs.UpdateServicePrimaryTaskSetInput) (r0 *ecs.UpdateServicePrimaryTaskSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateServicePrimaryTaskSet", i0)
	r0, _ = returns[0].(*ecs.UpdateServicePrimaryTaskSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) UpdateServicePrimaryTaskSetRequest(i0 *ecs.UpdateServicePrimaryTaskSetInput) (r0 *request.Request, r1 *ecs.UpdateServicePrimaryTaskSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateServicePrimaryTaskSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.UpdateServicePrimaryTaskSetOutput)
	return
}

func (d *ECSDouble) UpdateServicePrimaryTaskSetWithContext(i0 context.Context, i1 *ecs.UpdateServicePrimaryTaskSetInput, i2 ...request.Option) (r0 *ecs.UpdateServicePrimaryTaskSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateServicePrimaryTaskSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.UpdateServicePrimaryTaskSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeUpdateServicePrimaryTaskSetWithContext(ctx context.Context, in *ecs.UpdateServicePrimaryTaskSetInput, _ ...request.Option) (*ecs.UpdateServicePrimaryTaskSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateServicePrimaryTaskSet cancelled", ctx.Err())
	default:
		return d.UpdateServicePrimaryTaskSet(in)
	}
}

func (d *ECSDouble) UpdateServiceRequest(i0 *ecs.UpdateServiceInput) (r0 *request.Request, r1 *ecs.UpdateServiceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateServiceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.UpdateServiceOutput)
	return
}

func (d *ECSDouble) UpdateServiceWithContext(i0 context.Context, i1 *ecs.UpdateServiceInput, i2 ...request.Option) (r0 *ecs.UpdateServiceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateServiceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.UpdateServiceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeUpdateServiceWithContext(ctx context.Context, in *ecs.UpdateServiceInput, _ ...request.Option) (*ecs.UpdateServiceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateService cancelled", ctx.Err())
	default:
		return d.UpdateService(in)
	}
}

func (d *ECSDouble) UpdateTaskSet(i0 *ecs.UpdateTaskSetInput) (r0 *ecs.UpdateTaskSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTaskSet", i0)
	r0, _ = returns[0].(*ecs.UpdateTaskSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) UpdateTaskSetRequest(i0 *ecs.UpdateTaskSetInput) (r0 *request.Request, r1 *ecs.UpdateTaskSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTaskSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ecs.UpdateTaskSetOutput)
	return
}

func (d *ECSDouble) UpdateTaskSetWithContext(i0 context.Context, i1 *ecs.UpdateTaskSetInput, i2 ...request.Option) (r0 *ecs.UpdateTaskSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTaskSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ecs.UpdateTaskSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *ECSDouble) fakeUpdateTaskSetWithContext(ctx context.Context, in *ecs.UpdateTaskSetInput, _ ...request.Option) (*ecs.UpdateTaskSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateTaskSet cancelled", ctx.Err())
	default:
		return d.UpdateTaskSet(in)
	}
}

func (d *ECSDouble) WaitUntilServicesInactive(i0 *ecs.DescribeServicesInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilServicesInactive", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *ECSDouble) fakeWaitUntilServicesInactive(in *ecs.DescribeServicesInput) error {
	return d.WaitUntil("ServicesInactive", waiters, in)
}

func (d *ECSDouble) WaitUntilServicesInactiveWithContext(i0 context.Context, i1 *ecs.DescribeServicesInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilServicesInactiveWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *ECSDouble) fakeWaitUntilServicesInactiveWithContext(ctx context.Context, in *ecs.DescribeServicesInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("ServicesInactive", waiters, ctx, in, waitOption...)
}

func (d *ECSDouble) WaitUntilServicesStable(i0 *ecs.DescribeServicesInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilServicesStable", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *ECSDouble) fakeWaitUntilServicesStable(in *ecs.DescribeServicesInput) error {
	return d.WaitUntil("ServicesStable", waiters, in)
}

func (d *ECSDouble) WaitUntilServicesStableWithContext(i0 context.Context, i1 *ecs.DescribeServicesInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilServicesStableWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *ECSDouble) fakeWaitUntilServicesStableWithContext(ctx context.Context, in *ecs.DescribeServicesInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("ServicesStable", waiters, ctx, in, waitOption...)
}

func (d *ECSDouble) WaitUntilTasksRunning(i0 *ecs.DescribeTasksInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilTasksRunning", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *ECSDouble) fakeWaitUntilTasksRunning(in *ecs.DescribeTasksInput) error {
	return d.WaitUntil("TasksRunning", waiters, in)
}

func (d *ECSDouble) WaitUntilTasksRunningWithContext(i0 context.Context, i1 *ecs.DescribeTasksInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilTasksRunningWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *ECSDouble) fakeWaitUntilTasksRunningWithContext(ctx context.Context, in *ecs.DescribeTasksInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("TasksRunning", waiters, ctx, in, waitOption...)
}

func (d *ECSDouble) WaitUntilTasksStopped(i0 *ecs.DescribeTasksInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilTasksStopped", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *ECSDouble) fakeWaitUntilTasksStopped(in *ecs.DescribeTasksInput) error {
	return d.WaitUntil("TasksStopped", waiters, in)
}

func (d *ECSDouble) WaitUntilTasksStoppedWithContext(i0 context.Context, i1 *ecs.DescribeTasksInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilTasksStoppedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *ECSDouble) fakeWaitUntilTasksStoppedWithContext(ctx context.Context, in *ecs.DescribeTasksInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("TasksStopped", waiters, ctx, in, waitOption...)
}
