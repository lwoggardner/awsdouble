// Code generated by go awsdoublegen; DO NOT EDIT.
// This file was generated at 2020-01-29T21:22:05+11:00
package ecsdouble

import (
	"time"

	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/lwoggardner/awsdouble"
)

var waiters = map[string]*awsdouble.Waiter{

	"ServicesInactive": &awsdouble.Waiter{
		OperationName: "DescribeServices",
		Waiter: request.Waiter{
			Name:        "WaitUntilServicesInactive",
			MaxAttempts: 40,
			Delay:       request.ConstantWaiterDelay(15 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "failures[].reason",
					Expected: "MISSING",
				},
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "services[].status",
					Expected: "INACTIVE",
				},
			},
		},
	},

	"ServicesStable": &awsdouble.Waiter{
		OperationName: "DescribeServices",
		Waiter: request.Waiter{
			Name:        "WaitUntilServicesStable",
			MaxAttempts: 40,
			Delay:       request.ConstantWaiterDelay(15 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "failures[].reason",
					Expected: "MISSING",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "services[].status",
					Expected: "DRAINING",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "services[].status",
					Expected: "INACTIVE",
				},
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "length(services[?!(length(deployments) == `1` && runningCount == desiredCount)]) == `0`",
					Expected: true,
				},
			},
		},
	},

	"TasksRunning": &awsdouble.Waiter{
		OperationName: "DescribeTasks",
		Waiter: request.Waiter{
			Name:        "WaitUntilTasksRunning",
			MaxAttempts: 100,
			Delay:       request.ConstantWaiterDelay(6 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "tasks[].lastStatus",
					Expected: "STOPPED",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "failures[].reason",
					Expected: "MISSING",
				},
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathAllWaiterMatch, Argument: "tasks[].lastStatus",
					Expected: "RUNNING",
				},
			},
		},
	},

	"TasksStopped": &awsdouble.Waiter{
		OperationName: "DescribeTasks",
		Waiter: request.Waiter{
			Name:        "WaitUntilTasksStopped",
			MaxAttempts: 100,
			Delay:       request.ConstantWaiterDelay(6 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathAllWaiterMatch, Argument: "tasks[].lastStatus",
					Expected: "STOPPED",
				},
			},
		},
	},
}
