// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:11:41+11:00

// Package cloudwatchdouble provides a TestDouble implementation of cloudwatchiface.CloudWatchAPI
package cloudwatchdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/cloudwatch"
	"github.com/aws/aws-sdk-go/service/cloudwatch/cloudwatchiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// CloudWatchDouble is TestDouble for cloudwatchiface.CloudWatchAPI
type CloudWatchDouble struct {
	cloudwatchiface.CloudWatchAPI
	*awsdouble.AWSTestDouble
}

// Constructor for CloudWatchDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *CloudWatchDouble {
	result := &CloudWatchDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*cloudwatchiface.CloudWatchAPI)(nil), configurators...)
	return result
}

func (d *CloudWatchDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *CloudWatchDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "DeleteAlarmsWithContext":
		return m.Fake(d.fakeDeleteAlarmsWithContext)

	case "DeleteAnomalyDetectorWithContext":
		return m.Fake(d.fakeDeleteAnomalyDetectorWithContext)

	case "DeleteDashboardsWithContext":
		return m.Fake(d.fakeDeleteDashboardsWithContext)

	case "DeleteInsightRulesWithContext":
		return m.Fake(d.fakeDeleteInsightRulesWithContext)

	case "DescribeAlarmHistoryPages":
		return m.Fake(d.fakeDescribeAlarmHistoryPages)

	case "DescribeAlarmHistoryPagesWithContext":
		return m.Fake(d.fakeDescribeAlarmHistoryPagesWithContext)

	case "DescribeAlarmHistoryWithContext":
		return m.Fake(d.fakeDescribeAlarmHistoryWithContext)

	case "DescribeAlarmsForMetricWithContext":
		return m.Fake(d.fakeDescribeAlarmsForMetricWithContext)

	case "DescribeAlarmsPages":
		return m.Fake(d.fakeDescribeAlarmsPages)

	case "DescribeAlarmsPagesWithContext":
		return m.Fake(d.fakeDescribeAlarmsPagesWithContext)

	case "DescribeAlarmsWithContext":
		return m.Fake(d.fakeDescribeAlarmsWithContext)

	case "DescribeAnomalyDetectorsWithContext":
		return m.Fake(d.fakeDescribeAnomalyDetectorsWithContext)

	case "DescribeInsightRulesPages":
		return m.Fake(d.fakeDescribeInsightRulesPages)

	case "DescribeInsightRulesPagesWithContext":
		return m.Fake(d.fakeDescribeInsightRulesPagesWithContext)

	case "DescribeInsightRulesWithContext":
		return m.Fake(d.fakeDescribeInsightRulesWithContext)

	case "DisableAlarmActionsWithContext":
		return m.Fake(d.fakeDisableAlarmActionsWithContext)

	case "DisableInsightRulesWithContext":
		return m.Fake(d.fakeDisableInsightRulesWithContext)

	case "EnableAlarmActionsWithContext":
		return m.Fake(d.fakeEnableAlarmActionsWithContext)

	case "EnableInsightRulesWithContext":
		return m.Fake(d.fakeEnableInsightRulesWithContext)

	case "GetDashboardWithContext":
		return m.Fake(d.fakeGetDashboardWithContext)

	case "GetInsightRuleReportWithContext":
		return m.Fake(d.fakeGetInsightRuleReportWithContext)

	case "GetMetricDataPages":
		return m.Fake(d.fakeGetMetricDataPages)

	case "GetMetricDataPagesWithContext":
		return m.Fake(d.fakeGetMetricDataPagesWithContext)

	case "GetMetricDataWithContext":
		return m.Fake(d.fakeGetMetricDataWithContext)

	case "GetMetricStatisticsWithContext":
		return m.Fake(d.fakeGetMetricStatisticsWithContext)

	case "GetMetricWidgetImageWithContext":
		return m.Fake(d.fakeGetMetricWidgetImageWithContext)

	case "ListDashboardsPages":
		return m.Fake(d.fakeListDashboardsPages)

	case "ListDashboardsPagesWithContext":
		return m.Fake(d.fakeListDashboardsPagesWithContext)

	case "ListDashboardsWithContext":
		return m.Fake(d.fakeListDashboardsWithContext)

	case "ListMetricsPages":
		return m.Fake(d.fakeListMetricsPages)

	case "ListMetricsPagesWithContext":
		return m.Fake(d.fakeListMetricsPagesWithContext)

	case "ListMetricsWithContext":
		return m.Fake(d.fakeListMetricsWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "PutAnomalyDetectorWithContext":
		return m.Fake(d.fakePutAnomalyDetectorWithContext)

	case "PutDashboardWithContext":
		return m.Fake(d.fakePutDashboardWithContext)

	case "PutInsightRuleWithContext":
		return m.Fake(d.fakePutInsightRuleWithContext)

	case "PutMetricAlarmWithContext":
		return m.Fake(d.fakePutMetricAlarmWithContext)

	case "PutMetricDataWithContext":
		return m.Fake(d.fakePutMetricDataWithContext)

	case "SetAlarmStateWithContext":
		return m.Fake(d.fakeSetAlarmStateWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "WaitUntilAlarmExists":
		return m.Fake(d.fakeWaitUntilAlarmExists)

	case "WaitUntilAlarmExistsWithContext":
		return m.Fake(d.fakeWaitUntilAlarmExistsWithContext)

	default:
		return nil
	}
}

func (d *CloudWatchDouble) DeleteAlarms(i0 *cloudwatch.DeleteAlarmsInput) (r0 *cloudwatch.DeleteAlarmsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAlarms", i0)
	r0, _ = returns[0].(*cloudwatch.DeleteAlarmsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) DeleteAlarmsRequest(i0 *cloudwatch.DeleteAlarmsInput) (r0 *request.Request, r1 *cloudwatch.DeleteAlarmsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAlarmsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatch.DeleteAlarmsOutput)
	return
}

func (d *CloudWatchDouble) DeleteAlarmsWithContext(i0 context.Context, i1 *cloudwatch.DeleteAlarmsInput, i2 ...request.Option) (r0 *cloudwatch.DeleteAlarmsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAlarmsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatch.DeleteAlarmsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) fakeDeleteAlarmsWithContext(ctx context.Context, in *cloudwatch.DeleteAlarmsInput, _ ...request.Option) (*cloudwatch.DeleteAlarmsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteAlarms cancelled", ctx.Err())
	default:
		return d.DeleteAlarms(in)
	}
}

func (d *CloudWatchDouble) DeleteAnomalyDetector(i0 *cloudwatch.DeleteAnomalyDetectorInput) (r0 *cloudwatch.DeleteAnomalyDetectorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAnomalyDetector", i0)
	r0, _ = returns[0].(*cloudwatch.DeleteAnomalyDetectorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) DeleteAnomalyDetectorRequest(i0 *cloudwatch.DeleteAnomalyDetectorInput) (r0 *request.Request, r1 *cloudwatch.DeleteAnomalyDetectorOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAnomalyDetectorRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatch.DeleteAnomalyDetectorOutput)
	return
}

func (d *CloudWatchDouble) DeleteAnomalyDetectorWithContext(i0 context.Context, i1 *cloudwatch.DeleteAnomalyDetectorInput, i2 ...request.Option) (r0 *cloudwatch.DeleteAnomalyDetectorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAnomalyDetectorWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatch.DeleteAnomalyDetectorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) fakeDeleteAnomalyDetectorWithContext(ctx context.Context, in *cloudwatch.DeleteAnomalyDetectorInput, _ ...request.Option) (*cloudwatch.DeleteAnomalyDetectorOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteAnomalyDetector cancelled", ctx.Err())
	default:
		return d.DeleteAnomalyDetector(in)
	}
}

func (d *CloudWatchDouble) DeleteDashboards(i0 *cloudwatch.DeleteDashboardsInput) (r0 *cloudwatch.DeleteDashboardsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDashboards", i0)
	r0, _ = returns[0].(*cloudwatch.DeleteDashboardsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) DeleteDashboardsRequest(i0 *cloudwatch.DeleteDashboardsInput) (r0 *request.Request, r1 *cloudwatch.DeleteDashboardsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDashboardsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatch.DeleteDashboardsOutput)
	return
}

func (d *CloudWatchDouble) DeleteDashboardsWithContext(i0 context.Context, i1 *cloudwatch.DeleteDashboardsInput, i2 ...request.Option) (r0 *cloudwatch.DeleteDashboardsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDashboardsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatch.DeleteDashboardsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) fakeDeleteDashboardsWithContext(ctx context.Context, in *cloudwatch.DeleteDashboardsInput, _ ...request.Option) (*cloudwatch.DeleteDashboardsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDashboards cancelled", ctx.Err())
	default:
		return d.DeleteDashboards(in)
	}
}

func (d *CloudWatchDouble) DeleteInsightRules(i0 *cloudwatch.DeleteInsightRulesInput) (r0 *cloudwatch.DeleteInsightRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInsightRules", i0)
	r0, _ = returns[0].(*cloudwatch.DeleteInsightRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) DeleteInsightRulesRequest(i0 *cloudwatch.DeleteInsightRulesInput) (r0 *request.Request, r1 *cloudwatch.DeleteInsightRulesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInsightRulesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatch.DeleteInsightRulesOutput)
	return
}

func (d *CloudWatchDouble) DeleteInsightRulesWithContext(i0 context.Context, i1 *cloudwatch.DeleteInsightRulesInput, i2 ...request.Option) (r0 *cloudwatch.DeleteInsightRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInsightRulesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatch.DeleteInsightRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) fakeDeleteInsightRulesWithContext(ctx context.Context, in *cloudwatch.DeleteInsightRulesInput, _ ...request.Option) (*cloudwatch.DeleteInsightRulesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteInsightRules cancelled", ctx.Err())
	default:
		return d.DeleteInsightRules(in)
	}
}

func (d *CloudWatchDouble) DescribeAlarmHistory(i0 *cloudwatch.DescribeAlarmHistoryInput) (r0 *cloudwatch.DescribeAlarmHistoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAlarmHistory", i0)
	r0, _ = returns[0].(*cloudwatch.DescribeAlarmHistoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) DescribeAlarmHistoryPages(i0 *cloudwatch.DescribeAlarmHistoryInput, i1 func(*cloudwatch.DescribeAlarmHistoryOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAlarmHistoryPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudWatchDouble) fakeDescribeAlarmHistoryPages(in *cloudwatch.DescribeAlarmHistoryInput, pager func(*cloudwatch.DescribeAlarmHistoryOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeAlarmHistory", paginators, in, pager)
}

func (d *CloudWatchDouble) DescribeAlarmHistoryPagesWithContext(i0 context.Context, i1 *cloudwatch.DescribeAlarmHistoryInput, i2 func(*cloudwatch.DescribeAlarmHistoryOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAlarmHistoryPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudWatchDouble) fakeDescribeAlarmHistoryPagesWithContext(ctx context.Context, in *cloudwatch.DescribeAlarmHistoryInput, pager func(*cloudwatch.DescribeAlarmHistoryOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeAlarmHistory", paginators, ctx, in, pager, options...)
}

func (d *CloudWatchDouble) DescribeAlarmHistoryRequest(i0 *cloudwatch.DescribeAlarmHistoryInput) (r0 *request.Request, r1 *cloudwatch.DescribeAlarmHistoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAlarmHistoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatch.DescribeAlarmHistoryOutput)
	return
}

func (d *CloudWatchDouble) DescribeAlarmHistoryWithContext(i0 context.Context, i1 *cloudwatch.DescribeAlarmHistoryInput, i2 ...request.Option) (r0 *cloudwatch.DescribeAlarmHistoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAlarmHistoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatch.DescribeAlarmHistoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) fakeDescribeAlarmHistoryWithContext(ctx context.Context, in *cloudwatch.DescribeAlarmHistoryInput, _ ...request.Option) (*cloudwatch.DescribeAlarmHistoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAlarmHistory cancelled", ctx.Err())
	default:
		return d.DescribeAlarmHistory(in)
	}
}

func (d *CloudWatchDouble) DescribeAlarms(i0 *cloudwatch.DescribeAlarmsInput) (r0 *cloudwatch.DescribeAlarmsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAlarms", i0)
	r0, _ = returns[0].(*cloudwatch.DescribeAlarmsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) DescribeAlarmsForMetric(i0 *cloudwatch.DescribeAlarmsForMetricInput) (r0 *cloudwatch.DescribeAlarmsForMetricOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAlarmsForMetric", i0)
	r0, _ = returns[0].(*cloudwatch.DescribeAlarmsForMetricOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) DescribeAlarmsForMetricRequest(i0 *cloudwatch.DescribeAlarmsForMetricInput) (r0 *request.Request, r1 *cloudwatch.DescribeAlarmsForMetricOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAlarmsForMetricRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatch.DescribeAlarmsForMetricOutput)
	return
}

func (d *CloudWatchDouble) DescribeAlarmsForMetricWithContext(i0 context.Context, i1 *cloudwatch.DescribeAlarmsForMetricInput, i2 ...request.Option) (r0 *cloudwatch.DescribeAlarmsForMetricOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAlarmsForMetricWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatch.DescribeAlarmsForMetricOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) fakeDescribeAlarmsForMetricWithContext(ctx context.Context, in *cloudwatch.DescribeAlarmsForMetricInput, _ ...request.Option) (*cloudwatch.DescribeAlarmsForMetricOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAlarmsForMetric cancelled", ctx.Err())
	default:
		return d.DescribeAlarmsForMetric(in)
	}
}

func (d *CloudWatchDouble) DescribeAlarmsPages(i0 *cloudwatch.DescribeAlarmsInput, i1 func(*cloudwatch.DescribeAlarmsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAlarmsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudWatchDouble) fakeDescribeAlarmsPages(in *cloudwatch.DescribeAlarmsInput, pager func(*cloudwatch.DescribeAlarmsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeAlarms", paginators, in, pager)
}

func (d *CloudWatchDouble) DescribeAlarmsPagesWithContext(i0 context.Context, i1 *cloudwatch.DescribeAlarmsInput, i2 func(*cloudwatch.DescribeAlarmsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAlarmsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudWatchDouble) fakeDescribeAlarmsPagesWithContext(ctx context.Context, in *cloudwatch.DescribeAlarmsInput, pager func(*cloudwatch.DescribeAlarmsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeAlarms", paginators, ctx, in, pager, options...)
}

func (d *CloudWatchDouble) DescribeAlarmsRequest(i0 *cloudwatch.DescribeAlarmsInput) (r0 *request.Request, r1 *cloudwatch.DescribeAlarmsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAlarmsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatch.DescribeAlarmsOutput)
	return
}

func (d *CloudWatchDouble) DescribeAlarmsWithContext(i0 context.Context, i1 *cloudwatch.DescribeAlarmsInput, i2 ...request.Option) (r0 *cloudwatch.DescribeAlarmsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAlarmsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatch.DescribeAlarmsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) fakeDescribeAlarmsWithContext(ctx context.Context, in *cloudwatch.DescribeAlarmsInput, _ ...request.Option) (*cloudwatch.DescribeAlarmsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAlarms cancelled", ctx.Err())
	default:
		return d.DescribeAlarms(in)
	}
}

func (d *CloudWatchDouble) DescribeAnomalyDetectors(i0 *cloudwatch.DescribeAnomalyDetectorsInput) (r0 *cloudwatch.DescribeAnomalyDetectorsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAnomalyDetectors", i0)
	r0, _ = returns[0].(*cloudwatch.DescribeAnomalyDetectorsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) DescribeAnomalyDetectorsRequest(i0 *cloudwatch.DescribeAnomalyDetectorsInput) (r0 *request.Request, r1 *cloudwatch.DescribeAnomalyDetectorsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAnomalyDetectorsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatch.DescribeAnomalyDetectorsOutput)
	return
}

func (d *CloudWatchDouble) DescribeAnomalyDetectorsWithContext(i0 context.Context, i1 *cloudwatch.DescribeAnomalyDetectorsInput, i2 ...request.Option) (r0 *cloudwatch.DescribeAnomalyDetectorsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAnomalyDetectorsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatch.DescribeAnomalyDetectorsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) fakeDescribeAnomalyDetectorsWithContext(ctx context.Context, in *cloudwatch.DescribeAnomalyDetectorsInput, _ ...request.Option) (*cloudwatch.DescribeAnomalyDetectorsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAnomalyDetectors cancelled", ctx.Err())
	default:
		return d.DescribeAnomalyDetectors(in)
	}
}

func (d *CloudWatchDouble) DescribeInsightRules(i0 *cloudwatch.DescribeInsightRulesInput) (r0 *cloudwatch.DescribeInsightRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInsightRules", i0)
	r0, _ = returns[0].(*cloudwatch.DescribeInsightRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) DescribeInsightRulesPages(i0 *cloudwatch.DescribeInsightRulesInput, i1 func(*cloudwatch.DescribeInsightRulesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInsightRulesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudWatchDouble) fakeDescribeInsightRulesPages(in *cloudwatch.DescribeInsightRulesInput, pager func(*cloudwatch.DescribeInsightRulesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeInsightRules", paginators, in, pager)
}

func (d *CloudWatchDouble) DescribeInsightRulesPagesWithContext(i0 context.Context, i1 *cloudwatch.DescribeInsightRulesInput, i2 func(*cloudwatch.DescribeInsightRulesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInsightRulesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudWatchDouble) fakeDescribeInsightRulesPagesWithContext(ctx context.Context, in *cloudwatch.DescribeInsightRulesInput, pager func(*cloudwatch.DescribeInsightRulesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeInsightRules", paginators, ctx, in, pager, options...)
}

func (d *CloudWatchDouble) DescribeInsightRulesRequest(i0 *cloudwatch.DescribeInsightRulesInput) (r0 *request.Request, r1 *cloudwatch.DescribeInsightRulesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInsightRulesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatch.DescribeInsightRulesOutput)
	return
}

func (d *CloudWatchDouble) DescribeInsightRulesWithContext(i0 context.Context, i1 *cloudwatch.DescribeInsightRulesInput, i2 ...request.Option) (r0 *cloudwatch.DescribeInsightRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInsightRulesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatch.DescribeInsightRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) fakeDescribeInsightRulesWithContext(ctx context.Context, in *cloudwatch.DescribeInsightRulesInput, _ ...request.Option) (*cloudwatch.DescribeInsightRulesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeInsightRules cancelled", ctx.Err())
	default:
		return d.DescribeInsightRules(in)
	}
}

func (d *CloudWatchDouble) DisableAlarmActions(i0 *cloudwatch.DisableAlarmActionsInput) (r0 *cloudwatch.DisableAlarmActionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableAlarmActions", i0)
	r0, _ = returns[0].(*cloudwatch.DisableAlarmActionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) DisableAlarmActionsRequest(i0 *cloudwatch.DisableAlarmActionsInput) (r0 *request.Request, r1 *cloudwatch.DisableAlarmActionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableAlarmActionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatch.DisableAlarmActionsOutput)
	return
}

func (d *CloudWatchDouble) DisableAlarmActionsWithContext(i0 context.Context, i1 *cloudwatch.DisableAlarmActionsInput, i2 ...request.Option) (r0 *cloudwatch.DisableAlarmActionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableAlarmActionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatch.DisableAlarmActionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) fakeDisableAlarmActionsWithContext(ctx context.Context, in *cloudwatch.DisableAlarmActionsInput, _ ...request.Option) (*cloudwatch.DisableAlarmActionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisableAlarmActions cancelled", ctx.Err())
	default:
		return d.DisableAlarmActions(in)
	}
}

func (d *CloudWatchDouble) DisableInsightRules(i0 *cloudwatch.DisableInsightRulesInput) (r0 *cloudwatch.DisableInsightRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableInsightRules", i0)
	r0, _ = returns[0].(*cloudwatch.DisableInsightRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) DisableInsightRulesRequest(i0 *cloudwatch.DisableInsightRulesInput) (r0 *request.Request, r1 *cloudwatch.DisableInsightRulesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableInsightRulesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatch.DisableInsightRulesOutput)
	return
}

func (d *CloudWatchDouble) DisableInsightRulesWithContext(i0 context.Context, i1 *cloudwatch.DisableInsightRulesInput, i2 ...request.Option) (r0 *cloudwatch.DisableInsightRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableInsightRulesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatch.DisableInsightRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) fakeDisableInsightRulesWithContext(ctx context.Context, in *cloudwatch.DisableInsightRulesInput, _ ...request.Option) (*cloudwatch.DisableInsightRulesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisableInsightRules cancelled", ctx.Err())
	default:
		return d.DisableInsightRules(in)
	}
}

func (d *CloudWatchDouble) EnableAlarmActions(i0 *cloudwatch.EnableAlarmActionsInput) (r0 *cloudwatch.EnableAlarmActionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableAlarmActions", i0)
	r0, _ = returns[0].(*cloudwatch.EnableAlarmActionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) EnableAlarmActionsRequest(i0 *cloudwatch.EnableAlarmActionsInput) (r0 *request.Request, r1 *cloudwatch.EnableAlarmActionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableAlarmActionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatch.EnableAlarmActionsOutput)
	return
}

func (d *CloudWatchDouble) EnableAlarmActionsWithContext(i0 context.Context, i1 *cloudwatch.EnableAlarmActionsInput, i2 ...request.Option) (r0 *cloudwatch.EnableAlarmActionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableAlarmActionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatch.EnableAlarmActionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) fakeEnableAlarmActionsWithContext(ctx context.Context, in *cloudwatch.EnableAlarmActionsInput, _ ...request.Option) (*cloudwatch.EnableAlarmActionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "EnableAlarmActions cancelled", ctx.Err())
	default:
		return d.EnableAlarmActions(in)
	}
}

func (d *CloudWatchDouble) EnableInsightRules(i0 *cloudwatch.EnableInsightRulesInput) (r0 *cloudwatch.EnableInsightRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableInsightRules", i0)
	r0, _ = returns[0].(*cloudwatch.EnableInsightRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) EnableInsightRulesRequest(i0 *cloudwatch.EnableInsightRulesInput) (r0 *request.Request, r1 *cloudwatch.EnableInsightRulesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableInsightRulesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatch.EnableInsightRulesOutput)
	return
}

func (d *CloudWatchDouble) EnableInsightRulesWithContext(i0 context.Context, i1 *cloudwatch.EnableInsightRulesInput, i2 ...request.Option) (r0 *cloudwatch.EnableInsightRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableInsightRulesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatch.EnableInsightRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) fakeEnableInsightRulesWithContext(ctx context.Context, in *cloudwatch.EnableInsightRulesInput, _ ...request.Option) (*cloudwatch.EnableInsightRulesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "EnableInsightRules cancelled", ctx.Err())
	default:
		return d.EnableInsightRules(in)
	}
}

func (d *CloudWatchDouble) GetDashboard(i0 *cloudwatch.GetDashboardInput) (r0 *cloudwatch.GetDashboardOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDashboard", i0)
	r0, _ = returns[0].(*cloudwatch.GetDashboardOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) GetDashboardRequest(i0 *cloudwatch.GetDashboardInput) (r0 *request.Request, r1 *cloudwatch.GetDashboardOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDashboardRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatch.GetDashboardOutput)
	return
}

func (d *CloudWatchDouble) GetDashboardWithContext(i0 context.Context, i1 *cloudwatch.GetDashboardInput, i2 ...request.Option) (r0 *cloudwatch.GetDashboardOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDashboardWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatch.GetDashboardOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) fakeGetDashboardWithContext(ctx context.Context, in *cloudwatch.GetDashboardInput, _ ...request.Option) (*cloudwatch.GetDashboardOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDashboard cancelled", ctx.Err())
	default:
		return d.GetDashboard(in)
	}
}

func (d *CloudWatchDouble) GetInsightRuleReport(i0 *cloudwatch.GetInsightRuleReportInput) (r0 *cloudwatch.GetInsightRuleReportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInsightRuleReport", i0)
	r0, _ = returns[0].(*cloudwatch.GetInsightRuleReportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) GetInsightRuleReportRequest(i0 *cloudwatch.GetInsightRuleReportInput) (r0 *request.Request, r1 *cloudwatch.GetInsightRuleReportOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInsightRuleReportRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatch.GetInsightRuleReportOutput)
	return
}

func (d *CloudWatchDouble) GetInsightRuleReportWithContext(i0 context.Context, i1 *cloudwatch.GetInsightRuleReportInput, i2 ...request.Option) (r0 *cloudwatch.GetInsightRuleReportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInsightRuleReportWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatch.GetInsightRuleReportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) fakeGetInsightRuleReportWithContext(ctx context.Context, in *cloudwatch.GetInsightRuleReportInput, _ ...request.Option) (*cloudwatch.GetInsightRuleReportOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetInsightRuleReport cancelled", ctx.Err())
	default:
		return d.GetInsightRuleReport(in)
	}
}

func (d *CloudWatchDouble) GetMetricData(i0 *cloudwatch.GetMetricDataInput) (r0 *cloudwatch.GetMetricDataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMetricData", i0)
	r0, _ = returns[0].(*cloudwatch.GetMetricDataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) GetMetricDataPages(i0 *cloudwatch.GetMetricDataInput, i1 func(*cloudwatch.GetMetricDataOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMetricDataPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudWatchDouble) fakeGetMetricDataPages(in *cloudwatch.GetMetricDataInput, pager func(*cloudwatch.GetMetricDataOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetMetricData", paginators, in, pager)
}

func (d *CloudWatchDouble) GetMetricDataPagesWithContext(i0 context.Context, i1 *cloudwatch.GetMetricDataInput, i2 func(*cloudwatch.GetMetricDataOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMetricDataPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudWatchDouble) fakeGetMetricDataPagesWithContext(ctx context.Context, in *cloudwatch.GetMetricDataInput, pager func(*cloudwatch.GetMetricDataOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetMetricData", paginators, ctx, in, pager, options...)
}

func (d *CloudWatchDouble) GetMetricDataRequest(i0 *cloudwatch.GetMetricDataInput) (r0 *request.Request, r1 *cloudwatch.GetMetricDataOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMetricDataRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatch.GetMetricDataOutput)
	return
}

func (d *CloudWatchDouble) GetMetricDataWithContext(i0 context.Context, i1 *cloudwatch.GetMetricDataInput, i2 ...request.Option) (r0 *cloudwatch.GetMetricDataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMetricDataWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatch.GetMetricDataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) fakeGetMetricDataWithContext(ctx context.Context, in *cloudwatch.GetMetricDataInput, _ ...request.Option) (*cloudwatch.GetMetricDataOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetMetricData cancelled", ctx.Err())
	default:
		return d.GetMetricData(in)
	}
}

func (d *CloudWatchDouble) GetMetricStatistics(i0 *cloudwatch.GetMetricStatisticsInput) (r0 *cloudwatch.GetMetricStatisticsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMetricStatistics", i0)
	r0, _ = returns[0].(*cloudwatch.GetMetricStatisticsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) GetMetricStatisticsRequest(i0 *cloudwatch.GetMetricStatisticsInput) (r0 *request.Request, r1 *cloudwatch.GetMetricStatisticsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMetricStatisticsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatch.GetMetricStatisticsOutput)
	return
}

func (d *CloudWatchDouble) GetMetricStatisticsWithContext(i0 context.Context, i1 *cloudwatch.GetMetricStatisticsInput, i2 ...request.Option) (r0 *cloudwatch.GetMetricStatisticsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMetricStatisticsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatch.GetMetricStatisticsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) fakeGetMetricStatisticsWithContext(ctx context.Context, in *cloudwatch.GetMetricStatisticsInput, _ ...request.Option) (*cloudwatch.GetMetricStatisticsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetMetricStatistics cancelled", ctx.Err())
	default:
		return d.GetMetricStatistics(in)
	}
}

func (d *CloudWatchDouble) GetMetricWidgetImage(i0 *cloudwatch.GetMetricWidgetImageInput) (r0 *cloudwatch.GetMetricWidgetImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMetricWidgetImage", i0)
	r0, _ = returns[0].(*cloudwatch.GetMetricWidgetImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) GetMetricWidgetImageRequest(i0 *cloudwatch.GetMetricWidgetImageInput) (r0 *request.Request, r1 *cloudwatch.GetMetricWidgetImageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMetricWidgetImageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatch.GetMetricWidgetImageOutput)
	return
}

func (d *CloudWatchDouble) GetMetricWidgetImageWithContext(i0 context.Context, i1 *cloudwatch.GetMetricWidgetImageInput, i2 ...request.Option) (r0 *cloudwatch.GetMetricWidgetImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMetricWidgetImageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatch.GetMetricWidgetImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) fakeGetMetricWidgetImageWithContext(ctx context.Context, in *cloudwatch.GetMetricWidgetImageInput, _ ...request.Option) (*cloudwatch.GetMetricWidgetImageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetMetricWidgetImage cancelled", ctx.Err())
	default:
		return d.GetMetricWidgetImage(in)
	}
}

func (d *CloudWatchDouble) ListDashboards(i0 *cloudwatch.ListDashboardsInput) (r0 *cloudwatch.ListDashboardsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDashboards", i0)
	r0, _ = returns[0].(*cloudwatch.ListDashboardsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) ListDashboardsPages(i0 *cloudwatch.ListDashboardsInput, i1 func(*cloudwatch.ListDashboardsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDashboardsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudWatchDouble) fakeListDashboardsPages(in *cloudwatch.ListDashboardsInput, pager func(*cloudwatch.ListDashboardsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListDashboards", paginators, in, pager)
}

func (d *CloudWatchDouble) ListDashboardsPagesWithContext(i0 context.Context, i1 *cloudwatch.ListDashboardsInput, i2 func(*cloudwatch.ListDashboardsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDashboardsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudWatchDouble) fakeListDashboardsPagesWithContext(ctx context.Context, in *cloudwatch.ListDashboardsInput, pager func(*cloudwatch.ListDashboardsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListDashboards", paginators, ctx, in, pager, options...)
}

func (d *CloudWatchDouble) ListDashboardsRequest(i0 *cloudwatch.ListDashboardsInput) (r0 *request.Request, r1 *cloudwatch.ListDashboardsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDashboardsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatch.ListDashboardsOutput)
	return
}

func (d *CloudWatchDouble) ListDashboardsWithContext(i0 context.Context, i1 *cloudwatch.ListDashboardsInput, i2 ...request.Option) (r0 *cloudwatch.ListDashboardsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDashboardsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatch.ListDashboardsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) fakeListDashboardsWithContext(ctx context.Context, in *cloudwatch.ListDashboardsInput, _ ...request.Option) (*cloudwatch.ListDashboardsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDashboards cancelled", ctx.Err())
	default:
		return d.ListDashboards(in)
	}
}

func (d *CloudWatchDouble) ListMetrics(i0 *cloudwatch.ListMetricsInput) (r0 *cloudwatch.ListMetricsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMetrics", i0)
	r0, _ = returns[0].(*cloudwatch.ListMetricsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) ListMetricsPages(i0 *cloudwatch.ListMetricsInput, i1 func(*cloudwatch.ListMetricsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMetricsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudWatchDouble) fakeListMetricsPages(in *cloudwatch.ListMetricsInput, pager func(*cloudwatch.ListMetricsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListMetrics", paginators, in, pager)
}

func (d *CloudWatchDouble) ListMetricsPagesWithContext(i0 context.Context, i1 *cloudwatch.ListMetricsInput, i2 func(*cloudwatch.ListMetricsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMetricsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudWatchDouble) fakeListMetricsPagesWithContext(ctx context.Context, in *cloudwatch.ListMetricsInput, pager func(*cloudwatch.ListMetricsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListMetrics", paginators, ctx, in, pager, options...)
}

func (d *CloudWatchDouble) ListMetricsRequest(i0 *cloudwatch.ListMetricsInput) (r0 *request.Request, r1 *cloudwatch.ListMetricsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMetricsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatch.ListMetricsOutput)
	return
}

func (d *CloudWatchDouble) ListMetricsWithContext(i0 context.Context, i1 *cloudwatch.ListMetricsInput, i2 ...request.Option) (r0 *cloudwatch.ListMetricsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMetricsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatch.ListMetricsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) fakeListMetricsWithContext(ctx context.Context, in *cloudwatch.ListMetricsInput, _ ...request.Option) (*cloudwatch.ListMetricsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListMetrics cancelled", ctx.Err())
	default:
		return d.ListMetrics(in)
	}
}

func (d *CloudWatchDouble) ListTagsForResource(i0 *cloudwatch.ListTagsForResourceInput) (r0 *cloudwatch.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*cloudwatch.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) ListTagsForResourceRequest(i0 *cloudwatch.ListTagsForResourceInput) (r0 *request.Request, r1 *cloudwatch.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatch.ListTagsForResourceOutput)
	return
}

func (d *CloudWatchDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *cloudwatch.ListTagsForResourceInput, i2 ...request.Option) (r0 *cloudwatch.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatch.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *cloudwatch.ListTagsForResourceInput, _ ...request.Option) (*cloudwatch.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *CloudWatchDouble) PutAnomalyDetector(i0 *cloudwatch.PutAnomalyDetectorInput) (r0 *cloudwatch.PutAnomalyDetectorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutAnomalyDetector", i0)
	r0, _ = returns[0].(*cloudwatch.PutAnomalyDetectorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) PutAnomalyDetectorRequest(i0 *cloudwatch.PutAnomalyDetectorInput) (r0 *request.Request, r1 *cloudwatch.PutAnomalyDetectorOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutAnomalyDetectorRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatch.PutAnomalyDetectorOutput)
	return
}

func (d *CloudWatchDouble) PutAnomalyDetectorWithContext(i0 context.Context, i1 *cloudwatch.PutAnomalyDetectorInput, i2 ...request.Option) (r0 *cloudwatch.PutAnomalyDetectorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutAnomalyDetectorWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatch.PutAnomalyDetectorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) fakePutAnomalyDetectorWithContext(ctx context.Context, in *cloudwatch.PutAnomalyDetectorInput, _ ...request.Option) (*cloudwatch.PutAnomalyDetectorOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutAnomalyDetector cancelled", ctx.Err())
	default:
		return d.PutAnomalyDetector(in)
	}
}

func (d *CloudWatchDouble) PutDashboard(i0 *cloudwatch.PutDashboardInput) (r0 *cloudwatch.PutDashboardOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutDashboard", i0)
	r0, _ = returns[0].(*cloudwatch.PutDashboardOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) PutDashboardRequest(i0 *cloudwatch.PutDashboardInput) (r0 *request.Request, r1 *cloudwatch.PutDashboardOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutDashboardRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatch.PutDashboardOutput)
	return
}

func (d *CloudWatchDouble) PutDashboardWithContext(i0 context.Context, i1 *cloudwatch.PutDashboardInput, i2 ...request.Option) (r0 *cloudwatch.PutDashboardOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutDashboardWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatch.PutDashboardOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) fakePutDashboardWithContext(ctx context.Context, in *cloudwatch.PutDashboardInput, _ ...request.Option) (*cloudwatch.PutDashboardOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutDashboard cancelled", ctx.Err())
	default:
		return d.PutDashboard(in)
	}
}

func (d *CloudWatchDouble) PutInsightRule(i0 *cloudwatch.PutInsightRuleInput) (r0 *cloudwatch.PutInsightRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutInsightRule", i0)
	r0, _ = returns[0].(*cloudwatch.PutInsightRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) PutInsightRuleRequest(i0 *cloudwatch.PutInsightRuleInput) (r0 *request.Request, r1 *cloudwatch.PutInsightRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutInsightRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatch.PutInsightRuleOutput)
	return
}

func (d *CloudWatchDouble) PutInsightRuleWithContext(i0 context.Context, i1 *cloudwatch.PutInsightRuleInput, i2 ...request.Option) (r0 *cloudwatch.PutInsightRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutInsightRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatch.PutInsightRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) fakePutInsightRuleWithContext(ctx context.Context, in *cloudwatch.PutInsightRuleInput, _ ...request.Option) (*cloudwatch.PutInsightRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutInsightRule cancelled", ctx.Err())
	default:
		return d.PutInsightRule(in)
	}
}

func (d *CloudWatchDouble) PutMetricAlarm(i0 *cloudwatch.PutMetricAlarmInput) (r0 *cloudwatch.PutMetricAlarmOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutMetricAlarm", i0)
	r0, _ = returns[0].(*cloudwatch.PutMetricAlarmOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) PutMetricAlarmRequest(i0 *cloudwatch.PutMetricAlarmInput) (r0 *request.Request, r1 *cloudwatch.PutMetricAlarmOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutMetricAlarmRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatch.PutMetricAlarmOutput)
	return
}

func (d *CloudWatchDouble) PutMetricAlarmWithContext(i0 context.Context, i1 *cloudwatch.PutMetricAlarmInput, i2 ...request.Option) (r0 *cloudwatch.PutMetricAlarmOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutMetricAlarmWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatch.PutMetricAlarmOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) fakePutMetricAlarmWithContext(ctx context.Context, in *cloudwatch.PutMetricAlarmInput, _ ...request.Option) (*cloudwatch.PutMetricAlarmOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutMetricAlarm cancelled", ctx.Err())
	default:
		return d.PutMetricAlarm(in)
	}
}

func (d *CloudWatchDouble) PutMetricData(i0 *cloudwatch.PutMetricDataInput) (r0 *cloudwatch.PutMetricDataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutMetricData", i0)
	r0, _ = returns[0].(*cloudwatch.PutMetricDataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) PutMetricDataRequest(i0 *cloudwatch.PutMetricDataInput) (r0 *request.Request, r1 *cloudwatch.PutMetricDataOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutMetricDataRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatch.PutMetricDataOutput)
	return
}

func (d *CloudWatchDouble) PutMetricDataWithContext(i0 context.Context, i1 *cloudwatch.PutMetricDataInput, i2 ...request.Option) (r0 *cloudwatch.PutMetricDataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutMetricDataWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatch.PutMetricDataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) fakePutMetricDataWithContext(ctx context.Context, in *cloudwatch.PutMetricDataInput, _ ...request.Option) (*cloudwatch.PutMetricDataOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutMetricData cancelled", ctx.Err())
	default:
		return d.PutMetricData(in)
	}
}

func (d *CloudWatchDouble) SetAlarmState(i0 *cloudwatch.SetAlarmStateInput) (r0 *cloudwatch.SetAlarmStateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetAlarmState", i0)
	r0, _ = returns[0].(*cloudwatch.SetAlarmStateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) SetAlarmStateRequest(i0 *cloudwatch.SetAlarmStateInput) (r0 *request.Request, r1 *cloudwatch.SetAlarmStateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetAlarmStateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatch.SetAlarmStateOutput)
	return
}

func (d *CloudWatchDouble) SetAlarmStateWithContext(i0 context.Context, i1 *cloudwatch.SetAlarmStateInput, i2 ...request.Option) (r0 *cloudwatch.SetAlarmStateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetAlarmStateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatch.SetAlarmStateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) fakeSetAlarmStateWithContext(ctx context.Context, in *cloudwatch.SetAlarmStateInput, _ ...request.Option) (*cloudwatch.SetAlarmStateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetAlarmState cancelled", ctx.Err())
	default:
		return d.SetAlarmState(in)
	}
}

func (d *CloudWatchDouble) TagResource(i0 *cloudwatch.TagResourceInput) (r0 *cloudwatch.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*cloudwatch.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) TagResourceRequest(i0 *cloudwatch.TagResourceInput) (r0 *request.Request, r1 *cloudwatch.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatch.TagResourceOutput)
	return
}

func (d *CloudWatchDouble) TagResourceWithContext(i0 context.Context, i1 *cloudwatch.TagResourceInput, i2 ...request.Option) (r0 *cloudwatch.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatch.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) fakeTagResourceWithContext(ctx context.Context, in *cloudwatch.TagResourceInput, _ ...request.Option) (*cloudwatch.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *CloudWatchDouble) UntagResource(i0 *cloudwatch.UntagResourceInput) (r0 *cloudwatch.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*cloudwatch.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) UntagResourceRequest(i0 *cloudwatch.UntagResourceInput) (r0 *request.Request, r1 *cloudwatch.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudwatch.UntagResourceOutput)
	return
}

func (d *CloudWatchDouble) UntagResourceWithContext(i0 context.Context, i1 *cloudwatch.UntagResourceInput, i2 ...request.Option) (r0 *cloudwatch.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudwatch.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudWatchDouble) fakeUntagResourceWithContext(ctx context.Context, in *cloudwatch.UntagResourceInput, _ ...request.Option) (*cloudwatch.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *CloudWatchDouble) WaitUntilAlarmExists(i0 *cloudwatch.DescribeAlarmsInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilAlarmExists", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudWatchDouble) fakeWaitUntilAlarmExists(in *cloudwatch.DescribeAlarmsInput) error {
	return d.WaitUntil("AlarmExists", waiters, in)
}

func (d *CloudWatchDouble) WaitUntilAlarmExistsWithContext(i0 context.Context, i1 *cloudwatch.DescribeAlarmsInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilAlarmExistsWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudWatchDouble) fakeWaitUntilAlarmExistsWithContext(ctx context.Context, in *cloudwatch.DescribeAlarmsInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("AlarmExists", waiters, ctx, in, waitOption...)
}
