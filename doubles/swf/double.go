// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:15:21+11:00

// Package swfdouble provides a TestDouble implementation of swfiface.SWFAPI
package swfdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/swf"
	"github.com/aws/aws-sdk-go/service/swf/swfiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// SWFDouble is TestDouble for swfiface.SWFAPI
type SWFDouble struct {
	swfiface.SWFAPI
	*awsdouble.AWSTestDouble
}

// Constructor for SWFDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *SWFDouble {
	result := &SWFDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*swfiface.SWFAPI)(nil), configurators...)
	return result
}

func (d *SWFDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *SWFDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CountClosedWorkflowExecutionsWithContext":
		return m.Fake(d.fakeCountClosedWorkflowExecutionsWithContext)

	case "CountOpenWorkflowExecutionsWithContext":
		return m.Fake(d.fakeCountOpenWorkflowExecutionsWithContext)

	case "CountPendingActivityTasksWithContext":
		return m.Fake(d.fakeCountPendingActivityTasksWithContext)

	case "CountPendingDecisionTasksWithContext":
		return m.Fake(d.fakeCountPendingDecisionTasksWithContext)

	case "DeprecateActivityTypeWithContext":
		return m.Fake(d.fakeDeprecateActivityTypeWithContext)

	case "DeprecateDomainWithContext":
		return m.Fake(d.fakeDeprecateDomainWithContext)

	case "DeprecateWorkflowTypeWithContext":
		return m.Fake(d.fakeDeprecateWorkflowTypeWithContext)

	case "DescribeActivityTypeWithContext":
		return m.Fake(d.fakeDescribeActivityTypeWithContext)

	case "DescribeDomainWithContext":
		return m.Fake(d.fakeDescribeDomainWithContext)

	case "DescribeWorkflowExecutionWithContext":
		return m.Fake(d.fakeDescribeWorkflowExecutionWithContext)

	case "DescribeWorkflowTypeWithContext":
		return m.Fake(d.fakeDescribeWorkflowTypeWithContext)

	case "GetWorkflowExecutionHistoryPages":
		return m.Fake(d.fakeGetWorkflowExecutionHistoryPages)

	case "GetWorkflowExecutionHistoryPagesWithContext":
		return m.Fake(d.fakeGetWorkflowExecutionHistoryPagesWithContext)

	case "GetWorkflowExecutionHistoryWithContext":
		return m.Fake(d.fakeGetWorkflowExecutionHistoryWithContext)

	case "ListActivityTypesPages":
		return m.Fake(d.fakeListActivityTypesPages)

	case "ListActivityTypesPagesWithContext":
		return m.Fake(d.fakeListActivityTypesPagesWithContext)

	case "ListActivityTypesWithContext":
		return m.Fake(d.fakeListActivityTypesWithContext)

	case "ListClosedWorkflowExecutionsPages":
		return m.Fake(d.fakeListClosedWorkflowExecutionsPages)

	case "ListClosedWorkflowExecutionsPagesWithContext":
		return m.Fake(d.fakeListClosedWorkflowExecutionsPagesWithContext)

	case "ListClosedWorkflowExecutionsWithContext":
		return m.Fake(d.fakeListClosedWorkflowExecutionsWithContext)

	case "ListDomainsPages":
		return m.Fake(d.fakeListDomainsPages)

	case "ListDomainsPagesWithContext":
		return m.Fake(d.fakeListDomainsPagesWithContext)

	case "ListDomainsWithContext":
		return m.Fake(d.fakeListDomainsWithContext)

	case "ListOpenWorkflowExecutionsPages":
		return m.Fake(d.fakeListOpenWorkflowExecutionsPages)

	case "ListOpenWorkflowExecutionsPagesWithContext":
		return m.Fake(d.fakeListOpenWorkflowExecutionsPagesWithContext)

	case "ListOpenWorkflowExecutionsWithContext":
		return m.Fake(d.fakeListOpenWorkflowExecutionsWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "ListWorkflowTypesPages":
		return m.Fake(d.fakeListWorkflowTypesPages)

	case "ListWorkflowTypesPagesWithContext":
		return m.Fake(d.fakeListWorkflowTypesPagesWithContext)

	case "ListWorkflowTypesWithContext":
		return m.Fake(d.fakeListWorkflowTypesWithContext)

	case "PollForActivityTaskWithContext":
		return m.Fake(d.fakePollForActivityTaskWithContext)

	case "PollForDecisionTaskPages":
		return m.Fake(d.fakePollForDecisionTaskPages)

	case "PollForDecisionTaskPagesWithContext":
		return m.Fake(d.fakePollForDecisionTaskPagesWithContext)

	case "PollForDecisionTaskWithContext":
		return m.Fake(d.fakePollForDecisionTaskWithContext)

	case "RecordActivityTaskHeartbeatWithContext":
		return m.Fake(d.fakeRecordActivityTaskHeartbeatWithContext)

	case "RegisterActivityTypeWithContext":
		return m.Fake(d.fakeRegisterActivityTypeWithContext)

	case "RegisterDomainWithContext":
		return m.Fake(d.fakeRegisterDomainWithContext)

	case "RegisterWorkflowTypeWithContext":
		return m.Fake(d.fakeRegisterWorkflowTypeWithContext)

	case "RequestCancelWorkflowExecutionWithContext":
		return m.Fake(d.fakeRequestCancelWorkflowExecutionWithContext)

	case "RespondActivityTaskCanceledWithContext":
		return m.Fake(d.fakeRespondActivityTaskCanceledWithContext)

	case "RespondActivityTaskCompletedWithContext":
		return m.Fake(d.fakeRespondActivityTaskCompletedWithContext)

	case "RespondActivityTaskFailedWithContext":
		return m.Fake(d.fakeRespondActivityTaskFailedWithContext)

	case "RespondDecisionTaskCompletedWithContext":
		return m.Fake(d.fakeRespondDecisionTaskCompletedWithContext)

	case "SignalWorkflowExecutionWithContext":
		return m.Fake(d.fakeSignalWorkflowExecutionWithContext)

	case "StartWorkflowExecutionWithContext":
		return m.Fake(d.fakeStartWorkflowExecutionWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "TerminateWorkflowExecutionWithContext":
		return m.Fake(d.fakeTerminateWorkflowExecutionWithContext)

	case "UndeprecateActivityTypeWithContext":
		return m.Fake(d.fakeUndeprecateActivityTypeWithContext)

	case "UndeprecateDomainWithContext":
		return m.Fake(d.fakeUndeprecateDomainWithContext)

	case "UndeprecateWorkflowTypeWithContext":
		return m.Fake(d.fakeUndeprecateWorkflowTypeWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	default:
		return nil
	}
}

func (d *SWFDouble) CountClosedWorkflowExecutions(i0 *swf.CountClosedWorkflowExecutionsInput) (r0 *swf.WorkflowExecutionCount, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CountClosedWorkflowExecutions", i0)
	r0, _ = returns[0].(*swf.WorkflowExecutionCount)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) CountClosedWorkflowExecutionsRequest(i0 *swf.CountClosedWorkflowExecutionsInput) (r0 *request.Request, r1 *swf.WorkflowExecutionCount) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CountClosedWorkflowExecutionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*swf.WorkflowExecutionCount)
	return
}

func (d *SWFDouble) CountClosedWorkflowExecutionsWithContext(i0 context.Context, i1 *swf.CountClosedWorkflowExecutionsInput, i2 ...request.Option) (r0 *swf.WorkflowExecutionCount, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CountClosedWorkflowExecutionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*swf.WorkflowExecutionCount)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) fakeCountClosedWorkflowExecutionsWithContext(ctx context.Context, in *swf.CountClosedWorkflowExecutionsInput, _ ...request.Option) (*swf.WorkflowExecutionCount, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CountClosedWorkflowExecutions cancelled", ctx.Err())
	default:
		return d.CountClosedWorkflowExecutions(in)
	}
}

func (d *SWFDouble) CountOpenWorkflowExecutions(i0 *swf.CountOpenWorkflowExecutionsInput) (r0 *swf.WorkflowExecutionCount, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CountOpenWorkflowExecutions", i0)
	r0, _ = returns[0].(*swf.WorkflowExecutionCount)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) CountOpenWorkflowExecutionsRequest(i0 *swf.CountOpenWorkflowExecutionsInput) (r0 *request.Request, r1 *swf.WorkflowExecutionCount) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CountOpenWorkflowExecutionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*swf.WorkflowExecutionCount)
	return
}

func (d *SWFDouble) CountOpenWorkflowExecutionsWithContext(i0 context.Context, i1 *swf.CountOpenWorkflowExecutionsInput, i2 ...request.Option) (r0 *swf.WorkflowExecutionCount, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CountOpenWorkflowExecutionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*swf.WorkflowExecutionCount)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) fakeCountOpenWorkflowExecutionsWithContext(ctx context.Context, in *swf.CountOpenWorkflowExecutionsInput, _ ...request.Option) (*swf.WorkflowExecutionCount, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CountOpenWorkflowExecutions cancelled", ctx.Err())
	default:
		return d.CountOpenWorkflowExecutions(in)
	}
}

func (d *SWFDouble) CountPendingActivityTasks(i0 *swf.CountPendingActivityTasksInput) (r0 *swf.PendingTaskCount, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CountPendingActivityTasks", i0)
	r0, _ = returns[0].(*swf.PendingTaskCount)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) CountPendingActivityTasksRequest(i0 *swf.CountPendingActivityTasksInput) (r0 *request.Request, r1 *swf.PendingTaskCount) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CountPendingActivityTasksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*swf.PendingTaskCount)
	return
}

func (d *SWFDouble) CountPendingActivityTasksWithContext(i0 context.Context, i1 *swf.CountPendingActivityTasksInput, i2 ...request.Option) (r0 *swf.PendingTaskCount, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CountPendingActivityTasksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*swf.PendingTaskCount)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) fakeCountPendingActivityTasksWithContext(ctx context.Context, in *swf.CountPendingActivityTasksInput, _ ...request.Option) (*swf.PendingTaskCount, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CountPendingActivityTasks cancelled", ctx.Err())
	default:
		return d.CountPendingActivityTasks(in)
	}
}

func (d *SWFDouble) CountPendingDecisionTasks(i0 *swf.CountPendingDecisionTasksInput) (r0 *swf.PendingTaskCount, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CountPendingDecisionTasks", i0)
	r0, _ = returns[0].(*swf.PendingTaskCount)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) CountPendingDecisionTasksRequest(i0 *swf.CountPendingDecisionTasksInput) (r0 *request.Request, r1 *swf.PendingTaskCount) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CountPendingDecisionTasksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*swf.PendingTaskCount)
	return
}

func (d *SWFDouble) CountPendingDecisionTasksWithContext(i0 context.Context, i1 *swf.CountPendingDecisionTasksInput, i2 ...request.Option) (r0 *swf.PendingTaskCount, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CountPendingDecisionTasksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*swf.PendingTaskCount)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) fakeCountPendingDecisionTasksWithContext(ctx context.Context, in *swf.CountPendingDecisionTasksInput, _ ...request.Option) (*swf.PendingTaskCount, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CountPendingDecisionTasks cancelled", ctx.Err())
	default:
		return d.CountPendingDecisionTasks(in)
	}
}

func (d *SWFDouble) DeprecateActivityType(i0 *swf.DeprecateActivityTypeInput) (r0 *swf.DeprecateActivityTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeprecateActivityType", i0)
	r0, _ = returns[0].(*swf.DeprecateActivityTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) DeprecateActivityTypeRequest(i0 *swf.DeprecateActivityTypeInput) (r0 *request.Request, r1 *swf.DeprecateActivityTypeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeprecateActivityTypeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*swf.DeprecateActivityTypeOutput)
	return
}

func (d *SWFDouble) DeprecateActivityTypeWithContext(i0 context.Context, i1 *swf.DeprecateActivityTypeInput, i2 ...request.Option) (r0 *swf.DeprecateActivityTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeprecateActivityTypeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*swf.DeprecateActivityTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) fakeDeprecateActivityTypeWithContext(ctx context.Context, in *swf.DeprecateActivityTypeInput, _ ...request.Option) (*swf.DeprecateActivityTypeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeprecateActivityType cancelled", ctx.Err())
	default:
		return d.DeprecateActivityType(in)
	}
}

func (d *SWFDouble) DeprecateDomain(i0 *swf.DeprecateDomainInput) (r0 *swf.DeprecateDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeprecateDomain", i0)
	r0, _ = returns[0].(*swf.DeprecateDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) DeprecateDomainRequest(i0 *swf.DeprecateDomainInput) (r0 *request.Request, r1 *swf.DeprecateDomainOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeprecateDomainRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*swf.DeprecateDomainOutput)
	return
}

func (d *SWFDouble) DeprecateDomainWithContext(i0 context.Context, i1 *swf.DeprecateDomainInput, i2 ...request.Option) (r0 *swf.DeprecateDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeprecateDomainWithContext", i0, i1, i2)
	r0, _ = returns[0].(*swf.DeprecateDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) fakeDeprecateDomainWithContext(ctx context.Context, in *swf.DeprecateDomainInput, _ ...request.Option) (*swf.DeprecateDomainOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeprecateDomain cancelled", ctx.Err())
	default:
		return d.DeprecateDomain(in)
	}
}

func (d *SWFDouble) DeprecateWorkflowType(i0 *swf.DeprecateWorkflowTypeInput) (r0 *swf.DeprecateWorkflowTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeprecateWorkflowType", i0)
	r0, _ = returns[0].(*swf.DeprecateWorkflowTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) DeprecateWorkflowTypeRequest(i0 *swf.DeprecateWorkflowTypeInput) (r0 *request.Request, r1 *swf.DeprecateWorkflowTypeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeprecateWorkflowTypeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*swf.DeprecateWorkflowTypeOutput)
	return
}

func (d *SWFDouble) DeprecateWorkflowTypeWithContext(i0 context.Context, i1 *swf.DeprecateWorkflowTypeInput, i2 ...request.Option) (r0 *swf.DeprecateWorkflowTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeprecateWorkflowTypeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*swf.DeprecateWorkflowTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) fakeDeprecateWorkflowTypeWithContext(ctx context.Context, in *swf.DeprecateWorkflowTypeInput, _ ...request.Option) (*swf.DeprecateWorkflowTypeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeprecateWorkflowType cancelled", ctx.Err())
	default:
		return d.DeprecateWorkflowType(in)
	}
}

func (d *SWFDouble) DescribeActivityType(i0 *swf.DescribeActivityTypeInput) (r0 *swf.DescribeActivityTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeActivityType", i0)
	r0, _ = returns[0].(*swf.DescribeActivityTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) DescribeActivityTypeRequest(i0 *swf.DescribeActivityTypeInput) (r0 *request.Request, r1 *swf.DescribeActivityTypeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeActivityTypeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*swf.DescribeActivityTypeOutput)
	return
}

func (d *SWFDouble) DescribeActivityTypeWithContext(i0 context.Context, i1 *swf.DescribeActivityTypeInput, i2 ...request.Option) (r0 *swf.DescribeActivityTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeActivityTypeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*swf.DescribeActivityTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) fakeDescribeActivityTypeWithContext(ctx context.Context, in *swf.DescribeActivityTypeInput, _ ...request.Option) (*swf.DescribeActivityTypeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeActivityType cancelled", ctx.Err())
	default:
		return d.DescribeActivityType(in)
	}
}

func (d *SWFDouble) DescribeDomain(i0 *swf.DescribeDomainInput) (r0 *swf.DescribeDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDomain", i0)
	r0, _ = returns[0].(*swf.DescribeDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) DescribeDomainRequest(i0 *swf.DescribeDomainInput) (r0 *request.Request, r1 *swf.DescribeDomainOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDomainRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*swf.DescribeDomainOutput)
	return
}

func (d *SWFDouble) DescribeDomainWithContext(i0 context.Context, i1 *swf.DescribeDomainInput, i2 ...request.Option) (r0 *swf.DescribeDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDomainWithContext", i0, i1, i2)
	r0, _ = returns[0].(*swf.DescribeDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) fakeDescribeDomainWithContext(ctx context.Context, in *swf.DescribeDomainInput, _ ...request.Option) (*swf.DescribeDomainOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDomain cancelled", ctx.Err())
	default:
		return d.DescribeDomain(in)
	}
}

func (d *SWFDouble) DescribeWorkflowExecution(i0 *swf.DescribeWorkflowExecutionInput) (r0 *swf.DescribeWorkflowExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkflowExecution", i0)
	r0, _ = returns[0].(*swf.DescribeWorkflowExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) DescribeWorkflowExecutionRequest(i0 *swf.DescribeWorkflowExecutionInput) (r0 *request.Request, r1 *swf.DescribeWorkflowExecutionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkflowExecutionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*swf.DescribeWorkflowExecutionOutput)
	return
}

func (d *SWFDouble) DescribeWorkflowExecutionWithContext(i0 context.Context, i1 *swf.DescribeWorkflowExecutionInput, i2 ...request.Option) (r0 *swf.DescribeWorkflowExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkflowExecutionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*swf.DescribeWorkflowExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) fakeDescribeWorkflowExecutionWithContext(ctx context.Context, in *swf.DescribeWorkflowExecutionInput, _ ...request.Option) (*swf.DescribeWorkflowExecutionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeWorkflowExecution cancelled", ctx.Err())
	default:
		return d.DescribeWorkflowExecution(in)
	}
}

func (d *SWFDouble) DescribeWorkflowType(i0 *swf.DescribeWorkflowTypeInput) (r0 *swf.DescribeWorkflowTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkflowType", i0)
	r0, _ = returns[0].(*swf.DescribeWorkflowTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) DescribeWorkflowTypeRequest(i0 *swf.DescribeWorkflowTypeInput) (r0 *request.Request, r1 *swf.DescribeWorkflowTypeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkflowTypeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*swf.DescribeWorkflowTypeOutput)
	return
}

func (d *SWFDouble) DescribeWorkflowTypeWithContext(i0 context.Context, i1 *swf.DescribeWorkflowTypeInput, i2 ...request.Option) (r0 *swf.DescribeWorkflowTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkflowTypeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*swf.DescribeWorkflowTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) fakeDescribeWorkflowTypeWithContext(ctx context.Context, in *swf.DescribeWorkflowTypeInput, _ ...request.Option) (*swf.DescribeWorkflowTypeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeWorkflowType cancelled", ctx.Err())
	default:
		return d.DescribeWorkflowType(in)
	}
}

func (d *SWFDouble) GetWorkflowExecutionHistory(i0 *swf.GetWorkflowExecutionHistoryInput) (r0 *swf.GetWorkflowExecutionHistoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetWorkflowExecutionHistory", i0)
	r0, _ = returns[0].(*swf.GetWorkflowExecutionHistoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) GetWorkflowExecutionHistoryPages(i0 *swf.GetWorkflowExecutionHistoryInput, i1 func(*swf.GetWorkflowExecutionHistoryOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetWorkflowExecutionHistoryPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SWFDouble) fakeGetWorkflowExecutionHistoryPages(in *swf.GetWorkflowExecutionHistoryInput, pager func(*swf.GetWorkflowExecutionHistoryOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetWorkflowExecutionHistory", paginators, in, pager)
}

func (d *SWFDouble) GetWorkflowExecutionHistoryPagesWithContext(i0 context.Context, i1 *swf.GetWorkflowExecutionHistoryInput, i2 func(*swf.GetWorkflowExecutionHistoryOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetWorkflowExecutionHistoryPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SWFDouble) fakeGetWorkflowExecutionHistoryPagesWithContext(ctx context.Context, in *swf.GetWorkflowExecutionHistoryInput, pager func(*swf.GetWorkflowExecutionHistoryOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetWorkflowExecutionHistory", paginators, ctx, in, pager, options...)
}

func (d *SWFDouble) GetWorkflowExecutionHistoryRequest(i0 *swf.GetWorkflowExecutionHistoryInput) (r0 *request.Request, r1 *swf.GetWorkflowExecutionHistoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetWorkflowExecutionHistoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*swf.GetWorkflowExecutionHistoryOutput)
	return
}

func (d *SWFDouble) GetWorkflowExecutionHistoryWithContext(i0 context.Context, i1 *swf.GetWorkflowExecutionHistoryInput, i2 ...request.Option) (r0 *swf.GetWorkflowExecutionHistoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetWorkflowExecutionHistoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*swf.GetWorkflowExecutionHistoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) fakeGetWorkflowExecutionHistoryWithContext(ctx context.Context, in *swf.GetWorkflowExecutionHistoryInput, _ ...request.Option) (*swf.GetWorkflowExecutionHistoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetWorkflowExecutionHistory cancelled", ctx.Err())
	default:
		return d.GetWorkflowExecutionHistory(in)
	}
}

func (d *SWFDouble) ListActivityTypes(i0 *swf.ListActivityTypesInput) (r0 *swf.ListActivityTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListActivityTypes", i0)
	r0, _ = returns[0].(*swf.ListActivityTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) ListActivityTypesPages(i0 *swf.ListActivityTypesInput, i1 func(*swf.ListActivityTypesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListActivityTypesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SWFDouble) fakeListActivityTypesPages(in *swf.ListActivityTypesInput, pager func(*swf.ListActivityTypesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListActivityTypes", paginators, in, pager)
}

func (d *SWFDouble) ListActivityTypesPagesWithContext(i0 context.Context, i1 *swf.ListActivityTypesInput, i2 func(*swf.ListActivityTypesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListActivityTypesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SWFDouble) fakeListActivityTypesPagesWithContext(ctx context.Context, in *swf.ListActivityTypesInput, pager func(*swf.ListActivityTypesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListActivityTypes", paginators, ctx, in, pager, options...)
}

func (d *SWFDouble) ListActivityTypesRequest(i0 *swf.ListActivityTypesInput) (r0 *request.Request, r1 *swf.ListActivityTypesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListActivityTypesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*swf.ListActivityTypesOutput)
	return
}

func (d *SWFDouble) ListActivityTypesWithContext(i0 context.Context, i1 *swf.ListActivityTypesInput, i2 ...request.Option) (r0 *swf.ListActivityTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListActivityTypesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*swf.ListActivityTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) fakeListActivityTypesWithContext(ctx context.Context, in *swf.ListActivityTypesInput, _ ...request.Option) (*swf.ListActivityTypesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListActivityTypes cancelled", ctx.Err())
	default:
		return d.ListActivityTypes(in)
	}
}

func (d *SWFDouble) ListClosedWorkflowExecutions(i0 *swf.ListClosedWorkflowExecutionsInput) (r0 *swf.WorkflowExecutionInfos, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListClosedWorkflowExecutions", i0)
	r0, _ = returns[0].(*swf.WorkflowExecutionInfos)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) ListClosedWorkflowExecutionsPages(i0 *swf.ListClosedWorkflowExecutionsInput, i1 func(*swf.WorkflowExecutionInfos, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListClosedWorkflowExecutionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SWFDouble) fakeListClosedWorkflowExecutionsPages(in *swf.ListClosedWorkflowExecutionsInput, pager func(*swf.WorkflowExecutionInfos, bool) (shouldContinue bool)) error {
	return d.Paginate("ListClosedWorkflowExecutions", paginators, in, pager)
}

func (d *SWFDouble) ListClosedWorkflowExecutionsPagesWithContext(i0 context.Context, i1 *swf.ListClosedWorkflowExecutionsInput, i2 func(*swf.WorkflowExecutionInfos, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListClosedWorkflowExecutionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SWFDouble) fakeListClosedWorkflowExecutionsPagesWithContext(ctx context.Context, in *swf.ListClosedWorkflowExecutionsInput, pager func(*swf.WorkflowExecutionInfos, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListClosedWorkflowExecutions", paginators, ctx, in, pager, options...)
}

func (d *SWFDouble) ListClosedWorkflowExecutionsRequest(i0 *swf.ListClosedWorkflowExecutionsInput) (r0 *request.Request, r1 *swf.WorkflowExecutionInfos) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListClosedWorkflowExecutionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*swf.WorkflowExecutionInfos)
	return
}

func (d *SWFDouble) ListClosedWorkflowExecutionsWithContext(i0 context.Context, i1 *swf.ListClosedWorkflowExecutionsInput, i2 ...request.Option) (r0 *swf.WorkflowExecutionInfos, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListClosedWorkflowExecutionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*swf.WorkflowExecutionInfos)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) fakeListClosedWorkflowExecutionsWithContext(ctx context.Context, in *swf.ListClosedWorkflowExecutionsInput, _ ...request.Option) (*swf.WorkflowExecutionInfos, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListClosedWorkflowExecutions cancelled", ctx.Err())
	default:
		return d.ListClosedWorkflowExecutions(in)
	}
}

func (d *SWFDouble) ListDomains(i0 *swf.ListDomainsInput) (r0 *swf.ListDomainsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDomains", i0)
	r0, _ = returns[0].(*swf.ListDomainsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) ListDomainsPages(i0 *swf.ListDomainsInput, i1 func(*swf.ListDomainsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDomainsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SWFDouble) fakeListDomainsPages(in *swf.ListDomainsInput, pager func(*swf.ListDomainsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListDomains", paginators, in, pager)
}

func (d *SWFDouble) ListDomainsPagesWithContext(i0 context.Context, i1 *swf.ListDomainsInput, i2 func(*swf.ListDomainsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDomainsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SWFDouble) fakeListDomainsPagesWithContext(ctx context.Context, in *swf.ListDomainsInput, pager func(*swf.ListDomainsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListDomains", paginators, ctx, in, pager, options...)
}

func (d *SWFDouble) ListDomainsRequest(i0 *swf.ListDomainsInput) (r0 *request.Request, r1 *swf.ListDomainsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDomainsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*swf.ListDomainsOutput)
	return
}

func (d *SWFDouble) ListDomainsWithContext(i0 context.Context, i1 *swf.ListDomainsInput, i2 ...request.Option) (r0 *swf.ListDomainsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDomainsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*swf.ListDomainsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) fakeListDomainsWithContext(ctx context.Context, in *swf.ListDomainsInput, _ ...request.Option) (*swf.ListDomainsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDomains cancelled", ctx.Err())
	default:
		return d.ListDomains(in)
	}
}

func (d *SWFDouble) ListOpenWorkflowExecutions(i0 *swf.ListOpenWorkflowExecutionsInput) (r0 *swf.WorkflowExecutionInfos, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOpenWorkflowExecutions", i0)
	r0, _ = returns[0].(*swf.WorkflowExecutionInfos)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) ListOpenWorkflowExecutionsPages(i0 *swf.ListOpenWorkflowExecutionsInput, i1 func(*swf.WorkflowExecutionInfos, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOpenWorkflowExecutionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SWFDouble) fakeListOpenWorkflowExecutionsPages(in *swf.ListOpenWorkflowExecutionsInput, pager func(*swf.WorkflowExecutionInfos, bool) (shouldContinue bool)) error {
	return d.Paginate("ListOpenWorkflowExecutions", paginators, in, pager)
}

func (d *SWFDouble) ListOpenWorkflowExecutionsPagesWithContext(i0 context.Context, i1 *swf.ListOpenWorkflowExecutionsInput, i2 func(*swf.WorkflowExecutionInfos, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOpenWorkflowExecutionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SWFDouble) fakeListOpenWorkflowExecutionsPagesWithContext(ctx context.Context, in *swf.ListOpenWorkflowExecutionsInput, pager func(*swf.WorkflowExecutionInfos, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListOpenWorkflowExecutions", paginators, ctx, in, pager, options...)
}

func (d *SWFDouble) ListOpenWorkflowExecutionsRequest(i0 *swf.ListOpenWorkflowExecutionsInput) (r0 *request.Request, r1 *swf.WorkflowExecutionInfos) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOpenWorkflowExecutionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*swf.WorkflowExecutionInfos)
	return
}

func (d *SWFDouble) ListOpenWorkflowExecutionsWithContext(i0 context.Context, i1 *swf.ListOpenWorkflowExecutionsInput, i2 ...request.Option) (r0 *swf.WorkflowExecutionInfos, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOpenWorkflowExecutionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*swf.WorkflowExecutionInfos)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) fakeListOpenWorkflowExecutionsWithContext(ctx context.Context, in *swf.ListOpenWorkflowExecutionsInput, _ ...request.Option) (*swf.WorkflowExecutionInfos, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListOpenWorkflowExecutions cancelled", ctx.Err())
	default:
		return d.ListOpenWorkflowExecutions(in)
	}
}

func (d *SWFDouble) ListTagsForResource(i0 *swf.ListTagsForResourceInput) (r0 *swf.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*swf.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) ListTagsForResourceRequest(i0 *swf.ListTagsForResourceInput) (r0 *request.Request, r1 *swf.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*swf.ListTagsForResourceOutput)
	return
}

func (d *SWFDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *swf.ListTagsForResourceInput, i2 ...request.Option) (r0 *swf.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*swf.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *swf.ListTagsForResourceInput, _ ...request.Option) (*swf.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *SWFDouble) ListWorkflowTypes(i0 *swf.ListWorkflowTypesInput) (r0 *swf.ListWorkflowTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWorkflowTypes", i0)
	r0, _ = returns[0].(*swf.ListWorkflowTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) ListWorkflowTypesPages(i0 *swf.ListWorkflowTypesInput, i1 func(*swf.ListWorkflowTypesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWorkflowTypesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SWFDouble) fakeListWorkflowTypesPages(in *swf.ListWorkflowTypesInput, pager func(*swf.ListWorkflowTypesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListWorkflowTypes", paginators, in, pager)
}

func (d *SWFDouble) ListWorkflowTypesPagesWithContext(i0 context.Context, i1 *swf.ListWorkflowTypesInput, i2 func(*swf.ListWorkflowTypesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWorkflowTypesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SWFDouble) fakeListWorkflowTypesPagesWithContext(ctx context.Context, in *swf.ListWorkflowTypesInput, pager func(*swf.ListWorkflowTypesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListWorkflowTypes", paginators, ctx, in, pager, options...)
}

func (d *SWFDouble) ListWorkflowTypesRequest(i0 *swf.ListWorkflowTypesInput) (r0 *request.Request, r1 *swf.ListWorkflowTypesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWorkflowTypesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*swf.ListWorkflowTypesOutput)
	return
}

func (d *SWFDouble) ListWorkflowTypesWithContext(i0 context.Context, i1 *swf.ListWorkflowTypesInput, i2 ...request.Option) (r0 *swf.ListWorkflowTypesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWorkflowTypesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*swf.ListWorkflowTypesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) fakeListWorkflowTypesWithContext(ctx context.Context, in *swf.ListWorkflowTypesInput, _ ...request.Option) (*swf.ListWorkflowTypesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListWorkflowTypes cancelled", ctx.Err())
	default:
		return d.ListWorkflowTypes(in)
	}
}

func (d *SWFDouble) PollForActivityTask(i0 *swf.PollForActivityTaskInput) (r0 *swf.PollForActivityTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PollForActivityTask", i0)
	r0, _ = returns[0].(*swf.PollForActivityTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) PollForActivityTaskRequest(i0 *swf.PollForActivityTaskInput) (r0 *request.Request, r1 *swf.PollForActivityTaskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PollForActivityTaskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*swf.PollForActivityTaskOutput)
	return
}

func (d *SWFDouble) PollForActivityTaskWithContext(i0 context.Context, i1 *swf.PollForActivityTaskInput, i2 ...request.Option) (r0 *swf.PollForActivityTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PollForActivityTaskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*swf.PollForActivityTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) fakePollForActivityTaskWithContext(ctx context.Context, in *swf.PollForActivityTaskInput, _ ...request.Option) (*swf.PollForActivityTaskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PollForActivityTask cancelled", ctx.Err())
	default:
		return d.PollForActivityTask(in)
	}
}

func (d *SWFDouble) PollForDecisionTask(i0 *swf.PollForDecisionTaskInput) (r0 *swf.PollForDecisionTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PollForDecisionTask", i0)
	r0, _ = returns[0].(*swf.PollForDecisionTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) PollForDecisionTaskPages(i0 *swf.PollForDecisionTaskInput, i1 func(*swf.PollForDecisionTaskOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PollForDecisionTaskPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SWFDouble) fakePollForDecisionTaskPages(in *swf.PollForDecisionTaskInput, pager func(*swf.PollForDecisionTaskOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("PollForDecisionTask", paginators, in, pager)
}

func (d *SWFDouble) PollForDecisionTaskPagesWithContext(i0 context.Context, i1 *swf.PollForDecisionTaskInput, i2 func(*swf.PollForDecisionTaskOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PollForDecisionTaskPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SWFDouble) fakePollForDecisionTaskPagesWithContext(ctx context.Context, in *swf.PollForDecisionTaskInput, pager func(*swf.PollForDecisionTaskOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("PollForDecisionTask", paginators, ctx, in, pager, options...)
}

func (d *SWFDouble) PollForDecisionTaskRequest(i0 *swf.PollForDecisionTaskInput) (r0 *request.Request, r1 *swf.PollForDecisionTaskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PollForDecisionTaskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*swf.PollForDecisionTaskOutput)
	return
}

func (d *SWFDouble) PollForDecisionTaskWithContext(i0 context.Context, i1 *swf.PollForDecisionTaskInput, i2 ...request.Option) (r0 *swf.PollForDecisionTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PollForDecisionTaskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*swf.PollForDecisionTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) fakePollForDecisionTaskWithContext(ctx context.Context, in *swf.PollForDecisionTaskInput, _ ...request.Option) (*swf.PollForDecisionTaskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PollForDecisionTask cancelled", ctx.Err())
	default:
		return d.PollForDecisionTask(in)
	}
}

func (d *SWFDouble) RecordActivityTaskHeartbeat(i0 *swf.RecordActivityTaskHeartbeatInput) (r0 *swf.RecordActivityTaskHeartbeatOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RecordActivityTaskHeartbeat", i0)
	r0, _ = returns[0].(*swf.RecordActivityTaskHeartbeatOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) RecordActivityTaskHeartbeatRequest(i0 *swf.RecordActivityTaskHeartbeatInput) (r0 *request.Request, r1 *swf.RecordActivityTaskHeartbeatOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RecordActivityTaskHeartbeatRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*swf.RecordActivityTaskHeartbeatOutput)
	return
}

func (d *SWFDouble) RecordActivityTaskHeartbeatWithContext(i0 context.Context, i1 *swf.RecordActivityTaskHeartbeatInput, i2 ...request.Option) (r0 *swf.RecordActivityTaskHeartbeatOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RecordActivityTaskHeartbeatWithContext", i0, i1, i2)
	r0, _ = returns[0].(*swf.RecordActivityTaskHeartbeatOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) fakeRecordActivityTaskHeartbeatWithContext(ctx context.Context, in *swf.RecordActivityTaskHeartbeatInput, _ ...request.Option) (*swf.RecordActivityTaskHeartbeatOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RecordActivityTaskHeartbeat cancelled", ctx.Err())
	default:
		return d.RecordActivityTaskHeartbeat(in)
	}
}

func (d *SWFDouble) RegisterActivityType(i0 *swf.RegisterActivityTypeInput) (r0 *swf.RegisterActivityTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterActivityType", i0)
	r0, _ = returns[0].(*swf.RegisterActivityTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) RegisterActivityTypeRequest(i0 *swf.RegisterActivityTypeInput) (r0 *request.Request, r1 *swf.RegisterActivityTypeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterActivityTypeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*swf.RegisterActivityTypeOutput)
	return
}

func (d *SWFDouble) RegisterActivityTypeWithContext(i0 context.Context, i1 *swf.RegisterActivityTypeInput, i2 ...request.Option) (r0 *swf.RegisterActivityTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterActivityTypeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*swf.RegisterActivityTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) fakeRegisterActivityTypeWithContext(ctx context.Context, in *swf.RegisterActivityTypeInput, _ ...request.Option) (*swf.RegisterActivityTypeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterActivityType cancelled", ctx.Err())
	default:
		return d.RegisterActivityType(in)
	}
}

func (d *SWFDouble) RegisterDomain(i0 *swf.RegisterDomainInput) (r0 *swf.RegisterDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterDomain", i0)
	r0, _ = returns[0].(*swf.RegisterDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) RegisterDomainRequest(i0 *swf.RegisterDomainInput) (r0 *request.Request, r1 *swf.RegisterDomainOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterDomainRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*swf.RegisterDomainOutput)
	return
}

func (d *SWFDouble) RegisterDomainWithContext(i0 context.Context, i1 *swf.RegisterDomainInput, i2 ...request.Option) (r0 *swf.RegisterDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterDomainWithContext", i0, i1, i2)
	r0, _ = returns[0].(*swf.RegisterDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) fakeRegisterDomainWithContext(ctx context.Context, in *swf.RegisterDomainInput, _ ...request.Option) (*swf.RegisterDomainOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterDomain cancelled", ctx.Err())
	default:
		return d.RegisterDomain(in)
	}
}

func (d *SWFDouble) RegisterWorkflowType(i0 *swf.RegisterWorkflowTypeInput) (r0 *swf.RegisterWorkflowTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterWorkflowType", i0)
	r0, _ = returns[0].(*swf.RegisterWorkflowTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) RegisterWorkflowTypeRequest(i0 *swf.RegisterWorkflowTypeInput) (r0 *request.Request, r1 *swf.RegisterWorkflowTypeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterWorkflowTypeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*swf.RegisterWorkflowTypeOutput)
	return
}

func (d *SWFDouble) RegisterWorkflowTypeWithContext(i0 context.Context, i1 *swf.RegisterWorkflowTypeInput, i2 ...request.Option) (r0 *swf.RegisterWorkflowTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterWorkflowTypeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*swf.RegisterWorkflowTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) fakeRegisterWorkflowTypeWithContext(ctx context.Context, in *swf.RegisterWorkflowTypeInput, _ ...request.Option) (*swf.RegisterWorkflowTypeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterWorkflowType cancelled", ctx.Err())
	default:
		return d.RegisterWorkflowType(in)
	}
}

func (d *SWFDouble) RequestCancelWorkflowExecution(i0 *swf.RequestCancelWorkflowExecutionInput) (r0 *swf.RequestCancelWorkflowExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RequestCancelWorkflowExecution", i0)
	r0, _ = returns[0].(*swf.RequestCancelWorkflowExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) RequestCancelWorkflowExecutionRequest(i0 *swf.RequestCancelWorkflowExecutionInput) (r0 *request.Request, r1 *swf.RequestCancelWorkflowExecutionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RequestCancelWorkflowExecutionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*swf.RequestCancelWorkflowExecutionOutput)
	return
}

func (d *SWFDouble) RequestCancelWorkflowExecutionWithContext(i0 context.Context, i1 *swf.RequestCancelWorkflowExecutionInput, i2 ...request.Option) (r0 *swf.RequestCancelWorkflowExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RequestCancelWorkflowExecutionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*swf.RequestCancelWorkflowExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) fakeRequestCancelWorkflowExecutionWithContext(ctx context.Context, in *swf.RequestCancelWorkflowExecutionInput, _ ...request.Option) (*swf.RequestCancelWorkflowExecutionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RequestCancelWorkflowExecution cancelled", ctx.Err())
	default:
		return d.RequestCancelWorkflowExecution(in)
	}
}

func (d *SWFDouble) RespondActivityTaskCanceled(i0 *swf.RespondActivityTaskCanceledInput) (r0 *swf.RespondActivityTaskCanceledOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RespondActivityTaskCanceled", i0)
	r0, _ = returns[0].(*swf.RespondActivityTaskCanceledOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) RespondActivityTaskCanceledRequest(i0 *swf.RespondActivityTaskCanceledInput) (r0 *request.Request, r1 *swf.RespondActivityTaskCanceledOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RespondActivityTaskCanceledRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*swf.RespondActivityTaskCanceledOutput)
	return
}

func (d *SWFDouble) RespondActivityTaskCanceledWithContext(i0 context.Context, i1 *swf.RespondActivityTaskCanceledInput, i2 ...request.Option) (r0 *swf.RespondActivityTaskCanceledOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RespondActivityTaskCanceledWithContext", i0, i1, i2)
	r0, _ = returns[0].(*swf.RespondActivityTaskCanceledOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) fakeRespondActivityTaskCanceledWithContext(ctx context.Context, in *swf.RespondActivityTaskCanceledInput, _ ...request.Option) (*swf.RespondActivityTaskCanceledOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RespondActivityTaskCanceled cancelled", ctx.Err())
	default:
		return d.RespondActivityTaskCanceled(in)
	}
}

func (d *SWFDouble) RespondActivityTaskCompleted(i0 *swf.RespondActivityTaskCompletedInput) (r0 *swf.RespondActivityTaskCompletedOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RespondActivityTaskCompleted", i0)
	r0, _ = returns[0].(*swf.RespondActivityTaskCompletedOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) RespondActivityTaskCompletedRequest(i0 *swf.RespondActivityTaskCompletedInput) (r0 *request.Request, r1 *swf.RespondActivityTaskCompletedOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RespondActivityTaskCompletedRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*swf.RespondActivityTaskCompletedOutput)
	return
}

func (d *SWFDouble) RespondActivityTaskCompletedWithContext(i0 context.Context, i1 *swf.RespondActivityTaskCompletedInput, i2 ...request.Option) (r0 *swf.RespondActivityTaskCompletedOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RespondActivityTaskCompletedWithContext", i0, i1, i2)
	r0, _ = returns[0].(*swf.RespondActivityTaskCompletedOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) fakeRespondActivityTaskCompletedWithContext(ctx context.Context, in *swf.RespondActivityTaskCompletedInput, _ ...request.Option) (*swf.RespondActivityTaskCompletedOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RespondActivityTaskCompleted cancelled", ctx.Err())
	default:
		return d.RespondActivityTaskCompleted(in)
	}
}

func (d *SWFDouble) RespondActivityTaskFailed(i0 *swf.RespondActivityTaskFailedInput) (r0 *swf.RespondActivityTaskFailedOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RespondActivityTaskFailed", i0)
	r0, _ = returns[0].(*swf.RespondActivityTaskFailedOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) RespondActivityTaskFailedRequest(i0 *swf.RespondActivityTaskFailedInput) (r0 *request.Request, r1 *swf.RespondActivityTaskFailedOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RespondActivityTaskFailedRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*swf.RespondActivityTaskFailedOutput)
	return
}

func (d *SWFDouble) RespondActivityTaskFailedWithContext(i0 context.Context, i1 *swf.RespondActivityTaskFailedInput, i2 ...request.Option) (r0 *swf.RespondActivityTaskFailedOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RespondActivityTaskFailedWithContext", i0, i1, i2)
	r0, _ = returns[0].(*swf.RespondActivityTaskFailedOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) fakeRespondActivityTaskFailedWithContext(ctx context.Context, in *swf.RespondActivityTaskFailedInput, _ ...request.Option) (*swf.RespondActivityTaskFailedOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RespondActivityTaskFailed cancelled", ctx.Err())
	default:
		return d.RespondActivityTaskFailed(in)
	}
}

func (d *SWFDouble) RespondDecisionTaskCompleted(i0 *swf.RespondDecisionTaskCompletedInput) (r0 *swf.RespondDecisionTaskCompletedOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RespondDecisionTaskCompleted", i0)
	r0, _ = returns[0].(*swf.RespondDecisionTaskCompletedOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) RespondDecisionTaskCompletedRequest(i0 *swf.RespondDecisionTaskCompletedInput) (r0 *request.Request, r1 *swf.RespondDecisionTaskCompletedOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RespondDecisionTaskCompletedRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*swf.RespondDecisionTaskCompletedOutput)
	return
}

func (d *SWFDouble) RespondDecisionTaskCompletedWithContext(i0 context.Context, i1 *swf.RespondDecisionTaskCompletedInput, i2 ...request.Option) (r0 *swf.RespondDecisionTaskCompletedOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RespondDecisionTaskCompletedWithContext", i0, i1, i2)
	r0, _ = returns[0].(*swf.RespondDecisionTaskCompletedOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) fakeRespondDecisionTaskCompletedWithContext(ctx context.Context, in *swf.RespondDecisionTaskCompletedInput, _ ...request.Option) (*swf.RespondDecisionTaskCompletedOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RespondDecisionTaskCompleted cancelled", ctx.Err())
	default:
		return d.RespondDecisionTaskCompleted(in)
	}
}

func (d *SWFDouble) SignalWorkflowExecution(i0 *swf.SignalWorkflowExecutionInput) (r0 *swf.SignalWorkflowExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SignalWorkflowExecution", i0)
	r0, _ = returns[0].(*swf.SignalWorkflowExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) SignalWorkflowExecutionRequest(i0 *swf.SignalWorkflowExecutionInput) (r0 *request.Request, r1 *swf.SignalWorkflowExecutionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SignalWorkflowExecutionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*swf.SignalWorkflowExecutionOutput)
	return
}

func (d *SWFDouble) SignalWorkflowExecutionWithContext(i0 context.Context, i1 *swf.SignalWorkflowExecutionInput, i2 ...request.Option) (r0 *swf.SignalWorkflowExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SignalWorkflowExecutionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*swf.SignalWorkflowExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) fakeSignalWorkflowExecutionWithContext(ctx context.Context, in *swf.SignalWorkflowExecutionInput, _ ...request.Option) (*swf.SignalWorkflowExecutionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SignalWorkflowExecution cancelled", ctx.Err())
	default:
		return d.SignalWorkflowExecution(in)
	}
}

func (d *SWFDouble) StartWorkflowExecution(i0 *swf.StartWorkflowExecutionInput) (r0 *swf.StartWorkflowExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartWorkflowExecution", i0)
	r0, _ = returns[0].(*swf.StartWorkflowExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) StartWorkflowExecutionRequest(i0 *swf.StartWorkflowExecutionInput) (r0 *request.Request, r1 *swf.StartWorkflowExecutionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartWorkflowExecutionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*swf.StartWorkflowExecutionOutput)
	return
}

func (d *SWFDouble) StartWorkflowExecutionWithContext(i0 context.Context, i1 *swf.StartWorkflowExecutionInput, i2 ...request.Option) (r0 *swf.StartWorkflowExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartWorkflowExecutionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*swf.StartWorkflowExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) fakeStartWorkflowExecutionWithContext(ctx context.Context, in *swf.StartWorkflowExecutionInput, _ ...request.Option) (*swf.StartWorkflowExecutionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartWorkflowExecution cancelled", ctx.Err())
	default:
		return d.StartWorkflowExecution(in)
	}
}

func (d *SWFDouble) TagResource(i0 *swf.TagResourceInput) (r0 *swf.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*swf.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) TagResourceRequest(i0 *swf.TagResourceInput) (r0 *request.Request, r1 *swf.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*swf.TagResourceOutput)
	return
}

func (d *SWFDouble) TagResourceWithContext(i0 context.Context, i1 *swf.TagResourceInput, i2 ...request.Option) (r0 *swf.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*swf.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) fakeTagResourceWithContext(ctx context.Context, in *swf.TagResourceInput, _ ...request.Option) (*swf.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *SWFDouble) TerminateWorkflowExecution(i0 *swf.TerminateWorkflowExecutionInput) (r0 *swf.TerminateWorkflowExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TerminateWorkflowExecution", i0)
	r0, _ = returns[0].(*swf.TerminateWorkflowExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) TerminateWorkflowExecutionRequest(i0 *swf.TerminateWorkflowExecutionInput) (r0 *request.Request, r1 *swf.TerminateWorkflowExecutionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TerminateWorkflowExecutionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*swf.TerminateWorkflowExecutionOutput)
	return
}

func (d *SWFDouble) TerminateWorkflowExecutionWithContext(i0 context.Context, i1 *swf.TerminateWorkflowExecutionInput, i2 ...request.Option) (r0 *swf.TerminateWorkflowExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TerminateWorkflowExecutionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*swf.TerminateWorkflowExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) fakeTerminateWorkflowExecutionWithContext(ctx context.Context, in *swf.TerminateWorkflowExecutionInput, _ ...request.Option) (*swf.TerminateWorkflowExecutionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TerminateWorkflowExecution cancelled", ctx.Err())
	default:
		return d.TerminateWorkflowExecution(in)
	}
}

func (d *SWFDouble) UndeprecateActivityType(i0 *swf.UndeprecateActivityTypeInput) (r0 *swf.UndeprecateActivityTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UndeprecateActivityType", i0)
	r0, _ = returns[0].(*swf.UndeprecateActivityTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) UndeprecateActivityTypeRequest(i0 *swf.UndeprecateActivityTypeInput) (r0 *request.Request, r1 *swf.UndeprecateActivityTypeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UndeprecateActivityTypeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*swf.UndeprecateActivityTypeOutput)
	return
}

func (d *SWFDouble) UndeprecateActivityTypeWithContext(i0 context.Context, i1 *swf.UndeprecateActivityTypeInput, i2 ...request.Option) (r0 *swf.UndeprecateActivityTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UndeprecateActivityTypeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*swf.UndeprecateActivityTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) fakeUndeprecateActivityTypeWithContext(ctx context.Context, in *swf.UndeprecateActivityTypeInput, _ ...request.Option) (*swf.UndeprecateActivityTypeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UndeprecateActivityType cancelled", ctx.Err())
	default:
		return d.UndeprecateActivityType(in)
	}
}

func (d *SWFDouble) UndeprecateDomain(i0 *swf.UndeprecateDomainInput) (r0 *swf.UndeprecateDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UndeprecateDomain", i0)
	r0, _ = returns[0].(*swf.UndeprecateDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) UndeprecateDomainRequest(i0 *swf.UndeprecateDomainInput) (r0 *request.Request, r1 *swf.UndeprecateDomainOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UndeprecateDomainRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*swf.UndeprecateDomainOutput)
	return
}

func (d *SWFDouble) UndeprecateDomainWithContext(i0 context.Context, i1 *swf.UndeprecateDomainInput, i2 ...request.Option) (r0 *swf.UndeprecateDomainOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UndeprecateDomainWithContext", i0, i1, i2)
	r0, _ = returns[0].(*swf.UndeprecateDomainOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) fakeUndeprecateDomainWithContext(ctx context.Context, in *swf.UndeprecateDomainInput, _ ...request.Option) (*swf.UndeprecateDomainOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UndeprecateDomain cancelled", ctx.Err())
	default:
		return d.UndeprecateDomain(in)
	}
}

func (d *SWFDouble) UndeprecateWorkflowType(i0 *swf.UndeprecateWorkflowTypeInput) (r0 *swf.UndeprecateWorkflowTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UndeprecateWorkflowType", i0)
	r0, _ = returns[0].(*swf.UndeprecateWorkflowTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) UndeprecateWorkflowTypeRequest(i0 *swf.UndeprecateWorkflowTypeInput) (r0 *request.Request, r1 *swf.UndeprecateWorkflowTypeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UndeprecateWorkflowTypeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*swf.UndeprecateWorkflowTypeOutput)
	return
}

func (d *SWFDouble) UndeprecateWorkflowTypeWithContext(i0 context.Context, i1 *swf.UndeprecateWorkflowTypeInput, i2 ...request.Option) (r0 *swf.UndeprecateWorkflowTypeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UndeprecateWorkflowTypeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*swf.UndeprecateWorkflowTypeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) fakeUndeprecateWorkflowTypeWithContext(ctx context.Context, in *swf.UndeprecateWorkflowTypeInput, _ ...request.Option) (*swf.UndeprecateWorkflowTypeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UndeprecateWorkflowType cancelled", ctx.Err())
	default:
		return d.UndeprecateWorkflowType(in)
	}
}

func (d *SWFDouble) UntagResource(i0 *swf.UntagResourceInput) (r0 *swf.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*swf.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) UntagResourceRequest(i0 *swf.UntagResourceInput) (r0 *request.Request, r1 *swf.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*swf.UntagResourceOutput)
	return
}

func (d *SWFDouble) UntagResourceWithContext(i0 context.Context, i1 *swf.UntagResourceInput, i2 ...request.Option) (r0 *swf.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*swf.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SWFDouble) fakeUntagResourceWithContext(ctx context.Context, in *swf.UntagResourceInput, _ ...request.Option) (*swf.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}
