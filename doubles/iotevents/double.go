// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:13:16+11:00

// Package ioteventsdouble provides a TestDouble implementation of ioteventsiface.IoTEventsAPI
package ioteventsdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/iotevents"
	"github.com/aws/aws-sdk-go/service/iotevents/ioteventsiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// IoTEventsDouble is TestDouble for ioteventsiface.IoTEventsAPI
type IoTEventsDouble struct {
	ioteventsiface.IoTEventsAPI
	*awsdouble.AWSTestDouble
}

// Constructor for IoTEventsDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *IoTEventsDouble {
	result := &IoTEventsDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*ioteventsiface.IoTEventsAPI)(nil), configurators...)
	return result
}

func (d *IoTEventsDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *IoTEventsDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CreateDetectorModelWithContext":
		return m.Fake(d.fakeCreateDetectorModelWithContext)

	case "CreateInputWithContext":
		return m.Fake(d.fakeCreateInputWithContext)

	case "DeleteDetectorModelWithContext":
		return m.Fake(d.fakeDeleteDetectorModelWithContext)

	case "DeleteInputWithContext":
		return m.Fake(d.fakeDeleteInputWithContext)

	case "DescribeDetectorModelWithContext":
		return m.Fake(d.fakeDescribeDetectorModelWithContext)

	case "DescribeInputWithContext":
		return m.Fake(d.fakeDescribeInputWithContext)

	case "DescribeLoggingOptionsWithContext":
		return m.Fake(d.fakeDescribeLoggingOptionsWithContext)

	case "ListDetectorModelVersionsWithContext":
		return m.Fake(d.fakeListDetectorModelVersionsWithContext)

	case "ListDetectorModelsWithContext":
		return m.Fake(d.fakeListDetectorModelsWithContext)

	case "ListInputsWithContext":
		return m.Fake(d.fakeListInputsWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "PutLoggingOptionsWithContext":
		return m.Fake(d.fakePutLoggingOptionsWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateDetectorModelWithContext":
		return m.Fake(d.fakeUpdateDetectorModelWithContext)

	case "UpdateInputWithContext":
		return m.Fake(d.fakeUpdateInputWithContext)

	default:
		return nil
	}
}

func (d *IoTEventsDouble) CreateDetectorModel(i0 *iotevents.CreateDetectorModelInput) (r0 *iotevents.CreateDetectorModelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDetectorModel", i0)
	r0, _ = returns[0].(*iotevents.CreateDetectorModelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDouble) CreateDetectorModelRequest(i0 *iotevents.CreateDetectorModelInput) (r0 *request.Request, r1 *iotevents.CreateDetectorModelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDetectorModelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotevents.CreateDetectorModelOutput)
	return
}

func (d *IoTEventsDouble) CreateDetectorModelWithContext(i0 context.Context, i1 *iotevents.CreateDetectorModelInput, i2 ...request.Option) (r0 *iotevents.CreateDetectorModelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDetectorModelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotevents.CreateDetectorModelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDouble) fakeCreateDetectorModelWithContext(ctx context.Context, in *iotevents.CreateDetectorModelInput, _ ...request.Option) (*iotevents.CreateDetectorModelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDetectorModel cancelled", ctx.Err())
	default:
		return d.CreateDetectorModel(in)
	}
}

func (d *IoTEventsDouble) CreateInput(i0 *iotevents.CreateInputInput) (r0 *iotevents.CreateInputOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInput", i0)
	r0, _ = returns[0].(*iotevents.CreateInputOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDouble) CreateInputRequest(i0 *iotevents.CreateInputInput) (r0 *request.Request, r1 *iotevents.CreateInputOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInputRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotevents.CreateInputOutput)
	return
}

func (d *IoTEventsDouble) CreateInputWithContext(i0 context.Context, i1 *iotevents.CreateInputInput, i2 ...request.Option) (r0 *iotevents.CreateInputOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateInputWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotevents.CreateInputOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDouble) fakeCreateInputWithContext(ctx context.Context, in *iotevents.CreateInputInput, _ ...request.Option) (*iotevents.CreateInputOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateInput cancelled", ctx.Err())
	default:
		return d.CreateInput(in)
	}
}

func (d *IoTEventsDouble) DeleteDetectorModel(i0 *iotevents.DeleteDetectorModelInput) (r0 *iotevents.DeleteDetectorModelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDetectorModel", i0)
	r0, _ = returns[0].(*iotevents.DeleteDetectorModelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDouble) DeleteDetectorModelRequest(i0 *iotevents.DeleteDetectorModelInput) (r0 *request.Request, r1 *iotevents.DeleteDetectorModelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDetectorModelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotevents.DeleteDetectorModelOutput)
	return
}

func (d *IoTEventsDouble) DeleteDetectorModelWithContext(i0 context.Context, i1 *iotevents.DeleteDetectorModelInput, i2 ...request.Option) (r0 *iotevents.DeleteDetectorModelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDetectorModelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotevents.DeleteDetectorModelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDouble) fakeDeleteDetectorModelWithContext(ctx context.Context, in *iotevents.DeleteDetectorModelInput, _ ...request.Option) (*iotevents.DeleteDetectorModelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDetectorModel cancelled", ctx.Err())
	default:
		return d.DeleteDetectorModel(in)
	}
}

func (d *IoTEventsDouble) DeleteInput(i0 *iotevents.DeleteInputInput) (r0 *iotevents.DeleteInputOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInput", i0)
	r0, _ = returns[0].(*iotevents.DeleteInputOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDouble) DeleteInputRequest(i0 *iotevents.DeleteInputInput) (r0 *request.Request, r1 *iotevents.DeleteInputOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInputRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotevents.DeleteInputOutput)
	return
}

func (d *IoTEventsDouble) DeleteInputWithContext(i0 context.Context, i1 *iotevents.DeleteInputInput, i2 ...request.Option) (r0 *iotevents.DeleteInputOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInputWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotevents.DeleteInputOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDouble) fakeDeleteInputWithContext(ctx context.Context, in *iotevents.DeleteInputInput, _ ...request.Option) (*iotevents.DeleteInputOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteInput cancelled", ctx.Err())
	default:
		return d.DeleteInput(in)
	}
}

func (d *IoTEventsDouble) DescribeDetectorModel(i0 *iotevents.DescribeDetectorModelInput) (r0 *iotevents.DescribeDetectorModelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDetectorModel", i0)
	r0, _ = returns[0].(*iotevents.DescribeDetectorModelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDouble) DescribeDetectorModelRequest(i0 *iotevents.DescribeDetectorModelInput) (r0 *request.Request, r1 *iotevents.DescribeDetectorModelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDetectorModelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotevents.DescribeDetectorModelOutput)
	return
}

func (d *IoTEventsDouble) DescribeDetectorModelWithContext(i0 context.Context, i1 *iotevents.DescribeDetectorModelInput, i2 ...request.Option) (r0 *iotevents.DescribeDetectorModelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDetectorModelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotevents.DescribeDetectorModelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDouble) fakeDescribeDetectorModelWithContext(ctx context.Context, in *iotevents.DescribeDetectorModelInput, _ ...request.Option) (*iotevents.DescribeDetectorModelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDetectorModel cancelled", ctx.Err())
	default:
		return d.DescribeDetectorModel(in)
	}
}

func (d *IoTEventsDouble) DescribeInput(i0 *iotevents.DescribeInputInput) (r0 *iotevents.DescribeInputOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInput", i0)
	r0, _ = returns[0].(*iotevents.DescribeInputOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDouble) DescribeInputRequest(i0 *iotevents.DescribeInputInput) (r0 *request.Request, r1 *iotevents.DescribeInputOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInputRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotevents.DescribeInputOutput)
	return
}

func (d *IoTEventsDouble) DescribeInputWithContext(i0 context.Context, i1 *iotevents.DescribeInputInput, i2 ...request.Option) (r0 *iotevents.DescribeInputOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInputWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotevents.DescribeInputOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDouble) fakeDescribeInputWithContext(ctx context.Context, in *iotevents.DescribeInputInput, _ ...request.Option) (*iotevents.DescribeInputOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeInput cancelled", ctx.Err())
	default:
		return d.DescribeInput(in)
	}
}

func (d *IoTEventsDouble) DescribeLoggingOptions(i0 *iotevents.DescribeLoggingOptionsInput) (r0 *iotevents.DescribeLoggingOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoggingOptions", i0)
	r0, _ = returns[0].(*iotevents.DescribeLoggingOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDouble) DescribeLoggingOptionsRequest(i0 *iotevents.DescribeLoggingOptionsInput) (r0 *request.Request, r1 *iotevents.DescribeLoggingOptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoggingOptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotevents.DescribeLoggingOptionsOutput)
	return
}

func (d *IoTEventsDouble) DescribeLoggingOptionsWithContext(i0 context.Context, i1 *iotevents.DescribeLoggingOptionsInput, i2 ...request.Option) (r0 *iotevents.DescribeLoggingOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoggingOptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotevents.DescribeLoggingOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDouble) fakeDescribeLoggingOptionsWithContext(ctx context.Context, in *iotevents.DescribeLoggingOptionsInput, _ ...request.Option) (*iotevents.DescribeLoggingOptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeLoggingOptions cancelled", ctx.Err())
	default:
		return d.DescribeLoggingOptions(in)
	}
}

func (d *IoTEventsDouble) ListDetectorModelVersions(i0 *iotevents.ListDetectorModelVersionsInput) (r0 *iotevents.ListDetectorModelVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDetectorModelVersions", i0)
	r0, _ = returns[0].(*iotevents.ListDetectorModelVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDouble) ListDetectorModelVersionsRequest(i0 *iotevents.ListDetectorModelVersionsInput) (r0 *request.Request, r1 *iotevents.ListDetectorModelVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDetectorModelVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotevents.ListDetectorModelVersionsOutput)
	return
}

func (d *IoTEventsDouble) ListDetectorModelVersionsWithContext(i0 context.Context, i1 *iotevents.ListDetectorModelVersionsInput, i2 ...request.Option) (r0 *iotevents.ListDetectorModelVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDetectorModelVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotevents.ListDetectorModelVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDouble) fakeListDetectorModelVersionsWithContext(ctx context.Context, in *iotevents.ListDetectorModelVersionsInput, _ ...request.Option) (*iotevents.ListDetectorModelVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDetectorModelVersions cancelled", ctx.Err())
	default:
		return d.ListDetectorModelVersions(in)
	}
}

func (d *IoTEventsDouble) ListDetectorModels(i0 *iotevents.ListDetectorModelsInput) (r0 *iotevents.ListDetectorModelsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDetectorModels", i0)
	r0, _ = returns[0].(*iotevents.ListDetectorModelsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDouble) ListDetectorModelsRequest(i0 *iotevents.ListDetectorModelsInput) (r0 *request.Request, r1 *iotevents.ListDetectorModelsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDetectorModelsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotevents.ListDetectorModelsOutput)
	return
}

func (d *IoTEventsDouble) ListDetectorModelsWithContext(i0 context.Context, i1 *iotevents.ListDetectorModelsInput, i2 ...request.Option) (r0 *iotevents.ListDetectorModelsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDetectorModelsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotevents.ListDetectorModelsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDouble) fakeListDetectorModelsWithContext(ctx context.Context, in *iotevents.ListDetectorModelsInput, _ ...request.Option) (*iotevents.ListDetectorModelsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDetectorModels cancelled", ctx.Err())
	default:
		return d.ListDetectorModels(in)
	}
}

func (d *IoTEventsDouble) ListInputs(i0 *iotevents.ListInputsInput) (r0 *iotevents.ListInputsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInputs", i0)
	r0, _ = returns[0].(*iotevents.ListInputsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDouble) ListInputsRequest(i0 *iotevents.ListInputsInput) (r0 *request.Request, r1 *iotevents.ListInputsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInputsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotevents.ListInputsOutput)
	return
}

func (d *IoTEventsDouble) ListInputsWithContext(i0 context.Context, i1 *iotevents.ListInputsInput, i2 ...request.Option) (r0 *iotevents.ListInputsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInputsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotevents.ListInputsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDouble) fakeListInputsWithContext(ctx context.Context, in *iotevents.ListInputsInput, _ ...request.Option) (*iotevents.ListInputsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListInputs cancelled", ctx.Err())
	default:
		return d.ListInputs(in)
	}
}

func (d *IoTEventsDouble) ListTagsForResource(i0 *iotevents.ListTagsForResourceInput) (r0 *iotevents.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*iotevents.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDouble) ListTagsForResourceRequest(i0 *iotevents.ListTagsForResourceInput) (r0 *request.Request, r1 *iotevents.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotevents.ListTagsForResourceOutput)
	return
}

func (d *IoTEventsDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *iotevents.ListTagsForResourceInput, i2 ...request.Option) (r0 *iotevents.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotevents.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *iotevents.ListTagsForResourceInput, _ ...request.Option) (*iotevents.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *IoTEventsDouble) PutLoggingOptions(i0 *iotevents.PutLoggingOptionsInput) (r0 *iotevents.PutLoggingOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutLoggingOptions", i0)
	r0, _ = returns[0].(*iotevents.PutLoggingOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDouble) PutLoggingOptionsRequest(i0 *iotevents.PutLoggingOptionsInput) (r0 *request.Request, r1 *iotevents.PutLoggingOptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutLoggingOptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotevents.PutLoggingOptionsOutput)
	return
}

func (d *IoTEventsDouble) PutLoggingOptionsWithContext(i0 context.Context, i1 *iotevents.PutLoggingOptionsInput, i2 ...request.Option) (r0 *iotevents.PutLoggingOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutLoggingOptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotevents.PutLoggingOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDouble) fakePutLoggingOptionsWithContext(ctx context.Context, in *iotevents.PutLoggingOptionsInput, _ ...request.Option) (*iotevents.PutLoggingOptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutLoggingOptions cancelled", ctx.Err())
	default:
		return d.PutLoggingOptions(in)
	}
}

func (d *IoTEventsDouble) TagResource(i0 *iotevents.TagResourceInput) (r0 *iotevents.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*iotevents.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDouble) TagResourceRequest(i0 *iotevents.TagResourceInput) (r0 *request.Request, r1 *iotevents.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotevents.TagResourceOutput)
	return
}

func (d *IoTEventsDouble) TagResourceWithContext(i0 context.Context, i1 *iotevents.TagResourceInput, i2 ...request.Option) (r0 *iotevents.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotevents.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDouble) fakeTagResourceWithContext(ctx context.Context, in *iotevents.TagResourceInput, _ ...request.Option) (*iotevents.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *IoTEventsDouble) UntagResource(i0 *iotevents.UntagResourceInput) (r0 *iotevents.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*iotevents.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDouble) UntagResourceRequest(i0 *iotevents.UntagResourceInput) (r0 *request.Request, r1 *iotevents.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotevents.UntagResourceOutput)
	return
}

func (d *IoTEventsDouble) UntagResourceWithContext(i0 context.Context, i1 *iotevents.UntagResourceInput, i2 ...request.Option) (r0 *iotevents.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotevents.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDouble) fakeUntagResourceWithContext(ctx context.Context, in *iotevents.UntagResourceInput, _ ...request.Option) (*iotevents.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *IoTEventsDouble) UpdateDetectorModel(i0 *iotevents.UpdateDetectorModelInput) (r0 *iotevents.UpdateDetectorModelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDetectorModel", i0)
	r0, _ = returns[0].(*iotevents.UpdateDetectorModelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDouble) UpdateDetectorModelRequest(i0 *iotevents.UpdateDetectorModelInput) (r0 *request.Request, r1 *iotevents.UpdateDetectorModelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDetectorModelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotevents.UpdateDetectorModelOutput)
	return
}

func (d *IoTEventsDouble) UpdateDetectorModelWithContext(i0 context.Context, i1 *iotevents.UpdateDetectorModelInput, i2 ...request.Option) (r0 *iotevents.UpdateDetectorModelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDetectorModelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotevents.UpdateDetectorModelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDouble) fakeUpdateDetectorModelWithContext(ctx context.Context, in *iotevents.UpdateDetectorModelInput, _ ...request.Option) (*iotevents.UpdateDetectorModelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDetectorModel cancelled", ctx.Err())
	default:
		return d.UpdateDetectorModel(in)
	}
}

func (d *IoTEventsDouble) UpdateInput(i0 *iotevents.UpdateInputInput) (r0 *iotevents.UpdateInputOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateInput", i0)
	r0, _ = returns[0].(*iotevents.UpdateInputOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDouble) UpdateInputRequest(i0 *iotevents.UpdateInputInput) (r0 *request.Request, r1 *iotevents.UpdateInputOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateInputRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotevents.UpdateInputOutput)
	return
}

func (d *IoTEventsDouble) UpdateInputWithContext(i0 context.Context, i1 *iotevents.UpdateInputInput, i2 ...request.Option) (r0 *iotevents.UpdateInputOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateInputWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotevents.UpdateInputOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDouble) fakeUpdateInputWithContext(ctx context.Context, in *iotevents.UpdateInputInput, _ ...request.Option) (*iotevents.UpdateInputOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateInput cancelled", ctx.Err())
	default:
		return d.UpdateInput(in)
	}
}
