// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:13:20+11:00

// Package iotsecuretunnelingdouble provides a TestDouble implementation of iotsecuretunnelingiface.IoTSecureTunnelingAPI
package iotsecuretunnelingdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/iotsecuretunneling"
	"github.com/aws/aws-sdk-go/service/iotsecuretunneling/iotsecuretunnelingiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// IoTSecureTunnelingDouble is TestDouble for iotsecuretunnelingiface.IoTSecureTunnelingAPI
type IoTSecureTunnelingDouble struct {
	iotsecuretunnelingiface.IoTSecureTunnelingAPI
	*awsdouble.AWSTestDouble
}

// Constructor for IoTSecureTunnelingDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *IoTSecureTunnelingDouble {
	result := &IoTSecureTunnelingDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*iotsecuretunnelingiface.IoTSecureTunnelingAPI)(nil), configurators...)
	return result
}

func (d *IoTSecureTunnelingDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *IoTSecureTunnelingDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CloseTunnelWithContext":
		return m.Fake(d.fakeCloseTunnelWithContext)

	case "DescribeTunnelWithContext":
		return m.Fake(d.fakeDescribeTunnelWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "ListTunnelsPages":
		return m.Fake(d.fakeListTunnelsPages)

	case "ListTunnelsPagesWithContext":
		return m.Fake(d.fakeListTunnelsPagesWithContext)

	case "ListTunnelsWithContext":
		return m.Fake(d.fakeListTunnelsWithContext)

	case "OpenTunnelWithContext":
		return m.Fake(d.fakeOpenTunnelWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	default:
		return nil
	}
}

func (d *IoTSecureTunnelingDouble) CloseTunnel(i0 *iotsecuretunneling.CloseTunnelInput) (r0 *iotsecuretunneling.CloseTunnelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CloseTunnel", i0)
	r0, _ = returns[0].(*iotsecuretunneling.CloseTunnelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTSecureTunnelingDouble) CloseTunnelRequest(i0 *iotsecuretunneling.CloseTunnelInput) (r0 *request.Request, r1 *iotsecuretunneling.CloseTunnelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CloseTunnelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotsecuretunneling.CloseTunnelOutput)
	return
}

func (d *IoTSecureTunnelingDouble) CloseTunnelWithContext(i0 context.Context, i1 *iotsecuretunneling.CloseTunnelInput, i2 ...request.Option) (r0 *iotsecuretunneling.CloseTunnelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CloseTunnelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotsecuretunneling.CloseTunnelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTSecureTunnelingDouble) fakeCloseTunnelWithContext(ctx context.Context, in *iotsecuretunneling.CloseTunnelInput, _ ...request.Option) (*iotsecuretunneling.CloseTunnelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CloseTunnel cancelled", ctx.Err())
	default:
		return d.CloseTunnel(in)
	}
}

func (d *IoTSecureTunnelingDouble) DescribeTunnel(i0 *iotsecuretunneling.DescribeTunnelInput) (r0 *iotsecuretunneling.DescribeTunnelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTunnel", i0)
	r0, _ = returns[0].(*iotsecuretunneling.DescribeTunnelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTSecureTunnelingDouble) DescribeTunnelRequest(i0 *iotsecuretunneling.DescribeTunnelInput) (r0 *request.Request, r1 *iotsecuretunneling.DescribeTunnelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTunnelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotsecuretunneling.DescribeTunnelOutput)
	return
}

func (d *IoTSecureTunnelingDouble) DescribeTunnelWithContext(i0 context.Context, i1 *iotsecuretunneling.DescribeTunnelInput, i2 ...request.Option) (r0 *iotsecuretunneling.DescribeTunnelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTunnelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotsecuretunneling.DescribeTunnelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTSecureTunnelingDouble) fakeDescribeTunnelWithContext(ctx context.Context, in *iotsecuretunneling.DescribeTunnelInput, _ ...request.Option) (*iotsecuretunneling.DescribeTunnelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTunnel cancelled", ctx.Err())
	default:
		return d.DescribeTunnel(in)
	}
}

func (d *IoTSecureTunnelingDouble) ListTagsForResource(i0 *iotsecuretunneling.ListTagsForResourceInput) (r0 *iotsecuretunneling.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*iotsecuretunneling.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTSecureTunnelingDouble) ListTagsForResourceRequest(i0 *iotsecuretunneling.ListTagsForResourceInput) (r0 *request.Request, r1 *iotsecuretunneling.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotsecuretunneling.ListTagsForResourceOutput)
	return
}

func (d *IoTSecureTunnelingDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *iotsecuretunneling.ListTagsForResourceInput, i2 ...request.Option) (r0 *iotsecuretunneling.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotsecuretunneling.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTSecureTunnelingDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *iotsecuretunneling.ListTagsForResourceInput, _ ...request.Option) (*iotsecuretunneling.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *IoTSecureTunnelingDouble) ListTunnels(i0 *iotsecuretunneling.ListTunnelsInput) (r0 *iotsecuretunneling.ListTunnelsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTunnels", i0)
	r0, _ = returns[0].(*iotsecuretunneling.ListTunnelsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTSecureTunnelingDouble) ListTunnelsPages(i0 *iotsecuretunneling.ListTunnelsInput, i1 func(*iotsecuretunneling.ListTunnelsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTunnelsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *IoTSecureTunnelingDouble) fakeListTunnelsPages(in *iotsecuretunneling.ListTunnelsInput, pager func(*iotsecuretunneling.ListTunnelsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTunnels", paginators, in, pager)
}

func (d *IoTSecureTunnelingDouble) ListTunnelsPagesWithContext(i0 context.Context, i1 *iotsecuretunneling.ListTunnelsInput, i2 func(*iotsecuretunneling.ListTunnelsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTunnelsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *IoTSecureTunnelingDouble) fakeListTunnelsPagesWithContext(ctx context.Context, in *iotsecuretunneling.ListTunnelsInput, pager func(*iotsecuretunneling.ListTunnelsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTunnels", paginators, ctx, in, pager, options...)
}

func (d *IoTSecureTunnelingDouble) ListTunnelsRequest(i0 *iotsecuretunneling.ListTunnelsInput) (r0 *request.Request, r1 *iotsecuretunneling.ListTunnelsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTunnelsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotsecuretunneling.ListTunnelsOutput)
	return
}

func (d *IoTSecureTunnelingDouble) ListTunnelsWithContext(i0 context.Context, i1 *iotsecuretunneling.ListTunnelsInput, i2 ...request.Option) (r0 *iotsecuretunneling.ListTunnelsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTunnelsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotsecuretunneling.ListTunnelsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTSecureTunnelingDouble) fakeListTunnelsWithContext(ctx context.Context, in *iotsecuretunneling.ListTunnelsInput, _ ...request.Option) (*iotsecuretunneling.ListTunnelsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTunnels cancelled", ctx.Err())
	default:
		return d.ListTunnels(in)
	}
}

func (d *IoTSecureTunnelingDouble) OpenTunnel(i0 *iotsecuretunneling.OpenTunnelInput) (r0 *iotsecuretunneling.OpenTunnelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("OpenTunnel", i0)
	r0, _ = returns[0].(*iotsecuretunneling.OpenTunnelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTSecureTunnelingDouble) OpenTunnelRequest(i0 *iotsecuretunneling.OpenTunnelInput) (r0 *request.Request, r1 *iotsecuretunneling.OpenTunnelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("OpenTunnelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotsecuretunneling.OpenTunnelOutput)
	return
}

func (d *IoTSecureTunnelingDouble) OpenTunnelWithContext(i0 context.Context, i1 *iotsecuretunneling.OpenTunnelInput, i2 ...request.Option) (r0 *iotsecuretunneling.OpenTunnelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("OpenTunnelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotsecuretunneling.OpenTunnelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTSecureTunnelingDouble) fakeOpenTunnelWithContext(ctx context.Context, in *iotsecuretunneling.OpenTunnelInput, _ ...request.Option) (*iotsecuretunneling.OpenTunnelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "OpenTunnel cancelled", ctx.Err())
	default:
		return d.OpenTunnel(in)
	}
}

func (d *IoTSecureTunnelingDouble) TagResource(i0 *iotsecuretunneling.TagResourceInput) (r0 *iotsecuretunneling.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*iotsecuretunneling.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTSecureTunnelingDouble) TagResourceRequest(i0 *iotsecuretunneling.TagResourceInput) (r0 *request.Request, r1 *iotsecuretunneling.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotsecuretunneling.TagResourceOutput)
	return
}

func (d *IoTSecureTunnelingDouble) TagResourceWithContext(i0 context.Context, i1 *iotsecuretunneling.TagResourceInput, i2 ...request.Option) (r0 *iotsecuretunneling.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotsecuretunneling.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTSecureTunnelingDouble) fakeTagResourceWithContext(ctx context.Context, in *iotsecuretunneling.TagResourceInput, _ ...request.Option) (*iotsecuretunneling.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *IoTSecureTunnelingDouble) UntagResource(i0 *iotsecuretunneling.UntagResourceInput) (r0 *iotsecuretunneling.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*iotsecuretunneling.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTSecureTunnelingDouble) UntagResourceRequest(i0 *iotsecuretunneling.UntagResourceInput) (r0 *request.Request, r1 *iotsecuretunneling.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iotsecuretunneling.UntagResourceOutput)
	return
}

func (d *IoTSecureTunnelingDouble) UntagResourceWithContext(i0 context.Context, i1 *iotsecuretunneling.UntagResourceInput, i2 ...request.Option) (r0 *iotsecuretunneling.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iotsecuretunneling.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTSecureTunnelingDouble) fakeUntagResourceWithContext(ctx context.Context, in *iotsecuretunneling.UntagResourceInput, _ ...request.Option) (*iotsecuretunneling.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}
