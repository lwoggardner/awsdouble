// Code generated by go awsdoublegen; DO NOT EDIT.
// This file was generated at 2020-01-29T21:22:05+11:00
package redshiftdouble

import (
	"time"

	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/lwoggardner/awsdouble"
)

var waiters = map[string]*awsdouble.Waiter{

	"ClusterAvailable": &awsdouble.Waiter{
		OperationName: "DescribeClusters",
		Waiter: request.Waiter{
			Name:        "WaitUntilClusterAvailable",
			MaxAttempts: 30,
			Delay:       request.ConstantWaiterDelay(60 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathAllWaiterMatch, Argument: "Clusters[].ClusterStatus",
					Expected: "available",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Clusters[].ClusterStatus",
					Expected: "deleting",
				},
				{
					State:    request.RetryWaiterState,
					Matcher:  request.ErrorWaiterMatch,
					Expected: "ClusterNotFound",
				},
			},
		},
	},

	"ClusterDeleted": &awsdouble.Waiter{
		OperationName: "DescribeClusters",
		Waiter: request.Waiter{
			Name:        "WaitUntilClusterDeleted",
			MaxAttempts: 30,
			Delay:       request.ConstantWaiterDelay(60 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:    request.SuccessWaiterState,
					Matcher:  request.ErrorWaiterMatch,
					Expected: "ClusterNotFound",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Clusters[].ClusterStatus",
					Expected: "creating",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Clusters[].ClusterStatus",
					Expected: "modifying",
				},
			},
		},
	},

	"ClusterRestored": &awsdouble.Waiter{
		OperationName: "DescribeClusters",
		Waiter: request.Waiter{
			Name:        "WaitUntilClusterRestored",
			MaxAttempts: 30,
			Delay:       request.ConstantWaiterDelay(60 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathAllWaiterMatch, Argument: "Clusters[].RestoreStatus.Status",
					Expected: "completed",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Clusters[].ClusterStatus",
					Expected: "deleting",
				},
			},
		},
	},

	"SnapshotAvailable": &awsdouble.Waiter{
		OperationName: "DescribeClusterSnapshots",
		Waiter: request.Waiter{
			Name:        "WaitUntilSnapshotAvailable",
			MaxAttempts: 20,
			Delay:       request.ConstantWaiterDelay(15 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathAllWaiterMatch, Argument: "Snapshots[].Status",
					Expected: "available",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Snapshots[].Status",
					Expected: "failed",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Snapshots[].Status",
					Expected: "deleted",
				},
			},
		},
	},
}
