// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:14:35+11:00

// Package redshiftdouble provides a TestDouble implementation of redshiftiface.RedshiftAPI
package redshiftdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/redshift"
	"github.com/aws/aws-sdk-go/service/redshift/redshiftiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// RedshiftDouble is TestDouble for redshiftiface.RedshiftAPI
type RedshiftDouble struct {
	redshiftiface.RedshiftAPI
	*awsdouble.AWSTestDouble
}

// Constructor for RedshiftDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *RedshiftDouble {
	result := &RedshiftDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*redshiftiface.RedshiftAPI)(nil), configurators...)
	return result
}

func (d *RedshiftDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *RedshiftDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AcceptReservedNodeExchangeWithContext":
		return m.Fake(d.fakeAcceptReservedNodeExchangeWithContext)

	case "AuthorizeClusterSecurityGroupIngressWithContext":
		return m.Fake(d.fakeAuthorizeClusterSecurityGroupIngressWithContext)

	case "AuthorizeSnapshotAccessWithContext":
		return m.Fake(d.fakeAuthorizeSnapshotAccessWithContext)

	case "BatchDeleteClusterSnapshotsWithContext":
		return m.Fake(d.fakeBatchDeleteClusterSnapshotsWithContext)

	case "BatchModifyClusterSnapshotsWithContext":
		return m.Fake(d.fakeBatchModifyClusterSnapshotsWithContext)

	case "CancelResizeWithContext":
		return m.Fake(d.fakeCancelResizeWithContext)

	case "CopyClusterSnapshotWithContext":
		return m.Fake(d.fakeCopyClusterSnapshotWithContext)

	case "CreateClusterParameterGroupWithContext":
		return m.Fake(d.fakeCreateClusterParameterGroupWithContext)

	case "CreateClusterSecurityGroupWithContext":
		return m.Fake(d.fakeCreateClusterSecurityGroupWithContext)

	case "CreateClusterSnapshotWithContext":
		return m.Fake(d.fakeCreateClusterSnapshotWithContext)

	case "CreateClusterSubnetGroupWithContext":
		return m.Fake(d.fakeCreateClusterSubnetGroupWithContext)

	case "CreateClusterWithContext":
		return m.Fake(d.fakeCreateClusterWithContext)

	case "CreateEventSubscriptionWithContext":
		return m.Fake(d.fakeCreateEventSubscriptionWithContext)

	case "CreateHsmClientCertificateWithContext":
		return m.Fake(d.fakeCreateHsmClientCertificateWithContext)

	case "CreateHsmConfigurationWithContext":
		return m.Fake(d.fakeCreateHsmConfigurationWithContext)

	case "CreateScheduledActionWithContext":
		return m.Fake(d.fakeCreateScheduledActionWithContext)

	case "CreateSnapshotCopyGrantWithContext":
		return m.Fake(d.fakeCreateSnapshotCopyGrantWithContext)

	case "CreateSnapshotScheduleWithContext":
		return m.Fake(d.fakeCreateSnapshotScheduleWithContext)

	case "CreateTagsWithContext":
		return m.Fake(d.fakeCreateTagsWithContext)

	case "DeleteClusterParameterGroupWithContext":
		return m.Fake(d.fakeDeleteClusterParameterGroupWithContext)

	case "DeleteClusterSecurityGroupWithContext":
		return m.Fake(d.fakeDeleteClusterSecurityGroupWithContext)

	case "DeleteClusterSnapshotWithContext":
		return m.Fake(d.fakeDeleteClusterSnapshotWithContext)

	case "DeleteClusterSubnetGroupWithContext":
		return m.Fake(d.fakeDeleteClusterSubnetGroupWithContext)

	case "DeleteClusterWithContext":
		return m.Fake(d.fakeDeleteClusterWithContext)

	case "DeleteEventSubscriptionWithContext":
		return m.Fake(d.fakeDeleteEventSubscriptionWithContext)

	case "DeleteHsmClientCertificateWithContext":
		return m.Fake(d.fakeDeleteHsmClientCertificateWithContext)

	case "DeleteHsmConfigurationWithContext":
		return m.Fake(d.fakeDeleteHsmConfigurationWithContext)

	case "DeleteScheduledActionWithContext":
		return m.Fake(d.fakeDeleteScheduledActionWithContext)

	case "DeleteSnapshotCopyGrantWithContext":
		return m.Fake(d.fakeDeleteSnapshotCopyGrantWithContext)

	case "DeleteSnapshotScheduleWithContext":
		return m.Fake(d.fakeDeleteSnapshotScheduleWithContext)

	case "DeleteTagsWithContext":
		return m.Fake(d.fakeDeleteTagsWithContext)

	case "DescribeAccountAttributesWithContext":
		return m.Fake(d.fakeDescribeAccountAttributesWithContext)

	case "DescribeClusterDbRevisionsWithContext":
		return m.Fake(d.fakeDescribeClusterDbRevisionsWithContext)

	case "DescribeClusterParameterGroupsPages":
		return m.Fake(d.fakeDescribeClusterParameterGroupsPages)

	case "DescribeClusterParameterGroupsPagesWithContext":
		return m.Fake(d.fakeDescribeClusterParameterGroupsPagesWithContext)

	case "DescribeClusterParameterGroupsWithContext":
		return m.Fake(d.fakeDescribeClusterParameterGroupsWithContext)

	case "DescribeClusterParametersPages":
		return m.Fake(d.fakeDescribeClusterParametersPages)

	case "DescribeClusterParametersPagesWithContext":
		return m.Fake(d.fakeDescribeClusterParametersPagesWithContext)

	case "DescribeClusterParametersWithContext":
		return m.Fake(d.fakeDescribeClusterParametersWithContext)

	case "DescribeClusterSecurityGroupsPages":
		return m.Fake(d.fakeDescribeClusterSecurityGroupsPages)

	case "DescribeClusterSecurityGroupsPagesWithContext":
		return m.Fake(d.fakeDescribeClusterSecurityGroupsPagesWithContext)

	case "DescribeClusterSecurityGroupsWithContext":
		return m.Fake(d.fakeDescribeClusterSecurityGroupsWithContext)

	case "DescribeClusterSnapshotsPages":
		return m.Fake(d.fakeDescribeClusterSnapshotsPages)

	case "DescribeClusterSnapshotsPagesWithContext":
		return m.Fake(d.fakeDescribeClusterSnapshotsPagesWithContext)

	case "DescribeClusterSnapshotsWithContext":
		return m.Fake(d.fakeDescribeClusterSnapshotsWithContext)

	case "DescribeClusterSubnetGroupsPages":
		return m.Fake(d.fakeDescribeClusterSubnetGroupsPages)

	case "DescribeClusterSubnetGroupsPagesWithContext":
		return m.Fake(d.fakeDescribeClusterSubnetGroupsPagesWithContext)

	case "DescribeClusterSubnetGroupsWithContext":
		return m.Fake(d.fakeDescribeClusterSubnetGroupsWithContext)

	case "DescribeClusterTracksWithContext":
		return m.Fake(d.fakeDescribeClusterTracksWithContext)

	case "DescribeClusterVersionsPages":
		return m.Fake(d.fakeDescribeClusterVersionsPages)

	case "DescribeClusterVersionsPagesWithContext":
		return m.Fake(d.fakeDescribeClusterVersionsPagesWithContext)

	case "DescribeClusterVersionsWithContext":
		return m.Fake(d.fakeDescribeClusterVersionsWithContext)

	case "DescribeClustersPages":
		return m.Fake(d.fakeDescribeClustersPages)

	case "DescribeClustersPagesWithContext":
		return m.Fake(d.fakeDescribeClustersPagesWithContext)

	case "DescribeClustersWithContext":
		return m.Fake(d.fakeDescribeClustersWithContext)

	case "DescribeDefaultClusterParametersPages":
		return m.Fake(d.fakeDescribeDefaultClusterParametersPages)

	case "DescribeDefaultClusterParametersPagesWithContext":
		return m.Fake(d.fakeDescribeDefaultClusterParametersPagesWithContext)

	case "DescribeDefaultClusterParametersWithContext":
		return m.Fake(d.fakeDescribeDefaultClusterParametersWithContext)

	case "DescribeEventCategoriesWithContext":
		return m.Fake(d.fakeDescribeEventCategoriesWithContext)

	case "DescribeEventSubscriptionsPages":
		return m.Fake(d.fakeDescribeEventSubscriptionsPages)

	case "DescribeEventSubscriptionsPagesWithContext":
		return m.Fake(d.fakeDescribeEventSubscriptionsPagesWithContext)

	case "DescribeEventSubscriptionsWithContext":
		return m.Fake(d.fakeDescribeEventSubscriptionsWithContext)

	case "DescribeEventsPages":
		return m.Fake(d.fakeDescribeEventsPages)

	case "DescribeEventsPagesWithContext":
		return m.Fake(d.fakeDescribeEventsPagesWithContext)

	case "DescribeEventsWithContext":
		return m.Fake(d.fakeDescribeEventsWithContext)

	case "DescribeHsmClientCertificatesPages":
		return m.Fake(d.fakeDescribeHsmClientCertificatesPages)

	case "DescribeHsmClientCertificatesPagesWithContext":
		return m.Fake(d.fakeDescribeHsmClientCertificatesPagesWithContext)

	case "DescribeHsmClientCertificatesWithContext":
		return m.Fake(d.fakeDescribeHsmClientCertificatesWithContext)

	case "DescribeHsmConfigurationsPages":
		return m.Fake(d.fakeDescribeHsmConfigurationsPages)

	case "DescribeHsmConfigurationsPagesWithContext":
		return m.Fake(d.fakeDescribeHsmConfigurationsPagesWithContext)

	case "DescribeHsmConfigurationsWithContext":
		return m.Fake(d.fakeDescribeHsmConfigurationsWithContext)

	case "DescribeLoggingStatusWithContext":
		return m.Fake(d.fakeDescribeLoggingStatusWithContext)

	case "DescribeNodeConfigurationOptionsPages":
		return m.Fake(d.fakeDescribeNodeConfigurationOptionsPages)

	case "DescribeNodeConfigurationOptionsPagesWithContext":
		return m.Fake(d.fakeDescribeNodeConfigurationOptionsPagesWithContext)

	case "DescribeNodeConfigurationOptionsWithContext":
		return m.Fake(d.fakeDescribeNodeConfigurationOptionsWithContext)

	case "DescribeOrderableClusterOptionsPages":
		return m.Fake(d.fakeDescribeOrderableClusterOptionsPages)

	case "DescribeOrderableClusterOptionsPagesWithContext":
		return m.Fake(d.fakeDescribeOrderableClusterOptionsPagesWithContext)

	case "DescribeOrderableClusterOptionsWithContext":
		return m.Fake(d.fakeDescribeOrderableClusterOptionsWithContext)

	case "DescribeReservedNodeOfferingsPages":
		return m.Fake(d.fakeDescribeReservedNodeOfferingsPages)

	case "DescribeReservedNodeOfferingsPagesWithContext":
		return m.Fake(d.fakeDescribeReservedNodeOfferingsPagesWithContext)

	case "DescribeReservedNodeOfferingsWithContext":
		return m.Fake(d.fakeDescribeReservedNodeOfferingsWithContext)

	case "DescribeReservedNodesPages":
		return m.Fake(d.fakeDescribeReservedNodesPages)

	case "DescribeReservedNodesPagesWithContext":
		return m.Fake(d.fakeDescribeReservedNodesPagesWithContext)

	case "DescribeReservedNodesWithContext":
		return m.Fake(d.fakeDescribeReservedNodesWithContext)

	case "DescribeResizeWithContext":
		return m.Fake(d.fakeDescribeResizeWithContext)

	case "DescribeScheduledActionsPages":
		return m.Fake(d.fakeDescribeScheduledActionsPages)

	case "DescribeScheduledActionsPagesWithContext":
		return m.Fake(d.fakeDescribeScheduledActionsPagesWithContext)

	case "DescribeScheduledActionsWithContext":
		return m.Fake(d.fakeDescribeScheduledActionsWithContext)

	case "DescribeSnapshotCopyGrantsWithContext":
		return m.Fake(d.fakeDescribeSnapshotCopyGrantsWithContext)

	case "DescribeSnapshotSchedulesWithContext":
		return m.Fake(d.fakeDescribeSnapshotSchedulesWithContext)

	case "DescribeStorageWithContext":
		return m.Fake(d.fakeDescribeStorageWithContext)

	case "DescribeTableRestoreStatusWithContext":
		return m.Fake(d.fakeDescribeTableRestoreStatusWithContext)

	case "DescribeTagsWithContext":
		return m.Fake(d.fakeDescribeTagsWithContext)

	case "DisableLoggingWithContext":
		return m.Fake(d.fakeDisableLoggingWithContext)

	case "DisableSnapshotCopyWithContext":
		return m.Fake(d.fakeDisableSnapshotCopyWithContext)

	case "EnableLoggingWithContext":
		return m.Fake(d.fakeEnableLoggingWithContext)

	case "EnableSnapshotCopyWithContext":
		return m.Fake(d.fakeEnableSnapshotCopyWithContext)

	case "GetClusterCredentialsWithContext":
		return m.Fake(d.fakeGetClusterCredentialsWithContext)

	case "GetReservedNodeExchangeOfferingsWithContext":
		return m.Fake(d.fakeGetReservedNodeExchangeOfferingsWithContext)

	case "ModifyClusterDbRevisionWithContext":
		return m.Fake(d.fakeModifyClusterDbRevisionWithContext)

	case "ModifyClusterIamRolesWithContext":
		return m.Fake(d.fakeModifyClusterIamRolesWithContext)

	case "ModifyClusterMaintenanceWithContext":
		return m.Fake(d.fakeModifyClusterMaintenanceWithContext)

	case "ModifyClusterParameterGroupWithContext":
		return m.Fake(d.fakeModifyClusterParameterGroupWithContext)

	case "ModifyClusterSnapshotScheduleWithContext":
		return m.Fake(d.fakeModifyClusterSnapshotScheduleWithContext)

	case "ModifyClusterSnapshotWithContext":
		return m.Fake(d.fakeModifyClusterSnapshotWithContext)

	case "ModifyClusterSubnetGroupWithContext":
		return m.Fake(d.fakeModifyClusterSubnetGroupWithContext)

	case "ModifyClusterWithContext":
		return m.Fake(d.fakeModifyClusterWithContext)

	case "ModifyEventSubscriptionWithContext":
		return m.Fake(d.fakeModifyEventSubscriptionWithContext)

	case "ModifyScheduledActionWithContext":
		return m.Fake(d.fakeModifyScheduledActionWithContext)

	case "ModifySnapshotCopyRetentionPeriodWithContext":
		return m.Fake(d.fakeModifySnapshotCopyRetentionPeriodWithContext)

	case "ModifySnapshotScheduleWithContext":
		return m.Fake(d.fakeModifySnapshotScheduleWithContext)

	case "PurchaseReservedNodeOfferingWithContext":
		return m.Fake(d.fakePurchaseReservedNodeOfferingWithContext)

	case "RebootClusterWithContext":
		return m.Fake(d.fakeRebootClusterWithContext)

	case "ResetClusterParameterGroupWithContext":
		return m.Fake(d.fakeResetClusterParameterGroupWithContext)

	case "ResizeClusterWithContext":
		return m.Fake(d.fakeResizeClusterWithContext)

	case "RestoreFromClusterSnapshotWithContext":
		return m.Fake(d.fakeRestoreFromClusterSnapshotWithContext)

	case "RestoreTableFromClusterSnapshotWithContext":
		return m.Fake(d.fakeRestoreTableFromClusterSnapshotWithContext)

	case "RevokeClusterSecurityGroupIngressWithContext":
		return m.Fake(d.fakeRevokeClusterSecurityGroupIngressWithContext)

	case "RevokeSnapshotAccessWithContext":
		return m.Fake(d.fakeRevokeSnapshotAccessWithContext)

	case "RotateEncryptionKeyWithContext":
		return m.Fake(d.fakeRotateEncryptionKeyWithContext)

	case "WaitUntilClusterAvailable":
		return m.Fake(d.fakeWaitUntilClusterAvailable)

	case "WaitUntilClusterAvailableWithContext":
		return m.Fake(d.fakeWaitUntilClusterAvailableWithContext)

	case "WaitUntilClusterDeleted":
		return m.Fake(d.fakeWaitUntilClusterDeleted)

	case "WaitUntilClusterDeletedWithContext":
		return m.Fake(d.fakeWaitUntilClusterDeletedWithContext)

	case "WaitUntilClusterRestored":
		return m.Fake(d.fakeWaitUntilClusterRestored)

	case "WaitUntilClusterRestoredWithContext":
		return m.Fake(d.fakeWaitUntilClusterRestoredWithContext)

	case "WaitUntilSnapshotAvailable":
		return m.Fake(d.fakeWaitUntilSnapshotAvailable)

	case "WaitUntilSnapshotAvailableWithContext":
		return m.Fake(d.fakeWaitUntilSnapshotAvailableWithContext)

	default:
		return nil
	}
}

func (d *RedshiftDouble) AcceptReservedNodeExchange(i0 *redshift.AcceptReservedNodeExchangeInput) (r0 *redshift.AcceptReservedNodeExchangeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptReservedNodeExchange", i0)
	r0, _ = returns[0].(*redshift.AcceptReservedNodeExchangeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) AcceptReservedNodeExchangeRequest(i0 *redshift.AcceptReservedNodeExchangeInput) (r0 *request.Request, r1 *redshift.AcceptReservedNodeExchangeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptReservedNodeExchangeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.AcceptReservedNodeExchangeOutput)
	return
}

func (d *RedshiftDouble) AcceptReservedNodeExchangeWithContext(i0 context.Context, i1 *redshift.AcceptReservedNodeExchangeInput, i2 ...request.Option) (r0 *redshift.AcceptReservedNodeExchangeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptReservedNodeExchangeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.AcceptReservedNodeExchangeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeAcceptReservedNodeExchangeWithContext(ctx context.Context, in *redshift.AcceptReservedNodeExchangeInput, _ ...request.Option) (*redshift.AcceptReservedNodeExchangeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AcceptReservedNodeExchange cancelled", ctx.Err())
	default:
		return d.AcceptReservedNodeExchange(in)
	}
}

func (d *RedshiftDouble) AuthorizeClusterSecurityGroupIngress(i0 *redshift.AuthorizeClusterSecurityGroupIngressInput) (r0 *redshift.AuthorizeClusterSecurityGroupIngressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AuthorizeClusterSecurityGroupIngress", i0)
	r0, _ = returns[0].(*redshift.AuthorizeClusterSecurityGroupIngressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) AuthorizeClusterSecurityGroupIngressRequest(i0 *redshift.AuthorizeClusterSecurityGroupIngressInput) (r0 *request.Request, r1 *redshift.AuthorizeClusterSecurityGroupIngressOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AuthorizeClusterSecurityGroupIngressRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.AuthorizeClusterSecurityGroupIngressOutput)
	return
}

func (d *RedshiftDouble) AuthorizeClusterSecurityGroupIngressWithContext(i0 context.Context, i1 *redshift.AuthorizeClusterSecurityGroupIngressInput, i2 ...request.Option) (r0 *redshift.AuthorizeClusterSecurityGroupIngressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AuthorizeClusterSecurityGroupIngressWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.AuthorizeClusterSecurityGroupIngressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeAuthorizeClusterSecurityGroupIngressWithContext(ctx context.Context, in *redshift.AuthorizeClusterSecurityGroupIngressInput, _ ...request.Option) (*redshift.AuthorizeClusterSecurityGroupIngressOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AuthorizeClusterSecurityGroupIngress cancelled", ctx.Err())
	default:
		return d.AuthorizeClusterSecurityGroupIngress(in)
	}
}

func (d *RedshiftDouble) AuthorizeSnapshotAccess(i0 *redshift.AuthorizeSnapshotAccessInput) (r0 *redshift.AuthorizeSnapshotAccessOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AuthorizeSnapshotAccess", i0)
	r0, _ = returns[0].(*redshift.AuthorizeSnapshotAccessOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) AuthorizeSnapshotAccessRequest(i0 *redshift.AuthorizeSnapshotAccessInput) (r0 *request.Request, r1 *redshift.AuthorizeSnapshotAccessOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AuthorizeSnapshotAccessRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.AuthorizeSnapshotAccessOutput)
	return
}

func (d *RedshiftDouble) AuthorizeSnapshotAccessWithContext(i0 context.Context, i1 *redshift.AuthorizeSnapshotAccessInput, i2 ...request.Option) (r0 *redshift.AuthorizeSnapshotAccessOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AuthorizeSnapshotAccessWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.AuthorizeSnapshotAccessOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeAuthorizeSnapshotAccessWithContext(ctx context.Context, in *redshift.AuthorizeSnapshotAccessInput, _ ...request.Option) (*redshift.AuthorizeSnapshotAccessOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AuthorizeSnapshotAccess cancelled", ctx.Err())
	default:
		return d.AuthorizeSnapshotAccess(in)
	}
}

func (d *RedshiftDouble) BatchDeleteClusterSnapshots(i0 *redshift.BatchDeleteClusterSnapshotsInput) (r0 *redshift.BatchDeleteClusterSnapshotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDeleteClusterSnapshots", i0)
	r0, _ = returns[0].(*redshift.BatchDeleteClusterSnapshotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) BatchDeleteClusterSnapshotsRequest(i0 *redshift.BatchDeleteClusterSnapshotsInput) (r0 *request.Request, r1 *redshift.BatchDeleteClusterSnapshotsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDeleteClusterSnapshotsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.BatchDeleteClusterSnapshotsOutput)
	return
}

func (d *RedshiftDouble) BatchDeleteClusterSnapshotsWithContext(i0 context.Context, i1 *redshift.BatchDeleteClusterSnapshotsInput, i2 ...request.Option) (r0 *redshift.BatchDeleteClusterSnapshotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDeleteClusterSnapshotsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.BatchDeleteClusterSnapshotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeBatchDeleteClusterSnapshotsWithContext(ctx context.Context, in *redshift.BatchDeleteClusterSnapshotsInput, _ ...request.Option) (*redshift.BatchDeleteClusterSnapshotsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchDeleteClusterSnapshots cancelled", ctx.Err())
	default:
		return d.BatchDeleteClusterSnapshots(in)
	}
}

func (d *RedshiftDouble) BatchModifyClusterSnapshots(i0 *redshift.BatchModifyClusterSnapshotsInput) (r0 *redshift.BatchModifyClusterSnapshotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchModifyClusterSnapshots", i0)
	r0, _ = returns[0].(*redshift.BatchModifyClusterSnapshotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) BatchModifyClusterSnapshotsRequest(i0 *redshift.BatchModifyClusterSnapshotsInput) (r0 *request.Request, r1 *redshift.BatchModifyClusterSnapshotsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchModifyClusterSnapshotsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.BatchModifyClusterSnapshotsOutput)
	return
}

func (d *RedshiftDouble) BatchModifyClusterSnapshotsWithContext(i0 context.Context, i1 *redshift.BatchModifyClusterSnapshotsInput, i2 ...request.Option) (r0 *redshift.BatchModifyClusterSnapshotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchModifyClusterSnapshotsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.BatchModifyClusterSnapshotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeBatchModifyClusterSnapshotsWithContext(ctx context.Context, in *redshift.BatchModifyClusterSnapshotsInput, _ ...request.Option) (*redshift.BatchModifyClusterSnapshotsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchModifyClusterSnapshots cancelled", ctx.Err())
	default:
		return d.BatchModifyClusterSnapshots(in)
	}
}

func (d *RedshiftDouble) CancelResize(i0 *redshift.CancelResizeInput) (r0 *redshift.CancelResizeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelResize", i0)
	r0, _ = returns[0].(*redshift.CancelResizeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) CancelResizeRequest(i0 *redshift.CancelResizeInput) (r0 *request.Request, r1 *redshift.CancelResizeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelResizeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.CancelResizeOutput)
	return
}

func (d *RedshiftDouble) CancelResizeWithContext(i0 context.Context, i1 *redshift.CancelResizeInput, i2 ...request.Option) (r0 *redshift.CancelResizeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelResizeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.CancelResizeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeCancelResizeWithContext(ctx context.Context, in *redshift.CancelResizeInput, _ ...request.Option) (*redshift.CancelResizeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelResize cancelled", ctx.Err())
	default:
		return d.CancelResize(in)
	}
}

func (d *RedshiftDouble) CopyClusterSnapshot(i0 *redshift.CopyClusterSnapshotInput) (r0 *redshift.CopyClusterSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyClusterSnapshot", i0)
	r0, _ = returns[0].(*redshift.CopyClusterSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) CopyClusterSnapshotRequest(i0 *redshift.CopyClusterSnapshotInput) (r0 *request.Request, r1 *redshift.CopyClusterSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyClusterSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.CopyClusterSnapshotOutput)
	return
}

func (d *RedshiftDouble) CopyClusterSnapshotWithContext(i0 context.Context, i1 *redshift.CopyClusterSnapshotInput, i2 ...request.Option) (r0 *redshift.CopyClusterSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyClusterSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.CopyClusterSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeCopyClusterSnapshotWithContext(ctx context.Context, in *redshift.CopyClusterSnapshotInput, _ ...request.Option) (*redshift.CopyClusterSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CopyClusterSnapshot cancelled", ctx.Err())
	default:
		return d.CopyClusterSnapshot(in)
	}
}

func (d *RedshiftDouble) CreateCluster(i0 *redshift.CreateClusterInput) (r0 *redshift.CreateClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCluster", i0)
	r0, _ = returns[0].(*redshift.CreateClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) CreateClusterParameterGroup(i0 *redshift.CreateClusterParameterGroupInput) (r0 *redshift.CreateClusterParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateClusterParameterGroup", i0)
	r0, _ = returns[0].(*redshift.CreateClusterParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) CreateClusterParameterGroupRequest(i0 *redshift.CreateClusterParameterGroupInput) (r0 *request.Request, r1 *redshift.CreateClusterParameterGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateClusterParameterGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.CreateClusterParameterGroupOutput)
	return
}

func (d *RedshiftDouble) CreateClusterParameterGroupWithContext(i0 context.Context, i1 *redshift.CreateClusterParameterGroupInput, i2 ...request.Option) (r0 *redshift.CreateClusterParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateClusterParameterGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.CreateClusterParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeCreateClusterParameterGroupWithContext(ctx context.Context, in *redshift.CreateClusterParameterGroupInput, _ ...request.Option) (*redshift.CreateClusterParameterGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateClusterParameterGroup cancelled", ctx.Err())
	default:
		return d.CreateClusterParameterGroup(in)
	}
}

func (d *RedshiftDouble) CreateClusterRequest(i0 *redshift.CreateClusterInput) (r0 *request.Request, r1 *redshift.CreateClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.CreateClusterOutput)
	return
}

func (d *RedshiftDouble) CreateClusterSecurityGroup(i0 *redshift.CreateClusterSecurityGroupInput) (r0 *redshift.CreateClusterSecurityGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateClusterSecurityGroup", i0)
	r0, _ = returns[0].(*redshift.CreateClusterSecurityGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) CreateClusterSecurityGroupRequest(i0 *redshift.CreateClusterSecurityGroupInput) (r0 *request.Request, r1 *redshift.CreateClusterSecurityGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateClusterSecurityGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.CreateClusterSecurityGroupOutput)
	return
}

func (d *RedshiftDouble) CreateClusterSecurityGroupWithContext(i0 context.Context, i1 *redshift.CreateClusterSecurityGroupInput, i2 ...request.Option) (r0 *redshift.CreateClusterSecurityGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateClusterSecurityGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.CreateClusterSecurityGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeCreateClusterSecurityGroupWithContext(ctx context.Context, in *redshift.CreateClusterSecurityGroupInput, _ ...request.Option) (*redshift.CreateClusterSecurityGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateClusterSecurityGroup cancelled", ctx.Err())
	default:
		return d.CreateClusterSecurityGroup(in)
	}
}

func (d *RedshiftDouble) CreateClusterSnapshot(i0 *redshift.CreateClusterSnapshotInput) (r0 *redshift.CreateClusterSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateClusterSnapshot", i0)
	r0, _ = returns[0].(*redshift.CreateClusterSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) CreateClusterSnapshotRequest(i0 *redshift.CreateClusterSnapshotInput) (r0 *request.Request, r1 *redshift.CreateClusterSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateClusterSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.CreateClusterSnapshotOutput)
	return
}

func (d *RedshiftDouble) CreateClusterSnapshotWithContext(i0 context.Context, i1 *redshift.CreateClusterSnapshotInput, i2 ...request.Option) (r0 *redshift.CreateClusterSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateClusterSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.CreateClusterSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeCreateClusterSnapshotWithContext(ctx context.Context, in *redshift.CreateClusterSnapshotInput, _ ...request.Option) (*redshift.CreateClusterSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateClusterSnapshot cancelled", ctx.Err())
	default:
		return d.CreateClusterSnapshot(in)
	}
}

func (d *RedshiftDouble) CreateClusterSubnetGroup(i0 *redshift.CreateClusterSubnetGroupInput) (r0 *redshift.CreateClusterSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateClusterSubnetGroup", i0)
	r0, _ = returns[0].(*redshift.CreateClusterSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) CreateClusterSubnetGroupRequest(i0 *redshift.CreateClusterSubnetGroupInput) (r0 *request.Request, r1 *redshift.CreateClusterSubnetGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateClusterSubnetGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.CreateClusterSubnetGroupOutput)
	return
}

func (d *RedshiftDouble) CreateClusterSubnetGroupWithContext(i0 context.Context, i1 *redshift.CreateClusterSubnetGroupInput, i2 ...request.Option) (r0 *redshift.CreateClusterSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateClusterSubnetGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.CreateClusterSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeCreateClusterSubnetGroupWithContext(ctx context.Context, in *redshift.CreateClusterSubnetGroupInput, _ ...request.Option) (*redshift.CreateClusterSubnetGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateClusterSubnetGroup cancelled", ctx.Err())
	default:
		return d.CreateClusterSubnetGroup(in)
	}
}

func (d *RedshiftDouble) CreateClusterWithContext(i0 context.Context, i1 *redshift.CreateClusterInput, i2 ...request.Option) (r0 *redshift.CreateClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.CreateClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeCreateClusterWithContext(ctx context.Context, in *redshift.CreateClusterInput, _ ...request.Option) (*redshift.CreateClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateCluster cancelled", ctx.Err())
	default:
		return d.CreateCluster(in)
	}
}

func (d *RedshiftDouble) CreateEventSubscription(i0 *redshift.CreateEventSubscriptionInput) (r0 *redshift.CreateEventSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEventSubscription", i0)
	r0, _ = returns[0].(*redshift.CreateEventSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) CreateEventSubscriptionRequest(i0 *redshift.CreateEventSubscriptionInput) (r0 *request.Request, r1 *redshift.CreateEventSubscriptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEventSubscriptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.CreateEventSubscriptionOutput)
	return
}

func (d *RedshiftDouble) CreateEventSubscriptionWithContext(i0 context.Context, i1 *redshift.CreateEventSubscriptionInput, i2 ...request.Option) (r0 *redshift.CreateEventSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEventSubscriptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.CreateEventSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeCreateEventSubscriptionWithContext(ctx context.Context, in *redshift.CreateEventSubscriptionInput, _ ...request.Option) (*redshift.CreateEventSubscriptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateEventSubscription cancelled", ctx.Err())
	default:
		return d.CreateEventSubscription(in)
	}
}

func (d *RedshiftDouble) CreateHsmClientCertificate(i0 *redshift.CreateHsmClientCertificateInput) (r0 *redshift.CreateHsmClientCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHsmClientCertificate", i0)
	r0, _ = returns[0].(*redshift.CreateHsmClientCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) CreateHsmClientCertificateRequest(i0 *redshift.CreateHsmClientCertificateInput) (r0 *request.Request, r1 *redshift.CreateHsmClientCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHsmClientCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.CreateHsmClientCertificateOutput)
	return
}

func (d *RedshiftDouble) CreateHsmClientCertificateWithContext(i0 context.Context, i1 *redshift.CreateHsmClientCertificateInput, i2 ...request.Option) (r0 *redshift.CreateHsmClientCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHsmClientCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.CreateHsmClientCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeCreateHsmClientCertificateWithContext(ctx context.Context, in *redshift.CreateHsmClientCertificateInput, _ ...request.Option) (*redshift.CreateHsmClientCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateHsmClientCertificate cancelled", ctx.Err())
	default:
		return d.CreateHsmClientCertificate(in)
	}
}

func (d *RedshiftDouble) CreateHsmConfiguration(i0 *redshift.CreateHsmConfigurationInput) (r0 *redshift.CreateHsmConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHsmConfiguration", i0)
	r0, _ = returns[0].(*redshift.CreateHsmConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) CreateHsmConfigurationRequest(i0 *redshift.CreateHsmConfigurationInput) (r0 *request.Request, r1 *redshift.CreateHsmConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHsmConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.CreateHsmConfigurationOutput)
	return
}

func (d *RedshiftDouble) CreateHsmConfigurationWithContext(i0 context.Context, i1 *redshift.CreateHsmConfigurationInput, i2 ...request.Option) (r0 *redshift.CreateHsmConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHsmConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.CreateHsmConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeCreateHsmConfigurationWithContext(ctx context.Context, in *redshift.CreateHsmConfigurationInput, _ ...request.Option) (*redshift.CreateHsmConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateHsmConfiguration cancelled", ctx.Err())
	default:
		return d.CreateHsmConfiguration(in)
	}
}

func (d *RedshiftDouble) CreateScheduledAction(i0 *redshift.CreateScheduledActionInput) (r0 *redshift.CreateScheduledActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateScheduledAction", i0)
	r0, _ = returns[0].(*redshift.CreateScheduledActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) CreateScheduledActionRequest(i0 *redshift.CreateScheduledActionInput) (r0 *request.Request, r1 *redshift.CreateScheduledActionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateScheduledActionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.CreateScheduledActionOutput)
	return
}

func (d *RedshiftDouble) CreateScheduledActionWithContext(i0 context.Context, i1 *redshift.CreateScheduledActionInput, i2 ...request.Option) (r0 *redshift.CreateScheduledActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateScheduledActionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.CreateScheduledActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeCreateScheduledActionWithContext(ctx context.Context, in *redshift.CreateScheduledActionInput, _ ...request.Option) (*redshift.CreateScheduledActionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateScheduledAction cancelled", ctx.Err())
	default:
		return d.CreateScheduledAction(in)
	}
}

func (d *RedshiftDouble) CreateSnapshotCopyGrant(i0 *redshift.CreateSnapshotCopyGrantInput) (r0 *redshift.CreateSnapshotCopyGrantOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSnapshotCopyGrant", i0)
	r0, _ = returns[0].(*redshift.CreateSnapshotCopyGrantOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) CreateSnapshotCopyGrantRequest(i0 *redshift.CreateSnapshotCopyGrantInput) (r0 *request.Request, r1 *redshift.CreateSnapshotCopyGrantOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSnapshotCopyGrantRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.CreateSnapshotCopyGrantOutput)
	return
}

func (d *RedshiftDouble) CreateSnapshotCopyGrantWithContext(i0 context.Context, i1 *redshift.CreateSnapshotCopyGrantInput, i2 ...request.Option) (r0 *redshift.CreateSnapshotCopyGrantOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSnapshotCopyGrantWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.CreateSnapshotCopyGrantOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeCreateSnapshotCopyGrantWithContext(ctx context.Context, in *redshift.CreateSnapshotCopyGrantInput, _ ...request.Option) (*redshift.CreateSnapshotCopyGrantOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateSnapshotCopyGrant cancelled", ctx.Err())
	default:
		return d.CreateSnapshotCopyGrant(in)
	}
}

func (d *RedshiftDouble) CreateSnapshotSchedule(i0 *redshift.CreateSnapshotScheduleInput) (r0 *redshift.CreateSnapshotScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSnapshotSchedule", i0)
	r0, _ = returns[0].(*redshift.CreateSnapshotScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) CreateSnapshotScheduleRequest(i0 *redshift.CreateSnapshotScheduleInput) (r0 *request.Request, r1 *redshift.CreateSnapshotScheduleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSnapshotScheduleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.CreateSnapshotScheduleOutput)
	return
}

func (d *RedshiftDouble) CreateSnapshotScheduleWithContext(i0 context.Context, i1 *redshift.CreateSnapshotScheduleInput, i2 ...request.Option) (r0 *redshift.CreateSnapshotScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSnapshotScheduleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.CreateSnapshotScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeCreateSnapshotScheduleWithContext(ctx context.Context, in *redshift.CreateSnapshotScheduleInput, _ ...request.Option) (*redshift.CreateSnapshotScheduleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateSnapshotSchedule cancelled", ctx.Err())
	default:
		return d.CreateSnapshotSchedule(in)
	}
}

func (d *RedshiftDouble) CreateTags(i0 *redshift.CreateTagsInput) (r0 *redshift.CreateTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTags", i0)
	r0, _ = returns[0].(*redshift.CreateTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) CreateTagsRequest(i0 *redshift.CreateTagsInput) (r0 *request.Request, r1 *redshift.CreateTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.CreateTagsOutput)
	return
}

func (d *RedshiftDouble) CreateTagsWithContext(i0 context.Context, i1 *redshift.CreateTagsInput, i2 ...request.Option) (r0 *redshift.CreateTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.CreateTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeCreateTagsWithContext(ctx context.Context, in *redshift.CreateTagsInput, _ ...request.Option) (*redshift.CreateTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTags cancelled", ctx.Err())
	default:
		return d.CreateTags(in)
	}
}

func (d *RedshiftDouble) DeleteCluster(i0 *redshift.DeleteClusterInput) (r0 *redshift.DeleteClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCluster", i0)
	r0, _ = returns[0].(*redshift.DeleteClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DeleteClusterParameterGroup(i0 *redshift.DeleteClusterParameterGroupInput) (r0 *redshift.DeleteClusterParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteClusterParameterGroup", i0)
	r0, _ = returns[0].(*redshift.DeleteClusterParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DeleteClusterParameterGroupRequest(i0 *redshift.DeleteClusterParameterGroupInput) (r0 *request.Request, r1 *redshift.DeleteClusterParameterGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteClusterParameterGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DeleteClusterParameterGroupOutput)
	return
}

func (d *RedshiftDouble) DeleteClusterParameterGroupWithContext(i0 context.Context, i1 *redshift.DeleteClusterParameterGroupInput, i2 ...request.Option) (r0 *redshift.DeleteClusterParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteClusterParameterGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DeleteClusterParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDeleteClusterParameterGroupWithContext(ctx context.Context, in *redshift.DeleteClusterParameterGroupInput, _ ...request.Option) (*redshift.DeleteClusterParameterGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteClusterParameterGroup cancelled", ctx.Err())
	default:
		return d.DeleteClusterParameterGroup(in)
	}
}

func (d *RedshiftDouble) DeleteClusterRequest(i0 *redshift.DeleteClusterInput) (r0 *request.Request, r1 *redshift.DeleteClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DeleteClusterOutput)
	return
}

func (d *RedshiftDouble) DeleteClusterSecurityGroup(i0 *redshift.DeleteClusterSecurityGroupInput) (r0 *redshift.DeleteClusterSecurityGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteClusterSecurityGroup", i0)
	r0, _ = returns[0].(*redshift.DeleteClusterSecurityGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DeleteClusterSecurityGroupRequest(i0 *redshift.DeleteClusterSecurityGroupInput) (r0 *request.Request, r1 *redshift.DeleteClusterSecurityGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteClusterSecurityGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DeleteClusterSecurityGroupOutput)
	return
}

func (d *RedshiftDouble) DeleteClusterSecurityGroupWithContext(i0 context.Context, i1 *redshift.DeleteClusterSecurityGroupInput, i2 ...request.Option) (r0 *redshift.DeleteClusterSecurityGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteClusterSecurityGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DeleteClusterSecurityGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDeleteClusterSecurityGroupWithContext(ctx context.Context, in *redshift.DeleteClusterSecurityGroupInput, _ ...request.Option) (*redshift.DeleteClusterSecurityGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteClusterSecurityGroup cancelled", ctx.Err())
	default:
		return d.DeleteClusterSecurityGroup(in)
	}
}

func (d *RedshiftDouble) DeleteClusterSnapshot(i0 *redshift.DeleteClusterSnapshotInput) (r0 *redshift.DeleteClusterSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteClusterSnapshot", i0)
	r0, _ = returns[0].(*redshift.DeleteClusterSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DeleteClusterSnapshotRequest(i0 *redshift.DeleteClusterSnapshotInput) (r0 *request.Request, r1 *redshift.DeleteClusterSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteClusterSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DeleteClusterSnapshotOutput)
	return
}

func (d *RedshiftDouble) DeleteClusterSnapshotWithContext(i0 context.Context, i1 *redshift.DeleteClusterSnapshotInput, i2 ...request.Option) (r0 *redshift.DeleteClusterSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteClusterSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DeleteClusterSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDeleteClusterSnapshotWithContext(ctx context.Context, in *redshift.DeleteClusterSnapshotInput, _ ...request.Option) (*redshift.DeleteClusterSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteClusterSnapshot cancelled", ctx.Err())
	default:
		return d.DeleteClusterSnapshot(in)
	}
}

func (d *RedshiftDouble) DeleteClusterSubnetGroup(i0 *redshift.DeleteClusterSubnetGroupInput) (r0 *redshift.DeleteClusterSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteClusterSubnetGroup", i0)
	r0, _ = returns[0].(*redshift.DeleteClusterSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DeleteClusterSubnetGroupRequest(i0 *redshift.DeleteClusterSubnetGroupInput) (r0 *request.Request, r1 *redshift.DeleteClusterSubnetGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteClusterSubnetGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DeleteClusterSubnetGroupOutput)
	return
}

func (d *RedshiftDouble) DeleteClusterSubnetGroupWithContext(i0 context.Context, i1 *redshift.DeleteClusterSubnetGroupInput, i2 ...request.Option) (r0 *redshift.DeleteClusterSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteClusterSubnetGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DeleteClusterSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDeleteClusterSubnetGroupWithContext(ctx context.Context, in *redshift.DeleteClusterSubnetGroupInput, _ ...request.Option) (*redshift.DeleteClusterSubnetGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteClusterSubnetGroup cancelled", ctx.Err())
	default:
		return d.DeleteClusterSubnetGroup(in)
	}
}

func (d *RedshiftDouble) DeleteClusterWithContext(i0 context.Context, i1 *redshift.DeleteClusterInput, i2 ...request.Option) (r0 *redshift.DeleteClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DeleteClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDeleteClusterWithContext(ctx context.Context, in *redshift.DeleteClusterInput, _ ...request.Option) (*redshift.DeleteClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteCluster cancelled", ctx.Err())
	default:
		return d.DeleteCluster(in)
	}
}

func (d *RedshiftDouble) DeleteEventSubscription(i0 *redshift.DeleteEventSubscriptionInput) (r0 *redshift.DeleteEventSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEventSubscription", i0)
	r0, _ = returns[0].(*redshift.DeleteEventSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DeleteEventSubscriptionRequest(i0 *redshift.DeleteEventSubscriptionInput) (r0 *request.Request, r1 *redshift.DeleteEventSubscriptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEventSubscriptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DeleteEventSubscriptionOutput)
	return
}

func (d *RedshiftDouble) DeleteEventSubscriptionWithContext(i0 context.Context, i1 *redshift.DeleteEventSubscriptionInput, i2 ...request.Option) (r0 *redshift.DeleteEventSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEventSubscriptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DeleteEventSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDeleteEventSubscriptionWithContext(ctx context.Context, in *redshift.DeleteEventSubscriptionInput, _ ...request.Option) (*redshift.DeleteEventSubscriptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteEventSubscription cancelled", ctx.Err())
	default:
		return d.DeleteEventSubscription(in)
	}
}

func (d *RedshiftDouble) DeleteHsmClientCertificate(i0 *redshift.DeleteHsmClientCertificateInput) (r0 *redshift.DeleteHsmClientCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteHsmClientCertificate", i0)
	r0, _ = returns[0].(*redshift.DeleteHsmClientCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DeleteHsmClientCertificateRequest(i0 *redshift.DeleteHsmClientCertificateInput) (r0 *request.Request, r1 *redshift.DeleteHsmClientCertificateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteHsmClientCertificateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DeleteHsmClientCertificateOutput)
	return
}

func (d *RedshiftDouble) DeleteHsmClientCertificateWithContext(i0 context.Context, i1 *redshift.DeleteHsmClientCertificateInput, i2 ...request.Option) (r0 *redshift.DeleteHsmClientCertificateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteHsmClientCertificateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DeleteHsmClientCertificateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDeleteHsmClientCertificateWithContext(ctx context.Context, in *redshift.DeleteHsmClientCertificateInput, _ ...request.Option) (*redshift.DeleteHsmClientCertificateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteHsmClientCertificate cancelled", ctx.Err())
	default:
		return d.DeleteHsmClientCertificate(in)
	}
}

func (d *RedshiftDouble) DeleteHsmConfiguration(i0 *redshift.DeleteHsmConfigurationInput) (r0 *redshift.DeleteHsmConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteHsmConfiguration", i0)
	r0, _ = returns[0].(*redshift.DeleteHsmConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DeleteHsmConfigurationRequest(i0 *redshift.DeleteHsmConfigurationInput) (r0 *request.Request, r1 *redshift.DeleteHsmConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteHsmConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DeleteHsmConfigurationOutput)
	return
}

func (d *RedshiftDouble) DeleteHsmConfigurationWithContext(i0 context.Context, i1 *redshift.DeleteHsmConfigurationInput, i2 ...request.Option) (r0 *redshift.DeleteHsmConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteHsmConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DeleteHsmConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDeleteHsmConfigurationWithContext(ctx context.Context, in *redshift.DeleteHsmConfigurationInput, _ ...request.Option) (*redshift.DeleteHsmConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteHsmConfiguration cancelled", ctx.Err())
	default:
		return d.DeleteHsmConfiguration(in)
	}
}

func (d *RedshiftDouble) DeleteScheduledAction(i0 *redshift.DeleteScheduledActionInput) (r0 *redshift.DeleteScheduledActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteScheduledAction", i0)
	r0, _ = returns[0].(*redshift.DeleteScheduledActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DeleteScheduledActionRequest(i0 *redshift.DeleteScheduledActionInput) (r0 *request.Request, r1 *redshift.DeleteScheduledActionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteScheduledActionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DeleteScheduledActionOutput)
	return
}

func (d *RedshiftDouble) DeleteScheduledActionWithContext(i0 context.Context, i1 *redshift.DeleteScheduledActionInput, i2 ...request.Option) (r0 *redshift.DeleteScheduledActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteScheduledActionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DeleteScheduledActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDeleteScheduledActionWithContext(ctx context.Context, in *redshift.DeleteScheduledActionInput, _ ...request.Option) (*redshift.DeleteScheduledActionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteScheduledAction cancelled", ctx.Err())
	default:
		return d.DeleteScheduledAction(in)
	}
}

func (d *RedshiftDouble) DeleteSnapshotCopyGrant(i0 *redshift.DeleteSnapshotCopyGrantInput) (r0 *redshift.DeleteSnapshotCopyGrantOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSnapshotCopyGrant", i0)
	r0, _ = returns[0].(*redshift.DeleteSnapshotCopyGrantOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DeleteSnapshotCopyGrantRequest(i0 *redshift.DeleteSnapshotCopyGrantInput) (r0 *request.Request, r1 *redshift.DeleteSnapshotCopyGrantOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSnapshotCopyGrantRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DeleteSnapshotCopyGrantOutput)
	return
}

func (d *RedshiftDouble) DeleteSnapshotCopyGrantWithContext(i0 context.Context, i1 *redshift.DeleteSnapshotCopyGrantInput, i2 ...request.Option) (r0 *redshift.DeleteSnapshotCopyGrantOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSnapshotCopyGrantWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DeleteSnapshotCopyGrantOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDeleteSnapshotCopyGrantWithContext(ctx context.Context, in *redshift.DeleteSnapshotCopyGrantInput, _ ...request.Option) (*redshift.DeleteSnapshotCopyGrantOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteSnapshotCopyGrant cancelled", ctx.Err())
	default:
		return d.DeleteSnapshotCopyGrant(in)
	}
}

func (d *RedshiftDouble) DeleteSnapshotSchedule(i0 *redshift.DeleteSnapshotScheduleInput) (r0 *redshift.DeleteSnapshotScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSnapshotSchedule", i0)
	r0, _ = returns[0].(*redshift.DeleteSnapshotScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DeleteSnapshotScheduleRequest(i0 *redshift.DeleteSnapshotScheduleInput) (r0 *request.Request, r1 *redshift.DeleteSnapshotScheduleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSnapshotScheduleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DeleteSnapshotScheduleOutput)
	return
}

func (d *RedshiftDouble) DeleteSnapshotScheduleWithContext(i0 context.Context, i1 *redshift.DeleteSnapshotScheduleInput, i2 ...request.Option) (r0 *redshift.DeleteSnapshotScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSnapshotScheduleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DeleteSnapshotScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDeleteSnapshotScheduleWithContext(ctx context.Context, in *redshift.DeleteSnapshotScheduleInput, _ ...request.Option) (*redshift.DeleteSnapshotScheduleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteSnapshotSchedule cancelled", ctx.Err())
	default:
		return d.DeleteSnapshotSchedule(in)
	}
}

func (d *RedshiftDouble) DeleteTags(i0 *redshift.DeleteTagsInput) (r0 *redshift.DeleteTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTags", i0)
	r0, _ = returns[0].(*redshift.DeleteTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DeleteTagsRequest(i0 *redshift.DeleteTagsInput) (r0 *request.Request, r1 *redshift.DeleteTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DeleteTagsOutput)
	return
}

func (d *RedshiftDouble) DeleteTagsWithContext(i0 context.Context, i1 *redshift.DeleteTagsInput, i2 ...request.Option) (r0 *redshift.DeleteTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DeleteTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDeleteTagsWithContext(ctx context.Context, in *redshift.DeleteTagsInput, _ ...request.Option) (*redshift.DeleteTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTags cancelled", ctx.Err())
	default:
		return d.DeleteTags(in)
	}
}

func (d *RedshiftDouble) DescribeAccountAttributes(i0 *redshift.DescribeAccountAttributesInput) (r0 *redshift.DescribeAccountAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAccountAttributes", i0)
	r0, _ = returns[0].(*redshift.DescribeAccountAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DescribeAccountAttributesRequest(i0 *redshift.DescribeAccountAttributesInput) (r0 *request.Request, r1 *redshift.DescribeAccountAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAccountAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DescribeAccountAttributesOutput)
	return
}

func (d *RedshiftDouble) DescribeAccountAttributesWithContext(i0 context.Context, i1 *redshift.DescribeAccountAttributesInput, i2 ...request.Option) (r0 *redshift.DescribeAccountAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAccountAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DescribeAccountAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeAccountAttributesWithContext(ctx context.Context, in *redshift.DescribeAccountAttributesInput, _ ...request.Option) (*redshift.DescribeAccountAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAccountAttributes cancelled", ctx.Err())
	default:
		return d.DescribeAccountAttributes(in)
	}
}

func (d *RedshiftDouble) DescribeClusterDbRevisions(i0 *redshift.DescribeClusterDbRevisionsInput) (r0 *redshift.DescribeClusterDbRevisionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterDbRevisions", i0)
	r0, _ = returns[0].(*redshift.DescribeClusterDbRevisionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DescribeClusterDbRevisionsRequest(i0 *redshift.DescribeClusterDbRevisionsInput) (r0 *request.Request, r1 *redshift.DescribeClusterDbRevisionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterDbRevisionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DescribeClusterDbRevisionsOutput)
	return
}

func (d *RedshiftDouble) DescribeClusterDbRevisionsWithContext(i0 context.Context, i1 *redshift.DescribeClusterDbRevisionsInput, i2 ...request.Option) (r0 *redshift.DescribeClusterDbRevisionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterDbRevisionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DescribeClusterDbRevisionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeClusterDbRevisionsWithContext(ctx context.Context, in *redshift.DescribeClusterDbRevisionsInput, _ ...request.Option) (*redshift.DescribeClusterDbRevisionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeClusterDbRevisions cancelled", ctx.Err())
	default:
		return d.DescribeClusterDbRevisions(in)
	}
}

func (d *RedshiftDouble) DescribeClusterParameterGroups(i0 *redshift.DescribeClusterParameterGroupsInput) (r0 *redshift.DescribeClusterParameterGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterParameterGroups", i0)
	r0, _ = returns[0].(*redshift.DescribeClusterParameterGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DescribeClusterParameterGroupsPages(i0 *redshift.DescribeClusterParameterGroupsInput, i1 func(*redshift.DescribeClusterParameterGroupsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterParameterGroupsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeClusterParameterGroupsPages(in *redshift.DescribeClusterParameterGroupsInput, pager func(*redshift.DescribeClusterParameterGroupsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeClusterParameterGroups", paginators, in, pager)
}

func (d *RedshiftDouble) DescribeClusterParameterGroupsPagesWithContext(i0 context.Context, i1 *redshift.DescribeClusterParameterGroupsInput, i2 func(*redshift.DescribeClusterParameterGroupsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterParameterGroupsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeClusterParameterGroupsPagesWithContext(ctx context.Context, in *redshift.DescribeClusterParameterGroupsInput, pager func(*redshift.DescribeClusterParameterGroupsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeClusterParameterGroups", paginators, ctx, in, pager, options...)
}

func (d *RedshiftDouble) DescribeClusterParameterGroupsRequest(i0 *redshift.DescribeClusterParameterGroupsInput) (r0 *request.Request, r1 *redshift.DescribeClusterParameterGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterParameterGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DescribeClusterParameterGroupsOutput)
	return
}

func (d *RedshiftDouble) DescribeClusterParameterGroupsWithContext(i0 context.Context, i1 *redshift.DescribeClusterParameterGroupsInput, i2 ...request.Option) (r0 *redshift.DescribeClusterParameterGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterParameterGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DescribeClusterParameterGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeClusterParameterGroupsWithContext(ctx context.Context, in *redshift.DescribeClusterParameterGroupsInput, _ ...request.Option) (*redshift.DescribeClusterParameterGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeClusterParameterGroups cancelled", ctx.Err())
	default:
		return d.DescribeClusterParameterGroups(in)
	}
}

func (d *RedshiftDouble) DescribeClusterParameters(i0 *redshift.DescribeClusterParametersInput) (r0 *redshift.DescribeClusterParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterParameters", i0)
	r0, _ = returns[0].(*redshift.DescribeClusterParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DescribeClusterParametersPages(i0 *redshift.DescribeClusterParametersInput, i1 func(*redshift.DescribeClusterParametersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterParametersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeClusterParametersPages(in *redshift.DescribeClusterParametersInput, pager func(*redshift.DescribeClusterParametersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeClusterParameters", paginators, in, pager)
}

func (d *RedshiftDouble) DescribeClusterParametersPagesWithContext(i0 context.Context, i1 *redshift.DescribeClusterParametersInput, i2 func(*redshift.DescribeClusterParametersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterParametersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeClusterParametersPagesWithContext(ctx context.Context, in *redshift.DescribeClusterParametersInput, pager func(*redshift.DescribeClusterParametersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeClusterParameters", paginators, ctx, in, pager, options...)
}

func (d *RedshiftDouble) DescribeClusterParametersRequest(i0 *redshift.DescribeClusterParametersInput) (r0 *request.Request, r1 *redshift.DescribeClusterParametersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterParametersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DescribeClusterParametersOutput)
	return
}

func (d *RedshiftDouble) DescribeClusterParametersWithContext(i0 context.Context, i1 *redshift.DescribeClusterParametersInput, i2 ...request.Option) (r0 *redshift.DescribeClusterParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterParametersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DescribeClusterParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeClusterParametersWithContext(ctx context.Context, in *redshift.DescribeClusterParametersInput, _ ...request.Option) (*redshift.DescribeClusterParametersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeClusterParameters cancelled", ctx.Err())
	default:
		return d.DescribeClusterParameters(in)
	}
}

func (d *RedshiftDouble) DescribeClusterSecurityGroups(i0 *redshift.DescribeClusterSecurityGroupsInput) (r0 *redshift.DescribeClusterSecurityGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterSecurityGroups", i0)
	r0, _ = returns[0].(*redshift.DescribeClusterSecurityGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DescribeClusterSecurityGroupsPages(i0 *redshift.DescribeClusterSecurityGroupsInput, i1 func(*redshift.DescribeClusterSecurityGroupsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterSecurityGroupsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeClusterSecurityGroupsPages(in *redshift.DescribeClusterSecurityGroupsInput, pager func(*redshift.DescribeClusterSecurityGroupsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeClusterSecurityGroups", paginators, in, pager)
}

func (d *RedshiftDouble) DescribeClusterSecurityGroupsPagesWithContext(i0 context.Context, i1 *redshift.DescribeClusterSecurityGroupsInput, i2 func(*redshift.DescribeClusterSecurityGroupsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterSecurityGroupsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeClusterSecurityGroupsPagesWithContext(ctx context.Context, in *redshift.DescribeClusterSecurityGroupsInput, pager func(*redshift.DescribeClusterSecurityGroupsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeClusterSecurityGroups", paginators, ctx, in, pager, options...)
}

func (d *RedshiftDouble) DescribeClusterSecurityGroupsRequest(i0 *redshift.DescribeClusterSecurityGroupsInput) (r0 *request.Request, r1 *redshift.DescribeClusterSecurityGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterSecurityGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DescribeClusterSecurityGroupsOutput)
	return
}

func (d *RedshiftDouble) DescribeClusterSecurityGroupsWithContext(i0 context.Context, i1 *redshift.DescribeClusterSecurityGroupsInput, i2 ...request.Option) (r0 *redshift.DescribeClusterSecurityGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterSecurityGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DescribeClusterSecurityGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeClusterSecurityGroupsWithContext(ctx context.Context, in *redshift.DescribeClusterSecurityGroupsInput, _ ...request.Option) (*redshift.DescribeClusterSecurityGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeClusterSecurityGroups cancelled", ctx.Err())
	default:
		return d.DescribeClusterSecurityGroups(in)
	}
}

func (d *RedshiftDouble) DescribeClusterSnapshots(i0 *redshift.DescribeClusterSnapshotsInput) (r0 *redshift.DescribeClusterSnapshotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterSnapshots", i0)
	r0, _ = returns[0].(*redshift.DescribeClusterSnapshotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DescribeClusterSnapshotsPages(i0 *redshift.DescribeClusterSnapshotsInput, i1 func(*redshift.DescribeClusterSnapshotsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterSnapshotsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeClusterSnapshotsPages(in *redshift.DescribeClusterSnapshotsInput, pager func(*redshift.DescribeClusterSnapshotsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeClusterSnapshots", paginators, in, pager)
}

func (d *RedshiftDouble) DescribeClusterSnapshotsPagesWithContext(i0 context.Context, i1 *redshift.DescribeClusterSnapshotsInput, i2 func(*redshift.DescribeClusterSnapshotsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterSnapshotsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeClusterSnapshotsPagesWithContext(ctx context.Context, in *redshift.DescribeClusterSnapshotsInput, pager func(*redshift.DescribeClusterSnapshotsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeClusterSnapshots", paginators, ctx, in, pager, options...)
}

func (d *RedshiftDouble) DescribeClusterSnapshotsRequest(i0 *redshift.DescribeClusterSnapshotsInput) (r0 *request.Request, r1 *redshift.DescribeClusterSnapshotsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterSnapshotsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DescribeClusterSnapshotsOutput)
	return
}

func (d *RedshiftDouble) DescribeClusterSnapshotsWithContext(i0 context.Context, i1 *redshift.DescribeClusterSnapshotsInput, i2 ...request.Option) (r0 *redshift.DescribeClusterSnapshotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterSnapshotsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DescribeClusterSnapshotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeClusterSnapshotsWithContext(ctx context.Context, in *redshift.DescribeClusterSnapshotsInput, _ ...request.Option) (*redshift.DescribeClusterSnapshotsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeClusterSnapshots cancelled", ctx.Err())
	default:
		return d.DescribeClusterSnapshots(in)
	}
}

func (d *RedshiftDouble) DescribeClusterSubnetGroups(i0 *redshift.DescribeClusterSubnetGroupsInput) (r0 *redshift.DescribeClusterSubnetGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterSubnetGroups", i0)
	r0, _ = returns[0].(*redshift.DescribeClusterSubnetGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DescribeClusterSubnetGroupsPages(i0 *redshift.DescribeClusterSubnetGroupsInput, i1 func(*redshift.DescribeClusterSubnetGroupsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterSubnetGroupsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeClusterSubnetGroupsPages(in *redshift.DescribeClusterSubnetGroupsInput, pager func(*redshift.DescribeClusterSubnetGroupsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeClusterSubnetGroups", paginators, in, pager)
}

func (d *RedshiftDouble) DescribeClusterSubnetGroupsPagesWithContext(i0 context.Context, i1 *redshift.DescribeClusterSubnetGroupsInput, i2 func(*redshift.DescribeClusterSubnetGroupsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterSubnetGroupsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeClusterSubnetGroupsPagesWithContext(ctx context.Context, in *redshift.DescribeClusterSubnetGroupsInput, pager func(*redshift.DescribeClusterSubnetGroupsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeClusterSubnetGroups", paginators, ctx, in, pager, options...)
}

func (d *RedshiftDouble) DescribeClusterSubnetGroupsRequest(i0 *redshift.DescribeClusterSubnetGroupsInput) (r0 *request.Request, r1 *redshift.DescribeClusterSubnetGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterSubnetGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DescribeClusterSubnetGroupsOutput)
	return
}

func (d *RedshiftDouble) DescribeClusterSubnetGroupsWithContext(i0 context.Context, i1 *redshift.DescribeClusterSubnetGroupsInput, i2 ...request.Option) (r0 *redshift.DescribeClusterSubnetGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterSubnetGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DescribeClusterSubnetGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeClusterSubnetGroupsWithContext(ctx context.Context, in *redshift.DescribeClusterSubnetGroupsInput, _ ...request.Option) (*redshift.DescribeClusterSubnetGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeClusterSubnetGroups cancelled", ctx.Err())
	default:
		return d.DescribeClusterSubnetGroups(in)
	}
}

func (d *RedshiftDouble) DescribeClusterTracks(i0 *redshift.DescribeClusterTracksInput) (r0 *redshift.DescribeClusterTracksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterTracks", i0)
	r0, _ = returns[0].(*redshift.DescribeClusterTracksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DescribeClusterTracksRequest(i0 *redshift.DescribeClusterTracksInput) (r0 *request.Request, r1 *redshift.DescribeClusterTracksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterTracksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DescribeClusterTracksOutput)
	return
}

func (d *RedshiftDouble) DescribeClusterTracksWithContext(i0 context.Context, i1 *redshift.DescribeClusterTracksInput, i2 ...request.Option) (r0 *redshift.DescribeClusterTracksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterTracksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DescribeClusterTracksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeClusterTracksWithContext(ctx context.Context, in *redshift.DescribeClusterTracksInput, _ ...request.Option) (*redshift.DescribeClusterTracksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeClusterTracks cancelled", ctx.Err())
	default:
		return d.DescribeClusterTracks(in)
	}
}

func (d *RedshiftDouble) DescribeClusterVersions(i0 *redshift.DescribeClusterVersionsInput) (r0 *redshift.DescribeClusterVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterVersions", i0)
	r0, _ = returns[0].(*redshift.DescribeClusterVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DescribeClusterVersionsPages(i0 *redshift.DescribeClusterVersionsInput, i1 func(*redshift.DescribeClusterVersionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterVersionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeClusterVersionsPages(in *redshift.DescribeClusterVersionsInput, pager func(*redshift.DescribeClusterVersionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeClusterVersions", paginators, in, pager)
}

func (d *RedshiftDouble) DescribeClusterVersionsPagesWithContext(i0 context.Context, i1 *redshift.DescribeClusterVersionsInput, i2 func(*redshift.DescribeClusterVersionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterVersionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeClusterVersionsPagesWithContext(ctx context.Context, in *redshift.DescribeClusterVersionsInput, pager func(*redshift.DescribeClusterVersionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeClusterVersions", paginators, ctx, in, pager, options...)
}

func (d *RedshiftDouble) DescribeClusterVersionsRequest(i0 *redshift.DescribeClusterVersionsInput) (r0 *request.Request, r1 *redshift.DescribeClusterVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DescribeClusterVersionsOutput)
	return
}

func (d *RedshiftDouble) DescribeClusterVersionsWithContext(i0 context.Context, i1 *redshift.DescribeClusterVersionsInput, i2 ...request.Option) (r0 *redshift.DescribeClusterVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DescribeClusterVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeClusterVersionsWithContext(ctx context.Context, in *redshift.DescribeClusterVersionsInput, _ ...request.Option) (*redshift.DescribeClusterVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeClusterVersions cancelled", ctx.Err())
	default:
		return d.DescribeClusterVersions(in)
	}
}

func (d *RedshiftDouble) DescribeClusters(i0 *redshift.DescribeClustersInput) (r0 *redshift.DescribeClustersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusters", i0)
	r0, _ = returns[0].(*redshift.DescribeClustersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DescribeClustersPages(i0 *redshift.DescribeClustersInput, i1 func(*redshift.DescribeClustersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClustersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeClustersPages(in *redshift.DescribeClustersInput, pager func(*redshift.DescribeClustersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeClusters", paginators, in, pager)
}

func (d *RedshiftDouble) DescribeClustersPagesWithContext(i0 context.Context, i1 *redshift.DescribeClustersInput, i2 func(*redshift.DescribeClustersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClustersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeClustersPagesWithContext(ctx context.Context, in *redshift.DescribeClustersInput, pager func(*redshift.DescribeClustersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeClusters", paginators, ctx, in, pager, options...)
}

func (d *RedshiftDouble) DescribeClustersRequest(i0 *redshift.DescribeClustersInput) (r0 *request.Request, r1 *redshift.DescribeClustersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClustersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DescribeClustersOutput)
	return
}

func (d *RedshiftDouble) DescribeClustersWithContext(i0 context.Context, i1 *redshift.DescribeClustersInput, i2 ...request.Option) (r0 *redshift.DescribeClustersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClustersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DescribeClustersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeClustersWithContext(ctx context.Context, in *redshift.DescribeClustersInput, _ ...request.Option) (*redshift.DescribeClustersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeClusters cancelled", ctx.Err())
	default:
		return d.DescribeClusters(in)
	}
}

func (d *RedshiftDouble) DescribeDefaultClusterParameters(i0 *redshift.DescribeDefaultClusterParametersInput) (r0 *redshift.DescribeDefaultClusterParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDefaultClusterParameters", i0)
	r0, _ = returns[0].(*redshift.DescribeDefaultClusterParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DescribeDefaultClusterParametersPages(i0 *redshift.DescribeDefaultClusterParametersInput, i1 func(*redshift.DescribeDefaultClusterParametersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDefaultClusterParametersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeDefaultClusterParametersPages(in *redshift.DescribeDefaultClusterParametersInput, pager func(*redshift.DescribeDefaultClusterParametersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeDefaultClusterParameters", paginators, in, pager)
}

func (d *RedshiftDouble) DescribeDefaultClusterParametersPagesWithContext(i0 context.Context, i1 *redshift.DescribeDefaultClusterParametersInput, i2 func(*redshift.DescribeDefaultClusterParametersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDefaultClusterParametersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeDefaultClusterParametersPagesWithContext(ctx context.Context, in *redshift.DescribeDefaultClusterParametersInput, pager func(*redshift.DescribeDefaultClusterParametersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeDefaultClusterParameters", paginators, ctx, in, pager, options...)
}

func (d *RedshiftDouble) DescribeDefaultClusterParametersRequest(i0 *redshift.DescribeDefaultClusterParametersInput) (r0 *request.Request, r1 *redshift.DescribeDefaultClusterParametersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDefaultClusterParametersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DescribeDefaultClusterParametersOutput)
	return
}

func (d *RedshiftDouble) DescribeDefaultClusterParametersWithContext(i0 context.Context, i1 *redshift.DescribeDefaultClusterParametersInput, i2 ...request.Option) (r0 *redshift.DescribeDefaultClusterParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDefaultClusterParametersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DescribeDefaultClusterParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeDefaultClusterParametersWithContext(ctx context.Context, in *redshift.DescribeDefaultClusterParametersInput, _ ...request.Option) (*redshift.DescribeDefaultClusterParametersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDefaultClusterParameters cancelled", ctx.Err())
	default:
		return d.DescribeDefaultClusterParameters(in)
	}
}

func (d *RedshiftDouble) DescribeEventCategories(i0 *redshift.DescribeEventCategoriesInput) (r0 *redshift.DescribeEventCategoriesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventCategories", i0)
	r0, _ = returns[0].(*redshift.DescribeEventCategoriesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DescribeEventCategoriesRequest(i0 *redshift.DescribeEventCategoriesInput) (r0 *request.Request, r1 *redshift.DescribeEventCategoriesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventCategoriesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DescribeEventCategoriesOutput)
	return
}

func (d *RedshiftDouble) DescribeEventCategoriesWithContext(i0 context.Context, i1 *redshift.DescribeEventCategoriesInput, i2 ...request.Option) (r0 *redshift.DescribeEventCategoriesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventCategoriesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DescribeEventCategoriesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeEventCategoriesWithContext(ctx context.Context, in *redshift.DescribeEventCategoriesInput, _ ...request.Option) (*redshift.DescribeEventCategoriesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEventCategories cancelled", ctx.Err())
	default:
		return d.DescribeEventCategories(in)
	}
}

func (d *RedshiftDouble) DescribeEventSubscriptions(i0 *redshift.DescribeEventSubscriptionsInput) (r0 *redshift.DescribeEventSubscriptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventSubscriptions", i0)
	r0, _ = returns[0].(*redshift.DescribeEventSubscriptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DescribeEventSubscriptionsPages(i0 *redshift.DescribeEventSubscriptionsInput, i1 func(*redshift.DescribeEventSubscriptionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventSubscriptionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeEventSubscriptionsPages(in *redshift.DescribeEventSubscriptionsInput, pager func(*redshift.DescribeEventSubscriptionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeEventSubscriptions", paginators, in, pager)
}

func (d *RedshiftDouble) DescribeEventSubscriptionsPagesWithContext(i0 context.Context, i1 *redshift.DescribeEventSubscriptionsInput, i2 func(*redshift.DescribeEventSubscriptionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventSubscriptionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeEventSubscriptionsPagesWithContext(ctx context.Context, in *redshift.DescribeEventSubscriptionsInput, pager func(*redshift.DescribeEventSubscriptionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeEventSubscriptions", paginators, ctx, in, pager, options...)
}

func (d *RedshiftDouble) DescribeEventSubscriptionsRequest(i0 *redshift.DescribeEventSubscriptionsInput) (r0 *request.Request, r1 *redshift.DescribeEventSubscriptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventSubscriptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DescribeEventSubscriptionsOutput)
	return
}

func (d *RedshiftDouble) DescribeEventSubscriptionsWithContext(i0 context.Context, i1 *redshift.DescribeEventSubscriptionsInput, i2 ...request.Option) (r0 *redshift.DescribeEventSubscriptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventSubscriptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DescribeEventSubscriptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeEventSubscriptionsWithContext(ctx context.Context, in *redshift.DescribeEventSubscriptionsInput, _ ...request.Option) (*redshift.DescribeEventSubscriptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEventSubscriptions cancelled", ctx.Err())
	default:
		return d.DescribeEventSubscriptions(in)
	}
}

func (d *RedshiftDouble) DescribeEvents(i0 *redshift.DescribeEventsInput) (r0 *redshift.DescribeEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEvents", i0)
	r0, _ = returns[0].(*redshift.DescribeEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DescribeEventsPages(i0 *redshift.DescribeEventsInput, i1 func(*redshift.DescribeEventsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeEventsPages(in *redshift.DescribeEventsInput, pager func(*redshift.DescribeEventsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeEvents", paginators, in, pager)
}

func (d *RedshiftDouble) DescribeEventsPagesWithContext(i0 context.Context, i1 *redshift.DescribeEventsInput, i2 func(*redshift.DescribeEventsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeEventsPagesWithContext(ctx context.Context, in *redshift.DescribeEventsInput, pager func(*redshift.DescribeEventsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeEvents", paginators, ctx, in, pager, options...)
}

func (d *RedshiftDouble) DescribeEventsRequest(i0 *redshift.DescribeEventsInput) (r0 *request.Request, r1 *redshift.DescribeEventsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DescribeEventsOutput)
	return
}

func (d *RedshiftDouble) DescribeEventsWithContext(i0 context.Context, i1 *redshift.DescribeEventsInput, i2 ...request.Option) (r0 *redshift.DescribeEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DescribeEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeEventsWithContext(ctx context.Context, in *redshift.DescribeEventsInput, _ ...request.Option) (*redshift.DescribeEventsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEvents cancelled", ctx.Err())
	default:
		return d.DescribeEvents(in)
	}
}

func (d *RedshiftDouble) DescribeHsmClientCertificates(i0 *redshift.DescribeHsmClientCertificatesInput) (r0 *redshift.DescribeHsmClientCertificatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHsmClientCertificates", i0)
	r0, _ = returns[0].(*redshift.DescribeHsmClientCertificatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DescribeHsmClientCertificatesPages(i0 *redshift.DescribeHsmClientCertificatesInput, i1 func(*redshift.DescribeHsmClientCertificatesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHsmClientCertificatesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeHsmClientCertificatesPages(in *redshift.DescribeHsmClientCertificatesInput, pager func(*redshift.DescribeHsmClientCertificatesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeHsmClientCertificates", paginators, in, pager)
}

func (d *RedshiftDouble) DescribeHsmClientCertificatesPagesWithContext(i0 context.Context, i1 *redshift.DescribeHsmClientCertificatesInput, i2 func(*redshift.DescribeHsmClientCertificatesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHsmClientCertificatesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeHsmClientCertificatesPagesWithContext(ctx context.Context, in *redshift.DescribeHsmClientCertificatesInput, pager func(*redshift.DescribeHsmClientCertificatesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeHsmClientCertificates", paginators, ctx, in, pager, options...)
}

func (d *RedshiftDouble) DescribeHsmClientCertificatesRequest(i0 *redshift.DescribeHsmClientCertificatesInput) (r0 *request.Request, r1 *redshift.DescribeHsmClientCertificatesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHsmClientCertificatesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DescribeHsmClientCertificatesOutput)
	return
}

func (d *RedshiftDouble) DescribeHsmClientCertificatesWithContext(i0 context.Context, i1 *redshift.DescribeHsmClientCertificatesInput, i2 ...request.Option) (r0 *redshift.DescribeHsmClientCertificatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHsmClientCertificatesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DescribeHsmClientCertificatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeHsmClientCertificatesWithContext(ctx context.Context, in *redshift.DescribeHsmClientCertificatesInput, _ ...request.Option) (*redshift.DescribeHsmClientCertificatesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeHsmClientCertificates cancelled", ctx.Err())
	default:
		return d.DescribeHsmClientCertificates(in)
	}
}

func (d *RedshiftDouble) DescribeHsmConfigurations(i0 *redshift.DescribeHsmConfigurationsInput) (r0 *redshift.DescribeHsmConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHsmConfigurations", i0)
	r0, _ = returns[0].(*redshift.DescribeHsmConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DescribeHsmConfigurationsPages(i0 *redshift.DescribeHsmConfigurationsInput, i1 func(*redshift.DescribeHsmConfigurationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHsmConfigurationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeHsmConfigurationsPages(in *redshift.DescribeHsmConfigurationsInput, pager func(*redshift.DescribeHsmConfigurationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeHsmConfigurations", paginators, in, pager)
}

func (d *RedshiftDouble) DescribeHsmConfigurationsPagesWithContext(i0 context.Context, i1 *redshift.DescribeHsmConfigurationsInput, i2 func(*redshift.DescribeHsmConfigurationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHsmConfigurationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeHsmConfigurationsPagesWithContext(ctx context.Context, in *redshift.DescribeHsmConfigurationsInput, pager func(*redshift.DescribeHsmConfigurationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeHsmConfigurations", paginators, ctx, in, pager, options...)
}

func (d *RedshiftDouble) DescribeHsmConfigurationsRequest(i0 *redshift.DescribeHsmConfigurationsInput) (r0 *request.Request, r1 *redshift.DescribeHsmConfigurationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHsmConfigurationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DescribeHsmConfigurationsOutput)
	return
}

func (d *RedshiftDouble) DescribeHsmConfigurationsWithContext(i0 context.Context, i1 *redshift.DescribeHsmConfigurationsInput, i2 ...request.Option) (r0 *redshift.DescribeHsmConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeHsmConfigurationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DescribeHsmConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeHsmConfigurationsWithContext(ctx context.Context, in *redshift.DescribeHsmConfigurationsInput, _ ...request.Option) (*redshift.DescribeHsmConfigurationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeHsmConfigurations cancelled", ctx.Err())
	default:
		return d.DescribeHsmConfigurations(in)
	}
}

func (d *RedshiftDouble) DescribeLoggingStatus(i0 *redshift.DescribeLoggingStatusInput) (r0 *redshift.LoggingStatus, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoggingStatus", i0)
	r0, _ = returns[0].(*redshift.LoggingStatus)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DescribeLoggingStatusRequest(i0 *redshift.DescribeLoggingStatusInput) (r0 *request.Request, r1 *redshift.LoggingStatus) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoggingStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.LoggingStatus)
	return
}

func (d *RedshiftDouble) DescribeLoggingStatusWithContext(i0 context.Context, i1 *redshift.DescribeLoggingStatusInput, i2 ...request.Option) (r0 *redshift.LoggingStatus, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLoggingStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.LoggingStatus)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeLoggingStatusWithContext(ctx context.Context, in *redshift.DescribeLoggingStatusInput, _ ...request.Option) (*redshift.LoggingStatus, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeLoggingStatus cancelled", ctx.Err())
	default:
		return d.DescribeLoggingStatus(in)
	}
}

func (d *RedshiftDouble) DescribeNodeConfigurationOptions(i0 *redshift.DescribeNodeConfigurationOptionsInput) (r0 *redshift.DescribeNodeConfigurationOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNodeConfigurationOptions", i0)
	r0, _ = returns[0].(*redshift.DescribeNodeConfigurationOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DescribeNodeConfigurationOptionsPages(i0 *redshift.DescribeNodeConfigurationOptionsInput, i1 func(*redshift.DescribeNodeConfigurationOptionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNodeConfigurationOptionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeNodeConfigurationOptionsPages(in *redshift.DescribeNodeConfigurationOptionsInput, pager func(*redshift.DescribeNodeConfigurationOptionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeNodeConfigurationOptions", paginators, in, pager)
}

func (d *RedshiftDouble) DescribeNodeConfigurationOptionsPagesWithContext(i0 context.Context, i1 *redshift.DescribeNodeConfigurationOptionsInput, i2 func(*redshift.DescribeNodeConfigurationOptionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNodeConfigurationOptionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeNodeConfigurationOptionsPagesWithContext(ctx context.Context, in *redshift.DescribeNodeConfigurationOptionsInput, pager func(*redshift.DescribeNodeConfigurationOptionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeNodeConfigurationOptions", paginators, ctx, in, pager, options...)
}

func (d *RedshiftDouble) DescribeNodeConfigurationOptionsRequest(i0 *redshift.DescribeNodeConfigurationOptionsInput) (r0 *request.Request, r1 *redshift.DescribeNodeConfigurationOptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNodeConfigurationOptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DescribeNodeConfigurationOptionsOutput)
	return
}

func (d *RedshiftDouble) DescribeNodeConfigurationOptionsWithContext(i0 context.Context, i1 *redshift.DescribeNodeConfigurationOptionsInput, i2 ...request.Option) (r0 *redshift.DescribeNodeConfigurationOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNodeConfigurationOptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DescribeNodeConfigurationOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeNodeConfigurationOptionsWithContext(ctx context.Context, in *redshift.DescribeNodeConfigurationOptionsInput, _ ...request.Option) (*redshift.DescribeNodeConfigurationOptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeNodeConfigurationOptions cancelled", ctx.Err())
	default:
		return d.DescribeNodeConfigurationOptions(in)
	}
}

func (d *RedshiftDouble) DescribeOrderableClusterOptions(i0 *redshift.DescribeOrderableClusterOptionsInput) (r0 *redshift.DescribeOrderableClusterOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrderableClusterOptions", i0)
	r0, _ = returns[0].(*redshift.DescribeOrderableClusterOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DescribeOrderableClusterOptionsPages(i0 *redshift.DescribeOrderableClusterOptionsInput, i1 func(*redshift.DescribeOrderableClusterOptionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrderableClusterOptionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeOrderableClusterOptionsPages(in *redshift.DescribeOrderableClusterOptionsInput, pager func(*redshift.DescribeOrderableClusterOptionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeOrderableClusterOptions", paginators, in, pager)
}

func (d *RedshiftDouble) DescribeOrderableClusterOptionsPagesWithContext(i0 context.Context, i1 *redshift.DescribeOrderableClusterOptionsInput, i2 func(*redshift.DescribeOrderableClusterOptionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrderableClusterOptionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeOrderableClusterOptionsPagesWithContext(ctx context.Context, in *redshift.DescribeOrderableClusterOptionsInput, pager func(*redshift.DescribeOrderableClusterOptionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeOrderableClusterOptions", paginators, ctx, in, pager, options...)
}

func (d *RedshiftDouble) DescribeOrderableClusterOptionsRequest(i0 *redshift.DescribeOrderableClusterOptionsInput) (r0 *request.Request, r1 *redshift.DescribeOrderableClusterOptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrderableClusterOptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DescribeOrderableClusterOptionsOutput)
	return
}

func (d *RedshiftDouble) DescribeOrderableClusterOptionsWithContext(i0 context.Context, i1 *redshift.DescribeOrderableClusterOptionsInput, i2 ...request.Option) (r0 *redshift.DescribeOrderableClusterOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrderableClusterOptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DescribeOrderableClusterOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeOrderableClusterOptionsWithContext(ctx context.Context, in *redshift.DescribeOrderableClusterOptionsInput, _ ...request.Option) (*redshift.DescribeOrderableClusterOptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeOrderableClusterOptions cancelled", ctx.Err())
	default:
		return d.DescribeOrderableClusterOptions(in)
	}
}

func (d *RedshiftDouble) DescribeReservedNodeOfferings(i0 *redshift.DescribeReservedNodeOfferingsInput) (r0 *redshift.DescribeReservedNodeOfferingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedNodeOfferings", i0)
	r0, _ = returns[0].(*redshift.DescribeReservedNodeOfferingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DescribeReservedNodeOfferingsPages(i0 *redshift.DescribeReservedNodeOfferingsInput, i1 func(*redshift.DescribeReservedNodeOfferingsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedNodeOfferingsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeReservedNodeOfferingsPages(in *redshift.DescribeReservedNodeOfferingsInput, pager func(*redshift.DescribeReservedNodeOfferingsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeReservedNodeOfferings", paginators, in, pager)
}

func (d *RedshiftDouble) DescribeReservedNodeOfferingsPagesWithContext(i0 context.Context, i1 *redshift.DescribeReservedNodeOfferingsInput, i2 func(*redshift.DescribeReservedNodeOfferingsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedNodeOfferingsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeReservedNodeOfferingsPagesWithContext(ctx context.Context, in *redshift.DescribeReservedNodeOfferingsInput, pager func(*redshift.DescribeReservedNodeOfferingsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeReservedNodeOfferings", paginators, ctx, in, pager, options...)
}

func (d *RedshiftDouble) DescribeReservedNodeOfferingsRequest(i0 *redshift.DescribeReservedNodeOfferingsInput) (r0 *request.Request, r1 *redshift.DescribeReservedNodeOfferingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedNodeOfferingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DescribeReservedNodeOfferingsOutput)
	return
}

func (d *RedshiftDouble) DescribeReservedNodeOfferingsWithContext(i0 context.Context, i1 *redshift.DescribeReservedNodeOfferingsInput, i2 ...request.Option) (r0 *redshift.DescribeReservedNodeOfferingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedNodeOfferingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DescribeReservedNodeOfferingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeReservedNodeOfferingsWithContext(ctx context.Context, in *redshift.DescribeReservedNodeOfferingsInput, _ ...request.Option) (*redshift.DescribeReservedNodeOfferingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeReservedNodeOfferings cancelled", ctx.Err())
	default:
		return d.DescribeReservedNodeOfferings(in)
	}
}

func (d *RedshiftDouble) DescribeReservedNodes(i0 *redshift.DescribeReservedNodesInput) (r0 *redshift.DescribeReservedNodesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedNodes", i0)
	r0, _ = returns[0].(*redshift.DescribeReservedNodesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DescribeReservedNodesPages(i0 *redshift.DescribeReservedNodesInput, i1 func(*redshift.DescribeReservedNodesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedNodesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeReservedNodesPages(in *redshift.DescribeReservedNodesInput, pager func(*redshift.DescribeReservedNodesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeReservedNodes", paginators, in, pager)
}

func (d *RedshiftDouble) DescribeReservedNodesPagesWithContext(i0 context.Context, i1 *redshift.DescribeReservedNodesInput, i2 func(*redshift.DescribeReservedNodesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedNodesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeReservedNodesPagesWithContext(ctx context.Context, in *redshift.DescribeReservedNodesInput, pager func(*redshift.DescribeReservedNodesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeReservedNodes", paginators, ctx, in, pager, options...)
}

func (d *RedshiftDouble) DescribeReservedNodesRequest(i0 *redshift.DescribeReservedNodesInput) (r0 *request.Request, r1 *redshift.DescribeReservedNodesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedNodesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DescribeReservedNodesOutput)
	return
}

func (d *RedshiftDouble) DescribeReservedNodesWithContext(i0 context.Context, i1 *redshift.DescribeReservedNodesInput, i2 ...request.Option) (r0 *redshift.DescribeReservedNodesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeReservedNodesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DescribeReservedNodesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeReservedNodesWithContext(ctx context.Context, in *redshift.DescribeReservedNodesInput, _ ...request.Option) (*redshift.DescribeReservedNodesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeReservedNodes cancelled", ctx.Err())
	default:
		return d.DescribeReservedNodes(in)
	}
}

func (d *RedshiftDouble) DescribeResize(i0 *redshift.DescribeResizeInput) (r0 *redshift.DescribeResizeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeResize", i0)
	r0, _ = returns[0].(*redshift.DescribeResizeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DescribeResizeRequest(i0 *redshift.DescribeResizeInput) (r0 *request.Request, r1 *redshift.DescribeResizeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeResizeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DescribeResizeOutput)
	return
}

func (d *RedshiftDouble) DescribeResizeWithContext(i0 context.Context, i1 *redshift.DescribeResizeInput, i2 ...request.Option) (r0 *redshift.DescribeResizeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeResizeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DescribeResizeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeResizeWithContext(ctx context.Context, in *redshift.DescribeResizeInput, _ ...request.Option) (*redshift.DescribeResizeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeResize cancelled", ctx.Err())
	default:
		return d.DescribeResize(in)
	}
}

func (d *RedshiftDouble) DescribeScheduledActions(i0 *redshift.DescribeScheduledActionsInput) (r0 *redshift.DescribeScheduledActionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScheduledActions", i0)
	r0, _ = returns[0].(*redshift.DescribeScheduledActionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DescribeScheduledActionsPages(i0 *redshift.DescribeScheduledActionsInput, i1 func(*redshift.DescribeScheduledActionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScheduledActionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeScheduledActionsPages(in *redshift.DescribeScheduledActionsInput, pager func(*redshift.DescribeScheduledActionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeScheduledActions", paginators, in, pager)
}

func (d *RedshiftDouble) DescribeScheduledActionsPagesWithContext(i0 context.Context, i1 *redshift.DescribeScheduledActionsInput, i2 func(*redshift.DescribeScheduledActionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScheduledActionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeScheduledActionsPagesWithContext(ctx context.Context, in *redshift.DescribeScheduledActionsInput, pager func(*redshift.DescribeScheduledActionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeScheduledActions", paginators, ctx, in, pager, options...)
}

func (d *RedshiftDouble) DescribeScheduledActionsRequest(i0 *redshift.DescribeScheduledActionsInput) (r0 *request.Request, r1 *redshift.DescribeScheduledActionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScheduledActionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DescribeScheduledActionsOutput)
	return
}

func (d *RedshiftDouble) DescribeScheduledActionsWithContext(i0 context.Context, i1 *redshift.DescribeScheduledActionsInput, i2 ...request.Option) (r0 *redshift.DescribeScheduledActionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeScheduledActionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DescribeScheduledActionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeScheduledActionsWithContext(ctx context.Context, in *redshift.DescribeScheduledActionsInput, _ ...request.Option) (*redshift.DescribeScheduledActionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeScheduledActions cancelled", ctx.Err())
	default:
		return d.DescribeScheduledActions(in)
	}
}

func (d *RedshiftDouble) DescribeSnapshotCopyGrants(i0 *redshift.DescribeSnapshotCopyGrantsInput) (r0 *redshift.DescribeSnapshotCopyGrantsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSnapshotCopyGrants", i0)
	r0, _ = returns[0].(*redshift.DescribeSnapshotCopyGrantsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DescribeSnapshotCopyGrantsRequest(i0 *redshift.DescribeSnapshotCopyGrantsInput) (r0 *request.Request, r1 *redshift.DescribeSnapshotCopyGrantsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSnapshotCopyGrantsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DescribeSnapshotCopyGrantsOutput)
	return
}

func (d *RedshiftDouble) DescribeSnapshotCopyGrantsWithContext(i0 context.Context, i1 *redshift.DescribeSnapshotCopyGrantsInput, i2 ...request.Option) (r0 *redshift.DescribeSnapshotCopyGrantsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSnapshotCopyGrantsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DescribeSnapshotCopyGrantsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeSnapshotCopyGrantsWithContext(ctx context.Context, in *redshift.DescribeSnapshotCopyGrantsInput, _ ...request.Option) (*redshift.DescribeSnapshotCopyGrantsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSnapshotCopyGrants cancelled", ctx.Err())
	default:
		return d.DescribeSnapshotCopyGrants(in)
	}
}

func (d *RedshiftDouble) DescribeSnapshotSchedules(i0 *redshift.DescribeSnapshotSchedulesInput) (r0 *redshift.DescribeSnapshotSchedulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSnapshotSchedules", i0)
	r0, _ = returns[0].(*redshift.DescribeSnapshotSchedulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DescribeSnapshotSchedulesRequest(i0 *redshift.DescribeSnapshotSchedulesInput) (r0 *request.Request, r1 *redshift.DescribeSnapshotSchedulesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSnapshotSchedulesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DescribeSnapshotSchedulesOutput)
	return
}

func (d *RedshiftDouble) DescribeSnapshotSchedulesWithContext(i0 context.Context, i1 *redshift.DescribeSnapshotSchedulesInput, i2 ...request.Option) (r0 *redshift.DescribeSnapshotSchedulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSnapshotSchedulesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DescribeSnapshotSchedulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeSnapshotSchedulesWithContext(ctx context.Context, in *redshift.DescribeSnapshotSchedulesInput, _ ...request.Option) (*redshift.DescribeSnapshotSchedulesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSnapshotSchedules cancelled", ctx.Err())
	default:
		return d.DescribeSnapshotSchedules(in)
	}
}

func (d *RedshiftDouble) DescribeStorage(i0 *redshift.DescribeStorageInput) (r0 *redshift.DescribeStorageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStorage", i0)
	r0, _ = returns[0].(*redshift.DescribeStorageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DescribeStorageRequest(i0 *redshift.DescribeStorageInput) (r0 *request.Request, r1 *redshift.DescribeStorageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStorageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DescribeStorageOutput)
	return
}

func (d *RedshiftDouble) DescribeStorageWithContext(i0 context.Context, i1 *redshift.DescribeStorageInput, i2 ...request.Option) (r0 *redshift.DescribeStorageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStorageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DescribeStorageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeStorageWithContext(ctx context.Context, in *redshift.DescribeStorageInput, _ ...request.Option) (*redshift.DescribeStorageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeStorage cancelled", ctx.Err())
	default:
		return d.DescribeStorage(in)
	}
}

func (d *RedshiftDouble) DescribeTableRestoreStatus(i0 *redshift.DescribeTableRestoreStatusInput) (r0 *redshift.DescribeTableRestoreStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTableRestoreStatus", i0)
	r0, _ = returns[0].(*redshift.DescribeTableRestoreStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DescribeTableRestoreStatusRequest(i0 *redshift.DescribeTableRestoreStatusInput) (r0 *request.Request, r1 *redshift.DescribeTableRestoreStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTableRestoreStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DescribeTableRestoreStatusOutput)
	return
}

func (d *RedshiftDouble) DescribeTableRestoreStatusWithContext(i0 context.Context, i1 *redshift.DescribeTableRestoreStatusInput, i2 ...request.Option) (r0 *redshift.DescribeTableRestoreStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTableRestoreStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DescribeTableRestoreStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeTableRestoreStatusWithContext(ctx context.Context, in *redshift.DescribeTableRestoreStatusInput, _ ...request.Option) (*redshift.DescribeTableRestoreStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTableRestoreStatus cancelled", ctx.Err())
	default:
		return d.DescribeTableRestoreStatus(in)
	}
}

func (d *RedshiftDouble) DescribeTags(i0 *redshift.DescribeTagsInput) (r0 *redshift.DescribeTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTags", i0)
	r0, _ = returns[0].(*redshift.DescribeTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DescribeTagsRequest(i0 *redshift.DescribeTagsInput) (r0 *request.Request, r1 *redshift.DescribeTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DescribeTagsOutput)
	return
}

func (d *RedshiftDouble) DescribeTagsWithContext(i0 context.Context, i1 *redshift.DescribeTagsInput, i2 ...request.Option) (r0 *redshift.DescribeTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DescribeTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDescribeTagsWithContext(ctx context.Context, in *redshift.DescribeTagsInput, _ ...request.Option) (*redshift.DescribeTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTags cancelled", ctx.Err())
	default:
		return d.DescribeTags(in)
	}
}

func (d *RedshiftDouble) DisableLogging(i0 *redshift.DisableLoggingInput) (r0 *redshift.LoggingStatus, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableLogging", i0)
	r0, _ = returns[0].(*redshift.LoggingStatus)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DisableLoggingRequest(i0 *redshift.DisableLoggingInput) (r0 *request.Request, r1 *redshift.LoggingStatus) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableLoggingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.LoggingStatus)
	return
}

func (d *RedshiftDouble) DisableLoggingWithContext(i0 context.Context, i1 *redshift.DisableLoggingInput, i2 ...request.Option) (r0 *redshift.LoggingStatus, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableLoggingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.LoggingStatus)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDisableLoggingWithContext(ctx context.Context, in *redshift.DisableLoggingInput, _ ...request.Option) (*redshift.LoggingStatus, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisableLogging cancelled", ctx.Err())
	default:
		return d.DisableLogging(in)
	}
}

func (d *RedshiftDouble) DisableSnapshotCopy(i0 *redshift.DisableSnapshotCopyInput) (r0 *redshift.DisableSnapshotCopyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableSnapshotCopy", i0)
	r0, _ = returns[0].(*redshift.DisableSnapshotCopyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) DisableSnapshotCopyRequest(i0 *redshift.DisableSnapshotCopyInput) (r0 *request.Request, r1 *redshift.DisableSnapshotCopyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableSnapshotCopyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.DisableSnapshotCopyOutput)
	return
}

func (d *RedshiftDouble) DisableSnapshotCopyWithContext(i0 context.Context, i1 *redshift.DisableSnapshotCopyInput, i2 ...request.Option) (r0 *redshift.DisableSnapshotCopyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableSnapshotCopyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.DisableSnapshotCopyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeDisableSnapshotCopyWithContext(ctx context.Context, in *redshift.DisableSnapshotCopyInput, _ ...request.Option) (*redshift.DisableSnapshotCopyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisableSnapshotCopy cancelled", ctx.Err())
	default:
		return d.DisableSnapshotCopy(in)
	}
}

func (d *RedshiftDouble) EnableLogging(i0 *redshift.EnableLoggingInput) (r0 *redshift.LoggingStatus, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableLogging", i0)
	r0, _ = returns[0].(*redshift.LoggingStatus)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) EnableLoggingRequest(i0 *redshift.EnableLoggingInput) (r0 *request.Request, r1 *redshift.LoggingStatus) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableLoggingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.LoggingStatus)
	return
}

func (d *RedshiftDouble) EnableLoggingWithContext(i0 context.Context, i1 *redshift.EnableLoggingInput, i2 ...request.Option) (r0 *redshift.LoggingStatus, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableLoggingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.LoggingStatus)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeEnableLoggingWithContext(ctx context.Context, in *redshift.EnableLoggingInput, _ ...request.Option) (*redshift.LoggingStatus, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "EnableLogging cancelled", ctx.Err())
	default:
		return d.EnableLogging(in)
	}
}

func (d *RedshiftDouble) EnableSnapshotCopy(i0 *redshift.EnableSnapshotCopyInput) (r0 *redshift.EnableSnapshotCopyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableSnapshotCopy", i0)
	r0, _ = returns[0].(*redshift.EnableSnapshotCopyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) EnableSnapshotCopyRequest(i0 *redshift.EnableSnapshotCopyInput) (r0 *request.Request, r1 *redshift.EnableSnapshotCopyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableSnapshotCopyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.EnableSnapshotCopyOutput)
	return
}

func (d *RedshiftDouble) EnableSnapshotCopyWithContext(i0 context.Context, i1 *redshift.EnableSnapshotCopyInput, i2 ...request.Option) (r0 *redshift.EnableSnapshotCopyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableSnapshotCopyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.EnableSnapshotCopyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeEnableSnapshotCopyWithContext(ctx context.Context, in *redshift.EnableSnapshotCopyInput, _ ...request.Option) (*redshift.EnableSnapshotCopyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "EnableSnapshotCopy cancelled", ctx.Err())
	default:
		return d.EnableSnapshotCopy(in)
	}
}

func (d *RedshiftDouble) GetClusterCredentials(i0 *redshift.GetClusterCredentialsInput) (r0 *redshift.GetClusterCredentialsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetClusterCredentials", i0)
	r0, _ = returns[0].(*redshift.GetClusterCredentialsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) GetClusterCredentialsRequest(i0 *redshift.GetClusterCredentialsInput) (r0 *request.Request, r1 *redshift.GetClusterCredentialsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetClusterCredentialsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.GetClusterCredentialsOutput)
	return
}

func (d *RedshiftDouble) GetClusterCredentialsWithContext(i0 context.Context, i1 *redshift.GetClusterCredentialsInput, i2 ...request.Option) (r0 *redshift.GetClusterCredentialsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetClusterCredentialsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.GetClusterCredentialsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeGetClusterCredentialsWithContext(ctx context.Context, in *redshift.GetClusterCredentialsInput, _ ...request.Option) (*redshift.GetClusterCredentialsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetClusterCredentials cancelled", ctx.Err())
	default:
		return d.GetClusterCredentials(in)
	}
}

func (d *RedshiftDouble) GetReservedNodeExchangeOfferings(i0 *redshift.GetReservedNodeExchangeOfferingsInput) (r0 *redshift.GetReservedNodeExchangeOfferingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetReservedNodeExchangeOfferings", i0)
	r0, _ = returns[0].(*redshift.GetReservedNodeExchangeOfferingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) GetReservedNodeExchangeOfferingsRequest(i0 *redshift.GetReservedNodeExchangeOfferingsInput) (r0 *request.Request, r1 *redshift.GetReservedNodeExchangeOfferingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetReservedNodeExchangeOfferingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.GetReservedNodeExchangeOfferingsOutput)
	return
}

func (d *RedshiftDouble) GetReservedNodeExchangeOfferingsWithContext(i0 context.Context, i1 *redshift.GetReservedNodeExchangeOfferingsInput, i2 ...request.Option) (r0 *redshift.GetReservedNodeExchangeOfferingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetReservedNodeExchangeOfferingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.GetReservedNodeExchangeOfferingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeGetReservedNodeExchangeOfferingsWithContext(ctx context.Context, in *redshift.GetReservedNodeExchangeOfferingsInput, _ ...request.Option) (*redshift.GetReservedNodeExchangeOfferingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetReservedNodeExchangeOfferings cancelled", ctx.Err())
	default:
		return d.GetReservedNodeExchangeOfferings(in)
	}
}

func (d *RedshiftDouble) ModifyCluster(i0 *redshift.ModifyClusterInput) (r0 *redshift.ModifyClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyCluster", i0)
	r0, _ = returns[0].(*redshift.ModifyClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) ModifyClusterDbRevision(i0 *redshift.ModifyClusterDbRevisionInput) (r0 *redshift.ModifyClusterDbRevisionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyClusterDbRevision", i0)
	r0, _ = returns[0].(*redshift.ModifyClusterDbRevisionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) ModifyClusterDbRevisionRequest(i0 *redshift.ModifyClusterDbRevisionInput) (r0 *request.Request, r1 *redshift.ModifyClusterDbRevisionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyClusterDbRevisionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.ModifyClusterDbRevisionOutput)
	return
}

func (d *RedshiftDouble) ModifyClusterDbRevisionWithContext(i0 context.Context, i1 *redshift.ModifyClusterDbRevisionInput, i2 ...request.Option) (r0 *redshift.ModifyClusterDbRevisionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyClusterDbRevisionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.ModifyClusterDbRevisionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeModifyClusterDbRevisionWithContext(ctx context.Context, in *redshift.ModifyClusterDbRevisionInput, _ ...request.Option) (*redshift.ModifyClusterDbRevisionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyClusterDbRevision cancelled", ctx.Err())
	default:
		return d.ModifyClusterDbRevision(in)
	}
}

func (d *RedshiftDouble) ModifyClusterIamRoles(i0 *redshift.ModifyClusterIamRolesInput) (r0 *redshift.ModifyClusterIamRolesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyClusterIamRoles", i0)
	r0, _ = returns[0].(*redshift.ModifyClusterIamRolesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) ModifyClusterIamRolesRequest(i0 *redshift.ModifyClusterIamRolesInput) (r0 *request.Request, r1 *redshift.ModifyClusterIamRolesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyClusterIamRolesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.ModifyClusterIamRolesOutput)
	return
}

func (d *RedshiftDouble) ModifyClusterIamRolesWithContext(i0 context.Context, i1 *redshift.ModifyClusterIamRolesInput, i2 ...request.Option) (r0 *redshift.ModifyClusterIamRolesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyClusterIamRolesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.ModifyClusterIamRolesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeModifyClusterIamRolesWithContext(ctx context.Context, in *redshift.ModifyClusterIamRolesInput, _ ...request.Option) (*redshift.ModifyClusterIamRolesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyClusterIamRoles cancelled", ctx.Err())
	default:
		return d.ModifyClusterIamRoles(in)
	}
}

func (d *RedshiftDouble) ModifyClusterMaintenance(i0 *redshift.ModifyClusterMaintenanceInput) (r0 *redshift.ModifyClusterMaintenanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyClusterMaintenance", i0)
	r0, _ = returns[0].(*redshift.ModifyClusterMaintenanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) ModifyClusterMaintenanceRequest(i0 *redshift.ModifyClusterMaintenanceInput) (r0 *request.Request, r1 *redshift.ModifyClusterMaintenanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyClusterMaintenanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.ModifyClusterMaintenanceOutput)
	return
}

func (d *RedshiftDouble) ModifyClusterMaintenanceWithContext(i0 context.Context, i1 *redshift.ModifyClusterMaintenanceInput, i2 ...request.Option) (r0 *redshift.ModifyClusterMaintenanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyClusterMaintenanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.ModifyClusterMaintenanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeModifyClusterMaintenanceWithContext(ctx context.Context, in *redshift.ModifyClusterMaintenanceInput, _ ...request.Option) (*redshift.ModifyClusterMaintenanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyClusterMaintenance cancelled", ctx.Err())
	default:
		return d.ModifyClusterMaintenance(in)
	}
}

func (d *RedshiftDouble) ModifyClusterParameterGroup(i0 *redshift.ModifyClusterParameterGroupInput) (r0 *redshift.ClusterParameterGroupNameMessage, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyClusterParameterGroup", i0)
	r0, _ = returns[0].(*redshift.ClusterParameterGroupNameMessage)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) ModifyClusterParameterGroupRequest(i0 *redshift.ModifyClusterParameterGroupInput) (r0 *request.Request, r1 *redshift.ClusterParameterGroupNameMessage) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyClusterParameterGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.ClusterParameterGroupNameMessage)
	return
}

func (d *RedshiftDouble) ModifyClusterParameterGroupWithContext(i0 context.Context, i1 *redshift.ModifyClusterParameterGroupInput, i2 ...request.Option) (r0 *redshift.ClusterParameterGroupNameMessage, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyClusterParameterGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.ClusterParameterGroupNameMessage)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeModifyClusterParameterGroupWithContext(ctx context.Context, in *redshift.ModifyClusterParameterGroupInput, _ ...request.Option) (*redshift.ClusterParameterGroupNameMessage, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyClusterParameterGroup cancelled", ctx.Err())
	default:
		return d.ModifyClusterParameterGroup(in)
	}
}

func (d *RedshiftDouble) ModifyClusterRequest(i0 *redshift.ModifyClusterInput) (r0 *request.Request, r1 *redshift.ModifyClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.ModifyClusterOutput)
	return
}

func (d *RedshiftDouble) ModifyClusterSnapshot(i0 *redshift.ModifyClusterSnapshotInput) (r0 *redshift.ModifyClusterSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyClusterSnapshot", i0)
	r0, _ = returns[0].(*redshift.ModifyClusterSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) ModifyClusterSnapshotRequest(i0 *redshift.ModifyClusterSnapshotInput) (r0 *request.Request, r1 *redshift.ModifyClusterSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyClusterSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.ModifyClusterSnapshotOutput)
	return
}

func (d *RedshiftDouble) ModifyClusterSnapshotSchedule(i0 *redshift.ModifyClusterSnapshotScheduleInput) (r0 *redshift.ModifyClusterSnapshotScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyClusterSnapshotSchedule", i0)
	r0, _ = returns[0].(*redshift.ModifyClusterSnapshotScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) ModifyClusterSnapshotScheduleRequest(i0 *redshift.ModifyClusterSnapshotScheduleInput) (r0 *request.Request, r1 *redshift.ModifyClusterSnapshotScheduleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyClusterSnapshotScheduleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.ModifyClusterSnapshotScheduleOutput)
	return
}

func (d *RedshiftDouble) ModifyClusterSnapshotScheduleWithContext(i0 context.Context, i1 *redshift.ModifyClusterSnapshotScheduleInput, i2 ...request.Option) (r0 *redshift.ModifyClusterSnapshotScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyClusterSnapshotScheduleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.ModifyClusterSnapshotScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeModifyClusterSnapshotScheduleWithContext(ctx context.Context, in *redshift.ModifyClusterSnapshotScheduleInput, _ ...request.Option) (*redshift.ModifyClusterSnapshotScheduleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyClusterSnapshotSchedule cancelled", ctx.Err())
	default:
		return d.ModifyClusterSnapshotSchedule(in)
	}
}

func (d *RedshiftDouble) ModifyClusterSnapshotWithContext(i0 context.Context, i1 *redshift.ModifyClusterSnapshotInput, i2 ...request.Option) (r0 *redshift.ModifyClusterSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyClusterSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.ModifyClusterSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeModifyClusterSnapshotWithContext(ctx context.Context, in *redshift.ModifyClusterSnapshotInput, _ ...request.Option) (*redshift.ModifyClusterSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyClusterSnapshot cancelled", ctx.Err())
	default:
		return d.ModifyClusterSnapshot(in)
	}
}

func (d *RedshiftDouble) ModifyClusterSubnetGroup(i0 *redshift.ModifyClusterSubnetGroupInput) (r0 *redshift.ModifyClusterSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyClusterSubnetGroup", i0)
	r0, _ = returns[0].(*redshift.ModifyClusterSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) ModifyClusterSubnetGroupRequest(i0 *redshift.ModifyClusterSubnetGroupInput) (r0 *request.Request, r1 *redshift.ModifyClusterSubnetGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyClusterSubnetGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.ModifyClusterSubnetGroupOutput)
	return
}

func (d *RedshiftDouble) ModifyClusterSubnetGroupWithContext(i0 context.Context, i1 *redshift.ModifyClusterSubnetGroupInput, i2 ...request.Option) (r0 *redshift.ModifyClusterSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyClusterSubnetGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.ModifyClusterSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeModifyClusterSubnetGroupWithContext(ctx context.Context, in *redshift.ModifyClusterSubnetGroupInput, _ ...request.Option) (*redshift.ModifyClusterSubnetGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyClusterSubnetGroup cancelled", ctx.Err())
	default:
		return d.ModifyClusterSubnetGroup(in)
	}
}

func (d *RedshiftDouble) ModifyClusterWithContext(i0 context.Context, i1 *redshift.ModifyClusterInput, i2 ...request.Option) (r0 *redshift.ModifyClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.ModifyClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeModifyClusterWithContext(ctx context.Context, in *redshift.ModifyClusterInput, _ ...request.Option) (*redshift.ModifyClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyCluster cancelled", ctx.Err())
	default:
		return d.ModifyCluster(in)
	}
}

func (d *RedshiftDouble) ModifyEventSubscription(i0 *redshift.ModifyEventSubscriptionInput) (r0 *redshift.ModifyEventSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyEventSubscription", i0)
	r0, _ = returns[0].(*redshift.ModifyEventSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) ModifyEventSubscriptionRequest(i0 *redshift.ModifyEventSubscriptionInput) (r0 *request.Request, r1 *redshift.ModifyEventSubscriptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyEventSubscriptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.ModifyEventSubscriptionOutput)
	return
}

func (d *RedshiftDouble) ModifyEventSubscriptionWithContext(i0 context.Context, i1 *redshift.ModifyEventSubscriptionInput, i2 ...request.Option) (r0 *redshift.ModifyEventSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyEventSubscriptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.ModifyEventSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeModifyEventSubscriptionWithContext(ctx context.Context, in *redshift.ModifyEventSubscriptionInput, _ ...request.Option) (*redshift.ModifyEventSubscriptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyEventSubscription cancelled", ctx.Err())
	default:
		return d.ModifyEventSubscription(in)
	}
}

func (d *RedshiftDouble) ModifyScheduledAction(i0 *redshift.ModifyScheduledActionInput) (r0 *redshift.ModifyScheduledActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyScheduledAction", i0)
	r0, _ = returns[0].(*redshift.ModifyScheduledActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) ModifyScheduledActionRequest(i0 *redshift.ModifyScheduledActionInput) (r0 *request.Request, r1 *redshift.ModifyScheduledActionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyScheduledActionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.ModifyScheduledActionOutput)
	return
}

func (d *RedshiftDouble) ModifyScheduledActionWithContext(i0 context.Context, i1 *redshift.ModifyScheduledActionInput, i2 ...request.Option) (r0 *redshift.ModifyScheduledActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyScheduledActionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.ModifyScheduledActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeModifyScheduledActionWithContext(ctx context.Context, in *redshift.ModifyScheduledActionInput, _ ...request.Option) (*redshift.ModifyScheduledActionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyScheduledAction cancelled", ctx.Err())
	default:
		return d.ModifyScheduledAction(in)
	}
}

func (d *RedshiftDouble) ModifySnapshotCopyRetentionPeriod(i0 *redshift.ModifySnapshotCopyRetentionPeriodInput) (r0 *redshift.ModifySnapshotCopyRetentionPeriodOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifySnapshotCopyRetentionPeriod", i0)
	r0, _ = returns[0].(*redshift.ModifySnapshotCopyRetentionPeriodOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) ModifySnapshotCopyRetentionPeriodRequest(i0 *redshift.ModifySnapshotCopyRetentionPeriodInput) (r0 *request.Request, r1 *redshift.ModifySnapshotCopyRetentionPeriodOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifySnapshotCopyRetentionPeriodRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.ModifySnapshotCopyRetentionPeriodOutput)
	return
}

func (d *RedshiftDouble) ModifySnapshotCopyRetentionPeriodWithContext(i0 context.Context, i1 *redshift.ModifySnapshotCopyRetentionPeriodInput, i2 ...request.Option) (r0 *redshift.ModifySnapshotCopyRetentionPeriodOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifySnapshotCopyRetentionPeriodWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.ModifySnapshotCopyRetentionPeriodOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeModifySnapshotCopyRetentionPeriodWithContext(ctx context.Context, in *redshift.ModifySnapshotCopyRetentionPeriodInput, _ ...request.Option) (*redshift.ModifySnapshotCopyRetentionPeriodOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifySnapshotCopyRetentionPeriod cancelled", ctx.Err())
	default:
		return d.ModifySnapshotCopyRetentionPeriod(in)
	}
}

func (d *RedshiftDouble) ModifySnapshotSchedule(i0 *redshift.ModifySnapshotScheduleInput) (r0 *redshift.ModifySnapshotScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifySnapshotSchedule", i0)
	r0, _ = returns[0].(*redshift.ModifySnapshotScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) ModifySnapshotScheduleRequest(i0 *redshift.ModifySnapshotScheduleInput) (r0 *request.Request, r1 *redshift.ModifySnapshotScheduleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifySnapshotScheduleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.ModifySnapshotScheduleOutput)
	return
}

func (d *RedshiftDouble) ModifySnapshotScheduleWithContext(i0 context.Context, i1 *redshift.ModifySnapshotScheduleInput, i2 ...request.Option) (r0 *redshift.ModifySnapshotScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifySnapshotScheduleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.ModifySnapshotScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeModifySnapshotScheduleWithContext(ctx context.Context, in *redshift.ModifySnapshotScheduleInput, _ ...request.Option) (*redshift.ModifySnapshotScheduleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifySnapshotSchedule cancelled", ctx.Err())
	default:
		return d.ModifySnapshotSchedule(in)
	}
}

func (d *RedshiftDouble) PurchaseReservedNodeOffering(i0 *redshift.PurchaseReservedNodeOfferingInput) (r0 *redshift.PurchaseReservedNodeOfferingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PurchaseReservedNodeOffering", i0)
	r0, _ = returns[0].(*redshift.PurchaseReservedNodeOfferingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) PurchaseReservedNodeOfferingRequest(i0 *redshift.PurchaseReservedNodeOfferingInput) (r0 *request.Request, r1 *redshift.PurchaseReservedNodeOfferingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PurchaseReservedNodeOfferingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.PurchaseReservedNodeOfferingOutput)
	return
}

func (d *RedshiftDouble) PurchaseReservedNodeOfferingWithContext(i0 context.Context, i1 *redshift.PurchaseReservedNodeOfferingInput, i2 ...request.Option) (r0 *redshift.PurchaseReservedNodeOfferingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PurchaseReservedNodeOfferingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.PurchaseReservedNodeOfferingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakePurchaseReservedNodeOfferingWithContext(ctx context.Context, in *redshift.PurchaseReservedNodeOfferingInput, _ ...request.Option) (*redshift.PurchaseReservedNodeOfferingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PurchaseReservedNodeOffering cancelled", ctx.Err())
	default:
		return d.PurchaseReservedNodeOffering(in)
	}
}

func (d *RedshiftDouble) RebootCluster(i0 *redshift.RebootClusterInput) (r0 *redshift.RebootClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebootCluster", i0)
	r0, _ = returns[0].(*redshift.RebootClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) RebootClusterRequest(i0 *redshift.RebootClusterInput) (r0 *request.Request, r1 *redshift.RebootClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebootClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.RebootClusterOutput)
	return
}

func (d *RedshiftDouble) RebootClusterWithContext(i0 context.Context, i1 *redshift.RebootClusterInput, i2 ...request.Option) (r0 *redshift.RebootClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebootClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.RebootClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeRebootClusterWithContext(ctx context.Context, in *redshift.RebootClusterInput, _ ...request.Option) (*redshift.RebootClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RebootCluster cancelled", ctx.Err())
	default:
		return d.RebootCluster(in)
	}
}

func (d *RedshiftDouble) ResetClusterParameterGroup(i0 *redshift.ResetClusterParameterGroupInput) (r0 *redshift.ClusterParameterGroupNameMessage, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetClusterParameterGroup", i0)
	r0, _ = returns[0].(*redshift.ClusterParameterGroupNameMessage)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) ResetClusterParameterGroupRequest(i0 *redshift.ResetClusterParameterGroupInput) (r0 *request.Request, r1 *redshift.ClusterParameterGroupNameMessage) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetClusterParameterGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.ClusterParameterGroupNameMessage)
	return
}

func (d *RedshiftDouble) ResetClusterParameterGroupWithContext(i0 context.Context, i1 *redshift.ResetClusterParameterGroupInput, i2 ...request.Option) (r0 *redshift.ClusterParameterGroupNameMessage, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetClusterParameterGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.ClusterParameterGroupNameMessage)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeResetClusterParameterGroupWithContext(ctx context.Context, in *redshift.ResetClusterParameterGroupInput, _ ...request.Option) (*redshift.ClusterParameterGroupNameMessage, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ResetClusterParameterGroup cancelled", ctx.Err())
	default:
		return d.ResetClusterParameterGroup(in)
	}
}

func (d *RedshiftDouble) ResizeCluster(i0 *redshift.ResizeClusterInput) (r0 *redshift.ResizeClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResizeCluster", i0)
	r0, _ = returns[0].(*redshift.ResizeClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) ResizeClusterRequest(i0 *redshift.ResizeClusterInput) (r0 *request.Request, r1 *redshift.ResizeClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResizeClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.ResizeClusterOutput)
	return
}

func (d *RedshiftDouble) ResizeClusterWithContext(i0 context.Context, i1 *redshift.ResizeClusterInput, i2 ...request.Option) (r0 *redshift.ResizeClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResizeClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.ResizeClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeResizeClusterWithContext(ctx context.Context, in *redshift.ResizeClusterInput, _ ...request.Option) (*redshift.ResizeClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ResizeCluster cancelled", ctx.Err())
	default:
		return d.ResizeCluster(in)
	}
}

func (d *RedshiftDouble) RestoreFromClusterSnapshot(i0 *redshift.RestoreFromClusterSnapshotInput) (r0 *redshift.RestoreFromClusterSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreFromClusterSnapshot", i0)
	r0, _ = returns[0].(*redshift.RestoreFromClusterSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) RestoreFromClusterSnapshotRequest(i0 *redshift.RestoreFromClusterSnapshotInput) (r0 *request.Request, r1 *redshift.RestoreFromClusterSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreFromClusterSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.RestoreFromClusterSnapshotOutput)
	return
}

func (d *RedshiftDouble) RestoreFromClusterSnapshotWithContext(i0 context.Context, i1 *redshift.RestoreFromClusterSnapshotInput, i2 ...request.Option) (r0 *redshift.RestoreFromClusterSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreFromClusterSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.RestoreFromClusterSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeRestoreFromClusterSnapshotWithContext(ctx context.Context, in *redshift.RestoreFromClusterSnapshotInput, _ ...request.Option) (*redshift.RestoreFromClusterSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RestoreFromClusterSnapshot cancelled", ctx.Err())
	default:
		return d.RestoreFromClusterSnapshot(in)
	}
}

func (d *RedshiftDouble) RestoreTableFromClusterSnapshot(i0 *redshift.RestoreTableFromClusterSnapshotInput) (r0 *redshift.RestoreTableFromClusterSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreTableFromClusterSnapshot", i0)
	r0, _ = returns[0].(*redshift.RestoreTableFromClusterSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) RestoreTableFromClusterSnapshotRequest(i0 *redshift.RestoreTableFromClusterSnapshotInput) (r0 *request.Request, r1 *redshift.RestoreTableFromClusterSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreTableFromClusterSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.RestoreTableFromClusterSnapshotOutput)
	return
}

func (d *RedshiftDouble) RestoreTableFromClusterSnapshotWithContext(i0 context.Context, i1 *redshift.RestoreTableFromClusterSnapshotInput, i2 ...request.Option) (r0 *redshift.RestoreTableFromClusterSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreTableFromClusterSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.RestoreTableFromClusterSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeRestoreTableFromClusterSnapshotWithContext(ctx context.Context, in *redshift.RestoreTableFromClusterSnapshotInput, _ ...request.Option) (*redshift.RestoreTableFromClusterSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RestoreTableFromClusterSnapshot cancelled", ctx.Err())
	default:
		return d.RestoreTableFromClusterSnapshot(in)
	}
}

func (d *RedshiftDouble) RevokeClusterSecurityGroupIngress(i0 *redshift.RevokeClusterSecurityGroupIngressInput) (r0 *redshift.RevokeClusterSecurityGroupIngressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeClusterSecurityGroupIngress", i0)
	r0, _ = returns[0].(*redshift.RevokeClusterSecurityGroupIngressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) RevokeClusterSecurityGroupIngressRequest(i0 *redshift.RevokeClusterSecurityGroupIngressInput) (r0 *request.Request, r1 *redshift.RevokeClusterSecurityGroupIngressOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeClusterSecurityGroupIngressRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.RevokeClusterSecurityGroupIngressOutput)
	return
}

func (d *RedshiftDouble) RevokeClusterSecurityGroupIngressWithContext(i0 context.Context, i1 *redshift.RevokeClusterSecurityGroupIngressInput, i2 ...request.Option) (r0 *redshift.RevokeClusterSecurityGroupIngressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeClusterSecurityGroupIngressWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.RevokeClusterSecurityGroupIngressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeRevokeClusterSecurityGroupIngressWithContext(ctx context.Context, in *redshift.RevokeClusterSecurityGroupIngressInput, _ ...request.Option) (*redshift.RevokeClusterSecurityGroupIngressOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RevokeClusterSecurityGroupIngress cancelled", ctx.Err())
	default:
		return d.RevokeClusterSecurityGroupIngress(in)
	}
}

func (d *RedshiftDouble) RevokeSnapshotAccess(i0 *redshift.RevokeSnapshotAccessInput) (r0 *redshift.RevokeSnapshotAccessOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeSnapshotAccess", i0)
	r0, _ = returns[0].(*redshift.RevokeSnapshotAccessOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) RevokeSnapshotAccessRequest(i0 *redshift.RevokeSnapshotAccessInput) (r0 *request.Request, r1 *redshift.RevokeSnapshotAccessOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeSnapshotAccessRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.RevokeSnapshotAccessOutput)
	return
}

func (d *RedshiftDouble) RevokeSnapshotAccessWithContext(i0 context.Context, i1 *redshift.RevokeSnapshotAccessInput, i2 ...request.Option) (r0 *redshift.RevokeSnapshotAccessOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeSnapshotAccessWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.RevokeSnapshotAccessOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeRevokeSnapshotAccessWithContext(ctx context.Context, in *redshift.RevokeSnapshotAccessInput, _ ...request.Option) (*redshift.RevokeSnapshotAccessOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RevokeSnapshotAccess cancelled", ctx.Err())
	default:
		return d.RevokeSnapshotAccess(in)
	}
}

func (d *RedshiftDouble) RotateEncryptionKey(i0 *redshift.RotateEncryptionKeyInput) (r0 *redshift.RotateEncryptionKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RotateEncryptionKey", i0)
	r0, _ = returns[0].(*redshift.RotateEncryptionKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) RotateEncryptionKeyRequest(i0 *redshift.RotateEncryptionKeyInput) (r0 *request.Request, r1 *redshift.RotateEncryptionKeyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RotateEncryptionKeyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*redshift.RotateEncryptionKeyOutput)
	return
}

func (d *RedshiftDouble) RotateEncryptionKeyWithContext(i0 context.Context, i1 *redshift.RotateEncryptionKeyInput, i2 ...request.Option) (r0 *redshift.RotateEncryptionKeyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RotateEncryptionKeyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*redshift.RotateEncryptionKeyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RedshiftDouble) fakeRotateEncryptionKeyWithContext(ctx context.Context, in *redshift.RotateEncryptionKeyInput, _ ...request.Option) (*redshift.RotateEncryptionKeyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RotateEncryptionKey cancelled", ctx.Err())
	default:
		return d.RotateEncryptionKey(in)
	}
}

func (d *RedshiftDouble) WaitUntilClusterAvailable(i0 *redshift.DescribeClustersInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilClusterAvailable", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeWaitUntilClusterAvailable(in *redshift.DescribeClustersInput) error {
	return d.WaitUntil("ClusterAvailable", waiters, in)
}

func (d *RedshiftDouble) WaitUntilClusterAvailableWithContext(i0 context.Context, i1 *redshift.DescribeClustersInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilClusterAvailableWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeWaitUntilClusterAvailableWithContext(ctx context.Context, in *redshift.DescribeClustersInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("ClusterAvailable", waiters, ctx, in, waitOption...)
}

func (d *RedshiftDouble) WaitUntilClusterDeleted(i0 *redshift.DescribeClustersInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilClusterDeleted", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeWaitUntilClusterDeleted(in *redshift.DescribeClustersInput) error {
	return d.WaitUntil("ClusterDeleted", waiters, in)
}

func (d *RedshiftDouble) WaitUntilClusterDeletedWithContext(i0 context.Context, i1 *redshift.DescribeClustersInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilClusterDeletedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeWaitUntilClusterDeletedWithContext(ctx context.Context, in *redshift.DescribeClustersInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("ClusterDeleted", waiters, ctx, in, waitOption...)
}

func (d *RedshiftDouble) WaitUntilClusterRestored(i0 *redshift.DescribeClustersInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilClusterRestored", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeWaitUntilClusterRestored(in *redshift.DescribeClustersInput) error {
	return d.WaitUntil("ClusterRestored", waiters, in)
}

func (d *RedshiftDouble) WaitUntilClusterRestoredWithContext(i0 context.Context, i1 *redshift.DescribeClustersInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilClusterRestoredWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeWaitUntilClusterRestoredWithContext(ctx context.Context, in *redshift.DescribeClustersInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("ClusterRestored", waiters, ctx, in, waitOption...)
}

func (d *RedshiftDouble) WaitUntilSnapshotAvailable(i0 *redshift.DescribeClusterSnapshotsInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilSnapshotAvailable", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeWaitUntilSnapshotAvailable(in *redshift.DescribeClusterSnapshotsInput) error {
	return d.WaitUntil("SnapshotAvailable", waiters, in)
}

func (d *RedshiftDouble) WaitUntilSnapshotAvailableWithContext(i0 context.Context, i1 *redshift.DescribeClusterSnapshotsInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilSnapshotAvailableWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *RedshiftDouble) fakeWaitUntilSnapshotAvailableWithContext(ctx context.Context, in *redshift.DescribeClusterSnapshotsInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("SnapshotAvailable", waiters, ctx, in, waitOption...)
}
