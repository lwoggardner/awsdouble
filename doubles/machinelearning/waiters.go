// Code generated by go awsdoublegen; DO NOT EDIT.
// This file was generated at 2020-01-29T21:22:05+11:00
package machinelearningdouble

import (
	"time"

	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/lwoggardner/awsdouble"
)

var waiters = map[string]*awsdouble.Waiter{

	"BatchPredictionAvailable": &awsdouble.Waiter{
		OperationName: "DescribeBatchPredictions",
		Waiter: request.Waiter{
			Name:        "WaitUntilBatchPredictionAvailable",
			MaxAttempts: 60,
			Delay:       request.ConstantWaiterDelay(30 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathAllWaiterMatch, Argument: "Results[].Status",
					Expected: "COMPLETED",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Results[].Status",
					Expected: "FAILED",
				},
			},
		},
	},

	"DataSourceAvailable": &awsdouble.Waiter{
		OperationName: "DescribeDataSources",
		Waiter: request.Waiter{
			Name:        "WaitUntilDataSourceAvailable",
			MaxAttempts: 60,
			Delay:       request.ConstantWaiterDelay(30 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathAllWaiterMatch, Argument: "Results[].Status",
					Expected: "COMPLETED",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Results[].Status",
					Expected: "FAILED",
				},
			},
		},
	},

	"EvaluationAvailable": &awsdouble.Waiter{
		OperationName: "DescribeEvaluations",
		Waiter: request.Waiter{
			Name:        "WaitUntilEvaluationAvailable",
			MaxAttempts: 60,
			Delay:       request.ConstantWaiterDelay(30 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathAllWaiterMatch, Argument: "Results[].Status",
					Expected: "COMPLETED",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Results[].Status",
					Expected: "FAILED",
				},
			},
		},
	},

	"MLModelAvailable": &awsdouble.Waiter{
		OperationName: "DescribeMLModels",
		Waiter: request.Waiter{
			Name:        "WaitUntilMLModelAvailable",
			MaxAttempts: 60,
			Delay:       request.ConstantWaiterDelay(30 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathAllWaiterMatch, Argument: "Results[].Status",
					Expected: "COMPLETED",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathAnyWaiterMatch, Argument: "Results[].Status",
					Expected: "FAILED",
				},
			},
		},
	},
}
