// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:13:43+11:00

// Package machinelearningdouble provides a TestDouble implementation of machinelearningiface.MachineLearningAPI
package machinelearningdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/machinelearning"
	"github.com/aws/aws-sdk-go/service/machinelearning/machinelearningiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// MachineLearningDouble is TestDouble for machinelearningiface.MachineLearningAPI
type MachineLearningDouble struct {
	machinelearningiface.MachineLearningAPI
	*awsdouble.AWSTestDouble
}

// Constructor for MachineLearningDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *MachineLearningDouble {
	result := &MachineLearningDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*machinelearningiface.MachineLearningAPI)(nil), configurators...)
	return result
}

func (d *MachineLearningDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *MachineLearningDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AddTagsWithContext":
		return m.Fake(d.fakeAddTagsWithContext)

	case "CreateBatchPredictionWithContext":
		return m.Fake(d.fakeCreateBatchPredictionWithContext)

	case "CreateDataSourceFromRDSWithContext":
		return m.Fake(d.fakeCreateDataSourceFromRDSWithContext)

	case "CreateDataSourceFromRedshiftWithContext":
		return m.Fake(d.fakeCreateDataSourceFromRedshiftWithContext)

	case "CreateDataSourceFromS3WithContext":
		return m.Fake(d.fakeCreateDataSourceFromS3WithContext)

	case "CreateEvaluationWithContext":
		return m.Fake(d.fakeCreateEvaluationWithContext)

	case "CreateMLModelWithContext":
		return m.Fake(d.fakeCreateMLModelWithContext)

	case "CreateRealtimeEndpointWithContext":
		return m.Fake(d.fakeCreateRealtimeEndpointWithContext)

	case "DeleteBatchPredictionWithContext":
		return m.Fake(d.fakeDeleteBatchPredictionWithContext)

	case "DeleteDataSourceWithContext":
		return m.Fake(d.fakeDeleteDataSourceWithContext)

	case "DeleteEvaluationWithContext":
		return m.Fake(d.fakeDeleteEvaluationWithContext)

	case "DeleteMLModelWithContext":
		return m.Fake(d.fakeDeleteMLModelWithContext)

	case "DeleteRealtimeEndpointWithContext":
		return m.Fake(d.fakeDeleteRealtimeEndpointWithContext)

	case "DeleteTagsWithContext":
		return m.Fake(d.fakeDeleteTagsWithContext)

	case "DescribeBatchPredictionsPages":
		return m.Fake(d.fakeDescribeBatchPredictionsPages)

	case "DescribeBatchPredictionsPagesWithContext":
		return m.Fake(d.fakeDescribeBatchPredictionsPagesWithContext)

	case "DescribeBatchPredictionsWithContext":
		return m.Fake(d.fakeDescribeBatchPredictionsWithContext)

	case "DescribeDataSourcesPages":
		return m.Fake(d.fakeDescribeDataSourcesPages)

	case "DescribeDataSourcesPagesWithContext":
		return m.Fake(d.fakeDescribeDataSourcesPagesWithContext)

	case "DescribeDataSourcesWithContext":
		return m.Fake(d.fakeDescribeDataSourcesWithContext)

	case "DescribeEvaluationsPages":
		return m.Fake(d.fakeDescribeEvaluationsPages)

	case "DescribeEvaluationsPagesWithContext":
		return m.Fake(d.fakeDescribeEvaluationsPagesWithContext)

	case "DescribeEvaluationsWithContext":
		return m.Fake(d.fakeDescribeEvaluationsWithContext)

	case "DescribeMLModelsPages":
		return m.Fake(d.fakeDescribeMLModelsPages)

	case "DescribeMLModelsPagesWithContext":
		return m.Fake(d.fakeDescribeMLModelsPagesWithContext)

	case "DescribeMLModelsWithContext":
		return m.Fake(d.fakeDescribeMLModelsWithContext)

	case "DescribeTagsWithContext":
		return m.Fake(d.fakeDescribeTagsWithContext)

	case "GetBatchPredictionWithContext":
		return m.Fake(d.fakeGetBatchPredictionWithContext)

	case "GetDataSourceWithContext":
		return m.Fake(d.fakeGetDataSourceWithContext)

	case "GetEvaluationWithContext":
		return m.Fake(d.fakeGetEvaluationWithContext)

	case "GetMLModelWithContext":
		return m.Fake(d.fakeGetMLModelWithContext)

	case "PredictWithContext":
		return m.Fake(d.fakePredictWithContext)

	case "UpdateBatchPredictionWithContext":
		return m.Fake(d.fakeUpdateBatchPredictionWithContext)

	case "UpdateDataSourceWithContext":
		return m.Fake(d.fakeUpdateDataSourceWithContext)

	case "UpdateEvaluationWithContext":
		return m.Fake(d.fakeUpdateEvaluationWithContext)

	case "UpdateMLModelWithContext":
		return m.Fake(d.fakeUpdateMLModelWithContext)

	case "WaitUntilBatchPredictionAvailable":
		return m.Fake(d.fakeWaitUntilBatchPredictionAvailable)

	case "WaitUntilBatchPredictionAvailableWithContext":
		return m.Fake(d.fakeWaitUntilBatchPredictionAvailableWithContext)

	case "WaitUntilDataSourceAvailable":
		return m.Fake(d.fakeWaitUntilDataSourceAvailable)

	case "WaitUntilDataSourceAvailableWithContext":
		return m.Fake(d.fakeWaitUntilDataSourceAvailableWithContext)

	case "WaitUntilEvaluationAvailable":
		return m.Fake(d.fakeWaitUntilEvaluationAvailable)

	case "WaitUntilEvaluationAvailableWithContext":
		return m.Fake(d.fakeWaitUntilEvaluationAvailableWithContext)

	case "WaitUntilMLModelAvailable":
		return m.Fake(d.fakeWaitUntilMLModelAvailable)

	case "WaitUntilMLModelAvailableWithContext":
		return m.Fake(d.fakeWaitUntilMLModelAvailableWithContext)

	default:
		return nil
	}
}

func (d *MachineLearningDouble) AddTags(i0 *machinelearning.AddTagsInput) (r0 *machinelearning.AddTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTags", i0)
	r0, _ = returns[0].(*machinelearning.AddTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) AddTagsRequest(i0 *machinelearning.AddTagsInput) (r0 *request.Request, r1 *machinelearning.AddTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*machinelearning.AddTagsOutput)
	return
}

func (d *MachineLearningDouble) AddTagsWithContext(i0 context.Context, i1 *machinelearning.AddTagsInput, i2 ...request.Option) (r0 *machinelearning.AddTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*machinelearning.AddTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) fakeAddTagsWithContext(ctx context.Context, in *machinelearning.AddTagsInput, _ ...request.Option) (*machinelearning.AddTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddTags cancelled", ctx.Err())
	default:
		return d.AddTags(in)
	}
}

func (d *MachineLearningDouble) CreateBatchPrediction(i0 *machinelearning.CreateBatchPredictionInput) (r0 *machinelearning.CreateBatchPredictionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBatchPrediction", i0)
	r0, _ = returns[0].(*machinelearning.CreateBatchPredictionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) CreateBatchPredictionRequest(i0 *machinelearning.CreateBatchPredictionInput) (r0 *request.Request, r1 *machinelearning.CreateBatchPredictionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBatchPredictionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*machinelearning.CreateBatchPredictionOutput)
	return
}

func (d *MachineLearningDouble) CreateBatchPredictionWithContext(i0 context.Context, i1 *machinelearning.CreateBatchPredictionInput, i2 ...request.Option) (r0 *machinelearning.CreateBatchPredictionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBatchPredictionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*machinelearning.CreateBatchPredictionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) fakeCreateBatchPredictionWithContext(ctx context.Context, in *machinelearning.CreateBatchPredictionInput, _ ...request.Option) (*machinelearning.CreateBatchPredictionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateBatchPrediction cancelled", ctx.Err())
	default:
		return d.CreateBatchPrediction(in)
	}
}

func (d *MachineLearningDouble) CreateDataSourceFromRDS(i0 *machinelearning.CreateDataSourceFromRDSInput) (r0 *machinelearning.CreateDataSourceFromRDSOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDataSourceFromRDS", i0)
	r0, _ = returns[0].(*machinelearning.CreateDataSourceFromRDSOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) CreateDataSourceFromRDSRequest(i0 *machinelearning.CreateDataSourceFromRDSInput) (r0 *request.Request, r1 *machinelearning.CreateDataSourceFromRDSOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDataSourceFromRDSRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*machinelearning.CreateDataSourceFromRDSOutput)
	return
}

func (d *MachineLearningDouble) CreateDataSourceFromRDSWithContext(i0 context.Context, i1 *machinelearning.CreateDataSourceFromRDSInput, i2 ...request.Option) (r0 *machinelearning.CreateDataSourceFromRDSOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDataSourceFromRDSWithContext", i0, i1, i2)
	r0, _ = returns[0].(*machinelearning.CreateDataSourceFromRDSOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) fakeCreateDataSourceFromRDSWithContext(ctx context.Context, in *machinelearning.CreateDataSourceFromRDSInput, _ ...request.Option) (*machinelearning.CreateDataSourceFromRDSOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDataSourceFromRDS cancelled", ctx.Err())
	default:
		return d.CreateDataSourceFromRDS(in)
	}
}

func (d *MachineLearningDouble) CreateDataSourceFromRedshift(i0 *machinelearning.CreateDataSourceFromRedshiftInput) (r0 *machinelearning.CreateDataSourceFromRedshiftOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDataSourceFromRedshift", i0)
	r0, _ = returns[0].(*machinelearning.CreateDataSourceFromRedshiftOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) CreateDataSourceFromRedshiftRequest(i0 *machinelearning.CreateDataSourceFromRedshiftInput) (r0 *request.Request, r1 *machinelearning.CreateDataSourceFromRedshiftOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDataSourceFromRedshiftRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*machinelearning.CreateDataSourceFromRedshiftOutput)
	return
}

func (d *MachineLearningDouble) CreateDataSourceFromRedshiftWithContext(i0 context.Context, i1 *machinelearning.CreateDataSourceFromRedshiftInput, i2 ...request.Option) (r0 *machinelearning.CreateDataSourceFromRedshiftOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDataSourceFromRedshiftWithContext", i0, i1, i2)
	r0, _ = returns[0].(*machinelearning.CreateDataSourceFromRedshiftOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) fakeCreateDataSourceFromRedshiftWithContext(ctx context.Context, in *machinelearning.CreateDataSourceFromRedshiftInput, _ ...request.Option) (*machinelearning.CreateDataSourceFromRedshiftOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDataSourceFromRedshift cancelled", ctx.Err())
	default:
		return d.CreateDataSourceFromRedshift(in)
	}
}

func (d *MachineLearningDouble) CreateDataSourceFromS3(i0 *machinelearning.CreateDataSourceFromS3Input) (r0 *machinelearning.CreateDataSourceFromS3Output, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDataSourceFromS3", i0)
	r0, _ = returns[0].(*machinelearning.CreateDataSourceFromS3Output)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) CreateDataSourceFromS3Request(i0 *machinelearning.CreateDataSourceFromS3Input) (r0 *request.Request, r1 *machinelearning.CreateDataSourceFromS3Output) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDataSourceFromS3Request", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*machinelearning.CreateDataSourceFromS3Output)
	return
}

func (d *MachineLearningDouble) CreateDataSourceFromS3WithContext(i0 context.Context, i1 *machinelearning.CreateDataSourceFromS3Input, i2 ...request.Option) (r0 *machinelearning.CreateDataSourceFromS3Output, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDataSourceFromS3WithContext", i0, i1, i2)
	r0, _ = returns[0].(*machinelearning.CreateDataSourceFromS3Output)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) fakeCreateDataSourceFromS3WithContext(ctx context.Context, in *machinelearning.CreateDataSourceFromS3Input, _ ...request.Option) (*machinelearning.CreateDataSourceFromS3Output, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDataSourceFromS3 cancelled", ctx.Err())
	default:
		return d.CreateDataSourceFromS3(in)
	}
}

func (d *MachineLearningDouble) CreateEvaluation(i0 *machinelearning.CreateEvaluationInput) (r0 *machinelearning.CreateEvaluationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEvaluation", i0)
	r0, _ = returns[0].(*machinelearning.CreateEvaluationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) CreateEvaluationRequest(i0 *machinelearning.CreateEvaluationInput) (r0 *request.Request, r1 *machinelearning.CreateEvaluationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEvaluationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*machinelearning.CreateEvaluationOutput)
	return
}

func (d *MachineLearningDouble) CreateEvaluationWithContext(i0 context.Context, i1 *machinelearning.CreateEvaluationInput, i2 ...request.Option) (r0 *machinelearning.CreateEvaluationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEvaluationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*machinelearning.CreateEvaluationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) fakeCreateEvaluationWithContext(ctx context.Context, in *machinelearning.CreateEvaluationInput, _ ...request.Option) (*machinelearning.CreateEvaluationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateEvaluation cancelled", ctx.Err())
	default:
		return d.CreateEvaluation(in)
	}
}

func (d *MachineLearningDouble) CreateMLModel(i0 *machinelearning.CreateMLModelInput) (r0 *machinelearning.CreateMLModelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMLModel", i0)
	r0, _ = returns[0].(*machinelearning.CreateMLModelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) CreateMLModelRequest(i0 *machinelearning.CreateMLModelInput) (r0 *request.Request, r1 *machinelearning.CreateMLModelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMLModelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*machinelearning.CreateMLModelOutput)
	return
}

func (d *MachineLearningDouble) CreateMLModelWithContext(i0 context.Context, i1 *machinelearning.CreateMLModelInput, i2 ...request.Option) (r0 *machinelearning.CreateMLModelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMLModelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*machinelearning.CreateMLModelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) fakeCreateMLModelWithContext(ctx context.Context, in *machinelearning.CreateMLModelInput, _ ...request.Option) (*machinelearning.CreateMLModelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateMLModel cancelled", ctx.Err())
	default:
		return d.CreateMLModel(in)
	}
}

func (d *MachineLearningDouble) CreateRealtimeEndpoint(i0 *machinelearning.CreateRealtimeEndpointInput) (r0 *machinelearning.CreateRealtimeEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRealtimeEndpoint", i0)
	r0, _ = returns[0].(*machinelearning.CreateRealtimeEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) CreateRealtimeEndpointRequest(i0 *machinelearning.CreateRealtimeEndpointInput) (r0 *request.Request, r1 *machinelearning.CreateRealtimeEndpointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRealtimeEndpointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*machinelearning.CreateRealtimeEndpointOutput)
	return
}

func (d *MachineLearningDouble) CreateRealtimeEndpointWithContext(i0 context.Context, i1 *machinelearning.CreateRealtimeEndpointInput, i2 ...request.Option) (r0 *machinelearning.CreateRealtimeEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRealtimeEndpointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*machinelearning.CreateRealtimeEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) fakeCreateRealtimeEndpointWithContext(ctx context.Context, in *machinelearning.CreateRealtimeEndpointInput, _ ...request.Option) (*machinelearning.CreateRealtimeEndpointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateRealtimeEndpoint cancelled", ctx.Err())
	default:
		return d.CreateRealtimeEndpoint(in)
	}
}

func (d *MachineLearningDouble) DeleteBatchPrediction(i0 *machinelearning.DeleteBatchPredictionInput) (r0 *machinelearning.DeleteBatchPredictionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBatchPrediction", i0)
	r0, _ = returns[0].(*machinelearning.DeleteBatchPredictionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) DeleteBatchPredictionRequest(i0 *machinelearning.DeleteBatchPredictionInput) (r0 *request.Request, r1 *machinelearning.DeleteBatchPredictionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBatchPredictionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*machinelearning.DeleteBatchPredictionOutput)
	return
}

func (d *MachineLearningDouble) DeleteBatchPredictionWithContext(i0 context.Context, i1 *machinelearning.DeleteBatchPredictionInput, i2 ...request.Option) (r0 *machinelearning.DeleteBatchPredictionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBatchPredictionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*machinelearning.DeleteBatchPredictionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) fakeDeleteBatchPredictionWithContext(ctx context.Context, in *machinelearning.DeleteBatchPredictionInput, _ ...request.Option) (*machinelearning.DeleteBatchPredictionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteBatchPrediction cancelled", ctx.Err())
	default:
		return d.DeleteBatchPrediction(in)
	}
}

func (d *MachineLearningDouble) DeleteDataSource(i0 *machinelearning.DeleteDataSourceInput) (r0 *machinelearning.DeleteDataSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDataSource", i0)
	r0, _ = returns[0].(*machinelearning.DeleteDataSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) DeleteDataSourceRequest(i0 *machinelearning.DeleteDataSourceInput) (r0 *request.Request, r1 *machinelearning.DeleteDataSourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDataSourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*machinelearning.DeleteDataSourceOutput)
	return
}

func (d *MachineLearningDouble) DeleteDataSourceWithContext(i0 context.Context, i1 *machinelearning.DeleteDataSourceInput, i2 ...request.Option) (r0 *machinelearning.DeleteDataSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDataSourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*machinelearning.DeleteDataSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) fakeDeleteDataSourceWithContext(ctx context.Context, in *machinelearning.DeleteDataSourceInput, _ ...request.Option) (*machinelearning.DeleteDataSourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDataSource cancelled", ctx.Err())
	default:
		return d.DeleteDataSource(in)
	}
}

func (d *MachineLearningDouble) DeleteEvaluation(i0 *machinelearning.DeleteEvaluationInput) (r0 *machinelearning.DeleteEvaluationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEvaluation", i0)
	r0, _ = returns[0].(*machinelearning.DeleteEvaluationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) DeleteEvaluationRequest(i0 *machinelearning.DeleteEvaluationInput) (r0 *request.Request, r1 *machinelearning.DeleteEvaluationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEvaluationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*machinelearning.DeleteEvaluationOutput)
	return
}

func (d *MachineLearningDouble) DeleteEvaluationWithContext(i0 context.Context, i1 *machinelearning.DeleteEvaluationInput, i2 ...request.Option) (r0 *machinelearning.DeleteEvaluationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEvaluationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*machinelearning.DeleteEvaluationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) fakeDeleteEvaluationWithContext(ctx context.Context, in *machinelearning.DeleteEvaluationInput, _ ...request.Option) (*machinelearning.DeleteEvaluationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteEvaluation cancelled", ctx.Err())
	default:
		return d.DeleteEvaluation(in)
	}
}

func (d *MachineLearningDouble) DeleteMLModel(i0 *machinelearning.DeleteMLModelInput) (r0 *machinelearning.DeleteMLModelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMLModel", i0)
	r0, _ = returns[0].(*machinelearning.DeleteMLModelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) DeleteMLModelRequest(i0 *machinelearning.DeleteMLModelInput) (r0 *request.Request, r1 *machinelearning.DeleteMLModelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMLModelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*machinelearning.DeleteMLModelOutput)
	return
}

func (d *MachineLearningDouble) DeleteMLModelWithContext(i0 context.Context, i1 *machinelearning.DeleteMLModelInput, i2 ...request.Option) (r0 *machinelearning.DeleteMLModelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMLModelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*machinelearning.DeleteMLModelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) fakeDeleteMLModelWithContext(ctx context.Context, in *machinelearning.DeleteMLModelInput, _ ...request.Option) (*machinelearning.DeleteMLModelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteMLModel cancelled", ctx.Err())
	default:
		return d.DeleteMLModel(in)
	}
}

func (d *MachineLearningDouble) DeleteRealtimeEndpoint(i0 *machinelearning.DeleteRealtimeEndpointInput) (r0 *machinelearning.DeleteRealtimeEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRealtimeEndpoint", i0)
	r0, _ = returns[0].(*machinelearning.DeleteRealtimeEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) DeleteRealtimeEndpointRequest(i0 *machinelearning.DeleteRealtimeEndpointInput) (r0 *request.Request, r1 *machinelearning.DeleteRealtimeEndpointOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRealtimeEndpointRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*machinelearning.DeleteRealtimeEndpointOutput)
	return
}

func (d *MachineLearningDouble) DeleteRealtimeEndpointWithContext(i0 context.Context, i1 *machinelearning.DeleteRealtimeEndpointInput, i2 ...request.Option) (r0 *machinelearning.DeleteRealtimeEndpointOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRealtimeEndpointWithContext", i0, i1, i2)
	r0, _ = returns[0].(*machinelearning.DeleteRealtimeEndpointOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) fakeDeleteRealtimeEndpointWithContext(ctx context.Context, in *machinelearning.DeleteRealtimeEndpointInput, _ ...request.Option) (*machinelearning.DeleteRealtimeEndpointOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRealtimeEndpoint cancelled", ctx.Err())
	default:
		return d.DeleteRealtimeEndpoint(in)
	}
}

func (d *MachineLearningDouble) DeleteTags(i0 *machinelearning.DeleteTagsInput) (r0 *machinelearning.DeleteTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTags", i0)
	r0, _ = returns[0].(*machinelearning.DeleteTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) DeleteTagsRequest(i0 *machinelearning.DeleteTagsInput) (r0 *request.Request, r1 *machinelearning.DeleteTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*machinelearning.DeleteTagsOutput)
	return
}

func (d *MachineLearningDouble) DeleteTagsWithContext(i0 context.Context, i1 *machinelearning.DeleteTagsInput, i2 ...request.Option) (r0 *machinelearning.DeleteTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*machinelearning.DeleteTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) fakeDeleteTagsWithContext(ctx context.Context, in *machinelearning.DeleteTagsInput, _ ...request.Option) (*machinelearning.DeleteTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTags cancelled", ctx.Err())
	default:
		return d.DeleteTags(in)
	}
}

func (d *MachineLearningDouble) DescribeBatchPredictions(i0 *machinelearning.DescribeBatchPredictionsInput) (r0 *machinelearning.DescribeBatchPredictionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBatchPredictions", i0)
	r0, _ = returns[0].(*machinelearning.DescribeBatchPredictionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) DescribeBatchPredictionsPages(i0 *machinelearning.DescribeBatchPredictionsInput, i1 func(*machinelearning.DescribeBatchPredictionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBatchPredictionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MachineLearningDouble) fakeDescribeBatchPredictionsPages(in *machinelearning.DescribeBatchPredictionsInput, pager func(*machinelearning.DescribeBatchPredictionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeBatchPredictions", paginators, in, pager)
}

func (d *MachineLearningDouble) DescribeBatchPredictionsPagesWithContext(i0 context.Context, i1 *machinelearning.DescribeBatchPredictionsInput, i2 func(*machinelearning.DescribeBatchPredictionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBatchPredictionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MachineLearningDouble) fakeDescribeBatchPredictionsPagesWithContext(ctx context.Context, in *machinelearning.DescribeBatchPredictionsInput, pager func(*machinelearning.DescribeBatchPredictionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeBatchPredictions", paginators, ctx, in, pager, options...)
}

func (d *MachineLearningDouble) DescribeBatchPredictionsRequest(i0 *machinelearning.DescribeBatchPredictionsInput) (r0 *request.Request, r1 *machinelearning.DescribeBatchPredictionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBatchPredictionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*machinelearning.DescribeBatchPredictionsOutput)
	return
}

func (d *MachineLearningDouble) DescribeBatchPredictionsWithContext(i0 context.Context, i1 *machinelearning.DescribeBatchPredictionsInput, i2 ...request.Option) (r0 *machinelearning.DescribeBatchPredictionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBatchPredictionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*machinelearning.DescribeBatchPredictionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) fakeDescribeBatchPredictionsWithContext(ctx context.Context, in *machinelearning.DescribeBatchPredictionsInput, _ ...request.Option) (*machinelearning.DescribeBatchPredictionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeBatchPredictions cancelled", ctx.Err())
	default:
		return d.DescribeBatchPredictions(in)
	}
}

func (d *MachineLearningDouble) DescribeDataSources(i0 *machinelearning.DescribeDataSourcesInput) (r0 *machinelearning.DescribeDataSourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDataSources", i0)
	r0, _ = returns[0].(*machinelearning.DescribeDataSourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) DescribeDataSourcesPages(i0 *machinelearning.DescribeDataSourcesInput, i1 func(*machinelearning.DescribeDataSourcesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDataSourcesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MachineLearningDouble) fakeDescribeDataSourcesPages(in *machinelearning.DescribeDataSourcesInput, pager func(*machinelearning.DescribeDataSourcesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeDataSources", paginators, in, pager)
}

func (d *MachineLearningDouble) DescribeDataSourcesPagesWithContext(i0 context.Context, i1 *machinelearning.DescribeDataSourcesInput, i2 func(*machinelearning.DescribeDataSourcesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDataSourcesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MachineLearningDouble) fakeDescribeDataSourcesPagesWithContext(ctx context.Context, in *machinelearning.DescribeDataSourcesInput, pager func(*machinelearning.DescribeDataSourcesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeDataSources", paginators, ctx, in, pager, options...)
}

func (d *MachineLearningDouble) DescribeDataSourcesRequest(i0 *machinelearning.DescribeDataSourcesInput) (r0 *request.Request, r1 *machinelearning.DescribeDataSourcesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDataSourcesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*machinelearning.DescribeDataSourcesOutput)
	return
}

func (d *MachineLearningDouble) DescribeDataSourcesWithContext(i0 context.Context, i1 *machinelearning.DescribeDataSourcesInput, i2 ...request.Option) (r0 *machinelearning.DescribeDataSourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDataSourcesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*machinelearning.DescribeDataSourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) fakeDescribeDataSourcesWithContext(ctx context.Context, in *machinelearning.DescribeDataSourcesInput, _ ...request.Option) (*machinelearning.DescribeDataSourcesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDataSources cancelled", ctx.Err())
	default:
		return d.DescribeDataSources(in)
	}
}

func (d *MachineLearningDouble) DescribeEvaluations(i0 *machinelearning.DescribeEvaluationsInput) (r0 *machinelearning.DescribeEvaluationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEvaluations", i0)
	r0, _ = returns[0].(*machinelearning.DescribeEvaluationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) DescribeEvaluationsPages(i0 *machinelearning.DescribeEvaluationsInput, i1 func(*machinelearning.DescribeEvaluationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEvaluationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MachineLearningDouble) fakeDescribeEvaluationsPages(in *machinelearning.DescribeEvaluationsInput, pager func(*machinelearning.DescribeEvaluationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeEvaluations", paginators, in, pager)
}

func (d *MachineLearningDouble) DescribeEvaluationsPagesWithContext(i0 context.Context, i1 *machinelearning.DescribeEvaluationsInput, i2 func(*machinelearning.DescribeEvaluationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEvaluationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MachineLearningDouble) fakeDescribeEvaluationsPagesWithContext(ctx context.Context, in *machinelearning.DescribeEvaluationsInput, pager func(*machinelearning.DescribeEvaluationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeEvaluations", paginators, ctx, in, pager, options...)
}

func (d *MachineLearningDouble) DescribeEvaluationsRequest(i0 *machinelearning.DescribeEvaluationsInput) (r0 *request.Request, r1 *machinelearning.DescribeEvaluationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEvaluationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*machinelearning.DescribeEvaluationsOutput)
	return
}

func (d *MachineLearningDouble) DescribeEvaluationsWithContext(i0 context.Context, i1 *machinelearning.DescribeEvaluationsInput, i2 ...request.Option) (r0 *machinelearning.DescribeEvaluationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEvaluationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*machinelearning.DescribeEvaluationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) fakeDescribeEvaluationsWithContext(ctx context.Context, in *machinelearning.DescribeEvaluationsInput, _ ...request.Option) (*machinelearning.DescribeEvaluationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEvaluations cancelled", ctx.Err())
	default:
		return d.DescribeEvaluations(in)
	}
}

func (d *MachineLearningDouble) DescribeMLModels(i0 *machinelearning.DescribeMLModelsInput) (r0 *machinelearning.DescribeMLModelsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMLModels", i0)
	r0, _ = returns[0].(*machinelearning.DescribeMLModelsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) DescribeMLModelsPages(i0 *machinelearning.DescribeMLModelsInput, i1 func(*machinelearning.DescribeMLModelsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMLModelsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MachineLearningDouble) fakeDescribeMLModelsPages(in *machinelearning.DescribeMLModelsInput, pager func(*machinelearning.DescribeMLModelsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeMLModels", paginators, in, pager)
}

func (d *MachineLearningDouble) DescribeMLModelsPagesWithContext(i0 context.Context, i1 *machinelearning.DescribeMLModelsInput, i2 func(*machinelearning.DescribeMLModelsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMLModelsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MachineLearningDouble) fakeDescribeMLModelsPagesWithContext(ctx context.Context, in *machinelearning.DescribeMLModelsInput, pager func(*machinelearning.DescribeMLModelsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeMLModels", paginators, ctx, in, pager, options...)
}

func (d *MachineLearningDouble) DescribeMLModelsRequest(i0 *machinelearning.DescribeMLModelsInput) (r0 *request.Request, r1 *machinelearning.DescribeMLModelsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMLModelsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*machinelearning.DescribeMLModelsOutput)
	return
}

func (d *MachineLearningDouble) DescribeMLModelsWithContext(i0 context.Context, i1 *machinelearning.DescribeMLModelsInput, i2 ...request.Option) (r0 *machinelearning.DescribeMLModelsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMLModelsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*machinelearning.DescribeMLModelsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) fakeDescribeMLModelsWithContext(ctx context.Context, in *machinelearning.DescribeMLModelsInput, _ ...request.Option) (*machinelearning.DescribeMLModelsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeMLModels cancelled", ctx.Err())
	default:
		return d.DescribeMLModels(in)
	}
}

func (d *MachineLearningDouble) DescribeTags(i0 *machinelearning.DescribeTagsInput) (r0 *machinelearning.DescribeTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTags", i0)
	r0, _ = returns[0].(*machinelearning.DescribeTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) DescribeTagsRequest(i0 *machinelearning.DescribeTagsInput) (r0 *request.Request, r1 *machinelearning.DescribeTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*machinelearning.DescribeTagsOutput)
	return
}

func (d *MachineLearningDouble) DescribeTagsWithContext(i0 context.Context, i1 *machinelearning.DescribeTagsInput, i2 ...request.Option) (r0 *machinelearning.DescribeTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*machinelearning.DescribeTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) fakeDescribeTagsWithContext(ctx context.Context, in *machinelearning.DescribeTagsInput, _ ...request.Option) (*machinelearning.DescribeTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTags cancelled", ctx.Err())
	default:
		return d.DescribeTags(in)
	}
}

func (d *MachineLearningDouble) GetBatchPrediction(i0 *machinelearning.GetBatchPredictionInput) (r0 *machinelearning.GetBatchPredictionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBatchPrediction", i0)
	r0, _ = returns[0].(*machinelearning.GetBatchPredictionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) GetBatchPredictionRequest(i0 *machinelearning.GetBatchPredictionInput) (r0 *request.Request, r1 *machinelearning.GetBatchPredictionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBatchPredictionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*machinelearning.GetBatchPredictionOutput)
	return
}

func (d *MachineLearningDouble) GetBatchPredictionWithContext(i0 context.Context, i1 *machinelearning.GetBatchPredictionInput, i2 ...request.Option) (r0 *machinelearning.GetBatchPredictionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBatchPredictionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*machinelearning.GetBatchPredictionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) fakeGetBatchPredictionWithContext(ctx context.Context, in *machinelearning.GetBatchPredictionInput, _ ...request.Option) (*machinelearning.GetBatchPredictionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBatchPrediction cancelled", ctx.Err())
	default:
		return d.GetBatchPrediction(in)
	}
}

func (d *MachineLearningDouble) GetDataSource(i0 *machinelearning.GetDataSourceInput) (r0 *machinelearning.GetDataSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDataSource", i0)
	r0, _ = returns[0].(*machinelearning.GetDataSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) GetDataSourceRequest(i0 *machinelearning.GetDataSourceInput) (r0 *request.Request, r1 *machinelearning.GetDataSourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDataSourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*machinelearning.GetDataSourceOutput)
	return
}

func (d *MachineLearningDouble) GetDataSourceWithContext(i0 context.Context, i1 *machinelearning.GetDataSourceInput, i2 ...request.Option) (r0 *machinelearning.GetDataSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDataSourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*machinelearning.GetDataSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) fakeGetDataSourceWithContext(ctx context.Context, in *machinelearning.GetDataSourceInput, _ ...request.Option) (*machinelearning.GetDataSourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDataSource cancelled", ctx.Err())
	default:
		return d.GetDataSource(in)
	}
}

func (d *MachineLearningDouble) GetEvaluation(i0 *machinelearning.GetEvaluationInput) (r0 *machinelearning.GetEvaluationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetEvaluation", i0)
	r0, _ = returns[0].(*machinelearning.GetEvaluationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) GetEvaluationRequest(i0 *machinelearning.GetEvaluationInput) (r0 *request.Request, r1 *machinelearning.GetEvaluationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetEvaluationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*machinelearning.GetEvaluationOutput)
	return
}

func (d *MachineLearningDouble) GetEvaluationWithContext(i0 context.Context, i1 *machinelearning.GetEvaluationInput, i2 ...request.Option) (r0 *machinelearning.GetEvaluationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetEvaluationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*machinelearning.GetEvaluationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) fakeGetEvaluationWithContext(ctx context.Context, in *machinelearning.GetEvaluationInput, _ ...request.Option) (*machinelearning.GetEvaluationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetEvaluation cancelled", ctx.Err())
	default:
		return d.GetEvaluation(in)
	}
}

func (d *MachineLearningDouble) GetMLModel(i0 *machinelearning.GetMLModelInput) (r0 *machinelearning.GetMLModelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMLModel", i0)
	r0, _ = returns[0].(*machinelearning.GetMLModelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) GetMLModelRequest(i0 *machinelearning.GetMLModelInput) (r0 *request.Request, r1 *machinelearning.GetMLModelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMLModelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*machinelearning.GetMLModelOutput)
	return
}

func (d *MachineLearningDouble) GetMLModelWithContext(i0 context.Context, i1 *machinelearning.GetMLModelInput, i2 ...request.Option) (r0 *machinelearning.GetMLModelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMLModelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*machinelearning.GetMLModelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) fakeGetMLModelWithContext(ctx context.Context, in *machinelearning.GetMLModelInput, _ ...request.Option) (*machinelearning.GetMLModelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetMLModel cancelled", ctx.Err())
	default:
		return d.GetMLModel(in)
	}
}

func (d *MachineLearningDouble) Predict(i0 *machinelearning.PredictInput) (r0 *machinelearning.PredictOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("Predict", i0)
	r0, _ = returns[0].(*machinelearning.PredictOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) PredictRequest(i0 *machinelearning.PredictInput) (r0 *request.Request, r1 *machinelearning.PredictOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PredictRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*machinelearning.PredictOutput)
	return
}

func (d *MachineLearningDouble) PredictWithContext(i0 context.Context, i1 *machinelearning.PredictInput, i2 ...request.Option) (r0 *machinelearning.PredictOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PredictWithContext", i0, i1, i2)
	r0, _ = returns[0].(*machinelearning.PredictOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) fakePredictWithContext(ctx context.Context, in *machinelearning.PredictInput, _ ...request.Option) (*machinelearning.PredictOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "Predict cancelled", ctx.Err())
	default:
		return d.Predict(in)
	}
}

func (d *MachineLearningDouble) UpdateBatchPrediction(i0 *machinelearning.UpdateBatchPredictionInput) (r0 *machinelearning.UpdateBatchPredictionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateBatchPrediction", i0)
	r0, _ = returns[0].(*machinelearning.UpdateBatchPredictionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) UpdateBatchPredictionRequest(i0 *machinelearning.UpdateBatchPredictionInput) (r0 *request.Request, r1 *machinelearning.UpdateBatchPredictionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateBatchPredictionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*machinelearning.UpdateBatchPredictionOutput)
	return
}

func (d *MachineLearningDouble) UpdateBatchPredictionWithContext(i0 context.Context, i1 *machinelearning.UpdateBatchPredictionInput, i2 ...request.Option) (r0 *machinelearning.UpdateBatchPredictionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateBatchPredictionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*machinelearning.UpdateBatchPredictionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) fakeUpdateBatchPredictionWithContext(ctx context.Context, in *machinelearning.UpdateBatchPredictionInput, _ ...request.Option) (*machinelearning.UpdateBatchPredictionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateBatchPrediction cancelled", ctx.Err())
	default:
		return d.UpdateBatchPrediction(in)
	}
}

func (d *MachineLearningDouble) UpdateDataSource(i0 *machinelearning.UpdateDataSourceInput) (r0 *machinelearning.UpdateDataSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDataSource", i0)
	r0, _ = returns[0].(*machinelearning.UpdateDataSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) UpdateDataSourceRequest(i0 *machinelearning.UpdateDataSourceInput) (r0 *request.Request, r1 *machinelearning.UpdateDataSourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDataSourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*machinelearning.UpdateDataSourceOutput)
	return
}

func (d *MachineLearningDouble) UpdateDataSourceWithContext(i0 context.Context, i1 *machinelearning.UpdateDataSourceInput, i2 ...request.Option) (r0 *machinelearning.UpdateDataSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDataSourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*machinelearning.UpdateDataSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) fakeUpdateDataSourceWithContext(ctx context.Context, in *machinelearning.UpdateDataSourceInput, _ ...request.Option) (*machinelearning.UpdateDataSourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDataSource cancelled", ctx.Err())
	default:
		return d.UpdateDataSource(in)
	}
}

func (d *MachineLearningDouble) UpdateEvaluation(i0 *machinelearning.UpdateEvaluationInput) (r0 *machinelearning.UpdateEvaluationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateEvaluation", i0)
	r0, _ = returns[0].(*machinelearning.UpdateEvaluationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) UpdateEvaluationRequest(i0 *machinelearning.UpdateEvaluationInput) (r0 *request.Request, r1 *machinelearning.UpdateEvaluationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateEvaluationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*machinelearning.UpdateEvaluationOutput)
	return
}

func (d *MachineLearningDouble) UpdateEvaluationWithContext(i0 context.Context, i1 *machinelearning.UpdateEvaluationInput, i2 ...request.Option) (r0 *machinelearning.UpdateEvaluationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateEvaluationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*machinelearning.UpdateEvaluationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) fakeUpdateEvaluationWithContext(ctx context.Context, in *machinelearning.UpdateEvaluationInput, _ ...request.Option) (*machinelearning.UpdateEvaluationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateEvaluation cancelled", ctx.Err())
	default:
		return d.UpdateEvaluation(in)
	}
}

func (d *MachineLearningDouble) UpdateMLModel(i0 *machinelearning.UpdateMLModelInput) (r0 *machinelearning.UpdateMLModelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMLModel", i0)
	r0, _ = returns[0].(*machinelearning.UpdateMLModelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) UpdateMLModelRequest(i0 *machinelearning.UpdateMLModelInput) (r0 *request.Request, r1 *machinelearning.UpdateMLModelOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMLModelRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*machinelearning.UpdateMLModelOutput)
	return
}

func (d *MachineLearningDouble) UpdateMLModelWithContext(i0 context.Context, i1 *machinelearning.UpdateMLModelInput, i2 ...request.Option) (r0 *machinelearning.UpdateMLModelOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMLModelWithContext", i0, i1, i2)
	r0, _ = returns[0].(*machinelearning.UpdateMLModelOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MachineLearningDouble) fakeUpdateMLModelWithContext(ctx context.Context, in *machinelearning.UpdateMLModelInput, _ ...request.Option) (*machinelearning.UpdateMLModelOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateMLModel cancelled", ctx.Err())
	default:
		return d.UpdateMLModel(in)
	}
}

func (d *MachineLearningDouble) WaitUntilBatchPredictionAvailable(i0 *machinelearning.DescribeBatchPredictionsInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilBatchPredictionAvailable", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *MachineLearningDouble) fakeWaitUntilBatchPredictionAvailable(in *machinelearning.DescribeBatchPredictionsInput) error {
	return d.WaitUntil("BatchPredictionAvailable", waiters, in)
}

func (d *MachineLearningDouble) WaitUntilBatchPredictionAvailableWithContext(i0 context.Context, i1 *machinelearning.DescribeBatchPredictionsInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilBatchPredictionAvailableWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *MachineLearningDouble) fakeWaitUntilBatchPredictionAvailableWithContext(ctx context.Context, in *machinelearning.DescribeBatchPredictionsInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("BatchPredictionAvailable", waiters, ctx, in, waitOption...)
}

func (d *MachineLearningDouble) WaitUntilDataSourceAvailable(i0 *machinelearning.DescribeDataSourcesInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilDataSourceAvailable", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *MachineLearningDouble) fakeWaitUntilDataSourceAvailable(in *machinelearning.DescribeDataSourcesInput) error {
	return d.WaitUntil("DataSourceAvailable", waiters, in)
}

func (d *MachineLearningDouble) WaitUntilDataSourceAvailableWithContext(i0 context.Context, i1 *machinelearning.DescribeDataSourcesInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilDataSourceAvailableWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *MachineLearningDouble) fakeWaitUntilDataSourceAvailableWithContext(ctx context.Context, in *machinelearning.DescribeDataSourcesInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("DataSourceAvailable", waiters, ctx, in, waitOption...)
}

func (d *MachineLearningDouble) WaitUntilEvaluationAvailable(i0 *machinelearning.DescribeEvaluationsInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilEvaluationAvailable", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *MachineLearningDouble) fakeWaitUntilEvaluationAvailable(in *machinelearning.DescribeEvaluationsInput) error {
	return d.WaitUntil("EvaluationAvailable", waiters, in)
}

func (d *MachineLearningDouble) WaitUntilEvaluationAvailableWithContext(i0 context.Context, i1 *machinelearning.DescribeEvaluationsInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilEvaluationAvailableWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *MachineLearningDouble) fakeWaitUntilEvaluationAvailableWithContext(ctx context.Context, in *machinelearning.DescribeEvaluationsInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("EvaluationAvailable", waiters, ctx, in, waitOption...)
}

func (d *MachineLearningDouble) WaitUntilMLModelAvailable(i0 *machinelearning.DescribeMLModelsInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilMLModelAvailable", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *MachineLearningDouble) fakeWaitUntilMLModelAvailable(in *machinelearning.DescribeMLModelsInput) error {
	return d.WaitUntil("MLModelAvailable", waiters, in)
}

func (d *MachineLearningDouble) WaitUntilMLModelAvailableWithContext(i0 context.Context, i1 *machinelearning.DescribeMLModelsInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilMLModelAvailableWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *MachineLearningDouble) fakeWaitUntilMLModelAvailableWithContext(ctx context.Context, in *machinelearning.DescribeMLModelsInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("MLModelAvailable", waiters, ctx, in, waitOption...)
}
