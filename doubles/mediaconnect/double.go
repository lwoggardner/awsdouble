// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:13:51+11:00

// Package mediaconnectdouble provides a TestDouble implementation of mediaconnectiface.MediaConnectAPI
package mediaconnectdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/mediaconnect"
	"github.com/aws/aws-sdk-go/service/mediaconnect/mediaconnectiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// MediaConnectDouble is TestDouble for mediaconnectiface.MediaConnectAPI
type MediaConnectDouble struct {
	mediaconnectiface.MediaConnectAPI
	*awsdouble.AWSTestDouble
}

// Constructor for MediaConnectDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *MediaConnectDouble {
	result := &MediaConnectDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*mediaconnectiface.MediaConnectAPI)(nil), configurators...)
	return result
}

func (d *MediaConnectDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *MediaConnectDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AddFlowOutputsWithContext":
		return m.Fake(d.fakeAddFlowOutputsWithContext)

	case "CreateFlowWithContext":
		return m.Fake(d.fakeCreateFlowWithContext)

	case "DeleteFlowWithContext":
		return m.Fake(d.fakeDeleteFlowWithContext)

	case "DescribeFlowWithContext":
		return m.Fake(d.fakeDescribeFlowWithContext)

	case "GrantFlowEntitlementsWithContext":
		return m.Fake(d.fakeGrantFlowEntitlementsWithContext)

	case "ListEntitlementsPages":
		return m.Fake(d.fakeListEntitlementsPages)

	case "ListEntitlementsPagesWithContext":
		return m.Fake(d.fakeListEntitlementsPagesWithContext)

	case "ListEntitlementsWithContext":
		return m.Fake(d.fakeListEntitlementsWithContext)

	case "ListFlowsPages":
		return m.Fake(d.fakeListFlowsPages)

	case "ListFlowsPagesWithContext":
		return m.Fake(d.fakeListFlowsPagesWithContext)

	case "ListFlowsWithContext":
		return m.Fake(d.fakeListFlowsWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "RemoveFlowOutputWithContext":
		return m.Fake(d.fakeRemoveFlowOutputWithContext)

	case "RevokeFlowEntitlementWithContext":
		return m.Fake(d.fakeRevokeFlowEntitlementWithContext)

	case "StartFlowWithContext":
		return m.Fake(d.fakeStartFlowWithContext)

	case "StopFlowWithContext":
		return m.Fake(d.fakeStopFlowWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateFlowEntitlementWithContext":
		return m.Fake(d.fakeUpdateFlowEntitlementWithContext)

	case "UpdateFlowOutputWithContext":
		return m.Fake(d.fakeUpdateFlowOutputWithContext)

	case "UpdateFlowSourceWithContext":
		return m.Fake(d.fakeUpdateFlowSourceWithContext)

	default:
		return nil
	}
}

func (d *MediaConnectDouble) AddFlowOutputs(i0 *mediaconnect.AddFlowOutputsInput) (r0 *mediaconnect.AddFlowOutputsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddFlowOutputs", i0)
	r0, _ = returns[0].(*mediaconnect.AddFlowOutputsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConnectDouble) AddFlowOutputsRequest(i0 *mediaconnect.AddFlowOutputsInput) (r0 *request.Request, r1 *mediaconnect.AddFlowOutputsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddFlowOutputsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconnect.AddFlowOutputsOutput)
	return
}

func (d *MediaConnectDouble) AddFlowOutputsWithContext(i0 context.Context, i1 *mediaconnect.AddFlowOutputsInput, i2 ...request.Option) (r0 *mediaconnect.AddFlowOutputsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddFlowOutputsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconnect.AddFlowOutputsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConnectDouble) fakeAddFlowOutputsWithContext(ctx context.Context, in *mediaconnect.AddFlowOutputsInput, _ ...request.Option) (*mediaconnect.AddFlowOutputsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddFlowOutputs cancelled", ctx.Err())
	default:
		return d.AddFlowOutputs(in)
	}
}

func (d *MediaConnectDouble) CreateFlow(i0 *mediaconnect.CreateFlowInput) (r0 *mediaconnect.CreateFlowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFlow", i0)
	r0, _ = returns[0].(*mediaconnect.CreateFlowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConnectDouble) CreateFlowRequest(i0 *mediaconnect.CreateFlowInput) (r0 *request.Request, r1 *mediaconnect.CreateFlowOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFlowRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconnect.CreateFlowOutput)
	return
}

func (d *MediaConnectDouble) CreateFlowWithContext(i0 context.Context, i1 *mediaconnect.CreateFlowInput, i2 ...request.Option) (r0 *mediaconnect.CreateFlowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFlowWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconnect.CreateFlowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConnectDouble) fakeCreateFlowWithContext(ctx context.Context, in *mediaconnect.CreateFlowInput, _ ...request.Option) (*mediaconnect.CreateFlowOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateFlow cancelled", ctx.Err())
	default:
		return d.CreateFlow(in)
	}
}

func (d *MediaConnectDouble) DeleteFlow(i0 *mediaconnect.DeleteFlowInput) (r0 *mediaconnect.DeleteFlowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFlow", i0)
	r0, _ = returns[0].(*mediaconnect.DeleteFlowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConnectDouble) DeleteFlowRequest(i0 *mediaconnect.DeleteFlowInput) (r0 *request.Request, r1 *mediaconnect.DeleteFlowOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFlowRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconnect.DeleteFlowOutput)
	return
}

func (d *MediaConnectDouble) DeleteFlowWithContext(i0 context.Context, i1 *mediaconnect.DeleteFlowInput, i2 ...request.Option) (r0 *mediaconnect.DeleteFlowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFlowWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconnect.DeleteFlowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConnectDouble) fakeDeleteFlowWithContext(ctx context.Context, in *mediaconnect.DeleteFlowInput, _ ...request.Option) (*mediaconnect.DeleteFlowOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteFlow cancelled", ctx.Err())
	default:
		return d.DeleteFlow(in)
	}
}

func (d *MediaConnectDouble) DescribeFlow(i0 *mediaconnect.DescribeFlowInput) (r0 *mediaconnect.DescribeFlowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFlow", i0)
	r0, _ = returns[0].(*mediaconnect.DescribeFlowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConnectDouble) DescribeFlowRequest(i0 *mediaconnect.DescribeFlowInput) (r0 *request.Request, r1 *mediaconnect.DescribeFlowOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFlowRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconnect.DescribeFlowOutput)
	return
}

func (d *MediaConnectDouble) DescribeFlowWithContext(i0 context.Context, i1 *mediaconnect.DescribeFlowInput, i2 ...request.Option) (r0 *mediaconnect.DescribeFlowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFlowWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconnect.DescribeFlowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConnectDouble) fakeDescribeFlowWithContext(ctx context.Context, in *mediaconnect.DescribeFlowInput, _ ...request.Option) (*mediaconnect.DescribeFlowOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeFlow cancelled", ctx.Err())
	default:
		return d.DescribeFlow(in)
	}
}

func (d *MediaConnectDouble) GrantFlowEntitlements(i0 *mediaconnect.GrantFlowEntitlementsInput) (r0 *mediaconnect.GrantFlowEntitlementsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GrantFlowEntitlements", i0)
	r0, _ = returns[0].(*mediaconnect.GrantFlowEntitlementsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConnectDouble) GrantFlowEntitlementsRequest(i0 *mediaconnect.GrantFlowEntitlementsInput) (r0 *request.Request, r1 *mediaconnect.GrantFlowEntitlementsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GrantFlowEntitlementsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconnect.GrantFlowEntitlementsOutput)
	return
}

func (d *MediaConnectDouble) GrantFlowEntitlementsWithContext(i0 context.Context, i1 *mediaconnect.GrantFlowEntitlementsInput, i2 ...request.Option) (r0 *mediaconnect.GrantFlowEntitlementsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GrantFlowEntitlementsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconnect.GrantFlowEntitlementsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConnectDouble) fakeGrantFlowEntitlementsWithContext(ctx context.Context, in *mediaconnect.GrantFlowEntitlementsInput, _ ...request.Option) (*mediaconnect.GrantFlowEntitlementsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GrantFlowEntitlements cancelled", ctx.Err())
	default:
		return d.GrantFlowEntitlements(in)
	}
}

func (d *MediaConnectDouble) ListEntitlements(i0 *mediaconnect.ListEntitlementsInput) (r0 *mediaconnect.ListEntitlementsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEntitlements", i0)
	r0, _ = returns[0].(*mediaconnect.ListEntitlementsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConnectDouble) ListEntitlementsPages(i0 *mediaconnect.ListEntitlementsInput, i1 func(*mediaconnect.ListEntitlementsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEntitlementsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaConnectDouble) fakeListEntitlementsPages(in *mediaconnect.ListEntitlementsInput, pager func(*mediaconnect.ListEntitlementsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListEntitlements", paginators, in, pager)
}

func (d *MediaConnectDouble) ListEntitlementsPagesWithContext(i0 context.Context, i1 *mediaconnect.ListEntitlementsInput, i2 func(*mediaconnect.ListEntitlementsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEntitlementsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaConnectDouble) fakeListEntitlementsPagesWithContext(ctx context.Context, in *mediaconnect.ListEntitlementsInput, pager func(*mediaconnect.ListEntitlementsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListEntitlements", paginators, ctx, in, pager, options...)
}

func (d *MediaConnectDouble) ListEntitlementsRequest(i0 *mediaconnect.ListEntitlementsInput) (r0 *request.Request, r1 *mediaconnect.ListEntitlementsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEntitlementsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconnect.ListEntitlementsOutput)
	return
}

func (d *MediaConnectDouble) ListEntitlementsWithContext(i0 context.Context, i1 *mediaconnect.ListEntitlementsInput, i2 ...request.Option) (r0 *mediaconnect.ListEntitlementsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEntitlementsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconnect.ListEntitlementsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConnectDouble) fakeListEntitlementsWithContext(ctx context.Context, in *mediaconnect.ListEntitlementsInput, _ ...request.Option) (*mediaconnect.ListEntitlementsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListEntitlements cancelled", ctx.Err())
	default:
		return d.ListEntitlements(in)
	}
}

func (d *MediaConnectDouble) ListFlows(i0 *mediaconnect.ListFlowsInput) (r0 *mediaconnect.ListFlowsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFlows", i0)
	r0, _ = returns[0].(*mediaconnect.ListFlowsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConnectDouble) ListFlowsPages(i0 *mediaconnect.ListFlowsInput, i1 func(*mediaconnect.ListFlowsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFlowsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaConnectDouble) fakeListFlowsPages(in *mediaconnect.ListFlowsInput, pager func(*mediaconnect.ListFlowsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListFlows", paginators, in, pager)
}

func (d *MediaConnectDouble) ListFlowsPagesWithContext(i0 context.Context, i1 *mediaconnect.ListFlowsInput, i2 func(*mediaconnect.ListFlowsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFlowsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *MediaConnectDouble) fakeListFlowsPagesWithContext(ctx context.Context, in *mediaconnect.ListFlowsInput, pager func(*mediaconnect.ListFlowsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListFlows", paginators, ctx, in, pager, options...)
}

func (d *MediaConnectDouble) ListFlowsRequest(i0 *mediaconnect.ListFlowsInput) (r0 *request.Request, r1 *mediaconnect.ListFlowsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFlowsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconnect.ListFlowsOutput)
	return
}

func (d *MediaConnectDouble) ListFlowsWithContext(i0 context.Context, i1 *mediaconnect.ListFlowsInput, i2 ...request.Option) (r0 *mediaconnect.ListFlowsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFlowsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconnect.ListFlowsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConnectDouble) fakeListFlowsWithContext(ctx context.Context, in *mediaconnect.ListFlowsInput, _ ...request.Option) (*mediaconnect.ListFlowsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListFlows cancelled", ctx.Err())
	default:
		return d.ListFlows(in)
	}
}

func (d *MediaConnectDouble) ListTagsForResource(i0 *mediaconnect.ListTagsForResourceInput) (r0 *mediaconnect.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*mediaconnect.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConnectDouble) ListTagsForResourceRequest(i0 *mediaconnect.ListTagsForResourceInput) (r0 *request.Request, r1 *mediaconnect.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconnect.ListTagsForResourceOutput)
	return
}

func (d *MediaConnectDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *mediaconnect.ListTagsForResourceInput, i2 ...request.Option) (r0 *mediaconnect.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconnect.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConnectDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *mediaconnect.ListTagsForResourceInput, _ ...request.Option) (*mediaconnect.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *MediaConnectDouble) RemoveFlowOutput(i0 *mediaconnect.RemoveFlowOutputInput) (r0 *mediaconnect.RemoveFlowOutputOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveFlowOutput", i0)
	r0, _ = returns[0].(*mediaconnect.RemoveFlowOutputOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConnectDouble) RemoveFlowOutputRequest(i0 *mediaconnect.RemoveFlowOutputInput) (r0 *request.Request, r1 *mediaconnect.RemoveFlowOutputOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveFlowOutputRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconnect.RemoveFlowOutputOutput)
	return
}

func (d *MediaConnectDouble) RemoveFlowOutputWithContext(i0 context.Context, i1 *mediaconnect.RemoveFlowOutputInput, i2 ...request.Option) (r0 *mediaconnect.RemoveFlowOutputOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveFlowOutputWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconnect.RemoveFlowOutputOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConnectDouble) fakeRemoveFlowOutputWithContext(ctx context.Context, in *mediaconnect.RemoveFlowOutputInput, _ ...request.Option) (*mediaconnect.RemoveFlowOutputOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveFlowOutput cancelled", ctx.Err())
	default:
		return d.RemoveFlowOutput(in)
	}
}

func (d *MediaConnectDouble) RevokeFlowEntitlement(i0 *mediaconnect.RevokeFlowEntitlementInput) (r0 *mediaconnect.RevokeFlowEntitlementOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeFlowEntitlement", i0)
	r0, _ = returns[0].(*mediaconnect.RevokeFlowEntitlementOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConnectDouble) RevokeFlowEntitlementRequest(i0 *mediaconnect.RevokeFlowEntitlementInput) (r0 *request.Request, r1 *mediaconnect.RevokeFlowEntitlementOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeFlowEntitlementRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconnect.RevokeFlowEntitlementOutput)
	return
}

func (d *MediaConnectDouble) RevokeFlowEntitlementWithContext(i0 context.Context, i1 *mediaconnect.RevokeFlowEntitlementInput, i2 ...request.Option) (r0 *mediaconnect.RevokeFlowEntitlementOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeFlowEntitlementWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconnect.RevokeFlowEntitlementOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConnectDouble) fakeRevokeFlowEntitlementWithContext(ctx context.Context, in *mediaconnect.RevokeFlowEntitlementInput, _ ...request.Option) (*mediaconnect.RevokeFlowEntitlementOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RevokeFlowEntitlement cancelled", ctx.Err())
	default:
		return d.RevokeFlowEntitlement(in)
	}
}

func (d *MediaConnectDouble) StartFlow(i0 *mediaconnect.StartFlowInput) (r0 *mediaconnect.StartFlowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartFlow", i0)
	r0, _ = returns[0].(*mediaconnect.StartFlowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConnectDouble) StartFlowRequest(i0 *mediaconnect.StartFlowInput) (r0 *request.Request, r1 *mediaconnect.StartFlowOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartFlowRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconnect.StartFlowOutput)
	return
}

func (d *MediaConnectDouble) StartFlowWithContext(i0 context.Context, i1 *mediaconnect.StartFlowInput, i2 ...request.Option) (r0 *mediaconnect.StartFlowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartFlowWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconnect.StartFlowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConnectDouble) fakeStartFlowWithContext(ctx context.Context, in *mediaconnect.StartFlowInput, _ ...request.Option) (*mediaconnect.StartFlowOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartFlow cancelled", ctx.Err())
	default:
		return d.StartFlow(in)
	}
}

func (d *MediaConnectDouble) StopFlow(i0 *mediaconnect.StopFlowInput) (r0 *mediaconnect.StopFlowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopFlow", i0)
	r0, _ = returns[0].(*mediaconnect.StopFlowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConnectDouble) StopFlowRequest(i0 *mediaconnect.StopFlowInput) (r0 *request.Request, r1 *mediaconnect.StopFlowOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopFlowRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconnect.StopFlowOutput)
	return
}

func (d *MediaConnectDouble) StopFlowWithContext(i0 context.Context, i1 *mediaconnect.StopFlowInput, i2 ...request.Option) (r0 *mediaconnect.StopFlowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopFlowWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconnect.StopFlowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConnectDouble) fakeStopFlowWithContext(ctx context.Context, in *mediaconnect.StopFlowInput, _ ...request.Option) (*mediaconnect.StopFlowOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopFlow cancelled", ctx.Err())
	default:
		return d.StopFlow(in)
	}
}

func (d *MediaConnectDouble) TagResource(i0 *mediaconnect.TagResourceInput) (r0 *mediaconnect.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*mediaconnect.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConnectDouble) TagResourceRequest(i0 *mediaconnect.TagResourceInput) (r0 *request.Request, r1 *mediaconnect.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconnect.TagResourceOutput)
	return
}

func (d *MediaConnectDouble) TagResourceWithContext(i0 context.Context, i1 *mediaconnect.TagResourceInput, i2 ...request.Option) (r0 *mediaconnect.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconnect.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConnectDouble) fakeTagResourceWithContext(ctx context.Context, in *mediaconnect.TagResourceInput, _ ...request.Option) (*mediaconnect.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *MediaConnectDouble) UntagResource(i0 *mediaconnect.UntagResourceInput) (r0 *mediaconnect.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*mediaconnect.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConnectDouble) UntagResourceRequest(i0 *mediaconnect.UntagResourceInput) (r0 *request.Request, r1 *mediaconnect.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconnect.UntagResourceOutput)
	return
}

func (d *MediaConnectDouble) UntagResourceWithContext(i0 context.Context, i1 *mediaconnect.UntagResourceInput, i2 ...request.Option) (r0 *mediaconnect.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconnect.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConnectDouble) fakeUntagResourceWithContext(ctx context.Context, in *mediaconnect.UntagResourceInput, _ ...request.Option) (*mediaconnect.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *MediaConnectDouble) UpdateFlowEntitlement(i0 *mediaconnect.UpdateFlowEntitlementInput) (r0 *mediaconnect.UpdateFlowEntitlementOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFlowEntitlement", i0)
	r0, _ = returns[0].(*mediaconnect.UpdateFlowEntitlementOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConnectDouble) UpdateFlowEntitlementRequest(i0 *mediaconnect.UpdateFlowEntitlementInput) (r0 *request.Request, r1 *mediaconnect.UpdateFlowEntitlementOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFlowEntitlementRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconnect.UpdateFlowEntitlementOutput)
	return
}

func (d *MediaConnectDouble) UpdateFlowEntitlementWithContext(i0 context.Context, i1 *mediaconnect.UpdateFlowEntitlementInput, i2 ...request.Option) (r0 *mediaconnect.UpdateFlowEntitlementOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFlowEntitlementWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconnect.UpdateFlowEntitlementOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConnectDouble) fakeUpdateFlowEntitlementWithContext(ctx context.Context, in *mediaconnect.UpdateFlowEntitlementInput, _ ...request.Option) (*mediaconnect.UpdateFlowEntitlementOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateFlowEntitlement cancelled", ctx.Err())
	default:
		return d.UpdateFlowEntitlement(in)
	}
}

func (d *MediaConnectDouble) UpdateFlowOutput(i0 *mediaconnect.UpdateFlowOutputInput) (r0 *mediaconnect.UpdateFlowOutputOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFlowOutput", i0)
	r0, _ = returns[0].(*mediaconnect.UpdateFlowOutputOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConnectDouble) UpdateFlowOutputRequest(i0 *mediaconnect.UpdateFlowOutputInput) (r0 *request.Request, r1 *mediaconnect.UpdateFlowOutputOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFlowOutputRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconnect.UpdateFlowOutputOutput)
	return
}

func (d *MediaConnectDouble) UpdateFlowOutputWithContext(i0 context.Context, i1 *mediaconnect.UpdateFlowOutputInput, i2 ...request.Option) (r0 *mediaconnect.UpdateFlowOutputOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFlowOutputWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconnect.UpdateFlowOutputOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConnectDouble) fakeUpdateFlowOutputWithContext(ctx context.Context, in *mediaconnect.UpdateFlowOutputInput, _ ...request.Option) (*mediaconnect.UpdateFlowOutputOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateFlowOutput cancelled", ctx.Err())
	default:
		return d.UpdateFlowOutput(in)
	}
}

func (d *MediaConnectDouble) UpdateFlowSource(i0 *mediaconnect.UpdateFlowSourceInput) (r0 *mediaconnect.UpdateFlowSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFlowSource", i0)
	r0, _ = returns[0].(*mediaconnect.UpdateFlowSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConnectDouble) UpdateFlowSourceRequest(i0 *mediaconnect.UpdateFlowSourceInput) (r0 *request.Request, r1 *mediaconnect.UpdateFlowSourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFlowSourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediaconnect.UpdateFlowSourceOutput)
	return
}

func (d *MediaConnectDouble) UpdateFlowSourceWithContext(i0 context.Context, i1 *mediaconnect.UpdateFlowSourceInput, i2 ...request.Option) (r0 *mediaconnect.UpdateFlowSourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFlowSourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediaconnect.UpdateFlowSourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaConnectDouble) fakeUpdateFlowSourceWithContext(ctx context.Context, in *mediaconnect.UpdateFlowSourceInput, _ ...request.Option) (*mediaconnect.UpdateFlowSourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateFlowSource cancelled", ctx.Err())
	default:
		return d.UpdateFlowSource(in)
	}
}
