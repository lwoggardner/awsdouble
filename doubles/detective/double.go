// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:12:17+11:00

// Package detectivedouble provides a TestDouble implementation of detectiveiface.DetectiveAPI
package detectivedouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/detective"
	"github.com/aws/aws-sdk-go/service/detective/detectiveiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// DetectiveDouble is TestDouble for detectiveiface.DetectiveAPI
type DetectiveDouble struct {
	detectiveiface.DetectiveAPI
	*awsdouble.AWSTestDouble
}

// Constructor for DetectiveDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *DetectiveDouble {
	result := &DetectiveDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*detectiveiface.DetectiveAPI)(nil), configurators...)
	return result
}

func (d *DetectiveDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *DetectiveDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AcceptInvitationWithContext":
		return m.Fake(d.fakeAcceptInvitationWithContext)

	case "CreateGraphWithContext":
		return m.Fake(d.fakeCreateGraphWithContext)

	case "CreateMembersWithContext":
		return m.Fake(d.fakeCreateMembersWithContext)

	case "DeleteGraphWithContext":
		return m.Fake(d.fakeDeleteGraphWithContext)

	case "DeleteMembersWithContext":
		return m.Fake(d.fakeDeleteMembersWithContext)

	case "DisassociateMembershipWithContext":
		return m.Fake(d.fakeDisassociateMembershipWithContext)

	case "GetMembersWithContext":
		return m.Fake(d.fakeGetMembersWithContext)

	case "ListGraphsPages":
		return m.Fake(d.fakeListGraphsPages)

	case "ListGraphsPagesWithContext":
		return m.Fake(d.fakeListGraphsPagesWithContext)

	case "ListGraphsWithContext":
		return m.Fake(d.fakeListGraphsWithContext)

	case "ListInvitationsPages":
		return m.Fake(d.fakeListInvitationsPages)

	case "ListInvitationsPagesWithContext":
		return m.Fake(d.fakeListInvitationsPagesWithContext)

	case "ListInvitationsWithContext":
		return m.Fake(d.fakeListInvitationsWithContext)

	case "ListMembersPages":
		return m.Fake(d.fakeListMembersPages)

	case "ListMembersPagesWithContext":
		return m.Fake(d.fakeListMembersPagesWithContext)

	case "ListMembersWithContext":
		return m.Fake(d.fakeListMembersWithContext)

	case "RejectInvitationWithContext":
		return m.Fake(d.fakeRejectInvitationWithContext)

	default:
		return nil
	}
}

func (d *DetectiveDouble) AcceptInvitation(i0 *detective.AcceptInvitationInput) (r0 *detective.AcceptInvitationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptInvitation", i0)
	r0, _ = returns[0].(*detective.AcceptInvitationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DetectiveDouble) AcceptInvitationRequest(i0 *detective.AcceptInvitationInput) (r0 *request.Request, r1 *detective.AcceptInvitationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptInvitationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*detective.AcceptInvitationOutput)
	return
}

func (d *DetectiveDouble) AcceptInvitationWithContext(i0 context.Context, i1 *detective.AcceptInvitationInput, i2 ...request.Option) (r0 *detective.AcceptInvitationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AcceptInvitationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*detective.AcceptInvitationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DetectiveDouble) fakeAcceptInvitationWithContext(ctx context.Context, in *detective.AcceptInvitationInput, _ ...request.Option) (*detective.AcceptInvitationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AcceptInvitation cancelled", ctx.Err())
	default:
		return d.AcceptInvitation(in)
	}
}

func (d *DetectiveDouble) CreateGraph(i0 *detective.CreateGraphInput) (r0 *detective.CreateGraphOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGraph", i0)
	r0, _ = returns[0].(*detective.CreateGraphOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DetectiveDouble) CreateGraphRequest(i0 *detective.CreateGraphInput) (r0 *request.Request, r1 *detective.CreateGraphOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGraphRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*detective.CreateGraphOutput)
	return
}

func (d *DetectiveDouble) CreateGraphWithContext(i0 context.Context, i1 *detective.CreateGraphInput, i2 ...request.Option) (r0 *detective.CreateGraphOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGraphWithContext", i0, i1, i2)
	r0, _ = returns[0].(*detective.CreateGraphOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DetectiveDouble) fakeCreateGraphWithContext(ctx context.Context, in *detective.CreateGraphInput, _ ...request.Option) (*detective.CreateGraphOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateGraph cancelled", ctx.Err())
	default:
		return d.CreateGraph(in)
	}
}

func (d *DetectiveDouble) CreateMembers(i0 *detective.CreateMembersInput) (r0 *detective.CreateMembersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMembers", i0)
	r0, _ = returns[0].(*detective.CreateMembersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DetectiveDouble) CreateMembersRequest(i0 *detective.CreateMembersInput) (r0 *request.Request, r1 *detective.CreateMembersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMembersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*detective.CreateMembersOutput)
	return
}

func (d *DetectiveDouble) CreateMembersWithContext(i0 context.Context, i1 *detective.CreateMembersInput, i2 ...request.Option) (r0 *detective.CreateMembersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMembersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*detective.CreateMembersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DetectiveDouble) fakeCreateMembersWithContext(ctx context.Context, in *detective.CreateMembersInput, _ ...request.Option) (*detective.CreateMembersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateMembers cancelled", ctx.Err())
	default:
		return d.CreateMembers(in)
	}
}

func (d *DetectiveDouble) DeleteGraph(i0 *detective.DeleteGraphInput) (r0 *detective.DeleteGraphOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGraph", i0)
	r0, _ = returns[0].(*detective.DeleteGraphOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DetectiveDouble) DeleteGraphRequest(i0 *detective.DeleteGraphInput) (r0 *request.Request, r1 *detective.DeleteGraphOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGraphRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*detective.DeleteGraphOutput)
	return
}

func (d *DetectiveDouble) DeleteGraphWithContext(i0 context.Context, i1 *detective.DeleteGraphInput, i2 ...request.Option) (r0 *detective.DeleteGraphOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGraphWithContext", i0, i1, i2)
	r0, _ = returns[0].(*detective.DeleteGraphOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DetectiveDouble) fakeDeleteGraphWithContext(ctx context.Context, in *detective.DeleteGraphInput, _ ...request.Option) (*detective.DeleteGraphOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteGraph cancelled", ctx.Err())
	default:
		return d.DeleteGraph(in)
	}
}

func (d *DetectiveDouble) DeleteMembers(i0 *detective.DeleteMembersInput) (r0 *detective.DeleteMembersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMembers", i0)
	r0, _ = returns[0].(*detective.DeleteMembersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DetectiveDouble) DeleteMembersRequest(i0 *detective.DeleteMembersInput) (r0 *request.Request, r1 *detective.DeleteMembersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMembersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*detective.DeleteMembersOutput)
	return
}

func (d *DetectiveDouble) DeleteMembersWithContext(i0 context.Context, i1 *detective.DeleteMembersInput, i2 ...request.Option) (r0 *detective.DeleteMembersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMembersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*detective.DeleteMembersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DetectiveDouble) fakeDeleteMembersWithContext(ctx context.Context, in *detective.DeleteMembersInput, _ ...request.Option) (*detective.DeleteMembersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteMembers cancelled", ctx.Err())
	default:
		return d.DeleteMembers(in)
	}
}

func (d *DetectiveDouble) DisassociateMembership(i0 *detective.DisassociateMembershipInput) (r0 *detective.DisassociateMembershipOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateMembership", i0)
	r0, _ = returns[0].(*detective.DisassociateMembershipOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DetectiveDouble) DisassociateMembershipRequest(i0 *detective.DisassociateMembershipInput) (r0 *request.Request, r1 *detective.DisassociateMembershipOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateMembershipRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*detective.DisassociateMembershipOutput)
	return
}

func (d *DetectiveDouble) DisassociateMembershipWithContext(i0 context.Context, i1 *detective.DisassociateMembershipInput, i2 ...request.Option) (r0 *detective.DisassociateMembershipOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateMembershipWithContext", i0, i1, i2)
	r0, _ = returns[0].(*detective.DisassociateMembershipOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DetectiveDouble) fakeDisassociateMembershipWithContext(ctx context.Context, in *detective.DisassociateMembershipInput, _ ...request.Option) (*detective.DisassociateMembershipOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateMembership cancelled", ctx.Err())
	default:
		return d.DisassociateMembership(in)
	}
}

func (d *DetectiveDouble) GetMembers(i0 *detective.GetMembersInput) (r0 *detective.GetMembersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMembers", i0)
	r0, _ = returns[0].(*detective.GetMembersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DetectiveDouble) GetMembersRequest(i0 *detective.GetMembersInput) (r0 *request.Request, r1 *detective.GetMembersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMembersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*detective.GetMembersOutput)
	return
}

func (d *DetectiveDouble) GetMembersWithContext(i0 context.Context, i1 *detective.GetMembersInput, i2 ...request.Option) (r0 *detective.GetMembersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMembersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*detective.GetMembersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DetectiveDouble) fakeGetMembersWithContext(ctx context.Context, in *detective.GetMembersInput, _ ...request.Option) (*detective.GetMembersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetMembers cancelled", ctx.Err())
	default:
		return d.GetMembers(in)
	}
}

func (d *DetectiveDouble) ListGraphs(i0 *detective.ListGraphsInput) (r0 *detective.ListGraphsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGraphs", i0)
	r0, _ = returns[0].(*detective.ListGraphsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DetectiveDouble) ListGraphsPages(i0 *detective.ListGraphsInput, i1 func(*detective.ListGraphsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGraphsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DetectiveDouble) fakeListGraphsPages(in *detective.ListGraphsInput, pager func(*detective.ListGraphsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListGraphs", paginators, in, pager)
}

func (d *DetectiveDouble) ListGraphsPagesWithContext(i0 context.Context, i1 *detective.ListGraphsInput, i2 func(*detective.ListGraphsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGraphsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DetectiveDouble) fakeListGraphsPagesWithContext(ctx context.Context, in *detective.ListGraphsInput, pager func(*detective.ListGraphsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListGraphs", paginators, ctx, in, pager, options...)
}

func (d *DetectiveDouble) ListGraphsRequest(i0 *detective.ListGraphsInput) (r0 *request.Request, r1 *detective.ListGraphsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGraphsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*detective.ListGraphsOutput)
	return
}

func (d *DetectiveDouble) ListGraphsWithContext(i0 context.Context, i1 *detective.ListGraphsInput, i2 ...request.Option) (r0 *detective.ListGraphsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGraphsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*detective.ListGraphsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DetectiveDouble) fakeListGraphsWithContext(ctx context.Context, in *detective.ListGraphsInput, _ ...request.Option) (*detective.ListGraphsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListGraphs cancelled", ctx.Err())
	default:
		return d.ListGraphs(in)
	}
}

func (d *DetectiveDouble) ListInvitations(i0 *detective.ListInvitationsInput) (r0 *detective.ListInvitationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInvitations", i0)
	r0, _ = returns[0].(*detective.ListInvitationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DetectiveDouble) ListInvitationsPages(i0 *detective.ListInvitationsInput, i1 func(*detective.ListInvitationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInvitationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DetectiveDouble) fakeListInvitationsPages(in *detective.ListInvitationsInput, pager func(*detective.ListInvitationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListInvitations", paginators, in, pager)
}

func (d *DetectiveDouble) ListInvitationsPagesWithContext(i0 context.Context, i1 *detective.ListInvitationsInput, i2 func(*detective.ListInvitationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInvitationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DetectiveDouble) fakeListInvitationsPagesWithContext(ctx context.Context, in *detective.ListInvitationsInput, pager func(*detective.ListInvitationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListInvitations", paginators, ctx, in, pager, options...)
}

func (d *DetectiveDouble) ListInvitationsRequest(i0 *detective.ListInvitationsInput) (r0 *request.Request, r1 *detective.ListInvitationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInvitationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*detective.ListInvitationsOutput)
	return
}

func (d *DetectiveDouble) ListInvitationsWithContext(i0 context.Context, i1 *detective.ListInvitationsInput, i2 ...request.Option) (r0 *detective.ListInvitationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInvitationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*detective.ListInvitationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DetectiveDouble) fakeListInvitationsWithContext(ctx context.Context, in *detective.ListInvitationsInput, _ ...request.Option) (*detective.ListInvitationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListInvitations cancelled", ctx.Err())
	default:
		return d.ListInvitations(in)
	}
}

func (d *DetectiveDouble) ListMembers(i0 *detective.ListMembersInput) (r0 *detective.ListMembersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMembers", i0)
	r0, _ = returns[0].(*detective.ListMembersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DetectiveDouble) ListMembersPages(i0 *detective.ListMembersInput, i1 func(*detective.ListMembersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMembersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DetectiveDouble) fakeListMembersPages(in *detective.ListMembersInput, pager func(*detective.ListMembersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListMembers", paginators, in, pager)
}

func (d *DetectiveDouble) ListMembersPagesWithContext(i0 context.Context, i1 *detective.ListMembersInput, i2 func(*detective.ListMembersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMembersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DetectiveDouble) fakeListMembersPagesWithContext(ctx context.Context, in *detective.ListMembersInput, pager func(*detective.ListMembersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListMembers", paginators, ctx, in, pager, options...)
}

func (d *DetectiveDouble) ListMembersRequest(i0 *detective.ListMembersInput) (r0 *request.Request, r1 *detective.ListMembersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMembersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*detective.ListMembersOutput)
	return
}

func (d *DetectiveDouble) ListMembersWithContext(i0 context.Context, i1 *detective.ListMembersInput, i2 ...request.Option) (r0 *detective.ListMembersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListMembersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*detective.ListMembersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DetectiveDouble) fakeListMembersWithContext(ctx context.Context, in *detective.ListMembersInput, _ ...request.Option) (*detective.ListMembersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListMembers cancelled", ctx.Err())
	default:
		return d.ListMembers(in)
	}
}

func (d *DetectiveDouble) RejectInvitation(i0 *detective.RejectInvitationInput) (r0 *detective.RejectInvitationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RejectInvitation", i0)
	r0, _ = returns[0].(*detective.RejectInvitationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DetectiveDouble) RejectInvitationRequest(i0 *detective.RejectInvitationInput) (r0 *request.Request, r1 *detective.RejectInvitationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RejectInvitationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*detective.RejectInvitationOutput)
	return
}

func (d *DetectiveDouble) RejectInvitationWithContext(i0 context.Context, i1 *detective.RejectInvitationInput, i2 ...request.Option) (r0 *detective.RejectInvitationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RejectInvitationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*detective.RejectInvitationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DetectiveDouble) fakeRejectInvitationWithContext(ctx context.Context, in *detective.RejectInvitationInput, _ ...request.Option) (*detective.RejectInvitationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RejectInvitation cancelled", ctx.Err())
	default:
		return d.RejectInvitation(in)
	}
}
