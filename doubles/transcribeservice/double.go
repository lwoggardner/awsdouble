// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:15:24+11:00

// Package transcribeservicedouble provides a TestDouble implementation of transcribeserviceiface.TranscribeServiceAPI
package transcribeservicedouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/transcribeservice"
	"github.com/aws/aws-sdk-go/service/transcribeservice/transcribeserviceiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// TranscribeServiceDouble is TestDouble for transcribeserviceiface.TranscribeServiceAPI
type TranscribeServiceDouble struct {
	transcribeserviceiface.TranscribeServiceAPI
	*awsdouble.AWSTestDouble
}

// Constructor for TranscribeServiceDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *TranscribeServiceDouble {
	result := &TranscribeServiceDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*transcribeserviceiface.TranscribeServiceAPI)(nil), configurators...)
	return result
}

func (d *TranscribeServiceDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *TranscribeServiceDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CreateVocabularyFilterWithContext":
		return m.Fake(d.fakeCreateVocabularyFilterWithContext)

	case "CreateVocabularyWithContext":
		return m.Fake(d.fakeCreateVocabularyWithContext)

	case "DeleteTranscriptionJobWithContext":
		return m.Fake(d.fakeDeleteTranscriptionJobWithContext)

	case "DeleteVocabularyFilterWithContext":
		return m.Fake(d.fakeDeleteVocabularyFilterWithContext)

	case "DeleteVocabularyWithContext":
		return m.Fake(d.fakeDeleteVocabularyWithContext)

	case "GetTranscriptionJobWithContext":
		return m.Fake(d.fakeGetTranscriptionJobWithContext)

	case "GetVocabularyFilterWithContext":
		return m.Fake(d.fakeGetVocabularyFilterWithContext)

	case "GetVocabularyWithContext":
		return m.Fake(d.fakeGetVocabularyWithContext)

	case "ListTranscriptionJobsPages":
		return m.Fake(d.fakeListTranscriptionJobsPages)

	case "ListTranscriptionJobsPagesWithContext":
		return m.Fake(d.fakeListTranscriptionJobsPagesWithContext)

	case "ListTranscriptionJobsWithContext":
		return m.Fake(d.fakeListTranscriptionJobsWithContext)

	case "ListVocabulariesPages":
		return m.Fake(d.fakeListVocabulariesPages)

	case "ListVocabulariesPagesWithContext":
		return m.Fake(d.fakeListVocabulariesPagesWithContext)

	case "ListVocabulariesWithContext":
		return m.Fake(d.fakeListVocabulariesWithContext)

	case "ListVocabularyFiltersPages":
		return m.Fake(d.fakeListVocabularyFiltersPages)

	case "ListVocabularyFiltersPagesWithContext":
		return m.Fake(d.fakeListVocabularyFiltersPagesWithContext)

	case "ListVocabularyFiltersWithContext":
		return m.Fake(d.fakeListVocabularyFiltersWithContext)

	case "StartTranscriptionJobWithContext":
		return m.Fake(d.fakeStartTranscriptionJobWithContext)

	case "UpdateVocabularyFilterWithContext":
		return m.Fake(d.fakeUpdateVocabularyFilterWithContext)

	case "UpdateVocabularyWithContext":
		return m.Fake(d.fakeUpdateVocabularyWithContext)

	default:
		return nil
	}
}

func (d *TranscribeServiceDouble) CreateVocabulary(i0 *transcribeservice.CreateVocabularyInput) (r0 *transcribeservice.CreateVocabularyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVocabulary", i0)
	r0, _ = returns[0].(*transcribeservice.CreateVocabularyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranscribeServiceDouble) CreateVocabularyFilter(i0 *transcribeservice.CreateVocabularyFilterInput) (r0 *transcribeservice.CreateVocabularyFilterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVocabularyFilter", i0)
	r0, _ = returns[0].(*transcribeservice.CreateVocabularyFilterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranscribeServiceDouble) CreateVocabularyFilterRequest(i0 *transcribeservice.CreateVocabularyFilterInput) (r0 *request.Request, r1 *transcribeservice.CreateVocabularyFilterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVocabularyFilterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*transcribeservice.CreateVocabularyFilterOutput)
	return
}

func (d *TranscribeServiceDouble) CreateVocabularyFilterWithContext(i0 context.Context, i1 *transcribeservice.CreateVocabularyFilterInput, i2 ...request.Option) (r0 *transcribeservice.CreateVocabularyFilterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVocabularyFilterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*transcribeservice.CreateVocabularyFilterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranscribeServiceDouble) fakeCreateVocabularyFilterWithContext(ctx context.Context, in *transcribeservice.CreateVocabularyFilterInput, _ ...request.Option) (*transcribeservice.CreateVocabularyFilterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateVocabularyFilter cancelled", ctx.Err())
	default:
		return d.CreateVocabularyFilter(in)
	}
}

func (d *TranscribeServiceDouble) CreateVocabularyRequest(i0 *transcribeservice.CreateVocabularyInput) (r0 *request.Request, r1 *transcribeservice.CreateVocabularyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVocabularyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*transcribeservice.CreateVocabularyOutput)
	return
}

func (d *TranscribeServiceDouble) CreateVocabularyWithContext(i0 context.Context, i1 *transcribeservice.CreateVocabularyInput, i2 ...request.Option) (r0 *transcribeservice.CreateVocabularyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVocabularyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*transcribeservice.CreateVocabularyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranscribeServiceDouble) fakeCreateVocabularyWithContext(ctx context.Context, in *transcribeservice.CreateVocabularyInput, _ ...request.Option) (*transcribeservice.CreateVocabularyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateVocabulary cancelled", ctx.Err())
	default:
		return d.CreateVocabulary(in)
	}
}

func (d *TranscribeServiceDouble) DeleteTranscriptionJob(i0 *transcribeservice.DeleteTranscriptionJobInput) (r0 *transcribeservice.DeleteTranscriptionJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTranscriptionJob", i0)
	r0, _ = returns[0].(*transcribeservice.DeleteTranscriptionJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranscribeServiceDouble) DeleteTranscriptionJobRequest(i0 *transcribeservice.DeleteTranscriptionJobInput) (r0 *request.Request, r1 *transcribeservice.DeleteTranscriptionJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTranscriptionJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*transcribeservice.DeleteTranscriptionJobOutput)
	return
}

func (d *TranscribeServiceDouble) DeleteTranscriptionJobWithContext(i0 context.Context, i1 *transcribeservice.DeleteTranscriptionJobInput, i2 ...request.Option) (r0 *transcribeservice.DeleteTranscriptionJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTranscriptionJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*transcribeservice.DeleteTranscriptionJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranscribeServiceDouble) fakeDeleteTranscriptionJobWithContext(ctx context.Context, in *transcribeservice.DeleteTranscriptionJobInput, _ ...request.Option) (*transcribeservice.DeleteTranscriptionJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTranscriptionJob cancelled", ctx.Err())
	default:
		return d.DeleteTranscriptionJob(in)
	}
}

func (d *TranscribeServiceDouble) DeleteVocabulary(i0 *transcribeservice.DeleteVocabularyInput) (r0 *transcribeservice.DeleteVocabularyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVocabulary", i0)
	r0, _ = returns[0].(*transcribeservice.DeleteVocabularyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranscribeServiceDouble) DeleteVocabularyFilter(i0 *transcribeservice.DeleteVocabularyFilterInput) (r0 *transcribeservice.DeleteVocabularyFilterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVocabularyFilter", i0)
	r0, _ = returns[0].(*transcribeservice.DeleteVocabularyFilterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranscribeServiceDouble) DeleteVocabularyFilterRequest(i0 *transcribeservice.DeleteVocabularyFilterInput) (r0 *request.Request, r1 *transcribeservice.DeleteVocabularyFilterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVocabularyFilterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*transcribeservice.DeleteVocabularyFilterOutput)
	return
}

func (d *TranscribeServiceDouble) DeleteVocabularyFilterWithContext(i0 context.Context, i1 *transcribeservice.DeleteVocabularyFilterInput, i2 ...request.Option) (r0 *transcribeservice.DeleteVocabularyFilterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVocabularyFilterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*transcribeservice.DeleteVocabularyFilterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranscribeServiceDouble) fakeDeleteVocabularyFilterWithContext(ctx context.Context, in *transcribeservice.DeleteVocabularyFilterInput, _ ...request.Option) (*transcribeservice.DeleteVocabularyFilterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteVocabularyFilter cancelled", ctx.Err())
	default:
		return d.DeleteVocabularyFilter(in)
	}
}

func (d *TranscribeServiceDouble) DeleteVocabularyRequest(i0 *transcribeservice.DeleteVocabularyInput) (r0 *request.Request, r1 *transcribeservice.DeleteVocabularyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVocabularyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*transcribeservice.DeleteVocabularyOutput)
	return
}

func (d *TranscribeServiceDouble) DeleteVocabularyWithContext(i0 context.Context, i1 *transcribeservice.DeleteVocabularyInput, i2 ...request.Option) (r0 *transcribeservice.DeleteVocabularyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVocabularyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*transcribeservice.DeleteVocabularyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranscribeServiceDouble) fakeDeleteVocabularyWithContext(ctx context.Context, in *transcribeservice.DeleteVocabularyInput, _ ...request.Option) (*transcribeservice.DeleteVocabularyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteVocabulary cancelled", ctx.Err())
	default:
		return d.DeleteVocabulary(in)
	}
}

func (d *TranscribeServiceDouble) GetTranscriptionJob(i0 *transcribeservice.GetTranscriptionJobInput) (r0 *transcribeservice.GetTranscriptionJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTranscriptionJob", i0)
	r0, _ = returns[0].(*transcribeservice.GetTranscriptionJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranscribeServiceDouble) GetTranscriptionJobRequest(i0 *transcribeservice.GetTranscriptionJobInput) (r0 *request.Request, r1 *transcribeservice.GetTranscriptionJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTranscriptionJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*transcribeservice.GetTranscriptionJobOutput)
	return
}

func (d *TranscribeServiceDouble) GetTranscriptionJobWithContext(i0 context.Context, i1 *transcribeservice.GetTranscriptionJobInput, i2 ...request.Option) (r0 *transcribeservice.GetTranscriptionJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTranscriptionJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*transcribeservice.GetTranscriptionJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranscribeServiceDouble) fakeGetTranscriptionJobWithContext(ctx context.Context, in *transcribeservice.GetTranscriptionJobInput, _ ...request.Option) (*transcribeservice.GetTranscriptionJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetTranscriptionJob cancelled", ctx.Err())
	default:
		return d.GetTranscriptionJob(in)
	}
}

func (d *TranscribeServiceDouble) GetVocabulary(i0 *transcribeservice.GetVocabularyInput) (r0 *transcribeservice.GetVocabularyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetVocabulary", i0)
	r0, _ = returns[0].(*transcribeservice.GetVocabularyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranscribeServiceDouble) GetVocabularyFilter(i0 *transcribeservice.GetVocabularyFilterInput) (r0 *transcribeservice.GetVocabularyFilterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetVocabularyFilter", i0)
	r0, _ = returns[0].(*transcribeservice.GetVocabularyFilterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranscribeServiceDouble) GetVocabularyFilterRequest(i0 *transcribeservice.GetVocabularyFilterInput) (r0 *request.Request, r1 *transcribeservice.GetVocabularyFilterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetVocabularyFilterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*transcribeservice.GetVocabularyFilterOutput)
	return
}

func (d *TranscribeServiceDouble) GetVocabularyFilterWithContext(i0 context.Context, i1 *transcribeservice.GetVocabularyFilterInput, i2 ...request.Option) (r0 *transcribeservice.GetVocabularyFilterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetVocabularyFilterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*transcribeservice.GetVocabularyFilterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranscribeServiceDouble) fakeGetVocabularyFilterWithContext(ctx context.Context, in *transcribeservice.GetVocabularyFilterInput, _ ...request.Option) (*transcribeservice.GetVocabularyFilterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetVocabularyFilter cancelled", ctx.Err())
	default:
		return d.GetVocabularyFilter(in)
	}
}

func (d *TranscribeServiceDouble) GetVocabularyRequest(i0 *transcribeservice.GetVocabularyInput) (r0 *request.Request, r1 *transcribeservice.GetVocabularyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetVocabularyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*transcribeservice.GetVocabularyOutput)
	return
}

func (d *TranscribeServiceDouble) GetVocabularyWithContext(i0 context.Context, i1 *transcribeservice.GetVocabularyInput, i2 ...request.Option) (r0 *transcribeservice.GetVocabularyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetVocabularyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*transcribeservice.GetVocabularyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranscribeServiceDouble) fakeGetVocabularyWithContext(ctx context.Context, in *transcribeservice.GetVocabularyInput, _ ...request.Option) (*transcribeservice.GetVocabularyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetVocabulary cancelled", ctx.Err())
	default:
		return d.GetVocabulary(in)
	}
}

func (d *TranscribeServiceDouble) ListTranscriptionJobs(i0 *transcribeservice.ListTranscriptionJobsInput) (r0 *transcribeservice.ListTranscriptionJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTranscriptionJobs", i0)
	r0, _ = returns[0].(*transcribeservice.ListTranscriptionJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranscribeServiceDouble) ListTranscriptionJobsPages(i0 *transcribeservice.ListTranscriptionJobsInput, i1 func(*transcribeservice.ListTranscriptionJobsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTranscriptionJobsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *TranscribeServiceDouble) fakeListTranscriptionJobsPages(in *transcribeservice.ListTranscriptionJobsInput, pager func(*transcribeservice.ListTranscriptionJobsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTranscriptionJobs", paginators, in, pager)
}

func (d *TranscribeServiceDouble) ListTranscriptionJobsPagesWithContext(i0 context.Context, i1 *transcribeservice.ListTranscriptionJobsInput, i2 func(*transcribeservice.ListTranscriptionJobsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTranscriptionJobsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *TranscribeServiceDouble) fakeListTranscriptionJobsPagesWithContext(ctx context.Context, in *transcribeservice.ListTranscriptionJobsInput, pager func(*transcribeservice.ListTranscriptionJobsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTranscriptionJobs", paginators, ctx, in, pager, options...)
}

func (d *TranscribeServiceDouble) ListTranscriptionJobsRequest(i0 *transcribeservice.ListTranscriptionJobsInput) (r0 *request.Request, r1 *transcribeservice.ListTranscriptionJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTranscriptionJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*transcribeservice.ListTranscriptionJobsOutput)
	return
}

func (d *TranscribeServiceDouble) ListTranscriptionJobsWithContext(i0 context.Context, i1 *transcribeservice.ListTranscriptionJobsInput, i2 ...request.Option) (r0 *transcribeservice.ListTranscriptionJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTranscriptionJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*transcribeservice.ListTranscriptionJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranscribeServiceDouble) fakeListTranscriptionJobsWithContext(ctx context.Context, in *transcribeservice.ListTranscriptionJobsInput, _ ...request.Option) (*transcribeservice.ListTranscriptionJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTranscriptionJobs cancelled", ctx.Err())
	default:
		return d.ListTranscriptionJobs(in)
	}
}

func (d *TranscribeServiceDouble) ListVocabularies(i0 *transcribeservice.ListVocabulariesInput) (r0 *transcribeservice.ListVocabulariesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVocabularies", i0)
	r0, _ = returns[0].(*transcribeservice.ListVocabulariesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranscribeServiceDouble) ListVocabulariesPages(i0 *transcribeservice.ListVocabulariesInput, i1 func(*transcribeservice.ListVocabulariesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVocabulariesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *TranscribeServiceDouble) fakeListVocabulariesPages(in *transcribeservice.ListVocabulariesInput, pager func(*transcribeservice.ListVocabulariesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListVocabularies", paginators, in, pager)
}

func (d *TranscribeServiceDouble) ListVocabulariesPagesWithContext(i0 context.Context, i1 *transcribeservice.ListVocabulariesInput, i2 func(*transcribeservice.ListVocabulariesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVocabulariesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *TranscribeServiceDouble) fakeListVocabulariesPagesWithContext(ctx context.Context, in *transcribeservice.ListVocabulariesInput, pager func(*transcribeservice.ListVocabulariesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListVocabularies", paginators, ctx, in, pager, options...)
}

func (d *TranscribeServiceDouble) ListVocabulariesRequest(i0 *transcribeservice.ListVocabulariesInput) (r0 *request.Request, r1 *transcribeservice.ListVocabulariesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVocabulariesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*transcribeservice.ListVocabulariesOutput)
	return
}

func (d *TranscribeServiceDouble) ListVocabulariesWithContext(i0 context.Context, i1 *transcribeservice.ListVocabulariesInput, i2 ...request.Option) (r0 *transcribeservice.ListVocabulariesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVocabulariesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*transcribeservice.ListVocabulariesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranscribeServiceDouble) fakeListVocabulariesWithContext(ctx context.Context, in *transcribeservice.ListVocabulariesInput, _ ...request.Option) (*transcribeservice.ListVocabulariesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListVocabularies cancelled", ctx.Err())
	default:
		return d.ListVocabularies(in)
	}
}

func (d *TranscribeServiceDouble) ListVocabularyFilters(i0 *transcribeservice.ListVocabularyFiltersInput) (r0 *transcribeservice.ListVocabularyFiltersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVocabularyFilters", i0)
	r0, _ = returns[0].(*transcribeservice.ListVocabularyFiltersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranscribeServiceDouble) ListVocabularyFiltersPages(i0 *transcribeservice.ListVocabularyFiltersInput, i1 func(*transcribeservice.ListVocabularyFiltersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVocabularyFiltersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *TranscribeServiceDouble) fakeListVocabularyFiltersPages(in *transcribeservice.ListVocabularyFiltersInput, pager func(*transcribeservice.ListVocabularyFiltersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListVocabularyFilters", paginators, in, pager)
}

func (d *TranscribeServiceDouble) ListVocabularyFiltersPagesWithContext(i0 context.Context, i1 *transcribeservice.ListVocabularyFiltersInput, i2 func(*transcribeservice.ListVocabularyFiltersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVocabularyFiltersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *TranscribeServiceDouble) fakeListVocabularyFiltersPagesWithContext(ctx context.Context, in *transcribeservice.ListVocabularyFiltersInput, pager func(*transcribeservice.ListVocabularyFiltersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListVocabularyFilters", paginators, ctx, in, pager, options...)
}

func (d *TranscribeServiceDouble) ListVocabularyFiltersRequest(i0 *transcribeservice.ListVocabularyFiltersInput) (r0 *request.Request, r1 *transcribeservice.ListVocabularyFiltersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVocabularyFiltersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*transcribeservice.ListVocabularyFiltersOutput)
	return
}

func (d *TranscribeServiceDouble) ListVocabularyFiltersWithContext(i0 context.Context, i1 *transcribeservice.ListVocabularyFiltersInput, i2 ...request.Option) (r0 *transcribeservice.ListVocabularyFiltersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVocabularyFiltersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*transcribeservice.ListVocabularyFiltersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranscribeServiceDouble) fakeListVocabularyFiltersWithContext(ctx context.Context, in *transcribeservice.ListVocabularyFiltersInput, _ ...request.Option) (*transcribeservice.ListVocabularyFiltersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListVocabularyFilters cancelled", ctx.Err())
	default:
		return d.ListVocabularyFilters(in)
	}
}

func (d *TranscribeServiceDouble) StartTranscriptionJob(i0 *transcribeservice.StartTranscriptionJobInput) (r0 *transcribeservice.StartTranscriptionJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartTranscriptionJob", i0)
	r0, _ = returns[0].(*transcribeservice.StartTranscriptionJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranscribeServiceDouble) StartTranscriptionJobRequest(i0 *transcribeservice.StartTranscriptionJobInput) (r0 *request.Request, r1 *transcribeservice.StartTranscriptionJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartTranscriptionJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*transcribeservice.StartTranscriptionJobOutput)
	return
}

func (d *TranscribeServiceDouble) StartTranscriptionJobWithContext(i0 context.Context, i1 *transcribeservice.StartTranscriptionJobInput, i2 ...request.Option) (r0 *transcribeservice.StartTranscriptionJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartTranscriptionJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*transcribeservice.StartTranscriptionJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranscribeServiceDouble) fakeStartTranscriptionJobWithContext(ctx context.Context, in *transcribeservice.StartTranscriptionJobInput, _ ...request.Option) (*transcribeservice.StartTranscriptionJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartTranscriptionJob cancelled", ctx.Err())
	default:
		return d.StartTranscriptionJob(in)
	}
}

func (d *TranscribeServiceDouble) UpdateVocabulary(i0 *transcribeservice.UpdateVocabularyInput) (r0 *transcribeservice.UpdateVocabularyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateVocabulary", i0)
	r0, _ = returns[0].(*transcribeservice.UpdateVocabularyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranscribeServiceDouble) UpdateVocabularyFilter(i0 *transcribeservice.UpdateVocabularyFilterInput) (r0 *transcribeservice.UpdateVocabularyFilterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateVocabularyFilter", i0)
	r0, _ = returns[0].(*transcribeservice.UpdateVocabularyFilterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranscribeServiceDouble) UpdateVocabularyFilterRequest(i0 *transcribeservice.UpdateVocabularyFilterInput) (r0 *request.Request, r1 *transcribeservice.UpdateVocabularyFilterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateVocabularyFilterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*transcribeservice.UpdateVocabularyFilterOutput)
	return
}

func (d *TranscribeServiceDouble) UpdateVocabularyFilterWithContext(i0 context.Context, i1 *transcribeservice.UpdateVocabularyFilterInput, i2 ...request.Option) (r0 *transcribeservice.UpdateVocabularyFilterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateVocabularyFilterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*transcribeservice.UpdateVocabularyFilterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranscribeServiceDouble) fakeUpdateVocabularyFilterWithContext(ctx context.Context, in *transcribeservice.UpdateVocabularyFilterInput, _ ...request.Option) (*transcribeservice.UpdateVocabularyFilterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateVocabularyFilter cancelled", ctx.Err())
	default:
		return d.UpdateVocabularyFilter(in)
	}
}

func (d *TranscribeServiceDouble) UpdateVocabularyRequest(i0 *transcribeservice.UpdateVocabularyInput) (r0 *request.Request, r1 *transcribeservice.UpdateVocabularyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateVocabularyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*transcribeservice.UpdateVocabularyOutput)
	return
}

func (d *TranscribeServiceDouble) UpdateVocabularyWithContext(i0 context.Context, i1 *transcribeservice.UpdateVocabularyInput, i2 ...request.Option) (r0 *transcribeservice.UpdateVocabularyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateVocabularyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*transcribeservice.UpdateVocabularyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *TranscribeServiceDouble) fakeUpdateVocabularyWithContext(ctx context.Context, in *transcribeservice.UpdateVocabularyInput, _ ...request.Option) (*transcribeservice.UpdateVocabularyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateVocabulary cancelled", ctx.Err())
	default:
		return d.UpdateVocabulary(in)
	}
}
