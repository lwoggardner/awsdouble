// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:13:01+11:00

// Package greengrassdouble provides a TestDouble implementation of greengrassiface.GreengrassAPI
package greengrassdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/greengrass"
	"github.com/aws/aws-sdk-go/service/greengrass/greengrassiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// GreengrassDouble is TestDouble for greengrassiface.GreengrassAPI
type GreengrassDouble struct {
	greengrassiface.GreengrassAPI
	*awsdouble.AWSTestDouble
}

// Constructor for GreengrassDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *GreengrassDouble {
	result := &GreengrassDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*greengrassiface.GreengrassAPI)(nil), configurators...)
	return result
}

func (d *GreengrassDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *GreengrassDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AssociateRoleToGroupWithContext":
		return m.Fake(d.fakeAssociateRoleToGroupWithContext)

	case "AssociateServiceRoleToAccountWithContext":
		return m.Fake(d.fakeAssociateServiceRoleToAccountWithContext)

	case "CreateConnectorDefinitionVersionWithContext":
		return m.Fake(d.fakeCreateConnectorDefinitionVersionWithContext)

	case "CreateConnectorDefinitionWithContext":
		return m.Fake(d.fakeCreateConnectorDefinitionWithContext)

	case "CreateCoreDefinitionVersionWithContext":
		return m.Fake(d.fakeCreateCoreDefinitionVersionWithContext)

	case "CreateCoreDefinitionWithContext":
		return m.Fake(d.fakeCreateCoreDefinitionWithContext)

	case "CreateDeploymentWithContext":
		return m.Fake(d.fakeCreateDeploymentWithContext)

	case "CreateDeviceDefinitionVersionWithContext":
		return m.Fake(d.fakeCreateDeviceDefinitionVersionWithContext)

	case "CreateDeviceDefinitionWithContext":
		return m.Fake(d.fakeCreateDeviceDefinitionWithContext)

	case "CreateFunctionDefinitionVersionWithContext":
		return m.Fake(d.fakeCreateFunctionDefinitionVersionWithContext)

	case "CreateFunctionDefinitionWithContext":
		return m.Fake(d.fakeCreateFunctionDefinitionWithContext)

	case "CreateGroupCertificateAuthorityWithContext":
		return m.Fake(d.fakeCreateGroupCertificateAuthorityWithContext)

	case "CreateGroupVersionWithContext":
		return m.Fake(d.fakeCreateGroupVersionWithContext)

	case "CreateGroupWithContext":
		return m.Fake(d.fakeCreateGroupWithContext)

	case "CreateLoggerDefinitionVersionWithContext":
		return m.Fake(d.fakeCreateLoggerDefinitionVersionWithContext)

	case "CreateLoggerDefinitionWithContext":
		return m.Fake(d.fakeCreateLoggerDefinitionWithContext)

	case "CreateResourceDefinitionVersionWithContext":
		return m.Fake(d.fakeCreateResourceDefinitionVersionWithContext)

	case "CreateResourceDefinitionWithContext":
		return m.Fake(d.fakeCreateResourceDefinitionWithContext)

	case "CreateSoftwareUpdateJobWithContext":
		return m.Fake(d.fakeCreateSoftwareUpdateJobWithContext)

	case "CreateSubscriptionDefinitionVersionWithContext":
		return m.Fake(d.fakeCreateSubscriptionDefinitionVersionWithContext)

	case "CreateSubscriptionDefinitionWithContext":
		return m.Fake(d.fakeCreateSubscriptionDefinitionWithContext)

	case "DeleteConnectorDefinitionWithContext":
		return m.Fake(d.fakeDeleteConnectorDefinitionWithContext)

	case "DeleteCoreDefinitionWithContext":
		return m.Fake(d.fakeDeleteCoreDefinitionWithContext)

	case "DeleteDeviceDefinitionWithContext":
		return m.Fake(d.fakeDeleteDeviceDefinitionWithContext)

	case "DeleteFunctionDefinitionWithContext":
		return m.Fake(d.fakeDeleteFunctionDefinitionWithContext)

	case "DeleteGroupWithContext":
		return m.Fake(d.fakeDeleteGroupWithContext)

	case "DeleteLoggerDefinitionWithContext":
		return m.Fake(d.fakeDeleteLoggerDefinitionWithContext)

	case "DeleteResourceDefinitionWithContext":
		return m.Fake(d.fakeDeleteResourceDefinitionWithContext)

	case "DeleteSubscriptionDefinitionWithContext":
		return m.Fake(d.fakeDeleteSubscriptionDefinitionWithContext)

	case "DisassociateRoleFromGroupWithContext":
		return m.Fake(d.fakeDisassociateRoleFromGroupWithContext)

	case "DisassociateServiceRoleFromAccountWithContext":
		return m.Fake(d.fakeDisassociateServiceRoleFromAccountWithContext)

	case "GetAssociatedRoleWithContext":
		return m.Fake(d.fakeGetAssociatedRoleWithContext)

	case "GetBulkDeploymentStatusWithContext":
		return m.Fake(d.fakeGetBulkDeploymentStatusWithContext)

	case "GetConnectivityInfoWithContext":
		return m.Fake(d.fakeGetConnectivityInfoWithContext)

	case "GetConnectorDefinitionVersionWithContext":
		return m.Fake(d.fakeGetConnectorDefinitionVersionWithContext)

	case "GetConnectorDefinitionWithContext":
		return m.Fake(d.fakeGetConnectorDefinitionWithContext)

	case "GetCoreDefinitionVersionWithContext":
		return m.Fake(d.fakeGetCoreDefinitionVersionWithContext)

	case "GetCoreDefinitionWithContext":
		return m.Fake(d.fakeGetCoreDefinitionWithContext)

	case "GetDeploymentStatusWithContext":
		return m.Fake(d.fakeGetDeploymentStatusWithContext)

	case "GetDeviceDefinitionVersionWithContext":
		return m.Fake(d.fakeGetDeviceDefinitionVersionWithContext)

	case "GetDeviceDefinitionWithContext":
		return m.Fake(d.fakeGetDeviceDefinitionWithContext)

	case "GetFunctionDefinitionVersionWithContext":
		return m.Fake(d.fakeGetFunctionDefinitionVersionWithContext)

	case "GetFunctionDefinitionWithContext":
		return m.Fake(d.fakeGetFunctionDefinitionWithContext)

	case "GetGroupCertificateAuthorityWithContext":
		return m.Fake(d.fakeGetGroupCertificateAuthorityWithContext)

	case "GetGroupCertificateConfigurationWithContext":
		return m.Fake(d.fakeGetGroupCertificateConfigurationWithContext)

	case "GetGroupVersionWithContext":
		return m.Fake(d.fakeGetGroupVersionWithContext)

	case "GetGroupWithContext":
		return m.Fake(d.fakeGetGroupWithContext)

	case "GetLoggerDefinitionVersionWithContext":
		return m.Fake(d.fakeGetLoggerDefinitionVersionWithContext)

	case "GetLoggerDefinitionWithContext":
		return m.Fake(d.fakeGetLoggerDefinitionWithContext)

	case "GetResourceDefinitionVersionWithContext":
		return m.Fake(d.fakeGetResourceDefinitionVersionWithContext)

	case "GetResourceDefinitionWithContext":
		return m.Fake(d.fakeGetResourceDefinitionWithContext)

	case "GetServiceRoleForAccountWithContext":
		return m.Fake(d.fakeGetServiceRoleForAccountWithContext)

	case "GetSubscriptionDefinitionVersionWithContext":
		return m.Fake(d.fakeGetSubscriptionDefinitionVersionWithContext)

	case "GetSubscriptionDefinitionWithContext":
		return m.Fake(d.fakeGetSubscriptionDefinitionWithContext)

	case "ListBulkDeploymentDetailedReportsWithContext":
		return m.Fake(d.fakeListBulkDeploymentDetailedReportsWithContext)

	case "ListBulkDeploymentsWithContext":
		return m.Fake(d.fakeListBulkDeploymentsWithContext)

	case "ListConnectorDefinitionVersionsWithContext":
		return m.Fake(d.fakeListConnectorDefinitionVersionsWithContext)

	case "ListConnectorDefinitionsWithContext":
		return m.Fake(d.fakeListConnectorDefinitionsWithContext)

	case "ListCoreDefinitionVersionsWithContext":
		return m.Fake(d.fakeListCoreDefinitionVersionsWithContext)

	case "ListCoreDefinitionsWithContext":
		return m.Fake(d.fakeListCoreDefinitionsWithContext)

	case "ListDeploymentsWithContext":
		return m.Fake(d.fakeListDeploymentsWithContext)

	case "ListDeviceDefinitionVersionsWithContext":
		return m.Fake(d.fakeListDeviceDefinitionVersionsWithContext)

	case "ListDeviceDefinitionsWithContext":
		return m.Fake(d.fakeListDeviceDefinitionsWithContext)

	case "ListFunctionDefinitionVersionsWithContext":
		return m.Fake(d.fakeListFunctionDefinitionVersionsWithContext)

	case "ListFunctionDefinitionsWithContext":
		return m.Fake(d.fakeListFunctionDefinitionsWithContext)

	case "ListGroupCertificateAuthoritiesWithContext":
		return m.Fake(d.fakeListGroupCertificateAuthoritiesWithContext)

	case "ListGroupVersionsWithContext":
		return m.Fake(d.fakeListGroupVersionsWithContext)

	case "ListGroupsWithContext":
		return m.Fake(d.fakeListGroupsWithContext)

	case "ListLoggerDefinitionVersionsWithContext":
		return m.Fake(d.fakeListLoggerDefinitionVersionsWithContext)

	case "ListLoggerDefinitionsWithContext":
		return m.Fake(d.fakeListLoggerDefinitionsWithContext)

	case "ListResourceDefinitionVersionsWithContext":
		return m.Fake(d.fakeListResourceDefinitionVersionsWithContext)

	case "ListResourceDefinitionsWithContext":
		return m.Fake(d.fakeListResourceDefinitionsWithContext)

	case "ListSubscriptionDefinitionVersionsWithContext":
		return m.Fake(d.fakeListSubscriptionDefinitionVersionsWithContext)

	case "ListSubscriptionDefinitionsWithContext":
		return m.Fake(d.fakeListSubscriptionDefinitionsWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "ResetDeploymentsWithContext":
		return m.Fake(d.fakeResetDeploymentsWithContext)

	case "StartBulkDeploymentWithContext":
		return m.Fake(d.fakeStartBulkDeploymentWithContext)

	case "StopBulkDeploymentWithContext":
		return m.Fake(d.fakeStopBulkDeploymentWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateConnectivityInfoWithContext":
		return m.Fake(d.fakeUpdateConnectivityInfoWithContext)

	case "UpdateConnectorDefinitionWithContext":
		return m.Fake(d.fakeUpdateConnectorDefinitionWithContext)

	case "UpdateCoreDefinitionWithContext":
		return m.Fake(d.fakeUpdateCoreDefinitionWithContext)

	case "UpdateDeviceDefinitionWithContext":
		return m.Fake(d.fakeUpdateDeviceDefinitionWithContext)

	case "UpdateFunctionDefinitionWithContext":
		return m.Fake(d.fakeUpdateFunctionDefinitionWithContext)

	case "UpdateGroupCertificateConfigurationWithContext":
		return m.Fake(d.fakeUpdateGroupCertificateConfigurationWithContext)

	case "UpdateGroupWithContext":
		return m.Fake(d.fakeUpdateGroupWithContext)

	case "UpdateLoggerDefinitionWithContext":
		return m.Fake(d.fakeUpdateLoggerDefinitionWithContext)

	case "UpdateResourceDefinitionWithContext":
		return m.Fake(d.fakeUpdateResourceDefinitionWithContext)

	case "UpdateSubscriptionDefinitionWithContext":
		return m.Fake(d.fakeUpdateSubscriptionDefinitionWithContext)

	default:
		return nil
	}
}

func (d *GreengrassDouble) AssociateRoleToGroup(i0 *greengrass.AssociateRoleToGroupInput) (r0 *greengrass.AssociateRoleToGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateRoleToGroup", i0)
	r0, _ = returns[0].(*greengrass.AssociateRoleToGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) AssociateRoleToGroupRequest(i0 *greengrass.AssociateRoleToGroupInput) (r0 *request.Request, r1 *greengrass.AssociateRoleToGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateRoleToGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.AssociateRoleToGroupOutput)
	return
}

func (d *GreengrassDouble) AssociateRoleToGroupWithContext(i0 context.Context, i1 *greengrass.AssociateRoleToGroupInput, i2 ...request.Option) (r0 *greengrass.AssociateRoleToGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateRoleToGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.AssociateRoleToGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeAssociateRoleToGroupWithContext(ctx context.Context, in *greengrass.AssociateRoleToGroupInput, _ ...request.Option) (*greengrass.AssociateRoleToGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateRoleToGroup cancelled", ctx.Err())
	default:
		return d.AssociateRoleToGroup(in)
	}
}

func (d *GreengrassDouble) AssociateServiceRoleToAccount(i0 *greengrass.AssociateServiceRoleToAccountInput) (r0 *greengrass.AssociateServiceRoleToAccountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateServiceRoleToAccount", i0)
	r0, _ = returns[0].(*greengrass.AssociateServiceRoleToAccountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) AssociateServiceRoleToAccountRequest(i0 *greengrass.AssociateServiceRoleToAccountInput) (r0 *request.Request, r1 *greengrass.AssociateServiceRoleToAccountOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateServiceRoleToAccountRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.AssociateServiceRoleToAccountOutput)
	return
}

func (d *GreengrassDouble) AssociateServiceRoleToAccountWithContext(i0 context.Context, i1 *greengrass.AssociateServiceRoleToAccountInput, i2 ...request.Option) (r0 *greengrass.AssociateServiceRoleToAccountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateServiceRoleToAccountWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.AssociateServiceRoleToAccountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeAssociateServiceRoleToAccountWithContext(ctx context.Context, in *greengrass.AssociateServiceRoleToAccountInput, _ ...request.Option) (*greengrass.AssociateServiceRoleToAccountOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateServiceRoleToAccount cancelled", ctx.Err())
	default:
		return d.AssociateServiceRoleToAccount(in)
	}
}

func (d *GreengrassDouble) CreateConnectorDefinition(i0 *greengrass.CreateConnectorDefinitionInput) (r0 *greengrass.CreateConnectorDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateConnectorDefinition", i0)
	r0, _ = returns[0].(*greengrass.CreateConnectorDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) CreateConnectorDefinitionRequest(i0 *greengrass.CreateConnectorDefinitionInput) (r0 *request.Request, r1 *greengrass.CreateConnectorDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateConnectorDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.CreateConnectorDefinitionOutput)
	return
}

func (d *GreengrassDouble) CreateConnectorDefinitionVersion(i0 *greengrass.CreateConnectorDefinitionVersionInput) (r0 *greengrass.CreateConnectorDefinitionVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateConnectorDefinitionVersion", i0)
	r0, _ = returns[0].(*greengrass.CreateConnectorDefinitionVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) CreateConnectorDefinitionVersionRequest(i0 *greengrass.CreateConnectorDefinitionVersionInput) (r0 *request.Request, r1 *greengrass.CreateConnectorDefinitionVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateConnectorDefinitionVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.CreateConnectorDefinitionVersionOutput)
	return
}

func (d *GreengrassDouble) CreateConnectorDefinitionVersionWithContext(i0 context.Context, i1 *greengrass.CreateConnectorDefinitionVersionInput, i2 ...request.Option) (r0 *greengrass.CreateConnectorDefinitionVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateConnectorDefinitionVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.CreateConnectorDefinitionVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeCreateConnectorDefinitionVersionWithContext(ctx context.Context, in *greengrass.CreateConnectorDefinitionVersionInput, _ ...request.Option) (*greengrass.CreateConnectorDefinitionVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateConnectorDefinitionVersion cancelled", ctx.Err())
	default:
		return d.CreateConnectorDefinitionVersion(in)
	}
}

func (d *GreengrassDouble) CreateConnectorDefinitionWithContext(i0 context.Context, i1 *greengrass.CreateConnectorDefinitionInput, i2 ...request.Option) (r0 *greengrass.CreateConnectorDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateConnectorDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.CreateConnectorDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeCreateConnectorDefinitionWithContext(ctx context.Context, in *greengrass.CreateConnectorDefinitionInput, _ ...request.Option) (*greengrass.CreateConnectorDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateConnectorDefinition cancelled", ctx.Err())
	default:
		return d.CreateConnectorDefinition(in)
	}
}

func (d *GreengrassDouble) CreateCoreDefinition(i0 *greengrass.CreateCoreDefinitionInput) (r0 *greengrass.CreateCoreDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCoreDefinition", i0)
	r0, _ = returns[0].(*greengrass.CreateCoreDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) CreateCoreDefinitionRequest(i0 *greengrass.CreateCoreDefinitionInput) (r0 *request.Request, r1 *greengrass.CreateCoreDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCoreDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.CreateCoreDefinitionOutput)
	return
}

func (d *GreengrassDouble) CreateCoreDefinitionVersion(i0 *greengrass.CreateCoreDefinitionVersionInput) (r0 *greengrass.CreateCoreDefinitionVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCoreDefinitionVersion", i0)
	r0, _ = returns[0].(*greengrass.CreateCoreDefinitionVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) CreateCoreDefinitionVersionRequest(i0 *greengrass.CreateCoreDefinitionVersionInput) (r0 *request.Request, r1 *greengrass.CreateCoreDefinitionVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCoreDefinitionVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.CreateCoreDefinitionVersionOutput)
	return
}

func (d *GreengrassDouble) CreateCoreDefinitionVersionWithContext(i0 context.Context, i1 *greengrass.CreateCoreDefinitionVersionInput, i2 ...request.Option) (r0 *greengrass.CreateCoreDefinitionVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCoreDefinitionVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.CreateCoreDefinitionVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeCreateCoreDefinitionVersionWithContext(ctx context.Context, in *greengrass.CreateCoreDefinitionVersionInput, _ ...request.Option) (*greengrass.CreateCoreDefinitionVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateCoreDefinitionVersion cancelled", ctx.Err())
	default:
		return d.CreateCoreDefinitionVersion(in)
	}
}

func (d *GreengrassDouble) CreateCoreDefinitionWithContext(i0 context.Context, i1 *greengrass.CreateCoreDefinitionInput, i2 ...request.Option) (r0 *greengrass.CreateCoreDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCoreDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.CreateCoreDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeCreateCoreDefinitionWithContext(ctx context.Context, in *greengrass.CreateCoreDefinitionInput, _ ...request.Option) (*greengrass.CreateCoreDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateCoreDefinition cancelled", ctx.Err())
	default:
		return d.CreateCoreDefinition(in)
	}
}

func (d *GreengrassDouble) CreateDeployment(i0 *greengrass.CreateDeploymentInput) (r0 *greengrass.CreateDeploymentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDeployment", i0)
	r0, _ = returns[0].(*greengrass.CreateDeploymentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) CreateDeploymentRequest(i0 *greengrass.CreateDeploymentInput) (r0 *request.Request, r1 *greengrass.CreateDeploymentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDeploymentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.CreateDeploymentOutput)
	return
}

func (d *GreengrassDouble) CreateDeploymentWithContext(i0 context.Context, i1 *greengrass.CreateDeploymentInput, i2 ...request.Option) (r0 *greengrass.CreateDeploymentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDeploymentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.CreateDeploymentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeCreateDeploymentWithContext(ctx context.Context, in *greengrass.CreateDeploymentInput, _ ...request.Option) (*greengrass.CreateDeploymentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDeployment cancelled", ctx.Err())
	default:
		return d.CreateDeployment(in)
	}
}

func (d *GreengrassDouble) CreateDeviceDefinition(i0 *greengrass.CreateDeviceDefinitionInput) (r0 *greengrass.CreateDeviceDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDeviceDefinition", i0)
	r0, _ = returns[0].(*greengrass.CreateDeviceDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) CreateDeviceDefinitionRequest(i0 *greengrass.CreateDeviceDefinitionInput) (r0 *request.Request, r1 *greengrass.CreateDeviceDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDeviceDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.CreateDeviceDefinitionOutput)
	return
}

func (d *GreengrassDouble) CreateDeviceDefinitionVersion(i0 *greengrass.CreateDeviceDefinitionVersionInput) (r0 *greengrass.CreateDeviceDefinitionVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDeviceDefinitionVersion", i0)
	r0, _ = returns[0].(*greengrass.CreateDeviceDefinitionVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) CreateDeviceDefinitionVersionRequest(i0 *greengrass.CreateDeviceDefinitionVersionInput) (r0 *request.Request, r1 *greengrass.CreateDeviceDefinitionVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDeviceDefinitionVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.CreateDeviceDefinitionVersionOutput)
	return
}

func (d *GreengrassDouble) CreateDeviceDefinitionVersionWithContext(i0 context.Context, i1 *greengrass.CreateDeviceDefinitionVersionInput, i2 ...request.Option) (r0 *greengrass.CreateDeviceDefinitionVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDeviceDefinitionVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.CreateDeviceDefinitionVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeCreateDeviceDefinitionVersionWithContext(ctx context.Context, in *greengrass.CreateDeviceDefinitionVersionInput, _ ...request.Option) (*greengrass.CreateDeviceDefinitionVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDeviceDefinitionVersion cancelled", ctx.Err())
	default:
		return d.CreateDeviceDefinitionVersion(in)
	}
}

func (d *GreengrassDouble) CreateDeviceDefinitionWithContext(i0 context.Context, i1 *greengrass.CreateDeviceDefinitionInput, i2 ...request.Option) (r0 *greengrass.CreateDeviceDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDeviceDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.CreateDeviceDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeCreateDeviceDefinitionWithContext(ctx context.Context, in *greengrass.CreateDeviceDefinitionInput, _ ...request.Option) (*greengrass.CreateDeviceDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDeviceDefinition cancelled", ctx.Err())
	default:
		return d.CreateDeviceDefinition(in)
	}
}

func (d *GreengrassDouble) CreateFunctionDefinition(i0 *greengrass.CreateFunctionDefinitionInput) (r0 *greengrass.CreateFunctionDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFunctionDefinition", i0)
	r0, _ = returns[0].(*greengrass.CreateFunctionDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) CreateFunctionDefinitionRequest(i0 *greengrass.CreateFunctionDefinitionInput) (r0 *request.Request, r1 *greengrass.CreateFunctionDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFunctionDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.CreateFunctionDefinitionOutput)
	return
}

func (d *GreengrassDouble) CreateFunctionDefinitionVersion(i0 *greengrass.CreateFunctionDefinitionVersionInput) (r0 *greengrass.CreateFunctionDefinitionVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFunctionDefinitionVersion", i0)
	r0, _ = returns[0].(*greengrass.CreateFunctionDefinitionVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) CreateFunctionDefinitionVersionRequest(i0 *greengrass.CreateFunctionDefinitionVersionInput) (r0 *request.Request, r1 *greengrass.CreateFunctionDefinitionVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFunctionDefinitionVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.CreateFunctionDefinitionVersionOutput)
	return
}

func (d *GreengrassDouble) CreateFunctionDefinitionVersionWithContext(i0 context.Context, i1 *greengrass.CreateFunctionDefinitionVersionInput, i2 ...request.Option) (r0 *greengrass.CreateFunctionDefinitionVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFunctionDefinitionVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.CreateFunctionDefinitionVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeCreateFunctionDefinitionVersionWithContext(ctx context.Context, in *greengrass.CreateFunctionDefinitionVersionInput, _ ...request.Option) (*greengrass.CreateFunctionDefinitionVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateFunctionDefinitionVersion cancelled", ctx.Err())
	default:
		return d.CreateFunctionDefinitionVersion(in)
	}
}

func (d *GreengrassDouble) CreateFunctionDefinitionWithContext(i0 context.Context, i1 *greengrass.CreateFunctionDefinitionInput, i2 ...request.Option) (r0 *greengrass.CreateFunctionDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFunctionDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.CreateFunctionDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeCreateFunctionDefinitionWithContext(ctx context.Context, in *greengrass.CreateFunctionDefinitionInput, _ ...request.Option) (*greengrass.CreateFunctionDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateFunctionDefinition cancelled", ctx.Err())
	default:
		return d.CreateFunctionDefinition(in)
	}
}

func (d *GreengrassDouble) CreateGroup(i0 *greengrass.CreateGroupInput) (r0 *greengrass.CreateGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGroup", i0)
	r0, _ = returns[0].(*greengrass.CreateGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) CreateGroupCertificateAuthority(i0 *greengrass.CreateGroupCertificateAuthorityInput) (r0 *greengrass.CreateGroupCertificateAuthorityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGroupCertificateAuthority", i0)
	r0, _ = returns[0].(*greengrass.CreateGroupCertificateAuthorityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) CreateGroupCertificateAuthorityRequest(i0 *greengrass.CreateGroupCertificateAuthorityInput) (r0 *request.Request, r1 *greengrass.CreateGroupCertificateAuthorityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGroupCertificateAuthorityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.CreateGroupCertificateAuthorityOutput)
	return
}

func (d *GreengrassDouble) CreateGroupCertificateAuthorityWithContext(i0 context.Context, i1 *greengrass.CreateGroupCertificateAuthorityInput, i2 ...request.Option) (r0 *greengrass.CreateGroupCertificateAuthorityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGroupCertificateAuthorityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.CreateGroupCertificateAuthorityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeCreateGroupCertificateAuthorityWithContext(ctx context.Context, in *greengrass.CreateGroupCertificateAuthorityInput, _ ...request.Option) (*greengrass.CreateGroupCertificateAuthorityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateGroupCertificateAuthority cancelled", ctx.Err())
	default:
		return d.CreateGroupCertificateAuthority(in)
	}
}

func (d *GreengrassDouble) CreateGroupRequest(i0 *greengrass.CreateGroupInput) (r0 *request.Request, r1 *greengrass.CreateGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.CreateGroupOutput)
	return
}

func (d *GreengrassDouble) CreateGroupVersion(i0 *greengrass.CreateGroupVersionInput) (r0 *greengrass.CreateGroupVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGroupVersion", i0)
	r0, _ = returns[0].(*greengrass.CreateGroupVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) CreateGroupVersionRequest(i0 *greengrass.CreateGroupVersionInput) (r0 *request.Request, r1 *greengrass.CreateGroupVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGroupVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.CreateGroupVersionOutput)
	return
}

func (d *GreengrassDouble) CreateGroupVersionWithContext(i0 context.Context, i1 *greengrass.CreateGroupVersionInput, i2 ...request.Option) (r0 *greengrass.CreateGroupVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGroupVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.CreateGroupVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeCreateGroupVersionWithContext(ctx context.Context, in *greengrass.CreateGroupVersionInput, _ ...request.Option) (*greengrass.CreateGroupVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateGroupVersion cancelled", ctx.Err())
	default:
		return d.CreateGroupVersion(in)
	}
}

func (d *GreengrassDouble) CreateGroupWithContext(i0 context.Context, i1 *greengrass.CreateGroupInput, i2 ...request.Option) (r0 *greengrass.CreateGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.CreateGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeCreateGroupWithContext(ctx context.Context, in *greengrass.CreateGroupInput, _ ...request.Option) (*greengrass.CreateGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateGroup cancelled", ctx.Err())
	default:
		return d.CreateGroup(in)
	}
}

func (d *GreengrassDouble) CreateLoggerDefinition(i0 *greengrass.CreateLoggerDefinitionInput) (r0 *greengrass.CreateLoggerDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLoggerDefinition", i0)
	r0, _ = returns[0].(*greengrass.CreateLoggerDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) CreateLoggerDefinitionRequest(i0 *greengrass.CreateLoggerDefinitionInput) (r0 *request.Request, r1 *greengrass.CreateLoggerDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLoggerDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.CreateLoggerDefinitionOutput)
	return
}

func (d *GreengrassDouble) CreateLoggerDefinitionVersion(i0 *greengrass.CreateLoggerDefinitionVersionInput) (r0 *greengrass.CreateLoggerDefinitionVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLoggerDefinitionVersion", i0)
	r0, _ = returns[0].(*greengrass.CreateLoggerDefinitionVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) CreateLoggerDefinitionVersionRequest(i0 *greengrass.CreateLoggerDefinitionVersionInput) (r0 *request.Request, r1 *greengrass.CreateLoggerDefinitionVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLoggerDefinitionVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.CreateLoggerDefinitionVersionOutput)
	return
}

func (d *GreengrassDouble) CreateLoggerDefinitionVersionWithContext(i0 context.Context, i1 *greengrass.CreateLoggerDefinitionVersionInput, i2 ...request.Option) (r0 *greengrass.CreateLoggerDefinitionVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLoggerDefinitionVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.CreateLoggerDefinitionVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeCreateLoggerDefinitionVersionWithContext(ctx context.Context, in *greengrass.CreateLoggerDefinitionVersionInput, _ ...request.Option) (*greengrass.CreateLoggerDefinitionVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateLoggerDefinitionVersion cancelled", ctx.Err())
	default:
		return d.CreateLoggerDefinitionVersion(in)
	}
}

func (d *GreengrassDouble) CreateLoggerDefinitionWithContext(i0 context.Context, i1 *greengrass.CreateLoggerDefinitionInput, i2 ...request.Option) (r0 *greengrass.CreateLoggerDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLoggerDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.CreateLoggerDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeCreateLoggerDefinitionWithContext(ctx context.Context, in *greengrass.CreateLoggerDefinitionInput, _ ...request.Option) (*greengrass.CreateLoggerDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateLoggerDefinition cancelled", ctx.Err())
	default:
		return d.CreateLoggerDefinition(in)
	}
}

func (d *GreengrassDouble) CreateResourceDefinition(i0 *greengrass.CreateResourceDefinitionInput) (r0 *greengrass.CreateResourceDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateResourceDefinition", i0)
	r0, _ = returns[0].(*greengrass.CreateResourceDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) CreateResourceDefinitionRequest(i0 *greengrass.CreateResourceDefinitionInput) (r0 *request.Request, r1 *greengrass.CreateResourceDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateResourceDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.CreateResourceDefinitionOutput)
	return
}

func (d *GreengrassDouble) CreateResourceDefinitionVersion(i0 *greengrass.CreateResourceDefinitionVersionInput) (r0 *greengrass.CreateResourceDefinitionVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateResourceDefinitionVersion", i0)
	r0, _ = returns[0].(*greengrass.CreateResourceDefinitionVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) CreateResourceDefinitionVersionRequest(i0 *greengrass.CreateResourceDefinitionVersionInput) (r0 *request.Request, r1 *greengrass.CreateResourceDefinitionVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateResourceDefinitionVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.CreateResourceDefinitionVersionOutput)
	return
}

func (d *GreengrassDouble) CreateResourceDefinitionVersionWithContext(i0 context.Context, i1 *greengrass.CreateResourceDefinitionVersionInput, i2 ...request.Option) (r0 *greengrass.CreateResourceDefinitionVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateResourceDefinitionVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.CreateResourceDefinitionVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeCreateResourceDefinitionVersionWithContext(ctx context.Context, in *greengrass.CreateResourceDefinitionVersionInput, _ ...request.Option) (*greengrass.CreateResourceDefinitionVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateResourceDefinitionVersion cancelled", ctx.Err())
	default:
		return d.CreateResourceDefinitionVersion(in)
	}
}

func (d *GreengrassDouble) CreateResourceDefinitionWithContext(i0 context.Context, i1 *greengrass.CreateResourceDefinitionInput, i2 ...request.Option) (r0 *greengrass.CreateResourceDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateResourceDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.CreateResourceDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeCreateResourceDefinitionWithContext(ctx context.Context, in *greengrass.CreateResourceDefinitionInput, _ ...request.Option) (*greengrass.CreateResourceDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateResourceDefinition cancelled", ctx.Err())
	default:
		return d.CreateResourceDefinition(in)
	}
}

func (d *GreengrassDouble) CreateSoftwareUpdateJob(i0 *greengrass.CreateSoftwareUpdateJobInput) (r0 *greengrass.CreateSoftwareUpdateJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSoftwareUpdateJob", i0)
	r0, _ = returns[0].(*greengrass.CreateSoftwareUpdateJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) CreateSoftwareUpdateJobRequest(i0 *greengrass.CreateSoftwareUpdateJobInput) (r0 *request.Request, r1 *greengrass.CreateSoftwareUpdateJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSoftwareUpdateJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.CreateSoftwareUpdateJobOutput)
	return
}

func (d *GreengrassDouble) CreateSoftwareUpdateJobWithContext(i0 context.Context, i1 *greengrass.CreateSoftwareUpdateJobInput, i2 ...request.Option) (r0 *greengrass.CreateSoftwareUpdateJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSoftwareUpdateJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.CreateSoftwareUpdateJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeCreateSoftwareUpdateJobWithContext(ctx context.Context, in *greengrass.CreateSoftwareUpdateJobInput, _ ...request.Option) (*greengrass.CreateSoftwareUpdateJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateSoftwareUpdateJob cancelled", ctx.Err())
	default:
		return d.CreateSoftwareUpdateJob(in)
	}
}

func (d *GreengrassDouble) CreateSubscriptionDefinition(i0 *greengrass.CreateSubscriptionDefinitionInput) (r0 *greengrass.CreateSubscriptionDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSubscriptionDefinition", i0)
	r0, _ = returns[0].(*greengrass.CreateSubscriptionDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) CreateSubscriptionDefinitionRequest(i0 *greengrass.CreateSubscriptionDefinitionInput) (r0 *request.Request, r1 *greengrass.CreateSubscriptionDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSubscriptionDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.CreateSubscriptionDefinitionOutput)
	return
}

func (d *GreengrassDouble) CreateSubscriptionDefinitionVersion(i0 *greengrass.CreateSubscriptionDefinitionVersionInput) (r0 *greengrass.CreateSubscriptionDefinitionVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSubscriptionDefinitionVersion", i0)
	r0, _ = returns[0].(*greengrass.CreateSubscriptionDefinitionVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) CreateSubscriptionDefinitionVersionRequest(i0 *greengrass.CreateSubscriptionDefinitionVersionInput) (r0 *request.Request, r1 *greengrass.CreateSubscriptionDefinitionVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSubscriptionDefinitionVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.CreateSubscriptionDefinitionVersionOutput)
	return
}

func (d *GreengrassDouble) CreateSubscriptionDefinitionVersionWithContext(i0 context.Context, i1 *greengrass.CreateSubscriptionDefinitionVersionInput, i2 ...request.Option) (r0 *greengrass.CreateSubscriptionDefinitionVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSubscriptionDefinitionVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.CreateSubscriptionDefinitionVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeCreateSubscriptionDefinitionVersionWithContext(ctx context.Context, in *greengrass.CreateSubscriptionDefinitionVersionInput, _ ...request.Option) (*greengrass.CreateSubscriptionDefinitionVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateSubscriptionDefinitionVersion cancelled", ctx.Err())
	default:
		return d.CreateSubscriptionDefinitionVersion(in)
	}
}

func (d *GreengrassDouble) CreateSubscriptionDefinitionWithContext(i0 context.Context, i1 *greengrass.CreateSubscriptionDefinitionInput, i2 ...request.Option) (r0 *greengrass.CreateSubscriptionDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSubscriptionDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.CreateSubscriptionDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeCreateSubscriptionDefinitionWithContext(ctx context.Context, in *greengrass.CreateSubscriptionDefinitionInput, _ ...request.Option) (*greengrass.CreateSubscriptionDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateSubscriptionDefinition cancelled", ctx.Err())
	default:
		return d.CreateSubscriptionDefinition(in)
	}
}

func (d *GreengrassDouble) DeleteConnectorDefinition(i0 *greengrass.DeleteConnectorDefinitionInput) (r0 *greengrass.DeleteConnectorDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteConnectorDefinition", i0)
	r0, _ = returns[0].(*greengrass.DeleteConnectorDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) DeleteConnectorDefinitionRequest(i0 *greengrass.DeleteConnectorDefinitionInput) (r0 *request.Request, r1 *greengrass.DeleteConnectorDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteConnectorDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.DeleteConnectorDefinitionOutput)
	return
}

func (d *GreengrassDouble) DeleteConnectorDefinitionWithContext(i0 context.Context, i1 *greengrass.DeleteConnectorDefinitionInput, i2 ...request.Option) (r0 *greengrass.DeleteConnectorDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteConnectorDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.DeleteConnectorDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeDeleteConnectorDefinitionWithContext(ctx context.Context, in *greengrass.DeleteConnectorDefinitionInput, _ ...request.Option) (*greengrass.DeleteConnectorDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteConnectorDefinition cancelled", ctx.Err())
	default:
		return d.DeleteConnectorDefinition(in)
	}
}

func (d *GreengrassDouble) DeleteCoreDefinition(i0 *greengrass.DeleteCoreDefinitionInput) (r0 *greengrass.DeleteCoreDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCoreDefinition", i0)
	r0, _ = returns[0].(*greengrass.DeleteCoreDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) DeleteCoreDefinitionRequest(i0 *greengrass.DeleteCoreDefinitionInput) (r0 *request.Request, r1 *greengrass.DeleteCoreDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCoreDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.DeleteCoreDefinitionOutput)
	return
}

func (d *GreengrassDouble) DeleteCoreDefinitionWithContext(i0 context.Context, i1 *greengrass.DeleteCoreDefinitionInput, i2 ...request.Option) (r0 *greengrass.DeleteCoreDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCoreDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.DeleteCoreDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeDeleteCoreDefinitionWithContext(ctx context.Context, in *greengrass.DeleteCoreDefinitionInput, _ ...request.Option) (*greengrass.DeleteCoreDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteCoreDefinition cancelled", ctx.Err())
	default:
		return d.DeleteCoreDefinition(in)
	}
}

func (d *GreengrassDouble) DeleteDeviceDefinition(i0 *greengrass.DeleteDeviceDefinitionInput) (r0 *greengrass.DeleteDeviceDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDeviceDefinition", i0)
	r0, _ = returns[0].(*greengrass.DeleteDeviceDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) DeleteDeviceDefinitionRequest(i0 *greengrass.DeleteDeviceDefinitionInput) (r0 *request.Request, r1 *greengrass.DeleteDeviceDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDeviceDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.DeleteDeviceDefinitionOutput)
	return
}

func (d *GreengrassDouble) DeleteDeviceDefinitionWithContext(i0 context.Context, i1 *greengrass.DeleteDeviceDefinitionInput, i2 ...request.Option) (r0 *greengrass.DeleteDeviceDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDeviceDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.DeleteDeviceDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeDeleteDeviceDefinitionWithContext(ctx context.Context, in *greengrass.DeleteDeviceDefinitionInput, _ ...request.Option) (*greengrass.DeleteDeviceDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDeviceDefinition cancelled", ctx.Err())
	default:
		return d.DeleteDeviceDefinition(in)
	}
}

func (d *GreengrassDouble) DeleteFunctionDefinition(i0 *greengrass.DeleteFunctionDefinitionInput) (r0 *greengrass.DeleteFunctionDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFunctionDefinition", i0)
	r0, _ = returns[0].(*greengrass.DeleteFunctionDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) DeleteFunctionDefinitionRequest(i0 *greengrass.DeleteFunctionDefinitionInput) (r0 *request.Request, r1 *greengrass.DeleteFunctionDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFunctionDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.DeleteFunctionDefinitionOutput)
	return
}

func (d *GreengrassDouble) DeleteFunctionDefinitionWithContext(i0 context.Context, i1 *greengrass.DeleteFunctionDefinitionInput, i2 ...request.Option) (r0 *greengrass.DeleteFunctionDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFunctionDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.DeleteFunctionDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeDeleteFunctionDefinitionWithContext(ctx context.Context, in *greengrass.DeleteFunctionDefinitionInput, _ ...request.Option) (*greengrass.DeleteFunctionDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteFunctionDefinition cancelled", ctx.Err())
	default:
		return d.DeleteFunctionDefinition(in)
	}
}

func (d *GreengrassDouble) DeleteGroup(i0 *greengrass.DeleteGroupInput) (r0 *greengrass.DeleteGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGroup", i0)
	r0, _ = returns[0].(*greengrass.DeleteGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) DeleteGroupRequest(i0 *greengrass.DeleteGroupInput) (r0 *request.Request, r1 *greengrass.DeleteGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.DeleteGroupOutput)
	return
}

func (d *GreengrassDouble) DeleteGroupWithContext(i0 context.Context, i1 *greengrass.DeleteGroupInput, i2 ...request.Option) (r0 *greengrass.DeleteGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.DeleteGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeDeleteGroupWithContext(ctx context.Context, in *greengrass.DeleteGroupInput, _ ...request.Option) (*greengrass.DeleteGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteGroup cancelled", ctx.Err())
	default:
		return d.DeleteGroup(in)
	}
}

func (d *GreengrassDouble) DeleteLoggerDefinition(i0 *greengrass.DeleteLoggerDefinitionInput) (r0 *greengrass.DeleteLoggerDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLoggerDefinition", i0)
	r0, _ = returns[0].(*greengrass.DeleteLoggerDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) DeleteLoggerDefinitionRequest(i0 *greengrass.DeleteLoggerDefinitionInput) (r0 *request.Request, r1 *greengrass.DeleteLoggerDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLoggerDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.DeleteLoggerDefinitionOutput)
	return
}

func (d *GreengrassDouble) DeleteLoggerDefinitionWithContext(i0 context.Context, i1 *greengrass.DeleteLoggerDefinitionInput, i2 ...request.Option) (r0 *greengrass.DeleteLoggerDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLoggerDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.DeleteLoggerDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeDeleteLoggerDefinitionWithContext(ctx context.Context, in *greengrass.DeleteLoggerDefinitionInput, _ ...request.Option) (*greengrass.DeleteLoggerDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteLoggerDefinition cancelled", ctx.Err())
	default:
		return d.DeleteLoggerDefinition(in)
	}
}

func (d *GreengrassDouble) DeleteResourceDefinition(i0 *greengrass.DeleteResourceDefinitionInput) (r0 *greengrass.DeleteResourceDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResourceDefinition", i0)
	r0, _ = returns[0].(*greengrass.DeleteResourceDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) DeleteResourceDefinitionRequest(i0 *greengrass.DeleteResourceDefinitionInput) (r0 *request.Request, r1 *greengrass.DeleteResourceDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResourceDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.DeleteResourceDefinitionOutput)
	return
}

func (d *GreengrassDouble) DeleteResourceDefinitionWithContext(i0 context.Context, i1 *greengrass.DeleteResourceDefinitionInput, i2 ...request.Option) (r0 *greengrass.DeleteResourceDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResourceDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.DeleteResourceDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeDeleteResourceDefinitionWithContext(ctx context.Context, in *greengrass.DeleteResourceDefinitionInput, _ ...request.Option) (*greengrass.DeleteResourceDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteResourceDefinition cancelled", ctx.Err())
	default:
		return d.DeleteResourceDefinition(in)
	}
}

func (d *GreengrassDouble) DeleteSubscriptionDefinition(i0 *greengrass.DeleteSubscriptionDefinitionInput) (r0 *greengrass.DeleteSubscriptionDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSubscriptionDefinition", i0)
	r0, _ = returns[0].(*greengrass.DeleteSubscriptionDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) DeleteSubscriptionDefinitionRequest(i0 *greengrass.DeleteSubscriptionDefinitionInput) (r0 *request.Request, r1 *greengrass.DeleteSubscriptionDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSubscriptionDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.DeleteSubscriptionDefinitionOutput)
	return
}

func (d *GreengrassDouble) DeleteSubscriptionDefinitionWithContext(i0 context.Context, i1 *greengrass.DeleteSubscriptionDefinitionInput, i2 ...request.Option) (r0 *greengrass.DeleteSubscriptionDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSubscriptionDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.DeleteSubscriptionDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeDeleteSubscriptionDefinitionWithContext(ctx context.Context, in *greengrass.DeleteSubscriptionDefinitionInput, _ ...request.Option) (*greengrass.DeleteSubscriptionDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteSubscriptionDefinition cancelled", ctx.Err())
	default:
		return d.DeleteSubscriptionDefinition(in)
	}
}

func (d *GreengrassDouble) DisassociateRoleFromGroup(i0 *greengrass.DisassociateRoleFromGroupInput) (r0 *greengrass.DisassociateRoleFromGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateRoleFromGroup", i0)
	r0, _ = returns[0].(*greengrass.DisassociateRoleFromGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) DisassociateRoleFromGroupRequest(i0 *greengrass.DisassociateRoleFromGroupInput) (r0 *request.Request, r1 *greengrass.DisassociateRoleFromGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateRoleFromGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.DisassociateRoleFromGroupOutput)
	return
}

func (d *GreengrassDouble) DisassociateRoleFromGroupWithContext(i0 context.Context, i1 *greengrass.DisassociateRoleFromGroupInput, i2 ...request.Option) (r0 *greengrass.DisassociateRoleFromGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateRoleFromGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.DisassociateRoleFromGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeDisassociateRoleFromGroupWithContext(ctx context.Context, in *greengrass.DisassociateRoleFromGroupInput, _ ...request.Option) (*greengrass.DisassociateRoleFromGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateRoleFromGroup cancelled", ctx.Err())
	default:
		return d.DisassociateRoleFromGroup(in)
	}
}

func (d *GreengrassDouble) DisassociateServiceRoleFromAccount(i0 *greengrass.DisassociateServiceRoleFromAccountInput) (r0 *greengrass.DisassociateServiceRoleFromAccountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateServiceRoleFromAccount", i0)
	r0, _ = returns[0].(*greengrass.DisassociateServiceRoleFromAccountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) DisassociateServiceRoleFromAccountRequest(i0 *greengrass.DisassociateServiceRoleFromAccountInput) (r0 *request.Request, r1 *greengrass.DisassociateServiceRoleFromAccountOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateServiceRoleFromAccountRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.DisassociateServiceRoleFromAccountOutput)
	return
}

func (d *GreengrassDouble) DisassociateServiceRoleFromAccountWithContext(i0 context.Context, i1 *greengrass.DisassociateServiceRoleFromAccountInput, i2 ...request.Option) (r0 *greengrass.DisassociateServiceRoleFromAccountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateServiceRoleFromAccountWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.DisassociateServiceRoleFromAccountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeDisassociateServiceRoleFromAccountWithContext(ctx context.Context, in *greengrass.DisassociateServiceRoleFromAccountInput, _ ...request.Option) (*greengrass.DisassociateServiceRoleFromAccountOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateServiceRoleFromAccount cancelled", ctx.Err())
	default:
		return d.DisassociateServiceRoleFromAccount(in)
	}
}

func (d *GreengrassDouble) GetAssociatedRole(i0 *greengrass.GetAssociatedRoleInput) (r0 *greengrass.GetAssociatedRoleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAssociatedRole", i0)
	r0, _ = returns[0].(*greengrass.GetAssociatedRoleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) GetAssociatedRoleRequest(i0 *greengrass.GetAssociatedRoleInput) (r0 *request.Request, r1 *greengrass.GetAssociatedRoleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAssociatedRoleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.GetAssociatedRoleOutput)
	return
}

func (d *GreengrassDouble) GetAssociatedRoleWithContext(i0 context.Context, i1 *greengrass.GetAssociatedRoleInput, i2 ...request.Option) (r0 *greengrass.GetAssociatedRoleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAssociatedRoleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.GetAssociatedRoleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeGetAssociatedRoleWithContext(ctx context.Context, in *greengrass.GetAssociatedRoleInput, _ ...request.Option) (*greengrass.GetAssociatedRoleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetAssociatedRole cancelled", ctx.Err())
	default:
		return d.GetAssociatedRole(in)
	}
}

func (d *GreengrassDouble) GetBulkDeploymentStatus(i0 *greengrass.GetBulkDeploymentStatusInput) (r0 *greengrass.GetBulkDeploymentStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBulkDeploymentStatus", i0)
	r0, _ = returns[0].(*greengrass.GetBulkDeploymentStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) GetBulkDeploymentStatusRequest(i0 *greengrass.GetBulkDeploymentStatusInput) (r0 *request.Request, r1 *greengrass.GetBulkDeploymentStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBulkDeploymentStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.GetBulkDeploymentStatusOutput)
	return
}

func (d *GreengrassDouble) GetBulkDeploymentStatusWithContext(i0 context.Context, i1 *greengrass.GetBulkDeploymentStatusInput, i2 ...request.Option) (r0 *greengrass.GetBulkDeploymentStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBulkDeploymentStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.GetBulkDeploymentStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeGetBulkDeploymentStatusWithContext(ctx context.Context, in *greengrass.GetBulkDeploymentStatusInput, _ ...request.Option) (*greengrass.GetBulkDeploymentStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBulkDeploymentStatus cancelled", ctx.Err())
	default:
		return d.GetBulkDeploymentStatus(in)
	}
}

func (d *GreengrassDouble) GetConnectivityInfo(i0 *greengrass.GetConnectivityInfoInput) (r0 *greengrass.GetConnectivityInfoOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConnectivityInfo", i0)
	r0, _ = returns[0].(*greengrass.GetConnectivityInfoOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) GetConnectivityInfoRequest(i0 *greengrass.GetConnectivityInfoInput) (r0 *request.Request, r1 *greengrass.GetConnectivityInfoOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConnectivityInfoRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.GetConnectivityInfoOutput)
	return
}

func (d *GreengrassDouble) GetConnectivityInfoWithContext(i0 context.Context, i1 *greengrass.GetConnectivityInfoInput, i2 ...request.Option) (r0 *greengrass.GetConnectivityInfoOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConnectivityInfoWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.GetConnectivityInfoOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeGetConnectivityInfoWithContext(ctx context.Context, in *greengrass.GetConnectivityInfoInput, _ ...request.Option) (*greengrass.GetConnectivityInfoOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetConnectivityInfo cancelled", ctx.Err())
	default:
		return d.GetConnectivityInfo(in)
	}
}

func (d *GreengrassDouble) GetConnectorDefinition(i0 *greengrass.GetConnectorDefinitionInput) (r0 *greengrass.GetConnectorDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConnectorDefinition", i0)
	r0, _ = returns[0].(*greengrass.GetConnectorDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) GetConnectorDefinitionRequest(i0 *greengrass.GetConnectorDefinitionInput) (r0 *request.Request, r1 *greengrass.GetConnectorDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConnectorDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.GetConnectorDefinitionOutput)
	return
}

func (d *GreengrassDouble) GetConnectorDefinitionVersion(i0 *greengrass.GetConnectorDefinitionVersionInput) (r0 *greengrass.GetConnectorDefinitionVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConnectorDefinitionVersion", i0)
	r0, _ = returns[0].(*greengrass.GetConnectorDefinitionVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) GetConnectorDefinitionVersionRequest(i0 *greengrass.GetConnectorDefinitionVersionInput) (r0 *request.Request, r1 *greengrass.GetConnectorDefinitionVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConnectorDefinitionVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.GetConnectorDefinitionVersionOutput)
	return
}

func (d *GreengrassDouble) GetConnectorDefinitionVersionWithContext(i0 context.Context, i1 *greengrass.GetConnectorDefinitionVersionInput, i2 ...request.Option) (r0 *greengrass.GetConnectorDefinitionVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConnectorDefinitionVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.GetConnectorDefinitionVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeGetConnectorDefinitionVersionWithContext(ctx context.Context, in *greengrass.GetConnectorDefinitionVersionInput, _ ...request.Option) (*greengrass.GetConnectorDefinitionVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetConnectorDefinitionVersion cancelled", ctx.Err())
	default:
		return d.GetConnectorDefinitionVersion(in)
	}
}

func (d *GreengrassDouble) GetConnectorDefinitionWithContext(i0 context.Context, i1 *greengrass.GetConnectorDefinitionInput, i2 ...request.Option) (r0 *greengrass.GetConnectorDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConnectorDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.GetConnectorDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeGetConnectorDefinitionWithContext(ctx context.Context, in *greengrass.GetConnectorDefinitionInput, _ ...request.Option) (*greengrass.GetConnectorDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetConnectorDefinition cancelled", ctx.Err())
	default:
		return d.GetConnectorDefinition(in)
	}
}

func (d *GreengrassDouble) GetCoreDefinition(i0 *greengrass.GetCoreDefinitionInput) (r0 *greengrass.GetCoreDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCoreDefinition", i0)
	r0, _ = returns[0].(*greengrass.GetCoreDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) GetCoreDefinitionRequest(i0 *greengrass.GetCoreDefinitionInput) (r0 *request.Request, r1 *greengrass.GetCoreDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCoreDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.GetCoreDefinitionOutput)
	return
}

func (d *GreengrassDouble) GetCoreDefinitionVersion(i0 *greengrass.GetCoreDefinitionVersionInput) (r0 *greengrass.GetCoreDefinitionVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCoreDefinitionVersion", i0)
	r0, _ = returns[0].(*greengrass.GetCoreDefinitionVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) GetCoreDefinitionVersionRequest(i0 *greengrass.GetCoreDefinitionVersionInput) (r0 *request.Request, r1 *greengrass.GetCoreDefinitionVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCoreDefinitionVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.GetCoreDefinitionVersionOutput)
	return
}

func (d *GreengrassDouble) GetCoreDefinitionVersionWithContext(i0 context.Context, i1 *greengrass.GetCoreDefinitionVersionInput, i2 ...request.Option) (r0 *greengrass.GetCoreDefinitionVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCoreDefinitionVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.GetCoreDefinitionVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeGetCoreDefinitionVersionWithContext(ctx context.Context, in *greengrass.GetCoreDefinitionVersionInput, _ ...request.Option) (*greengrass.GetCoreDefinitionVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetCoreDefinitionVersion cancelled", ctx.Err())
	default:
		return d.GetCoreDefinitionVersion(in)
	}
}

func (d *GreengrassDouble) GetCoreDefinitionWithContext(i0 context.Context, i1 *greengrass.GetCoreDefinitionInput, i2 ...request.Option) (r0 *greengrass.GetCoreDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCoreDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.GetCoreDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeGetCoreDefinitionWithContext(ctx context.Context, in *greengrass.GetCoreDefinitionInput, _ ...request.Option) (*greengrass.GetCoreDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetCoreDefinition cancelled", ctx.Err())
	default:
		return d.GetCoreDefinition(in)
	}
}

func (d *GreengrassDouble) GetDeploymentStatus(i0 *greengrass.GetDeploymentStatusInput) (r0 *greengrass.GetDeploymentStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeploymentStatus", i0)
	r0, _ = returns[0].(*greengrass.GetDeploymentStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) GetDeploymentStatusRequest(i0 *greengrass.GetDeploymentStatusInput) (r0 *request.Request, r1 *greengrass.GetDeploymentStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeploymentStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.GetDeploymentStatusOutput)
	return
}

func (d *GreengrassDouble) GetDeploymentStatusWithContext(i0 context.Context, i1 *greengrass.GetDeploymentStatusInput, i2 ...request.Option) (r0 *greengrass.GetDeploymentStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeploymentStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.GetDeploymentStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeGetDeploymentStatusWithContext(ctx context.Context, in *greengrass.GetDeploymentStatusInput, _ ...request.Option) (*greengrass.GetDeploymentStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDeploymentStatus cancelled", ctx.Err())
	default:
		return d.GetDeploymentStatus(in)
	}
}

func (d *GreengrassDouble) GetDeviceDefinition(i0 *greengrass.GetDeviceDefinitionInput) (r0 *greengrass.GetDeviceDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeviceDefinition", i0)
	r0, _ = returns[0].(*greengrass.GetDeviceDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) GetDeviceDefinitionRequest(i0 *greengrass.GetDeviceDefinitionInput) (r0 *request.Request, r1 *greengrass.GetDeviceDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeviceDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.GetDeviceDefinitionOutput)
	return
}

func (d *GreengrassDouble) GetDeviceDefinitionVersion(i0 *greengrass.GetDeviceDefinitionVersionInput) (r0 *greengrass.GetDeviceDefinitionVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeviceDefinitionVersion", i0)
	r0, _ = returns[0].(*greengrass.GetDeviceDefinitionVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) GetDeviceDefinitionVersionRequest(i0 *greengrass.GetDeviceDefinitionVersionInput) (r0 *request.Request, r1 *greengrass.GetDeviceDefinitionVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeviceDefinitionVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.GetDeviceDefinitionVersionOutput)
	return
}

func (d *GreengrassDouble) GetDeviceDefinitionVersionWithContext(i0 context.Context, i1 *greengrass.GetDeviceDefinitionVersionInput, i2 ...request.Option) (r0 *greengrass.GetDeviceDefinitionVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeviceDefinitionVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.GetDeviceDefinitionVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeGetDeviceDefinitionVersionWithContext(ctx context.Context, in *greengrass.GetDeviceDefinitionVersionInput, _ ...request.Option) (*greengrass.GetDeviceDefinitionVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDeviceDefinitionVersion cancelled", ctx.Err())
	default:
		return d.GetDeviceDefinitionVersion(in)
	}
}

func (d *GreengrassDouble) GetDeviceDefinitionWithContext(i0 context.Context, i1 *greengrass.GetDeviceDefinitionInput, i2 ...request.Option) (r0 *greengrass.GetDeviceDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeviceDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.GetDeviceDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeGetDeviceDefinitionWithContext(ctx context.Context, in *greengrass.GetDeviceDefinitionInput, _ ...request.Option) (*greengrass.GetDeviceDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDeviceDefinition cancelled", ctx.Err())
	default:
		return d.GetDeviceDefinition(in)
	}
}

func (d *GreengrassDouble) GetFunctionDefinition(i0 *greengrass.GetFunctionDefinitionInput) (r0 *greengrass.GetFunctionDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFunctionDefinition", i0)
	r0, _ = returns[0].(*greengrass.GetFunctionDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) GetFunctionDefinitionRequest(i0 *greengrass.GetFunctionDefinitionInput) (r0 *request.Request, r1 *greengrass.GetFunctionDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFunctionDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.GetFunctionDefinitionOutput)
	return
}

func (d *GreengrassDouble) GetFunctionDefinitionVersion(i0 *greengrass.GetFunctionDefinitionVersionInput) (r0 *greengrass.GetFunctionDefinitionVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFunctionDefinitionVersion", i0)
	r0, _ = returns[0].(*greengrass.GetFunctionDefinitionVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) GetFunctionDefinitionVersionRequest(i0 *greengrass.GetFunctionDefinitionVersionInput) (r0 *request.Request, r1 *greengrass.GetFunctionDefinitionVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFunctionDefinitionVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.GetFunctionDefinitionVersionOutput)
	return
}

func (d *GreengrassDouble) GetFunctionDefinitionVersionWithContext(i0 context.Context, i1 *greengrass.GetFunctionDefinitionVersionInput, i2 ...request.Option) (r0 *greengrass.GetFunctionDefinitionVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFunctionDefinitionVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.GetFunctionDefinitionVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeGetFunctionDefinitionVersionWithContext(ctx context.Context, in *greengrass.GetFunctionDefinitionVersionInput, _ ...request.Option) (*greengrass.GetFunctionDefinitionVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetFunctionDefinitionVersion cancelled", ctx.Err())
	default:
		return d.GetFunctionDefinitionVersion(in)
	}
}

func (d *GreengrassDouble) GetFunctionDefinitionWithContext(i0 context.Context, i1 *greengrass.GetFunctionDefinitionInput, i2 ...request.Option) (r0 *greengrass.GetFunctionDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFunctionDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.GetFunctionDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeGetFunctionDefinitionWithContext(ctx context.Context, in *greengrass.GetFunctionDefinitionInput, _ ...request.Option) (*greengrass.GetFunctionDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetFunctionDefinition cancelled", ctx.Err())
	default:
		return d.GetFunctionDefinition(in)
	}
}

func (d *GreengrassDouble) GetGroup(i0 *greengrass.GetGroupInput) (r0 *greengrass.GetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGroup", i0)
	r0, _ = returns[0].(*greengrass.GetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) GetGroupCertificateAuthority(i0 *greengrass.GetGroupCertificateAuthorityInput) (r0 *greengrass.GetGroupCertificateAuthorityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGroupCertificateAuthority", i0)
	r0, _ = returns[0].(*greengrass.GetGroupCertificateAuthorityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) GetGroupCertificateAuthorityRequest(i0 *greengrass.GetGroupCertificateAuthorityInput) (r0 *request.Request, r1 *greengrass.GetGroupCertificateAuthorityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGroupCertificateAuthorityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.GetGroupCertificateAuthorityOutput)
	return
}

func (d *GreengrassDouble) GetGroupCertificateAuthorityWithContext(i0 context.Context, i1 *greengrass.GetGroupCertificateAuthorityInput, i2 ...request.Option) (r0 *greengrass.GetGroupCertificateAuthorityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGroupCertificateAuthorityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.GetGroupCertificateAuthorityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeGetGroupCertificateAuthorityWithContext(ctx context.Context, in *greengrass.GetGroupCertificateAuthorityInput, _ ...request.Option) (*greengrass.GetGroupCertificateAuthorityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetGroupCertificateAuthority cancelled", ctx.Err())
	default:
		return d.GetGroupCertificateAuthority(in)
	}
}

func (d *GreengrassDouble) GetGroupCertificateConfiguration(i0 *greengrass.GetGroupCertificateConfigurationInput) (r0 *greengrass.GetGroupCertificateConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGroupCertificateConfiguration", i0)
	r0, _ = returns[0].(*greengrass.GetGroupCertificateConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) GetGroupCertificateConfigurationRequest(i0 *greengrass.GetGroupCertificateConfigurationInput) (r0 *request.Request, r1 *greengrass.GetGroupCertificateConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGroupCertificateConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.GetGroupCertificateConfigurationOutput)
	return
}

func (d *GreengrassDouble) GetGroupCertificateConfigurationWithContext(i0 context.Context, i1 *greengrass.GetGroupCertificateConfigurationInput, i2 ...request.Option) (r0 *greengrass.GetGroupCertificateConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGroupCertificateConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.GetGroupCertificateConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeGetGroupCertificateConfigurationWithContext(ctx context.Context, in *greengrass.GetGroupCertificateConfigurationInput, _ ...request.Option) (*greengrass.GetGroupCertificateConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetGroupCertificateConfiguration cancelled", ctx.Err())
	default:
		return d.GetGroupCertificateConfiguration(in)
	}
}

func (d *GreengrassDouble) GetGroupRequest(i0 *greengrass.GetGroupInput) (r0 *request.Request, r1 *greengrass.GetGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.GetGroupOutput)
	return
}

func (d *GreengrassDouble) GetGroupVersion(i0 *greengrass.GetGroupVersionInput) (r0 *greengrass.GetGroupVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGroupVersion", i0)
	r0, _ = returns[0].(*greengrass.GetGroupVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) GetGroupVersionRequest(i0 *greengrass.GetGroupVersionInput) (r0 *request.Request, r1 *greengrass.GetGroupVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGroupVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.GetGroupVersionOutput)
	return
}

func (d *GreengrassDouble) GetGroupVersionWithContext(i0 context.Context, i1 *greengrass.GetGroupVersionInput, i2 ...request.Option) (r0 *greengrass.GetGroupVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGroupVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.GetGroupVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeGetGroupVersionWithContext(ctx context.Context, in *greengrass.GetGroupVersionInput, _ ...request.Option) (*greengrass.GetGroupVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetGroupVersion cancelled", ctx.Err())
	default:
		return d.GetGroupVersion(in)
	}
}

func (d *GreengrassDouble) GetGroupWithContext(i0 context.Context, i1 *greengrass.GetGroupInput, i2 ...request.Option) (r0 *greengrass.GetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.GetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeGetGroupWithContext(ctx context.Context, in *greengrass.GetGroupInput, _ ...request.Option) (*greengrass.GetGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetGroup cancelled", ctx.Err())
	default:
		return d.GetGroup(in)
	}
}

func (d *GreengrassDouble) GetLoggerDefinition(i0 *greengrass.GetLoggerDefinitionInput) (r0 *greengrass.GetLoggerDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLoggerDefinition", i0)
	r0, _ = returns[0].(*greengrass.GetLoggerDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) GetLoggerDefinitionRequest(i0 *greengrass.GetLoggerDefinitionInput) (r0 *request.Request, r1 *greengrass.GetLoggerDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLoggerDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.GetLoggerDefinitionOutput)
	return
}

func (d *GreengrassDouble) GetLoggerDefinitionVersion(i0 *greengrass.GetLoggerDefinitionVersionInput) (r0 *greengrass.GetLoggerDefinitionVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLoggerDefinitionVersion", i0)
	r0, _ = returns[0].(*greengrass.GetLoggerDefinitionVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) GetLoggerDefinitionVersionRequest(i0 *greengrass.GetLoggerDefinitionVersionInput) (r0 *request.Request, r1 *greengrass.GetLoggerDefinitionVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLoggerDefinitionVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.GetLoggerDefinitionVersionOutput)
	return
}

func (d *GreengrassDouble) GetLoggerDefinitionVersionWithContext(i0 context.Context, i1 *greengrass.GetLoggerDefinitionVersionInput, i2 ...request.Option) (r0 *greengrass.GetLoggerDefinitionVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLoggerDefinitionVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.GetLoggerDefinitionVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeGetLoggerDefinitionVersionWithContext(ctx context.Context, in *greengrass.GetLoggerDefinitionVersionInput, _ ...request.Option) (*greengrass.GetLoggerDefinitionVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetLoggerDefinitionVersion cancelled", ctx.Err())
	default:
		return d.GetLoggerDefinitionVersion(in)
	}
}

func (d *GreengrassDouble) GetLoggerDefinitionWithContext(i0 context.Context, i1 *greengrass.GetLoggerDefinitionInput, i2 ...request.Option) (r0 *greengrass.GetLoggerDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLoggerDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.GetLoggerDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeGetLoggerDefinitionWithContext(ctx context.Context, in *greengrass.GetLoggerDefinitionInput, _ ...request.Option) (*greengrass.GetLoggerDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetLoggerDefinition cancelled", ctx.Err())
	default:
		return d.GetLoggerDefinition(in)
	}
}

func (d *GreengrassDouble) GetResourceDefinition(i0 *greengrass.GetResourceDefinitionInput) (r0 *greengrass.GetResourceDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResourceDefinition", i0)
	r0, _ = returns[0].(*greengrass.GetResourceDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) GetResourceDefinitionRequest(i0 *greengrass.GetResourceDefinitionInput) (r0 *request.Request, r1 *greengrass.GetResourceDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResourceDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.GetResourceDefinitionOutput)
	return
}

func (d *GreengrassDouble) GetResourceDefinitionVersion(i0 *greengrass.GetResourceDefinitionVersionInput) (r0 *greengrass.GetResourceDefinitionVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResourceDefinitionVersion", i0)
	r0, _ = returns[0].(*greengrass.GetResourceDefinitionVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) GetResourceDefinitionVersionRequest(i0 *greengrass.GetResourceDefinitionVersionInput) (r0 *request.Request, r1 *greengrass.GetResourceDefinitionVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResourceDefinitionVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.GetResourceDefinitionVersionOutput)
	return
}

func (d *GreengrassDouble) GetResourceDefinitionVersionWithContext(i0 context.Context, i1 *greengrass.GetResourceDefinitionVersionInput, i2 ...request.Option) (r0 *greengrass.GetResourceDefinitionVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResourceDefinitionVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.GetResourceDefinitionVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeGetResourceDefinitionVersionWithContext(ctx context.Context, in *greengrass.GetResourceDefinitionVersionInput, _ ...request.Option) (*greengrass.GetResourceDefinitionVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetResourceDefinitionVersion cancelled", ctx.Err())
	default:
		return d.GetResourceDefinitionVersion(in)
	}
}

func (d *GreengrassDouble) GetResourceDefinitionWithContext(i0 context.Context, i1 *greengrass.GetResourceDefinitionInput, i2 ...request.Option) (r0 *greengrass.GetResourceDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetResourceDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.GetResourceDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeGetResourceDefinitionWithContext(ctx context.Context, in *greengrass.GetResourceDefinitionInput, _ ...request.Option) (*greengrass.GetResourceDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetResourceDefinition cancelled", ctx.Err())
	default:
		return d.GetResourceDefinition(in)
	}
}

func (d *GreengrassDouble) GetServiceRoleForAccount(i0 *greengrass.GetServiceRoleForAccountInput) (r0 *greengrass.GetServiceRoleForAccountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetServiceRoleForAccount", i0)
	r0, _ = returns[0].(*greengrass.GetServiceRoleForAccountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) GetServiceRoleForAccountRequest(i0 *greengrass.GetServiceRoleForAccountInput) (r0 *request.Request, r1 *greengrass.GetServiceRoleForAccountOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetServiceRoleForAccountRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.GetServiceRoleForAccountOutput)
	return
}

func (d *GreengrassDouble) GetServiceRoleForAccountWithContext(i0 context.Context, i1 *greengrass.GetServiceRoleForAccountInput, i2 ...request.Option) (r0 *greengrass.GetServiceRoleForAccountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetServiceRoleForAccountWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.GetServiceRoleForAccountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeGetServiceRoleForAccountWithContext(ctx context.Context, in *greengrass.GetServiceRoleForAccountInput, _ ...request.Option) (*greengrass.GetServiceRoleForAccountOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetServiceRoleForAccount cancelled", ctx.Err())
	default:
		return d.GetServiceRoleForAccount(in)
	}
}

func (d *GreengrassDouble) GetSubscriptionDefinition(i0 *greengrass.GetSubscriptionDefinitionInput) (r0 *greengrass.GetSubscriptionDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSubscriptionDefinition", i0)
	r0, _ = returns[0].(*greengrass.GetSubscriptionDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) GetSubscriptionDefinitionRequest(i0 *greengrass.GetSubscriptionDefinitionInput) (r0 *request.Request, r1 *greengrass.GetSubscriptionDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSubscriptionDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.GetSubscriptionDefinitionOutput)
	return
}

func (d *GreengrassDouble) GetSubscriptionDefinitionVersion(i0 *greengrass.GetSubscriptionDefinitionVersionInput) (r0 *greengrass.GetSubscriptionDefinitionVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSubscriptionDefinitionVersion", i0)
	r0, _ = returns[0].(*greengrass.GetSubscriptionDefinitionVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) GetSubscriptionDefinitionVersionRequest(i0 *greengrass.GetSubscriptionDefinitionVersionInput) (r0 *request.Request, r1 *greengrass.GetSubscriptionDefinitionVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSubscriptionDefinitionVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.GetSubscriptionDefinitionVersionOutput)
	return
}

func (d *GreengrassDouble) GetSubscriptionDefinitionVersionWithContext(i0 context.Context, i1 *greengrass.GetSubscriptionDefinitionVersionInput, i2 ...request.Option) (r0 *greengrass.GetSubscriptionDefinitionVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSubscriptionDefinitionVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.GetSubscriptionDefinitionVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeGetSubscriptionDefinitionVersionWithContext(ctx context.Context, in *greengrass.GetSubscriptionDefinitionVersionInput, _ ...request.Option) (*greengrass.GetSubscriptionDefinitionVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetSubscriptionDefinitionVersion cancelled", ctx.Err())
	default:
		return d.GetSubscriptionDefinitionVersion(in)
	}
}

func (d *GreengrassDouble) GetSubscriptionDefinitionWithContext(i0 context.Context, i1 *greengrass.GetSubscriptionDefinitionInput, i2 ...request.Option) (r0 *greengrass.GetSubscriptionDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSubscriptionDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.GetSubscriptionDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeGetSubscriptionDefinitionWithContext(ctx context.Context, in *greengrass.GetSubscriptionDefinitionInput, _ ...request.Option) (*greengrass.GetSubscriptionDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetSubscriptionDefinition cancelled", ctx.Err())
	default:
		return d.GetSubscriptionDefinition(in)
	}
}

func (d *GreengrassDouble) ListBulkDeploymentDetailedReports(i0 *greengrass.ListBulkDeploymentDetailedReportsInput) (r0 *greengrass.ListBulkDeploymentDetailedReportsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBulkDeploymentDetailedReports", i0)
	r0, _ = returns[0].(*greengrass.ListBulkDeploymentDetailedReportsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) ListBulkDeploymentDetailedReportsRequest(i0 *greengrass.ListBulkDeploymentDetailedReportsInput) (r0 *request.Request, r1 *greengrass.ListBulkDeploymentDetailedReportsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBulkDeploymentDetailedReportsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.ListBulkDeploymentDetailedReportsOutput)
	return
}

func (d *GreengrassDouble) ListBulkDeploymentDetailedReportsWithContext(i0 context.Context, i1 *greengrass.ListBulkDeploymentDetailedReportsInput, i2 ...request.Option) (r0 *greengrass.ListBulkDeploymentDetailedReportsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBulkDeploymentDetailedReportsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.ListBulkDeploymentDetailedReportsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeListBulkDeploymentDetailedReportsWithContext(ctx context.Context, in *greengrass.ListBulkDeploymentDetailedReportsInput, _ ...request.Option) (*greengrass.ListBulkDeploymentDetailedReportsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListBulkDeploymentDetailedReports cancelled", ctx.Err())
	default:
		return d.ListBulkDeploymentDetailedReports(in)
	}
}

func (d *GreengrassDouble) ListBulkDeployments(i0 *greengrass.ListBulkDeploymentsInput) (r0 *greengrass.ListBulkDeploymentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBulkDeployments", i0)
	r0, _ = returns[0].(*greengrass.ListBulkDeploymentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) ListBulkDeploymentsRequest(i0 *greengrass.ListBulkDeploymentsInput) (r0 *request.Request, r1 *greengrass.ListBulkDeploymentsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBulkDeploymentsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.ListBulkDeploymentsOutput)
	return
}

func (d *GreengrassDouble) ListBulkDeploymentsWithContext(i0 context.Context, i1 *greengrass.ListBulkDeploymentsInput, i2 ...request.Option) (r0 *greengrass.ListBulkDeploymentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBulkDeploymentsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.ListBulkDeploymentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeListBulkDeploymentsWithContext(ctx context.Context, in *greengrass.ListBulkDeploymentsInput, _ ...request.Option) (*greengrass.ListBulkDeploymentsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListBulkDeployments cancelled", ctx.Err())
	default:
		return d.ListBulkDeployments(in)
	}
}

func (d *GreengrassDouble) ListConnectorDefinitionVersions(i0 *greengrass.ListConnectorDefinitionVersionsInput) (r0 *greengrass.ListConnectorDefinitionVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListConnectorDefinitionVersions", i0)
	r0, _ = returns[0].(*greengrass.ListConnectorDefinitionVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) ListConnectorDefinitionVersionsRequest(i0 *greengrass.ListConnectorDefinitionVersionsInput) (r0 *request.Request, r1 *greengrass.ListConnectorDefinitionVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListConnectorDefinitionVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.ListConnectorDefinitionVersionsOutput)
	return
}

func (d *GreengrassDouble) ListConnectorDefinitionVersionsWithContext(i0 context.Context, i1 *greengrass.ListConnectorDefinitionVersionsInput, i2 ...request.Option) (r0 *greengrass.ListConnectorDefinitionVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListConnectorDefinitionVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.ListConnectorDefinitionVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeListConnectorDefinitionVersionsWithContext(ctx context.Context, in *greengrass.ListConnectorDefinitionVersionsInput, _ ...request.Option) (*greengrass.ListConnectorDefinitionVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListConnectorDefinitionVersions cancelled", ctx.Err())
	default:
		return d.ListConnectorDefinitionVersions(in)
	}
}

func (d *GreengrassDouble) ListConnectorDefinitions(i0 *greengrass.ListConnectorDefinitionsInput) (r0 *greengrass.ListConnectorDefinitionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListConnectorDefinitions", i0)
	r0, _ = returns[0].(*greengrass.ListConnectorDefinitionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) ListConnectorDefinitionsRequest(i0 *greengrass.ListConnectorDefinitionsInput) (r0 *request.Request, r1 *greengrass.ListConnectorDefinitionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListConnectorDefinitionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.ListConnectorDefinitionsOutput)
	return
}

func (d *GreengrassDouble) ListConnectorDefinitionsWithContext(i0 context.Context, i1 *greengrass.ListConnectorDefinitionsInput, i2 ...request.Option) (r0 *greengrass.ListConnectorDefinitionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListConnectorDefinitionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.ListConnectorDefinitionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeListConnectorDefinitionsWithContext(ctx context.Context, in *greengrass.ListConnectorDefinitionsInput, _ ...request.Option) (*greengrass.ListConnectorDefinitionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListConnectorDefinitions cancelled", ctx.Err())
	default:
		return d.ListConnectorDefinitions(in)
	}
}

func (d *GreengrassDouble) ListCoreDefinitionVersions(i0 *greengrass.ListCoreDefinitionVersionsInput) (r0 *greengrass.ListCoreDefinitionVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCoreDefinitionVersions", i0)
	r0, _ = returns[0].(*greengrass.ListCoreDefinitionVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) ListCoreDefinitionVersionsRequest(i0 *greengrass.ListCoreDefinitionVersionsInput) (r0 *request.Request, r1 *greengrass.ListCoreDefinitionVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCoreDefinitionVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.ListCoreDefinitionVersionsOutput)
	return
}

func (d *GreengrassDouble) ListCoreDefinitionVersionsWithContext(i0 context.Context, i1 *greengrass.ListCoreDefinitionVersionsInput, i2 ...request.Option) (r0 *greengrass.ListCoreDefinitionVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCoreDefinitionVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.ListCoreDefinitionVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeListCoreDefinitionVersionsWithContext(ctx context.Context, in *greengrass.ListCoreDefinitionVersionsInput, _ ...request.Option) (*greengrass.ListCoreDefinitionVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListCoreDefinitionVersions cancelled", ctx.Err())
	default:
		return d.ListCoreDefinitionVersions(in)
	}
}

func (d *GreengrassDouble) ListCoreDefinitions(i0 *greengrass.ListCoreDefinitionsInput) (r0 *greengrass.ListCoreDefinitionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCoreDefinitions", i0)
	r0, _ = returns[0].(*greengrass.ListCoreDefinitionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) ListCoreDefinitionsRequest(i0 *greengrass.ListCoreDefinitionsInput) (r0 *request.Request, r1 *greengrass.ListCoreDefinitionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCoreDefinitionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.ListCoreDefinitionsOutput)
	return
}

func (d *GreengrassDouble) ListCoreDefinitionsWithContext(i0 context.Context, i1 *greengrass.ListCoreDefinitionsInput, i2 ...request.Option) (r0 *greengrass.ListCoreDefinitionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCoreDefinitionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.ListCoreDefinitionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeListCoreDefinitionsWithContext(ctx context.Context, in *greengrass.ListCoreDefinitionsInput, _ ...request.Option) (*greengrass.ListCoreDefinitionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListCoreDefinitions cancelled", ctx.Err())
	default:
		return d.ListCoreDefinitions(in)
	}
}

func (d *GreengrassDouble) ListDeployments(i0 *greengrass.ListDeploymentsInput) (r0 *greengrass.ListDeploymentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeployments", i0)
	r0, _ = returns[0].(*greengrass.ListDeploymentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) ListDeploymentsRequest(i0 *greengrass.ListDeploymentsInput) (r0 *request.Request, r1 *greengrass.ListDeploymentsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeploymentsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.ListDeploymentsOutput)
	return
}

func (d *GreengrassDouble) ListDeploymentsWithContext(i0 context.Context, i1 *greengrass.ListDeploymentsInput, i2 ...request.Option) (r0 *greengrass.ListDeploymentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeploymentsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.ListDeploymentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeListDeploymentsWithContext(ctx context.Context, in *greengrass.ListDeploymentsInput, _ ...request.Option) (*greengrass.ListDeploymentsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDeployments cancelled", ctx.Err())
	default:
		return d.ListDeployments(in)
	}
}

func (d *GreengrassDouble) ListDeviceDefinitionVersions(i0 *greengrass.ListDeviceDefinitionVersionsInput) (r0 *greengrass.ListDeviceDefinitionVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeviceDefinitionVersions", i0)
	r0, _ = returns[0].(*greengrass.ListDeviceDefinitionVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) ListDeviceDefinitionVersionsRequest(i0 *greengrass.ListDeviceDefinitionVersionsInput) (r0 *request.Request, r1 *greengrass.ListDeviceDefinitionVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeviceDefinitionVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.ListDeviceDefinitionVersionsOutput)
	return
}

func (d *GreengrassDouble) ListDeviceDefinitionVersionsWithContext(i0 context.Context, i1 *greengrass.ListDeviceDefinitionVersionsInput, i2 ...request.Option) (r0 *greengrass.ListDeviceDefinitionVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeviceDefinitionVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.ListDeviceDefinitionVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeListDeviceDefinitionVersionsWithContext(ctx context.Context, in *greengrass.ListDeviceDefinitionVersionsInput, _ ...request.Option) (*greengrass.ListDeviceDefinitionVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDeviceDefinitionVersions cancelled", ctx.Err())
	default:
		return d.ListDeviceDefinitionVersions(in)
	}
}

func (d *GreengrassDouble) ListDeviceDefinitions(i0 *greengrass.ListDeviceDefinitionsInput) (r0 *greengrass.ListDeviceDefinitionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeviceDefinitions", i0)
	r0, _ = returns[0].(*greengrass.ListDeviceDefinitionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) ListDeviceDefinitionsRequest(i0 *greengrass.ListDeviceDefinitionsInput) (r0 *request.Request, r1 *greengrass.ListDeviceDefinitionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeviceDefinitionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.ListDeviceDefinitionsOutput)
	return
}

func (d *GreengrassDouble) ListDeviceDefinitionsWithContext(i0 context.Context, i1 *greengrass.ListDeviceDefinitionsInput, i2 ...request.Option) (r0 *greengrass.ListDeviceDefinitionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeviceDefinitionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.ListDeviceDefinitionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeListDeviceDefinitionsWithContext(ctx context.Context, in *greengrass.ListDeviceDefinitionsInput, _ ...request.Option) (*greengrass.ListDeviceDefinitionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDeviceDefinitions cancelled", ctx.Err())
	default:
		return d.ListDeviceDefinitions(in)
	}
}

func (d *GreengrassDouble) ListFunctionDefinitionVersions(i0 *greengrass.ListFunctionDefinitionVersionsInput) (r0 *greengrass.ListFunctionDefinitionVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFunctionDefinitionVersions", i0)
	r0, _ = returns[0].(*greengrass.ListFunctionDefinitionVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) ListFunctionDefinitionVersionsRequest(i0 *greengrass.ListFunctionDefinitionVersionsInput) (r0 *request.Request, r1 *greengrass.ListFunctionDefinitionVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFunctionDefinitionVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.ListFunctionDefinitionVersionsOutput)
	return
}

func (d *GreengrassDouble) ListFunctionDefinitionVersionsWithContext(i0 context.Context, i1 *greengrass.ListFunctionDefinitionVersionsInput, i2 ...request.Option) (r0 *greengrass.ListFunctionDefinitionVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFunctionDefinitionVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.ListFunctionDefinitionVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeListFunctionDefinitionVersionsWithContext(ctx context.Context, in *greengrass.ListFunctionDefinitionVersionsInput, _ ...request.Option) (*greengrass.ListFunctionDefinitionVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListFunctionDefinitionVersions cancelled", ctx.Err())
	default:
		return d.ListFunctionDefinitionVersions(in)
	}
}

func (d *GreengrassDouble) ListFunctionDefinitions(i0 *greengrass.ListFunctionDefinitionsInput) (r0 *greengrass.ListFunctionDefinitionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFunctionDefinitions", i0)
	r0, _ = returns[0].(*greengrass.ListFunctionDefinitionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) ListFunctionDefinitionsRequest(i0 *greengrass.ListFunctionDefinitionsInput) (r0 *request.Request, r1 *greengrass.ListFunctionDefinitionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFunctionDefinitionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.ListFunctionDefinitionsOutput)
	return
}

func (d *GreengrassDouble) ListFunctionDefinitionsWithContext(i0 context.Context, i1 *greengrass.ListFunctionDefinitionsInput, i2 ...request.Option) (r0 *greengrass.ListFunctionDefinitionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFunctionDefinitionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.ListFunctionDefinitionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeListFunctionDefinitionsWithContext(ctx context.Context, in *greengrass.ListFunctionDefinitionsInput, _ ...request.Option) (*greengrass.ListFunctionDefinitionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListFunctionDefinitions cancelled", ctx.Err())
	default:
		return d.ListFunctionDefinitions(in)
	}
}

func (d *GreengrassDouble) ListGroupCertificateAuthorities(i0 *greengrass.ListGroupCertificateAuthoritiesInput) (r0 *greengrass.ListGroupCertificateAuthoritiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupCertificateAuthorities", i0)
	r0, _ = returns[0].(*greengrass.ListGroupCertificateAuthoritiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) ListGroupCertificateAuthoritiesRequest(i0 *greengrass.ListGroupCertificateAuthoritiesInput) (r0 *request.Request, r1 *greengrass.ListGroupCertificateAuthoritiesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupCertificateAuthoritiesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.ListGroupCertificateAuthoritiesOutput)
	return
}

func (d *GreengrassDouble) ListGroupCertificateAuthoritiesWithContext(i0 context.Context, i1 *greengrass.ListGroupCertificateAuthoritiesInput, i2 ...request.Option) (r0 *greengrass.ListGroupCertificateAuthoritiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupCertificateAuthoritiesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.ListGroupCertificateAuthoritiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeListGroupCertificateAuthoritiesWithContext(ctx context.Context, in *greengrass.ListGroupCertificateAuthoritiesInput, _ ...request.Option) (*greengrass.ListGroupCertificateAuthoritiesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListGroupCertificateAuthorities cancelled", ctx.Err())
	default:
		return d.ListGroupCertificateAuthorities(in)
	}
}

func (d *GreengrassDouble) ListGroupVersions(i0 *greengrass.ListGroupVersionsInput) (r0 *greengrass.ListGroupVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupVersions", i0)
	r0, _ = returns[0].(*greengrass.ListGroupVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) ListGroupVersionsRequest(i0 *greengrass.ListGroupVersionsInput) (r0 *request.Request, r1 *greengrass.ListGroupVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.ListGroupVersionsOutput)
	return
}

func (d *GreengrassDouble) ListGroupVersionsWithContext(i0 context.Context, i1 *greengrass.ListGroupVersionsInput, i2 ...request.Option) (r0 *greengrass.ListGroupVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.ListGroupVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeListGroupVersionsWithContext(ctx context.Context, in *greengrass.ListGroupVersionsInput, _ ...request.Option) (*greengrass.ListGroupVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListGroupVersions cancelled", ctx.Err())
	default:
		return d.ListGroupVersions(in)
	}
}

func (d *GreengrassDouble) ListGroups(i0 *greengrass.ListGroupsInput) (r0 *greengrass.ListGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroups", i0)
	r0, _ = returns[0].(*greengrass.ListGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) ListGroupsRequest(i0 *greengrass.ListGroupsInput) (r0 *request.Request, r1 *greengrass.ListGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.ListGroupsOutput)
	return
}

func (d *GreengrassDouble) ListGroupsWithContext(i0 context.Context, i1 *greengrass.ListGroupsInput, i2 ...request.Option) (r0 *greengrass.ListGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.ListGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeListGroupsWithContext(ctx context.Context, in *greengrass.ListGroupsInput, _ ...request.Option) (*greengrass.ListGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListGroups cancelled", ctx.Err())
	default:
		return d.ListGroups(in)
	}
}

func (d *GreengrassDouble) ListLoggerDefinitionVersions(i0 *greengrass.ListLoggerDefinitionVersionsInput) (r0 *greengrass.ListLoggerDefinitionVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLoggerDefinitionVersions", i0)
	r0, _ = returns[0].(*greengrass.ListLoggerDefinitionVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) ListLoggerDefinitionVersionsRequest(i0 *greengrass.ListLoggerDefinitionVersionsInput) (r0 *request.Request, r1 *greengrass.ListLoggerDefinitionVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLoggerDefinitionVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.ListLoggerDefinitionVersionsOutput)
	return
}

func (d *GreengrassDouble) ListLoggerDefinitionVersionsWithContext(i0 context.Context, i1 *greengrass.ListLoggerDefinitionVersionsInput, i2 ...request.Option) (r0 *greengrass.ListLoggerDefinitionVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLoggerDefinitionVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.ListLoggerDefinitionVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeListLoggerDefinitionVersionsWithContext(ctx context.Context, in *greengrass.ListLoggerDefinitionVersionsInput, _ ...request.Option) (*greengrass.ListLoggerDefinitionVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListLoggerDefinitionVersions cancelled", ctx.Err())
	default:
		return d.ListLoggerDefinitionVersions(in)
	}
}

func (d *GreengrassDouble) ListLoggerDefinitions(i0 *greengrass.ListLoggerDefinitionsInput) (r0 *greengrass.ListLoggerDefinitionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLoggerDefinitions", i0)
	r0, _ = returns[0].(*greengrass.ListLoggerDefinitionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) ListLoggerDefinitionsRequest(i0 *greengrass.ListLoggerDefinitionsInput) (r0 *request.Request, r1 *greengrass.ListLoggerDefinitionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLoggerDefinitionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.ListLoggerDefinitionsOutput)
	return
}

func (d *GreengrassDouble) ListLoggerDefinitionsWithContext(i0 context.Context, i1 *greengrass.ListLoggerDefinitionsInput, i2 ...request.Option) (r0 *greengrass.ListLoggerDefinitionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLoggerDefinitionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.ListLoggerDefinitionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeListLoggerDefinitionsWithContext(ctx context.Context, in *greengrass.ListLoggerDefinitionsInput, _ ...request.Option) (*greengrass.ListLoggerDefinitionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListLoggerDefinitions cancelled", ctx.Err())
	default:
		return d.ListLoggerDefinitions(in)
	}
}

func (d *GreengrassDouble) ListResourceDefinitionVersions(i0 *greengrass.ListResourceDefinitionVersionsInput) (r0 *greengrass.ListResourceDefinitionVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourceDefinitionVersions", i0)
	r0, _ = returns[0].(*greengrass.ListResourceDefinitionVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) ListResourceDefinitionVersionsRequest(i0 *greengrass.ListResourceDefinitionVersionsInput) (r0 *request.Request, r1 *greengrass.ListResourceDefinitionVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourceDefinitionVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.ListResourceDefinitionVersionsOutput)
	return
}

func (d *GreengrassDouble) ListResourceDefinitionVersionsWithContext(i0 context.Context, i1 *greengrass.ListResourceDefinitionVersionsInput, i2 ...request.Option) (r0 *greengrass.ListResourceDefinitionVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourceDefinitionVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.ListResourceDefinitionVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeListResourceDefinitionVersionsWithContext(ctx context.Context, in *greengrass.ListResourceDefinitionVersionsInput, _ ...request.Option) (*greengrass.ListResourceDefinitionVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListResourceDefinitionVersions cancelled", ctx.Err())
	default:
		return d.ListResourceDefinitionVersions(in)
	}
}

func (d *GreengrassDouble) ListResourceDefinitions(i0 *greengrass.ListResourceDefinitionsInput) (r0 *greengrass.ListResourceDefinitionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourceDefinitions", i0)
	r0, _ = returns[0].(*greengrass.ListResourceDefinitionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) ListResourceDefinitionsRequest(i0 *greengrass.ListResourceDefinitionsInput) (r0 *request.Request, r1 *greengrass.ListResourceDefinitionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourceDefinitionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.ListResourceDefinitionsOutput)
	return
}

func (d *GreengrassDouble) ListResourceDefinitionsWithContext(i0 context.Context, i1 *greengrass.ListResourceDefinitionsInput, i2 ...request.Option) (r0 *greengrass.ListResourceDefinitionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourceDefinitionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.ListResourceDefinitionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeListResourceDefinitionsWithContext(ctx context.Context, in *greengrass.ListResourceDefinitionsInput, _ ...request.Option) (*greengrass.ListResourceDefinitionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListResourceDefinitions cancelled", ctx.Err())
	default:
		return d.ListResourceDefinitions(in)
	}
}

func (d *GreengrassDouble) ListSubscriptionDefinitionVersions(i0 *greengrass.ListSubscriptionDefinitionVersionsInput) (r0 *greengrass.ListSubscriptionDefinitionVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSubscriptionDefinitionVersions", i0)
	r0, _ = returns[0].(*greengrass.ListSubscriptionDefinitionVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) ListSubscriptionDefinitionVersionsRequest(i0 *greengrass.ListSubscriptionDefinitionVersionsInput) (r0 *request.Request, r1 *greengrass.ListSubscriptionDefinitionVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSubscriptionDefinitionVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.ListSubscriptionDefinitionVersionsOutput)
	return
}

func (d *GreengrassDouble) ListSubscriptionDefinitionVersionsWithContext(i0 context.Context, i1 *greengrass.ListSubscriptionDefinitionVersionsInput, i2 ...request.Option) (r0 *greengrass.ListSubscriptionDefinitionVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSubscriptionDefinitionVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.ListSubscriptionDefinitionVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeListSubscriptionDefinitionVersionsWithContext(ctx context.Context, in *greengrass.ListSubscriptionDefinitionVersionsInput, _ ...request.Option) (*greengrass.ListSubscriptionDefinitionVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListSubscriptionDefinitionVersions cancelled", ctx.Err())
	default:
		return d.ListSubscriptionDefinitionVersions(in)
	}
}

func (d *GreengrassDouble) ListSubscriptionDefinitions(i0 *greengrass.ListSubscriptionDefinitionsInput) (r0 *greengrass.ListSubscriptionDefinitionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSubscriptionDefinitions", i0)
	r0, _ = returns[0].(*greengrass.ListSubscriptionDefinitionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) ListSubscriptionDefinitionsRequest(i0 *greengrass.ListSubscriptionDefinitionsInput) (r0 *request.Request, r1 *greengrass.ListSubscriptionDefinitionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSubscriptionDefinitionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.ListSubscriptionDefinitionsOutput)
	return
}

func (d *GreengrassDouble) ListSubscriptionDefinitionsWithContext(i0 context.Context, i1 *greengrass.ListSubscriptionDefinitionsInput, i2 ...request.Option) (r0 *greengrass.ListSubscriptionDefinitionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSubscriptionDefinitionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.ListSubscriptionDefinitionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeListSubscriptionDefinitionsWithContext(ctx context.Context, in *greengrass.ListSubscriptionDefinitionsInput, _ ...request.Option) (*greengrass.ListSubscriptionDefinitionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListSubscriptionDefinitions cancelled", ctx.Err())
	default:
		return d.ListSubscriptionDefinitions(in)
	}
}

func (d *GreengrassDouble) ListTagsForResource(i0 *greengrass.ListTagsForResourceInput) (r0 *greengrass.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*greengrass.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) ListTagsForResourceRequest(i0 *greengrass.ListTagsForResourceInput) (r0 *request.Request, r1 *greengrass.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.ListTagsForResourceOutput)
	return
}

func (d *GreengrassDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *greengrass.ListTagsForResourceInput, i2 ...request.Option) (r0 *greengrass.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *greengrass.ListTagsForResourceInput, _ ...request.Option) (*greengrass.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *GreengrassDouble) ResetDeployments(i0 *greengrass.ResetDeploymentsInput) (r0 *greengrass.ResetDeploymentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetDeployments", i0)
	r0, _ = returns[0].(*greengrass.ResetDeploymentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) ResetDeploymentsRequest(i0 *greengrass.ResetDeploymentsInput) (r0 *request.Request, r1 *greengrass.ResetDeploymentsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetDeploymentsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.ResetDeploymentsOutput)
	return
}

func (d *GreengrassDouble) ResetDeploymentsWithContext(i0 context.Context, i1 *greengrass.ResetDeploymentsInput, i2 ...request.Option) (r0 *greengrass.ResetDeploymentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetDeploymentsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.ResetDeploymentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeResetDeploymentsWithContext(ctx context.Context, in *greengrass.ResetDeploymentsInput, _ ...request.Option) (*greengrass.ResetDeploymentsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ResetDeployments cancelled", ctx.Err())
	default:
		return d.ResetDeployments(in)
	}
}

func (d *GreengrassDouble) StartBulkDeployment(i0 *greengrass.StartBulkDeploymentInput) (r0 *greengrass.StartBulkDeploymentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartBulkDeployment", i0)
	r0, _ = returns[0].(*greengrass.StartBulkDeploymentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) StartBulkDeploymentRequest(i0 *greengrass.StartBulkDeploymentInput) (r0 *request.Request, r1 *greengrass.StartBulkDeploymentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartBulkDeploymentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.StartBulkDeploymentOutput)
	return
}

func (d *GreengrassDouble) StartBulkDeploymentWithContext(i0 context.Context, i1 *greengrass.StartBulkDeploymentInput, i2 ...request.Option) (r0 *greengrass.StartBulkDeploymentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartBulkDeploymentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.StartBulkDeploymentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeStartBulkDeploymentWithContext(ctx context.Context, in *greengrass.StartBulkDeploymentInput, _ ...request.Option) (*greengrass.StartBulkDeploymentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartBulkDeployment cancelled", ctx.Err())
	default:
		return d.StartBulkDeployment(in)
	}
}

func (d *GreengrassDouble) StopBulkDeployment(i0 *greengrass.StopBulkDeploymentInput) (r0 *greengrass.StopBulkDeploymentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopBulkDeployment", i0)
	r0, _ = returns[0].(*greengrass.StopBulkDeploymentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) StopBulkDeploymentRequest(i0 *greengrass.StopBulkDeploymentInput) (r0 *request.Request, r1 *greengrass.StopBulkDeploymentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopBulkDeploymentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.StopBulkDeploymentOutput)
	return
}

func (d *GreengrassDouble) StopBulkDeploymentWithContext(i0 context.Context, i1 *greengrass.StopBulkDeploymentInput, i2 ...request.Option) (r0 *greengrass.StopBulkDeploymentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopBulkDeploymentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.StopBulkDeploymentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeStopBulkDeploymentWithContext(ctx context.Context, in *greengrass.StopBulkDeploymentInput, _ ...request.Option) (*greengrass.StopBulkDeploymentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopBulkDeployment cancelled", ctx.Err())
	default:
		return d.StopBulkDeployment(in)
	}
}

func (d *GreengrassDouble) TagResource(i0 *greengrass.TagResourceInput) (r0 *greengrass.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*greengrass.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) TagResourceRequest(i0 *greengrass.TagResourceInput) (r0 *request.Request, r1 *greengrass.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.TagResourceOutput)
	return
}

func (d *GreengrassDouble) TagResourceWithContext(i0 context.Context, i1 *greengrass.TagResourceInput, i2 ...request.Option) (r0 *greengrass.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeTagResourceWithContext(ctx context.Context, in *greengrass.TagResourceInput, _ ...request.Option) (*greengrass.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *GreengrassDouble) UntagResource(i0 *greengrass.UntagResourceInput) (r0 *greengrass.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*greengrass.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) UntagResourceRequest(i0 *greengrass.UntagResourceInput) (r0 *request.Request, r1 *greengrass.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.UntagResourceOutput)
	return
}

func (d *GreengrassDouble) UntagResourceWithContext(i0 context.Context, i1 *greengrass.UntagResourceInput, i2 ...request.Option) (r0 *greengrass.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeUntagResourceWithContext(ctx context.Context, in *greengrass.UntagResourceInput, _ ...request.Option) (*greengrass.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *GreengrassDouble) UpdateConnectivityInfo(i0 *greengrass.UpdateConnectivityInfoInput) (r0 *greengrass.UpdateConnectivityInfoOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateConnectivityInfo", i0)
	r0, _ = returns[0].(*greengrass.UpdateConnectivityInfoOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) UpdateConnectivityInfoRequest(i0 *greengrass.UpdateConnectivityInfoInput) (r0 *request.Request, r1 *greengrass.UpdateConnectivityInfoOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateConnectivityInfoRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.UpdateConnectivityInfoOutput)
	return
}

func (d *GreengrassDouble) UpdateConnectivityInfoWithContext(i0 context.Context, i1 *greengrass.UpdateConnectivityInfoInput, i2 ...request.Option) (r0 *greengrass.UpdateConnectivityInfoOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateConnectivityInfoWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.UpdateConnectivityInfoOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeUpdateConnectivityInfoWithContext(ctx context.Context, in *greengrass.UpdateConnectivityInfoInput, _ ...request.Option) (*greengrass.UpdateConnectivityInfoOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateConnectivityInfo cancelled", ctx.Err())
	default:
		return d.UpdateConnectivityInfo(in)
	}
}

func (d *GreengrassDouble) UpdateConnectorDefinition(i0 *greengrass.UpdateConnectorDefinitionInput) (r0 *greengrass.UpdateConnectorDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateConnectorDefinition", i0)
	r0, _ = returns[0].(*greengrass.UpdateConnectorDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) UpdateConnectorDefinitionRequest(i0 *greengrass.UpdateConnectorDefinitionInput) (r0 *request.Request, r1 *greengrass.UpdateConnectorDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateConnectorDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.UpdateConnectorDefinitionOutput)
	return
}

func (d *GreengrassDouble) UpdateConnectorDefinitionWithContext(i0 context.Context, i1 *greengrass.UpdateConnectorDefinitionInput, i2 ...request.Option) (r0 *greengrass.UpdateConnectorDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateConnectorDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.UpdateConnectorDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeUpdateConnectorDefinitionWithContext(ctx context.Context, in *greengrass.UpdateConnectorDefinitionInput, _ ...request.Option) (*greengrass.UpdateConnectorDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateConnectorDefinition cancelled", ctx.Err())
	default:
		return d.UpdateConnectorDefinition(in)
	}
}

func (d *GreengrassDouble) UpdateCoreDefinition(i0 *greengrass.UpdateCoreDefinitionInput) (r0 *greengrass.UpdateCoreDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCoreDefinition", i0)
	r0, _ = returns[0].(*greengrass.UpdateCoreDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) UpdateCoreDefinitionRequest(i0 *greengrass.UpdateCoreDefinitionInput) (r0 *request.Request, r1 *greengrass.UpdateCoreDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCoreDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.UpdateCoreDefinitionOutput)
	return
}

func (d *GreengrassDouble) UpdateCoreDefinitionWithContext(i0 context.Context, i1 *greengrass.UpdateCoreDefinitionInput, i2 ...request.Option) (r0 *greengrass.UpdateCoreDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCoreDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.UpdateCoreDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeUpdateCoreDefinitionWithContext(ctx context.Context, in *greengrass.UpdateCoreDefinitionInput, _ ...request.Option) (*greengrass.UpdateCoreDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateCoreDefinition cancelled", ctx.Err())
	default:
		return d.UpdateCoreDefinition(in)
	}
}

func (d *GreengrassDouble) UpdateDeviceDefinition(i0 *greengrass.UpdateDeviceDefinitionInput) (r0 *greengrass.UpdateDeviceDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDeviceDefinition", i0)
	r0, _ = returns[0].(*greengrass.UpdateDeviceDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) UpdateDeviceDefinitionRequest(i0 *greengrass.UpdateDeviceDefinitionInput) (r0 *request.Request, r1 *greengrass.UpdateDeviceDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDeviceDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.UpdateDeviceDefinitionOutput)
	return
}

func (d *GreengrassDouble) UpdateDeviceDefinitionWithContext(i0 context.Context, i1 *greengrass.UpdateDeviceDefinitionInput, i2 ...request.Option) (r0 *greengrass.UpdateDeviceDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDeviceDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.UpdateDeviceDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeUpdateDeviceDefinitionWithContext(ctx context.Context, in *greengrass.UpdateDeviceDefinitionInput, _ ...request.Option) (*greengrass.UpdateDeviceDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDeviceDefinition cancelled", ctx.Err())
	default:
		return d.UpdateDeviceDefinition(in)
	}
}

func (d *GreengrassDouble) UpdateFunctionDefinition(i0 *greengrass.UpdateFunctionDefinitionInput) (r0 *greengrass.UpdateFunctionDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFunctionDefinition", i0)
	r0, _ = returns[0].(*greengrass.UpdateFunctionDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) UpdateFunctionDefinitionRequest(i0 *greengrass.UpdateFunctionDefinitionInput) (r0 *request.Request, r1 *greengrass.UpdateFunctionDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFunctionDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.UpdateFunctionDefinitionOutput)
	return
}

func (d *GreengrassDouble) UpdateFunctionDefinitionWithContext(i0 context.Context, i1 *greengrass.UpdateFunctionDefinitionInput, i2 ...request.Option) (r0 *greengrass.UpdateFunctionDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFunctionDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.UpdateFunctionDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeUpdateFunctionDefinitionWithContext(ctx context.Context, in *greengrass.UpdateFunctionDefinitionInput, _ ...request.Option) (*greengrass.UpdateFunctionDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateFunctionDefinition cancelled", ctx.Err())
	default:
		return d.UpdateFunctionDefinition(in)
	}
}

func (d *GreengrassDouble) UpdateGroup(i0 *greengrass.UpdateGroupInput) (r0 *greengrass.UpdateGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGroup", i0)
	r0, _ = returns[0].(*greengrass.UpdateGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) UpdateGroupCertificateConfiguration(i0 *greengrass.UpdateGroupCertificateConfigurationInput) (r0 *greengrass.UpdateGroupCertificateConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGroupCertificateConfiguration", i0)
	r0, _ = returns[0].(*greengrass.UpdateGroupCertificateConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) UpdateGroupCertificateConfigurationRequest(i0 *greengrass.UpdateGroupCertificateConfigurationInput) (r0 *request.Request, r1 *greengrass.UpdateGroupCertificateConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGroupCertificateConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.UpdateGroupCertificateConfigurationOutput)
	return
}

func (d *GreengrassDouble) UpdateGroupCertificateConfigurationWithContext(i0 context.Context, i1 *greengrass.UpdateGroupCertificateConfigurationInput, i2 ...request.Option) (r0 *greengrass.UpdateGroupCertificateConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGroupCertificateConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.UpdateGroupCertificateConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeUpdateGroupCertificateConfigurationWithContext(ctx context.Context, in *greengrass.UpdateGroupCertificateConfigurationInput, _ ...request.Option) (*greengrass.UpdateGroupCertificateConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateGroupCertificateConfiguration cancelled", ctx.Err())
	default:
		return d.UpdateGroupCertificateConfiguration(in)
	}
}

func (d *GreengrassDouble) UpdateGroupRequest(i0 *greengrass.UpdateGroupInput) (r0 *request.Request, r1 *greengrass.UpdateGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.UpdateGroupOutput)
	return
}

func (d *GreengrassDouble) UpdateGroupWithContext(i0 context.Context, i1 *greengrass.UpdateGroupInput, i2 ...request.Option) (r0 *greengrass.UpdateGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.UpdateGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeUpdateGroupWithContext(ctx context.Context, in *greengrass.UpdateGroupInput, _ ...request.Option) (*greengrass.UpdateGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateGroup cancelled", ctx.Err())
	default:
		return d.UpdateGroup(in)
	}
}

func (d *GreengrassDouble) UpdateLoggerDefinition(i0 *greengrass.UpdateLoggerDefinitionInput) (r0 *greengrass.UpdateLoggerDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateLoggerDefinition", i0)
	r0, _ = returns[0].(*greengrass.UpdateLoggerDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) UpdateLoggerDefinitionRequest(i0 *greengrass.UpdateLoggerDefinitionInput) (r0 *request.Request, r1 *greengrass.UpdateLoggerDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateLoggerDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.UpdateLoggerDefinitionOutput)
	return
}

func (d *GreengrassDouble) UpdateLoggerDefinitionWithContext(i0 context.Context, i1 *greengrass.UpdateLoggerDefinitionInput, i2 ...request.Option) (r0 *greengrass.UpdateLoggerDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateLoggerDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.UpdateLoggerDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeUpdateLoggerDefinitionWithContext(ctx context.Context, in *greengrass.UpdateLoggerDefinitionInput, _ ...request.Option) (*greengrass.UpdateLoggerDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateLoggerDefinition cancelled", ctx.Err())
	default:
		return d.UpdateLoggerDefinition(in)
	}
}

func (d *GreengrassDouble) UpdateResourceDefinition(i0 *greengrass.UpdateResourceDefinitionInput) (r0 *greengrass.UpdateResourceDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateResourceDefinition", i0)
	r0, _ = returns[0].(*greengrass.UpdateResourceDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) UpdateResourceDefinitionRequest(i0 *greengrass.UpdateResourceDefinitionInput) (r0 *request.Request, r1 *greengrass.UpdateResourceDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateResourceDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.UpdateResourceDefinitionOutput)
	return
}

func (d *GreengrassDouble) UpdateResourceDefinitionWithContext(i0 context.Context, i1 *greengrass.UpdateResourceDefinitionInput, i2 ...request.Option) (r0 *greengrass.UpdateResourceDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateResourceDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.UpdateResourceDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeUpdateResourceDefinitionWithContext(ctx context.Context, in *greengrass.UpdateResourceDefinitionInput, _ ...request.Option) (*greengrass.UpdateResourceDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateResourceDefinition cancelled", ctx.Err())
	default:
		return d.UpdateResourceDefinition(in)
	}
}

func (d *GreengrassDouble) UpdateSubscriptionDefinition(i0 *greengrass.UpdateSubscriptionDefinitionInput) (r0 *greengrass.UpdateSubscriptionDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSubscriptionDefinition", i0)
	r0, _ = returns[0].(*greengrass.UpdateSubscriptionDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) UpdateSubscriptionDefinitionRequest(i0 *greengrass.UpdateSubscriptionDefinitionInput) (r0 *request.Request, r1 *greengrass.UpdateSubscriptionDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSubscriptionDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*greengrass.UpdateSubscriptionDefinitionOutput)
	return
}

func (d *GreengrassDouble) UpdateSubscriptionDefinitionWithContext(i0 context.Context, i1 *greengrass.UpdateSubscriptionDefinitionInput, i2 ...request.Option) (r0 *greengrass.UpdateSubscriptionDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSubscriptionDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*greengrass.UpdateSubscriptionDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *GreengrassDouble) fakeUpdateSubscriptionDefinitionWithContext(ctx context.Context, in *greengrass.UpdateSubscriptionDefinitionInput, _ ...request.Option) (*greengrass.UpdateSubscriptionDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateSubscriptionDefinition cancelled", ctx.Err())
	default:
		return d.UpdateSubscriptionDefinition(in)
	}
}
