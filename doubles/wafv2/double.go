// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:15:31+11:00

// Package wafv2double provides a TestDouble implementation of wafv2iface.WAFV2API
package wafv2double

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/wafv2"
	"github.com/aws/aws-sdk-go/service/wafv2/wafv2iface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// WAFV2Double is TestDouble for wafv2iface.WAFV2API
type WAFV2Double struct {
	wafv2iface.WAFV2API
	*awsdouble.AWSTestDouble
}

// Constructor for WAFV2Double
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *WAFV2Double {
	result := &WAFV2Double{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*wafv2iface.WAFV2API)(nil), configurators...)
	return result
}

func (d *WAFV2Double) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *WAFV2Double) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AssociateWebACLWithContext":
		return m.Fake(d.fakeAssociateWebACLWithContext)

	case "CheckCapacityWithContext":
		return m.Fake(d.fakeCheckCapacityWithContext)

	case "CreateIPSetWithContext":
		return m.Fake(d.fakeCreateIPSetWithContext)

	case "CreateRegexPatternSetWithContext":
		return m.Fake(d.fakeCreateRegexPatternSetWithContext)

	case "CreateRuleGroupWithContext":
		return m.Fake(d.fakeCreateRuleGroupWithContext)

	case "CreateWebACLWithContext":
		return m.Fake(d.fakeCreateWebACLWithContext)

	case "DeleteIPSetWithContext":
		return m.Fake(d.fakeDeleteIPSetWithContext)

	case "DeleteLoggingConfigurationWithContext":
		return m.Fake(d.fakeDeleteLoggingConfigurationWithContext)

	case "DeleteRegexPatternSetWithContext":
		return m.Fake(d.fakeDeleteRegexPatternSetWithContext)

	case "DeleteRuleGroupWithContext":
		return m.Fake(d.fakeDeleteRuleGroupWithContext)

	case "DeleteWebACLWithContext":
		return m.Fake(d.fakeDeleteWebACLWithContext)

	case "DescribeManagedRuleGroupWithContext":
		return m.Fake(d.fakeDescribeManagedRuleGroupWithContext)

	case "DisassociateWebACLWithContext":
		return m.Fake(d.fakeDisassociateWebACLWithContext)

	case "GetIPSetWithContext":
		return m.Fake(d.fakeGetIPSetWithContext)

	case "GetLoggingConfigurationWithContext":
		return m.Fake(d.fakeGetLoggingConfigurationWithContext)

	case "GetRateBasedStatementManagedKeysWithContext":
		return m.Fake(d.fakeGetRateBasedStatementManagedKeysWithContext)

	case "GetRegexPatternSetWithContext":
		return m.Fake(d.fakeGetRegexPatternSetWithContext)

	case "GetRuleGroupWithContext":
		return m.Fake(d.fakeGetRuleGroupWithContext)

	case "GetSampledRequestsWithContext":
		return m.Fake(d.fakeGetSampledRequestsWithContext)

	case "GetWebACLForResourceWithContext":
		return m.Fake(d.fakeGetWebACLForResourceWithContext)

	case "GetWebACLWithContext":
		return m.Fake(d.fakeGetWebACLWithContext)

	case "ListAvailableManagedRuleGroupsWithContext":
		return m.Fake(d.fakeListAvailableManagedRuleGroupsWithContext)

	case "ListIPSetsWithContext":
		return m.Fake(d.fakeListIPSetsWithContext)

	case "ListLoggingConfigurationsWithContext":
		return m.Fake(d.fakeListLoggingConfigurationsWithContext)

	case "ListRegexPatternSetsWithContext":
		return m.Fake(d.fakeListRegexPatternSetsWithContext)

	case "ListResourcesForWebACLWithContext":
		return m.Fake(d.fakeListResourcesForWebACLWithContext)

	case "ListRuleGroupsWithContext":
		return m.Fake(d.fakeListRuleGroupsWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "ListWebACLsWithContext":
		return m.Fake(d.fakeListWebACLsWithContext)

	case "PutLoggingConfigurationWithContext":
		return m.Fake(d.fakePutLoggingConfigurationWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateIPSetWithContext":
		return m.Fake(d.fakeUpdateIPSetWithContext)

	case "UpdateRegexPatternSetWithContext":
		return m.Fake(d.fakeUpdateRegexPatternSetWithContext)

	case "UpdateRuleGroupWithContext":
		return m.Fake(d.fakeUpdateRuleGroupWithContext)

	case "UpdateWebACLWithContext":
		return m.Fake(d.fakeUpdateWebACLWithContext)

	default:
		return nil
	}
}

func (d *WAFV2Double) AssociateWebACL(i0 *wafv2.AssociateWebACLInput) (r0 *wafv2.AssociateWebACLOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateWebACL", i0)
	r0, _ = returns[0].(*wafv2.AssociateWebACLOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) AssociateWebACLRequest(i0 *wafv2.AssociateWebACLInput) (r0 *request.Request, r1 *wafv2.AssociateWebACLOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateWebACLRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*wafv2.AssociateWebACLOutput)
	return
}

func (d *WAFV2Double) AssociateWebACLWithContext(i0 context.Context, i1 *wafv2.AssociateWebACLInput, i2 ...request.Option) (r0 *wafv2.AssociateWebACLOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateWebACLWithContext", i0, i1, i2)
	r0, _ = returns[0].(*wafv2.AssociateWebACLOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) fakeAssociateWebACLWithContext(ctx context.Context, in *wafv2.AssociateWebACLInput, _ ...request.Option) (*wafv2.AssociateWebACLOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateWebACL cancelled", ctx.Err())
	default:
		return d.AssociateWebACL(in)
	}
}

func (d *WAFV2Double) CheckCapacity(i0 *wafv2.CheckCapacityInput) (r0 *wafv2.CheckCapacityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CheckCapacity", i0)
	r0, _ = returns[0].(*wafv2.CheckCapacityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) CheckCapacityRequest(i0 *wafv2.CheckCapacityInput) (r0 *request.Request, r1 *wafv2.CheckCapacityOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CheckCapacityRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*wafv2.CheckCapacityOutput)
	return
}

func (d *WAFV2Double) CheckCapacityWithContext(i0 context.Context, i1 *wafv2.CheckCapacityInput, i2 ...request.Option) (r0 *wafv2.CheckCapacityOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CheckCapacityWithContext", i0, i1, i2)
	r0, _ = returns[0].(*wafv2.CheckCapacityOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) fakeCheckCapacityWithContext(ctx context.Context, in *wafv2.CheckCapacityInput, _ ...request.Option) (*wafv2.CheckCapacityOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CheckCapacity cancelled", ctx.Err())
	default:
		return d.CheckCapacity(in)
	}
}

func (d *WAFV2Double) CreateIPSet(i0 *wafv2.CreateIPSetInput) (r0 *wafv2.CreateIPSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateIPSet", i0)
	r0, _ = returns[0].(*wafv2.CreateIPSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) CreateIPSetRequest(i0 *wafv2.CreateIPSetInput) (r0 *request.Request, r1 *wafv2.CreateIPSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateIPSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*wafv2.CreateIPSetOutput)
	return
}

func (d *WAFV2Double) CreateIPSetWithContext(i0 context.Context, i1 *wafv2.CreateIPSetInput, i2 ...request.Option) (r0 *wafv2.CreateIPSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateIPSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*wafv2.CreateIPSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) fakeCreateIPSetWithContext(ctx context.Context, in *wafv2.CreateIPSetInput, _ ...request.Option) (*wafv2.CreateIPSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateIPSet cancelled", ctx.Err())
	default:
		return d.CreateIPSet(in)
	}
}

func (d *WAFV2Double) CreateRegexPatternSet(i0 *wafv2.CreateRegexPatternSetInput) (r0 *wafv2.CreateRegexPatternSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRegexPatternSet", i0)
	r0, _ = returns[0].(*wafv2.CreateRegexPatternSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) CreateRegexPatternSetRequest(i0 *wafv2.CreateRegexPatternSetInput) (r0 *request.Request, r1 *wafv2.CreateRegexPatternSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRegexPatternSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*wafv2.CreateRegexPatternSetOutput)
	return
}

func (d *WAFV2Double) CreateRegexPatternSetWithContext(i0 context.Context, i1 *wafv2.CreateRegexPatternSetInput, i2 ...request.Option) (r0 *wafv2.CreateRegexPatternSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRegexPatternSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*wafv2.CreateRegexPatternSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) fakeCreateRegexPatternSetWithContext(ctx context.Context, in *wafv2.CreateRegexPatternSetInput, _ ...request.Option) (*wafv2.CreateRegexPatternSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateRegexPatternSet cancelled", ctx.Err())
	default:
		return d.CreateRegexPatternSet(in)
	}
}

func (d *WAFV2Double) CreateRuleGroup(i0 *wafv2.CreateRuleGroupInput) (r0 *wafv2.CreateRuleGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRuleGroup", i0)
	r0, _ = returns[0].(*wafv2.CreateRuleGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) CreateRuleGroupRequest(i0 *wafv2.CreateRuleGroupInput) (r0 *request.Request, r1 *wafv2.CreateRuleGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRuleGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*wafv2.CreateRuleGroupOutput)
	return
}

func (d *WAFV2Double) CreateRuleGroupWithContext(i0 context.Context, i1 *wafv2.CreateRuleGroupInput, i2 ...request.Option) (r0 *wafv2.CreateRuleGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRuleGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*wafv2.CreateRuleGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) fakeCreateRuleGroupWithContext(ctx context.Context, in *wafv2.CreateRuleGroupInput, _ ...request.Option) (*wafv2.CreateRuleGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateRuleGroup cancelled", ctx.Err())
	default:
		return d.CreateRuleGroup(in)
	}
}

func (d *WAFV2Double) CreateWebACL(i0 *wafv2.CreateWebACLInput) (r0 *wafv2.CreateWebACLOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateWebACL", i0)
	r0, _ = returns[0].(*wafv2.CreateWebACLOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) CreateWebACLRequest(i0 *wafv2.CreateWebACLInput) (r0 *request.Request, r1 *wafv2.CreateWebACLOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateWebACLRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*wafv2.CreateWebACLOutput)
	return
}

func (d *WAFV2Double) CreateWebACLWithContext(i0 context.Context, i1 *wafv2.CreateWebACLInput, i2 ...request.Option) (r0 *wafv2.CreateWebACLOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateWebACLWithContext", i0, i1, i2)
	r0, _ = returns[0].(*wafv2.CreateWebACLOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) fakeCreateWebACLWithContext(ctx context.Context, in *wafv2.CreateWebACLInput, _ ...request.Option) (*wafv2.CreateWebACLOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateWebACL cancelled", ctx.Err())
	default:
		return d.CreateWebACL(in)
	}
}

func (d *WAFV2Double) DeleteIPSet(i0 *wafv2.DeleteIPSetInput) (r0 *wafv2.DeleteIPSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIPSet", i0)
	r0, _ = returns[0].(*wafv2.DeleteIPSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) DeleteIPSetRequest(i0 *wafv2.DeleteIPSetInput) (r0 *request.Request, r1 *wafv2.DeleteIPSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIPSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*wafv2.DeleteIPSetOutput)
	return
}

func (d *WAFV2Double) DeleteIPSetWithContext(i0 context.Context, i1 *wafv2.DeleteIPSetInput, i2 ...request.Option) (r0 *wafv2.DeleteIPSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIPSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*wafv2.DeleteIPSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) fakeDeleteIPSetWithContext(ctx context.Context, in *wafv2.DeleteIPSetInput, _ ...request.Option) (*wafv2.DeleteIPSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteIPSet cancelled", ctx.Err())
	default:
		return d.DeleteIPSet(in)
	}
}

func (d *WAFV2Double) DeleteLoggingConfiguration(i0 *wafv2.DeleteLoggingConfigurationInput) (r0 *wafv2.DeleteLoggingConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLoggingConfiguration", i0)
	r0, _ = returns[0].(*wafv2.DeleteLoggingConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) DeleteLoggingConfigurationRequest(i0 *wafv2.DeleteLoggingConfigurationInput) (r0 *request.Request, r1 *wafv2.DeleteLoggingConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLoggingConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*wafv2.DeleteLoggingConfigurationOutput)
	return
}

func (d *WAFV2Double) DeleteLoggingConfigurationWithContext(i0 context.Context, i1 *wafv2.DeleteLoggingConfigurationInput, i2 ...request.Option) (r0 *wafv2.DeleteLoggingConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLoggingConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*wafv2.DeleteLoggingConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) fakeDeleteLoggingConfigurationWithContext(ctx context.Context, in *wafv2.DeleteLoggingConfigurationInput, _ ...request.Option) (*wafv2.DeleteLoggingConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteLoggingConfiguration cancelled", ctx.Err())
	default:
		return d.DeleteLoggingConfiguration(in)
	}
}

func (d *WAFV2Double) DeleteRegexPatternSet(i0 *wafv2.DeleteRegexPatternSetInput) (r0 *wafv2.DeleteRegexPatternSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRegexPatternSet", i0)
	r0, _ = returns[0].(*wafv2.DeleteRegexPatternSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) DeleteRegexPatternSetRequest(i0 *wafv2.DeleteRegexPatternSetInput) (r0 *request.Request, r1 *wafv2.DeleteRegexPatternSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRegexPatternSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*wafv2.DeleteRegexPatternSetOutput)
	return
}

func (d *WAFV2Double) DeleteRegexPatternSetWithContext(i0 context.Context, i1 *wafv2.DeleteRegexPatternSetInput, i2 ...request.Option) (r0 *wafv2.DeleteRegexPatternSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRegexPatternSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*wafv2.DeleteRegexPatternSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) fakeDeleteRegexPatternSetWithContext(ctx context.Context, in *wafv2.DeleteRegexPatternSetInput, _ ...request.Option) (*wafv2.DeleteRegexPatternSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRegexPatternSet cancelled", ctx.Err())
	default:
		return d.DeleteRegexPatternSet(in)
	}
}

func (d *WAFV2Double) DeleteRuleGroup(i0 *wafv2.DeleteRuleGroupInput) (r0 *wafv2.DeleteRuleGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRuleGroup", i0)
	r0, _ = returns[0].(*wafv2.DeleteRuleGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) DeleteRuleGroupRequest(i0 *wafv2.DeleteRuleGroupInput) (r0 *request.Request, r1 *wafv2.DeleteRuleGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRuleGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*wafv2.DeleteRuleGroupOutput)
	return
}

func (d *WAFV2Double) DeleteRuleGroupWithContext(i0 context.Context, i1 *wafv2.DeleteRuleGroupInput, i2 ...request.Option) (r0 *wafv2.DeleteRuleGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRuleGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*wafv2.DeleteRuleGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) fakeDeleteRuleGroupWithContext(ctx context.Context, in *wafv2.DeleteRuleGroupInput, _ ...request.Option) (*wafv2.DeleteRuleGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRuleGroup cancelled", ctx.Err())
	default:
		return d.DeleteRuleGroup(in)
	}
}

func (d *WAFV2Double) DeleteWebACL(i0 *wafv2.DeleteWebACLInput) (r0 *wafv2.DeleteWebACLOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteWebACL", i0)
	r0, _ = returns[0].(*wafv2.DeleteWebACLOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) DeleteWebACLRequest(i0 *wafv2.DeleteWebACLInput) (r0 *request.Request, r1 *wafv2.DeleteWebACLOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteWebACLRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*wafv2.DeleteWebACLOutput)
	return
}

func (d *WAFV2Double) DeleteWebACLWithContext(i0 context.Context, i1 *wafv2.DeleteWebACLInput, i2 ...request.Option) (r0 *wafv2.DeleteWebACLOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteWebACLWithContext", i0, i1, i2)
	r0, _ = returns[0].(*wafv2.DeleteWebACLOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) fakeDeleteWebACLWithContext(ctx context.Context, in *wafv2.DeleteWebACLInput, _ ...request.Option) (*wafv2.DeleteWebACLOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteWebACL cancelled", ctx.Err())
	default:
		return d.DeleteWebACL(in)
	}
}

func (d *WAFV2Double) DescribeManagedRuleGroup(i0 *wafv2.DescribeManagedRuleGroupInput) (r0 *wafv2.DescribeManagedRuleGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeManagedRuleGroup", i0)
	r0, _ = returns[0].(*wafv2.DescribeManagedRuleGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) DescribeManagedRuleGroupRequest(i0 *wafv2.DescribeManagedRuleGroupInput) (r0 *request.Request, r1 *wafv2.DescribeManagedRuleGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeManagedRuleGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*wafv2.DescribeManagedRuleGroupOutput)
	return
}

func (d *WAFV2Double) DescribeManagedRuleGroupWithContext(i0 context.Context, i1 *wafv2.DescribeManagedRuleGroupInput, i2 ...request.Option) (r0 *wafv2.DescribeManagedRuleGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeManagedRuleGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*wafv2.DescribeManagedRuleGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) fakeDescribeManagedRuleGroupWithContext(ctx context.Context, in *wafv2.DescribeManagedRuleGroupInput, _ ...request.Option) (*wafv2.DescribeManagedRuleGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeManagedRuleGroup cancelled", ctx.Err())
	default:
		return d.DescribeManagedRuleGroup(in)
	}
}

func (d *WAFV2Double) DisassociateWebACL(i0 *wafv2.DisassociateWebACLInput) (r0 *wafv2.DisassociateWebACLOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateWebACL", i0)
	r0, _ = returns[0].(*wafv2.DisassociateWebACLOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) DisassociateWebACLRequest(i0 *wafv2.DisassociateWebACLInput) (r0 *request.Request, r1 *wafv2.DisassociateWebACLOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateWebACLRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*wafv2.DisassociateWebACLOutput)
	return
}

func (d *WAFV2Double) DisassociateWebACLWithContext(i0 context.Context, i1 *wafv2.DisassociateWebACLInput, i2 ...request.Option) (r0 *wafv2.DisassociateWebACLOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateWebACLWithContext", i0, i1, i2)
	r0, _ = returns[0].(*wafv2.DisassociateWebACLOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) fakeDisassociateWebACLWithContext(ctx context.Context, in *wafv2.DisassociateWebACLInput, _ ...request.Option) (*wafv2.DisassociateWebACLOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateWebACL cancelled", ctx.Err())
	default:
		return d.DisassociateWebACL(in)
	}
}

func (d *WAFV2Double) GetIPSet(i0 *wafv2.GetIPSetInput) (r0 *wafv2.GetIPSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIPSet", i0)
	r0, _ = returns[0].(*wafv2.GetIPSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) GetIPSetRequest(i0 *wafv2.GetIPSetInput) (r0 *request.Request, r1 *wafv2.GetIPSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIPSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*wafv2.GetIPSetOutput)
	return
}

func (d *WAFV2Double) GetIPSetWithContext(i0 context.Context, i1 *wafv2.GetIPSetInput, i2 ...request.Option) (r0 *wafv2.GetIPSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIPSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*wafv2.GetIPSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) fakeGetIPSetWithContext(ctx context.Context, in *wafv2.GetIPSetInput, _ ...request.Option) (*wafv2.GetIPSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetIPSet cancelled", ctx.Err())
	default:
		return d.GetIPSet(in)
	}
}

func (d *WAFV2Double) GetLoggingConfiguration(i0 *wafv2.GetLoggingConfigurationInput) (r0 *wafv2.GetLoggingConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLoggingConfiguration", i0)
	r0, _ = returns[0].(*wafv2.GetLoggingConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) GetLoggingConfigurationRequest(i0 *wafv2.GetLoggingConfigurationInput) (r0 *request.Request, r1 *wafv2.GetLoggingConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLoggingConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*wafv2.GetLoggingConfigurationOutput)
	return
}

func (d *WAFV2Double) GetLoggingConfigurationWithContext(i0 context.Context, i1 *wafv2.GetLoggingConfigurationInput, i2 ...request.Option) (r0 *wafv2.GetLoggingConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLoggingConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*wafv2.GetLoggingConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) fakeGetLoggingConfigurationWithContext(ctx context.Context, in *wafv2.GetLoggingConfigurationInput, _ ...request.Option) (*wafv2.GetLoggingConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetLoggingConfiguration cancelled", ctx.Err())
	default:
		return d.GetLoggingConfiguration(in)
	}
}

func (d *WAFV2Double) GetRateBasedStatementManagedKeys(i0 *wafv2.GetRateBasedStatementManagedKeysInput) (r0 *wafv2.GetRateBasedStatementManagedKeysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRateBasedStatementManagedKeys", i0)
	r0, _ = returns[0].(*wafv2.GetRateBasedStatementManagedKeysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) GetRateBasedStatementManagedKeysRequest(i0 *wafv2.GetRateBasedStatementManagedKeysInput) (r0 *request.Request, r1 *wafv2.GetRateBasedStatementManagedKeysOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRateBasedStatementManagedKeysRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*wafv2.GetRateBasedStatementManagedKeysOutput)
	return
}

func (d *WAFV2Double) GetRateBasedStatementManagedKeysWithContext(i0 context.Context, i1 *wafv2.GetRateBasedStatementManagedKeysInput, i2 ...request.Option) (r0 *wafv2.GetRateBasedStatementManagedKeysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRateBasedStatementManagedKeysWithContext", i0, i1, i2)
	r0, _ = returns[0].(*wafv2.GetRateBasedStatementManagedKeysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) fakeGetRateBasedStatementManagedKeysWithContext(ctx context.Context, in *wafv2.GetRateBasedStatementManagedKeysInput, _ ...request.Option) (*wafv2.GetRateBasedStatementManagedKeysOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRateBasedStatementManagedKeys cancelled", ctx.Err())
	default:
		return d.GetRateBasedStatementManagedKeys(in)
	}
}

func (d *WAFV2Double) GetRegexPatternSet(i0 *wafv2.GetRegexPatternSetInput) (r0 *wafv2.GetRegexPatternSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRegexPatternSet", i0)
	r0, _ = returns[0].(*wafv2.GetRegexPatternSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) GetRegexPatternSetRequest(i0 *wafv2.GetRegexPatternSetInput) (r0 *request.Request, r1 *wafv2.GetRegexPatternSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRegexPatternSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*wafv2.GetRegexPatternSetOutput)
	return
}

func (d *WAFV2Double) GetRegexPatternSetWithContext(i0 context.Context, i1 *wafv2.GetRegexPatternSetInput, i2 ...request.Option) (r0 *wafv2.GetRegexPatternSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRegexPatternSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*wafv2.GetRegexPatternSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) fakeGetRegexPatternSetWithContext(ctx context.Context, in *wafv2.GetRegexPatternSetInput, _ ...request.Option) (*wafv2.GetRegexPatternSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRegexPatternSet cancelled", ctx.Err())
	default:
		return d.GetRegexPatternSet(in)
	}
}

func (d *WAFV2Double) GetRuleGroup(i0 *wafv2.GetRuleGroupInput) (r0 *wafv2.GetRuleGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRuleGroup", i0)
	r0, _ = returns[0].(*wafv2.GetRuleGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) GetRuleGroupRequest(i0 *wafv2.GetRuleGroupInput) (r0 *request.Request, r1 *wafv2.GetRuleGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRuleGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*wafv2.GetRuleGroupOutput)
	return
}

func (d *WAFV2Double) GetRuleGroupWithContext(i0 context.Context, i1 *wafv2.GetRuleGroupInput, i2 ...request.Option) (r0 *wafv2.GetRuleGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRuleGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*wafv2.GetRuleGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) fakeGetRuleGroupWithContext(ctx context.Context, in *wafv2.GetRuleGroupInput, _ ...request.Option) (*wafv2.GetRuleGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRuleGroup cancelled", ctx.Err())
	default:
		return d.GetRuleGroup(in)
	}
}

func (d *WAFV2Double) GetSampledRequests(i0 *wafv2.GetSampledRequestsInput) (r0 *wafv2.GetSampledRequestsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSampledRequests", i0)
	r0, _ = returns[0].(*wafv2.GetSampledRequestsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) GetSampledRequestsRequest(i0 *wafv2.GetSampledRequestsInput) (r0 *request.Request, r1 *wafv2.GetSampledRequestsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSampledRequestsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*wafv2.GetSampledRequestsOutput)
	return
}

func (d *WAFV2Double) GetSampledRequestsWithContext(i0 context.Context, i1 *wafv2.GetSampledRequestsInput, i2 ...request.Option) (r0 *wafv2.GetSampledRequestsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSampledRequestsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*wafv2.GetSampledRequestsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) fakeGetSampledRequestsWithContext(ctx context.Context, in *wafv2.GetSampledRequestsInput, _ ...request.Option) (*wafv2.GetSampledRequestsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetSampledRequests cancelled", ctx.Err())
	default:
		return d.GetSampledRequests(in)
	}
}

func (d *WAFV2Double) GetWebACL(i0 *wafv2.GetWebACLInput) (r0 *wafv2.GetWebACLOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetWebACL", i0)
	r0, _ = returns[0].(*wafv2.GetWebACLOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) GetWebACLForResource(i0 *wafv2.GetWebACLForResourceInput) (r0 *wafv2.GetWebACLForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetWebACLForResource", i0)
	r0, _ = returns[0].(*wafv2.GetWebACLForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) GetWebACLForResourceRequest(i0 *wafv2.GetWebACLForResourceInput) (r0 *request.Request, r1 *wafv2.GetWebACLForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetWebACLForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*wafv2.GetWebACLForResourceOutput)
	return
}

func (d *WAFV2Double) GetWebACLForResourceWithContext(i0 context.Context, i1 *wafv2.GetWebACLForResourceInput, i2 ...request.Option) (r0 *wafv2.GetWebACLForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetWebACLForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*wafv2.GetWebACLForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) fakeGetWebACLForResourceWithContext(ctx context.Context, in *wafv2.GetWebACLForResourceInput, _ ...request.Option) (*wafv2.GetWebACLForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetWebACLForResource cancelled", ctx.Err())
	default:
		return d.GetWebACLForResource(in)
	}
}

func (d *WAFV2Double) GetWebACLRequest(i0 *wafv2.GetWebACLInput) (r0 *request.Request, r1 *wafv2.GetWebACLOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetWebACLRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*wafv2.GetWebACLOutput)
	return
}

func (d *WAFV2Double) GetWebACLWithContext(i0 context.Context, i1 *wafv2.GetWebACLInput, i2 ...request.Option) (r0 *wafv2.GetWebACLOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetWebACLWithContext", i0, i1, i2)
	r0, _ = returns[0].(*wafv2.GetWebACLOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) fakeGetWebACLWithContext(ctx context.Context, in *wafv2.GetWebACLInput, _ ...request.Option) (*wafv2.GetWebACLOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetWebACL cancelled", ctx.Err())
	default:
		return d.GetWebACL(in)
	}
}

func (d *WAFV2Double) ListAvailableManagedRuleGroups(i0 *wafv2.ListAvailableManagedRuleGroupsInput) (r0 *wafv2.ListAvailableManagedRuleGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAvailableManagedRuleGroups", i0)
	r0, _ = returns[0].(*wafv2.ListAvailableManagedRuleGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) ListAvailableManagedRuleGroupsRequest(i0 *wafv2.ListAvailableManagedRuleGroupsInput) (r0 *request.Request, r1 *wafv2.ListAvailableManagedRuleGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAvailableManagedRuleGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*wafv2.ListAvailableManagedRuleGroupsOutput)
	return
}

func (d *WAFV2Double) ListAvailableManagedRuleGroupsWithContext(i0 context.Context, i1 *wafv2.ListAvailableManagedRuleGroupsInput, i2 ...request.Option) (r0 *wafv2.ListAvailableManagedRuleGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAvailableManagedRuleGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*wafv2.ListAvailableManagedRuleGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) fakeListAvailableManagedRuleGroupsWithContext(ctx context.Context, in *wafv2.ListAvailableManagedRuleGroupsInput, _ ...request.Option) (*wafv2.ListAvailableManagedRuleGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAvailableManagedRuleGroups cancelled", ctx.Err())
	default:
		return d.ListAvailableManagedRuleGroups(in)
	}
}

func (d *WAFV2Double) ListIPSets(i0 *wafv2.ListIPSetsInput) (r0 *wafv2.ListIPSetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIPSets", i0)
	r0, _ = returns[0].(*wafv2.ListIPSetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) ListIPSetsRequest(i0 *wafv2.ListIPSetsInput) (r0 *request.Request, r1 *wafv2.ListIPSetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIPSetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*wafv2.ListIPSetsOutput)
	return
}

func (d *WAFV2Double) ListIPSetsWithContext(i0 context.Context, i1 *wafv2.ListIPSetsInput, i2 ...request.Option) (r0 *wafv2.ListIPSetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIPSetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*wafv2.ListIPSetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) fakeListIPSetsWithContext(ctx context.Context, in *wafv2.ListIPSetsInput, _ ...request.Option) (*wafv2.ListIPSetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListIPSets cancelled", ctx.Err())
	default:
		return d.ListIPSets(in)
	}
}

func (d *WAFV2Double) ListLoggingConfigurations(i0 *wafv2.ListLoggingConfigurationsInput) (r0 *wafv2.ListLoggingConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLoggingConfigurations", i0)
	r0, _ = returns[0].(*wafv2.ListLoggingConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) ListLoggingConfigurationsRequest(i0 *wafv2.ListLoggingConfigurationsInput) (r0 *request.Request, r1 *wafv2.ListLoggingConfigurationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLoggingConfigurationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*wafv2.ListLoggingConfigurationsOutput)
	return
}

func (d *WAFV2Double) ListLoggingConfigurationsWithContext(i0 context.Context, i1 *wafv2.ListLoggingConfigurationsInput, i2 ...request.Option) (r0 *wafv2.ListLoggingConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLoggingConfigurationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*wafv2.ListLoggingConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) fakeListLoggingConfigurationsWithContext(ctx context.Context, in *wafv2.ListLoggingConfigurationsInput, _ ...request.Option) (*wafv2.ListLoggingConfigurationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListLoggingConfigurations cancelled", ctx.Err())
	default:
		return d.ListLoggingConfigurations(in)
	}
}

func (d *WAFV2Double) ListRegexPatternSets(i0 *wafv2.ListRegexPatternSetsInput) (r0 *wafv2.ListRegexPatternSetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRegexPatternSets", i0)
	r0, _ = returns[0].(*wafv2.ListRegexPatternSetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) ListRegexPatternSetsRequest(i0 *wafv2.ListRegexPatternSetsInput) (r0 *request.Request, r1 *wafv2.ListRegexPatternSetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRegexPatternSetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*wafv2.ListRegexPatternSetsOutput)
	return
}

func (d *WAFV2Double) ListRegexPatternSetsWithContext(i0 context.Context, i1 *wafv2.ListRegexPatternSetsInput, i2 ...request.Option) (r0 *wafv2.ListRegexPatternSetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRegexPatternSetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*wafv2.ListRegexPatternSetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) fakeListRegexPatternSetsWithContext(ctx context.Context, in *wafv2.ListRegexPatternSetsInput, _ ...request.Option) (*wafv2.ListRegexPatternSetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListRegexPatternSets cancelled", ctx.Err())
	default:
		return d.ListRegexPatternSets(in)
	}
}

func (d *WAFV2Double) ListResourcesForWebACL(i0 *wafv2.ListResourcesForWebACLInput) (r0 *wafv2.ListResourcesForWebACLOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourcesForWebACL", i0)
	r0, _ = returns[0].(*wafv2.ListResourcesForWebACLOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) ListResourcesForWebACLRequest(i0 *wafv2.ListResourcesForWebACLInput) (r0 *request.Request, r1 *wafv2.ListResourcesForWebACLOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourcesForWebACLRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*wafv2.ListResourcesForWebACLOutput)
	return
}

func (d *WAFV2Double) ListResourcesForWebACLWithContext(i0 context.Context, i1 *wafv2.ListResourcesForWebACLInput, i2 ...request.Option) (r0 *wafv2.ListResourcesForWebACLOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourcesForWebACLWithContext", i0, i1, i2)
	r0, _ = returns[0].(*wafv2.ListResourcesForWebACLOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) fakeListResourcesForWebACLWithContext(ctx context.Context, in *wafv2.ListResourcesForWebACLInput, _ ...request.Option) (*wafv2.ListResourcesForWebACLOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListResourcesForWebACL cancelled", ctx.Err())
	default:
		return d.ListResourcesForWebACL(in)
	}
}

func (d *WAFV2Double) ListRuleGroups(i0 *wafv2.ListRuleGroupsInput) (r0 *wafv2.ListRuleGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRuleGroups", i0)
	r0, _ = returns[0].(*wafv2.ListRuleGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) ListRuleGroupsRequest(i0 *wafv2.ListRuleGroupsInput) (r0 *request.Request, r1 *wafv2.ListRuleGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRuleGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*wafv2.ListRuleGroupsOutput)
	return
}

func (d *WAFV2Double) ListRuleGroupsWithContext(i0 context.Context, i1 *wafv2.ListRuleGroupsInput, i2 ...request.Option) (r0 *wafv2.ListRuleGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRuleGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*wafv2.ListRuleGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) fakeListRuleGroupsWithContext(ctx context.Context, in *wafv2.ListRuleGroupsInput, _ ...request.Option) (*wafv2.ListRuleGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListRuleGroups cancelled", ctx.Err())
	default:
		return d.ListRuleGroups(in)
	}
}

func (d *WAFV2Double) ListTagsForResource(i0 *wafv2.ListTagsForResourceInput) (r0 *wafv2.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*wafv2.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) ListTagsForResourceRequest(i0 *wafv2.ListTagsForResourceInput) (r0 *request.Request, r1 *wafv2.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*wafv2.ListTagsForResourceOutput)
	return
}

func (d *WAFV2Double) ListTagsForResourceWithContext(i0 context.Context, i1 *wafv2.ListTagsForResourceInput, i2 ...request.Option) (r0 *wafv2.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*wafv2.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) fakeListTagsForResourceWithContext(ctx context.Context, in *wafv2.ListTagsForResourceInput, _ ...request.Option) (*wafv2.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *WAFV2Double) ListWebACLs(i0 *wafv2.ListWebACLsInput) (r0 *wafv2.ListWebACLsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWebACLs", i0)
	r0, _ = returns[0].(*wafv2.ListWebACLsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) ListWebACLsRequest(i0 *wafv2.ListWebACLsInput) (r0 *request.Request, r1 *wafv2.ListWebACLsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWebACLsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*wafv2.ListWebACLsOutput)
	return
}

func (d *WAFV2Double) ListWebACLsWithContext(i0 context.Context, i1 *wafv2.ListWebACLsInput, i2 ...request.Option) (r0 *wafv2.ListWebACLsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWebACLsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*wafv2.ListWebACLsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) fakeListWebACLsWithContext(ctx context.Context, in *wafv2.ListWebACLsInput, _ ...request.Option) (*wafv2.ListWebACLsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListWebACLs cancelled", ctx.Err())
	default:
		return d.ListWebACLs(in)
	}
}

func (d *WAFV2Double) PutLoggingConfiguration(i0 *wafv2.PutLoggingConfigurationInput) (r0 *wafv2.PutLoggingConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutLoggingConfiguration", i0)
	r0, _ = returns[0].(*wafv2.PutLoggingConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) PutLoggingConfigurationRequest(i0 *wafv2.PutLoggingConfigurationInput) (r0 *request.Request, r1 *wafv2.PutLoggingConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutLoggingConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*wafv2.PutLoggingConfigurationOutput)
	return
}

func (d *WAFV2Double) PutLoggingConfigurationWithContext(i0 context.Context, i1 *wafv2.PutLoggingConfigurationInput, i2 ...request.Option) (r0 *wafv2.PutLoggingConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutLoggingConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*wafv2.PutLoggingConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) fakePutLoggingConfigurationWithContext(ctx context.Context, in *wafv2.PutLoggingConfigurationInput, _ ...request.Option) (*wafv2.PutLoggingConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutLoggingConfiguration cancelled", ctx.Err())
	default:
		return d.PutLoggingConfiguration(in)
	}
}

func (d *WAFV2Double) TagResource(i0 *wafv2.TagResourceInput) (r0 *wafv2.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*wafv2.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) TagResourceRequest(i0 *wafv2.TagResourceInput) (r0 *request.Request, r1 *wafv2.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*wafv2.TagResourceOutput)
	return
}

func (d *WAFV2Double) TagResourceWithContext(i0 context.Context, i1 *wafv2.TagResourceInput, i2 ...request.Option) (r0 *wafv2.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*wafv2.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) fakeTagResourceWithContext(ctx context.Context, in *wafv2.TagResourceInput, _ ...request.Option) (*wafv2.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *WAFV2Double) UntagResource(i0 *wafv2.UntagResourceInput) (r0 *wafv2.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*wafv2.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) UntagResourceRequest(i0 *wafv2.UntagResourceInput) (r0 *request.Request, r1 *wafv2.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*wafv2.UntagResourceOutput)
	return
}

func (d *WAFV2Double) UntagResourceWithContext(i0 context.Context, i1 *wafv2.UntagResourceInput, i2 ...request.Option) (r0 *wafv2.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*wafv2.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) fakeUntagResourceWithContext(ctx context.Context, in *wafv2.UntagResourceInput, _ ...request.Option) (*wafv2.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *WAFV2Double) UpdateIPSet(i0 *wafv2.UpdateIPSetInput) (r0 *wafv2.UpdateIPSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateIPSet", i0)
	r0, _ = returns[0].(*wafv2.UpdateIPSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) UpdateIPSetRequest(i0 *wafv2.UpdateIPSetInput) (r0 *request.Request, r1 *wafv2.UpdateIPSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateIPSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*wafv2.UpdateIPSetOutput)
	return
}

func (d *WAFV2Double) UpdateIPSetWithContext(i0 context.Context, i1 *wafv2.UpdateIPSetInput, i2 ...request.Option) (r0 *wafv2.UpdateIPSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateIPSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*wafv2.UpdateIPSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) fakeUpdateIPSetWithContext(ctx context.Context, in *wafv2.UpdateIPSetInput, _ ...request.Option) (*wafv2.UpdateIPSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateIPSet cancelled", ctx.Err())
	default:
		return d.UpdateIPSet(in)
	}
}

func (d *WAFV2Double) UpdateRegexPatternSet(i0 *wafv2.UpdateRegexPatternSetInput) (r0 *wafv2.UpdateRegexPatternSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRegexPatternSet", i0)
	r0, _ = returns[0].(*wafv2.UpdateRegexPatternSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) UpdateRegexPatternSetRequest(i0 *wafv2.UpdateRegexPatternSetInput) (r0 *request.Request, r1 *wafv2.UpdateRegexPatternSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRegexPatternSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*wafv2.UpdateRegexPatternSetOutput)
	return
}

func (d *WAFV2Double) UpdateRegexPatternSetWithContext(i0 context.Context, i1 *wafv2.UpdateRegexPatternSetInput, i2 ...request.Option) (r0 *wafv2.UpdateRegexPatternSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRegexPatternSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*wafv2.UpdateRegexPatternSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) fakeUpdateRegexPatternSetWithContext(ctx context.Context, in *wafv2.UpdateRegexPatternSetInput, _ ...request.Option) (*wafv2.UpdateRegexPatternSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateRegexPatternSet cancelled", ctx.Err())
	default:
		return d.UpdateRegexPatternSet(in)
	}
}

func (d *WAFV2Double) UpdateRuleGroup(i0 *wafv2.UpdateRuleGroupInput) (r0 *wafv2.UpdateRuleGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRuleGroup", i0)
	r0, _ = returns[0].(*wafv2.UpdateRuleGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) UpdateRuleGroupRequest(i0 *wafv2.UpdateRuleGroupInput) (r0 *request.Request, r1 *wafv2.UpdateRuleGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRuleGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*wafv2.UpdateRuleGroupOutput)
	return
}

func (d *WAFV2Double) UpdateRuleGroupWithContext(i0 context.Context, i1 *wafv2.UpdateRuleGroupInput, i2 ...request.Option) (r0 *wafv2.UpdateRuleGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRuleGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*wafv2.UpdateRuleGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) fakeUpdateRuleGroupWithContext(ctx context.Context, in *wafv2.UpdateRuleGroupInput, _ ...request.Option) (*wafv2.UpdateRuleGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateRuleGroup cancelled", ctx.Err())
	default:
		return d.UpdateRuleGroup(in)
	}
}

func (d *WAFV2Double) UpdateWebACL(i0 *wafv2.UpdateWebACLInput) (r0 *wafv2.UpdateWebACLOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateWebACL", i0)
	r0, _ = returns[0].(*wafv2.UpdateWebACLOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) UpdateWebACLRequest(i0 *wafv2.UpdateWebACLInput) (r0 *request.Request, r1 *wafv2.UpdateWebACLOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateWebACLRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*wafv2.UpdateWebACLOutput)
	return
}

func (d *WAFV2Double) UpdateWebACLWithContext(i0 context.Context, i1 *wafv2.UpdateWebACLInput, i2 ...request.Option) (r0 *wafv2.UpdateWebACLOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateWebACLWithContext", i0, i1, i2)
	r0, _ = returns[0].(*wafv2.UpdateWebACLOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFV2Double) fakeUpdateWebACLWithContext(ctx context.Context, in *wafv2.UpdateWebACLInput, _ ...request.Option) (*wafv2.UpdateWebACLOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateWebACL cancelled", ctx.Err())
	default:
		return d.UpdateWebACL(in)
	}
}
