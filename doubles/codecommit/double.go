// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:11:47+11:00

// Package codecommitdouble provides a TestDouble implementation of codecommitiface.CodeCommitAPI
package codecommitdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/codecommit"
	"github.com/aws/aws-sdk-go/service/codecommit/codecommitiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// CodeCommitDouble is TestDouble for codecommitiface.CodeCommitAPI
type CodeCommitDouble struct {
	codecommitiface.CodeCommitAPI
	*awsdouble.AWSTestDouble
}

// Constructor for CodeCommitDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *CodeCommitDouble {
	result := &CodeCommitDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*codecommitiface.CodeCommitAPI)(nil), configurators...)
	return result
}

func (d *CodeCommitDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *CodeCommitDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AssociateApprovalRuleTemplateWithRepositoryWithContext":
		return m.Fake(d.fakeAssociateApprovalRuleTemplateWithRepositoryWithContext)

	case "BatchAssociateApprovalRuleTemplateWithRepositoriesWithContext":
		return m.Fake(d.fakeBatchAssociateApprovalRuleTemplateWithRepositoriesWithContext)

	case "BatchDescribeMergeConflictsWithContext":
		return m.Fake(d.fakeBatchDescribeMergeConflictsWithContext)

	case "BatchDisassociateApprovalRuleTemplateFromRepositoriesWithContext":
		return m.Fake(d.fakeBatchDisassociateApprovalRuleTemplateFromRepositoriesWithContext)

	case "BatchGetCommitsWithContext":
		return m.Fake(d.fakeBatchGetCommitsWithContext)

	case "BatchGetRepositoriesWithContext":
		return m.Fake(d.fakeBatchGetRepositoriesWithContext)

	case "CreateApprovalRuleTemplateWithContext":
		return m.Fake(d.fakeCreateApprovalRuleTemplateWithContext)

	case "CreateBranchWithContext":
		return m.Fake(d.fakeCreateBranchWithContext)

	case "CreateCommitWithContext":
		return m.Fake(d.fakeCreateCommitWithContext)

	case "CreatePullRequestApprovalRuleWithContext":
		return m.Fake(d.fakeCreatePullRequestApprovalRuleWithContext)

	case "CreatePullRequestWithContext":
		return m.Fake(d.fakeCreatePullRequestWithContext)

	case "CreateRepositoryWithContext":
		return m.Fake(d.fakeCreateRepositoryWithContext)

	case "CreateUnreferencedMergeCommitWithContext":
		return m.Fake(d.fakeCreateUnreferencedMergeCommitWithContext)

	case "DeleteApprovalRuleTemplateWithContext":
		return m.Fake(d.fakeDeleteApprovalRuleTemplateWithContext)

	case "DeleteBranchWithContext":
		return m.Fake(d.fakeDeleteBranchWithContext)

	case "DeleteCommentContentWithContext":
		return m.Fake(d.fakeDeleteCommentContentWithContext)

	case "DeleteFileWithContext":
		return m.Fake(d.fakeDeleteFileWithContext)

	case "DeletePullRequestApprovalRuleWithContext":
		return m.Fake(d.fakeDeletePullRequestApprovalRuleWithContext)

	case "DeleteRepositoryWithContext":
		return m.Fake(d.fakeDeleteRepositoryWithContext)

	case "DescribeMergeConflictsPages":
		return m.Fake(d.fakeDescribeMergeConflictsPages)

	case "DescribeMergeConflictsPagesWithContext":
		return m.Fake(d.fakeDescribeMergeConflictsPagesWithContext)

	case "DescribeMergeConflictsWithContext":
		return m.Fake(d.fakeDescribeMergeConflictsWithContext)

	case "DescribePullRequestEventsPages":
		return m.Fake(d.fakeDescribePullRequestEventsPages)

	case "DescribePullRequestEventsPagesWithContext":
		return m.Fake(d.fakeDescribePullRequestEventsPagesWithContext)

	case "DescribePullRequestEventsWithContext":
		return m.Fake(d.fakeDescribePullRequestEventsWithContext)

	case "DisassociateApprovalRuleTemplateFromRepositoryWithContext":
		return m.Fake(d.fakeDisassociateApprovalRuleTemplateFromRepositoryWithContext)

	case "EvaluatePullRequestApprovalRulesWithContext":
		return m.Fake(d.fakeEvaluatePullRequestApprovalRulesWithContext)

	case "GetApprovalRuleTemplateWithContext":
		return m.Fake(d.fakeGetApprovalRuleTemplateWithContext)

	case "GetBlobWithContext":
		return m.Fake(d.fakeGetBlobWithContext)

	case "GetBranchWithContext":
		return m.Fake(d.fakeGetBranchWithContext)

	case "GetCommentWithContext":
		return m.Fake(d.fakeGetCommentWithContext)

	case "GetCommentsForComparedCommitPages":
		return m.Fake(d.fakeGetCommentsForComparedCommitPages)

	case "GetCommentsForComparedCommitPagesWithContext":
		return m.Fake(d.fakeGetCommentsForComparedCommitPagesWithContext)

	case "GetCommentsForComparedCommitWithContext":
		return m.Fake(d.fakeGetCommentsForComparedCommitWithContext)

	case "GetCommentsForPullRequestPages":
		return m.Fake(d.fakeGetCommentsForPullRequestPages)

	case "GetCommentsForPullRequestPagesWithContext":
		return m.Fake(d.fakeGetCommentsForPullRequestPagesWithContext)

	case "GetCommentsForPullRequestWithContext":
		return m.Fake(d.fakeGetCommentsForPullRequestWithContext)

	case "GetCommitWithContext":
		return m.Fake(d.fakeGetCommitWithContext)

	case "GetDifferencesPages":
		return m.Fake(d.fakeGetDifferencesPages)

	case "GetDifferencesPagesWithContext":
		return m.Fake(d.fakeGetDifferencesPagesWithContext)

	case "GetDifferencesWithContext":
		return m.Fake(d.fakeGetDifferencesWithContext)

	case "GetFileWithContext":
		return m.Fake(d.fakeGetFileWithContext)

	case "GetFolderWithContext":
		return m.Fake(d.fakeGetFolderWithContext)

	case "GetMergeCommitWithContext":
		return m.Fake(d.fakeGetMergeCommitWithContext)

	case "GetMergeConflictsPages":
		return m.Fake(d.fakeGetMergeConflictsPages)

	case "GetMergeConflictsPagesWithContext":
		return m.Fake(d.fakeGetMergeConflictsPagesWithContext)

	case "GetMergeConflictsWithContext":
		return m.Fake(d.fakeGetMergeConflictsWithContext)

	case "GetMergeOptionsWithContext":
		return m.Fake(d.fakeGetMergeOptionsWithContext)

	case "GetPullRequestApprovalStatesWithContext":
		return m.Fake(d.fakeGetPullRequestApprovalStatesWithContext)

	case "GetPullRequestOverrideStateWithContext":
		return m.Fake(d.fakeGetPullRequestOverrideStateWithContext)

	case "GetPullRequestWithContext":
		return m.Fake(d.fakeGetPullRequestWithContext)

	case "GetRepositoryTriggersWithContext":
		return m.Fake(d.fakeGetRepositoryTriggersWithContext)

	case "GetRepositoryWithContext":
		return m.Fake(d.fakeGetRepositoryWithContext)

	case "ListApprovalRuleTemplatesPages":
		return m.Fake(d.fakeListApprovalRuleTemplatesPages)

	case "ListApprovalRuleTemplatesPagesWithContext":
		return m.Fake(d.fakeListApprovalRuleTemplatesPagesWithContext)

	case "ListApprovalRuleTemplatesWithContext":
		return m.Fake(d.fakeListApprovalRuleTemplatesWithContext)

	case "ListAssociatedApprovalRuleTemplatesForRepositoryPages":
		return m.Fake(d.fakeListAssociatedApprovalRuleTemplatesForRepositoryPages)

	case "ListAssociatedApprovalRuleTemplatesForRepositoryPagesWithContext":
		return m.Fake(d.fakeListAssociatedApprovalRuleTemplatesForRepositoryPagesWithContext)

	case "ListAssociatedApprovalRuleTemplatesForRepositoryWithContext":
		return m.Fake(d.fakeListAssociatedApprovalRuleTemplatesForRepositoryWithContext)

	case "ListBranchesPages":
		return m.Fake(d.fakeListBranchesPages)

	case "ListBranchesPagesWithContext":
		return m.Fake(d.fakeListBranchesPagesWithContext)

	case "ListBranchesWithContext":
		return m.Fake(d.fakeListBranchesWithContext)

	case "ListPullRequestsPages":
		return m.Fake(d.fakeListPullRequestsPages)

	case "ListPullRequestsPagesWithContext":
		return m.Fake(d.fakeListPullRequestsPagesWithContext)

	case "ListPullRequestsWithContext":
		return m.Fake(d.fakeListPullRequestsWithContext)

	case "ListRepositoriesForApprovalRuleTemplatePages":
		return m.Fake(d.fakeListRepositoriesForApprovalRuleTemplatePages)

	case "ListRepositoriesForApprovalRuleTemplatePagesWithContext":
		return m.Fake(d.fakeListRepositoriesForApprovalRuleTemplatePagesWithContext)

	case "ListRepositoriesForApprovalRuleTemplateWithContext":
		return m.Fake(d.fakeListRepositoriesForApprovalRuleTemplateWithContext)

	case "ListRepositoriesPages":
		return m.Fake(d.fakeListRepositoriesPages)

	case "ListRepositoriesPagesWithContext":
		return m.Fake(d.fakeListRepositoriesPagesWithContext)

	case "ListRepositoriesWithContext":
		return m.Fake(d.fakeListRepositoriesWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "MergeBranchesByFastForwardWithContext":
		return m.Fake(d.fakeMergeBranchesByFastForwardWithContext)

	case "MergeBranchesBySquashWithContext":
		return m.Fake(d.fakeMergeBranchesBySquashWithContext)

	case "MergeBranchesByThreeWayWithContext":
		return m.Fake(d.fakeMergeBranchesByThreeWayWithContext)

	case "MergePullRequestByFastForwardWithContext":
		return m.Fake(d.fakeMergePullRequestByFastForwardWithContext)

	case "MergePullRequestBySquashWithContext":
		return m.Fake(d.fakeMergePullRequestBySquashWithContext)

	case "MergePullRequestByThreeWayWithContext":
		return m.Fake(d.fakeMergePullRequestByThreeWayWithContext)

	case "OverridePullRequestApprovalRulesWithContext":
		return m.Fake(d.fakeOverridePullRequestApprovalRulesWithContext)

	case "PostCommentForComparedCommitWithContext":
		return m.Fake(d.fakePostCommentForComparedCommitWithContext)

	case "PostCommentForPullRequestWithContext":
		return m.Fake(d.fakePostCommentForPullRequestWithContext)

	case "PostCommentReplyWithContext":
		return m.Fake(d.fakePostCommentReplyWithContext)

	case "PutFileWithContext":
		return m.Fake(d.fakePutFileWithContext)

	case "PutRepositoryTriggersWithContext":
		return m.Fake(d.fakePutRepositoryTriggersWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "TestRepositoryTriggersWithContext":
		return m.Fake(d.fakeTestRepositoryTriggersWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateApprovalRuleTemplateContentWithContext":
		return m.Fake(d.fakeUpdateApprovalRuleTemplateContentWithContext)

	case "UpdateApprovalRuleTemplateDescriptionWithContext":
		return m.Fake(d.fakeUpdateApprovalRuleTemplateDescriptionWithContext)

	case "UpdateApprovalRuleTemplateNameWithContext":
		return m.Fake(d.fakeUpdateApprovalRuleTemplateNameWithContext)

	case "UpdateCommentWithContext":
		return m.Fake(d.fakeUpdateCommentWithContext)

	case "UpdateDefaultBranchWithContext":
		return m.Fake(d.fakeUpdateDefaultBranchWithContext)

	case "UpdatePullRequestApprovalRuleContentWithContext":
		return m.Fake(d.fakeUpdatePullRequestApprovalRuleContentWithContext)

	case "UpdatePullRequestApprovalStateWithContext":
		return m.Fake(d.fakeUpdatePullRequestApprovalStateWithContext)

	case "UpdatePullRequestDescriptionWithContext":
		return m.Fake(d.fakeUpdatePullRequestDescriptionWithContext)

	case "UpdatePullRequestStatusWithContext":
		return m.Fake(d.fakeUpdatePullRequestStatusWithContext)

	case "UpdatePullRequestTitleWithContext":
		return m.Fake(d.fakeUpdatePullRequestTitleWithContext)

	case "UpdateRepositoryDescriptionWithContext":
		return m.Fake(d.fakeUpdateRepositoryDescriptionWithContext)

	case "UpdateRepositoryNameWithContext":
		return m.Fake(d.fakeUpdateRepositoryNameWithContext)

	default:
		return nil
	}
}

func (d *CodeCommitDouble) AssociateApprovalRuleTemplateWithRepository(i0 *codecommit.AssociateApprovalRuleTemplateWithRepositoryInput) (r0 *codecommit.AssociateApprovalRuleTemplateWithRepositoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateApprovalRuleTemplateWithRepository", i0)
	r0, _ = returns[0].(*codecommit.AssociateApprovalRuleTemplateWithRepositoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) AssociateApprovalRuleTemplateWithRepositoryRequest(i0 *codecommit.AssociateApprovalRuleTemplateWithRepositoryInput) (r0 *request.Request, r1 *codecommit.AssociateApprovalRuleTemplateWithRepositoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateApprovalRuleTemplateWithRepositoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.AssociateApprovalRuleTemplateWithRepositoryOutput)
	return
}

func (d *CodeCommitDouble) AssociateApprovalRuleTemplateWithRepositoryWithContext(i0 context.Context, i1 *codecommit.AssociateApprovalRuleTemplateWithRepositoryInput, i2 ...request.Option) (r0 *codecommit.AssociateApprovalRuleTemplateWithRepositoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateApprovalRuleTemplateWithRepositoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.AssociateApprovalRuleTemplateWithRepositoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeAssociateApprovalRuleTemplateWithRepositoryWithContext(ctx context.Context, in *codecommit.AssociateApprovalRuleTemplateWithRepositoryInput, _ ...request.Option) (*codecommit.AssociateApprovalRuleTemplateWithRepositoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateApprovalRuleTemplateWithRepository cancelled", ctx.Err())
	default:
		return d.AssociateApprovalRuleTemplateWithRepository(in)
	}
}

func (d *CodeCommitDouble) BatchAssociateApprovalRuleTemplateWithRepositories(i0 *codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesInput) (r0 *codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchAssociateApprovalRuleTemplateWithRepositories", i0)
	r0, _ = returns[0].(*codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) BatchAssociateApprovalRuleTemplateWithRepositoriesRequest(i0 *codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesInput) (r0 *request.Request, r1 *codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchAssociateApprovalRuleTemplateWithRepositoriesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesOutput)
	return
}

func (d *CodeCommitDouble) BatchAssociateApprovalRuleTemplateWithRepositoriesWithContext(i0 context.Context, i1 *codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesInput, i2 ...request.Option) (r0 *codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchAssociateApprovalRuleTemplateWithRepositoriesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeBatchAssociateApprovalRuleTemplateWithRepositoriesWithContext(ctx context.Context, in *codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesInput, _ ...request.Option) (*codecommit.BatchAssociateApprovalRuleTemplateWithRepositoriesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchAssociateApprovalRuleTemplateWithRepositories cancelled", ctx.Err())
	default:
		return d.BatchAssociateApprovalRuleTemplateWithRepositories(in)
	}
}

func (d *CodeCommitDouble) BatchDescribeMergeConflicts(i0 *codecommit.BatchDescribeMergeConflictsInput) (r0 *codecommit.BatchDescribeMergeConflictsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDescribeMergeConflicts", i0)
	r0, _ = returns[0].(*codecommit.BatchDescribeMergeConflictsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) BatchDescribeMergeConflictsRequest(i0 *codecommit.BatchDescribeMergeConflictsInput) (r0 *request.Request, r1 *codecommit.BatchDescribeMergeConflictsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDescribeMergeConflictsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.BatchDescribeMergeConflictsOutput)
	return
}

func (d *CodeCommitDouble) BatchDescribeMergeConflictsWithContext(i0 context.Context, i1 *codecommit.BatchDescribeMergeConflictsInput, i2 ...request.Option) (r0 *codecommit.BatchDescribeMergeConflictsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDescribeMergeConflictsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.BatchDescribeMergeConflictsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeBatchDescribeMergeConflictsWithContext(ctx context.Context, in *codecommit.BatchDescribeMergeConflictsInput, _ ...request.Option) (*codecommit.BatchDescribeMergeConflictsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchDescribeMergeConflicts cancelled", ctx.Err())
	default:
		return d.BatchDescribeMergeConflicts(in)
	}
}

func (d *CodeCommitDouble) BatchDisassociateApprovalRuleTemplateFromRepositories(i0 *codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesInput) (r0 *codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDisassociateApprovalRuleTemplateFromRepositories", i0)
	r0, _ = returns[0].(*codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) BatchDisassociateApprovalRuleTemplateFromRepositoriesRequest(i0 *codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesInput) (r0 *request.Request, r1 *codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDisassociateApprovalRuleTemplateFromRepositoriesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput)
	return
}

func (d *CodeCommitDouble) BatchDisassociateApprovalRuleTemplateFromRepositoriesWithContext(i0 context.Context, i1 *codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesInput, i2 ...request.Option) (r0 *codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchDisassociateApprovalRuleTemplateFromRepositoriesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeBatchDisassociateApprovalRuleTemplateFromRepositoriesWithContext(ctx context.Context, in *codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesInput, _ ...request.Option) (*codecommit.BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchDisassociateApprovalRuleTemplateFromRepositories cancelled", ctx.Err())
	default:
		return d.BatchDisassociateApprovalRuleTemplateFromRepositories(in)
	}
}

func (d *CodeCommitDouble) BatchGetCommits(i0 *codecommit.BatchGetCommitsInput) (r0 *codecommit.BatchGetCommitsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetCommits", i0)
	r0, _ = returns[0].(*codecommit.BatchGetCommitsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) BatchGetCommitsRequest(i0 *codecommit.BatchGetCommitsInput) (r0 *request.Request, r1 *codecommit.BatchGetCommitsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetCommitsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.BatchGetCommitsOutput)
	return
}

func (d *CodeCommitDouble) BatchGetCommitsWithContext(i0 context.Context, i1 *codecommit.BatchGetCommitsInput, i2 ...request.Option) (r0 *codecommit.BatchGetCommitsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetCommitsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.BatchGetCommitsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeBatchGetCommitsWithContext(ctx context.Context, in *codecommit.BatchGetCommitsInput, _ ...request.Option) (*codecommit.BatchGetCommitsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchGetCommits cancelled", ctx.Err())
	default:
		return d.BatchGetCommits(in)
	}
}

func (d *CodeCommitDouble) BatchGetRepositories(i0 *codecommit.BatchGetRepositoriesInput) (r0 *codecommit.BatchGetRepositoriesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetRepositories", i0)
	r0, _ = returns[0].(*codecommit.BatchGetRepositoriesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) BatchGetRepositoriesRequest(i0 *codecommit.BatchGetRepositoriesInput) (r0 *request.Request, r1 *codecommit.BatchGetRepositoriesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetRepositoriesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.BatchGetRepositoriesOutput)
	return
}

func (d *CodeCommitDouble) BatchGetRepositoriesWithContext(i0 context.Context, i1 *codecommit.BatchGetRepositoriesInput, i2 ...request.Option) (r0 *codecommit.BatchGetRepositoriesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchGetRepositoriesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.BatchGetRepositoriesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeBatchGetRepositoriesWithContext(ctx context.Context, in *codecommit.BatchGetRepositoriesInput, _ ...request.Option) (*codecommit.BatchGetRepositoriesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchGetRepositories cancelled", ctx.Err())
	default:
		return d.BatchGetRepositories(in)
	}
}

func (d *CodeCommitDouble) CreateApprovalRuleTemplate(i0 *codecommit.CreateApprovalRuleTemplateInput) (r0 *codecommit.CreateApprovalRuleTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApprovalRuleTemplate", i0)
	r0, _ = returns[0].(*codecommit.CreateApprovalRuleTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) CreateApprovalRuleTemplateRequest(i0 *codecommit.CreateApprovalRuleTemplateInput) (r0 *request.Request, r1 *codecommit.CreateApprovalRuleTemplateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApprovalRuleTemplateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.CreateApprovalRuleTemplateOutput)
	return
}

func (d *CodeCommitDouble) CreateApprovalRuleTemplateWithContext(i0 context.Context, i1 *codecommit.CreateApprovalRuleTemplateInput, i2 ...request.Option) (r0 *codecommit.CreateApprovalRuleTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApprovalRuleTemplateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.CreateApprovalRuleTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeCreateApprovalRuleTemplateWithContext(ctx context.Context, in *codecommit.CreateApprovalRuleTemplateInput, _ ...request.Option) (*codecommit.CreateApprovalRuleTemplateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateApprovalRuleTemplate cancelled", ctx.Err())
	default:
		return d.CreateApprovalRuleTemplate(in)
	}
}

func (d *CodeCommitDouble) CreateBranch(i0 *codecommit.CreateBranchInput) (r0 *codecommit.CreateBranchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBranch", i0)
	r0, _ = returns[0].(*codecommit.CreateBranchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) CreateBranchRequest(i0 *codecommit.CreateBranchInput) (r0 *request.Request, r1 *codecommit.CreateBranchOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBranchRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.CreateBranchOutput)
	return
}

func (d *CodeCommitDouble) CreateBranchWithContext(i0 context.Context, i1 *codecommit.CreateBranchInput, i2 ...request.Option) (r0 *codecommit.CreateBranchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBranchWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.CreateBranchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeCreateBranchWithContext(ctx context.Context, in *codecommit.CreateBranchInput, _ ...request.Option) (*codecommit.CreateBranchOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateBranch cancelled", ctx.Err())
	default:
		return d.CreateBranch(in)
	}
}

func (d *CodeCommitDouble) CreateCommit(i0 *codecommit.CreateCommitInput) (r0 *codecommit.CreateCommitOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCommit", i0)
	r0, _ = returns[0].(*codecommit.CreateCommitOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) CreateCommitRequest(i0 *codecommit.CreateCommitInput) (r0 *request.Request, r1 *codecommit.CreateCommitOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCommitRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.CreateCommitOutput)
	return
}

func (d *CodeCommitDouble) CreateCommitWithContext(i0 context.Context, i1 *codecommit.CreateCommitInput, i2 ...request.Option) (r0 *codecommit.CreateCommitOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCommitWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.CreateCommitOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeCreateCommitWithContext(ctx context.Context, in *codecommit.CreateCommitInput, _ ...request.Option) (*codecommit.CreateCommitOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateCommit cancelled", ctx.Err())
	default:
		return d.CreateCommit(in)
	}
}

func (d *CodeCommitDouble) CreatePullRequest(i0 *codecommit.CreatePullRequestInput) (r0 *codecommit.CreatePullRequestOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePullRequest", i0)
	r0, _ = returns[0].(*codecommit.CreatePullRequestOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) CreatePullRequestApprovalRule(i0 *codecommit.CreatePullRequestApprovalRuleInput) (r0 *codecommit.CreatePullRequestApprovalRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePullRequestApprovalRule", i0)
	r0, _ = returns[0].(*codecommit.CreatePullRequestApprovalRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) CreatePullRequestApprovalRuleRequest(i0 *codecommit.CreatePullRequestApprovalRuleInput) (r0 *request.Request, r1 *codecommit.CreatePullRequestApprovalRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePullRequestApprovalRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.CreatePullRequestApprovalRuleOutput)
	return
}

func (d *CodeCommitDouble) CreatePullRequestApprovalRuleWithContext(i0 context.Context, i1 *codecommit.CreatePullRequestApprovalRuleInput, i2 ...request.Option) (r0 *codecommit.CreatePullRequestApprovalRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePullRequestApprovalRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.CreatePullRequestApprovalRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeCreatePullRequestApprovalRuleWithContext(ctx context.Context, in *codecommit.CreatePullRequestApprovalRuleInput, _ ...request.Option) (*codecommit.CreatePullRequestApprovalRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreatePullRequestApprovalRule cancelled", ctx.Err())
	default:
		return d.CreatePullRequestApprovalRule(in)
	}
}

func (d *CodeCommitDouble) CreatePullRequestRequest(i0 *codecommit.CreatePullRequestInput) (r0 *request.Request, r1 *codecommit.CreatePullRequestOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePullRequestRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.CreatePullRequestOutput)
	return
}

func (d *CodeCommitDouble) CreatePullRequestWithContext(i0 context.Context, i1 *codecommit.CreatePullRequestInput, i2 ...request.Option) (r0 *codecommit.CreatePullRequestOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePullRequestWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.CreatePullRequestOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeCreatePullRequestWithContext(ctx context.Context, in *codecommit.CreatePullRequestInput, _ ...request.Option) (*codecommit.CreatePullRequestOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreatePullRequest cancelled", ctx.Err())
	default:
		return d.CreatePullRequest(in)
	}
}

func (d *CodeCommitDouble) CreateRepository(i0 *codecommit.CreateRepositoryInput) (r0 *codecommit.CreateRepositoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRepository", i0)
	r0, _ = returns[0].(*codecommit.CreateRepositoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) CreateRepositoryRequest(i0 *codecommit.CreateRepositoryInput) (r0 *request.Request, r1 *codecommit.CreateRepositoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRepositoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.CreateRepositoryOutput)
	return
}

func (d *CodeCommitDouble) CreateRepositoryWithContext(i0 context.Context, i1 *codecommit.CreateRepositoryInput, i2 ...request.Option) (r0 *codecommit.CreateRepositoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRepositoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.CreateRepositoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeCreateRepositoryWithContext(ctx context.Context, in *codecommit.CreateRepositoryInput, _ ...request.Option) (*codecommit.CreateRepositoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateRepository cancelled", ctx.Err())
	default:
		return d.CreateRepository(in)
	}
}

func (d *CodeCommitDouble) CreateUnreferencedMergeCommit(i0 *codecommit.CreateUnreferencedMergeCommitInput) (r0 *codecommit.CreateUnreferencedMergeCommitOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUnreferencedMergeCommit", i0)
	r0, _ = returns[0].(*codecommit.CreateUnreferencedMergeCommitOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) CreateUnreferencedMergeCommitRequest(i0 *codecommit.CreateUnreferencedMergeCommitInput) (r0 *request.Request, r1 *codecommit.CreateUnreferencedMergeCommitOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUnreferencedMergeCommitRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.CreateUnreferencedMergeCommitOutput)
	return
}

func (d *CodeCommitDouble) CreateUnreferencedMergeCommitWithContext(i0 context.Context, i1 *codecommit.CreateUnreferencedMergeCommitInput, i2 ...request.Option) (r0 *codecommit.CreateUnreferencedMergeCommitOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateUnreferencedMergeCommitWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.CreateUnreferencedMergeCommitOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeCreateUnreferencedMergeCommitWithContext(ctx context.Context, in *codecommit.CreateUnreferencedMergeCommitInput, _ ...request.Option) (*codecommit.CreateUnreferencedMergeCommitOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateUnreferencedMergeCommit cancelled", ctx.Err())
	default:
		return d.CreateUnreferencedMergeCommit(in)
	}
}

func (d *CodeCommitDouble) DeleteApprovalRuleTemplate(i0 *codecommit.DeleteApprovalRuleTemplateInput) (r0 *codecommit.DeleteApprovalRuleTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApprovalRuleTemplate", i0)
	r0, _ = returns[0].(*codecommit.DeleteApprovalRuleTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) DeleteApprovalRuleTemplateRequest(i0 *codecommit.DeleteApprovalRuleTemplateInput) (r0 *request.Request, r1 *codecommit.DeleteApprovalRuleTemplateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApprovalRuleTemplateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.DeleteApprovalRuleTemplateOutput)
	return
}

func (d *CodeCommitDouble) DeleteApprovalRuleTemplateWithContext(i0 context.Context, i1 *codecommit.DeleteApprovalRuleTemplateInput, i2 ...request.Option) (r0 *codecommit.DeleteApprovalRuleTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApprovalRuleTemplateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.DeleteApprovalRuleTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeDeleteApprovalRuleTemplateWithContext(ctx context.Context, in *codecommit.DeleteApprovalRuleTemplateInput, _ ...request.Option) (*codecommit.DeleteApprovalRuleTemplateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteApprovalRuleTemplate cancelled", ctx.Err())
	default:
		return d.DeleteApprovalRuleTemplate(in)
	}
}

func (d *CodeCommitDouble) DeleteBranch(i0 *codecommit.DeleteBranchInput) (r0 *codecommit.DeleteBranchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBranch", i0)
	r0, _ = returns[0].(*codecommit.DeleteBranchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) DeleteBranchRequest(i0 *codecommit.DeleteBranchInput) (r0 *request.Request, r1 *codecommit.DeleteBranchOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBranchRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.DeleteBranchOutput)
	return
}

func (d *CodeCommitDouble) DeleteBranchWithContext(i0 context.Context, i1 *codecommit.DeleteBranchInput, i2 ...request.Option) (r0 *codecommit.DeleteBranchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBranchWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.DeleteBranchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeDeleteBranchWithContext(ctx context.Context, in *codecommit.DeleteBranchInput, _ ...request.Option) (*codecommit.DeleteBranchOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteBranch cancelled", ctx.Err())
	default:
		return d.DeleteBranch(in)
	}
}

func (d *CodeCommitDouble) DeleteCommentContent(i0 *codecommit.DeleteCommentContentInput) (r0 *codecommit.DeleteCommentContentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCommentContent", i0)
	r0, _ = returns[0].(*codecommit.DeleteCommentContentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) DeleteCommentContentRequest(i0 *codecommit.DeleteCommentContentInput) (r0 *request.Request, r1 *codecommit.DeleteCommentContentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCommentContentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.DeleteCommentContentOutput)
	return
}

func (d *CodeCommitDouble) DeleteCommentContentWithContext(i0 context.Context, i1 *codecommit.DeleteCommentContentInput, i2 ...request.Option) (r0 *codecommit.DeleteCommentContentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCommentContentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.DeleteCommentContentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeDeleteCommentContentWithContext(ctx context.Context, in *codecommit.DeleteCommentContentInput, _ ...request.Option) (*codecommit.DeleteCommentContentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteCommentContent cancelled", ctx.Err())
	default:
		return d.DeleteCommentContent(in)
	}
}

func (d *CodeCommitDouble) DeleteFile(i0 *codecommit.DeleteFileInput) (r0 *codecommit.DeleteFileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFile", i0)
	r0, _ = returns[0].(*codecommit.DeleteFileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) DeleteFileRequest(i0 *codecommit.DeleteFileInput) (r0 *request.Request, r1 *codecommit.DeleteFileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.DeleteFileOutput)
	return
}

func (d *CodeCommitDouble) DeleteFileWithContext(i0 context.Context, i1 *codecommit.DeleteFileInput, i2 ...request.Option) (r0 *codecommit.DeleteFileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.DeleteFileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeDeleteFileWithContext(ctx context.Context, in *codecommit.DeleteFileInput, _ ...request.Option) (*codecommit.DeleteFileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteFile cancelled", ctx.Err())
	default:
		return d.DeleteFile(in)
	}
}

func (d *CodeCommitDouble) DeletePullRequestApprovalRule(i0 *codecommit.DeletePullRequestApprovalRuleInput) (r0 *codecommit.DeletePullRequestApprovalRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePullRequestApprovalRule", i0)
	r0, _ = returns[0].(*codecommit.DeletePullRequestApprovalRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) DeletePullRequestApprovalRuleRequest(i0 *codecommit.DeletePullRequestApprovalRuleInput) (r0 *request.Request, r1 *codecommit.DeletePullRequestApprovalRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePullRequestApprovalRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.DeletePullRequestApprovalRuleOutput)
	return
}

func (d *CodeCommitDouble) DeletePullRequestApprovalRuleWithContext(i0 context.Context, i1 *codecommit.DeletePullRequestApprovalRuleInput, i2 ...request.Option) (r0 *codecommit.DeletePullRequestApprovalRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePullRequestApprovalRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.DeletePullRequestApprovalRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeDeletePullRequestApprovalRuleWithContext(ctx context.Context, in *codecommit.DeletePullRequestApprovalRuleInput, _ ...request.Option) (*codecommit.DeletePullRequestApprovalRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeletePullRequestApprovalRule cancelled", ctx.Err())
	default:
		return d.DeletePullRequestApprovalRule(in)
	}
}

func (d *CodeCommitDouble) DeleteRepository(i0 *codecommit.DeleteRepositoryInput) (r0 *codecommit.DeleteRepositoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRepository", i0)
	r0, _ = returns[0].(*codecommit.DeleteRepositoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) DeleteRepositoryRequest(i0 *codecommit.DeleteRepositoryInput) (r0 *request.Request, r1 *codecommit.DeleteRepositoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRepositoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.DeleteRepositoryOutput)
	return
}

func (d *CodeCommitDouble) DeleteRepositoryWithContext(i0 context.Context, i1 *codecommit.DeleteRepositoryInput, i2 ...request.Option) (r0 *codecommit.DeleteRepositoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRepositoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.DeleteRepositoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeDeleteRepositoryWithContext(ctx context.Context, in *codecommit.DeleteRepositoryInput, _ ...request.Option) (*codecommit.DeleteRepositoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRepository cancelled", ctx.Err())
	default:
		return d.DeleteRepository(in)
	}
}

func (d *CodeCommitDouble) DescribeMergeConflicts(i0 *codecommit.DescribeMergeConflictsInput) (r0 *codecommit.DescribeMergeConflictsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMergeConflicts", i0)
	r0, _ = returns[0].(*codecommit.DescribeMergeConflictsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) DescribeMergeConflictsPages(i0 *codecommit.DescribeMergeConflictsInput, i1 func(*codecommit.DescribeMergeConflictsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMergeConflictsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeCommitDouble) fakeDescribeMergeConflictsPages(in *codecommit.DescribeMergeConflictsInput, pager func(*codecommit.DescribeMergeConflictsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeMergeConflicts", paginators, in, pager)
}

func (d *CodeCommitDouble) DescribeMergeConflictsPagesWithContext(i0 context.Context, i1 *codecommit.DescribeMergeConflictsInput, i2 func(*codecommit.DescribeMergeConflictsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMergeConflictsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeCommitDouble) fakeDescribeMergeConflictsPagesWithContext(ctx context.Context, in *codecommit.DescribeMergeConflictsInput, pager func(*codecommit.DescribeMergeConflictsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeMergeConflicts", paginators, ctx, in, pager, options...)
}

func (d *CodeCommitDouble) DescribeMergeConflictsRequest(i0 *codecommit.DescribeMergeConflictsInput) (r0 *request.Request, r1 *codecommit.DescribeMergeConflictsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMergeConflictsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.DescribeMergeConflictsOutput)
	return
}

func (d *CodeCommitDouble) DescribeMergeConflictsWithContext(i0 context.Context, i1 *codecommit.DescribeMergeConflictsInput, i2 ...request.Option) (r0 *codecommit.DescribeMergeConflictsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMergeConflictsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.DescribeMergeConflictsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeDescribeMergeConflictsWithContext(ctx context.Context, in *codecommit.DescribeMergeConflictsInput, _ ...request.Option) (*codecommit.DescribeMergeConflictsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeMergeConflicts cancelled", ctx.Err())
	default:
		return d.DescribeMergeConflicts(in)
	}
}

func (d *CodeCommitDouble) DescribePullRequestEvents(i0 *codecommit.DescribePullRequestEventsInput) (r0 *codecommit.DescribePullRequestEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePullRequestEvents", i0)
	r0, _ = returns[0].(*codecommit.DescribePullRequestEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) DescribePullRequestEventsPages(i0 *codecommit.DescribePullRequestEventsInput, i1 func(*codecommit.DescribePullRequestEventsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePullRequestEventsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeCommitDouble) fakeDescribePullRequestEventsPages(in *codecommit.DescribePullRequestEventsInput, pager func(*codecommit.DescribePullRequestEventsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribePullRequestEvents", paginators, in, pager)
}

func (d *CodeCommitDouble) DescribePullRequestEventsPagesWithContext(i0 context.Context, i1 *codecommit.DescribePullRequestEventsInput, i2 func(*codecommit.DescribePullRequestEventsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePullRequestEventsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeCommitDouble) fakeDescribePullRequestEventsPagesWithContext(ctx context.Context, in *codecommit.DescribePullRequestEventsInput, pager func(*codecommit.DescribePullRequestEventsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribePullRequestEvents", paginators, ctx, in, pager, options...)
}

func (d *CodeCommitDouble) DescribePullRequestEventsRequest(i0 *codecommit.DescribePullRequestEventsInput) (r0 *request.Request, r1 *codecommit.DescribePullRequestEventsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePullRequestEventsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.DescribePullRequestEventsOutput)
	return
}

func (d *CodeCommitDouble) DescribePullRequestEventsWithContext(i0 context.Context, i1 *codecommit.DescribePullRequestEventsInput, i2 ...request.Option) (r0 *codecommit.DescribePullRequestEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePullRequestEventsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.DescribePullRequestEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeDescribePullRequestEventsWithContext(ctx context.Context, in *codecommit.DescribePullRequestEventsInput, _ ...request.Option) (*codecommit.DescribePullRequestEventsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribePullRequestEvents cancelled", ctx.Err())
	default:
		return d.DescribePullRequestEvents(in)
	}
}

func (d *CodeCommitDouble) DisassociateApprovalRuleTemplateFromRepository(i0 *codecommit.DisassociateApprovalRuleTemplateFromRepositoryInput) (r0 *codecommit.DisassociateApprovalRuleTemplateFromRepositoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateApprovalRuleTemplateFromRepository", i0)
	r0, _ = returns[0].(*codecommit.DisassociateApprovalRuleTemplateFromRepositoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) DisassociateApprovalRuleTemplateFromRepositoryRequest(i0 *codecommit.DisassociateApprovalRuleTemplateFromRepositoryInput) (r0 *request.Request, r1 *codecommit.DisassociateApprovalRuleTemplateFromRepositoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateApprovalRuleTemplateFromRepositoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.DisassociateApprovalRuleTemplateFromRepositoryOutput)
	return
}

func (d *CodeCommitDouble) DisassociateApprovalRuleTemplateFromRepositoryWithContext(i0 context.Context, i1 *codecommit.DisassociateApprovalRuleTemplateFromRepositoryInput, i2 ...request.Option) (r0 *codecommit.DisassociateApprovalRuleTemplateFromRepositoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateApprovalRuleTemplateFromRepositoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.DisassociateApprovalRuleTemplateFromRepositoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeDisassociateApprovalRuleTemplateFromRepositoryWithContext(ctx context.Context, in *codecommit.DisassociateApprovalRuleTemplateFromRepositoryInput, _ ...request.Option) (*codecommit.DisassociateApprovalRuleTemplateFromRepositoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateApprovalRuleTemplateFromRepository cancelled", ctx.Err())
	default:
		return d.DisassociateApprovalRuleTemplateFromRepository(in)
	}
}

func (d *CodeCommitDouble) EvaluatePullRequestApprovalRules(i0 *codecommit.EvaluatePullRequestApprovalRulesInput) (r0 *codecommit.EvaluatePullRequestApprovalRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EvaluatePullRequestApprovalRules", i0)
	r0, _ = returns[0].(*codecommit.EvaluatePullRequestApprovalRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) EvaluatePullRequestApprovalRulesRequest(i0 *codecommit.EvaluatePullRequestApprovalRulesInput) (r0 *request.Request, r1 *codecommit.EvaluatePullRequestApprovalRulesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EvaluatePullRequestApprovalRulesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.EvaluatePullRequestApprovalRulesOutput)
	return
}

func (d *CodeCommitDouble) EvaluatePullRequestApprovalRulesWithContext(i0 context.Context, i1 *codecommit.EvaluatePullRequestApprovalRulesInput, i2 ...request.Option) (r0 *codecommit.EvaluatePullRequestApprovalRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EvaluatePullRequestApprovalRulesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.EvaluatePullRequestApprovalRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeEvaluatePullRequestApprovalRulesWithContext(ctx context.Context, in *codecommit.EvaluatePullRequestApprovalRulesInput, _ ...request.Option) (*codecommit.EvaluatePullRequestApprovalRulesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "EvaluatePullRequestApprovalRules cancelled", ctx.Err())
	default:
		return d.EvaluatePullRequestApprovalRules(in)
	}
}

func (d *CodeCommitDouble) GetApprovalRuleTemplate(i0 *codecommit.GetApprovalRuleTemplateInput) (r0 *codecommit.GetApprovalRuleTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApprovalRuleTemplate", i0)
	r0, _ = returns[0].(*codecommit.GetApprovalRuleTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) GetApprovalRuleTemplateRequest(i0 *codecommit.GetApprovalRuleTemplateInput) (r0 *request.Request, r1 *codecommit.GetApprovalRuleTemplateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApprovalRuleTemplateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.GetApprovalRuleTemplateOutput)
	return
}

func (d *CodeCommitDouble) GetApprovalRuleTemplateWithContext(i0 context.Context, i1 *codecommit.GetApprovalRuleTemplateInput, i2 ...request.Option) (r0 *codecommit.GetApprovalRuleTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApprovalRuleTemplateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.GetApprovalRuleTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeGetApprovalRuleTemplateWithContext(ctx context.Context, in *codecommit.GetApprovalRuleTemplateInput, _ ...request.Option) (*codecommit.GetApprovalRuleTemplateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetApprovalRuleTemplate cancelled", ctx.Err())
	default:
		return d.GetApprovalRuleTemplate(in)
	}
}

func (d *CodeCommitDouble) GetBlob(i0 *codecommit.GetBlobInput) (r0 *codecommit.GetBlobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBlob", i0)
	r0, _ = returns[0].(*codecommit.GetBlobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) GetBlobRequest(i0 *codecommit.GetBlobInput) (r0 *request.Request, r1 *codecommit.GetBlobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBlobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.GetBlobOutput)
	return
}

func (d *CodeCommitDouble) GetBlobWithContext(i0 context.Context, i1 *codecommit.GetBlobInput, i2 ...request.Option) (r0 *codecommit.GetBlobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBlobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.GetBlobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeGetBlobWithContext(ctx context.Context, in *codecommit.GetBlobInput, _ ...request.Option) (*codecommit.GetBlobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBlob cancelled", ctx.Err())
	default:
		return d.GetBlob(in)
	}
}

func (d *CodeCommitDouble) GetBranch(i0 *codecommit.GetBranchInput) (r0 *codecommit.GetBranchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBranch", i0)
	r0, _ = returns[0].(*codecommit.GetBranchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) GetBranchRequest(i0 *codecommit.GetBranchInput) (r0 *request.Request, r1 *codecommit.GetBranchOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBranchRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.GetBranchOutput)
	return
}

func (d *CodeCommitDouble) GetBranchWithContext(i0 context.Context, i1 *codecommit.GetBranchInput, i2 ...request.Option) (r0 *codecommit.GetBranchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBranchWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.GetBranchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeGetBranchWithContext(ctx context.Context, in *codecommit.GetBranchInput, _ ...request.Option) (*codecommit.GetBranchOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBranch cancelled", ctx.Err())
	default:
		return d.GetBranch(in)
	}
}

func (d *CodeCommitDouble) GetComment(i0 *codecommit.GetCommentInput) (r0 *codecommit.GetCommentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetComment", i0)
	r0, _ = returns[0].(*codecommit.GetCommentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) GetCommentRequest(i0 *codecommit.GetCommentInput) (r0 *request.Request, r1 *codecommit.GetCommentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCommentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.GetCommentOutput)
	return
}

func (d *CodeCommitDouble) GetCommentWithContext(i0 context.Context, i1 *codecommit.GetCommentInput, i2 ...request.Option) (r0 *codecommit.GetCommentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCommentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.GetCommentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeGetCommentWithContext(ctx context.Context, in *codecommit.GetCommentInput, _ ...request.Option) (*codecommit.GetCommentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetComment cancelled", ctx.Err())
	default:
		return d.GetComment(in)
	}
}

func (d *CodeCommitDouble) GetCommentsForComparedCommit(i0 *codecommit.GetCommentsForComparedCommitInput) (r0 *codecommit.GetCommentsForComparedCommitOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCommentsForComparedCommit", i0)
	r0, _ = returns[0].(*codecommit.GetCommentsForComparedCommitOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) GetCommentsForComparedCommitPages(i0 *codecommit.GetCommentsForComparedCommitInput, i1 func(*codecommit.GetCommentsForComparedCommitOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCommentsForComparedCommitPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeCommitDouble) fakeGetCommentsForComparedCommitPages(in *codecommit.GetCommentsForComparedCommitInput, pager func(*codecommit.GetCommentsForComparedCommitOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetCommentsForComparedCommit", paginators, in, pager)
}

func (d *CodeCommitDouble) GetCommentsForComparedCommitPagesWithContext(i0 context.Context, i1 *codecommit.GetCommentsForComparedCommitInput, i2 func(*codecommit.GetCommentsForComparedCommitOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCommentsForComparedCommitPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeCommitDouble) fakeGetCommentsForComparedCommitPagesWithContext(ctx context.Context, in *codecommit.GetCommentsForComparedCommitInput, pager func(*codecommit.GetCommentsForComparedCommitOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetCommentsForComparedCommit", paginators, ctx, in, pager, options...)
}

func (d *CodeCommitDouble) GetCommentsForComparedCommitRequest(i0 *codecommit.GetCommentsForComparedCommitInput) (r0 *request.Request, r1 *codecommit.GetCommentsForComparedCommitOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCommentsForComparedCommitRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.GetCommentsForComparedCommitOutput)
	return
}

func (d *CodeCommitDouble) GetCommentsForComparedCommitWithContext(i0 context.Context, i1 *codecommit.GetCommentsForComparedCommitInput, i2 ...request.Option) (r0 *codecommit.GetCommentsForComparedCommitOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCommentsForComparedCommitWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.GetCommentsForComparedCommitOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeGetCommentsForComparedCommitWithContext(ctx context.Context, in *codecommit.GetCommentsForComparedCommitInput, _ ...request.Option) (*codecommit.GetCommentsForComparedCommitOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetCommentsForComparedCommit cancelled", ctx.Err())
	default:
		return d.GetCommentsForComparedCommit(in)
	}
}

func (d *CodeCommitDouble) GetCommentsForPullRequest(i0 *codecommit.GetCommentsForPullRequestInput) (r0 *codecommit.GetCommentsForPullRequestOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCommentsForPullRequest", i0)
	r0, _ = returns[0].(*codecommit.GetCommentsForPullRequestOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) GetCommentsForPullRequestPages(i0 *codecommit.GetCommentsForPullRequestInput, i1 func(*codecommit.GetCommentsForPullRequestOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCommentsForPullRequestPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeCommitDouble) fakeGetCommentsForPullRequestPages(in *codecommit.GetCommentsForPullRequestInput, pager func(*codecommit.GetCommentsForPullRequestOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetCommentsForPullRequest", paginators, in, pager)
}

func (d *CodeCommitDouble) GetCommentsForPullRequestPagesWithContext(i0 context.Context, i1 *codecommit.GetCommentsForPullRequestInput, i2 func(*codecommit.GetCommentsForPullRequestOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCommentsForPullRequestPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeCommitDouble) fakeGetCommentsForPullRequestPagesWithContext(ctx context.Context, in *codecommit.GetCommentsForPullRequestInput, pager func(*codecommit.GetCommentsForPullRequestOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetCommentsForPullRequest", paginators, ctx, in, pager, options...)
}

func (d *CodeCommitDouble) GetCommentsForPullRequestRequest(i0 *codecommit.GetCommentsForPullRequestInput) (r0 *request.Request, r1 *codecommit.GetCommentsForPullRequestOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCommentsForPullRequestRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.GetCommentsForPullRequestOutput)
	return
}

func (d *CodeCommitDouble) GetCommentsForPullRequestWithContext(i0 context.Context, i1 *codecommit.GetCommentsForPullRequestInput, i2 ...request.Option) (r0 *codecommit.GetCommentsForPullRequestOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCommentsForPullRequestWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.GetCommentsForPullRequestOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeGetCommentsForPullRequestWithContext(ctx context.Context, in *codecommit.GetCommentsForPullRequestInput, _ ...request.Option) (*codecommit.GetCommentsForPullRequestOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetCommentsForPullRequest cancelled", ctx.Err())
	default:
		return d.GetCommentsForPullRequest(in)
	}
}

func (d *CodeCommitDouble) GetCommit(i0 *codecommit.GetCommitInput) (r0 *codecommit.GetCommitOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCommit", i0)
	r0, _ = returns[0].(*codecommit.GetCommitOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) GetCommitRequest(i0 *codecommit.GetCommitInput) (r0 *request.Request, r1 *codecommit.GetCommitOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCommitRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.GetCommitOutput)
	return
}

func (d *CodeCommitDouble) GetCommitWithContext(i0 context.Context, i1 *codecommit.GetCommitInput, i2 ...request.Option) (r0 *codecommit.GetCommitOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCommitWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.GetCommitOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeGetCommitWithContext(ctx context.Context, in *codecommit.GetCommitInput, _ ...request.Option) (*codecommit.GetCommitOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetCommit cancelled", ctx.Err())
	default:
		return d.GetCommit(in)
	}
}

func (d *CodeCommitDouble) GetDifferences(i0 *codecommit.GetDifferencesInput) (r0 *codecommit.GetDifferencesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDifferences", i0)
	r0, _ = returns[0].(*codecommit.GetDifferencesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) GetDifferencesPages(i0 *codecommit.GetDifferencesInput, i1 func(*codecommit.GetDifferencesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDifferencesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeCommitDouble) fakeGetDifferencesPages(in *codecommit.GetDifferencesInput, pager func(*codecommit.GetDifferencesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetDifferences", paginators, in, pager)
}

func (d *CodeCommitDouble) GetDifferencesPagesWithContext(i0 context.Context, i1 *codecommit.GetDifferencesInput, i2 func(*codecommit.GetDifferencesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDifferencesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeCommitDouble) fakeGetDifferencesPagesWithContext(ctx context.Context, in *codecommit.GetDifferencesInput, pager func(*codecommit.GetDifferencesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetDifferences", paginators, ctx, in, pager, options...)
}

func (d *CodeCommitDouble) GetDifferencesRequest(i0 *codecommit.GetDifferencesInput) (r0 *request.Request, r1 *codecommit.GetDifferencesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDifferencesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.GetDifferencesOutput)
	return
}

func (d *CodeCommitDouble) GetDifferencesWithContext(i0 context.Context, i1 *codecommit.GetDifferencesInput, i2 ...request.Option) (r0 *codecommit.GetDifferencesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDifferencesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.GetDifferencesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeGetDifferencesWithContext(ctx context.Context, in *codecommit.GetDifferencesInput, _ ...request.Option) (*codecommit.GetDifferencesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDifferences cancelled", ctx.Err())
	default:
		return d.GetDifferences(in)
	}
}

func (d *CodeCommitDouble) GetFile(i0 *codecommit.GetFileInput) (r0 *codecommit.GetFileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFile", i0)
	r0, _ = returns[0].(*codecommit.GetFileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) GetFileRequest(i0 *codecommit.GetFileInput) (r0 *request.Request, r1 *codecommit.GetFileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.GetFileOutput)
	return
}

func (d *CodeCommitDouble) GetFileWithContext(i0 context.Context, i1 *codecommit.GetFileInput, i2 ...request.Option) (r0 *codecommit.GetFileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.GetFileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeGetFileWithContext(ctx context.Context, in *codecommit.GetFileInput, _ ...request.Option) (*codecommit.GetFileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetFile cancelled", ctx.Err())
	default:
		return d.GetFile(in)
	}
}

func (d *CodeCommitDouble) GetFolder(i0 *codecommit.GetFolderInput) (r0 *codecommit.GetFolderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFolder", i0)
	r0, _ = returns[0].(*codecommit.GetFolderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) GetFolderRequest(i0 *codecommit.GetFolderInput) (r0 *request.Request, r1 *codecommit.GetFolderOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFolderRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.GetFolderOutput)
	return
}

func (d *CodeCommitDouble) GetFolderWithContext(i0 context.Context, i1 *codecommit.GetFolderInput, i2 ...request.Option) (r0 *codecommit.GetFolderOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFolderWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.GetFolderOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeGetFolderWithContext(ctx context.Context, in *codecommit.GetFolderInput, _ ...request.Option) (*codecommit.GetFolderOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetFolder cancelled", ctx.Err())
	default:
		return d.GetFolder(in)
	}
}

func (d *CodeCommitDouble) GetMergeCommit(i0 *codecommit.GetMergeCommitInput) (r0 *codecommit.GetMergeCommitOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMergeCommit", i0)
	r0, _ = returns[0].(*codecommit.GetMergeCommitOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) GetMergeCommitRequest(i0 *codecommit.GetMergeCommitInput) (r0 *request.Request, r1 *codecommit.GetMergeCommitOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMergeCommitRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.GetMergeCommitOutput)
	return
}

func (d *CodeCommitDouble) GetMergeCommitWithContext(i0 context.Context, i1 *codecommit.GetMergeCommitInput, i2 ...request.Option) (r0 *codecommit.GetMergeCommitOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMergeCommitWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.GetMergeCommitOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeGetMergeCommitWithContext(ctx context.Context, in *codecommit.GetMergeCommitInput, _ ...request.Option) (*codecommit.GetMergeCommitOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetMergeCommit cancelled", ctx.Err())
	default:
		return d.GetMergeCommit(in)
	}
}

func (d *CodeCommitDouble) GetMergeConflicts(i0 *codecommit.GetMergeConflictsInput) (r0 *codecommit.GetMergeConflictsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMergeConflicts", i0)
	r0, _ = returns[0].(*codecommit.GetMergeConflictsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) GetMergeConflictsPages(i0 *codecommit.GetMergeConflictsInput, i1 func(*codecommit.GetMergeConflictsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMergeConflictsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeCommitDouble) fakeGetMergeConflictsPages(in *codecommit.GetMergeConflictsInput, pager func(*codecommit.GetMergeConflictsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetMergeConflicts", paginators, in, pager)
}

func (d *CodeCommitDouble) GetMergeConflictsPagesWithContext(i0 context.Context, i1 *codecommit.GetMergeConflictsInput, i2 func(*codecommit.GetMergeConflictsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMergeConflictsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeCommitDouble) fakeGetMergeConflictsPagesWithContext(ctx context.Context, in *codecommit.GetMergeConflictsInput, pager func(*codecommit.GetMergeConflictsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetMergeConflicts", paginators, ctx, in, pager, options...)
}

func (d *CodeCommitDouble) GetMergeConflictsRequest(i0 *codecommit.GetMergeConflictsInput) (r0 *request.Request, r1 *codecommit.GetMergeConflictsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMergeConflictsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.GetMergeConflictsOutput)
	return
}

func (d *CodeCommitDouble) GetMergeConflictsWithContext(i0 context.Context, i1 *codecommit.GetMergeConflictsInput, i2 ...request.Option) (r0 *codecommit.GetMergeConflictsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMergeConflictsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.GetMergeConflictsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeGetMergeConflictsWithContext(ctx context.Context, in *codecommit.GetMergeConflictsInput, _ ...request.Option) (*codecommit.GetMergeConflictsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetMergeConflicts cancelled", ctx.Err())
	default:
		return d.GetMergeConflicts(in)
	}
}

func (d *CodeCommitDouble) GetMergeOptions(i0 *codecommit.GetMergeOptionsInput) (r0 *codecommit.GetMergeOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMergeOptions", i0)
	r0, _ = returns[0].(*codecommit.GetMergeOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) GetMergeOptionsRequest(i0 *codecommit.GetMergeOptionsInput) (r0 *request.Request, r1 *codecommit.GetMergeOptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMergeOptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.GetMergeOptionsOutput)
	return
}

func (d *CodeCommitDouble) GetMergeOptionsWithContext(i0 context.Context, i1 *codecommit.GetMergeOptionsInput, i2 ...request.Option) (r0 *codecommit.GetMergeOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMergeOptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.GetMergeOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeGetMergeOptionsWithContext(ctx context.Context, in *codecommit.GetMergeOptionsInput, _ ...request.Option) (*codecommit.GetMergeOptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetMergeOptions cancelled", ctx.Err())
	default:
		return d.GetMergeOptions(in)
	}
}

func (d *CodeCommitDouble) GetPullRequest(i0 *codecommit.GetPullRequestInput) (r0 *codecommit.GetPullRequestOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPullRequest", i0)
	r0, _ = returns[0].(*codecommit.GetPullRequestOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) GetPullRequestApprovalStates(i0 *codecommit.GetPullRequestApprovalStatesInput) (r0 *codecommit.GetPullRequestApprovalStatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPullRequestApprovalStates", i0)
	r0, _ = returns[0].(*codecommit.GetPullRequestApprovalStatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) GetPullRequestApprovalStatesRequest(i0 *codecommit.GetPullRequestApprovalStatesInput) (r0 *request.Request, r1 *codecommit.GetPullRequestApprovalStatesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPullRequestApprovalStatesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.GetPullRequestApprovalStatesOutput)
	return
}

func (d *CodeCommitDouble) GetPullRequestApprovalStatesWithContext(i0 context.Context, i1 *codecommit.GetPullRequestApprovalStatesInput, i2 ...request.Option) (r0 *codecommit.GetPullRequestApprovalStatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPullRequestApprovalStatesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.GetPullRequestApprovalStatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeGetPullRequestApprovalStatesWithContext(ctx context.Context, in *codecommit.GetPullRequestApprovalStatesInput, _ ...request.Option) (*codecommit.GetPullRequestApprovalStatesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetPullRequestApprovalStates cancelled", ctx.Err())
	default:
		return d.GetPullRequestApprovalStates(in)
	}
}

func (d *CodeCommitDouble) GetPullRequestOverrideState(i0 *codecommit.GetPullRequestOverrideStateInput) (r0 *codecommit.GetPullRequestOverrideStateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPullRequestOverrideState", i0)
	r0, _ = returns[0].(*codecommit.GetPullRequestOverrideStateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) GetPullRequestOverrideStateRequest(i0 *codecommit.GetPullRequestOverrideStateInput) (r0 *request.Request, r1 *codecommit.GetPullRequestOverrideStateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPullRequestOverrideStateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.GetPullRequestOverrideStateOutput)
	return
}

func (d *CodeCommitDouble) GetPullRequestOverrideStateWithContext(i0 context.Context, i1 *codecommit.GetPullRequestOverrideStateInput, i2 ...request.Option) (r0 *codecommit.GetPullRequestOverrideStateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPullRequestOverrideStateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.GetPullRequestOverrideStateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeGetPullRequestOverrideStateWithContext(ctx context.Context, in *codecommit.GetPullRequestOverrideStateInput, _ ...request.Option) (*codecommit.GetPullRequestOverrideStateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetPullRequestOverrideState cancelled", ctx.Err())
	default:
		return d.GetPullRequestOverrideState(in)
	}
}

func (d *CodeCommitDouble) GetPullRequestRequest(i0 *codecommit.GetPullRequestInput) (r0 *request.Request, r1 *codecommit.GetPullRequestOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPullRequestRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.GetPullRequestOutput)
	return
}

func (d *CodeCommitDouble) GetPullRequestWithContext(i0 context.Context, i1 *codecommit.GetPullRequestInput, i2 ...request.Option) (r0 *codecommit.GetPullRequestOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPullRequestWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.GetPullRequestOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeGetPullRequestWithContext(ctx context.Context, in *codecommit.GetPullRequestInput, _ ...request.Option) (*codecommit.GetPullRequestOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetPullRequest cancelled", ctx.Err())
	default:
		return d.GetPullRequest(in)
	}
}

func (d *CodeCommitDouble) GetRepository(i0 *codecommit.GetRepositoryInput) (r0 *codecommit.GetRepositoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRepository", i0)
	r0, _ = returns[0].(*codecommit.GetRepositoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) GetRepositoryRequest(i0 *codecommit.GetRepositoryInput) (r0 *request.Request, r1 *codecommit.GetRepositoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRepositoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.GetRepositoryOutput)
	return
}

func (d *CodeCommitDouble) GetRepositoryTriggers(i0 *codecommit.GetRepositoryTriggersInput) (r0 *codecommit.GetRepositoryTriggersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRepositoryTriggers", i0)
	r0, _ = returns[0].(*codecommit.GetRepositoryTriggersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) GetRepositoryTriggersRequest(i0 *codecommit.GetRepositoryTriggersInput) (r0 *request.Request, r1 *codecommit.GetRepositoryTriggersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRepositoryTriggersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.GetRepositoryTriggersOutput)
	return
}

func (d *CodeCommitDouble) GetRepositoryTriggersWithContext(i0 context.Context, i1 *codecommit.GetRepositoryTriggersInput, i2 ...request.Option) (r0 *codecommit.GetRepositoryTriggersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRepositoryTriggersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.GetRepositoryTriggersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeGetRepositoryTriggersWithContext(ctx context.Context, in *codecommit.GetRepositoryTriggersInput, _ ...request.Option) (*codecommit.GetRepositoryTriggersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRepositoryTriggers cancelled", ctx.Err())
	default:
		return d.GetRepositoryTriggers(in)
	}
}

func (d *CodeCommitDouble) GetRepositoryWithContext(i0 context.Context, i1 *codecommit.GetRepositoryInput, i2 ...request.Option) (r0 *codecommit.GetRepositoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRepositoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.GetRepositoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeGetRepositoryWithContext(ctx context.Context, in *codecommit.GetRepositoryInput, _ ...request.Option) (*codecommit.GetRepositoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRepository cancelled", ctx.Err())
	default:
		return d.GetRepository(in)
	}
}

func (d *CodeCommitDouble) ListApprovalRuleTemplates(i0 *codecommit.ListApprovalRuleTemplatesInput) (r0 *codecommit.ListApprovalRuleTemplatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApprovalRuleTemplates", i0)
	r0, _ = returns[0].(*codecommit.ListApprovalRuleTemplatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) ListApprovalRuleTemplatesPages(i0 *codecommit.ListApprovalRuleTemplatesInput, i1 func(*codecommit.ListApprovalRuleTemplatesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApprovalRuleTemplatesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeCommitDouble) fakeListApprovalRuleTemplatesPages(in *codecommit.ListApprovalRuleTemplatesInput, pager func(*codecommit.ListApprovalRuleTemplatesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListApprovalRuleTemplates", paginators, in, pager)
}

func (d *CodeCommitDouble) ListApprovalRuleTemplatesPagesWithContext(i0 context.Context, i1 *codecommit.ListApprovalRuleTemplatesInput, i2 func(*codecommit.ListApprovalRuleTemplatesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApprovalRuleTemplatesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeCommitDouble) fakeListApprovalRuleTemplatesPagesWithContext(ctx context.Context, in *codecommit.ListApprovalRuleTemplatesInput, pager func(*codecommit.ListApprovalRuleTemplatesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListApprovalRuleTemplates", paginators, ctx, in, pager, options...)
}

func (d *CodeCommitDouble) ListApprovalRuleTemplatesRequest(i0 *codecommit.ListApprovalRuleTemplatesInput) (r0 *request.Request, r1 *codecommit.ListApprovalRuleTemplatesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApprovalRuleTemplatesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.ListApprovalRuleTemplatesOutput)
	return
}

func (d *CodeCommitDouble) ListApprovalRuleTemplatesWithContext(i0 context.Context, i1 *codecommit.ListApprovalRuleTemplatesInput, i2 ...request.Option) (r0 *codecommit.ListApprovalRuleTemplatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApprovalRuleTemplatesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.ListApprovalRuleTemplatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeListApprovalRuleTemplatesWithContext(ctx context.Context, in *codecommit.ListApprovalRuleTemplatesInput, _ ...request.Option) (*codecommit.ListApprovalRuleTemplatesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListApprovalRuleTemplates cancelled", ctx.Err())
	default:
		return d.ListApprovalRuleTemplates(in)
	}
}

func (d *CodeCommitDouble) ListAssociatedApprovalRuleTemplatesForRepository(i0 *codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryInput) (r0 *codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssociatedApprovalRuleTemplatesForRepository", i0)
	r0, _ = returns[0].(*codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) ListAssociatedApprovalRuleTemplatesForRepositoryPages(i0 *codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryInput, i1 func(*codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssociatedApprovalRuleTemplatesForRepositoryPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeCommitDouble) fakeListAssociatedApprovalRuleTemplatesForRepositoryPages(in *codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryInput, pager func(*codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListAssociatedApprovalRuleTemplatesForRepository", paginators, in, pager)
}

func (d *CodeCommitDouble) ListAssociatedApprovalRuleTemplatesForRepositoryPagesWithContext(i0 context.Context, i1 *codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryInput, i2 func(*codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssociatedApprovalRuleTemplatesForRepositoryPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeCommitDouble) fakeListAssociatedApprovalRuleTemplatesForRepositoryPagesWithContext(ctx context.Context, in *codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryInput, pager func(*codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListAssociatedApprovalRuleTemplatesForRepository", paginators, ctx, in, pager, options...)
}

func (d *CodeCommitDouble) ListAssociatedApprovalRuleTemplatesForRepositoryRequest(i0 *codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryInput) (r0 *request.Request, r1 *codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssociatedApprovalRuleTemplatesForRepositoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryOutput)
	return
}

func (d *CodeCommitDouble) ListAssociatedApprovalRuleTemplatesForRepositoryWithContext(i0 context.Context, i1 *codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryInput, i2 ...request.Option) (r0 *codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssociatedApprovalRuleTemplatesForRepositoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeListAssociatedApprovalRuleTemplatesForRepositoryWithContext(ctx context.Context, in *codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryInput, _ ...request.Option) (*codecommit.ListAssociatedApprovalRuleTemplatesForRepositoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAssociatedApprovalRuleTemplatesForRepository cancelled", ctx.Err())
	default:
		return d.ListAssociatedApprovalRuleTemplatesForRepository(in)
	}
}

func (d *CodeCommitDouble) ListBranches(i0 *codecommit.ListBranchesInput) (r0 *codecommit.ListBranchesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBranches", i0)
	r0, _ = returns[0].(*codecommit.ListBranchesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) ListBranchesPages(i0 *codecommit.ListBranchesInput, i1 func(*codecommit.ListBranchesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBranchesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeCommitDouble) fakeListBranchesPages(in *codecommit.ListBranchesInput, pager func(*codecommit.ListBranchesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListBranches", paginators, in, pager)
}

func (d *CodeCommitDouble) ListBranchesPagesWithContext(i0 context.Context, i1 *codecommit.ListBranchesInput, i2 func(*codecommit.ListBranchesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBranchesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeCommitDouble) fakeListBranchesPagesWithContext(ctx context.Context, in *codecommit.ListBranchesInput, pager func(*codecommit.ListBranchesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListBranches", paginators, ctx, in, pager, options...)
}

func (d *CodeCommitDouble) ListBranchesRequest(i0 *codecommit.ListBranchesInput) (r0 *request.Request, r1 *codecommit.ListBranchesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBranchesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.ListBranchesOutput)
	return
}

func (d *CodeCommitDouble) ListBranchesWithContext(i0 context.Context, i1 *codecommit.ListBranchesInput, i2 ...request.Option) (r0 *codecommit.ListBranchesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBranchesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.ListBranchesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeListBranchesWithContext(ctx context.Context, in *codecommit.ListBranchesInput, _ ...request.Option) (*codecommit.ListBranchesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListBranches cancelled", ctx.Err())
	default:
		return d.ListBranches(in)
	}
}

func (d *CodeCommitDouble) ListPullRequests(i0 *codecommit.ListPullRequestsInput) (r0 *codecommit.ListPullRequestsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPullRequests", i0)
	r0, _ = returns[0].(*codecommit.ListPullRequestsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) ListPullRequestsPages(i0 *codecommit.ListPullRequestsInput, i1 func(*codecommit.ListPullRequestsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPullRequestsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeCommitDouble) fakeListPullRequestsPages(in *codecommit.ListPullRequestsInput, pager func(*codecommit.ListPullRequestsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListPullRequests", paginators, in, pager)
}

func (d *CodeCommitDouble) ListPullRequestsPagesWithContext(i0 context.Context, i1 *codecommit.ListPullRequestsInput, i2 func(*codecommit.ListPullRequestsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPullRequestsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeCommitDouble) fakeListPullRequestsPagesWithContext(ctx context.Context, in *codecommit.ListPullRequestsInput, pager func(*codecommit.ListPullRequestsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListPullRequests", paginators, ctx, in, pager, options...)
}

func (d *CodeCommitDouble) ListPullRequestsRequest(i0 *codecommit.ListPullRequestsInput) (r0 *request.Request, r1 *codecommit.ListPullRequestsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPullRequestsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.ListPullRequestsOutput)
	return
}

func (d *CodeCommitDouble) ListPullRequestsWithContext(i0 context.Context, i1 *codecommit.ListPullRequestsInput, i2 ...request.Option) (r0 *codecommit.ListPullRequestsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPullRequestsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.ListPullRequestsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeListPullRequestsWithContext(ctx context.Context, in *codecommit.ListPullRequestsInput, _ ...request.Option) (*codecommit.ListPullRequestsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListPullRequests cancelled", ctx.Err())
	default:
		return d.ListPullRequests(in)
	}
}

func (d *CodeCommitDouble) ListRepositories(i0 *codecommit.ListRepositoriesInput) (r0 *codecommit.ListRepositoriesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRepositories", i0)
	r0, _ = returns[0].(*codecommit.ListRepositoriesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) ListRepositoriesForApprovalRuleTemplate(i0 *codecommit.ListRepositoriesForApprovalRuleTemplateInput) (r0 *codecommit.ListRepositoriesForApprovalRuleTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRepositoriesForApprovalRuleTemplate", i0)
	r0, _ = returns[0].(*codecommit.ListRepositoriesForApprovalRuleTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) ListRepositoriesForApprovalRuleTemplatePages(i0 *codecommit.ListRepositoriesForApprovalRuleTemplateInput, i1 func(*codecommit.ListRepositoriesForApprovalRuleTemplateOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRepositoriesForApprovalRuleTemplatePages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeCommitDouble) fakeListRepositoriesForApprovalRuleTemplatePages(in *codecommit.ListRepositoriesForApprovalRuleTemplateInput, pager func(*codecommit.ListRepositoriesForApprovalRuleTemplateOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListRepositoriesForApprovalRuleTemplate", paginators, in, pager)
}

func (d *CodeCommitDouble) ListRepositoriesForApprovalRuleTemplatePagesWithContext(i0 context.Context, i1 *codecommit.ListRepositoriesForApprovalRuleTemplateInput, i2 func(*codecommit.ListRepositoriesForApprovalRuleTemplateOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRepositoriesForApprovalRuleTemplatePagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeCommitDouble) fakeListRepositoriesForApprovalRuleTemplatePagesWithContext(ctx context.Context, in *codecommit.ListRepositoriesForApprovalRuleTemplateInput, pager func(*codecommit.ListRepositoriesForApprovalRuleTemplateOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListRepositoriesForApprovalRuleTemplate", paginators, ctx, in, pager, options...)
}

func (d *CodeCommitDouble) ListRepositoriesForApprovalRuleTemplateRequest(i0 *codecommit.ListRepositoriesForApprovalRuleTemplateInput) (r0 *request.Request, r1 *codecommit.ListRepositoriesForApprovalRuleTemplateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRepositoriesForApprovalRuleTemplateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.ListRepositoriesForApprovalRuleTemplateOutput)
	return
}

func (d *CodeCommitDouble) ListRepositoriesForApprovalRuleTemplateWithContext(i0 context.Context, i1 *codecommit.ListRepositoriesForApprovalRuleTemplateInput, i2 ...request.Option) (r0 *codecommit.ListRepositoriesForApprovalRuleTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRepositoriesForApprovalRuleTemplateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.ListRepositoriesForApprovalRuleTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeListRepositoriesForApprovalRuleTemplateWithContext(ctx context.Context, in *codecommit.ListRepositoriesForApprovalRuleTemplateInput, _ ...request.Option) (*codecommit.ListRepositoriesForApprovalRuleTemplateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListRepositoriesForApprovalRuleTemplate cancelled", ctx.Err())
	default:
		return d.ListRepositoriesForApprovalRuleTemplate(in)
	}
}

func (d *CodeCommitDouble) ListRepositoriesPages(i0 *codecommit.ListRepositoriesInput, i1 func(*codecommit.ListRepositoriesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRepositoriesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeCommitDouble) fakeListRepositoriesPages(in *codecommit.ListRepositoriesInput, pager func(*codecommit.ListRepositoriesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListRepositories", paginators, in, pager)
}

func (d *CodeCommitDouble) ListRepositoriesPagesWithContext(i0 context.Context, i1 *codecommit.ListRepositoriesInput, i2 func(*codecommit.ListRepositoriesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRepositoriesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CodeCommitDouble) fakeListRepositoriesPagesWithContext(ctx context.Context, in *codecommit.ListRepositoriesInput, pager func(*codecommit.ListRepositoriesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListRepositories", paginators, ctx, in, pager, options...)
}

func (d *CodeCommitDouble) ListRepositoriesRequest(i0 *codecommit.ListRepositoriesInput) (r0 *request.Request, r1 *codecommit.ListRepositoriesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRepositoriesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.ListRepositoriesOutput)
	return
}

func (d *CodeCommitDouble) ListRepositoriesWithContext(i0 context.Context, i1 *codecommit.ListRepositoriesInput, i2 ...request.Option) (r0 *codecommit.ListRepositoriesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRepositoriesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.ListRepositoriesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeListRepositoriesWithContext(ctx context.Context, in *codecommit.ListRepositoriesInput, _ ...request.Option) (*codecommit.ListRepositoriesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListRepositories cancelled", ctx.Err())
	default:
		return d.ListRepositories(in)
	}
}

func (d *CodeCommitDouble) ListTagsForResource(i0 *codecommit.ListTagsForResourceInput) (r0 *codecommit.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*codecommit.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) ListTagsForResourceRequest(i0 *codecommit.ListTagsForResourceInput) (r0 *request.Request, r1 *codecommit.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.ListTagsForResourceOutput)
	return
}

func (d *CodeCommitDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *codecommit.ListTagsForResourceInput, i2 ...request.Option) (r0 *codecommit.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *codecommit.ListTagsForResourceInput, _ ...request.Option) (*codecommit.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *CodeCommitDouble) MergeBranchesByFastForward(i0 *codecommit.MergeBranchesByFastForwardInput) (r0 *codecommit.MergeBranchesByFastForwardOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("MergeBranchesByFastForward", i0)
	r0, _ = returns[0].(*codecommit.MergeBranchesByFastForwardOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) MergeBranchesByFastForwardRequest(i0 *codecommit.MergeBranchesByFastForwardInput) (r0 *request.Request, r1 *codecommit.MergeBranchesByFastForwardOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("MergeBranchesByFastForwardRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.MergeBranchesByFastForwardOutput)
	return
}

func (d *CodeCommitDouble) MergeBranchesByFastForwardWithContext(i0 context.Context, i1 *codecommit.MergeBranchesByFastForwardInput, i2 ...request.Option) (r0 *codecommit.MergeBranchesByFastForwardOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("MergeBranchesByFastForwardWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.MergeBranchesByFastForwardOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeMergeBranchesByFastForwardWithContext(ctx context.Context, in *codecommit.MergeBranchesByFastForwardInput, _ ...request.Option) (*codecommit.MergeBranchesByFastForwardOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "MergeBranchesByFastForward cancelled", ctx.Err())
	default:
		return d.MergeBranchesByFastForward(in)
	}
}

func (d *CodeCommitDouble) MergeBranchesBySquash(i0 *codecommit.MergeBranchesBySquashInput) (r0 *codecommit.MergeBranchesBySquashOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("MergeBranchesBySquash", i0)
	r0, _ = returns[0].(*codecommit.MergeBranchesBySquashOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) MergeBranchesBySquashRequest(i0 *codecommit.MergeBranchesBySquashInput) (r0 *request.Request, r1 *codecommit.MergeBranchesBySquashOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("MergeBranchesBySquashRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.MergeBranchesBySquashOutput)
	return
}

func (d *CodeCommitDouble) MergeBranchesBySquashWithContext(i0 context.Context, i1 *codecommit.MergeBranchesBySquashInput, i2 ...request.Option) (r0 *codecommit.MergeBranchesBySquashOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("MergeBranchesBySquashWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.MergeBranchesBySquashOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeMergeBranchesBySquashWithContext(ctx context.Context, in *codecommit.MergeBranchesBySquashInput, _ ...request.Option) (*codecommit.MergeBranchesBySquashOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "MergeBranchesBySquash cancelled", ctx.Err())
	default:
		return d.MergeBranchesBySquash(in)
	}
}

func (d *CodeCommitDouble) MergeBranchesByThreeWay(i0 *codecommit.MergeBranchesByThreeWayInput) (r0 *codecommit.MergeBranchesByThreeWayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("MergeBranchesByThreeWay", i0)
	r0, _ = returns[0].(*codecommit.MergeBranchesByThreeWayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) MergeBranchesByThreeWayRequest(i0 *codecommit.MergeBranchesByThreeWayInput) (r0 *request.Request, r1 *codecommit.MergeBranchesByThreeWayOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("MergeBranchesByThreeWayRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.MergeBranchesByThreeWayOutput)
	return
}

func (d *CodeCommitDouble) MergeBranchesByThreeWayWithContext(i0 context.Context, i1 *codecommit.MergeBranchesByThreeWayInput, i2 ...request.Option) (r0 *codecommit.MergeBranchesByThreeWayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("MergeBranchesByThreeWayWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.MergeBranchesByThreeWayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeMergeBranchesByThreeWayWithContext(ctx context.Context, in *codecommit.MergeBranchesByThreeWayInput, _ ...request.Option) (*codecommit.MergeBranchesByThreeWayOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "MergeBranchesByThreeWay cancelled", ctx.Err())
	default:
		return d.MergeBranchesByThreeWay(in)
	}
}

func (d *CodeCommitDouble) MergePullRequestByFastForward(i0 *codecommit.MergePullRequestByFastForwardInput) (r0 *codecommit.MergePullRequestByFastForwardOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("MergePullRequestByFastForward", i0)
	r0, _ = returns[0].(*codecommit.MergePullRequestByFastForwardOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) MergePullRequestByFastForwardRequest(i0 *codecommit.MergePullRequestByFastForwardInput) (r0 *request.Request, r1 *codecommit.MergePullRequestByFastForwardOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("MergePullRequestByFastForwardRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.MergePullRequestByFastForwardOutput)
	return
}

func (d *CodeCommitDouble) MergePullRequestByFastForwardWithContext(i0 context.Context, i1 *codecommit.MergePullRequestByFastForwardInput, i2 ...request.Option) (r0 *codecommit.MergePullRequestByFastForwardOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("MergePullRequestByFastForwardWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.MergePullRequestByFastForwardOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeMergePullRequestByFastForwardWithContext(ctx context.Context, in *codecommit.MergePullRequestByFastForwardInput, _ ...request.Option) (*codecommit.MergePullRequestByFastForwardOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "MergePullRequestByFastForward cancelled", ctx.Err())
	default:
		return d.MergePullRequestByFastForward(in)
	}
}

func (d *CodeCommitDouble) MergePullRequestBySquash(i0 *codecommit.MergePullRequestBySquashInput) (r0 *codecommit.MergePullRequestBySquashOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("MergePullRequestBySquash", i0)
	r0, _ = returns[0].(*codecommit.MergePullRequestBySquashOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) MergePullRequestBySquashRequest(i0 *codecommit.MergePullRequestBySquashInput) (r0 *request.Request, r1 *codecommit.MergePullRequestBySquashOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("MergePullRequestBySquashRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.MergePullRequestBySquashOutput)
	return
}

func (d *CodeCommitDouble) MergePullRequestBySquashWithContext(i0 context.Context, i1 *codecommit.MergePullRequestBySquashInput, i2 ...request.Option) (r0 *codecommit.MergePullRequestBySquashOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("MergePullRequestBySquashWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.MergePullRequestBySquashOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeMergePullRequestBySquashWithContext(ctx context.Context, in *codecommit.MergePullRequestBySquashInput, _ ...request.Option) (*codecommit.MergePullRequestBySquashOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "MergePullRequestBySquash cancelled", ctx.Err())
	default:
		return d.MergePullRequestBySquash(in)
	}
}

func (d *CodeCommitDouble) MergePullRequestByThreeWay(i0 *codecommit.MergePullRequestByThreeWayInput) (r0 *codecommit.MergePullRequestByThreeWayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("MergePullRequestByThreeWay", i0)
	r0, _ = returns[0].(*codecommit.MergePullRequestByThreeWayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) MergePullRequestByThreeWayRequest(i0 *codecommit.MergePullRequestByThreeWayInput) (r0 *request.Request, r1 *codecommit.MergePullRequestByThreeWayOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("MergePullRequestByThreeWayRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.MergePullRequestByThreeWayOutput)
	return
}

func (d *CodeCommitDouble) MergePullRequestByThreeWayWithContext(i0 context.Context, i1 *codecommit.MergePullRequestByThreeWayInput, i2 ...request.Option) (r0 *codecommit.MergePullRequestByThreeWayOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("MergePullRequestByThreeWayWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.MergePullRequestByThreeWayOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeMergePullRequestByThreeWayWithContext(ctx context.Context, in *codecommit.MergePullRequestByThreeWayInput, _ ...request.Option) (*codecommit.MergePullRequestByThreeWayOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "MergePullRequestByThreeWay cancelled", ctx.Err())
	default:
		return d.MergePullRequestByThreeWay(in)
	}
}

func (d *CodeCommitDouble) OverridePullRequestApprovalRules(i0 *codecommit.OverridePullRequestApprovalRulesInput) (r0 *codecommit.OverridePullRequestApprovalRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("OverridePullRequestApprovalRules", i0)
	r0, _ = returns[0].(*codecommit.OverridePullRequestApprovalRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) OverridePullRequestApprovalRulesRequest(i0 *codecommit.OverridePullRequestApprovalRulesInput) (r0 *request.Request, r1 *codecommit.OverridePullRequestApprovalRulesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("OverridePullRequestApprovalRulesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.OverridePullRequestApprovalRulesOutput)
	return
}

func (d *CodeCommitDouble) OverridePullRequestApprovalRulesWithContext(i0 context.Context, i1 *codecommit.OverridePullRequestApprovalRulesInput, i2 ...request.Option) (r0 *codecommit.OverridePullRequestApprovalRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("OverridePullRequestApprovalRulesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.OverridePullRequestApprovalRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeOverridePullRequestApprovalRulesWithContext(ctx context.Context, in *codecommit.OverridePullRequestApprovalRulesInput, _ ...request.Option) (*codecommit.OverridePullRequestApprovalRulesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "OverridePullRequestApprovalRules cancelled", ctx.Err())
	default:
		return d.OverridePullRequestApprovalRules(in)
	}
}

func (d *CodeCommitDouble) PostCommentForComparedCommit(i0 *codecommit.PostCommentForComparedCommitInput) (r0 *codecommit.PostCommentForComparedCommitOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PostCommentForComparedCommit", i0)
	r0, _ = returns[0].(*codecommit.PostCommentForComparedCommitOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) PostCommentForComparedCommitRequest(i0 *codecommit.PostCommentForComparedCommitInput) (r0 *request.Request, r1 *codecommit.PostCommentForComparedCommitOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PostCommentForComparedCommitRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.PostCommentForComparedCommitOutput)
	return
}

func (d *CodeCommitDouble) PostCommentForComparedCommitWithContext(i0 context.Context, i1 *codecommit.PostCommentForComparedCommitInput, i2 ...request.Option) (r0 *codecommit.PostCommentForComparedCommitOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PostCommentForComparedCommitWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.PostCommentForComparedCommitOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakePostCommentForComparedCommitWithContext(ctx context.Context, in *codecommit.PostCommentForComparedCommitInput, _ ...request.Option) (*codecommit.PostCommentForComparedCommitOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PostCommentForComparedCommit cancelled", ctx.Err())
	default:
		return d.PostCommentForComparedCommit(in)
	}
}

func (d *CodeCommitDouble) PostCommentForPullRequest(i0 *codecommit.PostCommentForPullRequestInput) (r0 *codecommit.PostCommentForPullRequestOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PostCommentForPullRequest", i0)
	r0, _ = returns[0].(*codecommit.PostCommentForPullRequestOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) PostCommentForPullRequestRequest(i0 *codecommit.PostCommentForPullRequestInput) (r0 *request.Request, r1 *codecommit.PostCommentForPullRequestOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PostCommentForPullRequestRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.PostCommentForPullRequestOutput)
	return
}

func (d *CodeCommitDouble) PostCommentForPullRequestWithContext(i0 context.Context, i1 *codecommit.PostCommentForPullRequestInput, i2 ...request.Option) (r0 *codecommit.PostCommentForPullRequestOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PostCommentForPullRequestWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.PostCommentForPullRequestOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakePostCommentForPullRequestWithContext(ctx context.Context, in *codecommit.PostCommentForPullRequestInput, _ ...request.Option) (*codecommit.PostCommentForPullRequestOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PostCommentForPullRequest cancelled", ctx.Err())
	default:
		return d.PostCommentForPullRequest(in)
	}
}

func (d *CodeCommitDouble) PostCommentReply(i0 *codecommit.PostCommentReplyInput) (r0 *codecommit.PostCommentReplyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PostCommentReply", i0)
	r0, _ = returns[0].(*codecommit.PostCommentReplyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) PostCommentReplyRequest(i0 *codecommit.PostCommentReplyInput) (r0 *request.Request, r1 *codecommit.PostCommentReplyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PostCommentReplyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.PostCommentReplyOutput)
	return
}

func (d *CodeCommitDouble) PostCommentReplyWithContext(i0 context.Context, i1 *codecommit.PostCommentReplyInput, i2 ...request.Option) (r0 *codecommit.PostCommentReplyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PostCommentReplyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.PostCommentReplyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakePostCommentReplyWithContext(ctx context.Context, in *codecommit.PostCommentReplyInput, _ ...request.Option) (*codecommit.PostCommentReplyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PostCommentReply cancelled", ctx.Err())
	default:
		return d.PostCommentReply(in)
	}
}

func (d *CodeCommitDouble) PutFile(i0 *codecommit.PutFileInput) (r0 *codecommit.PutFileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutFile", i0)
	r0, _ = returns[0].(*codecommit.PutFileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) PutFileRequest(i0 *codecommit.PutFileInput) (r0 *request.Request, r1 *codecommit.PutFileOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutFileRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.PutFileOutput)
	return
}

func (d *CodeCommitDouble) PutFileWithContext(i0 context.Context, i1 *codecommit.PutFileInput, i2 ...request.Option) (r0 *codecommit.PutFileOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutFileWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.PutFileOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakePutFileWithContext(ctx context.Context, in *codecommit.PutFileInput, _ ...request.Option) (*codecommit.PutFileOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutFile cancelled", ctx.Err())
	default:
		return d.PutFile(in)
	}
}

func (d *CodeCommitDouble) PutRepositoryTriggers(i0 *codecommit.PutRepositoryTriggersInput) (r0 *codecommit.PutRepositoryTriggersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRepositoryTriggers", i0)
	r0, _ = returns[0].(*codecommit.PutRepositoryTriggersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) PutRepositoryTriggersRequest(i0 *codecommit.PutRepositoryTriggersInput) (r0 *request.Request, r1 *codecommit.PutRepositoryTriggersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRepositoryTriggersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.PutRepositoryTriggersOutput)
	return
}

func (d *CodeCommitDouble) PutRepositoryTriggersWithContext(i0 context.Context, i1 *codecommit.PutRepositoryTriggersInput, i2 ...request.Option) (r0 *codecommit.PutRepositoryTriggersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRepositoryTriggersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.PutRepositoryTriggersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakePutRepositoryTriggersWithContext(ctx context.Context, in *codecommit.PutRepositoryTriggersInput, _ ...request.Option) (*codecommit.PutRepositoryTriggersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutRepositoryTriggers cancelled", ctx.Err())
	default:
		return d.PutRepositoryTriggers(in)
	}
}

func (d *CodeCommitDouble) TagResource(i0 *codecommit.TagResourceInput) (r0 *codecommit.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*codecommit.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) TagResourceRequest(i0 *codecommit.TagResourceInput) (r0 *request.Request, r1 *codecommit.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.TagResourceOutput)
	return
}

func (d *CodeCommitDouble) TagResourceWithContext(i0 context.Context, i1 *codecommit.TagResourceInput, i2 ...request.Option) (r0 *codecommit.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeTagResourceWithContext(ctx context.Context, in *codecommit.TagResourceInput, _ ...request.Option) (*codecommit.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *CodeCommitDouble) TestRepositoryTriggers(i0 *codecommit.TestRepositoryTriggersInput) (r0 *codecommit.TestRepositoryTriggersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestRepositoryTriggers", i0)
	r0, _ = returns[0].(*codecommit.TestRepositoryTriggersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) TestRepositoryTriggersRequest(i0 *codecommit.TestRepositoryTriggersInput) (r0 *request.Request, r1 *codecommit.TestRepositoryTriggersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestRepositoryTriggersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.TestRepositoryTriggersOutput)
	return
}

func (d *CodeCommitDouble) TestRepositoryTriggersWithContext(i0 context.Context, i1 *codecommit.TestRepositoryTriggersInput, i2 ...request.Option) (r0 *codecommit.TestRepositoryTriggersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestRepositoryTriggersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.TestRepositoryTriggersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeTestRepositoryTriggersWithContext(ctx context.Context, in *codecommit.TestRepositoryTriggersInput, _ ...request.Option) (*codecommit.TestRepositoryTriggersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TestRepositoryTriggers cancelled", ctx.Err())
	default:
		return d.TestRepositoryTriggers(in)
	}
}

func (d *CodeCommitDouble) UntagResource(i0 *codecommit.UntagResourceInput) (r0 *codecommit.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*codecommit.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) UntagResourceRequest(i0 *codecommit.UntagResourceInput) (r0 *request.Request, r1 *codecommit.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.UntagResourceOutput)
	return
}

func (d *CodeCommitDouble) UntagResourceWithContext(i0 context.Context, i1 *codecommit.UntagResourceInput, i2 ...request.Option) (r0 *codecommit.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeUntagResourceWithContext(ctx context.Context, in *codecommit.UntagResourceInput, _ ...request.Option) (*codecommit.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *CodeCommitDouble) UpdateApprovalRuleTemplateContent(i0 *codecommit.UpdateApprovalRuleTemplateContentInput) (r0 *codecommit.UpdateApprovalRuleTemplateContentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApprovalRuleTemplateContent", i0)
	r0, _ = returns[0].(*codecommit.UpdateApprovalRuleTemplateContentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) UpdateApprovalRuleTemplateContentRequest(i0 *codecommit.UpdateApprovalRuleTemplateContentInput) (r0 *request.Request, r1 *codecommit.UpdateApprovalRuleTemplateContentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApprovalRuleTemplateContentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.UpdateApprovalRuleTemplateContentOutput)
	return
}

func (d *CodeCommitDouble) UpdateApprovalRuleTemplateContentWithContext(i0 context.Context, i1 *codecommit.UpdateApprovalRuleTemplateContentInput, i2 ...request.Option) (r0 *codecommit.UpdateApprovalRuleTemplateContentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApprovalRuleTemplateContentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.UpdateApprovalRuleTemplateContentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeUpdateApprovalRuleTemplateContentWithContext(ctx context.Context, in *codecommit.UpdateApprovalRuleTemplateContentInput, _ ...request.Option) (*codecommit.UpdateApprovalRuleTemplateContentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateApprovalRuleTemplateContent cancelled", ctx.Err())
	default:
		return d.UpdateApprovalRuleTemplateContent(in)
	}
}

func (d *CodeCommitDouble) UpdateApprovalRuleTemplateDescription(i0 *codecommit.UpdateApprovalRuleTemplateDescriptionInput) (r0 *codecommit.UpdateApprovalRuleTemplateDescriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApprovalRuleTemplateDescription", i0)
	r0, _ = returns[0].(*codecommit.UpdateApprovalRuleTemplateDescriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) UpdateApprovalRuleTemplateDescriptionRequest(i0 *codecommit.UpdateApprovalRuleTemplateDescriptionInput) (r0 *request.Request, r1 *codecommit.UpdateApprovalRuleTemplateDescriptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApprovalRuleTemplateDescriptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.UpdateApprovalRuleTemplateDescriptionOutput)
	return
}

func (d *CodeCommitDouble) UpdateApprovalRuleTemplateDescriptionWithContext(i0 context.Context, i1 *codecommit.UpdateApprovalRuleTemplateDescriptionInput, i2 ...request.Option) (r0 *codecommit.UpdateApprovalRuleTemplateDescriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApprovalRuleTemplateDescriptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.UpdateApprovalRuleTemplateDescriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeUpdateApprovalRuleTemplateDescriptionWithContext(ctx context.Context, in *codecommit.UpdateApprovalRuleTemplateDescriptionInput, _ ...request.Option) (*codecommit.UpdateApprovalRuleTemplateDescriptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateApprovalRuleTemplateDescription cancelled", ctx.Err())
	default:
		return d.UpdateApprovalRuleTemplateDescription(in)
	}
}

func (d *CodeCommitDouble) UpdateApprovalRuleTemplateName(i0 *codecommit.UpdateApprovalRuleTemplateNameInput) (r0 *codecommit.UpdateApprovalRuleTemplateNameOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApprovalRuleTemplateName", i0)
	r0, _ = returns[0].(*codecommit.UpdateApprovalRuleTemplateNameOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) UpdateApprovalRuleTemplateNameRequest(i0 *codecommit.UpdateApprovalRuleTemplateNameInput) (r0 *request.Request, r1 *codecommit.UpdateApprovalRuleTemplateNameOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApprovalRuleTemplateNameRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.UpdateApprovalRuleTemplateNameOutput)
	return
}

func (d *CodeCommitDouble) UpdateApprovalRuleTemplateNameWithContext(i0 context.Context, i1 *codecommit.UpdateApprovalRuleTemplateNameInput, i2 ...request.Option) (r0 *codecommit.UpdateApprovalRuleTemplateNameOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApprovalRuleTemplateNameWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.UpdateApprovalRuleTemplateNameOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeUpdateApprovalRuleTemplateNameWithContext(ctx context.Context, in *codecommit.UpdateApprovalRuleTemplateNameInput, _ ...request.Option) (*codecommit.UpdateApprovalRuleTemplateNameOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateApprovalRuleTemplateName cancelled", ctx.Err())
	default:
		return d.UpdateApprovalRuleTemplateName(in)
	}
}

func (d *CodeCommitDouble) UpdateComment(i0 *codecommit.UpdateCommentInput) (r0 *codecommit.UpdateCommentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateComment", i0)
	r0, _ = returns[0].(*codecommit.UpdateCommentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) UpdateCommentRequest(i0 *codecommit.UpdateCommentInput) (r0 *request.Request, r1 *codecommit.UpdateCommentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCommentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.UpdateCommentOutput)
	return
}

func (d *CodeCommitDouble) UpdateCommentWithContext(i0 context.Context, i1 *codecommit.UpdateCommentInput, i2 ...request.Option) (r0 *codecommit.UpdateCommentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateCommentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.UpdateCommentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeUpdateCommentWithContext(ctx context.Context, in *codecommit.UpdateCommentInput, _ ...request.Option) (*codecommit.UpdateCommentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateComment cancelled", ctx.Err())
	default:
		return d.UpdateComment(in)
	}
}

func (d *CodeCommitDouble) UpdateDefaultBranch(i0 *codecommit.UpdateDefaultBranchInput) (r0 *codecommit.UpdateDefaultBranchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDefaultBranch", i0)
	r0, _ = returns[0].(*codecommit.UpdateDefaultBranchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) UpdateDefaultBranchRequest(i0 *codecommit.UpdateDefaultBranchInput) (r0 *request.Request, r1 *codecommit.UpdateDefaultBranchOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDefaultBranchRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.UpdateDefaultBranchOutput)
	return
}

func (d *CodeCommitDouble) UpdateDefaultBranchWithContext(i0 context.Context, i1 *codecommit.UpdateDefaultBranchInput, i2 ...request.Option) (r0 *codecommit.UpdateDefaultBranchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDefaultBranchWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.UpdateDefaultBranchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeUpdateDefaultBranchWithContext(ctx context.Context, in *codecommit.UpdateDefaultBranchInput, _ ...request.Option) (*codecommit.UpdateDefaultBranchOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDefaultBranch cancelled", ctx.Err())
	default:
		return d.UpdateDefaultBranch(in)
	}
}

func (d *CodeCommitDouble) UpdatePullRequestApprovalRuleContent(i0 *codecommit.UpdatePullRequestApprovalRuleContentInput) (r0 *codecommit.UpdatePullRequestApprovalRuleContentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePullRequestApprovalRuleContent", i0)
	r0, _ = returns[0].(*codecommit.UpdatePullRequestApprovalRuleContentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) UpdatePullRequestApprovalRuleContentRequest(i0 *codecommit.UpdatePullRequestApprovalRuleContentInput) (r0 *request.Request, r1 *codecommit.UpdatePullRequestApprovalRuleContentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePullRequestApprovalRuleContentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.UpdatePullRequestApprovalRuleContentOutput)
	return
}

func (d *CodeCommitDouble) UpdatePullRequestApprovalRuleContentWithContext(i0 context.Context, i1 *codecommit.UpdatePullRequestApprovalRuleContentInput, i2 ...request.Option) (r0 *codecommit.UpdatePullRequestApprovalRuleContentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePullRequestApprovalRuleContentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.UpdatePullRequestApprovalRuleContentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeUpdatePullRequestApprovalRuleContentWithContext(ctx context.Context, in *codecommit.UpdatePullRequestApprovalRuleContentInput, _ ...request.Option) (*codecommit.UpdatePullRequestApprovalRuleContentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdatePullRequestApprovalRuleContent cancelled", ctx.Err())
	default:
		return d.UpdatePullRequestApprovalRuleContent(in)
	}
}

func (d *CodeCommitDouble) UpdatePullRequestApprovalState(i0 *codecommit.UpdatePullRequestApprovalStateInput) (r0 *codecommit.UpdatePullRequestApprovalStateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePullRequestApprovalState", i0)
	r0, _ = returns[0].(*codecommit.UpdatePullRequestApprovalStateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) UpdatePullRequestApprovalStateRequest(i0 *codecommit.UpdatePullRequestApprovalStateInput) (r0 *request.Request, r1 *codecommit.UpdatePullRequestApprovalStateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePullRequestApprovalStateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.UpdatePullRequestApprovalStateOutput)
	return
}

func (d *CodeCommitDouble) UpdatePullRequestApprovalStateWithContext(i0 context.Context, i1 *codecommit.UpdatePullRequestApprovalStateInput, i2 ...request.Option) (r0 *codecommit.UpdatePullRequestApprovalStateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePullRequestApprovalStateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.UpdatePullRequestApprovalStateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeUpdatePullRequestApprovalStateWithContext(ctx context.Context, in *codecommit.UpdatePullRequestApprovalStateInput, _ ...request.Option) (*codecommit.UpdatePullRequestApprovalStateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdatePullRequestApprovalState cancelled", ctx.Err())
	default:
		return d.UpdatePullRequestApprovalState(in)
	}
}

func (d *CodeCommitDouble) UpdatePullRequestDescription(i0 *codecommit.UpdatePullRequestDescriptionInput) (r0 *codecommit.UpdatePullRequestDescriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePullRequestDescription", i0)
	r0, _ = returns[0].(*codecommit.UpdatePullRequestDescriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) UpdatePullRequestDescriptionRequest(i0 *codecommit.UpdatePullRequestDescriptionInput) (r0 *request.Request, r1 *codecommit.UpdatePullRequestDescriptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePullRequestDescriptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.UpdatePullRequestDescriptionOutput)
	return
}

func (d *CodeCommitDouble) UpdatePullRequestDescriptionWithContext(i0 context.Context, i1 *codecommit.UpdatePullRequestDescriptionInput, i2 ...request.Option) (r0 *codecommit.UpdatePullRequestDescriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePullRequestDescriptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.UpdatePullRequestDescriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeUpdatePullRequestDescriptionWithContext(ctx context.Context, in *codecommit.UpdatePullRequestDescriptionInput, _ ...request.Option) (*codecommit.UpdatePullRequestDescriptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdatePullRequestDescription cancelled", ctx.Err())
	default:
		return d.UpdatePullRequestDescription(in)
	}
}

func (d *CodeCommitDouble) UpdatePullRequestStatus(i0 *codecommit.UpdatePullRequestStatusInput) (r0 *codecommit.UpdatePullRequestStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePullRequestStatus", i0)
	r0, _ = returns[0].(*codecommit.UpdatePullRequestStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) UpdatePullRequestStatusRequest(i0 *codecommit.UpdatePullRequestStatusInput) (r0 *request.Request, r1 *codecommit.UpdatePullRequestStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePullRequestStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.UpdatePullRequestStatusOutput)
	return
}

func (d *CodeCommitDouble) UpdatePullRequestStatusWithContext(i0 context.Context, i1 *codecommit.UpdatePullRequestStatusInput, i2 ...request.Option) (r0 *codecommit.UpdatePullRequestStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePullRequestStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.UpdatePullRequestStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeUpdatePullRequestStatusWithContext(ctx context.Context, in *codecommit.UpdatePullRequestStatusInput, _ ...request.Option) (*codecommit.UpdatePullRequestStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdatePullRequestStatus cancelled", ctx.Err())
	default:
		return d.UpdatePullRequestStatus(in)
	}
}

func (d *CodeCommitDouble) UpdatePullRequestTitle(i0 *codecommit.UpdatePullRequestTitleInput) (r0 *codecommit.UpdatePullRequestTitleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePullRequestTitle", i0)
	r0, _ = returns[0].(*codecommit.UpdatePullRequestTitleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) UpdatePullRequestTitleRequest(i0 *codecommit.UpdatePullRequestTitleInput) (r0 *request.Request, r1 *codecommit.UpdatePullRequestTitleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePullRequestTitleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.UpdatePullRequestTitleOutput)
	return
}

func (d *CodeCommitDouble) UpdatePullRequestTitleWithContext(i0 context.Context, i1 *codecommit.UpdatePullRequestTitleInput, i2 ...request.Option) (r0 *codecommit.UpdatePullRequestTitleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePullRequestTitleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.UpdatePullRequestTitleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeUpdatePullRequestTitleWithContext(ctx context.Context, in *codecommit.UpdatePullRequestTitleInput, _ ...request.Option) (*codecommit.UpdatePullRequestTitleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdatePullRequestTitle cancelled", ctx.Err())
	default:
		return d.UpdatePullRequestTitle(in)
	}
}

func (d *CodeCommitDouble) UpdateRepositoryDescription(i0 *codecommit.UpdateRepositoryDescriptionInput) (r0 *codecommit.UpdateRepositoryDescriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRepositoryDescription", i0)
	r0, _ = returns[0].(*codecommit.UpdateRepositoryDescriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) UpdateRepositoryDescriptionRequest(i0 *codecommit.UpdateRepositoryDescriptionInput) (r0 *request.Request, r1 *codecommit.UpdateRepositoryDescriptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRepositoryDescriptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.UpdateRepositoryDescriptionOutput)
	return
}

func (d *CodeCommitDouble) UpdateRepositoryDescriptionWithContext(i0 context.Context, i1 *codecommit.UpdateRepositoryDescriptionInput, i2 ...request.Option) (r0 *codecommit.UpdateRepositoryDescriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRepositoryDescriptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.UpdateRepositoryDescriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeUpdateRepositoryDescriptionWithContext(ctx context.Context, in *codecommit.UpdateRepositoryDescriptionInput, _ ...request.Option) (*codecommit.UpdateRepositoryDescriptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateRepositoryDescription cancelled", ctx.Err())
	default:
		return d.UpdateRepositoryDescription(in)
	}
}

func (d *CodeCommitDouble) UpdateRepositoryName(i0 *codecommit.UpdateRepositoryNameInput) (r0 *codecommit.UpdateRepositoryNameOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRepositoryName", i0)
	r0, _ = returns[0].(*codecommit.UpdateRepositoryNameOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) UpdateRepositoryNameRequest(i0 *codecommit.UpdateRepositoryNameInput) (r0 *request.Request, r1 *codecommit.UpdateRepositoryNameOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRepositoryNameRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*codecommit.UpdateRepositoryNameOutput)
	return
}

func (d *CodeCommitDouble) UpdateRepositoryNameWithContext(i0 context.Context, i1 *codecommit.UpdateRepositoryNameInput, i2 ...request.Option) (r0 *codecommit.UpdateRepositoryNameOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRepositoryNameWithContext", i0, i1, i2)
	r0, _ = returns[0].(*codecommit.UpdateRepositoryNameOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CodeCommitDouble) fakeUpdateRepositoryNameWithContext(ctx context.Context, in *codecommit.UpdateRepositoryNameInput, _ ...request.Option) (*codecommit.UpdateRepositoryNameOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateRepositoryName cancelled", ctx.Err())
	default:
		return d.UpdateRepositoryName(in)
	}
}
