// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:13:25+11:00

// Package kinesisdouble provides a TestDouble implementation of kinesisiface.KinesisAPI
package kinesisdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/kinesis"
	"github.com/aws/aws-sdk-go/service/kinesis/kinesisiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// KinesisDouble is TestDouble for kinesisiface.KinesisAPI
type KinesisDouble struct {
	kinesisiface.KinesisAPI
	*awsdouble.AWSTestDouble
}

// Constructor for KinesisDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *KinesisDouble {
	result := &KinesisDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*kinesisiface.KinesisAPI)(nil), configurators...)
	return result
}

func (d *KinesisDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *KinesisDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AddTagsToStreamWithContext":
		return m.Fake(d.fakeAddTagsToStreamWithContext)

	case "CreateStreamWithContext":
		return m.Fake(d.fakeCreateStreamWithContext)

	case "DecreaseStreamRetentionPeriodWithContext":
		return m.Fake(d.fakeDecreaseStreamRetentionPeriodWithContext)

	case "DeleteStreamWithContext":
		return m.Fake(d.fakeDeleteStreamWithContext)

	case "DeregisterStreamConsumerWithContext":
		return m.Fake(d.fakeDeregisterStreamConsumerWithContext)

	case "DescribeLimitsWithContext":
		return m.Fake(d.fakeDescribeLimitsWithContext)

	case "DescribeStreamConsumerWithContext":
		return m.Fake(d.fakeDescribeStreamConsumerWithContext)

	case "DescribeStreamPages":
		return m.Fake(d.fakeDescribeStreamPages)

	case "DescribeStreamPagesWithContext":
		return m.Fake(d.fakeDescribeStreamPagesWithContext)

	case "DescribeStreamSummaryWithContext":
		return m.Fake(d.fakeDescribeStreamSummaryWithContext)

	case "DescribeStreamWithContext":
		return m.Fake(d.fakeDescribeStreamWithContext)

	case "DisableEnhancedMonitoringWithContext":
		return m.Fake(d.fakeDisableEnhancedMonitoringWithContext)

	case "EnableEnhancedMonitoringWithContext":
		return m.Fake(d.fakeEnableEnhancedMonitoringWithContext)

	case "GetRecordsWithContext":
		return m.Fake(d.fakeGetRecordsWithContext)

	case "GetShardIteratorWithContext":
		return m.Fake(d.fakeGetShardIteratorWithContext)

	case "IncreaseStreamRetentionPeriodWithContext":
		return m.Fake(d.fakeIncreaseStreamRetentionPeriodWithContext)

	case "ListShardsWithContext":
		return m.Fake(d.fakeListShardsWithContext)

	case "ListStreamConsumersPages":
		return m.Fake(d.fakeListStreamConsumersPages)

	case "ListStreamConsumersPagesWithContext":
		return m.Fake(d.fakeListStreamConsumersPagesWithContext)

	case "ListStreamConsumersWithContext":
		return m.Fake(d.fakeListStreamConsumersWithContext)

	case "ListStreamsPages":
		return m.Fake(d.fakeListStreamsPages)

	case "ListStreamsPagesWithContext":
		return m.Fake(d.fakeListStreamsPagesWithContext)

	case "ListStreamsWithContext":
		return m.Fake(d.fakeListStreamsWithContext)

	case "ListTagsForStreamWithContext":
		return m.Fake(d.fakeListTagsForStreamWithContext)

	case "MergeShardsWithContext":
		return m.Fake(d.fakeMergeShardsWithContext)

	case "PutRecordWithContext":
		return m.Fake(d.fakePutRecordWithContext)

	case "PutRecordsWithContext":
		return m.Fake(d.fakePutRecordsWithContext)

	case "RegisterStreamConsumerWithContext":
		return m.Fake(d.fakeRegisterStreamConsumerWithContext)

	case "RemoveTagsFromStreamWithContext":
		return m.Fake(d.fakeRemoveTagsFromStreamWithContext)

	case "SplitShardWithContext":
		return m.Fake(d.fakeSplitShardWithContext)

	case "StartStreamEncryptionWithContext":
		return m.Fake(d.fakeStartStreamEncryptionWithContext)

	case "StopStreamEncryptionWithContext":
		return m.Fake(d.fakeStopStreamEncryptionWithContext)

	case "SubscribeToShardWithContext":
		return m.Fake(d.fakeSubscribeToShardWithContext)

	case "UpdateShardCountWithContext":
		return m.Fake(d.fakeUpdateShardCountWithContext)

	case "WaitUntilStreamExists":
		return m.Fake(d.fakeWaitUntilStreamExists)

	case "WaitUntilStreamExistsWithContext":
		return m.Fake(d.fakeWaitUntilStreamExistsWithContext)

	case "WaitUntilStreamNotExists":
		return m.Fake(d.fakeWaitUntilStreamNotExists)

	case "WaitUntilStreamNotExistsWithContext":
		return m.Fake(d.fakeWaitUntilStreamNotExistsWithContext)

	default:
		return nil
	}
}

func (d *KinesisDouble) AddTagsToStream(i0 *kinesis.AddTagsToStreamInput) (r0 *kinesis.AddTagsToStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToStream", i0)
	r0, _ = returns[0].(*kinesis.AddTagsToStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) AddTagsToStreamRequest(i0 *kinesis.AddTagsToStreamInput) (r0 *request.Request, r1 *kinesis.AddTagsToStreamOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToStreamRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesis.AddTagsToStreamOutput)
	return
}

func (d *KinesisDouble) AddTagsToStreamWithContext(i0 context.Context, i1 *kinesis.AddTagsToStreamInput, i2 ...request.Option) (r0 *kinesis.AddTagsToStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToStreamWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesis.AddTagsToStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) fakeAddTagsToStreamWithContext(ctx context.Context, in *kinesis.AddTagsToStreamInput, _ ...request.Option) (*kinesis.AddTagsToStreamOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddTagsToStream cancelled", ctx.Err())
	default:
		return d.AddTagsToStream(in)
	}
}

func (d *KinesisDouble) CreateStream(i0 *kinesis.CreateStreamInput) (r0 *kinesis.CreateStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStream", i0)
	r0, _ = returns[0].(*kinesis.CreateStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) CreateStreamRequest(i0 *kinesis.CreateStreamInput) (r0 *request.Request, r1 *kinesis.CreateStreamOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStreamRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesis.CreateStreamOutput)
	return
}

func (d *KinesisDouble) CreateStreamWithContext(i0 context.Context, i1 *kinesis.CreateStreamInput, i2 ...request.Option) (r0 *kinesis.CreateStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStreamWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesis.CreateStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) fakeCreateStreamWithContext(ctx context.Context, in *kinesis.CreateStreamInput, _ ...request.Option) (*kinesis.CreateStreamOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateStream cancelled", ctx.Err())
	default:
		return d.CreateStream(in)
	}
}

func (d *KinesisDouble) DecreaseStreamRetentionPeriod(i0 *kinesis.DecreaseStreamRetentionPeriodInput) (r0 *kinesis.DecreaseStreamRetentionPeriodOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DecreaseStreamRetentionPeriod", i0)
	r0, _ = returns[0].(*kinesis.DecreaseStreamRetentionPeriodOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) DecreaseStreamRetentionPeriodRequest(i0 *kinesis.DecreaseStreamRetentionPeriodInput) (r0 *request.Request, r1 *kinesis.DecreaseStreamRetentionPeriodOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DecreaseStreamRetentionPeriodRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesis.DecreaseStreamRetentionPeriodOutput)
	return
}

func (d *KinesisDouble) DecreaseStreamRetentionPeriodWithContext(i0 context.Context, i1 *kinesis.DecreaseStreamRetentionPeriodInput, i2 ...request.Option) (r0 *kinesis.DecreaseStreamRetentionPeriodOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DecreaseStreamRetentionPeriodWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesis.DecreaseStreamRetentionPeriodOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) fakeDecreaseStreamRetentionPeriodWithContext(ctx context.Context, in *kinesis.DecreaseStreamRetentionPeriodInput, _ ...request.Option) (*kinesis.DecreaseStreamRetentionPeriodOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DecreaseStreamRetentionPeriod cancelled", ctx.Err())
	default:
		return d.DecreaseStreamRetentionPeriod(in)
	}
}

func (d *KinesisDouble) DeleteStream(i0 *kinesis.DeleteStreamInput) (r0 *kinesis.DeleteStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteStream", i0)
	r0, _ = returns[0].(*kinesis.DeleteStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) DeleteStreamRequest(i0 *kinesis.DeleteStreamInput) (r0 *request.Request, r1 *kinesis.DeleteStreamOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteStreamRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesis.DeleteStreamOutput)
	return
}

func (d *KinesisDouble) DeleteStreamWithContext(i0 context.Context, i1 *kinesis.DeleteStreamInput, i2 ...request.Option) (r0 *kinesis.DeleteStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteStreamWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesis.DeleteStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) fakeDeleteStreamWithContext(ctx context.Context, in *kinesis.DeleteStreamInput, _ ...request.Option) (*kinesis.DeleteStreamOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteStream cancelled", ctx.Err())
	default:
		return d.DeleteStream(in)
	}
}

func (d *KinesisDouble) DeregisterStreamConsumer(i0 *kinesis.DeregisterStreamConsumerInput) (r0 *kinesis.DeregisterStreamConsumerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterStreamConsumer", i0)
	r0, _ = returns[0].(*kinesis.DeregisterStreamConsumerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) DeregisterStreamConsumerRequest(i0 *kinesis.DeregisterStreamConsumerInput) (r0 *request.Request, r1 *kinesis.DeregisterStreamConsumerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterStreamConsumerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesis.DeregisterStreamConsumerOutput)
	return
}

func (d *KinesisDouble) DeregisterStreamConsumerWithContext(i0 context.Context, i1 *kinesis.DeregisterStreamConsumerInput, i2 ...request.Option) (r0 *kinesis.DeregisterStreamConsumerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterStreamConsumerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesis.DeregisterStreamConsumerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) fakeDeregisterStreamConsumerWithContext(ctx context.Context, in *kinesis.DeregisterStreamConsumerInput, _ ...request.Option) (*kinesis.DeregisterStreamConsumerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeregisterStreamConsumer cancelled", ctx.Err())
	default:
		return d.DeregisterStreamConsumer(in)
	}
}

func (d *KinesisDouble) DescribeLimits(i0 *kinesis.DescribeLimitsInput) (r0 *kinesis.DescribeLimitsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLimits", i0)
	r0, _ = returns[0].(*kinesis.DescribeLimitsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) DescribeLimitsRequest(i0 *kinesis.DescribeLimitsInput) (r0 *request.Request, r1 *kinesis.DescribeLimitsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLimitsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesis.DescribeLimitsOutput)
	return
}

func (d *KinesisDouble) DescribeLimitsWithContext(i0 context.Context, i1 *kinesis.DescribeLimitsInput, i2 ...request.Option) (r0 *kinesis.DescribeLimitsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLimitsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesis.DescribeLimitsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) fakeDescribeLimitsWithContext(ctx context.Context, in *kinesis.DescribeLimitsInput, _ ...request.Option) (*kinesis.DescribeLimitsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeLimits cancelled", ctx.Err())
	default:
		return d.DescribeLimits(in)
	}
}

func (d *KinesisDouble) DescribeStream(i0 *kinesis.DescribeStreamInput) (r0 *kinesis.DescribeStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStream", i0)
	r0, _ = returns[0].(*kinesis.DescribeStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) DescribeStreamConsumer(i0 *kinesis.DescribeStreamConsumerInput) (r0 *kinesis.DescribeStreamConsumerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStreamConsumer", i0)
	r0, _ = returns[0].(*kinesis.DescribeStreamConsumerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) DescribeStreamConsumerRequest(i0 *kinesis.DescribeStreamConsumerInput) (r0 *request.Request, r1 *kinesis.DescribeStreamConsumerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStreamConsumerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesis.DescribeStreamConsumerOutput)
	return
}

func (d *KinesisDouble) DescribeStreamConsumerWithContext(i0 context.Context, i1 *kinesis.DescribeStreamConsumerInput, i2 ...request.Option) (r0 *kinesis.DescribeStreamConsumerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStreamConsumerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesis.DescribeStreamConsumerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) fakeDescribeStreamConsumerWithContext(ctx context.Context, in *kinesis.DescribeStreamConsumerInput, _ ...request.Option) (*kinesis.DescribeStreamConsumerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeStreamConsumer cancelled", ctx.Err())
	default:
		return d.DescribeStreamConsumer(in)
	}
}

func (d *KinesisDouble) DescribeStreamPages(i0 *kinesis.DescribeStreamInput, i1 func(*kinesis.DescribeStreamOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStreamPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *KinesisDouble) fakeDescribeStreamPages(in *kinesis.DescribeStreamInput, pager func(*kinesis.DescribeStreamOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeStream", paginators, in, pager)
}

func (d *KinesisDouble) DescribeStreamPagesWithContext(i0 context.Context, i1 *kinesis.DescribeStreamInput, i2 func(*kinesis.DescribeStreamOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStreamPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *KinesisDouble) fakeDescribeStreamPagesWithContext(ctx context.Context, in *kinesis.DescribeStreamInput, pager func(*kinesis.DescribeStreamOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeStream", paginators, ctx, in, pager, options...)
}

func (d *KinesisDouble) DescribeStreamRequest(i0 *kinesis.DescribeStreamInput) (r0 *request.Request, r1 *kinesis.DescribeStreamOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStreamRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesis.DescribeStreamOutput)
	return
}

func (d *KinesisDouble) DescribeStreamSummary(i0 *kinesis.DescribeStreamSummaryInput) (r0 *kinesis.DescribeStreamSummaryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStreamSummary", i0)
	r0, _ = returns[0].(*kinesis.DescribeStreamSummaryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) DescribeStreamSummaryRequest(i0 *kinesis.DescribeStreamSummaryInput) (r0 *request.Request, r1 *kinesis.DescribeStreamSummaryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStreamSummaryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesis.DescribeStreamSummaryOutput)
	return
}

func (d *KinesisDouble) DescribeStreamSummaryWithContext(i0 context.Context, i1 *kinesis.DescribeStreamSummaryInput, i2 ...request.Option) (r0 *kinesis.DescribeStreamSummaryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStreamSummaryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesis.DescribeStreamSummaryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) fakeDescribeStreamSummaryWithContext(ctx context.Context, in *kinesis.DescribeStreamSummaryInput, _ ...request.Option) (*kinesis.DescribeStreamSummaryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeStreamSummary cancelled", ctx.Err())
	default:
		return d.DescribeStreamSummary(in)
	}
}

func (d *KinesisDouble) DescribeStreamWithContext(i0 context.Context, i1 *kinesis.DescribeStreamInput, i2 ...request.Option) (r0 *kinesis.DescribeStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStreamWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesis.DescribeStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) fakeDescribeStreamWithContext(ctx context.Context, in *kinesis.DescribeStreamInput, _ ...request.Option) (*kinesis.DescribeStreamOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeStream cancelled", ctx.Err())
	default:
		return d.DescribeStream(in)
	}
}

func (d *KinesisDouble) DisableEnhancedMonitoring(i0 *kinesis.DisableEnhancedMonitoringInput) (r0 *kinesis.EnhancedMonitoringOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableEnhancedMonitoring", i0)
	r0, _ = returns[0].(*kinesis.EnhancedMonitoringOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) DisableEnhancedMonitoringRequest(i0 *kinesis.DisableEnhancedMonitoringInput) (r0 *request.Request, r1 *kinesis.EnhancedMonitoringOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableEnhancedMonitoringRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesis.EnhancedMonitoringOutput)
	return
}

func (d *KinesisDouble) DisableEnhancedMonitoringWithContext(i0 context.Context, i1 *kinesis.DisableEnhancedMonitoringInput, i2 ...request.Option) (r0 *kinesis.EnhancedMonitoringOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableEnhancedMonitoringWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesis.EnhancedMonitoringOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) fakeDisableEnhancedMonitoringWithContext(ctx context.Context, in *kinesis.DisableEnhancedMonitoringInput, _ ...request.Option) (*kinesis.EnhancedMonitoringOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisableEnhancedMonitoring cancelled", ctx.Err())
	default:
		return d.DisableEnhancedMonitoring(in)
	}
}

func (d *KinesisDouble) EnableEnhancedMonitoring(i0 *kinesis.EnableEnhancedMonitoringInput) (r0 *kinesis.EnhancedMonitoringOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableEnhancedMonitoring", i0)
	r0, _ = returns[0].(*kinesis.EnhancedMonitoringOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) EnableEnhancedMonitoringRequest(i0 *kinesis.EnableEnhancedMonitoringInput) (r0 *request.Request, r1 *kinesis.EnhancedMonitoringOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableEnhancedMonitoringRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesis.EnhancedMonitoringOutput)
	return
}

func (d *KinesisDouble) EnableEnhancedMonitoringWithContext(i0 context.Context, i1 *kinesis.EnableEnhancedMonitoringInput, i2 ...request.Option) (r0 *kinesis.EnhancedMonitoringOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableEnhancedMonitoringWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesis.EnhancedMonitoringOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) fakeEnableEnhancedMonitoringWithContext(ctx context.Context, in *kinesis.EnableEnhancedMonitoringInput, _ ...request.Option) (*kinesis.EnhancedMonitoringOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "EnableEnhancedMonitoring cancelled", ctx.Err())
	default:
		return d.EnableEnhancedMonitoring(in)
	}
}

func (d *KinesisDouble) GetRecords(i0 *kinesis.GetRecordsInput) (r0 *kinesis.GetRecordsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRecords", i0)
	r0, _ = returns[0].(*kinesis.GetRecordsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) GetRecordsRequest(i0 *kinesis.GetRecordsInput) (r0 *request.Request, r1 *kinesis.GetRecordsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRecordsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesis.GetRecordsOutput)
	return
}

func (d *KinesisDouble) GetRecordsWithContext(i0 context.Context, i1 *kinesis.GetRecordsInput, i2 ...request.Option) (r0 *kinesis.GetRecordsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRecordsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesis.GetRecordsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) fakeGetRecordsWithContext(ctx context.Context, in *kinesis.GetRecordsInput, _ ...request.Option) (*kinesis.GetRecordsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRecords cancelled", ctx.Err())
	default:
		return d.GetRecords(in)
	}
}

func (d *KinesisDouble) GetShardIterator(i0 *kinesis.GetShardIteratorInput) (r0 *kinesis.GetShardIteratorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetShardIterator", i0)
	r0, _ = returns[0].(*kinesis.GetShardIteratorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) GetShardIteratorRequest(i0 *kinesis.GetShardIteratorInput) (r0 *request.Request, r1 *kinesis.GetShardIteratorOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetShardIteratorRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesis.GetShardIteratorOutput)
	return
}

func (d *KinesisDouble) GetShardIteratorWithContext(i0 context.Context, i1 *kinesis.GetShardIteratorInput, i2 ...request.Option) (r0 *kinesis.GetShardIteratorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetShardIteratorWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesis.GetShardIteratorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) fakeGetShardIteratorWithContext(ctx context.Context, in *kinesis.GetShardIteratorInput, _ ...request.Option) (*kinesis.GetShardIteratorOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetShardIterator cancelled", ctx.Err())
	default:
		return d.GetShardIterator(in)
	}
}

func (d *KinesisDouble) IncreaseStreamRetentionPeriod(i0 *kinesis.IncreaseStreamRetentionPeriodInput) (r0 *kinesis.IncreaseStreamRetentionPeriodOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("IncreaseStreamRetentionPeriod", i0)
	r0, _ = returns[0].(*kinesis.IncreaseStreamRetentionPeriodOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) IncreaseStreamRetentionPeriodRequest(i0 *kinesis.IncreaseStreamRetentionPeriodInput) (r0 *request.Request, r1 *kinesis.IncreaseStreamRetentionPeriodOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("IncreaseStreamRetentionPeriodRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesis.IncreaseStreamRetentionPeriodOutput)
	return
}

func (d *KinesisDouble) IncreaseStreamRetentionPeriodWithContext(i0 context.Context, i1 *kinesis.IncreaseStreamRetentionPeriodInput, i2 ...request.Option) (r0 *kinesis.IncreaseStreamRetentionPeriodOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("IncreaseStreamRetentionPeriodWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesis.IncreaseStreamRetentionPeriodOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) fakeIncreaseStreamRetentionPeriodWithContext(ctx context.Context, in *kinesis.IncreaseStreamRetentionPeriodInput, _ ...request.Option) (*kinesis.IncreaseStreamRetentionPeriodOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "IncreaseStreamRetentionPeriod cancelled", ctx.Err())
	default:
		return d.IncreaseStreamRetentionPeriod(in)
	}
}

func (d *KinesisDouble) ListShards(i0 *kinesis.ListShardsInput) (r0 *kinesis.ListShardsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListShards", i0)
	r0, _ = returns[0].(*kinesis.ListShardsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) ListShardsRequest(i0 *kinesis.ListShardsInput) (r0 *request.Request, r1 *kinesis.ListShardsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListShardsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesis.ListShardsOutput)
	return
}

func (d *KinesisDouble) ListShardsWithContext(i0 context.Context, i1 *kinesis.ListShardsInput, i2 ...request.Option) (r0 *kinesis.ListShardsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListShardsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesis.ListShardsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) fakeListShardsWithContext(ctx context.Context, in *kinesis.ListShardsInput, _ ...request.Option) (*kinesis.ListShardsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListShards cancelled", ctx.Err())
	default:
		return d.ListShards(in)
	}
}

func (d *KinesisDouble) ListStreamConsumers(i0 *kinesis.ListStreamConsumersInput) (r0 *kinesis.ListStreamConsumersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStreamConsumers", i0)
	r0, _ = returns[0].(*kinesis.ListStreamConsumersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) ListStreamConsumersPages(i0 *kinesis.ListStreamConsumersInput, i1 func(*kinesis.ListStreamConsumersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStreamConsumersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *KinesisDouble) fakeListStreamConsumersPages(in *kinesis.ListStreamConsumersInput, pager func(*kinesis.ListStreamConsumersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListStreamConsumers", paginators, in, pager)
}

func (d *KinesisDouble) ListStreamConsumersPagesWithContext(i0 context.Context, i1 *kinesis.ListStreamConsumersInput, i2 func(*kinesis.ListStreamConsumersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStreamConsumersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *KinesisDouble) fakeListStreamConsumersPagesWithContext(ctx context.Context, in *kinesis.ListStreamConsumersInput, pager func(*kinesis.ListStreamConsumersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListStreamConsumers", paginators, ctx, in, pager, options...)
}

func (d *KinesisDouble) ListStreamConsumersRequest(i0 *kinesis.ListStreamConsumersInput) (r0 *request.Request, r1 *kinesis.ListStreamConsumersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStreamConsumersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesis.ListStreamConsumersOutput)
	return
}

func (d *KinesisDouble) ListStreamConsumersWithContext(i0 context.Context, i1 *kinesis.ListStreamConsumersInput, i2 ...request.Option) (r0 *kinesis.ListStreamConsumersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStreamConsumersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesis.ListStreamConsumersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) fakeListStreamConsumersWithContext(ctx context.Context, in *kinesis.ListStreamConsumersInput, _ ...request.Option) (*kinesis.ListStreamConsumersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListStreamConsumers cancelled", ctx.Err())
	default:
		return d.ListStreamConsumers(in)
	}
}

func (d *KinesisDouble) ListStreams(i0 *kinesis.ListStreamsInput) (r0 *kinesis.ListStreamsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStreams", i0)
	r0, _ = returns[0].(*kinesis.ListStreamsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) ListStreamsPages(i0 *kinesis.ListStreamsInput, i1 func(*kinesis.ListStreamsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStreamsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *KinesisDouble) fakeListStreamsPages(in *kinesis.ListStreamsInput, pager func(*kinesis.ListStreamsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListStreams", paginators, in, pager)
}

func (d *KinesisDouble) ListStreamsPagesWithContext(i0 context.Context, i1 *kinesis.ListStreamsInput, i2 func(*kinesis.ListStreamsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStreamsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *KinesisDouble) fakeListStreamsPagesWithContext(ctx context.Context, in *kinesis.ListStreamsInput, pager func(*kinesis.ListStreamsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListStreams", paginators, ctx, in, pager, options...)
}

func (d *KinesisDouble) ListStreamsRequest(i0 *kinesis.ListStreamsInput) (r0 *request.Request, r1 *kinesis.ListStreamsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStreamsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesis.ListStreamsOutput)
	return
}

func (d *KinesisDouble) ListStreamsWithContext(i0 context.Context, i1 *kinesis.ListStreamsInput, i2 ...request.Option) (r0 *kinesis.ListStreamsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStreamsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesis.ListStreamsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) fakeListStreamsWithContext(ctx context.Context, in *kinesis.ListStreamsInput, _ ...request.Option) (*kinesis.ListStreamsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListStreams cancelled", ctx.Err())
	default:
		return d.ListStreams(in)
	}
}

func (d *KinesisDouble) ListTagsForStream(i0 *kinesis.ListTagsForStreamInput) (r0 *kinesis.ListTagsForStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForStream", i0)
	r0, _ = returns[0].(*kinesis.ListTagsForStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) ListTagsForStreamRequest(i0 *kinesis.ListTagsForStreamInput) (r0 *request.Request, r1 *kinesis.ListTagsForStreamOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForStreamRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesis.ListTagsForStreamOutput)
	return
}

func (d *KinesisDouble) ListTagsForStreamWithContext(i0 context.Context, i1 *kinesis.ListTagsForStreamInput, i2 ...request.Option) (r0 *kinesis.ListTagsForStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForStreamWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesis.ListTagsForStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) fakeListTagsForStreamWithContext(ctx context.Context, in *kinesis.ListTagsForStreamInput, _ ...request.Option) (*kinesis.ListTagsForStreamOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForStream cancelled", ctx.Err())
	default:
		return d.ListTagsForStream(in)
	}
}

func (d *KinesisDouble) MergeShards(i0 *kinesis.MergeShardsInput) (r0 *kinesis.MergeShardsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("MergeShards", i0)
	r0, _ = returns[0].(*kinesis.MergeShardsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) MergeShardsRequest(i0 *kinesis.MergeShardsInput) (r0 *request.Request, r1 *kinesis.MergeShardsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("MergeShardsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesis.MergeShardsOutput)
	return
}

func (d *KinesisDouble) MergeShardsWithContext(i0 context.Context, i1 *kinesis.MergeShardsInput, i2 ...request.Option) (r0 *kinesis.MergeShardsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("MergeShardsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesis.MergeShardsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) fakeMergeShardsWithContext(ctx context.Context, in *kinesis.MergeShardsInput, _ ...request.Option) (*kinesis.MergeShardsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "MergeShards cancelled", ctx.Err())
	default:
		return d.MergeShards(in)
	}
}

func (d *KinesisDouble) PutRecord(i0 *kinesis.PutRecordInput) (r0 *kinesis.PutRecordOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRecord", i0)
	r0, _ = returns[0].(*kinesis.PutRecordOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) PutRecordRequest(i0 *kinesis.PutRecordInput) (r0 *request.Request, r1 *kinesis.PutRecordOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRecordRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesis.PutRecordOutput)
	return
}

func (d *KinesisDouble) PutRecordWithContext(i0 context.Context, i1 *kinesis.PutRecordInput, i2 ...request.Option) (r0 *kinesis.PutRecordOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRecordWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesis.PutRecordOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) fakePutRecordWithContext(ctx context.Context, in *kinesis.PutRecordInput, _ ...request.Option) (*kinesis.PutRecordOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutRecord cancelled", ctx.Err())
	default:
		return d.PutRecord(in)
	}
}

func (d *KinesisDouble) PutRecords(i0 *kinesis.PutRecordsInput) (r0 *kinesis.PutRecordsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRecords", i0)
	r0, _ = returns[0].(*kinesis.PutRecordsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) PutRecordsRequest(i0 *kinesis.PutRecordsInput) (r0 *request.Request, r1 *kinesis.PutRecordsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRecordsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesis.PutRecordsOutput)
	return
}

func (d *KinesisDouble) PutRecordsWithContext(i0 context.Context, i1 *kinesis.PutRecordsInput, i2 ...request.Option) (r0 *kinesis.PutRecordsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutRecordsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesis.PutRecordsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) fakePutRecordsWithContext(ctx context.Context, in *kinesis.PutRecordsInput, _ ...request.Option) (*kinesis.PutRecordsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutRecords cancelled", ctx.Err())
	default:
		return d.PutRecords(in)
	}
}

func (d *KinesisDouble) RegisterStreamConsumer(i0 *kinesis.RegisterStreamConsumerInput) (r0 *kinesis.RegisterStreamConsumerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterStreamConsumer", i0)
	r0, _ = returns[0].(*kinesis.RegisterStreamConsumerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) RegisterStreamConsumerRequest(i0 *kinesis.RegisterStreamConsumerInput) (r0 *request.Request, r1 *kinesis.RegisterStreamConsumerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterStreamConsumerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesis.RegisterStreamConsumerOutput)
	return
}

func (d *KinesisDouble) RegisterStreamConsumerWithContext(i0 context.Context, i1 *kinesis.RegisterStreamConsumerInput, i2 ...request.Option) (r0 *kinesis.RegisterStreamConsumerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterStreamConsumerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesis.RegisterStreamConsumerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) fakeRegisterStreamConsumerWithContext(ctx context.Context, in *kinesis.RegisterStreamConsumerInput, _ ...request.Option) (*kinesis.RegisterStreamConsumerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterStreamConsumer cancelled", ctx.Err())
	default:
		return d.RegisterStreamConsumer(in)
	}
}

func (d *KinesisDouble) RemoveTagsFromStream(i0 *kinesis.RemoveTagsFromStreamInput) (r0 *kinesis.RemoveTagsFromStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromStream", i0)
	r0, _ = returns[0].(*kinesis.RemoveTagsFromStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) RemoveTagsFromStreamRequest(i0 *kinesis.RemoveTagsFromStreamInput) (r0 *request.Request, r1 *kinesis.RemoveTagsFromStreamOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromStreamRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesis.RemoveTagsFromStreamOutput)
	return
}

func (d *KinesisDouble) RemoveTagsFromStreamWithContext(i0 context.Context, i1 *kinesis.RemoveTagsFromStreamInput, i2 ...request.Option) (r0 *kinesis.RemoveTagsFromStreamOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromStreamWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesis.RemoveTagsFromStreamOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) fakeRemoveTagsFromStreamWithContext(ctx context.Context, in *kinesis.RemoveTagsFromStreamInput, _ ...request.Option) (*kinesis.RemoveTagsFromStreamOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveTagsFromStream cancelled", ctx.Err())
	default:
		return d.RemoveTagsFromStream(in)
	}
}

func (d *KinesisDouble) SplitShard(i0 *kinesis.SplitShardInput) (r0 *kinesis.SplitShardOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SplitShard", i0)
	r0, _ = returns[0].(*kinesis.SplitShardOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) SplitShardRequest(i0 *kinesis.SplitShardInput) (r0 *request.Request, r1 *kinesis.SplitShardOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SplitShardRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesis.SplitShardOutput)
	return
}

func (d *KinesisDouble) SplitShardWithContext(i0 context.Context, i1 *kinesis.SplitShardInput, i2 ...request.Option) (r0 *kinesis.SplitShardOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SplitShardWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesis.SplitShardOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) fakeSplitShardWithContext(ctx context.Context, in *kinesis.SplitShardInput, _ ...request.Option) (*kinesis.SplitShardOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SplitShard cancelled", ctx.Err())
	default:
		return d.SplitShard(in)
	}
}

func (d *KinesisDouble) StartStreamEncryption(i0 *kinesis.StartStreamEncryptionInput) (r0 *kinesis.StartStreamEncryptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartStreamEncryption", i0)
	r0, _ = returns[0].(*kinesis.StartStreamEncryptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) StartStreamEncryptionRequest(i0 *kinesis.StartStreamEncryptionInput) (r0 *request.Request, r1 *kinesis.StartStreamEncryptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartStreamEncryptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesis.StartStreamEncryptionOutput)
	return
}

func (d *KinesisDouble) StartStreamEncryptionWithContext(i0 context.Context, i1 *kinesis.StartStreamEncryptionInput, i2 ...request.Option) (r0 *kinesis.StartStreamEncryptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartStreamEncryptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesis.StartStreamEncryptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) fakeStartStreamEncryptionWithContext(ctx context.Context, in *kinesis.StartStreamEncryptionInput, _ ...request.Option) (*kinesis.StartStreamEncryptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartStreamEncryption cancelled", ctx.Err())
	default:
		return d.StartStreamEncryption(in)
	}
}

func (d *KinesisDouble) StopStreamEncryption(i0 *kinesis.StopStreamEncryptionInput) (r0 *kinesis.StopStreamEncryptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopStreamEncryption", i0)
	r0, _ = returns[0].(*kinesis.StopStreamEncryptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) StopStreamEncryptionRequest(i0 *kinesis.StopStreamEncryptionInput) (r0 *request.Request, r1 *kinesis.StopStreamEncryptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopStreamEncryptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesis.StopStreamEncryptionOutput)
	return
}

func (d *KinesisDouble) StopStreamEncryptionWithContext(i0 context.Context, i1 *kinesis.StopStreamEncryptionInput, i2 ...request.Option) (r0 *kinesis.StopStreamEncryptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopStreamEncryptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesis.StopStreamEncryptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) fakeStopStreamEncryptionWithContext(ctx context.Context, in *kinesis.StopStreamEncryptionInput, _ ...request.Option) (*kinesis.StopStreamEncryptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopStreamEncryption cancelled", ctx.Err())
	default:
		return d.StopStreamEncryption(in)
	}
}

func (d *KinesisDouble) SubscribeToShard(i0 *kinesis.SubscribeToShardInput) (r0 *kinesis.SubscribeToShardOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SubscribeToShard", i0)
	r0, _ = returns[0].(*kinesis.SubscribeToShardOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) SubscribeToShardRequest(i0 *kinesis.SubscribeToShardInput) (r0 *request.Request, r1 *kinesis.SubscribeToShardOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SubscribeToShardRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesis.SubscribeToShardOutput)
	return
}

func (d *KinesisDouble) SubscribeToShardWithContext(i0 context.Context, i1 *kinesis.SubscribeToShardInput, i2 ...request.Option) (r0 *kinesis.SubscribeToShardOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SubscribeToShardWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesis.SubscribeToShardOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) fakeSubscribeToShardWithContext(ctx context.Context, in *kinesis.SubscribeToShardInput, _ ...request.Option) (*kinesis.SubscribeToShardOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SubscribeToShard cancelled", ctx.Err())
	default:
		return d.SubscribeToShard(in)
	}
}

func (d *KinesisDouble) UpdateShardCount(i0 *kinesis.UpdateShardCountInput) (r0 *kinesis.UpdateShardCountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateShardCount", i0)
	r0, _ = returns[0].(*kinesis.UpdateShardCountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) UpdateShardCountRequest(i0 *kinesis.UpdateShardCountInput) (r0 *request.Request, r1 *kinesis.UpdateShardCountOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateShardCountRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kinesis.UpdateShardCountOutput)
	return
}

func (d *KinesisDouble) UpdateShardCountWithContext(i0 context.Context, i1 *kinesis.UpdateShardCountInput, i2 ...request.Option) (r0 *kinesis.UpdateShardCountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateShardCountWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kinesis.UpdateShardCountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KinesisDouble) fakeUpdateShardCountWithContext(ctx context.Context, in *kinesis.UpdateShardCountInput, _ ...request.Option) (*kinesis.UpdateShardCountOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateShardCount cancelled", ctx.Err())
	default:
		return d.UpdateShardCount(in)
	}
}

func (d *KinesisDouble) WaitUntilStreamExists(i0 *kinesis.DescribeStreamInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilStreamExists", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *KinesisDouble) fakeWaitUntilStreamExists(in *kinesis.DescribeStreamInput) error {
	return d.WaitUntil("StreamExists", waiters, in)
}

func (d *KinesisDouble) WaitUntilStreamExistsWithContext(i0 context.Context, i1 *kinesis.DescribeStreamInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilStreamExistsWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *KinesisDouble) fakeWaitUntilStreamExistsWithContext(ctx context.Context, in *kinesis.DescribeStreamInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("StreamExists", waiters, ctx, in, waitOption...)
}

func (d *KinesisDouble) WaitUntilStreamNotExists(i0 *kinesis.DescribeStreamInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilStreamNotExists", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *KinesisDouble) fakeWaitUntilStreamNotExists(in *kinesis.DescribeStreamInput) error {
	return d.WaitUntil("StreamNotExists", waiters, in)
}

func (d *KinesisDouble) WaitUntilStreamNotExistsWithContext(i0 context.Context, i1 *kinesis.DescribeStreamInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilStreamNotExistsWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *KinesisDouble) fakeWaitUntilStreamNotExistsWithContext(ctx context.Context, in *kinesis.DescribeStreamInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("StreamNotExists", waiters, ctx, in, waitOption...)
}
