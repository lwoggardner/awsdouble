// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:14:09+11:00

// Package neptunedouble provides a TestDouble implementation of neptuneiface.NeptuneAPI
package neptunedouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/neptune"
	"github.com/aws/aws-sdk-go/service/neptune/neptuneiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// NeptuneDouble is TestDouble for neptuneiface.NeptuneAPI
type NeptuneDouble struct {
	neptuneiface.NeptuneAPI
	*awsdouble.AWSTestDouble
}

// Constructor for NeptuneDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *NeptuneDouble {
	result := &NeptuneDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*neptuneiface.NeptuneAPI)(nil), configurators...)
	return result
}

func (d *NeptuneDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *NeptuneDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AddRoleToDBClusterWithContext":
		return m.Fake(d.fakeAddRoleToDBClusterWithContext)

	case "AddSourceIdentifierToSubscriptionWithContext":
		return m.Fake(d.fakeAddSourceIdentifierToSubscriptionWithContext)

	case "AddTagsToResourceWithContext":
		return m.Fake(d.fakeAddTagsToResourceWithContext)

	case "ApplyPendingMaintenanceActionWithContext":
		return m.Fake(d.fakeApplyPendingMaintenanceActionWithContext)

	case "CopyDBClusterParameterGroupWithContext":
		return m.Fake(d.fakeCopyDBClusterParameterGroupWithContext)

	case "CopyDBClusterSnapshotWithContext":
		return m.Fake(d.fakeCopyDBClusterSnapshotWithContext)

	case "CopyDBParameterGroupWithContext":
		return m.Fake(d.fakeCopyDBParameterGroupWithContext)

	case "CreateDBClusterParameterGroupWithContext":
		return m.Fake(d.fakeCreateDBClusterParameterGroupWithContext)

	case "CreateDBClusterSnapshotWithContext":
		return m.Fake(d.fakeCreateDBClusterSnapshotWithContext)

	case "CreateDBClusterWithContext":
		return m.Fake(d.fakeCreateDBClusterWithContext)

	case "CreateDBInstanceWithContext":
		return m.Fake(d.fakeCreateDBInstanceWithContext)

	case "CreateDBParameterGroupWithContext":
		return m.Fake(d.fakeCreateDBParameterGroupWithContext)

	case "CreateDBSubnetGroupWithContext":
		return m.Fake(d.fakeCreateDBSubnetGroupWithContext)

	case "CreateEventSubscriptionWithContext":
		return m.Fake(d.fakeCreateEventSubscriptionWithContext)

	case "DeleteDBClusterParameterGroupWithContext":
		return m.Fake(d.fakeDeleteDBClusterParameterGroupWithContext)

	case "DeleteDBClusterSnapshotWithContext":
		return m.Fake(d.fakeDeleteDBClusterSnapshotWithContext)

	case "DeleteDBClusterWithContext":
		return m.Fake(d.fakeDeleteDBClusterWithContext)

	case "DeleteDBInstanceWithContext":
		return m.Fake(d.fakeDeleteDBInstanceWithContext)

	case "DeleteDBParameterGroupWithContext":
		return m.Fake(d.fakeDeleteDBParameterGroupWithContext)

	case "DeleteDBSubnetGroupWithContext":
		return m.Fake(d.fakeDeleteDBSubnetGroupWithContext)

	case "DeleteEventSubscriptionWithContext":
		return m.Fake(d.fakeDeleteEventSubscriptionWithContext)

	case "DescribeDBClusterParameterGroupsWithContext":
		return m.Fake(d.fakeDescribeDBClusterParameterGroupsWithContext)

	case "DescribeDBClusterParametersWithContext":
		return m.Fake(d.fakeDescribeDBClusterParametersWithContext)

	case "DescribeDBClusterSnapshotAttributesWithContext":
		return m.Fake(d.fakeDescribeDBClusterSnapshotAttributesWithContext)

	case "DescribeDBClusterSnapshotsWithContext":
		return m.Fake(d.fakeDescribeDBClusterSnapshotsWithContext)

	case "DescribeDBClustersWithContext":
		return m.Fake(d.fakeDescribeDBClustersWithContext)

	case "DescribeDBEngineVersionsPages":
		return m.Fake(d.fakeDescribeDBEngineVersionsPages)

	case "DescribeDBEngineVersionsPagesWithContext":
		return m.Fake(d.fakeDescribeDBEngineVersionsPagesWithContext)

	case "DescribeDBEngineVersionsWithContext":
		return m.Fake(d.fakeDescribeDBEngineVersionsWithContext)

	case "DescribeDBInstancesPages":
		return m.Fake(d.fakeDescribeDBInstancesPages)

	case "DescribeDBInstancesPagesWithContext":
		return m.Fake(d.fakeDescribeDBInstancesPagesWithContext)

	case "DescribeDBInstancesWithContext":
		return m.Fake(d.fakeDescribeDBInstancesWithContext)

	case "DescribeDBParameterGroupsPages":
		return m.Fake(d.fakeDescribeDBParameterGroupsPages)

	case "DescribeDBParameterGroupsPagesWithContext":
		return m.Fake(d.fakeDescribeDBParameterGroupsPagesWithContext)

	case "DescribeDBParameterGroupsWithContext":
		return m.Fake(d.fakeDescribeDBParameterGroupsWithContext)

	case "DescribeDBParametersPages":
		return m.Fake(d.fakeDescribeDBParametersPages)

	case "DescribeDBParametersPagesWithContext":
		return m.Fake(d.fakeDescribeDBParametersPagesWithContext)

	case "DescribeDBParametersWithContext":
		return m.Fake(d.fakeDescribeDBParametersWithContext)

	case "DescribeDBSubnetGroupsPages":
		return m.Fake(d.fakeDescribeDBSubnetGroupsPages)

	case "DescribeDBSubnetGroupsPagesWithContext":
		return m.Fake(d.fakeDescribeDBSubnetGroupsPagesWithContext)

	case "DescribeDBSubnetGroupsWithContext":
		return m.Fake(d.fakeDescribeDBSubnetGroupsWithContext)

	case "DescribeEngineDefaultClusterParametersWithContext":
		return m.Fake(d.fakeDescribeEngineDefaultClusterParametersWithContext)

	case "DescribeEngineDefaultParametersPages":
		return m.Fake(d.fakeDescribeEngineDefaultParametersPages)

	case "DescribeEngineDefaultParametersPagesWithContext":
		return m.Fake(d.fakeDescribeEngineDefaultParametersPagesWithContext)

	case "DescribeEngineDefaultParametersWithContext":
		return m.Fake(d.fakeDescribeEngineDefaultParametersWithContext)

	case "DescribeEventCategoriesWithContext":
		return m.Fake(d.fakeDescribeEventCategoriesWithContext)

	case "DescribeEventSubscriptionsPages":
		return m.Fake(d.fakeDescribeEventSubscriptionsPages)

	case "DescribeEventSubscriptionsPagesWithContext":
		return m.Fake(d.fakeDescribeEventSubscriptionsPagesWithContext)

	case "DescribeEventSubscriptionsWithContext":
		return m.Fake(d.fakeDescribeEventSubscriptionsWithContext)

	case "DescribeEventsPages":
		return m.Fake(d.fakeDescribeEventsPages)

	case "DescribeEventsPagesWithContext":
		return m.Fake(d.fakeDescribeEventsPagesWithContext)

	case "DescribeEventsWithContext":
		return m.Fake(d.fakeDescribeEventsWithContext)

	case "DescribeOrderableDBInstanceOptionsPages":
		return m.Fake(d.fakeDescribeOrderableDBInstanceOptionsPages)

	case "DescribeOrderableDBInstanceOptionsPagesWithContext":
		return m.Fake(d.fakeDescribeOrderableDBInstanceOptionsPagesWithContext)

	case "DescribeOrderableDBInstanceOptionsWithContext":
		return m.Fake(d.fakeDescribeOrderableDBInstanceOptionsWithContext)

	case "DescribePendingMaintenanceActionsWithContext":
		return m.Fake(d.fakeDescribePendingMaintenanceActionsWithContext)

	case "DescribeValidDBInstanceModificationsWithContext":
		return m.Fake(d.fakeDescribeValidDBInstanceModificationsWithContext)

	case "FailoverDBClusterWithContext":
		return m.Fake(d.fakeFailoverDBClusterWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "ModifyDBClusterParameterGroupWithContext":
		return m.Fake(d.fakeModifyDBClusterParameterGroupWithContext)

	case "ModifyDBClusterSnapshotAttributeWithContext":
		return m.Fake(d.fakeModifyDBClusterSnapshotAttributeWithContext)

	case "ModifyDBClusterWithContext":
		return m.Fake(d.fakeModifyDBClusterWithContext)

	case "ModifyDBInstanceWithContext":
		return m.Fake(d.fakeModifyDBInstanceWithContext)

	case "ModifyDBParameterGroupWithContext":
		return m.Fake(d.fakeModifyDBParameterGroupWithContext)

	case "ModifyDBSubnetGroupWithContext":
		return m.Fake(d.fakeModifyDBSubnetGroupWithContext)

	case "ModifyEventSubscriptionWithContext":
		return m.Fake(d.fakeModifyEventSubscriptionWithContext)

	case "PromoteReadReplicaDBClusterWithContext":
		return m.Fake(d.fakePromoteReadReplicaDBClusterWithContext)

	case "RebootDBInstanceWithContext":
		return m.Fake(d.fakeRebootDBInstanceWithContext)

	case "RemoveRoleFromDBClusterWithContext":
		return m.Fake(d.fakeRemoveRoleFromDBClusterWithContext)

	case "RemoveSourceIdentifierFromSubscriptionWithContext":
		return m.Fake(d.fakeRemoveSourceIdentifierFromSubscriptionWithContext)

	case "RemoveTagsFromResourceWithContext":
		return m.Fake(d.fakeRemoveTagsFromResourceWithContext)

	case "ResetDBClusterParameterGroupWithContext":
		return m.Fake(d.fakeResetDBClusterParameterGroupWithContext)

	case "ResetDBParameterGroupWithContext":
		return m.Fake(d.fakeResetDBParameterGroupWithContext)

	case "RestoreDBClusterFromSnapshotWithContext":
		return m.Fake(d.fakeRestoreDBClusterFromSnapshotWithContext)

	case "RestoreDBClusterToPointInTimeWithContext":
		return m.Fake(d.fakeRestoreDBClusterToPointInTimeWithContext)

	case "WaitUntilDBInstanceAvailable":
		return m.Fake(d.fakeWaitUntilDBInstanceAvailable)

	case "WaitUntilDBInstanceAvailableWithContext":
		return m.Fake(d.fakeWaitUntilDBInstanceAvailableWithContext)

	case "WaitUntilDBInstanceDeleted":
		return m.Fake(d.fakeWaitUntilDBInstanceDeleted)

	case "WaitUntilDBInstanceDeletedWithContext":
		return m.Fake(d.fakeWaitUntilDBInstanceDeletedWithContext)

	default:
		return nil
	}
}

func (d *NeptuneDouble) AddRoleToDBCluster(i0 *neptune.AddRoleToDBClusterInput) (r0 *neptune.AddRoleToDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddRoleToDBCluster", i0)
	r0, _ = returns[0].(*neptune.AddRoleToDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) AddRoleToDBClusterRequest(i0 *neptune.AddRoleToDBClusterInput) (r0 *request.Request, r1 *neptune.AddRoleToDBClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddRoleToDBClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.AddRoleToDBClusterOutput)
	return
}

func (d *NeptuneDouble) AddRoleToDBClusterWithContext(i0 context.Context, i1 *neptune.AddRoleToDBClusterInput, i2 ...request.Option) (r0 *neptune.AddRoleToDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddRoleToDBClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.AddRoleToDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeAddRoleToDBClusterWithContext(ctx context.Context, in *neptune.AddRoleToDBClusterInput, _ ...request.Option) (*neptune.AddRoleToDBClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddRoleToDBCluster cancelled", ctx.Err())
	default:
		return d.AddRoleToDBCluster(in)
	}
}

func (d *NeptuneDouble) AddSourceIdentifierToSubscription(i0 *neptune.AddSourceIdentifierToSubscriptionInput) (r0 *neptune.AddSourceIdentifierToSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddSourceIdentifierToSubscription", i0)
	r0, _ = returns[0].(*neptune.AddSourceIdentifierToSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) AddSourceIdentifierToSubscriptionRequest(i0 *neptune.AddSourceIdentifierToSubscriptionInput) (r0 *request.Request, r1 *neptune.AddSourceIdentifierToSubscriptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddSourceIdentifierToSubscriptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.AddSourceIdentifierToSubscriptionOutput)
	return
}

func (d *NeptuneDouble) AddSourceIdentifierToSubscriptionWithContext(i0 context.Context, i1 *neptune.AddSourceIdentifierToSubscriptionInput, i2 ...request.Option) (r0 *neptune.AddSourceIdentifierToSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddSourceIdentifierToSubscriptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.AddSourceIdentifierToSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeAddSourceIdentifierToSubscriptionWithContext(ctx context.Context, in *neptune.AddSourceIdentifierToSubscriptionInput, _ ...request.Option) (*neptune.AddSourceIdentifierToSubscriptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddSourceIdentifierToSubscription cancelled", ctx.Err())
	default:
		return d.AddSourceIdentifierToSubscription(in)
	}
}

func (d *NeptuneDouble) AddTagsToResource(i0 *neptune.AddTagsToResourceInput) (r0 *neptune.AddTagsToResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToResource", i0)
	r0, _ = returns[0].(*neptune.AddTagsToResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) AddTagsToResourceRequest(i0 *neptune.AddTagsToResourceInput) (r0 *request.Request, r1 *neptune.AddTagsToResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.AddTagsToResourceOutput)
	return
}

func (d *NeptuneDouble) AddTagsToResourceWithContext(i0 context.Context, i1 *neptune.AddTagsToResourceInput, i2 ...request.Option) (r0 *neptune.AddTagsToResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.AddTagsToResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeAddTagsToResourceWithContext(ctx context.Context, in *neptune.AddTagsToResourceInput, _ ...request.Option) (*neptune.AddTagsToResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddTagsToResource cancelled", ctx.Err())
	default:
		return d.AddTagsToResource(in)
	}
}

func (d *NeptuneDouble) ApplyPendingMaintenanceAction(i0 *neptune.ApplyPendingMaintenanceActionInput) (r0 *neptune.ApplyPendingMaintenanceActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ApplyPendingMaintenanceAction", i0)
	r0, _ = returns[0].(*neptune.ApplyPendingMaintenanceActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) ApplyPendingMaintenanceActionRequest(i0 *neptune.ApplyPendingMaintenanceActionInput) (r0 *request.Request, r1 *neptune.ApplyPendingMaintenanceActionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ApplyPendingMaintenanceActionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.ApplyPendingMaintenanceActionOutput)
	return
}

func (d *NeptuneDouble) ApplyPendingMaintenanceActionWithContext(i0 context.Context, i1 *neptune.ApplyPendingMaintenanceActionInput, i2 ...request.Option) (r0 *neptune.ApplyPendingMaintenanceActionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ApplyPendingMaintenanceActionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.ApplyPendingMaintenanceActionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeApplyPendingMaintenanceActionWithContext(ctx context.Context, in *neptune.ApplyPendingMaintenanceActionInput, _ ...request.Option) (*neptune.ApplyPendingMaintenanceActionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ApplyPendingMaintenanceAction cancelled", ctx.Err())
	default:
		return d.ApplyPendingMaintenanceAction(in)
	}
}

func (d *NeptuneDouble) CopyDBClusterParameterGroup(i0 *neptune.CopyDBClusterParameterGroupInput) (r0 *neptune.CopyDBClusterParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyDBClusterParameterGroup", i0)
	r0, _ = returns[0].(*neptune.CopyDBClusterParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) CopyDBClusterParameterGroupRequest(i0 *neptune.CopyDBClusterParameterGroupInput) (r0 *request.Request, r1 *neptune.CopyDBClusterParameterGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyDBClusterParameterGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.CopyDBClusterParameterGroupOutput)
	return
}

func (d *NeptuneDouble) CopyDBClusterParameterGroupWithContext(i0 context.Context, i1 *neptune.CopyDBClusterParameterGroupInput, i2 ...request.Option) (r0 *neptune.CopyDBClusterParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyDBClusterParameterGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.CopyDBClusterParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeCopyDBClusterParameterGroupWithContext(ctx context.Context, in *neptune.CopyDBClusterParameterGroupInput, _ ...request.Option) (*neptune.CopyDBClusterParameterGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CopyDBClusterParameterGroup cancelled", ctx.Err())
	default:
		return d.CopyDBClusterParameterGroup(in)
	}
}

func (d *NeptuneDouble) CopyDBClusterSnapshot(i0 *neptune.CopyDBClusterSnapshotInput) (r0 *neptune.CopyDBClusterSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyDBClusterSnapshot", i0)
	r0, _ = returns[0].(*neptune.CopyDBClusterSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) CopyDBClusterSnapshotRequest(i0 *neptune.CopyDBClusterSnapshotInput) (r0 *request.Request, r1 *neptune.CopyDBClusterSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyDBClusterSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.CopyDBClusterSnapshotOutput)
	return
}

func (d *NeptuneDouble) CopyDBClusterSnapshotWithContext(i0 context.Context, i1 *neptune.CopyDBClusterSnapshotInput, i2 ...request.Option) (r0 *neptune.CopyDBClusterSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyDBClusterSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.CopyDBClusterSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeCopyDBClusterSnapshotWithContext(ctx context.Context, in *neptune.CopyDBClusterSnapshotInput, _ ...request.Option) (*neptune.CopyDBClusterSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CopyDBClusterSnapshot cancelled", ctx.Err())
	default:
		return d.CopyDBClusterSnapshot(in)
	}
}

func (d *NeptuneDouble) CopyDBParameterGroup(i0 *neptune.CopyDBParameterGroupInput) (r0 *neptune.CopyDBParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyDBParameterGroup", i0)
	r0, _ = returns[0].(*neptune.CopyDBParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) CopyDBParameterGroupRequest(i0 *neptune.CopyDBParameterGroupInput) (r0 *request.Request, r1 *neptune.CopyDBParameterGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyDBParameterGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.CopyDBParameterGroupOutput)
	return
}

func (d *NeptuneDouble) CopyDBParameterGroupWithContext(i0 context.Context, i1 *neptune.CopyDBParameterGroupInput, i2 ...request.Option) (r0 *neptune.CopyDBParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyDBParameterGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.CopyDBParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeCopyDBParameterGroupWithContext(ctx context.Context, in *neptune.CopyDBParameterGroupInput, _ ...request.Option) (*neptune.CopyDBParameterGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CopyDBParameterGroup cancelled", ctx.Err())
	default:
		return d.CopyDBParameterGroup(in)
	}
}

func (d *NeptuneDouble) CreateDBCluster(i0 *neptune.CreateDBClusterInput) (r0 *neptune.CreateDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBCluster", i0)
	r0, _ = returns[0].(*neptune.CreateDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) CreateDBClusterParameterGroup(i0 *neptune.CreateDBClusterParameterGroupInput) (r0 *neptune.CreateDBClusterParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBClusterParameterGroup", i0)
	r0, _ = returns[0].(*neptune.CreateDBClusterParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) CreateDBClusterParameterGroupRequest(i0 *neptune.CreateDBClusterParameterGroupInput) (r0 *request.Request, r1 *neptune.CreateDBClusterParameterGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBClusterParameterGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.CreateDBClusterParameterGroupOutput)
	return
}

func (d *NeptuneDouble) CreateDBClusterParameterGroupWithContext(i0 context.Context, i1 *neptune.CreateDBClusterParameterGroupInput, i2 ...request.Option) (r0 *neptune.CreateDBClusterParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBClusterParameterGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.CreateDBClusterParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeCreateDBClusterParameterGroupWithContext(ctx context.Context, in *neptune.CreateDBClusterParameterGroupInput, _ ...request.Option) (*neptune.CreateDBClusterParameterGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDBClusterParameterGroup cancelled", ctx.Err())
	default:
		return d.CreateDBClusterParameterGroup(in)
	}
}

func (d *NeptuneDouble) CreateDBClusterRequest(i0 *neptune.CreateDBClusterInput) (r0 *request.Request, r1 *neptune.CreateDBClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.CreateDBClusterOutput)
	return
}

func (d *NeptuneDouble) CreateDBClusterSnapshot(i0 *neptune.CreateDBClusterSnapshotInput) (r0 *neptune.CreateDBClusterSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBClusterSnapshot", i0)
	r0, _ = returns[0].(*neptune.CreateDBClusterSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) CreateDBClusterSnapshotRequest(i0 *neptune.CreateDBClusterSnapshotInput) (r0 *request.Request, r1 *neptune.CreateDBClusterSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBClusterSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.CreateDBClusterSnapshotOutput)
	return
}

func (d *NeptuneDouble) CreateDBClusterSnapshotWithContext(i0 context.Context, i1 *neptune.CreateDBClusterSnapshotInput, i2 ...request.Option) (r0 *neptune.CreateDBClusterSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBClusterSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.CreateDBClusterSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeCreateDBClusterSnapshotWithContext(ctx context.Context, in *neptune.CreateDBClusterSnapshotInput, _ ...request.Option) (*neptune.CreateDBClusterSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDBClusterSnapshot cancelled", ctx.Err())
	default:
		return d.CreateDBClusterSnapshot(in)
	}
}

func (d *NeptuneDouble) CreateDBClusterWithContext(i0 context.Context, i1 *neptune.CreateDBClusterInput, i2 ...request.Option) (r0 *neptune.CreateDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.CreateDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeCreateDBClusterWithContext(ctx context.Context, in *neptune.CreateDBClusterInput, _ ...request.Option) (*neptune.CreateDBClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDBCluster cancelled", ctx.Err())
	default:
		return d.CreateDBCluster(in)
	}
}

func (d *NeptuneDouble) CreateDBInstance(i0 *neptune.CreateDBInstanceInput) (r0 *neptune.CreateDBInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBInstance", i0)
	r0, _ = returns[0].(*neptune.CreateDBInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) CreateDBInstanceRequest(i0 *neptune.CreateDBInstanceInput) (r0 *request.Request, r1 *neptune.CreateDBInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.CreateDBInstanceOutput)
	return
}

func (d *NeptuneDouble) CreateDBInstanceWithContext(i0 context.Context, i1 *neptune.CreateDBInstanceInput, i2 ...request.Option) (r0 *neptune.CreateDBInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.CreateDBInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeCreateDBInstanceWithContext(ctx context.Context, in *neptune.CreateDBInstanceInput, _ ...request.Option) (*neptune.CreateDBInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDBInstance cancelled", ctx.Err())
	default:
		return d.CreateDBInstance(in)
	}
}

func (d *NeptuneDouble) CreateDBParameterGroup(i0 *neptune.CreateDBParameterGroupInput) (r0 *neptune.CreateDBParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBParameterGroup", i0)
	r0, _ = returns[0].(*neptune.CreateDBParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) CreateDBParameterGroupRequest(i0 *neptune.CreateDBParameterGroupInput) (r0 *request.Request, r1 *neptune.CreateDBParameterGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBParameterGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.CreateDBParameterGroupOutput)
	return
}

func (d *NeptuneDouble) CreateDBParameterGroupWithContext(i0 context.Context, i1 *neptune.CreateDBParameterGroupInput, i2 ...request.Option) (r0 *neptune.CreateDBParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBParameterGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.CreateDBParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeCreateDBParameterGroupWithContext(ctx context.Context, in *neptune.CreateDBParameterGroupInput, _ ...request.Option) (*neptune.CreateDBParameterGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDBParameterGroup cancelled", ctx.Err())
	default:
		return d.CreateDBParameterGroup(in)
	}
}

func (d *NeptuneDouble) CreateDBSubnetGroup(i0 *neptune.CreateDBSubnetGroupInput) (r0 *neptune.CreateDBSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBSubnetGroup", i0)
	r0, _ = returns[0].(*neptune.CreateDBSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) CreateDBSubnetGroupRequest(i0 *neptune.CreateDBSubnetGroupInput) (r0 *request.Request, r1 *neptune.CreateDBSubnetGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBSubnetGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.CreateDBSubnetGroupOutput)
	return
}

func (d *NeptuneDouble) CreateDBSubnetGroupWithContext(i0 context.Context, i1 *neptune.CreateDBSubnetGroupInput, i2 ...request.Option) (r0 *neptune.CreateDBSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDBSubnetGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.CreateDBSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeCreateDBSubnetGroupWithContext(ctx context.Context, in *neptune.CreateDBSubnetGroupInput, _ ...request.Option) (*neptune.CreateDBSubnetGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDBSubnetGroup cancelled", ctx.Err())
	default:
		return d.CreateDBSubnetGroup(in)
	}
}

func (d *NeptuneDouble) CreateEventSubscription(i0 *neptune.CreateEventSubscriptionInput) (r0 *neptune.CreateEventSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEventSubscription", i0)
	r0, _ = returns[0].(*neptune.CreateEventSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) CreateEventSubscriptionRequest(i0 *neptune.CreateEventSubscriptionInput) (r0 *request.Request, r1 *neptune.CreateEventSubscriptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEventSubscriptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.CreateEventSubscriptionOutput)
	return
}

func (d *NeptuneDouble) CreateEventSubscriptionWithContext(i0 context.Context, i1 *neptune.CreateEventSubscriptionInput, i2 ...request.Option) (r0 *neptune.CreateEventSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateEventSubscriptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.CreateEventSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeCreateEventSubscriptionWithContext(ctx context.Context, in *neptune.CreateEventSubscriptionInput, _ ...request.Option) (*neptune.CreateEventSubscriptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateEventSubscription cancelled", ctx.Err())
	default:
		return d.CreateEventSubscription(in)
	}
}

func (d *NeptuneDouble) DeleteDBCluster(i0 *neptune.DeleteDBClusterInput) (r0 *neptune.DeleteDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBCluster", i0)
	r0, _ = returns[0].(*neptune.DeleteDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) DeleteDBClusterParameterGroup(i0 *neptune.DeleteDBClusterParameterGroupInput) (r0 *neptune.DeleteDBClusterParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBClusterParameterGroup", i0)
	r0, _ = returns[0].(*neptune.DeleteDBClusterParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) DeleteDBClusterParameterGroupRequest(i0 *neptune.DeleteDBClusterParameterGroupInput) (r0 *request.Request, r1 *neptune.DeleteDBClusterParameterGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBClusterParameterGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.DeleteDBClusterParameterGroupOutput)
	return
}

func (d *NeptuneDouble) DeleteDBClusterParameterGroupWithContext(i0 context.Context, i1 *neptune.DeleteDBClusterParameterGroupInput, i2 ...request.Option) (r0 *neptune.DeleteDBClusterParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBClusterParameterGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.DeleteDBClusterParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeDeleteDBClusterParameterGroupWithContext(ctx context.Context, in *neptune.DeleteDBClusterParameterGroupInput, _ ...request.Option) (*neptune.DeleteDBClusterParameterGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDBClusterParameterGroup cancelled", ctx.Err())
	default:
		return d.DeleteDBClusterParameterGroup(in)
	}
}

func (d *NeptuneDouble) DeleteDBClusterRequest(i0 *neptune.DeleteDBClusterInput) (r0 *request.Request, r1 *neptune.DeleteDBClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.DeleteDBClusterOutput)
	return
}

func (d *NeptuneDouble) DeleteDBClusterSnapshot(i0 *neptune.DeleteDBClusterSnapshotInput) (r0 *neptune.DeleteDBClusterSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBClusterSnapshot", i0)
	r0, _ = returns[0].(*neptune.DeleteDBClusterSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) DeleteDBClusterSnapshotRequest(i0 *neptune.DeleteDBClusterSnapshotInput) (r0 *request.Request, r1 *neptune.DeleteDBClusterSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBClusterSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.DeleteDBClusterSnapshotOutput)
	return
}

func (d *NeptuneDouble) DeleteDBClusterSnapshotWithContext(i0 context.Context, i1 *neptune.DeleteDBClusterSnapshotInput, i2 ...request.Option) (r0 *neptune.DeleteDBClusterSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBClusterSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.DeleteDBClusterSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeDeleteDBClusterSnapshotWithContext(ctx context.Context, in *neptune.DeleteDBClusterSnapshotInput, _ ...request.Option) (*neptune.DeleteDBClusterSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDBClusterSnapshot cancelled", ctx.Err())
	default:
		return d.DeleteDBClusterSnapshot(in)
	}
}

func (d *NeptuneDouble) DeleteDBClusterWithContext(i0 context.Context, i1 *neptune.DeleteDBClusterInput, i2 ...request.Option) (r0 *neptune.DeleteDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.DeleteDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeDeleteDBClusterWithContext(ctx context.Context, in *neptune.DeleteDBClusterInput, _ ...request.Option) (*neptune.DeleteDBClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDBCluster cancelled", ctx.Err())
	default:
		return d.DeleteDBCluster(in)
	}
}

func (d *NeptuneDouble) DeleteDBInstance(i0 *neptune.DeleteDBInstanceInput) (r0 *neptune.DeleteDBInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBInstance", i0)
	r0, _ = returns[0].(*neptune.DeleteDBInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) DeleteDBInstanceRequest(i0 *neptune.DeleteDBInstanceInput) (r0 *request.Request, r1 *neptune.DeleteDBInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.DeleteDBInstanceOutput)
	return
}

func (d *NeptuneDouble) DeleteDBInstanceWithContext(i0 context.Context, i1 *neptune.DeleteDBInstanceInput, i2 ...request.Option) (r0 *neptune.DeleteDBInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.DeleteDBInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeDeleteDBInstanceWithContext(ctx context.Context, in *neptune.DeleteDBInstanceInput, _ ...request.Option) (*neptune.DeleteDBInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDBInstance cancelled", ctx.Err())
	default:
		return d.DeleteDBInstance(in)
	}
}

func (d *NeptuneDouble) DeleteDBParameterGroup(i0 *neptune.DeleteDBParameterGroupInput) (r0 *neptune.DeleteDBParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBParameterGroup", i0)
	r0, _ = returns[0].(*neptune.DeleteDBParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) DeleteDBParameterGroupRequest(i0 *neptune.DeleteDBParameterGroupInput) (r0 *request.Request, r1 *neptune.DeleteDBParameterGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBParameterGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.DeleteDBParameterGroupOutput)
	return
}

func (d *NeptuneDouble) DeleteDBParameterGroupWithContext(i0 context.Context, i1 *neptune.DeleteDBParameterGroupInput, i2 ...request.Option) (r0 *neptune.DeleteDBParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBParameterGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.DeleteDBParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeDeleteDBParameterGroupWithContext(ctx context.Context, in *neptune.DeleteDBParameterGroupInput, _ ...request.Option) (*neptune.DeleteDBParameterGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDBParameterGroup cancelled", ctx.Err())
	default:
		return d.DeleteDBParameterGroup(in)
	}
}

func (d *NeptuneDouble) DeleteDBSubnetGroup(i0 *neptune.DeleteDBSubnetGroupInput) (r0 *neptune.DeleteDBSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBSubnetGroup", i0)
	r0, _ = returns[0].(*neptune.DeleteDBSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) DeleteDBSubnetGroupRequest(i0 *neptune.DeleteDBSubnetGroupInput) (r0 *request.Request, r1 *neptune.DeleteDBSubnetGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBSubnetGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.DeleteDBSubnetGroupOutput)
	return
}

func (d *NeptuneDouble) DeleteDBSubnetGroupWithContext(i0 context.Context, i1 *neptune.DeleteDBSubnetGroupInput, i2 ...request.Option) (r0 *neptune.DeleteDBSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDBSubnetGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.DeleteDBSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeDeleteDBSubnetGroupWithContext(ctx context.Context, in *neptune.DeleteDBSubnetGroupInput, _ ...request.Option) (*neptune.DeleteDBSubnetGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDBSubnetGroup cancelled", ctx.Err())
	default:
		return d.DeleteDBSubnetGroup(in)
	}
}

func (d *NeptuneDouble) DeleteEventSubscription(i0 *neptune.DeleteEventSubscriptionInput) (r0 *neptune.DeleteEventSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEventSubscription", i0)
	r0, _ = returns[0].(*neptune.DeleteEventSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) DeleteEventSubscriptionRequest(i0 *neptune.DeleteEventSubscriptionInput) (r0 *request.Request, r1 *neptune.DeleteEventSubscriptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEventSubscriptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.DeleteEventSubscriptionOutput)
	return
}

func (d *NeptuneDouble) DeleteEventSubscriptionWithContext(i0 context.Context, i1 *neptune.DeleteEventSubscriptionInput, i2 ...request.Option) (r0 *neptune.DeleteEventSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteEventSubscriptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.DeleteEventSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeDeleteEventSubscriptionWithContext(ctx context.Context, in *neptune.DeleteEventSubscriptionInput, _ ...request.Option) (*neptune.DeleteEventSubscriptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteEventSubscription cancelled", ctx.Err())
	default:
		return d.DeleteEventSubscription(in)
	}
}

func (d *NeptuneDouble) DescribeDBClusterParameterGroups(i0 *neptune.DescribeDBClusterParameterGroupsInput) (r0 *neptune.DescribeDBClusterParameterGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterParameterGroups", i0)
	r0, _ = returns[0].(*neptune.DescribeDBClusterParameterGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) DescribeDBClusterParameterGroupsRequest(i0 *neptune.DescribeDBClusterParameterGroupsInput) (r0 *request.Request, r1 *neptune.DescribeDBClusterParameterGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterParameterGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.DescribeDBClusterParameterGroupsOutput)
	return
}

func (d *NeptuneDouble) DescribeDBClusterParameterGroupsWithContext(i0 context.Context, i1 *neptune.DescribeDBClusterParameterGroupsInput, i2 ...request.Option) (r0 *neptune.DescribeDBClusterParameterGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterParameterGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.DescribeDBClusterParameterGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeDescribeDBClusterParameterGroupsWithContext(ctx context.Context, in *neptune.DescribeDBClusterParameterGroupsInput, _ ...request.Option) (*neptune.DescribeDBClusterParameterGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBClusterParameterGroups cancelled", ctx.Err())
	default:
		return d.DescribeDBClusterParameterGroups(in)
	}
}

func (d *NeptuneDouble) DescribeDBClusterParameters(i0 *neptune.DescribeDBClusterParametersInput) (r0 *neptune.DescribeDBClusterParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterParameters", i0)
	r0, _ = returns[0].(*neptune.DescribeDBClusterParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) DescribeDBClusterParametersRequest(i0 *neptune.DescribeDBClusterParametersInput) (r0 *request.Request, r1 *neptune.DescribeDBClusterParametersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterParametersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.DescribeDBClusterParametersOutput)
	return
}

func (d *NeptuneDouble) DescribeDBClusterParametersWithContext(i0 context.Context, i1 *neptune.DescribeDBClusterParametersInput, i2 ...request.Option) (r0 *neptune.DescribeDBClusterParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterParametersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.DescribeDBClusterParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeDescribeDBClusterParametersWithContext(ctx context.Context, in *neptune.DescribeDBClusterParametersInput, _ ...request.Option) (*neptune.DescribeDBClusterParametersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBClusterParameters cancelled", ctx.Err())
	default:
		return d.DescribeDBClusterParameters(in)
	}
}

func (d *NeptuneDouble) DescribeDBClusterSnapshotAttributes(i0 *neptune.DescribeDBClusterSnapshotAttributesInput) (r0 *neptune.DescribeDBClusterSnapshotAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterSnapshotAttributes", i0)
	r0, _ = returns[0].(*neptune.DescribeDBClusterSnapshotAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) DescribeDBClusterSnapshotAttributesRequest(i0 *neptune.DescribeDBClusterSnapshotAttributesInput) (r0 *request.Request, r1 *neptune.DescribeDBClusterSnapshotAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterSnapshotAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.DescribeDBClusterSnapshotAttributesOutput)
	return
}

func (d *NeptuneDouble) DescribeDBClusterSnapshotAttributesWithContext(i0 context.Context, i1 *neptune.DescribeDBClusterSnapshotAttributesInput, i2 ...request.Option) (r0 *neptune.DescribeDBClusterSnapshotAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterSnapshotAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.DescribeDBClusterSnapshotAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeDescribeDBClusterSnapshotAttributesWithContext(ctx context.Context, in *neptune.DescribeDBClusterSnapshotAttributesInput, _ ...request.Option) (*neptune.DescribeDBClusterSnapshotAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBClusterSnapshotAttributes cancelled", ctx.Err())
	default:
		return d.DescribeDBClusterSnapshotAttributes(in)
	}
}

func (d *NeptuneDouble) DescribeDBClusterSnapshots(i0 *neptune.DescribeDBClusterSnapshotsInput) (r0 *neptune.DescribeDBClusterSnapshotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterSnapshots", i0)
	r0, _ = returns[0].(*neptune.DescribeDBClusterSnapshotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) DescribeDBClusterSnapshotsRequest(i0 *neptune.DescribeDBClusterSnapshotsInput) (r0 *request.Request, r1 *neptune.DescribeDBClusterSnapshotsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterSnapshotsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.DescribeDBClusterSnapshotsOutput)
	return
}

func (d *NeptuneDouble) DescribeDBClusterSnapshotsWithContext(i0 context.Context, i1 *neptune.DescribeDBClusterSnapshotsInput, i2 ...request.Option) (r0 *neptune.DescribeDBClusterSnapshotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusterSnapshotsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.DescribeDBClusterSnapshotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeDescribeDBClusterSnapshotsWithContext(ctx context.Context, in *neptune.DescribeDBClusterSnapshotsInput, _ ...request.Option) (*neptune.DescribeDBClusterSnapshotsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBClusterSnapshots cancelled", ctx.Err())
	default:
		return d.DescribeDBClusterSnapshots(in)
	}
}

func (d *NeptuneDouble) DescribeDBClusters(i0 *neptune.DescribeDBClustersInput) (r0 *neptune.DescribeDBClustersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClusters", i0)
	r0, _ = returns[0].(*neptune.DescribeDBClustersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) DescribeDBClustersRequest(i0 *neptune.DescribeDBClustersInput) (r0 *request.Request, r1 *neptune.DescribeDBClustersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClustersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.DescribeDBClustersOutput)
	return
}

func (d *NeptuneDouble) DescribeDBClustersWithContext(i0 context.Context, i1 *neptune.DescribeDBClustersInput, i2 ...request.Option) (r0 *neptune.DescribeDBClustersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBClustersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.DescribeDBClustersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeDescribeDBClustersWithContext(ctx context.Context, in *neptune.DescribeDBClustersInput, _ ...request.Option) (*neptune.DescribeDBClustersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBClusters cancelled", ctx.Err())
	default:
		return d.DescribeDBClusters(in)
	}
}

func (d *NeptuneDouble) DescribeDBEngineVersions(i0 *neptune.DescribeDBEngineVersionsInput) (r0 *neptune.DescribeDBEngineVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBEngineVersions", i0)
	r0, _ = returns[0].(*neptune.DescribeDBEngineVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) DescribeDBEngineVersionsPages(i0 *neptune.DescribeDBEngineVersionsInput, i1 func(*neptune.DescribeDBEngineVersionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBEngineVersionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *NeptuneDouble) fakeDescribeDBEngineVersionsPages(in *neptune.DescribeDBEngineVersionsInput, pager func(*neptune.DescribeDBEngineVersionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeDBEngineVersions", paginators, in, pager)
}

func (d *NeptuneDouble) DescribeDBEngineVersionsPagesWithContext(i0 context.Context, i1 *neptune.DescribeDBEngineVersionsInput, i2 func(*neptune.DescribeDBEngineVersionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBEngineVersionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *NeptuneDouble) fakeDescribeDBEngineVersionsPagesWithContext(ctx context.Context, in *neptune.DescribeDBEngineVersionsInput, pager func(*neptune.DescribeDBEngineVersionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeDBEngineVersions", paginators, ctx, in, pager, options...)
}

func (d *NeptuneDouble) DescribeDBEngineVersionsRequest(i0 *neptune.DescribeDBEngineVersionsInput) (r0 *request.Request, r1 *neptune.DescribeDBEngineVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBEngineVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.DescribeDBEngineVersionsOutput)
	return
}

func (d *NeptuneDouble) DescribeDBEngineVersionsWithContext(i0 context.Context, i1 *neptune.DescribeDBEngineVersionsInput, i2 ...request.Option) (r0 *neptune.DescribeDBEngineVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBEngineVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.DescribeDBEngineVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeDescribeDBEngineVersionsWithContext(ctx context.Context, in *neptune.DescribeDBEngineVersionsInput, _ ...request.Option) (*neptune.DescribeDBEngineVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBEngineVersions cancelled", ctx.Err())
	default:
		return d.DescribeDBEngineVersions(in)
	}
}

func (d *NeptuneDouble) DescribeDBInstances(i0 *neptune.DescribeDBInstancesInput) (r0 *neptune.DescribeDBInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBInstances", i0)
	r0, _ = returns[0].(*neptune.DescribeDBInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) DescribeDBInstancesPages(i0 *neptune.DescribeDBInstancesInput, i1 func(*neptune.DescribeDBInstancesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBInstancesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *NeptuneDouble) fakeDescribeDBInstancesPages(in *neptune.DescribeDBInstancesInput, pager func(*neptune.DescribeDBInstancesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeDBInstances", paginators, in, pager)
}

func (d *NeptuneDouble) DescribeDBInstancesPagesWithContext(i0 context.Context, i1 *neptune.DescribeDBInstancesInput, i2 func(*neptune.DescribeDBInstancesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBInstancesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *NeptuneDouble) fakeDescribeDBInstancesPagesWithContext(ctx context.Context, in *neptune.DescribeDBInstancesInput, pager func(*neptune.DescribeDBInstancesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeDBInstances", paginators, ctx, in, pager, options...)
}

func (d *NeptuneDouble) DescribeDBInstancesRequest(i0 *neptune.DescribeDBInstancesInput) (r0 *request.Request, r1 *neptune.DescribeDBInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.DescribeDBInstancesOutput)
	return
}

func (d *NeptuneDouble) DescribeDBInstancesWithContext(i0 context.Context, i1 *neptune.DescribeDBInstancesInput, i2 ...request.Option) (r0 *neptune.DescribeDBInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.DescribeDBInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeDescribeDBInstancesWithContext(ctx context.Context, in *neptune.DescribeDBInstancesInput, _ ...request.Option) (*neptune.DescribeDBInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBInstances cancelled", ctx.Err())
	default:
		return d.DescribeDBInstances(in)
	}
}

func (d *NeptuneDouble) DescribeDBParameterGroups(i0 *neptune.DescribeDBParameterGroupsInput) (r0 *neptune.DescribeDBParameterGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBParameterGroups", i0)
	r0, _ = returns[0].(*neptune.DescribeDBParameterGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) DescribeDBParameterGroupsPages(i0 *neptune.DescribeDBParameterGroupsInput, i1 func(*neptune.DescribeDBParameterGroupsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBParameterGroupsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *NeptuneDouble) fakeDescribeDBParameterGroupsPages(in *neptune.DescribeDBParameterGroupsInput, pager func(*neptune.DescribeDBParameterGroupsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeDBParameterGroups", paginators, in, pager)
}

func (d *NeptuneDouble) DescribeDBParameterGroupsPagesWithContext(i0 context.Context, i1 *neptune.DescribeDBParameterGroupsInput, i2 func(*neptune.DescribeDBParameterGroupsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBParameterGroupsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *NeptuneDouble) fakeDescribeDBParameterGroupsPagesWithContext(ctx context.Context, in *neptune.DescribeDBParameterGroupsInput, pager func(*neptune.DescribeDBParameterGroupsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeDBParameterGroups", paginators, ctx, in, pager, options...)
}

func (d *NeptuneDouble) DescribeDBParameterGroupsRequest(i0 *neptune.DescribeDBParameterGroupsInput) (r0 *request.Request, r1 *neptune.DescribeDBParameterGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBParameterGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.DescribeDBParameterGroupsOutput)
	return
}

func (d *NeptuneDouble) DescribeDBParameterGroupsWithContext(i0 context.Context, i1 *neptune.DescribeDBParameterGroupsInput, i2 ...request.Option) (r0 *neptune.DescribeDBParameterGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBParameterGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.DescribeDBParameterGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeDescribeDBParameterGroupsWithContext(ctx context.Context, in *neptune.DescribeDBParameterGroupsInput, _ ...request.Option) (*neptune.DescribeDBParameterGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBParameterGroups cancelled", ctx.Err())
	default:
		return d.DescribeDBParameterGroups(in)
	}
}

func (d *NeptuneDouble) DescribeDBParameters(i0 *neptune.DescribeDBParametersInput) (r0 *neptune.DescribeDBParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBParameters", i0)
	r0, _ = returns[0].(*neptune.DescribeDBParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) DescribeDBParametersPages(i0 *neptune.DescribeDBParametersInput, i1 func(*neptune.DescribeDBParametersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBParametersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *NeptuneDouble) fakeDescribeDBParametersPages(in *neptune.DescribeDBParametersInput, pager func(*neptune.DescribeDBParametersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeDBParameters", paginators, in, pager)
}

func (d *NeptuneDouble) DescribeDBParametersPagesWithContext(i0 context.Context, i1 *neptune.DescribeDBParametersInput, i2 func(*neptune.DescribeDBParametersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBParametersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *NeptuneDouble) fakeDescribeDBParametersPagesWithContext(ctx context.Context, in *neptune.DescribeDBParametersInput, pager func(*neptune.DescribeDBParametersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeDBParameters", paginators, ctx, in, pager, options...)
}

func (d *NeptuneDouble) DescribeDBParametersRequest(i0 *neptune.DescribeDBParametersInput) (r0 *request.Request, r1 *neptune.DescribeDBParametersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBParametersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.DescribeDBParametersOutput)
	return
}

func (d *NeptuneDouble) DescribeDBParametersWithContext(i0 context.Context, i1 *neptune.DescribeDBParametersInput, i2 ...request.Option) (r0 *neptune.DescribeDBParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBParametersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.DescribeDBParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeDescribeDBParametersWithContext(ctx context.Context, in *neptune.DescribeDBParametersInput, _ ...request.Option) (*neptune.DescribeDBParametersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBParameters cancelled", ctx.Err())
	default:
		return d.DescribeDBParameters(in)
	}
}

func (d *NeptuneDouble) DescribeDBSubnetGroups(i0 *neptune.DescribeDBSubnetGroupsInput) (r0 *neptune.DescribeDBSubnetGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBSubnetGroups", i0)
	r0, _ = returns[0].(*neptune.DescribeDBSubnetGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) DescribeDBSubnetGroupsPages(i0 *neptune.DescribeDBSubnetGroupsInput, i1 func(*neptune.DescribeDBSubnetGroupsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBSubnetGroupsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *NeptuneDouble) fakeDescribeDBSubnetGroupsPages(in *neptune.DescribeDBSubnetGroupsInput, pager func(*neptune.DescribeDBSubnetGroupsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeDBSubnetGroups", paginators, in, pager)
}

func (d *NeptuneDouble) DescribeDBSubnetGroupsPagesWithContext(i0 context.Context, i1 *neptune.DescribeDBSubnetGroupsInput, i2 func(*neptune.DescribeDBSubnetGroupsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBSubnetGroupsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *NeptuneDouble) fakeDescribeDBSubnetGroupsPagesWithContext(ctx context.Context, in *neptune.DescribeDBSubnetGroupsInput, pager func(*neptune.DescribeDBSubnetGroupsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeDBSubnetGroups", paginators, ctx, in, pager, options...)
}

func (d *NeptuneDouble) DescribeDBSubnetGroupsRequest(i0 *neptune.DescribeDBSubnetGroupsInput) (r0 *request.Request, r1 *neptune.DescribeDBSubnetGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBSubnetGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.DescribeDBSubnetGroupsOutput)
	return
}

func (d *NeptuneDouble) DescribeDBSubnetGroupsWithContext(i0 context.Context, i1 *neptune.DescribeDBSubnetGroupsInput, i2 ...request.Option) (r0 *neptune.DescribeDBSubnetGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDBSubnetGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.DescribeDBSubnetGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeDescribeDBSubnetGroupsWithContext(ctx context.Context, in *neptune.DescribeDBSubnetGroupsInput, _ ...request.Option) (*neptune.DescribeDBSubnetGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDBSubnetGroups cancelled", ctx.Err())
	default:
		return d.DescribeDBSubnetGroups(in)
	}
}

func (d *NeptuneDouble) DescribeEngineDefaultClusterParameters(i0 *neptune.DescribeEngineDefaultClusterParametersInput) (r0 *neptune.DescribeEngineDefaultClusterParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEngineDefaultClusterParameters", i0)
	r0, _ = returns[0].(*neptune.DescribeEngineDefaultClusterParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) DescribeEngineDefaultClusterParametersRequest(i0 *neptune.DescribeEngineDefaultClusterParametersInput) (r0 *request.Request, r1 *neptune.DescribeEngineDefaultClusterParametersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEngineDefaultClusterParametersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.DescribeEngineDefaultClusterParametersOutput)
	return
}

func (d *NeptuneDouble) DescribeEngineDefaultClusterParametersWithContext(i0 context.Context, i1 *neptune.DescribeEngineDefaultClusterParametersInput, i2 ...request.Option) (r0 *neptune.DescribeEngineDefaultClusterParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEngineDefaultClusterParametersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.DescribeEngineDefaultClusterParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeDescribeEngineDefaultClusterParametersWithContext(ctx context.Context, in *neptune.DescribeEngineDefaultClusterParametersInput, _ ...request.Option) (*neptune.DescribeEngineDefaultClusterParametersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEngineDefaultClusterParameters cancelled", ctx.Err())
	default:
		return d.DescribeEngineDefaultClusterParameters(in)
	}
}

func (d *NeptuneDouble) DescribeEngineDefaultParameters(i0 *neptune.DescribeEngineDefaultParametersInput) (r0 *neptune.DescribeEngineDefaultParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEngineDefaultParameters", i0)
	r0, _ = returns[0].(*neptune.DescribeEngineDefaultParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) DescribeEngineDefaultParametersPages(i0 *neptune.DescribeEngineDefaultParametersInput, i1 func(*neptune.DescribeEngineDefaultParametersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEngineDefaultParametersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *NeptuneDouble) fakeDescribeEngineDefaultParametersPages(in *neptune.DescribeEngineDefaultParametersInput, pager func(*neptune.DescribeEngineDefaultParametersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeEngineDefaultParameters", paginators, in, pager)
}

func (d *NeptuneDouble) DescribeEngineDefaultParametersPagesWithContext(i0 context.Context, i1 *neptune.DescribeEngineDefaultParametersInput, i2 func(*neptune.DescribeEngineDefaultParametersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEngineDefaultParametersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *NeptuneDouble) fakeDescribeEngineDefaultParametersPagesWithContext(ctx context.Context, in *neptune.DescribeEngineDefaultParametersInput, pager func(*neptune.DescribeEngineDefaultParametersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeEngineDefaultParameters", paginators, ctx, in, pager, options...)
}

func (d *NeptuneDouble) DescribeEngineDefaultParametersRequest(i0 *neptune.DescribeEngineDefaultParametersInput) (r0 *request.Request, r1 *neptune.DescribeEngineDefaultParametersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEngineDefaultParametersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.DescribeEngineDefaultParametersOutput)
	return
}

func (d *NeptuneDouble) DescribeEngineDefaultParametersWithContext(i0 context.Context, i1 *neptune.DescribeEngineDefaultParametersInput, i2 ...request.Option) (r0 *neptune.DescribeEngineDefaultParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEngineDefaultParametersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.DescribeEngineDefaultParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeDescribeEngineDefaultParametersWithContext(ctx context.Context, in *neptune.DescribeEngineDefaultParametersInput, _ ...request.Option) (*neptune.DescribeEngineDefaultParametersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEngineDefaultParameters cancelled", ctx.Err())
	default:
		return d.DescribeEngineDefaultParameters(in)
	}
}

func (d *NeptuneDouble) DescribeEventCategories(i0 *neptune.DescribeEventCategoriesInput) (r0 *neptune.DescribeEventCategoriesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventCategories", i0)
	r0, _ = returns[0].(*neptune.DescribeEventCategoriesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) DescribeEventCategoriesRequest(i0 *neptune.DescribeEventCategoriesInput) (r0 *request.Request, r1 *neptune.DescribeEventCategoriesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventCategoriesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.DescribeEventCategoriesOutput)
	return
}

func (d *NeptuneDouble) DescribeEventCategoriesWithContext(i0 context.Context, i1 *neptune.DescribeEventCategoriesInput, i2 ...request.Option) (r0 *neptune.DescribeEventCategoriesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventCategoriesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.DescribeEventCategoriesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeDescribeEventCategoriesWithContext(ctx context.Context, in *neptune.DescribeEventCategoriesInput, _ ...request.Option) (*neptune.DescribeEventCategoriesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEventCategories cancelled", ctx.Err())
	default:
		return d.DescribeEventCategories(in)
	}
}

func (d *NeptuneDouble) DescribeEventSubscriptions(i0 *neptune.DescribeEventSubscriptionsInput) (r0 *neptune.DescribeEventSubscriptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventSubscriptions", i0)
	r0, _ = returns[0].(*neptune.DescribeEventSubscriptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) DescribeEventSubscriptionsPages(i0 *neptune.DescribeEventSubscriptionsInput, i1 func(*neptune.DescribeEventSubscriptionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventSubscriptionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *NeptuneDouble) fakeDescribeEventSubscriptionsPages(in *neptune.DescribeEventSubscriptionsInput, pager func(*neptune.DescribeEventSubscriptionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeEventSubscriptions", paginators, in, pager)
}

func (d *NeptuneDouble) DescribeEventSubscriptionsPagesWithContext(i0 context.Context, i1 *neptune.DescribeEventSubscriptionsInput, i2 func(*neptune.DescribeEventSubscriptionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventSubscriptionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *NeptuneDouble) fakeDescribeEventSubscriptionsPagesWithContext(ctx context.Context, in *neptune.DescribeEventSubscriptionsInput, pager func(*neptune.DescribeEventSubscriptionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeEventSubscriptions", paginators, ctx, in, pager, options...)
}

func (d *NeptuneDouble) DescribeEventSubscriptionsRequest(i0 *neptune.DescribeEventSubscriptionsInput) (r0 *request.Request, r1 *neptune.DescribeEventSubscriptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventSubscriptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.DescribeEventSubscriptionsOutput)
	return
}

func (d *NeptuneDouble) DescribeEventSubscriptionsWithContext(i0 context.Context, i1 *neptune.DescribeEventSubscriptionsInput, i2 ...request.Option) (r0 *neptune.DescribeEventSubscriptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventSubscriptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.DescribeEventSubscriptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeDescribeEventSubscriptionsWithContext(ctx context.Context, in *neptune.DescribeEventSubscriptionsInput, _ ...request.Option) (*neptune.DescribeEventSubscriptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEventSubscriptions cancelled", ctx.Err())
	default:
		return d.DescribeEventSubscriptions(in)
	}
}

func (d *NeptuneDouble) DescribeEvents(i0 *neptune.DescribeEventsInput) (r0 *neptune.DescribeEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEvents", i0)
	r0, _ = returns[0].(*neptune.DescribeEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) DescribeEventsPages(i0 *neptune.DescribeEventsInput, i1 func(*neptune.DescribeEventsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *NeptuneDouble) fakeDescribeEventsPages(in *neptune.DescribeEventsInput, pager func(*neptune.DescribeEventsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeEvents", paginators, in, pager)
}

func (d *NeptuneDouble) DescribeEventsPagesWithContext(i0 context.Context, i1 *neptune.DescribeEventsInput, i2 func(*neptune.DescribeEventsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *NeptuneDouble) fakeDescribeEventsPagesWithContext(ctx context.Context, in *neptune.DescribeEventsInput, pager func(*neptune.DescribeEventsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeEvents", paginators, ctx, in, pager, options...)
}

func (d *NeptuneDouble) DescribeEventsRequest(i0 *neptune.DescribeEventsInput) (r0 *request.Request, r1 *neptune.DescribeEventsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.DescribeEventsOutput)
	return
}

func (d *NeptuneDouble) DescribeEventsWithContext(i0 context.Context, i1 *neptune.DescribeEventsInput, i2 ...request.Option) (r0 *neptune.DescribeEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.DescribeEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeDescribeEventsWithContext(ctx context.Context, in *neptune.DescribeEventsInput, _ ...request.Option) (*neptune.DescribeEventsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEvents cancelled", ctx.Err())
	default:
		return d.DescribeEvents(in)
	}
}

func (d *NeptuneDouble) DescribeOrderableDBInstanceOptions(i0 *neptune.DescribeOrderableDBInstanceOptionsInput) (r0 *neptune.DescribeOrderableDBInstanceOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrderableDBInstanceOptions", i0)
	r0, _ = returns[0].(*neptune.DescribeOrderableDBInstanceOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) DescribeOrderableDBInstanceOptionsPages(i0 *neptune.DescribeOrderableDBInstanceOptionsInput, i1 func(*neptune.DescribeOrderableDBInstanceOptionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrderableDBInstanceOptionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *NeptuneDouble) fakeDescribeOrderableDBInstanceOptionsPages(in *neptune.DescribeOrderableDBInstanceOptionsInput, pager func(*neptune.DescribeOrderableDBInstanceOptionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeOrderableDBInstanceOptions", paginators, in, pager)
}

func (d *NeptuneDouble) DescribeOrderableDBInstanceOptionsPagesWithContext(i0 context.Context, i1 *neptune.DescribeOrderableDBInstanceOptionsInput, i2 func(*neptune.DescribeOrderableDBInstanceOptionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrderableDBInstanceOptionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *NeptuneDouble) fakeDescribeOrderableDBInstanceOptionsPagesWithContext(ctx context.Context, in *neptune.DescribeOrderableDBInstanceOptionsInput, pager func(*neptune.DescribeOrderableDBInstanceOptionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeOrderableDBInstanceOptions", paginators, ctx, in, pager, options...)
}

func (d *NeptuneDouble) DescribeOrderableDBInstanceOptionsRequest(i0 *neptune.DescribeOrderableDBInstanceOptionsInput) (r0 *request.Request, r1 *neptune.DescribeOrderableDBInstanceOptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrderableDBInstanceOptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.DescribeOrderableDBInstanceOptionsOutput)
	return
}

func (d *NeptuneDouble) DescribeOrderableDBInstanceOptionsWithContext(i0 context.Context, i1 *neptune.DescribeOrderableDBInstanceOptionsInput, i2 ...request.Option) (r0 *neptune.DescribeOrderableDBInstanceOptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOrderableDBInstanceOptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.DescribeOrderableDBInstanceOptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeDescribeOrderableDBInstanceOptionsWithContext(ctx context.Context, in *neptune.DescribeOrderableDBInstanceOptionsInput, _ ...request.Option) (*neptune.DescribeOrderableDBInstanceOptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeOrderableDBInstanceOptions cancelled", ctx.Err())
	default:
		return d.DescribeOrderableDBInstanceOptions(in)
	}
}

func (d *NeptuneDouble) DescribePendingMaintenanceActions(i0 *neptune.DescribePendingMaintenanceActionsInput) (r0 *neptune.DescribePendingMaintenanceActionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePendingMaintenanceActions", i0)
	r0, _ = returns[0].(*neptune.DescribePendingMaintenanceActionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) DescribePendingMaintenanceActionsRequest(i0 *neptune.DescribePendingMaintenanceActionsInput) (r0 *request.Request, r1 *neptune.DescribePendingMaintenanceActionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePendingMaintenanceActionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.DescribePendingMaintenanceActionsOutput)
	return
}

func (d *NeptuneDouble) DescribePendingMaintenanceActionsWithContext(i0 context.Context, i1 *neptune.DescribePendingMaintenanceActionsInput, i2 ...request.Option) (r0 *neptune.DescribePendingMaintenanceActionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePendingMaintenanceActionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.DescribePendingMaintenanceActionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeDescribePendingMaintenanceActionsWithContext(ctx context.Context, in *neptune.DescribePendingMaintenanceActionsInput, _ ...request.Option) (*neptune.DescribePendingMaintenanceActionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribePendingMaintenanceActions cancelled", ctx.Err())
	default:
		return d.DescribePendingMaintenanceActions(in)
	}
}

func (d *NeptuneDouble) DescribeValidDBInstanceModifications(i0 *neptune.DescribeValidDBInstanceModificationsInput) (r0 *neptune.DescribeValidDBInstanceModificationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeValidDBInstanceModifications", i0)
	r0, _ = returns[0].(*neptune.DescribeValidDBInstanceModificationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) DescribeValidDBInstanceModificationsRequest(i0 *neptune.DescribeValidDBInstanceModificationsInput) (r0 *request.Request, r1 *neptune.DescribeValidDBInstanceModificationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeValidDBInstanceModificationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.DescribeValidDBInstanceModificationsOutput)
	return
}

func (d *NeptuneDouble) DescribeValidDBInstanceModificationsWithContext(i0 context.Context, i1 *neptune.DescribeValidDBInstanceModificationsInput, i2 ...request.Option) (r0 *neptune.DescribeValidDBInstanceModificationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeValidDBInstanceModificationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.DescribeValidDBInstanceModificationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeDescribeValidDBInstanceModificationsWithContext(ctx context.Context, in *neptune.DescribeValidDBInstanceModificationsInput, _ ...request.Option) (*neptune.DescribeValidDBInstanceModificationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeValidDBInstanceModifications cancelled", ctx.Err())
	default:
		return d.DescribeValidDBInstanceModifications(in)
	}
}

func (d *NeptuneDouble) FailoverDBCluster(i0 *neptune.FailoverDBClusterInput) (r0 *neptune.FailoverDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("FailoverDBCluster", i0)
	r0, _ = returns[0].(*neptune.FailoverDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) FailoverDBClusterRequest(i0 *neptune.FailoverDBClusterInput) (r0 *request.Request, r1 *neptune.FailoverDBClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("FailoverDBClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.FailoverDBClusterOutput)
	return
}

func (d *NeptuneDouble) FailoverDBClusterWithContext(i0 context.Context, i1 *neptune.FailoverDBClusterInput, i2 ...request.Option) (r0 *neptune.FailoverDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("FailoverDBClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.FailoverDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeFailoverDBClusterWithContext(ctx context.Context, in *neptune.FailoverDBClusterInput, _ ...request.Option) (*neptune.FailoverDBClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "FailoverDBCluster cancelled", ctx.Err())
	default:
		return d.FailoverDBCluster(in)
	}
}

func (d *NeptuneDouble) ListTagsForResource(i0 *neptune.ListTagsForResourceInput) (r0 *neptune.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*neptune.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) ListTagsForResourceRequest(i0 *neptune.ListTagsForResourceInput) (r0 *request.Request, r1 *neptune.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.ListTagsForResourceOutput)
	return
}

func (d *NeptuneDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *neptune.ListTagsForResourceInput, i2 ...request.Option) (r0 *neptune.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *neptune.ListTagsForResourceInput, _ ...request.Option) (*neptune.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *NeptuneDouble) ModifyDBCluster(i0 *neptune.ModifyDBClusterInput) (r0 *neptune.ModifyDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBCluster", i0)
	r0, _ = returns[0].(*neptune.ModifyDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) ModifyDBClusterParameterGroup(i0 *neptune.ModifyDBClusterParameterGroupInput) (r0 *neptune.ResetDBClusterParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBClusterParameterGroup", i0)
	r0, _ = returns[0].(*neptune.ResetDBClusterParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) ModifyDBClusterParameterGroupRequest(i0 *neptune.ModifyDBClusterParameterGroupInput) (r0 *request.Request, r1 *neptune.ResetDBClusterParameterGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBClusterParameterGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.ResetDBClusterParameterGroupOutput)
	return
}

func (d *NeptuneDouble) ModifyDBClusterParameterGroupWithContext(i0 context.Context, i1 *neptune.ModifyDBClusterParameterGroupInput, i2 ...request.Option) (r0 *neptune.ResetDBClusterParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBClusterParameterGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.ResetDBClusterParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeModifyDBClusterParameterGroupWithContext(ctx context.Context, in *neptune.ModifyDBClusterParameterGroupInput, _ ...request.Option) (*neptune.ResetDBClusterParameterGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyDBClusterParameterGroup cancelled", ctx.Err())
	default:
		return d.ModifyDBClusterParameterGroup(in)
	}
}

func (d *NeptuneDouble) ModifyDBClusterRequest(i0 *neptune.ModifyDBClusterInput) (r0 *request.Request, r1 *neptune.ModifyDBClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.ModifyDBClusterOutput)
	return
}

func (d *NeptuneDouble) ModifyDBClusterSnapshotAttribute(i0 *neptune.ModifyDBClusterSnapshotAttributeInput) (r0 *neptune.ModifyDBClusterSnapshotAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBClusterSnapshotAttribute", i0)
	r0, _ = returns[0].(*neptune.ModifyDBClusterSnapshotAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) ModifyDBClusterSnapshotAttributeRequest(i0 *neptune.ModifyDBClusterSnapshotAttributeInput) (r0 *request.Request, r1 *neptune.ModifyDBClusterSnapshotAttributeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBClusterSnapshotAttributeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.ModifyDBClusterSnapshotAttributeOutput)
	return
}

func (d *NeptuneDouble) ModifyDBClusterSnapshotAttributeWithContext(i0 context.Context, i1 *neptune.ModifyDBClusterSnapshotAttributeInput, i2 ...request.Option) (r0 *neptune.ModifyDBClusterSnapshotAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBClusterSnapshotAttributeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.ModifyDBClusterSnapshotAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeModifyDBClusterSnapshotAttributeWithContext(ctx context.Context, in *neptune.ModifyDBClusterSnapshotAttributeInput, _ ...request.Option) (*neptune.ModifyDBClusterSnapshotAttributeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyDBClusterSnapshotAttribute cancelled", ctx.Err())
	default:
		return d.ModifyDBClusterSnapshotAttribute(in)
	}
}

func (d *NeptuneDouble) ModifyDBClusterWithContext(i0 context.Context, i1 *neptune.ModifyDBClusterInput, i2 ...request.Option) (r0 *neptune.ModifyDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.ModifyDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeModifyDBClusterWithContext(ctx context.Context, in *neptune.ModifyDBClusterInput, _ ...request.Option) (*neptune.ModifyDBClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyDBCluster cancelled", ctx.Err())
	default:
		return d.ModifyDBCluster(in)
	}
}

func (d *NeptuneDouble) ModifyDBInstance(i0 *neptune.ModifyDBInstanceInput) (r0 *neptune.ModifyDBInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBInstance", i0)
	r0, _ = returns[0].(*neptune.ModifyDBInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) ModifyDBInstanceRequest(i0 *neptune.ModifyDBInstanceInput) (r0 *request.Request, r1 *neptune.ModifyDBInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.ModifyDBInstanceOutput)
	return
}

func (d *NeptuneDouble) ModifyDBInstanceWithContext(i0 context.Context, i1 *neptune.ModifyDBInstanceInput, i2 ...request.Option) (r0 *neptune.ModifyDBInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.ModifyDBInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeModifyDBInstanceWithContext(ctx context.Context, in *neptune.ModifyDBInstanceInput, _ ...request.Option) (*neptune.ModifyDBInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyDBInstance cancelled", ctx.Err())
	default:
		return d.ModifyDBInstance(in)
	}
}

func (d *NeptuneDouble) ModifyDBParameterGroup(i0 *neptune.ModifyDBParameterGroupInput) (r0 *neptune.ResetDBParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBParameterGroup", i0)
	r0, _ = returns[0].(*neptune.ResetDBParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) ModifyDBParameterGroupRequest(i0 *neptune.ModifyDBParameterGroupInput) (r0 *request.Request, r1 *neptune.ResetDBParameterGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBParameterGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.ResetDBParameterGroupOutput)
	return
}

func (d *NeptuneDouble) ModifyDBParameterGroupWithContext(i0 context.Context, i1 *neptune.ModifyDBParameterGroupInput, i2 ...request.Option) (r0 *neptune.ResetDBParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBParameterGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.ResetDBParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeModifyDBParameterGroupWithContext(ctx context.Context, in *neptune.ModifyDBParameterGroupInput, _ ...request.Option) (*neptune.ResetDBParameterGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyDBParameterGroup cancelled", ctx.Err())
	default:
		return d.ModifyDBParameterGroup(in)
	}
}

func (d *NeptuneDouble) ModifyDBSubnetGroup(i0 *neptune.ModifyDBSubnetGroupInput) (r0 *neptune.ModifyDBSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBSubnetGroup", i0)
	r0, _ = returns[0].(*neptune.ModifyDBSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) ModifyDBSubnetGroupRequest(i0 *neptune.ModifyDBSubnetGroupInput) (r0 *request.Request, r1 *neptune.ModifyDBSubnetGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBSubnetGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.ModifyDBSubnetGroupOutput)
	return
}

func (d *NeptuneDouble) ModifyDBSubnetGroupWithContext(i0 context.Context, i1 *neptune.ModifyDBSubnetGroupInput, i2 ...request.Option) (r0 *neptune.ModifyDBSubnetGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDBSubnetGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.ModifyDBSubnetGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeModifyDBSubnetGroupWithContext(ctx context.Context, in *neptune.ModifyDBSubnetGroupInput, _ ...request.Option) (*neptune.ModifyDBSubnetGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyDBSubnetGroup cancelled", ctx.Err())
	default:
		return d.ModifyDBSubnetGroup(in)
	}
}

func (d *NeptuneDouble) ModifyEventSubscription(i0 *neptune.ModifyEventSubscriptionInput) (r0 *neptune.ModifyEventSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyEventSubscription", i0)
	r0, _ = returns[0].(*neptune.ModifyEventSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) ModifyEventSubscriptionRequest(i0 *neptune.ModifyEventSubscriptionInput) (r0 *request.Request, r1 *neptune.ModifyEventSubscriptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyEventSubscriptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.ModifyEventSubscriptionOutput)
	return
}

func (d *NeptuneDouble) ModifyEventSubscriptionWithContext(i0 context.Context, i1 *neptune.ModifyEventSubscriptionInput, i2 ...request.Option) (r0 *neptune.ModifyEventSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyEventSubscriptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.ModifyEventSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeModifyEventSubscriptionWithContext(ctx context.Context, in *neptune.ModifyEventSubscriptionInput, _ ...request.Option) (*neptune.ModifyEventSubscriptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyEventSubscription cancelled", ctx.Err())
	default:
		return d.ModifyEventSubscription(in)
	}
}

func (d *NeptuneDouble) PromoteReadReplicaDBCluster(i0 *neptune.PromoteReadReplicaDBClusterInput) (r0 *neptune.PromoteReadReplicaDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PromoteReadReplicaDBCluster", i0)
	r0, _ = returns[0].(*neptune.PromoteReadReplicaDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) PromoteReadReplicaDBClusterRequest(i0 *neptune.PromoteReadReplicaDBClusterInput) (r0 *request.Request, r1 *neptune.PromoteReadReplicaDBClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PromoteReadReplicaDBClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.PromoteReadReplicaDBClusterOutput)
	return
}

func (d *NeptuneDouble) PromoteReadReplicaDBClusterWithContext(i0 context.Context, i1 *neptune.PromoteReadReplicaDBClusterInput, i2 ...request.Option) (r0 *neptune.PromoteReadReplicaDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PromoteReadReplicaDBClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.PromoteReadReplicaDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakePromoteReadReplicaDBClusterWithContext(ctx context.Context, in *neptune.PromoteReadReplicaDBClusterInput, _ ...request.Option) (*neptune.PromoteReadReplicaDBClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PromoteReadReplicaDBCluster cancelled", ctx.Err())
	default:
		return d.PromoteReadReplicaDBCluster(in)
	}
}

func (d *NeptuneDouble) RebootDBInstance(i0 *neptune.RebootDBInstanceInput) (r0 *neptune.RebootDBInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebootDBInstance", i0)
	r0, _ = returns[0].(*neptune.RebootDBInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) RebootDBInstanceRequest(i0 *neptune.RebootDBInstanceInput) (r0 *request.Request, r1 *neptune.RebootDBInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebootDBInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.RebootDBInstanceOutput)
	return
}

func (d *NeptuneDouble) RebootDBInstanceWithContext(i0 context.Context, i1 *neptune.RebootDBInstanceInput, i2 ...request.Option) (r0 *neptune.RebootDBInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebootDBInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.RebootDBInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeRebootDBInstanceWithContext(ctx context.Context, in *neptune.RebootDBInstanceInput, _ ...request.Option) (*neptune.RebootDBInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RebootDBInstance cancelled", ctx.Err())
	default:
		return d.RebootDBInstance(in)
	}
}

func (d *NeptuneDouble) RemoveRoleFromDBCluster(i0 *neptune.RemoveRoleFromDBClusterInput) (r0 *neptune.RemoveRoleFromDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveRoleFromDBCluster", i0)
	r0, _ = returns[0].(*neptune.RemoveRoleFromDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) RemoveRoleFromDBClusterRequest(i0 *neptune.RemoveRoleFromDBClusterInput) (r0 *request.Request, r1 *neptune.RemoveRoleFromDBClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveRoleFromDBClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.RemoveRoleFromDBClusterOutput)
	return
}

func (d *NeptuneDouble) RemoveRoleFromDBClusterWithContext(i0 context.Context, i1 *neptune.RemoveRoleFromDBClusterInput, i2 ...request.Option) (r0 *neptune.RemoveRoleFromDBClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveRoleFromDBClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.RemoveRoleFromDBClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeRemoveRoleFromDBClusterWithContext(ctx context.Context, in *neptune.RemoveRoleFromDBClusterInput, _ ...request.Option) (*neptune.RemoveRoleFromDBClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveRoleFromDBCluster cancelled", ctx.Err())
	default:
		return d.RemoveRoleFromDBCluster(in)
	}
}

func (d *NeptuneDouble) RemoveSourceIdentifierFromSubscription(i0 *neptune.RemoveSourceIdentifierFromSubscriptionInput) (r0 *neptune.RemoveSourceIdentifierFromSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveSourceIdentifierFromSubscription", i0)
	r0, _ = returns[0].(*neptune.RemoveSourceIdentifierFromSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) RemoveSourceIdentifierFromSubscriptionRequest(i0 *neptune.RemoveSourceIdentifierFromSubscriptionInput) (r0 *request.Request, r1 *neptune.RemoveSourceIdentifierFromSubscriptionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveSourceIdentifierFromSubscriptionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.RemoveSourceIdentifierFromSubscriptionOutput)
	return
}

func (d *NeptuneDouble) RemoveSourceIdentifierFromSubscriptionWithContext(i0 context.Context, i1 *neptune.RemoveSourceIdentifierFromSubscriptionInput, i2 ...request.Option) (r0 *neptune.RemoveSourceIdentifierFromSubscriptionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveSourceIdentifierFromSubscriptionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.RemoveSourceIdentifierFromSubscriptionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeRemoveSourceIdentifierFromSubscriptionWithContext(ctx context.Context, in *neptune.RemoveSourceIdentifierFromSubscriptionInput, _ ...request.Option) (*neptune.RemoveSourceIdentifierFromSubscriptionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveSourceIdentifierFromSubscription cancelled", ctx.Err())
	default:
		return d.RemoveSourceIdentifierFromSubscription(in)
	}
}

func (d *NeptuneDouble) RemoveTagsFromResource(i0 *neptune.RemoveTagsFromResourceInput) (r0 *neptune.RemoveTagsFromResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromResource", i0)
	r0, _ = returns[0].(*neptune.RemoveTagsFromResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) RemoveTagsFromResourceRequest(i0 *neptune.RemoveTagsFromResourceInput) (r0 *request.Request, r1 *neptune.RemoveTagsFromResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.RemoveTagsFromResourceOutput)
	return
}

func (d *NeptuneDouble) RemoveTagsFromResourceWithContext(i0 context.Context, i1 *neptune.RemoveTagsFromResourceInput, i2 ...request.Option) (r0 *neptune.RemoveTagsFromResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.RemoveTagsFromResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeRemoveTagsFromResourceWithContext(ctx context.Context, in *neptune.RemoveTagsFromResourceInput, _ ...request.Option) (*neptune.RemoveTagsFromResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveTagsFromResource cancelled", ctx.Err())
	default:
		return d.RemoveTagsFromResource(in)
	}
}

func (d *NeptuneDouble) ResetDBClusterParameterGroup(i0 *neptune.ResetDBClusterParameterGroupInput) (r0 *neptune.ResetDBClusterParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetDBClusterParameterGroup", i0)
	r0, _ = returns[0].(*neptune.ResetDBClusterParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) ResetDBClusterParameterGroupRequest(i0 *neptune.ResetDBClusterParameterGroupInput) (r0 *request.Request, r1 *neptune.ResetDBClusterParameterGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetDBClusterParameterGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.ResetDBClusterParameterGroupOutput)
	return
}

func (d *NeptuneDouble) ResetDBClusterParameterGroupWithContext(i0 context.Context, i1 *neptune.ResetDBClusterParameterGroupInput, i2 ...request.Option) (r0 *neptune.ResetDBClusterParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetDBClusterParameterGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.ResetDBClusterParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeResetDBClusterParameterGroupWithContext(ctx context.Context, in *neptune.ResetDBClusterParameterGroupInput, _ ...request.Option) (*neptune.ResetDBClusterParameterGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ResetDBClusterParameterGroup cancelled", ctx.Err())
	default:
		return d.ResetDBClusterParameterGroup(in)
	}
}

func (d *NeptuneDouble) ResetDBParameterGroup(i0 *neptune.ResetDBParameterGroupInput) (r0 *neptune.ResetDBParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetDBParameterGroup", i0)
	r0, _ = returns[0].(*neptune.ResetDBParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) ResetDBParameterGroupRequest(i0 *neptune.ResetDBParameterGroupInput) (r0 *request.Request, r1 *neptune.ResetDBParameterGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetDBParameterGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.ResetDBParameterGroupOutput)
	return
}

func (d *NeptuneDouble) ResetDBParameterGroupWithContext(i0 context.Context, i1 *neptune.ResetDBParameterGroupInput, i2 ...request.Option) (r0 *neptune.ResetDBParameterGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetDBParameterGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.ResetDBParameterGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeResetDBParameterGroupWithContext(ctx context.Context, in *neptune.ResetDBParameterGroupInput, _ ...request.Option) (*neptune.ResetDBParameterGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ResetDBParameterGroup cancelled", ctx.Err())
	default:
		return d.ResetDBParameterGroup(in)
	}
}

func (d *NeptuneDouble) RestoreDBClusterFromSnapshot(i0 *neptune.RestoreDBClusterFromSnapshotInput) (r0 *neptune.RestoreDBClusterFromSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreDBClusterFromSnapshot", i0)
	r0, _ = returns[0].(*neptune.RestoreDBClusterFromSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) RestoreDBClusterFromSnapshotRequest(i0 *neptune.RestoreDBClusterFromSnapshotInput) (r0 *request.Request, r1 *neptune.RestoreDBClusterFromSnapshotOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreDBClusterFromSnapshotRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.RestoreDBClusterFromSnapshotOutput)
	return
}

func (d *NeptuneDouble) RestoreDBClusterFromSnapshotWithContext(i0 context.Context, i1 *neptune.RestoreDBClusterFromSnapshotInput, i2 ...request.Option) (r0 *neptune.RestoreDBClusterFromSnapshotOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreDBClusterFromSnapshotWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.RestoreDBClusterFromSnapshotOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeRestoreDBClusterFromSnapshotWithContext(ctx context.Context, in *neptune.RestoreDBClusterFromSnapshotInput, _ ...request.Option) (*neptune.RestoreDBClusterFromSnapshotOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RestoreDBClusterFromSnapshot cancelled", ctx.Err())
	default:
		return d.RestoreDBClusterFromSnapshot(in)
	}
}

func (d *NeptuneDouble) RestoreDBClusterToPointInTime(i0 *neptune.RestoreDBClusterToPointInTimeInput) (r0 *neptune.RestoreDBClusterToPointInTimeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreDBClusterToPointInTime", i0)
	r0, _ = returns[0].(*neptune.RestoreDBClusterToPointInTimeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) RestoreDBClusterToPointInTimeRequest(i0 *neptune.RestoreDBClusterToPointInTimeInput) (r0 *request.Request, r1 *neptune.RestoreDBClusterToPointInTimeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreDBClusterToPointInTimeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*neptune.RestoreDBClusterToPointInTimeOutput)
	return
}

func (d *NeptuneDouble) RestoreDBClusterToPointInTimeWithContext(i0 context.Context, i1 *neptune.RestoreDBClusterToPointInTimeInput, i2 ...request.Option) (r0 *neptune.RestoreDBClusterToPointInTimeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreDBClusterToPointInTimeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*neptune.RestoreDBClusterToPointInTimeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *NeptuneDouble) fakeRestoreDBClusterToPointInTimeWithContext(ctx context.Context, in *neptune.RestoreDBClusterToPointInTimeInput, _ ...request.Option) (*neptune.RestoreDBClusterToPointInTimeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RestoreDBClusterToPointInTime cancelled", ctx.Err())
	default:
		return d.RestoreDBClusterToPointInTime(in)
	}
}

func (d *NeptuneDouble) WaitUntilDBInstanceAvailable(i0 *neptune.DescribeDBInstancesInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilDBInstanceAvailable", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *NeptuneDouble) fakeWaitUntilDBInstanceAvailable(in *neptune.DescribeDBInstancesInput) error {
	return d.WaitUntil("DBInstanceAvailable", waiters, in)
}

func (d *NeptuneDouble) WaitUntilDBInstanceAvailableWithContext(i0 context.Context, i1 *neptune.DescribeDBInstancesInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilDBInstanceAvailableWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *NeptuneDouble) fakeWaitUntilDBInstanceAvailableWithContext(ctx context.Context, in *neptune.DescribeDBInstancesInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("DBInstanceAvailable", waiters, ctx, in, waitOption...)
}

func (d *NeptuneDouble) WaitUntilDBInstanceDeleted(i0 *neptune.DescribeDBInstancesInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilDBInstanceDeleted", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *NeptuneDouble) fakeWaitUntilDBInstanceDeleted(in *neptune.DescribeDBInstancesInput) error {
	return d.WaitUntil("DBInstanceDeleted", waiters, in)
}

func (d *NeptuneDouble) WaitUntilDBInstanceDeletedWithContext(i0 context.Context, i1 *neptune.DescribeDBInstancesInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilDBInstanceDeletedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *NeptuneDouble) fakeWaitUntilDBInstanceDeletedWithContext(ctx context.Context, in *neptune.DescribeDBInstancesInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("DBInstanceDeleted", waiters, ctx, in, waitOption...)
}
