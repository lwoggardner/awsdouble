// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:13:09+11:00

// Package inspectordouble provides a TestDouble implementation of inspectoriface.InspectorAPI
package inspectordouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/inspector"
	"github.com/aws/aws-sdk-go/service/inspector/inspectoriface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// InspectorDouble is TestDouble for inspectoriface.InspectorAPI
type InspectorDouble struct {
	inspectoriface.InspectorAPI
	*awsdouble.AWSTestDouble
}

// Constructor for InspectorDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *InspectorDouble {
	result := &InspectorDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*inspectoriface.InspectorAPI)(nil), configurators...)
	return result
}

func (d *InspectorDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *InspectorDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AddAttributesToFindingsWithContext":
		return m.Fake(d.fakeAddAttributesToFindingsWithContext)

	case "CreateAssessmentTargetWithContext":
		return m.Fake(d.fakeCreateAssessmentTargetWithContext)

	case "CreateAssessmentTemplateWithContext":
		return m.Fake(d.fakeCreateAssessmentTemplateWithContext)

	case "CreateExclusionsPreviewWithContext":
		return m.Fake(d.fakeCreateExclusionsPreviewWithContext)

	case "CreateResourceGroupWithContext":
		return m.Fake(d.fakeCreateResourceGroupWithContext)

	case "DeleteAssessmentRunWithContext":
		return m.Fake(d.fakeDeleteAssessmentRunWithContext)

	case "DeleteAssessmentTargetWithContext":
		return m.Fake(d.fakeDeleteAssessmentTargetWithContext)

	case "DeleteAssessmentTemplateWithContext":
		return m.Fake(d.fakeDeleteAssessmentTemplateWithContext)

	case "DescribeAssessmentRunsWithContext":
		return m.Fake(d.fakeDescribeAssessmentRunsWithContext)

	case "DescribeAssessmentTargetsWithContext":
		return m.Fake(d.fakeDescribeAssessmentTargetsWithContext)

	case "DescribeAssessmentTemplatesWithContext":
		return m.Fake(d.fakeDescribeAssessmentTemplatesWithContext)

	case "DescribeCrossAccountAccessRoleWithContext":
		return m.Fake(d.fakeDescribeCrossAccountAccessRoleWithContext)

	case "DescribeExclusionsWithContext":
		return m.Fake(d.fakeDescribeExclusionsWithContext)

	case "DescribeFindingsWithContext":
		return m.Fake(d.fakeDescribeFindingsWithContext)

	case "DescribeResourceGroupsWithContext":
		return m.Fake(d.fakeDescribeResourceGroupsWithContext)

	case "DescribeRulesPackagesWithContext":
		return m.Fake(d.fakeDescribeRulesPackagesWithContext)

	case "GetAssessmentReportWithContext":
		return m.Fake(d.fakeGetAssessmentReportWithContext)

	case "GetExclusionsPreviewPages":
		return m.Fake(d.fakeGetExclusionsPreviewPages)

	case "GetExclusionsPreviewPagesWithContext":
		return m.Fake(d.fakeGetExclusionsPreviewPagesWithContext)

	case "GetExclusionsPreviewWithContext":
		return m.Fake(d.fakeGetExclusionsPreviewWithContext)

	case "GetTelemetryMetadataWithContext":
		return m.Fake(d.fakeGetTelemetryMetadataWithContext)

	case "ListAssessmentRunAgentsPages":
		return m.Fake(d.fakeListAssessmentRunAgentsPages)

	case "ListAssessmentRunAgentsPagesWithContext":
		return m.Fake(d.fakeListAssessmentRunAgentsPagesWithContext)

	case "ListAssessmentRunAgentsWithContext":
		return m.Fake(d.fakeListAssessmentRunAgentsWithContext)

	case "ListAssessmentRunsPages":
		return m.Fake(d.fakeListAssessmentRunsPages)

	case "ListAssessmentRunsPagesWithContext":
		return m.Fake(d.fakeListAssessmentRunsPagesWithContext)

	case "ListAssessmentRunsWithContext":
		return m.Fake(d.fakeListAssessmentRunsWithContext)

	case "ListAssessmentTargetsPages":
		return m.Fake(d.fakeListAssessmentTargetsPages)

	case "ListAssessmentTargetsPagesWithContext":
		return m.Fake(d.fakeListAssessmentTargetsPagesWithContext)

	case "ListAssessmentTargetsWithContext":
		return m.Fake(d.fakeListAssessmentTargetsWithContext)

	case "ListAssessmentTemplatesPages":
		return m.Fake(d.fakeListAssessmentTemplatesPages)

	case "ListAssessmentTemplatesPagesWithContext":
		return m.Fake(d.fakeListAssessmentTemplatesPagesWithContext)

	case "ListAssessmentTemplatesWithContext":
		return m.Fake(d.fakeListAssessmentTemplatesWithContext)

	case "ListEventSubscriptionsPages":
		return m.Fake(d.fakeListEventSubscriptionsPages)

	case "ListEventSubscriptionsPagesWithContext":
		return m.Fake(d.fakeListEventSubscriptionsPagesWithContext)

	case "ListEventSubscriptionsWithContext":
		return m.Fake(d.fakeListEventSubscriptionsWithContext)

	case "ListExclusionsPages":
		return m.Fake(d.fakeListExclusionsPages)

	case "ListExclusionsPagesWithContext":
		return m.Fake(d.fakeListExclusionsPagesWithContext)

	case "ListExclusionsWithContext":
		return m.Fake(d.fakeListExclusionsWithContext)

	case "ListFindingsPages":
		return m.Fake(d.fakeListFindingsPages)

	case "ListFindingsPagesWithContext":
		return m.Fake(d.fakeListFindingsPagesWithContext)

	case "ListFindingsWithContext":
		return m.Fake(d.fakeListFindingsWithContext)

	case "ListRulesPackagesPages":
		return m.Fake(d.fakeListRulesPackagesPages)

	case "ListRulesPackagesPagesWithContext":
		return m.Fake(d.fakeListRulesPackagesPagesWithContext)

	case "ListRulesPackagesWithContext":
		return m.Fake(d.fakeListRulesPackagesWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "PreviewAgentsPages":
		return m.Fake(d.fakePreviewAgentsPages)

	case "PreviewAgentsPagesWithContext":
		return m.Fake(d.fakePreviewAgentsPagesWithContext)

	case "PreviewAgentsWithContext":
		return m.Fake(d.fakePreviewAgentsWithContext)

	case "RegisterCrossAccountAccessRoleWithContext":
		return m.Fake(d.fakeRegisterCrossAccountAccessRoleWithContext)

	case "RemoveAttributesFromFindingsWithContext":
		return m.Fake(d.fakeRemoveAttributesFromFindingsWithContext)

	case "SetTagsForResourceWithContext":
		return m.Fake(d.fakeSetTagsForResourceWithContext)

	case "StartAssessmentRunWithContext":
		return m.Fake(d.fakeStartAssessmentRunWithContext)

	case "StopAssessmentRunWithContext":
		return m.Fake(d.fakeStopAssessmentRunWithContext)

	case "SubscribeToEventWithContext":
		return m.Fake(d.fakeSubscribeToEventWithContext)

	case "UnsubscribeFromEventWithContext":
		return m.Fake(d.fakeUnsubscribeFromEventWithContext)

	case "UpdateAssessmentTargetWithContext":
		return m.Fake(d.fakeUpdateAssessmentTargetWithContext)

	default:
		return nil
	}
}

func (d *InspectorDouble) AddAttributesToFindings(i0 *inspector.AddAttributesToFindingsInput) (r0 *inspector.AddAttributesToFindingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddAttributesToFindings", i0)
	r0, _ = returns[0].(*inspector.AddAttributesToFindingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) AddAttributesToFindingsRequest(i0 *inspector.AddAttributesToFindingsInput) (r0 *request.Request, r1 *inspector.AddAttributesToFindingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddAttributesToFindingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*inspector.AddAttributesToFindingsOutput)
	return
}

func (d *InspectorDouble) AddAttributesToFindingsWithContext(i0 context.Context, i1 *inspector.AddAttributesToFindingsInput, i2 ...request.Option) (r0 *inspector.AddAttributesToFindingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddAttributesToFindingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*inspector.AddAttributesToFindingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) fakeAddAttributesToFindingsWithContext(ctx context.Context, in *inspector.AddAttributesToFindingsInput, _ ...request.Option) (*inspector.AddAttributesToFindingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddAttributesToFindings cancelled", ctx.Err())
	default:
		return d.AddAttributesToFindings(in)
	}
}

func (d *InspectorDouble) CreateAssessmentTarget(i0 *inspector.CreateAssessmentTargetInput) (r0 *inspector.CreateAssessmentTargetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAssessmentTarget", i0)
	r0, _ = returns[0].(*inspector.CreateAssessmentTargetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) CreateAssessmentTargetRequest(i0 *inspector.CreateAssessmentTargetInput) (r0 *request.Request, r1 *inspector.CreateAssessmentTargetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAssessmentTargetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*inspector.CreateAssessmentTargetOutput)
	return
}

func (d *InspectorDouble) CreateAssessmentTargetWithContext(i0 context.Context, i1 *inspector.CreateAssessmentTargetInput, i2 ...request.Option) (r0 *inspector.CreateAssessmentTargetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAssessmentTargetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*inspector.CreateAssessmentTargetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) fakeCreateAssessmentTargetWithContext(ctx context.Context, in *inspector.CreateAssessmentTargetInput, _ ...request.Option) (*inspector.CreateAssessmentTargetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateAssessmentTarget cancelled", ctx.Err())
	default:
		return d.CreateAssessmentTarget(in)
	}
}

func (d *InspectorDouble) CreateAssessmentTemplate(i0 *inspector.CreateAssessmentTemplateInput) (r0 *inspector.CreateAssessmentTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAssessmentTemplate", i0)
	r0, _ = returns[0].(*inspector.CreateAssessmentTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) CreateAssessmentTemplateRequest(i0 *inspector.CreateAssessmentTemplateInput) (r0 *request.Request, r1 *inspector.CreateAssessmentTemplateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAssessmentTemplateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*inspector.CreateAssessmentTemplateOutput)
	return
}

func (d *InspectorDouble) CreateAssessmentTemplateWithContext(i0 context.Context, i1 *inspector.CreateAssessmentTemplateInput, i2 ...request.Option) (r0 *inspector.CreateAssessmentTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAssessmentTemplateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*inspector.CreateAssessmentTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) fakeCreateAssessmentTemplateWithContext(ctx context.Context, in *inspector.CreateAssessmentTemplateInput, _ ...request.Option) (*inspector.CreateAssessmentTemplateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateAssessmentTemplate cancelled", ctx.Err())
	default:
		return d.CreateAssessmentTemplate(in)
	}
}

func (d *InspectorDouble) CreateExclusionsPreview(i0 *inspector.CreateExclusionsPreviewInput) (r0 *inspector.CreateExclusionsPreviewOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateExclusionsPreview", i0)
	r0, _ = returns[0].(*inspector.CreateExclusionsPreviewOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) CreateExclusionsPreviewRequest(i0 *inspector.CreateExclusionsPreviewInput) (r0 *request.Request, r1 *inspector.CreateExclusionsPreviewOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateExclusionsPreviewRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*inspector.CreateExclusionsPreviewOutput)
	return
}

func (d *InspectorDouble) CreateExclusionsPreviewWithContext(i0 context.Context, i1 *inspector.CreateExclusionsPreviewInput, i2 ...request.Option) (r0 *inspector.CreateExclusionsPreviewOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateExclusionsPreviewWithContext", i0, i1, i2)
	r0, _ = returns[0].(*inspector.CreateExclusionsPreviewOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) fakeCreateExclusionsPreviewWithContext(ctx context.Context, in *inspector.CreateExclusionsPreviewInput, _ ...request.Option) (*inspector.CreateExclusionsPreviewOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateExclusionsPreview cancelled", ctx.Err())
	default:
		return d.CreateExclusionsPreview(in)
	}
}

func (d *InspectorDouble) CreateResourceGroup(i0 *inspector.CreateResourceGroupInput) (r0 *inspector.CreateResourceGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateResourceGroup", i0)
	r0, _ = returns[0].(*inspector.CreateResourceGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) CreateResourceGroupRequest(i0 *inspector.CreateResourceGroupInput) (r0 *request.Request, r1 *inspector.CreateResourceGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateResourceGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*inspector.CreateResourceGroupOutput)
	return
}

func (d *InspectorDouble) CreateResourceGroupWithContext(i0 context.Context, i1 *inspector.CreateResourceGroupInput, i2 ...request.Option) (r0 *inspector.CreateResourceGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateResourceGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*inspector.CreateResourceGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) fakeCreateResourceGroupWithContext(ctx context.Context, in *inspector.CreateResourceGroupInput, _ ...request.Option) (*inspector.CreateResourceGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateResourceGroup cancelled", ctx.Err())
	default:
		return d.CreateResourceGroup(in)
	}
}

func (d *InspectorDouble) DeleteAssessmentRun(i0 *inspector.DeleteAssessmentRunInput) (r0 *inspector.DeleteAssessmentRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAssessmentRun", i0)
	r0, _ = returns[0].(*inspector.DeleteAssessmentRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) DeleteAssessmentRunRequest(i0 *inspector.DeleteAssessmentRunInput) (r0 *request.Request, r1 *inspector.DeleteAssessmentRunOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAssessmentRunRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*inspector.DeleteAssessmentRunOutput)
	return
}

func (d *InspectorDouble) DeleteAssessmentRunWithContext(i0 context.Context, i1 *inspector.DeleteAssessmentRunInput, i2 ...request.Option) (r0 *inspector.DeleteAssessmentRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAssessmentRunWithContext", i0, i1, i2)
	r0, _ = returns[0].(*inspector.DeleteAssessmentRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) fakeDeleteAssessmentRunWithContext(ctx context.Context, in *inspector.DeleteAssessmentRunInput, _ ...request.Option) (*inspector.DeleteAssessmentRunOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteAssessmentRun cancelled", ctx.Err())
	default:
		return d.DeleteAssessmentRun(in)
	}
}

func (d *InspectorDouble) DeleteAssessmentTarget(i0 *inspector.DeleteAssessmentTargetInput) (r0 *inspector.DeleteAssessmentTargetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAssessmentTarget", i0)
	r0, _ = returns[0].(*inspector.DeleteAssessmentTargetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) DeleteAssessmentTargetRequest(i0 *inspector.DeleteAssessmentTargetInput) (r0 *request.Request, r1 *inspector.DeleteAssessmentTargetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAssessmentTargetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*inspector.DeleteAssessmentTargetOutput)
	return
}

func (d *InspectorDouble) DeleteAssessmentTargetWithContext(i0 context.Context, i1 *inspector.DeleteAssessmentTargetInput, i2 ...request.Option) (r0 *inspector.DeleteAssessmentTargetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAssessmentTargetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*inspector.DeleteAssessmentTargetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) fakeDeleteAssessmentTargetWithContext(ctx context.Context, in *inspector.DeleteAssessmentTargetInput, _ ...request.Option) (*inspector.DeleteAssessmentTargetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteAssessmentTarget cancelled", ctx.Err())
	default:
		return d.DeleteAssessmentTarget(in)
	}
}

func (d *InspectorDouble) DeleteAssessmentTemplate(i0 *inspector.DeleteAssessmentTemplateInput) (r0 *inspector.DeleteAssessmentTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAssessmentTemplate", i0)
	r0, _ = returns[0].(*inspector.DeleteAssessmentTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) DeleteAssessmentTemplateRequest(i0 *inspector.DeleteAssessmentTemplateInput) (r0 *request.Request, r1 *inspector.DeleteAssessmentTemplateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAssessmentTemplateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*inspector.DeleteAssessmentTemplateOutput)
	return
}

func (d *InspectorDouble) DeleteAssessmentTemplateWithContext(i0 context.Context, i1 *inspector.DeleteAssessmentTemplateInput, i2 ...request.Option) (r0 *inspector.DeleteAssessmentTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAssessmentTemplateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*inspector.DeleteAssessmentTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) fakeDeleteAssessmentTemplateWithContext(ctx context.Context, in *inspector.DeleteAssessmentTemplateInput, _ ...request.Option) (*inspector.DeleteAssessmentTemplateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteAssessmentTemplate cancelled", ctx.Err())
	default:
		return d.DeleteAssessmentTemplate(in)
	}
}

func (d *InspectorDouble) DescribeAssessmentRuns(i0 *inspector.DescribeAssessmentRunsInput) (r0 *inspector.DescribeAssessmentRunsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAssessmentRuns", i0)
	r0, _ = returns[0].(*inspector.DescribeAssessmentRunsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) DescribeAssessmentRunsRequest(i0 *inspector.DescribeAssessmentRunsInput) (r0 *request.Request, r1 *inspector.DescribeAssessmentRunsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAssessmentRunsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*inspector.DescribeAssessmentRunsOutput)
	return
}

func (d *InspectorDouble) DescribeAssessmentRunsWithContext(i0 context.Context, i1 *inspector.DescribeAssessmentRunsInput, i2 ...request.Option) (r0 *inspector.DescribeAssessmentRunsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAssessmentRunsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*inspector.DescribeAssessmentRunsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) fakeDescribeAssessmentRunsWithContext(ctx context.Context, in *inspector.DescribeAssessmentRunsInput, _ ...request.Option) (*inspector.DescribeAssessmentRunsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAssessmentRuns cancelled", ctx.Err())
	default:
		return d.DescribeAssessmentRuns(in)
	}
}

func (d *InspectorDouble) DescribeAssessmentTargets(i0 *inspector.DescribeAssessmentTargetsInput) (r0 *inspector.DescribeAssessmentTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAssessmentTargets", i0)
	r0, _ = returns[0].(*inspector.DescribeAssessmentTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) DescribeAssessmentTargetsRequest(i0 *inspector.DescribeAssessmentTargetsInput) (r0 *request.Request, r1 *inspector.DescribeAssessmentTargetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAssessmentTargetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*inspector.DescribeAssessmentTargetsOutput)
	return
}

func (d *InspectorDouble) DescribeAssessmentTargetsWithContext(i0 context.Context, i1 *inspector.DescribeAssessmentTargetsInput, i2 ...request.Option) (r0 *inspector.DescribeAssessmentTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAssessmentTargetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*inspector.DescribeAssessmentTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) fakeDescribeAssessmentTargetsWithContext(ctx context.Context, in *inspector.DescribeAssessmentTargetsInput, _ ...request.Option) (*inspector.DescribeAssessmentTargetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAssessmentTargets cancelled", ctx.Err())
	default:
		return d.DescribeAssessmentTargets(in)
	}
}

func (d *InspectorDouble) DescribeAssessmentTemplates(i0 *inspector.DescribeAssessmentTemplatesInput) (r0 *inspector.DescribeAssessmentTemplatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAssessmentTemplates", i0)
	r0, _ = returns[0].(*inspector.DescribeAssessmentTemplatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) DescribeAssessmentTemplatesRequest(i0 *inspector.DescribeAssessmentTemplatesInput) (r0 *request.Request, r1 *inspector.DescribeAssessmentTemplatesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAssessmentTemplatesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*inspector.DescribeAssessmentTemplatesOutput)
	return
}

func (d *InspectorDouble) DescribeAssessmentTemplatesWithContext(i0 context.Context, i1 *inspector.DescribeAssessmentTemplatesInput, i2 ...request.Option) (r0 *inspector.DescribeAssessmentTemplatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAssessmentTemplatesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*inspector.DescribeAssessmentTemplatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) fakeDescribeAssessmentTemplatesWithContext(ctx context.Context, in *inspector.DescribeAssessmentTemplatesInput, _ ...request.Option) (*inspector.DescribeAssessmentTemplatesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAssessmentTemplates cancelled", ctx.Err())
	default:
		return d.DescribeAssessmentTemplates(in)
	}
}

func (d *InspectorDouble) DescribeCrossAccountAccessRole(i0 *inspector.DescribeCrossAccountAccessRoleInput) (r0 *inspector.DescribeCrossAccountAccessRoleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCrossAccountAccessRole", i0)
	r0, _ = returns[0].(*inspector.DescribeCrossAccountAccessRoleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) DescribeCrossAccountAccessRoleRequest(i0 *inspector.DescribeCrossAccountAccessRoleInput) (r0 *request.Request, r1 *inspector.DescribeCrossAccountAccessRoleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCrossAccountAccessRoleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*inspector.DescribeCrossAccountAccessRoleOutput)
	return
}

func (d *InspectorDouble) DescribeCrossAccountAccessRoleWithContext(i0 context.Context, i1 *inspector.DescribeCrossAccountAccessRoleInput, i2 ...request.Option) (r0 *inspector.DescribeCrossAccountAccessRoleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCrossAccountAccessRoleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*inspector.DescribeCrossAccountAccessRoleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) fakeDescribeCrossAccountAccessRoleWithContext(ctx context.Context, in *inspector.DescribeCrossAccountAccessRoleInput, _ ...request.Option) (*inspector.DescribeCrossAccountAccessRoleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeCrossAccountAccessRole cancelled", ctx.Err())
	default:
		return d.DescribeCrossAccountAccessRole(in)
	}
}

func (d *InspectorDouble) DescribeExclusions(i0 *inspector.DescribeExclusionsInput) (r0 *inspector.DescribeExclusionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeExclusions", i0)
	r0, _ = returns[0].(*inspector.DescribeExclusionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) DescribeExclusionsRequest(i0 *inspector.DescribeExclusionsInput) (r0 *request.Request, r1 *inspector.DescribeExclusionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeExclusionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*inspector.DescribeExclusionsOutput)
	return
}

func (d *InspectorDouble) DescribeExclusionsWithContext(i0 context.Context, i1 *inspector.DescribeExclusionsInput, i2 ...request.Option) (r0 *inspector.DescribeExclusionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeExclusionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*inspector.DescribeExclusionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) fakeDescribeExclusionsWithContext(ctx context.Context, in *inspector.DescribeExclusionsInput, _ ...request.Option) (*inspector.DescribeExclusionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeExclusions cancelled", ctx.Err())
	default:
		return d.DescribeExclusions(in)
	}
}

func (d *InspectorDouble) DescribeFindings(i0 *inspector.DescribeFindingsInput) (r0 *inspector.DescribeFindingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFindings", i0)
	r0, _ = returns[0].(*inspector.DescribeFindingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) DescribeFindingsRequest(i0 *inspector.DescribeFindingsInput) (r0 *request.Request, r1 *inspector.DescribeFindingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFindingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*inspector.DescribeFindingsOutput)
	return
}

func (d *InspectorDouble) DescribeFindingsWithContext(i0 context.Context, i1 *inspector.DescribeFindingsInput, i2 ...request.Option) (r0 *inspector.DescribeFindingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFindingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*inspector.DescribeFindingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) fakeDescribeFindingsWithContext(ctx context.Context, in *inspector.DescribeFindingsInput, _ ...request.Option) (*inspector.DescribeFindingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeFindings cancelled", ctx.Err())
	default:
		return d.DescribeFindings(in)
	}
}

func (d *InspectorDouble) DescribeResourceGroups(i0 *inspector.DescribeResourceGroupsInput) (r0 *inspector.DescribeResourceGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeResourceGroups", i0)
	r0, _ = returns[0].(*inspector.DescribeResourceGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) DescribeResourceGroupsRequest(i0 *inspector.DescribeResourceGroupsInput) (r0 *request.Request, r1 *inspector.DescribeResourceGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeResourceGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*inspector.DescribeResourceGroupsOutput)
	return
}

func (d *InspectorDouble) DescribeResourceGroupsWithContext(i0 context.Context, i1 *inspector.DescribeResourceGroupsInput, i2 ...request.Option) (r0 *inspector.DescribeResourceGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeResourceGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*inspector.DescribeResourceGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) fakeDescribeResourceGroupsWithContext(ctx context.Context, in *inspector.DescribeResourceGroupsInput, _ ...request.Option) (*inspector.DescribeResourceGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeResourceGroups cancelled", ctx.Err())
	default:
		return d.DescribeResourceGroups(in)
	}
}

func (d *InspectorDouble) DescribeRulesPackages(i0 *inspector.DescribeRulesPackagesInput) (r0 *inspector.DescribeRulesPackagesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRulesPackages", i0)
	r0, _ = returns[0].(*inspector.DescribeRulesPackagesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) DescribeRulesPackagesRequest(i0 *inspector.DescribeRulesPackagesInput) (r0 *request.Request, r1 *inspector.DescribeRulesPackagesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRulesPackagesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*inspector.DescribeRulesPackagesOutput)
	return
}

func (d *InspectorDouble) DescribeRulesPackagesWithContext(i0 context.Context, i1 *inspector.DescribeRulesPackagesInput, i2 ...request.Option) (r0 *inspector.DescribeRulesPackagesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeRulesPackagesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*inspector.DescribeRulesPackagesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) fakeDescribeRulesPackagesWithContext(ctx context.Context, in *inspector.DescribeRulesPackagesInput, _ ...request.Option) (*inspector.DescribeRulesPackagesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeRulesPackages cancelled", ctx.Err())
	default:
		return d.DescribeRulesPackages(in)
	}
}

func (d *InspectorDouble) GetAssessmentReport(i0 *inspector.GetAssessmentReportInput) (r0 *inspector.GetAssessmentReportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAssessmentReport", i0)
	r0, _ = returns[0].(*inspector.GetAssessmentReportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) GetAssessmentReportRequest(i0 *inspector.GetAssessmentReportInput) (r0 *request.Request, r1 *inspector.GetAssessmentReportOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAssessmentReportRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*inspector.GetAssessmentReportOutput)
	return
}

func (d *InspectorDouble) GetAssessmentReportWithContext(i0 context.Context, i1 *inspector.GetAssessmentReportInput, i2 ...request.Option) (r0 *inspector.GetAssessmentReportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAssessmentReportWithContext", i0, i1, i2)
	r0, _ = returns[0].(*inspector.GetAssessmentReportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) fakeGetAssessmentReportWithContext(ctx context.Context, in *inspector.GetAssessmentReportInput, _ ...request.Option) (*inspector.GetAssessmentReportOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetAssessmentReport cancelled", ctx.Err())
	default:
		return d.GetAssessmentReport(in)
	}
}

func (d *InspectorDouble) GetExclusionsPreview(i0 *inspector.GetExclusionsPreviewInput) (r0 *inspector.GetExclusionsPreviewOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetExclusionsPreview", i0)
	r0, _ = returns[0].(*inspector.GetExclusionsPreviewOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) GetExclusionsPreviewPages(i0 *inspector.GetExclusionsPreviewInput, i1 func(*inspector.GetExclusionsPreviewOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetExclusionsPreviewPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *InspectorDouble) fakeGetExclusionsPreviewPages(in *inspector.GetExclusionsPreviewInput, pager func(*inspector.GetExclusionsPreviewOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetExclusionsPreview", paginators, in, pager)
}

func (d *InspectorDouble) GetExclusionsPreviewPagesWithContext(i0 context.Context, i1 *inspector.GetExclusionsPreviewInput, i2 func(*inspector.GetExclusionsPreviewOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetExclusionsPreviewPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *InspectorDouble) fakeGetExclusionsPreviewPagesWithContext(ctx context.Context, in *inspector.GetExclusionsPreviewInput, pager func(*inspector.GetExclusionsPreviewOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetExclusionsPreview", paginators, ctx, in, pager, options...)
}

func (d *InspectorDouble) GetExclusionsPreviewRequest(i0 *inspector.GetExclusionsPreviewInput) (r0 *request.Request, r1 *inspector.GetExclusionsPreviewOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetExclusionsPreviewRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*inspector.GetExclusionsPreviewOutput)
	return
}

func (d *InspectorDouble) GetExclusionsPreviewWithContext(i0 context.Context, i1 *inspector.GetExclusionsPreviewInput, i2 ...request.Option) (r0 *inspector.GetExclusionsPreviewOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetExclusionsPreviewWithContext", i0, i1, i2)
	r0, _ = returns[0].(*inspector.GetExclusionsPreviewOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) fakeGetExclusionsPreviewWithContext(ctx context.Context, in *inspector.GetExclusionsPreviewInput, _ ...request.Option) (*inspector.GetExclusionsPreviewOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetExclusionsPreview cancelled", ctx.Err())
	default:
		return d.GetExclusionsPreview(in)
	}
}

func (d *InspectorDouble) GetTelemetryMetadata(i0 *inspector.GetTelemetryMetadataInput) (r0 *inspector.GetTelemetryMetadataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTelemetryMetadata", i0)
	r0, _ = returns[0].(*inspector.GetTelemetryMetadataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) GetTelemetryMetadataRequest(i0 *inspector.GetTelemetryMetadataInput) (r0 *request.Request, r1 *inspector.GetTelemetryMetadataOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTelemetryMetadataRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*inspector.GetTelemetryMetadataOutput)
	return
}

func (d *InspectorDouble) GetTelemetryMetadataWithContext(i0 context.Context, i1 *inspector.GetTelemetryMetadataInput, i2 ...request.Option) (r0 *inspector.GetTelemetryMetadataOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTelemetryMetadataWithContext", i0, i1, i2)
	r0, _ = returns[0].(*inspector.GetTelemetryMetadataOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) fakeGetTelemetryMetadataWithContext(ctx context.Context, in *inspector.GetTelemetryMetadataInput, _ ...request.Option) (*inspector.GetTelemetryMetadataOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetTelemetryMetadata cancelled", ctx.Err())
	default:
		return d.GetTelemetryMetadata(in)
	}
}

func (d *InspectorDouble) ListAssessmentRunAgents(i0 *inspector.ListAssessmentRunAgentsInput) (r0 *inspector.ListAssessmentRunAgentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssessmentRunAgents", i0)
	r0, _ = returns[0].(*inspector.ListAssessmentRunAgentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) ListAssessmentRunAgentsPages(i0 *inspector.ListAssessmentRunAgentsInput, i1 func(*inspector.ListAssessmentRunAgentsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssessmentRunAgentsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *InspectorDouble) fakeListAssessmentRunAgentsPages(in *inspector.ListAssessmentRunAgentsInput, pager func(*inspector.ListAssessmentRunAgentsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListAssessmentRunAgents", paginators, in, pager)
}

func (d *InspectorDouble) ListAssessmentRunAgentsPagesWithContext(i0 context.Context, i1 *inspector.ListAssessmentRunAgentsInput, i2 func(*inspector.ListAssessmentRunAgentsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssessmentRunAgentsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *InspectorDouble) fakeListAssessmentRunAgentsPagesWithContext(ctx context.Context, in *inspector.ListAssessmentRunAgentsInput, pager func(*inspector.ListAssessmentRunAgentsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListAssessmentRunAgents", paginators, ctx, in, pager, options...)
}

func (d *InspectorDouble) ListAssessmentRunAgentsRequest(i0 *inspector.ListAssessmentRunAgentsInput) (r0 *request.Request, r1 *inspector.ListAssessmentRunAgentsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssessmentRunAgentsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*inspector.ListAssessmentRunAgentsOutput)
	return
}

func (d *InspectorDouble) ListAssessmentRunAgentsWithContext(i0 context.Context, i1 *inspector.ListAssessmentRunAgentsInput, i2 ...request.Option) (r0 *inspector.ListAssessmentRunAgentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssessmentRunAgentsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*inspector.ListAssessmentRunAgentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) fakeListAssessmentRunAgentsWithContext(ctx context.Context, in *inspector.ListAssessmentRunAgentsInput, _ ...request.Option) (*inspector.ListAssessmentRunAgentsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAssessmentRunAgents cancelled", ctx.Err())
	default:
		return d.ListAssessmentRunAgents(in)
	}
}

func (d *InspectorDouble) ListAssessmentRuns(i0 *inspector.ListAssessmentRunsInput) (r0 *inspector.ListAssessmentRunsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssessmentRuns", i0)
	r0, _ = returns[0].(*inspector.ListAssessmentRunsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) ListAssessmentRunsPages(i0 *inspector.ListAssessmentRunsInput, i1 func(*inspector.ListAssessmentRunsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssessmentRunsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *InspectorDouble) fakeListAssessmentRunsPages(in *inspector.ListAssessmentRunsInput, pager func(*inspector.ListAssessmentRunsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListAssessmentRuns", paginators, in, pager)
}

func (d *InspectorDouble) ListAssessmentRunsPagesWithContext(i0 context.Context, i1 *inspector.ListAssessmentRunsInput, i2 func(*inspector.ListAssessmentRunsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssessmentRunsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *InspectorDouble) fakeListAssessmentRunsPagesWithContext(ctx context.Context, in *inspector.ListAssessmentRunsInput, pager func(*inspector.ListAssessmentRunsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListAssessmentRuns", paginators, ctx, in, pager, options...)
}

func (d *InspectorDouble) ListAssessmentRunsRequest(i0 *inspector.ListAssessmentRunsInput) (r0 *request.Request, r1 *inspector.ListAssessmentRunsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssessmentRunsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*inspector.ListAssessmentRunsOutput)
	return
}

func (d *InspectorDouble) ListAssessmentRunsWithContext(i0 context.Context, i1 *inspector.ListAssessmentRunsInput, i2 ...request.Option) (r0 *inspector.ListAssessmentRunsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssessmentRunsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*inspector.ListAssessmentRunsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) fakeListAssessmentRunsWithContext(ctx context.Context, in *inspector.ListAssessmentRunsInput, _ ...request.Option) (*inspector.ListAssessmentRunsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAssessmentRuns cancelled", ctx.Err())
	default:
		return d.ListAssessmentRuns(in)
	}
}

func (d *InspectorDouble) ListAssessmentTargets(i0 *inspector.ListAssessmentTargetsInput) (r0 *inspector.ListAssessmentTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssessmentTargets", i0)
	r0, _ = returns[0].(*inspector.ListAssessmentTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) ListAssessmentTargetsPages(i0 *inspector.ListAssessmentTargetsInput, i1 func(*inspector.ListAssessmentTargetsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssessmentTargetsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *InspectorDouble) fakeListAssessmentTargetsPages(in *inspector.ListAssessmentTargetsInput, pager func(*inspector.ListAssessmentTargetsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListAssessmentTargets", paginators, in, pager)
}

func (d *InspectorDouble) ListAssessmentTargetsPagesWithContext(i0 context.Context, i1 *inspector.ListAssessmentTargetsInput, i2 func(*inspector.ListAssessmentTargetsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssessmentTargetsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *InspectorDouble) fakeListAssessmentTargetsPagesWithContext(ctx context.Context, in *inspector.ListAssessmentTargetsInput, pager func(*inspector.ListAssessmentTargetsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListAssessmentTargets", paginators, ctx, in, pager, options...)
}

func (d *InspectorDouble) ListAssessmentTargetsRequest(i0 *inspector.ListAssessmentTargetsInput) (r0 *request.Request, r1 *inspector.ListAssessmentTargetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssessmentTargetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*inspector.ListAssessmentTargetsOutput)
	return
}

func (d *InspectorDouble) ListAssessmentTargetsWithContext(i0 context.Context, i1 *inspector.ListAssessmentTargetsInput, i2 ...request.Option) (r0 *inspector.ListAssessmentTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssessmentTargetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*inspector.ListAssessmentTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) fakeListAssessmentTargetsWithContext(ctx context.Context, in *inspector.ListAssessmentTargetsInput, _ ...request.Option) (*inspector.ListAssessmentTargetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAssessmentTargets cancelled", ctx.Err())
	default:
		return d.ListAssessmentTargets(in)
	}
}

func (d *InspectorDouble) ListAssessmentTemplates(i0 *inspector.ListAssessmentTemplatesInput) (r0 *inspector.ListAssessmentTemplatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssessmentTemplates", i0)
	r0, _ = returns[0].(*inspector.ListAssessmentTemplatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) ListAssessmentTemplatesPages(i0 *inspector.ListAssessmentTemplatesInput, i1 func(*inspector.ListAssessmentTemplatesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssessmentTemplatesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *InspectorDouble) fakeListAssessmentTemplatesPages(in *inspector.ListAssessmentTemplatesInput, pager func(*inspector.ListAssessmentTemplatesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListAssessmentTemplates", paginators, in, pager)
}

func (d *InspectorDouble) ListAssessmentTemplatesPagesWithContext(i0 context.Context, i1 *inspector.ListAssessmentTemplatesInput, i2 func(*inspector.ListAssessmentTemplatesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssessmentTemplatesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *InspectorDouble) fakeListAssessmentTemplatesPagesWithContext(ctx context.Context, in *inspector.ListAssessmentTemplatesInput, pager func(*inspector.ListAssessmentTemplatesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListAssessmentTemplates", paginators, ctx, in, pager, options...)
}

func (d *InspectorDouble) ListAssessmentTemplatesRequest(i0 *inspector.ListAssessmentTemplatesInput) (r0 *request.Request, r1 *inspector.ListAssessmentTemplatesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssessmentTemplatesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*inspector.ListAssessmentTemplatesOutput)
	return
}

func (d *InspectorDouble) ListAssessmentTemplatesWithContext(i0 context.Context, i1 *inspector.ListAssessmentTemplatesInput, i2 ...request.Option) (r0 *inspector.ListAssessmentTemplatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssessmentTemplatesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*inspector.ListAssessmentTemplatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) fakeListAssessmentTemplatesWithContext(ctx context.Context, in *inspector.ListAssessmentTemplatesInput, _ ...request.Option) (*inspector.ListAssessmentTemplatesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAssessmentTemplates cancelled", ctx.Err())
	default:
		return d.ListAssessmentTemplates(in)
	}
}

func (d *InspectorDouble) ListEventSubscriptions(i0 *inspector.ListEventSubscriptionsInput) (r0 *inspector.ListEventSubscriptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEventSubscriptions", i0)
	r0, _ = returns[0].(*inspector.ListEventSubscriptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) ListEventSubscriptionsPages(i0 *inspector.ListEventSubscriptionsInput, i1 func(*inspector.ListEventSubscriptionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEventSubscriptionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *InspectorDouble) fakeListEventSubscriptionsPages(in *inspector.ListEventSubscriptionsInput, pager func(*inspector.ListEventSubscriptionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListEventSubscriptions", paginators, in, pager)
}

func (d *InspectorDouble) ListEventSubscriptionsPagesWithContext(i0 context.Context, i1 *inspector.ListEventSubscriptionsInput, i2 func(*inspector.ListEventSubscriptionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEventSubscriptionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *InspectorDouble) fakeListEventSubscriptionsPagesWithContext(ctx context.Context, in *inspector.ListEventSubscriptionsInput, pager func(*inspector.ListEventSubscriptionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListEventSubscriptions", paginators, ctx, in, pager, options...)
}

func (d *InspectorDouble) ListEventSubscriptionsRequest(i0 *inspector.ListEventSubscriptionsInput) (r0 *request.Request, r1 *inspector.ListEventSubscriptionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEventSubscriptionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*inspector.ListEventSubscriptionsOutput)
	return
}

func (d *InspectorDouble) ListEventSubscriptionsWithContext(i0 context.Context, i1 *inspector.ListEventSubscriptionsInput, i2 ...request.Option) (r0 *inspector.ListEventSubscriptionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListEventSubscriptionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*inspector.ListEventSubscriptionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) fakeListEventSubscriptionsWithContext(ctx context.Context, in *inspector.ListEventSubscriptionsInput, _ ...request.Option) (*inspector.ListEventSubscriptionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListEventSubscriptions cancelled", ctx.Err())
	default:
		return d.ListEventSubscriptions(in)
	}
}

func (d *InspectorDouble) ListExclusions(i0 *inspector.ListExclusionsInput) (r0 *inspector.ListExclusionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListExclusions", i0)
	r0, _ = returns[0].(*inspector.ListExclusionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) ListExclusionsPages(i0 *inspector.ListExclusionsInput, i1 func(*inspector.ListExclusionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListExclusionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *InspectorDouble) fakeListExclusionsPages(in *inspector.ListExclusionsInput, pager func(*inspector.ListExclusionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListExclusions", paginators, in, pager)
}

func (d *InspectorDouble) ListExclusionsPagesWithContext(i0 context.Context, i1 *inspector.ListExclusionsInput, i2 func(*inspector.ListExclusionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListExclusionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *InspectorDouble) fakeListExclusionsPagesWithContext(ctx context.Context, in *inspector.ListExclusionsInput, pager func(*inspector.ListExclusionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListExclusions", paginators, ctx, in, pager, options...)
}

func (d *InspectorDouble) ListExclusionsRequest(i0 *inspector.ListExclusionsInput) (r0 *request.Request, r1 *inspector.ListExclusionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListExclusionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*inspector.ListExclusionsOutput)
	return
}

func (d *InspectorDouble) ListExclusionsWithContext(i0 context.Context, i1 *inspector.ListExclusionsInput, i2 ...request.Option) (r0 *inspector.ListExclusionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListExclusionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*inspector.ListExclusionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) fakeListExclusionsWithContext(ctx context.Context, in *inspector.ListExclusionsInput, _ ...request.Option) (*inspector.ListExclusionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListExclusions cancelled", ctx.Err())
	default:
		return d.ListExclusions(in)
	}
}

func (d *InspectorDouble) ListFindings(i0 *inspector.ListFindingsInput) (r0 *inspector.ListFindingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFindings", i0)
	r0, _ = returns[0].(*inspector.ListFindingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) ListFindingsPages(i0 *inspector.ListFindingsInput, i1 func(*inspector.ListFindingsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFindingsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *InspectorDouble) fakeListFindingsPages(in *inspector.ListFindingsInput, pager func(*inspector.ListFindingsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListFindings", paginators, in, pager)
}

func (d *InspectorDouble) ListFindingsPagesWithContext(i0 context.Context, i1 *inspector.ListFindingsInput, i2 func(*inspector.ListFindingsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFindingsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *InspectorDouble) fakeListFindingsPagesWithContext(ctx context.Context, in *inspector.ListFindingsInput, pager func(*inspector.ListFindingsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListFindings", paginators, ctx, in, pager, options...)
}

func (d *InspectorDouble) ListFindingsRequest(i0 *inspector.ListFindingsInput) (r0 *request.Request, r1 *inspector.ListFindingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFindingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*inspector.ListFindingsOutput)
	return
}

func (d *InspectorDouble) ListFindingsWithContext(i0 context.Context, i1 *inspector.ListFindingsInput, i2 ...request.Option) (r0 *inspector.ListFindingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFindingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*inspector.ListFindingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) fakeListFindingsWithContext(ctx context.Context, in *inspector.ListFindingsInput, _ ...request.Option) (*inspector.ListFindingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListFindings cancelled", ctx.Err())
	default:
		return d.ListFindings(in)
	}
}

func (d *InspectorDouble) ListRulesPackages(i0 *inspector.ListRulesPackagesInput) (r0 *inspector.ListRulesPackagesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRulesPackages", i0)
	r0, _ = returns[0].(*inspector.ListRulesPackagesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) ListRulesPackagesPages(i0 *inspector.ListRulesPackagesInput, i1 func(*inspector.ListRulesPackagesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRulesPackagesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *InspectorDouble) fakeListRulesPackagesPages(in *inspector.ListRulesPackagesInput, pager func(*inspector.ListRulesPackagesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListRulesPackages", paginators, in, pager)
}

func (d *InspectorDouble) ListRulesPackagesPagesWithContext(i0 context.Context, i1 *inspector.ListRulesPackagesInput, i2 func(*inspector.ListRulesPackagesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRulesPackagesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *InspectorDouble) fakeListRulesPackagesPagesWithContext(ctx context.Context, in *inspector.ListRulesPackagesInput, pager func(*inspector.ListRulesPackagesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListRulesPackages", paginators, ctx, in, pager, options...)
}

func (d *InspectorDouble) ListRulesPackagesRequest(i0 *inspector.ListRulesPackagesInput) (r0 *request.Request, r1 *inspector.ListRulesPackagesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRulesPackagesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*inspector.ListRulesPackagesOutput)
	return
}

func (d *InspectorDouble) ListRulesPackagesWithContext(i0 context.Context, i1 *inspector.ListRulesPackagesInput, i2 ...request.Option) (r0 *inspector.ListRulesPackagesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRulesPackagesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*inspector.ListRulesPackagesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) fakeListRulesPackagesWithContext(ctx context.Context, in *inspector.ListRulesPackagesInput, _ ...request.Option) (*inspector.ListRulesPackagesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListRulesPackages cancelled", ctx.Err())
	default:
		return d.ListRulesPackages(in)
	}
}

func (d *InspectorDouble) ListTagsForResource(i0 *inspector.ListTagsForResourceInput) (r0 *inspector.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*inspector.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) ListTagsForResourceRequest(i0 *inspector.ListTagsForResourceInput) (r0 *request.Request, r1 *inspector.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*inspector.ListTagsForResourceOutput)
	return
}

func (d *InspectorDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *inspector.ListTagsForResourceInput, i2 ...request.Option) (r0 *inspector.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*inspector.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *inspector.ListTagsForResourceInput, _ ...request.Option) (*inspector.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *InspectorDouble) PreviewAgents(i0 *inspector.PreviewAgentsInput) (r0 *inspector.PreviewAgentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PreviewAgents", i0)
	r0, _ = returns[0].(*inspector.PreviewAgentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) PreviewAgentsPages(i0 *inspector.PreviewAgentsInput, i1 func(*inspector.PreviewAgentsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PreviewAgentsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *InspectorDouble) fakePreviewAgentsPages(in *inspector.PreviewAgentsInput, pager func(*inspector.PreviewAgentsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("PreviewAgents", paginators, in, pager)
}

func (d *InspectorDouble) PreviewAgentsPagesWithContext(i0 context.Context, i1 *inspector.PreviewAgentsInput, i2 func(*inspector.PreviewAgentsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PreviewAgentsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *InspectorDouble) fakePreviewAgentsPagesWithContext(ctx context.Context, in *inspector.PreviewAgentsInput, pager func(*inspector.PreviewAgentsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("PreviewAgents", paginators, ctx, in, pager, options...)
}

func (d *InspectorDouble) PreviewAgentsRequest(i0 *inspector.PreviewAgentsInput) (r0 *request.Request, r1 *inspector.PreviewAgentsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PreviewAgentsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*inspector.PreviewAgentsOutput)
	return
}

func (d *InspectorDouble) PreviewAgentsWithContext(i0 context.Context, i1 *inspector.PreviewAgentsInput, i2 ...request.Option) (r0 *inspector.PreviewAgentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PreviewAgentsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*inspector.PreviewAgentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) fakePreviewAgentsWithContext(ctx context.Context, in *inspector.PreviewAgentsInput, _ ...request.Option) (*inspector.PreviewAgentsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PreviewAgents cancelled", ctx.Err())
	default:
		return d.PreviewAgents(in)
	}
}

func (d *InspectorDouble) RegisterCrossAccountAccessRole(i0 *inspector.RegisterCrossAccountAccessRoleInput) (r0 *inspector.RegisterCrossAccountAccessRoleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterCrossAccountAccessRole", i0)
	r0, _ = returns[0].(*inspector.RegisterCrossAccountAccessRoleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) RegisterCrossAccountAccessRoleRequest(i0 *inspector.RegisterCrossAccountAccessRoleInput) (r0 *request.Request, r1 *inspector.RegisterCrossAccountAccessRoleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterCrossAccountAccessRoleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*inspector.RegisterCrossAccountAccessRoleOutput)
	return
}

func (d *InspectorDouble) RegisterCrossAccountAccessRoleWithContext(i0 context.Context, i1 *inspector.RegisterCrossAccountAccessRoleInput, i2 ...request.Option) (r0 *inspector.RegisterCrossAccountAccessRoleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterCrossAccountAccessRoleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*inspector.RegisterCrossAccountAccessRoleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) fakeRegisterCrossAccountAccessRoleWithContext(ctx context.Context, in *inspector.RegisterCrossAccountAccessRoleInput, _ ...request.Option) (*inspector.RegisterCrossAccountAccessRoleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterCrossAccountAccessRole cancelled", ctx.Err())
	default:
		return d.RegisterCrossAccountAccessRole(in)
	}
}

func (d *InspectorDouble) RemoveAttributesFromFindings(i0 *inspector.RemoveAttributesFromFindingsInput) (r0 *inspector.RemoveAttributesFromFindingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveAttributesFromFindings", i0)
	r0, _ = returns[0].(*inspector.RemoveAttributesFromFindingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) RemoveAttributesFromFindingsRequest(i0 *inspector.RemoveAttributesFromFindingsInput) (r0 *request.Request, r1 *inspector.RemoveAttributesFromFindingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveAttributesFromFindingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*inspector.RemoveAttributesFromFindingsOutput)
	return
}

func (d *InspectorDouble) RemoveAttributesFromFindingsWithContext(i0 context.Context, i1 *inspector.RemoveAttributesFromFindingsInput, i2 ...request.Option) (r0 *inspector.RemoveAttributesFromFindingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveAttributesFromFindingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*inspector.RemoveAttributesFromFindingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) fakeRemoveAttributesFromFindingsWithContext(ctx context.Context, in *inspector.RemoveAttributesFromFindingsInput, _ ...request.Option) (*inspector.RemoveAttributesFromFindingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveAttributesFromFindings cancelled", ctx.Err())
	default:
		return d.RemoveAttributesFromFindings(in)
	}
}

func (d *InspectorDouble) SetTagsForResource(i0 *inspector.SetTagsForResourceInput) (r0 *inspector.SetTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetTagsForResource", i0)
	r0, _ = returns[0].(*inspector.SetTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) SetTagsForResourceRequest(i0 *inspector.SetTagsForResourceInput) (r0 *request.Request, r1 *inspector.SetTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*inspector.SetTagsForResourceOutput)
	return
}

func (d *InspectorDouble) SetTagsForResourceWithContext(i0 context.Context, i1 *inspector.SetTagsForResourceInput, i2 ...request.Option) (r0 *inspector.SetTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*inspector.SetTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) fakeSetTagsForResourceWithContext(ctx context.Context, in *inspector.SetTagsForResourceInput, _ ...request.Option) (*inspector.SetTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetTagsForResource cancelled", ctx.Err())
	default:
		return d.SetTagsForResource(in)
	}
}

func (d *InspectorDouble) StartAssessmentRun(i0 *inspector.StartAssessmentRunInput) (r0 *inspector.StartAssessmentRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartAssessmentRun", i0)
	r0, _ = returns[0].(*inspector.StartAssessmentRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) StartAssessmentRunRequest(i0 *inspector.StartAssessmentRunInput) (r0 *request.Request, r1 *inspector.StartAssessmentRunOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartAssessmentRunRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*inspector.StartAssessmentRunOutput)
	return
}

func (d *InspectorDouble) StartAssessmentRunWithContext(i0 context.Context, i1 *inspector.StartAssessmentRunInput, i2 ...request.Option) (r0 *inspector.StartAssessmentRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartAssessmentRunWithContext", i0, i1, i2)
	r0, _ = returns[0].(*inspector.StartAssessmentRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) fakeStartAssessmentRunWithContext(ctx context.Context, in *inspector.StartAssessmentRunInput, _ ...request.Option) (*inspector.StartAssessmentRunOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartAssessmentRun cancelled", ctx.Err())
	default:
		return d.StartAssessmentRun(in)
	}
}

func (d *InspectorDouble) StopAssessmentRun(i0 *inspector.StopAssessmentRunInput) (r0 *inspector.StopAssessmentRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopAssessmentRun", i0)
	r0, _ = returns[0].(*inspector.StopAssessmentRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) StopAssessmentRunRequest(i0 *inspector.StopAssessmentRunInput) (r0 *request.Request, r1 *inspector.StopAssessmentRunOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopAssessmentRunRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*inspector.StopAssessmentRunOutput)
	return
}

func (d *InspectorDouble) StopAssessmentRunWithContext(i0 context.Context, i1 *inspector.StopAssessmentRunInput, i2 ...request.Option) (r0 *inspector.StopAssessmentRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopAssessmentRunWithContext", i0, i1, i2)
	r0, _ = returns[0].(*inspector.StopAssessmentRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) fakeStopAssessmentRunWithContext(ctx context.Context, in *inspector.StopAssessmentRunInput, _ ...request.Option) (*inspector.StopAssessmentRunOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopAssessmentRun cancelled", ctx.Err())
	default:
		return d.StopAssessmentRun(in)
	}
}

func (d *InspectorDouble) SubscribeToEvent(i0 *inspector.SubscribeToEventInput) (r0 *inspector.SubscribeToEventOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SubscribeToEvent", i0)
	r0, _ = returns[0].(*inspector.SubscribeToEventOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) SubscribeToEventRequest(i0 *inspector.SubscribeToEventInput) (r0 *request.Request, r1 *inspector.SubscribeToEventOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SubscribeToEventRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*inspector.SubscribeToEventOutput)
	return
}

func (d *InspectorDouble) SubscribeToEventWithContext(i0 context.Context, i1 *inspector.SubscribeToEventInput, i2 ...request.Option) (r0 *inspector.SubscribeToEventOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SubscribeToEventWithContext", i0, i1, i2)
	r0, _ = returns[0].(*inspector.SubscribeToEventOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) fakeSubscribeToEventWithContext(ctx context.Context, in *inspector.SubscribeToEventInput, _ ...request.Option) (*inspector.SubscribeToEventOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SubscribeToEvent cancelled", ctx.Err())
	default:
		return d.SubscribeToEvent(in)
	}
}

func (d *InspectorDouble) UnsubscribeFromEvent(i0 *inspector.UnsubscribeFromEventInput) (r0 *inspector.UnsubscribeFromEventOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnsubscribeFromEvent", i0)
	r0, _ = returns[0].(*inspector.UnsubscribeFromEventOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) UnsubscribeFromEventRequest(i0 *inspector.UnsubscribeFromEventInput) (r0 *request.Request, r1 *inspector.UnsubscribeFromEventOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnsubscribeFromEventRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*inspector.UnsubscribeFromEventOutput)
	return
}

func (d *InspectorDouble) UnsubscribeFromEventWithContext(i0 context.Context, i1 *inspector.UnsubscribeFromEventInput, i2 ...request.Option) (r0 *inspector.UnsubscribeFromEventOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnsubscribeFromEventWithContext", i0, i1, i2)
	r0, _ = returns[0].(*inspector.UnsubscribeFromEventOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) fakeUnsubscribeFromEventWithContext(ctx context.Context, in *inspector.UnsubscribeFromEventInput, _ ...request.Option) (*inspector.UnsubscribeFromEventOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UnsubscribeFromEvent cancelled", ctx.Err())
	default:
		return d.UnsubscribeFromEvent(in)
	}
}

func (d *InspectorDouble) UpdateAssessmentTarget(i0 *inspector.UpdateAssessmentTargetInput) (r0 *inspector.UpdateAssessmentTargetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAssessmentTarget", i0)
	r0, _ = returns[0].(*inspector.UpdateAssessmentTargetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) UpdateAssessmentTargetRequest(i0 *inspector.UpdateAssessmentTargetInput) (r0 *request.Request, r1 *inspector.UpdateAssessmentTargetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAssessmentTargetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*inspector.UpdateAssessmentTargetOutput)
	return
}

func (d *InspectorDouble) UpdateAssessmentTargetWithContext(i0 context.Context, i1 *inspector.UpdateAssessmentTargetInput, i2 ...request.Option) (r0 *inspector.UpdateAssessmentTargetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAssessmentTargetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*inspector.UpdateAssessmentTargetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *InspectorDouble) fakeUpdateAssessmentTargetWithContext(ctx context.Context, in *inspector.UpdateAssessmentTargetInput, _ ...request.Option) (*inspector.UpdateAssessmentTargetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateAssessmentTarget cancelled", ctx.Err())
	default:
		return d.UpdateAssessmentTarget(in)
	}
}
