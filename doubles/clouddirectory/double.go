// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:11:31+11:00

// Package clouddirectorydouble provides a TestDouble implementation of clouddirectoryiface.CloudDirectoryAPI
package clouddirectorydouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/clouddirectory"
	"github.com/aws/aws-sdk-go/service/clouddirectory/clouddirectoryiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// CloudDirectoryDouble is TestDouble for clouddirectoryiface.CloudDirectoryAPI
type CloudDirectoryDouble struct {
	clouddirectoryiface.CloudDirectoryAPI
	*awsdouble.AWSTestDouble
}

// Constructor for CloudDirectoryDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *CloudDirectoryDouble {
	result := &CloudDirectoryDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*clouddirectoryiface.CloudDirectoryAPI)(nil), configurators...)
	return result
}

func (d *CloudDirectoryDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *CloudDirectoryDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AddFacetToObjectWithContext":
		return m.Fake(d.fakeAddFacetToObjectWithContext)

	case "ApplySchemaWithContext":
		return m.Fake(d.fakeApplySchemaWithContext)

	case "AttachObjectWithContext":
		return m.Fake(d.fakeAttachObjectWithContext)

	case "AttachPolicyWithContext":
		return m.Fake(d.fakeAttachPolicyWithContext)

	case "AttachToIndexWithContext":
		return m.Fake(d.fakeAttachToIndexWithContext)

	case "AttachTypedLinkWithContext":
		return m.Fake(d.fakeAttachTypedLinkWithContext)

	case "BatchReadWithContext":
		return m.Fake(d.fakeBatchReadWithContext)

	case "BatchWriteWithContext":
		return m.Fake(d.fakeBatchWriteWithContext)

	case "CreateDirectoryWithContext":
		return m.Fake(d.fakeCreateDirectoryWithContext)

	case "CreateFacetWithContext":
		return m.Fake(d.fakeCreateFacetWithContext)

	case "CreateIndexWithContext":
		return m.Fake(d.fakeCreateIndexWithContext)

	case "CreateObjectWithContext":
		return m.Fake(d.fakeCreateObjectWithContext)

	case "CreateSchemaWithContext":
		return m.Fake(d.fakeCreateSchemaWithContext)

	case "CreateTypedLinkFacetWithContext":
		return m.Fake(d.fakeCreateTypedLinkFacetWithContext)

	case "DeleteDirectoryWithContext":
		return m.Fake(d.fakeDeleteDirectoryWithContext)

	case "DeleteFacetWithContext":
		return m.Fake(d.fakeDeleteFacetWithContext)

	case "DeleteObjectWithContext":
		return m.Fake(d.fakeDeleteObjectWithContext)

	case "DeleteSchemaWithContext":
		return m.Fake(d.fakeDeleteSchemaWithContext)

	case "DeleteTypedLinkFacetWithContext":
		return m.Fake(d.fakeDeleteTypedLinkFacetWithContext)

	case "DetachFromIndexWithContext":
		return m.Fake(d.fakeDetachFromIndexWithContext)

	case "DetachObjectWithContext":
		return m.Fake(d.fakeDetachObjectWithContext)

	case "DetachPolicyWithContext":
		return m.Fake(d.fakeDetachPolicyWithContext)

	case "DetachTypedLinkWithContext":
		return m.Fake(d.fakeDetachTypedLinkWithContext)

	case "DisableDirectoryWithContext":
		return m.Fake(d.fakeDisableDirectoryWithContext)

	case "EnableDirectoryWithContext":
		return m.Fake(d.fakeEnableDirectoryWithContext)

	case "GetAppliedSchemaVersionWithContext":
		return m.Fake(d.fakeGetAppliedSchemaVersionWithContext)

	case "GetDirectoryWithContext":
		return m.Fake(d.fakeGetDirectoryWithContext)

	case "GetFacetWithContext":
		return m.Fake(d.fakeGetFacetWithContext)

	case "GetLinkAttributesWithContext":
		return m.Fake(d.fakeGetLinkAttributesWithContext)

	case "GetObjectAttributesWithContext":
		return m.Fake(d.fakeGetObjectAttributesWithContext)

	case "GetObjectInformationWithContext":
		return m.Fake(d.fakeGetObjectInformationWithContext)

	case "GetSchemaAsJsonWithContext":
		return m.Fake(d.fakeGetSchemaAsJsonWithContext)

	case "GetTypedLinkFacetInformationWithContext":
		return m.Fake(d.fakeGetTypedLinkFacetInformationWithContext)

	case "ListAppliedSchemaArnsPages":
		return m.Fake(d.fakeListAppliedSchemaArnsPages)

	case "ListAppliedSchemaArnsPagesWithContext":
		return m.Fake(d.fakeListAppliedSchemaArnsPagesWithContext)

	case "ListAppliedSchemaArnsWithContext":
		return m.Fake(d.fakeListAppliedSchemaArnsWithContext)

	case "ListAttachedIndicesPages":
		return m.Fake(d.fakeListAttachedIndicesPages)

	case "ListAttachedIndicesPagesWithContext":
		return m.Fake(d.fakeListAttachedIndicesPagesWithContext)

	case "ListAttachedIndicesWithContext":
		return m.Fake(d.fakeListAttachedIndicesWithContext)

	case "ListDevelopmentSchemaArnsPages":
		return m.Fake(d.fakeListDevelopmentSchemaArnsPages)

	case "ListDevelopmentSchemaArnsPagesWithContext":
		return m.Fake(d.fakeListDevelopmentSchemaArnsPagesWithContext)

	case "ListDevelopmentSchemaArnsWithContext":
		return m.Fake(d.fakeListDevelopmentSchemaArnsWithContext)

	case "ListDirectoriesPages":
		return m.Fake(d.fakeListDirectoriesPages)

	case "ListDirectoriesPagesWithContext":
		return m.Fake(d.fakeListDirectoriesPagesWithContext)

	case "ListDirectoriesWithContext":
		return m.Fake(d.fakeListDirectoriesWithContext)

	case "ListFacetAttributesPages":
		return m.Fake(d.fakeListFacetAttributesPages)

	case "ListFacetAttributesPagesWithContext":
		return m.Fake(d.fakeListFacetAttributesPagesWithContext)

	case "ListFacetAttributesWithContext":
		return m.Fake(d.fakeListFacetAttributesWithContext)

	case "ListFacetNamesPages":
		return m.Fake(d.fakeListFacetNamesPages)

	case "ListFacetNamesPagesWithContext":
		return m.Fake(d.fakeListFacetNamesPagesWithContext)

	case "ListFacetNamesWithContext":
		return m.Fake(d.fakeListFacetNamesWithContext)

	case "ListIncomingTypedLinksWithContext":
		return m.Fake(d.fakeListIncomingTypedLinksWithContext)

	case "ListIndexPages":
		return m.Fake(d.fakeListIndexPages)

	case "ListIndexPagesWithContext":
		return m.Fake(d.fakeListIndexPagesWithContext)

	case "ListIndexWithContext":
		return m.Fake(d.fakeListIndexWithContext)

	case "ListManagedSchemaArnsPages":
		return m.Fake(d.fakeListManagedSchemaArnsPages)

	case "ListManagedSchemaArnsPagesWithContext":
		return m.Fake(d.fakeListManagedSchemaArnsPagesWithContext)

	case "ListManagedSchemaArnsWithContext":
		return m.Fake(d.fakeListManagedSchemaArnsWithContext)

	case "ListObjectAttributesPages":
		return m.Fake(d.fakeListObjectAttributesPages)

	case "ListObjectAttributesPagesWithContext":
		return m.Fake(d.fakeListObjectAttributesPagesWithContext)

	case "ListObjectAttributesWithContext":
		return m.Fake(d.fakeListObjectAttributesWithContext)

	case "ListObjectChildrenPages":
		return m.Fake(d.fakeListObjectChildrenPages)

	case "ListObjectChildrenPagesWithContext":
		return m.Fake(d.fakeListObjectChildrenPagesWithContext)

	case "ListObjectChildrenWithContext":
		return m.Fake(d.fakeListObjectChildrenWithContext)

	case "ListObjectParentPathsPages":
		return m.Fake(d.fakeListObjectParentPathsPages)

	case "ListObjectParentPathsPagesWithContext":
		return m.Fake(d.fakeListObjectParentPathsPagesWithContext)

	case "ListObjectParentPathsWithContext":
		return m.Fake(d.fakeListObjectParentPathsWithContext)

	case "ListObjectParentsPages":
		return m.Fake(d.fakeListObjectParentsPages)

	case "ListObjectParentsPagesWithContext":
		return m.Fake(d.fakeListObjectParentsPagesWithContext)

	case "ListObjectParentsWithContext":
		return m.Fake(d.fakeListObjectParentsWithContext)

	case "ListObjectPoliciesPages":
		return m.Fake(d.fakeListObjectPoliciesPages)

	case "ListObjectPoliciesPagesWithContext":
		return m.Fake(d.fakeListObjectPoliciesPagesWithContext)

	case "ListObjectPoliciesWithContext":
		return m.Fake(d.fakeListObjectPoliciesWithContext)

	case "ListOutgoingTypedLinksWithContext":
		return m.Fake(d.fakeListOutgoingTypedLinksWithContext)

	case "ListPolicyAttachmentsPages":
		return m.Fake(d.fakeListPolicyAttachmentsPages)

	case "ListPolicyAttachmentsPagesWithContext":
		return m.Fake(d.fakeListPolicyAttachmentsPagesWithContext)

	case "ListPolicyAttachmentsWithContext":
		return m.Fake(d.fakeListPolicyAttachmentsWithContext)

	case "ListPublishedSchemaArnsPages":
		return m.Fake(d.fakeListPublishedSchemaArnsPages)

	case "ListPublishedSchemaArnsPagesWithContext":
		return m.Fake(d.fakeListPublishedSchemaArnsPagesWithContext)

	case "ListPublishedSchemaArnsWithContext":
		return m.Fake(d.fakeListPublishedSchemaArnsWithContext)

	case "ListTagsForResourcePages":
		return m.Fake(d.fakeListTagsForResourcePages)

	case "ListTagsForResourcePagesWithContext":
		return m.Fake(d.fakeListTagsForResourcePagesWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "ListTypedLinkFacetAttributesPages":
		return m.Fake(d.fakeListTypedLinkFacetAttributesPages)

	case "ListTypedLinkFacetAttributesPagesWithContext":
		return m.Fake(d.fakeListTypedLinkFacetAttributesPagesWithContext)

	case "ListTypedLinkFacetAttributesWithContext":
		return m.Fake(d.fakeListTypedLinkFacetAttributesWithContext)

	case "ListTypedLinkFacetNamesPages":
		return m.Fake(d.fakeListTypedLinkFacetNamesPages)

	case "ListTypedLinkFacetNamesPagesWithContext":
		return m.Fake(d.fakeListTypedLinkFacetNamesPagesWithContext)

	case "ListTypedLinkFacetNamesWithContext":
		return m.Fake(d.fakeListTypedLinkFacetNamesWithContext)

	case "LookupPolicyPages":
		return m.Fake(d.fakeLookupPolicyPages)

	case "LookupPolicyPagesWithContext":
		return m.Fake(d.fakeLookupPolicyPagesWithContext)

	case "LookupPolicyWithContext":
		return m.Fake(d.fakeLookupPolicyWithContext)

	case "PublishSchemaWithContext":
		return m.Fake(d.fakePublishSchemaWithContext)

	case "PutSchemaFromJsonWithContext":
		return m.Fake(d.fakePutSchemaFromJsonWithContext)

	case "RemoveFacetFromObjectWithContext":
		return m.Fake(d.fakeRemoveFacetFromObjectWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateFacetWithContext":
		return m.Fake(d.fakeUpdateFacetWithContext)

	case "UpdateLinkAttributesWithContext":
		return m.Fake(d.fakeUpdateLinkAttributesWithContext)

	case "UpdateObjectAttributesWithContext":
		return m.Fake(d.fakeUpdateObjectAttributesWithContext)

	case "UpdateSchemaWithContext":
		return m.Fake(d.fakeUpdateSchemaWithContext)

	case "UpdateTypedLinkFacetWithContext":
		return m.Fake(d.fakeUpdateTypedLinkFacetWithContext)

	case "UpgradeAppliedSchemaWithContext":
		return m.Fake(d.fakeUpgradeAppliedSchemaWithContext)

	case "UpgradePublishedSchemaWithContext":
		return m.Fake(d.fakeUpgradePublishedSchemaWithContext)

	default:
		return nil
	}
}

func (d *CloudDirectoryDouble) AddFacetToObject(i0 *clouddirectory.AddFacetToObjectInput) (r0 *clouddirectory.AddFacetToObjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddFacetToObject", i0)
	r0, _ = returns[0].(*clouddirectory.AddFacetToObjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) AddFacetToObjectRequest(i0 *clouddirectory.AddFacetToObjectInput) (r0 *request.Request, r1 *clouddirectory.AddFacetToObjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddFacetToObjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.AddFacetToObjectOutput)
	return
}

func (d *CloudDirectoryDouble) AddFacetToObjectWithContext(i0 context.Context, i1 *clouddirectory.AddFacetToObjectInput, i2 ...request.Option) (r0 *clouddirectory.AddFacetToObjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddFacetToObjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.AddFacetToObjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeAddFacetToObjectWithContext(ctx context.Context, in *clouddirectory.AddFacetToObjectInput, _ ...request.Option) (*clouddirectory.AddFacetToObjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddFacetToObject cancelled", ctx.Err())
	default:
		return d.AddFacetToObject(in)
	}
}

func (d *CloudDirectoryDouble) ApplySchema(i0 *clouddirectory.ApplySchemaInput) (r0 *clouddirectory.ApplySchemaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ApplySchema", i0)
	r0, _ = returns[0].(*clouddirectory.ApplySchemaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) ApplySchemaRequest(i0 *clouddirectory.ApplySchemaInput) (r0 *request.Request, r1 *clouddirectory.ApplySchemaOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ApplySchemaRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.ApplySchemaOutput)
	return
}

func (d *CloudDirectoryDouble) ApplySchemaWithContext(i0 context.Context, i1 *clouddirectory.ApplySchemaInput, i2 ...request.Option) (r0 *clouddirectory.ApplySchemaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ApplySchemaWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.ApplySchemaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeApplySchemaWithContext(ctx context.Context, in *clouddirectory.ApplySchemaInput, _ ...request.Option) (*clouddirectory.ApplySchemaOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ApplySchema cancelled", ctx.Err())
	default:
		return d.ApplySchema(in)
	}
}

func (d *CloudDirectoryDouble) AttachObject(i0 *clouddirectory.AttachObjectInput) (r0 *clouddirectory.AttachObjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachObject", i0)
	r0, _ = returns[0].(*clouddirectory.AttachObjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) AttachObjectRequest(i0 *clouddirectory.AttachObjectInput) (r0 *request.Request, r1 *clouddirectory.AttachObjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachObjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.AttachObjectOutput)
	return
}

func (d *CloudDirectoryDouble) AttachObjectWithContext(i0 context.Context, i1 *clouddirectory.AttachObjectInput, i2 ...request.Option) (r0 *clouddirectory.AttachObjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachObjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.AttachObjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeAttachObjectWithContext(ctx context.Context, in *clouddirectory.AttachObjectInput, _ ...request.Option) (*clouddirectory.AttachObjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AttachObject cancelled", ctx.Err())
	default:
		return d.AttachObject(in)
	}
}

func (d *CloudDirectoryDouble) AttachPolicy(i0 *clouddirectory.AttachPolicyInput) (r0 *clouddirectory.AttachPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachPolicy", i0)
	r0, _ = returns[0].(*clouddirectory.AttachPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) AttachPolicyRequest(i0 *clouddirectory.AttachPolicyInput) (r0 *request.Request, r1 *clouddirectory.AttachPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.AttachPolicyOutput)
	return
}

func (d *CloudDirectoryDouble) AttachPolicyWithContext(i0 context.Context, i1 *clouddirectory.AttachPolicyInput, i2 ...request.Option) (r0 *clouddirectory.AttachPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.AttachPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeAttachPolicyWithContext(ctx context.Context, in *clouddirectory.AttachPolicyInput, _ ...request.Option) (*clouddirectory.AttachPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AttachPolicy cancelled", ctx.Err())
	default:
		return d.AttachPolicy(in)
	}
}

func (d *CloudDirectoryDouble) AttachToIndex(i0 *clouddirectory.AttachToIndexInput) (r0 *clouddirectory.AttachToIndexOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachToIndex", i0)
	r0, _ = returns[0].(*clouddirectory.AttachToIndexOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) AttachToIndexRequest(i0 *clouddirectory.AttachToIndexInput) (r0 *request.Request, r1 *clouddirectory.AttachToIndexOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachToIndexRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.AttachToIndexOutput)
	return
}

func (d *CloudDirectoryDouble) AttachToIndexWithContext(i0 context.Context, i1 *clouddirectory.AttachToIndexInput, i2 ...request.Option) (r0 *clouddirectory.AttachToIndexOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachToIndexWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.AttachToIndexOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeAttachToIndexWithContext(ctx context.Context, in *clouddirectory.AttachToIndexInput, _ ...request.Option) (*clouddirectory.AttachToIndexOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AttachToIndex cancelled", ctx.Err())
	default:
		return d.AttachToIndex(in)
	}
}

func (d *CloudDirectoryDouble) AttachTypedLink(i0 *clouddirectory.AttachTypedLinkInput) (r0 *clouddirectory.AttachTypedLinkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachTypedLink", i0)
	r0, _ = returns[0].(*clouddirectory.AttachTypedLinkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) AttachTypedLinkRequest(i0 *clouddirectory.AttachTypedLinkInput) (r0 *request.Request, r1 *clouddirectory.AttachTypedLinkOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachTypedLinkRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.AttachTypedLinkOutput)
	return
}

func (d *CloudDirectoryDouble) AttachTypedLinkWithContext(i0 context.Context, i1 *clouddirectory.AttachTypedLinkInput, i2 ...request.Option) (r0 *clouddirectory.AttachTypedLinkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AttachTypedLinkWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.AttachTypedLinkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeAttachTypedLinkWithContext(ctx context.Context, in *clouddirectory.AttachTypedLinkInput, _ ...request.Option) (*clouddirectory.AttachTypedLinkOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AttachTypedLink cancelled", ctx.Err())
	default:
		return d.AttachTypedLink(in)
	}
}

func (d *CloudDirectoryDouble) BatchRead(i0 *clouddirectory.BatchReadInput) (r0 *clouddirectory.BatchReadOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchRead", i0)
	r0, _ = returns[0].(*clouddirectory.BatchReadOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) BatchReadRequest(i0 *clouddirectory.BatchReadInput) (r0 *request.Request, r1 *clouddirectory.BatchReadOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchReadRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.BatchReadOutput)
	return
}

func (d *CloudDirectoryDouble) BatchReadWithContext(i0 context.Context, i1 *clouddirectory.BatchReadInput, i2 ...request.Option) (r0 *clouddirectory.BatchReadOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchReadWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.BatchReadOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeBatchReadWithContext(ctx context.Context, in *clouddirectory.BatchReadInput, _ ...request.Option) (*clouddirectory.BatchReadOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchRead cancelled", ctx.Err())
	default:
		return d.BatchRead(in)
	}
}

func (d *CloudDirectoryDouble) BatchWrite(i0 *clouddirectory.BatchWriteInput) (r0 *clouddirectory.BatchWriteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchWrite", i0)
	r0, _ = returns[0].(*clouddirectory.BatchWriteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) BatchWriteRequest(i0 *clouddirectory.BatchWriteInput) (r0 *request.Request, r1 *clouddirectory.BatchWriteOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchWriteRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.BatchWriteOutput)
	return
}

func (d *CloudDirectoryDouble) BatchWriteWithContext(i0 context.Context, i1 *clouddirectory.BatchWriteInput, i2 ...request.Option) (r0 *clouddirectory.BatchWriteOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchWriteWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.BatchWriteOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeBatchWriteWithContext(ctx context.Context, in *clouddirectory.BatchWriteInput, _ ...request.Option) (*clouddirectory.BatchWriteOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchWrite cancelled", ctx.Err())
	default:
		return d.BatchWrite(in)
	}
}

func (d *CloudDirectoryDouble) CreateDirectory(i0 *clouddirectory.CreateDirectoryInput) (r0 *clouddirectory.CreateDirectoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDirectory", i0)
	r0, _ = returns[0].(*clouddirectory.CreateDirectoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) CreateDirectoryRequest(i0 *clouddirectory.CreateDirectoryInput) (r0 *request.Request, r1 *clouddirectory.CreateDirectoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDirectoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.CreateDirectoryOutput)
	return
}

func (d *CloudDirectoryDouble) CreateDirectoryWithContext(i0 context.Context, i1 *clouddirectory.CreateDirectoryInput, i2 ...request.Option) (r0 *clouddirectory.CreateDirectoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDirectoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.CreateDirectoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeCreateDirectoryWithContext(ctx context.Context, in *clouddirectory.CreateDirectoryInput, _ ...request.Option) (*clouddirectory.CreateDirectoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDirectory cancelled", ctx.Err())
	default:
		return d.CreateDirectory(in)
	}
}

func (d *CloudDirectoryDouble) CreateFacet(i0 *clouddirectory.CreateFacetInput) (r0 *clouddirectory.CreateFacetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFacet", i0)
	r0, _ = returns[0].(*clouddirectory.CreateFacetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) CreateFacetRequest(i0 *clouddirectory.CreateFacetInput) (r0 *request.Request, r1 *clouddirectory.CreateFacetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFacetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.CreateFacetOutput)
	return
}

func (d *CloudDirectoryDouble) CreateFacetWithContext(i0 context.Context, i1 *clouddirectory.CreateFacetInput, i2 ...request.Option) (r0 *clouddirectory.CreateFacetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFacetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.CreateFacetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeCreateFacetWithContext(ctx context.Context, in *clouddirectory.CreateFacetInput, _ ...request.Option) (*clouddirectory.CreateFacetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateFacet cancelled", ctx.Err())
	default:
		return d.CreateFacet(in)
	}
}

func (d *CloudDirectoryDouble) CreateIndex(i0 *clouddirectory.CreateIndexInput) (r0 *clouddirectory.CreateIndexOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateIndex", i0)
	r0, _ = returns[0].(*clouddirectory.CreateIndexOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) CreateIndexRequest(i0 *clouddirectory.CreateIndexInput) (r0 *request.Request, r1 *clouddirectory.CreateIndexOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateIndexRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.CreateIndexOutput)
	return
}

func (d *CloudDirectoryDouble) CreateIndexWithContext(i0 context.Context, i1 *clouddirectory.CreateIndexInput, i2 ...request.Option) (r0 *clouddirectory.CreateIndexOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateIndexWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.CreateIndexOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeCreateIndexWithContext(ctx context.Context, in *clouddirectory.CreateIndexInput, _ ...request.Option) (*clouddirectory.CreateIndexOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateIndex cancelled", ctx.Err())
	default:
		return d.CreateIndex(in)
	}
}

func (d *CloudDirectoryDouble) CreateObject(i0 *clouddirectory.CreateObjectInput) (r0 *clouddirectory.CreateObjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateObject", i0)
	r0, _ = returns[0].(*clouddirectory.CreateObjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) CreateObjectRequest(i0 *clouddirectory.CreateObjectInput) (r0 *request.Request, r1 *clouddirectory.CreateObjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateObjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.CreateObjectOutput)
	return
}

func (d *CloudDirectoryDouble) CreateObjectWithContext(i0 context.Context, i1 *clouddirectory.CreateObjectInput, i2 ...request.Option) (r0 *clouddirectory.CreateObjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateObjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.CreateObjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeCreateObjectWithContext(ctx context.Context, in *clouddirectory.CreateObjectInput, _ ...request.Option) (*clouddirectory.CreateObjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateObject cancelled", ctx.Err())
	default:
		return d.CreateObject(in)
	}
}

func (d *CloudDirectoryDouble) CreateSchema(i0 *clouddirectory.CreateSchemaInput) (r0 *clouddirectory.CreateSchemaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSchema", i0)
	r0, _ = returns[0].(*clouddirectory.CreateSchemaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) CreateSchemaRequest(i0 *clouddirectory.CreateSchemaInput) (r0 *request.Request, r1 *clouddirectory.CreateSchemaOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSchemaRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.CreateSchemaOutput)
	return
}

func (d *CloudDirectoryDouble) CreateSchemaWithContext(i0 context.Context, i1 *clouddirectory.CreateSchemaInput, i2 ...request.Option) (r0 *clouddirectory.CreateSchemaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSchemaWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.CreateSchemaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeCreateSchemaWithContext(ctx context.Context, in *clouddirectory.CreateSchemaInput, _ ...request.Option) (*clouddirectory.CreateSchemaOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateSchema cancelled", ctx.Err())
	default:
		return d.CreateSchema(in)
	}
}

func (d *CloudDirectoryDouble) CreateTypedLinkFacet(i0 *clouddirectory.CreateTypedLinkFacetInput) (r0 *clouddirectory.CreateTypedLinkFacetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTypedLinkFacet", i0)
	r0, _ = returns[0].(*clouddirectory.CreateTypedLinkFacetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) CreateTypedLinkFacetRequest(i0 *clouddirectory.CreateTypedLinkFacetInput) (r0 *request.Request, r1 *clouddirectory.CreateTypedLinkFacetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTypedLinkFacetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.CreateTypedLinkFacetOutput)
	return
}

func (d *CloudDirectoryDouble) CreateTypedLinkFacetWithContext(i0 context.Context, i1 *clouddirectory.CreateTypedLinkFacetInput, i2 ...request.Option) (r0 *clouddirectory.CreateTypedLinkFacetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTypedLinkFacetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.CreateTypedLinkFacetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeCreateTypedLinkFacetWithContext(ctx context.Context, in *clouddirectory.CreateTypedLinkFacetInput, _ ...request.Option) (*clouddirectory.CreateTypedLinkFacetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTypedLinkFacet cancelled", ctx.Err())
	default:
		return d.CreateTypedLinkFacet(in)
	}
}

func (d *CloudDirectoryDouble) DeleteDirectory(i0 *clouddirectory.DeleteDirectoryInput) (r0 *clouddirectory.DeleteDirectoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDirectory", i0)
	r0, _ = returns[0].(*clouddirectory.DeleteDirectoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) DeleteDirectoryRequest(i0 *clouddirectory.DeleteDirectoryInput) (r0 *request.Request, r1 *clouddirectory.DeleteDirectoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDirectoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.DeleteDirectoryOutput)
	return
}

func (d *CloudDirectoryDouble) DeleteDirectoryWithContext(i0 context.Context, i1 *clouddirectory.DeleteDirectoryInput, i2 ...request.Option) (r0 *clouddirectory.DeleteDirectoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDirectoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.DeleteDirectoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeDeleteDirectoryWithContext(ctx context.Context, in *clouddirectory.DeleteDirectoryInput, _ ...request.Option) (*clouddirectory.DeleteDirectoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDirectory cancelled", ctx.Err())
	default:
		return d.DeleteDirectory(in)
	}
}

func (d *CloudDirectoryDouble) DeleteFacet(i0 *clouddirectory.DeleteFacetInput) (r0 *clouddirectory.DeleteFacetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFacet", i0)
	r0, _ = returns[0].(*clouddirectory.DeleteFacetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) DeleteFacetRequest(i0 *clouddirectory.DeleteFacetInput) (r0 *request.Request, r1 *clouddirectory.DeleteFacetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFacetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.DeleteFacetOutput)
	return
}

func (d *CloudDirectoryDouble) DeleteFacetWithContext(i0 context.Context, i1 *clouddirectory.DeleteFacetInput, i2 ...request.Option) (r0 *clouddirectory.DeleteFacetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFacetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.DeleteFacetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeDeleteFacetWithContext(ctx context.Context, in *clouddirectory.DeleteFacetInput, _ ...request.Option) (*clouddirectory.DeleteFacetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteFacet cancelled", ctx.Err())
	default:
		return d.DeleteFacet(in)
	}
}

func (d *CloudDirectoryDouble) DeleteObject(i0 *clouddirectory.DeleteObjectInput) (r0 *clouddirectory.DeleteObjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteObject", i0)
	r0, _ = returns[0].(*clouddirectory.DeleteObjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) DeleteObjectRequest(i0 *clouddirectory.DeleteObjectInput) (r0 *request.Request, r1 *clouddirectory.DeleteObjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteObjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.DeleteObjectOutput)
	return
}

func (d *CloudDirectoryDouble) DeleteObjectWithContext(i0 context.Context, i1 *clouddirectory.DeleteObjectInput, i2 ...request.Option) (r0 *clouddirectory.DeleteObjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteObjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.DeleteObjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeDeleteObjectWithContext(ctx context.Context, in *clouddirectory.DeleteObjectInput, _ ...request.Option) (*clouddirectory.DeleteObjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteObject cancelled", ctx.Err())
	default:
		return d.DeleteObject(in)
	}
}

func (d *CloudDirectoryDouble) DeleteSchema(i0 *clouddirectory.DeleteSchemaInput) (r0 *clouddirectory.DeleteSchemaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSchema", i0)
	r0, _ = returns[0].(*clouddirectory.DeleteSchemaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) DeleteSchemaRequest(i0 *clouddirectory.DeleteSchemaInput) (r0 *request.Request, r1 *clouddirectory.DeleteSchemaOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSchemaRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.DeleteSchemaOutput)
	return
}

func (d *CloudDirectoryDouble) DeleteSchemaWithContext(i0 context.Context, i1 *clouddirectory.DeleteSchemaInput, i2 ...request.Option) (r0 *clouddirectory.DeleteSchemaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSchemaWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.DeleteSchemaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeDeleteSchemaWithContext(ctx context.Context, in *clouddirectory.DeleteSchemaInput, _ ...request.Option) (*clouddirectory.DeleteSchemaOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteSchema cancelled", ctx.Err())
	default:
		return d.DeleteSchema(in)
	}
}

func (d *CloudDirectoryDouble) DeleteTypedLinkFacet(i0 *clouddirectory.DeleteTypedLinkFacetInput) (r0 *clouddirectory.DeleteTypedLinkFacetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTypedLinkFacet", i0)
	r0, _ = returns[0].(*clouddirectory.DeleteTypedLinkFacetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) DeleteTypedLinkFacetRequest(i0 *clouddirectory.DeleteTypedLinkFacetInput) (r0 *request.Request, r1 *clouddirectory.DeleteTypedLinkFacetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTypedLinkFacetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.DeleteTypedLinkFacetOutput)
	return
}

func (d *CloudDirectoryDouble) DeleteTypedLinkFacetWithContext(i0 context.Context, i1 *clouddirectory.DeleteTypedLinkFacetInput, i2 ...request.Option) (r0 *clouddirectory.DeleteTypedLinkFacetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTypedLinkFacetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.DeleteTypedLinkFacetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeDeleteTypedLinkFacetWithContext(ctx context.Context, in *clouddirectory.DeleteTypedLinkFacetInput, _ ...request.Option) (*clouddirectory.DeleteTypedLinkFacetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTypedLinkFacet cancelled", ctx.Err())
	default:
		return d.DeleteTypedLinkFacet(in)
	}
}

func (d *CloudDirectoryDouble) DetachFromIndex(i0 *clouddirectory.DetachFromIndexInput) (r0 *clouddirectory.DetachFromIndexOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachFromIndex", i0)
	r0, _ = returns[0].(*clouddirectory.DetachFromIndexOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) DetachFromIndexRequest(i0 *clouddirectory.DetachFromIndexInput) (r0 *request.Request, r1 *clouddirectory.DetachFromIndexOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachFromIndexRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.DetachFromIndexOutput)
	return
}

func (d *CloudDirectoryDouble) DetachFromIndexWithContext(i0 context.Context, i1 *clouddirectory.DetachFromIndexInput, i2 ...request.Option) (r0 *clouddirectory.DetachFromIndexOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachFromIndexWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.DetachFromIndexOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeDetachFromIndexWithContext(ctx context.Context, in *clouddirectory.DetachFromIndexInput, _ ...request.Option) (*clouddirectory.DetachFromIndexOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DetachFromIndex cancelled", ctx.Err())
	default:
		return d.DetachFromIndex(in)
	}
}

func (d *CloudDirectoryDouble) DetachObject(i0 *clouddirectory.DetachObjectInput) (r0 *clouddirectory.DetachObjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachObject", i0)
	r0, _ = returns[0].(*clouddirectory.DetachObjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) DetachObjectRequest(i0 *clouddirectory.DetachObjectInput) (r0 *request.Request, r1 *clouddirectory.DetachObjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachObjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.DetachObjectOutput)
	return
}

func (d *CloudDirectoryDouble) DetachObjectWithContext(i0 context.Context, i1 *clouddirectory.DetachObjectInput, i2 ...request.Option) (r0 *clouddirectory.DetachObjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachObjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.DetachObjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeDetachObjectWithContext(ctx context.Context, in *clouddirectory.DetachObjectInput, _ ...request.Option) (*clouddirectory.DetachObjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DetachObject cancelled", ctx.Err())
	default:
		return d.DetachObject(in)
	}
}

func (d *CloudDirectoryDouble) DetachPolicy(i0 *clouddirectory.DetachPolicyInput) (r0 *clouddirectory.DetachPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachPolicy", i0)
	r0, _ = returns[0].(*clouddirectory.DetachPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) DetachPolicyRequest(i0 *clouddirectory.DetachPolicyInput) (r0 *request.Request, r1 *clouddirectory.DetachPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.DetachPolicyOutput)
	return
}

func (d *CloudDirectoryDouble) DetachPolicyWithContext(i0 context.Context, i1 *clouddirectory.DetachPolicyInput, i2 ...request.Option) (r0 *clouddirectory.DetachPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.DetachPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeDetachPolicyWithContext(ctx context.Context, in *clouddirectory.DetachPolicyInput, _ ...request.Option) (*clouddirectory.DetachPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DetachPolicy cancelled", ctx.Err())
	default:
		return d.DetachPolicy(in)
	}
}

func (d *CloudDirectoryDouble) DetachTypedLink(i0 *clouddirectory.DetachTypedLinkInput) (r0 *clouddirectory.DetachTypedLinkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachTypedLink", i0)
	r0, _ = returns[0].(*clouddirectory.DetachTypedLinkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) DetachTypedLinkRequest(i0 *clouddirectory.DetachTypedLinkInput) (r0 *request.Request, r1 *clouddirectory.DetachTypedLinkOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachTypedLinkRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.DetachTypedLinkOutput)
	return
}

func (d *CloudDirectoryDouble) DetachTypedLinkWithContext(i0 context.Context, i1 *clouddirectory.DetachTypedLinkInput, i2 ...request.Option) (r0 *clouddirectory.DetachTypedLinkOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetachTypedLinkWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.DetachTypedLinkOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeDetachTypedLinkWithContext(ctx context.Context, in *clouddirectory.DetachTypedLinkInput, _ ...request.Option) (*clouddirectory.DetachTypedLinkOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DetachTypedLink cancelled", ctx.Err())
	default:
		return d.DetachTypedLink(in)
	}
}

func (d *CloudDirectoryDouble) DisableDirectory(i0 *clouddirectory.DisableDirectoryInput) (r0 *clouddirectory.DisableDirectoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableDirectory", i0)
	r0, _ = returns[0].(*clouddirectory.DisableDirectoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) DisableDirectoryRequest(i0 *clouddirectory.DisableDirectoryInput) (r0 *request.Request, r1 *clouddirectory.DisableDirectoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableDirectoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.DisableDirectoryOutput)
	return
}

func (d *CloudDirectoryDouble) DisableDirectoryWithContext(i0 context.Context, i1 *clouddirectory.DisableDirectoryInput, i2 ...request.Option) (r0 *clouddirectory.DisableDirectoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisableDirectoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.DisableDirectoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeDisableDirectoryWithContext(ctx context.Context, in *clouddirectory.DisableDirectoryInput, _ ...request.Option) (*clouddirectory.DisableDirectoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisableDirectory cancelled", ctx.Err())
	default:
		return d.DisableDirectory(in)
	}
}

func (d *CloudDirectoryDouble) EnableDirectory(i0 *clouddirectory.EnableDirectoryInput) (r0 *clouddirectory.EnableDirectoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableDirectory", i0)
	r0, _ = returns[0].(*clouddirectory.EnableDirectoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) EnableDirectoryRequest(i0 *clouddirectory.EnableDirectoryInput) (r0 *request.Request, r1 *clouddirectory.EnableDirectoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableDirectoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.EnableDirectoryOutput)
	return
}

func (d *CloudDirectoryDouble) EnableDirectoryWithContext(i0 context.Context, i1 *clouddirectory.EnableDirectoryInput, i2 ...request.Option) (r0 *clouddirectory.EnableDirectoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EnableDirectoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.EnableDirectoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeEnableDirectoryWithContext(ctx context.Context, in *clouddirectory.EnableDirectoryInput, _ ...request.Option) (*clouddirectory.EnableDirectoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "EnableDirectory cancelled", ctx.Err())
	default:
		return d.EnableDirectory(in)
	}
}

func (d *CloudDirectoryDouble) GetAppliedSchemaVersion(i0 *clouddirectory.GetAppliedSchemaVersionInput) (r0 *clouddirectory.GetAppliedSchemaVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAppliedSchemaVersion", i0)
	r0, _ = returns[0].(*clouddirectory.GetAppliedSchemaVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) GetAppliedSchemaVersionRequest(i0 *clouddirectory.GetAppliedSchemaVersionInput) (r0 *request.Request, r1 *clouddirectory.GetAppliedSchemaVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAppliedSchemaVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.GetAppliedSchemaVersionOutput)
	return
}

func (d *CloudDirectoryDouble) GetAppliedSchemaVersionWithContext(i0 context.Context, i1 *clouddirectory.GetAppliedSchemaVersionInput, i2 ...request.Option) (r0 *clouddirectory.GetAppliedSchemaVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAppliedSchemaVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.GetAppliedSchemaVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeGetAppliedSchemaVersionWithContext(ctx context.Context, in *clouddirectory.GetAppliedSchemaVersionInput, _ ...request.Option) (*clouddirectory.GetAppliedSchemaVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetAppliedSchemaVersion cancelled", ctx.Err())
	default:
		return d.GetAppliedSchemaVersion(in)
	}
}

func (d *CloudDirectoryDouble) GetDirectory(i0 *clouddirectory.GetDirectoryInput) (r0 *clouddirectory.GetDirectoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDirectory", i0)
	r0, _ = returns[0].(*clouddirectory.GetDirectoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) GetDirectoryRequest(i0 *clouddirectory.GetDirectoryInput) (r0 *request.Request, r1 *clouddirectory.GetDirectoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDirectoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.GetDirectoryOutput)
	return
}

func (d *CloudDirectoryDouble) GetDirectoryWithContext(i0 context.Context, i1 *clouddirectory.GetDirectoryInput, i2 ...request.Option) (r0 *clouddirectory.GetDirectoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDirectoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.GetDirectoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeGetDirectoryWithContext(ctx context.Context, in *clouddirectory.GetDirectoryInput, _ ...request.Option) (*clouddirectory.GetDirectoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDirectory cancelled", ctx.Err())
	default:
		return d.GetDirectory(in)
	}
}

func (d *CloudDirectoryDouble) GetFacet(i0 *clouddirectory.GetFacetInput) (r0 *clouddirectory.GetFacetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFacet", i0)
	r0, _ = returns[0].(*clouddirectory.GetFacetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) GetFacetRequest(i0 *clouddirectory.GetFacetInput) (r0 *request.Request, r1 *clouddirectory.GetFacetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFacetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.GetFacetOutput)
	return
}

func (d *CloudDirectoryDouble) GetFacetWithContext(i0 context.Context, i1 *clouddirectory.GetFacetInput, i2 ...request.Option) (r0 *clouddirectory.GetFacetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFacetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.GetFacetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeGetFacetWithContext(ctx context.Context, in *clouddirectory.GetFacetInput, _ ...request.Option) (*clouddirectory.GetFacetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetFacet cancelled", ctx.Err())
	default:
		return d.GetFacet(in)
	}
}

func (d *CloudDirectoryDouble) GetLinkAttributes(i0 *clouddirectory.GetLinkAttributesInput) (r0 *clouddirectory.GetLinkAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLinkAttributes", i0)
	r0, _ = returns[0].(*clouddirectory.GetLinkAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) GetLinkAttributesRequest(i0 *clouddirectory.GetLinkAttributesInput) (r0 *request.Request, r1 *clouddirectory.GetLinkAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLinkAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.GetLinkAttributesOutput)
	return
}

func (d *CloudDirectoryDouble) GetLinkAttributesWithContext(i0 context.Context, i1 *clouddirectory.GetLinkAttributesInput, i2 ...request.Option) (r0 *clouddirectory.GetLinkAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLinkAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.GetLinkAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeGetLinkAttributesWithContext(ctx context.Context, in *clouddirectory.GetLinkAttributesInput, _ ...request.Option) (*clouddirectory.GetLinkAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetLinkAttributes cancelled", ctx.Err())
	default:
		return d.GetLinkAttributes(in)
	}
}

func (d *CloudDirectoryDouble) GetObjectAttributes(i0 *clouddirectory.GetObjectAttributesInput) (r0 *clouddirectory.GetObjectAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetObjectAttributes", i0)
	r0, _ = returns[0].(*clouddirectory.GetObjectAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) GetObjectAttributesRequest(i0 *clouddirectory.GetObjectAttributesInput) (r0 *request.Request, r1 *clouddirectory.GetObjectAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetObjectAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.GetObjectAttributesOutput)
	return
}

func (d *CloudDirectoryDouble) GetObjectAttributesWithContext(i0 context.Context, i1 *clouddirectory.GetObjectAttributesInput, i2 ...request.Option) (r0 *clouddirectory.GetObjectAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetObjectAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.GetObjectAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeGetObjectAttributesWithContext(ctx context.Context, in *clouddirectory.GetObjectAttributesInput, _ ...request.Option) (*clouddirectory.GetObjectAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetObjectAttributes cancelled", ctx.Err())
	default:
		return d.GetObjectAttributes(in)
	}
}

func (d *CloudDirectoryDouble) GetObjectInformation(i0 *clouddirectory.GetObjectInformationInput) (r0 *clouddirectory.GetObjectInformationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetObjectInformation", i0)
	r0, _ = returns[0].(*clouddirectory.GetObjectInformationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) GetObjectInformationRequest(i0 *clouddirectory.GetObjectInformationInput) (r0 *request.Request, r1 *clouddirectory.GetObjectInformationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetObjectInformationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.GetObjectInformationOutput)
	return
}

func (d *CloudDirectoryDouble) GetObjectInformationWithContext(i0 context.Context, i1 *clouddirectory.GetObjectInformationInput, i2 ...request.Option) (r0 *clouddirectory.GetObjectInformationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetObjectInformationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.GetObjectInformationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeGetObjectInformationWithContext(ctx context.Context, in *clouddirectory.GetObjectInformationInput, _ ...request.Option) (*clouddirectory.GetObjectInformationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetObjectInformation cancelled", ctx.Err())
	default:
		return d.GetObjectInformation(in)
	}
}

func (d *CloudDirectoryDouble) GetSchemaAsJson(i0 *clouddirectory.GetSchemaAsJsonInput) (r0 *clouddirectory.GetSchemaAsJsonOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSchemaAsJson", i0)
	r0, _ = returns[0].(*clouddirectory.GetSchemaAsJsonOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) GetSchemaAsJsonRequest(i0 *clouddirectory.GetSchemaAsJsonInput) (r0 *request.Request, r1 *clouddirectory.GetSchemaAsJsonOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSchemaAsJsonRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.GetSchemaAsJsonOutput)
	return
}

func (d *CloudDirectoryDouble) GetSchemaAsJsonWithContext(i0 context.Context, i1 *clouddirectory.GetSchemaAsJsonInput, i2 ...request.Option) (r0 *clouddirectory.GetSchemaAsJsonOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSchemaAsJsonWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.GetSchemaAsJsonOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeGetSchemaAsJsonWithContext(ctx context.Context, in *clouddirectory.GetSchemaAsJsonInput, _ ...request.Option) (*clouddirectory.GetSchemaAsJsonOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetSchemaAsJson cancelled", ctx.Err())
	default:
		return d.GetSchemaAsJson(in)
	}
}

func (d *CloudDirectoryDouble) GetTypedLinkFacetInformation(i0 *clouddirectory.GetTypedLinkFacetInformationInput) (r0 *clouddirectory.GetTypedLinkFacetInformationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTypedLinkFacetInformation", i0)
	r0, _ = returns[0].(*clouddirectory.GetTypedLinkFacetInformationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) GetTypedLinkFacetInformationRequest(i0 *clouddirectory.GetTypedLinkFacetInformationInput) (r0 *request.Request, r1 *clouddirectory.GetTypedLinkFacetInformationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTypedLinkFacetInformationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.GetTypedLinkFacetInformationOutput)
	return
}

func (d *CloudDirectoryDouble) GetTypedLinkFacetInformationWithContext(i0 context.Context, i1 *clouddirectory.GetTypedLinkFacetInformationInput, i2 ...request.Option) (r0 *clouddirectory.GetTypedLinkFacetInformationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTypedLinkFacetInformationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.GetTypedLinkFacetInformationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeGetTypedLinkFacetInformationWithContext(ctx context.Context, in *clouddirectory.GetTypedLinkFacetInformationInput, _ ...request.Option) (*clouddirectory.GetTypedLinkFacetInformationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetTypedLinkFacetInformation cancelled", ctx.Err())
	default:
		return d.GetTypedLinkFacetInformation(in)
	}
}

func (d *CloudDirectoryDouble) ListAppliedSchemaArns(i0 *clouddirectory.ListAppliedSchemaArnsInput) (r0 *clouddirectory.ListAppliedSchemaArnsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAppliedSchemaArns", i0)
	r0, _ = returns[0].(*clouddirectory.ListAppliedSchemaArnsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) ListAppliedSchemaArnsPages(i0 *clouddirectory.ListAppliedSchemaArnsInput, i1 func(*clouddirectory.ListAppliedSchemaArnsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAppliedSchemaArnsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListAppliedSchemaArnsPages(in *clouddirectory.ListAppliedSchemaArnsInput, pager func(*clouddirectory.ListAppliedSchemaArnsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListAppliedSchemaArns", paginators, in, pager)
}

func (d *CloudDirectoryDouble) ListAppliedSchemaArnsPagesWithContext(i0 context.Context, i1 *clouddirectory.ListAppliedSchemaArnsInput, i2 func(*clouddirectory.ListAppliedSchemaArnsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAppliedSchemaArnsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListAppliedSchemaArnsPagesWithContext(ctx context.Context, in *clouddirectory.ListAppliedSchemaArnsInput, pager func(*clouddirectory.ListAppliedSchemaArnsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListAppliedSchemaArns", paginators, ctx, in, pager, options...)
}

func (d *CloudDirectoryDouble) ListAppliedSchemaArnsRequest(i0 *clouddirectory.ListAppliedSchemaArnsInput) (r0 *request.Request, r1 *clouddirectory.ListAppliedSchemaArnsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAppliedSchemaArnsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.ListAppliedSchemaArnsOutput)
	return
}

func (d *CloudDirectoryDouble) ListAppliedSchemaArnsWithContext(i0 context.Context, i1 *clouddirectory.ListAppliedSchemaArnsInput, i2 ...request.Option) (r0 *clouddirectory.ListAppliedSchemaArnsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAppliedSchemaArnsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.ListAppliedSchemaArnsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListAppliedSchemaArnsWithContext(ctx context.Context, in *clouddirectory.ListAppliedSchemaArnsInput, _ ...request.Option) (*clouddirectory.ListAppliedSchemaArnsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAppliedSchemaArns cancelled", ctx.Err())
	default:
		return d.ListAppliedSchemaArns(in)
	}
}

func (d *CloudDirectoryDouble) ListAttachedIndices(i0 *clouddirectory.ListAttachedIndicesInput) (r0 *clouddirectory.ListAttachedIndicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAttachedIndices", i0)
	r0, _ = returns[0].(*clouddirectory.ListAttachedIndicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) ListAttachedIndicesPages(i0 *clouddirectory.ListAttachedIndicesInput, i1 func(*clouddirectory.ListAttachedIndicesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAttachedIndicesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListAttachedIndicesPages(in *clouddirectory.ListAttachedIndicesInput, pager func(*clouddirectory.ListAttachedIndicesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListAttachedIndices", paginators, in, pager)
}

func (d *CloudDirectoryDouble) ListAttachedIndicesPagesWithContext(i0 context.Context, i1 *clouddirectory.ListAttachedIndicesInput, i2 func(*clouddirectory.ListAttachedIndicesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAttachedIndicesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListAttachedIndicesPagesWithContext(ctx context.Context, in *clouddirectory.ListAttachedIndicesInput, pager func(*clouddirectory.ListAttachedIndicesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListAttachedIndices", paginators, ctx, in, pager, options...)
}

func (d *CloudDirectoryDouble) ListAttachedIndicesRequest(i0 *clouddirectory.ListAttachedIndicesInput) (r0 *request.Request, r1 *clouddirectory.ListAttachedIndicesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAttachedIndicesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.ListAttachedIndicesOutput)
	return
}

func (d *CloudDirectoryDouble) ListAttachedIndicesWithContext(i0 context.Context, i1 *clouddirectory.ListAttachedIndicesInput, i2 ...request.Option) (r0 *clouddirectory.ListAttachedIndicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAttachedIndicesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.ListAttachedIndicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListAttachedIndicesWithContext(ctx context.Context, in *clouddirectory.ListAttachedIndicesInput, _ ...request.Option) (*clouddirectory.ListAttachedIndicesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAttachedIndices cancelled", ctx.Err())
	default:
		return d.ListAttachedIndices(in)
	}
}

func (d *CloudDirectoryDouble) ListDevelopmentSchemaArns(i0 *clouddirectory.ListDevelopmentSchemaArnsInput) (r0 *clouddirectory.ListDevelopmentSchemaArnsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDevelopmentSchemaArns", i0)
	r0, _ = returns[0].(*clouddirectory.ListDevelopmentSchemaArnsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) ListDevelopmentSchemaArnsPages(i0 *clouddirectory.ListDevelopmentSchemaArnsInput, i1 func(*clouddirectory.ListDevelopmentSchemaArnsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDevelopmentSchemaArnsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListDevelopmentSchemaArnsPages(in *clouddirectory.ListDevelopmentSchemaArnsInput, pager func(*clouddirectory.ListDevelopmentSchemaArnsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListDevelopmentSchemaArns", paginators, in, pager)
}

func (d *CloudDirectoryDouble) ListDevelopmentSchemaArnsPagesWithContext(i0 context.Context, i1 *clouddirectory.ListDevelopmentSchemaArnsInput, i2 func(*clouddirectory.ListDevelopmentSchemaArnsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDevelopmentSchemaArnsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListDevelopmentSchemaArnsPagesWithContext(ctx context.Context, in *clouddirectory.ListDevelopmentSchemaArnsInput, pager func(*clouddirectory.ListDevelopmentSchemaArnsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListDevelopmentSchemaArns", paginators, ctx, in, pager, options...)
}

func (d *CloudDirectoryDouble) ListDevelopmentSchemaArnsRequest(i0 *clouddirectory.ListDevelopmentSchemaArnsInput) (r0 *request.Request, r1 *clouddirectory.ListDevelopmentSchemaArnsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDevelopmentSchemaArnsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.ListDevelopmentSchemaArnsOutput)
	return
}

func (d *CloudDirectoryDouble) ListDevelopmentSchemaArnsWithContext(i0 context.Context, i1 *clouddirectory.ListDevelopmentSchemaArnsInput, i2 ...request.Option) (r0 *clouddirectory.ListDevelopmentSchemaArnsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDevelopmentSchemaArnsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.ListDevelopmentSchemaArnsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListDevelopmentSchemaArnsWithContext(ctx context.Context, in *clouddirectory.ListDevelopmentSchemaArnsInput, _ ...request.Option) (*clouddirectory.ListDevelopmentSchemaArnsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDevelopmentSchemaArns cancelled", ctx.Err())
	default:
		return d.ListDevelopmentSchemaArns(in)
	}
}

func (d *CloudDirectoryDouble) ListDirectories(i0 *clouddirectory.ListDirectoriesInput) (r0 *clouddirectory.ListDirectoriesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDirectories", i0)
	r0, _ = returns[0].(*clouddirectory.ListDirectoriesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) ListDirectoriesPages(i0 *clouddirectory.ListDirectoriesInput, i1 func(*clouddirectory.ListDirectoriesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDirectoriesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListDirectoriesPages(in *clouddirectory.ListDirectoriesInput, pager func(*clouddirectory.ListDirectoriesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListDirectories", paginators, in, pager)
}

func (d *CloudDirectoryDouble) ListDirectoriesPagesWithContext(i0 context.Context, i1 *clouddirectory.ListDirectoriesInput, i2 func(*clouddirectory.ListDirectoriesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDirectoriesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListDirectoriesPagesWithContext(ctx context.Context, in *clouddirectory.ListDirectoriesInput, pager func(*clouddirectory.ListDirectoriesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListDirectories", paginators, ctx, in, pager, options...)
}

func (d *CloudDirectoryDouble) ListDirectoriesRequest(i0 *clouddirectory.ListDirectoriesInput) (r0 *request.Request, r1 *clouddirectory.ListDirectoriesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDirectoriesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.ListDirectoriesOutput)
	return
}

func (d *CloudDirectoryDouble) ListDirectoriesWithContext(i0 context.Context, i1 *clouddirectory.ListDirectoriesInput, i2 ...request.Option) (r0 *clouddirectory.ListDirectoriesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDirectoriesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.ListDirectoriesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListDirectoriesWithContext(ctx context.Context, in *clouddirectory.ListDirectoriesInput, _ ...request.Option) (*clouddirectory.ListDirectoriesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDirectories cancelled", ctx.Err())
	default:
		return d.ListDirectories(in)
	}
}

func (d *CloudDirectoryDouble) ListFacetAttributes(i0 *clouddirectory.ListFacetAttributesInput) (r0 *clouddirectory.ListFacetAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFacetAttributes", i0)
	r0, _ = returns[0].(*clouddirectory.ListFacetAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) ListFacetAttributesPages(i0 *clouddirectory.ListFacetAttributesInput, i1 func(*clouddirectory.ListFacetAttributesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFacetAttributesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListFacetAttributesPages(in *clouddirectory.ListFacetAttributesInput, pager func(*clouddirectory.ListFacetAttributesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListFacetAttributes", paginators, in, pager)
}

func (d *CloudDirectoryDouble) ListFacetAttributesPagesWithContext(i0 context.Context, i1 *clouddirectory.ListFacetAttributesInput, i2 func(*clouddirectory.ListFacetAttributesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFacetAttributesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListFacetAttributesPagesWithContext(ctx context.Context, in *clouddirectory.ListFacetAttributesInput, pager func(*clouddirectory.ListFacetAttributesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListFacetAttributes", paginators, ctx, in, pager, options...)
}

func (d *CloudDirectoryDouble) ListFacetAttributesRequest(i0 *clouddirectory.ListFacetAttributesInput) (r0 *request.Request, r1 *clouddirectory.ListFacetAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFacetAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.ListFacetAttributesOutput)
	return
}

func (d *CloudDirectoryDouble) ListFacetAttributesWithContext(i0 context.Context, i1 *clouddirectory.ListFacetAttributesInput, i2 ...request.Option) (r0 *clouddirectory.ListFacetAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFacetAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.ListFacetAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListFacetAttributesWithContext(ctx context.Context, in *clouddirectory.ListFacetAttributesInput, _ ...request.Option) (*clouddirectory.ListFacetAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListFacetAttributes cancelled", ctx.Err())
	default:
		return d.ListFacetAttributes(in)
	}
}

func (d *CloudDirectoryDouble) ListFacetNames(i0 *clouddirectory.ListFacetNamesInput) (r0 *clouddirectory.ListFacetNamesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFacetNames", i0)
	r0, _ = returns[0].(*clouddirectory.ListFacetNamesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) ListFacetNamesPages(i0 *clouddirectory.ListFacetNamesInput, i1 func(*clouddirectory.ListFacetNamesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFacetNamesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListFacetNamesPages(in *clouddirectory.ListFacetNamesInput, pager func(*clouddirectory.ListFacetNamesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListFacetNames", paginators, in, pager)
}

func (d *CloudDirectoryDouble) ListFacetNamesPagesWithContext(i0 context.Context, i1 *clouddirectory.ListFacetNamesInput, i2 func(*clouddirectory.ListFacetNamesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFacetNamesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListFacetNamesPagesWithContext(ctx context.Context, in *clouddirectory.ListFacetNamesInput, pager func(*clouddirectory.ListFacetNamesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListFacetNames", paginators, ctx, in, pager, options...)
}

func (d *CloudDirectoryDouble) ListFacetNamesRequest(i0 *clouddirectory.ListFacetNamesInput) (r0 *request.Request, r1 *clouddirectory.ListFacetNamesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFacetNamesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.ListFacetNamesOutput)
	return
}

func (d *CloudDirectoryDouble) ListFacetNamesWithContext(i0 context.Context, i1 *clouddirectory.ListFacetNamesInput, i2 ...request.Option) (r0 *clouddirectory.ListFacetNamesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFacetNamesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.ListFacetNamesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListFacetNamesWithContext(ctx context.Context, in *clouddirectory.ListFacetNamesInput, _ ...request.Option) (*clouddirectory.ListFacetNamesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListFacetNames cancelled", ctx.Err())
	default:
		return d.ListFacetNames(in)
	}
}

func (d *CloudDirectoryDouble) ListIncomingTypedLinks(i0 *clouddirectory.ListIncomingTypedLinksInput) (r0 *clouddirectory.ListIncomingTypedLinksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIncomingTypedLinks", i0)
	r0, _ = returns[0].(*clouddirectory.ListIncomingTypedLinksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) ListIncomingTypedLinksRequest(i0 *clouddirectory.ListIncomingTypedLinksInput) (r0 *request.Request, r1 *clouddirectory.ListIncomingTypedLinksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIncomingTypedLinksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.ListIncomingTypedLinksOutput)
	return
}

func (d *CloudDirectoryDouble) ListIncomingTypedLinksWithContext(i0 context.Context, i1 *clouddirectory.ListIncomingTypedLinksInput, i2 ...request.Option) (r0 *clouddirectory.ListIncomingTypedLinksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIncomingTypedLinksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.ListIncomingTypedLinksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListIncomingTypedLinksWithContext(ctx context.Context, in *clouddirectory.ListIncomingTypedLinksInput, _ ...request.Option) (*clouddirectory.ListIncomingTypedLinksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListIncomingTypedLinks cancelled", ctx.Err())
	default:
		return d.ListIncomingTypedLinks(in)
	}
}

func (d *CloudDirectoryDouble) ListIndex(i0 *clouddirectory.ListIndexInput) (r0 *clouddirectory.ListIndexOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIndex", i0)
	r0, _ = returns[0].(*clouddirectory.ListIndexOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) ListIndexPages(i0 *clouddirectory.ListIndexInput, i1 func(*clouddirectory.ListIndexOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIndexPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListIndexPages(in *clouddirectory.ListIndexInput, pager func(*clouddirectory.ListIndexOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListIndex", paginators, in, pager)
}

func (d *CloudDirectoryDouble) ListIndexPagesWithContext(i0 context.Context, i1 *clouddirectory.ListIndexInput, i2 func(*clouddirectory.ListIndexOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIndexPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListIndexPagesWithContext(ctx context.Context, in *clouddirectory.ListIndexInput, pager func(*clouddirectory.ListIndexOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListIndex", paginators, ctx, in, pager, options...)
}

func (d *CloudDirectoryDouble) ListIndexRequest(i0 *clouddirectory.ListIndexInput) (r0 *request.Request, r1 *clouddirectory.ListIndexOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIndexRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.ListIndexOutput)
	return
}

func (d *CloudDirectoryDouble) ListIndexWithContext(i0 context.Context, i1 *clouddirectory.ListIndexInput, i2 ...request.Option) (r0 *clouddirectory.ListIndexOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIndexWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.ListIndexOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListIndexWithContext(ctx context.Context, in *clouddirectory.ListIndexInput, _ ...request.Option) (*clouddirectory.ListIndexOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListIndex cancelled", ctx.Err())
	default:
		return d.ListIndex(in)
	}
}

func (d *CloudDirectoryDouble) ListManagedSchemaArns(i0 *clouddirectory.ListManagedSchemaArnsInput) (r0 *clouddirectory.ListManagedSchemaArnsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListManagedSchemaArns", i0)
	r0, _ = returns[0].(*clouddirectory.ListManagedSchemaArnsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) ListManagedSchemaArnsPages(i0 *clouddirectory.ListManagedSchemaArnsInput, i1 func(*clouddirectory.ListManagedSchemaArnsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListManagedSchemaArnsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListManagedSchemaArnsPages(in *clouddirectory.ListManagedSchemaArnsInput, pager func(*clouddirectory.ListManagedSchemaArnsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListManagedSchemaArns", paginators, in, pager)
}

func (d *CloudDirectoryDouble) ListManagedSchemaArnsPagesWithContext(i0 context.Context, i1 *clouddirectory.ListManagedSchemaArnsInput, i2 func(*clouddirectory.ListManagedSchemaArnsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListManagedSchemaArnsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListManagedSchemaArnsPagesWithContext(ctx context.Context, in *clouddirectory.ListManagedSchemaArnsInput, pager func(*clouddirectory.ListManagedSchemaArnsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListManagedSchemaArns", paginators, ctx, in, pager, options...)
}

func (d *CloudDirectoryDouble) ListManagedSchemaArnsRequest(i0 *clouddirectory.ListManagedSchemaArnsInput) (r0 *request.Request, r1 *clouddirectory.ListManagedSchemaArnsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListManagedSchemaArnsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.ListManagedSchemaArnsOutput)
	return
}

func (d *CloudDirectoryDouble) ListManagedSchemaArnsWithContext(i0 context.Context, i1 *clouddirectory.ListManagedSchemaArnsInput, i2 ...request.Option) (r0 *clouddirectory.ListManagedSchemaArnsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListManagedSchemaArnsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.ListManagedSchemaArnsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListManagedSchemaArnsWithContext(ctx context.Context, in *clouddirectory.ListManagedSchemaArnsInput, _ ...request.Option) (*clouddirectory.ListManagedSchemaArnsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListManagedSchemaArns cancelled", ctx.Err())
	default:
		return d.ListManagedSchemaArns(in)
	}
}

func (d *CloudDirectoryDouble) ListObjectAttributes(i0 *clouddirectory.ListObjectAttributesInput) (r0 *clouddirectory.ListObjectAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectAttributes", i0)
	r0, _ = returns[0].(*clouddirectory.ListObjectAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) ListObjectAttributesPages(i0 *clouddirectory.ListObjectAttributesInput, i1 func(*clouddirectory.ListObjectAttributesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectAttributesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListObjectAttributesPages(in *clouddirectory.ListObjectAttributesInput, pager func(*clouddirectory.ListObjectAttributesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListObjectAttributes", paginators, in, pager)
}

func (d *CloudDirectoryDouble) ListObjectAttributesPagesWithContext(i0 context.Context, i1 *clouddirectory.ListObjectAttributesInput, i2 func(*clouddirectory.ListObjectAttributesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectAttributesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListObjectAttributesPagesWithContext(ctx context.Context, in *clouddirectory.ListObjectAttributesInput, pager func(*clouddirectory.ListObjectAttributesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListObjectAttributes", paginators, ctx, in, pager, options...)
}

func (d *CloudDirectoryDouble) ListObjectAttributesRequest(i0 *clouddirectory.ListObjectAttributesInput) (r0 *request.Request, r1 *clouddirectory.ListObjectAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.ListObjectAttributesOutput)
	return
}

func (d *CloudDirectoryDouble) ListObjectAttributesWithContext(i0 context.Context, i1 *clouddirectory.ListObjectAttributesInput, i2 ...request.Option) (r0 *clouddirectory.ListObjectAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.ListObjectAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListObjectAttributesWithContext(ctx context.Context, in *clouddirectory.ListObjectAttributesInput, _ ...request.Option) (*clouddirectory.ListObjectAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListObjectAttributes cancelled", ctx.Err())
	default:
		return d.ListObjectAttributes(in)
	}
}

func (d *CloudDirectoryDouble) ListObjectChildren(i0 *clouddirectory.ListObjectChildrenInput) (r0 *clouddirectory.ListObjectChildrenOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectChildren", i0)
	r0, _ = returns[0].(*clouddirectory.ListObjectChildrenOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) ListObjectChildrenPages(i0 *clouddirectory.ListObjectChildrenInput, i1 func(*clouddirectory.ListObjectChildrenOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectChildrenPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListObjectChildrenPages(in *clouddirectory.ListObjectChildrenInput, pager func(*clouddirectory.ListObjectChildrenOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListObjectChildren", paginators, in, pager)
}

func (d *CloudDirectoryDouble) ListObjectChildrenPagesWithContext(i0 context.Context, i1 *clouddirectory.ListObjectChildrenInput, i2 func(*clouddirectory.ListObjectChildrenOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectChildrenPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListObjectChildrenPagesWithContext(ctx context.Context, in *clouddirectory.ListObjectChildrenInput, pager func(*clouddirectory.ListObjectChildrenOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListObjectChildren", paginators, ctx, in, pager, options...)
}

func (d *CloudDirectoryDouble) ListObjectChildrenRequest(i0 *clouddirectory.ListObjectChildrenInput) (r0 *request.Request, r1 *clouddirectory.ListObjectChildrenOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectChildrenRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.ListObjectChildrenOutput)
	return
}

func (d *CloudDirectoryDouble) ListObjectChildrenWithContext(i0 context.Context, i1 *clouddirectory.ListObjectChildrenInput, i2 ...request.Option) (r0 *clouddirectory.ListObjectChildrenOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectChildrenWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.ListObjectChildrenOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListObjectChildrenWithContext(ctx context.Context, in *clouddirectory.ListObjectChildrenInput, _ ...request.Option) (*clouddirectory.ListObjectChildrenOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListObjectChildren cancelled", ctx.Err())
	default:
		return d.ListObjectChildren(in)
	}
}

func (d *CloudDirectoryDouble) ListObjectParentPaths(i0 *clouddirectory.ListObjectParentPathsInput) (r0 *clouddirectory.ListObjectParentPathsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectParentPaths", i0)
	r0, _ = returns[0].(*clouddirectory.ListObjectParentPathsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) ListObjectParentPathsPages(i0 *clouddirectory.ListObjectParentPathsInput, i1 func(*clouddirectory.ListObjectParentPathsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectParentPathsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListObjectParentPathsPages(in *clouddirectory.ListObjectParentPathsInput, pager func(*clouddirectory.ListObjectParentPathsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListObjectParentPaths", paginators, in, pager)
}

func (d *CloudDirectoryDouble) ListObjectParentPathsPagesWithContext(i0 context.Context, i1 *clouddirectory.ListObjectParentPathsInput, i2 func(*clouddirectory.ListObjectParentPathsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectParentPathsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListObjectParentPathsPagesWithContext(ctx context.Context, in *clouddirectory.ListObjectParentPathsInput, pager func(*clouddirectory.ListObjectParentPathsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListObjectParentPaths", paginators, ctx, in, pager, options...)
}

func (d *CloudDirectoryDouble) ListObjectParentPathsRequest(i0 *clouddirectory.ListObjectParentPathsInput) (r0 *request.Request, r1 *clouddirectory.ListObjectParentPathsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectParentPathsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.ListObjectParentPathsOutput)
	return
}

func (d *CloudDirectoryDouble) ListObjectParentPathsWithContext(i0 context.Context, i1 *clouddirectory.ListObjectParentPathsInput, i2 ...request.Option) (r0 *clouddirectory.ListObjectParentPathsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectParentPathsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.ListObjectParentPathsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListObjectParentPathsWithContext(ctx context.Context, in *clouddirectory.ListObjectParentPathsInput, _ ...request.Option) (*clouddirectory.ListObjectParentPathsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListObjectParentPaths cancelled", ctx.Err())
	default:
		return d.ListObjectParentPaths(in)
	}
}

func (d *CloudDirectoryDouble) ListObjectParents(i0 *clouddirectory.ListObjectParentsInput) (r0 *clouddirectory.ListObjectParentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectParents", i0)
	r0, _ = returns[0].(*clouddirectory.ListObjectParentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) ListObjectParentsPages(i0 *clouddirectory.ListObjectParentsInput, i1 func(*clouddirectory.ListObjectParentsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectParentsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListObjectParentsPages(in *clouddirectory.ListObjectParentsInput, pager func(*clouddirectory.ListObjectParentsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListObjectParents", paginators, in, pager)
}

func (d *CloudDirectoryDouble) ListObjectParentsPagesWithContext(i0 context.Context, i1 *clouddirectory.ListObjectParentsInput, i2 func(*clouddirectory.ListObjectParentsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectParentsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListObjectParentsPagesWithContext(ctx context.Context, in *clouddirectory.ListObjectParentsInput, pager func(*clouddirectory.ListObjectParentsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListObjectParents", paginators, ctx, in, pager, options...)
}

func (d *CloudDirectoryDouble) ListObjectParentsRequest(i0 *clouddirectory.ListObjectParentsInput) (r0 *request.Request, r1 *clouddirectory.ListObjectParentsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectParentsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.ListObjectParentsOutput)
	return
}

func (d *CloudDirectoryDouble) ListObjectParentsWithContext(i0 context.Context, i1 *clouddirectory.ListObjectParentsInput, i2 ...request.Option) (r0 *clouddirectory.ListObjectParentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectParentsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.ListObjectParentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListObjectParentsWithContext(ctx context.Context, in *clouddirectory.ListObjectParentsInput, _ ...request.Option) (*clouddirectory.ListObjectParentsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListObjectParents cancelled", ctx.Err())
	default:
		return d.ListObjectParents(in)
	}
}

func (d *CloudDirectoryDouble) ListObjectPolicies(i0 *clouddirectory.ListObjectPoliciesInput) (r0 *clouddirectory.ListObjectPoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectPolicies", i0)
	r0, _ = returns[0].(*clouddirectory.ListObjectPoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) ListObjectPoliciesPages(i0 *clouddirectory.ListObjectPoliciesInput, i1 func(*clouddirectory.ListObjectPoliciesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectPoliciesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListObjectPoliciesPages(in *clouddirectory.ListObjectPoliciesInput, pager func(*clouddirectory.ListObjectPoliciesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListObjectPolicies", paginators, in, pager)
}

func (d *CloudDirectoryDouble) ListObjectPoliciesPagesWithContext(i0 context.Context, i1 *clouddirectory.ListObjectPoliciesInput, i2 func(*clouddirectory.ListObjectPoliciesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectPoliciesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListObjectPoliciesPagesWithContext(ctx context.Context, in *clouddirectory.ListObjectPoliciesInput, pager func(*clouddirectory.ListObjectPoliciesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListObjectPolicies", paginators, ctx, in, pager, options...)
}

func (d *CloudDirectoryDouble) ListObjectPoliciesRequest(i0 *clouddirectory.ListObjectPoliciesInput) (r0 *request.Request, r1 *clouddirectory.ListObjectPoliciesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectPoliciesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.ListObjectPoliciesOutput)
	return
}

func (d *CloudDirectoryDouble) ListObjectPoliciesWithContext(i0 context.Context, i1 *clouddirectory.ListObjectPoliciesInput, i2 ...request.Option) (r0 *clouddirectory.ListObjectPoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListObjectPoliciesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.ListObjectPoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListObjectPoliciesWithContext(ctx context.Context, in *clouddirectory.ListObjectPoliciesInput, _ ...request.Option) (*clouddirectory.ListObjectPoliciesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListObjectPolicies cancelled", ctx.Err())
	default:
		return d.ListObjectPolicies(in)
	}
}

func (d *CloudDirectoryDouble) ListOutgoingTypedLinks(i0 *clouddirectory.ListOutgoingTypedLinksInput) (r0 *clouddirectory.ListOutgoingTypedLinksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOutgoingTypedLinks", i0)
	r0, _ = returns[0].(*clouddirectory.ListOutgoingTypedLinksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) ListOutgoingTypedLinksRequest(i0 *clouddirectory.ListOutgoingTypedLinksInput) (r0 *request.Request, r1 *clouddirectory.ListOutgoingTypedLinksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOutgoingTypedLinksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.ListOutgoingTypedLinksOutput)
	return
}

func (d *CloudDirectoryDouble) ListOutgoingTypedLinksWithContext(i0 context.Context, i1 *clouddirectory.ListOutgoingTypedLinksInput, i2 ...request.Option) (r0 *clouddirectory.ListOutgoingTypedLinksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListOutgoingTypedLinksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.ListOutgoingTypedLinksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListOutgoingTypedLinksWithContext(ctx context.Context, in *clouddirectory.ListOutgoingTypedLinksInput, _ ...request.Option) (*clouddirectory.ListOutgoingTypedLinksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListOutgoingTypedLinks cancelled", ctx.Err())
	default:
		return d.ListOutgoingTypedLinks(in)
	}
}

func (d *CloudDirectoryDouble) ListPolicyAttachments(i0 *clouddirectory.ListPolicyAttachmentsInput) (r0 *clouddirectory.ListPolicyAttachmentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPolicyAttachments", i0)
	r0, _ = returns[0].(*clouddirectory.ListPolicyAttachmentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) ListPolicyAttachmentsPages(i0 *clouddirectory.ListPolicyAttachmentsInput, i1 func(*clouddirectory.ListPolicyAttachmentsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPolicyAttachmentsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListPolicyAttachmentsPages(in *clouddirectory.ListPolicyAttachmentsInput, pager func(*clouddirectory.ListPolicyAttachmentsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListPolicyAttachments", paginators, in, pager)
}

func (d *CloudDirectoryDouble) ListPolicyAttachmentsPagesWithContext(i0 context.Context, i1 *clouddirectory.ListPolicyAttachmentsInput, i2 func(*clouddirectory.ListPolicyAttachmentsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPolicyAttachmentsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListPolicyAttachmentsPagesWithContext(ctx context.Context, in *clouddirectory.ListPolicyAttachmentsInput, pager func(*clouddirectory.ListPolicyAttachmentsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListPolicyAttachments", paginators, ctx, in, pager, options...)
}

func (d *CloudDirectoryDouble) ListPolicyAttachmentsRequest(i0 *clouddirectory.ListPolicyAttachmentsInput) (r0 *request.Request, r1 *clouddirectory.ListPolicyAttachmentsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPolicyAttachmentsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.ListPolicyAttachmentsOutput)
	return
}

func (d *CloudDirectoryDouble) ListPolicyAttachmentsWithContext(i0 context.Context, i1 *clouddirectory.ListPolicyAttachmentsInput, i2 ...request.Option) (r0 *clouddirectory.ListPolicyAttachmentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPolicyAttachmentsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.ListPolicyAttachmentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListPolicyAttachmentsWithContext(ctx context.Context, in *clouddirectory.ListPolicyAttachmentsInput, _ ...request.Option) (*clouddirectory.ListPolicyAttachmentsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListPolicyAttachments cancelled", ctx.Err())
	default:
		return d.ListPolicyAttachments(in)
	}
}

func (d *CloudDirectoryDouble) ListPublishedSchemaArns(i0 *clouddirectory.ListPublishedSchemaArnsInput) (r0 *clouddirectory.ListPublishedSchemaArnsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPublishedSchemaArns", i0)
	r0, _ = returns[0].(*clouddirectory.ListPublishedSchemaArnsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) ListPublishedSchemaArnsPages(i0 *clouddirectory.ListPublishedSchemaArnsInput, i1 func(*clouddirectory.ListPublishedSchemaArnsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPublishedSchemaArnsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListPublishedSchemaArnsPages(in *clouddirectory.ListPublishedSchemaArnsInput, pager func(*clouddirectory.ListPublishedSchemaArnsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListPublishedSchemaArns", paginators, in, pager)
}

func (d *CloudDirectoryDouble) ListPublishedSchemaArnsPagesWithContext(i0 context.Context, i1 *clouddirectory.ListPublishedSchemaArnsInput, i2 func(*clouddirectory.ListPublishedSchemaArnsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPublishedSchemaArnsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListPublishedSchemaArnsPagesWithContext(ctx context.Context, in *clouddirectory.ListPublishedSchemaArnsInput, pager func(*clouddirectory.ListPublishedSchemaArnsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListPublishedSchemaArns", paginators, ctx, in, pager, options...)
}

func (d *CloudDirectoryDouble) ListPublishedSchemaArnsRequest(i0 *clouddirectory.ListPublishedSchemaArnsInput) (r0 *request.Request, r1 *clouddirectory.ListPublishedSchemaArnsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPublishedSchemaArnsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.ListPublishedSchemaArnsOutput)
	return
}

func (d *CloudDirectoryDouble) ListPublishedSchemaArnsWithContext(i0 context.Context, i1 *clouddirectory.ListPublishedSchemaArnsInput, i2 ...request.Option) (r0 *clouddirectory.ListPublishedSchemaArnsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPublishedSchemaArnsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.ListPublishedSchemaArnsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListPublishedSchemaArnsWithContext(ctx context.Context, in *clouddirectory.ListPublishedSchemaArnsInput, _ ...request.Option) (*clouddirectory.ListPublishedSchemaArnsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListPublishedSchemaArns cancelled", ctx.Err())
	default:
		return d.ListPublishedSchemaArns(in)
	}
}

func (d *CloudDirectoryDouble) ListTagsForResource(i0 *clouddirectory.ListTagsForResourceInput) (r0 *clouddirectory.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*clouddirectory.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) ListTagsForResourcePages(i0 *clouddirectory.ListTagsForResourceInput, i1 func(*clouddirectory.ListTagsForResourceOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourcePages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListTagsForResourcePages(in *clouddirectory.ListTagsForResourceInput, pager func(*clouddirectory.ListTagsForResourceOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTagsForResource", paginators, in, pager)
}

func (d *CloudDirectoryDouble) ListTagsForResourcePagesWithContext(i0 context.Context, i1 *clouddirectory.ListTagsForResourceInput, i2 func(*clouddirectory.ListTagsForResourceOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourcePagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListTagsForResourcePagesWithContext(ctx context.Context, in *clouddirectory.ListTagsForResourceInput, pager func(*clouddirectory.ListTagsForResourceOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTagsForResource", paginators, ctx, in, pager, options...)
}

func (d *CloudDirectoryDouble) ListTagsForResourceRequest(i0 *clouddirectory.ListTagsForResourceInput) (r0 *request.Request, r1 *clouddirectory.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.ListTagsForResourceOutput)
	return
}

func (d *CloudDirectoryDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *clouddirectory.ListTagsForResourceInput, i2 ...request.Option) (r0 *clouddirectory.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *clouddirectory.ListTagsForResourceInput, _ ...request.Option) (*clouddirectory.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *CloudDirectoryDouble) ListTypedLinkFacetAttributes(i0 *clouddirectory.ListTypedLinkFacetAttributesInput) (r0 *clouddirectory.ListTypedLinkFacetAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTypedLinkFacetAttributes", i0)
	r0, _ = returns[0].(*clouddirectory.ListTypedLinkFacetAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) ListTypedLinkFacetAttributesPages(i0 *clouddirectory.ListTypedLinkFacetAttributesInput, i1 func(*clouddirectory.ListTypedLinkFacetAttributesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTypedLinkFacetAttributesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListTypedLinkFacetAttributesPages(in *clouddirectory.ListTypedLinkFacetAttributesInput, pager func(*clouddirectory.ListTypedLinkFacetAttributesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTypedLinkFacetAttributes", paginators, in, pager)
}

func (d *CloudDirectoryDouble) ListTypedLinkFacetAttributesPagesWithContext(i0 context.Context, i1 *clouddirectory.ListTypedLinkFacetAttributesInput, i2 func(*clouddirectory.ListTypedLinkFacetAttributesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTypedLinkFacetAttributesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListTypedLinkFacetAttributesPagesWithContext(ctx context.Context, in *clouddirectory.ListTypedLinkFacetAttributesInput, pager func(*clouddirectory.ListTypedLinkFacetAttributesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTypedLinkFacetAttributes", paginators, ctx, in, pager, options...)
}

func (d *CloudDirectoryDouble) ListTypedLinkFacetAttributesRequest(i0 *clouddirectory.ListTypedLinkFacetAttributesInput) (r0 *request.Request, r1 *clouddirectory.ListTypedLinkFacetAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTypedLinkFacetAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.ListTypedLinkFacetAttributesOutput)
	return
}

func (d *CloudDirectoryDouble) ListTypedLinkFacetAttributesWithContext(i0 context.Context, i1 *clouddirectory.ListTypedLinkFacetAttributesInput, i2 ...request.Option) (r0 *clouddirectory.ListTypedLinkFacetAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTypedLinkFacetAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.ListTypedLinkFacetAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListTypedLinkFacetAttributesWithContext(ctx context.Context, in *clouddirectory.ListTypedLinkFacetAttributesInput, _ ...request.Option) (*clouddirectory.ListTypedLinkFacetAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTypedLinkFacetAttributes cancelled", ctx.Err())
	default:
		return d.ListTypedLinkFacetAttributes(in)
	}
}

func (d *CloudDirectoryDouble) ListTypedLinkFacetNames(i0 *clouddirectory.ListTypedLinkFacetNamesInput) (r0 *clouddirectory.ListTypedLinkFacetNamesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTypedLinkFacetNames", i0)
	r0, _ = returns[0].(*clouddirectory.ListTypedLinkFacetNamesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) ListTypedLinkFacetNamesPages(i0 *clouddirectory.ListTypedLinkFacetNamesInput, i1 func(*clouddirectory.ListTypedLinkFacetNamesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTypedLinkFacetNamesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListTypedLinkFacetNamesPages(in *clouddirectory.ListTypedLinkFacetNamesInput, pager func(*clouddirectory.ListTypedLinkFacetNamesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTypedLinkFacetNames", paginators, in, pager)
}

func (d *CloudDirectoryDouble) ListTypedLinkFacetNamesPagesWithContext(i0 context.Context, i1 *clouddirectory.ListTypedLinkFacetNamesInput, i2 func(*clouddirectory.ListTypedLinkFacetNamesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTypedLinkFacetNamesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListTypedLinkFacetNamesPagesWithContext(ctx context.Context, in *clouddirectory.ListTypedLinkFacetNamesInput, pager func(*clouddirectory.ListTypedLinkFacetNamesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTypedLinkFacetNames", paginators, ctx, in, pager, options...)
}

func (d *CloudDirectoryDouble) ListTypedLinkFacetNamesRequest(i0 *clouddirectory.ListTypedLinkFacetNamesInput) (r0 *request.Request, r1 *clouddirectory.ListTypedLinkFacetNamesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTypedLinkFacetNamesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.ListTypedLinkFacetNamesOutput)
	return
}

func (d *CloudDirectoryDouble) ListTypedLinkFacetNamesWithContext(i0 context.Context, i1 *clouddirectory.ListTypedLinkFacetNamesInput, i2 ...request.Option) (r0 *clouddirectory.ListTypedLinkFacetNamesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTypedLinkFacetNamesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.ListTypedLinkFacetNamesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeListTypedLinkFacetNamesWithContext(ctx context.Context, in *clouddirectory.ListTypedLinkFacetNamesInput, _ ...request.Option) (*clouddirectory.ListTypedLinkFacetNamesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTypedLinkFacetNames cancelled", ctx.Err())
	default:
		return d.ListTypedLinkFacetNames(in)
	}
}

func (d *CloudDirectoryDouble) LookupPolicy(i0 *clouddirectory.LookupPolicyInput) (r0 *clouddirectory.LookupPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("LookupPolicy", i0)
	r0, _ = returns[0].(*clouddirectory.LookupPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) LookupPolicyPages(i0 *clouddirectory.LookupPolicyInput, i1 func(*clouddirectory.LookupPolicyOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("LookupPolicyPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeLookupPolicyPages(in *clouddirectory.LookupPolicyInput, pager func(*clouddirectory.LookupPolicyOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("LookupPolicy", paginators, in, pager)
}

func (d *CloudDirectoryDouble) LookupPolicyPagesWithContext(i0 context.Context, i1 *clouddirectory.LookupPolicyInput, i2 func(*clouddirectory.LookupPolicyOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("LookupPolicyPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudDirectoryDouble) fakeLookupPolicyPagesWithContext(ctx context.Context, in *clouddirectory.LookupPolicyInput, pager func(*clouddirectory.LookupPolicyOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("LookupPolicy", paginators, ctx, in, pager, options...)
}

func (d *CloudDirectoryDouble) LookupPolicyRequest(i0 *clouddirectory.LookupPolicyInput) (r0 *request.Request, r1 *clouddirectory.LookupPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("LookupPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.LookupPolicyOutput)
	return
}

func (d *CloudDirectoryDouble) LookupPolicyWithContext(i0 context.Context, i1 *clouddirectory.LookupPolicyInput, i2 ...request.Option) (r0 *clouddirectory.LookupPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("LookupPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.LookupPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeLookupPolicyWithContext(ctx context.Context, in *clouddirectory.LookupPolicyInput, _ ...request.Option) (*clouddirectory.LookupPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "LookupPolicy cancelled", ctx.Err())
	default:
		return d.LookupPolicy(in)
	}
}

func (d *CloudDirectoryDouble) PublishSchema(i0 *clouddirectory.PublishSchemaInput) (r0 *clouddirectory.PublishSchemaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PublishSchema", i0)
	r0, _ = returns[0].(*clouddirectory.PublishSchemaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) PublishSchemaRequest(i0 *clouddirectory.PublishSchemaInput) (r0 *request.Request, r1 *clouddirectory.PublishSchemaOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PublishSchemaRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.PublishSchemaOutput)
	return
}

func (d *CloudDirectoryDouble) PublishSchemaWithContext(i0 context.Context, i1 *clouddirectory.PublishSchemaInput, i2 ...request.Option) (r0 *clouddirectory.PublishSchemaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PublishSchemaWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.PublishSchemaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakePublishSchemaWithContext(ctx context.Context, in *clouddirectory.PublishSchemaInput, _ ...request.Option) (*clouddirectory.PublishSchemaOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PublishSchema cancelled", ctx.Err())
	default:
		return d.PublishSchema(in)
	}
}

func (d *CloudDirectoryDouble) PutSchemaFromJson(i0 *clouddirectory.PutSchemaFromJsonInput) (r0 *clouddirectory.PutSchemaFromJsonOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutSchemaFromJson", i0)
	r0, _ = returns[0].(*clouddirectory.PutSchemaFromJsonOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) PutSchemaFromJsonRequest(i0 *clouddirectory.PutSchemaFromJsonInput) (r0 *request.Request, r1 *clouddirectory.PutSchemaFromJsonOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutSchemaFromJsonRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.PutSchemaFromJsonOutput)
	return
}

func (d *CloudDirectoryDouble) PutSchemaFromJsonWithContext(i0 context.Context, i1 *clouddirectory.PutSchemaFromJsonInput, i2 ...request.Option) (r0 *clouddirectory.PutSchemaFromJsonOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutSchemaFromJsonWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.PutSchemaFromJsonOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakePutSchemaFromJsonWithContext(ctx context.Context, in *clouddirectory.PutSchemaFromJsonInput, _ ...request.Option) (*clouddirectory.PutSchemaFromJsonOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutSchemaFromJson cancelled", ctx.Err())
	default:
		return d.PutSchemaFromJson(in)
	}
}

func (d *CloudDirectoryDouble) RemoveFacetFromObject(i0 *clouddirectory.RemoveFacetFromObjectInput) (r0 *clouddirectory.RemoveFacetFromObjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveFacetFromObject", i0)
	r0, _ = returns[0].(*clouddirectory.RemoveFacetFromObjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) RemoveFacetFromObjectRequest(i0 *clouddirectory.RemoveFacetFromObjectInput) (r0 *request.Request, r1 *clouddirectory.RemoveFacetFromObjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveFacetFromObjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.RemoveFacetFromObjectOutput)
	return
}

func (d *CloudDirectoryDouble) RemoveFacetFromObjectWithContext(i0 context.Context, i1 *clouddirectory.RemoveFacetFromObjectInput, i2 ...request.Option) (r0 *clouddirectory.RemoveFacetFromObjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveFacetFromObjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.RemoveFacetFromObjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeRemoveFacetFromObjectWithContext(ctx context.Context, in *clouddirectory.RemoveFacetFromObjectInput, _ ...request.Option) (*clouddirectory.RemoveFacetFromObjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveFacetFromObject cancelled", ctx.Err())
	default:
		return d.RemoveFacetFromObject(in)
	}
}

func (d *CloudDirectoryDouble) TagResource(i0 *clouddirectory.TagResourceInput) (r0 *clouddirectory.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*clouddirectory.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) TagResourceRequest(i0 *clouddirectory.TagResourceInput) (r0 *request.Request, r1 *clouddirectory.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.TagResourceOutput)
	return
}

func (d *CloudDirectoryDouble) TagResourceWithContext(i0 context.Context, i1 *clouddirectory.TagResourceInput, i2 ...request.Option) (r0 *clouddirectory.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeTagResourceWithContext(ctx context.Context, in *clouddirectory.TagResourceInput, _ ...request.Option) (*clouddirectory.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *CloudDirectoryDouble) UntagResource(i0 *clouddirectory.UntagResourceInput) (r0 *clouddirectory.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*clouddirectory.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) UntagResourceRequest(i0 *clouddirectory.UntagResourceInput) (r0 *request.Request, r1 *clouddirectory.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.UntagResourceOutput)
	return
}

func (d *CloudDirectoryDouble) UntagResourceWithContext(i0 context.Context, i1 *clouddirectory.UntagResourceInput, i2 ...request.Option) (r0 *clouddirectory.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeUntagResourceWithContext(ctx context.Context, in *clouddirectory.UntagResourceInput, _ ...request.Option) (*clouddirectory.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *CloudDirectoryDouble) UpdateFacet(i0 *clouddirectory.UpdateFacetInput) (r0 *clouddirectory.UpdateFacetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFacet", i0)
	r0, _ = returns[0].(*clouddirectory.UpdateFacetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) UpdateFacetRequest(i0 *clouddirectory.UpdateFacetInput) (r0 *request.Request, r1 *clouddirectory.UpdateFacetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFacetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.UpdateFacetOutput)
	return
}

func (d *CloudDirectoryDouble) UpdateFacetWithContext(i0 context.Context, i1 *clouddirectory.UpdateFacetInput, i2 ...request.Option) (r0 *clouddirectory.UpdateFacetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFacetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.UpdateFacetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeUpdateFacetWithContext(ctx context.Context, in *clouddirectory.UpdateFacetInput, _ ...request.Option) (*clouddirectory.UpdateFacetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateFacet cancelled", ctx.Err())
	default:
		return d.UpdateFacet(in)
	}
}

func (d *CloudDirectoryDouble) UpdateLinkAttributes(i0 *clouddirectory.UpdateLinkAttributesInput) (r0 *clouddirectory.UpdateLinkAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateLinkAttributes", i0)
	r0, _ = returns[0].(*clouddirectory.UpdateLinkAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) UpdateLinkAttributesRequest(i0 *clouddirectory.UpdateLinkAttributesInput) (r0 *request.Request, r1 *clouddirectory.UpdateLinkAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateLinkAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.UpdateLinkAttributesOutput)
	return
}

func (d *CloudDirectoryDouble) UpdateLinkAttributesWithContext(i0 context.Context, i1 *clouddirectory.UpdateLinkAttributesInput, i2 ...request.Option) (r0 *clouddirectory.UpdateLinkAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateLinkAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.UpdateLinkAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeUpdateLinkAttributesWithContext(ctx context.Context, in *clouddirectory.UpdateLinkAttributesInput, _ ...request.Option) (*clouddirectory.UpdateLinkAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateLinkAttributes cancelled", ctx.Err())
	default:
		return d.UpdateLinkAttributes(in)
	}
}

func (d *CloudDirectoryDouble) UpdateObjectAttributes(i0 *clouddirectory.UpdateObjectAttributesInput) (r0 *clouddirectory.UpdateObjectAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateObjectAttributes", i0)
	r0, _ = returns[0].(*clouddirectory.UpdateObjectAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) UpdateObjectAttributesRequest(i0 *clouddirectory.UpdateObjectAttributesInput) (r0 *request.Request, r1 *clouddirectory.UpdateObjectAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateObjectAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.UpdateObjectAttributesOutput)
	return
}

func (d *CloudDirectoryDouble) UpdateObjectAttributesWithContext(i0 context.Context, i1 *clouddirectory.UpdateObjectAttributesInput, i2 ...request.Option) (r0 *clouddirectory.UpdateObjectAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateObjectAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.UpdateObjectAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeUpdateObjectAttributesWithContext(ctx context.Context, in *clouddirectory.UpdateObjectAttributesInput, _ ...request.Option) (*clouddirectory.UpdateObjectAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateObjectAttributes cancelled", ctx.Err())
	default:
		return d.UpdateObjectAttributes(in)
	}
}

func (d *CloudDirectoryDouble) UpdateSchema(i0 *clouddirectory.UpdateSchemaInput) (r0 *clouddirectory.UpdateSchemaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSchema", i0)
	r0, _ = returns[0].(*clouddirectory.UpdateSchemaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) UpdateSchemaRequest(i0 *clouddirectory.UpdateSchemaInput) (r0 *request.Request, r1 *clouddirectory.UpdateSchemaOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSchemaRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.UpdateSchemaOutput)
	return
}

func (d *CloudDirectoryDouble) UpdateSchemaWithContext(i0 context.Context, i1 *clouddirectory.UpdateSchemaInput, i2 ...request.Option) (r0 *clouddirectory.UpdateSchemaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSchemaWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.UpdateSchemaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeUpdateSchemaWithContext(ctx context.Context, in *clouddirectory.UpdateSchemaInput, _ ...request.Option) (*clouddirectory.UpdateSchemaOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateSchema cancelled", ctx.Err())
	default:
		return d.UpdateSchema(in)
	}
}

func (d *CloudDirectoryDouble) UpdateTypedLinkFacet(i0 *clouddirectory.UpdateTypedLinkFacetInput) (r0 *clouddirectory.UpdateTypedLinkFacetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTypedLinkFacet", i0)
	r0, _ = returns[0].(*clouddirectory.UpdateTypedLinkFacetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) UpdateTypedLinkFacetRequest(i0 *clouddirectory.UpdateTypedLinkFacetInput) (r0 *request.Request, r1 *clouddirectory.UpdateTypedLinkFacetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTypedLinkFacetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.UpdateTypedLinkFacetOutput)
	return
}

func (d *CloudDirectoryDouble) UpdateTypedLinkFacetWithContext(i0 context.Context, i1 *clouddirectory.UpdateTypedLinkFacetInput, i2 ...request.Option) (r0 *clouddirectory.UpdateTypedLinkFacetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTypedLinkFacetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.UpdateTypedLinkFacetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeUpdateTypedLinkFacetWithContext(ctx context.Context, in *clouddirectory.UpdateTypedLinkFacetInput, _ ...request.Option) (*clouddirectory.UpdateTypedLinkFacetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateTypedLinkFacet cancelled", ctx.Err())
	default:
		return d.UpdateTypedLinkFacet(in)
	}
}

func (d *CloudDirectoryDouble) UpgradeAppliedSchema(i0 *clouddirectory.UpgradeAppliedSchemaInput) (r0 *clouddirectory.UpgradeAppliedSchemaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpgradeAppliedSchema", i0)
	r0, _ = returns[0].(*clouddirectory.UpgradeAppliedSchemaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) UpgradeAppliedSchemaRequest(i0 *clouddirectory.UpgradeAppliedSchemaInput) (r0 *request.Request, r1 *clouddirectory.UpgradeAppliedSchemaOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpgradeAppliedSchemaRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.UpgradeAppliedSchemaOutput)
	return
}

func (d *CloudDirectoryDouble) UpgradeAppliedSchemaWithContext(i0 context.Context, i1 *clouddirectory.UpgradeAppliedSchemaInput, i2 ...request.Option) (r0 *clouddirectory.UpgradeAppliedSchemaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpgradeAppliedSchemaWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.UpgradeAppliedSchemaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeUpgradeAppliedSchemaWithContext(ctx context.Context, in *clouddirectory.UpgradeAppliedSchemaInput, _ ...request.Option) (*clouddirectory.UpgradeAppliedSchemaOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpgradeAppliedSchema cancelled", ctx.Err())
	default:
		return d.UpgradeAppliedSchema(in)
	}
}

func (d *CloudDirectoryDouble) UpgradePublishedSchema(i0 *clouddirectory.UpgradePublishedSchemaInput) (r0 *clouddirectory.UpgradePublishedSchemaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpgradePublishedSchema", i0)
	r0, _ = returns[0].(*clouddirectory.UpgradePublishedSchemaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) UpgradePublishedSchemaRequest(i0 *clouddirectory.UpgradePublishedSchemaInput) (r0 *request.Request, r1 *clouddirectory.UpgradePublishedSchemaOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpgradePublishedSchemaRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*clouddirectory.UpgradePublishedSchemaOutput)
	return
}

func (d *CloudDirectoryDouble) UpgradePublishedSchemaWithContext(i0 context.Context, i1 *clouddirectory.UpgradePublishedSchemaInput, i2 ...request.Option) (r0 *clouddirectory.UpgradePublishedSchemaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpgradePublishedSchemaWithContext", i0, i1, i2)
	r0, _ = returns[0].(*clouddirectory.UpgradePublishedSchemaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudDirectoryDouble) fakeUpgradePublishedSchemaWithContext(ctx context.Context, in *clouddirectory.UpgradePublishedSchemaInput, _ ...request.Option) (*clouddirectory.UpgradePublishedSchemaOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpgradePublishedSchema cancelled", ctx.Err())
	default:
		return d.UpgradePublishedSchema(in)
	}
}
