// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:12:54+11:00

// Package fsxdouble provides a TestDouble implementation of fsxiface.FSxAPI
package fsxdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/fsx"
	"github.com/aws/aws-sdk-go/service/fsx/fsxiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// FSxDouble is TestDouble for fsxiface.FSxAPI
type FSxDouble struct {
	fsxiface.FSxAPI
	*awsdouble.AWSTestDouble
}

// Constructor for FSxDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *FSxDouble {
	result := &FSxDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*fsxiface.FSxAPI)(nil), configurators...)
	return result
}

func (d *FSxDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *FSxDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CancelDataRepositoryTaskWithContext":
		return m.Fake(d.fakeCancelDataRepositoryTaskWithContext)

	case "CreateBackupWithContext":
		return m.Fake(d.fakeCreateBackupWithContext)

	case "CreateDataRepositoryTaskWithContext":
		return m.Fake(d.fakeCreateDataRepositoryTaskWithContext)

	case "CreateFileSystemFromBackupWithContext":
		return m.Fake(d.fakeCreateFileSystemFromBackupWithContext)

	case "CreateFileSystemWithContext":
		return m.Fake(d.fakeCreateFileSystemWithContext)

	case "DeleteBackupWithContext":
		return m.Fake(d.fakeDeleteBackupWithContext)

	case "DeleteFileSystemWithContext":
		return m.Fake(d.fakeDeleteFileSystemWithContext)

	case "DescribeBackupsPages":
		return m.Fake(d.fakeDescribeBackupsPages)

	case "DescribeBackupsPagesWithContext":
		return m.Fake(d.fakeDescribeBackupsPagesWithContext)

	case "DescribeBackupsWithContext":
		return m.Fake(d.fakeDescribeBackupsWithContext)

	case "DescribeDataRepositoryTasksPages":
		return m.Fake(d.fakeDescribeDataRepositoryTasksPages)

	case "DescribeDataRepositoryTasksPagesWithContext":
		return m.Fake(d.fakeDescribeDataRepositoryTasksPagesWithContext)

	case "DescribeDataRepositoryTasksWithContext":
		return m.Fake(d.fakeDescribeDataRepositoryTasksWithContext)

	case "DescribeFileSystemsPages":
		return m.Fake(d.fakeDescribeFileSystemsPages)

	case "DescribeFileSystemsPagesWithContext":
		return m.Fake(d.fakeDescribeFileSystemsPagesWithContext)

	case "DescribeFileSystemsWithContext":
		return m.Fake(d.fakeDescribeFileSystemsWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateFileSystemWithContext":
		return m.Fake(d.fakeUpdateFileSystemWithContext)

	default:
		return nil
	}
}

func (d *FSxDouble) CancelDataRepositoryTask(i0 *fsx.CancelDataRepositoryTaskInput) (r0 *fsx.CancelDataRepositoryTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelDataRepositoryTask", i0)
	r0, _ = returns[0].(*fsx.CancelDataRepositoryTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *FSxDouble) CancelDataRepositoryTaskRequest(i0 *fsx.CancelDataRepositoryTaskInput) (r0 *request.Request, r1 *fsx.CancelDataRepositoryTaskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelDataRepositoryTaskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*fsx.CancelDataRepositoryTaskOutput)
	return
}

func (d *FSxDouble) CancelDataRepositoryTaskWithContext(i0 context.Context, i1 *fsx.CancelDataRepositoryTaskInput, i2 ...request.Option) (r0 *fsx.CancelDataRepositoryTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelDataRepositoryTaskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*fsx.CancelDataRepositoryTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *FSxDouble) fakeCancelDataRepositoryTaskWithContext(ctx context.Context, in *fsx.CancelDataRepositoryTaskInput, _ ...request.Option) (*fsx.CancelDataRepositoryTaskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelDataRepositoryTask cancelled", ctx.Err())
	default:
		return d.CancelDataRepositoryTask(in)
	}
}

func (d *FSxDouble) CreateBackup(i0 *fsx.CreateBackupInput) (r0 *fsx.CreateBackupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBackup", i0)
	r0, _ = returns[0].(*fsx.CreateBackupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *FSxDouble) CreateBackupRequest(i0 *fsx.CreateBackupInput) (r0 *request.Request, r1 *fsx.CreateBackupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBackupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*fsx.CreateBackupOutput)
	return
}

func (d *FSxDouble) CreateBackupWithContext(i0 context.Context, i1 *fsx.CreateBackupInput, i2 ...request.Option) (r0 *fsx.CreateBackupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBackupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*fsx.CreateBackupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *FSxDouble) fakeCreateBackupWithContext(ctx context.Context, in *fsx.CreateBackupInput, _ ...request.Option) (*fsx.CreateBackupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateBackup cancelled", ctx.Err())
	default:
		return d.CreateBackup(in)
	}
}

func (d *FSxDouble) CreateDataRepositoryTask(i0 *fsx.CreateDataRepositoryTaskInput) (r0 *fsx.CreateDataRepositoryTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDataRepositoryTask", i0)
	r0, _ = returns[0].(*fsx.CreateDataRepositoryTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *FSxDouble) CreateDataRepositoryTaskRequest(i0 *fsx.CreateDataRepositoryTaskInput) (r0 *request.Request, r1 *fsx.CreateDataRepositoryTaskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDataRepositoryTaskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*fsx.CreateDataRepositoryTaskOutput)
	return
}

func (d *FSxDouble) CreateDataRepositoryTaskWithContext(i0 context.Context, i1 *fsx.CreateDataRepositoryTaskInput, i2 ...request.Option) (r0 *fsx.CreateDataRepositoryTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDataRepositoryTaskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*fsx.CreateDataRepositoryTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *FSxDouble) fakeCreateDataRepositoryTaskWithContext(ctx context.Context, in *fsx.CreateDataRepositoryTaskInput, _ ...request.Option) (*fsx.CreateDataRepositoryTaskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDataRepositoryTask cancelled", ctx.Err())
	default:
		return d.CreateDataRepositoryTask(in)
	}
}

func (d *FSxDouble) CreateFileSystem(i0 *fsx.CreateFileSystemInput) (r0 *fsx.CreateFileSystemOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFileSystem", i0)
	r0, _ = returns[0].(*fsx.CreateFileSystemOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *FSxDouble) CreateFileSystemFromBackup(i0 *fsx.CreateFileSystemFromBackupInput) (r0 *fsx.CreateFileSystemFromBackupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFileSystemFromBackup", i0)
	r0, _ = returns[0].(*fsx.CreateFileSystemFromBackupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *FSxDouble) CreateFileSystemFromBackupRequest(i0 *fsx.CreateFileSystemFromBackupInput) (r0 *request.Request, r1 *fsx.CreateFileSystemFromBackupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFileSystemFromBackupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*fsx.CreateFileSystemFromBackupOutput)
	return
}

func (d *FSxDouble) CreateFileSystemFromBackupWithContext(i0 context.Context, i1 *fsx.CreateFileSystemFromBackupInput, i2 ...request.Option) (r0 *fsx.CreateFileSystemFromBackupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFileSystemFromBackupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*fsx.CreateFileSystemFromBackupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *FSxDouble) fakeCreateFileSystemFromBackupWithContext(ctx context.Context, in *fsx.CreateFileSystemFromBackupInput, _ ...request.Option) (*fsx.CreateFileSystemFromBackupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateFileSystemFromBackup cancelled", ctx.Err())
	default:
		return d.CreateFileSystemFromBackup(in)
	}
}

func (d *FSxDouble) CreateFileSystemRequest(i0 *fsx.CreateFileSystemInput) (r0 *request.Request, r1 *fsx.CreateFileSystemOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFileSystemRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*fsx.CreateFileSystemOutput)
	return
}

func (d *FSxDouble) CreateFileSystemWithContext(i0 context.Context, i1 *fsx.CreateFileSystemInput, i2 ...request.Option) (r0 *fsx.CreateFileSystemOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateFileSystemWithContext", i0, i1, i2)
	r0, _ = returns[0].(*fsx.CreateFileSystemOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *FSxDouble) fakeCreateFileSystemWithContext(ctx context.Context, in *fsx.CreateFileSystemInput, _ ...request.Option) (*fsx.CreateFileSystemOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateFileSystem cancelled", ctx.Err())
	default:
		return d.CreateFileSystem(in)
	}
}

func (d *FSxDouble) DeleteBackup(i0 *fsx.DeleteBackupInput) (r0 *fsx.DeleteBackupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBackup", i0)
	r0, _ = returns[0].(*fsx.DeleteBackupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *FSxDouble) DeleteBackupRequest(i0 *fsx.DeleteBackupInput) (r0 *request.Request, r1 *fsx.DeleteBackupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBackupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*fsx.DeleteBackupOutput)
	return
}

func (d *FSxDouble) DeleteBackupWithContext(i0 context.Context, i1 *fsx.DeleteBackupInput, i2 ...request.Option) (r0 *fsx.DeleteBackupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBackupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*fsx.DeleteBackupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *FSxDouble) fakeDeleteBackupWithContext(ctx context.Context, in *fsx.DeleteBackupInput, _ ...request.Option) (*fsx.DeleteBackupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteBackup cancelled", ctx.Err())
	default:
		return d.DeleteBackup(in)
	}
}

func (d *FSxDouble) DeleteFileSystem(i0 *fsx.DeleteFileSystemInput) (r0 *fsx.DeleteFileSystemOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFileSystem", i0)
	r0, _ = returns[0].(*fsx.DeleteFileSystemOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *FSxDouble) DeleteFileSystemRequest(i0 *fsx.DeleteFileSystemInput) (r0 *request.Request, r1 *fsx.DeleteFileSystemOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFileSystemRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*fsx.DeleteFileSystemOutput)
	return
}

func (d *FSxDouble) DeleteFileSystemWithContext(i0 context.Context, i1 *fsx.DeleteFileSystemInput, i2 ...request.Option) (r0 *fsx.DeleteFileSystemOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFileSystemWithContext", i0, i1, i2)
	r0, _ = returns[0].(*fsx.DeleteFileSystemOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *FSxDouble) fakeDeleteFileSystemWithContext(ctx context.Context, in *fsx.DeleteFileSystemInput, _ ...request.Option) (*fsx.DeleteFileSystemOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteFileSystem cancelled", ctx.Err())
	default:
		return d.DeleteFileSystem(in)
	}
}

func (d *FSxDouble) DescribeBackups(i0 *fsx.DescribeBackupsInput) (r0 *fsx.DescribeBackupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBackups", i0)
	r0, _ = returns[0].(*fsx.DescribeBackupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *FSxDouble) DescribeBackupsPages(i0 *fsx.DescribeBackupsInput, i1 func(*fsx.DescribeBackupsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBackupsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *FSxDouble) fakeDescribeBackupsPages(in *fsx.DescribeBackupsInput, pager func(*fsx.DescribeBackupsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeBackups", paginators, in, pager)
}

func (d *FSxDouble) DescribeBackupsPagesWithContext(i0 context.Context, i1 *fsx.DescribeBackupsInput, i2 func(*fsx.DescribeBackupsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBackupsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *FSxDouble) fakeDescribeBackupsPagesWithContext(ctx context.Context, in *fsx.DescribeBackupsInput, pager func(*fsx.DescribeBackupsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeBackups", paginators, ctx, in, pager, options...)
}

func (d *FSxDouble) DescribeBackupsRequest(i0 *fsx.DescribeBackupsInput) (r0 *request.Request, r1 *fsx.DescribeBackupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBackupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*fsx.DescribeBackupsOutput)
	return
}

func (d *FSxDouble) DescribeBackupsWithContext(i0 context.Context, i1 *fsx.DescribeBackupsInput, i2 ...request.Option) (r0 *fsx.DescribeBackupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBackupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*fsx.DescribeBackupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *FSxDouble) fakeDescribeBackupsWithContext(ctx context.Context, in *fsx.DescribeBackupsInput, _ ...request.Option) (*fsx.DescribeBackupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeBackups cancelled", ctx.Err())
	default:
		return d.DescribeBackups(in)
	}
}

func (d *FSxDouble) DescribeDataRepositoryTasks(i0 *fsx.DescribeDataRepositoryTasksInput) (r0 *fsx.DescribeDataRepositoryTasksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDataRepositoryTasks", i0)
	r0, _ = returns[0].(*fsx.DescribeDataRepositoryTasksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *FSxDouble) DescribeDataRepositoryTasksPages(i0 *fsx.DescribeDataRepositoryTasksInput, i1 func(*fsx.DescribeDataRepositoryTasksOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDataRepositoryTasksPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *FSxDouble) fakeDescribeDataRepositoryTasksPages(in *fsx.DescribeDataRepositoryTasksInput, pager func(*fsx.DescribeDataRepositoryTasksOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeDataRepositoryTasks", paginators, in, pager)
}

func (d *FSxDouble) DescribeDataRepositoryTasksPagesWithContext(i0 context.Context, i1 *fsx.DescribeDataRepositoryTasksInput, i2 func(*fsx.DescribeDataRepositoryTasksOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDataRepositoryTasksPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *FSxDouble) fakeDescribeDataRepositoryTasksPagesWithContext(ctx context.Context, in *fsx.DescribeDataRepositoryTasksInput, pager func(*fsx.DescribeDataRepositoryTasksOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeDataRepositoryTasks", paginators, ctx, in, pager, options...)
}

func (d *FSxDouble) DescribeDataRepositoryTasksRequest(i0 *fsx.DescribeDataRepositoryTasksInput) (r0 *request.Request, r1 *fsx.DescribeDataRepositoryTasksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDataRepositoryTasksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*fsx.DescribeDataRepositoryTasksOutput)
	return
}

func (d *FSxDouble) DescribeDataRepositoryTasksWithContext(i0 context.Context, i1 *fsx.DescribeDataRepositoryTasksInput, i2 ...request.Option) (r0 *fsx.DescribeDataRepositoryTasksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDataRepositoryTasksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*fsx.DescribeDataRepositoryTasksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *FSxDouble) fakeDescribeDataRepositoryTasksWithContext(ctx context.Context, in *fsx.DescribeDataRepositoryTasksInput, _ ...request.Option) (*fsx.DescribeDataRepositoryTasksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDataRepositoryTasks cancelled", ctx.Err())
	default:
		return d.DescribeDataRepositoryTasks(in)
	}
}

func (d *FSxDouble) DescribeFileSystems(i0 *fsx.DescribeFileSystemsInput) (r0 *fsx.DescribeFileSystemsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFileSystems", i0)
	r0, _ = returns[0].(*fsx.DescribeFileSystemsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *FSxDouble) DescribeFileSystemsPages(i0 *fsx.DescribeFileSystemsInput, i1 func(*fsx.DescribeFileSystemsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFileSystemsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *FSxDouble) fakeDescribeFileSystemsPages(in *fsx.DescribeFileSystemsInput, pager func(*fsx.DescribeFileSystemsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeFileSystems", paginators, in, pager)
}

func (d *FSxDouble) DescribeFileSystemsPagesWithContext(i0 context.Context, i1 *fsx.DescribeFileSystemsInput, i2 func(*fsx.DescribeFileSystemsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFileSystemsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *FSxDouble) fakeDescribeFileSystemsPagesWithContext(ctx context.Context, in *fsx.DescribeFileSystemsInput, pager func(*fsx.DescribeFileSystemsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeFileSystems", paginators, ctx, in, pager, options...)
}

func (d *FSxDouble) DescribeFileSystemsRequest(i0 *fsx.DescribeFileSystemsInput) (r0 *request.Request, r1 *fsx.DescribeFileSystemsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFileSystemsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*fsx.DescribeFileSystemsOutput)
	return
}

func (d *FSxDouble) DescribeFileSystemsWithContext(i0 context.Context, i1 *fsx.DescribeFileSystemsInput, i2 ...request.Option) (r0 *fsx.DescribeFileSystemsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeFileSystemsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*fsx.DescribeFileSystemsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *FSxDouble) fakeDescribeFileSystemsWithContext(ctx context.Context, in *fsx.DescribeFileSystemsInput, _ ...request.Option) (*fsx.DescribeFileSystemsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeFileSystems cancelled", ctx.Err())
	default:
		return d.DescribeFileSystems(in)
	}
}

func (d *FSxDouble) ListTagsForResource(i0 *fsx.ListTagsForResourceInput) (r0 *fsx.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*fsx.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *FSxDouble) ListTagsForResourceRequest(i0 *fsx.ListTagsForResourceInput) (r0 *request.Request, r1 *fsx.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*fsx.ListTagsForResourceOutput)
	return
}

func (d *FSxDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *fsx.ListTagsForResourceInput, i2 ...request.Option) (r0 *fsx.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*fsx.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *FSxDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *fsx.ListTagsForResourceInput, _ ...request.Option) (*fsx.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *FSxDouble) TagResource(i0 *fsx.TagResourceInput) (r0 *fsx.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*fsx.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *FSxDouble) TagResourceRequest(i0 *fsx.TagResourceInput) (r0 *request.Request, r1 *fsx.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*fsx.TagResourceOutput)
	return
}

func (d *FSxDouble) TagResourceWithContext(i0 context.Context, i1 *fsx.TagResourceInput, i2 ...request.Option) (r0 *fsx.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*fsx.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *FSxDouble) fakeTagResourceWithContext(ctx context.Context, in *fsx.TagResourceInput, _ ...request.Option) (*fsx.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *FSxDouble) UntagResource(i0 *fsx.UntagResourceInput) (r0 *fsx.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*fsx.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *FSxDouble) UntagResourceRequest(i0 *fsx.UntagResourceInput) (r0 *request.Request, r1 *fsx.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*fsx.UntagResourceOutput)
	return
}

func (d *FSxDouble) UntagResourceWithContext(i0 context.Context, i1 *fsx.UntagResourceInput, i2 ...request.Option) (r0 *fsx.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*fsx.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *FSxDouble) fakeUntagResourceWithContext(ctx context.Context, in *fsx.UntagResourceInput, _ ...request.Option) (*fsx.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *FSxDouble) UpdateFileSystem(i0 *fsx.UpdateFileSystemInput) (r0 *fsx.UpdateFileSystemOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFileSystem", i0)
	r0, _ = returns[0].(*fsx.UpdateFileSystemOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *FSxDouble) UpdateFileSystemRequest(i0 *fsx.UpdateFileSystemInput) (r0 *request.Request, r1 *fsx.UpdateFileSystemOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFileSystemRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*fsx.UpdateFileSystemOutput)
	return
}

func (d *FSxDouble) UpdateFileSystemWithContext(i0 context.Context, i1 *fsx.UpdateFileSystemInput, i2 ...request.Option) (r0 *fsx.UpdateFileSystemOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateFileSystemWithContext", i0, i1, i2)
	r0, _ = returns[0].(*fsx.UpdateFileSystemOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *FSxDouble) fakeUpdateFileSystemWithContext(ctx context.Context, in *fsx.UpdateFileSystemInput, _ ...request.Option) (*fsx.UpdateFileSystemOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateFileSystem cancelled", ctx.Err())
	default:
		return d.UpdateFileSystem(in)
	}
}
