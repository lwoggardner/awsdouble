// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:14:27+11:00

// Package qldbdouble provides a TestDouble implementation of qldbiface.QLDBAPI
package qldbdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/qldb"
	"github.com/aws/aws-sdk-go/service/qldb/qldbiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// QLDBDouble is TestDouble for qldbiface.QLDBAPI
type QLDBDouble struct {
	qldbiface.QLDBAPI
	*awsdouble.AWSTestDouble
}

// Constructor for QLDBDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *QLDBDouble {
	result := &QLDBDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*qldbiface.QLDBAPI)(nil), configurators...)
	return result
}

func (d *QLDBDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *QLDBDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CreateLedgerWithContext":
		return m.Fake(d.fakeCreateLedgerWithContext)

	case "DeleteLedgerWithContext":
		return m.Fake(d.fakeDeleteLedgerWithContext)

	case "DescribeJournalS3ExportWithContext":
		return m.Fake(d.fakeDescribeJournalS3ExportWithContext)

	case "DescribeLedgerWithContext":
		return m.Fake(d.fakeDescribeLedgerWithContext)

	case "ExportJournalToS3WithContext":
		return m.Fake(d.fakeExportJournalToS3WithContext)

	case "GetBlockWithContext":
		return m.Fake(d.fakeGetBlockWithContext)

	case "GetDigestWithContext":
		return m.Fake(d.fakeGetDigestWithContext)

	case "GetRevisionWithContext":
		return m.Fake(d.fakeGetRevisionWithContext)

	case "ListJournalS3ExportsForLedgerPages":
		return m.Fake(d.fakeListJournalS3ExportsForLedgerPages)

	case "ListJournalS3ExportsForLedgerPagesWithContext":
		return m.Fake(d.fakeListJournalS3ExportsForLedgerPagesWithContext)

	case "ListJournalS3ExportsForLedgerWithContext":
		return m.Fake(d.fakeListJournalS3ExportsForLedgerWithContext)

	case "ListJournalS3ExportsPages":
		return m.Fake(d.fakeListJournalS3ExportsPages)

	case "ListJournalS3ExportsPagesWithContext":
		return m.Fake(d.fakeListJournalS3ExportsPagesWithContext)

	case "ListJournalS3ExportsWithContext":
		return m.Fake(d.fakeListJournalS3ExportsWithContext)

	case "ListLedgersPages":
		return m.Fake(d.fakeListLedgersPages)

	case "ListLedgersPagesWithContext":
		return m.Fake(d.fakeListLedgersPagesWithContext)

	case "ListLedgersWithContext":
		return m.Fake(d.fakeListLedgersWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateLedgerWithContext":
		return m.Fake(d.fakeUpdateLedgerWithContext)

	default:
		return nil
	}
}

func (d *QLDBDouble) CreateLedger(i0 *qldb.CreateLedgerInput) (r0 *qldb.CreateLedgerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLedger", i0)
	r0, _ = returns[0].(*qldb.CreateLedgerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QLDBDouble) CreateLedgerRequest(i0 *qldb.CreateLedgerInput) (r0 *request.Request, r1 *qldb.CreateLedgerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLedgerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*qldb.CreateLedgerOutput)
	return
}

func (d *QLDBDouble) CreateLedgerWithContext(i0 context.Context, i1 *qldb.CreateLedgerInput, i2 ...request.Option) (r0 *qldb.CreateLedgerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLedgerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*qldb.CreateLedgerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QLDBDouble) fakeCreateLedgerWithContext(ctx context.Context, in *qldb.CreateLedgerInput, _ ...request.Option) (*qldb.CreateLedgerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateLedger cancelled", ctx.Err())
	default:
		return d.CreateLedger(in)
	}
}

func (d *QLDBDouble) DeleteLedger(i0 *qldb.DeleteLedgerInput) (r0 *qldb.DeleteLedgerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLedger", i0)
	r0, _ = returns[0].(*qldb.DeleteLedgerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QLDBDouble) DeleteLedgerRequest(i0 *qldb.DeleteLedgerInput) (r0 *request.Request, r1 *qldb.DeleteLedgerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLedgerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*qldb.DeleteLedgerOutput)
	return
}

func (d *QLDBDouble) DeleteLedgerWithContext(i0 context.Context, i1 *qldb.DeleteLedgerInput, i2 ...request.Option) (r0 *qldb.DeleteLedgerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLedgerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*qldb.DeleteLedgerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QLDBDouble) fakeDeleteLedgerWithContext(ctx context.Context, in *qldb.DeleteLedgerInput, _ ...request.Option) (*qldb.DeleteLedgerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteLedger cancelled", ctx.Err())
	default:
		return d.DeleteLedger(in)
	}
}

func (d *QLDBDouble) DescribeJournalS3Export(i0 *qldb.DescribeJournalS3ExportInput) (r0 *qldb.DescribeJournalS3ExportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeJournalS3Export", i0)
	r0, _ = returns[0].(*qldb.DescribeJournalS3ExportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QLDBDouble) DescribeJournalS3ExportRequest(i0 *qldb.DescribeJournalS3ExportInput) (r0 *request.Request, r1 *qldb.DescribeJournalS3ExportOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeJournalS3ExportRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*qldb.DescribeJournalS3ExportOutput)
	return
}

func (d *QLDBDouble) DescribeJournalS3ExportWithContext(i0 context.Context, i1 *qldb.DescribeJournalS3ExportInput, i2 ...request.Option) (r0 *qldb.DescribeJournalS3ExportOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeJournalS3ExportWithContext", i0, i1, i2)
	r0, _ = returns[0].(*qldb.DescribeJournalS3ExportOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QLDBDouble) fakeDescribeJournalS3ExportWithContext(ctx context.Context, in *qldb.DescribeJournalS3ExportInput, _ ...request.Option) (*qldb.DescribeJournalS3ExportOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeJournalS3Export cancelled", ctx.Err())
	default:
		return d.DescribeJournalS3Export(in)
	}
}

func (d *QLDBDouble) DescribeLedger(i0 *qldb.DescribeLedgerInput) (r0 *qldb.DescribeLedgerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLedger", i0)
	r0, _ = returns[0].(*qldb.DescribeLedgerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QLDBDouble) DescribeLedgerRequest(i0 *qldb.DescribeLedgerInput) (r0 *request.Request, r1 *qldb.DescribeLedgerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLedgerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*qldb.DescribeLedgerOutput)
	return
}

func (d *QLDBDouble) DescribeLedgerWithContext(i0 context.Context, i1 *qldb.DescribeLedgerInput, i2 ...request.Option) (r0 *qldb.DescribeLedgerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeLedgerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*qldb.DescribeLedgerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QLDBDouble) fakeDescribeLedgerWithContext(ctx context.Context, in *qldb.DescribeLedgerInput, _ ...request.Option) (*qldb.DescribeLedgerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeLedger cancelled", ctx.Err())
	default:
		return d.DescribeLedger(in)
	}
}

func (d *QLDBDouble) ExportJournalToS3(i0 *qldb.ExportJournalToS3Input) (r0 *qldb.ExportJournalToS3Output, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExportJournalToS3", i0)
	r0, _ = returns[0].(*qldb.ExportJournalToS3Output)
	r1, _ = returns[1].(error)
	return
}

func (d *QLDBDouble) ExportJournalToS3Request(i0 *qldb.ExportJournalToS3Input) (r0 *request.Request, r1 *qldb.ExportJournalToS3Output) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExportJournalToS3Request", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*qldb.ExportJournalToS3Output)
	return
}

func (d *QLDBDouble) ExportJournalToS3WithContext(i0 context.Context, i1 *qldb.ExportJournalToS3Input, i2 ...request.Option) (r0 *qldb.ExportJournalToS3Output, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExportJournalToS3WithContext", i0, i1, i2)
	r0, _ = returns[0].(*qldb.ExportJournalToS3Output)
	r1, _ = returns[1].(error)
	return
}

func (d *QLDBDouble) fakeExportJournalToS3WithContext(ctx context.Context, in *qldb.ExportJournalToS3Input, _ ...request.Option) (*qldb.ExportJournalToS3Output, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ExportJournalToS3 cancelled", ctx.Err())
	default:
		return d.ExportJournalToS3(in)
	}
}

func (d *QLDBDouble) GetBlock(i0 *qldb.GetBlockInput) (r0 *qldb.GetBlockOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBlock", i0)
	r0, _ = returns[0].(*qldb.GetBlockOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QLDBDouble) GetBlockRequest(i0 *qldb.GetBlockInput) (r0 *request.Request, r1 *qldb.GetBlockOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBlockRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*qldb.GetBlockOutput)
	return
}

func (d *QLDBDouble) GetBlockWithContext(i0 context.Context, i1 *qldb.GetBlockInput, i2 ...request.Option) (r0 *qldb.GetBlockOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBlockWithContext", i0, i1, i2)
	r0, _ = returns[0].(*qldb.GetBlockOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QLDBDouble) fakeGetBlockWithContext(ctx context.Context, in *qldb.GetBlockInput, _ ...request.Option) (*qldb.GetBlockOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBlock cancelled", ctx.Err())
	default:
		return d.GetBlock(in)
	}
}

func (d *QLDBDouble) GetDigest(i0 *qldb.GetDigestInput) (r0 *qldb.GetDigestOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDigest", i0)
	r0, _ = returns[0].(*qldb.GetDigestOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QLDBDouble) GetDigestRequest(i0 *qldb.GetDigestInput) (r0 *request.Request, r1 *qldb.GetDigestOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDigestRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*qldb.GetDigestOutput)
	return
}

func (d *QLDBDouble) GetDigestWithContext(i0 context.Context, i1 *qldb.GetDigestInput, i2 ...request.Option) (r0 *qldb.GetDigestOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDigestWithContext", i0, i1, i2)
	r0, _ = returns[0].(*qldb.GetDigestOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QLDBDouble) fakeGetDigestWithContext(ctx context.Context, in *qldb.GetDigestInput, _ ...request.Option) (*qldb.GetDigestOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDigest cancelled", ctx.Err())
	default:
		return d.GetDigest(in)
	}
}

func (d *QLDBDouble) GetRevision(i0 *qldb.GetRevisionInput) (r0 *qldb.GetRevisionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRevision", i0)
	r0, _ = returns[0].(*qldb.GetRevisionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QLDBDouble) GetRevisionRequest(i0 *qldb.GetRevisionInput) (r0 *request.Request, r1 *qldb.GetRevisionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRevisionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*qldb.GetRevisionOutput)
	return
}

func (d *QLDBDouble) GetRevisionWithContext(i0 context.Context, i1 *qldb.GetRevisionInput, i2 ...request.Option) (r0 *qldb.GetRevisionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRevisionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*qldb.GetRevisionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QLDBDouble) fakeGetRevisionWithContext(ctx context.Context, in *qldb.GetRevisionInput, _ ...request.Option) (*qldb.GetRevisionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRevision cancelled", ctx.Err())
	default:
		return d.GetRevision(in)
	}
}

func (d *QLDBDouble) ListJournalS3Exports(i0 *qldb.ListJournalS3ExportsInput) (r0 *qldb.ListJournalS3ExportsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJournalS3Exports", i0)
	r0, _ = returns[0].(*qldb.ListJournalS3ExportsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QLDBDouble) ListJournalS3ExportsForLedger(i0 *qldb.ListJournalS3ExportsForLedgerInput) (r0 *qldb.ListJournalS3ExportsForLedgerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJournalS3ExportsForLedger", i0)
	r0, _ = returns[0].(*qldb.ListJournalS3ExportsForLedgerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QLDBDouble) ListJournalS3ExportsForLedgerPages(i0 *qldb.ListJournalS3ExportsForLedgerInput, i1 func(*qldb.ListJournalS3ExportsForLedgerOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJournalS3ExportsForLedgerPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *QLDBDouble) fakeListJournalS3ExportsForLedgerPages(in *qldb.ListJournalS3ExportsForLedgerInput, pager func(*qldb.ListJournalS3ExportsForLedgerOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListJournalS3ExportsForLedger", paginators, in, pager)
}

func (d *QLDBDouble) ListJournalS3ExportsForLedgerPagesWithContext(i0 context.Context, i1 *qldb.ListJournalS3ExportsForLedgerInput, i2 func(*qldb.ListJournalS3ExportsForLedgerOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJournalS3ExportsForLedgerPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *QLDBDouble) fakeListJournalS3ExportsForLedgerPagesWithContext(ctx context.Context, in *qldb.ListJournalS3ExportsForLedgerInput, pager func(*qldb.ListJournalS3ExportsForLedgerOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListJournalS3ExportsForLedger", paginators, ctx, in, pager, options...)
}

func (d *QLDBDouble) ListJournalS3ExportsForLedgerRequest(i0 *qldb.ListJournalS3ExportsForLedgerInput) (r0 *request.Request, r1 *qldb.ListJournalS3ExportsForLedgerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJournalS3ExportsForLedgerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*qldb.ListJournalS3ExportsForLedgerOutput)
	return
}

func (d *QLDBDouble) ListJournalS3ExportsForLedgerWithContext(i0 context.Context, i1 *qldb.ListJournalS3ExportsForLedgerInput, i2 ...request.Option) (r0 *qldb.ListJournalS3ExportsForLedgerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJournalS3ExportsForLedgerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*qldb.ListJournalS3ExportsForLedgerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QLDBDouble) fakeListJournalS3ExportsForLedgerWithContext(ctx context.Context, in *qldb.ListJournalS3ExportsForLedgerInput, _ ...request.Option) (*qldb.ListJournalS3ExportsForLedgerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListJournalS3ExportsForLedger cancelled", ctx.Err())
	default:
		return d.ListJournalS3ExportsForLedger(in)
	}
}

func (d *QLDBDouble) ListJournalS3ExportsPages(i0 *qldb.ListJournalS3ExportsInput, i1 func(*qldb.ListJournalS3ExportsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJournalS3ExportsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *QLDBDouble) fakeListJournalS3ExportsPages(in *qldb.ListJournalS3ExportsInput, pager func(*qldb.ListJournalS3ExportsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListJournalS3Exports", paginators, in, pager)
}

func (d *QLDBDouble) ListJournalS3ExportsPagesWithContext(i0 context.Context, i1 *qldb.ListJournalS3ExportsInput, i2 func(*qldb.ListJournalS3ExportsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJournalS3ExportsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *QLDBDouble) fakeListJournalS3ExportsPagesWithContext(ctx context.Context, in *qldb.ListJournalS3ExportsInput, pager func(*qldb.ListJournalS3ExportsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListJournalS3Exports", paginators, ctx, in, pager, options...)
}

func (d *QLDBDouble) ListJournalS3ExportsRequest(i0 *qldb.ListJournalS3ExportsInput) (r0 *request.Request, r1 *qldb.ListJournalS3ExportsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJournalS3ExportsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*qldb.ListJournalS3ExportsOutput)
	return
}

func (d *QLDBDouble) ListJournalS3ExportsWithContext(i0 context.Context, i1 *qldb.ListJournalS3ExportsInput, i2 ...request.Option) (r0 *qldb.ListJournalS3ExportsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListJournalS3ExportsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*qldb.ListJournalS3ExportsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QLDBDouble) fakeListJournalS3ExportsWithContext(ctx context.Context, in *qldb.ListJournalS3ExportsInput, _ ...request.Option) (*qldb.ListJournalS3ExportsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListJournalS3Exports cancelled", ctx.Err())
	default:
		return d.ListJournalS3Exports(in)
	}
}

func (d *QLDBDouble) ListLedgers(i0 *qldb.ListLedgersInput) (r0 *qldb.ListLedgersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLedgers", i0)
	r0, _ = returns[0].(*qldb.ListLedgersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QLDBDouble) ListLedgersPages(i0 *qldb.ListLedgersInput, i1 func(*qldb.ListLedgersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLedgersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *QLDBDouble) fakeListLedgersPages(in *qldb.ListLedgersInput, pager func(*qldb.ListLedgersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListLedgers", paginators, in, pager)
}

func (d *QLDBDouble) ListLedgersPagesWithContext(i0 context.Context, i1 *qldb.ListLedgersInput, i2 func(*qldb.ListLedgersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLedgersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *QLDBDouble) fakeListLedgersPagesWithContext(ctx context.Context, in *qldb.ListLedgersInput, pager func(*qldb.ListLedgersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListLedgers", paginators, ctx, in, pager, options...)
}

func (d *QLDBDouble) ListLedgersRequest(i0 *qldb.ListLedgersInput) (r0 *request.Request, r1 *qldb.ListLedgersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLedgersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*qldb.ListLedgersOutput)
	return
}

func (d *QLDBDouble) ListLedgersWithContext(i0 context.Context, i1 *qldb.ListLedgersInput, i2 ...request.Option) (r0 *qldb.ListLedgersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLedgersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*qldb.ListLedgersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QLDBDouble) fakeListLedgersWithContext(ctx context.Context, in *qldb.ListLedgersInput, _ ...request.Option) (*qldb.ListLedgersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListLedgers cancelled", ctx.Err())
	default:
		return d.ListLedgers(in)
	}
}

func (d *QLDBDouble) ListTagsForResource(i0 *qldb.ListTagsForResourceInput) (r0 *qldb.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*qldb.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QLDBDouble) ListTagsForResourceRequest(i0 *qldb.ListTagsForResourceInput) (r0 *request.Request, r1 *qldb.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*qldb.ListTagsForResourceOutput)
	return
}

func (d *QLDBDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *qldb.ListTagsForResourceInput, i2 ...request.Option) (r0 *qldb.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*qldb.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QLDBDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *qldb.ListTagsForResourceInput, _ ...request.Option) (*qldb.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *QLDBDouble) TagResource(i0 *qldb.TagResourceInput) (r0 *qldb.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*qldb.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QLDBDouble) TagResourceRequest(i0 *qldb.TagResourceInput) (r0 *request.Request, r1 *qldb.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*qldb.TagResourceOutput)
	return
}

func (d *QLDBDouble) TagResourceWithContext(i0 context.Context, i1 *qldb.TagResourceInput, i2 ...request.Option) (r0 *qldb.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*qldb.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QLDBDouble) fakeTagResourceWithContext(ctx context.Context, in *qldb.TagResourceInput, _ ...request.Option) (*qldb.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *QLDBDouble) UntagResource(i0 *qldb.UntagResourceInput) (r0 *qldb.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*qldb.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QLDBDouble) UntagResourceRequest(i0 *qldb.UntagResourceInput) (r0 *request.Request, r1 *qldb.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*qldb.UntagResourceOutput)
	return
}

func (d *QLDBDouble) UntagResourceWithContext(i0 context.Context, i1 *qldb.UntagResourceInput, i2 ...request.Option) (r0 *qldb.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*qldb.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QLDBDouble) fakeUntagResourceWithContext(ctx context.Context, in *qldb.UntagResourceInput, _ ...request.Option) (*qldb.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *QLDBDouble) UpdateLedger(i0 *qldb.UpdateLedgerInput) (r0 *qldb.UpdateLedgerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateLedger", i0)
	r0, _ = returns[0].(*qldb.UpdateLedgerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QLDBDouble) UpdateLedgerRequest(i0 *qldb.UpdateLedgerInput) (r0 *request.Request, r1 *qldb.UpdateLedgerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateLedgerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*qldb.UpdateLedgerOutput)
	return
}

func (d *QLDBDouble) UpdateLedgerWithContext(i0 context.Context, i1 *qldb.UpdateLedgerInput, i2 ...request.Option) (r0 *qldb.UpdateLedgerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateLedgerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*qldb.UpdateLedgerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *QLDBDouble) fakeUpdateLedgerWithContext(ctx context.Context, in *qldb.UpdateLedgerInput, _ ...request.Option) (*qldb.UpdateLedgerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateLedger cancelled", ctx.Err())
	default:
		return d.UpdateLedger(in)
	}
}
