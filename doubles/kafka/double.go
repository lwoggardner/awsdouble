// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:13:22+11:00

// Package kafkadouble provides a TestDouble implementation of kafkaiface.KafkaAPI
package kafkadouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/kafka"
	"github.com/aws/aws-sdk-go/service/kafka/kafkaiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// KafkaDouble is TestDouble for kafkaiface.KafkaAPI
type KafkaDouble struct {
	kafkaiface.KafkaAPI
	*awsdouble.AWSTestDouble
}

// Constructor for KafkaDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *KafkaDouble {
	result := &KafkaDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*kafkaiface.KafkaAPI)(nil), configurators...)
	return result
}

func (d *KafkaDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *KafkaDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CreateClusterWithContext":
		return m.Fake(d.fakeCreateClusterWithContext)

	case "CreateConfigurationWithContext":
		return m.Fake(d.fakeCreateConfigurationWithContext)

	case "DeleteClusterWithContext":
		return m.Fake(d.fakeDeleteClusterWithContext)

	case "DescribeClusterOperationWithContext":
		return m.Fake(d.fakeDescribeClusterOperationWithContext)

	case "DescribeClusterWithContext":
		return m.Fake(d.fakeDescribeClusterWithContext)

	case "DescribeConfigurationRevisionWithContext":
		return m.Fake(d.fakeDescribeConfigurationRevisionWithContext)

	case "DescribeConfigurationWithContext":
		return m.Fake(d.fakeDescribeConfigurationWithContext)

	case "GetBootstrapBrokersWithContext":
		return m.Fake(d.fakeGetBootstrapBrokersWithContext)

	case "ListClusterOperationsPages":
		return m.Fake(d.fakeListClusterOperationsPages)

	case "ListClusterOperationsPagesWithContext":
		return m.Fake(d.fakeListClusterOperationsPagesWithContext)

	case "ListClusterOperationsWithContext":
		return m.Fake(d.fakeListClusterOperationsWithContext)

	case "ListClustersPages":
		return m.Fake(d.fakeListClustersPages)

	case "ListClustersPagesWithContext":
		return m.Fake(d.fakeListClustersPagesWithContext)

	case "ListClustersWithContext":
		return m.Fake(d.fakeListClustersWithContext)

	case "ListConfigurationRevisionsPages":
		return m.Fake(d.fakeListConfigurationRevisionsPages)

	case "ListConfigurationRevisionsPagesWithContext":
		return m.Fake(d.fakeListConfigurationRevisionsPagesWithContext)

	case "ListConfigurationRevisionsWithContext":
		return m.Fake(d.fakeListConfigurationRevisionsWithContext)

	case "ListConfigurationsPages":
		return m.Fake(d.fakeListConfigurationsPages)

	case "ListConfigurationsPagesWithContext":
		return m.Fake(d.fakeListConfigurationsPagesWithContext)

	case "ListConfigurationsWithContext":
		return m.Fake(d.fakeListConfigurationsWithContext)

	case "ListKafkaVersionsPages":
		return m.Fake(d.fakeListKafkaVersionsPages)

	case "ListKafkaVersionsPagesWithContext":
		return m.Fake(d.fakeListKafkaVersionsPagesWithContext)

	case "ListKafkaVersionsWithContext":
		return m.Fake(d.fakeListKafkaVersionsWithContext)

	case "ListNodesPages":
		return m.Fake(d.fakeListNodesPages)

	case "ListNodesPagesWithContext":
		return m.Fake(d.fakeListNodesPagesWithContext)

	case "ListNodesWithContext":
		return m.Fake(d.fakeListNodesWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateBrokerCountWithContext":
		return m.Fake(d.fakeUpdateBrokerCountWithContext)

	case "UpdateBrokerStorageWithContext":
		return m.Fake(d.fakeUpdateBrokerStorageWithContext)

	case "UpdateClusterConfigurationWithContext":
		return m.Fake(d.fakeUpdateClusterConfigurationWithContext)

	case "UpdateMonitoringWithContext":
		return m.Fake(d.fakeUpdateMonitoringWithContext)

	default:
		return nil
	}
}

func (d *KafkaDouble) CreateCluster(i0 *kafka.CreateClusterInput) (r0 *kafka.CreateClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCluster", i0)
	r0, _ = returns[0].(*kafka.CreateClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) CreateClusterRequest(i0 *kafka.CreateClusterInput) (r0 *request.Request, r1 *kafka.CreateClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kafka.CreateClusterOutput)
	return
}

func (d *KafkaDouble) CreateClusterWithContext(i0 context.Context, i1 *kafka.CreateClusterInput, i2 ...request.Option) (r0 *kafka.CreateClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kafka.CreateClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) fakeCreateClusterWithContext(ctx context.Context, in *kafka.CreateClusterInput, _ ...request.Option) (*kafka.CreateClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateCluster cancelled", ctx.Err())
	default:
		return d.CreateCluster(in)
	}
}

func (d *KafkaDouble) CreateConfiguration(i0 *kafka.CreateConfigurationInput) (r0 *kafka.CreateConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateConfiguration", i0)
	r0, _ = returns[0].(*kafka.CreateConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) CreateConfigurationRequest(i0 *kafka.CreateConfigurationInput) (r0 *request.Request, r1 *kafka.CreateConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kafka.CreateConfigurationOutput)
	return
}

func (d *KafkaDouble) CreateConfigurationWithContext(i0 context.Context, i1 *kafka.CreateConfigurationInput, i2 ...request.Option) (r0 *kafka.CreateConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kafka.CreateConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) fakeCreateConfigurationWithContext(ctx context.Context, in *kafka.CreateConfigurationInput, _ ...request.Option) (*kafka.CreateConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateConfiguration cancelled", ctx.Err())
	default:
		return d.CreateConfiguration(in)
	}
}

func (d *KafkaDouble) DeleteCluster(i0 *kafka.DeleteClusterInput) (r0 *kafka.DeleteClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCluster", i0)
	r0, _ = returns[0].(*kafka.DeleteClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) DeleteClusterRequest(i0 *kafka.DeleteClusterInput) (r0 *request.Request, r1 *kafka.DeleteClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kafka.DeleteClusterOutput)
	return
}

func (d *KafkaDouble) DeleteClusterWithContext(i0 context.Context, i1 *kafka.DeleteClusterInput, i2 ...request.Option) (r0 *kafka.DeleteClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kafka.DeleteClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) fakeDeleteClusterWithContext(ctx context.Context, in *kafka.DeleteClusterInput, _ ...request.Option) (*kafka.DeleteClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteCluster cancelled", ctx.Err())
	default:
		return d.DeleteCluster(in)
	}
}

func (d *KafkaDouble) DescribeCluster(i0 *kafka.DescribeClusterInput) (r0 *kafka.DescribeClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCluster", i0)
	r0, _ = returns[0].(*kafka.DescribeClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) DescribeClusterOperation(i0 *kafka.DescribeClusterOperationInput) (r0 *kafka.DescribeClusterOperationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterOperation", i0)
	r0, _ = returns[0].(*kafka.DescribeClusterOperationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) DescribeClusterOperationRequest(i0 *kafka.DescribeClusterOperationInput) (r0 *request.Request, r1 *kafka.DescribeClusterOperationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterOperationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kafka.DescribeClusterOperationOutput)
	return
}

func (d *KafkaDouble) DescribeClusterOperationWithContext(i0 context.Context, i1 *kafka.DescribeClusterOperationInput, i2 ...request.Option) (r0 *kafka.DescribeClusterOperationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterOperationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kafka.DescribeClusterOperationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) fakeDescribeClusterOperationWithContext(ctx context.Context, in *kafka.DescribeClusterOperationInput, _ ...request.Option) (*kafka.DescribeClusterOperationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeClusterOperation cancelled", ctx.Err())
	default:
		return d.DescribeClusterOperation(in)
	}
}

func (d *KafkaDouble) DescribeClusterRequest(i0 *kafka.DescribeClusterInput) (r0 *request.Request, r1 *kafka.DescribeClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kafka.DescribeClusterOutput)
	return
}

func (d *KafkaDouble) DescribeClusterWithContext(i0 context.Context, i1 *kafka.DescribeClusterInput, i2 ...request.Option) (r0 *kafka.DescribeClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kafka.DescribeClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) fakeDescribeClusterWithContext(ctx context.Context, in *kafka.DescribeClusterInput, _ ...request.Option) (*kafka.DescribeClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeCluster cancelled", ctx.Err())
	default:
		return d.DescribeCluster(in)
	}
}

func (d *KafkaDouble) DescribeConfiguration(i0 *kafka.DescribeConfigurationInput) (r0 *kafka.DescribeConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConfiguration", i0)
	r0, _ = returns[0].(*kafka.DescribeConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) DescribeConfigurationRequest(i0 *kafka.DescribeConfigurationInput) (r0 *request.Request, r1 *kafka.DescribeConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kafka.DescribeConfigurationOutput)
	return
}

func (d *KafkaDouble) DescribeConfigurationRevision(i0 *kafka.DescribeConfigurationRevisionInput) (r0 *kafka.DescribeConfigurationRevisionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConfigurationRevision", i0)
	r0, _ = returns[0].(*kafka.DescribeConfigurationRevisionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) DescribeConfigurationRevisionRequest(i0 *kafka.DescribeConfigurationRevisionInput) (r0 *request.Request, r1 *kafka.DescribeConfigurationRevisionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConfigurationRevisionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kafka.DescribeConfigurationRevisionOutput)
	return
}

func (d *KafkaDouble) DescribeConfigurationRevisionWithContext(i0 context.Context, i1 *kafka.DescribeConfigurationRevisionInput, i2 ...request.Option) (r0 *kafka.DescribeConfigurationRevisionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConfigurationRevisionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kafka.DescribeConfigurationRevisionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) fakeDescribeConfigurationRevisionWithContext(ctx context.Context, in *kafka.DescribeConfigurationRevisionInput, _ ...request.Option) (*kafka.DescribeConfigurationRevisionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeConfigurationRevision cancelled", ctx.Err())
	default:
		return d.DescribeConfigurationRevision(in)
	}
}

func (d *KafkaDouble) DescribeConfigurationWithContext(i0 context.Context, i1 *kafka.DescribeConfigurationInput, i2 ...request.Option) (r0 *kafka.DescribeConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kafka.DescribeConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) fakeDescribeConfigurationWithContext(ctx context.Context, in *kafka.DescribeConfigurationInput, _ ...request.Option) (*kafka.DescribeConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeConfiguration cancelled", ctx.Err())
	default:
		return d.DescribeConfiguration(in)
	}
}

func (d *KafkaDouble) GetBootstrapBrokers(i0 *kafka.GetBootstrapBrokersInput) (r0 *kafka.GetBootstrapBrokersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBootstrapBrokers", i0)
	r0, _ = returns[0].(*kafka.GetBootstrapBrokersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) GetBootstrapBrokersRequest(i0 *kafka.GetBootstrapBrokersInput) (r0 *request.Request, r1 *kafka.GetBootstrapBrokersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBootstrapBrokersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kafka.GetBootstrapBrokersOutput)
	return
}

func (d *KafkaDouble) GetBootstrapBrokersWithContext(i0 context.Context, i1 *kafka.GetBootstrapBrokersInput, i2 ...request.Option) (r0 *kafka.GetBootstrapBrokersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBootstrapBrokersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kafka.GetBootstrapBrokersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) fakeGetBootstrapBrokersWithContext(ctx context.Context, in *kafka.GetBootstrapBrokersInput, _ ...request.Option) (*kafka.GetBootstrapBrokersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBootstrapBrokers cancelled", ctx.Err())
	default:
		return d.GetBootstrapBrokers(in)
	}
}

func (d *KafkaDouble) ListClusterOperations(i0 *kafka.ListClusterOperationsInput) (r0 *kafka.ListClusterOperationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListClusterOperations", i0)
	r0, _ = returns[0].(*kafka.ListClusterOperationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) ListClusterOperationsPages(i0 *kafka.ListClusterOperationsInput, i1 func(*kafka.ListClusterOperationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListClusterOperationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *KafkaDouble) fakeListClusterOperationsPages(in *kafka.ListClusterOperationsInput, pager func(*kafka.ListClusterOperationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListClusterOperations", paginators, in, pager)
}

func (d *KafkaDouble) ListClusterOperationsPagesWithContext(i0 context.Context, i1 *kafka.ListClusterOperationsInput, i2 func(*kafka.ListClusterOperationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListClusterOperationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *KafkaDouble) fakeListClusterOperationsPagesWithContext(ctx context.Context, in *kafka.ListClusterOperationsInput, pager func(*kafka.ListClusterOperationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListClusterOperations", paginators, ctx, in, pager, options...)
}

func (d *KafkaDouble) ListClusterOperationsRequest(i0 *kafka.ListClusterOperationsInput) (r0 *request.Request, r1 *kafka.ListClusterOperationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListClusterOperationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kafka.ListClusterOperationsOutput)
	return
}

func (d *KafkaDouble) ListClusterOperationsWithContext(i0 context.Context, i1 *kafka.ListClusterOperationsInput, i2 ...request.Option) (r0 *kafka.ListClusterOperationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListClusterOperationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kafka.ListClusterOperationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) fakeListClusterOperationsWithContext(ctx context.Context, in *kafka.ListClusterOperationsInput, _ ...request.Option) (*kafka.ListClusterOperationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListClusterOperations cancelled", ctx.Err())
	default:
		return d.ListClusterOperations(in)
	}
}

func (d *KafkaDouble) ListClusters(i0 *kafka.ListClustersInput) (r0 *kafka.ListClustersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListClusters", i0)
	r0, _ = returns[0].(*kafka.ListClustersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) ListClustersPages(i0 *kafka.ListClustersInput, i1 func(*kafka.ListClustersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListClustersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *KafkaDouble) fakeListClustersPages(in *kafka.ListClustersInput, pager func(*kafka.ListClustersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListClusters", paginators, in, pager)
}

func (d *KafkaDouble) ListClustersPagesWithContext(i0 context.Context, i1 *kafka.ListClustersInput, i2 func(*kafka.ListClustersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListClustersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *KafkaDouble) fakeListClustersPagesWithContext(ctx context.Context, in *kafka.ListClustersInput, pager func(*kafka.ListClustersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListClusters", paginators, ctx, in, pager, options...)
}

func (d *KafkaDouble) ListClustersRequest(i0 *kafka.ListClustersInput) (r0 *request.Request, r1 *kafka.ListClustersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListClustersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kafka.ListClustersOutput)
	return
}

func (d *KafkaDouble) ListClustersWithContext(i0 context.Context, i1 *kafka.ListClustersInput, i2 ...request.Option) (r0 *kafka.ListClustersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListClustersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kafka.ListClustersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) fakeListClustersWithContext(ctx context.Context, in *kafka.ListClustersInput, _ ...request.Option) (*kafka.ListClustersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListClusters cancelled", ctx.Err())
	default:
		return d.ListClusters(in)
	}
}

func (d *KafkaDouble) ListConfigurationRevisions(i0 *kafka.ListConfigurationRevisionsInput) (r0 *kafka.ListConfigurationRevisionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListConfigurationRevisions", i0)
	r0, _ = returns[0].(*kafka.ListConfigurationRevisionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) ListConfigurationRevisionsPages(i0 *kafka.ListConfigurationRevisionsInput, i1 func(*kafka.ListConfigurationRevisionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListConfigurationRevisionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *KafkaDouble) fakeListConfigurationRevisionsPages(in *kafka.ListConfigurationRevisionsInput, pager func(*kafka.ListConfigurationRevisionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListConfigurationRevisions", paginators, in, pager)
}

func (d *KafkaDouble) ListConfigurationRevisionsPagesWithContext(i0 context.Context, i1 *kafka.ListConfigurationRevisionsInput, i2 func(*kafka.ListConfigurationRevisionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListConfigurationRevisionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *KafkaDouble) fakeListConfigurationRevisionsPagesWithContext(ctx context.Context, in *kafka.ListConfigurationRevisionsInput, pager func(*kafka.ListConfigurationRevisionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListConfigurationRevisions", paginators, ctx, in, pager, options...)
}

func (d *KafkaDouble) ListConfigurationRevisionsRequest(i0 *kafka.ListConfigurationRevisionsInput) (r0 *request.Request, r1 *kafka.ListConfigurationRevisionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListConfigurationRevisionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kafka.ListConfigurationRevisionsOutput)
	return
}

func (d *KafkaDouble) ListConfigurationRevisionsWithContext(i0 context.Context, i1 *kafka.ListConfigurationRevisionsInput, i2 ...request.Option) (r0 *kafka.ListConfigurationRevisionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListConfigurationRevisionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kafka.ListConfigurationRevisionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) fakeListConfigurationRevisionsWithContext(ctx context.Context, in *kafka.ListConfigurationRevisionsInput, _ ...request.Option) (*kafka.ListConfigurationRevisionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListConfigurationRevisions cancelled", ctx.Err())
	default:
		return d.ListConfigurationRevisions(in)
	}
}

func (d *KafkaDouble) ListConfigurations(i0 *kafka.ListConfigurationsInput) (r0 *kafka.ListConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListConfigurations", i0)
	r0, _ = returns[0].(*kafka.ListConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) ListConfigurationsPages(i0 *kafka.ListConfigurationsInput, i1 func(*kafka.ListConfigurationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListConfigurationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *KafkaDouble) fakeListConfigurationsPages(in *kafka.ListConfigurationsInput, pager func(*kafka.ListConfigurationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListConfigurations", paginators, in, pager)
}

func (d *KafkaDouble) ListConfigurationsPagesWithContext(i0 context.Context, i1 *kafka.ListConfigurationsInput, i2 func(*kafka.ListConfigurationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListConfigurationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *KafkaDouble) fakeListConfigurationsPagesWithContext(ctx context.Context, in *kafka.ListConfigurationsInput, pager func(*kafka.ListConfigurationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListConfigurations", paginators, ctx, in, pager, options...)
}

func (d *KafkaDouble) ListConfigurationsRequest(i0 *kafka.ListConfigurationsInput) (r0 *request.Request, r1 *kafka.ListConfigurationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListConfigurationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kafka.ListConfigurationsOutput)
	return
}

func (d *KafkaDouble) ListConfigurationsWithContext(i0 context.Context, i1 *kafka.ListConfigurationsInput, i2 ...request.Option) (r0 *kafka.ListConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListConfigurationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kafka.ListConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) fakeListConfigurationsWithContext(ctx context.Context, in *kafka.ListConfigurationsInput, _ ...request.Option) (*kafka.ListConfigurationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListConfigurations cancelled", ctx.Err())
	default:
		return d.ListConfigurations(in)
	}
}

func (d *KafkaDouble) ListKafkaVersions(i0 *kafka.ListKafkaVersionsInput) (r0 *kafka.ListKafkaVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListKafkaVersions", i0)
	r0, _ = returns[0].(*kafka.ListKafkaVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) ListKafkaVersionsPages(i0 *kafka.ListKafkaVersionsInput, i1 func(*kafka.ListKafkaVersionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListKafkaVersionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *KafkaDouble) fakeListKafkaVersionsPages(in *kafka.ListKafkaVersionsInput, pager func(*kafka.ListKafkaVersionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListKafkaVersions", paginators, in, pager)
}

func (d *KafkaDouble) ListKafkaVersionsPagesWithContext(i0 context.Context, i1 *kafka.ListKafkaVersionsInput, i2 func(*kafka.ListKafkaVersionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListKafkaVersionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *KafkaDouble) fakeListKafkaVersionsPagesWithContext(ctx context.Context, in *kafka.ListKafkaVersionsInput, pager func(*kafka.ListKafkaVersionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListKafkaVersions", paginators, ctx, in, pager, options...)
}

func (d *KafkaDouble) ListKafkaVersionsRequest(i0 *kafka.ListKafkaVersionsInput) (r0 *request.Request, r1 *kafka.ListKafkaVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListKafkaVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kafka.ListKafkaVersionsOutput)
	return
}

func (d *KafkaDouble) ListKafkaVersionsWithContext(i0 context.Context, i1 *kafka.ListKafkaVersionsInput, i2 ...request.Option) (r0 *kafka.ListKafkaVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListKafkaVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kafka.ListKafkaVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) fakeListKafkaVersionsWithContext(ctx context.Context, in *kafka.ListKafkaVersionsInput, _ ...request.Option) (*kafka.ListKafkaVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListKafkaVersions cancelled", ctx.Err())
	default:
		return d.ListKafkaVersions(in)
	}
}

func (d *KafkaDouble) ListNodes(i0 *kafka.ListNodesInput) (r0 *kafka.ListNodesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListNodes", i0)
	r0, _ = returns[0].(*kafka.ListNodesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) ListNodesPages(i0 *kafka.ListNodesInput, i1 func(*kafka.ListNodesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListNodesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *KafkaDouble) fakeListNodesPages(in *kafka.ListNodesInput, pager func(*kafka.ListNodesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListNodes", paginators, in, pager)
}

func (d *KafkaDouble) ListNodesPagesWithContext(i0 context.Context, i1 *kafka.ListNodesInput, i2 func(*kafka.ListNodesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListNodesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *KafkaDouble) fakeListNodesPagesWithContext(ctx context.Context, in *kafka.ListNodesInput, pager func(*kafka.ListNodesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListNodes", paginators, ctx, in, pager, options...)
}

func (d *KafkaDouble) ListNodesRequest(i0 *kafka.ListNodesInput) (r0 *request.Request, r1 *kafka.ListNodesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListNodesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kafka.ListNodesOutput)
	return
}

func (d *KafkaDouble) ListNodesWithContext(i0 context.Context, i1 *kafka.ListNodesInput, i2 ...request.Option) (r0 *kafka.ListNodesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListNodesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kafka.ListNodesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) fakeListNodesWithContext(ctx context.Context, in *kafka.ListNodesInput, _ ...request.Option) (*kafka.ListNodesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListNodes cancelled", ctx.Err())
	default:
		return d.ListNodes(in)
	}
}

func (d *KafkaDouble) ListTagsForResource(i0 *kafka.ListTagsForResourceInput) (r0 *kafka.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*kafka.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) ListTagsForResourceRequest(i0 *kafka.ListTagsForResourceInput) (r0 *request.Request, r1 *kafka.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kafka.ListTagsForResourceOutput)
	return
}

func (d *KafkaDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *kafka.ListTagsForResourceInput, i2 ...request.Option) (r0 *kafka.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kafka.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *kafka.ListTagsForResourceInput, _ ...request.Option) (*kafka.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *KafkaDouble) TagResource(i0 *kafka.TagResourceInput) (r0 *kafka.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*kafka.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) TagResourceRequest(i0 *kafka.TagResourceInput) (r0 *request.Request, r1 *kafka.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kafka.TagResourceOutput)
	return
}

func (d *KafkaDouble) TagResourceWithContext(i0 context.Context, i1 *kafka.TagResourceInput, i2 ...request.Option) (r0 *kafka.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kafka.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) fakeTagResourceWithContext(ctx context.Context, in *kafka.TagResourceInput, _ ...request.Option) (*kafka.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *KafkaDouble) UntagResource(i0 *kafka.UntagResourceInput) (r0 *kafka.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*kafka.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) UntagResourceRequest(i0 *kafka.UntagResourceInput) (r0 *request.Request, r1 *kafka.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kafka.UntagResourceOutput)
	return
}

func (d *KafkaDouble) UntagResourceWithContext(i0 context.Context, i1 *kafka.UntagResourceInput, i2 ...request.Option) (r0 *kafka.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kafka.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) fakeUntagResourceWithContext(ctx context.Context, in *kafka.UntagResourceInput, _ ...request.Option) (*kafka.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *KafkaDouble) UpdateBrokerCount(i0 *kafka.UpdateBrokerCountInput) (r0 *kafka.UpdateBrokerCountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateBrokerCount", i0)
	r0, _ = returns[0].(*kafka.UpdateBrokerCountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) UpdateBrokerCountRequest(i0 *kafka.UpdateBrokerCountInput) (r0 *request.Request, r1 *kafka.UpdateBrokerCountOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateBrokerCountRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kafka.UpdateBrokerCountOutput)
	return
}

func (d *KafkaDouble) UpdateBrokerCountWithContext(i0 context.Context, i1 *kafka.UpdateBrokerCountInput, i2 ...request.Option) (r0 *kafka.UpdateBrokerCountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateBrokerCountWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kafka.UpdateBrokerCountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) fakeUpdateBrokerCountWithContext(ctx context.Context, in *kafka.UpdateBrokerCountInput, _ ...request.Option) (*kafka.UpdateBrokerCountOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateBrokerCount cancelled", ctx.Err())
	default:
		return d.UpdateBrokerCount(in)
	}
}

func (d *KafkaDouble) UpdateBrokerStorage(i0 *kafka.UpdateBrokerStorageInput) (r0 *kafka.UpdateBrokerStorageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateBrokerStorage", i0)
	r0, _ = returns[0].(*kafka.UpdateBrokerStorageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) UpdateBrokerStorageRequest(i0 *kafka.UpdateBrokerStorageInput) (r0 *request.Request, r1 *kafka.UpdateBrokerStorageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateBrokerStorageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kafka.UpdateBrokerStorageOutput)
	return
}

func (d *KafkaDouble) UpdateBrokerStorageWithContext(i0 context.Context, i1 *kafka.UpdateBrokerStorageInput, i2 ...request.Option) (r0 *kafka.UpdateBrokerStorageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateBrokerStorageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kafka.UpdateBrokerStorageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) fakeUpdateBrokerStorageWithContext(ctx context.Context, in *kafka.UpdateBrokerStorageInput, _ ...request.Option) (*kafka.UpdateBrokerStorageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateBrokerStorage cancelled", ctx.Err())
	default:
		return d.UpdateBrokerStorage(in)
	}
}

func (d *KafkaDouble) UpdateClusterConfiguration(i0 *kafka.UpdateClusterConfigurationInput) (r0 *kafka.UpdateClusterConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateClusterConfiguration", i0)
	r0, _ = returns[0].(*kafka.UpdateClusterConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) UpdateClusterConfigurationRequest(i0 *kafka.UpdateClusterConfigurationInput) (r0 *request.Request, r1 *kafka.UpdateClusterConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateClusterConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kafka.UpdateClusterConfigurationOutput)
	return
}

func (d *KafkaDouble) UpdateClusterConfigurationWithContext(i0 context.Context, i1 *kafka.UpdateClusterConfigurationInput, i2 ...request.Option) (r0 *kafka.UpdateClusterConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateClusterConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kafka.UpdateClusterConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) fakeUpdateClusterConfigurationWithContext(ctx context.Context, in *kafka.UpdateClusterConfigurationInput, _ ...request.Option) (*kafka.UpdateClusterConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateClusterConfiguration cancelled", ctx.Err())
	default:
		return d.UpdateClusterConfiguration(in)
	}
}

func (d *KafkaDouble) UpdateMonitoring(i0 *kafka.UpdateMonitoringInput) (r0 *kafka.UpdateMonitoringOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMonitoring", i0)
	r0, _ = returns[0].(*kafka.UpdateMonitoringOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) UpdateMonitoringRequest(i0 *kafka.UpdateMonitoringInput) (r0 *request.Request, r1 *kafka.UpdateMonitoringOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMonitoringRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*kafka.UpdateMonitoringOutput)
	return
}

func (d *KafkaDouble) UpdateMonitoringWithContext(i0 context.Context, i1 *kafka.UpdateMonitoringInput, i2 ...request.Option) (r0 *kafka.UpdateMonitoringOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMonitoringWithContext", i0, i1, i2)
	r0, _ = returns[0].(*kafka.UpdateMonitoringOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *KafkaDouble) fakeUpdateMonitoringWithContext(ctx context.Context, in *kafka.UpdateMonitoringInput, _ ...request.Option) (*kafka.UpdateMonitoringOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateMonitoring cancelled", ctx.Err())
	default:
		return d.UpdateMonitoring(in)
	}
}
