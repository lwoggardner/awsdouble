// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:14:51+11:00

// Package savingsplansdouble provides a TestDouble implementation of savingsplansiface.SavingsPlansAPI
package savingsplansdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/savingsplans"
	"github.com/aws/aws-sdk-go/service/savingsplans/savingsplansiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// SavingsPlansDouble is TestDouble for savingsplansiface.SavingsPlansAPI
type SavingsPlansDouble struct {
	savingsplansiface.SavingsPlansAPI
	*awsdouble.AWSTestDouble
}

// Constructor for SavingsPlansDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *SavingsPlansDouble {
	result := &SavingsPlansDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*savingsplansiface.SavingsPlansAPI)(nil), configurators...)
	return result
}

func (d *SavingsPlansDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *SavingsPlansDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CreateSavingsPlanWithContext":
		return m.Fake(d.fakeCreateSavingsPlanWithContext)

	case "DescribeSavingsPlanRatesWithContext":
		return m.Fake(d.fakeDescribeSavingsPlanRatesWithContext)

	case "DescribeSavingsPlansOfferingRatesWithContext":
		return m.Fake(d.fakeDescribeSavingsPlansOfferingRatesWithContext)

	case "DescribeSavingsPlansOfferingsWithContext":
		return m.Fake(d.fakeDescribeSavingsPlansOfferingsWithContext)

	case "DescribeSavingsPlansWithContext":
		return m.Fake(d.fakeDescribeSavingsPlansWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	default:
		return nil
	}
}

func (d *SavingsPlansDouble) CreateSavingsPlan(i0 *savingsplans.CreateSavingsPlanInput) (r0 *savingsplans.CreateSavingsPlanOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSavingsPlan", i0)
	r0, _ = returns[0].(*savingsplans.CreateSavingsPlanOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SavingsPlansDouble) CreateSavingsPlanRequest(i0 *savingsplans.CreateSavingsPlanInput) (r0 *request.Request, r1 *savingsplans.CreateSavingsPlanOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSavingsPlanRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*savingsplans.CreateSavingsPlanOutput)
	return
}

func (d *SavingsPlansDouble) CreateSavingsPlanWithContext(i0 context.Context, i1 *savingsplans.CreateSavingsPlanInput, i2 ...request.Option) (r0 *savingsplans.CreateSavingsPlanOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSavingsPlanWithContext", i0, i1, i2)
	r0, _ = returns[0].(*savingsplans.CreateSavingsPlanOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SavingsPlansDouble) fakeCreateSavingsPlanWithContext(ctx context.Context, in *savingsplans.CreateSavingsPlanInput, _ ...request.Option) (*savingsplans.CreateSavingsPlanOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateSavingsPlan cancelled", ctx.Err())
	default:
		return d.CreateSavingsPlan(in)
	}
}

func (d *SavingsPlansDouble) DescribeSavingsPlanRates(i0 *savingsplans.DescribeSavingsPlanRatesInput) (r0 *savingsplans.DescribeSavingsPlanRatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSavingsPlanRates", i0)
	r0, _ = returns[0].(*savingsplans.DescribeSavingsPlanRatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SavingsPlansDouble) DescribeSavingsPlanRatesRequest(i0 *savingsplans.DescribeSavingsPlanRatesInput) (r0 *request.Request, r1 *savingsplans.DescribeSavingsPlanRatesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSavingsPlanRatesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*savingsplans.DescribeSavingsPlanRatesOutput)
	return
}

func (d *SavingsPlansDouble) DescribeSavingsPlanRatesWithContext(i0 context.Context, i1 *savingsplans.DescribeSavingsPlanRatesInput, i2 ...request.Option) (r0 *savingsplans.DescribeSavingsPlanRatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSavingsPlanRatesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*savingsplans.DescribeSavingsPlanRatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SavingsPlansDouble) fakeDescribeSavingsPlanRatesWithContext(ctx context.Context, in *savingsplans.DescribeSavingsPlanRatesInput, _ ...request.Option) (*savingsplans.DescribeSavingsPlanRatesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSavingsPlanRates cancelled", ctx.Err())
	default:
		return d.DescribeSavingsPlanRates(in)
	}
}

func (d *SavingsPlansDouble) DescribeSavingsPlans(i0 *savingsplans.DescribeSavingsPlansInput) (r0 *savingsplans.DescribeSavingsPlansOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSavingsPlans", i0)
	r0, _ = returns[0].(*savingsplans.DescribeSavingsPlansOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SavingsPlansDouble) DescribeSavingsPlansOfferingRates(i0 *savingsplans.DescribeSavingsPlansOfferingRatesInput) (r0 *savingsplans.DescribeSavingsPlansOfferingRatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSavingsPlansOfferingRates", i0)
	r0, _ = returns[0].(*savingsplans.DescribeSavingsPlansOfferingRatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SavingsPlansDouble) DescribeSavingsPlansOfferingRatesRequest(i0 *savingsplans.DescribeSavingsPlansOfferingRatesInput) (r0 *request.Request, r1 *savingsplans.DescribeSavingsPlansOfferingRatesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSavingsPlansOfferingRatesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*savingsplans.DescribeSavingsPlansOfferingRatesOutput)
	return
}

func (d *SavingsPlansDouble) DescribeSavingsPlansOfferingRatesWithContext(i0 context.Context, i1 *savingsplans.DescribeSavingsPlansOfferingRatesInput, i2 ...request.Option) (r0 *savingsplans.DescribeSavingsPlansOfferingRatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSavingsPlansOfferingRatesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*savingsplans.DescribeSavingsPlansOfferingRatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SavingsPlansDouble) fakeDescribeSavingsPlansOfferingRatesWithContext(ctx context.Context, in *savingsplans.DescribeSavingsPlansOfferingRatesInput, _ ...request.Option) (*savingsplans.DescribeSavingsPlansOfferingRatesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSavingsPlansOfferingRates cancelled", ctx.Err())
	default:
		return d.DescribeSavingsPlansOfferingRates(in)
	}
}

func (d *SavingsPlansDouble) DescribeSavingsPlansOfferings(i0 *savingsplans.DescribeSavingsPlansOfferingsInput) (r0 *savingsplans.DescribeSavingsPlansOfferingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSavingsPlansOfferings", i0)
	r0, _ = returns[0].(*savingsplans.DescribeSavingsPlansOfferingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SavingsPlansDouble) DescribeSavingsPlansOfferingsRequest(i0 *savingsplans.DescribeSavingsPlansOfferingsInput) (r0 *request.Request, r1 *savingsplans.DescribeSavingsPlansOfferingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSavingsPlansOfferingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*savingsplans.DescribeSavingsPlansOfferingsOutput)
	return
}

func (d *SavingsPlansDouble) DescribeSavingsPlansOfferingsWithContext(i0 context.Context, i1 *savingsplans.DescribeSavingsPlansOfferingsInput, i2 ...request.Option) (r0 *savingsplans.DescribeSavingsPlansOfferingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSavingsPlansOfferingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*savingsplans.DescribeSavingsPlansOfferingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SavingsPlansDouble) fakeDescribeSavingsPlansOfferingsWithContext(ctx context.Context, in *savingsplans.DescribeSavingsPlansOfferingsInput, _ ...request.Option) (*savingsplans.DescribeSavingsPlansOfferingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSavingsPlansOfferings cancelled", ctx.Err())
	default:
		return d.DescribeSavingsPlansOfferings(in)
	}
}

func (d *SavingsPlansDouble) DescribeSavingsPlansRequest(i0 *savingsplans.DescribeSavingsPlansInput) (r0 *request.Request, r1 *savingsplans.DescribeSavingsPlansOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSavingsPlansRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*savingsplans.DescribeSavingsPlansOutput)
	return
}

func (d *SavingsPlansDouble) DescribeSavingsPlansWithContext(i0 context.Context, i1 *savingsplans.DescribeSavingsPlansInput, i2 ...request.Option) (r0 *savingsplans.DescribeSavingsPlansOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSavingsPlansWithContext", i0, i1, i2)
	r0, _ = returns[0].(*savingsplans.DescribeSavingsPlansOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SavingsPlansDouble) fakeDescribeSavingsPlansWithContext(ctx context.Context, in *savingsplans.DescribeSavingsPlansInput, _ ...request.Option) (*savingsplans.DescribeSavingsPlansOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSavingsPlans cancelled", ctx.Err())
	default:
		return d.DescribeSavingsPlans(in)
	}
}

func (d *SavingsPlansDouble) ListTagsForResource(i0 *savingsplans.ListTagsForResourceInput) (r0 *savingsplans.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*savingsplans.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SavingsPlansDouble) ListTagsForResourceRequest(i0 *savingsplans.ListTagsForResourceInput) (r0 *request.Request, r1 *savingsplans.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*savingsplans.ListTagsForResourceOutput)
	return
}

func (d *SavingsPlansDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *savingsplans.ListTagsForResourceInput, i2 ...request.Option) (r0 *savingsplans.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*savingsplans.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SavingsPlansDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *savingsplans.ListTagsForResourceInput, _ ...request.Option) (*savingsplans.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *SavingsPlansDouble) TagResource(i0 *savingsplans.TagResourceInput) (r0 *savingsplans.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*savingsplans.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SavingsPlansDouble) TagResourceRequest(i0 *savingsplans.TagResourceInput) (r0 *request.Request, r1 *savingsplans.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*savingsplans.TagResourceOutput)
	return
}

func (d *SavingsPlansDouble) TagResourceWithContext(i0 context.Context, i1 *savingsplans.TagResourceInput, i2 ...request.Option) (r0 *savingsplans.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*savingsplans.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SavingsPlansDouble) fakeTagResourceWithContext(ctx context.Context, in *savingsplans.TagResourceInput, _ ...request.Option) (*savingsplans.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *SavingsPlansDouble) UntagResource(i0 *savingsplans.UntagResourceInput) (r0 *savingsplans.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*savingsplans.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SavingsPlansDouble) UntagResourceRequest(i0 *savingsplans.UntagResourceInput) (r0 *request.Request, r1 *savingsplans.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*savingsplans.UntagResourceOutput)
	return
}

func (d *SavingsPlansDouble) UntagResourceWithContext(i0 context.Context, i1 *savingsplans.UntagResourceInput, i2 ...request.Option) (r0 *savingsplans.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*savingsplans.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SavingsPlansDouble) fakeUntagResourceWithContext(ctx context.Context, in *savingsplans.UntagResourceInput, _ ...request.Option) (*savingsplans.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}
