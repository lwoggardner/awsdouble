// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:13:40+11:00

// Package licensemanagerdouble provides a TestDouble implementation of licensemanageriface.LicenseManagerAPI
package licensemanagerdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/licensemanager"
	"github.com/aws/aws-sdk-go/service/licensemanager/licensemanageriface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// LicenseManagerDouble is TestDouble for licensemanageriface.LicenseManagerAPI
type LicenseManagerDouble struct {
	licensemanageriface.LicenseManagerAPI
	*awsdouble.AWSTestDouble
}

// Constructor for LicenseManagerDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *LicenseManagerDouble {
	result := &LicenseManagerDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*licensemanageriface.LicenseManagerAPI)(nil), configurators...)
	return result
}

func (d *LicenseManagerDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *LicenseManagerDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CreateLicenseConfigurationWithContext":
		return m.Fake(d.fakeCreateLicenseConfigurationWithContext)

	case "DeleteLicenseConfigurationWithContext":
		return m.Fake(d.fakeDeleteLicenseConfigurationWithContext)

	case "GetLicenseConfigurationWithContext":
		return m.Fake(d.fakeGetLicenseConfigurationWithContext)

	case "GetServiceSettingsWithContext":
		return m.Fake(d.fakeGetServiceSettingsWithContext)

	case "ListAssociationsForLicenseConfigurationWithContext":
		return m.Fake(d.fakeListAssociationsForLicenseConfigurationWithContext)

	case "ListFailuresForLicenseConfigurationOperationsWithContext":
		return m.Fake(d.fakeListFailuresForLicenseConfigurationOperationsWithContext)

	case "ListLicenseConfigurationsWithContext":
		return m.Fake(d.fakeListLicenseConfigurationsWithContext)

	case "ListLicenseSpecificationsForResourceWithContext":
		return m.Fake(d.fakeListLicenseSpecificationsForResourceWithContext)

	case "ListResourceInventoryWithContext":
		return m.Fake(d.fakeListResourceInventoryWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "ListUsageForLicenseConfigurationWithContext":
		return m.Fake(d.fakeListUsageForLicenseConfigurationWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateLicenseConfigurationWithContext":
		return m.Fake(d.fakeUpdateLicenseConfigurationWithContext)

	case "UpdateLicenseSpecificationsForResourceWithContext":
		return m.Fake(d.fakeUpdateLicenseSpecificationsForResourceWithContext)

	case "UpdateServiceSettingsWithContext":
		return m.Fake(d.fakeUpdateServiceSettingsWithContext)

	default:
		return nil
	}
}

func (d *LicenseManagerDouble) CreateLicenseConfiguration(i0 *licensemanager.CreateLicenseConfigurationInput) (r0 *licensemanager.CreateLicenseConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLicenseConfiguration", i0)
	r0, _ = returns[0].(*licensemanager.CreateLicenseConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LicenseManagerDouble) CreateLicenseConfigurationRequest(i0 *licensemanager.CreateLicenseConfigurationInput) (r0 *request.Request, r1 *licensemanager.CreateLicenseConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLicenseConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*licensemanager.CreateLicenseConfigurationOutput)
	return
}

func (d *LicenseManagerDouble) CreateLicenseConfigurationWithContext(i0 context.Context, i1 *licensemanager.CreateLicenseConfigurationInput, i2 ...request.Option) (r0 *licensemanager.CreateLicenseConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateLicenseConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*licensemanager.CreateLicenseConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LicenseManagerDouble) fakeCreateLicenseConfigurationWithContext(ctx context.Context, in *licensemanager.CreateLicenseConfigurationInput, _ ...request.Option) (*licensemanager.CreateLicenseConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateLicenseConfiguration cancelled", ctx.Err())
	default:
		return d.CreateLicenseConfiguration(in)
	}
}

func (d *LicenseManagerDouble) DeleteLicenseConfiguration(i0 *licensemanager.DeleteLicenseConfigurationInput) (r0 *licensemanager.DeleteLicenseConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLicenseConfiguration", i0)
	r0, _ = returns[0].(*licensemanager.DeleteLicenseConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LicenseManagerDouble) DeleteLicenseConfigurationRequest(i0 *licensemanager.DeleteLicenseConfigurationInput) (r0 *request.Request, r1 *licensemanager.DeleteLicenseConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLicenseConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*licensemanager.DeleteLicenseConfigurationOutput)
	return
}

func (d *LicenseManagerDouble) DeleteLicenseConfigurationWithContext(i0 context.Context, i1 *licensemanager.DeleteLicenseConfigurationInput, i2 ...request.Option) (r0 *licensemanager.DeleteLicenseConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLicenseConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*licensemanager.DeleteLicenseConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LicenseManagerDouble) fakeDeleteLicenseConfigurationWithContext(ctx context.Context, in *licensemanager.DeleteLicenseConfigurationInput, _ ...request.Option) (*licensemanager.DeleteLicenseConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteLicenseConfiguration cancelled", ctx.Err())
	default:
		return d.DeleteLicenseConfiguration(in)
	}
}

func (d *LicenseManagerDouble) GetLicenseConfiguration(i0 *licensemanager.GetLicenseConfigurationInput) (r0 *licensemanager.GetLicenseConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLicenseConfiguration", i0)
	r0, _ = returns[0].(*licensemanager.GetLicenseConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LicenseManagerDouble) GetLicenseConfigurationRequest(i0 *licensemanager.GetLicenseConfigurationInput) (r0 *request.Request, r1 *licensemanager.GetLicenseConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLicenseConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*licensemanager.GetLicenseConfigurationOutput)
	return
}

func (d *LicenseManagerDouble) GetLicenseConfigurationWithContext(i0 context.Context, i1 *licensemanager.GetLicenseConfigurationInput, i2 ...request.Option) (r0 *licensemanager.GetLicenseConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLicenseConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*licensemanager.GetLicenseConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LicenseManagerDouble) fakeGetLicenseConfigurationWithContext(ctx context.Context, in *licensemanager.GetLicenseConfigurationInput, _ ...request.Option) (*licensemanager.GetLicenseConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetLicenseConfiguration cancelled", ctx.Err())
	default:
		return d.GetLicenseConfiguration(in)
	}
}

func (d *LicenseManagerDouble) GetServiceSettings(i0 *licensemanager.GetServiceSettingsInput) (r0 *licensemanager.GetServiceSettingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetServiceSettings", i0)
	r0, _ = returns[0].(*licensemanager.GetServiceSettingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LicenseManagerDouble) GetServiceSettingsRequest(i0 *licensemanager.GetServiceSettingsInput) (r0 *request.Request, r1 *licensemanager.GetServiceSettingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetServiceSettingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*licensemanager.GetServiceSettingsOutput)
	return
}

func (d *LicenseManagerDouble) GetServiceSettingsWithContext(i0 context.Context, i1 *licensemanager.GetServiceSettingsInput, i2 ...request.Option) (r0 *licensemanager.GetServiceSettingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetServiceSettingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*licensemanager.GetServiceSettingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LicenseManagerDouble) fakeGetServiceSettingsWithContext(ctx context.Context, in *licensemanager.GetServiceSettingsInput, _ ...request.Option) (*licensemanager.GetServiceSettingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetServiceSettings cancelled", ctx.Err())
	default:
		return d.GetServiceSettings(in)
	}
}

func (d *LicenseManagerDouble) ListAssociationsForLicenseConfiguration(i0 *licensemanager.ListAssociationsForLicenseConfigurationInput) (r0 *licensemanager.ListAssociationsForLicenseConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssociationsForLicenseConfiguration", i0)
	r0, _ = returns[0].(*licensemanager.ListAssociationsForLicenseConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LicenseManagerDouble) ListAssociationsForLicenseConfigurationRequest(i0 *licensemanager.ListAssociationsForLicenseConfigurationInput) (r0 *request.Request, r1 *licensemanager.ListAssociationsForLicenseConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssociationsForLicenseConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*licensemanager.ListAssociationsForLicenseConfigurationOutput)
	return
}

func (d *LicenseManagerDouble) ListAssociationsForLicenseConfigurationWithContext(i0 context.Context, i1 *licensemanager.ListAssociationsForLicenseConfigurationInput, i2 ...request.Option) (r0 *licensemanager.ListAssociationsForLicenseConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssociationsForLicenseConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*licensemanager.ListAssociationsForLicenseConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LicenseManagerDouble) fakeListAssociationsForLicenseConfigurationWithContext(ctx context.Context, in *licensemanager.ListAssociationsForLicenseConfigurationInput, _ ...request.Option) (*licensemanager.ListAssociationsForLicenseConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAssociationsForLicenseConfiguration cancelled", ctx.Err())
	default:
		return d.ListAssociationsForLicenseConfiguration(in)
	}
}

func (d *LicenseManagerDouble) ListFailuresForLicenseConfigurationOperations(i0 *licensemanager.ListFailuresForLicenseConfigurationOperationsInput) (r0 *licensemanager.ListFailuresForLicenseConfigurationOperationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFailuresForLicenseConfigurationOperations", i0)
	r0, _ = returns[0].(*licensemanager.ListFailuresForLicenseConfigurationOperationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LicenseManagerDouble) ListFailuresForLicenseConfigurationOperationsRequest(i0 *licensemanager.ListFailuresForLicenseConfigurationOperationsInput) (r0 *request.Request, r1 *licensemanager.ListFailuresForLicenseConfigurationOperationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFailuresForLicenseConfigurationOperationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*licensemanager.ListFailuresForLicenseConfigurationOperationsOutput)
	return
}

func (d *LicenseManagerDouble) ListFailuresForLicenseConfigurationOperationsWithContext(i0 context.Context, i1 *licensemanager.ListFailuresForLicenseConfigurationOperationsInput, i2 ...request.Option) (r0 *licensemanager.ListFailuresForLicenseConfigurationOperationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFailuresForLicenseConfigurationOperationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*licensemanager.ListFailuresForLicenseConfigurationOperationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LicenseManagerDouble) fakeListFailuresForLicenseConfigurationOperationsWithContext(ctx context.Context, in *licensemanager.ListFailuresForLicenseConfigurationOperationsInput, _ ...request.Option) (*licensemanager.ListFailuresForLicenseConfigurationOperationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListFailuresForLicenseConfigurationOperations cancelled", ctx.Err())
	default:
		return d.ListFailuresForLicenseConfigurationOperations(in)
	}
}

func (d *LicenseManagerDouble) ListLicenseConfigurations(i0 *licensemanager.ListLicenseConfigurationsInput) (r0 *licensemanager.ListLicenseConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLicenseConfigurations", i0)
	r0, _ = returns[0].(*licensemanager.ListLicenseConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LicenseManagerDouble) ListLicenseConfigurationsRequest(i0 *licensemanager.ListLicenseConfigurationsInput) (r0 *request.Request, r1 *licensemanager.ListLicenseConfigurationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLicenseConfigurationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*licensemanager.ListLicenseConfigurationsOutput)
	return
}

func (d *LicenseManagerDouble) ListLicenseConfigurationsWithContext(i0 context.Context, i1 *licensemanager.ListLicenseConfigurationsInput, i2 ...request.Option) (r0 *licensemanager.ListLicenseConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLicenseConfigurationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*licensemanager.ListLicenseConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LicenseManagerDouble) fakeListLicenseConfigurationsWithContext(ctx context.Context, in *licensemanager.ListLicenseConfigurationsInput, _ ...request.Option) (*licensemanager.ListLicenseConfigurationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListLicenseConfigurations cancelled", ctx.Err())
	default:
		return d.ListLicenseConfigurations(in)
	}
}

func (d *LicenseManagerDouble) ListLicenseSpecificationsForResource(i0 *licensemanager.ListLicenseSpecificationsForResourceInput) (r0 *licensemanager.ListLicenseSpecificationsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLicenseSpecificationsForResource", i0)
	r0, _ = returns[0].(*licensemanager.ListLicenseSpecificationsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LicenseManagerDouble) ListLicenseSpecificationsForResourceRequest(i0 *licensemanager.ListLicenseSpecificationsForResourceInput) (r0 *request.Request, r1 *licensemanager.ListLicenseSpecificationsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLicenseSpecificationsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*licensemanager.ListLicenseSpecificationsForResourceOutput)
	return
}

func (d *LicenseManagerDouble) ListLicenseSpecificationsForResourceWithContext(i0 context.Context, i1 *licensemanager.ListLicenseSpecificationsForResourceInput, i2 ...request.Option) (r0 *licensemanager.ListLicenseSpecificationsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLicenseSpecificationsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*licensemanager.ListLicenseSpecificationsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LicenseManagerDouble) fakeListLicenseSpecificationsForResourceWithContext(ctx context.Context, in *licensemanager.ListLicenseSpecificationsForResourceInput, _ ...request.Option) (*licensemanager.ListLicenseSpecificationsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListLicenseSpecificationsForResource cancelled", ctx.Err())
	default:
		return d.ListLicenseSpecificationsForResource(in)
	}
}

func (d *LicenseManagerDouble) ListResourceInventory(i0 *licensemanager.ListResourceInventoryInput) (r0 *licensemanager.ListResourceInventoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourceInventory", i0)
	r0, _ = returns[0].(*licensemanager.ListResourceInventoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LicenseManagerDouble) ListResourceInventoryRequest(i0 *licensemanager.ListResourceInventoryInput) (r0 *request.Request, r1 *licensemanager.ListResourceInventoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourceInventoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*licensemanager.ListResourceInventoryOutput)
	return
}

func (d *LicenseManagerDouble) ListResourceInventoryWithContext(i0 context.Context, i1 *licensemanager.ListResourceInventoryInput, i2 ...request.Option) (r0 *licensemanager.ListResourceInventoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourceInventoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*licensemanager.ListResourceInventoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LicenseManagerDouble) fakeListResourceInventoryWithContext(ctx context.Context, in *licensemanager.ListResourceInventoryInput, _ ...request.Option) (*licensemanager.ListResourceInventoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListResourceInventory cancelled", ctx.Err())
	default:
		return d.ListResourceInventory(in)
	}
}

func (d *LicenseManagerDouble) ListTagsForResource(i0 *licensemanager.ListTagsForResourceInput) (r0 *licensemanager.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*licensemanager.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LicenseManagerDouble) ListTagsForResourceRequest(i0 *licensemanager.ListTagsForResourceInput) (r0 *request.Request, r1 *licensemanager.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*licensemanager.ListTagsForResourceOutput)
	return
}

func (d *LicenseManagerDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *licensemanager.ListTagsForResourceInput, i2 ...request.Option) (r0 *licensemanager.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*licensemanager.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LicenseManagerDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *licensemanager.ListTagsForResourceInput, _ ...request.Option) (*licensemanager.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *LicenseManagerDouble) ListUsageForLicenseConfiguration(i0 *licensemanager.ListUsageForLicenseConfigurationInput) (r0 *licensemanager.ListUsageForLicenseConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUsageForLicenseConfiguration", i0)
	r0, _ = returns[0].(*licensemanager.ListUsageForLicenseConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LicenseManagerDouble) ListUsageForLicenseConfigurationRequest(i0 *licensemanager.ListUsageForLicenseConfigurationInput) (r0 *request.Request, r1 *licensemanager.ListUsageForLicenseConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUsageForLicenseConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*licensemanager.ListUsageForLicenseConfigurationOutput)
	return
}

func (d *LicenseManagerDouble) ListUsageForLicenseConfigurationWithContext(i0 context.Context, i1 *licensemanager.ListUsageForLicenseConfigurationInput, i2 ...request.Option) (r0 *licensemanager.ListUsageForLicenseConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListUsageForLicenseConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*licensemanager.ListUsageForLicenseConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LicenseManagerDouble) fakeListUsageForLicenseConfigurationWithContext(ctx context.Context, in *licensemanager.ListUsageForLicenseConfigurationInput, _ ...request.Option) (*licensemanager.ListUsageForLicenseConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListUsageForLicenseConfiguration cancelled", ctx.Err())
	default:
		return d.ListUsageForLicenseConfiguration(in)
	}
}

func (d *LicenseManagerDouble) TagResource(i0 *licensemanager.TagResourceInput) (r0 *licensemanager.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*licensemanager.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LicenseManagerDouble) TagResourceRequest(i0 *licensemanager.TagResourceInput) (r0 *request.Request, r1 *licensemanager.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*licensemanager.TagResourceOutput)
	return
}

func (d *LicenseManagerDouble) TagResourceWithContext(i0 context.Context, i1 *licensemanager.TagResourceInput, i2 ...request.Option) (r0 *licensemanager.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*licensemanager.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LicenseManagerDouble) fakeTagResourceWithContext(ctx context.Context, in *licensemanager.TagResourceInput, _ ...request.Option) (*licensemanager.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *LicenseManagerDouble) UntagResource(i0 *licensemanager.UntagResourceInput) (r0 *licensemanager.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*licensemanager.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LicenseManagerDouble) UntagResourceRequest(i0 *licensemanager.UntagResourceInput) (r0 *request.Request, r1 *licensemanager.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*licensemanager.UntagResourceOutput)
	return
}

func (d *LicenseManagerDouble) UntagResourceWithContext(i0 context.Context, i1 *licensemanager.UntagResourceInput, i2 ...request.Option) (r0 *licensemanager.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*licensemanager.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LicenseManagerDouble) fakeUntagResourceWithContext(ctx context.Context, in *licensemanager.UntagResourceInput, _ ...request.Option) (*licensemanager.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *LicenseManagerDouble) UpdateLicenseConfiguration(i0 *licensemanager.UpdateLicenseConfigurationInput) (r0 *licensemanager.UpdateLicenseConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateLicenseConfiguration", i0)
	r0, _ = returns[0].(*licensemanager.UpdateLicenseConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LicenseManagerDouble) UpdateLicenseConfigurationRequest(i0 *licensemanager.UpdateLicenseConfigurationInput) (r0 *request.Request, r1 *licensemanager.UpdateLicenseConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateLicenseConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*licensemanager.UpdateLicenseConfigurationOutput)
	return
}

func (d *LicenseManagerDouble) UpdateLicenseConfigurationWithContext(i0 context.Context, i1 *licensemanager.UpdateLicenseConfigurationInput, i2 ...request.Option) (r0 *licensemanager.UpdateLicenseConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateLicenseConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*licensemanager.UpdateLicenseConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LicenseManagerDouble) fakeUpdateLicenseConfigurationWithContext(ctx context.Context, in *licensemanager.UpdateLicenseConfigurationInput, _ ...request.Option) (*licensemanager.UpdateLicenseConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateLicenseConfiguration cancelled", ctx.Err())
	default:
		return d.UpdateLicenseConfiguration(in)
	}
}

func (d *LicenseManagerDouble) UpdateLicenseSpecificationsForResource(i0 *licensemanager.UpdateLicenseSpecificationsForResourceInput) (r0 *licensemanager.UpdateLicenseSpecificationsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateLicenseSpecificationsForResource", i0)
	r0, _ = returns[0].(*licensemanager.UpdateLicenseSpecificationsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LicenseManagerDouble) UpdateLicenseSpecificationsForResourceRequest(i0 *licensemanager.UpdateLicenseSpecificationsForResourceInput) (r0 *request.Request, r1 *licensemanager.UpdateLicenseSpecificationsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateLicenseSpecificationsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*licensemanager.UpdateLicenseSpecificationsForResourceOutput)
	return
}

func (d *LicenseManagerDouble) UpdateLicenseSpecificationsForResourceWithContext(i0 context.Context, i1 *licensemanager.UpdateLicenseSpecificationsForResourceInput, i2 ...request.Option) (r0 *licensemanager.UpdateLicenseSpecificationsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateLicenseSpecificationsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*licensemanager.UpdateLicenseSpecificationsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LicenseManagerDouble) fakeUpdateLicenseSpecificationsForResourceWithContext(ctx context.Context, in *licensemanager.UpdateLicenseSpecificationsForResourceInput, _ ...request.Option) (*licensemanager.UpdateLicenseSpecificationsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateLicenseSpecificationsForResource cancelled", ctx.Err())
	default:
		return d.UpdateLicenseSpecificationsForResource(in)
	}
}

func (d *LicenseManagerDouble) UpdateServiceSettings(i0 *licensemanager.UpdateServiceSettingsInput) (r0 *licensemanager.UpdateServiceSettingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateServiceSettings", i0)
	r0, _ = returns[0].(*licensemanager.UpdateServiceSettingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LicenseManagerDouble) UpdateServiceSettingsRequest(i0 *licensemanager.UpdateServiceSettingsInput) (r0 *request.Request, r1 *licensemanager.UpdateServiceSettingsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateServiceSettingsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*licensemanager.UpdateServiceSettingsOutput)
	return
}

func (d *LicenseManagerDouble) UpdateServiceSettingsWithContext(i0 context.Context, i1 *licensemanager.UpdateServiceSettingsInput, i2 ...request.Option) (r0 *licensemanager.UpdateServiceSettingsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateServiceSettingsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*licensemanager.UpdateServiceSettingsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *LicenseManagerDouble) fakeUpdateServiceSettingsWithContext(ctx context.Context, in *licensemanager.UpdateServiceSettingsInput, _ ...request.Option) (*licensemanager.UpdateServiceSettingsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateServiceSettings cancelled", ctx.Err())
	default:
		return d.UpdateServiceSettings(in)
	}
}
