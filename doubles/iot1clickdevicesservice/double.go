// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:13:12+11:00

// Package iot1clickdevicesservicedouble provides a TestDouble implementation of iot1clickdevicesserviceiface.IoT1ClickDevicesServiceAPI
package iot1clickdevicesservicedouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/iot1clickdevicesservice"
	"github.com/aws/aws-sdk-go/service/iot1clickdevicesservice/iot1clickdevicesserviceiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// IoT1ClickDevicesServiceDouble is TestDouble for iot1clickdevicesserviceiface.IoT1ClickDevicesServiceAPI
type IoT1ClickDevicesServiceDouble struct {
	iot1clickdevicesserviceiface.IoT1ClickDevicesServiceAPI
	*awsdouble.AWSTestDouble
}

// Constructor for IoT1ClickDevicesServiceDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *IoT1ClickDevicesServiceDouble {
	result := &IoT1ClickDevicesServiceDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*iot1clickdevicesserviceiface.IoT1ClickDevicesServiceAPI)(nil), configurators...)
	return result
}

func (d *IoT1ClickDevicesServiceDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *IoT1ClickDevicesServiceDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "ClaimDevicesByClaimCodeWithContext":
		return m.Fake(d.fakeClaimDevicesByClaimCodeWithContext)

	case "DescribeDeviceWithContext":
		return m.Fake(d.fakeDescribeDeviceWithContext)

	case "FinalizeDeviceClaimWithContext":
		return m.Fake(d.fakeFinalizeDeviceClaimWithContext)

	case "GetDeviceMethodsWithContext":
		return m.Fake(d.fakeGetDeviceMethodsWithContext)

	case "InitiateDeviceClaimWithContext":
		return m.Fake(d.fakeInitiateDeviceClaimWithContext)

	case "InvokeDeviceMethodWithContext":
		return m.Fake(d.fakeInvokeDeviceMethodWithContext)

	case "ListDeviceEventsWithContext":
		return m.Fake(d.fakeListDeviceEventsWithContext)

	case "ListDevicesWithContext":
		return m.Fake(d.fakeListDevicesWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UnclaimDeviceWithContext":
		return m.Fake(d.fakeUnclaimDeviceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateDeviceStateWithContext":
		return m.Fake(d.fakeUpdateDeviceStateWithContext)

	default:
		return nil
	}
}

func (d *IoT1ClickDevicesServiceDouble) ClaimDevicesByClaimCode(i0 *iot1clickdevicesservice.ClaimDevicesByClaimCodeInput) (r0 *iot1clickdevicesservice.ClaimDevicesByClaimCodeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ClaimDevicesByClaimCode", i0)
	r0, _ = returns[0].(*iot1clickdevicesservice.ClaimDevicesByClaimCodeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickDevicesServiceDouble) ClaimDevicesByClaimCodeRequest(i0 *iot1clickdevicesservice.ClaimDevicesByClaimCodeInput) (r0 *request.Request, r1 *iot1clickdevicesservice.ClaimDevicesByClaimCodeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ClaimDevicesByClaimCodeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot1clickdevicesservice.ClaimDevicesByClaimCodeOutput)
	return
}

func (d *IoT1ClickDevicesServiceDouble) ClaimDevicesByClaimCodeWithContext(i0 context.Context, i1 *iot1clickdevicesservice.ClaimDevicesByClaimCodeInput, i2 ...request.Option) (r0 *iot1clickdevicesservice.ClaimDevicesByClaimCodeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ClaimDevicesByClaimCodeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot1clickdevicesservice.ClaimDevicesByClaimCodeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickDevicesServiceDouble) fakeClaimDevicesByClaimCodeWithContext(ctx context.Context, in *iot1clickdevicesservice.ClaimDevicesByClaimCodeInput, _ ...request.Option) (*iot1clickdevicesservice.ClaimDevicesByClaimCodeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ClaimDevicesByClaimCode cancelled", ctx.Err())
	default:
		return d.ClaimDevicesByClaimCode(in)
	}
}

func (d *IoT1ClickDevicesServiceDouble) DescribeDevice(i0 *iot1clickdevicesservice.DescribeDeviceInput) (r0 *iot1clickdevicesservice.DescribeDeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDevice", i0)
	r0, _ = returns[0].(*iot1clickdevicesservice.DescribeDeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickDevicesServiceDouble) DescribeDeviceRequest(i0 *iot1clickdevicesservice.DescribeDeviceInput) (r0 *request.Request, r1 *iot1clickdevicesservice.DescribeDeviceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDeviceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot1clickdevicesservice.DescribeDeviceOutput)
	return
}

func (d *IoT1ClickDevicesServiceDouble) DescribeDeviceWithContext(i0 context.Context, i1 *iot1clickdevicesservice.DescribeDeviceInput, i2 ...request.Option) (r0 *iot1clickdevicesservice.DescribeDeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDeviceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot1clickdevicesservice.DescribeDeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickDevicesServiceDouble) fakeDescribeDeviceWithContext(ctx context.Context, in *iot1clickdevicesservice.DescribeDeviceInput, _ ...request.Option) (*iot1clickdevicesservice.DescribeDeviceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDevice cancelled", ctx.Err())
	default:
		return d.DescribeDevice(in)
	}
}

func (d *IoT1ClickDevicesServiceDouble) FinalizeDeviceClaim(i0 *iot1clickdevicesservice.FinalizeDeviceClaimInput) (r0 *iot1clickdevicesservice.FinalizeDeviceClaimOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("FinalizeDeviceClaim", i0)
	r0, _ = returns[0].(*iot1clickdevicesservice.FinalizeDeviceClaimOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickDevicesServiceDouble) FinalizeDeviceClaimRequest(i0 *iot1clickdevicesservice.FinalizeDeviceClaimInput) (r0 *request.Request, r1 *iot1clickdevicesservice.FinalizeDeviceClaimOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("FinalizeDeviceClaimRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot1clickdevicesservice.FinalizeDeviceClaimOutput)
	return
}

func (d *IoT1ClickDevicesServiceDouble) FinalizeDeviceClaimWithContext(i0 context.Context, i1 *iot1clickdevicesservice.FinalizeDeviceClaimInput, i2 ...request.Option) (r0 *iot1clickdevicesservice.FinalizeDeviceClaimOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("FinalizeDeviceClaimWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot1clickdevicesservice.FinalizeDeviceClaimOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickDevicesServiceDouble) fakeFinalizeDeviceClaimWithContext(ctx context.Context, in *iot1clickdevicesservice.FinalizeDeviceClaimInput, _ ...request.Option) (*iot1clickdevicesservice.FinalizeDeviceClaimOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "FinalizeDeviceClaim cancelled", ctx.Err())
	default:
		return d.FinalizeDeviceClaim(in)
	}
}

func (d *IoT1ClickDevicesServiceDouble) GetDeviceMethods(i0 *iot1clickdevicesservice.GetDeviceMethodsInput) (r0 *iot1clickdevicesservice.GetDeviceMethodsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeviceMethods", i0)
	r0, _ = returns[0].(*iot1clickdevicesservice.GetDeviceMethodsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickDevicesServiceDouble) GetDeviceMethodsRequest(i0 *iot1clickdevicesservice.GetDeviceMethodsInput) (r0 *request.Request, r1 *iot1clickdevicesservice.GetDeviceMethodsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeviceMethodsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot1clickdevicesservice.GetDeviceMethodsOutput)
	return
}

func (d *IoT1ClickDevicesServiceDouble) GetDeviceMethodsWithContext(i0 context.Context, i1 *iot1clickdevicesservice.GetDeviceMethodsInput, i2 ...request.Option) (r0 *iot1clickdevicesservice.GetDeviceMethodsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeviceMethodsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot1clickdevicesservice.GetDeviceMethodsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickDevicesServiceDouble) fakeGetDeviceMethodsWithContext(ctx context.Context, in *iot1clickdevicesservice.GetDeviceMethodsInput, _ ...request.Option) (*iot1clickdevicesservice.GetDeviceMethodsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDeviceMethods cancelled", ctx.Err())
	default:
		return d.GetDeviceMethods(in)
	}
}

func (d *IoT1ClickDevicesServiceDouble) InitiateDeviceClaim(i0 *iot1clickdevicesservice.InitiateDeviceClaimInput) (r0 *iot1clickdevicesservice.InitiateDeviceClaimOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("InitiateDeviceClaim", i0)
	r0, _ = returns[0].(*iot1clickdevicesservice.InitiateDeviceClaimOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickDevicesServiceDouble) InitiateDeviceClaimRequest(i0 *iot1clickdevicesservice.InitiateDeviceClaimInput) (r0 *request.Request, r1 *iot1clickdevicesservice.InitiateDeviceClaimOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("InitiateDeviceClaimRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot1clickdevicesservice.InitiateDeviceClaimOutput)
	return
}

func (d *IoT1ClickDevicesServiceDouble) InitiateDeviceClaimWithContext(i0 context.Context, i1 *iot1clickdevicesservice.InitiateDeviceClaimInput, i2 ...request.Option) (r0 *iot1clickdevicesservice.InitiateDeviceClaimOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("InitiateDeviceClaimWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot1clickdevicesservice.InitiateDeviceClaimOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickDevicesServiceDouble) fakeInitiateDeviceClaimWithContext(ctx context.Context, in *iot1clickdevicesservice.InitiateDeviceClaimInput, _ ...request.Option) (*iot1clickdevicesservice.InitiateDeviceClaimOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "InitiateDeviceClaim cancelled", ctx.Err())
	default:
		return d.InitiateDeviceClaim(in)
	}
}

func (d *IoT1ClickDevicesServiceDouble) InvokeDeviceMethod(i0 *iot1clickdevicesservice.InvokeDeviceMethodInput) (r0 *iot1clickdevicesservice.InvokeDeviceMethodOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("InvokeDeviceMethod", i0)
	r0, _ = returns[0].(*iot1clickdevicesservice.InvokeDeviceMethodOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickDevicesServiceDouble) InvokeDeviceMethodRequest(i0 *iot1clickdevicesservice.InvokeDeviceMethodInput) (r0 *request.Request, r1 *iot1clickdevicesservice.InvokeDeviceMethodOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("InvokeDeviceMethodRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot1clickdevicesservice.InvokeDeviceMethodOutput)
	return
}

func (d *IoT1ClickDevicesServiceDouble) InvokeDeviceMethodWithContext(i0 context.Context, i1 *iot1clickdevicesservice.InvokeDeviceMethodInput, i2 ...request.Option) (r0 *iot1clickdevicesservice.InvokeDeviceMethodOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("InvokeDeviceMethodWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot1clickdevicesservice.InvokeDeviceMethodOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickDevicesServiceDouble) fakeInvokeDeviceMethodWithContext(ctx context.Context, in *iot1clickdevicesservice.InvokeDeviceMethodInput, _ ...request.Option) (*iot1clickdevicesservice.InvokeDeviceMethodOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "InvokeDeviceMethod cancelled", ctx.Err())
	default:
		return d.InvokeDeviceMethod(in)
	}
}

func (d *IoT1ClickDevicesServiceDouble) ListDeviceEvents(i0 *iot1clickdevicesservice.ListDeviceEventsInput) (r0 *iot1clickdevicesservice.ListDeviceEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeviceEvents", i0)
	r0, _ = returns[0].(*iot1clickdevicesservice.ListDeviceEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickDevicesServiceDouble) ListDeviceEventsRequest(i0 *iot1clickdevicesservice.ListDeviceEventsInput) (r0 *request.Request, r1 *iot1clickdevicesservice.ListDeviceEventsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeviceEventsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot1clickdevicesservice.ListDeviceEventsOutput)
	return
}

func (d *IoT1ClickDevicesServiceDouble) ListDeviceEventsWithContext(i0 context.Context, i1 *iot1clickdevicesservice.ListDeviceEventsInput, i2 ...request.Option) (r0 *iot1clickdevicesservice.ListDeviceEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDeviceEventsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot1clickdevicesservice.ListDeviceEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickDevicesServiceDouble) fakeListDeviceEventsWithContext(ctx context.Context, in *iot1clickdevicesservice.ListDeviceEventsInput, _ ...request.Option) (*iot1clickdevicesservice.ListDeviceEventsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDeviceEvents cancelled", ctx.Err())
	default:
		return d.ListDeviceEvents(in)
	}
}

func (d *IoT1ClickDevicesServiceDouble) ListDevices(i0 *iot1clickdevicesservice.ListDevicesInput) (r0 *iot1clickdevicesservice.ListDevicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDevices", i0)
	r0, _ = returns[0].(*iot1clickdevicesservice.ListDevicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickDevicesServiceDouble) ListDevicesRequest(i0 *iot1clickdevicesservice.ListDevicesInput) (r0 *request.Request, r1 *iot1clickdevicesservice.ListDevicesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDevicesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot1clickdevicesservice.ListDevicesOutput)
	return
}

func (d *IoT1ClickDevicesServiceDouble) ListDevicesWithContext(i0 context.Context, i1 *iot1clickdevicesservice.ListDevicesInput, i2 ...request.Option) (r0 *iot1clickdevicesservice.ListDevicesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDevicesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot1clickdevicesservice.ListDevicesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickDevicesServiceDouble) fakeListDevicesWithContext(ctx context.Context, in *iot1clickdevicesservice.ListDevicesInput, _ ...request.Option) (*iot1clickdevicesservice.ListDevicesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDevices cancelled", ctx.Err())
	default:
		return d.ListDevices(in)
	}
}

func (d *IoT1ClickDevicesServiceDouble) ListTagsForResource(i0 *iot1clickdevicesservice.ListTagsForResourceInput) (r0 *iot1clickdevicesservice.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*iot1clickdevicesservice.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickDevicesServiceDouble) ListTagsForResourceRequest(i0 *iot1clickdevicesservice.ListTagsForResourceInput) (r0 *request.Request, r1 *iot1clickdevicesservice.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot1clickdevicesservice.ListTagsForResourceOutput)
	return
}

func (d *IoT1ClickDevicesServiceDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *iot1clickdevicesservice.ListTagsForResourceInput, i2 ...request.Option) (r0 *iot1clickdevicesservice.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot1clickdevicesservice.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickDevicesServiceDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *iot1clickdevicesservice.ListTagsForResourceInput, _ ...request.Option) (*iot1clickdevicesservice.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *IoT1ClickDevicesServiceDouble) TagResource(i0 *iot1clickdevicesservice.TagResourceInput) (r0 *iot1clickdevicesservice.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*iot1clickdevicesservice.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickDevicesServiceDouble) TagResourceRequest(i0 *iot1clickdevicesservice.TagResourceInput) (r0 *request.Request, r1 *iot1clickdevicesservice.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot1clickdevicesservice.TagResourceOutput)
	return
}

func (d *IoT1ClickDevicesServiceDouble) TagResourceWithContext(i0 context.Context, i1 *iot1clickdevicesservice.TagResourceInput, i2 ...request.Option) (r0 *iot1clickdevicesservice.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot1clickdevicesservice.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickDevicesServiceDouble) fakeTagResourceWithContext(ctx context.Context, in *iot1clickdevicesservice.TagResourceInput, _ ...request.Option) (*iot1clickdevicesservice.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *IoT1ClickDevicesServiceDouble) UnclaimDevice(i0 *iot1clickdevicesservice.UnclaimDeviceInput) (r0 *iot1clickdevicesservice.UnclaimDeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnclaimDevice", i0)
	r0, _ = returns[0].(*iot1clickdevicesservice.UnclaimDeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickDevicesServiceDouble) UnclaimDeviceRequest(i0 *iot1clickdevicesservice.UnclaimDeviceInput) (r0 *request.Request, r1 *iot1clickdevicesservice.UnclaimDeviceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnclaimDeviceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot1clickdevicesservice.UnclaimDeviceOutput)
	return
}

func (d *IoT1ClickDevicesServiceDouble) UnclaimDeviceWithContext(i0 context.Context, i1 *iot1clickdevicesservice.UnclaimDeviceInput, i2 ...request.Option) (r0 *iot1clickdevicesservice.UnclaimDeviceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UnclaimDeviceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot1clickdevicesservice.UnclaimDeviceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickDevicesServiceDouble) fakeUnclaimDeviceWithContext(ctx context.Context, in *iot1clickdevicesservice.UnclaimDeviceInput, _ ...request.Option) (*iot1clickdevicesservice.UnclaimDeviceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UnclaimDevice cancelled", ctx.Err())
	default:
		return d.UnclaimDevice(in)
	}
}

func (d *IoT1ClickDevicesServiceDouble) UntagResource(i0 *iot1clickdevicesservice.UntagResourceInput) (r0 *iot1clickdevicesservice.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*iot1clickdevicesservice.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickDevicesServiceDouble) UntagResourceRequest(i0 *iot1clickdevicesservice.UntagResourceInput) (r0 *request.Request, r1 *iot1clickdevicesservice.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot1clickdevicesservice.UntagResourceOutput)
	return
}

func (d *IoT1ClickDevicesServiceDouble) UntagResourceWithContext(i0 context.Context, i1 *iot1clickdevicesservice.UntagResourceInput, i2 ...request.Option) (r0 *iot1clickdevicesservice.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot1clickdevicesservice.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickDevicesServiceDouble) fakeUntagResourceWithContext(ctx context.Context, in *iot1clickdevicesservice.UntagResourceInput, _ ...request.Option) (*iot1clickdevicesservice.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *IoT1ClickDevicesServiceDouble) UpdateDeviceState(i0 *iot1clickdevicesservice.UpdateDeviceStateInput) (r0 *iot1clickdevicesservice.UpdateDeviceStateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDeviceState", i0)
	r0, _ = returns[0].(*iot1clickdevicesservice.UpdateDeviceStateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickDevicesServiceDouble) UpdateDeviceStateRequest(i0 *iot1clickdevicesservice.UpdateDeviceStateInput) (r0 *request.Request, r1 *iot1clickdevicesservice.UpdateDeviceStateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDeviceStateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*iot1clickdevicesservice.UpdateDeviceStateOutput)
	return
}

func (d *IoT1ClickDevicesServiceDouble) UpdateDeviceStateWithContext(i0 context.Context, i1 *iot1clickdevicesservice.UpdateDeviceStateInput, i2 ...request.Option) (r0 *iot1clickdevicesservice.UpdateDeviceStateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDeviceStateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*iot1clickdevicesservice.UpdateDeviceStateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoT1ClickDevicesServiceDouble) fakeUpdateDeviceStateWithContext(ctx context.Context, in *iot1clickdevicesservice.UpdateDeviceStateInput, _ ...request.Option) (*iot1clickdevicesservice.UpdateDeviceStateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDeviceState cancelled", ctx.Err())
	default:
		return d.UpdateDeviceState(in)
	}
}
