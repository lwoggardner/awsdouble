// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:12:13+11:00

// Package datapipelinedouble provides a TestDouble implementation of datapipelineiface.DataPipelineAPI
package datapipelinedouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/datapipeline"
	"github.com/aws/aws-sdk-go/service/datapipeline/datapipelineiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// DataPipelineDouble is TestDouble for datapipelineiface.DataPipelineAPI
type DataPipelineDouble struct {
	datapipelineiface.DataPipelineAPI
	*awsdouble.AWSTestDouble
}

// Constructor for DataPipelineDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *DataPipelineDouble {
	result := &DataPipelineDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*datapipelineiface.DataPipelineAPI)(nil), configurators...)
	return result
}

func (d *DataPipelineDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *DataPipelineDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "ActivatePipelineWithContext":
		return m.Fake(d.fakeActivatePipelineWithContext)

	case "AddTagsWithContext":
		return m.Fake(d.fakeAddTagsWithContext)

	case "CreatePipelineWithContext":
		return m.Fake(d.fakeCreatePipelineWithContext)

	case "DeactivatePipelineWithContext":
		return m.Fake(d.fakeDeactivatePipelineWithContext)

	case "DeletePipelineWithContext":
		return m.Fake(d.fakeDeletePipelineWithContext)

	case "DescribeObjectsPages":
		return m.Fake(d.fakeDescribeObjectsPages)

	case "DescribeObjectsPagesWithContext":
		return m.Fake(d.fakeDescribeObjectsPagesWithContext)

	case "DescribeObjectsWithContext":
		return m.Fake(d.fakeDescribeObjectsWithContext)

	case "DescribePipelinesWithContext":
		return m.Fake(d.fakeDescribePipelinesWithContext)

	case "EvaluateExpressionWithContext":
		return m.Fake(d.fakeEvaluateExpressionWithContext)

	case "GetPipelineDefinitionWithContext":
		return m.Fake(d.fakeGetPipelineDefinitionWithContext)

	case "ListPipelinesPages":
		return m.Fake(d.fakeListPipelinesPages)

	case "ListPipelinesPagesWithContext":
		return m.Fake(d.fakeListPipelinesPagesWithContext)

	case "ListPipelinesWithContext":
		return m.Fake(d.fakeListPipelinesWithContext)

	case "PollForTaskWithContext":
		return m.Fake(d.fakePollForTaskWithContext)

	case "PutPipelineDefinitionWithContext":
		return m.Fake(d.fakePutPipelineDefinitionWithContext)

	case "QueryObjectsPages":
		return m.Fake(d.fakeQueryObjectsPages)

	case "QueryObjectsPagesWithContext":
		return m.Fake(d.fakeQueryObjectsPagesWithContext)

	case "QueryObjectsWithContext":
		return m.Fake(d.fakeQueryObjectsWithContext)

	case "RemoveTagsWithContext":
		return m.Fake(d.fakeRemoveTagsWithContext)

	case "ReportTaskProgressWithContext":
		return m.Fake(d.fakeReportTaskProgressWithContext)

	case "ReportTaskRunnerHeartbeatWithContext":
		return m.Fake(d.fakeReportTaskRunnerHeartbeatWithContext)

	case "SetStatusWithContext":
		return m.Fake(d.fakeSetStatusWithContext)

	case "SetTaskStatusWithContext":
		return m.Fake(d.fakeSetTaskStatusWithContext)

	case "ValidatePipelineDefinitionWithContext":
		return m.Fake(d.fakeValidatePipelineDefinitionWithContext)

	default:
		return nil
	}
}

func (d *DataPipelineDouble) ActivatePipeline(i0 *datapipeline.ActivatePipelineInput) (r0 *datapipeline.ActivatePipelineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ActivatePipeline", i0)
	r0, _ = returns[0].(*datapipeline.ActivatePipelineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) ActivatePipelineRequest(i0 *datapipeline.ActivatePipelineInput) (r0 *request.Request, r1 *datapipeline.ActivatePipelineOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ActivatePipelineRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*datapipeline.ActivatePipelineOutput)
	return
}

func (d *DataPipelineDouble) ActivatePipelineWithContext(i0 context.Context, i1 *datapipeline.ActivatePipelineInput, i2 ...request.Option) (r0 *datapipeline.ActivatePipelineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ActivatePipelineWithContext", i0, i1, i2)
	r0, _ = returns[0].(*datapipeline.ActivatePipelineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) fakeActivatePipelineWithContext(ctx context.Context, in *datapipeline.ActivatePipelineInput, _ ...request.Option) (*datapipeline.ActivatePipelineOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ActivatePipeline cancelled", ctx.Err())
	default:
		return d.ActivatePipeline(in)
	}
}

func (d *DataPipelineDouble) AddTags(i0 *datapipeline.AddTagsInput) (r0 *datapipeline.AddTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTags", i0)
	r0, _ = returns[0].(*datapipeline.AddTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) AddTagsRequest(i0 *datapipeline.AddTagsInput) (r0 *request.Request, r1 *datapipeline.AddTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*datapipeline.AddTagsOutput)
	return
}

func (d *DataPipelineDouble) AddTagsWithContext(i0 context.Context, i1 *datapipeline.AddTagsInput, i2 ...request.Option) (r0 *datapipeline.AddTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*datapipeline.AddTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) fakeAddTagsWithContext(ctx context.Context, in *datapipeline.AddTagsInput, _ ...request.Option) (*datapipeline.AddTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddTags cancelled", ctx.Err())
	default:
		return d.AddTags(in)
	}
}

func (d *DataPipelineDouble) CreatePipeline(i0 *datapipeline.CreatePipelineInput) (r0 *datapipeline.CreatePipelineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePipeline", i0)
	r0, _ = returns[0].(*datapipeline.CreatePipelineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) CreatePipelineRequest(i0 *datapipeline.CreatePipelineInput) (r0 *request.Request, r1 *datapipeline.CreatePipelineOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePipelineRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*datapipeline.CreatePipelineOutput)
	return
}

func (d *DataPipelineDouble) CreatePipelineWithContext(i0 context.Context, i1 *datapipeline.CreatePipelineInput, i2 ...request.Option) (r0 *datapipeline.CreatePipelineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePipelineWithContext", i0, i1, i2)
	r0, _ = returns[0].(*datapipeline.CreatePipelineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) fakeCreatePipelineWithContext(ctx context.Context, in *datapipeline.CreatePipelineInput, _ ...request.Option) (*datapipeline.CreatePipelineOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreatePipeline cancelled", ctx.Err())
	default:
		return d.CreatePipeline(in)
	}
}

func (d *DataPipelineDouble) DeactivatePipeline(i0 *datapipeline.DeactivatePipelineInput) (r0 *datapipeline.DeactivatePipelineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeactivatePipeline", i0)
	r0, _ = returns[0].(*datapipeline.DeactivatePipelineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) DeactivatePipelineRequest(i0 *datapipeline.DeactivatePipelineInput) (r0 *request.Request, r1 *datapipeline.DeactivatePipelineOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeactivatePipelineRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*datapipeline.DeactivatePipelineOutput)
	return
}

func (d *DataPipelineDouble) DeactivatePipelineWithContext(i0 context.Context, i1 *datapipeline.DeactivatePipelineInput, i2 ...request.Option) (r0 *datapipeline.DeactivatePipelineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeactivatePipelineWithContext", i0, i1, i2)
	r0, _ = returns[0].(*datapipeline.DeactivatePipelineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) fakeDeactivatePipelineWithContext(ctx context.Context, in *datapipeline.DeactivatePipelineInput, _ ...request.Option) (*datapipeline.DeactivatePipelineOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeactivatePipeline cancelled", ctx.Err())
	default:
		return d.DeactivatePipeline(in)
	}
}

func (d *DataPipelineDouble) DeletePipeline(i0 *datapipeline.DeletePipelineInput) (r0 *datapipeline.DeletePipelineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePipeline", i0)
	r0, _ = returns[0].(*datapipeline.DeletePipelineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) DeletePipelineRequest(i0 *datapipeline.DeletePipelineInput) (r0 *request.Request, r1 *datapipeline.DeletePipelineOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePipelineRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*datapipeline.DeletePipelineOutput)
	return
}

func (d *DataPipelineDouble) DeletePipelineWithContext(i0 context.Context, i1 *datapipeline.DeletePipelineInput, i2 ...request.Option) (r0 *datapipeline.DeletePipelineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePipelineWithContext", i0, i1, i2)
	r0, _ = returns[0].(*datapipeline.DeletePipelineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) fakeDeletePipelineWithContext(ctx context.Context, in *datapipeline.DeletePipelineInput, _ ...request.Option) (*datapipeline.DeletePipelineOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeletePipeline cancelled", ctx.Err())
	default:
		return d.DeletePipeline(in)
	}
}

func (d *DataPipelineDouble) DescribeObjects(i0 *datapipeline.DescribeObjectsInput) (r0 *datapipeline.DescribeObjectsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeObjects", i0)
	r0, _ = returns[0].(*datapipeline.DescribeObjectsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) DescribeObjectsPages(i0 *datapipeline.DescribeObjectsInput, i1 func(*datapipeline.DescribeObjectsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeObjectsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DataPipelineDouble) fakeDescribeObjectsPages(in *datapipeline.DescribeObjectsInput, pager func(*datapipeline.DescribeObjectsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeObjects", paginators, in, pager)
}

func (d *DataPipelineDouble) DescribeObjectsPagesWithContext(i0 context.Context, i1 *datapipeline.DescribeObjectsInput, i2 func(*datapipeline.DescribeObjectsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeObjectsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DataPipelineDouble) fakeDescribeObjectsPagesWithContext(ctx context.Context, in *datapipeline.DescribeObjectsInput, pager func(*datapipeline.DescribeObjectsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeObjects", paginators, ctx, in, pager, options...)
}

func (d *DataPipelineDouble) DescribeObjectsRequest(i0 *datapipeline.DescribeObjectsInput) (r0 *request.Request, r1 *datapipeline.DescribeObjectsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeObjectsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*datapipeline.DescribeObjectsOutput)
	return
}

func (d *DataPipelineDouble) DescribeObjectsWithContext(i0 context.Context, i1 *datapipeline.DescribeObjectsInput, i2 ...request.Option) (r0 *datapipeline.DescribeObjectsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeObjectsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*datapipeline.DescribeObjectsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) fakeDescribeObjectsWithContext(ctx context.Context, in *datapipeline.DescribeObjectsInput, _ ...request.Option) (*datapipeline.DescribeObjectsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeObjects cancelled", ctx.Err())
	default:
		return d.DescribeObjects(in)
	}
}

func (d *DataPipelineDouble) DescribePipelines(i0 *datapipeline.DescribePipelinesInput) (r0 *datapipeline.DescribePipelinesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePipelines", i0)
	r0, _ = returns[0].(*datapipeline.DescribePipelinesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) DescribePipelinesRequest(i0 *datapipeline.DescribePipelinesInput) (r0 *request.Request, r1 *datapipeline.DescribePipelinesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePipelinesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*datapipeline.DescribePipelinesOutput)
	return
}

func (d *DataPipelineDouble) DescribePipelinesWithContext(i0 context.Context, i1 *datapipeline.DescribePipelinesInput, i2 ...request.Option) (r0 *datapipeline.DescribePipelinesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePipelinesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*datapipeline.DescribePipelinesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) fakeDescribePipelinesWithContext(ctx context.Context, in *datapipeline.DescribePipelinesInput, _ ...request.Option) (*datapipeline.DescribePipelinesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribePipelines cancelled", ctx.Err())
	default:
		return d.DescribePipelines(in)
	}
}

func (d *DataPipelineDouble) EvaluateExpression(i0 *datapipeline.EvaluateExpressionInput) (r0 *datapipeline.EvaluateExpressionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EvaluateExpression", i0)
	r0, _ = returns[0].(*datapipeline.EvaluateExpressionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) EvaluateExpressionRequest(i0 *datapipeline.EvaluateExpressionInput) (r0 *request.Request, r1 *datapipeline.EvaluateExpressionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EvaluateExpressionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*datapipeline.EvaluateExpressionOutput)
	return
}

func (d *DataPipelineDouble) EvaluateExpressionWithContext(i0 context.Context, i1 *datapipeline.EvaluateExpressionInput, i2 ...request.Option) (r0 *datapipeline.EvaluateExpressionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("EvaluateExpressionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*datapipeline.EvaluateExpressionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) fakeEvaluateExpressionWithContext(ctx context.Context, in *datapipeline.EvaluateExpressionInput, _ ...request.Option) (*datapipeline.EvaluateExpressionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "EvaluateExpression cancelled", ctx.Err())
	default:
		return d.EvaluateExpression(in)
	}
}

func (d *DataPipelineDouble) GetPipelineDefinition(i0 *datapipeline.GetPipelineDefinitionInput) (r0 *datapipeline.GetPipelineDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPipelineDefinition", i0)
	r0, _ = returns[0].(*datapipeline.GetPipelineDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) GetPipelineDefinitionRequest(i0 *datapipeline.GetPipelineDefinitionInput) (r0 *request.Request, r1 *datapipeline.GetPipelineDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPipelineDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*datapipeline.GetPipelineDefinitionOutput)
	return
}

func (d *DataPipelineDouble) GetPipelineDefinitionWithContext(i0 context.Context, i1 *datapipeline.GetPipelineDefinitionInput, i2 ...request.Option) (r0 *datapipeline.GetPipelineDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPipelineDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*datapipeline.GetPipelineDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) fakeGetPipelineDefinitionWithContext(ctx context.Context, in *datapipeline.GetPipelineDefinitionInput, _ ...request.Option) (*datapipeline.GetPipelineDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetPipelineDefinition cancelled", ctx.Err())
	default:
		return d.GetPipelineDefinition(in)
	}
}

func (d *DataPipelineDouble) ListPipelines(i0 *datapipeline.ListPipelinesInput) (r0 *datapipeline.ListPipelinesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPipelines", i0)
	r0, _ = returns[0].(*datapipeline.ListPipelinesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) ListPipelinesPages(i0 *datapipeline.ListPipelinesInput, i1 func(*datapipeline.ListPipelinesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPipelinesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DataPipelineDouble) fakeListPipelinesPages(in *datapipeline.ListPipelinesInput, pager func(*datapipeline.ListPipelinesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListPipelines", paginators, in, pager)
}

func (d *DataPipelineDouble) ListPipelinesPagesWithContext(i0 context.Context, i1 *datapipeline.ListPipelinesInput, i2 func(*datapipeline.ListPipelinesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPipelinesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DataPipelineDouble) fakeListPipelinesPagesWithContext(ctx context.Context, in *datapipeline.ListPipelinesInput, pager func(*datapipeline.ListPipelinesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListPipelines", paginators, ctx, in, pager, options...)
}

func (d *DataPipelineDouble) ListPipelinesRequest(i0 *datapipeline.ListPipelinesInput) (r0 *request.Request, r1 *datapipeline.ListPipelinesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPipelinesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*datapipeline.ListPipelinesOutput)
	return
}

func (d *DataPipelineDouble) ListPipelinesWithContext(i0 context.Context, i1 *datapipeline.ListPipelinesInput, i2 ...request.Option) (r0 *datapipeline.ListPipelinesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPipelinesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*datapipeline.ListPipelinesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) fakeListPipelinesWithContext(ctx context.Context, in *datapipeline.ListPipelinesInput, _ ...request.Option) (*datapipeline.ListPipelinesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListPipelines cancelled", ctx.Err())
	default:
		return d.ListPipelines(in)
	}
}

func (d *DataPipelineDouble) PollForTask(i0 *datapipeline.PollForTaskInput) (r0 *datapipeline.PollForTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PollForTask", i0)
	r0, _ = returns[0].(*datapipeline.PollForTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) PollForTaskRequest(i0 *datapipeline.PollForTaskInput) (r0 *request.Request, r1 *datapipeline.PollForTaskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PollForTaskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*datapipeline.PollForTaskOutput)
	return
}

func (d *DataPipelineDouble) PollForTaskWithContext(i0 context.Context, i1 *datapipeline.PollForTaskInput, i2 ...request.Option) (r0 *datapipeline.PollForTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PollForTaskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*datapipeline.PollForTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) fakePollForTaskWithContext(ctx context.Context, in *datapipeline.PollForTaskInput, _ ...request.Option) (*datapipeline.PollForTaskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PollForTask cancelled", ctx.Err())
	default:
		return d.PollForTask(in)
	}
}

func (d *DataPipelineDouble) PutPipelineDefinition(i0 *datapipeline.PutPipelineDefinitionInput) (r0 *datapipeline.PutPipelineDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutPipelineDefinition", i0)
	r0, _ = returns[0].(*datapipeline.PutPipelineDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) PutPipelineDefinitionRequest(i0 *datapipeline.PutPipelineDefinitionInput) (r0 *request.Request, r1 *datapipeline.PutPipelineDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutPipelineDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*datapipeline.PutPipelineDefinitionOutput)
	return
}

func (d *DataPipelineDouble) PutPipelineDefinitionWithContext(i0 context.Context, i1 *datapipeline.PutPipelineDefinitionInput, i2 ...request.Option) (r0 *datapipeline.PutPipelineDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutPipelineDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*datapipeline.PutPipelineDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) fakePutPipelineDefinitionWithContext(ctx context.Context, in *datapipeline.PutPipelineDefinitionInput, _ ...request.Option) (*datapipeline.PutPipelineDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutPipelineDefinition cancelled", ctx.Err())
	default:
		return d.PutPipelineDefinition(in)
	}
}

func (d *DataPipelineDouble) QueryObjects(i0 *datapipeline.QueryObjectsInput) (r0 *datapipeline.QueryObjectsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("QueryObjects", i0)
	r0, _ = returns[0].(*datapipeline.QueryObjectsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) QueryObjectsPages(i0 *datapipeline.QueryObjectsInput, i1 func(*datapipeline.QueryObjectsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("QueryObjectsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *DataPipelineDouble) fakeQueryObjectsPages(in *datapipeline.QueryObjectsInput, pager func(*datapipeline.QueryObjectsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("QueryObjects", paginators, in, pager)
}

func (d *DataPipelineDouble) QueryObjectsPagesWithContext(i0 context.Context, i1 *datapipeline.QueryObjectsInput, i2 func(*datapipeline.QueryObjectsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("QueryObjectsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *DataPipelineDouble) fakeQueryObjectsPagesWithContext(ctx context.Context, in *datapipeline.QueryObjectsInput, pager func(*datapipeline.QueryObjectsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("QueryObjects", paginators, ctx, in, pager, options...)
}

func (d *DataPipelineDouble) QueryObjectsRequest(i0 *datapipeline.QueryObjectsInput) (r0 *request.Request, r1 *datapipeline.QueryObjectsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("QueryObjectsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*datapipeline.QueryObjectsOutput)
	return
}

func (d *DataPipelineDouble) QueryObjectsWithContext(i0 context.Context, i1 *datapipeline.QueryObjectsInput, i2 ...request.Option) (r0 *datapipeline.QueryObjectsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("QueryObjectsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*datapipeline.QueryObjectsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) fakeQueryObjectsWithContext(ctx context.Context, in *datapipeline.QueryObjectsInput, _ ...request.Option) (*datapipeline.QueryObjectsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "QueryObjects cancelled", ctx.Err())
	default:
		return d.QueryObjects(in)
	}
}

func (d *DataPipelineDouble) RemoveTags(i0 *datapipeline.RemoveTagsInput) (r0 *datapipeline.RemoveTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTags", i0)
	r0, _ = returns[0].(*datapipeline.RemoveTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) RemoveTagsRequest(i0 *datapipeline.RemoveTagsInput) (r0 *request.Request, r1 *datapipeline.RemoveTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*datapipeline.RemoveTagsOutput)
	return
}

func (d *DataPipelineDouble) RemoveTagsWithContext(i0 context.Context, i1 *datapipeline.RemoveTagsInput, i2 ...request.Option) (r0 *datapipeline.RemoveTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*datapipeline.RemoveTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) fakeRemoveTagsWithContext(ctx context.Context, in *datapipeline.RemoveTagsInput, _ ...request.Option) (*datapipeline.RemoveTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveTags cancelled", ctx.Err())
	default:
		return d.RemoveTags(in)
	}
}

func (d *DataPipelineDouble) ReportTaskProgress(i0 *datapipeline.ReportTaskProgressInput) (r0 *datapipeline.ReportTaskProgressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReportTaskProgress", i0)
	r0, _ = returns[0].(*datapipeline.ReportTaskProgressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) ReportTaskProgressRequest(i0 *datapipeline.ReportTaskProgressInput) (r0 *request.Request, r1 *datapipeline.ReportTaskProgressOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReportTaskProgressRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*datapipeline.ReportTaskProgressOutput)
	return
}

func (d *DataPipelineDouble) ReportTaskProgressWithContext(i0 context.Context, i1 *datapipeline.ReportTaskProgressInput, i2 ...request.Option) (r0 *datapipeline.ReportTaskProgressOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReportTaskProgressWithContext", i0, i1, i2)
	r0, _ = returns[0].(*datapipeline.ReportTaskProgressOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) fakeReportTaskProgressWithContext(ctx context.Context, in *datapipeline.ReportTaskProgressInput, _ ...request.Option) (*datapipeline.ReportTaskProgressOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ReportTaskProgress cancelled", ctx.Err())
	default:
		return d.ReportTaskProgress(in)
	}
}

func (d *DataPipelineDouble) ReportTaskRunnerHeartbeat(i0 *datapipeline.ReportTaskRunnerHeartbeatInput) (r0 *datapipeline.ReportTaskRunnerHeartbeatOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReportTaskRunnerHeartbeat", i0)
	r0, _ = returns[0].(*datapipeline.ReportTaskRunnerHeartbeatOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) ReportTaskRunnerHeartbeatRequest(i0 *datapipeline.ReportTaskRunnerHeartbeatInput) (r0 *request.Request, r1 *datapipeline.ReportTaskRunnerHeartbeatOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReportTaskRunnerHeartbeatRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*datapipeline.ReportTaskRunnerHeartbeatOutput)
	return
}

func (d *DataPipelineDouble) ReportTaskRunnerHeartbeatWithContext(i0 context.Context, i1 *datapipeline.ReportTaskRunnerHeartbeatInput, i2 ...request.Option) (r0 *datapipeline.ReportTaskRunnerHeartbeatOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ReportTaskRunnerHeartbeatWithContext", i0, i1, i2)
	r0, _ = returns[0].(*datapipeline.ReportTaskRunnerHeartbeatOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) fakeReportTaskRunnerHeartbeatWithContext(ctx context.Context, in *datapipeline.ReportTaskRunnerHeartbeatInput, _ ...request.Option) (*datapipeline.ReportTaskRunnerHeartbeatOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ReportTaskRunnerHeartbeat cancelled", ctx.Err())
	default:
		return d.ReportTaskRunnerHeartbeat(in)
	}
}

func (d *DataPipelineDouble) SetStatus(i0 *datapipeline.SetStatusInput) (r0 *datapipeline.SetStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetStatus", i0)
	r0, _ = returns[0].(*datapipeline.SetStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) SetStatusRequest(i0 *datapipeline.SetStatusInput) (r0 *request.Request, r1 *datapipeline.SetStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*datapipeline.SetStatusOutput)
	return
}

func (d *DataPipelineDouble) SetStatusWithContext(i0 context.Context, i1 *datapipeline.SetStatusInput, i2 ...request.Option) (r0 *datapipeline.SetStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*datapipeline.SetStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) fakeSetStatusWithContext(ctx context.Context, in *datapipeline.SetStatusInput, _ ...request.Option) (*datapipeline.SetStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetStatus cancelled", ctx.Err())
	default:
		return d.SetStatus(in)
	}
}

func (d *DataPipelineDouble) SetTaskStatus(i0 *datapipeline.SetTaskStatusInput) (r0 *datapipeline.SetTaskStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetTaskStatus", i0)
	r0, _ = returns[0].(*datapipeline.SetTaskStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) SetTaskStatusRequest(i0 *datapipeline.SetTaskStatusInput) (r0 *request.Request, r1 *datapipeline.SetTaskStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetTaskStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*datapipeline.SetTaskStatusOutput)
	return
}

func (d *DataPipelineDouble) SetTaskStatusWithContext(i0 context.Context, i1 *datapipeline.SetTaskStatusInput, i2 ...request.Option) (r0 *datapipeline.SetTaskStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetTaskStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*datapipeline.SetTaskStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) fakeSetTaskStatusWithContext(ctx context.Context, in *datapipeline.SetTaskStatusInput, _ ...request.Option) (*datapipeline.SetTaskStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetTaskStatus cancelled", ctx.Err())
	default:
		return d.SetTaskStatus(in)
	}
}

func (d *DataPipelineDouble) ValidatePipelineDefinition(i0 *datapipeline.ValidatePipelineDefinitionInput) (r0 *datapipeline.ValidatePipelineDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ValidatePipelineDefinition", i0)
	r0, _ = returns[0].(*datapipeline.ValidatePipelineDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) ValidatePipelineDefinitionRequest(i0 *datapipeline.ValidatePipelineDefinitionInput) (r0 *request.Request, r1 *datapipeline.ValidatePipelineDefinitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ValidatePipelineDefinitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*datapipeline.ValidatePipelineDefinitionOutput)
	return
}

func (d *DataPipelineDouble) ValidatePipelineDefinitionWithContext(i0 context.Context, i1 *datapipeline.ValidatePipelineDefinitionInput, i2 ...request.Option) (r0 *datapipeline.ValidatePipelineDefinitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ValidatePipelineDefinitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*datapipeline.ValidatePipelineDefinitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *DataPipelineDouble) fakeValidatePipelineDefinitionWithContext(ctx context.Context, in *datapipeline.ValidatePipelineDefinitionInput, _ ...request.Option) (*datapipeline.ValidatePipelineDefinitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ValidatePipelineDefinition cancelled", ctx.Err())
	default:
		return d.ValidatePipelineDefinition(in)
	}
}
