// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:15:14+11:00

// Package ssmdouble provides a TestDouble implementation of ssmiface.SSMAPI
package ssmdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/ssm"
	"github.com/aws/aws-sdk-go/service/ssm/ssmiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// SSMDouble is TestDouble for ssmiface.SSMAPI
type SSMDouble struct {
	ssmiface.SSMAPI
	*awsdouble.AWSTestDouble
}

// Constructor for SSMDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *SSMDouble {
	result := &SSMDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*ssmiface.SSMAPI)(nil), configurators...)
	return result
}

func (d *SSMDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *SSMDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AddTagsToResourceWithContext":
		return m.Fake(d.fakeAddTagsToResourceWithContext)

	case "CancelCommandWithContext":
		return m.Fake(d.fakeCancelCommandWithContext)

	case "CancelMaintenanceWindowExecutionWithContext":
		return m.Fake(d.fakeCancelMaintenanceWindowExecutionWithContext)

	case "CreateActivationWithContext":
		return m.Fake(d.fakeCreateActivationWithContext)

	case "CreateAssociationBatchWithContext":
		return m.Fake(d.fakeCreateAssociationBatchWithContext)

	case "CreateAssociationWithContext":
		return m.Fake(d.fakeCreateAssociationWithContext)

	case "CreateDocumentWithContext":
		return m.Fake(d.fakeCreateDocumentWithContext)

	case "CreateMaintenanceWindowWithContext":
		return m.Fake(d.fakeCreateMaintenanceWindowWithContext)

	case "CreateOpsItemWithContext":
		return m.Fake(d.fakeCreateOpsItemWithContext)

	case "CreatePatchBaselineWithContext":
		return m.Fake(d.fakeCreatePatchBaselineWithContext)

	case "CreateResourceDataSyncWithContext":
		return m.Fake(d.fakeCreateResourceDataSyncWithContext)

	case "DeleteActivationWithContext":
		return m.Fake(d.fakeDeleteActivationWithContext)

	case "DeleteAssociationWithContext":
		return m.Fake(d.fakeDeleteAssociationWithContext)

	case "DeleteDocumentWithContext":
		return m.Fake(d.fakeDeleteDocumentWithContext)

	case "DeleteInventoryWithContext":
		return m.Fake(d.fakeDeleteInventoryWithContext)

	case "DeleteMaintenanceWindowWithContext":
		return m.Fake(d.fakeDeleteMaintenanceWindowWithContext)

	case "DeleteParameterWithContext":
		return m.Fake(d.fakeDeleteParameterWithContext)

	case "DeleteParametersWithContext":
		return m.Fake(d.fakeDeleteParametersWithContext)

	case "DeletePatchBaselineWithContext":
		return m.Fake(d.fakeDeletePatchBaselineWithContext)

	case "DeleteResourceDataSyncWithContext":
		return m.Fake(d.fakeDeleteResourceDataSyncWithContext)

	case "DeregisterManagedInstanceWithContext":
		return m.Fake(d.fakeDeregisterManagedInstanceWithContext)

	case "DeregisterPatchBaselineForPatchGroupWithContext":
		return m.Fake(d.fakeDeregisterPatchBaselineForPatchGroupWithContext)

	case "DeregisterTargetFromMaintenanceWindowWithContext":
		return m.Fake(d.fakeDeregisterTargetFromMaintenanceWindowWithContext)

	case "DeregisterTaskFromMaintenanceWindowWithContext":
		return m.Fake(d.fakeDeregisterTaskFromMaintenanceWindowWithContext)

	case "DescribeActivationsPages":
		return m.Fake(d.fakeDescribeActivationsPages)

	case "DescribeActivationsPagesWithContext":
		return m.Fake(d.fakeDescribeActivationsPagesWithContext)

	case "DescribeActivationsWithContext":
		return m.Fake(d.fakeDescribeActivationsWithContext)

	case "DescribeAssociationExecutionTargetsWithContext":
		return m.Fake(d.fakeDescribeAssociationExecutionTargetsWithContext)

	case "DescribeAssociationExecutionsWithContext":
		return m.Fake(d.fakeDescribeAssociationExecutionsWithContext)

	case "DescribeAssociationWithContext":
		return m.Fake(d.fakeDescribeAssociationWithContext)

	case "DescribeAutomationExecutionsWithContext":
		return m.Fake(d.fakeDescribeAutomationExecutionsWithContext)

	case "DescribeAutomationStepExecutionsWithContext":
		return m.Fake(d.fakeDescribeAutomationStepExecutionsWithContext)

	case "DescribeAvailablePatchesWithContext":
		return m.Fake(d.fakeDescribeAvailablePatchesWithContext)

	case "DescribeDocumentPermissionWithContext":
		return m.Fake(d.fakeDescribeDocumentPermissionWithContext)

	case "DescribeDocumentWithContext":
		return m.Fake(d.fakeDescribeDocumentWithContext)

	case "DescribeEffectiveInstanceAssociationsWithContext":
		return m.Fake(d.fakeDescribeEffectiveInstanceAssociationsWithContext)

	case "DescribeEffectivePatchesForPatchBaselineWithContext":
		return m.Fake(d.fakeDescribeEffectivePatchesForPatchBaselineWithContext)

	case "DescribeInstanceAssociationsStatusWithContext":
		return m.Fake(d.fakeDescribeInstanceAssociationsStatusWithContext)

	case "DescribeInstanceInformationPages":
		return m.Fake(d.fakeDescribeInstanceInformationPages)

	case "DescribeInstanceInformationPagesWithContext":
		return m.Fake(d.fakeDescribeInstanceInformationPagesWithContext)

	case "DescribeInstanceInformationWithContext":
		return m.Fake(d.fakeDescribeInstanceInformationWithContext)

	case "DescribeInstancePatchStatesForPatchGroupWithContext":
		return m.Fake(d.fakeDescribeInstancePatchStatesForPatchGroupWithContext)

	case "DescribeInstancePatchStatesWithContext":
		return m.Fake(d.fakeDescribeInstancePatchStatesWithContext)

	case "DescribeInstancePatchesWithContext":
		return m.Fake(d.fakeDescribeInstancePatchesWithContext)

	case "DescribeInventoryDeletionsWithContext":
		return m.Fake(d.fakeDescribeInventoryDeletionsWithContext)

	case "DescribeMaintenanceWindowExecutionTaskInvocationsWithContext":
		return m.Fake(d.fakeDescribeMaintenanceWindowExecutionTaskInvocationsWithContext)

	case "DescribeMaintenanceWindowExecutionTasksWithContext":
		return m.Fake(d.fakeDescribeMaintenanceWindowExecutionTasksWithContext)

	case "DescribeMaintenanceWindowExecutionsWithContext":
		return m.Fake(d.fakeDescribeMaintenanceWindowExecutionsWithContext)

	case "DescribeMaintenanceWindowScheduleWithContext":
		return m.Fake(d.fakeDescribeMaintenanceWindowScheduleWithContext)

	case "DescribeMaintenanceWindowTargetsWithContext":
		return m.Fake(d.fakeDescribeMaintenanceWindowTargetsWithContext)

	case "DescribeMaintenanceWindowTasksWithContext":
		return m.Fake(d.fakeDescribeMaintenanceWindowTasksWithContext)

	case "DescribeMaintenanceWindowsForTargetWithContext":
		return m.Fake(d.fakeDescribeMaintenanceWindowsForTargetWithContext)

	case "DescribeMaintenanceWindowsWithContext":
		return m.Fake(d.fakeDescribeMaintenanceWindowsWithContext)

	case "DescribeOpsItemsWithContext":
		return m.Fake(d.fakeDescribeOpsItemsWithContext)

	case "DescribeParametersPages":
		return m.Fake(d.fakeDescribeParametersPages)

	case "DescribeParametersPagesWithContext":
		return m.Fake(d.fakeDescribeParametersPagesWithContext)

	case "DescribeParametersWithContext":
		return m.Fake(d.fakeDescribeParametersWithContext)

	case "DescribePatchBaselinesWithContext":
		return m.Fake(d.fakeDescribePatchBaselinesWithContext)

	case "DescribePatchGroupStateWithContext":
		return m.Fake(d.fakeDescribePatchGroupStateWithContext)

	case "DescribePatchGroupsWithContext":
		return m.Fake(d.fakeDescribePatchGroupsWithContext)

	case "DescribePatchPropertiesWithContext":
		return m.Fake(d.fakeDescribePatchPropertiesWithContext)

	case "DescribeSessionsWithContext":
		return m.Fake(d.fakeDescribeSessionsWithContext)

	case "GetAutomationExecutionWithContext":
		return m.Fake(d.fakeGetAutomationExecutionWithContext)

	case "GetCalendarStateWithContext":
		return m.Fake(d.fakeGetCalendarStateWithContext)

	case "GetCommandInvocationWithContext":
		return m.Fake(d.fakeGetCommandInvocationWithContext)

	case "GetConnectionStatusWithContext":
		return m.Fake(d.fakeGetConnectionStatusWithContext)

	case "GetDefaultPatchBaselineWithContext":
		return m.Fake(d.fakeGetDefaultPatchBaselineWithContext)

	case "GetDeployablePatchSnapshotForInstanceWithContext":
		return m.Fake(d.fakeGetDeployablePatchSnapshotForInstanceWithContext)

	case "GetDocumentWithContext":
		return m.Fake(d.fakeGetDocumentWithContext)

	case "GetInventorySchemaWithContext":
		return m.Fake(d.fakeGetInventorySchemaWithContext)

	case "GetInventoryWithContext":
		return m.Fake(d.fakeGetInventoryWithContext)

	case "GetMaintenanceWindowExecutionTaskInvocationWithContext":
		return m.Fake(d.fakeGetMaintenanceWindowExecutionTaskInvocationWithContext)

	case "GetMaintenanceWindowExecutionTaskWithContext":
		return m.Fake(d.fakeGetMaintenanceWindowExecutionTaskWithContext)

	case "GetMaintenanceWindowExecutionWithContext":
		return m.Fake(d.fakeGetMaintenanceWindowExecutionWithContext)

	case "GetMaintenanceWindowTaskWithContext":
		return m.Fake(d.fakeGetMaintenanceWindowTaskWithContext)

	case "GetMaintenanceWindowWithContext":
		return m.Fake(d.fakeGetMaintenanceWindowWithContext)

	case "GetOpsItemWithContext":
		return m.Fake(d.fakeGetOpsItemWithContext)

	case "GetOpsSummaryWithContext":
		return m.Fake(d.fakeGetOpsSummaryWithContext)

	case "GetParameterHistoryPages":
		return m.Fake(d.fakeGetParameterHistoryPages)

	case "GetParameterHistoryPagesWithContext":
		return m.Fake(d.fakeGetParameterHistoryPagesWithContext)

	case "GetParameterHistoryWithContext":
		return m.Fake(d.fakeGetParameterHistoryWithContext)

	case "GetParameterWithContext":
		return m.Fake(d.fakeGetParameterWithContext)

	case "GetParametersByPathPages":
		return m.Fake(d.fakeGetParametersByPathPages)

	case "GetParametersByPathPagesWithContext":
		return m.Fake(d.fakeGetParametersByPathPagesWithContext)

	case "GetParametersByPathWithContext":
		return m.Fake(d.fakeGetParametersByPathWithContext)

	case "GetParametersWithContext":
		return m.Fake(d.fakeGetParametersWithContext)

	case "GetPatchBaselineForPatchGroupWithContext":
		return m.Fake(d.fakeGetPatchBaselineForPatchGroupWithContext)

	case "GetPatchBaselineWithContext":
		return m.Fake(d.fakeGetPatchBaselineWithContext)

	case "GetServiceSettingWithContext":
		return m.Fake(d.fakeGetServiceSettingWithContext)

	case "LabelParameterVersionWithContext":
		return m.Fake(d.fakeLabelParameterVersionWithContext)

	case "ListAssociationVersionsWithContext":
		return m.Fake(d.fakeListAssociationVersionsWithContext)

	case "ListAssociationsPages":
		return m.Fake(d.fakeListAssociationsPages)

	case "ListAssociationsPagesWithContext":
		return m.Fake(d.fakeListAssociationsPagesWithContext)

	case "ListAssociationsWithContext":
		return m.Fake(d.fakeListAssociationsWithContext)

	case "ListCommandInvocationsPages":
		return m.Fake(d.fakeListCommandInvocationsPages)

	case "ListCommandInvocationsPagesWithContext":
		return m.Fake(d.fakeListCommandInvocationsPagesWithContext)

	case "ListCommandInvocationsWithContext":
		return m.Fake(d.fakeListCommandInvocationsWithContext)

	case "ListCommandsPages":
		return m.Fake(d.fakeListCommandsPages)

	case "ListCommandsPagesWithContext":
		return m.Fake(d.fakeListCommandsPagesWithContext)

	case "ListCommandsWithContext":
		return m.Fake(d.fakeListCommandsWithContext)

	case "ListComplianceItemsWithContext":
		return m.Fake(d.fakeListComplianceItemsWithContext)

	case "ListComplianceSummariesWithContext":
		return m.Fake(d.fakeListComplianceSummariesWithContext)

	case "ListDocumentVersionsWithContext":
		return m.Fake(d.fakeListDocumentVersionsWithContext)

	case "ListDocumentsPages":
		return m.Fake(d.fakeListDocumentsPages)

	case "ListDocumentsPagesWithContext":
		return m.Fake(d.fakeListDocumentsPagesWithContext)

	case "ListDocumentsWithContext":
		return m.Fake(d.fakeListDocumentsWithContext)

	case "ListInventoryEntriesWithContext":
		return m.Fake(d.fakeListInventoryEntriesWithContext)

	case "ListResourceComplianceSummariesWithContext":
		return m.Fake(d.fakeListResourceComplianceSummariesWithContext)

	case "ListResourceDataSyncWithContext":
		return m.Fake(d.fakeListResourceDataSyncWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "ModifyDocumentPermissionWithContext":
		return m.Fake(d.fakeModifyDocumentPermissionWithContext)

	case "PutComplianceItemsWithContext":
		return m.Fake(d.fakePutComplianceItemsWithContext)

	case "PutInventoryWithContext":
		return m.Fake(d.fakePutInventoryWithContext)

	case "PutParameterWithContext":
		return m.Fake(d.fakePutParameterWithContext)

	case "RegisterDefaultPatchBaselineWithContext":
		return m.Fake(d.fakeRegisterDefaultPatchBaselineWithContext)

	case "RegisterPatchBaselineForPatchGroupWithContext":
		return m.Fake(d.fakeRegisterPatchBaselineForPatchGroupWithContext)

	case "RegisterTargetWithMaintenanceWindowWithContext":
		return m.Fake(d.fakeRegisterTargetWithMaintenanceWindowWithContext)

	case "RegisterTaskWithMaintenanceWindowWithContext":
		return m.Fake(d.fakeRegisterTaskWithMaintenanceWindowWithContext)

	case "RemoveTagsFromResourceWithContext":
		return m.Fake(d.fakeRemoveTagsFromResourceWithContext)

	case "ResetServiceSettingWithContext":
		return m.Fake(d.fakeResetServiceSettingWithContext)

	case "ResumeSessionWithContext":
		return m.Fake(d.fakeResumeSessionWithContext)

	case "SendAutomationSignalWithContext":
		return m.Fake(d.fakeSendAutomationSignalWithContext)

	case "SendCommandWithContext":
		return m.Fake(d.fakeSendCommandWithContext)

	case "StartAssociationsOnceWithContext":
		return m.Fake(d.fakeStartAssociationsOnceWithContext)

	case "StartAutomationExecutionWithContext":
		return m.Fake(d.fakeStartAutomationExecutionWithContext)

	case "StartSessionWithContext":
		return m.Fake(d.fakeStartSessionWithContext)

	case "StopAutomationExecutionWithContext":
		return m.Fake(d.fakeStopAutomationExecutionWithContext)

	case "TerminateSessionWithContext":
		return m.Fake(d.fakeTerminateSessionWithContext)

	case "UpdateAssociationStatusWithContext":
		return m.Fake(d.fakeUpdateAssociationStatusWithContext)

	case "UpdateAssociationWithContext":
		return m.Fake(d.fakeUpdateAssociationWithContext)

	case "UpdateDocumentDefaultVersionWithContext":
		return m.Fake(d.fakeUpdateDocumentDefaultVersionWithContext)

	case "UpdateDocumentWithContext":
		return m.Fake(d.fakeUpdateDocumentWithContext)

	case "UpdateMaintenanceWindowTargetWithContext":
		return m.Fake(d.fakeUpdateMaintenanceWindowTargetWithContext)

	case "UpdateMaintenanceWindowTaskWithContext":
		return m.Fake(d.fakeUpdateMaintenanceWindowTaskWithContext)

	case "UpdateMaintenanceWindowWithContext":
		return m.Fake(d.fakeUpdateMaintenanceWindowWithContext)

	case "UpdateManagedInstanceRoleWithContext":
		return m.Fake(d.fakeUpdateManagedInstanceRoleWithContext)

	case "UpdateOpsItemWithContext":
		return m.Fake(d.fakeUpdateOpsItemWithContext)

	case "UpdatePatchBaselineWithContext":
		return m.Fake(d.fakeUpdatePatchBaselineWithContext)

	case "UpdateResourceDataSyncWithContext":
		return m.Fake(d.fakeUpdateResourceDataSyncWithContext)

	case "UpdateServiceSettingWithContext":
		return m.Fake(d.fakeUpdateServiceSettingWithContext)

	default:
		return nil
	}
}

func (d *SSMDouble) AddTagsToResource(i0 *ssm.AddTagsToResourceInput) (r0 *ssm.AddTagsToResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToResource", i0)
	r0, _ = returns[0].(*ssm.AddTagsToResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) AddTagsToResourceRequest(i0 *ssm.AddTagsToResourceInput) (r0 *request.Request, r1 *ssm.AddTagsToResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.AddTagsToResourceOutput)
	return
}

func (d *SSMDouble) AddTagsToResourceWithContext(i0 context.Context, i1 *ssm.AddTagsToResourceInput, i2 ...request.Option) (r0 *ssm.AddTagsToResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsToResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.AddTagsToResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeAddTagsToResourceWithContext(ctx context.Context, in *ssm.AddTagsToResourceInput, _ ...request.Option) (*ssm.AddTagsToResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddTagsToResource cancelled", ctx.Err())
	default:
		return d.AddTagsToResource(in)
	}
}

func (d *SSMDouble) CancelCommand(i0 *ssm.CancelCommandInput) (r0 *ssm.CancelCommandOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelCommand", i0)
	r0, _ = returns[0].(*ssm.CancelCommandOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) CancelCommandRequest(i0 *ssm.CancelCommandInput) (r0 *request.Request, r1 *ssm.CancelCommandOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelCommandRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.CancelCommandOutput)
	return
}

func (d *SSMDouble) CancelCommandWithContext(i0 context.Context, i1 *ssm.CancelCommandInput, i2 ...request.Option) (r0 *ssm.CancelCommandOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelCommandWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.CancelCommandOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeCancelCommandWithContext(ctx context.Context, in *ssm.CancelCommandInput, _ ...request.Option) (*ssm.CancelCommandOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelCommand cancelled", ctx.Err())
	default:
		return d.CancelCommand(in)
	}
}

func (d *SSMDouble) CancelMaintenanceWindowExecution(i0 *ssm.CancelMaintenanceWindowExecutionInput) (r0 *ssm.CancelMaintenanceWindowExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelMaintenanceWindowExecution", i0)
	r0, _ = returns[0].(*ssm.CancelMaintenanceWindowExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) CancelMaintenanceWindowExecutionRequest(i0 *ssm.CancelMaintenanceWindowExecutionInput) (r0 *request.Request, r1 *ssm.CancelMaintenanceWindowExecutionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelMaintenanceWindowExecutionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.CancelMaintenanceWindowExecutionOutput)
	return
}

func (d *SSMDouble) CancelMaintenanceWindowExecutionWithContext(i0 context.Context, i1 *ssm.CancelMaintenanceWindowExecutionInput, i2 ...request.Option) (r0 *ssm.CancelMaintenanceWindowExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelMaintenanceWindowExecutionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.CancelMaintenanceWindowExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeCancelMaintenanceWindowExecutionWithContext(ctx context.Context, in *ssm.CancelMaintenanceWindowExecutionInput, _ ...request.Option) (*ssm.CancelMaintenanceWindowExecutionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelMaintenanceWindowExecution cancelled", ctx.Err())
	default:
		return d.CancelMaintenanceWindowExecution(in)
	}
}

func (d *SSMDouble) CreateActivation(i0 *ssm.CreateActivationInput) (r0 *ssm.CreateActivationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateActivation", i0)
	r0, _ = returns[0].(*ssm.CreateActivationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) CreateActivationRequest(i0 *ssm.CreateActivationInput) (r0 *request.Request, r1 *ssm.CreateActivationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateActivationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.CreateActivationOutput)
	return
}

func (d *SSMDouble) CreateActivationWithContext(i0 context.Context, i1 *ssm.CreateActivationInput, i2 ...request.Option) (r0 *ssm.CreateActivationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateActivationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.CreateActivationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeCreateActivationWithContext(ctx context.Context, in *ssm.CreateActivationInput, _ ...request.Option) (*ssm.CreateActivationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateActivation cancelled", ctx.Err())
	default:
		return d.CreateActivation(in)
	}
}

func (d *SSMDouble) CreateAssociation(i0 *ssm.CreateAssociationInput) (r0 *ssm.CreateAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAssociation", i0)
	r0, _ = returns[0].(*ssm.CreateAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) CreateAssociationBatch(i0 *ssm.CreateAssociationBatchInput) (r0 *ssm.CreateAssociationBatchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAssociationBatch", i0)
	r0, _ = returns[0].(*ssm.CreateAssociationBatchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) CreateAssociationBatchRequest(i0 *ssm.CreateAssociationBatchInput) (r0 *request.Request, r1 *ssm.CreateAssociationBatchOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAssociationBatchRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.CreateAssociationBatchOutput)
	return
}

func (d *SSMDouble) CreateAssociationBatchWithContext(i0 context.Context, i1 *ssm.CreateAssociationBatchInput, i2 ...request.Option) (r0 *ssm.CreateAssociationBatchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAssociationBatchWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.CreateAssociationBatchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeCreateAssociationBatchWithContext(ctx context.Context, in *ssm.CreateAssociationBatchInput, _ ...request.Option) (*ssm.CreateAssociationBatchOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateAssociationBatch cancelled", ctx.Err())
	default:
		return d.CreateAssociationBatch(in)
	}
}

func (d *SSMDouble) CreateAssociationRequest(i0 *ssm.CreateAssociationInput) (r0 *request.Request, r1 *ssm.CreateAssociationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAssociationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.CreateAssociationOutput)
	return
}

func (d *SSMDouble) CreateAssociationWithContext(i0 context.Context, i1 *ssm.CreateAssociationInput, i2 ...request.Option) (r0 *ssm.CreateAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAssociationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.CreateAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeCreateAssociationWithContext(ctx context.Context, in *ssm.CreateAssociationInput, _ ...request.Option) (*ssm.CreateAssociationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateAssociation cancelled", ctx.Err())
	default:
		return d.CreateAssociation(in)
	}
}

func (d *SSMDouble) CreateDocument(i0 *ssm.CreateDocumentInput) (r0 *ssm.CreateDocumentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDocument", i0)
	r0, _ = returns[0].(*ssm.CreateDocumentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) CreateDocumentRequest(i0 *ssm.CreateDocumentInput) (r0 *request.Request, r1 *ssm.CreateDocumentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDocumentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.CreateDocumentOutput)
	return
}

func (d *SSMDouble) CreateDocumentWithContext(i0 context.Context, i1 *ssm.CreateDocumentInput, i2 ...request.Option) (r0 *ssm.CreateDocumentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateDocumentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.CreateDocumentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeCreateDocumentWithContext(ctx context.Context, in *ssm.CreateDocumentInput, _ ...request.Option) (*ssm.CreateDocumentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateDocument cancelled", ctx.Err())
	default:
		return d.CreateDocument(in)
	}
}

func (d *SSMDouble) CreateMaintenanceWindow(i0 *ssm.CreateMaintenanceWindowInput) (r0 *ssm.CreateMaintenanceWindowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMaintenanceWindow", i0)
	r0, _ = returns[0].(*ssm.CreateMaintenanceWindowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) CreateMaintenanceWindowRequest(i0 *ssm.CreateMaintenanceWindowInput) (r0 *request.Request, r1 *ssm.CreateMaintenanceWindowOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMaintenanceWindowRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.CreateMaintenanceWindowOutput)
	return
}

func (d *SSMDouble) CreateMaintenanceWindowWithContext(i0 context.Context, i1 *ssm.CreateMaintenanceWindowInput, i2 ...request.Option) (r0 *ssm.CreateMaintenanceWindowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateMaintenanceWindowWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.CreateMaintenanceWindowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeCreateMaintenanceWindowWithContext(ctx context.Context, in *ssm.CreateMaintenanceWindowInput, _ ...request.Option) (*ssm.CreateMaintenanceWindowOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateMaintenanceWindow cancelled", ctx.Err())
	default:
		return d.CreateMaintenanceWindow(in)
	}
}

func (d *SSMDouble) CreateOpsItem(i0 *ssm.CreateOpsItemInput) (r0 *ssm.CreateOpsItemOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateOpsItem", i0)
	r0, _ = returns[0].(*ssm.CreateOpsItemOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) CreateOpsItemRequest(i0 *ssm.CreateOpsItemInput) (r0 *request.Request, r1 *ssm.CreateOpsItemOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateOpsItemRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.CreateOpsItemOutput)
	return
}

func (d *SSMDouble) CreateOpsItemWithContext(i0 context.Context, i1 *ssm.CreateOpsItemInput, i2 ...request.Option) (r0 *ssm.CreateOpsItemOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateOpsItemWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.CreateOpsItemOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeCreateOpsItemWithContext(ctx context.Context, in *ssm.CreateOpsItemInput, _ ...request.Option) (*ssm.CreateOpsItemOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateOpsItem cancelled", ctx.Err())
	default:
		return d.CreateOpsItem(in)
	}
}

func (d *SSMDouble) CreatePatchBaseline(i0 *ssm.CreatePatchBaselineInput) (r0 *ssm.CreatePatchBaselineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePatchBaseline", i0)
	r0, _ = returns[0].(*ssm.CreatePatchBaselineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) CreatePatchBaselineRequest(i0 *ssm.CreatePatchBaselineInput) (r0 *request.Request, r1 *ssm.CreatePatchBaselineOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePatchBaselineRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.CreatePatchBaselineOutput)
	return
}

func (d *SSMDouble) CreatePatchBaselineWithContext(i0 context.Context, i1 *ssm.CreatePatchBaselineInput, i2 ...request.Option) (r0 *ssm.CreatePatchBaselineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreatePatchBaselineWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.CreatePatchBaselineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeCreatePatchBaselineWithContext(ctx context.Context, in *ssm.CreatePatchBaselineInput, _ ...request.Option) (*ssm.CreatePatchBaselineOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreatePatchBaseline cancelled", ctx.Err())
	default:
		return d.CreatePatchBaseline(in)
	}
}

func (d *SSMDouble) CreateResourceDataSync(i0 *ssm.CreateResourceDataSyncInput) (r0 *ssm.CreateResourceDataSyncOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateResourceDataSync", i0)
	r0, _ = returns[0].(*ssm.CreateResourceDataSyncOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) CreateResourceDataSyncRequest(i0 *ssm.CreateResourceDataSyncInput) (r0 *request.Request, r1 *ssm.CreateResourceDataSyncOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateResourceDataSyncRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.CreateResourceDataSyncOutput)
	return
}

func (d *SSMDouble) CreateResourceDataSyncWithContext(i0 context.Context, i1 *ssm.CreateResourceDataSyncInput, i2 ...request.Option) (r0 *ssm.CreateResourceDataSyncOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateResourceDataSyncWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.CreateResourceDataSyncOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeCreateResourceDataSyncWithContext(ctx context.Context, in *ssm.CreateResourceDataSyncInput, _ ...request.Option) (*ssm.CreateResourceDataSyncOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateResourceDataSync cancelled", ctx.Err())
	default:
		return d.CreateResourceDataSync(in)
	}
}

func (d *SSMDouble) DeleteActivation(i0 *ssm.DeleteActivationInput) (r0 *ssm.DeleteActivationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteActivation", i0)
	r0, _ = returns[0].(*ssm.DeleteActivationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DeleteActivationRequest(i0 *ssm.DeleteActivationInput) (r0 *request.Request, r1 *ssm.DeleteActivationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteActivationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DeleteActivationOutput)
	return
}

func (d *SSMDouble) DeleteActivationWithContext(i0 context.Context, i1 *ssm.DeleteActivationInput, i2 ...request.Option) (r0 *ssm.DeleteActivationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteActivationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DeleteActivationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDeleteActivationWithContext(ctx context.Context, in *ssm.DeleteActivationInput, _ ...request.Option) (*ssm.DeleteActivationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteActivation cancelled", ctx.Err())
	default:
		return d.DeleteActivation(in)
	}
}

func (d *SSMDouble) DeleteAssociation(i0 *ssm.DeleteAssociationInput) (r0 *ssm.DeleteAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAssociation", i0)
	r0, _ = returns[0].(*ssm.DeleteAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DeleteAssociationRequest(i0 *ssm.DeleteAssociationInput) (r0 *request.Request, r1 *ssm.DeleteAssociationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAssociationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DeleteAssociationOutput)
	return
}

func (d *SSMDouble) DeleteAssociationWithContext(i0 context.Context, i1 *ssm.DeleteAssociationInput, i2 ...request.Option) (r0 *ssm.DeleteAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAssociationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DeleteAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDeleteAssociationWithContext(ctx context.Context, in *ssm.DeleteAssociationInput, _ ...request.Option) (*ssm.DeleteAssociationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteAssociation cancelled", ctx.Err())
	default:
		return d.DeleteAssociation(in)
	}
}

func (d *SSMDouble) DeleteDocument(i0 *ssm.DeleteDocumentInput) (r0 *ssm.DeleteDocumentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDocument", i0)
	r0, _ = returns[0].(*ssm.DeleteDocumentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DeleteDocumentRequest(i0 *ssm.DeleteDocumentInput) (r0 *request.Request, r1 *ssm.DeleteDocumentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDocumentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DeleteDocumentOutput)
	return
}

func (d *SSMDouble) DeleteDocumentWithContext(i0 context.Context, i1 *ssm.DeleteDocumentInput, i2 ...request.Option) (r0 *ssm.DeleteDocumentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteDocumentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DeleteDocumentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDeleteDocumentWithContext(ctx context.Context, in *ssm.DeleteDocumentInput, _ ...request.Option) (*ssm.DeleteDocumentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteDocument cancelled", ctx.Err())
	default:
		return d.DeleteDocument(in)
	}
}

func (d *SSMDouble) DeleteInventory(i0 *ssm.DeleteInventoryInput) (r0 *ssm.DeleteInventoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInventory", i0)
	r0, _ = returns[0].(*ssm.DeleteInventoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DeleteInventoryRequest(i0 *ssm.DeleteInventoryInput) (r0 *request.Request, r1 *ssm.DeleteInventoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInventoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DeleteInventoryOutput)
	return
}

func (d *SSMDouble) DeleteInventoryWithContext(i0 context.Context, i1 *ssm.DeleteInventoryInput, i2 ...request.Option) (r0 *ssm.DeleteInventoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteInventoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DeleteInventoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDeleteInventoryWithContext(ctx context.Context, in *ssm.DeleteInventoryInput, _ ...request.Option) (*ssm.DeleteInventoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteInventory cancelled", ctx.Err())
	default:
		return d.DeleteInventory(in)
	}
}

func (d *SSMDouble) DeleteMaintenanceWindow(i0 *ssm.DeleteMaintenanceWindowInput) (r0 *ssm.DeleteMaintenanceWindowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMaintenanceWindow", i0)
	r0, _ = returns[0].(*ssm.DeleteMaintenanceWindowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DeleteMaintenanceWindowRequest(i0 *ssm.DeleteMaintenanceWindowInput) (r0 *request.Request, r1 *ssm.DeleteMaintenanceWindowOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMaintenanceWindowRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DeleteMaintenanceWindowOutput)
	return
}

func (d *SSMDouble) DeleteMaintenanceWindowWithContext(i0 context.Context, i1 *ssm.DeleteMaintenanceWindowInput, i2 ...request.Option) (r0 *ssm.DeleteMaintenanceWindowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteMaintenanceWindowWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DeleteMaintenanceWindowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDeleteMaintenanceWindowWithContext(ctx context.Context, in *ssm.DeleteMaintenanceWindowInput, _ ...request.Option) (*ssm.DeleteMaintenanceWindowOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteMaintenanceWindow cancelled", ctx.Err())
	default:
		return d.DeleteMaintenanceWindow(in)
	}
}

func (d *SSMDouble) DeleteParameter(i0 *ssm.DeleteParameterInput) (r0 *ssm.DeleteParameterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteParameter", i0)
	r0, _ = returns[0].(*ssm.DeleteParameterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DeleteParameterRequest(i0 *ssm.DeleteParameterInput) (r0 *request.Request, r1 *ssm.DeleteParameterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteParameterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DeleteParameterOutput)
	return
}

func (d *SSMDouble) DeleteParameterWithContext(i0 context.Context, i1 *ssm.DeleteParameterInput, i2 ...request.Option) (r0 *ssm.DeleteParameterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteParameterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DeleteParameterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDeleteParameterWithContext(ctx context.Context, in *ssm.DeleteParameterInput, _ ...request.Option) (*ssm.DeleteParameterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteParameter cancelled", ctx.Err())
	default:
		return d.DeleteParameter(in)
	}
}

func (d *SSMDouble) DeleteParameters(i0 *ssm.DeleteParametersInput) (r0 *ssm.DeleteParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteParameters", i0)
	r0, _ = returns[0].(*ssm.DeleteParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DeleteParametersRequest(i0 *ssm.DeleteParametersInput) (r0 *request.Request, r1 *ssm.DeleteParametersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteParametersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DeleteParametersOutput)
	return
}

func (d *SSMDouble) DeleteParametersWithContext(i0 context.Context, i1 *ssm.DeleteParametersInput, i2 ...request.Option) (r0 *ssm.DeleteParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteParametersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DeleteParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDeleteParametersWithContext(ctx context.Context, in *ssm.DeleteParametersInput, _ ...request.Option) (*ssm.DeleteParametersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteParameters cancelled", ctx.Err())
	default:
		return d.DeleteParameters(in)
	}
}

func (d *SSMDouble) DeletePatchBaseline(i0 *ssm.DeletePatchBaselineInput) (r0 *ssm.DeletePatchBaselineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePatchBaseline", i0)
	r0, _ = returns[0].(*ssm.DeletePatchBaselineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DeletePatchBaselineRequest(i0 *ssm.DeletePatchBaselineInput) (r0 *request.Request, r1 *ssm.DeletePatchBaselineOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePatchBaselineRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DeletePatchBaselineOutput)
	return
}

func (d *SSMDouble) DeletePatchBaselineWithContext(i0 context.Context, i1 *ssm.DeletePatchBaselineInput, i2 ...request.Option) (r0 *ssm.DeletePatchBaselineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePatchBaselineWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DeletePatchBaselineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDeletePatchBaselineWithContext(ctx context.Context, in *ssm.DeletePatchBaselineInput, _ ...request.Option) (*ssm.DeletePatchBaselineOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeletePatchBaseline cancelled", ctx.Err())
	default:
		return d.DeletePatchBaseline(in)
	}
}

func (d *SSMDouble) DeleteResourceDataSync(i0 *ssm.DeleteResourceDataSyncInput) (r0 *ssm.DeleteResourceDataSyncOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResourceDataSync", i0)
	r0, _ = returns[0].(*ssm.DeleteResourceDataSyncOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DeleteResourceDataSyncRequest(i0 *ssm.DeleteResourceDataSyncInput) (r0 *request.Request, r1 *ssm.DeleteResourceDataSyncOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResourceDataSyncRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DeleteResourceDataSyncOutput)
	return
}

func (d *SSMDouble) DeleteResourceDataSyncWithContext(i0 context.Context, i1 *ssm.DeleteResourceDataSyncInput, i2 ...request.Option) (r0 *ssm.DeleteResourceDataSyncOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteResourceDataSyncWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DeleteResourceDataSyncOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDeleteResourceDataSyncWithContext(ctx context.Context, in *ssm.DeleteResourceDataSyncInput, _ ...request.Option) (*ssm.DeleteResourceDataSyncOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteResourceDataSync cancelled", ctx.Err())
	default:
		return d.DeleteResourceDataSync(in)
	}
}

func (d *SSMDouble) DeregisterManagedInstance(i0 *ssm.DeregisterManagedInstanceInput) (r0 *ssm.DeregisterManagedInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterManagedInstance", i0)
	r0, _ = returns[0].(*ssm.DeregisterManagedInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DeregisterManagedInstanceRequest(i0 *ssm.DeregisterManagedInstanceInput) (r0 *request.Request, r1 *ssm.DeregisterManagedInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterManagedInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DeregisterManagedInstanceOutput)
	return
}

func (d *SSMDouble) DeregisterManagedInstanceWithContext(i0 context.Context, i1 *ssm.DeregisterManagedInstanceInput, i2 ...request.Option) (r0 *ssm.DeregisterManagedInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterManagedInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DeregisterManagedInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDeregisterManagedInstanceWithContext(ctx context.Context, in *ssm.DeregisterManagedInstanceInput, _ ...request.Option) (*ssm.DeregisterManagedInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeregisterManagedInstance cancelled", ctx.Err())
	default:
		return d.DeregisterManagedInstance(in)
	}
}

func (d *SSMDouble) DeregisterPatchBaselineForPatchGroup(i0 *ssm.DeregisterPatchBaselineForPatchGroupInput) (r0 *ssm.DeregisterPatchBaselineForPatchGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterPatchBaselineForPatchGroup", i0)
	r0, _ = returns[0].(*ssm.DeregisterPatchBaselineForPatchGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DeregisterPatchBaselineForPatchGroupRequest(i0 *ssm.DeregisterPatchBaselineForPatchGroupInput) (r0 *request.Request, r1 *ssm.DeregisterPatchBaselineForPatchGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterPatchBaselineForPatchGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DeregisterPatchBaselineForPatchGroupOutput)
	return
}

func (d *SSMDouble) DeregisterPatchBaselineForPatchGroupWithContext(i0 context.Context, i1 *ssm.DeregisterPatchBaselineForPatchGroupInput, i2 ...request.Option) (r0 *ssm.DeregisterPatchBaselineForPatchGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterPatchBaselineForPatchGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DeregisterPatchBaselineForPatchGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDeregisterPatchBaselineForPatchGroupWithContext(ctx context.Context, in *ssm.DeregisterPatchBaselineForPatchGroupInput, _ ...request.Option) (*ssm.DeregisterPatchBaselineForPatchGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeregisterPatchBaselineForPatchGroup cancelled", ctx.Err())
	default:
		return d.DeregisterPatchBaselineForPatchGroup(in)
	}
}

func (d *SSMDouble) DeregisterTargetFromMaintenanceWindow(i0 *ssm.DeregisterTargetFromMaintenanceWindowInput) (r0 *ssm.DeregisterTargetFromMaintenanceWindowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterTargetFromMaintenanceWindow", i0)
	r0, _ = returns[0].(*ssm.DeregisterTargetFromMaintenanceWindowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DeregisterTargetFromMaintenanceWindowRequest(i0 *ssm.DeregisterTargetFromMaintenanceWindowInput) (r0 *request.Request, r1 *ssm.DeregisterTargetFromMaintenanceWindowOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterTargetFromMaintenanceWindowRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DeregisterTargetFromMaintenanceWindowOutput)
	return
}

func (d *SSMDouble) DeregisterTargetFromMaintenanceWindowWithContext(i0 context.Context, i1 *ssm.DeregisterTargetFromMaintenanceWindowInput, i2 ...request.Option) (r0 *ssm.DeregisterTargetFromMaintenanceWindowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterTargetFromMaintenanceWindowWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DeregisterTargetFromMaintenanceWindowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDeregisterTargetFromMaintenanceWindowWithContext(ctx context.Context, in *ssm.DeregisterTargetFromMaintenanceWindowInput, _ ...request.Option) (*ssm.DeregisterTargetFromMaintenanceWindowOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeregisterTargetFromMaintenanceWindow cancelled", ctx.Err())
	default:
		return d.DeregisterTargetFromMaintenanceWindow(in)
	}
}

func (d *SSMDouble) DeregisterTaskFromMaintenanceWindow(i0 *ssm.DeregisterTaskFromMaintenanceWindowInput) (r0 *ssm.DeregisterTaskFromMaintenanceWindowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterTaskFromMaintenanceWindow", i0)
	r0, _ = returns[0].(*ssm.DeregisterTaskFromMaintenanceWindowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DeregisterTaskFromMaintenanceWindowRequest(i0 *ssm.DeregisterTaskFromMaintenanceWindowInput) (r0 *request.Request, r1 *ssm.DeregisterTaskFromMaintenanceWindowOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterTaskFromMaintenanceWindowRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DeregisterTaskFromMaintenanceWindowOutput)
	return
}

func (d *SSMDouble) DeregisterTaskFromMaintenanceWindowWithContext(i0 context.Context, i1 *ssm.DeregisterTaskFromMaintenanceWindowInput, i2 ...request.Option) (r0 *ssm.DeregisterTaskFromMaintenanceWindowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterTaskFromMaintenanceWindowWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DeregisterTaskFromMaintenanceWindowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDeregisterTaskFromMaintenanceWindowWithContext(ctx context.Context, in *ssm.DeregisterTaskFromMaintenanceWindowInput, _ ...request.Option) (*ssm.DeregisterTaskFromMaintenanceWindowOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeregisterTaskFromMaintenanceWindow cancelled", ctx.Err())
	default:
		return d.DeregisterTaskFromMaintenanceWindow(in)
	}
}

func (d *SSMDouble) DescribeActivations(i0 *ssm.DescribeActivationsInput) (r0 *ssm.DescribeActivationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeActivations", i0)
	r0, _ = returns[0].(*ssm.DescribeActivationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DescribeActivationsPages(i0 *ssm.DescribeActivationsInput, i1 func(*ssm.DescribeActivationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeActivationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SSMDouble) fakeDescribeActivationsPages(in *ssm.DescribeActivationsInput, pager func(*ssm.DescribeActivationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeActivations", paginators, in, pager)
}

func (d *SSMDouble) DescribeActivationsPagesWithContext(i0 context.Context, i1 *ssm.DescribeActivationsInput, i2 func(*ssm.DescribeActivationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeActivationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SSMDouble) fakeDescribeActivationsPagesWithContext(ctx context.Context, in *ssm.DescribeActivationsInput, pager func(*ssm.DescribeActivationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeActivations", paginators, ctx, in, pager, options...)
}

func (d *SSMDouble) DescribeActivationsRequest(i0 *ssm.DescribeActivationsInput) (r0 *request.Request, r1 *ssm.DescribeActivationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeActivationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DescribeActivationsOutput)
	return
}

func (d *SSMDouble) DescribeActivationsWithContext(i0 context.Context, i1 *ssm.DescribeActivationsInput, i2 ...request.Option) (r0 *ssm.DescribeActivationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeActivationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DescribeActivationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDescribeActivationsWithContext(ctx context.Context, in *ssm.DescribeActivationsInput, _ ...request.Option) (*ssm.DescribeActivationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeActivations cancelled", ctx.Err())
	default:
		return d.DescribeActivations(in)
	}
}

func (d *SSMDouble) DescribeAssociation(i0 *ssm.DescribeAssociationInput) (r0 *ssm.DescribeAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAssociation", i0)
	r0, _ = returns[0].(*ssm.DescribeAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DescribeAssociationExecutionTargets(i0 *ssm.DescribeAssociationExecutionTargetsInput) (r0 *ssm.DescribeAssociationExecutionTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAssociationExecutionTargets", i0)
	r0, _ = returns[0].(*ssm.DescribeAssociationExecutionTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DescribeAssociationExecutionTargetsRequest(i0 *ssm.DescribeAssociationExecutionTargetsInput) (r0 *request.Request, r1 *ssm.DescribeAssociationExecutionTargetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAssociationExecutionTargetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DescribeAssociationExecutionTargetsOutput)
	return
}

func (d *SSMDouble) DescribeAssociationExecutionTargetsWithContext(i0 context.Context, i1 *ssm.DescribeAssociationExecutionTargetsInput, i2 ...request.Option) (r0 *ssm.DescribeAssociationExecutionTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAssociationExecutionTargetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DescribeAssociationExecutionTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDescribeAssociationExecutionTargetsWithContext(ctx context.Context, in *ssm.DescribeAssociationExecutionTargetsInput, _ ...request.Option) (*ssm.DescribeAssociationExecutionTargetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAssociationExecutionTargets cancelled", ctx.Err())
	default:
		return d.DescribeAssociationExecutionTargets(in)
	}
}

func (d *SSMDouble) DescribeAssociationExecutions(i0 *ssm.DescribeAssociationExecutionsInput) (r0 *ssm.DescribeAssociationExecutionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAssociationExecutions", i0)
	r0, _ = returns[0].(*ssm.DescribeAssociationExecutionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DescribeAssociationExecutionsRequest(i0 *ssm.DescribeAssociationExecutionsInput) (r0 *request.Request, r1 *ssm.DescribeAssociationExecutionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAssociationExecutionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DescribeAssociationExecutionsOutput)
	return
}

func (d *SSMDouble) DescribeAssociationExecutionsWithContext(i0 context.Context, i1 *ssm.DescribeAssociationExecutionsInput, i2 ...request.Option) (r0 *ssm.DescribeAssociationExecutionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAssociationExecutionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DescribeAssociationExecutionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDescribeAssociationExecutionsWithContext(ctx context.Context, in *ssm.DescribeAssociationExecutionsInput, _ ...request.Option) (*ssm.DescribeAssociationExecutionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAssociationExecutions cancelled", ctx.Err())
	default:
		return d.DescribeAssociationExecutions(in)
	}
}

func (d *SSMDouble) DescribeAssociationRequest(i0 *ssm.DescribeAssociationInput) (r0 *request.Request, r1 *ssm.DescribeAssociationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAssociationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DescribeAssociationOutput)
	return
}

func (d *SSMDouble) DescribeAssociationWithContext(i0 context.Context, i1 *ssm.DescribeAssociationInput, i2 ...request.Option) (r0 *ssm.DescribeAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAssociationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DescribeAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDescribeAssociationWithContext(ctx context.Context, in *ssm.DescribeAssociationInput, _ ...request.Option) (*ssm.DescribeAssociationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAssociation cancelled", ctx.Err())
	default:
		return d.DescribeAssociation(in)
	}
}

func (d *SSMDouble) DescribeAutomationExecutions(i0 *ssm.DescribeAutomationExecutionsInput) (r0 *ssm.DescribeAutomationExecutionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAutomationExecutions", i0)
	r0, _ = returns[0].(*ssm.DescribeAutomationExecutionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DescribeAutomationExecutionsRequest(i0 *ssm.DescribeAutomationExecutionsInput) (r0 *request.Request, r1 *ssm.DescribeAutomationExecutionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAutomationExecutionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DescribeAutomationExecutionsOutput)
	return
}

func (d *SSMDouble) DescribeAutomationExecutionsWithContext(i0 context.Context, i1 *ssm.DescribeAutomationExecutionsInput, i2 ...request.Option) (r0 *ssm.DescribeAutomationExecutionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAutomationExecutionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DescribeAutomationExecutionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDescribeAutomationExecutionsWithContext(ctx context.Context, in *ssm.DescribeAutomationExecutionsInput, _ ...request.Option) (*ssm.DescribeAutomationExecutionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAutomationExecutions cancelled", ctx.Err())
	default:
		return d.DescribeAutomationExecutions(in)
	}
}

func (d *SSMDouble) DescribeAutomationStepExecutions(i0 *ssm.DescribeAutomationStepExecutionsInput) (r0 *ssm.DescribeAutomationStepExecutionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAutomationStepExecutions", i0)
	r0, _ = returns[0].(*ssm.DescribeAutomationStepExecutionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DescribeAutomationStepExecutionsRequest(i0 *ssm.DescribeAutomationStepExecutionsInput) (r0 *request.Request, r1 *ssm.DescribeAutomationStepExecutionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAutomationStepExecutionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DescribeAutomationStepExecutionsOutput)
	return
}

func (d *SSMDouble) DescribeAutomationStepExecutionsWithContext(i0 context.Context, i1 *ssm.DescribeAutomationStepExecutionsInput, i2 ...request.Option) (r0 *ssm.DescribeAutomationStepExecutionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAutomationStepExecutionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DescribeAutomationStepExecutionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDescribeAutomationStepExecutionsWithContext(ctx context.Context, in *ssm.DescribeAutomationStepExecutionsInput, _ ...request.Option) (*ssm.DescribeAutomationStepExecutionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAutomationStepExecutions cancelled", ctx.Err())
	default:
		return d.DescribeAutomationStepExecutions(in)
	}
}

func (d *SSMDouble) DescribeAvailablePatches(i0 *ssm.DescribeAvailablePatchesInput) (r0 *ssm.DescribeAvailablePatchesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAvailablePatches", i0)
	r0, _ = returns[0].(*ssm.DescribeAvailablePatchesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DescribeAvailablePatchesRequest(i0 *ssm.DescribeAvailablePatchesInput) (r0 *request.Request, r1 *ssm.DescribeAvailablePatchesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAvailablePatchesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DescribeAvailablePatchesOutput)
	return
}

func (d *SSMDouble) DescribeAvailablePatchesWithContext(i0 context.Context, i1 *ssm.DescribeAvailablePatchesInput, i2 ...request.Option) (r0 *ssm.DescribeAvailablePatchesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAvailablePatchesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DescribeAvailablePatchesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDescribeAvailablePatchesWithContext(ctx context.Context, in *ssm.DescribeAvailablePatchesInput, _ ...request.Option) (*ssm.DescribeAvailablePatchesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAvailablePatches cancelled", ctx.Err())
	default:
		return d.DescribeAvailablePatches(in)
	}
}

func (d *SSMDouble) DescribeDocument(i0 *ssm.DescribeDocumentInput) (r0 *ssm.DescribeDocumentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDocument", i0)
	r0, _ = returns[0].(*ssm.DescribeDocumentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DescribeDocumentPermission(i0 *ssm.DescribeDocumentPermissionInput) (r0 *ssm.DescribeDocumentPermissionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDocumentPermission", i0)
	r0, _ = returns[0].(*ssm.DescribeDocumentPermissionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DescribeDocumentPermissionRequest(i0 *ssm.DescribeDocumentPermissionInput) (r0 *request.Request, r1 *ssm.DescribeDocumentPermissionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDocumentPermissionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DescribeDocumentPermissionOutput)
	return
}

func (d *SSMDouble) DescribeDocumentPermissionWithContext(i0 context.Context, i1 *ssm.DescribeDocumentPermissionInput, i2 ...request.Option) (r0 *ssm.DescribeDocumentPermissionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDocumentPermissionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DescribeDocumentPermissionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDescribeDocumentPermissionWithContext(ctx context.Context, in *ssm.DescribeDocumentPermissionInput, _ ...request.Option) (*ssm.DescribeDocumentPermissionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDocumentPermission cancelled", ctx.Err())
	default:
		return d.DescribeDocumentPermission(in)
	}
}

func (d *SSMDouble) DescribeDocumentRequest(i0 *ssm.DescribeDocumentInput) (r0 *request.Request, r1 *ssm.DescribeDocumentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDocumentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DescribeDocumentOutput)
	return
}

func (d *SSMDouble) DescribeDocumentWithContext(i0 context.Context, i1 *ssm.DescribeDocumentInput, i2 ...request.Option) (r0 *ssm.DescribeDocumentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDocumentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DescribeDocumentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDescribeDocumentWithContext(ctx context.Context, in *ssm.DescribeDocumentInput, _ ...request.Option) (*ssm.DescribeDocumentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDocument cancelled", ctx.Err())
	default:
		return d.DescribeDocument(in)
	}
}

func (d *SSMDouble) DescribeEffectiveInstanceAssociations(i0 *ssm.DescribeEffectiveInstanceAssociationsInput) (r0 *ssm.DescribeEffectiveInstanceAssociationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEffectiveInstanceAssociations", i0)
	r0, _ = returns[0].(*ssm.DescribeEffectiveInstanceAssociationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DescribeEffectiveInstanceAssociationsRequest(i0 *ssm.DescribeEffectiveInstanceAssociationsInput) (r0 *request.Request, r1 *ssm.DescribeEffectiveInstanceAssociationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEffectiveInstanceAssociationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DescribeEffectiveInstanceAssociationsOutput)
	return
}

func (d *SSMDouble) DescribeEffectiveInstanceAssociationsWithContext(i0 context.Context, i1 *ssm.DescribeEffectiveInstanceAssociationsInput, i2 ...request.Option) (r0 *ssm.DescribeEffectiveInstanceAssociationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEffectiveInstanceAssociationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DescribeEffectiveInstanceAssociationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDescribeEffectiveInstanceAssociationsWithContext(ctx context.Context, in *ssm.DescribeEffectiveInstanceAssociationsInput, _ ...request.Option) (*ssm.DescribeEffectiveInstanceAssociationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEffectiveInstanceAssociations cancelled", ctx.Err())
	default:
		return d.DescribeEffectiveInstanceAssociations(in)
	}
}

func (d *SSMDouble) DescribeEffectivePatchesForPatchBaseline(i0 *ssm.DescribeEffectivePatchesForPatchBaselineInput) (r0 *ssm.DescribeEffectivePatchesForPatchBaselineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEffectivePatchesForPatchBaseline", i0)
	r0, _ = returns[0].(*ssm.DescribeEffectivePatchesForPatchBaselineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DescribeEffectivePatchesForPatchBaselineRequest(i0 *ssm.DescribeEffectivePatchesForPatchBaselineInput) (r0 *request.Request, r1 *ssm.DescribeEffectivePatchesForPatchBaselineOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEffectivePatchesForPatchBaselineRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DescribeEffectivePatchesForPatchBaselineOutput)
	return
}

func (d *SSMDouble) DescribeEffectivePatchesForPatchBaselineWithContext(i0 context.Context, i1 *ssm.DescribeEffectivePatchesForPatchBaselineInput, i2 ...request.Option) (r0 *ssm.DescribeEffectivePatchesForPatchBaselineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEffectivePatchesForPatchBaselineWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DescribeEffectivePatchesForPatchBaselineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDescribeEffectivePatchesForPatchBaselineWithContext(ctx context.Context, in *ssm.DescribeEffectivePatchesForPatchBaselineInput, _ ...request.Option) (*ssm.DescribeEffectivePatchesForPatchBaselineOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEffectivePatchesForPatchBaseline cancelled", ctx.Err())
	default:
		return d.DescribeEffectivePatchesForPatchBaseline(in)
	}
}

func (d *SSMDouble) DescribeInstanceAssociationsStatus(i0 *ssm.DescribeInstanceAssociationsStatusInput) (r0 *ssm.DescribeInstanceAssociationsStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstanceAssociationsStatus", i0)
	r0, _ = returns[0].(*ssm.DescribeInstanceAssociationsStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DescribeInstanceAssociationsStatusRequest(i0 *ssm.DescribeInstanceAssociationsStatusInput) (r0 *request.Request, r1 *ssm.DescribeInstanceAssociationsStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstanceAssociationsStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DescribeInstanceAssociationsStatusOutput)
	return
}

func (d *SSMDouble) DescribeInstanceAssociationsStatusWithContext(i0 context.Context, i1 *ssm.DescribeInstanceAssociationsStatusInput, i2 ...request.Option) (r0 *ssm.DescribeInstanceAssociationsStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstanceAssociationsStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DescribeInstanceAssociationsStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDescribeInstanceAssociationsStatusWithContext(ctx context.Context, in *ssm.DescribeInstanceAssociationsStatusInput, _ ...request.Option) (*ssm.DescribeInstanceAssociationsStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeInstanceAssociationsStatus cancelled", ctx.Err())
	default:
		return d.DescribeInstanceAssociationsStatus(in)
	}
}

func (d *SSMDouble) DescribeInstanceInformation(i0 *ssm.DescribeInstanceInformationInput) (r0 *ssm.DescribeInstanceInformationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstanceInformation", i0)
	r0, _ = returns[0].(*ssm.DescribeInstanceInformationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DescribeInstanceInformationPages(i0 *ssm.DescribeInstanceInformationInput, i1 func(*ssm.DescribeInstanceInformationOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstanceInformationPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SSMDouble) fakeDescribeInstanceInformationPages(in *ssm.DescribeInstanceInformationInput, pager func(*ssm.DescribeInstanceInformationOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeInstanceInformation", paginators, in, pager)
}

func (d *SSMDouble) DescribeInstanceInformationPagesWithContext(i0 context.Context, i1 *ssm.DescribeInstanceInformationInput, i2 func(*ssm.DescribeInstanceInformationOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstanceInformationPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SSMDouble) fakeDescribeInstanceInformationPagesWithContext(ctx context.Context, in *ssm.DescribeInstanceInformationInput, pager func(*ssm.DescribeInstanceInformationOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeInstanceInformation", paginators, ctx, in, pager, options...)
}

func (d *SSMDouble) DescribeInstanceInformationRequest(i0 *ssm.DescribeInstanceInformationInput) (r0 *request.Request, r1 *ssm.DescribeInstanceInformationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstanceInformationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DescribeInstanceInformationOutput)
	return
}

func (d *SSMDouble) DescribeInstanceInformationWithContext(i0 context.Context, i1 *ssm.DescribeInstanceInformationInput, i2 ...request.Option) (r0 *ssm.DescribeInstanceInformationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstanceInformationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DescribeInstanceInformationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDescribeInstanceInformationWithContext(ctx context.Context, in *ssm.DescribeInstanceInformationInput, _ ...request.Option) (*ssm.DescribeInstanceInformationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeInstanceInformation cancelled", ctx.Err())
	default:
		return d.DescribeInstanceInformation(in)
	}
}

func (d *SSMDouble) DescribeInstancePatchStates(i0 *ssm.DescribeInstancePatchStatesInput) (r0 *ssm.DescribeInstancePatchStatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstancePatchStates", i0)
	r0, _ = returns[0].(*ssm.DescribeInstancePatchStatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DescribeInstancePatchStatesForPatchGroup(i0 *ssm.DescribeInstancePatchStatesForPatchGroupInput) (r0 *ssm.DescribeInstancePatchStatesForPatchGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstancePatchStatesForPatchGroup", i0)
	r0, _ = returns[0].(*ssm.DescribeInstancePatchStatesForPatchGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DescribeInstancePatchStatesForPatchGroupRequest(i0 *ssm.DescribeInstancePatchStatesForPatchGroupInput) (r0 *request.Request, r1 *ssm.DescribeInstancePatchStatesForPatchGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstancePatchStatesForPatchGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DescribeInstancePatchStatesForPatchGroupOutput)
	return
}

func (d *SSMDouble) DescribeInstancePatchStatesForPatchGroupWithContext(i0 context.Context, i1 *ssm.DescribeInstancePatchStatesForPatchGroupInput, i2 ...request.Option) (r0 *ssm.DescribeInstancePatchStatesForPatchGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstancePatchStatesForPatchGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DescribeInstancePatchStatesForPatchGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDescribeInstancePatchStatesForPatchGroupWithContext(ctx context.Context, in *ssm.DescribeInstancePatchStatesForPatchGroupInput, _ ...request.Option) (*ssm.DescribeInstancePatchStatesForPatchGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeInstancePatchStatesForPatchGroup cancelled", ctx.Err())
	default:
		return d.DescribeInstancePatchStatesForPatchGroup(in)
	}
}

func (d *SSMDouble) DescribeInstancePatchStatesRequest(i0 *ssm.DescribeInstancePatchStatesInput) (r0 *request.Request, r1 *ssm.DescribeInstancePatchStatesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstancePatchStatesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DescribeInstancePatchStatesOutput)
	return
}

func (d *SSMDouble) DescribeInstancePatchStatesWithContext(i0 context.Context, i1 *ssm.DescribeInstancePatchStatesInput, i2 ...request.Option) (r0 *ssm.DescribeInstancePatchStatesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstancePatchStatesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DescribeInstancePatchStatesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDescribeInstancePatchStatesWithContext(ctx context.Context, in *ssm.DescribeInstancePatchStatesInput, _ ...request.Option) (*ssm.DescribeInstancePatchStatesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeInstancePatchStates cancelled", ctx.Err())
	default:
		return d.DescribeInstancePatchStates(in)
	}
}

func (d *SSMDouble) DescribeInstancePatches(i0 *ssm.DescribeInstancePatchesInput) (r0 *ssm.DescribeInstancePatchesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstancePatches", i0)
	r0, _ = returns[0].(*ssm.DescribeInstancePatchesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DescribeInstancePatchesRequest(i0 *ssm.DescribeInstancePatchesInput) (r0 *request.Request, r1 *ssm.DescribeInstancePatchesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstancePatchesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DescribeInstancePatchesOutput)
	return
}

func (d *SSMDouble) DescribeInstancePatchesWithContext(i0 context.Context, i1 *ssm.DescribeInstancePatchesInput, i2 ...request.Option) (r0 *ssm.DescribeInstancePatchesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInstancePatchesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DescribeInstancePatchesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDescribeInstancePatchesWithContext(ctx context.Context, in *ssm.DescribeInstancePatchesInput, _ ...request.Option) (*ssm.DescribeInstancePatchesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeInstancePatches cancelled", ctx.Err())
	default:
		return d.DescribeInstancePatches(in)
	}
}

func (d *SSMDouble) DescribeInventoryDeletions(i0 *ssm.DescribeInventoryDeletionsInput) (r0 *ssm.DescribeInventoryDeletionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInventoryDeletions", i0)
	r0, _ = returns[0].(*ssm.DescribeInventoryDeletionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DescribeInventoryDeletionsRequest(i0 *ssm.DescribeInventoryDeletionsInput) (r0 *request.Request, r1 *ssm.DescribeInventoryDeletionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInventoryDeletionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DescribeInventoryDeletionsOutput)
	return
}

func (d *SSMDouble) DescribeInventoryDeletionsWithContext(i0 context.Context, i1 *ssm.DescribeInventoryDeletionsInput, i2 ...request.Option) (r0 *ssm.DescribeInventoryDeletionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeInventoryDeletionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DescribeInventoryDeletionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDescribeInventoryDeletionsWithContext(ctx context.Context, in *ssm.DescribeInventoryDeletionsInput, _ ...request.Option) (*ssm.DescribeInventoryDeletionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeInventoryDeletions cancelled", ctx.Err())
	default:
		return d.DescribeInventoryDeletions(in)
	}
}

func (d *SSMDouble) DescribeMaintenanceWindowExecutionTaskInvocations(i0 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput) (r0 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMaintenanceWindowExecutionTaskInvocations", i0)
	r0, _ = returns[0].(*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DescribeMaintenanceWindowExecutionTaskInvocationsRequest(i0 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput) (r0 *request.Request, r1 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMaintenanceWindowExecutionTaskInvocationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput)
	return
}

func (d *SSMDouble) DescribeMaintenanceWindowExecutionTaskInvocationsWithContext(i0 context.Context, i1 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput, i2 ...request.Option) (r0 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMaintenanceWindowExecutionTaskInvocationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDescribeMaintenanceWindowExecutionTaskInvocationsWithContext(ctx context.Context, in *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput, _ ...request.Option) (*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeMaintenanceWindowExecutionTaskInvocations cancelled", ctx.Err())
	default:
		return d.DescribeMaintenanceWindowExecutionTaskInvocations(in)
	}
}

func (d *SSMDouble) DescribeMaintenanceWindowExecutionTasks(i0 *ssm.DescribeMaintenanceWindowExecutionTasksInput) (r0 *ssm.DescribeMaintenanceWindowExecutionTasksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMaintenanceWindowExecutionTasks", i0)
	r0, _ = returns[0].(*ssm.DescribeMaintenanceWindowExecutionTasksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DescribeMaintenanceWindowExecutionTasksRequest(i0 *ssm.DescribeMaintenanceWindowExecutionTasksInput) (r0 *request.Request, r1 *ssm.DescribeMaintenanceWindowExecutionTasksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMaintenanceWindowExecutionTasksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DescribeMaintenanceWindowExecutionTasksOutput)
	return
}

func (d *SSMDouble) DescribeMaintenanceWindowExecutionTasksWithContext(i0 context.Context, i1 *ssm.DescribeMaintenanceWindowExecutionTasksInput, i2 ...request.Option) (r0 *ssm.DescribeMaintenanceWindowExecutionTasksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMaintenanceWindowExecutionTasksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DescribeMaintenanceWindowExecutionTasksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDescribeMaintenanceWindowExecutionTasksWithContext(ctx context.Context, in *ssm.DescribeMaintenanceWindowExecutionTasksInput, _ ...request.Option) (*ssm.DescribeMaintenanceWindowExecutionTasksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeMaintenanceWindowExecutionTasks cancelled", ctx.Err())
	default:
		return d.DescribeMaintenanceWindowExecutionTasks(in)
	}
}

func (d *SSMDouble) DescribeMaintenanceWindowExecutions(i0 *ssm.DescribeMaintenanceWindowExecutionsInput) (r0 *ssm.DescribeMaintenanceWindowExecutionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMaintenanceWindowExecutions", i0)
	r0, _ = returns[0].(*ssm.DescribeMaintenanceWindowExecutionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DescribeMaintenanceWindowExecutionsRequest(i0 *ssm.DescribeMaintenanceWindowExecutionsInput) (r0 *request.Request, r1 *ssm.DescribeMaintenanceWindowExecutionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMaintenanceWindowExecutionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DescribeMaintenanceWindowExecutionsOutput)
	return
}

func (d *SSMDouble) DescribeMaintenanceWindowExecutionsWithContext(i0 context.Context, i1 *ssm.DescribeMaintenanceWindowExecutionsInput, i2 ...request.Option) (r0 *ssm.DescribeMaintenanceWindowExecutionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMaintenanceWindowExecutionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DescribeMaintenanceWindowExecutionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDescribeMaintenanceWindowExecutionsWithContext(ctx context.Context, in *ssm.DescribeMaintenanceWindowExecutionsInput, _ ...request.Option) (*ssm.DescribeMaintenanceWindowExecutionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeMaintenanceWindowExecutions cancelled", ctx.Err())
	default:
		return d.DescribeMaintenanceWindowExecutions(in)
	}
}

func (d *SSMDouble) DescribeMaintenanceWindowSchedule(i0 *ssm.DescribeMaintenanceWindowScheduleInput) (r0 *ssm.DescribeMaintenanceWindowScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMaintenanceWindowSchedule", i0)
	r0, _ = returns[0].(*ssm.DescribeMaintenanceWindowScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DescribeMaintenanceWindowScheduleRequest(i0 *ssm.DescribeMaintenanceWindowScheduleInput) (r0 *request.Request, r1 *ssm.DescribeMaintenanceWindowScheduleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMaintenanceWindowScheduleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DescribeMaintenanceWindowScheduleOutput)
	return
}

func (d *SSMDouble) DescribeMaintenanceWindowScheduleWithContext(i0 context.Context, i1 *ssm.DescribeMaintenanceWindowScheduleInput, i2 ...request.Option) (r0 *ssm.DescribeMaintenanceWindowScheduleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMaintenanceWindowScheduleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DescribeMaintenanceWindowScheduleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDescribeMaintenanceWindowScheduleWithContext(ctx context.Context, in *ssm.DescribeMaintenanceWindowScheduleInput, _ ...request.Option) (*ssm.DescribeMaintenanceWindowScheduleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeMaintenanceWindowSchedule cancelled", ctx.Err())
	default:
		return d.DescribeMaintenanceWindowSchedule(in)
	}
}

func (d *SSMDouble) DescribeMaintenanceWindowTargets(i0 *ssm.DescribeMaintenanceWindowTargetsInput) (r0 *ssm.DescribeMaintenanceWindowTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMaintenanceWindowTargets", i0)
	r0, _ = returns[0].(*ssm.DescribeMaintenanceWindowTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DescribeMaintenanceWindowTargetsRequest(i0 *ssm.DescribeMaintenanceWindowTargetsInput) (r0 *request.Request, r1 *ssm.DescribeMaintenanceWindowTargetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMaintenanceWindowTargetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DescribeMaintenanceWindowTargetsOutput)
	return
}

func (d *SSMDouble) DescribeMaintenanceWindowTargetsWithContext(i0 context.Context, i1 *ssm.DescribeMaintenanceWindowTargetsInput, i2 ...request.Option) (r0 *ssm.DescribeMaintenanceWindowTargetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMaintenanceWindowTargetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DescribeMaintenanceWindowTargetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDescribeMaintenanceWindowTargetsWithContext(ctx context.Context, in *ssm.DescribeMaintenanceWindowTargetsInput, _ ...request.Option) (*ssm.DescribeMaintenanceWindowTargetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeMaintenanceWindowTargets cancelled", ctx.Err())
	default:
		return d.DescribeMaintenanceWindowTargets(in)
	}
}

func (d *SSMDouble) DescribeMaintenanceWindowTasks(i0 *ssm.DescribeMaintenanceWindowTasksInput) (r0 *ssm.DescribeMaintenanceWindowTasksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMaintenanceWindowTasks", i0)
	r0, _ = returns[0].(*ssm.DescribeMaintenanceWindowTasksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DescribeMaintenanceWindowTasksRequest(i0 *ssm.DescribeMaintenanceWindowTasksInput) (r0 *request.Request, r1 *ssm.DescribeMaintenanceWindowTasksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMaintenanceWindowTasksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DescribeMaintenanceWindowTasksOutput)
	return
}

func (d *SSMDouble) DescribeMaintenanceWindowTasksWithContext(i0 context.Context, i1 *ssm.DescribeMaintenanceWindowTasksInput, i2 ...request.Option) (r0 *ssm.DescribeMaintenanceWindowTasksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMaintenanceWindowTasksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DescribeMaintenanceWindowTasksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDescribeMaintenanceWindowTasksWithContext(ctx context.Context, in *ssm.DescribeMaintenanceWindowTasksInput, _ ...request.Option) (*ssm.DescribeMaintenanceWindowTasksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeMaintenanceWindowTasks cancelled", ctx.Err())
	default:
		return d.DescribeMaintenanceWindowTasks(in)
	}
}

func (d *SSMDouble) DescribeMaintenanceWindows(i0 *ssm.DescribeMaintenanceWindowsInput) (r0 *ssm.DescribeMaintenanceWindowsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMaintenanceWindows", i0)
	r0, _ = returns[0].(*ssm.DescribeMaintenanceWindowsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DescribeMaintenanceWindowsForTarget(i0 *ssm.DescribeMaintenanceWindowsForTargetInput) (r0 *ssm.DescribeMaintenanceWindowsForTargetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMaintenanceWindowsForTarget", i0)
	r0, _ = returns[0].(*ssm.DescribeMaintenanceWindowsForTargetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DescribeMaintenanceWindowsForTargetRequest(i0 *ssm.DescribeMaintenanceWindowsForTargetInput) (r0 *request.Request, r1 *ssm.DescribeMaintenanceWindowsForTargetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMaintenanceWindowsForTargetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DescribeMaintenanceWindowsForTargetOutput)
	return
}

func (d *SSMDouble) DescribeMaintenanceWindowsForTargetWithContext(i0 context.Context, i1 *ssm.DescribeMaintenanceWindowsForTargetInput, i2 ...request.Option) (r0 *ssm.DescribeMaintenanceWindowsForTargetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMaintenanceWindowsForTargetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DescribeMaintenanceWindowsForTargetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDescribeMaintenanceWindowsForTargetWithContext(ctx context.Context, in *ssm.DescribeMaintenanceWindowsForTargetInput, _ ...request.Option) (*ssm.DescribeMaintenanceWindowsForTargetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeMaintenanceWindowsForTarget cancelled", ctx.Err())
	default:
		return d.DescribeMaintenanceWindowsForTarget(in)
	}
}

func (d *SSMDouble) DescribeMaintenanceWindowsRequest(i0 *ssm.DescribeMaintenanceWindowsInput) (r0 *request.Request, r1 *ssm.DescribeMaintenanceWindowsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMaintenanceWindowsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DescribeMaintenanceWindowsOutput)
	return
}

func (d *SSMDouble) DescribeMaintenanceWindowsWithContext(i0 context.Context, i1 *ssm.DescribeMaintenanceWindowsInput, i2 ...request.Option) (r0 *ssm.DescribeMaintenanceWindowsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeMaintenanceWindowsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DescribeMaintenanceWindowsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDescribeMaintenanceWindowsWithContext(ctx context.Context, in *ssm.DescribeMaintenanceWindowsInput, _ ...request.Option) (*ssm.DescribeMaintenanceWindowsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeMaintenanceWindows cancelled", ctx.Err())
	default:
		return d.DescribeMaintenanceWindows(in)
	}
}

func (d *SSMDouble) DescribeOpsItems(i0 *ssm.DescribeOpsItemsInput) (r0 *ssm.DescribeOpsItemsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOpsItems", i0)
	r0, _ = returns[0].(*ssm.DescribeOpsItemsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DescribeOpsItemsRequest(i0 *ssm.DescribeOpsItemsInput) (r0 *request.Request, r1 *ssm.DescribeOpsItemsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOpsItemsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DescribeOpsItemsOutput)
	return
}

func (d *SSMDouble) DescribeOpsItemsWithContext(i0 context.Context, i1 *ssm.DescribeOpsItemsInput, i2 ...request.Option) (r0 *ssm.DescribeOpsItemsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeOpsItemsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DescribeOpsItemsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDescribeOpsItemsWithContext(ctx context.Context, in *ssm.DescribeOpsItemsInput, _ ...request.Option) (*ssm.DescribeOpsItemsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeOpsItems cancelled", ctx.Err())
	default:
		return d.DescribeOpsItems(in)
	}
}

func (d *SSMDouble) DescribeParameters(i0 *ssm.DescribeParametersInput) (r0 *ssm.DescribeParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeParameters", i0)
	r0, _ = returns[0].(*ssm.DescribeParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DescribeParametersPages(i0 *ssm.DescribeParametersInput, i1 func(*ssm.DescribeParametersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeParametersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SSMDouble) fakeDescribeParametersPages(in *ssm.DescribeParametersInput, pager func(*ssm.DescribeParametersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeParameters", paginators, in, pager)
}

func (d *SSMDouble) DescribeParametersPagesWithContext(i0 context.Context, i1 *ssm.DescribeParametersInput, i2 func(*ssm.DescribeParametersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeParametersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SSMDouble) fakeDescribeParametersPagesWithContext(ctx context.Context, in *ssm.DescribeParametersInput, pager func(*ssm.DescribeParametersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeParameters", paginators, ctx, in, pager, options...)
}

func (d *SSMDouble) DescribeParametersRequest(i0 *ssm.DescribeParametersInput) (r0 *request.Request, r1 *ssm.DescribeParametersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeParametersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DescribeParametersOutput)
	return
}

func (d *SSMDouble) DescribeParametersWithContext(i0 context.Context, i1 *ssm.DescribeParametersInput, i2 ...request.Option) (r0 *ssm.DescribeParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeParametersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DescribeParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDescribeParametersWithContext(ctx context.Context, in *ssm.DescribeParametersInput, _ ...request.Option) (*ssm.DescribeParametersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeParameters cancelled", ctx.Err())
	default:
		return d.DescribeParameters(in)
	}
}

func (d *SSMDouble) DescribePatchBaselines(i0 *ssm.DescribePatchBaselinesInput) (r0 *ssm.DescribePatchBaselinesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePatchBaselines", i0)
	r0, _ = returns[0].(*ssm.DescribePatchBaselinesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DescribePatchBaselinesRequest(i0 *ssm.DescribePatchBaselinesInput) (r0 *request.Request, r1 *ssm.DescribePatchBaselinesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePatchBaselinesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DescribePatchBaselinesOutput)
	return
}

func (d *SSMDouble) DescribePatchBaselinesWithContext(i0 context.Context, i1 *ssm.DescribePatchBaselinesInput, i2 ...request.Option) (r0 *ssm.DescribePatchBaselinesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePatchBaselinesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DescribePatchBaselinesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDescribePatchBaselinesWithContext(ctx context.Context, in *ssm.DescribePatchBaselinesInput, _ ...request.Option) (*ssm.DescribePatchBaselinesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribePatchBaselines cancelled", ctx.Err())
	default:
		return d.DescribePatchBaselines(in)
	}
}

func (d *SSMDouble) DescribePatchGroupState(i0 *ssm.DescribePatchGroupStateInput) (r0 *ssm.DescribePatchGroupStateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePatchGroupState", i0)
	r0, _ = returns[0].(*ssm.DescribePatchGroupStateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DescribePatchGroupStateRequest(i0 *ssm.DescribePatchGroupStateInput) (r0 *request.Request, r1 *ssm.DescribePatchGroupStateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePatchGroupStateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DescribePatchGroupStateOutput)
	return
}

func (d *SSMDouble) DescribePatchGroupStateWithContext(i0 context.Context, i1 *ssm.DescribePatchGroupStateInput, i2 ...request.Option) (r0 *ssm.DescribePatchGroupStateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePatchGroupStateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DescribePatchGroupStateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDescribePatchGroupStateWithContext(ctx context.Context, in *ssm.DescribePatchGroupStateInput, _ ...request.Option) (*ssm.DescribePatchGroupStateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribePatchGroupState cancelled", ctx.Err())
	default:
		return d.DescribePatchGroupState(in)
	}
}

func (d *SSMDouble) DescribePatchGroups(i0 *ssm.DescribePatchGroupsInput) (r0 *ssm.DescribePatchGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePatchGroups", i0)
	r0, _ = returns[0].(*ssm.DescribePatchGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DescribePatchGroupsRequest(i0 *ssm.DescribePatchGroupsInput) (r0 *request.Request, r1 *ssm.DescribePatchGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePatchGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DescribePatchGroupsOutput)
	return
}

func (d *SSMDouble) DescribePatchGroupsWithContext(i0 context.Context, i1 *ssm.DescribePatchGroupsInput, i2 ...request.Option) (r0 *ssm.DescribePatchGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePatchGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DescribePatchGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDescribePatchGroupsWithContext(ctx context.Context, in *ssm.DescribePatchGroupsInput, _ ...request.Option) (*ssm.DescribePatchGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribePatchGroups cancelled", ctx.Err())
	default:
		return d.DescribePatchGroups(in)
	}
}

func (d *SSMDouble) DescribePatchProperties(i0 *ssm.DescribePatchPropertiesInput) (r0 *ssm.DescribePatchPropertiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePatchProperties", i0)
	r0, _ = returns[0].(*ssm.DescribePatchPropertiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DescribePatchPropertiesRequest(i0 *ssm.DescribePatchPropertiesInput) (r0 *request.Request, r1 *ssm.DescribePatchPropertiesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePatchPropertiesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DescribePatchPropertiesOutput)
	return
}

func (d *SSMDouble) DescribePatchPropertiesWithContext(i0 context.Context, i1 *ssm.DescribePatchPropertiesInput, i2 ...request.Option) (r0 *ssm.DescribePatchPropertiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribePatchPropertiesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DescribePatchPropertiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDescribePatchPropertiesWithContext(ctx context.Context, in *ssm.DescribePatchPropertiesInput, _ ...request.Option) (*ssm.DescribePatchPropertiesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribePatchProperties cancelled", ctx.Err())
	default:
		return d.DescribePatchProperties(in)
	}
}

func (d *SSMDouble) DescribeSessions(i0 *ssm.DescribeSessionsInput) (r0 *ssm.DescribeSessionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSessions", i0)
	r0, _ = returns[0].(*ssm.DescribeSessionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) DescribeSessionsRequest(i0 *ssm.DescribeSessionsInput) (r0 *request.Request, r1 *ssm.DescribeSessionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSessionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.DescribeSessionsOutput)
	return
}

func (d *SSMDouble) DescribeSessionsWithContext(i0 context.Context, i1 *ssm.DescribeSessionsInput, i2 ...request.Option) (r0 *ssm.DescribeSessionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSessionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.DescribeSessionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeDescribeSessionsWithContext(ctx context.Context, in *ssm.DescribeSessionsInput, _ ...request.Option) (*ssm.DescribeSessionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSessions cancelled", ctx.Err())
	default:
		return d.DescribeSessions(in)
	}
}

func (d *SSMDouble) GetAutomationExecution(i0 *ssm.GetAutomationExecutionInput) (r0 *ssm.GetAutomationExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAutomationExecution", i0)
	r0, _ = returns[0].(*ssm.GetAutomationExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) GetAutomationExecutionRequest(i0 *ssm.GetAutomationExecutionInput) (r0 *request.Request, r1 *ssm.GetAutomationExecutionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAutomationExecutionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.GetAutomationExecutionOutput)
	return
}

func (d *SSMDouble) GetAutomationExecutionWithContext(i0 context.Context, i1 *ssm.GetAutomationExecutionInput, i2 ...request.Option) (r0 *ssm.GetAutomationExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAutomationExecutionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.GetAutomationExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeGetAutomationExecutionWithContext(ctx context.Context, in *ssm.GetAutomationExecutionInput, _ ...request.Option) (*ssm.GetAutomationExecutionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetAutomationExecution cancelled", ctx.Err())
	default:
		return d.GetAutomationExecution(in)
	}
}

func (d *SSMDouble) GetCalendarState(i0 *ssm.GetCalendarStateInput) (r0 *ssm.GetCalendarStateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCalendarState", i0)
	r0, _ = returns[0].(*ssm.GetCalendarStateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) GetCalendarStateRequest(i0 *ssm.GetCalendarStateInput) (r0 *request.Request, r1 *ssm.GetCalendarStateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCalendarStateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.GetCalendarStateOutput)
	return
}

func (d *SSMDouble) GetCalendarStateWithContext(i0 context.Context, i1 *ssm.GetCalendarStateInput, i2 ...request.Option) (r0 *ssm.GetCalendarStateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCalendarStateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.GetCalendarStateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeGetCalendarStateWithContext(ctx context.Context, in *ssm.GetCalendarStateInput, _ ...request.Option) (*ssm.GetCalendarStateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetCalendarState cancelled", ctx.Err())
	default:
		return d.GetCalendarState(in)
	}
}

func (d *SSMDouble) GetCommandInvocation(i0 *ssm.GetCommandInvocationInput) (r0 *ssm.GetCommandInvocationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCommandInvocation", i0)
	r0, _ = returns[0].(*ssm.GetCommandInvocationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) GetCommandInvocationRequest(i0 *ssm.GetCommandInvocationInput) (r0 *request.Request, r1 *ssm.GetCommandInvocationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCommandInvocationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.GetCommandInvocationOutput)
	return
}

func (d *SSMDouble) GetCommandInvocationWithContext(i0 context.Context, i1 *ssm.GetCommandInvocationInput, i2 ...request.Option) (r0 *ssm.GetCommandInvocationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCommandInvocationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.GetCommandInvocationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeGetCommandInvocationWithContext(ctx context.Context, in *ssm.GetCommandInvocationInput, _ ...request.Option) (*ssm.GetCommandInvocationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetCommandInvocation cancelled", ctx.Err())
	default:
		return d.GetCommandInvocation(in)
	}
}

func (d *SSMDouble) GetConnectionStatus(i0 *ssm.GetConnectionStatusInput) (r0 *ssm.GetConnectionStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConnectionStatus", i0)
	r0, _ = returns[0].(*ssm.GetConnectionStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) GetConnectionStatusRequest(i0 *ssm.GetConnectionStatusInput) (r0 *request.Request, r1 *ssm.GetConnectionStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConnectionStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.GetConnectionStatusOutput)
	return
}

func (d *SSMDouble) GetConnectionStatusWithContext(i0 context.Context, i1 *ssm.GetConnectionStatusInput, i2 ...request.Option) (r0 *ssm.GetConnectionStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConnectionStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.GetConnectionStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeGetConnectionStatusWithContext(ctx context.Context, in *ssm.GetConnectionStatusInput, _ ...request.Option) (*ssm.GetConnectionStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetConnectionStatus cancelled", ctx.Err())
	default:
		return d.GetConnectionStatus(in)
	}
}

func (d *SSMDouble) GetDefaultPatchBaseline(i0 *ssm.GetDefaultPatchBaselineInput) (r0 *ssm.GetDefaultPatchBaselineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDefaultPatchBaseline", i0)
	r0, _ = returns[0].(*ssm.GetDefaultPatchBaselineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) GetDefaultPatchBaselineRequest(i0 *ssm.GetDefaultPatchBaselineInput) (r0 *request.Request, r1 *ssm.GetDefaultPatchBaselineOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDefaultPatchBaselineRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.GetDefaultPatchBaselineOutput)
	return
}

func (d *SSMDouble) GetDefaultPatchBaselineWithContext(i0 context.Context, i1 *ssm.GetDefaultPatchBaselineInput, i2 ...request.Option) (r0 *ssm.GetDefaultPatchBaselineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDefaultPatchBaselineWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.GetDefaultPatchBaselineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeGetDefaultPatchBaselineWithContext(ctx context.Context, in *ssm.GetDefaultPatchBaselineInput, _ ...request.Option) (*ssm.GetDefaultPatchBaselineOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDefaultPatchBaseline cancelled", ctx.Err())
	default:
		return d.GetDefaultPatchBaseline(in)
	}
}

func (d *SSMDouble) GetDeployablePatchSnapshotForInstance(i0 *ssm.GetDeployablePatchSnapshotForInstanceInput) (r0 *ssm.GetDeployablePatchSnapshotForInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeployablePatchSnapshotForInstance", i0)
	r0, _ = returns[0].(*ssm.GetDeployablePatchSnapshotForInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) GetDeployablePatchSnapshotForInstanceRequest(i0 *ssm.GetDeployablePatchSnapshotForInstanceInput) (r0 *request.Request, r1 *ssm.GetDeployablePatchSnapshotForInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeployablePatchSnapshotForInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.GetDeployablePatchSnapshotForInstanceOutput)
	return
}

func (d *SSMDouble) GetDeployablePatchSnapshotForInstanceWithContext(i0 context.Context, i1 *ssm.GetDeployablePatchSnapshotForInstanceInput, i2 ...request.Option) (r0 *ssm.GetDeployablePatchSnapshotForInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDeployablePatchSnapshotForInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.GetDeployablePatchSnapshotForInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeGetDeployablePatchSnapshotForInstanceWithContext(ctx context.Context, in *ssm.GetDeployablePatchSnapshotForInstanceInput, _ ...request.Option) (*ssm.GetDeployablePatchSnapshotForInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDeployablePatchSnapshotForInstance cancelled", ctx.Err())
	default:
		return d.GetDeployablePatchSnapshotForInstance(in)
	}
}

func (d *SSMDouble) GetDocument(i0 *ssm.GetDocumentInput) (r0 *ssm.GetDocumentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDocument", i0)
	r0, _ = returns[0].(*ssm.GetDocumentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) GetDocumentRequest(i0 *ssm.GetDocumentInput) (r0 *request.Request, r1 *ssm.GetDocumentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDocumentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.GetDocumentOutput)
	return
}

func (d *SSMDouble) GetDocumentWithContext(i0 context.Context, i1 *ssm.GetDocumentInput, i2 ...request.Option) (r0 *ssm.GetDocumentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetDocumentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.GetDocumentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeGetDocumentWithContext(ctx context.Context, in *ssm.GetDocumentInput, _ ...request.Option) (*ssm.GetDocumentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetDocument cancelled", ctx.Err())
	default:
		return d.GetDocument(in)
	}
}

func (d *SSMDouble) GetInventory(i0 *ssm.GetInventoryInput) (r0 *ssm.GetInventoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInventory", i0)
	r0, _ = returns[0].(*ssm.GetInventoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) GetInventoryRequest(i0 *ssm.GetInventoryInput) (r0 *request.Request, r1 *ssm.GetInventoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInventoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.GetInventoryOutput)
	return
}

func (d *SSMDouble) GetInventorySchema(i0 *ssm.GetInventorySchemaInput) (r0 *ssm.GetInventorySchemaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInventorySchema", i0)
	r0, _ = returns[0].(*ssm.GetInventorySchemaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) GetInventorySchemaRequest(i0 *ssm.GetInventorySchemaInput) (r0 *request.Request, r1 *ssm.GetInventorySchemaOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInventorySchemaRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.GetInventorySchemaOutput)
	return
}

func (d *SSMDouble) GetInventorySchemaWithContext(i0 context.Context, i1 *ssm.GetInventorySchemaInput, i2 ...request.Option) (r0 *ssm.GetInventorySchemaOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInventorySchemaWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.GetInventorySchemaOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeGetInventorySchemaWithContext(ctx context.Context, in *ssm.GetInventorySchemaInput, _ ...request.Option) (*ssm.GetInventorySchemaOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetInventorySchema cancelled", ctx.Err())
	default:
		return d.GetInventorySchema(in)
	}
}

func (d *SSMDouble) GetInventoryWithContext(i0 context.Context, i1 *ssm.GetInventoryInput, i2 ...request.Option) (r0 *ssm.GetInventoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInventoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.GetInventoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeGetInventoryWithContext(ctx context.Context, in *ssm.GetInventoryInput, _ ...request.Option) (*ssm.GetInventoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetInventory cancelled", ctx.Err())
	default:
		return d.GetInventory(in)
	}
}

func (d *SSMDouble) GetMaintenanceWindow(i0 *ssm.GetMaintenanceWindowInput) (r0 *ssm.GetMaintenanceWindowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMaintenanceWindow", i0)
	r0, _ = returns[0].(*ssm.GetMaintenanceWindowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) GetMaintenanceWindowExecution(i0 *ssm.GetMaintenanceWindowExecutionInput) (r0 *ssm.GetMaintenanceWindowExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMaintenanceWindowExecution", i0)
	r0, _ = returns[0].(*ssm.GetMaintenanceWindowExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) GetMaintenanceWindowExecutionRequest(i0 *ssm.GetMaintenanceWindowExecutionInput) (r0 *request.Request, r1 *ssm.GetMaintenanceWindowExecutionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMaintenanceWindowExecutionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.GetMaintenanceWindowExecutionOutput)
	return
}

func (d *SSMDouble) GetMaintenanceWindowExecutionTask(i0 *ssm.GetMaintenanceWindowExecutionTaskInput) (r0 *ssm.GetMaintenanceWindowExecutionTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMaintenanceWindowExecutionTask", i0)
	r0, _ = returns[0].(*ssm.GetMaintenanceWindowExecutionTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) GetMaintenanceWindowExecutionTaskInvocation(i0 *ssm.GetMaintenanceWindowExecutionTaskInvocationInput) (r0 *ssm.GetMaintenanceWindowExecutionTaskInvocationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMaintenanceWindowExecutionTaskInvocation", i0)
	r0, _ = returns[0].(*ssm.GetMaintenanceWindowExecutionTaskInvocationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) GetMaintenanceWindowExecutionTaskInvocationRequest(i0 *ssm.GetMaintenanceWindowExecutionTaskInvocationInput) (r0 *request.Request, r1 *ssm.GetMaintenanceWindowExecutionTaskInvocationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMaintenanceWindowExecutionTaskInvocationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.GetMaintenanceWindowExecutionTaskInvocationOutput)
	return
}

func (d *SSMDouble) GetMaintenanceWindowExecutionTaskInvocationWithContext(i0 context.Context, i1 *ssm.GetMaintenanceWindowExecutionTaskInvocationInput, i2 ...request.Option) (r0 *ssm.GetMaintenanceWindowExecutionTaskInvocationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMaintenanceWindowExecutionTaskInvocationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.GetMaintenanceWindowExecutionTaskInvocationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeGetMaintenanceWindowExecutionTaskInvocationWithContext(ctx context.Context, in *ssm.GetMaintenanceWindowExecutionTaskInvocationInput, _ ...request.Option) (*ssm.GetMaintenanceWindowExecutionTaskInvocationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetMaintenanceWindowExecutionTaskInvocation cancelled", ctx.Err())
	default:
		return d.GetMaintenanceWindowExecutionTaskInvocation(in)
	}
}

func (d *SSMDouble) GetMaintenanceWindowExecutionTaskRequest(i0 *ssm.GetMaintenanceWindowExecutionTaskInput) (r0 *request.Request, r1 *ssm.GetMaintenanceWindowExecutionTaskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMaintenanceWindowExecutionTaskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.GetMaintenanceWindowExecutionTaskOutput)
	return
}

func (d *SSMDouble) GetMaintenanceWindowExecutionTaskWithContext(i0 context.Context, i1 *ssm.GetMaintenanceWindowExecutionTaskInput, i2 ...request.Option) (r0 *ssm.GetMaintenanceWindowExecutionTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMaintenanceWindowExecutionTaskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.GetMaintenanceWindowExecutionTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeGetMaintenanceWindowExecutionTaskWithContext(ctx context.Context, in *ssm.GetMaintenanceWindowExecutionTaskInput, _ ...request.Option) (*ssm.GetMaintenanceWindowExecutionTaskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetMaintenanceWindowExecutionTask cancelled", ctx.Err())
	default:
		return d.GetMaintenanceWindowExecutionTask(in)
	}
}

func (d *SSMDouble) GetMaintenanceWindowExecutionWithContext(i0 context.Context, i1 *ssm.GetMaintenanceWindowExecutionInput, i2 ...request.Option) (r0 *ssm.GetMaintenanceWindowExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMaintenanceWindowExecutionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.GetMaintenanceWindowExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeGetMaintenanceWindowExecutionWithContext(ctx context.Context, in *ssm.GetMaintenanceWindowExecutionInput, _ ...request.Option) (*ssm.GetMaintenanceWindowExecutionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetMaintenanceWindowExecution cancelled", ctx.Err())
	default:
		return d.GetMaintenanceWindowExecution(in)
	}
}

func (d *SSMDouble) GetMaintenanceWindowRequest(i0 *ssm.GetMaintenanceWindowInput) (r0 *request.Request, r1 *ssm.GetMaintenanceWindowOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMaintenanceWindowRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.GetMaintenanceWindowOutput)
	return
}

func (d *SSMDouble) GetMaintenanceWindowTask(i0 *ssm.GetMaintenanceWindowTaskInput) (r0 *ssm.GetMaintenanceWindowTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMaintenanceWindowTask", i0)
	r0, _ = returns[0].(*ssm.GetMaintenanceWindowTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) GetMaintenanceWindowTaskRequest(i0 *ssm.GetMaintenanceWindowTaskInput) (r0 *request.Request, r1 *ssm.GetMaintenanceWindowTaskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMaintenanceWindowTaskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.GetMaintenanceWindowTaskOutput)
	return
}

func (d *SSMDouble) GetMaintenanceWindowTaskWithContext(i0 context.Context, i1 *ssm.GetMaintenanceWindowTaskInput, i2 ...request.Option) (r0 *ssm.GetMaintenanceWindowTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMaintenanceWindowTaskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.GetMaintenanceWindowTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeGetMaintenanceWindowTaskWithContext(ctx context.Context, in *ssm.GetMaintenanceWindowTaskInput, _ ...request.Option) (*ssm.GetMaintenanceWindowTaskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetMaintenanceWindowTask cancelled", ctx.Err())
	default:
		return d.GetMaintenanceWindowTask(in)
	}
}

func (d *SSMDouble) GetMaintenanceWindowWithContext(i0 context.Context, i1 *ssm.GetMaintenanceWindowInput, i2 ...request.Option) (r0 *ssm.GetMaintenanceWindowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetMaintenanceWindowWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.GetMaintenanceWindowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeGetMaintenanceWindowWithContext(ctx context.Context, in *ssm.GetMaintenanceWindowInput, _ ...request.Option) (*ssm.GetMaintenanceWindowOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetMaintenanceWindow cancelled", ctx.Err())
	default:
		return d.GetMaintenanceWindow(in)
	}
}

func (d *SSMDouble) GetOpsItem(i0 *ssm.GetOpsItemInput) (r0 *ssm.GetOpsItemOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOpsItem", i0)
	r0, _ = returns[0].(*ssm.GetOpsItemOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) GetOpsItemRequest(i0 *ssm.GetOpsItemInput) (r0 *request.Request, r1 *ssm.GetOpsItemOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOpsItemRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.GetOpsItemOutput)
	return
}

func (d *SSMDouble) GetOpsItemWithContext(i0 context.Context, i1 *ssm.GetOpsItemInput, i2 ...request.Option) (r0 *ssm.GetOpsItemOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOpsItemWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.GetOpsItemOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeGetOpsItemWithContext(ctx context.Context, in *ssm.GetOpsItemInput, _ ...request.Option) (*ssm.GetOpsItemOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetOpsItem cancelled", ctx.Err())
	default:
		return d.GetOpsItem(in)
	}
}

func (d *SSMDouble) GetOpsSummary(i0 *ssm.GetOpsSummaryInput) (r0 *ssm.GetOpsSummaryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOpsSummary", i0)
	r0, _ = returns[0].(*ssm.GetOpsSummaryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) GetOpsSummaryRequest(i0 *ssm.GetOpsSummaryInput) (r0 *request.Request, r1 *ssm.GetOpsSummaryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOpsSummaryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.GetOpsSummaryOutput)
	return
}

func (d *SSMDouble) GetOpsSummaryWithContext(i0 context.Context, i1 *ssm.GetOpsSummaryInput, i2 ...request.Option) (r0 *ssm.GetOpsSummaryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetOpsSummaryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.GetOpsSummaryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeGetOpsSummaryWithContext(ctx context.Context, in *ssm.GetOpsSummaryInput, _ ...request.Option) (*ssm.GetOpsSummaryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetOpsSummary cancelled", ctx.Err())
	default:
		return d.GetOpsSummary(in)
	}
}

func (d *SSMDouble) GetParameter(i0 *ssm.GetParameterInput) (r0 *ssm.GetParameterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetParameter", i0)
	r0, _ = returns[0].(*ssm.GetParameterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) GetParameterHistory(i0 *ssm.GetParameterHistoryInput) (r0 *ssm.GetParameterHistoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetParameterHistory", i0)
	r0, _ = returns[0].(*ssm.GetParameterHistoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) GetParameterHistoryPages(i0 *ssm.GetParameterHistoryInput, i1 func(*ssm.GetParameterHistoryOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetParameterHistoryPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SSMDouble) fakeGetParameterHistoryPages(in *ssm.GetParameterHistoryInput, pager func(*ssm.GetParameterHistoryOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetParameterHistory", paginators, in, pager)
}

func (d *SSMDouble) GetParameterHistoryPagesWithContext(i0 context.Context, i1 *ssm.GetParameterHistoryInput, i2 func(*ssm.GetParameterHistoryOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetParameterHistoryPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SSMDouble) fakeGetParameterHistoryPagesWithContext(ctx context.Context, in *ssm.GetParameterHistoryInput, pager func(*ssm.GetParameterHistoryOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetParameterHistory", paginators, ctx, in, pager, options...)
}

func (d *SSMDouble) GetParameterHistoryRequest(i0 *ssm.GetParameterHistoryInput) (r0 *request.Request, r1 *ssm.GetParameterHistoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetParameterHistoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.GetParameterHistoryOutput)
	return
}

func (d *SSMDouble) GetParameterHistoryWithContext(i0 context.Context, i1 *ssm.GetParameterHistoryInput, i2 ...request.Option) (r0 *ssm.GetParameterHistoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetParameterHistoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.GetParameterHistoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeGetParameterHistoryWithContext(ctx context.Context, in *ssm.GetParameterHistoryInput, _ ...request.Option) (*ssm.GetParameterHistoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetParameterHistory cancelled", ctx.Err())
	default:
		return d.GetParameterHistory(in)
	}
}

func (d *SSMDouble) GetParameterRequest(i0 *ssm.GetParameterInput) (r0 *request.Request, r1 *ssm.GetParameterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetParameterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.GetParameterOutput)
	return
}

func (d *SSMDouble) GetParameterWithContext(i0 context.Context, i1 *ssm.GetParameterInput, i2 ...request.Option) (r0 *ssm.GetParameterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetParameterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.GetParameterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeGetParameterWithContext(ctx context.Context, in *ssm.GetParameterInput, _ ...request.Option) (*ssm.GetParameterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetParameter cancelled", ctx.Err())
	default:
		return d.GetParameter(in)
	}
}

func (d *SSMDouble) GetParameters(i0 *ssm.GetParametersInput) (r0 *ssm.GetParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetParameters", i0)
	r0, _ = returns[0].(*ssm.GetParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) GetParametersByPath(i0 *ssm.GetParametersByPathInput) (r0 *ssm.GetParametersByPathOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetParametersByPath", i0)
	r0, _ = returns[0].(*ssm.GetParametersByPathOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) GetParametersByPathPages(i0 *ssm.GetParametersByPathInput, i1 func(*ssm.GetParametersByPathOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetParametersByPathPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SSMDouble) fakeGetParametersByPathPages(in *ssm.GetParametersByPathInput, pager func(*ssm.GetParametersByPathOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetParametersByPath", paginators, in, pager)
}

func (d *SSMDouble) GetParametersByPathPagesWithContext(i0 context.Context, i1 *ssm.GetParametersByPathInput, i2 func(*ssm.GetParametersByPathOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetParametersByPathPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SSMDouble) fakeGetParametersByPathPagesWithContext(ctx context.Context, in *ssm.GetParametersByPathInput, pager func(*ssm.GetParametersByPathOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetParametersByPath", paginators, ctx, in, pager, options...)
}

func (d *SSMDouble) GetParametersByPathRequest(i0 *ssm.GetParametersByPathInput) (r0 *request.Request, r1 *ssm.GetParametersByPathOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetParametersByPathRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.GetParametersByPathOutput)
	return
}

func (d *SSMDouble) GetParametersByPathWithContext(i0 context.Context, i1 *ssm.GetParametersByPathInput, i2 ...request.Option) (r0 *ssm.GetParametersByPathOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetParametersByPathWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.GetParametersByPathOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeGetParametersByPathWithContext(ctx context.Context, in *ssm.GetParametersByPathInput, _ ...request.Option) (*ssm.GetParametersByPathOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetParametersByPath cancelled", ctx.Err())
	default:
		return d.GetParametersByPath(in)
	}
}

func (d *SSMDouble) GetParametersRequest(i0 *ssm.GetParametersInput) (r0 *request.Request, r1 *ssm.GetParametersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetParametersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.GetParametersOutput)
	return
}

func (d *SSMDouble) GetParametersWithContext(i0 context.Context, i1 *ssm.GetParametersInput, i2 ...request.Option) (r0 *ssm.GetParametersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetParametersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.GetParametersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeGetParametersWithContext(ctx context.Context, in *ssm.GetParametersInput, _ ...request.Option) (*ssm.GetParametersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetParameters cancelled", ctx.Err())
	default:
		return d.GetParameters(in)
	}
}

func (d *SSMDouble) GetPatchBaseline(i0 *ssm.GetPatchBaselineInput) (r0 *ssm.GetPatchBaselineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPatchBaseline", i0)
	r0, _ = returns[0].(*ssm.GetPatchBaselineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) GetPatchBaselineForPatchGroup(i0 *ssm.GetPatchBaselineForPatchGroupInput) (r0 *ssm.GetPatchBaselineForPatchGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPatchBaselineForPatchGroup", i0)
	r0, _ = returns[0].(*ssm.GetPatchBaselineForPatchGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) GetPatchBaselineForPatchGroupRequest(i0 *ssm.GetPatchBaselineForPatchGroupInput) (r0 *request.Request, r1 *ssm.GetPatchBaselineForPatchGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPatchBaselineForPatchGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.GetPatchBaselineForPatchGroupOutput)
	return
}

func (d *SSMDouble) GetPatchBaselineForPatchGroupWithContext(i0 context.Context, i1 *ssm.GetPatchBaselineForPatchGroupInput, i2 ...request.Option) (r0 *ssm.GetPatchBaselineForPatchGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPatchBaselineForPatchGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.GetPatchBaselineForPatchGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeGetPatchBaselineForPatchGroupWithContext(ctx context.Context, in *ssm.GetPatchBaselineForPatchGroupInput, _ ...request.Option) (*ssm.GetPatchBaselineForPatchGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetPatchBaselineForPatchGroup cancelled", ctx.Err())
	default:
		return d.GetPatchBaselineForPatchGroup(in)
	}
}

func (d *SSMDouble) GetPatchBaselineRequest(i0 *ssm.GetPatchBaselineInput) (r0 *request.Request, r1 *ssm.GetPatchBaselineOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPatchBaselineRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.GetPatchBaselineOutput)
	return
}

func (d *SSMDouble) GetPatchBaselineWithContext(i0 context.Context, i1 *ssm.GetPatchBaselineInput, i2 ...request.Option) (r0 *ssm.GetPatchBaselineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPatchBaselineWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.GetPatchBaselineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeGetPatchBaselineWithContext(ctx context.Context, in *ssm.GetPatchBaselineInput, _ ...request.Option) (*ssm.GetPatchBaselineOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetPatchBaseline cancelled", ctx.Err())
	default:
		return d.GetPatchBaseline(in)
	}
}

func (d *SSMDouble) GetServiceSetting(i0 *ssm.GetServiceSettingInput) (r0 *ssm.GetServiceSettingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetServiceSetting", i0)
	r0, _ = returns[0].(*ssm.GetServiceSettingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) GetServiceSettingRequest(i0 *ssm.GetServiceSettingInput) (r0 *request.Request, r1 *ssm.GetServiceSettingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetServiceSettingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.GetServiceSettingOutput)
	return
}

func (d *SSMDouble) GetServiceSettingWithContext(i0 context.Context, i1 *ssm.GetServiceSettingInput, i2 ...request.Option) (r0 *ssm.GetServiceSettingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetServiceSettingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.GetServiceSettingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeGetServiceSettingWithContext(ctx context.Context, in *ssm.GetServiceSettingInput, _ ...request.Option) (*ssm.GetServiceSettingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetServiceSetting cancelled", ctx.Err())
	default:
		return d.GetServiceSetting(in)
	}
}

func (d *SSMDouble) LabelParameterVersion(i0 *ssm.LabelParameterVersionInput) (r0 *ssm.LabelParameterVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("LabelParameterVersion", i0)
	r0, _ = returns[0].(*ssm.LabelParameterVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) LabelParameterVersionRequest(i0 *ssm.LabelParameterVersionInput) (r0 *request.Request, r1 *ssm.LabelParameterVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("LabelParameterVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.LabelParameterVersionOutput)
	return
}

func (d *SSMDouble) LabelParameterVersionWithContext(i0 context.Context, i1 *ssm.LabelParameterVersionInput, i2 ...request.Option) (r0 *ssm.LabelParameterVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("LabelParameterVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.LabelParameterVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeLabelParameterVersionWithContext(ctx context.Context, in *ssm.LabelParameterVersionInput, _ ...request.Option) (*ssm.LabelParameterVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "LabelParameterVersion cancelled", ctx.Err())
	default:
		return d.LabelParameterVersion(in)
	}
}

func (d *SSMDouble) ListAssociationVersions(i0 *ssm.ListAssociationVersionsInput) (r0 *ssm.ListAssociationVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssociationVersions", i0)
	r0, _ = returns[0].(*ssm.ListAssociationVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) ListAssociationVersionsRequest(i0 *ssm.ListAssociationVersionsInput) (r0 *request.Request, r1 *ssm.ListAssociationVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssociationVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.ListAssociationVersionsOutput)
	return
}

func (d *SSMDouble) ListAssociationVersionsWithContext(i0 context.Context, i1 *ssm.ListAssociationVersionsInput, i2 ...request.Option) (r0 *ssm.ListAssociationVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssociationVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.ListAssociationVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeListAssociationVersionsWithContext(ctx context.Context, in *ssm.ListAssociationVersionsInput, _ ...request.Option) (*ssm.ListAssociationVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAssociationVersions cancelled", ctx.Err())
	default:
		return d.ListAssociationVersions(in)
	}
}

func (d *SSMDouble) ListAssociations(i0 *ssm.ListAssociationsInput) (r0 *ssm.ListAssociationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssociations", i0)
	r0, _ = returns[0].(*ssm.ListAssociationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) ListAssociationsPages(i0 *ssm.ListAssociationsInput, i1 func(*ssm.ListAssociationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssociationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SSMDouble) fakeListAssociationsPages(in *ssm.ListAssociationsInput, pager func(*ssm.ListAssociationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListAssociations", paginators, in, pager)
}

func (d *SSMDouble) ListAssociationsPagesWithContext(i0 context.Context, i1 *ssm.ListAssociationsInput, i2 func(*ssm.ListAssociationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssociationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SSMDouble) fakeListAssociationsPagesWithContext(ctx context.Context, in *ssm.ListAssociationsInput, pager func(*ssm.ListAssociationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListAssociations", paginators, ctx, in, pager, options...)
}

func (d *SSMDouble) ListAssociationsRequest(i0 *ssm.ListAssociationsInput) (r0 *request.Request, r1 *ssm.ListAssociationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssociationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.ListAssociationsOutput)
	return
}

func (d *SSMDouble) ListAssociationsWithContext(i0 context.Context, i1 *ssm.ListAssociationsInput, i2 ...request.Option) (r0 *ssm.ListAssociationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAssociationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.ListAssociationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeListAssociationsWithContext(ctx context.Context, in *ssm.ListAssociationsInput, _ ...request.Option) (*ssm.ListAssociationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAssociations cancelled", ctx.Err())
	default:
		return d.ListAssociations(in)
	}
}

func (d *SSMDouble) ListCommandInvocations(i0 *ssm.ListCommandInvocationsInput) (r0 *ssm.ListCommandInvocationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCommandInvocations", i0)
	r0, _ = returns[0].(*ssm.ListCommandInvocationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) ListCommandInvocationsPages(i0 *ssm.ListCommandInvocationsInput, i1 func(*ssm.ListCommandInvocationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCommandInvocationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SSMDouble) fakeListCommandInvocationsPages(in *ssm.ListCommandInvocationsInput, pager func(*ssm.ListCommandInvocationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListCommandInvocations", paginators, in, pager)
}

func (d *SSMDouble) ListCommandInvocationsPagesWithContext(i0 context.Context, i1 *ssm.ListCommandInvocationsInput, i2 func(*ssm.ListCommandInvocationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCommandInvocationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SSMDouble) fakeListCommandInvocationsPagesWithContext(ctx context.Context, in *ssm.ListCommandInvocationsInput, pager func(*ssm.ListCommandInvocationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListCommandInvocations", paginators, ctx, in, pager, options...)
}

func (d *SSMDouble) ListCommandInvocationsRequest(i0 *ssm.ListCommandInvocationsInput) (r0 *request.Request, r1 *ssm.ListCommandInvocationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCommandInvocationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.ListCommandInvocationsOutput)
	return
}

func (d *SSMDouble) ListCommandInvocationsWithContext(i0 context.Context, i1 *ssm.ListCommandInvocationsInput, i2 ...request.Option) (r0 *ssm.ListCommandInvocationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCommandInvocationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.ListCommandInvocationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeListCommandInvocationsWithContext(ctx context.Context, in *ssm.ListCommandInvocationsInput, _ ...request.Option) (*ssm.ListCommandInvocationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListCommandInvocations cancelled", ctx.Err())
	default:
		return d.ListCommandInvocations(in)
	}
}

func (d *SSMDouble) ListCommands(i0 *ssm.ListCommandsInput) (r0 *ssm.ListCommandsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCommands", i0)
	r0, _ = returns[0].(*ssm.ListCommandsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) ListCommandsPages(i0 *ssm.ListCommandsInput, i1 func(*ssm.ListCommandsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCommandsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SSMDouble) fakeListCommandsPages(in *ssm.ListCommandsInput, pager func(*ssm.ListCommandsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListCommands", paginators, in, pager)
}

func (d *SSMDouble) ListCommandsPagesWithContext(i0 context.Context, i1 *ssm.ListCommandsInput, i2 func(*ssm.ListCommandsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCommandsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SSMDouble) fakeListCommandsPagesWithContext(ctx context.Context, in *ssm.ListCommandsInput, pager func(*ssm.ListCommandsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListCommands", paginators, ctx, in, pager, options...)
}

func (d *SSMDouble) ListCommandsRequest(i0 *ssm.ListCommandsInput) (r0 *request.Request, r1 *ssm.ListCommandsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCommandsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.ListCommandsOutput)
	return
}

func (d *SSMDouble) ListCommandsWithContext(i0 context.Context, i1 *ssm.ListCommandsInput, i2 ...request.Option) (r0 *ssm.ListCommandsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCommandsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.ListCommandsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeListCommandsWithContext(ctx context.Context, in *ssm.ListCommandsInput, _ ...request.Option) (*ssm.ListCommandsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListCommands cancelled", ctx.Err())
	default:
		return d.ListCommands(in)
	}
}

func (d *SSMDouble) ListComplianceItems(i0 *ssm.ListComplianceItemsInput) (r0 *ssm.ListComplianceItemsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListComplianceItems", i0)
	r0, _ = returns[0].(*ssm.ListComplianceItemsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) ListComplianceItemsRequest(i0 *ssm.ListComplianceItemsInput) (r0 *request.Request, r1 *ssm.ListComplianceItemsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListComplianceItemsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.ListComplianceItemsOutput)
	return
}

func (d *SSMDouble) ListComplianceItemsWithContext(i0 context.Context, i1 *ssm.ListComplianceItemsInput, i2 ...request.Option) (r0 *ssm.ListComplianceItemsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListComplianceItemsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.ListComplianceItemsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeListComplianceItemsWithContext(ctx context.Context, in *ssm.ListComplianceItemsInput, _ ...request.Option) (*ssm.ListComplianceItemsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListComplianceItems cancelled", ctx.Err())
	default:
		return d.ListComplianceItems(in)
	}
}

func (d *SSMDouble) ListComplianceSummaries(i0 *ssm.ListComplianceSummariesInput) (r0 *ssm.ListComplianceSummariesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListComplianceSummaries", i0)
	r0, _ = returns[0].(*ssm.ListComplianceSummariesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) ListComplianceSummariesRequest(i0 *ssm.ListComplianceSummariesInput) (r0 *request.Request, r1 *ssm.ListComplianceSummariesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListComplianceSummariesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.ListComplianceSummariesOutput)
	return
}

func (d *SSMDouble) ListComplianceSummariesWithContext(i0 context.Context, i1 *ssm.ListComplianceSummariesInput, i2 ...request.Option) (r0 *ssm.ListComplianceSummariesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListComplianceSummariesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.ListComplianceSummariesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeListComplianceSummariesWithContext(ctx context.Context, in *ssm.ListComplianceSummariesInput, _ ...request.Option) (*ssm.ListComplianceSummariesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListComplianceSummaries cancelled", ctx.Err())
	default:
		return d.ListComplianceSummaries(in)
	}
}

func (d *SSMDouble) ListDocumentVersions(i0 *ssm.ListDocumentVersionsInput) (r0 *ssm.ListDocumentVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDocumentVersions", i0)
	r0, _ = returns[0].(*ssm.ListDocumentVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) ListDocumentVersionsRequest(i0 *ssm.ListDocumentVersionsInput) (r0 *request.Request, r1 *ssm.ListDocumentVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDocumentVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.ListDocumentVersionsOutput)
	return
}

func (d *SSMDouble) ListDocumentVersionsWithContext(i0 context.Context, i1 *ssm.ListDocumentVersionsInput, i2 ...request.Option) (r0 *ssm.ListDocumentVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDocumentVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.ListDocumentVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeListDocumentVersionsWithContext(ctx context.Context, in *ssm.ListDocumentVersionsInput, _ ...request.Option) (*ssm.ListDocumentVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDocumentVersions cancelled", ctx.Err())
	default:
		return d.ListDocumentVersions(in)
	}
}

func (d *SSMDouble) ListDocuments(i0 *ssm.ListDocumentsInput) (r0 *ssm.ListDocumentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDocuments", i0)
	r0, _ = returns[0].(*ssm.ListDocumentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) ListDocumentsPages(i0 *ssm.ListDocumentsInput, i1 func(*ssm.ListDocumentsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDocumentsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SSMDouble) fakeListDocumentsPages(in *ssm.ListDocumentsInput, pager func(*ssm.ListDocumentsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListDocuments", paginators, in, pager)
}

func (d *SSMDouble) ListDocumentsPagesWithContext(i0 context.Context, i1 *ssm.ListDocumentsInput, i2 func(*ssm.ListDocumentsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDocumentsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SSMDouble) fakeListDocumentsPagesWithContext(ctx context.Context, in *ssm.ListDocumentsInput, pager func(*ssm.ListDocumentsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListDocuments", paginators, ctx, in, pager, options...)
}

func (d *SSMDouble) ListDocumentsRequest(i0 *ssm.ListDocumentsInput) (r0 *request.Request, r1 *ssm.ListDocumentsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDocumentsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.ListDocumentsOutput)
	return
}

func (d *SSMDouble) ListDocumentsWithContext(i0 context.Context, i1 *ssm.ListDocumentsInput, i2 ...request.Option) (r0 *ssm.ListDocumentsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDocumentsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.ListDocumentsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeListDocumentsWithContext(ctx context.Context, in *ssm.ListDocumentsInput, _ ...request.Option) (*ssm.ListDocumentsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDocuments cancelled", ctx.Err())
	default:
		return d.ListDocuments(in)
	}
}

func (d *SSMDouble) ListInventoryEntries(i0 *ssm.ListInventoryEntriesInput) (r0 *ssm.ListInventoryEntriesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInventoryEntries", i0)
	r0, _ = returns[0].(*ssm.ListInventoryEntriesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) ListInventoryEntriesRequest(i0 *ssm.ListInventoryEntriesInput) (r0 *request.Request, r1 *ssm.ListInventoryEntriesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInventoryEntriesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.ListInventoryEntriesOutput)
	return
}

func (d *SSMDouble) ListInventoryEntriesWithContext(i0 context.Context, i1 *ssm.ListInventoryEntriesInput, i2 ...request.Option) (r0 *ssm.ListInventoryEntriesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInventoryEntriesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.ListInventoryEntriesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeListInventoryEntriesWithContext(ctx context.Context, in *ssm.ListInventoryEntriesInput, _ ...request.Option) (*ssm.ListInventoryEntriesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListInventoryEntries cancelled", ctx.Err())
	default:
		return d.ListInventoryEntries(in)
	}
}

func (d *SSMDouble) ListResourceComplianceSummaries(i0 *ssm.ListResourceComplianceSummariesInput) (r0 *ssm.ListResourceComplianceSummariesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourceComplianceSummaries", i0)
	r0, _ = returns[0].(*ssm.ListResourceComplianceSummariesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) ListResourceComplianceSummariesRequest(i0 *ssm.ListResourceComplianceSummariesInput) (r0 *request.Request, r1 *ssm.ListResourceComplianceSummariesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourceComplianceSummariesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.ListResourceComplianceSummariesOutput)
	return
}

func (d *SSMDouble) ListResourceComplianceSummariesWithContext(i0 context.Context, i1 *ssm.ListResourceComplianceSummariesInput, i2 ...request.Option) (r0 *ssm.ListResourceComplianceSummariesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourceComplianceSummariesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.ListResourceComplianceSummariesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeListResourceComplianceSummariesWithContext(ctx context.Context, in *ssm.ListResourceComplianceSummariesInput, _ ...request.Option) (*ssm.ListResourceComplianceSummariesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListResourceComplianceSummaries cancelled", ctx.Err())
	default:
		return d.ListResourceComplianceSummaries(in)
	}
}

func (d *SSMDouble) ListResourceDataSync(i0 *ssm.ListResourceDataSyncInput) (r0 *ssm.ListResourceDataSyncOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourceDataSync", i0)
	r0, _ = returns[0].(*ssm.ListResourceDataSyncOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) ListResourceDataSyncRequest(i0 *ssm.ListResourceDataSyncInput) (r0 *request.Request, r1 *ssm.ListResourceDataSyncOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourceDataSyncRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.ListResourceDataSyncOutput)
	return
}

func (d *SSMDouble) ListResourceDataSyncWithContext(i0 context.Context, i1 *ssm.ListResourceDataSyncInput, i2 ...request.Option) (r0 *ssm.ListResourceDataSyncOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourceDataSyncWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.ListResourceDataSyncOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeListResourceDataSyncWithContext(ctx context.Context, in *ssm.ListResourceDataSyncInput, _ ...request.Option) (*ssm.ListResourceDataSyncOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListResourceDataSync cancelled", ctx.Err())
	default:
		return d.ListResourceDataSync(in)
	}
}

func (d *SSMDouble) ListTagsForResource(i0 *ssm.ListTagsForResourceInput) (r0 *ssm.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*ssm.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) ListTagsForResourceRequest(i0 *ssm.ListTagsForResourceInput) (r0 *request.Request, r1 *ssm.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.ListTagsForResourceOutput)
	return
}

func (d *SSMDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *ssm.ListTagsForResourceInput, i2 ...request.Option) (r0 *ssm.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *ssm.ListTagsForResourceInput, _ ...request.Option) (*ssm.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *SSMDouble) ModifyDocumentPermission(i0 *ssm.ModifyDocumentPermissionInput) (r0 *ssm.ModifyDocumentPermissionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDocumentPermission", i0)
	r0, _ = returns[0].(*ssm.ModifyDocumentPermissionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) ModifyDocumentPermissionRequest(i0 *ssm.ModifyDocumentPermissionInput) (r0 *request.Request, r1 *ssm.ModifyDocumentPermissionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDocumentPermissionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.ModifyDocumentPermissionOutput)
	return
}

func (d *SSMDouble) ModifyDocumentPermissionWithContext(i0 context.Context, i1 *ssm.ModifyDocumentPermissionInput, i2 ...request.Option) (r0 *ssm.ModifyDocumentPermissionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyDocumentPermissionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.ModifyDocumentPermissionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeModifyDocumentPermissionWithContext(ctx context.Context, in *ssm.ModifyDocumentPermissionInput, _ ...request.Option) (*ssm.ModifyDocumentPermissionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyDocumentPermission cancelled", ctx.Err())
	default:
		return d.ModifyDocumentPermission(in)
	}
}

func (d *SSMDouble) PutComplianceItems(i0 *ssm.PutComplianceItemsInput) (r0 *ssm.PutComplianceItemsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutComplianceItems", i0)
	r0, _ = returns[0].(*ssm.PutComplianceItemsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) PutComplianceItemsRequest(i0 *ssm.PutComplianceItemsInput) (r0 *request.Request, r1 *ssm.PutComplianceItemsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutComplianceItemsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.PutComplianceItemsOutput)
	return
}

func (d *SSMDouble) PutComplianceItemsWithContext(i0 context.Context, i1 *ssm.PutComplianceItemsInput, i2 ...request.Option) (r0 *ssm.PutComplianceItemsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutComplianceItemsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.PutComplianceItemsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakePutComplianceItemsWithContext(ctx context.Context, in *ssm.PutComplianceItemsInput, _ ...request.Option) (*ssm.PutComplianceItemsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutComplianceItems cancelled", ctx.Err())
	default:
		return d.PutComplianceItems(in)
	}
}

func (d *SSMDouble) PutInventory(i0 *ssm.PutInventoryInput) (r0 *ssm.PutInventoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutInventory", i0)
	r0, _ = returns[0].(*ssm.PutInventoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) PutInventoryRequest(i0 *ssm.PutInventoryInput) (r0 *request.Request, r1 *ssm.PutInventoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutInventoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.PutInventoryOutput)
	return
}

func (d *SSMDouble) PutInventoryWithContext(i0 context.Context, i1 *ssm.PutInventoryInput, i2 ...request.Option) (r0 *ssm.PutInventoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutInventoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.PutInventoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakePutInventoryWithContext(ctx context.Context, in *ssm.PutInventoryInput, _ ...request.Option) (*ssm.PutInventoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutInventory cancelled", ctx.Err())
	default:
		return d.PutInventory(in)
	}
}

func (d *SSMDouble) PutParameter(i0 *ssm.PutParameterInput) (r0 *ssm.PutParameterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutParameter", i0)
	r0, _ = returns[0].(*ssm.PutParameterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) PutParameterRequest(i0 *ssm.PutParameterInput) (r0 *request.Request, r1 *ssm.PutParameterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutParameterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.PutParameterOutput)
	return
}

func (d *SSMDouble) PutParameterWithContext(i0 context.Context, i1 *ssm.PutParameterInput, i2 ...request.Option) (r0 *ssm.PutParameterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutParameterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.PutParameterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakePutParameterWithContext(ctx context.Context, in *ssm.PutParameterInput, _ ...request.Option) (*ssm.PutParameterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutParameter cancelled", ctx.Err())
	default:
		return d.PutParameter(in)
	}
}

func (d *SSMDouble) RegisterDefaultPatchBaseline(i0 *ssm.RegisterDefaultPatchBaselineInput) (r0 *ssm.RegisterDefaultPatchBaselineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterDefaultPatchBaseline", i0)
	r0, _ = returns[0].(*ssm.RegisterDefaultPatchBaselineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) RegisterDefaultPatchBaselineRequest(i0 *ssm.RegisterDefaultPatchBaselineInput) (r0 *request.Request, r1 *ssm.RegisterDefaultPatchBaselineOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterDefaultPatchBaselineRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.RegisterDefaultPatchBaselineOutput)
	return
}

func (d *SSMDouble) RegisterDefaultPatchBaselineWithContext(i0 context.Context, i1 *ssm.RegisterDefaultPatchBaselineInput, i2 ...request.Option) (r0 *ssm.RegisterDefaultPatchBaselineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterDefaultPatchBaselineWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.RegisterDefaultPatchBaselineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeRegisterDefaultPatchBaselineWithContext(ctx context.Context, in *ssm.RegisterDefaultPatchBaselineInput, _ ...request.Option) (*ssm.RegisterDefaultPatchBaselineOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterDefaultPatchBaseline cancelled", ctx.Err())
	default:
		return d.RegisterDefaultPatchBaseline(in)
	}
}

func (d *SSMDouble) RegisterPatchBaselineForPatchGroup(i0 *ssm.RegisterPatchBaselineForPatchGroupInput) (r0 *ssm.RegisterPatchBaselineForPatchGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterPatchBaselineForPatchGroup", i0)
	r0, _ = returns[0].(*ssm.RegisterPatchBaselineForPatchGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) RegisterPatchBaselineForPatchGroupRequest(i0 *ssm.RegisterPatchBaselineForPatchGroupInput) (r0 *request.Request, r1 *ssm.RegisterPatchBaselineForPatchGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterPatchBaselineForPatchGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.RegisterPatchBaselineForPatchGroupOutput)
	return
}

func (d *SSMDouble) RegisterPatchBaselineForPatchGroupWithContext(i0 context.Context, i1 *ssm.RegisterPatchBaselineForPatchGroupInput, i2 ...request.Option) (r0 *ssm.RegisterPatchBaselineForPatchGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterPatchBaselineForPatchGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.RegisterPatchBaselineForPatchGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeRegisterPatchBaselineForPatchGroupWithContext(ctx context.Context, in *ssm.RegisterPatchBaselineForPatchGroupInput, _ ...request.Option) (*ssm.RegisterPatchBaselineForPatchGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterPatchBaselineForPatchGroup cancelled", ctx.Err())
	default:
		return d.RegisterPatchBaselineForPatchGroup(in)
	}
}

func (d *SSMDouble) RegisterTargetWithMaintenanceWindow(i0 *ssm.RegisterTargetWithMaintenanceWindowInput) (r0 *ssm.RegisterTargetWithMaintenanceWindowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterTargetWithMaintenanceWindow", i0)
	r0, _ = returns[0].(*ssm.RegisterTargetWithMaintenanceWindowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) RegisterTargetWithMaintenanceWindowRequest(i0 *ssm.RegisterTargetWithMaintenanceWindowInput) (r0 *request.Request, r1 *ssm.RegisterTargetWithMaintenanceWindowOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterTargetWithMaintenanceWindowRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.RegisterTargetWithMaintenanceWindowOutput)
	return
}

func (d *SSMDouble) RegisterTargetWithMaintenanceWindowWithContext(i0 context.Context, i1 *ssm.RegisterTargetWithMaintenanceWindowInput, i2 ...request.Option) (r0 *ssm.RegisterTargetWithMaintenanceWindowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterTargetWithMaintenanceWindowWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.RegisterTargetWithMaintenanceWindowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeRegisterTargetWithMaintenanceWindowWithContext(ctx context.Context, in *ssm.RegisterTargetWithMaintenanceWindowInput, _ ...request.Option) (*ssm.RegisterTargetWithMaintenanceWindowOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterTargetWithMaintenanceWindow cancelled", ctx.Err())
	default:
		return d.RegisterTargetWithMaintenanceWindow(in)
	}
}

func (d *SSMDouble) RegisterTaskWithMaintenanceWindow(i0 *ssm.RegisterTaskWithMaintenanceWindowInput) (r0 *ssm.RegisterTaskWithMaintenanceWindowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterTaskWithMaintenanceWindow", i0)
	r0, _ = returns[0].(*ssm.RegisterTaskWithMaintenanceWindowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) RegisterTaskWithMaintenanceWindowRequest(i0 *ssm.RegisterTaskWithMaintenanceWindowInput) (r0 *request.Request, r1 *ssm.RegisterTaskWithMaintenanceWindowOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterTaskWithMaintenanceWindowRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.RegisterTaskWithMaintenanceWindowOutput)
	return
}

func (d *SSMDouble) RegisterTaskWithMaintenanceWindowWithContext(i0 context.Context, i1 *ssm.RegisterTaskWithMaintenanceWindowInput, i2 ...request.Option) (r0 *ssm.RegisterTaskWithMaintenanceWindowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterTaskWithMaintenanceWindowWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.RegisterTaskWithMaintenanceWindowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeRegisterTaskWithMaintenanceWindowWithContext(ctx context.Context, in *ssm.RegisterTaskWithMaintenanceWindowInput, _ ...request.Option) (*ssm.RegisterTaskWithMaintenanceWindowOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterTaskWithMaintenanceWindow cancelled", ctx.Err())
	default:
		return d.RegisterTaskWithMaintenanceWindow(in)
	}
}

func (d *SSMDouble) RemoveTagsFromResource(i0 *ssm.RemoveTagsFromResourceInput) (r0 *ssm.RemoveTagsFromResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromResource", i0)
	r0, _ = returns[0].(*ssm.RemoveTagsFromResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) RemoveTagsFromResourceRequest(i0 *ssm.RemoveTagsFromResourceInput) (r0 *request.Request, r1 *ssm.RemoveTagsFromResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.RemoveTagsFromResourceOutput)
	return
}

func (d *SSMDouble) RemoveTagsFromResourceWithContext(i0 context.Context, i1 *ssm.RemoveTagsFromResourceInput, i2 ...request.Option) (r0 *ssm.RemoveTagsFromResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsFromResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.RemoveTagsFromResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeRemoveTagsFromResourceWithContext(ctx context.Context, in *ssm.RemoveTagsFromResourceInput, _ ...request.Option) (*ssm.RemoveTagsFromResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveTagsFromResource cancelled", ctx.Err())
	default:
		return d.RemoveTagsFromResource(in)
	}
}

func (d *SSMDouble) ResetServiceSetting(i0 *ssm.ResetServiceSettingInput) (r0 *ssm.ResetServiceSettingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetServiceSetting", i0)
	r0, _ = returns[0].(*ssm.ResetServiceSettingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) ResetServiceSettingRequest(i0 *ssm.ResetServiceSettingInput) (r0 *request.Request, r1 *ssm.ResetServiceSettingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetServiceSettingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.ResetServiceSettingOutput)
	return
}

func (d *SSMDouble) ResetServiceSettingWithContext(i0 context.Context, i1 *ssm.ResetServiceSettingInput, i2 ...request.Option) (r0 *ssm.ResetServiceSettingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResetServiceSettingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.ResetServiceSettingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeResetServiceSettingWithContext(ctx context.Context, in *ssm.ResetServiceSettingInput, _ ...request.Option) (*ssm.ResetServiceSettingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ResetServiceSetting cancelled", ctx.Err())
	default:
		return d.ResetServiceSetting(in)
	}
}

func (d *SSMDouble) ResumeSession(i0 *ssm.ResumeSessionInput) (r0 *ssm.ResumeSessionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResumeSession", i0)
	r0, _ = returns[0].(*ssm.ResumeSessionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) ResumeSessionRequest(i0 *ssm.ResumeSessionInput) (r0 *request.Request, r1 *ssm.ResumeSessionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResumeSessionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.ResumeSessionOutput)
	return
}

func (d *SSMDouble) ResumeSessionWithContext(i0 context.Context, i1 *ssm.ResumeSessionInput, i2 ...request.Option) (r0 *ssm.ResumeSessionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ResumeSessionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.ResumeSessionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeResumeSessionWithContext(ctx context.Context, in *ssm.ResumeSessionInput, _ ...request.Option) (*ssm.ResumeSessionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ResumeSession cancelled", ctx.Err())
	default:
		return d.ResumeSession(in)
	}
}

func (d *SSMDouble) SendAutomationSignal(i0 *ssm.SendAutomationSignalInput) (r0 *ssm.SendAutomationSignalOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendAutomationSignal", i0)
	r0, _ = returns[0].(*ssm.SendAutomationSignalOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) SendAutomationSignalRequest(i0 *ssm.SendAutomationSignalInput) (r0 *request.Request, r1 *ssm.SendAutomationSignalOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendAutomationSignalRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.SendAutomationSignalOutput)
	return
}

func (d *SSMDouble) SendAutomationSignalWithContext(i0 context.Context, i1 *ssm.SendAutomationSignalInput, i2 ...request.Option) (r0 *ssm.SendAutomationSignalOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendAutomationSignalWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.SendAutomationSignalOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeSendAutomationSignalWithContext(ctx context.Context, in *ssm.SendAutomationSignalInput, _ ...request.Option) (*ssm.SendAutomationSignalOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SendAutomationSignal cancelled", ctx.Err())
	default:
		return d.SendAutomationSignal(in)
	}
}

func (d *SSMDouble) SendCommand(i0 *ssm.SendCommandInput) (r0 *ssm.SendCommandOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendCommand", i0)
	r0, _ = returns[0].(*ssm.SendCommandOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) SendCommandRequest(i0 *ssm.SendCommandInput) (r0 *request.Request, r1 *ssm.SendCommandOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendCommandRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.SendCommandOutput)
	return
}

func (d *SSMDouble) SendCommandWithContext(i0 context.Context, i1 *ssm.SendCommandInput, i2 ...request.Option) (r0 *ssm.SendCommandOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SendCommandWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.SendCommandOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeSendCommandWithContext(ctx context.Context, in *ssm.SendCommandInput, _ ...request.Option) (*ssm.SendCommandOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SendCommand cancelled", ctx.Err())
	default:
		return d.SendCommand(in)
	}
}

func (d *SSMDouble) StartAssociationsOnce(i0 *ssm.StartAssociationsOnceInput) (r0 *ssm.StartAssociationsOnceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartAssociationsOnce", i0)
	r0, _ = returns[0].(*ssm.StartAssociationsOnceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) StartAssociationsOnceRequest(i0 *ssm.StartAssociationsOnceInput) (r0 *request.Request, r1 *ssm.StartAssociationsOnceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartAssociationsOnceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.StartAssociationsOnceOutput)
	return
}

func (d *SSMDouble) StartAssociationsOnceWithContext(i0 context.Context, i1 *ssm.StartAssociationsOnceInput, i2 ...request.Option) (r0 *ssm.StartAssociationsOnceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartAssociationsOnceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.StartAssociationsOnceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeStartAssociationsOnceWithContext(ctx context.Context, in *ssm.StartAssociationsOnceInput, _ ...request.Option) (*ssm.StartAssociationsOnceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartAssociationsOnce cancelled", ctx.Err())
	default:
		return d.StartAssociationsOnce(in)
	}
}

func (d *SSMDouble) StartAutomationExecution(i0 *ssm.StartAutomationExecutionInput) (r0 *ssm.StartAutomationExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartAutomationExecution", i0)
	r0, _ = returns[0].(*ssm.StartAutomationExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) StartAutomationExecutionRequest(i0 *ssm.StartAutomationExecutionInput) (r0 *request.Request, r1 *ssm.StartAutomationExecutionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartAutomationExecutionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.StartAutomationExecutionOutput)
	return
}

func (d *SSMDouble) StartAutomationExecutionWithContext(i0 context.Context, i1 *ssm.StartAutomationExecutionInput, i2 ...request.Option) (r0 *ssm.StartAutomationExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartAutomationExecutionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.StartAutomationExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeStartAutomationExecutionWithContext(ctx context.Context, in *ssm.StartAutomationExecutionInput, _ ...request.Option) (*ssm.StartAutomationExecutionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartAutomationExecution cancelled", ctx.Err())
	default:
		return d.StartAutomationExecution(in)
	}
}

func (d *SSMDouble) StartSession(i0 *ssm.StartSessionInput) (r0 *ssm.StartSessionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartSession", i0)
	r0, _ = returns[0].(*ssm.StartSessionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) StartSessionRequest(i0 *ssm.StartSessionInput) (r0 *request.Request, r1 *ssm.StartSessionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartSessionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.StartSessionOutput)
	return
}

func (d *SSMDouble) StartSessionWithContext(i0 context.Context, i1 *ssm.StartSessionInput, i2 ...request.Option) (r0 *ssm.StartSessionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartSessionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.StartSessionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeStartSessionWithContext(ctx context.Context, in *ssm.StartSessionInput, _ ...request.Option) (*ssm.StartSessionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartSession cancelled", ctx.Err())
	default:
		return d.StartSession(in)
	}
}

func (d *SSMDouble) StopAutomationExecution(i0 *ssm.StopAutomationExecutionInput) (r0 *ssm.StopAutomationExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopAutomationExecution", i0)
	r0, _ = returns[0].(*ssm.StopAutomationExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) StopAutomationExecutionRequest(i0 *ssm.StopAutomationExecutionInput) (r0 *request.Request, r1 *ssm.StopAutomationExecutionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopAutomationExecutionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.StopAutomationExecutionOutput)
	return
}

func (d *SSMDouble) StopAutomationExecutionWithContext(i0 context.Context, i1 *ssm.StopAutomationExecutionInput, i2 ...request.Option) (r0 *ssm.StopAutomationExecutionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopAutomationExecutionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.StopAutomationExecutionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeStopAutomationExecutionWithContext(ctx context.Context, in *ssm.StopAutomationExecutionInput, _ ...request.Option) (*ssm.StopAutomationExecutionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopAutomationExecution cancelled", ctx.Err())
	default:
		return d.StopAutomationExecution(in)
	}
}

func (d *SSMDouble) TerminateSession(i0 *ssm.TerminateSessionInput) (r0 *ssm.TerminateSessionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TerminateSession", i0)
	r0, _ = returns[0].(*ssm.TerminateSessionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) TerminateSessionRequest(i0 *ssm.TerminateSessionInput) (r0 *request.Request, r1 *ssm.TerminateSessionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TerminateSessionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.TerminateSessionOutput)
	return
}

func (d *SSMDouble) TerminateSessionWithContext(i0 context.Context, i1 *ssm.TerminateSessionInput, i2 ...request.Option) (r0 *ssm.TerminateSessionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TerminateSessionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.TerminateSessionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeTerminateSessionWithContext(ctx context.Context, in *ssm.TerminateSessionInput, _ ...request.Option) (*ssm.TerminateSessionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TerminateSession cancelled", ctx.Err())
	default:
		return d.TerminateSession(in)
	}
}

func (d *SSMDouble) UpdateAssociation(i0 *ssm.UpdateAssociationInput) (r0 *ssm.UpdateAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAssociation", i0)
	r0, _ = returns[0].(*ssm.UpdateAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) UpdateAssociationRequest(i0 *ssm.UpdateAssociationInput) (r0 *request.Request, r1 *ssm.UpdateAssociationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAssociationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.UpdateAssociationOutput)
	return
}

func (d *SSMDouble) UpdateAssociationStatus(i0 *ssm.UpdateAssociationStatusInput) (r0 *ssm.UpdateAssociationStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAssociationStatus", i0)
	r0, _ = returns[0].(*ssm.UpdateAssociationStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) UpdateAssociationStatusRequest(i0 *ssm.UpdateAssociationStatusInput) (r0 *request.Request, r1 *ssm.UpdateAssociationStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAssociationStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.UpdateAssociationStatusOutput)
	return
}

func (d *SSMDouble) UpdateAssociationStatusWithContext(i0 context.Context, i1 *ssm.UpdateAssociationStatusInput, i2 ...request.Option) (r0 *ssm.UpdateAssociationStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAssociationStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.UpdateAssociationStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeUpdateAssociationStatusWithContext(ctx context.Context, in *ssm.UpdateAssociationStatusInput, _ ...request.Option) (*ssm.UpdateAssociationStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateAssociationStatus cancelled", ctx.Err())
	default:
		return d.UpdateAssociationStatus(in)
	}
}

func (d *SSMDouble) UpdateAssociationWithContext(i0 context.Context, i1 *ssm.UpdateAssociationInput, i2 ...request.Option) (r0 *ssm.UpdateAssociationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAssociationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.UpdateAssociationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeUpdateAssociationWithContext(ctx context.Context, in *ssm.UpdateAssociationInput, _ ...request.Option) (*ssm.UpdateAssociationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateAssociation cancelled", ctx.Err())
	default:
		return d.UpdateAssociation(in)
	}
}

func (d *SSMDouble) UpdateDocument(i0 *ssm.UpdateDocumentInput) (r0 *ssm.UpdateDocumentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDocument", i0)
	r0, _ = returns[0].(*ssm.UpdateDocumentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) UpdateDocumentDefaultVersion(i0 *ssm.UpdateDocumentDefaultVersionInput) (r0 *ssm.UpdateDocumentDefaultVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDocumentDefaultVersion", i0)
	r0, _ = returns[0].(*ssm.UpdateDocumentDefaultVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) UpdateDocumentDefaultVersionRequest(i0 *ssm.UpdateDocumentDefaultVersionInput) (r0 *request.Request, r1 *ssm.UpdateDocumentDefaultVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDocumentDefaultVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.UpdateDocumentDefaultVersionOutput)
	return
}

func (d *SSMDouble) UpdateDocumentDefaultVersionWithContext(i0 context.Context, i1 *ssm.UpdateDocumentDefaultVersionInput, i2 ...request.Option) (r0 *ssm.UpdateDocumentDefaultVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDocumentDefaultVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.UpdateDocumentDefaultVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeUpdateDocumentDefaultVersionWithContext(ctx context.Context, in *ssm.UpdateDocumentDefaultVersionInput, _ ...request.Option) (*ssm.UpdateDocumentDefaultVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDocumentDefaultVersion cancelled", ctx.Err())
	default:
		return d.UpdateDocumentDefaultVersion(in)
	}
}

func (d *SSMDouble) UpdateDocumentRequest(i0 *ssm.UpdateDocumentInput) (r0 *request.Request, r1 *ssm.UpdateDocumentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDocumentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.UpdateDocumentOutput)
	return
}

func (d *SSMDouble) UpdateDocumentWithContext(i0 context.Context, i1 *ssm.UpdateDocumentInput, i2 ...request.Option) (r0 *ssm.UpdateDocumentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateDocumentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.UpdateDocumentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeUpdateDocumentWithContext(ctx context.Context, in *ssm.UpdateDocumentInput, _ ...request.Option) (*ssm.UpdateDocumentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateDocument cancelled", ctx.Err())
	default:
		return d.UpdateDocument(in)
	}
}

func (d *SSMDouble) UpdateMaintenanceWindow(i0 *ssm.UpdateMaintenanceWindowInput) (r0 *ssm.UpdateMaintenanceWindowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMaintenanceWindow", i0)
	r0, _ = returns[0].(*ssm.UpdateMaintenanceWindowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) UpdateMaintenanceWindowRequest(i0 *ssm.UpdateMaintenanceWindowInput) (r0 *request.Request, r1 *ssm.UpdateMaintenanceWindowOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMaintenanceWindowRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.UpdateMaintenanceWindowOutput)
	return
}

func (d *SSMDouble) UpdateMaintenanceWindowTarget(i0 *ssm.UpdateMaintenanceWindowTargetInput) (r0 *ssm.UpdateMaintenanceWindowTargetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMaintenanceWindowTarget", i0)
	r0, _ = returns[0].(*ssm.UpdateMaintenanceWindowTargetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) UpdateMaintenanceWindowTargetRequest(i0 *ssm.UpdateMaintenanceWindowTargetInput) (r0 *request.Request, r1 *ssm.UpdateMaintenanceWindowTargetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMaintenanceWindowTargetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.UpdateMaintenanceWindowTargetOutput)
	return
}

func (d *SSMDouble) UpdateMaintenanceWindowTargetWithContext(i0 context.Context, i1 *ssm.UpdateMaintenanceWindowTargetInput, i2 ...request.Option) (r0 *ssm.UpdateMaintenanceWindowTargetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMaintenanceWindowTargetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.UpdateMaintenanceWindowTargetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeUpdateMaintenanceWindowTargetWithContext(ctx context.Context, in *ssm.UpdateMaintenanceWindowTargetInput, _ ...request.Option) (*ssm.UpdateMaintenanceWindowTargetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateMaintenanceWindowTarget cancelled", ctx.Err())
	default:
		return d.UpdateMaintenanceWindowTarget(in)
	}
}

func (d *SSMDouble) UpdateMaintenanceWindowTask(i0 *ssm.UpdateMaintenanceWindowTaskInput) (r0 *ssm.UpdateMaintenanceWindowTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMaintenanceWindowTask", i0)
	r0, _ = returns[0].(*ssm.UpdateMaintenanceWindowTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) UpdateMaintenanceWindowTaskRequest(i0 *ssm.UpdateMaintenanceWindowTaskInput) (r0 *request.Request, r1 *ssm.UpdateMaintenanceWindowTaskOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMaintenanceWindowTaskRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.UpdateMaintenanceWindowTaskOutput)
	return
}

func (d *SSMDouble) UpdateMaintenanceWindowTaskWithContext(i0 context.Context, i1 *ssm.UpdateMaintenanceWindowTaskInput, i2 ...request.Option) (r0 *ssm.UpdateMaintenanceWindowTaskOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMaintenanceWindowTaskWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.UpdateMaintenanceWindowTaskOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeUpdateMaintenanceWindowTaskWithContext(ctx context.Context, in *ssm.UpdateMaintenanceWindowTaskInput, _ ...request.Option) (*ssm.UpdateMaintenanceWindowTaskOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateMaintenanceWindowTask cancelled", ctx.Err())
	default:
		return d.UpdateMaintenanceWindowTask(in)
	}
}

func (d *SSMDouble) UpdateMaintenanceWindowWithContext(i0 context.Context, i1 *ssm.UpdateMaintenanceWindowInput, i2 ...request.Option) (r0 *ssm.UpdateMaintenanceWindowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateMaintenanceWindowWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.UpdateMaintenanceWindowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeUpdateMaintenanceWindowWithContext(ctx context.Context, in *ssm.UpdateMaintenanceWindowInput, _ ...request.Option) (*ssm.UpdateMaintenanceWindowOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateMaintenanceWindow cancelled", ctx.Err())
	default:
		return d.UpdateMaintenanceWindow(in)
	}
}

func (d *SSMDouble) UpdateManagedInstanceRole(i0 *ssm.UpdateManagedInstanceRoleInput) (r0 *ssm.UpdateManagedInstanceRoleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateManagedInstanceRole", i0)
	r0, _ = returns[0].(*ssm.UpdateManagedInstanceRoleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) UpdateManagedInstanceRoleRequest(i0 *ssm.UpdateManagedInstanceRoleInput) (r0 *request.Request, r1 *ssm.UpdateManagedInstanceRoleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateManagedInstanceRoleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.UpdateManagedInstanceRoleOutput)
	return
}

func (d *SSMDouble) UpdateManagedInstanceRoleWithContext(i0 context.Context, i1 *ssm.UpdateManagedInstanceRoleInput, i2 ...request.Option) (r0 *ssm.UpdateManagedInstanceRoleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateManagedInstanceRoleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.UpdateManagedInstanceRoleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeUpdateManagedInstanceRoleWithContext(ctx context.Context, in *ssm.UpdateManagedInstanceRoleInput, _ ...request.Option) (*ssm.UpdateManagedInstanceRoleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateManagedInstanceRole cancelled", ctx.Err())
	default:
		return d.UpdateManagedInstanceRole(in)
	}
}

func (d *SSMDouble) UpdateOpsItem(i0 *ssm.UpdateOpsItemInput) (r0 *ssm.UpdateOpsItemOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateOpsItem", i0)
	r0, _ = returns[0].(*ssm.UpdateOpsItemOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) UpdateOpsItemRequest(i0 *ssm.UpdateOpsItemInput) (r0 *request.Request, r1 *ssm.UpdateOpsItemOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateOpsItemRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.UpdateOpsItemOutput)
	return
}

func (d *SSMDouble) UpdateOpsItemWithContext(i0 context.Context, i1 *ssm.UpdateOpsItemInput, i2 ...request.Option) (r0 *ssm.UpdateOpsItemOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateOpsItemWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.UpdateOpsItemOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeUpdateOpsItemWithContext(ctx context.Context, in *ssm.UpdateOpsItemInput, _ ...request.Option) (*ssm.UpdateOpsItemOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateOpsItem cancelled", ctx.Err())
	default:
		return d.UpdateOpsItem(in)
	}
}

func (d *SSMDouble) UpdatePatchBaseline(i0 *ssm.UpdatePatchBaselineInput) (r0 *ssm.UpdatePatchBaselineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePatchBaseline", i0)
	r0, _ = returns[0].(*ssm.UpdatePatchBaselineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) UpdatePatchBaselineRequest(i0 *ssm.UpdatePatchBaselineInput) (r0 *request.Request, r1 *ssm.UpdatePatchBaselineOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePatchBaselineRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.UpdatePatchBaselineOutput)
	return
}

func (d *SSMDouble) UpdatePatchBaselineWithContext(i0 context.Context, i1 *ssm.UpdatePatchBaselineInput, i2 ...request.Option) (r0 *ssm.UpdatePatchBaselineOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdatePatchBaselineWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.UpdatePatchBaselineOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeUpdatePatchBaselineWithContext(ctx context.Context, in *ssm.UpdatePatchBaselineInput, _ ...request.Option) (*ssm.UpdatePatchBaselineOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdatePatchBaseline cancelled", ctx.Err())
	default:
		return d.UpdatePatchBaseline(in)
	}
}

func (d *SSMDouble) UpdateResourceDataSync(i0 *ssm.UpdateResourceDataSyncInput) (r0 *ssm.UpdateResourceDataSyncOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateResourceDataSync", i0)
	r0, _ = returns[0].(*ssm.UpdateResourceDataSyncOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) UpdateResourceDataSyncRequest(i0 *ssm.UpdateResourceDataSyncInput) (r0 *request.Request, r1 *ssm.UpdateResourceDataSyncOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateResourceDataSyncRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.UpdateResourceDataSyncOutput)
	return
}

func (d *SSMDouble) UpdateResourceDataSyncWithContext(i0 context.Context, i1 *ssm.UpdateResourceDataSyncInput, i2 ...request.Option) (r0 *ssm.UpdateResourceDataSyncOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateResourceDataSyncWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.UpdateResourceDataSyncOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeUpdateResourceDataSyncWithContext(ctx context.Context, in *ssm.UpdateResourceDataSyncInput, _ ...request.Option) (*ssm.UpdateResourceDataSyncOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateResourceDataSync cancelled", ctx.Err())
	default:
		return d.UpdateResourceDataSync(in)
	}
}

func (d *SSMDouble) UpdateServiceSetting(i0 *ssm.UpdateServiceSettingInput) (r0 *ssm.UpdateServiceSettingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateServiceSetting", i0)
	r0, _ = returns[0].(*ssm.UpdateServiceSettingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) UpdateServiceSettingRequest(i0 *ssm.UpdateServiceSettingInput) (r0 *request.Request, r1 *ssm.UpdateServiceSettingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateServiceSettingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ssm.UpdateServiceSettingOutput)
	return
}

func (d *SSMDouble) UpdateServiceSettingWithContext(i0 context.Context, i1 *ssm.UpdateServiceSettingInput, i2 ...request.Option) (r0 *ssm.UpdateServiceSettingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateServiceSettingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ssm.UpdateServiceSettingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SSMDouble) fakeUpdateServiceSettingWithContext(ctx context.Context, in *ssm.UpdateServiceSettingInput, _ ...request.Option) (*ssm.UpdateServiceSettingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateServiceSetting cancelled", ctx.Err())
	default:
		return d.UpdateServiceSetting(in)
	}
}
