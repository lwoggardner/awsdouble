// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:11:40+11:00

// Package cloudtraildouble provides a TestDouble implementation of cloudtrailiface.CloudTrailAPI
package cloudtraildouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/cloudtrail"
	"github.com/aws/aws-sdk-go/service/cloudtrail/cloudtrailiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// CloudTrailDouble is TestDouble for cloudtrailiface.CloudTrailAPI
type CloudTrailDouble struct {
	cloudtrailiface.CloudTrailAPI
	*awsdouble.AWSTestDouble
}

// Constructor for CloudTrailDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *CloudTrailDouble {
	result := &CloudTrailDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*cloudtrailiface.CloudTrailAPI)(nil), configurators...)
	return result
}

func (d *CloudTrailDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *CloudTrailDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AddTagsWithContext":
		return m.Fake(d.fakeAddTagsWithContext)

	case "CreateTrailWithContext":
		return m.Fake(d.fakeCreateTrailWithContext)

	case "DeleteTrailWithContext":
		return m.Fake(d.fakeDeleteTrailWithContext)

	case "DescribeTrailsWithContext":
		return m.Fake(d.fakeDescribeTrailsWithContext)

	case "GetEventSelectorsWithContext":
		return m.Fake(d.fakeGetEventSelectorsWithContext)

	case "GetInsightSelectorsWithContext":
		return m.Fake(d.fakeGetInsightSelectorsWithContext)

	case "GetTrailStatusWithContext":
		return m.Fake(d.fakeGetTrailStatusWithContext)

	case "GetTrailWithContext":
		return m.Fake(d.fakeGetTrailWithContext)

	case "ListPublicKeysPages":
		return m.Fake(d.fakeListPublicKeysPages)

	case "ListPublicKeysPagesWithContext":
		return m.Fake(d.fakeListPublicKeysPagesWithContext)

	case "ListPublicKeysWithContext":
		return m.Fake(d.fakeListPublicKeysWithContext)

	case "ListTagsPages":
		return m.Fake(d.fakeListTagsPages)

	case "ListTagsPagesWithContext":
		return m.Fake(d.fakeListTagsPagesWithContext)

	case "ListTagsWithContext":
		return m.Fake(d.fakeListTagsWithContext)

	case "ListTrailsPages":
		return m.Fake(d.fakeListTrailsPages)

	case "ListTrailsPagesWithContext":
		return m.Fake(d.fakeListTrailsPagesWithContext)

	case "ListTrailsWithContext":
		return m.Fake(d.fakeListTrailsWithContext)

	case "LookupEventsPages":
		return m.Fake(d.fakeLookupEventsPages)

	case "LookupEventsPagesWithContext":
		return m.Fake(d.fakeLookupEventsPagesWithContext)

	case "LookupEventsWithContext":
		return m.Fake(d.fakeLookupEventsWithContext)

	case "PutEventSelectorsWithContext":
		return m.Fake(d.fakePutEventSelectorsWithContext)

	case "PutInsightSelectorsWithContext":
		return m.Fake(d.fakePutInsightSelectorsWithContext)

	case "RemoveTagsWithContext":
		return m.Fake(d.fakeRemoveTagsWithContext)

	case "StartLoggingWithContext":
		return m.Fake(d.fakeStartLoggingWithContext)

	case "StopLoggingWithContext":
		return m.Fake(d.fakeStopLoggingWithContext)

	case "UpdateTrailWithContext":
		return m.Fake(d.fakeUpdateTrailWithContext)

	default:
		return nil
	}
}

func (d *CloudTrailDouble) AddTags(i0 *cloudtrail.AddTagsInput) (r0 *cloudtrail.AddTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTags", i0)
	r0, _ = returns[0].(*cloudtrail.AddTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudTrailDouble) AddTagsRequest(i0 *cloudtrail.AddTagsInput) (r0 *request.Request, r1 *cloudtrail.AddTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudtrail.AddTagsOutput)
	return
}

func (d *CloudTrailDouble) AddTagsWithContext(i0 context.Context, i1 *cloudtrail.AddTagsInput, i2 ...request.Option) (r0 *cloudtrail.AddTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudtrail.AddTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudTrailDouble) fakeAddTagsWithContext(ctx context.Context, in *cloudtrail.AddTagsInput, _ ...request.Option) (*cloudtrail.AddTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddTags cancelled", ctx.Err())
	default:
		return d.AddTags(in)
	}
}

func (d *CloudTrailDouble) CreateTrail(i0 *cloudtrail.CreateTrailInput) (r0 *cloudtrail.CreateTrailOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTrail", i0)
	r0, _ = returns[0].(*cloudtrail.CreateTrailOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudTrailDouble) CreateTrailRequest(i0 *cloudtrail.CreateTrailInput) (r0 *request.Request, r1 *cloudtrail.CreateTrailOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTrailRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudtrail.CreateTrailOutput)
	return
}

func (d *CloudTrailDouble) CreateTrailWithContext(i0 context.Context, i1 *cloudtrail.CreateTrailInput, i2 ...request.Option) (r0 *cloudtrail.CreateTrailOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTrailWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudtrail.CreateTrailOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudTrailDouble) fakeCreateTrailWithContext(ctx context.Context, in *cloudtrail.CreateTrailInput, _ ...request.Option) (*cloudtrail.CreateTrailOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTrail cancelled", ctx.Err())
	default:
		return d.CreateTrail(in)
	}
}

func (d *CloudTrailDouble) DeleteTrail(i0 *cloudtrail.DeleteTrailInput) (r0 *cloudtrail.DeleteTrailOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTrail", i0)
	r0, _ = returns[0].(*cloudtrail.DeleteTrailOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudTrailDouble) DeleteTrailRequest(i0 *cloudtrail.DeleteTrailInput) (r0 *request.Request, r1 *cloudtrail.DeleteTrailOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTrailRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudtrail.DeleteTrailOutput)
	return
}

func (d *CloudTrailDouble) DeleteTrailWithContext(i0 context.Context, i1 *cloudtrail.DeleteTrailInput, i2 ...request.Option) (r0 *cloudtrail.DeleteTrailOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTrailWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudtrail.DeleteTrailOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudTrailDouble) fakeDeleteTrailWithContext(ctx context.Context, in *cloudtrail.DeleteTrailInput, _ ...request.Option) (*cloudtrail.DeleteTrailOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTrail cancelled", ctx.Err())
	default:
		return d.DeleteTrail(in)
	}
}

func (d *CloudTrailDouble) DescribeTrails(i0 *cloudtrail.DescribeTrailsInput) (r0 *cloudtrail.DescribeTrailsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTrails", i0)
	r0, _ = returns[0].(*cloudtrail.DescribeTrailsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudTrailDouble) DescribeTrailsRequest(i0 *cloudtrail.DescribeTrailsInput) (r0 *request.Request, r1 *cloudtrail.DescribeTrailsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTrailsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudtrail.DescribeTrailsOutput)
	return
}

func (d *CloudTrailDouble) DescribeTrailsWithContext(i0 context.Context, i1 *cloudtrail.DescribeTrailsInput, i2 ...request.Option) (r0 *cloudtrail.DescribeTrailsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTrailsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudtrail.DescribeTrailsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudTrailDouble) fakeDescribeTrailsWithContext(ctx context.Context, in *cloudtrail.DescribeTrailsInput, _ ...request.Option) (*cloudtrail.DescribeTrailsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTrails cancelled", ctx.Err())
	default:
		return d.DescribeTrails(in)
	}
}

func (d *CloudTrailDouble) GetEventSelectors(i0 *cloudtrail.GetEventSelectorsInput) (r0 *cloudtrail.GetEventSelectorsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetEventSelectors", i0)
	r0, _ = returns[0].(*cloudtrail.GetEventSelectorsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudTrailDouble) GetEventSelectorsRequest(i0 *cloudtrail.GetEventSelectorsInput) (r0 *request.Request, r1 *cloudtrail.GetEventSelectorsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetEventSelectorsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudtrail.GetEventSelectorsOutput)
	return
}

func (d *CloudTrailDouble) GetEventSelectorsWithContext(i0 context.Context, i1 *cloudtrail.GetEventSelectorsInput, i2 ...request.Option) (r0 *cloudtrail.GetEventSelectorsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetEventSelectorsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudtrail.GetEventSelectorsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudTrailDouble) fakeGetEventSelectorsWithContext(ctx context.Context, in *cloudtrail.GetEventSelectorsInput, _ ...request.Option) (*cloudtrail.GetEventSelectorsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetEventSelectors cancelled", ctx.Err())
	default:
		return d.GetEventSelectors(in)
	}
}

func (d *CloudTrailDouble) GetInsightSelectors(i0 *cloudtrail.GetInsightSelectorsInput) (r0 *cloudtrail.GetInsightSelectorsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInsightSelectors", i0)
	r0, _ = returns[0].(*cloudtrail.GetInsightSelectorsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudTrailDouble) GetInsightSelectorsRequest(i0 *cloudtrail.GetInsightSelectorsInput) (r0 *request.Request, r1 *cloudtrail.GetInsightSelectorsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInsightSelectorsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudtrail.GetInsightSelectorsOutput)
	return
}

func (d *CloudTrailDouble) GetInsightSelectorsWithContext(i0 context.Context, i1 *cloudtrail.GetInsightSelectorsInput, i2 ...request.Option) (r0 *cloudtrail.GetInsightSelectorsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetInsightSelectorsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudtrail.GetInsightSelectorsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudTrailDouble) fakeGetInsightSelectorsWithContext(ctx context.Context, in *cloudtrail.GetInsightSelectorsInput, _ ...request.Option) (*cloudtrail.GetInsightSelectorsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetInsightSelectors cancelled", ctx.Err())
	default:
		return d.GetInsightSelectors(in)
	}
}

func (d *CloudTrailDouble) GetTrail(i0 *cloudtrail.GetTrailInput) (r0 *cloudtrail.GetTrailOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTrail", i0)
	r0, _ = returns[0].(*cloudtrail.GetTrailOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudTrailDouble) GetTrailRequest(i0 *cloudtrail.GetTrailInput) (r0 *request.Request, r1 *cloudtrail.GetTrailOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTrailRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudtrail.GetTrailOutput)
	return
}

func (d *CloudTrailDouble) GetTrailStatus(i0 *cloudtrail.GetTrailStatusInput) (r0 *cloudtrail.GetTrailStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTrailStatus", i0)
	r0, _ = returns[0].(*cloudtrail.GetTrailStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudTrailDouble) GetTrailStatusRequest(i0 *cloudtrail.GetTrailStatusInput) (r0 *request.Request, r1 *cloudtrail.GetTrailStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTrailStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudtrail.GetTrailStatusOutput)
	return
}

func (d *CloudTrailDouble) GetTrailStatusWithContext(i0 context.Context, i1 *cloudtrail.GetTrailStatusInput, i2 ...request.Option) (r0 *cloudtrail.GetTrailStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTrailStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudtrail.GetTrailStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudTrailDouble) fakeGetTrailStatusWithContext(ctx context.Context, in *cloudtrail.GetTrailStatusInput, _ ...request.Option) (*cloudtrail.GetTrailStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetTrailStatus cancelled", ctx.Err())
	default:
		return d.GetTrailStatus(in)
	}
}

func (d *CloudTrailDouble) GetTrailWithContext(i0 context.Context, i1 *cloudtrail.GetTrailInput, i2 ...request.Option) (r0 *cloudtrail.GetTrailOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTrailWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudtrail.GetTrailOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudTrailDouble) fakeGetTrailWithContext(ctx context.Context, in *cloudtrail.GetTrailInput, _ ...request.Option) (*cloudtrail.GetTrailOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetTrail cancelled", ctx.Err())
	default:
		return d.GetTrail(in)
	}
}

func (d *CloudTrailDouble) ListPublicKeys(i0 *cloudtrail.ListPublicKeysInput) (r0 *cloudtrail.ListPublicKeysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPublicKeys", i0)
	r0, _ = returns[0].(*cloudtrail.ListPublicKeysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudTrailDouble) ListPublicKeysPages(i0 *cloudtrail.ListPublicKeysInput, i1 func(*cloudtrail.ListPublicKeysOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPublicKeysPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudTrailDouble) fakeListPublicKeysPages(in *cloudtrail.ListPublicKeysInput, pager func(*cloudtrail.ListPublicKeysOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListPublicKeys", paginators, in, pager)
}

func (d *CloudTrailDouble) ListPublicKeysPagesWithContext(i0 context.Context, i1 *cloudtrail.ListPublicKeysInput, i2 func(*cloudtrail.ListPublicKeysOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPublicKeysPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudTrailDouble) fakeListPublicKeysPagesWithContext(ctx context.Context, in *cloudtrail.ListPublicKeysInput, pager func(*cloudtrail.ListPublicKeysOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListPublicKeys", paginators, ctx, in, pager, options...)
}

func (d *CloudTrailDouble) ListPublicKeysRequest(i0 *cloudtrail.ListPublicKeysInput) (r0 *request.Request, r1 *cloudtrail.ListPublicKeysOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPublicKeysRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudtrail.ListPublicKeysOutput)
	return
}

func (d *CloudTrailDouble) ListPublicKeysWithContext(i0 context.Context, i1 *cloudtrail.ListPublicKeysInput, i2 ...request.Option) (r0 *cloudtrail.ListPublicKeysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPublicKeysWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudtrail.ListPublicKeysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudTrailDouble) fakeListPublicKeysWithContext(ctx context.Context, in *cloudtrail.ListPublicKeysInput, _ ...request.Option) (*cloudtrail.ListPublicKeysOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListPublicKeys cancelled", ctx.Err())
	default:
		return d.ListPublicKeys(in)
	}
}

func (d *CloudTrailDouble) ListTags(i0 *cloudtrail.ListTagsInput) (r0 *cloudtrail.ListTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTags", i0)
	r0, _ = returns[0].(*cloudtrail.ListTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudTrailDouble) ListTagsPages(i0 *cloudtrail.ListTagsInput, i1 func(*cloudtrail.ListTagsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudTrailDouble) fakeListTagsPages(in *cloudtrail.ListTagsInput, pager func(*cloudtrail.ListTagsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTags", paginators, in, pager)
}

func (d *CloudTrailDouble) ListTagsPagesWithContext(i0 context.Context, i1 *cloudtrail.ListTagsInput, i2 func(*cloudtrail.ListTagsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudTrailDouble) fakeListTagsPagesWithContext(ctx context.Context, in *cloudtrail.ListTagsInput, pager func(*cloudtrail.ListTagsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTags", paginators, ctx, in, pager, options...)
}

func (d *CloudTrailDouble) ListTagsRequest(i0 *cloudtrail.ListTagsInput) (r0 *request.Request, r1 *cloudtrail.ListTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudtrail.ListTagsOutput)
	return
}

func (d *CloudTrailDouble) ListTagsWithContext(i0 context.Context, i1 *cloudtrail.ListTagsInput, i2 ...request.Option) (r0 *cloudtrail.ListTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudtrail.ListTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudTrailDouble) fakeListTagsWithContext(ctx context.Context, in *cloudtrail.ListTagsInput, _ ...request.Option) (*cloudtrail.ListTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTags cancelled", ctx.Err())
	default:
		return d.ListTags(in)
	}
}

func (d *CloudTrailDouble) ListTrails(i0 *cloudtrail.ListTrailsInput) (r0 *cloudtrail.ListTrailsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrails", i0)
	r0, _ = returns[0].(*cloudtrail.ListTrailsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudTrailDouble) ListTrailsPages(i0 *cloudtrail.ListTrailsInput, i1 func(*cloudtrail.ListTrailsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrailsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudTrailDouble) fakeListTrailsPages(in *cloudtrail.ListTrailsInput, pager func(*cloudtrail.ListTrailsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListTrails", paginators, in, pager)
}

func (d *CloudTrailDouble) ListTrailsPagesWithContext(i0 context.Context, i1 *cloudtrail.ListTrailsInput, i2 func(*cloudtrail.ListTrailsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrailsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudTrailDouble) fakeListTrailsPagesWithContext(ctx context.Context, in *cloudtrail.ListTrailsInput, pager func(*cloudtrail.ListTrailsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListTrails", paginators, ctx, in, pager, options...)
}

func (d *CloudTrailDouble) ListTrailsRequest(i0 *cloudtrail.ListTrailsInput) (r0 *request.Request, r1 *cloudtrail.ListTrailsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrailsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudtrail.ListTrailsOutput)
	return
}

func (d *CloudTrailDouble) ListTrailsWithContext(i0 context.Context, i1 *cloudtrail.ListTrailsInput, i2 ...request.Option) (r0 *cloudtrail.ListTrailsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrailsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudtrail.ListTrailsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudTrailDouble) fakeListTrailsWithContext(ctx context.Context, in *cloudtrail.ListTrailsInput, _ ...request.Option) (*cloudtrail.ListTrailsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTrails cancelled", ctx.Err())
	default:
		return d.ListTrails(in)
	}
}

func (d *CloudTrailDouble) LookupEvents(i0 *cloudtrail.LookupEventsInput) (r0 *cloudtrail.LookupEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("LookupEvents", i0)
	r0, _ = returns[0].(*cloudtrail.LookupEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudTrailDouble) LookupEventsPages(i0 *cloudtrail.LookupEventsInput, i1 func(*cloudtrail.LookupEventsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("LookupEventsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudTrailDouble) fakeLookupEventsPages(in *cloudtrail.LookupEventsInput, pager func(*cloudtrail.LookupEventsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("LookupEvents", paginators, in, pager)
}

func (d *CloudTrailDouble) LookupEventsPagesWithContext(i0 context.Context, i1 *cloudtrail.LookupEventsInput, i2 func(*cloudtrail.LookupEventsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("LookupEventsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *CloudTrailDouble) fakeLookupEventsPagesWithContext(ctx context.Context, in *cloudtrail.LookupEventsInput, pager func(*cloudtrail.LookupEventsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("LookupEvents", paginators, ctx, in, pager, options...)
}

func (d *CloudTrailDouble) LookupEventsRequest(i0 *cloudtrail.LookupEventsInput) (r0 *request.Request, r1 *cloudtrail.LookupEventsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("LookupEventsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudtrail.LookupEventsOutput)
	return
}

func (d *CloudTrailDouble) LookupEventsWithContext(i0 context.Context, i1 *cloudtrail.LookupEventsInput, i2 ...request.Option) (r0 *cloudtrail.LookupEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("LookupEventsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudtrail.LookupEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudTrailDouble) fakeLookupEventsWithContext(ctx context.Context, in *cloudtrail.LookupEventsInput, _ ...request.Option) (*cloudtrail.LookupEventsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "LookupEvents cancelled", ctx.Err())
	default:
		return d.LookupEvents(in)
	}
}

func (d *CloudTrailDouble) PutEventSelectors(i0 *cloudtrail.PutEventSelectorsInput) (r0 *cloudtrail.PutEventSelectorsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutEventSelectors", i0)
	r0, _ = returns[0].(*cloudtrail.PutEventSelectorsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudTrailDouble) PutEventSelectorsRequest(i0 *cloudtrail.PutEventSelectorsInput) (r0 *request.Request, r1 *cloudtrail.PutEventSelectorsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutEventSelectorsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudtrail.PutEventSelectorsOutput)
	return
}

func (d *CloudTrailDouble) PutEventSelectorsWithContext(i0 context.Context, i1 *cloudtrail.PutEventSelectorsInput, i2 ...request.Option) (r0 *cloudtrail.PutEventSelectorsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutEventSelectorsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudtrail.PutEventSelectorsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudTrailDouble) fakePutEventSelectorsWithContext(ctx context.Context, in *cloudtrail.PutEventSelectorsInput, _ ...request.Option) (*cloudtrail.PutEventSelectorsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutEventSelectors cancelled", ctx.Err())
	default:
		return d.PutEventSelectors(in)
	}
}

func (d *CloudTrailDouble) PutInsightSelectors(i0 *cloudtrail.PutInsightSelectorsInput) (r0 *cloudtrail.PutInsightSelectorsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutInsightSelectors", i0)
	r0, _ = returns[0].(*cloudtrail.PutInsightSelectorsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudTrailDouble) PutInsightSelectorsRequest(i0 *cloudtrail.PutInsightSelectorsInput) (r0 *request.Request, r1 *cloudtrail.PutInsightSelectorsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutInsightSelectorsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudtrail.PutInsightSelectorsOutput)
	return
}

func (d *CloudTrailDouble) PutInsightSelectorsWithContext(i0 context.Context, i1 *cloudtrail.PutInsightSelectorsInput, i2 ...request.Option) (r0 *cloudtrail.PutInsightSelectorsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutInsightSelectorsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudtrail.PutInsightSelectorsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudTrailDouble) fakePutInsightSelectorsWithContext(ctx context.Context, in *cloudtrail.PutInsightSelectorsInput, _ ...request.Option) (*cloudtrail.PutInsightSelectorsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutInsightSelectors cancelled", ctx.Err())
	default:
		return d.PutInsightSelectors(in)
	}
}

func (d *CloudTrailDouble) RemoveTags(i0 *cloudtrail.RemoveTagsInput) (r0 *cloudtrail.RemoveTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTags", i0)
	r0, _ = returns[0].(*cloudtrail.RemoveTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudTrailDouble) RemoveTagsRequest(i0 *cloudtrail.RemoveTagsInput) (r0 *request.Request, r1 *cloudtrail.RemoveTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudtrail.RemoveTagsOutput)
	return
}

func (d *CloudTrailDouble) RemoveTagsWithContext(i0 context.Context, i1 *cloudtrail.RemoveTagsInput, i2 ...request.Option) (r0 *cloudtrail.RemoveTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudtrail.RemoveTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudTrailDouble) fakeRemoveTagsWithContext(ctx context.Context, in *cloudtrail.RemoveTagsInput, _ ...request.Option) (*cloudtrail.RemoveTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveTags cancelled", ctx.Err())
	default:
		return d.RemoveTags(in)
	}
}

func (d *CloudTrailDouble) StartLogging(i0 *cloudtrail.StartLoggingInput) (r0 *cloudtrail.StartLoggingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartLogging", i0)
	r0, _ = returns[0].(*cloudtrail.StartLoggingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudTrailDouble) StartLoggingRequest(i0 *cloudtrail.StartLoggingInput) (r0 *request.Request, r1 *cloudtrail.StartLoggingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartLoggingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudtrail.StartLoggingOutput)
	return
}

func (d *CloudTrailDouble) StartLoggingWithContext(i0 context.Context, i1 *cloudtrail.StartLoggingInput, i2 ...request.Option) (r0 *cloudtrail.StartLoggingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartLoggingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudtrail.StartLoggingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudTrailDouble) fakeStartLoggingWithContext(ctx context.Context, in *cloudtrail.StartLoggingInput, _ ...request.Option) (*cloudtrail.StartLoggingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartLogging cancelled", ctx.Err())
	default:
		return d.StartLogging(in)
	}
}

func (d *CloudTrailDouble) StopLogging(i0 *cloudtrail.StopLoggingInput) (r0 *cloudtrail.StopLoggingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopLogging", i0)
	r0, _ = returns[0].(*cloudtrail.StopLoggingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudTrailDouble) StopLoggingRequest(i0 *cloudtrail.StopLoggingInput) (r0 *request.Request, r1 *cloudtrail.StopLoggingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopLoggingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudtrail.StopLoggingOutput)
	return
}

func (d *CloudTrailDouble) StopLoggingWithContext(i0 context.Context, i1 *cloudtrail.StopLoggingInput, i2 ...request.Option) (r0 *cloudtrail.StopLoggingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopLoggingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudtrail.StopLoggingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudTrailDouble) fakeStopLoggingWithContext(ctx context.Context, in *cloudtrail.StopLoggingInput, _ ...request.Option) (*cloudtrail.StopLoggingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopLogging cancelled", ctx.Err())
	default:
		return d.StopLogging(in)
	}
}

func (d *CloudTrailDouble) UpdateTrail(i0 *cloudtrail.UpdateTrailInput) (r0 *cloudtrail.UpdateTrailOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTrail", i0)
	r0, _ = returns[0].(*cloudtrail.UpdateTrailOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudTrailDouble) UpdateTrailRequest(i0 *cloudtrail.UpdateTrailInput) (r0 *request.Request, r1 *cloudtrail.UpdateTrailOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTrailRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*cloudtrail.UpdateTrailOutput)
	return
}

func (d *CloudTrailDouble) UpdateTrailWithContext(i0 context.Context, i1 *cloudtrail.UpdateTrailInput, i2 ...request.Option) (r0 *cloudtrail.UpdateTrailOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTrailWithContext", i0, i1, i2)
	r0, _ = returns[0].(*cloudtrail.UpdateTrailOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *CloudTrailDouble) fakeUpdateTrailWithContext(ctx context.Context, in *cloudtrail.UpdateTrailInput, _ ...request.Option) (*cloudtrail.UpdateTrailOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateTrail cancelled", ctx.Err())
	default:
		return d.UpdateTrail(in)
	}
}
