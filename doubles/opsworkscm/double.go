// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:14:13+11:00

// Package opsworkscmdouble provides a TestDouble implementation of opsworkscmiface.OpsWorksCMAPI
package opsworkscmdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/opsworkscm"
	"github.com/aws/aws-sdk-go/service/opsworkscm/opsworkscmiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// OpsWorksCMDouble is TestDouble for opsworkscmiface.OpsWorksCMAPI
type OpsWorksCMDouble struct {
	opsworkscmiface.OpsWorksCMAPI
	*awsdouble.AWSTestDouble
}

// Constructor for OpsWorksCMDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *OpsWorksCMDouble {
	result := &OpsWorksCMDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*opsworkscmiface.OpsWorksCMAPI)(nil), configurators...)
	return result
}

func (d *OpsWorksCMDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *OpsWorksCMDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AssociateNodeWithContext":
		return m.Fake(d.fakeAssociateNodeWithContext)

	case "CreateBackupWithContext":
		return m.Fake(d.fakeCreateBackupWithContext)

	case "CreateServerWithContext":
		return m.Fake(d.fakeCreateServerWithContext)

	case "DeleteBackupWithContext":
		return m.Fake(d.fakeDeleteBackupWithContext)

	case "DeleteServerWithContext":
		return m.Fake(d.fakeDeleteServerWithContext)

	case "DescribeAccountAttributesWithContext":
		return m.Fake(d.fakeDescribeAccountAttributesWithContext)

	case "DescribeBackupsWithContext":
		return m.Fake(d.fakeDescribeBackupsWithContext)

	case "DescribeEventsWithContext":
		return m.Fake(d.fakeDescribeEventsWithContext)

	case "DescribeNodeAssociationStatusWithContext":
		return m.Fake(d.fakeDescribeNodeAssociationStatusWithContext)

	case "DescribeServersWithContext":
		return m.Fake(d.fakeDescribeServersWithContext)

	case "DisassociateNodeWithContext":
		return m.Fake(d.fakeDisassociateNodeWithContext)

	case "ExportServerEngineAttributeWithContext":
		return m.Fake(d.fakeExportServerEngineAttributeWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "RestoreServerWithContext":
		return m.Fake(d.fakeRestoreServerWithContext)

	case "StartMaintenanceWithContext":
		return m.Fake(d.fakeStartMaintenanceWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateServerEngineAttributesWithContext":
		return m.Fake(d.fakeUpdateServerEngineAttributesWithContext)

	case "UpdateServerWithContext":
		return m.Fake(d.fakeUpdateServerWithContext)

	case "WaitUntilNodeAssociated":
		return m.Fake(d.fakeWaitUntilNodeAssociated)

	case "WaitUntilNodeAssociatedWithContext":
		return m.Fake(d.fakeWaitUntilNodeAssociatedWithContext)

	default:
		return nil
	}
}

func (d *OpsWorksCMDouble) AssociateNode(i0 *opsworkscm.AssociateNodeInput) (r0 *opsworkscm.AssociateNodeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateNode", i0)
	r0, _ = returns[0].(*opsworkscm.AssociateNodeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) AssociateNodeRequest(i0 *opsworkscm.AssociateNodeInput) (r0 *request.Request, r1 *opsworkscm.AssociateNodeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateNodeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworkscm.AssociateNodeOutput)
	return
}

func (d *OpsWorksCMDouble) AssociateNodeWithContext(i0 context.Context, i1 *opsworkscm.AssociateNodeInput, i2 ...request.Option) (r0 *opsworkscm.AssociateNodeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateNodeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworkscm.AssociateNodeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) fakeAssociateNodeWithContext(ctx context.Context, in *opsworkscm.AssociateNodeInput, _ ...request.Option) (*opsworkscm.AssociateNodeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateNode cancelled", ctx.Err())
	default:
		return d.AssociateNode(in)
	}
}

func (d *OpsWorksCMDouble) CreateBackup(i0 *opsworkscm.CreateBackupInput) (r0 *opsworkscm.CreateBackupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBackup", i0)
	r0, _ = returns[0].(*opsworkscm.CreateBackupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) CreateBackupRequest(i0 *opsworkscm.CreateBackupInput) (r0 *request.Request, r1 *opsworkscm.CreateBackupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBackupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworkscm.CreateBackupOutput)
	return
}

func (d *OpsWorksCMDouble) CreateBackupWithContext(i0 context.Context, i1 *opsworkscm.CreateBackupInput, i2 ...request.Option) (r0 *opsworkscm.CreateBackupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateBackupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworkscm.CreateBackupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) fakeCreateBackupWithContext(ctx context.Context, in *opsworkscm.CreateBackupInput, _ ...request.Option) (*opsworkscm.CreateBackupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateBackup cancelled", ctx.Err())
	default:
		return d.CreateBackup(in)
	}
}

func (d *OpsWorksCMDouble) CreateServer(i0 *opsworkscm.CreateServerInput) (r0 *opsworkscm.CreateServerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateServer", i0)
	r0, _ = returns[0].(*opsworkscm.CreateServerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) CreateServerRequest(i0 *opsworkscm.CreateServerInput) (r0 *request.Request, r1 *opsworkscm.CreateServerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateServerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworkscm.CreateServerOutput)
	return
}

func (d *OpsWorksCMDouble) CreateServerWithContext(i0 context.Context, i1 *opsworkscm.CreateServerInput, i2 ...request.Option) (r0 *opsworkscm.CreateServerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateServerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworkscm.CreateServerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) fakeCreateServerWithContext(ctx context.Context, in *opsworkscm.CreateServerInput, _ ...request.Option) (*opsworkscm.CreateServerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateServer cancelled", ctx.Err())
	default:
		return d.CreateServer(in)
	}
}

func (d *OpsWorksCMDouble) DeleteBackup(i0 *opsworkscm.DeleteBackupInput) (r0 *opsworkscm.DeleteBackupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBackup", i0)
	r0, _ = returns[0].(*opsworkscm.DeleteBackupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) DeleteBackupRequest(i0 *opsworkscm.DeleteBackupInput) (r0 *request.Request, r1 *opsworkscm.DeleteBackupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBackupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworkscm.DeleteBackupOutput)
	return
}

func (d *OpsWorksCMDouble) DeleteBackupWithContext(i0 context.Context, i1 *opsworkscm.DeleteBackupInput, i2 ...request.Option) (r0 *opsworkscm.DeleteBackupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteBackupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworkscm.DeleteBackupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) fakeDeleteBackupWithContext(ctx context.Context, in *opsworkscm.DeleteBackupInput, _ ...request.Option) (*opsworkscm.DeleteBackupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteBackup cancelled", ctx.Err())
	default:
		return d.DeleteBackup(in)
	}
}

func (d *OpsWorksCMDouble) DeleteServer(i0 *opsworkscm.DeleteServerInput) (r0 *opsworkscm.DeleteServerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteServer", i0)
	r0, _ = returns[0].(*opsworkscm.DeleteServerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) DeleteServerRequest(i0 *opsworkscm.DeleteServerInput) (r0 *request.Request, r1 *opsworkscm.DeleteServerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteServerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworkscm.DeleteServerOutput)
	return
}

func (d *OpsWorksCMDouble) DeleteServerWithContext(i0 context.Context, i1 *opsworkscm.DeleteServerInput, i2 ...request.Option) (r0 *opsworkscm.DeleteServerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteServerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworkscm.DeleteServerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) fakeDeleteServerWithContext(ctx context.Context, in *opsworkscm.DeleteServerInput, _ ...request.Option) (*opsworkscm.DeleteServerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteServer cancelled", ctx.Err())
	default:
		return d.DeleteServer(in)
	}
}

func (d *OpsWorksCMDouble) DescribeAccountAttributes(i0 *opsworkscm.DescribeAccountAttributesInput) (r0 *opsworkscm.DescribeAccountAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAccountAttributes", i0)
	r0, _ = returns[0].(*opsworkscm.DescribeAccountAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) DescribeAccountAttributesRequest(i0 *opsworkscm.DescribeAccountAttributesInput) (r0 *request.Request, r1 *opsworkscm.DescribeAccountAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAccountAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworkscm.DescribeAccountAttributesOutput)
	return
}

func (d *OpsWorksCMDouble) DescribeAccountAttributesWithContext(i0 context.Context, i1 *opsworkscm.DescribeAccountAttributesInput, i2 ...request.Option) (r0 *opsworkscm.DescribeAccountAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAccountAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworkscm.DescribeAccountAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) fakeDescribeAccountAttributesWithContext(ctx context.Context, in *opsworkscm.DescribeAccountAttributesInput, _ ...request.Option) (*opsworkscm.DescribeAccountAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAccountAttributes cancelled", ctx.Err())
	default:
		return d.DescribeAccountAttributes(in)
	}
}

func (d *OpsWorksCMDouble) DescribeBackups(i0 *opsworkscm.DescribeBackupsInput) (r0 *opsworkscm.DescribeBackupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBackups", i0)
	r0, _ = returns[0].(*opsworkscm.DescribeBackupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) DescribeBackupsRequest(i0 *opsworkscm.DescribeBackupsInput) (r0 *request.Request, r1 *opsworkscm.DescribeBackupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBackupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworkscm.DescribeBackupsOutput)
	return
}

func (d *OpsWorksCMDouble) DescribeBackupsWithContext(i0 context.Context, i1 *opsworkscm.DescribeBackupsInput, i2 ...request.Option) (r0 *opsworkscm.DescribeBackupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeBackupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworkscm.DescribeBackupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) fakeDescribeBackupsWithContext(ctx context.Context, in *opsworkscm.DescribeBackupsInput, _ ...request.Option) (*opsworkscm.DescribeBackupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeBackups cancelled", ctx.Err())
	default:
		return d.DescribeBackups(in)
	}
}

func (d *OpsWorksCMDouble) DescribeEvents(i0 *opsworkscm.DescribeEventsInput) (r0 *opsworkscm.DescribeEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEvents", i0)
	r0, _ = returns[0].(*opsworkscm.DescribeEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) DescribeEventsRequest(i0 *opsworkscm.DescribeEventsInput) (r0 *request.Request, r1 *opsworkscm.DescribeEventsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworkscm.DescribeEventsOutput)
	return
}

func (d *OpsWorksCMDouble) DescribeEventsWithContext(i0 context.Context, i1 *opsworkscm.DescribeEventsInput, i2 ...request.Option) (r0 *opsworkscm.DescribeEventsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeEventsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworkscm.DescribeEventsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) fakeDescribeEventsWithContext(ctx context.Context, in *opsworkscm.DescribeEventsInput, _ ...request.Option) (*opsworkscm.DescribeEventsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeEvents cancelled", ctx.Err())
	default:
		return d.DescribeEvents(in)
	}
}

func (d *OpsWorksCMDouble) DescribeNodeAssociationStatus(i0 *opsworkscm.DescribeNodeAssociationStatusInput) (r0 *opsworkscm.DescribeNodeAssociationStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNodeAssociationStatus", i0)
	r0, _ = returns[0].(*opsworkscm.DescribeNodeAssociationStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) DescribeNodeAssociationStatusRequest(i0 *opsworkscm.DescribeNodeAssociationStatusInput) (r0 *request.Request, r1 *opsworkscm.DescribeNodeAssociationStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNodeAssociationStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworkscm.DescribeNodeAssociationStatusOutput)
	return
}

func (d *OpsWorksCMDouble) DescribeNodeAssociationStatusWithContext(i0 context.Context, i1 *opsworkscm.DescribeNodeAssociationStatusInput, i2 ...request.Option) (r0 *opsworkscm.DescribeNodeAssociationStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeNodeAssociationStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworkscm.DescribeNodeAssociationStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) fakeDescribeNodeAssociationStatusWithContext(ctx context.Context, in *opsworkscm.DescribeNodeAssociationStatusInput, _ ...request.Option) (*opsworkscm.DescribeNodeAssociationStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeNodeAssociationStatus cancelled", ctx.Err())
	default:
		return d.DescribeNodeAssociationStatus(in)
	}
}

func (d *OpsWorksCMDouble) DescribeServers(i0 *opsworkscm.DescribeServersInput) (r0 *opsworkscm.DescribeServersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeServers", i0)
	r0, _ = returns[0].(*opsworkscm.DescribeServersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) DescribeServersRequest(i0 *opsworkscm.DescribeServersInput) (r0 *request.Request, r1 *opsworkscm.DescribeServersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeServersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworkscm.DescribeServersOutput)
	return
}

func (d *OpsWorksCMDouble) DescribeServersWithContext(i0 context.Context, i1 *opsworkscm.DescribeServersInput, i2 ...request.Option) (r0 *opsworkscm.DescribeServersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeServersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworkscm.DescribeServersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) fakeDescribeServersWithContext(ctx context.Context, in *opsworkscm.DescribeServersInput, _ ...request.Option) (*opsworkscm.DescribeServersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeServers cancelled", ctx.Err())
	default:
		return d.DescribeServers(in)
	}
}

func (d *OpsWorksCMDouble) DisassociateNode(i0 *opsworkscm.DisassociateNodeInput) (r0 *opsworkscm.DisassociateNodeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateNode", i0)
	r0, _ = returns[0].(*opsworkscm.DisassociateNodeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) DisassociateNodeRequest(i0 *opsworkscm.DisassociateNodeInput) (r0 *request.Request, r1 *opsworkscm.DisassociateNodeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateNodeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworkscm.DisassociateNodeOutput)
	return
}

func (d *OpsWorksCMDouble) DisassociateNodeWithContext(i0 context.Context, i1 *opsworkscm.DisassociateNodeInput, i2 ...request.Option) (r0 *opsworkscm.DisassociateNodeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateNodeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworkscm.DisassociateNodeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) fakeDisassociateNodeWithContext(ctx context.Context, in *opsworkscm.DisassociateNodeInput, _ ...request.Option) (*opsworkscm.DisassociateNodeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateNode cancelled", ctx.Err())
	default:
		return d.DisassociateNode(in)
	}
}

func (d *OpsWorksCMDouble) ExportServerEngineAttribute(i0 *opsworkscm.ExportServerEngineAttributeInput) (r0 *opsworkscm.ExportServerEngineAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExportServerEngineAttribute", i0)
	r0, _ = returns[0].(*opsworkscm.ExportServerEngineAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) ExportServerEngineAttributeRequest(i0 *opsworkscm.ExportServerEngineAttributeInput) (r0 *request.Request, r1 *opsworkscm.ExportServerEngineAttributeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExportServerEngineAttributeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworkscm.ExportServerEngineAttributeOutput)
	return
}

func (d *OpsWorksCMDouble) ExportServerEngineAttributeWithContext(i0 context.Context, i1 *opsworkscm.ExportServerEngineAttributeInput, i2 ...request.Option) (r0 *opsworkscm.ExportServerEngineAttributeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ExportServerEngineAttributeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworkscm.ExportServerEngineAttributeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) fakeExportServerEngineAttributeWithContext(ctx context.Context, in *opsworkscm.ExportServerEngineAttributeInput, _ ...request.Option) (*opsworkscm.ExportServerEngineAttributeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ExportServerEngineAttribute cancelled", ctx.Err())
	default:
		return d.ExportServerEngineAttribute(in)
	}
}

func (d *OpsWorksCMDouble) ListTagsForResource(i0 *opsworkscm.ListTagsForResourceInput) (r0 *opsworkscm.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*opsworkscm.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) ListTagsForResourceRequest(i0 *opsworkscm.ListTagsForResourceInput) (r0 *request.Request, r1 *opsworkscm.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworkscm.ListTagsForResourceOutput)
	return
}

func (d *OpsWorksCMDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *opsworkscm.ListTagsForResourceInput, i2 ...request.Option) (r0 *opsworkscm.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworkscm.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *opsworkscm.ListTagsForResourceInput, _ ...request.Option) (*opsworkscm.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *OpsWorksCMDouble) RestoreServer(i0 *opsworkscm.RestoreServerInput) (r0 *opsworkscm.RestoreServerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreServer", i0)
	r0, _ = returns[0].(*opsworkscm.RestoreServerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) RestoreServerRequest(i0 *opsworkscm.RestoreServerInput) (r0 *request.Request, r1 *opsworkscm.RestoreServerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreServerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworkscm.RestoreServerOutput)
	return
}

func (d *OpsWorksCMDouble) RestoreServerWithContext(i0 context.Context, i1 *opsworkscm.RestoreServerInput, i2 ...request.Option) (r0 *opsworkscm.RestoreServerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreServerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworkscm.RestoreServerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) fakeRestoreServerWithContext(ctx context.Context, in *opsworkscm.RestoreServerInput, _ ...request.Option) (*opsworkscm.RestoreServerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RestoreServer cancelled", ctx.Err())
	default:
		return d.RestoreServer(in)
	}
}

func (d *OpsWorksCMDouble) StartMaintenance(i0 *opsworkscm.StartMaintenanceInput) (r0 *opsworkscm.StartMaintenanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartMaintenance", i0)
	r0, _ = returns[0].(*opsworkscm.StartMaintenanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) StartMaintenanceRequest(i0 *opsworkscm.StartMaintenanceInput) (r0 *request.Request, r1 *opsworkscm.StartMaintenanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartMaintenanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworkscm.StartMaintenanceOutput)
	return
}

func (d *OpsWorksCMDouble) StartMaintenanceWithContext(i0 context.Context, i1 *opsworkscm.StartMaintenanceInput, i2 ...request.Option) (r0 *opsworkscm.StartMaintenanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartMaintenanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworkscm.StartMaintenanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) fakeStartMaintenanceWithContext(ctx context.Context, in *opsworkscm.StartMaintenanceInput, _ ...request.Option) (*opsworkscm.StartMaintenanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartMaintenance cancelled", ctx.Err())
	default:
		return d.StartMaintenance(in)
	}
}

func (d *OpsWorksCMDouble) TagResource(i0 *opsworkscm.TagResourceInput) (r0 *opsworkscm.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*opsworkscm.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) TagResourceRequest(i0 *opsworkscm.TagResourceInput) (r0 *request.Request, r1 *opsworkscm.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworkscm.TagResourceOutput)
	return
}

func (d *OpsWorksCMDouble) TagResourceWithContext(i0 context.Context, i1 *opsworkscm.TagResourceInput, i2 ...request.Option) (r0 *opsworkscm.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworkscm.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) fakeTagResourceWithContext(ctx context.Context, in *opsworkscm.TagResourceInput, _ ...request.Option) (*opsworkscm.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *OpsWorksCMDouble) UntagResource(i0 *opsworkscm.UntagResourceInput) (r0 *opsworkscm.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*opsworkscm.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) UntagResourceRequest(i0 *opsworkscm.UntagResourceInput) (r0 *request.Request, r1 *opsworkscm.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworkscm.UntagResourceOutput)
	return
}

func (d *OpsWorksCMDouble) UntagResourceWithContext(i0 context.Context, i1 *opsworkscm.UntagResourceInput, i2 ...request.Option) (r0 *opsworkscm.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworkscm.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) fakeUntagResourceWithContext(ctx context.Context, in *opsworkscm.UntagResourceInput, _ ...request.Option) (*opsworkscm.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *OpsWorksCMDouble) UpdateServer(i0 *opsworkscm.UpdateServerInput) (r0 *opsworkscm.UpdateServerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateServer", i0)
	r0, _ = returns[0].(*opsworkscm.UpdateServerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) UpdateServerEngineAttributes(i0 *opsworkscm.UpdateServerEngineAttributesInput) (r0 *opsworkscm.UpdateServerEngineAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateServerEngineAttributes", i0)
	r0, _ = returns[0].(*opsworkscm.UpdateServerEngineAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) UpdateServerEngineAttributesRequest(i0 *opsworkscm.UpdateServerEngineAttributesInput) (r0 *request.Request, r1 *opsworkscm.UpdateServerEngineAttributesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateServerEngineAttributesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworkscm.UpdateServerEngineAttributesOutput)
	return
}

func (d *OpsWorksCMDouble) UpdateServerEngineAttributesWithContext(i0 context.Context, i1 *opsworkscm.UpdateServerEngineAttributesInput, i2 ...request.Option) (r0 *opsworkscm.UpdateServerEngineAttributesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateServerEngineAttributesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworkscm.UpdateServerEngineAttributesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) fakeUpdateServerEngineAttributesWithContext(ctx context.Context, in *opsworkscm.UpdateServerEngineAttributesInput, _ ...request.Option) (*opsworkscm.UpdateServerEngineAttributesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateServerEngineAttributes cancelled", ctx.Err())
	default:
		return d.UpdateServerEngineAttributes(in)
	}
}

func (d *OpsWorksCMDouble) UpdateServerRequest(i0 *opsworkscm.UpdateServerInput) (r0 *request.Request, r1 *opsworkscm.UpdateServerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateServerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*opsworkscm.UpdateServerOutput)
	return
}

func (d *OpsWorksCMDouble) UpdateServerWithContext(i0 context.Context, i1 *opsworkscm.UpdateServerInput, i2 ...request.Option) (r0 *opsworkscm.UpdateServerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateServerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*opsworkscm.UpdateServerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *OpsWorksCMDouble) fakeUpdateServerWithContext(ctx context.Context, in *opsworkscm.UpdateServerInput, _ ...request.Option) (*opsworkscm.UpdateServerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateServer cancelled", ctx.Err())
	default:
		return d.UpdateServer(in)
	}
}

func (d *OpsWorksCMDouble) WaitUntilNodeAssociated(i0 *opsworkscm.DescribeNodeAssociationStatusInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilNodeAssociated", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *OpsWorksCMDouble) fakeWaitUntilNodeAssociated(in *opsworkscm.DescribeNodeAssociationStatusInput) error {
	return d.WaitUntil("NodeAssociated", waiters, in)
}

func (d *OpsWorksCMDouble) WaitUntilNodeAssociatedWithContext(i0 context.Context, i1 *opsworkscm.DescribeNodeAssociationStatusInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilNodeAssociatedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *OpsWorksCMDouble) fakeWaitUntilNodeAssociatedWithContext(ctx context.Context, in *opsworkscm.DescribeNodeAssociationStatusInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("NodeAssociated", waiters, ctx, in, waitOption...)
}
